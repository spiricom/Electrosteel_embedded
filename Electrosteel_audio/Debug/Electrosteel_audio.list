
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00019f58  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f950  0801a1f0  0801a1f0  0002a1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029b40  08029b40  00059b30  2**0
                  CONTENTS
  4 .ARM          00000000  08029b40  08029b40  00059b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08029b40  08029b40  00059b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029b40  08029b40  00039b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029b44  08029b44  00039b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a24  20000000  08029b48  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d61c  20000a24  0802a56c  00060a24  2**2
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00009730  00000400  0802a56c  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001e040  2001e040  00059b30  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001e040  2001e040  00059b30  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00059b30  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  00059b5e  2**0
                  CONTENTS, READONLY
 21 .debug_info   00089be3  00000000  00000000  00059ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000a513  00000000  00000000  000e3784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 0003eabd  00000000  00000000  000edc97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00004710  00000000  00000000  0012c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00004648  00000000  00000000  00130e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   000534bb  00000000  00000000  001354ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    00015984  00000000  00000000  00188967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000e314  00000000  00000000  0019e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000a24 	.word	0x20000a24
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801a130 	.word	0x0801a130

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000a28 	.word	0x20000a28
 80002d4:	0801a130 	.word	0x0801a130

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 80002e8:	b410      	push	{r4}
    if (x > 0.0f)
 80002ea:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dc1a      	bgt.n	800032a <arm_atan2_f32+0x42>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 80002f4:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80002f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002fc:	d460      	bmi.n	80003c0 <arm_atan2_f32+0xd8>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 80002fe:	eef5 0a40 	vcmp.f32	s1, #0.0
 8000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000306:	f040 810c 	bne.w	8000522 <arm_atan2_f32+0x23a>
    {
        if (y > 0.0f)
 800030a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000312:	f300 8102 	bgt.w	800051a <arm_atan2_f32+0x232>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 8000316:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031e:	f140 8103 	bpl.w	8000528 <arm_atan2_f32+0x240>
        {
            *result=-PIHALFF32;
 8000322:	4b83      	ldr	r3, [pc, #524]	; (8000530 <arm_atan2_f32+0x248>)
 8000324:	6003      	str	r3, [r0, #0]
            return(ARM_MATH_SUCCESS);
 8000326:	2000      	movs	r0, #0
 8000328:	e030      	b.n	800038c <arm_atan2_f32+0xa4>
        *result=arm_atan_f32(y/x);
 800032a:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 800032e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000336:	d40d      	bmi.n	8000354 <arm_atan2_f32+0x6c>
   int sign=0;
 8000338:	2400      	movs	r4, #0
   if (x > 1.0f)
 800033a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800033e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000346:	dd37      	ble.n	80003b8 <arm_atan2_f32+0xd0>
      x = 1.0f / x;
 8000348:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800034c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800034e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000352:	e00f      	b.n	8000374 <arm_atan2_f32+0x8c>
      x=-x;
 8000354:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 8000358:	2401      	movs	r4, #1
 800035a:	e7ee      	b.n	800033a <arm_atan2_f32+0x52>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800035c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000360:	f1c3 0109 	rsb	r1, r3, #9
 8000364:	4a74      	ldr	r2, [pc, #464]	; (8000538 <arm_atan2_f32+0x250>)
 8000366:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800036a:	ed92 7a00 	vldr	s14, [r2]
 800036e:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000372:	3301      	adds	r3, #1
 8000374:	2b09      	cmp	r3, #9
 8000376:	ddf1      	ble.n	800035c <arm_atan2_f32+0x74>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000378:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800053c <arm_atan2_f32+0x254>
 800037c:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 8000380:	b10c      	cbz	r4, 8000386 <arm_atan2_f32+0x9e>
     res = -res;
 8000382:	eef1 7a67 	vneg.f32	s15, s15
        *result=arm_atan_f32(y/x);
 8000386:	edc0 7a00 	vstr	s15, [r0]
        return(ARM_MATH_SUCCESS);
 800038a:	2000      	movs	r0, #0
    }
    

    return(ARM_MATH_NANINF);

}
 800038c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000390:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000396:	f1c3 0109 	rsb	r1, r3, #9
 800039a:	4a67      	ldr	r2, [pc, #412]	; (8000538 <arm_atan2_f32+0x250>)
 800039c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80003a0:	edd2 6a00 	vldr	s13, [r2]
 80003a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003a8:	3301      	adds	r3, #1
 80003aa:	2b09      	cmp	r3, #9
 80003ac:	ddf1      	ble.n	8000392 <arm_atan2_f32+0xaa>
     res += arm_atan_limited_f32(x);
 80003ae:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000540 <arm_atan2_f32+0x258>
 80003b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003b6:	e7e3      	b.n	8000380 <arm_atan2_f32+0x98>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003b8:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003ba:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000534 <arm_atan2_f32+0x24c>
 80003be:	e7f4      	b.n	80003aa <arm_atan2_f32+0xc2>
        if (y > 0.0f)
 80003c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80003c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c8:	dd4c      	ble.n	8000464 <arm_atan2_f32+0x17c>
           *result=arm_atan_f32(y/x) + PI;
 80003ca:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 80003ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80003d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d6:	d41b      	bmi.n	8000410 <arm_atan2_f32+0x128>
   int sign=0;
 80003d8:	2400      	movs	r4, #0
   if (x > 1.0f)
 80003da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80003de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e6:	dd39      	ble.n	800045c <arm_atan2_f32+0x174>
      x = 1.0f / x;
 80003e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003ec:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003ee:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003f2:	2b09      	cmp	r3, #9
 80003f4:	dc10      	bgt.n	8000418 <arm_atan2_f32+0x130>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003fa:	f1c3 0109 	rsb	r1, r3, #9
 80003fe:	4a4e      	ldr	r2, [pc, #312]	; (8000538 <arm_atan2_f32+0x250>)
 8000400:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000404:	ed92 7a00 	vldr	s14, [r2]
 8000408:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800040c:	3301      	adds	r3, #1
 800040e:	e7f0      	b.n	80003f2 <arm_atan2_f32+0x10a>
      x=-x;
 8000410:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 8000414:	2401      	movs	r4, #1
 8000416:	e7e0      	b.n	80003da <arm_atan2_f32+0xf2>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000418:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800053c <arm_atan2_f32+0x254>
 800041c:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 8000420:	b10c      	cbz	r4, 8000426 <arm_atan2_f32+0x13e>
     res = -res;
 8000422:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 8000426:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000544 <arm_atan2_f32+0x25c>
 800042a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800042e:	edc0 7a00 	vstr	s15, [r0]
        return(ARM_MATH_SUCCESS);
 8000432:	2000      	movs	r0, #0
 8000434:	e7aa      	b.n	800038c <arm_atan2_f32+0xa4>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	f1c3 0109 	rsb	r1, r3, #9
 800043e:	4a3e      	ldr	r2, [pc, #248]	; (8000538 <arm_atan2_f32+0x250>)
 8000440:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000444:	edd2 6a00 	vldr	s13, [r2]
 8000448:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800044c:	3301      	adds	r3, #1
 800044e:	2b09      	cmp	r3, #9
 8000450:	ddf1      	ble.n	8000436 <arm_atan2_f32+0x14e>
     res += arm_atan_limited_f32(x);
 8000452:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000540 <arm_atan2_f32+0x258>
 8000456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800045a:	e7e1      	b.n	8000420 <arm_atan2_f32+0x138>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800045c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800045e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8000534 <arm_atan2_f32+0x24c>
 8000462:	e7f4      	b.n	800044e <arm_atan2_f32+0x166>
        else if (y < 0.0f)
 8000464:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	d406      	bmi.n	800047c <arm_atan2_f32+0x194>
            if (signbit(y))
 800046e:	ee10 3a10 	vmov	r3, s0
 8000472:	2b00      	cmp	r3, #0
 8000474:	da4e      	bge.n	8000514 <arm_atan2_f32+0x22c>
               *result= -PI;
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <arm_atan2_f32+0x260>)
 8000478:	6003      	str	r3, [r0, #0]
 800047a:	e7da      	b.n	8000432 <arm_atan2_f32+0x14a>
           *result=arm_atan_f32(y/x) - PI;
 800047c:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 8000480:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000488:	d40d      	bmi.n	80004a6 <arm_atan2_f32+0x1be>
   int sign=0;
 800048a:	2400      	movs	r4, #0
   if (x > 1.0f)
 800048c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000498:	dd38      	ble.n	800050c <arm_atan2_f32+0x224>
      x = 1.0f / x;
 800049a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800049e:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80004a0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004a4:	e00f      	b.n	80004c6 <arm_atan2_f32+0x1de>
      x=-x;
 80004a6:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7ee      	b.n	800048c <arm_atan2_f32+0x1a4>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004b2:	f1c3 0109 	rsb	r1, r3, #9
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <arm_atan2_f32+0x250>)
 80004b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80004bc:	ed92 7a00 	vldr	s14, [r2]
 80004c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004c4:	3301      	adds	r3, #1
 80004c6:	2b09      	cmp	r3, #9
 80004c8:	ddf1      	ble.n	80004ae <arm_atan2_f32+0x1c6>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800053c <arm_atan2_f32+0x254>
 80004ce:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 80004d2:	b10c      	cbz	r4, 80004d8 <arm_atan2_f32+0x1f0>
     res = -res;
 80004d4:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 80004d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000544 <arm_atan2_f32+0x25c>
 80004dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80004e0:	edc0 7a00 	vstr	s15, [r0]
 80004e4:	e7a5      	b.n	8000432 <arm_atan2_f32+0x14a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004ea:	f1c3 0109 	rsb	r1, r3, #9
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <arm_atan2_f32+0x250>)
 80004f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80004f4:	edd2 6a00 	vldr	s13, [r2]
 80004f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004fc:	3301      	adds	r3, #1
 80004fe:	2b09      	cmp	r3, #9
 8000500:	ddf1      	ble.n	80004e6 <arm_atan2_f32+0x1fe>
     res += arm_atan_limited_f32(x);
 8000502:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000540 <arm_atan2_f32+0x258>
 8000506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800050a:	e7e2      	b.n	80004d2 <arm_atan2_f32+0x1ea>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800050c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800050e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000534 <arm_atan2_f32+0x24c>
 8000512:	e7f4      	b.n	80004fe <arm_atan2_f32+0x216>
               *result= PI;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <arm_atan2_f32+0x264>)
 8000516:	6003      	str	r3, [r0, #0]
 8000518:	e78b      	b.n	8000432 <arm_atan2_f32+0x14a>
            *result=PIHALFF32;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <arm_atan2_f32+0x268>)
 800051c:	6003      	str	r3, [r0, #0]
            return(ARM_MATH_SUCCESS);
 800051e:	2000      	movs	r0, #0
 8000520:	e734      	b.n	800038c <arm_atan2_f32+0xa4>
    return(ARM_MATH_NANINF);
 8000522:	f06f 0003 	mvn.w	r0, #3
 8000526:	e731      	b.n	800038c <arm_atan2_f32+0xa4>
 8000528:	f06f 0003 	mvn.w	r0, #3
 800052c:	e72e      	b.n	800038c <arm_atan2_f32+0xa4>
 800052e:	bf00      	nop
 8000530:	bfc90fdb 	.word	0xbfc90fdb
 8000534:	bd0492a5 	.word	0xbd0492a5
 8000538:	0801a1f0 	.word	0x0801a1f0
 800053c:	3fc90fdb 	.word	0x3fc90fdb
 8000540:	00000000 	.word	0x00000000
 8000544:	40490fdb 	.word	0x40490fdb
 8000548:	c0490fdb 	.word	0xc0490fdb
 800054c:	40490fdb 	.word	0x40490fdb
 8000550:	3fc90fdb 	.word	0x3fc90fdb

08000554 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000554:	eddf 7a22 	vldr	s15, [pc, #136]	; 80005e0 <arm_cos_f32+0x8c>
 8000558:	ee20 0a27 	vmul.f32	s0, s0, s15
 800055c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8000560:	ee30 0a27 	vadd.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000564:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000568:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000570:	d42f      	bmi.n	80005d2 <arm_cos_f32+0x7e>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000576:	ee30 0a67 	vsub.f32	s0, s0, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800057a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80005e4 <arm_cos_f32+0x90>
 800057e:	ee20 0a27 	vmul.f32	s0, s0, s15
  index = (uint16_t)findex;
 8000582:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000586:	ee17 3a90 	vmov	r3, s15
 800058a:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800058c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000590:	d304      	bcc.n	800059c <arm_cos_f32+0x48>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000592:	eddf 7a14 	vldr	s15, [pc, #80]	; 80005e4 <arm_cos_f32+0x90>
 8000596:	ee30 0a67 	vsub.f32	s0, s0, s15
    index = 0;
 800059a:	2300      	movs	r3, #0
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005a4:	ee70 7a67 	vsub.f32	s15, s0, s15

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <arm_cos_f32+0x94>)
 80005aa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80005ae:	ed91 6a00 	vldr	s12, [r1]
  b = sinTable_f32[index+1];
 80005b2:	3301      	adds	r3, #1
 80005b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80005b8:	edd2 6a00 	vldr	s13, [r2]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 80005bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80005c8:	ee27 0aa6 	vmul.f32	s0, s15, s13

  /* Return output value */
  return (cosVal);
}
 80005cc:	ee37 0a00 	vadd.f32	s0, s14, s0
 80005d0:	4770      	bx	lr
    n--;
 80005d2:	ee17 3a90 	vmov	r3, s15
 80005d6:	3b01      	subs	r3, #1
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	e7c9      	b.n	8000572 <arm_cos_f32+0x1e>
 80005de:	bf00      	nop
 80005e0:	3e22f983 	.word	0x3e22f983
 80005e4:	44000000 	.word	0x44000000
 80005e8:	0801a218 	.word	0x0801a218

080005ec <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80005ec:	eddf 7a20 	vldr	s15, [pc, #128]	; 8000670 <arm_sin_f32+0x84>
 80005f0:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80005f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80005f8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80005fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000600:	d42f      	bmi.n	8000662 <arm_sin_f32+0x76>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000606:	ee30 0a67 	vsub.f32	s0, s0, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800060a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000674 <arm_sin_f32+0x88>
 800060e:	ee20 0a27 	vmul.f32	s0, s0, s15
  index = (uint16_t)findex;
 8000612:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000616:	ee17 3a90 	vmov	r3, s15
 800061a:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800061c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000620:	d304      	bcc.n	800062c <arm_sin_f32+0x40>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000622:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000674 <arm_sin_f32+0x88>
 8000626:	ee30 0a67 	vsub.f32	s0, s0, s15
    index = 0;
 800062a:	2300      	movs	r3, #0
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800062c:	ee07 3a90 	vmov	s15, r3
 8000630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000634:	ee70 7a67 	vsub.f32	s15, s0, s15

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <arm_sin_f32+0x8c>)
 800063a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800063e:	ed91 6a00 	vldr	s12, [r1]
  b = sinTable_f32[index+1];
 8000642:	3301      	adds	r3, #1
 8000644:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000648:	edd2 6a00 	vldr	s13, [r2]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800064c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000654:	ee27 7a06 	vmul.f32	s14, s14, s12
 8000658:	ee27 0aa6 	vmul.f32	s0, s15, s13

  /* Return output value */
  return (sinVal);
}
 800065c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8000660:	4770      	bx	lr
    n--;
 8000662:	ee17 3a90 	vmov	r3, s15
 8000666:	3b01      	subs	r3, #1
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	e7c9      	b.n	8000602 <arm_sin_f32+0x16>
 800066e:	bf00      	nop
 8000670:	3e22f983 	.word	0x3e22f983
 8000674:	44000000 	.word	0x44000000
 8000678:	0801a218 	.word	0x0801a218

0800067c <dbToATableLookup>:
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <dbToATableLookup+0x80>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <dbToATableLookup+0x84>)
 8000688:	edd3 7a00 	vldr	s15, [r3]
 800068c:	ee30 0a67 	vsub.f32	s0, s0, s15
#else
    inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 8000690:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000698:	d409      	bmi.n	80006ae <dbToATableLookup+0x32>
    {
        return min;
    }
    else if (val > max)
 800069a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000704 <dbToATableLookup+0x88>
 800069e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd04      	ble.n	80006b2 <dbToATableLookup+0x36>
    {
        return max;
 80006a8:	eeb0 0a67 	vmov.f32	s0, s15
 80006ac:	e001      	b.n	80006b2 <dbToATableLookup+0x36>
        return min;
 80006ae:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000708 <dbToATableLookup+0x8c>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 80006b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80006b6:	ee17 3a90 	vmov	r3, s15
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 80006ba:	1c59      	adds	r1, r3, #1
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
 80006bc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80006c0:	d301      	bcc.n	80006c6 <dbToATableLookup+0x4a>
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
 80006c2:	f643 71ff 	movw	r1, #16383	; 0x3fff
    }
    float alpha = floatIndex - (float)inDBIndex;
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ce:	ee70 7a67 	vsub.f32	s15, s0, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <dbToATableLookup+0x90>)
 80006d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80006d8:	ed93 0a00 	vldr	s0, [r3]
 80006dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006e4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80006e8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80006ec:	ed92 7a00 	vldr	s14, [r2]
 80006f0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80006f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200011b4 	.word	0x200011b4
 8000700:	200011b0 	.word	0x200011b0
 8000704:	467ffc00 	.word	0x467ffc00
 8000708:	00000000 	.word	0x00000000
 800070c:	30002000 	.word	0x30002000

08000710 <mtofTableLookup>:
    if (val < min)
 8000710:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8000788 <mtofTableLookup+0x78>
 8000714:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071c:	d409      	bmi.n	8000732 <mtofTableLookup+0x22>
    else if (val > max)
 800071e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800078c <mtofTableLookup+0x7c>
 8000722:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800072a:	dd04      	ble.n	8000736 <mtofTableLookup+0x26>
        return max;
 800072c:	eeb0 0a67 	vmov.f32	s0, s15
 8000730:	e001      	b.n	8000736 <mtofTableLookup+0x26>
        return min;
 8000732:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000788 <mtofTableLookup+0x78>



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 8000736:	eddf 7a16 	vldr	s15, [pc, #88]	; 8000790 <mtofTableLookup+0x80>
 800073a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800073e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000794 <mtofTableLookup+0x84>
 8000742:	ee77 7a87 	vadd.f32	s15, s15, s14
	int tempIndexI = (int)tempIndexF;
 8000746:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800074a:	ee17 3a10 	vmov	r3, s14
	tempIndexF = tempIndexF -tempIndexI;
 800074e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000752:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000756:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <mtofTableLookup+0x88>)
 800075c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8000760:	edd1 6a00 	vldr	s13, [r1]
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000764:	3301      	adds	r3, #1
 8000766:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800076a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800076e:	ed92 7a00 	vldr	s14, [r2]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000772:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000776:	ee30 0a67 	vsub.f32	s0, s0, s15
 800077a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800077e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000782:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000786:	4770      	bx	lr
 8000788:	c3230000 	.word	0xc3230000
 800078c:	43230000 	.word	0x43230000
 8000790:	42c80000 	.word	0x42c80000
 8000794:	46800000 	.word	0x46800000
 8000798:	30022000 	.word	0x30022000

0800079c <audioInit>:


void audioInit()
{
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 800079e:	4c84      	ldr	r4, [pc, #528]	; (80009b0 <audioInit+0x214>)
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <audioInit+0x218>)
 80007a2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80007a6:	4984      	ldr	r1, [pc, #528]	; (80009b8 <audioInit+0x21c>)
 80007a8:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80009bc <audioInit+0x220>
 80007ac:	4620      	mov	r0, r4
 80007ae:	f017 fa19 	bl	8017be4 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 80007b2:	4623      	mov	r3, r4
 80007b4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007b8:	4981      	ldr	r1, [pc, #516]	; (80009c0 <audioInit+0x224>)
 80007ba:	4882      	ldr	r0, [pc, #520]	; (80009c4 <audioInit+0x228>)
 80007bc:	f012 fbe8 	bl	8012f90 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 80007c0:	4623      	mov	r3, r4
 80007c2:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 80007c6:	4980      	ldr	r1, [pc, #512]	; (80009c8 <audioInit+0x22c>)
 80007c8:	4880      	ldr	r0, [pc, #512]	; (80009cc <audioInit+0x230>)
 80007ca:	f012 fbe1 	bl	8012f90 <tMempool_init>

	leaf.clearOnAllocation = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80009d0 <audioInit+0x234>
 80007da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80007de:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80009d4 <audioInit+0x238>
 80007e2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80009d8 <audioInit+0x23c>
 80007e6:	487d      	ldr	r0, [pc, #500]	; (80009dc <audioInit+0x240>)
 80007e8:	f012 f8fe 	bl	80129e8 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80007ec:	4b7c      	ldr	r3, [pc, #496]	; (80009e0 <audioInit+0x244>)
 80007ee:	4a7d      	ldr	r2, [pc, #500]	; (80009e4 <audioInit+0x248>)
 80007f0:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 12; i++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	e004      	b.n	8000800 <audioInit+0x64>
	{
		previousStringInputs[i]	= 0;
 80007f6:	4a7c      	ldr	r2, [pc, #496]	; (80009e8 <audioInit+0x24c>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 12; i++)
 80007fe:	3301      	adds	r3, #1
 8000800:	2b0b      	cmp	r3, #11
 8000802:	ddf8      	ble.n	80007f6 <audioInit+0x5a>





	for (int i = 0; i < 256; i++)
 8000804:	2400      	movs	r4, #0
 8000806:	e00f      	b.n	8000828 <audioInit+0x8c>
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000808:	f019 fce2 	bl	801a1d0 <__randomNumber_veneer>
 800080c:	eddf 7a77 	vldr	s15, [pc, #476]	; 80009ec <audioInit+0x250>
 8000810:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000814:	eddf 7a76 	vldr	s15, [pc, #472]	; 80009f0 <audioInit+0x254>
 8000818:	ee30 0a27 	vadd.f32	s0, s0, s15
 800081c:	4b75      	ldr	r3, [pc, #468]	; (80009f4 <audioInit+0x258>)
 800081e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000822:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 256; i++)
 8000826:	3401      	adds	r4, #1
 8000828:	2cff      	cmp	r4, #255	; 0xff
 800082a:	dded      	ble.n	8000808 <audioInit+0x6c>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 800082c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000830:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80009f8 <audioInit+0x25c>
 8000834:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000838:	4870      	ldr	r0, [pc, #448]	; (80009fc <audioInit+0x260>)
 800083a:	f012 f93b 	bl	8012ab4 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 800083e:	eddf 0a70 	vldr	s1, [pc, #448]	; 8000a00 <audioInit+0x264>
 8000842:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8000a04 <audioInit+0x268>
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	486f      	ldr	r0, [pc, #444]	; (8000a08 <audioInit+0x26c>)
 800084c:	f012 f958 	bl	8012b00 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000850:	4b6e      	ldr	r3, [pc, #440]	; (8000a0c <audioInit+0x270>)
 8000852:	4a6f      	ldr	r2, [pc, #444]	; (8000a10 <audioInit+0x274>)
 8000854:	601a      	str	r2, [r3, #0]
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000856:	4b6f      	ldr	r3, [pc, #444]	; (8000a14 <audioInit+0x278>)
 8000858:	4a6f      	ldr	r2, [pc, #444]	; (8000a18 <audioInit+0x27c>)
 800085a:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 800085c:	4b6f      	ldr	r3, [pc, #444]	; (8000a1c <audioInit+0x280>)
 800085e:	4a70      	ldr	r2, [pc, #448]	; (8000a20 <audioInit+0x284>)
 8000860:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000862:	4b70      	ldr	r3, [pc, #448]	; (8000a24 <audioInit+0x288>)
 8000864:	4a70      	ldr	r2, [pc, #448]	; (8000a28 <audioInit+0x28c>)
 8000866:	601a      	str	r2, [r3, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	eddf 0a6f 	vldr	s1, [pc, #444]	; 8000a2c <audioInit+0x290>
 8000870:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8000a30 <audioInit+0x294>
 8000874:	486f      	ldr	r0, [pc, #444]	; (8000a34 <audioInit+0x298>)
 8000876:	f012 f96b 	bl	8012b50 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 800087a:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <audioInit+0x29c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4a6e      	ldr	r2, [pc, #440]	; (8000a3c <audioInit+0x2a0>)
 8000882:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
 8000884:	4b6e      	ldr	r3, [pc, #440]	; (8000a40 <audioInit+0x2a4>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	}




	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800088a:	4949      	ldr	r1, [pc, #292]	; (80009b0 <audioInit+0x214>)
 800088c:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8000a44 <audioInit+0x2a8>
 8000890:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80009d4 <audioInit+0x238>
 8000894:	486c      	ldr	r0, [pc, #432]	; (8000a48 <audioInit+0x2ac>)
 8000896:	f00e feb3 	bl	800f600 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 800089a:	2400      	movs	r4, #0
 800089c:	e00a      	b.n	80008b4 <audioInit+0x118>
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800089e:	4944      	ldr	r1, [pc, #272]	; (80009b0 <audioInit+0x214>)
 80008a0:	eddf 0a68 	vldr	s1, [pc, #416]	; 8000a44 <audioInit+0x2a8>
 80008a4:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80009d4 <audioInit+0x238>
 80008a8:	4868      	ldr	r0, [pc, #416]	; (8000a4c <audioInit+0x2b0>)
 80008aa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008ae:	f00e fea7 	bl	800f600 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 80008b2:	3401      	adds	r4, #1
 80008b4:	2c13      	cmp	r4, #19
 80008b6:	ddf2      	ble.n	800089e <audioInit+0x102>
	}
	for (int i = 0; i < 10; i++)
 80008b8:	2400      	movs	r4, #0
 80008ba:	e00a      	b.n	80008d2 <audioInit+0x136>
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 80008bc:	493c      	ldr	r1, [pc, #240]	; (80009b0 <audioInit+0x214>)
 80008be:	eddf 0a61 	vldr	s1, [pc, #388]	; 8000a44 <audioInit+0x2a8>
 80008c2:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80009d4 <audioInit+0x238>
 80008c6:	4862      	ldr	r0, [pc, #392]	; (8000a50 <audioInit+0x2b4>)
 80008c8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008cc:	f00e fe98 	bl	800f600 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 80008d0:	3401      	adds	r4, #1
 80008d2:	2c09      	cmp	r4, #9
 80008d4:	ddf2      	ble.n	80008bc <audioInit+0x120>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80008d6:	2400      	movs	r4, #0
 80008d8:	e015      	b.n	8000906 <audioInit+0x16a>
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008da:	4d35      	ldr	r5, [pc, #212]	; (80009b0 <audioInit+0x214>)
 80008dc:	00a6      	lsls	r6, r4, #2
 80008de:	4629      	mov	r1, r5
 80008e0:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8000a54 <audioInit+0x2b8>
 80008e4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80009d4 <audioInit+0x238>
 80008e8:	485b      	ldr	r0, [pc, #364]	; (8000a58 <audioInit+0x2bc>)
 80008ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008ee:	f00e fe87 	bl	800f600 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80008f2:	4629      	mov	r1, r5
 80008f4:	eddf 0a59 	vldr	s1, [pc, #356]	; 8000a5c <audioInit+0x2c0>
 80008f8:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8000a60 <audioInit+0x2c4>
 80008fc:	4859      	ldr	r0, [pc, #356]	; (8000a64 <audioInit+0x2c8>)
 80008fe:	4430      	add	r0, r6
 8000900:	f00d fb1e 	bl	800df40 <tEnvelopeFollower_init>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8000904:	3401      	adds	r4, #1
 8000906:	2c01      	cmp	r4, #1
 8000908:	dde7      	ble.n	80008da <audioInit+0x13e>
	}

	audioInitAdditive();
 800090a:	f019 fc45 	bl	801a198 <__audioInitAdditive_veneer>
	//audioInitString1();
	audioInitVocal();
 800090e:	f019 fc53 	bl	801a1b8 <__audioInitVocal_veneer>
	audioInitSynth();
 8000912:	f002 fca5 	bl	8003260 <audioInitSynth>
	audioInitString3();
 8000916:	f019 fc17 	bl	801a148 <__audioInitString3_veneer>

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800091a:	2400      	movs	r4, #0
 800091c:	e035      	b.n	800098a <audioInit+0x1ee>
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800091e:	4d24      	ldr	r5, [pc, #144]	; (80009b0 <audioInit+0x214>)
 8000920:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80009d4 <audioInit+0x238>
 8000924:	462b      	mov	r3, r5
 8000926:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800092a:	492c      	ldr	r1, [pc, #176]	; (80009dc <audioInit+0x240>)
 800092c:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8000a68 <audioInit+0x2cc>
 8000930:	eeb0 1a40 	vmov.f32	s2, s0
 8000934:	eddf 0a32 	vldr	s1, [pc, #200]	; 8000a00 <audioInit+0x264>
 8000938:	484c      	ldr	r0, [pc, #304]	; (8000a6c <audioInit+0x2d0>)
 800093a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800093e:	f00e fb31 	bl	800efa4 <tADSRT_init>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000942:	4f4b      	ldr	r7, [pc, #300]	; (8000a70 <audioInit+0x2d4>)
 8000944:	462a      	mov	r2, r5
 8000946:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800094a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000a74 <audioInit+0x2d8>
 800094e:	2103      	movs	r1, #3
 8000950:	4638      	mov	r0, r7
 8000952:	f010 f883 	bl	8010a5c <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000956:	4e48      	ldr	r6, [pc, #288]	; (8000a78 <audioInit+0x2dc>)
 8000958:	462a      	mov	r2, r5
 800095a:	eddf 0a48 	vldr	s1, [pc, #288]	; 8000a7c <audioInit+0x2e0>
 800095e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8000a80 <audioInit+0x2e4>
 8000962:	2101      	movs	r1, #1
 8000964:	4630      	mov	r0, r6
 8000966:	f010 f879 	bl	8010a5c <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 800096a:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8000a84 <audioInit+0x2e8>
 800096e:	4638      	mov	r0, r7
 8000970:	f00f ff1c 	bl	80107ac <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000974:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8000a88 <audioInit+0x2ec>
 8000978:	4630      	mov	r0, r6
 800097a:	f00f ff17 	bl	80107ac <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 800097e:	462a      	mov	r2, r5
 8000980:	2100      	movs	r1, #0
 8000982:	4842      	ldr	r0, [pc, #264]	; (8000a8c <audioInit+0x2f0>)
 8000984:	f013 f835 	bl	80139f2 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000988:	3401      	adds	r4, #1
 800098a:	2c01      	cmp	r4, #1
 800098c:	ddc7      	ble.n	800091e <audioInit+0x182>

	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800098e:	2300      	movs	r3, #0
 8000990:	e004      	b.n	800099c <audioInit+0x200>
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000992:	4a3f      	ldr	r2, [pc, #252]	; (8000a90 <audioInit+0x2f4>)
 8000994:	2100      	movs	r1, #0
 8000996:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 800099a:	3301      	adds	r3, #1
 800099c:	2bff      	cmp	r3, #255	; 0xff
 800099e:	ddf8      	ble.n	8000992 <audioInit+0x1f6>
	}

	audioFrameFunction = audioFrameWaiting;
 80009a0:	4b3c      	ldr	r3, [pc, #240]	; (8000a94 <audioInit+0x2f8>)
 80009a2:	4a3d      	ldr	r2, [pc, #244]	; (8000a98 <audioInit+0x2fc>)
 80009a4:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f003 fa8c 	bl	8003ec4 <HAL_Delay>

}
 80009ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20005294 	.word	0x20005294
 80009b4:	00001a21 	.word	0x00001a21
 80009b8:	2000577c 	.word	0x2000577c
 80009bc:	473b8000 	.word	0x473b8000
 80009c0:	24040000 	.word	0x24040000
 80009c4:	200052e8 	.word	0x200052e8
 80009c8:	60000000 	.word	0x60000000
 80009cc:	20005290 	.word	0x20005290
 80009d0:	ba51b717 	.word	0xba51b717
 80009d4:	00000000 	.word	0x00000000
 80009d8:	3a83126f 	.word	0x3a83126f
 80009dc:	200011b8 	.word	0x200011b8
 80009e0:	200051b8 	.word	0x200051b8
 80009e4:	457ff000 	.word	0x457ff000
 80009e8:	20005360 	.word	0x20005360
 80009ec:	3ecccccd 	.word	0x3ecccccd
 80009f0:	3f4ccccd 	.word	0x3f4ccccd
 80009f4:	20005378 	.word	0x20005378
 80009f8:	3727c5ac 	.word	0x3727c5ac
 80009fc:	30012000 	.word	0x30012000
 8000a00:	42480000 	.word	0x42480000
 8000a04:	c2b40000 	.word	0xc2b40000
 8000a08:	30002000 	.word	0x30002000
 8000a0c:	2000118c 	.word	0x2000118c
 8000a10:	467ffca8 	.word	0x467ffca8
 8000a14:	20001188 	.word	0x20001188
 8000a18:	3e27c37b 	.word	0x3e27c37b
 8000a1c:	200011b4 	.word	0x200011b4
 8000a20:	42ea0af9 	.word	0x42ea0af9
 8000a24:	200011b0 	.word	0x200011b0
 8000a28:	c6248fb7 	.word	0xc6248fb7
 8000a2c:	4323d666 	.word	0x4323d666
 8000a30:	c323d666 	.word	0xc323d666
 8000a34:	30022000 	.word	0x30022000
 8000a38:	200142fd 	.word	0x200142fd
 8000a3c:	200051cc 	.word	0x200051cc
 8000a40:	20000694 	.word	0x20000694
 8000a44:	3a03126f 	.word	0x3a03126f
 8000a48:	20014264 	.word	0x20014264
 8000a4c:	20005240 	.word	0x20005240
 8000a50:	2000532c 	.word	0x2000532c
 8000a54:	3c23d70a 	.word	0x3c23d70a
 8000a58:	200011a4 	.word	0x200011a4
 8000a5c:	3f7fd220 	.word	0x3f7fd220
 8000a60:	38d1b717 	.word	0x38d1b717
 8000a64:	2000119c 	.word	0x2000119c
 8000a68:	43480000 	.word	0x43480000
 8000a6c:	200051c4 	.word	0x200051c4
 8000a70:	200052f4 	.word	0x200052f4
 8000a74:	44bb8000 	.word	0x44bb8000
 8000a78:	200052f8 	.word	0x200052f8
 8000a7c:	3f666666 	.word	0x3f666666
 8000a80:	44480000 	.word	0x44480000
 8000a84:	45b61db3 	.word	0x45b61db3
 8000a88:	4530ffd7 	.word	0x4530ffd7
 8000a8c:	200052ec 	.word	0x200052ec
 8000a90:	30000000 	.word	0x30000000
 8000a94:	20001190 	.word	0x20001190
 8000a98:	00001421 	.word	0x00001421

08000a9c <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000a9c:	b510      	push	{r4, lr}
 8000a9e:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f003 fa0f 	bl	8003ec4 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	4903      	ldr	r1, [pc, #12]	; (8000ab8 <audioStart+0x1c>)
 8000aac:	4620      	mov	r0, r4
 8000aae:	f008 fc8d 	bl	80093cc <HAL_SAI_Transmit_DMA>
 8000ab2:	4b02      	ldr	r3, [pc, #8]	; (8000abc <audioStart+0x20>)
 8000ab4:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000ab6:	bd10      	pop	{r4, pc}
 8000ab8:	30000000 	.word	0x30000000
 8000abc:	20014254 	.word	0x20014254

08000ac0 <voiceChangeCheck>:
}



void voiceChangeCheck(void)
{
 8000ac0:	b508      	push	{r3, lr}
	if (voice != prevVoice)
 8000ac2:	4b57      	ldr	r3, [pc, #348]	; (8000c20 <voiceChangeCheck+0x160>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <voiceChangeCheck+0x164>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	f000 80a3 	beq.w	8000c16 <voiceChangeCheck+0x156>
	{
		if (voice == 63)
 8000ad0:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <voiceChangeCheck+0x160>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ad6:	d02b      	beq.n	8000b30 <voiceChangeCheck+0x70>
			currentActivePreset = voice;
			resetStringInputs = 1;
			diskBusy = 0;
			whichModel = 1;
		}
		else if (voice == 62)
 8000ad8:	4b51      	ldr	r3, [pc, #324]	; (8000c20 <voiceChangeCheck+0x160>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b3e      	cmp	r3, #62	; 0x3e
 8000ade:	d03a      	beq.n	8000b56 <voiceChangeCheck+0x96>
			currentActivePreset = voice;
			resetStringInputs = 1;
			diskBusy = 0;
			whichModel = 2;
		}
		else if (voice == 61)
 8000ae0:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <voiceChangeCheck+0x160>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b3d      	cmp	r3, #61	; 0x3d
 8000ae6:	d04a      	beq.n	8000b7e <voiceChangeCheck+0xbe>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
			whichModel = 3;
		}
		else if (voice == 60)
 8000ae8:	4b4d      	ldr	r3, [pc, #308]	; (8000c20 <voiceChangeCheck+0x160>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b3c      	cmp	r3, #60	; 0x3c
 8000aee:	d05c      	beq.n	8000baa <voiceChangeCheck+0xea>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
			whichModel = 4;
		}
		else if (voice == 59)
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <voiceChangeCheck+0x160>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b3b      	cmp	r3, #59	; 0x3b
 8000af6:	d06e      	beq.n	8000bd6 <voiceChangeCheck+0x116>
			resetStringInputs = 1;
			whichModel = 5;
		}
		else
		{
			audioFrameFunction = audioFrameWaiting;
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <voiceChangeCheck+0x168>)
 8000afa:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <voiceChangeCheck+0x16c>)
 8000afc:	601a      	str	r2, [r3, #0]
			presetWaitingToLoad = 1;
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <voiceChangeCheck+0x170>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
 8000b04:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <voiceChangeCheck+0x160>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <voiceChangeCheck+0x174>)
 8000b0c:	7013      	strb	r3, [r2, #0]
			presetReady = 0;
 8000b0e:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <voiceChangeCheck+0x178>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
			if (prevVoice > 59)
 8000b14:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <voiceChangeCheck+0x164>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b3b      	cmp	r3, #59	; 0x3b
 8000b1a:	dd02      	ble.n	8000b22 <voiceChangeCheck+0x62>
			{
				resetStringInputs = 1;
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
			}
			frameLoadOverCount = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <voiceChangeCheck+0x180>)
 8000b26:	6013      	str	r3, [r2, #0]
			whichModel = 0;
 8000b28:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <voiceChangeCheck+0x184>)
 8000b2a:	7013      	strb	r3, [r2, #0]
{
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e070      	b.n	8000c12 <voiceChangeCheck+0x152>
			audioFrameFunction = audioFrameWaiting;
 8000b30:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <voiceChangeCheck+0x168>)
 8000b32:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <voiceChangeCheck+0x16c>)
 8000b34:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
 8000b36:	f019 fb0f 	bl	801a158 <__audioSwitchToString1_veneer>
			currentActivePreset = voice;
 8000b3a:	4b39      	ldr	r3, [pc, #228]	; (8000c20 <voiceChangeCheck+0x160>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4a41      	ldr	r2, [pc, #260]	; (8000c48 <voiceChangeCheck+0x188>)
 8000b42:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000b48:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
 8000b4a:	4a40      	ldr	r2, [pc, #256]	; (8000c4c <voiceChangeCheck+0x18c>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	7011      	strb	r1, [r2, #0]
			whichModel = 1;
 8000b50:	4a3c      	ldr	r2, [pc, #240]	; (8000c44 <voiceChangeCheck+0x184>)
 8000b52:	7013      	strb	r3, [r2, #0]
 8000b54:	e7ea      	b.n	8000b2c <voiceChangeCheck+0x6c>
			audioFrameFunction = audioFrameWaiting;
 8000b56:	4b34      	ldr	r3, [pc, #208]	; (8000c28 <voiceChangeCheck+0x168>)
 8000b58:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <voiceChangeCheck+0x16c>)
 8000b5a:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
 8000b5c:	f019 fb24 	bl	801a1a8 <__audioSwitchToString2_veneer>
			currentActivePreset = voice;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <voiceChangeCheck+0x160>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4a38      	ldr	r2, [pc, #224]	; (8000c48 <voiceChangeCheck+0x188>)
 8000b68:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
 8000b70:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <voiceChangeCheck+0x18c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			whichModel = 2;
 8000b76:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <voiceChangeCheck+0x184>)
 8000b78:	2202      	movs	r2, #2
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	e7d6      	b.n	8000b2c <voiceChangeCheck+0x6c>
			audioFrameFunction = audioFrameAdditive;
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <voiceChangeCheck+0x168>)
 8000b80:	4a33      	ldr	r2, [pc, #204]	; (8000c50 <voiceChangeCheck+0x190>)
 8000b82:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
 8000b84:	f019 fae4 	bl	801a150 <__audioSwitchToAdditive_veneer>
			currentActivePreset = voice;
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <voiceChangeCheck+0x160>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <voiceChangeCheck+0x188>)
 8000b90:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <voiceChangeCheck+0x18c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	4a27      	ldr	r2, [pc, #156]	; (8000c38 <voiceChangeCheck+0x178>)
 8000b9c:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
 8000b9e:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000ba0:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <voiceChangeCheck+0x184>)
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e7c0      	b.n	8000b2c <voiceChangeCheck+0x6c>
			audioFrameFunction = audioFrameVocal;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <voiceChangeCheck+0x168>)
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <voiceChangeCheck+0x194>)
 8000bae:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
 8000bb0:	f019 faee 	bl	801a190 <__audioSwitchToVocal_veneer>
			currentActivePreset = voice;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <voiceChangeCheck+0x160>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <voiceChangeCheck+0x188>)
 8000bbc:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <voiceChangeCheck+0x18c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <voiceChangeCheck+0x178>)
 8000bc8:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000bcc:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <voiceChangeCheck+0x184>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e7aa      	b.n	8000b2c <voiceChangeCheck+0x6c>
			audioFrameFunction = audioFrameString3;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <voiceChangeCheck+0x168>)
 8000bd8:	4a1f      	ldr	r2, [pc, #124]	; (8000c58 <voiceChangeCheck+0x198>)
 8000bda:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
 8000bdc:	f019 fae0 	bl	801a1a0 <__audioSwitchToString3_veneer>
			currentActivePreset = voice;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <voiceChangeCheck+0x160>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <voiceChangeCheck+0x188>)
 8000be8:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <voiceChangeCheck+0x18c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <voiceChangeCheck+0x178>)
 8000bf4:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <voiceChangeCheck+0x17c>)
 8000bf8:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <voiceChangeCheck+0x184>)
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e794      	b.n	8000b2c <voiceChangeCheck+0x6c>
		}
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
		{
			audioOutBuffer[i] = 0;
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <voiceChangeCheck+0x19c>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 8000c0a:	1c58      	adds	r0, r3, #1
 8000c0c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8000c10:	3302      	adds	r3, #2
 8000c12:	2bff      	cmp	r3, #255	; 0xff
 8000c14:	ddf5      	ble.n	8000c02 <voiceChangeCheck+0x142>
		}

	}

	prevVoice = voice;
 8000c16:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <voiceChangeCheck+0x160>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <voiceChangeCheck+0x164>)
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	bd08      	pop	{r3, pc}
 8000c20:	20014258 	.word	0x20014258
 8000c24:	2000069c 	.word	0x2000069c
 8000c28:	20001190 	.word	0x20001190
 8000c2c:	00001421 	.word	0x00001421
 8000c30:	2001a33c 	.word	0x2001a33c
 8000c34:	2001a33a 	.word	0x2001a33a
 8000c38:	20005354 	.word	0x20005354
 8000c3c:	20005778 	.word	0x20005778
 8000c40:	200051d0 	.word	0x200051d0
 8000c44:	2001c941 	.word	0x2001c941
 8000c48:	200006ad 	.word	0x200006ad
 8000c4c:	20014358 	.word	0x20014358
 8000c50:	00000b41 	.word	0x00000b41
 8000c54:	000091c1 	.word	0x000091c1
 8000c58:	000057a1 	.word	0x000057a1
 8000c5c:	30000000 	.word	0x30000000

08000c60 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c64:	b083      	sub	sp, #12
 8000c66:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6e:	4843      	ldr	r0, [pc, #268]	; (8000d7c <AudioCodec_init+0x11c>)
 8000c70:	f004 fec5 	bl	80059fe <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000c74:	2002      	movs	r0, #2
 8000c76:	f003 f925 	bl	8003ec4 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000c7a:	4c41      	ldr	r4, [pc, #260]	; (8000d80 <AudioCodec_init+0x120>)
 8000c7c:	f04f 0a07 	mov.w	sl, #7
 8000c80:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8000c84:	f04f 0b03 	mov.w	fp, #3
 8000c88:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c8c:	4e3d      	ldr	r6, [pc, #244]	; (8000d84 <AudioCodec_init+0x124>)
 8000c8e:	4f3e      	ldr	r7, [pc, #248]	; (8000d88 <AudioCodec_init+0x128>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	8833      	ldrh	r3, [r6, #0]
 8000c96:	4622      	mov	r2, r4
 8000c98:	2120      	movs	r1, #32
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f005 f89a 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000ca0:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000d90 <AudioCodec_init+0x130>
 8000ca4:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8000ca8:	f04f 0901 	mov.w	r9, #1
 8000cac:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41;
 8000cb0:	2341      	movs	r3, #65	; 0x41
 8000cb2:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	8833      	ldrh	r3, [r6, #0]
 8000cba:	4622      	mov	r2, r4
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	4628      	mov	r0, r5
 8000cc0:	f005 f888 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000cc4:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8000cc8:	f04f 0302 	mov.w	r3, #2
 8000ccc:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	8833      	ldrh	r3, [r6, #0]
 8000cd8:	4622      	mov	r2, r4
 8000cda:	2120      	movs	r1, #32
 8000cdc:	4628      	mov	r0, r5
 8000cde:	f005 f879 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000ce2:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8000ce6:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8000cea:	2379      	movs	r3, #121	; 0x79
 8000cec:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	8833      	ldrh	r3, [r6, #0]
 8000cf4:	4622      	mov	r2, r4
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	f005 f86b 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000cfe:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8000d02:	2304      	movs	r3, #4
 8000d04:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000d06:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	8833      	ldrh	r3, [r6, #0]
 8000d10:	4622      	mov	r2, r4
 8000d12:	2120      	movs	r1, #32
 8000d14:	4628      	mov	r0, r5
 8000d16:	f005 f85d 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000d1a:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000d22:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	8833      	ldrh	r3, [r6, #0]
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	2120      	movs	r1, #32
 8000d30:	4628      	mov	r0, r5
 8000d32:	f005 f84f 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000d36:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	8833      	ldrh	r3, [r6, #0]
 8000d48:	4622      	mov	r2, r4
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	f005 f841 	bl	8005dd4 <HAL_I2C_Master_Transmit>
 8000d52:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8000d56:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8000d5a:	f04f 0302 	mov.w	r3, #2
 8000d5e:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	8833      	ldrh	r3, [r6, #0]
 8000d66:	4622      	mov	r2, r4
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f005 f832 	bl	8005dd4 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <AudioCodec_init+0x12c>)
 8000d72:	f8c3 9000 	str.w	r9, [r3]

}
 8000d76:	b003      	add	sp, #12
 8000d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7c:	58020800 	.word	0x58020800
 8000d80:	2001426c 	.word	0x2001426c
 8000d84:	200006a4 	.word	0x200006a4
 8000d88:	200006a0 	.word	0x200006a0
 8000d8c:	200011ac 	.word	0x200011ac
 8000d90:	2001426e 	.word	0x2001426e

08000d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d94:	b500      	push	{lr}
 8000d96:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <MX_DMA_Init+0x74>)
 8000d9a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000d9e:	f042 0201 	orr.w	r2, r2, #1
 8000da2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210a      	movs	r1, #10
 8000db6:	200c      	movs	r0, #12
 8000db8:	f003 f8ba 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dbc:	200c      	movs	r0, #12
 8000dbe:	f003 f8ed 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2109      	movs	r1, #9
 8000dc6:	200d      	movs	r0, #13
 8000dc8:	f003 f8b2 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dcc:	200d      	movs	r0, #13
 8000dce:	f003 f8e5 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	200e      	movs	r0, #14
 8000dd8:	f003 f8aa 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ddc:	200e      	movs	r0, #14
 8000dde:	f003 f8dd 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2107      	movs	r1, #7
 8000de6:	200f      	movs	r0, #15
 8000de8:	f003 f8a2 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000dec:	200f      	movs	r0, #15
 8000dee:	f003 f8d5 	bl	8003f9c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	4611      	mov	r1, r2
 8000df6:	2010      	movs	r0, #16
 8000df8:	f003 f89a 	bl	8003f30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dfc:	2010      	movs	r0, #16
 8000dfe:	f003 f8cd 	bl	8003f9c <HAL_NVIC_EnableIRQ>

}
 8000e02:	b003      	add	sp, #12
 8000e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e08:	58024400 	.word	0x58024400

08000e0c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0e:	b0b9      	sub	sp, #228	; 0xe4
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	2300      	movs	r3, #0
 8000e12:	9333      	str	r3, [sp, #204]	; 0xcc
 8000e14:	9334      	str	r3, [sp, #208]	; 0xd0
 8000e16:	9335      	str	r3, [sp, #212]	; 0xd4
 8000e18:	9336      	str	r3, [sp, #216]	; 0xd8
 8000e1a:	9337      	str	r3, [sp, #220]	; 0xdc
  if (FMC_Initialized) {
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_FMC_MspInit+0xd4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	b10b      	cbz	r3, 8000e26 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e22:	b039      	add	sp, #228	; 0xe4
 8000e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_FMC_MspInit+0xd4>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	22c0      	movs	r2, #192	; 0xc0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	a802      	add	r0, sp, #8
 8000e32:	f016 ff6f 	bl	8017d14 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	a802      	add	r0, sp, #8
 8000e42:	f006 fb73 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d147      	bne.n	8000eda <HAL_FMC_MspInit+0xce>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e4a:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_FMC_MspInit+0xd8>)
 8000e4c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e58:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e64:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e68:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2702      	movs	r7, #2
 8000e6c:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2600      	movs	r6, #0
 8000e70:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2503      	movs	r5, #3
 8000e74:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e76:	240c      	movs	r4, #12
 8000e78:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e7a:	a933      	add	r1, sp, #204	; 0xcc
 8000e7c:	481a      	ldr	r0, [pc, #104]	; (8000ee8 <HAL_FMC_MspInit+0xdc>)
 8000e7e:	f004 fca7 	bl	80057d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000e82:	2319      	movs	r3, #25
 8000e84:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8c:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	a933      	add	r1, sp, #204	; 0xcc
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_FMC_MspInit+0xe0>)
 8000e92:	f004 fc9d 	bl	80057d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000e96:	f248 1337 	movw	r3, #33079	; 0x8137
 8000e9a:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea2:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea4:	a933      	add	r1, sp, #204	; 0xcc
 8000ea6:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <HAL_FMC_MspInit+0xe4>)
 8000ea8:	f004 fc92 	bl	80057d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000eac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000eb0:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb8:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eba:	a933      	add	r1, sp, #204	; 0xcc
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <HAL_FMC_MspInit+0xe8>)
 8000ebe:	f004 fc87 	bl	80057d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000ec2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ec6:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ece:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	a933      	add	r1, sp, #204	; 0xcc
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_FMC_MspInit+0xec>)
 8000ed4:	f004 fc7c 	bl	80057d0 <HAL_GPIO_Init>
 8000ed8:	e7a3      	b.n	8000e22 <HAL_FMC_MspInit+0x16>
      Error_Handler();
 8000eda:	f001 fe2d 	bl	8002b38 <Error_Handler>
 8000ede:	e7b4      	b.n	8000e4a <HAL_FMC_MspInit+0x3e>
 8000ee0:	20014270 	.word	0x20014270
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58021400 	.word	0x58021400
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58021800 	.word	0x58021800
 8000ef4:	58021000 	.word	0x58021000
 8000ef8:	58020c00 	.word	0x58020c00

08000efc <MX_FMC_Init>:
{
 8000efc:	b500      	push	{lr}
 8000efe:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	9303      	str	r3, [sp, #12]
 8000f08:	9304      	str	r3, [sp, #16]
 8000f0a:	9305      	str	r3, [sp, #20]
 8000f0c:	9306      	str	r3, [sp, #24]
 8000f0e:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f10:	4817      	ldr	r0, [pc, #92]	; (8000f70 <MX_FMC_Init+0x74>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <MX_FMC_Init+0x78>)
 8000f14:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f16:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f20:	2210      	movs	r2, #16
 8000f22:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f2c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f2e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000f30:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000f34:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f3a:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f3c:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000f42:	2206      	movs	r2, #6
 8000f44:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f46:	2104      	movs	r1, #4
 8000f48:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000f4a:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000f4c:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000f4e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000f50:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f52:	4469      	add	r1, sp
 8000f54:	f009 fb8c 	bl	800a670 <HAL_SDRAM_Init>
 8000f58:	b930      	cbnz	r0, 8000f68 <MX_FMC_Init+0x6c>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000f5a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f5e:	f002 ffcb 	bl	8003ef8 <HAL_SetFMCMemorySwappingConfig>
}
 8000f62:	b009      	add	sp, #36	; 0x24
 8000f64:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000f68:	f001 fde6 	bl	8002b38 <Error_Handler>
 8000f6c:	e7f5      	b.n	8000f5a <MX_FMC_Init+0x5e>
 8000f6e:	bf00      	nop
 8000f70:	20014274 	.word	0x20014274
 8000f74:	52004140 	.word	0x52004140

08000f78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f7a:	f7ff ff47 	bl	8000e0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f7e:	bd08      	pop	{r3, pc}

08000f80 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	2400      	movs	r4, #0
 8000f88:	9409      	str	r4, [sp, #36]	; 0x24
 8000f8a:	940a      	str	r4, [sp, #40]	; 0x28
 8000f8c:	940b      	str	r4, [sp, #44]	; 0x2c
 8000f8e:	940c      	str	r4, [sp, #48]	; 0x30
 8000f90:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4b73      	ldr	r3, [pc, #460]	; (8001160 <MX_GPIO_Init+0x1e0>)
 8000f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f98:	f042 0210 	orr.w	r2, r2, #16
 8000f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa4:	f002 0210 	and.w	r2, r2, #16
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb0:	f042 0204 	orr.w	r2, r2, #4
 8000fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fbc:	f002 0204 	and.w	r2, r2, #4
 8000fc0:	9202      	str	r2, [sp, #8]
 8000fc2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc8:	f042 0220 	orr.w	r2, r2, #32
 8000fcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fd4:	f002 0220 	and.w	r2, r2, #32
 8000fd8:	9203      	str	r2, [sp, #12]
 8000fda:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fe0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ff0:	9204      	str	r2, [sp, #16]
 8000ff2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ff8:	f042 0201 	orr.w	r2, r2, #1
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f002 0201 	and.w	r2, r2, #1
 8001008:	9205      	str	r2, [sp, #20]
 800100a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800101c:	f002 0202 	and.w	r2, r2, #2
 8001020:	9206      	str	r2, [sp, #24]
 8001022:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800102c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001034:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001038:	9207      	str	r2, [sp, #28]
 800103a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001040:	f042 0208 	orr.w	r2, r2, #8
 8001044:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	9308      	str	r3, [sp, #32]
 8001052:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001054:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001174 <MX_GPIO_Init+0x1f4>
 8001058:	4622      	mov	r2, r4
 800105a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105e:	4648      	mov	r0, r9
 8001060:	f004 fccd 	bl	80059fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001064:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001178 <MX_GPIO_Init+0x1f8>
 8001068:	4622      	mov	r2, r4
 800106a:	2102      	movs	r1, #2
 800106c:	4640      	mov	r0, r8
 800106e:	f004 fcc6 	bl	80059fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001072:	4f3c      	ldr	r7, [pc, #240]	; (8001164 <MX_GPIO_Init+0x1e4>)
 8001074:	4622      	mov	r2, r4
 8001076:	2110      	movs	r1, #16
 8001078:	4638      	mov	r0, r7
 800107a:	f004 fcc0 	bl	80059fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800107e:	f242 0320 	movw	r3, #8224	; 0x2020
 8001082:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2501      	movs	r5, #1
 8001088:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	a909      	add	r1, sp, #36	; 0x24
 800108c:	4648      	mov	r0, r9
 800108e:	f004 fb9f 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001096:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	a909      	add	r1, sp, #36	; 0x24
 80010a0:	4648      	mov	r0, r9
 80010a2:	f004 fb95 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80010a6:	f248 03c6 	movw	r3, #32966	; 0x80c6
 80010aa:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ac:	2603      	movs	r6, #3
 80010ae:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	a909      	add	r1, sp, #36	; 0x24
 80010b4:	4648      	mov	r0, r9
 80010b6:	f004 fb8b 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c4:	a909      	add	r1, sp, #36	; 0x24
 80010c6:	4828      	ldr	r0, [pc, #160]	; (8001168 <MX_GPIO_Init+0x1e8>)
 80010c8:	f004 fb82 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010cc:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ce:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	a909      	add	r1, sp, #36	; 0x24
 80010d4:	4640      	mov	r0, r8
 80010d6:	f004 fb7b 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010da:	f04f 0902 	mov.w	r9, #2
 80010de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	a909      	add	r1, sp, #36	; 0x24
 80010ea:	4640      	mov	r0, r8
 80010ec:	f004 fb70 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80010f0:	f649 730c 	movw	r3, #40716	; 0x9f0c
 80010f4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	a909      	add	r1, sp, #36	; 0x24
 80010fc:	4640      	mov	r0, r8
 80010fe:	f004 fb67 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001102:	f24f 33e5 	movw	r3, #62437	; 0xf3e5
 8001106:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	a909      	add	r1, sp, #36	; 0x24
 800110e:	4638      	mov	r0, r7
 8001110:	f004 fb5e 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001114:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800111a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	a909      	add	r1, sp, #36	; 0x24
 800111e:	4638      	mov	r0, r7
 8001120:	f004 fb56 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8001124:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8001128:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	a909      	add	r1, sp, #36	; 0x24
 8001130:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_GPIO_Init+0x1ec>)
 8001132:	f004 fb4d 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001136:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 800113a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001140:	a909      	add	r1, sp, #36	; 0x24
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_GPIO_Init+0x1f0>)
 8001144:	f004 fb44 	bl	80057d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001148:	2310      	movs	r3, #16
 800114a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	a909      	add	r1, sp, #36	; 0x24
 8001154:	4638      	mov	r0, r7
 8001156:	f004 fb3b 	bl	80057d0 <HAL_GPIO_Init>

}
 800115a:	b00f      	add	sp, #60	; 0x3c
 800115c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001160:	58024400 	.word	0x58024400
 8001164:	58020400 	.word	0x58020400
 8001168:	58021400 	.word	0x58021400
 800116c:	58020c00 	.word	0x58020c00
 8001170:	58021800 	.word	0x58021800
 8001174:	58020800 	.word	0x58020800
 8001178:	58020000 	.word	0x58020000

0800117c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800117c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800117e:	4812      	ldr	r0, [pc, #72]	; (80011c8 <MX_I2C2_Init+0x4c>)
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C2_Init+0x50>)
 8001182:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <MX_I2C2_Init+0x54>)
 8001186:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	2201      	movs	r2, #1
 800118e:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001192:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001196:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001198:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800119a:	f004 fdbd 	bl	8005d18 <HAL_I2C_Init>
 800119e:	b950      	cbnz	r0, 80011b6 <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <MX_I2C2_Init+0x4c>)
 80011a4:	f005 fa60 	bl	8006668 <HAL_I2CEx_ConfigAnalogFilter>
 80011a8:	b940      	cbnz	r0, 80011bc <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_I2C2_Init+0x4c>)
 80011ae:	f005 fa89 	bl	80066c4 <HAL_I2CEx_ConfigDigitalFilter>
 80011b2:	b930      	cbnz	r0, 80011c2 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011b6:	f001 fcbf 	bl	8002b38 <Error_Handler>
 80011ba:	e7f1      	b.n	80011a0 <MX_I2C2_Init+0x24>
    Error_Handler();
 80011bc:	f001 fcbc 	bl	8002b38 <Error_Handler>
 80011c0:	e7f3      	b.n	80011aa <MX_I2C2_Init+0x2e>
    Error_Handler();
 80011c2:	f001 fcb9 	bl	8002b38 <Error_Handler>
}
 80011c6:	e7f5      	b.n	80011b4 <MX_I2C2_Init+0x38>
 80011c8:	200142a8 	.word	0x200142a8
 80011cc:	40005800 	.word	0x40005800
 80011d0:	00b03fdb 	.word	0x00b03fdb

080011d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d4:	b530      	push	{r4, r5, lr}
 80011d6:	b0b9      	sub	sp, #228	; 0xe4
 80011d8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	2100      	movs	r1, #0
 80011dc:	9133      	str	r1, [sp, #204]	; 0xcc
 80011de:	9134      	str	r1, [sp, #208]	; 0xd0
 80011e0:	9135      	str	r1, [sp, #212]	; 0xd4
 80011e2:	9136      	str	r1, [sp, #216]	; 0xd8
 80011e4:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e6:	22c0      	movs	r2, #192	; 0xc0
 80011e8:	a802      	add	r0, sp, #8
 80011ea:	f016 fd93 	bl	8017d14 <memset>
  if(i2cHandle->Instance==I2C2)
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_I2C_MspInit+0xb0>)
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d001      	beq.n	80011fa <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011f6:	b039      	add	sp, #228	; 0xe4
 80011f8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011fa:	2208      	movs	r2, #8
 80011fc:	2300      	movs	r3, #0
 80011fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	a802      	add	r0, sp, #8
 8001204:	f006 f992 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8001208:	2800      	cmp	r0, #0
 800120a:	d138      	bne.n	800127e <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4c1e      	ldr	r4, [pc, #120]	; (8001288 <HAL_I2C_MspInit+0xb4>)
 800120e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800121a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001226:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800122a:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800122c:	2312      	movs	r3, #18
 800122e:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001230:	2501      	movs	r5, #1
 8001232:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001238:	2304      	movs	r3, #4
 800123a:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	a933      	add	r1, sp, #204	; 0xcc
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <HAL_I2C_MspInit+0xb8>)
 8001240:	f004 fac6 	bl	80057d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001244:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001250:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	4629      	mov	r1, r5
 8001260:	2021      	movs	r0, #33	; 0x21
 8001262:	f002 fe65 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001266:	2021      	movs	r0, #33	; 0x21
 8001268:	f002 fe98 	bl	8003f9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	4629      	mov	r1, r5
 8001270:	2022      	movs	r0, #34	; 0x22
 8001272:	f002 fe5d 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001276:	2022      	movs	r0, #34	; 0x22
 8001278:	f002 fe90 	bl	8003f9c <HAL_NVIC_EnableIRQ>
}
 800127c:	e7bb      	b.n	80011f6 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800127e:	f001 fc5b 	bl	8002b38 <Error_Handler>
 8001282:	e7c3      	b.n	800120c <HAL_I2C_MspInit+0x38>
 8001284:	40005800 	.word	0x40005800
 8001288:	58024400 	.word	0x58024400
 800128c:	58020400 	.word	0x58020400

08001290 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001294:	2400      	movs	r4, #0
 8001296:	9400      	str	r4, [sp, #0]
 8001298:	9401      	str	r4, [sp, #4]
 800129a:	9402      	str	r4, [sp, #8]
 800129c:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800129e:	f002 fe9f 	bl	8003fe0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80012a2:	2501      	movs	r5, #1
 80012a4:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80012a8:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80012ac:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80012ae:	231f      	movs	r3, #31
 80012b0:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012b4:	2387      	movs	r3, #135	; 0x87
 80012b6:	f88d 3009 	strb.w	r3, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ba:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012be:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012c2:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012c6:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012ca:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012ce:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012d2:	4668      	mov	r0, sp
 80012d4:	f002 fea2 	bl	800401c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012d8:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80012dc:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80012e0:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80012e2:	2311      	movs	r3, #17
 80012e4:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012e8:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012ec:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012f0:	2603      	movs	r6, #3
 80012f2:	f88d 600b 	strb.w	r6, [sp, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012f6:	4668      	mov	r0, sp
 80012f8:	f002 fe90 	bl	800401c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8001302:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001306:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001308:	230f      	movs	r3, #15
 800130a:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800130e:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001312:	f88d 400d 	strb.w	r4, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001316:	4668      	mov	r0, sp
 8001318:	f002 fe80 	bl	800401c <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800131c:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 8001320:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001324:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001326:	2318      	movs	r3, #24
 8001328:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800132c:	f88d 500d 	strb.w	r5, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001330:	4668      	mov	r0, sp
 8001332:	f002 fe73 	bl	800401c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001336:	2004      	movs	r0, #4
 8001338:	f002 fe60 	bl	8003ffc <HAL_MPU_Enable>

}
 800133c:	b004      	add	sp, #16
 800133e:	bd70      	pop	{r4, r5, r6, pc}

08001340 <SystemClock_Config>:
{
 8001340:	b530      	push	{r4, r5, lr}
 8001342:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001344:	224c      	movs	r2, #76	; 0x4c
 8001346:	2100      	movs	r1, #0
 8001348:	a80b      	add	r0, sp, #44	; 0x2c
 800134a:	f016 fce3 	bl	8017d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134e:	2220      	movs	r2, #32
 8001350:	2100      	movs	r1, #0
 8001352:	a803      	add	r0, sp, #12
 8001354:	f016 fcde 	bl	8017d14 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001358:	2002      	movs	r0, #2
 800135a:	f005 f9df 	bl	800671c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <SystemClock_Config+0xf8>)
 8001364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001366:	f022 0201 	bic.w	r2, r2, #1
 800136a:	62da      	str	r2, [r3, #44]	; 0x2c
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <SystemClock_Config+0xfc>)
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <SystemClock_Config+0xfc>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001390:	d0fa      	beq.n	8001388 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b2b      	ldr	r3, [pc, #172]	; (8001440 <SystemClock_Config+0x100>)
 8001394:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001398:	f042 0202 	orr.w	r2, r2, #2
 800139c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80013a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ac:	2300      	movs	r3, #0
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <SystemClock_Config+0xfc>)
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80013b8:	619a      	str	r2, [r3, #24]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <SystemClock_Config+0xf8>)
 80013c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013d6:	4b19      	ldr	r3, [pc, #100]	; (800143c <SystemClock_Config+0xfc>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80013de:	d0fa      	beq.n	80013d6 <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013e0:	2321      	movs	r3, #33	; 0x21
 80013e2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013f4:	2205      	movs	r2, #5
 80013f6:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013f8:	22c0      	movs	r2, #192	; 0xc0
 80013fa:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013fc:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013fe:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001400:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001402:	2508      	movs	r5, #8
 8001404:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001406:	2400      	movs	r4, #0
 8001408:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800140a:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	a80b      	add	r0, sp, #44	; 0x2c
 800140e:	f005 f9af 	bl	8006770 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	233f      	movs	r3, #63	; 0x3f
 8001414:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2303      	movs	r3, #3
 8001418:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800141c:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001422:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001428:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800142a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800142c:	2104      	movs	r1, #4
 800142e:	a803      	add	r0, sp, #12
 8001430:	f005 fdf2 	bl	8007018 <HAL_RCC_ClockConfig>
}
 8001434:	b01f      	add	sp, #124	; 0x7c
 8001436:	bd30      	pop	{r4, r5, pc}
 8001438:	58000400 	.word	0x58000400
 800143c:	58024800 	.word	0x58024800
 8001440:	58024400 	.word	0x58024400

08001444 <PeriphCommonClock_Config>:
{
 8001444:	b500      	push	{lr}
 8001446:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001448:	22c0      	movs	r2, #192	; 0xc0
 800144a:	2100      	movs	r1, #0
 800144c:	4668      	mov	r0, sp
 800144e:	f016 fc61 	bl	8017d14 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8001452:	4a0e      	ldr	r2, [pc, #56]	; (800148c <PeriphCommonClock_Config+0x48>)
 8001454:	2300      	movs	r3, #0
 8001456:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800145a:	2319      	movs	r3, #25
 800145c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800145e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001462:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8001464:	2307      	movs	r3, #7
 8001466:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001468:	2302      	movs	r3, #2
 800146a:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800146c:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800146e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001472:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001474:	2301      	movs	r3, #1
 8001476:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147c:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147e:	4668      	mov	r0, sp
 8001480:	f006 f854 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
}
 8001484:	b031      	add	sp, #196	; 0xc4
 8001486:	f85d fb04 	ldr.w	pc, [sp], #4
 800148a:	bf00      	nop
 800148c:	00011100 	.word	0x00011100

08001490 <BSP_SD_IsDetected>:
{
 8001490:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8001492:	2301      	movs	r3, #1
 8001494:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8001498:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800149c:	b002      	add	sp, #8
 800149e:	4770      	bx	lr

080014a0 <checkForSDCardPreset>:
{
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	4604      	mov	r4, r0
	prevVoice = numberToLoad;
 80014a6:	4b41      	ldr	r3, [pc, #260]	; (80015ac <checkForSDCardPreset+0x10c>)
 80014a8:	6018      	str	r0, [r3, #0]
	voice = numberToLoad;
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <checkForSDCardPreset+0x110>)
 80014ac:	6018      	str	r0, [r3, #0]
	if(BSP_SD_IsDetected())
 80014ae:	f7ff ffef 	bl	8001490 <BSP_SD_IsDetected>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d161      	bne.n	800157a <checkForSDCardPreset+0xda>
		loadFailed = 1;
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <checkForSDCardPreset+0x114>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	2000      	movs	r0, #0
	diskBusy = 0;
 80014be:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <checkForSDCardPreset+0x118>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
}
 80014c4:	b008      	add	sp, #32
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 80014c8:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <checkForSDCardPreset+0x11c>)
 80014ca:	2100      	movs	r1, #0
 80014cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 80014d0:	f103 0c01 	add.w	ip, r3, #1
 80014d4:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80014d8:	3302      	adds	r3, #2
 80014da:	2bff      	cmp	r3, #255	; 0xff
 80014dc:	ddf4      	ble.n	80014c8 <checkForSDCardPreset+0x28>
		diskBusy = 1;
 80014de:	2601      	movs	r6, #1
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <checkForSDCardPreset+0x118>)
 80014e2:	701e      	strb	r6, [r3, #0]
		loadFailed = 0;
 80014e4:	2500      	movs	r5, #0
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <checkForSDCardPreset+0x114>)
 80014e8:	701d      	strb	r5, [r3, #0]
		presetWaitingToLoad = 0;
 80014ea:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <checkForSDCardPreset+0x120>)
 80014ec:	601d      	str	r5, [r3, #0]
		disk_initialize(0);
 80014ee:	4628      	mov	r0, r5
 80014f0:	f00a fc20 	bl	800bd34 <disk_initialize>
	    disk_status(0);
 80014f4:	4628      	mov	r0, r5
 80014f6:	f00a fc11 	bl	800bd1c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80014fa:	4632      	mov	r2, r6
 80014fc:	4931      	ldr	r1, [pc, #196]	; (80015c4 <checkForSDCardPreset+0x124>)
 80014fe:	4832      	ldr	r0, [pc, #200]	; (80015c8 <checkForSDCardPreset+0x128>)
 8001500:	f00b fff0 	bl	800d4e4 <f_mount>
 8001504:	2800      	cmp	r0, #0
 8001506:	d1d6      	bne.n	80014b6 <checkForSDCardPreset+0x16>
			itoa(numberToLoad, charBuf, 10);
 8001508:	220a      	movs	r2, #10
 800150a:	a902      	add	r1, sp, #8
 800150c:	4620      	mov	r0, r4
 800150e:	f016 fbbd 	bl	8017c8c <itoa>
			int len = ((strlen(charBuf)));
 8001512:	a802      	add	r0, sp, #8
 8001514:	f7fe fee0 	bl	80002d8 <strlen>
 8001518:	4603      	mov	r3, r0
			if (len == 1)
 800151a:	42b0      	cmp	r0, r6
 800151c:	d02f      	beq.n	800157e <checkForSDCardPreset+0xde>
				strcat(charBuf, "*.ebp");
 800151e:	a902      	add	r1, sp, #8
 8001520:	180c      	adds	r4, r1, r0
 8001522:	4a2a      	ldr	r2, [pc, #168]	; (80015cc <checkForSDCardPreset+0x12c>)
 8001524:	6810      	ldr	r0, [r2, #0]
 8001526:	50c8      	str	r0, [r1, r3]
 8001528:	8893      	ldrh	r3, [r2, #4]
 800152a:	80a3      	strh	r3, [r4, #4]
				strcpy(finalString, charBuf);
 800152c:	a805      	add	r0, sp, #20
 800152e:	f016 fc1d 	bl	8017d6c <strcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001532:	ab05      	add	r3, sp, #20
 8001534:	4a23      	ldr	r2, [pc, #140]	; (80015c4 <checkForSDCardPreset+0x124>)
 8001536:	4926      	ldr	r1, [pc, #152]	; (80015d0 <checkForSDCardPreset+0x130>)
 8001538:	4826      	ldr	r0, [pc, #152]	; (80015d4 <checkForSDCardPreset+0x134>)
 800153a:	f00c fbe2 	bl	800dd02 <f_findfirst>
			if(res == FR_OK)
 800153e:	2800      	cmp	r0, #0
 8001540:	d1b9      	bne.n	80014b6 <checkForSDCardPreset+0x16>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8001542:	2211      	movs	r2, #17
 8001544:	4924      	ldr	r1, [pc, #144]	; (80015d8 <checkForSDCardPreset+0x138>)
 8001546:	4825      	ldr	r0, [pc, #148]	; (80015dc <checkForSDCardPreset+0x13c>)
 8001548:	f00b fffc 	bl	800d544 <f_open>
 800154c:	2800      	cmp	r0, #0
 800154e:	d1b2      	bne.n	80014b6 <checkForSDCardPreset+0x16>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001550:	4c22      	ldr	r4, [pc, #136]	; (80015dc <checkForSDCardPreset+0x13c>)
 8001552:	ab01      	add	r3, sp, #4
 8001554:	68e2      	ldr	r2, [r4, #12]
 8001556:	4922      	ldr	r1, [pc, #136]	; (80015e0 <checkForSDCardPreset+0x140>)
 8001558:	4620      	mov	r0, r4
 800155a:	f00c f909 	bl	800d770 <f_read>
					presetWaitingToParse = bytesRead;
 800155e:	9a01      	ldr	r2, [sp, #4]
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <checkForSDCardPreset+0x144>)
 8001562:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8001564:	4620      	mov	r0, r4
 8001566:	f00c fb2e 	bl	800dbc6 <f_close>
	  	  i2cSending = 1;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <checkForSDCardPreset+0x148>)
 800156c:	2001      	movs	r0, #1
 800156e:	7018      	strb	r0, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8001572:	b662      	cpsie	i
	  	i2cSending = 0;
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e7a1      	b.n	80014be <checkForSDCardPreset+0x1e>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800157a:	2300      	movs	r3, #0
 800157c:	e7ad      	b.n	80014da <checkForSDCardPreset+0x3a>
				finalString[2] = charBuf[1];
 800157e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001582:	f88d 3016 	strb.w	r3, [sp, #22]
				finalString[1] = charBuf[0];
 8001586:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800158a:	f88d 3015 	strb.w	r3, [sp, #21]
				finalString[0] = '0';
 800158e:	2330      	movs	r3, #48	; 0x30
 8001590:	f88d 3014 	strb.w	r3, [sp, #20]
				strcat(finalString, "*.ebp");
 8001594:	ac05      	add	r4, sp, #20
 8001596:	4620      	mov	r0, r4
 8001598:	f7fe fe9e 	bl	80002d8 <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	1821      	adds	r1, r4, r0
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <checkForSDCardPreset+0x12c>)
 80015a2:	6810      	ldr	r0, [r2, #0]
 80015a4:	50e0      	str	r0, [r4, r3]
 80015a6:	8893      	ldrh	r3, [r2, #4]
 80015a8:	808b      	strh	r3, [r1, #4]
 80015aa:	e7c2      	b.n	8001532 <checkForSDCardPreset+0x92>
 80015ac:	2000069c 	.word	0x2000069c
 80015b0:	20014258 	.word	0x20014258
 80015b4:	2001853c 	.word	0x2001853c
 80015b8:	20014358 	.word	0x20014358
 80015bc:	30000000 	.word	0x30000000
 80015c0:	2001a33c 	.word	0x2001a33c
 80015c4:	2001dccc 	.word	0x2001dccc
 80015c8:	2001d868 	.word	0x2001d868
 80015cc:	0801aa1c 	.word	0x0801aa1c
 80015d0:	200163c0 	.word	0x200163c0
 80015d4:	20014320 	.word	0x20014320
 80015d8:	200163d6 	.word	0x200163d6
 80015dc:	2001da9c 	.word	0x2001da9c
 80015e0:	30042380 	.word	0x30042380
 80015e4:	2001a340 	.word	0x2001a340
 80015e8:	200164da 	.word	0x200164da

080015ec <writePresetToSDCard>:
{
 80015ec:	b530      	push	{r4, r5, lr}
 80015ee:	b095      	sub	sp, #84	; 0x54
 80015f0:	4605      	mov	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80015f2:	b672      	cpsid	i
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	e004      	b.n	8001602 <writePresetToSDCard+0x16>
		 audioOutBuffer[i] = 0;
 80015f8:	4a6e      	ldr	r2, [pc, #440]	; (80017b4 <writePresetToSDCard+0x1c8>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001600:	3301      	adds	r3, #1
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	ddf8      	ble.n	80015f8 <writePresetToSDCard+0xc>
	if(BSP_SD_IsDetected())
 8001606:	f7ff ff43 	bl	8001490 <BSP_SD_IsDetected>
 800160a:	b938      	cbnz	r0, 800161c <writePresetToSDCard+0x30>
	presetWaitingToWrite = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <writePresetToSDCard+0x1cc>)
 8001610:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8001612:	4a6a      	ldr	r2, [pc, #424]	; (80017bc <writePresetToSDCard+0x1d0>)
 8001614:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001616:	b662      	cpsie	i
}
 8001618:	b015      	add	sp, #84	; 0x54
 800161a:	bd30      	pop	{r4, r5, pc}
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800161c:	2300      	movs	r3, #0
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	dc09      	bgt.n	8001636 <writePresetToSDCard+0x4a>
					audioOutBuffer[i] = 0;
 8001622:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <writePresetToSDCard+0x1c8>)
 8001624:	2100      	movs	r1, #0
 8001626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					audioOutBuffer[i + 1] = 0;
 800162a:	f103 0c01 	add.w	ip, r3, #1
 800162e:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001632:	3302      	adds	r3, #2
 8001634:	e7f3      	b.n	800161e <writePresetToSDCard+0x32>
				diskBusy = 1;
 8001636:	4b61      	ldr	r3, [pc, #388]	; (80017bc <writePresetToSDCard+0x1d0>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
			    if (presetNumberToSave > 99)
 800163c:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <writePresetToSDCard+0x1d4>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b63      	cmp	r3, #99	; 0x63
 8001644:	d902      	bls.n	800164c <writePresetToSDCard+0x60>
			        presetNumberToSave = 99;
 8001646:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <writePresetToSDCard+0x1d4>)
 8001648:	2263      	movs	r2, #99	; 0x63
 800164a:	701a      	strb	r2, [r3, #0]
				itoa(presetNumberToSave, charBufC, 10);
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <writePresetToSDCard+0x1d4>)
 800164e:	7818      	ldrb	r0, [r3, #0]
 8001650:	220a      	movs	r2, #10
 8001652:	a902      	add	r1, sp, #8
 8001654:	f016 fb1a 	bl	8017c8c <itoa>
				int len = ((strlen(charBufC)));
 8001658:	a802      	add	r0, sp, #8
 800165a:	f7fe fe3d 	bl	80002d8 <strlen>
 800165e:	4603      	mov	r3, r0
				if (len == 1)
 8001660:	2801      	cmp	r0, #1
 8001662:	d019      	beq.n	8001698 <writePresetToSDCard+0xac>
					strcat(charBufC, "*.ebp");
 8001664:	a902      	add	r1, sp, #8
 8001666:	eb01 0c00 	add.w	ip, r1, r0
 800166a:	4a56      	ldr	r2, [pc, #344]	; (80017c4 <writePresetToSDCard+0x1d8>)
 800166c:	6810      	ldr	r0, [r2, #0]
 800166e:	50c8      	str	r0, [r1, r3]
 8001670:	8893      	ldrh	r3, [r2, #4]
 8001672:	f8ac 3004 	strh.w	r3, [ip, #4]
					strcpy(finalStringC, charBufC);
 8001676:	a805      	add	r0, sp, #20
 8001678:	f016 fb78 	bl	8017d6c <strcpy>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
 800167c:	ab05      	add	r3, sp, #20
 800167e:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <writePresetToSDCard+0x1dc>)
 8001680:	4952      	ldr	r1, [pc, #328]	; (80017cc <writePresetToSDCard+0x1e0>)
 8001682:	4853      	ldr	r0, [pc, #332]	; (80017d0 <writePresetToSDCard+0x1e4>)
 8001684:	f00c fb3d 	bl	800dd02 <f_findfirst>
					if((res == FR_OK) && (fno.fname[0]))
 8001688:	b9e8      	cbnz	r0, 80016c6 <writePresetToSDCard+0xda>
 800168a:	4b50      	ldr	r3, [pc, #320]	; (80017cc <writePresetToSDCard+0x1e0>)
 800168c:	7d9b      	ldrb	r3, [r3, #22]
 800168e:	b1d3      	cbz	r3, 80016c6 <writePresetToSDCard+0xda>
						f_unlink (fno.fname);
 8001690:	4850      	ldr	r0, [pc, #320]	; (80017d4 <writePresetToSDCard+0x1e8>)
 8001692:	f00c fb44 	bl	800dd1e <f_unlink>
 8001696:	e7f1      	b.n	800167c <writePresetToSDCard+0x90>
					finalStringC[2] = charBufC[1];
 8001698:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800169c:	f88d 3016 	strb.w	r3, [sp, #22]
					finalStringC[1] = charBufC[0];
 80016a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80016a4:	f88d 3015 	strb.w	r3, [sp, #21]
					finalStringC[0] = '0';
 80016a8:	2330      	movs	r3, #48	; 0x30
 80016aa:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalStringC, "*.ebp");
 80016ae:	ac05      	add	r4, sp, #20
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7fe fe11 	bl	80002d8 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	1821      	adds	r1, r4, r0
 80016ba:	4a42      	ldr	r2, [pc, #264]	; (80017c4 <writePresetToSDCard+0x1d8>)
 80016bc:	6810      	ldr	r0, [r2, #0]
 80016be:	50e0      	str	r0, [r4, r3]
 80016c0:	8893      	ldrh	r3, [r2, #4]
 80016c2:	808b      	strh	r3, [r1, #4]
 80016c4:	e7da      	b.n	800167c <writePresetToSDCard+0x90>
				itoa(presetNumberToSave, charBuf, 10);
 80016c6:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <writePresetToSDCard+0x1d4>)
 80016c8:	7818      	ldrb	r0, [r3, #0]
 80016ca:	220a      	movs	r2, #10
 80016cc:	a908      	add	r1, sp, #32
 80016ce:	f016 fadd 	bl	8017c8c <itoa>
				len = ((strlen(charBuf)));
 80016d2:	a808      	add	r0, sp, #32
 80016d4:	f7fe fe00 	bl	80002d8 <strlen>
				if (len == 1)
 80016d8:	2801      	cmp	r0, #1
 80016da:	d00f      	beq.n	80016fc <writePresetToSDCard+0x110>
					finalString[21] = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
					finalString[20] = 'p';
 80016e2:	2270      	movs	r2, #112	; 0x70
 80016e4:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
					finalString[19] = 'b';
 80016e8:	2262      	movs	r2, #98	; 0x62
 80016ea:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
					finalString[18] = 'e';
 80016ee:	2265      	movs	r2, #101	; 0x65
 80016f0:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
					finalString[17] = '.';
 80016f4:	222e      	movs	r2, #46	; 0x2e
 80016f6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
					for (int i = 0; i < 14; i++)
 80016fa:	e02c      	b.n	8001756 <writePresetToSDCard+0x16a>
					finalString[21] = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
					finalString[20] = 'p';
 8001702:	2270      	movs	r2, #112	; 0x70
 8001704:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
					finalString[19] = 'b';
 8001708:	2262      	movs	r2, #98	; 0x62
 800170a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
					finalString[18] = 'e';
 800170e:	2265      	movs	r2, #101	; 0x65
 8001710:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
					finalString[17] = '.';
 8001714:	222e      	movs	r2, #46	; 0x2e
 8001716:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
					for (int i = 0; i < 14; i++)
 800171a:	e000      	b.n	800171e <writePresetToSDCard+0x132>
 800171c:	3301      	adds	r3, #1
 800171e:	2b0d      	cmp	r3, #13
 8001720:	dc0d      	bgt.n	800173e <writePresetToSDCard+0x152>
						finalString[i+3] = buffer[i+4];
 8001722:	1d1a      	adds	r2, r3, #4
 8001724:	482c      	ldr	r0, [pc, #176]	; (80017d8 <writePresetToSDCard+0x1ec>)
 8001726:	5c82      	ldrb	r2, [r0, r2]
 8001728:	f103 0053 	add.w	r0, r3, #83	; 0x53
 800172c:	4468      	add	r0, sp
 800172e:	f800 2c18 	strb.w	r2, [r0, #-24]
						if (finalString[i+3] == 32)
 8001732:	2a20      	cmp	r2, #32
 8001734:	d1f2      	bne.n	800171c <writePresetToSDCard+0x130>
							finalString[i+3] = '_';
 8001736:	225f      	movs	r2, #95	; 0x5f
 8001738:	f800 2c18 	strb.w	r2, [r0, #-24]
 800173c:	e7ee      	b.n	800171c <writePresetToSDCard+0x130>
					finalString[2] = '_';
 800173e:	235f      	movs	r3, #95	; 0x5f
 8001740:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
					finalString[1] = charBuf[0];
 8001744:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001748:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
					finalString[0] = '0';
 800174c:	2330      	movs	r3, #48	; 0x30
 800174e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8001752:	e01b      	b.n	800178c <writePresetToSDCard+0x1a0>
					for (int i = 0; i < 14; i++)
 8001754:	3301      	adds	r3, #1
 8001756:	2b0d      	cmp	r3, #13
 8001758:	dc0d      	bgt.n	8001776 <writePresetToSDCard+0x18a>
						finalString[i+3] = buffer[i+4];
 800175a:	1d1a      	adds	r2, r3, #4
 800175c:	481e      	ldr	r0, [pc, #120]	; (80017d8 <writePresetToSDCard+0x1ec>)
 800175e:	5c82      	ldrb	r2, [r0, r2]
 8001760:	f103 0053 	add.w	r0, r3, #83	; 0x53
 8001764:	4468      	add	r0, sp
 8001766:	f800 2c18 	strb.w	r2, [r0, #-24]
						if (finalString[i+3] == 32)
 800176a:	2a20      	cmp	r2, #32
 800176c:	d1f2      	bne.n	8001754 <writePresetToSDCard+0x168>
							finalString[i+3] = '_';
 800176e:	225f      	movs	r2, #95	; 0x5f
 8001770:	f800 2c18 	strb.w	r2, [r0, #-24]
 8001774:	e7ee      	b.n	8001754 <writePresetToSDCard+0x168>
					finalString[2] = '_';
 8001776:	235f      	movs	r3, #95	; 0x5f
 8001778:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
					finalString[1] = charBuf[1];
 800177c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8001780:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
					finalString[0] = charBuf[0];
 8001784:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001788:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800178c:	220a      	movs	r2, #10
 800178e:	a90e      	add	r1, sp, #56	; 0x38
 8001790:	4812      	ldr	r0, [pc, #72]	; (80017dc <writePresetToSDCard+0x1f0>)
 8001792:	f00b fed7 	bl	800d544 <f_open>
 8001796:	2800      	cmp	r0, #0
 8001798:	f47f af38 	bne.w	800160c <writePresetToSDCard+0x20>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 800179c:	4c0f      	ldr	r4, [pc, #60]	; (80017dc <writePresetToSDCard+0x1f0>)
 800179e:	ab01      	add	r3, sp, #4
 80017a0:	462a      	mov	r2, r5
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <writePresetToSDCard+0x1ec>)
 80017a4:	4620      	mov	r0, r4
 80017a6:	f00c f8c4 	bl	800d932 <f_write>
					f_close(&SDFile);
 80017aa:	4620      	mov	r0, r4
 80017ac:	f00c fa0b 	bl	800dbc6 <f_close>
 80017b0:	e72c      	b.n	800160c <writePresetToSDCard+0x20>
 80017b2:	bf00      	nop
 80017b4:	30000000 	.word	0x30000000
 80017b8:	2001a344 	.word	0x2001a344
 80017bc:	20014358 	.word	0x20014358
 80017c0:	2001a33b 	.word	0x2001a33b
 80017c4:	0801aa1c 	.word	0x0801aa1c
 80017c8:	2001dccc 	.word	0x2001dccc
 80017cc:	200163c0 	.word	0x200163c0
 80017d0:	20014320 	.word	0x20014320
 80017d4:	200163d6 	.word	0x200163d6
 80017d8:	30042380 	.word	0x30042380
 80017dc:	2001da9c 	.word	0x2001da9c

080017e0 <checkForBootloadableBrainFile>:
	if (boardNumber == 0)
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <checkForBootloadableBrainFile+0xc4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b103      	cbz	r3, 80017e8 <checkForBootloadableBrainFile+0x8>
 80017e6:	4770      	bx	lr
{
 80017e8:	b530      	push	{r4, r5, lr}
 80017ea:	b085      	sub	sp, #20
		if(BSP_SD_IsDetected())
 80017ec:	f7ff fe50 	bl	8001490 <BSP_SD_IsDetected>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d145      	bne.n	8001880 <checkForBootloadableBrainFile+0xa0>
		brainFirmwareUpdateRequested = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <checkForBootloadableBrainFile+0xc8>)
 80017f8:	6013      	str	r3, [r2, #0]
		diskBusy = 0;
 80017fa:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <checkForBootloadableBrainFile+0xcc>)
 80017fc:	7013      	strb	r3, [r2, #0]
}
 80017fe:	b005      	add	sp, #20
 8001800:	bd30      	pop	{r4, r5, pc}
				audioOutBuffer[i] = 0;
 8001802:	4a2b      	ldr	r2, [pc, #172]	; (80018b0 <checkForBootloadableBrainFile+0xd0>)
 8001804:	2100      	movs	r1, #0
 8001806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				audioOutBuffer[i + 1] = 0;
 800180a:	1c58      	adds	r0, r3, #1
 800180c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001810:	3302      	adds	r3, #2
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d9f5      	bls.n	8001802 <checkForBootloadableBrainFile+0x22>
			diskBusy = 1;
 8001816:	2501      	movs	r5, #1
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <checkForBootloadableBrainFile+0xcc>)
 800181a:	701d      	strb	r5, [r3, #0]
			loadFailed = 0;
 800181c:	2400      	movs	r4, #0
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <checkForBootloadableBrainFile+0xd4>)
 8001820:	701c      	strb	r4, [r3, #0]
			disk_initialize(0);
 8001822:	4620      	mov	r0, r4
 8001824:	f00a fa86 	bl	800bd34 <disk_initialize>
			disk_status(0);
 8001828:	4620      	mov	r0, r4
 800182a:	f00a fa77 	bl	800bd1c <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800182e:	462a      	mov	r2, r5
 8001830:	4921      	ldr	r1, [pc, #132]	; (80018b8 <checkForBootloadableBrainFile+0xd8>)
 8001832:	4822      	ldr	r0, [pc, #136]	; (80018bc <checkForBootloadableBrainFile+0xdc>)
 8001834:	f00b fe56 	bl	800d4e4 <f_mount>
 8001838:	2800      	cmp	r0, #0
 800183a:	d1db      	bne.n	80017f4 <checkForBootloadableBrainFile+0x14>
				char finalString[10] = "brain.bin";
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <checkForBootloadableBrainFile+0xe0>)
 800183e:	ab01      	add	r3, sp, #4
 8001840:	ca07      	ldmia	r2, {r0, r1, r2}
 8001842:	c303      	stmia	r3!, {r0, r1}
 8001844:	801a      	strh	r2, [r3, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001846:	ab01      	add	r3, sp, #4
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <checkForBootloadableBrainFile+0xd8>)
 800184a:	491e      	ldr	r1, [pc, #120]	; (80018c4 <checkForBootloadableBrainFile+0xe4>)
 800184c:	481e      	ldr	r0, [pc, #120]	; (80018c8 <checkForBootloadableBrainFile+0xe8>)
 800184e:	f00c fa58 	bl	800dd02 <f_findfirst>
				if(res == FR_OK)
 8001852:	2800      	cmp	r0, #0
 8001854:	d1ce      	bne.n	80017f4 <checkForBootloadableBrainFile+0x14>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8001856:	2211      	movs	r2, #17
 8001858:	491c      	ldr	r1, [pc, #112]	; (80018cc <checkForBootloadableBrainFile+0xec>)
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <checkForBootloadableBrainFile+0xf0>)
 800185c:	f00b fe72 	bl	800d544 <f_open>
 8001860:	2800      	cmp	r0, #0
 8001862:	d1c7      	bne.n	80017f4 <checkForBootloadableBrainFile+0x14>
						brainFirmwareSize = f_size(&SDFile);
 8001864:	4c1a      	ldr	r4, [pc, #104]	; (80018d0 <checkForBootloadableBrainFile+0xf0>)
 8001866:	68e2      	ldr	r2, [r4, #12]
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <checkForBootloadableBrainFile+0xf4>)
 800186a:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
 800186c:	466b      	mov	r3, sp
 800186e:	491a      	ldr	r1, [pc, #104]	; (80018d8 <checkForBootloadableBrainFile+0xf8>)
 8001870:	4620      	mov	r0, r4
 8001872:	f00b ff7d 	bl	800d770 <f_read>
						f_close(&SDFile);
 8001876:	4620      	mov	r0, r4
 8001878:	f00c f9a5 	bl	800dbc6 <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	e006      	b.n	800188e <checkForBootloadableBrainFile+0xae>
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001880:	2300      	movs	r3, #0
 8001882:	e7c6      	b.n	8001812 <checkForBootloadableBrainFile+0x32>
							memoryTest[i] = brainFirmwareBuffer[i];
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <checkForBootloadableBrainFile+0xf8>)
 8001886:	5cd1      	ldrb	r1, [r2, r3]
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <checkForBootloadableBrainFile+0xfc>)
 800188a:	54d1      	strb	r1, [r2, r3]
						for (uint_fast16_t i = 0; i< 700; i++)
 800188c:	3301      	adds	r3, #1
 800188e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001892:	d3f7      	bcc.n	8001884 <checkForBootloadableBrainFile+0xa4>
						foundBrainFirmware = 1;
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <checkForBootloadableBrainFile+0x100>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
						brainFirmwareBufferIndex = 0;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <checkForBootloadableBrainFile+0x104>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e7a8      	b.n	80017f4 <checkForBootloadableBrainFile+0x14>
 80018a2:	bf00      	nop
 80018a4:	200142fd 	.word	0x200142fd
 80018a8:	20014310 	.word	0x20014310
 80018ac:	20014358 	.word	0x20014358
 80018b0:	30000000 	.word	0x30000000
 80018b4:	2001853c 	.word	0x2001853c
 80018b8:	2001dccc 	.word	0x2001dccc
 80018bc:	2001d868 	.word	0x2001d868
 80018c0:	0801aa24 	.word	0x0801aa24
 80018c4:	200163c0 	.word	0x200163c0
 80018c8:	20014320 	.word	0x20014320
 80018cc:	200163d6 	.word	0x200163d6
 80018d0:	2001da9c 	.word	0x2001da9c
 80018d4:	2001430c 	.word	0x2001430c
 80018d8:	61e00000 	.word	0x61e00000
 80018dc:	20018f10 	.word	0x20018f10
 80018e0:	200164d8 	.word	0x200164d8
 80018e4:	20014300 	.word	0x20014300

080018e8 <getPresetNamesFromSDCard>:
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	b088      	sub	sp, #32
	if(BSP_SD_IsDetected())
 80018ec:	f7ff fdd0 	bl	8001490 <BSP_SD_IsDetected>
 80018f0:	bb18      	cbnz	r0, 800193a <getPresetNamesFromSDCard+0x52>
	diskBusy = 0;
 80018f2:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <getPresetNamesFromSDCard+0x18c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
}
 80018f8:	b008      	add	sp, #32
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 80018fc:	4a5e      	ldr	r2, [pc, #376]	; (8001a78 <getPresetNamesFromSDCard+0x190>)
 80018fe:	2100      	movs	r1, #0
 8001900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 8001904:	1c58      	adds	r0, r3, #1
 8001906:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800190a:	3302      	adds	r3, #2
 800190c:	2bff      	cmp	r3, #255	; 0xff
 800190e:	ddf5      	ble.n	80018fc <getPresetNamesFromSDCard+0x14>
		diskBusy = 1;
 8001910:	2501      	movs	r5, #1
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <getPresetNamesFromSDCard+0x18c>)
 8001914:	701d      	strb	r5, [r3, #0]
		loadFailed = 0;
 8001916:	2400      	movs	r4, #0
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <getPresetNamesFromSDCard+0x194>)
 800191a:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
 800191c:	4620      	mov	r0, r4
 800191e:	f00a fa09 	bl	800bd34 <disk_initialize>
	    disk_status(0);
 8001922:	4620      	mov	r0, r4
 8001924:	f00a f9fa 	bl	800bd1c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8001928:	462a      	mov	r2, r5
 800192a:	4955      	ldr	r1, [pc, #340]	; (8001a80 <getPresetNamesFromSDCard+0x198>)
 800192c:	4855      	ldr	r0, [pc, #340]	; (8001a84 <getPresetNamesFromSDCard+0x19c>)
 800192e:	f00b fdd9 	bl	800d4e4 <f_mount>
 8001932:	2800      	cmp	r0, #0
 8001934:	d1dd      	bne.n	80018f2 <getPresetNamesFromSDCard+0xa>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001936:	2400      	movs	r4, #0
 8001938:	e01f      	b.n	800197a <getPresetNamesFromSDCard+0x92>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800193a:	2300      	movs	r3, #0
 800193c:	e7e6      	b.n	800190c <getPresetNamesFromSDCard+0x24>
					finalString[2] = charBuf[1];
 800193e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001942:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 8001946:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800194a:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 800194e:	2330      	movs	r3, #48	; 0x30
 8001950:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 8001954:	ad05      	add	r5, sp, #20
 8001956:	4628      	mov	r0, r5
 8001958:	f7fe fcbe 	bl	80002d8 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	1829      	adds	r1, r5, r0
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <getPresetNamesFromSDCard+0x1a0>)
 8001962:	6810      	ldr	r0, [r2, #0]
 8001964:	50e8      	str	r0, [r5, r3]
 8001966:	8893      	ldrh	r3, [r2, #4]
 8001968:	808b      	strh	r3, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800196a:	ab05      	add	r3, sp, #20
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <getPresetNamesFromSDCard+0x198>)
 800196e:	4947      	ldr	r1, [pc, #284]	; (8001a8c <getPresetNamesFromSDCard+0x1a4>)
 8001970:	4847      	ldr	r0, [pc, #284]	; (8001a90 <getPresetNamesFromSDCard+0x1a8>)
 8001972:	f00c f9c6 	bl	800dd02 <f_findfirst>
				if(res == FR_OK)
 8001976:	b1c0      	cbz	r0, 80019aa <getPresetNamesFromSDCard+0xc2>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001978:	3401      	adds	r4, #1
 800197a:	2c3f      	cmp	r4, #63	; 0x3f
 800197c:	dcb9      	bgt.n	80018f2 <getPresetNamesFromSDCard+0xa>
				itoa(i, charBuf, 10);
 800197e:	220a      	movs	r2, #10
 8001980:	a902      	add	r1, sp, #8
 8001982:	4620      	mov	r0, r4
 8001984:	f016 f982 	bl	8017c8c <itoa>
				int len = ((strlen(charBuf)));
 8001988:	a802      	add	r0, sp, #8
 800198a:	f7fe fca5 	bl	80002d8 <strlen>
 800198e:	4603      	mov	r3, r0
				if (len == 1)
 8001990:	2801      	cmp	r0, #1
 8001992:	d0d4      	beq.n	800193e <getPresetNamesFromSDCard+0x56>
					strcat(charBuf, "*.ebp");
 8001994:	a902      	add	r1, sp, #8
 8001996:	180d      	adds	r5, r1, r0
 8001998:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <getPresetNamesFromSDCard+0x1a0>)
 800199a:	6810      	ldr	r0, [r2, #0]
 800199c:	50c8      	str	r0, [r1, r3]
 800199e:	8893      	ldrh	r3, [r2, #4]
 80019a0:	80ab      	strh	r3, [r5, #4]
					strcpy(finalString, charBuf);
 80019a2:	a805      	add	r0, sp, #20
 80019a4:	f016 f9e2 	bl	8017d6c <strcpy>
 80019a8:	e7df      	b.n	800196a <getPresetNamesFromSDCard+0x82>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80019aa:	2211      	movs	r2, #17
 80019ac:	4939      	ldr	r1, [pc, #228]	; (8001a94 <getPresetNamesFromSDCard+0x1ac>)
 80019ae:	483a      	ldr	r0, [pc, #232]	; (8001a98 <getPresetNamesFromSDCard+0x1b0>)
 80019b0:	f00b fdc8 	bl	800d544 <f_open>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d1df      	bne.n	8001978 <getPresetNamesFromSDCard+0x90>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80019b8:	4d37      	ldr	r5, [pc, #220]	; (8001a98 <getPresetNamesFromSDCard+0x1b0>)
 80019ba:	4e38      	ldr	r6, [pc, #224]	; (8001a9c <getPresetNamesFromSDCard+0x1b4>)
 80019bc:	ab01      	add	r3, sp, #4
 80019be:	68ea      	ldr	r2, [r5, #12]
 80019c0:	4631      	mov	r1, r6
 80019c2:	4628      	mov	r0, r5
 80019c4:	f00b fed4 	bl	800d770 <f_read>
						f_close(&SDFile);
 80019c8:	4628      	mov	r0, r5
 80019ca:	f00c f8fc 	bl	800dbc6 <f_close>
						if (buffer[bufferIndex] == 17)
 80019ce:	7833      	ldrb	r3, [r6, #0]
 80019d0:	2b11      	cmp	r3, #17
 80019d2:	d014      	beq.n	80019fe <getPresetNamesFromSDCard+0x116>
						uint16_t bufferIndex = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	2200      	movs	r2, #0
 80019d8:	e00c      	b.n	80019f4 <getPresetNamesFromSDCard+0x10c>
							presetNamesArray[i][j] = buffer[bufferIndex];
 80019da:	4930      	ldr	r1, [pc, #192]	; (8001a9c <getPresetNamesFromSDCard+0x1b4>)
 80019dc:	f811 c003 	ldrb.w	ip, [r1, r3]
 80019e0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80019e4:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <getPresetNamesFromSDCard+0x1b8>)
 80019e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80019ea:	f801 c002 	strb.w	ip, [r1, r2]
							bufferIndex++;
 80019ee:	3301      	adds	r3, #1
 80019f0:	b29b      	uxth	r3, r3
						for (int j = 0; j < 14; j++)
 80019f2:	3201      	adds	r2, #1
 80019f4:	2a0d      	cmp	r2, #13
 80019f6:	ddf0      	ble.n	80019da <getPresetNamesFromSDCard+0xf2>
						for (int j = 0; j < 8; j++)
 80019f8:	f04f 0c00 	mov.w	ip, #0
 80019fc:	e016      	b.n	8001a2c <getPresetNamesFromSDCard+0x144>
							bufferIndex = 4;
 80019fe:	2304      	movs	r3, #4
 8001a00:	e7e9      	b.n	80019d6 <getPresetNamesFromSDCard+0xee>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <getPresetNamesFromSDCard+0x1b4>)
 8001a04:	f812 e003 	ldrb.w	lr, [r2, r3]
 8001a08:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8001a0c:	22c8      	movs	r2, #200	; 0xc8
 8001a0e:	fb04 f202 	mul.w	r2, r4, r2
 8001a12:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8001a16:	4823      	ldr	r0, [pc, #140]	; (8001aa4 <getPresetNamesFromSDCard+0x1bc>)
 8001a18:	4402      	add	r2, r0
 8001a1a:	f802 e001 	strb.w	lr, [r2, r1]
								bufferIndex++;
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29b      	uxth	r3, r3
							for (int k = 0; k < 9; k++)
 8001a22:	3101      	adds	r1, #1
 8001a24:	2908      	cmp	r1, #8
 8001a26:	ddec      	ble.n	8001a02 <getPresetNamesFromSDCard+0x11a>
						for (int j = 0; j < 8; j++)
 8001a28:	f10c 0c01 	add.w	ip, ip, #1
 8001a2c:	f1bc 0f07 	cmp.w	ip, #7
 8001a30:	dc01      	bgt.n	8001a36 <getPresetNamesFromSDCard+0x14e>
							for (int k = 0; k < 9; k++)
 8001a32:	2100      	movs	r1, #0
 8001a34:	e7f6      	b.n	8001a24 <getPresetNamesFromSDCard+0x13c>
						for (int j = 0; j < 4; j++)
 8001a36:	f04f 0e00 	mov.w	lr, #0
 8001a3a:	e016      	b.n	8001a6a <getPresetNamesFromSDCard+0x182>
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 8001a3c:	f10e 0208 	add.w	r2, lr, #8
 8001a40:	4916      	ldr	r1, [pc, #88]	; (8001a9c <getPresetNamesFromSDCard+0x1b4>)
 8001a42:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001a46:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a4a:	21c8      	movs	r1, #200	; 0xc8
 8001a4c:	fb04 f101 	mul.w	r1, r4, r1
 8001a50:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001a54:	4913      	ldr	r1, [pc, #76]	; (8001aa4 <getPresetNamesFromSDCard+0x1bc>)
 8001a56:	440a      	add	r2, r1
 8001a58:	f802 c000 	strb.w	ip, [r2, r0]
								bufferIndex++;
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
							for (int k = 0; k < 10; k++)
 8001a60:	3001      	adds	r0, #1
 8001a62:	2809      	cmp	r0, #9
 8001a64:	ddea      	ble.n	8001a3c <getPresetNamesFromSDCard+0x154>
						for (int j = 0; j < 4; j++)
 8001a66:	f10e 0e01 	add.w	lr, lr, #1
 8001a6a:	f1be 0f03 	cmp.w	lr, #3
 8001a6e:	dc83      	bgt.n	8001978 <getPresetNamesFromSDCard+0x90>
							for (int k = 0; k < 10; k++)
 8001a70:	2000      	movs	r0, #0
 8001a72:	e7f6      	b.n	8001a62 <getPresetNamesFromSDCard+0x17a>
 8001a74:	20014358 	.word	0x20014358
 8001a78:	30000000 	.word	0x30000000
 8001a7c:	2001853c 	.word	0x2001853c
 8001a80:	2001dccc 	.word	0x2001dccc
 8001a84:	2001d868 	.word	0x2001d868
 8001a88:	0801aa1c 	.word	0x0801aa1c
 8001a8c:	200163c0 	.word	0x200163c0
 8001a90:	20014320 	.word	0x20014320
 8001a94:	200163d6 	.word	0x200163d6
 8001a98:	2001da9c 	.word	0x2001da9c
 8001a9c:	30042380 	.word	0x30042380
 8001aa0:	30042000 	.word	0x30042000
 8001aa4:	30043380 	.word	0x30043380

08001aa8 <SDRAM_init>:
{
 8001aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aac:	b086      	sub	sp, #24
	        __IO uint32_t tmpmrd = 0;
 8001aae:	2700      	movs	r7, #0
 8001ab0:	9701      	str	r7, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ab2:	2501      	movs	r5, #1
 8001ab4:	9502      	str	r5, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ab6:	2610      	movs	r6, #16
 8001ab8:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001aba:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 8001abc:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001abe:	4c1d      	ldr	r4, [pc, #116]	; (8001b34 <SDRAM_init+0x8c>)
 8001ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac4:	a902      	add	r1, sp, #8
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f008 fdfa 	bl	800a6c0 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 8001acc:	4628      	mov	r0, r5
 8001ace:	f002 f9f9 	bl	8003ec4 <HAL_Delay>
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001ad2:	f04f 0802 	mov.w	r8, #2
 8001ad6:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ada:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001adc:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 8001ade:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae4:	a902      	add	r1, sp, #8
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f008 fdea 	bl	800a6c0 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001aec:	2303      	movs	r3, #3
 8001aee:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001af0:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 2;
 8001af2:	f8cd 8010 	str.w	r8, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 8001af6:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001afc:	a902      	add	r1, sp, #8
 8001afe:	4620      	mov	r0, r4
 8001b00:	f008 fdde 	bl	800a6c0 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001b04:	f240 2322 	movw	r3, #546	; 0x222
 8001b08:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001b0e:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001b10:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 8001b12:	9b01      	ldr	r3, [sp, #4]
 8001b14:	9305      	str	r3, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001b16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b1a:	a902      	add	r1, sp, #8
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f008 fdcf 	bl	800a6c0 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 8001b22:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001b26:	4620      	mov	r0, r4
 8001b28:	f008 fdeb 	bl	800a702 <HAL_SDRAM_ProgramRefreshRate>
}
 8001b2c:	b006      	add	sp, #24
 8001b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b32:	bf00      	nop
 8001b34:	20014274 	.word	0x20014274

08001b38 <setEffectsFunctions>:
{
 8001b38:	b410      	push	{r4}
	effectsActive[i] = 1;
 8001b3a:	4b97      	ldr	r3, [pc, #604]	; (8001d98 <setEffectsFunctions+0x260>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001b40:	2815      	cmp	r0, #21
 8001b42:	d82a      	bhi.n	8001b9a <setEffectsFunctions+0x62>
 8001b44:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001b48:	002c0016 	.word	0x002c0016
 8001b4c:	00540040 	.word	0x00540040
 8001b50:	007b0068 	.word	0x007b0068
 8001b54:	00a2008e 	.word	0x00a2008e
 8001b58:	00fb00b8 	.word	0x00fb00b8
 8001b5c:	017a0111 	.word	0x017a0111
 8001b60:	01d30190 	.word	0x01d30190
 8001b64:	01f901e6 	.word	0x01f901e6
 8001b68:	021f020c 	.word	0x021f020c
 8001b6c:	02470233 	.word	0x02470233
 8001b70:	026f025b 	.word	0x026f025b
			  effectTick[i] = &blankTick;
 8001b74:	4b89      	ldr	r3, [pc, #548]	; (8001d9c <setEffectsFunctions+0x264>)
 8001b76:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <setEffectsFunctions+0x268>)
 8001b78:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &blankFunction;
 8001b7c:	4889      	ldr	r0, [pc, #548]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001b7e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8001b82:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <setEffectsFunctions+0x270>)
 8001b88:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001b8c:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001b8e:	6093      	str	r3, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001b90:	60d3      	str	r3, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b92:	6113      	str	r3, [r2, #16]
			  effectsActive[i] = 0;
 8001b94:	4b80      	ldr	r3, [pc, #512]	; (8001d98 <setEffectsFunctions+0x260>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	545a      	strb	r2, [r3, r1]
}
 8001b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b9e:	4770      	bx	lr
			  effectTick[i] = &softClipTick;
 8001ba0:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <setEffectsFunctions+0x264>)
 8001ba2:	4a82      	ldr	r2, [pc, #520]	; (8001dac <setEffectsFunctions+0x274>)
 8001ba4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ba8:	4b7e      	ldr	r3, [pc, #504]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001baa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001bae:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001bb2:	4c7f      	ldr	r4, [pc, #508]	; (8001db0 <setEffectsFunctions+0x278>)
 8001bb4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001bb8:	487e      	ldr	r0, [pc, #504]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001bba:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Soft;
 8001bbc:	487e      	ldr	r0, [pc, #504]	; (8001db8 <setEffectsFunctions+0x280>)
 8001bbe:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001bc0:	4879      	ldr	r0, [pc, #484]	; (8001da8 <setEffectsFunctions+0x270>)
 8001bc2:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001bc4:	6110      	str	r0, [r2, #16]
			  break;
 8001bc6:	e7e8      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &hardClipTick;
 8001bc8:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <setEffectsFunctions+0x264>)
 8001bca:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <setEffectsFunctions+0x284>)
 8001bcc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001bd0:	4b74      	ldr	r3, [pc, #464]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001bd2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001bd6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001bda:	4c75      	ldr	r4, [pc, #468]	; (8001db0 <setEffectsFunctions+0x278>)
 8001bdc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001be0:	4874      	ldr	r0, [pc, #464]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001be2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Hard;
 8001be4:	4876      	ldr	r0, [pc, #472]	; (8001dc0 <setEffectsFunctions+0x288>)
 8001be6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001be8:	486f      	ldr	r0, [pc, #444]	; (8001da8 <setEffectsFunctions+0x270>)
 8001bea:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001bec:	6110      	str	r0, [r2, #16]
			  break;
 8001bee:	e7d4      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &polynomialShaperTick;
 8001bf0:	4b6a      	ldr	r3, [pc, #424]	; (8001d9c <setEffectsFunctions+0x264>)
 8001bf2:	4a74      	ldr	r2, [pc, #464]	; (8001dc4 <setEffectsFunctions+0x28c>)
 8001bf4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001bfa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001bfe:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001c02:	4c6b      	ldr	r4, [pc, #428]	; (8001db0 <setEffectsFunctions+0x278>)
 8001c04:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c08:	486a      	ldr	r0, [pc, #424]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001c0a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Poly;
 8001c0c:	486e      	ldr	r0, [pc, #440]	; (8001dc8 <setEffectsFunctions+0x290>)
 8001c0e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c10:	4865      	ldr	r0, [pc, #404]	; (8001da8 <setEffectsFunctions+0x270>)
 8001c12:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c14:	6110      	str	r0, [r2, #16]
			  break;
 8001c16:	e7c0      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &satTick;
 8001c18:	4b60      	ldr	r3, [pc, #384]	; (8001d9c <setEffectsFunctions+0x264>)
 8001c1a:	4a6c      	ldr	r2, [pc, #432]	; (8001dcc <setEffectsFunctions+0x294>)
 8001c1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c20:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001c22:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c26:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c2a:	4c61      	ldr	r4, [pc, #388]	; (8001db0 <setEffectsFunctions+0x278>)
 8001c2c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c30:	4a60      	ldr	r2, [pc, #384]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001c32:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001c34:	4a5c      	ldr	r2, [pc, #368]	; (8001da8 <setEffectsFunctions+0x270>)
 8001c36:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c38:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c3a:	6102      	str	r2, [r0, #16]
			  break;
 8001c3c:	e7ad      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &tanhTick;
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <setEffectsFunctions+0x264>)
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <setEffectsFunctions+0x298>)
 8001c42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001c46:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001c48:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c50:	4c57      	ldr	r4, [pc, #348]	; (8001db0 <setEffectsFunctions+0x278>)
 8001c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c56:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001c58:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001c5a:	4a53      	ldr	r2, [pc, #332]	; (8001da8 <setEffectsFunctions+0x270>)
 8001c5c:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c5e:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c60:	6102      	str	r2, [r0, #16]
			  break;
 8001c62:	e79a      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &shaperTick;
 8001c64:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <setEffectsFunctions+0x264>)
 8001c66:	4a5b      	ldr	r2, [pc, #364]	; (8001dd4 <setEffectsFunctions+0x29c>)
 8001c68:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &param1Linear;
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001c6e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001c72:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001c76:	4c58      	ldr	r4, [pc, #352]	; (8001dd8 <setEffectsFunctions+0x2a0>)
 8001c78:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001c7c:	484d      	ldr	r0, [pc, #308]	; (8001db4 <setEffectsFunctions+0x27c>)
 8001c7e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
 8001c80:	4856      	ldr	r0, [pc, #344]	; (8001ddc <setEffectsFunctions+0x2a4>)
 8001c82:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c84:	4848      	ldr	r0, [pc, #288]	; (8001da8 <setEffectsFunctions+0x270>)
 8001c86:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c88:	6110      	str	r0, [r2, #16]
			  break;
 8001c8a:	e786      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &compressorTick;
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <setEffectsFunctions+0x264>)
 8001c8e:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <setEffectsFunctions+0x2a8>)
 8001c90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001c96:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001c9a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001c9e:	4c51      	ldr	r4, [pc, #324]	; (8001de4 <setEffectsFunctions+0x2ac>)
 8001ca0:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &compressorParam2;
 8001ca4:	4850      	ldr	r0, [pc, #320]	; (8001de8 <setEffectsFunctions+0x2b0>)
 8001ca6:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001ca8:	4850      	ldr	r0, [pc, #320]	; (8001dec <setEffectsFunctions+0x2b4>)
 8001caa:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &compressorParam4;
 8001cac:	4850      	ldr	r0, [pc, #320]	; (8001df0 <setEffectsFunctions+0x2b8>)
 8001cae:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <setEffectsFunctions+0x2bc>)
 8001cb4:	611a      	str	r2, [r3, #16]
			  break;
 8001cb6:	e770      	b.n	8001b9a <setEffectsFunctions+0x62>
			  if (chorusAssignment != 255)
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <setEffectsFunctions+0x2c0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d024      	beq.n	8001d0c <setEffectsFunctions+0x1d4>
				  effectTick[chorusAssignment] = &blankTick;
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <setEffectsFunctions+0x2c0>)
 8001cc4:	7810      	ldrb	r0, [r2, #0]
 8001cc6:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <setEffectsFunctions+0x264>)
 8001cc8:	4c35      	ldr	r4, [pc, #212]	; (8001da0 <setEffectsFunctions+0x268>)
 8001cca:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
 8001cce:	7810      	ldrb	r0, [r2, #0]
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001cd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cd6:	4c34      	ldr	r4, [pc, #208]	; (8001da8 <setEffectsFunctions+0x270>)
 8001cd8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
 8001cdc:	7810      	ldrb	r0, [r2, #0]
 8001cde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ce6:	6044      	str	r4, [r0, #4]
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
 8001ce8:	7810      	ldrb	r0, [r2, #0]
 8001cea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001cf2:	6084      	str	r4, [r0, #8]
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
 8001cf4:	7810      	ldrb	r0, [r2, #0]
 8001cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001cfe:	60c4      	str	r4, [r0, #12]
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001d0a:	611c      	str	r4, [r3, #16]
			  chorusAssignment = i;
 8001d0c:	b2ca      	uxtb	r2, r1
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <setEffectsFunctions+0x2c0>)
 8001d10:	701a      	strb	r2, [r3, #0]
			  effectTick[i] = &chorusTick;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <setEffectsFunctions+0x264>)
 8001d14:	4a39      	ldr	r2, [pc, #228]	; (8001dfc <setEffectsFunctions+0x2c4>)
 8001d16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001d1c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001d20:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001d24:	4c36      	ldr	r4, [pc, #216]	; (8001e00 <setEffectsFunctions+0x2c8>)
 8001d26:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &chorusParam2;
 8001d2a:	4836      	ldr	r0, [pc, #216]	; (8001e04 <setEffectsFunctions+0x2cc>)
 8001d2c:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &chorusParam3;
 8001d2e:	4836      	ldr	r0, [pc, #216]	; (8001e08 <setEffectsFunctions+0x2d0>)
 8001d30:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &chorusParam4;
 8001d32:	4836      	ldr	r0, [pc, #216]	; (8001e0c <setEffectsFunctions+0x2d4>)
 8001d34:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d36:	4613      	mov	r3, r2
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <setEffectsFunctions+0x270>)
 8001d3a:	611a      	str	r2, [r3, #16]
			  break;
 8001d3c:	e72d      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &bcTick;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <setEffectsFunctions+0x264>)
 8001d40:	4a33      	ldr	r2, [pc, #204]	; (8001e10 <setEffectsFunctions+0x2d8>)
 8001d42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d46:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001d48:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001d4c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001d50:	4c17      	ldr	r4, [pc, #92]	; (8001db0 <setEffectsFunctions+0x278>)
 8001d52:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &param2BC;
 8001d56:	482f      	ldr	r0, [pc, #188]	; (8001e14 <setEffectsFunctions+0x2dc>)
 8001d58:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3BC;
 8001d5a:	482f      	ldr	r0, [pc, #188]	; (8001e18 <setEffectsFunctions+0x2e0>)
 8001d5c:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4BC;
 8001d5e:	482f      	ldr	r0, [pc, #188]	; (8001e1c <setEffectsFunctions+0x2e4>)
 8001d60:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5BC;
 8001d62:	4613      	mov	r3, r2
 8001d64:	4a2e      	ldr	r2, [pc, #184]	; (8001e20 <setEffectsFunctions+0x2e8>)
 8001d66:	611a      	str	r2, [r3, #16]
			  break;
 8001d68:	e717      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &tiltFilterTick;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <setEffectsFunctions+0x264>)
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <setEffectsFunctions+0x2ec>)
 8001d6e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <setEffectsFunctions+0x26c>)
 8001d74:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001d78:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001d7c:	4c2a      	ldr	r4, [pc, #168]	; (8001e28 <setEffectsFunctions+0x2f0>)
 8001d7e:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &tiltParam2;
 8001d82:	482a      	ldr	r0, [pc, #168]	; (8001e2c <setEffectsFunctions+0x2f4>)
 8001d84:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &tiltParam3;
 8001d86:	482a      	ldr	r0, [pc, #168]	; (8001e30 <setEffectsFunctions+0x2f8>)
 8001d88:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &tiltParam4;
 8001d8a:	482a      	ldr	r0, [pc, #168]	; (8001e34 <setEffectsFunctions+0x2fc>)
 8001d8c:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001d8e:	4613      	mov	r3, r2
 8001d90:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <setEffectsFunctions+0x300>)
 8001d92:	611a      	str	r2, [r3, #16]
			  break;
 8001d94:	e701      	b.n	8001b9a <setEffectsFunctions+0x62>
 8001d96:	bf00      	nop
 8001d98:	200143ac 	.word	0x200143ac
 8001d9c:	2001d150 	.word	0x2001d150
 8001da0:	00007a81 	.word	0x00007a81
 8001da4:	2001435c 	.word	0x2001435c
 8001da8:	00001a01 	.word	0x00001a01
 8001dac:	00007c01 	.word	0x00007c01
 8001db0:	00006e01 	.word	0x00006e01
 8001db4:	000071c1 	.word	0x000071c1
 8001db8:	00007221 	.word	0x00007221
 8001dbc:	00007ca1 	.word	0x00007ca1
 8001dc0:	00007281 	.word	0x00007281
 8001dc4:	00007d41 	.word	0x00007d41
 8001dc8:	00007301 	.word	0x00007301
 8001dcc:	00007e41 	.word	0x00007e41
 8001dd0:	00007ae1 	.word	0x00007ae1
 8001dd4:	00007981 	.word	0x00007981
 8001dd8:	00006de1 	.word	0x00006de1
 8001ddc:	00007201 	.word	0x00007201
 8001de0:	00007f61 	.word	0x00007f61
 8001de4:	00007001 	.word	0x00007001
 8001de8:	00007021 	.word	0x00007021
 8001dec:	00007061 	.word	0x00007061
 8001df0:	00007081 	.word	0x00007081
 8001df4:	00007121 	.word	0x00007121
 8001df8:	200006ac 	.word	0x200006ac
 8001dfc:	000078a1 	.word	0x000078a1
 8001e00:	00007661 	.word	0x00007661
 8001e04:	000076a1 	.word	0x000076a1
 8001e08:	000076c1 	.word	0x000076c1
 8001e0c:	00007701 	.word	0x00007701
 8001e10:	00007f21 	.word	0x00007f21
 8001e14:	000073e1 	.word	0x000073e1
 8001e18:	00007401 	.word	0x00007401
 8001e1c:	00007441 	.word	0x00007441
 8001e20:	00007461 	.word	0x00007461
 8001e24:	00007aa1 	.word	0x00007aa1
 8001e28:	00006ec1 	.word	0x00006ec1
 8001e2c:	00006f01 	.word	0x00006f01
 8001e30:	00006f81 	.word	0x00006f81
 8001e34:	00006fc1 	.word	0x00006fc1
 8001e38:	000073c1 	.word	0x000073c1
			  effectTick[i] = &wavefolderTick;
 8001e3c:	4b83      	ldr	r3, [pc, #524]	; (800204c <setEffectsFunctions+0x514>)
 8001e3e:	4a84      	ldr	r2, [pc, #528]	; (8002050 <setEffectsFunctions+0x518>)
 8001e40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001e44:	4b83      	ldr	r3, [pc, #524]	; (8002054 <setEffectsFunctions+0x51c>)
 8001e46:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001e4a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001e4e:	4c82      	ldr	r4, [pc, #520]	; (8002058 <setEffectsFunctions+0x520>)
 8001e50:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001e54:	4881      	ldr	r0, [pc, #516]	; (800205c <setEffectsFunctions+0x524>)
 8001e56:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001e58:	4881      	ldr	r0, [pc, #516]	; (8002060 <setEffectsFunctions+0x528>)
 8001e5a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
 8001e5c:	4881      	ldr	r0, [pc, #516]	; (8002064 <setEffectsFunctions+0x52c>)
 8001e5e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001e60:	4613      	mov	r3, r2
 8001e62:	4a81      	ldr	r2, [pc, #516]	; (8002068 <setEffectsFunctions+0x530>)
 8001e64:	611a      	str	r2, [r3, #16]
			  break;
 8001e66:	e698      	b.n	8001b9a <setEffectsFunctions+0x62>
			  if (delayAssignment != 255)
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <setEffectsFunctions+0x534>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d024      	beq.n	8001ebc <setEffectsFunctions+0x384>
				  effectTick[delayAssignment] = &blankTick;
 8001e72:	4a7e      	ldr	r2, [pc, #504]	; (800206c <setEffectsFunctions+0x534>)
 8001e74:	7810      	ldrb	r0, [r2, #0]
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <setEffectsFunctions+0x514>)
 8001e78:	4c7d      	ldr	r4, [pc, #500]	; (8002070 <setEffectsFunctions+0x538>)
 8001e7a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
 8001e7e:	7810      	ldrb	r0, [r2, #0]
 8001e80:	4b74      	ldr	r3, [pc, #464]	; (8002054 <setEffectsFunctions+0x51c>)
 8001e82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e86:	4c7b      	ldr	r4, [pc, #492]	; (8002074 <setEffectsFunctions+0x53c>)
 8001e88:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
 8001e8c:	7810      	ldrb	r0, [r2, #0]
 8001e8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001e96:	6044      	str	r4, [r0, #4]
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
 8001e98:	7810      	ldrb	r0, [r2, #0]
 8001e9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001e9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ea2:	6084      	str	r4, [r0, #8]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
 8001ea4:	7810      	ldrb	r0, [r2, #0]
 8001ea6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001eaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001eae:	60c4      	str	r4, [r0, #12]
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
 8001eb0:	7812      	ldrb	r2, [r2, #0]
 8001eb2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001eb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001eba:	611c      	str	r4, [r3, #16]
			  delayAssignment = i;
 8001ebc:	b2ca      	uxtb	r2, r1
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <setEffectsFunctions+0x534>)
 8001ec0:	701a      	strb	r2, [r3, #0]
			  effectTick[i] = &delayTick;
 8001ec2:	4b62      	ldr	r3, [pc, #392]	; (800204c <setEffectsFunctions+0x514>)
 8001ec4:	4a6c      	ldr	r2, [pc, #432]	; (8002078 <setEffectsFunctions+0x540>)
 8001ec6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <setEffectsFunctions+0x51c>)
 8001ecc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001ed0:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001ed4:	4c69      	ldr	r4, [pc, #420]	; (800207c <setEffectsFunctions+0x544>)
 8001ed6:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &delayParam2;
 8001eda:	4869      	ldr	r0, [pc, #420]	; (8002080 <setEffectsFunctions+0x548>)
 8001edc:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &delayParam3;
 8001ede:	4869      	ldr	r0, [pc, #420]	; (8002084 <setEffectsFunctions+0x54c>)
 8001ee0:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &delayParam4;
 8001ee2:	4869      	ldr	r0, [pc, #420]	; (8002088 <setEffectsFunctions+0x550>)
 8001ee4:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &delayParam5;
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	4a68      	ldr	r2, [pc, #416]	; (800208c <setEffectsFunctions+0x554>)
 8001eea:	611a      	str	r2, [r3, #16]
			  break;
 8001eec:	e655      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXlowpassTick;
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <setEffectsFunctions+0x514>)
 8001ef0:	4a67      	ldr	r2, [pc, #412]	; (8002090 <setEffectsFunctions+0x558>)
 8001ef2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <setEffectsFunctions+0x51c>)
 8001ef8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001efc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f00:	4c64      	ldr	r4, [pc, #400]	; (8002094 <setEffectsFunctions+0x55c>)
 8001f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001f06:	4a5b      	ldr	r2, [pc, #364]	; (8002074 <setEffectsFunctions+0x53c>)
 8001f08:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001f0a:	4c63      	ldr	r4, [pc, #396]	; (8002098 <setEffectsFunctions+0x560>)
 8001f0c:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001f0e:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001f10:	6102      	str	r2, [r0, #16]
			  break;
 8001f12:	e642      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXhighpassTick;
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <setEffectsFunctions+0x514>)
 8001f16:	4a61      	ldr	r2, [pc, #388]	; (800209c <setEffectsFunctions+0x564>)
 8001f18:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <setEffectsFunctions+0x51c>)
 8001f1e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001f22:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f26:	4c5e      	ldr	r4, [pc, #376]	; (80020a0 <setEffectsFunctions+0x568>)
 8001f28:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001f2c:	4a51      	ldr	r2, [pc, #324]	; (8002074 <setEffectsFunctions+0x53c>)
 8001f2e:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001f30:	4c5c      	ldr	r4, [pc, #368]	; (80020a4 <setEffectsFunctions+0x56c>)
 8001f32:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001f34:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001f36:	6102      	str	r2, [r0, #16]
			  break;
 8001f38:	e62f      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXbandpassTick;
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <setEffectsFunctions+0x514>)
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <setEffectsFunctions+0x570>)
 8001f3e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001f42:	4b44      	ldr	r3, [pc, #272]	; (8002054 <setEffectsFunctions+0x51c>)
 8001f44:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001f48:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f4c:	4c57      	ldr	r4, [pc, #348]	; (80020ac <setEffectsFunctions+0x574>)
 8001f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001f52:	4a48      	ldr	r2, [pc, #288]	; (8002074 <setEffectsFunctions+0x53c>)
 8001f54:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001f56:	4c56      	ldr	r4, [pc, #344]	; (80020b0 <setEffectsFunctions+0x578>)
 8001f58:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001f5a:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001f5c:	6102      	str	r2, [r0, #16]
			  break;
 8001f5e:	e61c      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <setEffectsFunctions+0x514>)
 8001f62:	4a54      	ldr	r2, [pc, #336]	; (80020b4 <setEffectsFunctions+0x57c>)
 8001f64:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <setEffectsFunctions+0x51c>)
 8001f6a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001f6e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f72:	4c51      	ldr	r4, [pc, #324]	; (80020b8 <setEffectsFunctions+0x580>)
 8001f74:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001f78:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <setEffectsFunctions+0x53c>)
 8001f7a:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001f7c:	4c4f      	ldr	r4, [pc, #316]	; (80020bc <setEffectsFunctions+0x584>)
 8001f7e:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001f80:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001f82:	6102      	str	r2, [r0, #16]
			  break;
 8001f84:	e609      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZpeakTick;
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <setEffectsFunctions+0x514>)
 8001f88:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <setEffectsFunctions+0x588>)
 8001f8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <setEffectsFunctions+0x51c>)
 8001f90:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001f94:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001f98:	4c4a      	ldr	r4, [pc, #296]	; (80020c4 <setEffectsFunctions+0x58c>)
 8001f9a:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001f9e:	484a      	ldr	r0, [pc, #296]	; (80020c8 <setEffectsFunctions+0x590>)
 8001fa0:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001fa2:	484a      	ldr	r0, [pc, #296]	; (80020cc <setEffectsFunctions+0x594>)
 8001fa4:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001fa6:	4833      	ldr	r0, [pc, #204]	; (8002074 <setEffectsFunctions+0x53c>)
 8001fa8:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001faa:	6110      	str	r0, [r2, #16]
			  break;
 8001fac:	e5f5      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZlowshelfTick;
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <setEffectsFunctions+0x514>)
 8001fb0:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <setEffectsFunctions+0x598>)
 8001fb2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001fb6:	4b27      	ldr	r3, [pc, #156]	; (8002054 <setEffectsFunctions+0x51c>)
 8001fb8:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001fbc:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001fc0:	4c44      	ldr	r4, [pc, #272]	; (80020d4 <setEffectsFunctions+0x59c>)
 8001fc2:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001fc6:	4844      	ldr	r0, [pc, #272]	; (80020d8 <setEffectsFunctions+0x5a0>)
 8001fc8:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001fca:	4844      	ldr	r0, [pc, #272]	; (80020dc <setEffectsFunctions+0x5a4>)
 8001fcc:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001fce:	4829      	ldr	r0, [pc, #164]	; (8002074 <setEffectsFunctions+0x53c>)
 8001fd0:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001fd2:	6110      	str	r0, [r2, #16]
			  break;
 8001fd4:	e5e1      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZhighshelfTick;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <setEffectsFunctions+0x514>)
 8001fd8:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <setEffectsFunctions+0x5a8>)
 8001fda:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <setEffectsFunctions+0x51c>)
 8001fe0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001fe4:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001fe8:	4c3e      	ldr	r4, [pc, #248]	; (80020e4 <setEffectsFunctions+0x5ac>)
 8001fea:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001fee:	483e      	ldr	r0, [pc, #248]	; (80020e8 <setEffectsFunctions+0x5b0>)
 8001ff0:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001ff2:	483e      	ldr	r0, [pc, #248]	; (80020ec <setEffectsFunctions+0x5b4>)
 8001ff4:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001ff6:	481f      	ldr	r0, [pc, #124]	; (8002074 <setEffectsFunctions+0x53c>)
 8001ff8:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001ffa:	6110      	str	r0, [r2, #16]
			  break;
 8001ffc:	e5cd      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZbandrejectTick;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <setEffectsFunctions+0x514>)
 8002000:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <setEffectsFunctions+0x5b8>)
 8002002:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <setEffectsFunctions+0x51c>)
 8002008:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800200c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002010:	4c38      	ldr	r4, [pc, #224]	; (80020f4 <setEffectsFunctions+0x5bc>)
 8002012:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 8002016:	4838      	ldr	r0, [pc, #224]	; (80020f8 <setEffectsFunctions+0x5c0>)
 8002018:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 800201a:	4838      	ldr	r0, [pc, #224]	; (80020fc <setEffectsFunctions+0x5c4>)
 800201c:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <setEffectsFunctions+0x53c>)
 8002020:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8002022:	6110      	str	r0, [r2, #16]
			  break;
 8002024:	e5b9      	b.n	8001b9a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXLadderLowpassTick;
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <setEffectsFunctions+0x514>)
 8002028:	4a35      	ldr	r2, [pc, #212]	; (8002100 <setEffectsFunctions+0x5c8>)
 800202a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <setEffectsFunctions+0x51c>)
 8002030:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002034:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002038:	4c32      	ldr	r4, [pc, #200]	; (8002104 <setEffectsFunctions+0x5cc>)
 800203a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
 800203e:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <setEffectsFunctions+0x53c>)
 8002040:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8002042:	4c31      	ldr	r4, [pc, #196]	; (8002108 <setEffectsFunctions+0x5d0>)
 8002044:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8002046:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8002048:	6102      	str	r2, [r0, #16]
}
 800204a:	e5a6      	b.n	8001b9a <setEffectsFunctions+0x62>
 800204c:	2001d150 	.word	0x2001d150
 8002050:	000074e1 	.word	0x000074e1
 8002054:	2001435c 	.word	0x2001435c
 8002058:	00006e41 	.word	0x00006e41
 800205c:	000071c1 	.word	0x000071c1
 8002060:	00006e81 	.word	0x00006e81
 8002064:	000073a1 	.word	0x000073a1
 8002068:	000073c1 	.word	0x000073c1
 800206c:	200006b4 	.word	0x200006b4
 8002070:	00007a81 	.word	0x00007a81
 8002074:	00001a01 	.word	0x00001a01
 8002078:	08003bd5 	.word	0x08003bd5
 800207c:	00007741 	.word	0x00007741
 8002080:	00007781 	.word	0x00007781
 8002084:	000077e1 	.word	0x000077e1
 8002088:	00007821 	.word	0x00007821
 800208c:	00007861 	.word	0x00007861
 8002090:	00007f81 	.word	0x00007f81
 8002094:	000080a1 	.word	0x000080a1
 8002098:	000083e1 	.word	0x000083e1
 800209c:	00007fa1 	.word	0x00007fa1
 80020a0:	000080e1 	.word	0x000080e1
 80020a4:	00008401 	.word	0x00008401
 80020a8:	00007fc1 	.word	0x00007fc1
 80020ac:	00008121 	.word	0x00008121
 80020b0:	00008421 	.word	0x00008421
 80020b4:	00007fe1 	.word	0x00007fe1
 80020b8:	00008161 	.word	0x00008161
 80020bc:	00008441 	.word	0x00008441
 80020c0:	00008001 	.word	0x00008001
 80020c4:	000081a1 	.word	0x000081a1
 80020c8:	000082e1 	.word	0x000082e1
 80020cc:	00008461 	.word	0x00008461
 80020d0:	00008021 	.word	0x00008021
 80020d4:	000081e1 	.word	0x000081e1
 80020d8:	00008321 	.word	0x00008321
 80020dc:	00008481 	.word	0x00008481
 80020e0:	00008041 	.word	0x00008041
 80020e4:	00008221 	.word	0x00008221
 80020e8:	00008361 	.word	0x00008361
 80020ec:	000084a1 	.word	0x000084a1
 80020f0:	00008061 	.word	0x00008061
 80020f4:	00008261 	.word	0x00008261
 80020f8:	000083a1 	.word	0x000083a1
 80020fc:	000084c1 	.word	0x000084c1
 8002100:	00008081 	.word	0x00008081
 8002104:	000082a1 	.word	0x000082a1
 8002108:	000084e1 	.word	0x000084e1

0800210c <setOscilllatorShapes>:
	switch (oscshape)
 800210c:	2805      	cmp	r0, #5
 800210e:	d821      	bhi.n	8002154 <setOscilllatorShapes+0x48>
 8002110:	e8df f000 	tbb	[pc, r0]
 8002114:	120d0803 	.word	0x120d0803
 8002118:	1c17      	.short	0x1c17
			  shapeTick[i] = &sawSquareTick;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <setOscilllatorShapes+0x4c>)
 800211c:	4a0f      	ldr	r2, [pc, #60]	; (800215c <setOscilllatorShapes+0x50>)
 800211e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8002122:	4770      	bx	lr
			  shapeTick[i] = &sineTriTick;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <setOscilllatorShapes+0x4c>)
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <setOscilllatorShapes+0x54>)
 8002128:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 800212c:	4770      	bx	lr
			  shapeTick[i] = &sawTick;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <setOscilllatorShapes+0x4c>)
 8002130:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <setOscilllatorShapes+0x58>)
 8002132:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8002136:	4770      	bx	lr
			  shapeTick[i] = &pulseTick;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <setOscilllatorShapes+0x4c>)
 800213a:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <setOscilllatorShapes+0x5c>)
 800213c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8002140:	4770      	bx	lr
			  shapeTick[i] = &sineTick;
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <setOscilllatorShapes+0x4c>)
 8002144:	4a09      	ldr	r2, [pc, #36]	; (800216c <setOscilllatorShapes+0x60>)
 8002146:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 800214a:	4770      	bx	lr
			  shapeTick[i] = &triTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <setOscilllatorShapes+0x4c>)
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <setOscilllatorShapes+0x64>)
 8002150:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2001d678 	.word	0x2001d678
 800215c:	00005d61 	.word	0x00005d61
 8002160:	00005dc1 	.word	0x00005dc1
 8002164:	00005e21 	.word	0x00005e21
 8002168:	00005e61 	.word	0x00005e61
 800216c:	00005ec1 	.word	0x00005ec1
 8002170:	00005f01 	.word	0x00005f01

08002174 <setFilterTypes>:
	switch (filterType)
 8002174:	2808      	cmp	r0, #8
 8002176:	d87a      	bhi.n	800226e <setFilterTypes+0xfa>
 8002178:	e8df f000 	tbb	[pc, r0]
 800217c:	2c1f1205 	.word	0x2c1f1205
 8002180:	60534639 	.word	0x60534639
 8002184:	6d          	.byte	0x6d
 8002185:	00          	.byte	0x00
				  filterTick[i] = &lowpassTick;
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <setFilterTypes+0xfc>)
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <setFilterTypes+0x100>)
 800218a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &lowpassSetQ;
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <setFilterTypes+0x104>)
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <setFilterTypes+0x108>)
 8002192:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8002196:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800219a:	4a39      	ldr	r2, [pc, #228]	; (8002280 <setFilterTypes+0x10c>)
 800219c:	605a      	str	r2, [r3, #4]
				  break;
 800219e:	4770      	bx	lr
				  filterTick[i] = &highpassTick;
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <setFilterTypes+0xfc>)
 80021a2:	4a38      	ldr	r2, [pc, #224]	; (8002284 <setFilterTypes+0x110>)
 80021a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &highpassSetQ;
 80021a8:	4b33      	ldr	r3, [pc, #204]	; (8002278 <setFilterTypes+0x104>)
 80021aa:	4a37      	ldr	r2, [pc, #220]	; (8002288 <setFilterTypes+0x114>)
 80021ac:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 80021b0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80021b4:	4a35      	ldr	r2, [pc, #212]	; (800228c <setFilterTypes+0x118>)
 80021b6:	605a      	str	r2, [r3, #4]
				  break;
 80021b8:	4770      	bx	lr
				  filterTick[i] = &bandpassTick;
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <setFilterTypes+0xfc>)
 80021bc:	4a34      	ldr	r2, [pc, #208]	; (8002290 <setFilterTypes+0x11c>)
 80021be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &bandpassSetQ;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <setFilterTypes+0x104>)
 80021c4:	4a33      	ldr	r2, [pc, #204]	; (8002294 <setFilterTypes+0x120>)
 80021c6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 80021ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80021ce:	4a32      	ldr	r2, [pc, #200]	; (8002298 <setFilterTypes+0x124>)
 80021d0:	605a      	str	r2, [r3, #4]
				  break;
 80021d2:	4770      	bx	lr
				  filterTick[i] = &diodeLowpassTick;
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <setFilterTypes+0xfc>)
 80021d6:	4a31      	ldr	r2, [pc, #196]	; (800229c <setFilterTypes+0x128>)
 80021d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <setFilterTypes+0x104>)
 80021de:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <setFilterTypes+0x12c>)
 80021e0:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 80021e4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80021e8:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <setFilterTypes+0x130>)
 80021ea:	605a      	str	r2, [r3, #4]
				  break;
 80021ec:	4770      	bx	lr
				  filterTick[i] = &VZpeakTick;
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <setFilterTypes+0xfc>)
 80021f0:	4a2d      	ldr	r2, [pc, #180]	; (80022a8 <setFilterTypes+0x134>)
 80021f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZpeakSetQ;
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <setFilterTypes+0x104>)
 80021f8:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <setFilterTypes+0x138>)
 80021fa:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 80021fe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002202:	4a2b      	ldr	r2, [pc, #172]	; (80022b0 <setFilterTypes+0x13c>)
 8002204:	605a      	str	r2, [r3, #4]
				  break;
 8002206:	4770      	bx	lr
				  filterTick[i] = &VZlowshelfTick;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <setFilterTypes+0xfc>)
 800220a:	4a2a      	ldr	r2, [pc, #168]	; (80022b4 <setFilterTypes+0x140>)
 800220c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <setFilterTypes+0x104>)
 8002212:	4a29      	ldr	r2, [pc, #164]	; (80022b8 <setFilterTypes+0x144>)
 8002214:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8002218:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800221c:	4a27      	ldr	r2, [pc, #156]	; (80022bc <setFilterTypes+0x148>)
 800221e:	605a      	str	r2, [r3, #4]
				  break;
 8002220:	4770      	bx	lr
				  filterTick[i] = &VZhighshelfTick;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <setFilterTypes+0xfc>)
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <setFilterTypes+0x14c>)
 8002226:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <setFilterTypes+0x104>)
 800222c:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <setFilterTypes+0x150>)
 800222e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8002232:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <setFilterTypes+0x154>)
 8002238:	605a      	str	r2, [r3, #4]
				  break;
 800223a:	4770      	bx	lr
				  filterTick[i] = &VZbandrejectTick;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <setFilterTypes+0xfc>)
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <setFilterTypes+0x158>)
 8002240:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <setFilterTypes+0x104>)
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <setFilterTypes+0x15c>)
 8002248:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 800224c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <setFilterTypes+0x160>)
 8002252:	605a      	str	r2, [r3, #4]
				  break;
 8002254:	4770      	bx	lr
				  filterTick[i] = &LadderLowpassTick;
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <setFilterTypes+0xfc>)
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <setFilterTypes+0x164>)
 800225a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <setFilterTypes+0x104>)
 8002260:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <setFilterTypes+0x168>)
 8002262:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8002266:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800226a:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <setFilterTypes+0x16c>)
 800226c:	605a      	str	r2, [r3, #4]
}
 800226e:	4770      	bx	lr
 8002270:	2001d1c4 	.word	0x2001d1c4
 8002274:	00006081 	.word	0x00006081
 8002278:	200163b0 	.word	0x200163b0
 800227c:	000063a1 	.word	0x000063a1
 8002280:	000064c1 	.word	0x000064c1
 8002284:	000060c1 	.word	0x000060c1
 8002288:	000063c1 	.word	0x000063c1
 800228c:	00006501 	.word	0x00006501
 8002290:	00006101 	.word	0x00006101
 8002294:	000063e1 	.word	0x000063e1
 8002298:	00006541 	.word	0x00006541
 800229c:	00006141 	.word	0x00006141
 80022a0:	00006401 	.word	0x00006401
 80022a4:	00006581 	.word	0x00006581
 80022a8:	00006181 	.word	0x00006181
 80022ac:	00006421 	.word	0x00006421
 80022b0:	000065c1 	.word	0x000065c1
 80022b4:	000061c1 	.word	0x000061c1
 80022b8:	00006441 	.word	0x00006441
 80022bc:	00006601 	.word	0x00006601
 80022c0:	00006201 	.word	0x00006201
 80022c4:	00006461 	.word	0x00006461
 80022c8:	00006641 	.word	0x00006641
 80022cc:	00006241 	.word	0x00006241
 80022d0:	00006481 	.word	0x00006481
 80022d4:	00006681 	.word	0x00006681
 80022d8:	00006281 	.word	0x00006281
 80022dc:	000064a1 	.word	0x000064a1
 80022e0:	000066c1 	.word	0x000066c1

080022e4 <setLFOShapes>:
{
 80022e4:	b410      	push	{r4}
	switch(LFOShape)
 80022e6:	2805      	cmp	r0, #5
 80022e8:	d814      	bhi.n	8002314 <setLFOShapes+0x30>
 80022ea:	e8df f000 	tbb	[pc, r0]
 80022ee:	1603      	.short	0x1603
 80022f0:	5a493827 	.word	0x5a493827
			lfoShapeTick[i] = &lfoSineTriTick;
 80022f4:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <setLFOShapes+0xe0>)
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <setLFOShapes+0xe4>)
 80022f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 80022fc:	4b33      	ldr	r3, [pc, #204]	; (80023cc <setLFOShapes+0xe8>)
 80022fe:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002302:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002306:	4c32      	ldr	r4, [pc, #200]	; (80023d0 <setLFOShapes+0xec>)
 8002308:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 800230c:	4a31      	ldr	r2, [pc, #196]	; (80023d4 <setLFOShapes+0xf0>)
 800230e:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8002310:	4a31      	ldr	r2, [pc, #196]	; (80023d8 <setLFOShapes+0xf4>)
 8002312:	6082      	str	r2, [r0, #8]
}
 8002314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002318:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 800231a:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <setLFOShapes+0xe0>)
 800231c:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <setLFOShapes+0xf8>)
 800231e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002322:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <setLFOShapes+0xe8>)
 8002324:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002328:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800232c:	4c2c      	ldr	r4, [pc, #176]	; (80023e0 <setLFOShapes+0xfc>)
 800232e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8002332:	4a2c      	ldr	r2, [pc, #176]	; (80023e4 <setLFOShapes+0x100>)
 8002334:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8002336:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <setLFOShapes+0x104>)
 8002338:	6082      	str	r2, [r0, #8]
			break;
 800233a:	e7eb      	b.n	8002314 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSineTick;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <setLFOShapes+0xe0>)
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <setLFOShapes+0x108>)
 8002340:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <setLFOShapes+0xe8>)
 8002346:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800234a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800234e:	4c28      	ldr	r4, [pc, #160]	; (80023f0 <setLFOShapes+0x10c>)
 8002350:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineSetShape;
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <setLFOShapes+0x110>)
 8002356:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <setLFOShapes+0x114>)
 800235a:	6082      	str	r2, [r0, #8]
			break;
 800235c:	e7da      	b.n	8002314 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoTriTick;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <setLFOShapes+0xe0>)
 8002360:	4a26      	ldr	r2, [pc, #152]	; (80023fc <setLFOShapes+0x118>)
 8002362:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <setLFOShapes+0xe8>)
 8002368:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800236c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002370:	4c23      	ldr	r4, [pc, #140]	; (8002400 <setLFOShapes+0x11c>)
 8002372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoTriSetShape;
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <setLFOShapes+0x120>)
 8002378:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 800237a:	4a23      	ldr	r2, [pc, #140]	; (8002408 <setLFOShapes+0x124>)
 800237c:	6082      	str	r2, [r0, #8]
			break;
 800237e:	e7c9      	b.n	8002314 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSawTick;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <setLFOShapes+0xe0>)
 8002382:	4a22      	ldr	r2, [pc, #136]	; (800240c <setLFOShapes+0x128>)
 8002384:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <setLFOShapes+0xe8>)
 800238a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800238e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002392:	4c1f      	ldr	r4, [pc, #124]	; (8002410 <setLFOShapes+0x12c>)
 8002394:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSetShape;
 8002398:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <setLFOShapes+0x130>)
 800239a:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <setLFOShapes+0x134>)
 800239e:	6082      	str	r2, [r0, #8]
			break;
 80023a0:	e7b8      	b.n	8002314 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoPulseTick;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <setLFOShapes+0xe0>)
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <setLFOShapes+0x138>)
 80023a6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <setLFOShapes+0xe8>)
 80023ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80023b0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80023b4:	4c1a      	ldr	r4, [pc, #104]	; (8002420 <setLFOShapes+0x13c>)
 80023b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoPulseSetShape;
 80023ba:	4a1a      	ldr	r2, [pc, #104]	; (8002424 <setLFOShapes+0x140>)
 80023bc:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <setLFOShapes+0x144>)
 80023c0:	6082      	str	r2, [r0, #8]
}
 80023c2:	e7a7      	b.n	8002314 <setLFOShapes+0x30>
 80023c4:	2001d2c8 	.word	0x2001d2c8
 80023c8:	00006ae1 	.word	0x00006ae1
 80023cc:	2001850c 	.word	0x2001850c
 80023d0:	00006bc1 	.word	0x00006bc1
 80023d4:	00006d41 	.word	0x00006d41
 80023d8:	00006c81 	.word	0x00006c81
 80023dc:	00006ac1 	.word	0x00006ac1
 80023e0:	00006ba1 	.word	0x00006ba1
 80023e4:	00006d21 	.word	0x00006d21
 80023e8:	00006c61 	.word	0x00006c61
 80023ec:	00006b01 	.word	0x00006b01
 80023f0:	00006be1 	.word	0x00006be1
 80023f4:	00006d61 	.word	0x00006d61
 80023f8:	00006ca1 	.word	0x00006ca1
 80023fc:	00006b21 	.word	0x00006b21
 8002400:	00006c01 	.word	0x00006c01
 8002404:	00006d81 	.word	0x00006d81
 8002408:	00006cc1 	.word	0x00006cc1
 800240c:	00006b41 	.word	0x00006b41
 8002410:	00006c21 	.word	0x00006c21
 8002414:	00006da1 	.word	0x00006da1
 8002418:	00006ce1 	.word	0x00006ce1
 800241c:	00006b81 	.word	0x00006b81
 8002420:	00006c41 	.word	0x00006c41
 8002424:	00006dc1 	.word	0x00006dc1
 8002428:	00006d01 	.word	0x00006d01

0800242c <fromHex>:
{
 800242c:	4603      	mov	r3, r0
	if (('0' <= value) && (value <= '9'))
 800242e:	3830      	subs	r0, #48	; 0x30
 8002430:	b2c0      	uxtb	r0, r0
 8002432:	2809      	cmp	r0, #9
 8002434:	d90a      	bls.n	800244c <fromHex+0x20>
	if (('a' <= value) && (value <= 'f'))
 8002436:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	2a05      	cmp	r2, #5
 800243e:	d906      	bls.n	800244e <fromHex+0x22>
	if (('A' <= value) && (value <= 'F'))
 8002440:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	2a05      	cmp	r2, #5
 8002448:	d904      	bls.n	8002454 <fromHex+0x28>
	return 0;
 800244a:	2000      	movs	r0, #0
}
 800244c:	4770      	bx	lr
		return (uint8_t) (10 + value - 'a');
 800244e:	3b57      	subs	r3, #87	; 0x57
 8002450:	b2d8      	uxtb	r0, r3
 8002452:	4770      	bx	lr
		return (uint8_t) (10 + value - 'A');
 8002454:	3b37      	subs	r3, #55	; 0x37
 8002456:	b2d8      	uxtb	r0, r3
 8002458:	4770      	bx	lr

0800245a <fromAscii>:
{
 800245a:	b538      	push	{r3, r4, r5, lr}
 800245c:	460d      	mov	r5, r1
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 800245e:	f7ff ffe5 	bl	800242c <fromHex>
 8002462:	0104      	lsls	r4, r0, #4
 8002464:	4628      	mov	r0, r5
 8002466:	f7ff ffe1 	bl	800242c <fromHex>
 800246a:	4320      	orrs	r0, r4
}
 800246c:	b2c0      	uxtb	r0, r0
 800246e:	bd38      	pop	{r3, r4, r5, pc}

08002470 <CycleCounterInit>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <CycleCounterInit+0x30>)
 8002472:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8002476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800247a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <CycleCounterInit+0x34>)
 8002480:	f8d3 3fb4 	ldr.w	r3, [r3, #4020]	; 0xfb4
 8002484:	f013 0f01 	tst.w	r3, #1
 8002488:	d003      	beq.n	8002492 <CycleCounterInit+0x22>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <CycleCounterInit+0x34>)
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <CycleCounterInit+0x38>)
 800248e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <CycleCounterInit+0x34>)
 8002494:	2200      	movs	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
  DWT->CTRL = 0x40000001;
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <CycleCounterInit+0x3c>)
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00
 80024a4:	e0001000 	.word	0xe0001000
 80024a8:	c5acce55 	.word	0xc5acce55
 80024ac:	40000001 	.word	0x40000001

080024b0 <main>:
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	ed2d 8b02 	vpush	{d8}
 80024b6:	b083      	sub	sp, #12
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80024b8:	4b73      	ldr	r3, [pc, #460]	; (8002688 <main+0x1d8>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80024c0:	d113      	bne.n	80024ea <main+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 80024c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024c6:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80024ca:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <main+0x1d8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80024d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024d6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024e0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80024e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024e6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <main+0x1d8>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80024f2:	d127      	bne.n	8002544 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80024f4:	4b64      	ldr	r3, [pc, #400]	; (8002688 <main+0x1d8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80024fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002500:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002504:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002508:	e000      	b.n	800250c <main+0x5c>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800250a:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800250c:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002510:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002514:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002518:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 800251c:	495a      	ldr	r1, [pc, #360]	; (8002688 <main+0x1d8>)
 800251e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8002522:	4613      	mov	r3, r2
 8002524:	3a01      	subs	r2, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f2      	bne.n	8002510 <main+0x60>
    } while(sets-- != 0U);
 800252a:	1e43      	subs	r3, r0, #1
 800252c:	2800      	cmp	r0, #0
 800252e:	d1ec      	bne.n	800250a <main+0x5a>
 8002530:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002534:	694b      	ldr	r3, [r1, #20]
 8002536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253a:	614b      	str	r3, [r1, #20]
 800253c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002540:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002544:	f001 fc7e 	bl	8003e44 <HAL_Init>
  MPU_Config();
 8002548:	f7fe fea2 	bl	8001290 <MPU_Config>
  __ASM volatile ("cpsie i" : : : "memory");
 800254c:	b662      	cpsie	i
  SystemClock_Config();
 800254e:	f7fe fef7 	bl	8001340 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002552:	f7fe ff77 	bl	8001444 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8002556:	f7fe fd13 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 800255a:	f7fe fc1b 	bl	8000d94 <MX_DMA_Init>
  MX_FMC_Init();
 800255e:	f7fe fccd 	bl	8000efc <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002562:	f000 fc15 	bl	8002d90 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002566:	f009 faf9 	bl	800bb5c <MX_FATFS_Init>
  MX_SAI1_Init();
 800256a:	f000 fb25 	bl	8002bb8 <MX_SAI1_Init>
  MX_RNG_Init();
 800256e:	f000 fae5 	bl	8002b3c <MX_RNG_Init>
  MX_I2C2_Init();
 8002572:	f7fe fe03 	bl	800117c <MX_I2C2_Init>
  MX_SPI1_Init();
 8002576:	f000 fc7b 	bl	8002e70 <MX_SPI1_Init>
  MX_SPI5_Init();
 800257a:	f000 fc9f 	bl	8002ebc <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800257e:	4d43      	ldr	r5, [pc, #268]	; (800268c <main+0x1dc>)
 8002580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002584:	4628      	mov	r0, r5
 8002586:	f003 fa33 	bl	80059f0 <HAL_GPIO_ReadPin>
 800258a:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800258c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002590:	4628      	mov	r0, r5
 8002592:	f003 fa2d 	bl	80059f0 <HAL_GPIO_ReadPin>
 8002596:	4605      	mov	r5, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002598:	2104      	movs	r1, #4
 800259a:	483d      	ldr	r0, [pc, #244]	; (8002690 <main+0x1e0>)
 800259c:	f003 fa28 	bl	80059f0 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80025a0:	0063      	lsls	r3, r4, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	00aa      	lsls	r2, r5, #2
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4413      	add	r3, r2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4403      	add	r3, r0
 80025ae:	4a39      	ldr	r2, [pc, #228]	; (8002694 <main+0x1e4>)
 80025b0:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 80025b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025b6:	f001 fc85 	bl	8003ec4 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 80025ba:	4a37      	ldr	r2, [pc, #220]	; (8002698 <main+0x1e8>)
 80025bc:	6813      	ldr	r3, [r2, #0]
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <main+0x1e8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025cc:	d0fa      	beq.n	80025c4 <main+0x114>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <main+0x1ec>)
 80025d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80025d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80025dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	9b00      	ldr	r3, [sp, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80025e8:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80025ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80025f0:	eee1 3a10 	vmsr	fpscr, r3
  CycleCounterInit();
 80025f4:	f7ff ff3c 	bl	8002470 <CycleCounterInit>
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	e003      	b.n	8002604 <main+0x154>
	  SPI_PLUCK_TX[i] = 0;
 80025fc:	4a28      	ldr	r2, [pc, #160]	; (80026a0 <main+0x1f0>)
 80025fe:	2100      	movs	r1, #0
 8002600:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 8002602:	3301      	adds	r3, #1
 8002604:	2b3f      	cmp	r3, #63	; 0x3f
 8002606:	ddf9      	ble.n	80025fc <main+0x14c>
  for (int i = 0; i < 4096; i++)
 8002608:	2300      	movs	r3, #0
 800260a:	e003      	b.n	8002614 <main+0x164>
	  buffer[i] = 0;
 800260c:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <main+0x1f4>)
 800260e:	2100      	movs	r1, #0
 8002610:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 4096; i++)
 8002612:	3301      	adds	r3, #1
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	dbf8      	blt.n	800260c <main+0x15c>
  buffer[15+112] = NUM_PARAMS;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <main+0x1f4>)
 800261c:	229c      	movs	r2, #156	; 0x9c
 800261e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 8002622:	22ef      	movs	r2, #239	; 0xef
 8002624:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+17+112] = 0xef;
 8002628:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+19+112] = 1;
 800262c:	2201      	movs	r2, #1
 800262e:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 8002632:	22fe      	movs	r2, #254	; 0xfe
 8002634:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  buffer[NUM_PARAMS*2+26+112] = 0xfe;
 8002638:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800263c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002640:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002644:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002648:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80026a8 <main+0x1f8>
 800264c:	4817      	ldr	r0, [pc, #92]	; (80026ac <main+0x1fc>)
 800264e:	f010 f9f5 	bl	8012a3c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8002652:	ed9f 8a17 	vldr	s16, [pc, #92]	; 80026b0 <main+0x200>
 8002656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265a:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80026b4 <main+0x204>
 800265e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80026b8 <main+0x208>
 8002662:	eeb0 0a48 	vmov.f32	s0, s16
 8002666:	4815      	ldr	r0, [pc, #84]	; (80026bc <main+0x20c>)
 8002668:	f010 f9e8 	bl	8012a3c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 800266c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002670:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002674:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8002678:	eeb0 0a48 	vmov.f32	s0, s16
 800267c:	4810      	ldr	r0, [pc, #64]	; (80026c0 <main+0x210>)
 800267e:	f010 f9dd 	bl	8012a3c <LEAF_generate_table_skew_non_sym>
  for (int i = 0; i < 3; i++)
 8002682:	2300      	movs	r3, #0
 8002684:	e01f      	b.n	80026c6 <main+0x216>
 8002686:	bf00      	nop
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	58020400 	.word	0x58020400
 8002690:	58020000 	.word	0x58020000
 8002694:	200142fd 	.word	0x200142fd
 8002698:	58024800 	.word	0x58024800
 800269c:	58024400 	.word	0x58024400
 80026a0:	38000000 	.word	0x38000000
 80026a4:	30042380 	.word	0x30042380
 80026a8:	3c23d70a 	.word	0x3c23d70a
 80026ac:	2001a79c 	.word	0x2001a79c
 80026b0:	00000000 	.word	0x00000000
 80026b4:	457a0000 	.word	0x457a0000
 80026b8:	469c4000 	.word	0x469c4000
 80026bc:	200143b0 	.word	0x200143b0
 80026c0:	2001650c 	.word	0x2001650c
 80026c4:	3301      	adds	r3, #1
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	ddfc      	ble.n	80026c4 <main+0x214>
  if (boardNumber == 0)
 80026ca:	4ba1      	ldr	r3, [pc, #644]	; (8002950 <main+0x4a0>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80ef 	beq.w	80028b2 <main+0x402>
	  diskBusy = 1;
 80026d4:	4b9f      	ldr	r3, [pc, #636]	; (8002954 <main+0x4a4>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
  SDRAM_init();
 80026da:	f7ff f9e5 	bl	8001aa8 <SDRAM_init>
  audioInit();
 80026de:	f7fe f85d 	bl	800079c <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 80026e2:	499d      	ldr	r1, [pc, #628]	; (8002958 <main+0x4a8>)
 80026e4:	4b9d      	ldr	r3, [pc, #628]	; (800295c <main+0x4ac>)
 80026e6:	600b      	str	r3, [r1, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
 80026e8:	4b9d      	ldr	r3, [pc, #628]	; (8002960 <main+0x4b0>)
 80026ea:	4a9e      	ldr	r2, [pc, #632]	; (8002964 <main+0x4b4>)
 80026ec:	601a      	str	r2, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
 80026ee:	4c9e      	ldr	r4, [pc, #632]	; (8002968 <main+0x4b8>)
 80026f0:	605c      	str	r4, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
 80026f2:	4a9e      	ldr	r2, [pc, #632]	; (800296c <main+0x4bc>)
 80026f4:	609a      	str	r2, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 80026f6:	4a9e      	ldr	r2, [pc, #632]	; (8002970 <main+0x4c0>)
 80026f8:	60da      	str	r2, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
 80026fa:	4a9e      	ldr	r2, [pc, #632]	; (8002974 <main+0x4c4>)
 80026fc:	611a      	str	r2, [r3, #16]
  specialModeMacroNames[0][5] = "          ";
 80026fe:	4a9e      	ldr	r2, [pc, #632]	; (8002978 <main+0x4c8>)
 8002700:	615a      	str	r2, [r3, #20]
  specialModeMacroNames[0][6] = "          ";
 8002702:	619a      	str	r2, [r3, #24]
  specialModeMacroNames[0][7] = "          ";
 8002704:	61da      	str	r2, [r3, #28]
  specialModeMacroNames[0][8] = "          ";
 8002706:	621a      	str	r2, [r3, #32]
  specialModeMacroNames[0][9] = "          ";
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][10] = "          ";
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
  specialModeMacroNames[0][11] = "          ";
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c
  specialModeMacroNames[0][12] = "          ";
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  specialModeMacroNames[0][13] = "          ";
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
  specialModeMacroNames[0][14] = "          ";
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
  specialModeMacroNames[0][15] = "          ";
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c
  specialModeMacroNames[0][16] = "          ";
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
  specialModeMacroNames[0][17] = "          ";
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  specialModeMacroNames[0][18] = "          ";
 800271a:	649a      	str	r2, [r3, #72]	; 0x48
  specialModeMacroNames[0][19] = "          ";
 800271c:	64da      	str	r2, [r3, #76]	; 0x4c
  specialModeNames[1] = "PHYS STR2     ";
 800271e:	4897      	ldr	r0, [pc, #604]	; (800297c <main+0x4cc>)
 8002720:	6048      	str	r0, [r1, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 8002722:	4897      	ldr	r0, [pc, #604]	; (8002980 <main+0x4d0>)
 8002724:	6518      	str	r0, [r3, #80]	; 0x50
  specialModeMacroNames[1][1] = "Tone      ";
 8002726:	4897      	ldr	r0, [pc, #604]	; (8002984 <main+0x4d4>)
 8002728:	6558      	str	r0, [r3, #84]	; 0x54
  specialModeMacroNames[1][2] = "PluckPos  ";
 800272a:	4d97      	ldr	r5, [pc, #604]	; (8002988 <main+0x4d8>)
 800272c:	659d      	str	r5, [r3, #88]	; 0x58
  specialModeMacroNames[1][3] = "PickupPos ";
 800272e:	4f97      	ldr	r7, [pc, #604]	; (800298c <main+0x4dc>)
 8002730:	65df      	str	r7, [r3, #92]	; 0x5c
  specialModeMacroNames[1][4] = "SlideNois ";
 8002732:	661c      	str	r4, [r3, #96]	; 0x60
  specialModeMacroNames[1][5] = "Stiffness ";
 8002734:	4e96      	ldr	r6, [pc, #600]	; (8002990 <main+0x4e0>)
 8002736:	665e      	str	r6, [r3, #100]	; 0x64
  specialModeMacroNames[1][6] = "FB Amp    ";
 8002738:	4c96      	ldr	r4, [pc, #600]	; (8002994 <main+0x4e4>)
 800273a:	669c      	str	r4, [r3, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
 800273c:	4c96      	ldr	r4, [pc, #600]	; (8002998 <main+0x4e8>)
 800273e:	66dc      	str	r4, [r3, #108]	; 0x6c
  specialModeMacroNames[1][8] = "PU Filter ";
 8002740:	4c96      	ldr	r4, [pc, #600]	; (800299c <main+0x4ec>)
 8002742:	671c      	str	r4, [r3, #112]	; 0x70
  specialModeMacroNames[1][9] = "Harmonic  ";
 8002744:	4d96      	ldr	r5, [pc, #600]	; (80029a0 <main+0x4f0>)
 8002746:	675d      	str	r5, [r3, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
 8002748:	4d96      	ldr	r5, [pc, #600]	; (80029a4 <main+0x4f4>)
 800274a:	679d      	str	r5, [r3, #120]	; 0x78
  specialModeMacroNames[1][11] = "HarmPosY  ";
 800274c:	4d96      	ldr	r5, [pc, #600]	; (80029a8 <main+0x4f8>)
 800274e:	67dd      	str	r5, [r3, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
 8002750:	4d96      	ldr	r5, [pc, #600]	; (80029ac <main+0x4fc>)
 8002752:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
 8002756:	4d96      	ldr	r5, [pc, #600]	; (80029b0 <main+0x500>)
 8002758:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  specialModeMacroNames[1][14] = "PhantomH  ";
 800275c:	4d95      	ldr	r5, [pc, #596]	; (80029b4 <main+0x504>)
 800275e:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
 8002762:	4d95      	ldr	r5, [pc, #596]	; (80029b8 <main+0x508>)
 8002764:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Frq ";
 8002768:	4d94      	ldr	r5, [pc, #592]	; (80029bc <main+0x50c>)
 800276a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Q   ";
 800276e:	4d94      	ldr	r5, [pc, #592]	; (80029c0 <main+0x510>)
 8002770:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
 8002774:	4d93      	ldr	r5, [pc, #588]	; (80029c4 <main+0x514>)
 8002776:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
 800277a:	4d93      	ldr	r5, [pc, #588]	; (80029c8 <main+0x518>)
 800277c:	f8c3 509c 	str.w	r5, [r3, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
 8002780:	4d92      	ldr	r5, [pc, #584]	; (80029cc <main+0x51c>)
 8002782:	608d      	str	r5, [r1, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
 8002784:	4d92      	ldr	r5, [pc, #584]	; (80029d0 <main+0x520>)
 8002786:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
 800278a:	4d92      	ldr	r5, [pc, #584]	; (80029d4 <main+0x524>)
 800278c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 8002790:	4d91      	ldr	r5, [pc, #580]	; (80029d8 <main+0x528>)
 8002792:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
  specialModeMacroNames[2][3] = "PickupPos ";
 8002796:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  specialModeMacroNames[2][4] = "PickupAmp ";
 800279a:	4d90      	ldr	r5, [pc, #576]	; (80029dc <main+0x52c>)
 800279c:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
 80027a0:	4d8f      	ldr	r5, [pc, #572]	; (80029e0 <main+0x530>)
 80027a2:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
 80027a6:	4d8f      	ldr	r5, [pc, #572]	; (80029e4 <main+0x534>)
 80027a8:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
  specialModeMacroNames[2][7] = "          ";
 80027ac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  specialModeMacroNames[2][8] = "          ";
 80027b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  specialModeMacroNames[2][9] = "          ";
 80027b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  specialModeMacroNames[2][10] = "Tone      ";
 80027b8:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  specialModeMacroNames[2][11] = "Decay     ";
 80027bc:	488a      	ldr	r0, [pc, #552]	; (80029e8 <main+0x538>)
 80027be:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
  specialModeMacroNames[2][12] = "          ";
 80027c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  specialModeMacroNames[2][13] = "          ";
 80027c6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  specialModeMacroNames[2][14] = "          ";
 80027ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  specialModeMacroNames[2][15] = "          ";
 80027ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  specialModeMacroNames[2][16] = "          ";
 80027d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  specialModeMacroNames[2][17] = "          ";
 80027d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  specialModeMacroNames[2][18] = "          ";
 80027da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  specialModeMacroNames[2][19] = "          ";
 80027de:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  specialModeNames[3] = "VOCAL        ";
 80027e2:	4d82      	ldr	r5, [pc, #520]	; (80029ec <main+0x53c>)
 80027e4:	60cd      	str	r5, [r1, #12]
  specialModeMacroNames[3][0] = "Size      ";
 80027e6:	4d82      	ldr	r5, [pc, #520]	; (80029f0 <main+0x540>)
 80027e8:	f8c3 50f0 	str.w	r5, [r3, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
 80027ec:	4d81      	ldr	r5, [pc, #516]	; (80029f4 <main+0x544>)
 80027ee:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
  specialModeMacroNames[3][2] = "Diameter  ";
 80027f2:	4d81      	ldr	r5, [pc, #516]	; (80029f8 <main+0x548>)
 80027f4:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
 80027f8:	4d80      	ldr	r5, [pc, #512]	; (80029fc <main+0x54c>)
 80027fa:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
 80027fe:	4d80      	ldr	r5, [pc, #512]	; (8002a00 <main+0x550>)
 8002800:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
 8002804:	4d7f      	ldr	r5, [pc, #508]	; (8002a04 <main+0x554>)
 8002806:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
  specialModeMacroNames[3][6] = "          ";
 800280a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  specialModeMacroNames[3][7] = "          ";
 800280e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  specialModeMacroNames[3][8] = "BackPos   ";
 8002812:	4d7d      	ldr	r5, [pc, #500]	; (8002a08 <main+0x558>)
 8002814:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
 8002818:	4d7c      	ldr	r5, [pc, #496]	; (8002a0c <main+0x55c>)
 800281a:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
 800281e:	4d7c      	ldr	r5, [pc, #496]	; (8002a10 <main+0x560>)
 8002820:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
 8002824:	4d7b      	ldr	r5, [pc, #492]	; (8002a14 <main+0x564>)
 8002826:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
  specialModeMacroNames[3][12] = "          ";
 800282a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  specialModeMacroNames[3][13] = "          ";
 800282e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  specialModeMacroNames[3][14] = "          ";
 8002832:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  specialModeMacroNames[3][15] = "          ";
 8002836:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  specialModeMacroNames[3][16] = "          ";
 800283a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  specialModeMacroNames[3][17] = "          ";
 800283e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  specialModeMacroNames[3][18] = "          ";
 8002842:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  specialModeMacroNames[3][19] = "          ";
 8002846:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  specialModeNames[4] = "STRING3      ";
 800284a:	4d73      	ldr	r5, [pc, #460]	; (8002a18 <main+0x568>)
 800284c:	610d      	str	r5, [r1, #16]
  specialModeMacroNames[4][0] = "Stiffness ";
 800284e:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
  specialModeMacroNames[4][1] = "PU Prop   ";
 8002852:	4972      	ldr	r1, [pc, #456]	; (8002a1c <main+0x56c>)
 8002854:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
 8002858:	4971      	ldr	r1, [pc, #452]	; (8002a20 <main+0x570>)
 800285a:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
  specialModeMacroNames[4][3] = "PU Filter ";
 800285e:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
  specialModeMacroNames[4][4] = "NoiseFilt ";
 8002862:	4970      	ldr	r1, [pc, #448]	; (8002a24 <main+0x574>)
 8002864:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
  specialModeMacroNames[4][5] = "NoiseGain ";
 8002868:	496f      	ldr	r1, [pc, #444]	; (8002a28 <main+0x578>)
 800286a:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
  specialModeMacroNames[4][6] = "          ";
 800286e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  specialModeMacroNames[4][7] = "          ";
 8002872:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  specialModeMacroNames[4][8] = "Decay     ";
 8002876:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
  specialModeMacroNames[4][9] = "Damping   ";
 800287a:	496c      	ldr	r1, [pc, #432]	; (8002a2c <main+0x57c>)
 800287c:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
 8002880:	496b      	ldr	r1, [pc, #428]	; (8002a30 <main+0x580>)
 8002882:	f8c3 1168 	str.w	r1, [r3, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002886:	496b      	ldr	r1, [pc, #428]	; (8002a34 <main+0x584>)
 8002888:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
  specialModeMacroNames[4][12] = "          ";
 800288c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
  specialModeMacroNames[4][13] = "          ";
 8002890:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
  specialModeMacroNames[4][14] = "          ";
 8002894:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
  specialModeMacroNames[4][15] = "          ";
 8002898:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
  specialModeMacroNames[4][16] = "          ";
 800289c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  specialModeMacroNames[4][17] = "          ";
 80028a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  specialModeMacroNames[4][18] = "          ";
 80028a4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
  specialModeMacroNames[4][19] = "          ";
 80028a8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  for (int i = 0; i < 5; i++)
 80028ac:	f04f 0c00 	mov.w	ip, #0
 80028b0:	e036      	b.n	8002920 <main+0x470>
	  getPresetNamesFromSDCard();
 80028b2:	f7ff f819 	bl	80018e8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 80028b6:	4b27      	ldr	r3, [pc, #156]	; (8002954 <main+0x4a4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e70d      	b.n	80026da <main+0x22a>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <main+0x4a8>)
 80028c0:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 80028c4:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 80028c8:	5c88      	ldrb	r0, [r1, r2]
 80028ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80028ce:	495a      	ldr	r1, [pc, #360]	; (8002a38 <main+0x588>)
 80028d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80028d4:	5498      	strb	r0, [r3, r2]
	  for (int j = 0; j < 14; j++)
 80028d6:	3201      	adds	r2, #1
 80028d8:	2a0d      	cmp	r2, #13
 80028da:	ddf0      	ble.n	80028be <main+0x40e>
	  for (int k = 0; k < 20; k++)
 80028dc:	2000      	movs	r0, #0
 80028de:	e019      	b.n	8002914 <main+0x464>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80028e0:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
 80028e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80028e8:	491d      	ldr	r1, [pc, #116]	; (8002960 <main+0x4b0>)
 80028ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80028ee:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 80028f2:	f811 e002 	ldrb.w	lr, [r1, r2]
 80028f6:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80028fa:	24c8      	movs	r4, #200	; 0xc8
 80028fc:	fb04 f303 	mul.w	r3, r4, r3
 8002900:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8002904:	494d      	ldr	r1, [pc, #308]	; (8002a3c <main+0x58c>)
 8002906:	440b      	add	r3, r1
 8002908:	f803 e002 	strb.w	lr, [r3, r2]
		  for (int j = 0; j < 10; j++)
 800290c:	3201      	adds	r2, #1
 800290e:	2a09      	cmp	r2, #9
 8002910:	dde6      	ble.n	80028e0 <main+0x430>
	  for (int k = 0; k < 20; k++)
 8002912:	3001      	adds	r0, #1
 8002914:	2813      	cmp	r0, #19
 8002916:	dc01      	bgt.n	800291c <main+0x46c>
		  for (int j = 0; j < 10; j++)
 8002918:	2200      	movs	r2, #0
 800291a:	e7f8      	b.n	800290e <main+0x45e>
  for (int i = 0; i < 5; i++)
 800291c:	f10c 0c01 	add.w	ip, ip, #1
 8002920:	f1bc 0f04 	cmp.w	ip, #4
 8002924:	dc01      	bgt.n	800292a <main+0x47a>
	  for (int j = 0; j < 14; j++)
 8002926:	2200      	movs	r2, #0
 8002928:	e7d6      	b.n	80028d8 <main+0x428>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 800292a:	2240      	movs	r2, #64	; 0x40
 800292c:	4944      	ldr	r1, [pc, #272]	; (8002a40 <main+0x590>)
 800292e:	4845      	ldr	r0, [pc, #276]	; (8002a44 <main+0x594>)
 8002930:	f008 f872 	bl	800aa18 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002934:	4944      	ldr	r1, [pc, #272]	; (8002a48 <main+0x598>)
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	18ca      	adds	r2, r1, r3
 800293a:	4844      	ldr	r0, [pc, #272]	; (8002a4c <main+0x59c>)
 800293c:	f008 f950 	bl	800abe0 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002940:	4943      	ldr	r1, [pc, #268]	; (8002a50 <main+0x5a0>)
 8002942:	4844      	ldr	r0, [pc, #272]	; (8002a54 <main+0x5a4>)
 8002944:	f7fe f8aa 	bl	8000a9c <audioStart>
	AudioCodec_init(&hi2c2);
 8002948:	4843      	ldr	r0, [pc, #268]	; (8002a58 <main+0x5a8>)
 800294a:	f7fe f989 	bl	8000c60 <AudioCodec_init>
 800294e:	e0b7      	b.n	8002ac0 <main+0x610>
 8002950:	200142fd 	.word	0x200142fd
 8002954:	20014358 	.word	0x20014358
 8002958:	2001c92c 	.word	0x2001c92c
 800295c:	0801aa30 	.word	0x0801aa30
 8002960:	2001c79c 	.word	0x2001c79c
 8002964:	0801aa40 	.word	0x0801aa40
 8002968:	0801aa4c 	.word	0x0801aa4c
 800296c:	0801aa58 	.word	0x0801aa58
 8002970:	0801aa64 	.word	0x0801aa64
 8002974:	0801aa70 	.word	0x0801aa70
 8002978:	0801aa7c 	.word	0x0801aa7c
 800297c:	0801aa88 	.word	0x0801aa88
 8002980:	0801aa98 	.word	0x0801aa98
 8002984:	0801aaa4 	.word	0x0801aaa4
 8002988:	0801aab0 	.word	0x0801aab0
 800298c:	0801aabc 	.word	0x0801aabc
 8002990:	0801aac8 	.word	0x0801aac8
 8002994:	0801aad4 	.word	0x0801aad4
 8002998:	0801aae0 	.word	0x0801aae0
 800299c:	0801aaec 	.word	0x0801aaec
 80029a0:	0801aaf8 	.word	0x0801aaf8
 80029a4:	0801ab04 	.word	0x0801ab04
 80029a8:	0801ab10 	.word	0x0801ab10
 80029ac:	0801ab1c 	.word	0x0801ab1c
 80029b0:	0801ab28 	.word	0x0801ab28
 80029b4:	0801ab34 	.word	0x0801ab34
 80029b8:	0801ab40 	.word	0x0801ab40
 80029bc:	0801ab4c 	.word	0x0801ab4c
 80029c0:	0801ab58 	.word	0x0801ab58
 80029c4:	0801ab64 	.word	0x0801ab64
 80029c8:	0801ab70 	.word	0x0801ab70
 80029cc:	0801ab7c 	.word	0x0801ab7c
 80029d0:	0801ab8c 	.word	0x0801ab8c
 80029d4:	0801ab98 	.word	0x0801ab98
 80029d8:	0801aba4 	.word	0x0801aba4
 80029dc:	0801abb0 	.word	0x0801abb0
 80029e0:	0801abbc 	.word	0x0801abbc
 80029e4:	0801abc8 	.word	0x0801abc8
 80029e8:	0801abd4 	.word	0x0801abd4
 80029ec:	0801abe0 	.word	0x0801abe0
 80029f0:	0801abf0 	.word	0x0801abf0
 80029f4:	0801abfc 	.word	0x0801abfc
 80029f8:	0801ac08 	.word	0x0801ac08
 80029fc:	0801ac14 	.word	0x0801ac14
 8002a00:	0801ac20 	.word	0x0801ac20
 8002a04:	0801ac2c 	.word	0x0801ac2c
 8002a08:	0801ac38 	.word	0x0801ac38
 8002a0c:	0801ac44 	.word	0x0801ac44
 8002a10:	0801ac50 	.word	0x0801ac50
 8002a14:	0801ac5c 	.word	0x0801ac5c
 8002a18:	0801ac68 	.word	0x0801ac68
 8002a1c:	0801ac78 	.word	0x0801ac78
 8002a20:	0801ac84 	.word	0x0801ac84
 8002a24:	0801ac90 	.word	0x0801ac90
 8002a28:	0801ac9c 	.word	0x0801ac9c
 8002a2c:	0801aca8 	.word	0x0801aca8
 8002a30:	0801acb4 	.word	0x0801acb4
 8002a34:	0801acc0 	.word	0x0801acc0
 8002a38:	30042000 	.word	0x30042000
 8002a3c:	30043380 	.word	0x30043380
 8002a40:	38000040 	.word	0x38000040
 8002a44:	2001cde8 	.word	0x2001cde8
 8002a48:	30000800 	.word	0x30000800
 8002a4c:	2001cd60 	.word	0x2001cd60
 8002a50:	2001cae4 	.word	0x2001cae4
 8002a54:	2001ca4c 	.word	0x2001ca4c
 8002a58:	200142a8 	.word	0x200142a8
		  else if (presetWaitingToWrite > 0)
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <main+0x650>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13e      	bne.n	8002ae2 <main+0x632>
	  if (presetWaitingToParse > 0)
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <main+0x654>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d13f      	bne.n	8002aec <main+0x63c>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <main+0x658>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b90b      	cbnz	r3, 8002a78 <main+0x5c8>
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <main+0x658>)
 8002a76:	885b      	ldrh	r3, [r3, #2]
	  if (brainFirmwareUpdateRequested)
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <main+0x65c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d13c      	bne.n	8002afa <main+0x64a>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002a80:	a901      	add	r1, sp, #4
 8002a82:	4823      	ldr	r0, [pc, #140]	; (8002b10 <main+0x660>)
 8002a84:	f006 f94c 	bl	8008d20 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8002a88:	eddd 7a01 	vldr	s15, [sp, #4]
 8002a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a90:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002b14 <main+0x664>
 8002a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	dd03      	ble.n	8002aa6 <main+0x5f6>
		  myTestInt++;
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <main+0x668>)
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <main+0x66c>)
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	1c51      	adds	r1, r2, #1
 8002aac:	7019      	strb	r1, [r3, #0]
 8002aae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b20 <main+0x670>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <main+0x674>)
 8002ab8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002abc:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <main+0x678>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1cd      	bne.n	8002a64 <main+0x5b4>
		  if (presetWaitingToLoad > 0)
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <main+0x67c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0c5      	beq.n	8002a5c <main+0x5ac>
			  if (!i2cSending)
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <main+0x680>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1c5      	bne.n	8002a64 <main+0x5b4>
				  checkForSDCardPreset(presetNumberToLoad);
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <main+0x684>)
 8002ada:	7818      	ldrb	r0, [r3, #0]
 8002adc:	f7fe fce0 	bl	80014a0 <checkForSDCardPreset>
 8002ae0:	e7c0      	b.n	8002a64 <main+0x5b4>
				  writePresetToSDCard(presetWaitingToWrite);
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <main+0x650>)
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	f7fe fd81 	bl	80015ec <writePresetToSDCard>
 8002aea:	e7bb      	b.n	8002a64 <main+0x5b4>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <main+0x654>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <main+0x684>)
 8002af2:	7819      	ldrb	r1, [r3, #0]
 8002af4:	f017 fb74 	bl	801a1e0 <__parsePreset_veneer>
 8002af8:	e7b8      	b.n	8002a6c <main+0x5bc>
		  checkForBootloadableBrainFile();
 8002afa:	f7fe fe71 	bl	80017e0 <checkForBootloadableBrainFile>
 8002afe:	e7bf      	b.n	8002a80 <main+0x5d0>
 8002b00:	2001a344 	.word	0x2001a344
 8002b04:	2001a340 	.word	0x2001a340
 8002b08:	2001420c 	.word	0x2001420c
 8002b0c:	20014310 	.word	0x20014310
 8002b10:	2001c944 	.word	0x2001c944
 8002b14:	4f000000 	.word	0x4f000000
 8002b18:	200191d4 	.word	0x200191d4
 8002b1c:	2001431c 	.word	0x2001431c
 8002b20:	2f80000d 	.word	0x2f80000d
 8002b24:	2001a398 	.word	0x2001a398
 8002b28:	200142fd 	.word	0x200142fd
 8002b2c:	2001a33c 	.word	0x2001a33c
 8002b30:	200164da 	.word	0x200164da
 8002b34:	2001a33a 	.word	0x2001a33a

08002b38 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b38:	4770      	bx	lr
	...

08002b3c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002b3c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b3e:	4806      	ldr	r0, [pc, #24]	; (8002b58 <MX_RNG_Init+0x1c>)
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_RNG_Init+0x20>)
 8002b42:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b48:	f006 f8aa 	bl	8008ca0 <HAL_RNG_Init>
 8002b4c:	b900      	cbnz	r0, 8002b50 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b50:	f7ff fff2 	bl	8002b38 <Error_Handler>
}
 8002b54:	e7fb      	b.n	8002b4e <MX_RNG_Init+0x12>
 8002b56:	bf00      	nop
 8002b58:	2001c944 	.word	0x2001c944
 8002b5c:	48021800 	.word	0x48021800

08002b60 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002b60:	b510      	push	{r4, lr}
 8002b62:	b0b2      	sub	sp, #200	; 0xc8
 8002b64:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b66:	22c0      	movs	r2, #192	; 0xc0
 8002b68:	2100      	movs	r1, #0
 8002b6a:	a802      	add	r0, sp, #8
 8002b6c:	f015 f8d2 	bl	8017d14 <memset>
  if(rngHandle->Instance==RNG)
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_RNG_MspInit+0x50>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002b78:	b032      	add	sp, #200	; 0xc8
 8002b7a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b80:	2300      	movs	r3, #0
 8002b82:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b86:	a802      	add	r0, sp, #8
 8002b88:	f004 fcd0 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	b968      	cbnz	r0, 8002baa <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RNG_MspInit+0x54>)
 8002b90:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b98:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002b9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9b01      	ldr	r3, [sp, #4]
}
 8002ba8:	e7e6      	b.n	8002b78 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 8002baa:	f7ff ffc5 	bl	8002b38 <Error_Handler>
 8002bae:	e7ee      	b.n	8002b8e <HAL_RNG_MspInit+0x2e>
 8002bb0:	48021800 	.word	0x48021800
 8002bb4:	58024400 	.word	0x58024400

08002bb8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002bb8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002bba:	4818      	ldr	r0, [pc, #96]	; (8002c1c <MX_SAI1_Init+0x64>)
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <MX_SAI1_Init+0x68>)
 8002bbe:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002bc4:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002bc6:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002bc8:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002bce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002bd2:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002bd4:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002bd6:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002bd8:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002bda:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002bdc:	2302      	movs	r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	f006 fbde 	bl	80093a0 <HAL_SAI_InitProtocol>
 8002be4:	b998      	cbnz	r0, 8002c0e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002be6:	480f      	ldr	r0, [pc, #60]	; (8002c24 <MX_SAI1_Init+0x6c>)
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <MX_SAI1_Init+0x70>)
 8002bea:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002bec:	2303      	movs	r3, #3
 8002bee:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002bf8:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002bfa:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002bfc:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002bfe:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c00:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c02:	2302      	movs	r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	f006 fbcb 	bl	80093a0 <HAL_SAI_InitProtocol>
 8002c0a:	b918      	cbnz	r0, 8002c14 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002c0c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002c0e:	f7ff ff93 	bl	8002b38 <Error_Handler>
 8002c12:	e7e8      	b.n	8002be6 <MX_SAI1_Init+0x2e>
    Error_Handler();
 8002c14:	f7ff ff90 	bl	8002b38 <Error_Handler>
}
 8002c18:	e7f8      	b.n	8002c0c <MX_SAI1_Init+0x54>
 8002c1a:	bf00      	nop
 8002c1c:	2001ca4c 	.word	0x2001ca4c
 8002c20:	40015804 	.word	0x40015804
 8002c24:	2001cae4 	.word	0x2001cae4
 8002c28:	40015824 	.word	0x40015824

08002c2c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002c2c:	b530      	push	{r4, r5, lr}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002c32:	6802      	ldr	r2, [r0, #0]
 8002c34:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <HAL_SAI_MspInit+0x140>)
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d005      	beq.n	8002c46 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_SAI_MspInit+0x144>)
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d04b      	beq.n	8002cda <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002c42:	b009      	add	sp, #36	; 0x24
 8002c44:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8002c46:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <HAL_SAI_MspInit+0x148>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	b963      	cbnz	r3, 8002c66 <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002c4c:	4a4a      	ldr	r2, [pc, #296]	; (8002d78 <HAL_SAI_MspInit+0x14c>)
 8002c4e:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8002c52:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002c56:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8002c5a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8002c5e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c62:	9201      	str	r2, [sp, #4]
 8002c64:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a42      	ldr	r2, [pc, #264]	; (8002d74 <HAL_SAI_MspInit+0x148>)
 8002c6a:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c6c:	2374      	movs	r3, #116	; 0x74
 8002c6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2500      	movs	r5, #0
 8002c76:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002c7c:	2306      	movs	r3, #6
 8002c7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c80:	a903      	add	r1, sp, #12
 8002c82:	483e      	ldr	r0, [pc, #248]	; (8002d7c <HAL_SAI_MspInit+0x150>)
 8002c84:	f002 fda4 	bl	80057d0 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002c88:	483d      	ldr	r0, [pc, #244]	; (8002d80 <HAL_SAI_MspInit+0x154>)
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_SAI_MspInit+0x158>)
 8002c8c:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002c8e:	2357      	movs	r3, #87	; 0x57
 8002c90:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c92:	2340      	movs	r3, #64	; 0x40
 8002c94:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c96:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9c:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca2:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca8:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8002caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cae:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cb0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002cb4:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002cba:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8002cbc:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cbe:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002cc0:	f001 fbee 	bl	80044a0 <HAL_DMA_Init>
 8002cc4:	b930      	cbnz	r0, 8002cd4 <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <HAL_SAI_MspInit+0x154>)
 8002cc8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002ccc:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002cce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002cd2:	e7b2      	b.n	8002c3a <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8002cd4:	f7ff ff30 	bl	8002b38 <Error_Handler>
 8002cd8:	e7f5      	b.n	8002cc6 <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_SAI_MspInit+0x148>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b963      	cbnz	r3, 8002cfa <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002ce0:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <HAL_SAI_MspInit+0x14c>)
 8002ce2:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8002ce6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8002cea:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8002cee:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8002cf2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_SAI_MspInit+0x148>)
 8002cfe:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d00:	2308      	movs	r3, #8
 8002d02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2500      	movs	r5, #0
 8002d0a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d10:	2306      	movs	r3, #6
 8002d12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d14:	a903      	add	r1, sp, #12
 8002d16:	4819      	ldr	r0, [pc, #100]	; (8002d7c <HAL_SAI_MspInit+0x150>)
 8002d18:	f002 fd5a 	bl	80057d0 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002d1c:	481a      	ldr	r0, [pc, #104]	; (8002d88 <HAL_SAI_MspInit+0x15c>)
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_SAI_MspInit+0x160>)
 8002d20:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002d22:	2358      	movs	r3, #88	; 0x58
 8002d24:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d26:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d2e:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d3a:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d40:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d42:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d46:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002d4c:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d4e:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d50:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002d52:	f001 fba5 	bl	80044a0 <HAL_DMA_Init>
 8002d56:	b930      	cbnz	r0, 8002d66 <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_SAI_MspInit+0x15c>)
 8002d5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002d5e:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002d60:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8002d64:	e76d      	b.n	8002c42 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 8002d66:	f7ff fee7 	bl	8002b38 <Error_Handler>
 8002d6a:	e7f5      	b.n	8002d58 <HAL_SAI_MspInit+0x12c>
 8002d6c:	40015804 	.word	0x40015804
 8002d70:	40015824 	.word	0x40015824
 8002d74:	2001c958 	.word	0x2001c958
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58021000 	.word	0x58021000
 8002d80:	2001c95c 	.word	0x2001c95c
 8002d84:	40020028 	.word	0x40020028
 8002d88:	2001c9d4 	.word	0x2001c9d4
 8002d8c:	40020040 	.word	0x40020040

08002d90 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <MX_SDMMC1_SD_Init+0x1c>)
 8002d92:	4a07      	ldr	r2, [pc, #28]	; (8002db0 <MX_SDMMC1_SD_Init+0x20>)
 8002d94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002d9a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002da0:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002da2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8002da4:	2219      	movs	r2, #25
 8002da6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	2001cb7c 	.word	0x2001cb7c
 8002db0:	52007000 	.word	0x52007000

08002db4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	2300      	movs	r3, #0
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	9305      	str	r3, [sp, #20]
 8002dc0:	9306      	str	r3, [sp, #24]
 8002dc2:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_SD_MspInit+0xac>)
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002dcc:	b008      	add	sp, #32
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_SD_MspInit+0xb0>)
 8002dd2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002dd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dda:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002dde:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002de2:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002de6:	9200      	str	r2, [sp, #0]
 8002de8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dee:	f042 0204 	orr.w	r2, r2, #4
 8002df2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002df6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002dfa:	f002 0204 	and.w	r2, r2, #4
 8002dfe:	9201      	str	r2, [sp, #4]
 8002e00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e06:	f042 0208 	orr.w	r2, r2, #8
 8002e0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e1a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e1e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2402      	movs	r4, #2
 8002e22:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e24:	2601      	movs	r6, #1
 8002e26:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e28:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002e2a:	250c      	movs	r5, #12
 8002e2c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e2e:	eb0d 0105 	add.w	r1, sp, r5
 8002e32:	480d      	ldr	r0, [pc, #52]	; (8002e68 <HAL_SD_MspInit+0xb4>)
 8002e34:	f002 fccc 	bl	80057d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e38:	2304      	movs	r3, #4
 8002e3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3e:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e40:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002e42:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e44:	eb0d 0105 	add.w	r1, sp, r5
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <HAL_SD_MspInit+0xb8>)
 8002e4a:	f002 fcc1 	bl	80057d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	4611      	mov	r1, r2
 8002e52:	2031      	movs	r0, #49	; 0x31
 8002e54:	f001 f86c 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002e58:	2031      	movs	r0, #49	; 0x31
 8002e5a:	f001 f89f 	bl	8003f9c <HAL_NVIC_EnableIRQ>
}
 8002e5e:	e7b5      	b.n	8002dcc <HAL_SD_MspInit+0x18>
 8002e60:	52007000 	.word	0x52007000
 8002e64:	58024400 	.word	0x58024400
 8002e68:	58020800 	.word	0x58020800
 8002e6c:	58020c00 	.word	0x58020c00

08002e70 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi5_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e70:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e72:	4810      	ldr	r0, [pc, #64]	; (8002eb4 <MX_SPI1_Init+0x44>)
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_SPI1_Init+0x48>)
 8002e76:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e7c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e7e:	2207      	movs	r2, #7
 8002e80:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e82:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e84:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002e86:	6183      	str	r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e88:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e90:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e92:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e94:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e96:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e98:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e9a:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002e9c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002e9e:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ea0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ea2:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ea4:	f007 fcf0 	bl	800a888 <HAL_SPI_Init>
 8002ea8:	b900      	cbnz	r0, 8002eac <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eaa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002eac:	f7ff fe44 	bl	8002b38 <Error_Handler>
}
 8002eb0:	e7fb      	b.n	8002eaa <MX_SPI1_Init+0x3a>
 8002eb2:	bf00      	nop
 8002eb4:	2001cd60 	.word	0x2001cd60
 8002eb8:	40013000 	.word	0x40013000

08002ebc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002ebc:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002ebe:	4810      	ldr	r0, [pc, #64]	; (8002f00 <MX_SPI5_Init+0x44>)
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <MX_SPI5_Init+0x48>)
 8002ec2:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec8:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eca:	2207      	movs	r2, #7
 8002ecc:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ece:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed0:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8002ed2:	6183      	str	r3, [r0, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed4:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ed6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8002eda:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002edc:	6343      	str	r3, [r0, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ede:	6383      	str	r3, [r0, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002ee0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ee2:	6403      	str	r3, [r0, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ee4:	6443      	str	r3, [r0, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ee6:	6483      	str	r3, [r0, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ee8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002eea:	6503      	str	r3, [r0, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002eec:	6543      	str	r3, [r0, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002eee:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002ef0:	f007 fcca 	bl	800a888 <HAL_SPI_Init>
 8002ef4:	b900      	cbnz	r0, 8002ef8 <MX_SPI5_Init+0x3c>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002ef6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ef8:	f7ff fe1e 	bl	8002b38 <Error_Handler>
}
 8002efc:	e7fb      	b.n	8002ef6 <MX_SPI5_Init+0x3a>
 8002efe:	bf00      	nop
 8002f00:	2001cde8 	.word	0x2001cde8
 8002f04:	40015000 	.word	0x40015000

08002f08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0c:	b0ba      	sub	sp, #232	; 0xe8
 8002f0e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	2100      	movs	r1, #0
 8002f12:	9135      	str	r1, [sp, #212]	; 0xd4
 8002f14:	9136      	str	r1, [sp, #216]	; 0xd8
 8002f16:	9137      	str	r1, [sp, #220]	; 0xdc
 8002f18:	9138      	str	r1, [sp, #224]	; 0xe0
 8002f1a:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f1c:	22c0      	movs	r2, #192	; 0xc0
 8002f1e:	a804      	add	r0, sp, #16
 8002f20:	f014 fef8 	bl	8017d14 <memset>
  if(spiHandle->Instance==SPI1)
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	4a71      	ldr	r2, [pc, #452]	; (80030ec <HAL_SPI_MspInit+0x1e4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d005      	beq.n	8002f38 <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8002f2c:	4a70      	ldr	r2, [pc, #448]	; (80030f0 <HAL_SPI_MspInit+0x1e8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d076      	beq.n	8003020 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002f32:	b03a      	add	sp, #232	; 0xe8
 8002f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f38:	4b6e      	ldr	r3, [pc, #440]	; (80030f4 <HAL_SPI_MspInit+0x1ec>)
 8002f3a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002f46:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002f4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f6a:	23f0      	movs	r3, #240	; 0xf0
 8002f6c:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f76:	2305      	movs	r3, #5
 8002f78:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f7a:	a935      	add	r1, sp, #212	; 0xd4
 8002f7c:	485e      	ldr	r0, [pc, #376]	; (80030f8 <HAL_SPI_MspInit+0x1f0>)
 8002f7e:	f002 fc27 	bl	80057d0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002f82:	485e      	ldr	r0, [pc, #376]	; (80030fc <HAL_SPI_MspInit+0x1f4>)
 8002f84:	4b5e      	ldr	r3, [pc, #376]	; (8003100 <HAL_SPI_MspInit+0x1f8>)
 8002f86:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002f88:	2325      	movs	r3, #37	; 0x25
 8002f8a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f96:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f98:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f9a:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fa0:	61c2      	str	r2, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fa6:	6202      	str	r2, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fa8:	2204      	movs	r2, #4
 8002faa:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002fac:	2201      	movs	r2, #1
 8002fae:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002fb0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002fb2:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002fb4:	f001 fa74 	bl	80044a0 <HAL_DMA_Init>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d12b      	bne.n	8003014 <HAL_SPI_MspInit+0x10c>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002fbc:	4b4f      	ldr	r3, [pc, #316]	; (80030fc <HAL_SPI_MspInit+0x1f4>)
 8002fbe:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002fc0:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002fc2:	4850      	ldr	r0, [pc, #320]	; (8003104 <HAL_SPI_MspInit+0x1fc>)
 8002fc4:	4b50      	ldr	r3, [pc, #320]	; (8003108 <HAL_SPI_MspInit+0x200>)
 8002fc6:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002fc8:	2326      	movs	r3, #38	; 0x26
 8002fca:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fcc:	2340      	movs	r3, #64	; 0x40
 8002fce:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd8:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fda:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fdc:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe2:	61c2      	str	r2, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fe4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fe8:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fea:	2204      	movs	r2, #4
 8002fec:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ff2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ff4:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002ff6:	f001 fa53 	bl	80044a0 <HAL_DMA_Init>
 8002ffa:	b970      	cbnz	r0, 800301a <HAL_SPI_MspInit+0x112>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002ffc:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_SPI_MspInit+0x1fc>)
 8002ffe:	67a3      	str	r3, [r4, #120]	; 0x78
 8003000:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8003002:	2200      	movs	r2, #0
 8003004:	2102      	movs	r1, #2
 8003006:	2023      	movs	r0, #35	; 0x23
 8003008:	f000 ff92 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800300c:	2023      	movs	r0, #35	; 0x23
 800300e:	f000 ffc5 	bl	8003f9c <HAL_NVIC_EnableIRQ>
 8003012:	e78e      	b.n	8002f32 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 8003014:	f7ff fd90 	bl	8002b38 <Error_Handler>
 8003018:	e7d0      	b.n	8002fbc <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 800301a:	f7ff fd8d 	bl	8002b38 <Error_Handler>
 800301e:	e7ed      	b.n	8002ffc <HAL_SPI_MspInit+0xf4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003020:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003024:	2300      	movs	r3, #0
 8003026:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800302a:	a804      	add	r0, sp, #16
 800302c:	f004 fa7e 	bl	800752c <HAL_RCCEx_PeriphCLKConfig>
 8003030:	2800      	cmp	r0, #0
 8003032:	d155      	bne.n	80030e0 <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <HAL_SPI_MspInit+0x1ec>)
 8003036:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800303a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800303e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003042:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003046:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800304a:	9202      	str	r2, [sp, #8]
 800304c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800304e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800305a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003066:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800306a:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306c:	2602      	movs	r6, #2
 800306e:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	2500      	movs	r5, #0
 8003072:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003074:	9638      	str	r6, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003076:	f04f 0805 	mov.w	r8, #5
 800307a:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800307e:	4f23      	ldr	r7, [pc, #140]	; (800310c <HAL_SPI_MspInit+0x204>)
 8003080:	a935      	add	r1, sp, #212	; 0xd4
 8003082:	4638      	mov	r0, r7
 8003084:	f002 fba4 	bl	80057d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800308c:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003090:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003094:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003098:	a935      	add	r1, sp, #212	; 0xd4
 800309a:	4638      	mov	r0, r7
 800309c:	f002 fb98 	bl	80057d0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80030a0:	481b      	ldr	r0, [pc, #108]	; (8003110 <HAL_SPI_MspInit+0x208>)
 80030a2:	4b1c      	ldr	r3, [pc, #112]	; (8003114 <HAL_SPI_MspInit+0x20c>)
 80030a4:	6003      	str	r3, [r0, #0]
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80030a6:	2355      	movs	r3, #85	; 0x55
 80030a8:	6043      	str	r3, [r0, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030aa:	6085      	str	r5, [r0, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ac:	60c5      	str	r5, [r0, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030b2:	6103      	str	r3, [r0, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b4:	6145      	str	r5, [r0, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b6:	6185      	str	r5, [r0, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80030b8:	61c5      	str	r5, [r0, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030ba:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80030be:	6203      	str	r3, [r0, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030c0:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80030c2:	f001 f9ed 	bl	80044a0 <HAL_DMA_Init>
 80030c6:	b970      	cbnz	r0, 80030e6 <HAL_SPI_MspInit+0x1de>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_SPI_MspInit+0x208>)
 80030ca:	67e3      	str	r3, [r4, #124]	; 0x7c
 80030cc:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2104      	movs	r1, #4
 80030d2:	2055      	movs	r0, #85	; 0x55
 80030d4:	f000 ff2c 	bl	8003f30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80030d8:	2055      	movs	r0, #85	; 0x55
 80030da:	f000 ff5f 	bl	8003f9c <HAL_NVIC_EnableIRQ>
}
 80030de:	e728      	b.n	8002f32 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 80030e0:	f7ff fd2a 	bl	8002b38 <Error_Handler>
 80030e4:	e7a6      	b.n	8003034 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 80030e6:	f7ff fd27 	bl	8002b38 <Error_Handler>
 80030ea:	e7ed      	b.n	80030c8 <HAL_SPI_MspInit+0x1c0>
 80030ec:	40013000 	.word	0x40013000
 80030f0:	40015000 	.word	0x40015000
 80030f4:	58024400 	.word	0x58024400
 80030f8:	58020000 	.word	0x58020000
 80030fc:	2001cbf8 	.word	0x2001cbf8
 8003100:	40020070 	.word	0x40020070
 8003104:	2001cc70 	.word	0x2001cc70
 8003108:	40020088 	.word	0x40020088
 800310c:	58021400 	.word	0x58021400
 8003110:	2001cce8 	.word	0x2001cce8
 8003114:	40020058 	.word	0x40020058

08003118 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8003118:	e7fe      	b.n	8003118 <Default_Handler>
	...

0800311c <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <Reset_Handler+0x48>)
 800311e:	4912      	ldr	r1, [pc, #72]	; (8003168 <Reset_Handler+0x4c>)
 8003120:	e003      	b.n	800312a <Reset_Handler+0xe>
		*pDest = *pSource;
 8003122:	f851 2b04 	ldr.w	r2, [r1], #4
 8003126:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <Reset_Handler+0x50>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d1f8      	bne.n	8003122 <Reset_Handler+0x6>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <Reset_Handler+0x54>)
 8003132:	e002      	b.n	800313a <Reset_Handler+0x1e>
		*pDest = 0;
 8003134:	2200      	movs	r2, #0
 8003136:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <Reset_Handler+0x58>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d1f9      	bne.n	8003134 <Reset_Handler+0x18>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <Reset_Handler+0x5c>)
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <Reset_Handler+0x60>)
 8003144:	e003      	b.n	800314e <Reset_Handler+0x32>
		*pDest = *pSource;
 8003146:	f851 2b04 	ldr.w	r2, [r1], #4
 800314a:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 800314e:	4a0c      	ldr	r2, [pc, #48]	; (8003180 <Reset_Handler+0x64>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d1f8      	bne.n	8003146 <Reset_Handler+0x2a>
	SystemInit();
 8003154:	f000 fde8 	bl	8003d28 <SystemInit>
	__libc_init_array();
 8003158:	f014 fde4 	bl	8017d24 <__libc_init_array>
	(void)main();
 800315c:	f7ff f9a8 	bl	80024b0 <main>
	for (;;) ;
 8003160:	e7fe      	b.n	8003160 <Reset_Handler+0x44>
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000
 8003168:	08029b48 	.word	0x08029b48
 800316c:	20000a24 	.word	0x20000a24
 8003170:	20000a24 	.word	0x20000a24
 8003174:	2001e040 	.word	0x2001e040
 8003178:	00000400 	.word	0x00000400
 800317c:	0802a56c 	.word	0x0802a56c
 8003180:	00009b30 	.word	0x00009b30

08003184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003184:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_MspInit+0x20>)
 8003188:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800318c:	f042 0202 	orr.w	r2, r2, #2
 8003190:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a0:	b002      	add	sp, #8
 80031a2:	4770      	bx	lr
 80031a4:	58024400 	.word	0x58024400

080031a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031a8:	e7fe      	b.n	80031a8 <NMI_Handler>

080031aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031aa:	e7fe      	b.n	80031aa <HardFault_Handler>

080031ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <MemManage_Handler>

080031ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ae:	e7fe      	b.n	80031ae <BusFault_Handler>

080031b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <UsageFault_Handler>

080031b2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b2:	4770      	bx	lr

080031b4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b4:	4770      	bx	lr

080031b6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b6:	4770      	bx	lr

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ba:	f000 fe71 	bl	8003ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031be:	bd08      	pop	{r3, pc}

080031c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80031c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80031c2:	4802      	ldr	r0, [pc, #8]	; (80031cc <DMA1_Stream1_IRQHandler+0xc>)
 80031c4:	f001 ff62 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80031c8:	bd08      	pop	{r3, pc}
 80031ca:	bf00      	nop
 80031cc:	2001c95c 	.word	0x2001c95c

080031d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80031d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80031d2:	4802      	ldr	r0, [pc, #8]	; (80031dc <DMA1_Stream2_IRQHandler+0xc>)
 80031d4:	f001 ff5a 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80031d8:	bd08      	pop	{r3, pc}
 80031da:	bf00      	nop
 80031dc:	2001c9d4 	.word	0x2001c9d4

080031e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80031e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80031e2:	4802      	ldr	r0, [pc, #8]	; (80031ec <DMA1_Stream3_IRQHandler+0xc>)
 80031e4:	f001 ff52 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80031e8:	bd08      	pop	{r3, pc}
 80031ea:	bf00      	nop
 80031ec:	2001cce8 	.word	0x2001cce8

080031f0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80031f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80031f2:	4802      	ldr	r0, [pc, #8]	; (80031fc <DMA1_Stream4_IRQHandler+0xc>)
 80031f4:	f001 ff4a 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80031f8:	bd08      	pop	{r3, pc}
 80031fa:	bf00      	nop
 80031fc:	2001cbf8 	.word	0x2001cbf8

08003200 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003202:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA1_Stream5_IRQHandler+0xc>)
 8003204:	f001 ff42 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003208:	bd08      	pop	{r3, pc}
 800320a:	bf00      	nop
 800320c:	2001cc70 	.word	0x2001cc70

08003210 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003210:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003212:	4802      	ldr	r0, [pc, #8]	; (800321c <I2C2_EV_IRQHandler+0xc>)
 8003214:	f002 fe9c 	bl	8005f50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003218:	bd08      	pop	{r3, pc}
 800321a:	bf00      	nop
 800321c:	200142a8 	.word	0x200142a8

08003220 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003220:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003222:	4802      	ldr	r0, [pc, #8]	; (800322c <I2C2_ER_IRQHandler+0xc>)
 8003224:	f003 f9de 	bl	80065e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003228:	bd08      	pop	{r3, pc}
 800322a:	bf00      	nop
 800322c:	200142a8 	.word	0x200142a8

08003230 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003232:	4802      	ldr	r0, [pc, #8]	; (800323c <SPI1_IRQHandler+0xc>)
 8003234:	f007 fefc 	bl	800b030 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003238:	bd08      	pop	{r3, pc}
 800323a:	bf00      	nop
 800323c:	2001cd60 	.word	0x2001cd60

08003240 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003240:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003242:	4802      	ldr	r0, [pc, #8]	; (800324c <SDMMC1_IRQHandler+0xc>)
 8003244:	f007 f8fe 	bl	800a444 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	2001cb7c 	.word	0x2001cb7c

08003250 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8003250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8003252:	4802      	ldr	r0, [pc, #8]	; (800325c <SPI5_IRQHandler+0xc>)
 8003254:	f007 feec 	bl	800b030 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8003258:	bd08      	pop	{r3, pc}
 800325a:	bf00      	nop
 800325c:	2001cde8 	.word	0x2001cde8

08003260 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 8003260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003264:	ed2d 8b04 	vpush	{d8-d9}
 8003268:	b083      	sub	sp, #12
	for (int i = 0; i < OVERSAMPLE; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	e005      	b.n	800327a <audioInitSynth+0x1a>
    {
        oversamplerArray[i] = 0.0f;
 800326e:	4a8a      	ldr	r2, [pc, #552]	; (8003498 <audioInitSynth+0x238>)
 8003270:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003274:	2100      	movs	r1, #0
 8003276:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < OVERSAMPLE; i++)
 8003278:	3301      	adds	r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	ddf7      	ble.n	800326e <audioInitSynth+0xe>
    }
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800327e:	2600      	movs	r6, #0
 8003280:	e2a4      	b.n	80037cc <audioInitSynth+0x56c>

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v], &leaf);
 8003282:	4d86      	ldr	r5, [pc, #536]	; (800349c <audioInitSynth+0x23c>)
 8003284:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8003288:	009c      	lsls	r4, r3, #2
 800328a:	4629      	mov	r1, r5
 800328c:	4884      	ldr	r0, [pc, #528]	; (80034a0 <audioInitSynth+0x240>)
 800328e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003292:	f010 fa53 	bl	801373c <tPBSaw_init>

			tPBPulse_init(&pulse[i][v], &leaf);
 8003296:	4629      	mov	r1, r5
 8003298:	4882      	ldr	r0, [pc, #520]	; (80034a4 <audioInitSynth+0x244>)
 800329a:	4420      	add	r0, r4
 800329c:	f010 f956 	bl	801354c <tPBPulse_init>

			tCycle_init(&sine[i][v],  &leaf);
 80032a0:	4629      	mov	r1, r5
 80032a2:	4881      	ldr	r0, [pc, #516]	; (80034a8 <audioInitSynth+0x248>)
 80032a4:	4420      	add	r0, r4
 80032a6:	f00f fe95 	bl	8012fd4 <tCycle_init>

			tPBTriangle_init(&tri[i][v],  &leaf);
 80032aa:	4629      	mov	r1, r5
 80032ac:	487f      	ldr	r0, [pc, #508]	; (80034ac <audioInitSynth+0x24c>)
 80032ae:	4420      	add	r0, r4
 80032b0:	f00f ff16 	bl	80130e0 <tPBTriangle_init>

			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 80032b4:	4629      	mov	r1, r5
 80032b6:	487e      	ldr	r0, [pc, #504]	; (80034b0 <audioInitSynth+0x250>)
 80032b8:	4420      	add	r0, r4
 80032ba:	f010 fac7 	bl	801384c <tPBSawSquare_init>

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 80032be:	4629      	mov	r1, r5
 80032c0:	487c      	ldr	r0, [pc, #496]	; (80034b4 <audioInitSynth+0x254>)
 80032c2:	4420      	add	r0, r4
 80032c4:	f010 f83c 	bl	8013340 <tPBSineTriangle_init>

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 80032c8:	4629      	mov	r1, r5
 80032ca:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80034b8 <audioInitSynth+0x258>
 80032ce:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 80034bc <audioInitSynth+0x25c>
 80032d2:	487b      	ldr	r0, [pc, #492]	; (80034c0 <audioInitSynth+0x260>)
 80032d4:	4420      	add	r0, r4
 80032d6:	f00c f993 	bl	800f600 <tExpSmooth_init>

			freqMult[i][v] = 1.0f;
 80032da:	4b7a      	ldr	r3, [pc, #488]	; (80034c4 <audioInitSynth+0x264>)
 80032dc:	4423      	add	r3, r4
 80032de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80032e2:	601a      	str	r2, [r3, #0]
			midiAdd[i][v] = 0.0f;
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <audioInitSynth+0x268>)
 80032e6:	4423      	add	r3, r4
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < NUM_OSC; i++)
 80032ec:	3701      	adds	r7, #1
 80032ee:	2f02      	cmp	r7, #2
 80032f0:	ddc7      	ble.n	8003282 <audioInitSynth+0x22>

		}
		for (int i = 0; i < NUM_FILT; i++)
 80032f2:	2700      	movs	r7, #0
 80032f4:	e06e      	b.n	80033d4 <audioInitSynth+0x174>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80032f6:	4c69      	ldr	r4, [pc, #420]	; (800349c <audioInitSynth+0x23c>)
 80032f8:	eddf 8a74 	vldr	s17, [pc, #464]	; 80034cc <audioInitSynth+0x26c>
 80032fc:	ed9f 8a74 	vldr	s16, [pc, #464]	; 80034d0 <audioInitSynth+0x270>
 8003300:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8003304:	009d      	lsls	r5, r3, #2
 8003306:	4622      	mov	r2, r4
 8003308:	eef0 0a68 	vmov.f32	s1, s17
 800330c:	eeb0 0a48 	vmov.f32	s0, s16
 8003310:	2101      	movs	r1, #1
 8003312:	4870      	ldr	r0, [pc, #448]	; (80034d4 <audioInitSynth+0x274>)
 8003314:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003318:	f00c fdc6 	bl	800fea8 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 800331c:	4622      	mov	r2, r4
 800331e:	eef0 0a68 	vmov.f32	s1, s17
 8003322:	eeb0 0a48 	vmov.f32	s0, s16
 8003326:	2100      	movs	r1, #0
 8003328:	486b      	ldr	r0, [pc, #428]	; (80034d8 <audioInitSynth+0x278>)
 800332a:	4428      	add	r0, r5
 800332c:	f00c fdbc 	bl	800fea8 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003330:	4622      	mov	r2, r4
 8003332:	eef0 0a68 	vmov.f32	s1, s17
 8003336:	eeb0 0a48 	vmov.f32	s0, s16
 800333a:	2102      	movs	r1, #2
 800333c:	4867      	ldr	r0, [pc, #412]	; (80034dc <audioInitSynth+0x27c>)
 800333e:	4428      	add	r0, r5
 8003340:	f00c fdb2 	bl	800fea8 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8003344:	4621      	mov	r1, r4
 8003346:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800334a:	eeb0 0a48 	vmov.f32	s0, s16
 800334e:	4864      	ldr	r0, [pc, #400]	; (80034e0 <audioInitSynth+0x280>)
 8003350:	4428      	add	r0, r5
 8003352:	f00e fcc3 	bl	8011cdc <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8003356:	4621      	mov	r1, r4
 8003358:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800335c:	eddf 0a61 	vldr	s1, [pc, #388]	; 80034e4 <audioInitSynth+0x284>
 8003360:	eeb0 0a48 	vmov.f32	s0, s16
 8003364:	4860      	ldr	r0, [pc, #384]	; (80034e8 <audioInitSynth+0x288>)
 8003366:	4428      	add	r0, r5
 8003368:	f00e f8c2 	bl	80114f0 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800336c:	eddf 8a5f 	vldr	s17, [pc, #380]	; 80034ec <audioInitSynth+0x28c>
 8003370:	4621      	mov	r1, r4
 8003372:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003376:	eef0 0a68 	vmov.f32	s1, s17
 800337a:	eeb0 0a48 	vmov.f32	s0, s16
 800337e:	485c      	ldr	r0, [pc, #368]	; (80034f0 <audioInitSynth+0x290>)
 8003380:	4428      	add	r0, r5
 8003382:	f00d fc5b 	bl	8010c3c <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003386:	4621      	mov	r1, r4
 8003388:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800338c:	eef0 0a68 	vmov.f32	s1, s17
 8003390:	eeb0 0a48 	vmov.f32	s0, s16
 8003394:	4857      	ldr	r0, [pc, #348]	; (80034f4 <audioInitSynth+0x294>)
 8003396:	4428      	add	r0, r5
 8003398:	f00d fe6a 	bl	8011070 <tVZFilterHS_init>
			tVZFilterBR_init(&VZfilterBR[i][v], 2000.f, 1.0f, &leaf);
 800339c:	4621      	mov	r1, r4
 800339e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80033a2:	eeb0 0a48 	vmov.f32	s0, s16
 80033a6:	4854      	ldr	r0, [pc, #336]	; (80034f8 <audioInitSynth+0x298>)
 80033a8:	4428      	add	r0, r5
 80033aa:	f00e fb47 	bl	8011a3c <tVZFilterBR_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 80033ae:	4621      	mov	r1, r4
 80033b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80033b4:	eeb0 0a48 	vmov.f32	s0, s16
 80033b8:	4850      	ldr	r0, [pc, #320]	; (80034fc <audioInitSynth+0x29c>)
 80033ba:	4428      	add	r0, r5
 80033bc:	f00f f80c 	bl	80123d8 <tLadderFilter_init>
			//tLadderFilter_setOversampling(&Ladderfilter[i][v], 2);
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80033c0:	4621      	mov	r1, r4
 80033c2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8003500 <audioInitSynth+0x2a0>
 80033c6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80034bc <audioInitSynth+0x25c>
 80033ca:	484e      	ldr	r0, [pc, #312]	; (8003504 <audioInitSynth+0x2a4>)
 80033cc:	4428      	add	r0, r5
 80033ce:	f00c f917 	bl	800f600 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80033d2:	3701      	adds	r7, #1
 80033d4:	2f01      	cmp	r7, #1
 80033d6:	dd8e      	ble.n	80032f6 <audioInitSynth+0x96>
		}

		for (int i = 0; i < NUM_LFOS; i++)
 80033d8:	2700      	movs	r7, #0
 80033da:	e023      	b.n	8003424 <audioInitSynth+0x1c4>
		{
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80033dc:	4c2f      	ldr	r4, [pc, #188]	; (800349c <audioInitSynth+0x23c>)
 80033de:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 80033e2:	009d      	lsls	r5, r3, #2
 80033e4:	4621      	mov	r1, r4
 80033e6:	4848      	ldr	r0, [pc, #288]	; (8003508 <audioInitSynth+0x2a8>)
 80033e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80033ec:	f010 fb7c 	bl	8013ae8 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80033f0:	4621      	mov	r1, r4
 80033f2:	4846      	ldr	r0, [pc, #280]	; (800350c <audioInitSynth+0x2ac>)
 80033f4:	4428      	add	r0, r5
 80033f6:	f010 fc0b 	bl	8013c10 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 80033fa:	4621      	mov	r1, r4
 80033fc:	4844      	ldr	r0, [pc, #272]	; (8003510 <audioInitSynth+0x2b0>)
 80033fe:	4428      	add	r0, r5
 8003400:	f00f fde8 	bl	8012fd4 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003404:	4621      	mov	r1, r4
 8003406:	4843      	ldr	r0, [pc, #268]	; (8003514 <audioInitSynth+0x2b4>)
 8003408:	4428      	add	r0, r5
 800340a:	f010 fcd1 	bl	8013db0 <tTriLFO_init>

			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 800340e:	4621      	mov	r1, r4
 8003410:	4841      	ldr	r0, [pc, #260]	; (8003518 <audioInitSynth+0x2b8>)
 8003412:	4428      	add	r0, r5
 8003414:	f010 fcf2 	bl	8013dfc <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003418:	4621      	mov	r1, r4
 800341a:	4840      	ldr	r0, [pc, #256]	; (800351c <audioInitSynth+0x2bc>)
 800341c:	4428      	add	r0, r5
 800341e:	f010 fc2c 	bl	8013c7a <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8003422:	3701      	adds	r7, #1
 8003424:	2f03      	cmp	r7, #3
 8003426:	ddd9      	ble.n	80033dc <audioInitSynth+0x17c>
		}


		for (int i = 0; i < NUM_ENV; i++)
 8003428:	2500      	movs	r5, #0
 800342a:	e019      	b.n	8003460 <audioInitSynth+0x200>
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800342c:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8003430:	4c3b      	ldr	r4, [pc, #236]	; (8003520 <audioInitSynth+0x2c0>)
 8003432:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <audioInitSynth+0x23c>)
 8003438:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800343c:	4939      	ldr	r1, [pc, #228]	; (8003524 <audioInitSynth+0x2c4>)
 800343e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003442:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003446:	eddf 0a38 	vldr	s1, [pc, #224]	; 8003528 <audioInitSynth+0x2c8>
 800344a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800352c <audioInitSynth+0x2cc>
 800344e:	4620      	mov	r0, r4
 8003450:	f00b fda8 	bl	800efa4 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8003454:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003530 <audioInitSynth+0x2d0>
 8003458:	4620      	mov	r0, r4
 800345a:	f00b fdfb 	bl	800f054 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 800345e:	3501      	adds	r5, #1
 8003460:	2d03      	cmp	r5, #3
 8003462:	dde3      	ble.n	800342c <audioInitSynth+0x1cc>
		}

		//noise
		tTiltFilter_init(&noiseTilt[v], 1000.0f, &leaf);
 8003464:	4d0d      	ldr	r5, [pc, #52]	; (800349c <audioInitSynth+0x23c>)
 8003466:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8003528 <audioInitSynth+0x2c8>
 800346a:	00b4      	lsls	r4, r6, #2
 800346c:	4629      	mov	r1, r5
 800346e:	eeb0 0a48 	vmov.f32	s0, s16
 8003472:	4830      	ldr	r0, [pc, #192]	; (8003534 <audioInitSynth+0x2d4>)
 8003474:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003478:	f00f fa22 	bl	80128c0 <tTiltFilter_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 800347c:	4629      	mov	r1, r5
 800347e:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8003538 <audioInitSynth+0x2d8>
 8003482:	eddf 0a18 	vldr	s1, [pc, #96]	; 80034e4 <audioInitSynth+0x284>
 8003486:	eeb0 0a48 	vmov.f32	s0, s16
 800348a:	482c      	ldr	r0, [pc, #176]	; (800353c <audioInitSynth+0x2dc>)
 800348c:	4420      	add	r0, r4
 800348e:	f00e f82f 	bl	80114f0 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
 8003492:	f04f 0900 	mov.w	r9, #0
 8003496:	e179      	b.n	800378c <audioInitSynth+0x52c>
 8003498:	2001d508 	.word	0x2001d508
 800349c:	20005294 	.word	0x20005294
 80034a0:	2001d608 	.word	0x2001d608
 80034a4:	2001d5ec 	.word	0x2001d5ec
 80034a8:	2001d684 	.word	0x2001d684
 80034ac:	2001d820 	.word	0x2001d820
 80034b0:	2001d620 	.word	0x2001d620
 80034b4:	2001d69c 	.word	0x2001d69c
 80034b8:	3d4ccccd 	.word	0x3d4ccccd
 80034bc:	42800000 	.word	0x42800000
 80034c0:	2001d5b0 	.word	0x2001d5b0
 80034c4:	2001d1dc 	.word	0x2001d1dc
 80034c8:	2001d44c 	.word	0x2001d44c
 80034cc:	3f333333 	.word	0x3f333333
 80034d0:	44fa0000 	.word	0x44fa0000
 80034d4:	2001d338 	.word	0x2001d338
 80034d8:	2001d234 	.word	0x2001d234
 80034dc:	2001d060 	.word	0x2001d060
 80034e0:	2001d140 	.word	0x2001d140
 80034e4:	3ff33333 	.word	0x3ff33333
 80034e8:	2001d044 	.word	0x2001d044
 80034ec:	3f19999a 	.word	0x3f19999a
 80034f0:	2001d034 	.word	0x2001d034
 80034f4:	2001d024 	.word	0x2001d024
 80034f8:	2001d014 	.word	0x2001d014
 80034fc:	2001d004 	.word	0x2001d004
 8003500:	3c23d70a 	.word	0x3c23d70a
 8003504:	2001d1a4 	.word	0x2001d1a4
 8003508:	2001d288 	.word	0x2001d288
 800350c:	2001d268 	.word	0x2001d268
 8003510:	2001d2d8 	.word	0x2001d2d8
 8003514:	2001d318 	.word	0x2001d318
 8003518:	2001d2f8 	.word	0x2001d2f8
 800351c:	2001d2a8 	.word	0x2001d2a8
 8003520:	2001d164 	.word	0x2001d164
 8003524:	200011b8 	.word	0x200011b8
 8003528:	447a0000 	.word	0x447a0000
 800352c:	3dcccccd 	.word	0x3dcccccd
 8003530:	3f7fffac 	.word	0x3f7fffac
 8003534:	2001d4c4 	.word	0x2001d4c4
 8003538:	3f8b851f 	.word	0x3f8b851f
 800353c:	2001d4a8 	.word	0x2001d4a8
		{
			tCrusher_init(&bc[i][v],&leaf);
 8003540:	4cab      	ldr	r4, [pc, #684]	; (80037f0 <audioInitSynth+0x590>)
 8003542:	eb06 0349 	add.w	r3, r6, r9, lsl #1
 8003546:	009d      	lsls	r5, r3, #2
 8003548:	4621      	mov	r1, r4
 800354a:	48aa      	ldr	r0, [pc, #680]	; (80037f4 <audioInitSynth+0x594>)
 800354c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003550:	f00b fa80 	bl	800ea54 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8003554:	4fa8      	ldr	r7, [pc, #672]	; (80037f8 <audioInitSynth+0x598>)
 8003556:	442f      	add	r7, r5
 8003558:	4621      	mov	r1, r4
 800355a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800355e:	4638      	mov	r0, r7
 8003560:	f00c ff58 	bl	8010414 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003564:	ed9f 8aa5 	vldr	s16, [pc, #660]	; 80037fc <audioInitSynth+0x59c>
 8003568:	eeb0 0a48 	vmov.f32	s0, s16
 800356c:	4638      	mov	r0, r7
 800356e:	f00c ff7f 	bl	8010470 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8003572:	4fa3      	ldr	r7, [pc, #652]	; (8003800 <audioInitSynth+0x5a0>)
 8003574:	442f      	add	r7, r5
 8003576:	4621      	mov	r1, r4
 8003578:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800357c:	4638      	mov	r0, r7
 800357e:	f00c ff49 	bl	8010414 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003582:	eeb0 0a48 	vmov.f32	s0, s16
 8003586:	4638      	mov	r0, r7
 8003588:	f00c ff72 	bl	8010470 <tHighpass_setSampleRate>
			tTiltFilter_init(&FXTilt[i][v],1000.0f, &leaf);
 800358c:	4f9d      	ldr	r7, [pc, #628]	; (8003804 <audioInitSynth+0x5a4>)
 800358e:	442f      	add	r7, r5
 8003590:	eddf 8a9d 	vldr	s17, [pc, #628]	; 8003808 <audioInitSynth+0x5a8>
 8003594:	4621      	mov	r1, r4
 8003596:	eeb0 0a68 	vmov.f32	s0, s17
 800359a:	4638      	mov	r0, r7
 800359c:	f00f f990 	bl	80128c0 <tTiltFilter_init>
			tTiltFilter_setSampleRate(&FXTilt[i][v], SAMPLE_RATE * OVERSAMPLE);
 80035a0:	eeb0 0a48 	vmov.f32	s0, s16
 80035a4:	4638      	mov	r0, r7
 80035a6:	f00f f9fd 	bl	80129a4 <tTiltFilter_setSampleRate>
			//tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
			//tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
			//tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
			//tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 80035aa:	4f98      	ldr	r7, [pc, #608]	; (800380c <audioInitSynth+0x5ac>)
 80035ac:	442f      	add	r7, r5
 80035ae:	4621      	mov	r1, r4
 80035b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035b4:	eddf 0a96 	vldr	s1, [pc, #600]	; 8003810 <audioInitSynth+0x5b0>
 80035b8:	eeb0 0a68 	vmov.f32	s0, s17
 80035bc:	4638      	mov	r0, r7
 80035be:	f00d ff97 	bl	80114f0 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80035c2:	eeb0 0a48 	vmov.f32	s0, s16
 80035c6:	4638      	mov	r0, r7
 80035c8:	f00d ff98 	bl	80114fc <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 80035cc:	4f91      	ldr	r7, [pc, #580]	; (8003814 <audioInitSynth+0x5b4>)
 80035ce:	442f      	add	r7, r5
 80035d0:	4621      	mov	r1, r4
 80035d2:	4638      	mov	r0, r7
 80035d4:	f00b fb28 	bl	800ec28 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 80035d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80035e2:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8003818 <audioInitSynth+0x5b8>
 80035e6:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80035ea:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800381c <audioInitSynth+0x5bc>
 80035ee:	4a8c      	ldr	r2, [pc, #560]	; (8003820 <audioInitSynth+0x5c0>)
 80035f0:	498c      	ldr	r1, [pc, #560]	; (8003824 <audioInitSynth+0x5c4>)
 80035f2:	4638      	mov	r0, r7
 80035f4:	f00b fbbc 	bl	800ed70 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 80035f8:	eeb0 0a48 	vmov.f32	s0, s16
 80035fc:	4638      	mov	r0, r7
 80035fe:	f00b fbdc 	bl	800edba <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 8003602:	4b89      	ldr	r3, [pc, #548]	; (8003828 <audioInitSynth+0x5c8>)
 8003604:	eb03 0805 	add.w	r8, r3, r5
 8003608:	4621      	mov	r1, r4
 800360a:	4640      	mov	r0, r8
 800360c:	f00f fce2 	bl	8012fd4 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003610:	eeb0 0a48 	vmov.f32	s0, s16
 8003614:	4640      	mov	r0, r8
 8003616:	f00f fd2f 	bl	8013078 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 800361a:	4f84      	ldr	r7, [pc, #528]	; (800382c <audioInitSynth+0x5cc>)
 800361c:	442f      	add	r7, r5
 800361e:	4621      	mov	r1, r4
 8003620:	4638      	mov	r0, r7
 8003622:	f00f fcd7 	bl	8012fd4 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003626:	eeb0 0a48 	vmov.f32	s0, s16
 800362a:	4638      	mov	r0, r7
 800362c:	f00f fd24 	bl	8013078 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8003630:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8003830 <audioInitSynth+0x5d0>
 8003634:	4640      	mov	r0, r8
 8003636:	f00f fd01 	bl	801303c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800363a:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8003834 <audioInitSynth+0x5d4>
 800363e:	4638      	mov	r0, r7
 8003640:	f00f fcfc 	bl	801303c <tCycle_setFreq>


	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003644:	4622      	mov	r2, r4
 8003646:	2100      	movs	r1, #0
 8003648:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 800364c:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8003838 <audioInitSynth+0x5d8>
 8003650:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800383c <audioInitSynth+0x5dc>
 8003654:	487a      	ldr	r0, [pc, #488]	; (8003840 <audioInitSynth+0x5e0>)
 8003656:	4428      	add	r0, r5
 8003658:	f00b fbdb 	bl	800ee12 <tFeedbackLeveler_init>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800365c:	4f79      	ldr	r7, [pc, #484]	; (8003844 <audioInitSynth+0x5e4>)
 800365e:	442f      	add	r7, r5
 8003660:	ed9f 9a79 	vldr	s18, [pc, #484]	; 8003848 <audioInitSynth+0x5e8>
 8003664:	eddf 8a79 	vldr	s17, [pc, #484]	; 800384c <audioInitSynth+0x5ec>
 8003668:	4622      	mov	r2, r4
 800366a:	eef0 0a49 	vmov.f32	s1, s18
 800366e:	eeb0 0a68 	vmov.f32	s0, s17
 8003672:	2101      	movs	r1, #1
 8003674:	4638      	mov	r0, r7
 8003676:	f00c fc17 	bl	800fea8 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800367a:	eeb0 0a48 	vmov.f32	s0, s16
 800367e:	4638      	mov	r0, r7
 8003680:	f00c fd7e 	bl	8010180 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003684:	4f72      	ldr	r7, [pc, #456]	; (8003850 <audioInitSynth+0x5f0>)
 8003686:	442f      	add	r7, r5
 8003688:	4622      	mov	r2, r4
 800368a:	eef0 0a49 	vmov.f32	s1, s18
 800368e:	eeb0 0a68 	vmov.f32	s0, s17
 8003692:	2100      	movs	r1, #0
 8003694:	4638      	mov	r0, r7
 8003696:	f00c fc07 	bl	800fea8 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800369a:	eeb0 0a48 	vmov.f32	s0, s16
 800369e:	4638      	mov	r0, r7
 80036a0:	f00c fd6e 	bl	8010180 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80036a4:	4f6b      	ldr	r7, [pc, #428]	; (8003854 <audioInitSynth+0x5f4>)
 80036a6:	442f      	add	r7, r5
 80036a8:	4622      	mov	r2, r4
 80036aa:	eef0 0a49 	vmov.f32	s1, s18
 80036ae:	eeb0 0a68 	vmov.f32	s0, s17
 80036b2:	2102      	movs	r1, #2
 80036b4:	4638      	mov	r0, r7
 80036b6:	f00c fbf7 	bl	800fea8 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80036ba:	eeb0 0a48 	vmov.f32	s0, s16
 80036be:	4638      	mov	r0, r7
 80036c0:	f00c fd5e 	bl	8010180 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80036c4:	4f64      	ldr	r7, [pc, #400]	; (8003858 <audioInitSynth+0x5f8>)
 80036c6:	442f      	add	r7, r5
 80036c8:	4621      	mov	r1, r4
 80036ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80036ce:	eeb0 0a68 	vmov.f32	s0, s17
 80036d2:	4638      	mov	r0, r7
 80036d4:	f00e fb02 	bl	8011cdc <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 80036d8:	eeb0 0a48 	vmov.f32	s0, s16
 80036dc:	4638      	mov	r0, r7
 80036de:	f00e fdcf 	bl	8012280 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 80036e2:	4f5e      	ldr	r7, [pc, #376]	; (800385c <audioInitSynth+0x5fc>)
 80036e4:	442f      	add	r7, r5
 80036e6:	4621      	mov	r1, r4
 80036e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80036ec:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8003860 <audioInitSynth+0x600>
 80036f0:	eeb0 0a68 	vmov.f32	s0, s17
 80036f4:	4638      	mov	r0, r7
 80036f6:	f00d fefb 	bl	80114f0 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 80036fa:	eeb0 0a48 	vmov.f32	s0, s16
 80036fe:	4638      	mov	r0, r7
 8003700:	f00d fefc 	bl	80114fc <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003704:	4f57      	ldr	r7, [pc, #348]	; (8003864 <audioInitSynth+0x604>)
 8003706:	442f      	add	r7, r5
 8003708:	ed9f 9a57 	vldr	s18, [pc, #348]	; 8003868 <audioInitSynth+0x608>
 800370c:	4621      	mov	r1, r4
 800370e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003712:	eef0 0a49 	vmov.f32	s1, s18
 8003716:	eeb0 0a68 	vmov.f32	s0, s17
 800371a:	4638      	mov	r0, r7
 800371c:	f00d fa8e 	bl	8010c3c <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003720:	eeb0 0a48 	vmov.f32	s0, s16
 8003724:	4638      	mov	r0, r7
 8003726:	f00d fa8f 	bl	8010c48 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800372a:	4f50      	ldr	r7, [pc, #320]	; (800386c <audioInitSynth+0x60c>)
 800372c:	442f      	add	r7, r5
 800372e:	4621      	mov	r1, r4
 8003730:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003734:	eef0 0a49 	vmov.f32	s1, s18
 8003738:	eeb0 0a68 	vmov.f32	s0, s17
 800373c:	4638      	mov	r0, r7
 800373e:	f00d fc97 	bl	8011070 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003742:	eeb0 0a48 	vmov.f32	s0, s16
 8003746:	4638      	mov	r0, r7
 8003748:	f00d fc98 	bl	801107c <tVZFilterHS_setSampleRate>
			tVZFilterBR_init(&FXVZfilterBR[i][v], 2000.f, 1.0f, &leaf);
 800374c:	4f48      	ldr	r7, [pc, #288]	; (8003870 <audioInitSynth+0x610>)
 800374e:	442f      	add	r7, r5
 8003750:	4621      	mov	r1, r4
 8003752:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003756:	eeb0 0a68 	vmov.f32	s0, s17
 800375a:	4638      	mov	r0, r7
 800375c:	f00e f96e 	bl	8011a3c <tVZFilterBR_init>
			tVZFilterBR_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003760:	eeb0 0a48 	vmov.f32	s0, s16
 8003764:	4638      	mov	r0, r7
 8003766:	f00e f96f 	bl	8011a48 <tVZFilterBR_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800376a:	4b42      	ldr	r3, [pc, #264]	; (8003874 <audioInitSynth+0x614>)
 800376c:	441d      	add	r5, r3
 800376e:	4621      	mov	r1, r4
 8003770:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003774:	eeb0 0a68 	vmov.f32	s0, s17
 8003778:	4628      	mov	r0, r5
 800377a:	f00e fe2d 	bl	80123d8 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 800377e:	eeb0 0a48 	vmov.f32	s0, s16
 8003782:	4628      	mov	r0, r5
 8003784:	f00f f83a 	bl	80127fc <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 8003788:	f109 0901 	add.w	r9, r9, #1
 800378c:	f1b9 0f03 	cmp.w	r9, #3
 8003790:	f77f aed6 	ble.w	8003540 <audioInitSynth+0x2e0>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003794:	2400      	movs	r4, #0
 8003796:	e00c      	b.n	80037b2 <audioInitSynth+0x552>
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 8003798:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 800379c:	4914      	ldr	r1, [pc, #80]	; (80037f0 <audioInitSynth+0x590>)
 800379e:	eddf 0a26 	vldr	s1, [pc, #152]	; 8003838 <audioInitSynth+0x5d8>
 80037a2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003878 <audioInitSynth+0x618>
 80037a6:	4b35      	ldr	r3, [pc, #212]	; (800387c <audioInitSynth+0x61c>)
 80037a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80037ac:	f00b ff28 	bl	800f600 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80037b0:	3401      	adds	r4, #1
 80037b2:	2c1f      	cmp	r4, #31
 80037b4:	ddf0      	ble.n	8003798 <audioInitSynth+0x538>
		}

		//arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
		//arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);

		tSVF_LP_init(&finalLowpass[v], 19000.f, 0.2f, &leaf);
 80037b6:	490e      	ldr	r1, [pc, #56]	; (80037f0 <audioInitSynth+0x590>)
 80037b8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003830 <audioInitSynth+0x5d0>
 80037bc:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8003880 <audioInitSynth+0x620>
 80037c0:	4830      	ldr	r0, [pc, #192]	; (8003884 <audioInitSynth+0x624>)
 80037c2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80037c6:	f00c fd71 	bl	80102ac <tSVF_LP_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80037ca:	3601      	adds	r6, #1
 80037cc:	2e01      	cmp	r6, #1
 80037ce:	dc09      	bgt.n	80037e4 <audioInitSynth+0x584>
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <audioInitSynth+0x590>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	2102      	movs	r1, #2
 80037d6:	482c      	ldr	r0, [pc, #176]	; (8003888 <audioInitSynth+0x628>)
 80037d8:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80037dc:	f00b f87a 	bl	800e8d4 <tOversampler_init>
		for(int i = 0; i < NUM_OSC; i++)
 80037e0:	2700      	movs	r7, #0
 80037e2:	e584      	b.n	80032ee <audioInitSynth+0x8e>
	}

}
 80037e4:	b003      	add	sp, #12
 80037e6:	ecbd 8b04 	vpop	{d8-d9}
 80037ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ee:	bf00      	nop
 80037f0:	20005294 	.word	0x20005294
 80037f4:	2001d070 	.word	0x2001d070
 80037f8:	2001d0d0 	.word	0x2001d0d0
 80037fc:	47bb8000 	.word	0x47bb8000
 8003800:	2001d0f0 	.word	0x2001d0f0
 8003804:	2001cee4 	.word	0x2001cee4
 8003808:	447a0000 	.word	0x447a0000
 800380c:	2001d090 	.word	0x2001d090
 8003810:	3ff33333 	.word	0x3ff33333
 8003814:	2001d0b0 	.word	0x2001d0b0
 8003818:	c2b40000 	.word	0xc2b40000
 800381c:	3727c5ac 	.word	0x3727c5ac
 8003820:	30002000 	.word	0x30002000
 8003824:	30012000 	.word	0x30012000
 8003828:	2001d464 	.word	0x2001d464
 800382c:	2001d484 	.word	0x2001d484
 8003830:	3e4ccccd 	.word	0x3e4ccccd
 8003834:	3e638e39 	.word	0x3e638e39
 8003838:	3c23d70a 	.word	0x3c23d70a
 800383c:	3f7d70a4 	.word	0x3f7d70a4
 8003840:	2001d184 	.word	0x2001d184
 8003844:	2001cfe4 	.word	0x2001cfe4
 8003848:	3f333333 	.word	0x3f333333
 800384c:	44fa0000 	.word	0x44fa0000
 8003850:	2001cfc4 	.word	0x2001cfc4
 8003854:	2001cf84 	.word	0x2001cf84
 8003858:	2001cfa4 	.word	0x2001cfa4
 800385c:	2001cf64 	.word	0x2001cf64
 8003860:	3fcccccd 	.word	0x3fcccccd
 8003864:	2001cf44 	.word	0x2001cf44
 8003868:	3f19999a 	.word	0x3f19999a
 800386c:	2001cf24 	.word	0x2001cf24
 8003870:	2001cf04 	.word	0x2001cf04
 8003874:	2001cec4 	.word	0x2001cec4
 8003878:	00000000 	.word	0x00000000
 800387c:	2001d348 	.word	0x2001d348
 8003880:	46947000 	.word	0x46947000
 8003884:	2001d1cc 	.word	0x2001d1cc
 8003888:	2001d4cc 	.word	0x2001d4cc

0800388c <audioFreeSynth>:

void  audioFreeSynth()
{
 800388c:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800388e:	2400      	movs	r4, #0
 8003890:	e00e      	b.n	80038b0 <audioFreeSynth+0x24>
	{
		//for (int i = 0; i < NUM_EFFECT; i++)
		{
			tTapeDelay_free(&tapeDelay[v]);
 8003892:	00a5      	lsls	r5, r4, #2
 8003894:	4808      	ldr	r0, [pc, #32]	; (80038b8 <audioFreeSynth+0x2c>)
 8003896:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800389a:	f00a fe99 	bl	800e5d0 <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
 800389e:	4807      	ldr	r0, [pc, #28]	; (80038bc <audioFreeSynth+0x30>)
 80038a0:	4428      	add	r0, r5
 80038a2:	f00a fbd1 	bl	800e048 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
 80038a6:	4806      	ldr	r0, [pc, #24]	; (80038c0 <audioFreeSynth+0x34>)
 80038a8:	4428      	add	r0, r5
 80038aa:	f00a fbcd 	bl	800e048 <tLinearDelay_free>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80038ae:	3401      	adds	r4, #1
 80038b0:	2c01      	cmp	r4, #1
 80038b2:	ddee      	ble.n	8003892 <audioFreeSynth+0x6>
		}
	}
}
 80038b4:	bd38      	pop	{r3, r4, r5, pc}
 80038b6:	bf00      	nop
 80038b8:	2001d7e4 	.word	0x2001d7e4
 80038bc:	2001d118 	.word	0x2001d118
 80038c0:	2001d110 	.word	0x2001d110

080038c4 <audioSwitchToSynth>:

void  audioSwitchToSynth()
{
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != SynthLoaded)
 80038ca:	4b28      	ldr	r3, [pc, #160]	; (800396c <audioSwitchToSynth+0xa8>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d033      	beq.n	800393a <audioSwitchToSynth+0x76>
	{
		if (whichStringModelLoaded == String1Loaded)
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d005      	beq.n	80038e2 <audioSwitchToSynth+0x1e>
		{
			audioFreeString1();
		}
		if (whichStringModelLoaded == String2Loaded)
 80038d6:	4b25      	ldr	r3, [pc, #148]	; (800396c <audioSwitchToSynth+0xa8>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d004      	beq.n	80038e8 <audioSwitchToSynth+0x24>
{
 80038de:	2400      	movs	r4, #0
 80038e0:	e026      	b.n	8003930 <audioSwitchToSynth+0x6c>
			audioFreeString1();
 80038e2:	f016 fc79 	bl	801a1d8 <__audioFreeString1_veneer>
 80038e6:	e7f6      	b.n	80038d6 <audioSwitchToSynth+0x12>
		{
			audioFreeString2();
 80038e8:	f016 fc3e 	bl	801a168 <__audioFreeString2_veneer>
 80038ec:	e7f7      	b.n	80038de <audioSwitchToSynth+0x1a>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
		{
			//for (int i = 0; i < NUM_EFFECT; i++)
			{

				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
 80038ee:	4d20      	ldr	r5, [pc, #128]	; (8003970 <audioSwitchToSynth+0xac>)
 80038f0:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8003974 <audioSwitchToSynth+0xb0>
 80038f4:	00a6      	lsls	r6, r4, #2
 80038f6:	462a      	mov	r2, r5
 80038f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003900:	481d      	ldr	r0, [pc, #116]	; (8003978 <audioSwitchToSynth+0xb4>)
 8003902:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003906:	f00a fc7d 	bl	800e204 <tLinearDelay_initToPool>
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
 800390a:	462a      	mov	r2, r5
 800390c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003910:	eeb0 0a48 	vmov.f32	s0, s16
 8003914:	4819      	ldr	r0, [pc, #100]	; (800397c <audioSwitchToSynth+0xb8>)
 8003916:	4430      	add	r0, r6
 8003918:	f00a fc74 	bl	800e204 <tLinearDelay_initToPool>
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
 800391c:	462a      	mov	r2, r5
 800391e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003922:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003980 <audioSwitchToSynth+0xbc>
 8003926:	4817      	ldr	r0, [pc, #92]	; (8003984 <audioSwitchToSynth+0xc0>)
 8003928:	4430      	add	r0, r6
 800392a:	f00a ff1c 	bl	800e766 <tTapeDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800392e:	3401      	adds	r4, #1
 8003930:	2c01      	cmp	r4, #1
 8003932:	dddc      	ble.n	80038ee <audioSwitchToSynth+0x2a>
			}
		}
		whichStringModelLoaded = SynthLoaded;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <audioSwitchToSynth+0xa8>)
 8003936:	2204      	movs	r2, #4
 8003938:	701a      	strb	r2, [r3, #0]
{
 800393a:	2400      	movs	r4, #0
 800393c:	e00a      	b.n	8003954 <audioSwitchToSynth+0x90>
	}
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 800393e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003988 <audioSwitchToSynth+0xc4>
 8003942:	4812      	ldr	r0, [pc, #72]	; (800398c <audioSwitchToSynth+0xc8>)
 8003944:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003948:	f00b fe66 	bl	800f618 <tExpSmooth_setFactor>
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <audioSwitchToSynth+0xcc>)
 800394e:	2201      	movs	r2, #1
 8003950:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 20; i++)
 8003952:	4414      	add	r4, r2
 8003954:	2c13      	cmp	r4, #19
 8003956:	ddf2      	ble.n	800393e <audioSwitchToSynth+0x7a>
	}
	antiClickFade = 0.0f;
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <audioSwitchToSynth+0xd0>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
	audioFrameFunction = audioFrameSynth;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <audioSwitchToSynth+0xd4>)
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <audioSwitchToSynth+0xd8>)
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	ecbd 8b02 	vpop	{d8}
 8003968:	bd70      	pop	{r4, r5, r6, pc}
 800396a:	bf00      	nop
 800396c:	20014269 	.word	0x20014269
 8003970:	200052e8 	.word	0x200052e8
 8003974:	457a0000 	.word	0x457a0000
 8003978:	2001d110 	.word	0x2001d110
 800397c:	2001d118 	.word	0x2001d118
 8003980:	466a6000 	.word	0x466a6000
 8003984:	2001d7e4 	.word	0x2001d7e4
 8003988:	3a83126f 	.word	0x3a83126f
 800398c:	20005240 	.word	0x20005240
 8003990:	200051dc 	.word	0x200051dc
 8003994:	2001d05c 	.word	0x2001d05c
 8003998:	20001190 	.word	0x20001190
 800399c:	00008ce1 	.word	0x00008ce1

080039a0 <changeOversampling>:
}



void changeOversampling(uint32_t newOS)
{
 80039a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a4:	ed2d 8b02 	vpush	{d8}
 80039a8:	4681      	mov	r9, r0
	if (newOS != prevOversample)
 80039aa:	4b77      	ldr	r3, [pc, #476]	; (8003b88 <changeOversampling+0x1e8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4283      	cmp	r3, r0
 80039b0:	f000 80e2 	beq.w	8003b78 <changeOversampling+0x1d8>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	ee08 3a90 	vmov	s17, r3
 80039ba:	eef8 8a68 	vcvt.f32.u32	s17, s17
 80039be:	eddf 7a73 	vldr	s15, [pc, #460]	; 8003b8c <changeOversampling+0x1ec>
 80039c2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80039c6:	eefc 8ae8 	vcvt.u32.f32	s17, s17
		for (int v = 0; v < numStringsThisBoard; v++)
 80039ca:	f04f 0800 	mov.w	r8, #0
 80039ce:	e0cd      	b.n	8003b6c <changeOversampling+0x1cc>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039d0:	eeb8 8a68 	vcvt.f32.u32	s16, s17
 80039d4:	eb08 0546 	add.w	r5, r8, r6, lsl #1
 80039d8:	00ac      	lsls	r4, r5, #2
 80039da:	eeb0 0a48 	vmov.f32	s0, s16
 80039de:	486c      	ldr	r0, [pc, #432]	; (8003b90 <changeOversampling+0x1f0>)
 80039e0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80039e4:	f00c fd44 	bl	8010470 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 80039e8:	eeb0 0a48 	vmov.f32	s0, s16
 80039ec:	4869      	ldr	r0, [pc, #420]	; (8003b94 <changeOversampling+0x1f4>)
 80039ee:	4420      	add	r0, r4
 80039f0:	f00c fd3e 	bl	8010470 <tHighpass_setSampleRate>
				tTiltFilter_setSampleRate(&FXTilt[i][v], osMult);
 80039f4:	eeb0 0a48 	vmov.f32	s0, s16
 80039f8:	4867      	ldr	r0, [pc, #412]	; (8003b98 <changeOversampling+0x1f8>)
 80039fa:	4420      	add	r0, r4
 80039fc:	f00e ffd2 	bl	80129a4 <tTiltFilter_setSampleRate>
				//tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
				//tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
				//tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
				//tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 8003a00:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8003bb0 <changeOversampling+0x210>
 8003a04:	eb0a 0704 	add.w	r7, sl, r4
 8003a08:	eeb0 0a48 	vmov.f32	s0, s16
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f00d fd75 	bl	80114fc <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003a12:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003a16:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003a1a:	4638      	mov	r0, r7
 8003a1c:	f00d fe5c 	bl	80116d8 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 8003a20:	eeb0 0a48 	vmov.f32	s0, s16
 8003a24:	485d      	ldr	r0, [pc, #372]	; (8003b9c <changeOversampling+0x1fc>)
 8003a26:	4420      	add	r0, r4
 8003a28:	f00b f9c7 	bl	800edba <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 8003a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a30:	485b      	ldr	r0, [pc, #364]	; (8003ba0 <changeOversampling+0x200>)
 8003a32:	4420      	add	r0, r4
 8003a34:	f00f fb20 	bl	8013078 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003a38:	eeb0 0a48 	vmov.f32	s0, s16
 8003a3c:	4859      	ldr	r0, [pc, #356]	; (8003ba4 <changeOversampling+0x204>)
 8003a3e:	4420      	add	r0, r4
 8003a40:	f00f fb1a 	bl	8013078 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 8003a44:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8003bb4 <changeOversampling+0x214>
 8003a48:	eb0a 0704 	add.w	r7, sl, r4
 8003a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a50:	4638      	mov	r0, r7
 8003a52:	f00c fb95 	bl	8010180 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003a56:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003a5a:	ed93 0a04 	vldr	s0, [r3, #16]
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f00c fb24 	bl	80100ac <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 8003a64:	f8df a150 	ldr.w	sl, [pc, #336]	; 8003bb8 <changeOversampling+0x218>
 8003a68:	eb0a 0704 	add.w	r7, sl, r4
 8003a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a70:	4638      	mov	r0, r7
 8003a72:	f00c fb85 	bl	8010180 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003a76:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003a7a:	ed93 0a04 	vldr	s0, [r3, #16]
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f00c fb14 	bl	80100ac <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 8003a84:	f8df a134 	ldr.w	sl, [pc, #308]	; 8003bbc <changeOversampling+0x21c>
 8003a88:	eb0a 0704 	add.w	r7, sl, r4
 8003a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a90:	4638      	mov	r0, r7
 8003a92:	f00c fb75 	bl	8010180 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003a96:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003a9a:	ed93 0a04 	vldr	s0, [r3, #16]
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f00c fb04 	bl	80100ac <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 8003aa4:	f8df a118 	ldr.w	sl, [pc, #280]	; 8003bc0 <changeOversampling+0x220>
 8003aa8:	eb0a 0704 	add.w	r7, sl, r4
 8003aac:	eeb0 0a48 	vmov.f32	s0, s16
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f00e fbe5 	bl	8012280 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003ab6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003aba:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f00e fbde 	bl	8012280 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 8003ac4:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8003bc4 <changeOversampling+0x224>
 8003ac8:	eb0a 0704 	add.w	r7, sl, r4
 8003acc:	eeb0 0a48 	vmov.f32	s0, s16
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f00d fd13 	bl	80114fc <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 8003ad6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003ada:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003ade:	4638      	mov	r0, r7
 8003ae0:	f00d fdfa 	bl	80116d8 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 8003ae4:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8003bc8 <changeOversampling+0x228>
 8003ae8:	eb0a 0704 	add.w	r7, sl, r4
 8003aec:	eeb0 0a48 	vmov.f32	s0, s16
 8003af0:	4638      	mov	r0, r7
 8003af2:	f00d f8a9 	bl	8010c48 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 8003af6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003afa:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003afe:	4638      	mov	r0, r7
 8003b00:	f00d f8f8 	bl	8010cf4 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 8003b04:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003bcc <changeOversampling+0x22c>
 8003b08:	eb0a 0704 	add.w	r7, sl, r4
 8003b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8003b10:	4638      	mov	r0, r7
 8003b12:	f00d fab3 	bl	801107c <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8003b16:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003b1a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f00d fb02 	bl	8011128 <tVZFilterHS_setFreqFast>
				tVZFilterBR_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8003b24:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8003bd0 <changeOversampling+0x230>
 8003b28:	eb0a 0704 	add.w	r7, sl, r4
 8003b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8003b30:	4638      	mov	r0, r7
 8003b32:	f00d ff89 	bl	8011a48 <tVZFilterBR_setSampleRate>
				tVZFilterBR_setFreqFast(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->cutoffMIDI);
 8003b36:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003b3a:	ed93 0a07 	vldr	s0, [r3, #28]
 8003b3e:	4638      	mov	r0, r7
 8003b40:	f00d ffd0 	bl	8011ae4 <tVZFilterBR_setFreqFast>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 8003b44:	4f18      	ldr	r7, [pc, #96]	; (8003ba8 <changeOversampling+0x208>)
 8003b46:	443c      	add	r4, r7
 8003b48:	eeb0 0a48 	vmov.f32	s0, s16
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f00e fe55 	bl	80127fc <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003b52:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8003b56:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f00e fdf4 	bl	8012748 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003b60:	3601      	adds	r6, #1
 8003b62:	2e03      	cmp	r6, #3
 8003b64:	f77f af34 	ble.w	80039d0 <changeOversampling+0x30>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003b68:	f108 0801 	add.w	r8, r8, #1
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <changeOversampling+0x20c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4543      	cmp	r3, r8
 8003b72:	dd01      	ble.n	8003b78 <changeOversampling+0x1d8>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003b74:	2600      	movs	r6, #0
 8003b76:	e7f4      	b.n	8003b62 <changeOversampling+0x1c2>
			}
		}
	}
	prevOversample = newOS;
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <changeOversampling+0x1e8>)
 8003b7a:	f8c3 9000 	str.w	r9, [r3]
}
 8003b7e:	ecbd 8b02 	vpop	{d8}
 8003b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b86:	bf00      	nop
 8003b88:	2001d5e8 	.word	0x2001d5e8
 8003b8c:	473b8000 	.word	0x473b8000
 8003b90:	2001d0d0 	.word	0x2001d0d0
 8003b94:	2001d0f0 	.word	0x2001d0f0
 8003b98:	2001cee4 	.word	0x2001cee4
 8003b9c:	2001d0b0 	.word	0x2001d0b0
 8003ba0:	2001d464 	.word	0x2001d464
 8003ba4:	2001d484 	.word	0x2001d484
 8003ba8:	2001cec4 	.word	0x2001cec4
 8003bac:	20000694 	.word	0x20000694
 8003bb0:	2001d090 	.word	0x2001d090
 8003bb4:	2001cfe4 	.word	0x2001cfe4
 8003bb8:	2001cfc4 	.word	0x2001cfc4
 8003bbc:	2001cf84 	.word	0x2001cf84
 8003bc0:	2001cfa4 	.word	0x2001cfa4
 8003bc4:	2001cf64 	.word	0x2001cf64
 8003bc8:	2001cf44 	.word	0x2001cf44
 8003bcc:	2001cf24 	.word	0x2001cf24
 8003bd0:	2001cf04 	.word	0x2001cf04

08003bd4 <delayTick>:
}



float delayTick(float sample, int v, int string)
{
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	ed2d 8b06 	vpush	{d8-d10}
 8003bda:	460e      	mov	r6, r1
    sample *= param5[v][string];
 8003bdc:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003be0:	0087      	lsls	r7, r0, #2
 8003be2:	4b47      	ldr	r3, [pc, #284]	; (8003d00 <delayTick+0x12c>)
 8003be4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee27 0a80 	vmul.f32	s0, s15, s0

    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003bf0:	4d44      	ldr	r5, [pc, #272]	; (8003d04 <delayTick+0x130>)
 8003bf2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8003bf6:	edd5 7a00 	vldr	s15, [r5]
 8003bfa:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <delayTick+0x134>)
 8003bfc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003c00:	ed93 7a00 	vldr	s14, [r3]
 8003c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c08:	ee77 7a80 	vadd.f32	s15, s15, s0
}

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8003c0c:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8003d0c <delayTick+0x138>
 8003c10:	ee27 0a88 	vmul.f32	s0, s15, s16
 8003c14:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003c18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003c1c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003c20:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8003d10 <delayTick+0x13c>
 8003c24:	ee27 7aa8 	vmul.f32	s14, s15, s17
 8003c28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c38:	ee30 0a27 	vadd.f32	s0, s0, s15
    Lfloat den = InvSqrt(1.0f + a * a);
 8003c3c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003c40:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8003c44:	ee77 7a89 	vadd.f32	s15, s15, s18
    Lfloat xhalf = 0.5f*x;
 8003c48:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8003c4c:	ee27 7aa9 	vmul.f32	s14, s15, s19
    int i = *(int*)&x; // get bits for floating value
 8003c50:	ee17 3a90 	vmov	r3, s15
    i = 0x5f3759df - (i>>1); // gives initial guess y0
 8003c54:	4c2f      	ldr	r4, [pc, #188]	; (8003d14 <delayTick+0x140>)
    x = *(Lfloat*)&i; // convert bits back to float
 8003c56:	eba4 0363 	sub.w	r3, r4, r3, asr #1
 8003c5a:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 8003c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c66:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 8003c6a:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8003c6e:	ee67 7a87 	vmul.f32	s15, s15, s14

    sample = fast_tanh5(sample);

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 8003c72:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003c76:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <delayTick+0x144>)
 8003c78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c7c:	f00b f8e6 	bl	800ee4c <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
 8003c80:	4826      	ldr	r0, [pc, #152]	; (8003d1c <delayTick+0x148>)
 8003c82:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003c86:	f00a fcaf 	bl	800e5e8 <tTapeDelay_tick>
 8003c8a:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003c8e:	4824      	ldr	r0, [pc, #144]	; (8003d20 <delayTick+0x14c>)
 8003c90:	4438      	add	r0, r7
 8003c92:	f00c f914 	bl	800febe <tSVF_tick>
 8003c96:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003c9a:	4822      	ldr	r0, [pc, #136]	; (8003d24 <delayTick+0x150>)
 8003c9c:	4438      	add	r0, r7
 8003c9e:	f00c f90e 	bl	800febe <tSVF_tick>
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8003ca2:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003ca6:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003caa:	ee20 8a08 	vmul.f32	s16, s0, s16
 8003cae:	ee30 8a08 	vadd.f32	s16, s0, s16
 8003cb2:	ee60 8a28 	vmul.f32	s17, s0, s17
 8003cb6:	ee60 8a28 	vmul.f32	s17, s0, s17
 8003cba:	ee60 8a28 	vmul.f32	s17, s0, s17
 8003cbe:	ee60 8a28 	vmul.f32	s17, s0, s17
 8003cc2:	ee20 0a28 	vmul.f32	s0, s0, s17
 8003cc6:	ee38 0a00 	vadd.f32	s0, s16, s0
    Lfloat den = InvSqrt(1.0f + a * a);
 8003cca:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003cce:	ee77 7a89 	vadd.f32	s15, s15, s18
    Lfloat xhalf = 0.5f*x;
 8003cd2:	ee67 9aa9 	vmul.f32	s19, s15, s19
    int i = *(int*)&x; // get bits for floating value
 8003cd6:	ee17 3a90 	vmov	r3, s15
    x = *(Lfloat*)&i; // convert bits back to float
 8003cda:	eba4 0363 	sub.w	r3, r4, r3, asr #1
 8003cde:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 8003ce2:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8003ce6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 8003cea:	ee3a aa69 	vsub.f32	s20, s20, s19
 8003cee:	ee67 7a8a 	vmul.f32	s15, s15, s20
    return a * den;
 8003cf2:	ee20 0a27 	vmul.f32	s0, s0, s15
    sample = fast_tanh5(sample);
    delayFB[v][string] = sample;
 8003cf6:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 8003cfa:	ecbd 8b06 	vpop	{d8-d10}
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d00:	2001d590 	.word	0x2001d590
 8003d04:	2001d120 	.word	0x2001d120
 8003d08:	2001d530 	.word	0x2001d530
 8003d0c:	3e28d927 	.word	0x3e28d927
 8003d10:	3c217586 	.word	0x3c217586
 8003d14:	5f3759df 	.word	0x5f3759df
 8003d18:	2001d184 	.word	0x2001d184
 8003d1c:	2001d7e4 	.word	0x2001d7e4
 8003d20:	2001cfe4 	.word	0x2001cfe4
 8003d24:	2001cfc4 	.word	0x2001cfc4

08003d28 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003d28:	4a27      	ldr	r2, [pc, #156]	; (8003dc8 <SystemInit+0xa0>)
 8003d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <SystemInit+0xa4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d806      	bhi.n	8003d50 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d42:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <SystemInit+0xa4>)
 8003d44:	6813      	ldr	r3, [r2, #0]
 8003d46:	f023 030f 	bic.w	r3, r3, #15
 8003d4a:	f043 0307 	orr.w	r3, r3, #7
 8003d4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <SystemInit+0xa8>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <SystemInit+0xac>)
 8003d62:	400a      	ands	r2, r1
 8003d64:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d66:	4b19      	ldr	r3, [pc, #100]	; (8003dcc <SystemInit+0xa4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f013 0f08 	tst.w	r3, #8
 8003d6e:	d006      	beq.n	8003d7e <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d70:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <SystemInit+0xa4>)
 8003d72:	6813      	ldr	r3, [r2, #0]
 8003d74:	f023 030f 	bic.w	r3, r3, #15
 8003d78:	f043 0307 	orr.w	r3, r3, #7
 8003d7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <SystemInit+0xa8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d88:	4913      	ldr	r1, [pc, #76]	; (8003dd8 <SystemInit+0xb0>)
 8003d8a:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d8c:	4913      	ldr	r1, [pc, #76]	; (8003ddc <SystemInit+0xb4>)
 8003d8e:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d90:	4913      	ldr	r1, [pc, #76]	; (8003de0 <SystemInit+0xb8>)
 8003d92:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d96:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d98:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d9a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d9e:	6819      	ldr	r1, [r3, #0]
 8003da0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003da4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <SystemInit+0xbc>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0e      	ldr	r3, [pc, #56]	; (8003de8 <SystemInit+0xc0>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db4:	d203      	bcs.n	8003dbe <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <SystemInit+0xc4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <SystemInit+0xc8>)
 8003dc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003dc4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00
 8003dcc:	52002000 	.word	0x52002000
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003dd8:	02020200 	.word	0x02020200
 8003ddc:	01ff0000 	.word	0x01ff0000
 8003de0:	01010280 	.word	0x01010280
 8003de4:	5c001000 	.word	0x5c001000
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	51008000 	.word	0x51008000
 8003df0:	52004000 	.word	0x52004000

08003df4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <HAL_InitTick+0x44>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b90b      	cbnz	r3, 8003dfe <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003dfa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003dfc:	4770      	bx	lr
{
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <HAL_InitTick+0x48>)
 8003e0c:	6810      	ldr	r0, [r2, #0]
 8003e0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003e12:	f000 f8d1 	bl	8003fb8 <HAL_SYSTICK_Config>
 8003e16:	b968      	cbnz	r0, 8003e34 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e18:	2c0f      	cmp	r4, #15
 8003e1a:	d901      	bls.n	8003e20 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	e00a      	b.n	8003e36 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e20:	2200      	movs	r2, #0
 8003e22:	4621      	mov	r1, r4
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e28:	f000 f882 	bl	8003f30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_InitTick+0x4c>)
 8003e2e:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003e30:	2000      	movs	r0, #0
 8003e32:	e000      	b.n	8003e36 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
}
 8003e36:	bd10      	pop	{r4, pc}
 8003e38:	2000093c 	.word	0x2000093c
 8003e3c:	200008f4 	.word	0x200008f4
 8003e40:	20000940 	.word	0x20000940

08003e44 <HAL_Init>:
{
 8003e44:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e46:	2003      	movs	r0, #3
 8003e48:	f000 f860 	bl	8003f0c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e4c:	f002 ffea 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 8003e50:	490f      	ldr	r1, [pc, #60]	; (8003e90 <HAL_Init+0x4c>)
 8003e52:	698b      	ldr	r3, [r1, #24]
 8003e54:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003e58:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_Init+0x50>)
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e62:	698b      	ldr	r3, [r1, #24]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	fa20 f303 	lsr.w	r3, r0, r3
 8003e72:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <HAL_Init+0x54>)
 8003e74:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <HAL_Init+0x58>)
 8003e78:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7ff ffba 	bl	8003df4 <HAL_InitTick>
 8003e80:	b110      	cbz	r0, 8003e88 <HAL_Init+0x44>
    return HAL_ERROR;
 8003e82:	2401      	movs	r4, #1
}
 8003e84:	4620      	mov	r0, r4
 8003e86:	bd10      	pop	{r4, pc}
 8003e88:	4604      	mov	r4, r0
  HAL_MspInit();
 8003e8a:	f7ff f97b 	bl	8003184 <HAL_MspInit>
  return HAL_OK;
 8003e8e:	e7f9      	b.n	8003e84 <HAL_Init+0x40>
 8003e90:	58024400 	.word	0x58024400
 8003e94:	0801accc 	.word	0x0801accc
 8003e98:	200008f8 	.word	0x200008f8
 8003e9c:	200008f4 	.word	0x200008f4

08003ea0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_IncTick+0x10>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_IncTick+0x14>)
 8003ea6:	6811      	ldr	r1, [r2, #0]
 8003ea8:	440b      	add	r3, r1
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000093c 	.word	0x2000093c
 8003eb4:	2001d864 	.word	0x2001d864

08003eb8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <HAL_GetTick+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2001d864 	.word	0x2001d864

08003ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7ff fff6 	bl	8003eb8 <HAL_GetTick>
 8003ecc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ece:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ed2:	d002      	beq.n	8003eda <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_Delay+0x24>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eda:	f7ff ffed 	bl	8003eb8 <HAL_GetTick>
 8003ede:	1b40      	subs	r0, r0, r5
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d3fa      	bcc.n	8003eda <HAL_Delay+0x16>
  {
  }
}
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2000093c 	.word	0x2000093c

08003eec <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <HAL_GetREVID+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
}
 8003ef0:	0c00      	lsrs	r0, r0, #16
 8003ef2:	4770      	bx	lr
 8003ef4:	5c001000 	.word	0x5c001000

08003ef8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8003efa:	6813      	ldr	r3, [r2, #0]
 8003efc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003f00:	4303      	orrs	r3, r0
 8003f02:	6013      	str	r3, [r2, #0]
}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	52004000 	.word	0x52004000

08003f0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003f0e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	0200      	lsls	r0, r0, #8
 8003f1a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003f20:	4a02      	ldr	r2, [pc, #8]	; (8003f2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003f22:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003f24:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003f26:	4770      	bx	lr
 8003f28:	e000ed00 	.word	0xe000ed00
 8003f2c:	05fa0000 	.word	0x05fa0000

08003f30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f30:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <HAL_NVIC_SetPriority+0x60>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3a:	f1c3 0c07 	rsb	ip, r3, #7
 8003f3e:	f1bc 0f04 	cmp.w	ip, #4
 8003f42:	bf28      	it	cs
 8003f44:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f48:	f103 0e04 	add.w	lr, r3, #4
 8003f4c:	f1be 0f06 	cmp.w	lr, #6
 8003f50:	d914      	bls.n	8003f7c <HAL_NVIC_SetPriority+0x4c>
 8003f52:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003f58:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003f5c:	ea21 010c 	bic.w	r1, r1, ip
 8003f60:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f62:	fa0e fe03 	lsl.w	lr, lr, r3
 8003f66:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	db07      	blt.n	8003f80 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_NVIC_SetPriority+0x64>)
 8003f76:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003f78:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e7e9      	b.n	8003f54 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f80:	f000 000f 	and.w	r0, r0, #15
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_NVIC_SetPriority+0x68>)
 8003f8a:	541a      	strb	r2, [r3, r0]
 8003f8c:	e7f4      	b.n	8003f78 <HAL_NVIC_SetPriority+0x48>
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00
 8003f94:	e000e400 	.word	0xe000e400
 8003f98:	e000ed14 	.word	0xe000ed14

08003f9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	db07      	blt.n	8003fb0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa0:	f000 021f 	and.w	r2, r0, #31
 8003fa4:	0940      	lsrs	r0, r0, #5
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	4093      	lsls	r3, r2
 8003faa:	4a02      	ldr	r2, [pc, #8]	; (8003fb4 <HAL_NVIC_EnableIRQ+0x18>)
 8003fac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb8:	3801      	subs	r0, #1
 8003fba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003fbe:	d20b      	bcs.n	8003fd8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fc4:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <HAL_SYSTICK_Config+0x24>)
 8003fc8:	21f0      	movs	r1, #240	; 0xf0
 8003fca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fce:	2000      	movs	r0, #0
 8003fd0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003fd8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003fda:	4770      	bx	lr
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003fe0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_MPU_Disable+0x18>)
 8003fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fe8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003ffc:	f040 0001 	orr.w	r0, r0, #1
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_MPU_Enable+0x1c>)
 8004002:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004008:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800400e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004012:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800401c:	7842      	ldrb	r2, [r0, #1]
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <HAL_MPU_ConfigRegion+0x5c>)
 8004020:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8004024:	7803      	ldrb	r3, [r0, #0]
 8004026:	b1fb      	cbz	r3, 8004068 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004028:	6843      	ldr	r3, [r0, #4]
 800402a:	4a13      	ldr	r2, [pc, #76]	; (8004078 <HAL_MPU_ConfigRegion+0x5c>)
 800402c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004030:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004032:	7ac3      	ldrb	r3, [r0, #11]
 8004034:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004036:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800403a:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800403c:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004040:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004042:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004046:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004048:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800404c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800404e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004052:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004054:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004058:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800405a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800405e:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004060:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004062:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004066:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_MPU_ConfigRegion+0x5c>)
 800406a:	2200      	movs	r2, #0
 800406c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004070:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800407c:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800407e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004080:	6804      	ldr	r4, [r0, #0]
 8004082:	4e66      	ldr	r6, [pc, #408]	; (800421c <DMA_SetConfig+0x1a0>)
 8004084:	4d66      	ldr	r5, [pc, #408]	; (8004220 <DMA_SetConfig+0x1a4>)
 8004086:	42ac      	cmp	r4, r5
 8004088:	bf18      	it	ne
 800408a:	42b4      	cmpne	r4, r6
 800408c:	d042      	beq.n	8004114 <DMA_SetConfig+0x98>
 800408e:	3518      	adds	r5, #24
 8004090:	42ac      	cmp	r4, r5
 8004092:	d03f      	beq.n	8004114 <DMA_SetConfig+0x98>
 8004094:	3518      	adds	r5, #24
 8004096:	42ac      	cmp	r4, r5
 8004098:	d03c      	beq.n	8004114 <DMA_SetConfig+0x98>
 800409a:	3518      	adds	r5, #24
 800409c:	42ac      	cmp	r4, r5
 800409e:	d039      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040a0:	3518      	adds	r5, #24
 80040a2:	42ac      	cmp	r4, r5
 80040a4:	d036      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040a6:	3518      	adds	r5, #24
 80040a8:	42ac      	cmp	r4, r5
 80040aa:	d033      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040ac:	3518      	adds	r5, #24
 80040ae:	42ac      	cmp	r4, r5
 80040b0:	d030      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040b2:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80040b6:	42ac      	cmp	r4, r5
 80040b8:	d02c      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040ba:	3518      	adds	r5, #24
 80040bc:	42ac      	cmp	r4, r5
 80040be:	d029      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040c0:	3518      	adds	r5, #24
 80040c2:	42ac      	cmp	r4, r5
 80040c4:	d026      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040c6:	3518      	adds	r5, #24
 80040c8:	42ac      	cmp	r4, r5
 80040ca:	d023      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040cc:	3518      	adds	r5, #24
 80040ce:	42ac      	cmp	r4, r5
 80040d0:	d020      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040d2:	3518      	adds	r5, #24
 80040d4:	42ac      	cmp	r4, r5
 80040d6:	d01d      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040d8:	3518      	adds	r5, #24
 80040da:	42ac      	cmp	r4, r5
 80040dc:	d01a      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040de:	3518      	adds	r5, #24
 80040e0:	42ac      	cmp	r4, r5
 80040e2:	d017      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040e4:	4d4f      	ldr	r5, [pc, #316]	; (8004224 <DMA_SetConfig+0x1a8>)
 80040e6:	42ac      	cmp	r4, r5
 80040e8:	d014      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040ea:	3514      	adds	r5, #20
 80040ec:	42ac      	cmp	r4, r5
 80040ee:	d011      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040f0:	3514      	adds	r5, #20
 80040f2:	42ac      	cmp	r4, r5
 80040f4:	d00e      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040f6:	3514      	adds	r5, #20
 80040f8:	42ac      	cmp	r4, r5
 80040fa:	d00b      	beq.n	8004114 <DMA_SetConfig+0x98>
 80040fc:	3514      	adds	r5, #20
 80040fe:	42ac      	cmp	r4, r5
 8004100:	d008      	beq.n	8004114 <DMA_SetConfig+0x98>
 8004102:	3514      	adds	r5, #20
 8004104:	42ac      	cmp	r4, r5
 8004106:	d005      	beq.n	8004114 <DMA_SetConfig+0x98>
 8004108:	3514      	adds	r5, #20
 800410a:	42ac      	cmp	r4, r5
 800410c:	d002      	beq.n	8004114 <DMA_SetConfig+0x98>
 800410e:	3514      	adds	r5, #20
 8004110:	42ac      	cmp	r4, r5
 8004112:	d107      	bne.n	8004124 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004114:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8004116:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8004118:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800411a:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800411c:	b114      	cbz	r4, 8004124 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800411e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8004120:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8004122:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004124:	6804      	ldr	r4, [r0, #0]
 8004126:	4e3d      	ldr	r6, [pc, #244]	; (800421c <DMA_SetConfig+0x1a0>)
 8004128:	4d3d      	ldr	r5, [pc, #244]	; (8004220 <DMA_SetConfig+0x1a4>)
 800412a:	42ac      	cmp	r4, r5
 800412c:	bf18      	it	ne
 800412e:	42b4      	cmpne	r4, r6
 8004130:	d052      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004132:	3518      	adds	r5, #24
 8004134:	42ac      	cmp	r4, r5
 8004136:	d04f      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004138:	3518      	adds	r5, #24
 800413a:	42ac      	cmp	r4, r5
 800413c:	d04c      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 800413e:	3518      	adds	r5, #24
 8004140:	42ac      	cmp	r4, r5
 8004142:	d049      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004144:	3518      	adds	r5, #24
 8004146:	42ac      	cmp	r4, r5
 8004148:	d046      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 800414a:	3518      	adds	r5, #24
 800414c:	42ac      	cmp	r4, r5
 800414e:	d043      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004150:	3518      	adds	r5, #24
 8004152:	42ac      	cmp	r4, r5
 8004154:	d040      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004156:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800415a:	42ac      	cmp	r4, r5
 800415c:	d03c      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 800415e:	3518      	adds	r5, #24
 8004160:	42ac      	cmp	r4, r5
 8004162:	d039      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004164:	3518      	adds	r5, #24
 8004166:	42ac      	cmp	r4, r5
 8004168:	d036      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 800416a:	3518      	adds	r5, #24
 800416c:	42ac      	cmp	r4, r5
 800416e:	d033      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004170:	3518      	adds	r5, #24
 8004172:	42ac      	cmp	r4, r5
 8004174:	d030      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004176:	3518      	adds	r5, #24
 8004178:	42ac      	cmp	r4, r5
 800417a:	d02d      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 800417c:	3518      	adds	r5, #24
 800417e:	42ac      	cmp	r4, r5
 8004180:	d02a      	beq.n	80041d8 <DMA_SetConfig+0x15c>
 8004182:	3518      	adds	r5, #24
 8004184:	42ac      	cmp	r4, r5
 8004186:	d027      	beq.n	80041d8 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004188:	4e26      	ldr	r6, [pc, #152]	; (8004224 <DMA_SetConfig+0x1a8>)
 800418a:	4d27      	ldr	r5, [pc, #156]	; (8004228 <DMA_SetConfig+0x1ac>)
 800418c:	42ac      	cmp	r4, r5
 800418e:	bf18      	it	ne
 8004190:	42b4      	cmpne	r4, r6
 8004192:	d011      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 8004194:	4d25      	ldr	r5, [pc, #148]	; (800422c <DMA_SetConfig+0x1b0>)
 8004196:	42ac      	cmp	r4, r5
 8004198:	d00e      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 800419a:	3514      	adds	r5, #20
 800419c:	42ac      	cmp	r4, r5
 800419e:	d00b      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 80041a0:	3514      	adds	r5, #20
 80041a2:	42ac      	cmp	r4, r5
 80041a4:	d008      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 80041a6:	3514      	adds	r5, #20
 80041a8:	42ac      	cmp	r4, r5
 80041aa:	d005      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 80041ac:	3514      	adds	r5, #20
 80041ae:	42ac      	cmp	r4, r5
 80041b0:	d002      	beq.n	80041b8 <DMA_SetConfig+0x13c>
 80041b2:	3514      	adds	r5, #20
 80041b4:	42ac      	cmp	r4, r5
 80041b6:	d124      	bne.n	8004202 <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041b8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80041ba:	f004 051f 	and.w	r5, r4, #31
 80041be:	2401      	movs	r4, #1
 80041c0:	40ac      	lsls	r4, r5
 80041c2:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80041c4:	6804      	ldr	r4, [r0, #0]
 80041c6:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041c8:	6883      	ldr	r3, [r0, #8]
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d020      	beq.n	8004210 <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80041ce:	6803      	ldr	r3, [r0, #0]
 80041d0:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80041d2:	6803      	ldr	r3, [r0, #0]
 80041d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041d6:	e014      	b.n	8004202 <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041d8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80041da:	f004 0c1f 	and.w	ip, r4, #31
 80041de:	243f      	movs	r4, #63	; 0x3f
 80041e0:	fa04 f40c 	lsl.w	r4, r4, ip
 80041e4:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041e6:	6805      	ldr	r5, [r0, #0]
 80041e8:	682c      	ldr	r4, [r5, #0]
 80041ea:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80041ee:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80041f0:	6804      	ldr	r4, [r0, #0]
 80041f2:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041f4:	6883      	ldr	r3, [r0, #8]
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d005      	beq.n	8004206 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80041fa:	6803      	ldr	r3, [r0, #0]
 80041fc:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80041fe:	6803      	ldr	r3, [r0, #0]
 8004200:	60da      	str	r2, [r3, #12]
}
 8004202:	bcf0      	pop	{r4, r5, r6, r7}
 8004204:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004206:	6803      	ldr	r3, [r0, #0]
 8004208:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800420a:	6803      	ldr	r3, [r0, #0]
 800420c:	60d9      	str	r1, [r3, #12]
 800420e:	e7f8      	b.n	8004202 <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004210:	6803      	ldr	r3, [r0, #0]
 8004212:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	60d9      	str	r1, [r3, #12]
 8004218:	e7f3      	b.n	8004202 <DMA_SetConfig+0x186>
 800421a:	bf00      	nop
 800421c:	40020010 	.word	0x40020010
 8004220:	40020028 	.word	0x40020028
 8004224:	58025408 	.word	0x58025408
 8004228:	5802541c 	.word	0x5802541c
 800422c:	58025430 	.word	0x58025430

08004230 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004230:	6803      	ldr	r3, [r0, #0]
 8004232:	4927      	ldr	r1, [pc, #156]	; (80042d0 <DMA_CalcBaseAndBitshift+0xa0>)
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <DMA_CalcBaseAndBitshift+0xa4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	bf18      	it	ne
 800423a:	428b      	cmpne	r3, r1
 800423c:	d02f      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800423e:	3218      	adds	r2, #24
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004244:	3218      	adds	r2, #24
 8004246:	4293      	cmp	r3, r2
 8004248:	d029      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800424a:	3218      	adds	r2, #24
 800424c:	4293      	cmp	r3, r2
 800424e:	d026      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004250:	3218      	adds	r2, #24
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004256:	3218      	adds	r2, #24
 8004258:	4293      	cmp	r3, r2
 800425a:	d020      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800425c:	3218      	adds	r2, #24
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004262:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004266:	4293      	cmp	r3, r2
 8004268:	d019      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800426a:	3218      	adds	r2, #24
 800426c:	4293      	cmp	r3, r2
 800426e:	d016      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004270:	3218      	adds	r2, #24
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004276:	3218      	adds	r2, #24
 8004278:	4293      	cmp	r3, r2
 800427a:	d010      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800427c:	3218      	adds	r2, #24
 800427e:	4293      	cmp	r3, r2
 8004280:	d00d      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004282:	3218      	adds	r2, #24
 8004284:	4293      	cmp	r3, r2
 8004286:	d00a      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 8004288:	3218      	adds	r2, #24
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
 800428e:	3218      	adds	r2, #24
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004294:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004298:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 800429a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800429c:	4770      	bx	lr
{
 800429e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042a0:	b2d9      	uxtb	r1, r3
 80042a2:	3910      	subs	r1, #16
 80042a4:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <DMA_CalcBaseAndBitshift+0xa8>)
 80042a6:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80042aa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80042ae:	4c0b      	ldr	r4, [pc, #44]	; (80042dc <DMA_CalcBaseAndBitshift+0xac>)
 80042b0:	5ca2      	ldrb	r2, [r4, r2]
 80042b2:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 80042b4:	295f      	cmp	r1, #95	; 0x5f
 80042b6:	d907      	bls.n	80042c8 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <DMA_CalcBaseAndBitshift+0xb0>)
 80042ba:	401a      	ands	r2, r3
 80042bc:	3204      	adds	r2, #4
 80042be:	6582      	str	r2, [r0, #88]	; 0x58
}
 80042c0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80042c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042c6:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <DMA_CalcBaseAndBitshift+0xb0>)
 80042ca:	401a      	ands	r2, r3
 80042cc:	6582      	str	r2, [r0, #88]	; 0x58
 80042ce:	e7f7      	b.n	80042c0 <DMA_CalcBaseAndBitshift+0x90>
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	aaaaaaab 	.word	0xaaaaaaab
 80042dc:	0801acdc 	.word	0x0801acdc
 80042e0:	fffffc00 	.word	0xfffffc00

080042e4 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042e4:	6983      	ldr	r3, [r0, #24]
 80042e6:	b99b      	cbnz	r3, 8004310 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 80042e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d00a      	beq.n	8004304 <DMA_CheckFifoParam+0x20>
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d002      	beq.n	80042f8 <DMA_CheckFifoParam+0x14>
 80042f2:	b10b      	cbz	r3, 80042f8 <DMA_CheckFifoParam+0x14>
 80042f4:	2000      	movs	r0, #0
 80042f6:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80042fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80042fe:	d12a      	bne.n	8004356 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004304:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004306:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800430a:	d026      	beq.n	800435a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2000      	movs	r0, #0
 800430e:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004314:	d00a      	beq.n	800432c <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004316:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004318:	2b02      	cmp	r3, #2
 800431a:	d926      	bls.n	800436a <DMA_CheckFifoParam+0x86>
 800431c:	2b03      	cmp	r3, #3
 800431e:	d126      	bne.n	800436e <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004320:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004322:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004326:	d124      	bne.n	8004372 <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2000      	movs	r0, #0
 800432a:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 800432c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800432e:	2b03      	cmp	r3, #3
 8004330:	d803      	bhi.n	800433a <DMA_CheckFifoParam+0x56>
 8004332:	e8df f003 	tbb	[pc, r3]
 8004336:	0414      	.short	0x0414
 8004338:	0a14      	.short	0x0a14
 800433a:	2000      	movs	r0, #0
 800433c:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004340:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004344:	d10d      	bne.n	8004362 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2000      	movs	r0, #0
 8004348:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800434c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004350:	d009      	beq.n	8004366 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2000      	movs	r0, #0
 8004354:	4770      	bx	lr
          status = HAL_ERROR;
 8004356:	2001      	movs	r0, #1
 8004358:	4770      	bx	lr
          status = HAL_ERROR;
 800435a:	2001      	movs	r0, #1
 800435c:	4770      	bx	lr
        status = HAL_ERROR;
 800435e:	2001      	movs	r0, #1
 8004360:	4770      	bx	lr
          status = HAL_ERROR;
 8004362:	2001      	movs	r0, #1
 8004364:	4770      	bx	lr
          status = HAL_ERROR;
 8004366:	2001      	movs	r0, #1
 8004368:	4770      	bx	lr
        status = HAL_ERROR;
 800436a:	2001      	movs	r0, #1
 800436c:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 800436e:	2000      	movs	r0, #0
 8004370:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8004372:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8004374:	4770      	bx	lr
	...

08004378 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004378:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800437a:	4921      	ldr	r1, [pc, #132]	; (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800437c:	4a21      	ldr	r2, [pc, #132]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	bf18      	it	ne
 8004382:	428b      	cmpne	r3, r1
 8004384:	d027      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004386:	3214      	adds	r2, #20
 8004388:	4293      	cmp	r3, r2
 800438a:	d024      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438c:	3214      	adds	r2, #20
 800438e:	4293      	cmp	r3, r2
 8004390:	d021      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004392:	3214      	adds	r2, #20
 8004394:	4293      	cmp	r3, r2
 8004396:	d01e      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004398:	3214      	adds	r2, #20
 800439a:	4293      	cmp	r3, r2
 800439c:	d01b      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800439e:	3214      	adds	r2, #20
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043a4:	3214      	adds	r2, #20
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d015      	beq.n	80043d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	3a10      	subs	r2, #16
 80043ae:	4916      	ldr	r1, [pc, #88]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80043b0:	fba1 1202 	umull	r1, r2, r1, r2
 80043b4:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043b6:	4915      	ldr	r1, [pc, #84]	; (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 80043b8:	4419      	add	r1, r3
 80043ba:	29a8      	cmp	r1, #168	; 0xa8
 80043bc:	d91e      	bls.n	80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043c6:	4b13      	ldr	r3, [pc, #76]	; (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 80043c8:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ca:	f002 021f 	and.w	r2, r2, #31
 80043ce:	2301      	movs	r3, #1
 80043d0:	4093      	lsls	r3, r2
 80043d2:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 80043d4:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3b08      	subs	r3, #8
 80043da:	4a0f      	ldr	r2, [pc, #60]	; (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043e0:	4a0e      	ldr	r2, [pc, #56]	; (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 80043e2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043ea:	4a0d      	ldr	r2, [pc, #52]	; (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80043ec:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ee:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80043f2:	2201      	movs	r2, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	6683      	str	r3, [r0, #104]	; 0x68
 80043fa:	4770      	bx	lr
      stream_number += 8U;
 80043fc:	3208      	adds	r2, #8
 80043fe:	e7de      	b.n	80043be <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8004400:	58025408 	.word	0x58025408
 8004404:	5802541c 	.word	0x5802541c
 8004408:	aaaaaaab 	.word	0xaaaaaaab
 800440c:	bffdfbf0 	.word	0xbffdfbf0
 8004410:	10008200 	.word	0x10008200
 8004414:	40020880 	.word	0x40020880
 8004418:	cccccccd 	.word	0xcccccccd
 800441c:	16009600 	.word	0x16009600
 8004420:	58025880 	.word	0x58025880

08004424 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004424:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004426:	1e4a      	subs	r2, r1, #1
 8004428:	2a07      	cmp	r2, #7
 800442a:	d82b      	bhi.n	8004484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 800442c:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800442e:	6803      	ldr	r3, [r0, #0]
 8004430:	4d15      	ldr	r5, [pc, #84]	; (8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8004432:	4c16      	ldr	r4, [pc, #88]	; (800448c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8004434:	42a3      	cmp	r3, r4
 8004436:	bf18      	it	ne
 8004438:	42ab      	cmpne	r3, r5
 800443a:	d018      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800443c:	3414      	adds	r4, #20
 800443e:	42a3      	cmp	r3, r4
 8004440:	d015      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004442:	3414      	adds	r4, #20
 8004444:	42a3      	cmp	r3, r4
 8004446:	d012      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004448:	3414      	adds	r4, #20
 800444a:	42a3      	cmp	r3, r4
 800444c:	d00f      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800444e:	3414      	adds	r4, #20
 8004450:	42a3      	cmp	r3, r4
 8004452:	d00c      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004454:	3414      	adds	r4, #20
 8004456:	42a3      	cmp	r3, r4
 8004458:	d009      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800445a:	3414      	adds	r4, #20
 800445c:	42a3      	cmp	r3, r4
 800445e:	d006      	beq.n	800446e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8004462:	440b      	add	r3, r1
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 800446a:	6703      	str	r3, [r0, #112]	; 0x70
 800446c:	e005      	b.n	800447a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800446e:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8004470:	440b      	add	r3, r1
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004478:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800447a:	2301      	movs	r3, #1
 800447c:	4093      	lsls	r3, r2
 800447e:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8004480:	bc30      	pop	{r4, r5}
 8004482:	4770      	bx	lr
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	58025408 	.word	0x58025408
 800448c:	5802541c 	.word	0x5802541c
 8004490:	1000823f 	.word	0x1000823f
 8004494:	40020940 	.word	0x40020940
 8004498:	1600963f 	.word	0x1600963f
 800449c:	58025940 	.word	0x58025940

080044a0 <HAL_DMA_Init>:
{
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044a4:	f7ff fd08 	bl	8003eb8 <HAL_GetTick>
  if(hdma == NULL)
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	f000 81b6 	beq.w	800481a <HAL_DMA_Init+0x37a>
 80044ae:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	4953      	ldr	r1, [pc, #332]	; (8004600 <HAL_DMA_Init+0x160>)
 80044b4:	4a53      	ldr	r2, [pc, #332]	; (8004604 <HAL_DMA_Init+0x164>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bf18      	it	ne
 80044ba:	428b      	cmpne	r3, r1
 80044bc:	bf0c      	ite	eq
 80044be:	2101      	moveq	r1, #1
 80044c0:	2100      	movne	r1, #0
 80044c2:	d050      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044c4:	3218      	adds	r2, #24
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d04d      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044ca:	3218      	adds	r2, #24
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d04a      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044d0:	3218      	adds	r2, #24
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d047      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044d6:	3218      	adds	r2, #24
 80044d8:	4293      	cmp	r3, r2
 80044da:	d044      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044dc:	3218      	adds	r2, #24
 80044de:	4293      	cmp	r3, r2
 80044e0:	d041      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044e2:	3218      	adds	r2, #24
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d03e      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044e8:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d03a      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044f0:	3218      	adds	r2, #24
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d037      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044f6:	3218      	adds	r2, #24
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d034      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 80044fc:	3218      	adds	r2, #24
 80044fe:	4293      	cmp	r3, r2
 8004500:	d031      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 8004502:	3218      	adds	r2, #24
 8004504:	4293      	cmp	r3, r2
 8004506:	d02e      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 8004508:	3218      	adds	r2, #24
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 800450e:	3218      	adds	r2, #24
 8004510:	4293      	cmp	r3, r2
 8004512:	d028      	beq.n	8004566 <HAL_DMA_Init+0xc6>
 8004514:	3218      	adds	r2, #24
 8004516:	4293      	cmp	r3, r2
 8004518:	d025      	beq.n	8004566 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800451a:	493b      	ldr	r1, [pc, #236]	; (8004608 <HAL_DMA_Init+0x168>)
 800451c:	4a3b      	ldr	r2, [pc, #236]	; (800460c <HAL_DMA_Init+0x16c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	bf18      	it	ne
 8004522:	428b      	cmpne	r3, r1
 8004524:	f000 8131 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004528:	4a39      	ldr	r2, [pc, #228]	; (8004610 <HAL_DMA_Init+0x170>)
 800452a:	4293      	cmp	r3, r2
 800452c:	f000 812d 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004530:	3214      	adds	r2, #20
 8004532:	4293      	cmp	r3, r2
 8004534:	f000 8129 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004538:	3214      	adds	r2, #20
 800453a:	4293      	cmp	r3, r2
 800453c:	f000 8125 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004540:	3214      	adds	r2, #20
 8004542:	4293      	cmp	r3, r2
 8004544:	f000 8121 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004548:	3214      	adds	r2, #20
 800454a:	4293      	cmp	r3, r2
 800454c:	f000 811d 	beq.w	800478a <HAL_DMA_Init+0x2ea>
 8004550:	3214      	adds	r2, #20
 8004552:	4293      	cmp	r3, r2
 8004554:	f000 8119 	beq.w	800478a <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800455c:	2303      	movs	r3, #3
 800455e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004562:	2001      	movs	r0, #1
 8004564:	e04a      	b.n	80045fc <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004566:	2202      	movs	r2, #2
 8004568:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800456c:	2200      	movs	r2, #0
 800456e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004572:	bb79      	cbnz	r1, 80045d4 <HAL_DMA_Init+0x134>
 8004574:	4a27      	ldr	r2, [pc, #156]	; (8004614 <HAL_DMA_Init+0x174>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 800457a:	3218      	adds	r2, #24
 800457c:	4293      	cmp	r3, r2
 800457e:	d029      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 8004580:	3218      	adds	r2, #24
 8004582:	4293      	cmp	r3, r2
 8004584:	d026      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 8004586:	3218      	adds	r2, #24
 8004588:	4293      	cmp	r3, r2
 800458a:	d023      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 800458c:	3218      	adds	r2, #24
 800458e:	4293      	cmp	r3, r2
 8004590:	d020      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 8004592:	3218      	adds	r2, #24
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 8004598:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800459c:	4293      	cmp	r3, r2
 800459e:	d019      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045a0:	3218      	adds	r2, #24
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d016      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045a6:	3218      	adds	r2, #24
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045ac:	3218      	adds	r2, #24
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d010      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045b2:	3218      	adds	r2, #24
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00d      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045b8:	3218      	adds	r2, #24
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00a      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045be:	3218      	adds	r2, #24
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045c4:	3218      	adds	r2, #24
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Init+0x134>
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e003      	b.n	80045dc <HAL_DMA_Init+0x13c>
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	f012 0f01 	tst.w	r2, #1
 80045e4:	d018      	beq.n	8004618 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045e6:	f7ff fc67 	bl	8003eb8 <HAL_GetTick>
 80045ea:	1b43      	subs	r3, r0, r5
 80045ec:	2b05      	cmp	r3, #5
 80045ee:	d9f5      	bls.n	80045dc <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045f0:	2320      	movs	r3, #32
 80045f2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80045f4:	2303      	movs	r3, #3
 80045f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80045fa:	2001      	movs	r0, #1
}
 80045fc:	bd70      	pop	{r4, r5, r6, pc}
 80045fe:	bf00      	nop
 8004600:	40020010 	.word	0x40020010
 8004604:	40020028 	.word	0x40020028
 8004608:	58025408 	.word	0x58025408
 800460c:	5802541c 	.word	0x5802541c
 8004610:	58025430 	.word	0x58025430
 8004614:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004618:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800461a:	4981      	ldr	r1, [pc, #516]	; (8004820 <HAL_DMA_Init+0x380>)
 800461c:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 800461e:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004620:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8004622:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004624:	6920      	ldr	r0, [r4, #16]
 8004626:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004628:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800462a:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800462c:	69a0      	ldr	r0, [r4, #24]
 800462e:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004630:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004632:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004634:	6a20      	ldr	r0, [r4, #32]
 8004636:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8004638:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800463c:	2904      	cmp	r1, #4
 800463e:	f000 8099 	beq.w	8004774 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004642:	4978      	ldr	r1, [pc, #480]	; (8004824 <HAL_DMA_Init+0x384>)
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	4978      	ldr	r1, [pc, #480]	; (8004828 <HAL_DMA_Init+0x388>)
 8004648:	4001      	ands	r1, r0
 800464a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800464e:	d311      	bcc.n	8004674 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004650:	6861      	ldr	r1, [r4, #4]
 8004652:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8004656:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 800465a:	2803      	cmp	r0, #3
 800465c:	bf88      	it	hi
 800465e:	2d05      	cmphi	r5, #5
 8004660:	d906      	bls.n	8004670 <HAL_DMA_Init+0x1d0>
 8004662:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8004666:	2801      	cmp	r0, #1
 8004668:	d902      	bls.n	8004670 <HAL_DMA_Init+0x1d0>
 800466a:	394f      	subs	r1, #79	; 0x4f
 800466c:	2903      	cmp	r1, #3
 800466e:	d801      	bhi.n	8004674 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8004670:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004674:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004676:	6826      	ldr	r6, [r4, #0]
 8004678:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800467a:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 800467e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004680:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004682:	2b04      	cmp	r3, #4
 8004684:	d108      	bne.n	8004698 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004688:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800468a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800468c:	b123      	cbz	r3, 8004698 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800468e:	4620      	mov	r0, r4
 8004690:	f7ff fe28 	bl	80042e4 <DMA_CheckFifoParam>
 8004694:	2800      	cmp	r0, #0
 8004696:	d172      	bne.n	800477e <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004698:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff fdc8 	bl	8004230 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	233f      	movs	r3, #63	; 0x3f
 80046a8:	4093      	lsls	r3, r2
 80046aa:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	495f      	ldr	r1, [pc, #380]	; (800482c <HAL_DMA_Init+0x38c>)
 80046b0:	4a5f      	ldr	r2, [pc, #380]	; (8004830 <HAL_DMA_Init+0x390>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	bf18      	it	ne
 80046b6:	428b      	cmpne	r3, r1
 80046b8:	d042      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046ba:	3218      	adds	r2, #24
 80046bc:	4293      	cmp	r3, r2
 80046be:	d03f      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046c0:	3218      	adds	r2, #24
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d03c      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046c6:	3218      	adds	r2, #24
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d039      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046cc:	3218      	adds	r2, #24
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d036      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046d2:	3218      	adds	r2, #24
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d033      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046d8:	3218      	adds	r2, #24
 80046da:	4293      	cmp	r3, r2
 80046dc:	d030      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d02c      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046e6:	3218      	adds	r2, #24
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d029      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046ec:	3218      	adds	r2, #24
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d026      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046f2:	3218      	adds	r2, #24
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d023      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046f8:	3218      	adds	r2, #24
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d020      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 80046fe:	3218      	adds	r2, #24
 8004700:	4293      	cmp	r3, r2
 8004702:	d01d      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004704:	3218      	adds	r2, #24
 8004706:	4293      	cmp	r3, r2
 8004708:	d01a      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 800470a:	3218      	adds	r2, #24
 800470c:	4293      	cmp	r3, r2
 800470e:	d017      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004710:	4a48      	ldr	r2, [pc, #288]	; (8004834 <HAL_DMA_Init+0x394>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d014      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004716:	3214      	adds	r2, #20
 8004718:	4293      	cmp	r3, r2
 800471a:	d011      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 800471c:	3214      	adds	r2, #20
 800471e:	4293      	cmp	r3, r2
 8004720:	d00e      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004722:	3214      	adds	r2, #20
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004728:	3214      	adds	r2, #20
 800472a:	4293      	cmp	r3, r2
 800472c:	d008      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 800472e:	3214      	adds	r2, #20
 8004730:	4293      	cmp	r3, r2
 8004732:	d005      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 8004734:	3214      	adds	r2, #20
 8004736:	4293      	cmp	r3, r2
 8004738:	d002      	beq.n	8004740 <HAL_DMA_Init+0x2a0>
 800473a:	3214      	adds	r2, #20
 800473c:	4293      	cmp	r3, r2
 800473e:	d113      	bne.n	8004768 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff fe19 	bl	8004378 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004746:	68a3      	ldr	r3, [r4, #8]
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d059      	beq.n	8004800 <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800474c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800474e:	7922      	ldrb	r2, [r4, #4]
 8004750:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004754:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004756:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	2b07      	cmp	r3, #7
 800475e:	d952      	bls.n	8004806 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004764:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004766:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004768:	2000      	movs	r0, #0
 800476a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800476c:	2301      	movs	r3, #1
 800476e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004772:	e743      	b.n	80045fc <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004774:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004776:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004778:	4301      	orrs	r1, r0
 800477a:	430a      	orrs	r2, r1
 800477c:	e761      	b.n	8004642 <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004782:	2001      	movs	r0, #1
 8004784:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004788:	e738      	b.n	80045fc <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800478a:	2202      	movs	r2, #2
 800478c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004790:	2200      	movs	r2, #0
 8004792:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004796:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004798:	4927      	ldr	r1, [pc, #156]	; (8004838 <HAL_DMA_Init+0x398>)
 800479a:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800479c:	68a2      	ldr	r2, [r4, #8]
 800479e:	2a40      	cmp	r2, #64	; 0x40
 80047a0:	d02c      	beq.n	80047fc <HAL_DMA_Init+0x35c>
 80047a2:	2a80      	cmp	r2, #128	; 0x80
 80047a4:	d027      	beq.n	80047f6 <HAL_DMA_Init+0x356>
 80047a6:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047a8:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047aa:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047ae:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047b0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047b4:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047b6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047ba:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047bc:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047c0:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047c2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047c6:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047c8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047cc:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80047ce:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80047d0:	6822      	ldr	r2, [r4, #0]
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_DMA_Init+0x39c>)
 80047d4:	4413      	add	r3, r2
 80047d6:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <HAL_DMA_Init+0x3a0>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047e2:	4620      	mov	r0, r4
 80047e4:	f7ff fd24 	bl	8004230 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80047ea:	f002 011f 	and.w	r1, r2, #31
 80047ee:	2201      	movs	r2, #1
 80047f0:	408a      	lsls	r2, r1
 80047f2:	6042      	str	r2, [r0, #4]
 80047f4:	e75a      	b.n	80046ac <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047fa:	e7d5      	b.n	80047a8 <HAL_DMA_Init+0x308>
 80047fc:	2210      	movs	r2, #16
 80047fe:	e7d3      	b.n	80047a8 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004800:	2300      	movs	r3, #0
 8004802:	6063      	str	r3, [r4, #4]
 8004804:	e7a2      	b.n	800474c <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004806:	4620      	mov	r0, r4
 8004808:	f7ff fe0c 	bl	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800480c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004812:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004814:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	e7a6      	b.n	8004768 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 800481a:	2001      	movs	r0, #1
 800481c:	e6ee      	b.n	80045fc <HAL_DMA_Init+0x15c>
 800481e:	bf00      	nop
 8004820:	fe10803f 	.word	0xfe10803f
 8004824:	5c001000 	.word	0x5c001000
 8004828:	ffff0000 	.word	0xffff0000
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	58025408 	.word	0x58025408
 8004838:	fffe000f 	.word	0xfffe000f
 800483c:	a7fdabf8 	.word	0xa7fdabf8
 8004840:	cccccccd 	.word	0xcccccccd

08004844 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004844:	2800      	cmp	r0, #0
 8004846:	f000 813e 	beq.w	8004ac6 <HAL_DMA_Start_IT+0x282>
{
 800484a:	b570      	push	{r4, r5, r6, lr}
 800484c:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800484e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004852:	2801      	cmp	r0, #1
 8004854:	f000 8139 	beq.w	8004aca <HAL_DMA_Start_IT+0x286>
 8004858:	2001      	movs	r0, #1
 800485a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800485e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8004862:	b2c0      	uxtb	r0, r0
 8004864:	2801      	cmp	r0, #1
 8004866:	d007      	beq.n	8004878 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004868:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800486c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8004874:	2001      	movs	r0, #1
}
 8004876:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004878:	2002      	movs	r0, #2
 800487a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487e:	2000      	movs	r0, #0
 8004880:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	4e92      	ldr	r6, [pc, #584]	; (8004ad0 <HAL_DMA_Start_IT+0x28c>)
 8004886:	4d93      	ldr	r5, [pc, #588]	; (8004ad4 <HAL_DMA_Start_IT+0x290>)
 8004888:	42a8      	cmp	r0, r5
 800488a:	bf18      	it	ne
 800488c:	42b0      	cmpne	r0, r6
 800488e:	d02f      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 8004890:	3518      	adds	r5, #24
 8004892:	42a8      	cmp	r0, r5
 8004894:	d02c      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 8004896:	3518      	adds	r5, #24
 8004898:	42a8      	cmp	r0, r5
 800489a:	d029      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 800489c:	3518      	adds	r5, #24
 800489e:	42a8      	cmp	r0, r5
 80048a0:	d026      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048a2:	3518      	adds	r5, #24
 80048a4:	42a8      	cmp	r0, r5
 80048a6:	d023      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048a8:	3518      	adds	r5, #24
 80048aa:	42a8      	cmp	r0, r5
 80048ac:	d020      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048ae:	3518      	adds	r5, #24
 80048b0:	42a8      	cmp	r0, r5
 80048b2:	d01d      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048b4:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80048b8:	42a8      	cmp	r0, r5
 80048ba:	d019      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048bc:	3518      	adds	r5, #24
 80048be:	42a8      	cmp	r0, r5
 80048c0:	d016      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048c2:	3518      	adds	r5, #24
 80048c4:	42a8      	cmp	r0, r5
 80048c6:	d013      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048c8:	3518      	adds	r5, #24
 80048ca:	42a8      	cmp	r0, r5
 80048cc:	d010      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048ce:	3518      	adds	r5, #24
 80048d0:	42a8      	cmp	r0, r5
 80048d2:	d00d      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048d4:	3518      	adds	r5, #24
 80048d6:	42a8      	cmp	r0, r5
 80048d8:	d00a      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048da:	3518      	adds	r5, #24
 80048dc:	42a8      	cmp	r0, r5
 80048de:	d007      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048e0:	3518      	adds	r5, #24
 80048e2:	42a8      	cmp	r0, r5
 80048e4:	d004      	beq.n	80048f0 <HAL_DMA_Start_IT+0xac>
 80048e6:	6805      	ldr	r5, [r0, #0]
 80048e8:	f025 0501 	bic.w	r5, r5, #1
 80048ec:	6005      	str	r5, [r0, #0]
 80048ee:	e003      	b.n	80048f8 <HAL_DMA_Start_IT+0xb4>
 80048f0:	6805      	ldr	r5, [r0, #0]
 80048f2:	f025 0501 	bic.w	r5, r5, #1
 80048f6:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff fbbf 	bl	800407c <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	4973      	ldr	r1, [pc, #460]	; (8004ad0 <HAL_DMA_Start_IT+0x28c>)
 8004902:	4a74      	ldr	r2, [pc, #464]	; (8004ad4 <HAL_DMA_Start_IT+0x290>)
 8004904:	4293      	cmp	r3, r2
 8004906:	bf18      	it	ne
 8004908:	428b      	cmpne	r3, r1
 800490a:	d038      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800490c:	3218      	adds	r2, #24
 800490e:	4293      	cmp	r3, r2
 8004910:	d035      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004912:	3218      	adds	r2, #24
 8004914:	4293      	cmp	r3, r2
 8004916:	d032      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004918:	3218      	adds	r2, #24
 800491a:	4293      	cmp	r3, r2
 800491c:	d02f      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800491e:	3218      	adds	r2, #24
 8004920:	4293      	cmp	r3, r2
 8004922:	d02c      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004924:	3218      	adds	r2, #24
 8004926:	4293      	cmp	r3, r2
 8004928:	d029      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800492a:	3218      	adds	r2, #24
 800492c:	4293      	cmp	r3, r2
 800492e:	d026      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004930:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004938:	3218      	adds	r2, #24
 800493a:	4293      	cmp	r3, r2
 800493c:	d01f      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800493e:	3218      	adds	r2, #24
 8004940:	4293      	cmp	r3, r2
 8004942:	d01c      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004944:	3218      	adds	r2, #24
 8004946:	4293      	cmp	r3, r2
 8004948:	d019      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800494a:	3218      	adds	r2, #24
 800494c:	4293      	cmp	r3, r2
 800494e:	d016      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004950:	3218      	adds	r2, #24
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 8004956:	3218      	adds	r2, #24
 8004958:	4293      	cmp	r3, r2
 800495a:	d010      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
 800495c:	3218      	adds	r2, #24
 800495e:	4293      	cmp	r3, r2
 8004960:	d00d      	beq.n	800497e <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	f022 020e 	bic.w	r2, r2, #14
 8004968:	f042 020a 	orr.w	r2, r2, #10
 800496c:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800496e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004970:	b193      	cbz	r3, 8004998 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	f043 0304 	orr.w	r3, r3, #4
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e00c      	b.n	8004998 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	f022 021e 	bic.w	r2, r2, #30
 8004984:	f042 0216 	orr.w	r2, r2, #22
 8004988:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800498a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800498c:	b123      	cbz	r3, 8004998 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	6813      	ldr	r3, [r2, #0]
 8004992:	f043 0308 	orr.w	r3, r3, #8
 8004996:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_DMA_Start_IT+0x28c>)
 800499c:	4a4d      	ldr	r2, [pc, #308]	; (8004ad4 <HAL_DMA_Start_IT+0x290>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	bf18      	it	ne
 80049a2:	428b      	cmpne	r3, r1
 80049a4:	d042      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049a6:	3218      	adds	r2, #24
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d03f      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049ac:	3218      	adds	r2, #24
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d03c      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049b2:	3218      	adds	r2, #24
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d039      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049b8:	3218      	adds	r2, #24
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d036      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049be:	3218      	adds	r2, #24
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d033      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049c4:	3218      	adds	r2, #24
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d030      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049ca:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d02c      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049d2:	3218      	adds	r2, #24
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d029      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049d8:	3218      	adds	r2, #24
 80049da:	4293      	cmp	r3, r2
 80049dc:	d026      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049de:	3218      	adds	r2, #24
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d023      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049e4:	3218      	adds	r2, #24
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d020      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049ea:	3218      	adds	r2, #24
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d01d      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049f0:	3218      	adds	r2, #24
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d01a      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049f6:	3218      	adds	r2, #24
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d017      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 80049fc:	4a36      	ldr	r2, [pc, #216]	; (8004ad8 <HAL_DMA_Start_IT+0x294>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d014      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a02:	3214      	adds	r2, #20
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d011      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a08:	3214      	adds	r2, #20
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a0e:	3214      	adds	r2, #20
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a14:	3214      	adds	r2, #20
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d008      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a1a:	3214      	adds	r2, #20
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d005      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a20:	3214      	adds	r2, #20
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d002      	beq.n	8004a2c <HAL_DMA_Start_IT+0x1e8>
 8004a26:	3214      	adds	r2, #20
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10e      	bne.n	8004a4a <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004a34:	d003      	beq.n	8004a3e <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004a3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004a40:	b11b      	cbz	r3, 8004a4a <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <HAL_DMA_Start_IT+0x28c>)
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <HAL_DMA_Start_IT+0x290>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bf18      	it	ne
 8004a54:	428b      	cmpne	r3, r1
 8004a56:	d030      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a58:	3218      	adds	r2, #24
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02d      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a5e:	3218      	adds	r2, #24
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02a      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a64:	3218      	adds	r2, #24
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d027      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a6a:	3218      	adds	r2, #24
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d024      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a70:	3218      	adds	r2, #24
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d021      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a76:	3218      	adds	r2, #24
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01e      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a7c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d01a      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a84:	3218      	adds	r2, #24
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d017      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a8a:	3218      	adds	r2, #24
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d014      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a90:	3218      	adds	r2, #24
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d011      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a96:	3218      	adds	r2, #24
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004a9c:	3218      	adds	r2, #24
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004aa2:	3218      	adds	r2, #24
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d008      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004aa8:	3218      	adds	r2, #24
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d005      	beq.n	8004aba <HAL_DMA_Start_IT+0x276>
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e6dd      	b.n	8004876 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004ac4:	e6d7      	b.n	8004876 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
}
 8004ac8:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004aca:	2002      	movs	r0, #2
 8004acc:	e6d3      	b.n	8004876 <HAL_DMA_Start_IT+0x32>
 8004ace:	bf00      	nop
 8004ad0:	40020010 	.word	0x40020010
 8004ad4:	40020028 	.word	0x40020028
 8004ad8:	58025408 	.word	0x58025408

08004adc <HAL_DMA_Abort>:
{
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004ae0:	f7ff f9ea 	bl	8003eb8 <HAL_GetTick>
  if(hdma == NULL)
 8004ae4:	2c00      	cmp	r4, #0
 8004ae6:	f000 8191 	beq.w	8004e0c <HAL_DMA_Abort+0x330>
 8004aea:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aec:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d006      	beq.n	8004b04 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004afa:	2300      	movs	r3, #0
 8004afc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004b00:	2001      	movs	r0, #1
}
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	498c      	ldr	r1, [pc, #560]	; (8004d38 <HAL_DMA_Abort+0x25c>)
 8004b08:	4a8c      	ldr	r2, [pc, #560]	; (8004d3c <HAL_DMA_Abort+0x260>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	bf18      	it	ne
 8004b0e:	428b      	cmpne	r3, r1
 8004b10:	d030      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b12:	3218      	adds	r2, #24
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d02d      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b18:	3218      	adds	r2, #24
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02a      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b1e:	3218      	adds	r2, #24
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d027      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b24:	3218      	adds	r2, #24
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d024      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b2a:	3218      	adds	r2, #24
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d021      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b30:	3218      	adds	r2, #24
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01e      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b36:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01a      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b3e:	3218      	adds	r2, #24
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d017      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b44:	3218      	adds	r2, #24
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d014      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b4a:	3218      	adds	r2, #24
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d011      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b50:	3218      	adds	r2, #24
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b56:	3218      	adds	r2, #24
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00b      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b5c:	3218      	adds	r2, #24
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d008      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
 8004b62:	3218      	adds	r2, #24
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d005      	beq.n	8004b74 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	f022 020e 	bic.w	r2, r2, #14
 8004b6e:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b70:	6826      	ldr	r6, [r4, #0]
 8004b72:	e009      	b.n	8004b88 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	f022 021e 	bic.w	r2, r2, #30
 8004b7a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b7c:	6822      	ldr	r2, [r4, #0]
 8004b7e:	6953      	ldr	r3, [r2, #20]
 8004b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b84:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b86:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	496b      	ldr	r1, [pc, #428]	; (8004d38 <HAL_DMA_Abort+0x25c>)
 8004b8c:	4a6b      	ldr	r2, [pc, #428]	; (8004d3c <HAL_DMA_Abort+0x260>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bf18      	it	ne
 8004b92:	428b      	cmpne	r3, r1
 8004b94:	d042      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004b96:	3218      	adds	r2, #24
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d03f      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004b9c:	3218      	adds	r2, #24
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d03c      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004ba2:	3218      	adds	r2, #24
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d039      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004ba8:	3218      	adds	r2, #24
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d036      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bae:	3218      	adds	r2, #24
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d033      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bb4:	3218      	adds	r2, #24
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d030      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02c      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bc2:	3218      	adds	r2, #24
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d029      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bc8:	3218      	adds	r2, #24
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d026      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bce:	3218      	adds	r2, #24
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d023      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bd4:	3218      	adds	r2, #24
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d020      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bda:	3218      	adds	r2, #24
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01d      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004be0:	3218      	adds	r2, #24
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01a      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004be6:	3218      	adds	r2, #24
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d017      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bec:	4a54      	ldr	r2, [pc, #336]	; (8004d40 <HAL_DMA_Abort+0x264>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d014      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bf2:	3214      	adds	r2, #20
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d011      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bf8:	3214      	adds	r2, #20
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004bfe:	3214      	adds	r2, #20
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004c04:	3214      	adds	r2, #20
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d008      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004c0a:	3214      	adds	r2, #20
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d005      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004c10:	3214      	adds	r2, #20
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d002      	beq.n	8004c1c <HAL_DMA_Abort+0x140>
 8004c16:	3214      	adds	r2, #20
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d104      	bne.n	8004c26 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c24:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	4943      	ldr	r1, [pc, #268]	; (8004d38 <HAL_DMA_Abort+0x25c>)
 8004c2a:	4a44      	ldr	r2, [pc, #272]	; (8004d3c <HAL_DMA_Abort+0x260>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bf18      	it	ne
 8004c30:	428b      	cmpne	r3, r1
 8004c32:	d02f      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c34:	3218      	adds	r2, #24
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02c      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c3a:	3218      	adds	r2, #24
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d029      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c40:	3218      	adds	r2, #24
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d026      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c46:	3218      	adds	r2, #24
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d023      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c4c:	3218      	adds	r2, #24
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d020      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c52:	3218      	adds	r2, #24
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c58:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d019      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c60:	3218      	adds	r2, #24
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d016      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c66:	3218      	adds	r2, #24
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c6c:	3218      	adds	r2, #24
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d010      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c72:	3218      	adds	r2, #24
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00d      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c78:	3218      	adds	r2, #24
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00a      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c7e:	3218      	adds	r2, #24
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d007      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c84:	3218      	adds	r2, #24
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_Abort+0x1b8>
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e003      	b.n	8004c9c <HAL_DMA_Abort+0x1c0>
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c9c:	6833      	ldr	r3, [r6, #0]
 8004c9e:	f013 0f01 	tst.w	r3, #1
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ca4:	f7ff f908 	bl	8003eb8 <HAL_GetTick>
 8004ca8:	1b43      	subs	r3, r0, r5
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d9f6      	bls.n	8004c9c <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e71f      	b.n	8004b02 <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	491c      	ldr	r1, [pc, #112]	; (8004d38 <HAL_DMA_Abort+0x25c>)
 8004cc6:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <HAL_DMA_Abort+0x260>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	bf18      	it	ne
 8004ccc:	428b      	cmpne	r3, r1
 8004cce:	d039      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cd0:	3218      	adds	r2, #24
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d036      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cd6:	3218      	adds	r2, #24
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d033      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cdc:	3218      	adds	r2, #24
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d030      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004ce2:	3218      	adds	r2, #24
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d02d      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004ce8:	3218      	adds	r2, #24
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02a      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cee:	3218      	adds	r2, #24
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d027      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cf4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d023      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004cfc:	3218      	adds	r2, #24
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d020      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d02:	3218      	adds	r2, #24
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d01d      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d08:	3218      	adds	r2, #24
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01a      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d0e:	3218      	adds	r2, #24
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d017      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d14:	3218      	adds	r2, #24
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d014      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d1a:	3218      	adds	r2, #24
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d011      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
 8004d20:	3218      	adds	r2, #24
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00e      	beq.n	8004d44 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d26:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d2a:	f003 021f 	and.w	r2, r3, #31
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4093      	lsls	r3, r2
 8004d32:	604b      	str	r3, [r1, #4]
 8004d34:	e00d      	b.n	8004d52 <HAL_DMA_Abort+0x276>
 8004d36:	bf00      	nop
 8004d38:	40020010 	.word	0x40020010
 8004d3c:	40020028 	.word	0x40020028
 8004d40:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d44:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d48:	f003 021f 	and.w	r2, r3, #31
 8004d4c:	233f      	movs	r3, #63	; 0x3f
 8004d4e:	4093      	lsls	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	492e      	ldr	r1, [pc, #184]	; (8004e10 <HAL_DMA_Abort+0x334>)
 8004d56:	4a2f      	ldr	r2, [pc, #188]	; (8004e14 <HAL_DMA_Abort+0x338>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	bf18      	it	ne
 8004d5c:	428b      	cmpne	r3, r1
 8004d5e:	d042      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d60:	3218      	adds	r2, #24
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d03f      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d66:	3218      	adds	r2, #24
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03c      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d6c:	3218      	adds	r2, #24
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d039      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d72:	3218      	adds	r2, #24
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d036      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d78:	3218      	adds	r2, #24
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d033      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d7e:	3218      	adds	r2, #24
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d030      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d84:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d02c      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d8c:	3218      	adds	r2, #24
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d029      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d92:	3218      	adds	r2, #24
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d026      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d98:	3218      	adds	r2, #24
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d023      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004d9e:	3218      	adds	r2, #24
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d020      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004da4:	3218      	adds	r2, #24
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01d      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004daa:	3218      	adds	r2, #24
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d01a      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004db0:	3218      	adds	r2, #24
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d017      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <HAL_DMA_Abort+0x33c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d014      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dbc:	3214      	adds	r2, #20
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d011      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dc2:	3214      	adds	r2, #20
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dc8:	3214      	adds	r2, #20
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00b      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dce:	3214      	adds	r2, #20
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d008      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dd4:	3214      	adds	r2, #20
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d005      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004dda:	3214      	adds	r2, #20
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d002      	beq.n	8004de6 <HAL_DMA_Abort+0x30a>
 8004de0:	3214      	adds	r2, #20
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10b      	bne.n	8004dfe <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004de8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004dea:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004dec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004dee:	b133      	cbz	r3, 8004dfe <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004dfa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004dfc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004e04:	2000      	movs	r0, #0
 8004e06:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004e0a:	e67a      	b.n	8004b02 <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	e678      	b.n	8004b02 <HAL_DMA_Abort+0x26>
 8004e10:	40020010 	.word	0x40020010
 8004e14:	40020028 	.word	0x40020028
 8004e18:	58025408 	.word	0x58025408

08004e1c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f000 8128 	beq.w	8005072 <HAL_DMA_Abort_IT+0x256>
{
 8004e22:	b508      	push	{r3, lr}
 8004e24:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e26:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d003      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004e34:	2001      	movs	r0, #1
}
 8004e36:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e38:	6803      	ldr	r3, [r0, #0]
 8004e3a:	4890      	ldr	r0, [pc, #576]	; (800507c <HAL_DMA_Abort_IT+0x260>)
 8004e3c:	4990      	ldr	r1, [pc, #576]	; (8005080 <HAL_DMA_Abort_IT+0x264>)
 8004e3e:	428b      	cmp	r3, r1
 8004e40:	bf18      	it	ne
 8004e42:	4283      	cmpne	r3, r0
 8004e44:	bf0c      	ite	eq
 8004e46:	2001      	moveq	r0, #1
 8004e48:	2000      	movne	r0, #0
 8004e4a:	d065      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e4c:	3118      	adds	r1, #24
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d062      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e52:	3118      	adds	r1, #24
 8004e54:	428b      	cmp	r3, r1
 8004e56:	d05f      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e58:	3118      	adds	r1, #24
 8004e5a:	428b      	cmp	r3, r1
 8004e5c:	d05c      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e5e:	3118      	adds	r1, #24
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d059      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e64:	3118      	adds	r1, #24
 8004e66:	428b      	cmp	r3, r1
 8004e68:	d056      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e6a:	3118      	adds	r1, #24
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	d053      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e70:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004e74:	428b      	cmp	r3, r1
 8004e76:	d04f      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e78:	3118      	adds	r1, #24
 8004e7a:	428b      	cmp	r3, r1
 8004e7c:	d04c      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e7e:	3118      	adds	r1, #24
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d049      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e84:	3118      	adds	r1, #24
 8004e86:	428b      	cmp	r3, r1
 8004e88:	d046      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e8a:	3118      	adds	r1, #24
 8004e8c:	428b      	cmp	r3, r1
 8004e8e:	d043      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e90:	3118      	adds	r1, #24
 8004e92:	428b      	cmp	r3, r1
 8004e94:	d040      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e96:	3118      	adds	r1, #24
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	d03d      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
 8004e9c:	3118      	adds	r1, #24
 8004e9e:	428b      	cmp	r3, r1
 8004ea0:	d03a      	beq.n	8004f18 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	f021 010e 	bic.w	r1, r1, #14
 8004ea8:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8004eaa:	6813      	ldr	r3, [r2, #0]
 8004eac:	4873      	ldr	r0, [pc, #460]	; (800507c <HAL_DMA_Abort_IT+0x260>)
 8004eae:	4974      	ldr	r1, [pc, #464]	; (8005080 <HAL_DMA_Abort_IT+0x264>)
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	bf18      	it	ne
 8004eb4:	4283      	cmpne	r3, r0
 8004eb6:	d06a      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004eb8:	4972      	ldr	r1, [pc, #456]	; (8005084 <HAL_DMA_Abort_IT+0x268>)
 8004eba:	428b      	cmp	r3, r1
 8004ebc:	d067      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ebe:	3118      	adds	r1, #24
 8004ec0:	428b      	cmp	r3, r1
 8004ec2:	d064      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ec4:	3118      	adds	r1, #24
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	d061      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004eca:	3118      	adds	r1, #24
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	d05e      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ed0:	3118      	adds	r1, #24
 8004ed2:	428b      	cmp	r3, r1
 8004ed4:	d05b      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ed6:	3118      	adds	r1, #24
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d058      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004edc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	d054      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ee4:	3118      	adds	r1, #24
 8004ee6:	428b      	cmp	r3, r1
 8004ee8:	d051      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004eea:	3118      	adds	r1, #24
 8004eec:	428b      	cmp	r3, r1
 8004eee:	d04e      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ef0:	3118      	adds	r1, #24
 8004ef2:	428b      	cmp	r3, r1
 8004ef4:	d04b      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004ef6:	3118      	adds	r1, #24
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d048      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004efc:	3118      	adds	r1, #24
 8004efe:	428b      	cmp	r3, r1
 8004f00:	d045      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004f02:	3118      	adds	r1, #24
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d042      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004f08:	3118      	adds	r1, #24
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	d03f      	beq.n	8004f8e <HAL_DMA_Abort_IT+0x172>
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	f021 0101 	bic.w	r1, r1, #1
 8004f14:	6019      	str	r1, [r3, #0]
 8004f16:	e03e      	b.n	8004f96 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f18:	2104      	movs	r1, #4
 8004f1a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004f1e:	bb80      	cbnz	r0, 8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f20:	4a58      	ldr	r2, [pc, #352]	; (8005084 <HAL_DMA_Abort_IT+0x268>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02d      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f26:	3218      	adds	r2, #24
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d02a      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f2c:	3218      	adds	r2, #24
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f32:	3218      	adds	r2, #24
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d024      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f38:	3218      	adds	r2, #24
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d021      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f3e:	3218      	adds	r2, #24
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01e      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f44:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d01a      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f4c:	3218      	adds	r2, #24
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d017      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f52:	3218      	adds	r2, #24
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d014      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f58:	3218      	adds	r2, #24
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d011      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f5e:	3218      	adds	r2, #24
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f64:	3218      	adds	r2, #24
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f6a:	3218      	adds	r2, #24
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d008      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f70:	3218      	adds	r2, #24
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d005      	beq.n	8004f82 <HAL_DMA_Abort_IT+0x166>
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f022 0201 	bic.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f7e:	2000      	movs	r0, #0
 8004f80:	e759      	b.n	8004e36 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f8a:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004f8c:	e753      	b.n	8004e36 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004f8e:	6819      	ldr	r1, [r3, #0]
 8004f90:	f021 0101 	bic.w	r1, r1, #1
 8004f94:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	4838      	ldr	r0, [pc, #224]	; (800507c <HAL_DMA_Abort_IT+0x260>)
 8004f9a:	4939      	ldr	r1, [pc, #228]	; (8005080 <HAL_DMA_Abort_IT+0x264>)
 8004f9c:	428b      	cmp	r3, r1
 8004f9e:	bf18      	it	ne
 8004fa0:	4283      	cmpne	r3, r0
 8004fa2:	d042      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fa4:	3118      	adds	r1, #24
 8004fa6:	428b      	cmp	r3, r1
 8004fa8:	d03f      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004faa:	3118      	adds	r1, #24
 8004fac:	428b      	cmp	r3, r1
 8004fae:	d03c      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fb0:	3118      	adds	r1, #24
 8004fb2:	428b      	cmp	r3, r1
 8004fb4:	d039      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fb6:	3118      	adds	r1, #24
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d036      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fbc:	3118      	adds	r1, #24
 8004fbe:	428b      	cmp	r3, r1
 8004fc0:	d033      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fc2:	3118      	adds	r1, #24
 8004fc4:	428b      	cmp	r3, r1
 8004fc6:	d030      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fc8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fd0:	3118      	adds	r1, #24
 8004fd2:	428b      	cmp	r3, r1
 8004fd4:	d029      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fd6:	3118      	adds	r1, #24
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d026      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fdc:	3118      	adds	r1, #24
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d023      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fe2:	3118      	adds	r1, #24
 8004fe4:	428b      	cmp	r3, r1
 8004fe6:	d020      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fe8:	3118      	adds	r1, #24
 8004fea:	428b      	cmp	r3, r1
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004fee:	3118      	adds	r1, #24
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	d01a      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004ff4:	3118      	adds	r1, #24
 8004ff6:	428b      	cmp	r3, r1
 8004ff8:	d017      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8004ffa:	4923      	ldr	r1, [pc, #140]	; (8005088 <HAL_DMA_Abort_IT+0x26c>)
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	d014      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8005000:	3114      	adds	r1, #20
 8005002:	428b      	cmp	r3, r1
 8005004:	d011      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8005006:	3114      	adds	r1, #20
 8005008:	428b      	cmp	r3, r1
 800500a:	d00e      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 800500c:	3114      	adds	r1, #20
 800500e:	428b      	cmp	r3, r1
 8005010:	d00b      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8005012:	3114      	adds	r1, #20
 8005014:	428b      	cmp	r3, r1
 8005016:	d008      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8005018:	3114      	adds	r1, #20
 800501a:	428b      	cmp	r3, r1
 800501c:	d005      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 800501e:	3114      	adds	r1, #20
 8005020:	428b      	cmp	r3, r1
 8005022:	d002      	beq.n	800502a <HAL_DMA_Abort_IT+0x20e>
 8005024:	3114      	adds	r1, #20
 8005026:	428b      	cmp	r3, r1
 8005028:	d117      	bne.n	800505a <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800502a:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800502c:	680b      	ldr	r3, [r1, #0]
 800502e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005032:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005034:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005036:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8005038:	f003 011f 	and.w	r1, r3, #31
 800503c:	2301      	movs	r3, #1
 800503e:	408b      	lsls	r3, r1
 8005040:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005042:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005044:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8005046:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005048:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800504a:	b133      	cbz	r3, 800505a <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800504c:	6819      	ldr	r1, [r3, #0]
 800504e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005052:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005054:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005056:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8005058:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800505a:	2301      	movs	r3, #1
 800505c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005060:	2300      	movs	r3, #0
 8005062:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005066:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005068:	b12b      	cbz	r3, 8005076 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 800506a:	4610      	mov	r0, r2
 800506c:	4798      	blx	r3
  return HAL_OK;
 800506e:	2000      	movs	r0, #0
 8005070:	e6e1      	b.n	8004e36 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8005072:	2001      	movs	r0, #1
}
 8005074:	4770      	bx	lr
  return HAL_OK;
 8005076:	2000      	movs	r0, #0
 8005078:	e6dd      	b.n	8004e36 <HAL_DMA_Abort_IT+0x1a>
 800507a:	bf00      	nop
 800507c:	40020010 	.word	0x40020010
 8005080:	40020028 	.word	0x40020028
 8005084:	40020040 	.word	0x40020040
 8005088:	58025408 	.word	0x58025408

0800508c <HAL_DMA_IRQHandler>:
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	b083      	sub	sp, #12
 8005090:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005096:	4b7d      	ldr	r3, [pc, #500]	; (800528c <HAL_DMA_IRQHandler+0x200>)
 8005098:	681d      	ldr	r5, [r3, #0]
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_DMA_IRQHandler+0x204>)
 800509c:	fba3 3505 	umull	r3, r5, r3, r5
 80050a0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050a2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 80050a4:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 80050a6:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80050aa:	6803      	ldr	r3, [r0, #0]
 80050ac:	4979      	ldr	r1, [pc, #484]	; (8005294 <HAL_DMA_IRQHandler+0x208>)
 80050ae:	487a      	ldr	r0, [pc, #488]	; (8005298 <HAL_DMA_IRQHandler+0x20c>)
 80050b0:	4283      	cmp	r3, r0
 80050b2:	bf18      	it	ne
 80050b4:	428b      	cmpne	r3, r1
 80050b6:	bf0c      	ite	eq
 80050b8:	2001      	moveq	r0, #1
 80050ba:	2000      	movne	r0, #0
 80050bc:	d061      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050be:	4a77      	ldr	r2, [pc, #476]	; (800529c <HAL_DMA_IRQHandler+0x210>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05e      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050c4:	3218      	adds	r2, #24
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d05b      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050ca:	3218      	adds	r2, #24
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d058      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050d0:	3218      	adds	r2, #24
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d055      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050d6:	3218      	adds	r2, #24
 80050d8:	4293      	cmp	r3, r2
 80050da:	d052      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050dc:	3218      	adds	r2, #24
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04f      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04b      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050ea:	3218      	adds	r2, #24
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d048      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050f0:	3218      	adds	r2, #24
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050f6:	3218      	adds	r2, #24
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d042      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 80050fc:	3218      	adds	r2, #24
 80050fe:	4293      	cmp	r3, r2
 8005100:	d03f      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 8005102:	3218      	adds	r2, #24
 8005104:	4293      	cmp	r3, r2
 8005106:	d03c      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 8005108:	3218      	adds	r2, #24
 800510a:	4293      	cmp	r3, r2
 800510c:	d039      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
 800510e:	3218      	adds	r2, #24
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005114:	4962      	ldr	r1, [pc, #392]	; (80052a0 <HAL_DMA_IRQHandler+0x214>)
 8005116:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_DMA_IRQHandler+0x218>)
 8005118:	4293      	cmp	r3, r2
 800511a:	bf18      	it	ne
 800511c:	428b      	cmpne	r3, r1
 800511e:	d012      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 8005120:	4a61      	ldr	r2, [pc, #388]	; (80052a8 <HAL_DMA_IRQHandler+0x21c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00f      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 8005126:	3214      	adds	r2, #20
 8005128:	4293      	cmp	r3, r2
 800512a:	d00c      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 800512c:	3214      	adds	r2, #20
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 8005132:	3214      	adds	r2, #20
 8005134:	4293      	cmp	r3, r2
 8005136:	d006      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 8005138:	3214      	adds	r2, #20
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <HAL_DMA_IRQHandler+0xba>
 800513e:	3214      	adds	r2, #20
 8005140:	4293      	cmp	r3, r2
 8005142:	f040 8261 	bne.w	8005608 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005146:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005148:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800514a:	f001 011f 	and.w	r1, r1, #31
 800514e:	2004      	movs	r0, #4
 8005150:	4088      	lsls	r0, r1
 8005152:	ea10 0f0c 	tst.w	r0, ip
 8005156:	f000 82a7 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x61c>
 800515a:	f012 0f04 	tst.w	r2, #4
 800515e:	f000 82a3 	beq.w	80056a8 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005162:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005164:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005168:	f000 825a 	beq.w	8005620 <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800516c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005170:	f040 8250 	bne.w	8005614 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005174:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8246 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 800517c:	4620      	mov	r0, r4
 800517e:	4798      	blx	r3
 8005180:	e242      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005182:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005184:	f002 011f 	and.w	r1, r2, #31
 8005188:	2208      	movs	r2, #8
 800518a:	408a      	lsls	r2, r1
 800518c:	4232      	tst	r2, r6
 800518e:	d041      	beq.n	8005214 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005190:	bb70      	cbnz	r0, 80051f0 <HAL_DMA_IRQHandler+0x164>
 8005192:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_DMA_IRQHandler+0x210>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d02b      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 8005198:	3218      	adds	r2, #24
 800519a:	4293      	cmp	r3, r2
 800519c:	d028      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 800519e:	3218      	adds	r2, #24
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d025      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051a4:	3218      	adds	r2, #24
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d022      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051aa:	3218      	adds	r2, #24
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d01f      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051b0:	3218      	adds	r2, #24
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051b6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d018      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051be:	3218      	adds	r2, #24
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d015      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051c4:	3218      	adds	r2, #24
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d012      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051ca:	3218      	adds	r2, #24
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00f      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051d0:	3218      	adds	r2, #24
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00c      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051d6:	3218      	adds	r2, #24
 80051d8:	4293      	cmp	r3, r2
 80051da:	d009      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051dc:	3218      	adds	r2, #24
 80051de:	4293      	cmp	r3, r2
 80051e0:	d006      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051e2:	3218      	adds	r2, #24
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x164>
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80051ee:	e002      	b.n	80051f6 <HAL_DMA_IRQHandler+0x16a>
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80051f6:	b16a      	cbz	r2, 8005214 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f022 0204 	bic.w	r2, r2, #4
 80051fe:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005200:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005202:	f003 021f 	and.w	r2, r3, #31
 8005206:	2308      	movs	r3, #8
 8005208:	4093      	lsls	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800520c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005214:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005216:	f002 021f 	and.w	r2, r2, #31
 800521a:	fa26 f302 	lsr.w	r3, r6, r2
 800521e:	f013 0f01 	tst.w	r3, #1
 8005222:	d047      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	481b      	ldr	r0, [pc, #108]	; (8005294 <HAL_DMA_IRQHandler+0x208>)
 8005228:	491b      	ldr	r1, [pc, #108]	; (8005298 <HAL_DMA_IRQHandler+0x20c>)
 800522a:	428b      	cmp	r3, r1
 800522c:	bf18      	it	ne
 800522e:	4283      	cmpne	r3, r0
 8005230:	d03c      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005232:	3118      	adds	r1, #24
 8005234:	428b      	cmp	r3, r1
 8005236:	d039      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005238:	3118      	adds	r1, #24
 800523a:	428b      	cmp	r3, r1
 800523c:	d036      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 800523e:	3118      	adds	r1, #24
 8005240:	428b      	cmp	r3, r1
 8005242:	d033      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005244:	3118      	adds	r1, #24
 8005246:	428b      	cmp	r3, r1
 8005248:	d030      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 800524a:	3118      	adds	r1, #24
 800524c:	428b      	cmp	r3, r1
 800524e:	d02d      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005250:	3118      	adds	r1, #24
 8005252:	428b      	cmp	r3, r1
 8005254:	d02a      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005256:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800525a:	428b      	cmp	r3, r1
 800525c:	d026      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 800525e:	3118      	adds	r1, #24
 8005260:	428b      	cmp	r3, r1
 8005262:	d023      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005264:	3118      	adds	r1, #24
 8005266:	428b      	cmp	r3, r1
 8005268:	d020      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 800526a:	3118      	adds	r1, #24
 800526c:	428b      	cmp	r3, r1
 800526e:	d01d      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005270:	3118      	adds	r1, #24
 8005272:	428b      	cmp	r3, r1
 8005274:	d01a      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005276:	3118      	adds	r1, #24
 8005278:	428b      	cmp	r3, r1
 800527a:	d017      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 800527c:	3118      	adds	r1, #24
 800527e:	428b      	cmp	r3, r1
 8005280:	d014      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005282:	3118      	adds	r1, #24
 8005284:	428b      	cmp	r3, r1
 8005286:	d011      	beq.n	80052ac <HAL_DMA_IRQHandler+0x220>
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	e013      	b.n	80052b4 <HAL_DMA_IRQHandler+0x228>
 800528c:	200008f4 	.word	0x200008f4
 8005290:	1b4e81b5 	.word	0x1b4e81b5
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	58025408 	.word	0x58025408
 80052a4:	5802541c 	.word	0x5802541c
 80052a8:	58025430 	.word	0x58025430
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052b2:	d13b      	bne.n	800532c <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052b4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2204      	movs	r2, #4
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	4233      	tst	r3, r6
 80052c2:	d03f      	beq.n	8005344 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	4896      	ldr	r0, [pc, #600]	; (8005520 <HAL_DMA_IRQHandler+0x494>)
 80052c8:	4996      	ldr	r1, [pc, #600]	; (8005524 <HAL_DMA_IRQHandler+0x498>)
 80052ca:	428a      	cmp	r2, r1
 80052cc:	bf18      	it	ne
 80052ce:	4282      	cmpne	r2, r0
 80052d0:	d034      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052d2:	3118      	adds	r1, #24
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d031      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052d8:	3118      	adds	r1, #24
 80052da:	428a      	cmp	r2, r1
 80052dc:	d02e      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052de:	3118      	adds	r1, #24
 80052e0:	428a      	cmp	r2, r1
 80052e2:	d02b      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052e4:	3118      	adds	r1, #24
 80052e6:	428a      	cmp	r2, r1
 80052e8:	d028      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052ea:	3118      	adds	r1, #24
 80052ec:	428a      	cmp	r2, r1
 80052ee:	d025      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052f0:	3118      	adds	r1, #24
 80052f2:	428a      	cmp	r2, r1
 80052f4:	d022      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052f6:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80052fa:	428a      	cmp	r2, r1
 80052fc:	d01e      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 80052fe:	3118      	adds	r1, #24
 8005300:	428a      	cmp	r2, r1
 8005302:	d01b      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 8005304:	3118      	adds	r1, #24
 8005306:	428a      	cmp	r2, r1
 8005308:	d018      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 800530a:	3118      	adds	r1, #24
 800530c:	428a      	cmp	r2, r1
 800530e:	d015      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 8005310:	3118      	adds	r1, #24
 8005312:	428a      	cmp	r2, r1
 8005314:	d012      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 8005316:	3118      	adds	r1, #24
 8005318:	428a      	cmp	r2, r1
 800531a:	d00f      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 800531c:	3118      	adds	r1, #24
 800531e:	428a      	cmp	r2, r1
 8005320:	d00c      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 8005322:	3118      	adds	r1, #24
 8005324:	428a      	cmp	r2, r1
 8005326:	d009      	beq.n	800533c <HAL_DMA_IRQHandler+0x2b0>
 8005328:	6813      	ldr	r3, [r2, #0]
 800532a:	e00b      	b.n	8005344 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800532c:	2301      	movs	r3, #1
 800532e:	4093      	lsls	r3, r2
 8005330:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005332:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	6563      	str	r3, [r4, #84]	; 0x54
 800533a:	e7bb      	b.n	80052b4 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	f012 0f02 	tst.w	r2, #2
 8005342:	d13d      	bne.n	80053c0 <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005344:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2210      	movs	r2, #16
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	4233      	tst	r3, r6
 8005352:	d05f      	beq.n	8005414 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005354:	6822      	ldr	r2, [r4, #0]
 8005356:	4872      	ldr	r0, [pc, #456]	; (8005520 <HAL_DMA_IRQHandler+0x494>)
 8005358:	4972      	ldr	r1, [pc, #456]	; (8005524 <HAL_DMA_IRQHandler+0x498>)
 800535a:	428a      	cmp	r2, r1
 800535c:	bf18      	it	ne
 800535e:	4282      	cmpne	r2, r0
 8005360:	d034      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005362:	3118      	adds	r1, #24
 8005364:	428a      	cmp	r2, r1
 8005366:	d031      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005368:	3118      	adds	r1, #24
 800536a:	428a      	cmp	r2, r1
 800536c:	d02e      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 800536e:	3118      	adds	r1, #24
 8005370:	428a      	cmp	r2, r1
 8005372:	d02b      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005374:	3118      	adds	r1, #24
 8005376:	428a      	cmp	r2, r1
 8005378:	d028      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 800537a:	3118      	adds	r1, #24
 800537c:	428a      	cmp	r2, r1
 800537e:	d025      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005380:	3118      	adds	r1, #24
 8005382:	428a      	cmp	r2, r1
 8005384:	d022      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005386:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800538a:	428a      	cmp	r2, r1
 800538c:	d01e      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 800538e:	3118      	adds	r1, #24
 8005390:	428a      	cmp	r2, r1
 8005392:	d01b      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 8005394:	3118      	adds	r1, #24
 8005396:	428a      	cmp	r2, r1
 8005398:	d018      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 800539a:	3118      	adds	r1, #24
 800539c:	428a      	cmp	r2, r1
 800539e:	d015      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 80053a0:	3118      	adds	r1, #24
 80053a2:	428a      	cmp	r2, r1
 80053a4:	d012      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 80053a6:	3118      	adds	r1, #24
 80053a8:	428a      	cmp	r2, r1
 80053aa:	d00f      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 80053ac:	3118      	adds	r1, #24
 80053ae:	428a      	cmp	r2, r1
 80053b0:	d00c      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 80053b2:	3118      	adds	r1, #24
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_IRQHandler+0x340>
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80053be:	e008      	b.n	80053d2 <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053c0:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	6563      	str	r3, [r4, #84]	; 0x54
 80053ca:	e7bb      	b.n	8005344 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80053d2:	b1fa      	cbz	r2, 8005414 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053d4:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80053de:	d00d      	beq.n	80053fc <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80053e6:	d104      	bne.n	80053f2 <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 80053e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ea:	b19b      	cbz	r3, 8005414 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 80053ec:	4620      	mov	r0, r4
 80053ee:	4798      	blx	r3
 80053f0:	e010      	b.n	8005414 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80053f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80053f4:	b173      	cbz	r3, 8005414 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 80053f6:	4620      	mov	r0, r4
 80053f8:	4798      	blx	r3
 80053fa:	e00b      	b.n	8005414 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005402:	d103      	bne.n	800540c <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	f022 0208 	bic.w	r2, r2, #8
 800540a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800540c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800540e:	b10b      	cbz	r3, 8005414 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8005410:	4620      	mov	r0, r4
 8005412:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005414:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2220      	movs	r2, #32
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	4233      	tst	r3, r6
 8005422:	f000 8093 	beq.w	800554c <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	483d      	ldr	r0, [pc, #244]	; (8005520 <HAL_DMA_IRQHandler+0x494>)
 800542a:	493e      	ldr	r1, [pc, #248]	; (8005524 <HAL_DMA_IRQHandler+0x498>)
 800542c:	428a      	cmp	r2, r1
 800542e:	bf18      	it	ne
 8005430:	4282      	cmpne	r2, r0
 8005432:	d02e      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005434:	3118      	adds	r1, #24
 8005436:	428a      	cmp	r2, r1
 8005438:	d02b      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 800543a:	3118      	adds	r1, #24
 800543c:	428a      	cmp	r2, r1
 800543e:	d028      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005440:	3118      	adds	r1, #24
 8005442:	428a      	cmp	r2, r1
 8005444:	d025      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005446:	3118      	adds	r1, #24
 8005448:	428a      	cmp	r2, r1
 800544a:	d022      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 800544c:	3118      	adds	r1, #24
 800544e:	428a      	cmp	r2, r1
 8005450:	d01f      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005452:	3118      	adds	r1, #24
 8005454:	428a      	cmp	r2, r1
 8005456:	d01c      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005458:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800545c:	428a      	cmp	r2, r1
 800545e:	d018      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005460:	3118      	adds	r1, #24
 8005462:	428a      	cmp	r2, r1
 8005464:	d015      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005466:	3118      	adds	r1, #24
 8005468:	428a      	cmp	r2, r1
 800546a:	d012      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 800546c:	3118      	adds	r1, #24
 800546e:	428a      	cmp	r2, r1
 8005470:	d00f      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005472:	3118      	adds	r1, #24
 8005474:	428a      	cmp	r2, r1
 8005476:	d00c      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005478:	3118      	adds	r1, #24
 800547a:	428a      	cmp	r2, r1
 800547c:	d009      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 800547e:	3118      	adds	r1, #24
 8005480:	428a      	cmp	r2, r1
 8005482:	d006      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 8005484:	3118      	adds	r1, #24
 8005486:	428a      	cmp	r2, r1
 8005488:	d003      	beq.n	8005492 <HAL_DMA_IRQHandler+0x406>
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8005490:	e002      	b.n	8005498 <HAL_DMA_IRQHandler+0x40c>
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005498:	2a00      	cmp	r2, #0
 800549a:	d057      	beq.n	800554c <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800549c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800549e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80054b0:	d03a      	beq.n	8005528 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80054b8:	d12d      	bne.n	8005516 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 80054ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d045      	beq.n	800554c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 80054c0:	4620      	mov	r0, r4
 80054c2:	4798      	blx	r3
 80054c4:	e042      	b.n	800554c <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	6813      	ldr	r3, [r2, #0]
 80054ca:	f023 0316 	bic.w	r3, r3, #22
 80054ce:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	6953      	ldr	r3, [r2, #20]
 80054d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054dc:	b1bb      	cbz	r3, 800550e <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054de:	6822      	ldr	r2, [r4, #0]
 80054e0:	6813      	ldr	r3, [r2, #0]
 80054e2:	f023 0308 	bic.w	r3, r3, #8
 80054e6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054ea:	f003 021f 	and.w	r2, r3, #31
 80054ee:	233f      	movs	r3, #63	; 0x3f
 80054f0:	4093      	lsls	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8005500:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8080 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8005508:	4620      	mov	r0, r4
 800550a:	4798      	blx	r3
          return;
 800550c:	e07c      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800550e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e4      	bne.n	80054de <HAL_DMA_IRQHandler+0x452>
 8005514:	e7e8      	b.n	80054e8 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 8005516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005518:	b1c3      	cbz	r3, 800554c <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 800551a:	4620      	mov	r0, r4
 800551c:	4798      	blx	r3
 800551e:	e015      	b.n	800554c <HAL_DMA_IRQHandler+0x4c0>
 8005520:	40020010 	.word	0x40020010
 8005524:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800552e:	d109      	bne.n	8005544 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	f022 0210 	bic.w	r2, r2, #16
 8005536:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005538:	2301      	movs	r3, #1
 800553a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800553e:	2300      	movs	r3, #0
 8005540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8005544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005546:	b10b      	cbz	r3, 800554c <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005548:	4620      	mov	r0, r4
 800554a:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800554c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05a      	beq.n	8005608 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005552:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005554:	f013 0f01 	tst.w	r3, #1
 8005558:	d052      	beq.n	8005600 <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 800555a:	2304      	movs	r3, #4
 800555c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	4996      	ldr	r1, [pc, #600]	; (80057bc <HAL_DMA_IRQHandler+0x730>)
 8005564:	4a96      	ldr	r2, [pc, #600]	; (80057c0 <HAL_DMA_IRQHandler+0x734>)
 8005566:	4293      	cmp	r3, r2
 8005568:	bf18      	it	ne
 800556a:	428b      	cmpne	r3, r1
 800556c:	d02f      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 800556e:	3218      	adds	r2, #24
 8005570:	4293      	cmp	r3, r2
 8005572:	d02c      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 8005574:	3218      	adds	r2, #24
 8005576:	4293      	cmp	r3, r2
 8005578:	d029      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 800557a:	3218      	adds	r2, #24
 800557c:	4293      	cmp	r3, r2
 800557e:	d026      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 8005580:	3218      	adds	r2, #24
 8005582:	4293      	cmp	r3, r2
 8005584:	d023      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 8005586:	3218      	adds	r2, #24
 8005588:	4293      	cmp	r3, r2
 800558a:	d020      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 800558c:	3218      	adds	r2, #24
 800558e:	4293      	cmp	r3, r2
 8005590:	d01d      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 8005592:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005596:	4293      	cmp	r3, r2
 8005598:	d019      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 800559a:	3218      	adds	r2, #24
 800559c:	4293      	cmp	r3, r2
 800559e:	d016      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055a0:	3218      	adds	r2, #24
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055a6:	3218      	adds	r2, #24
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d010      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055ac:	3218      	adds	r2, #24
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00d      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055b2:	3218      	adds	r2, #24
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00a      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055b8:	3218      	adds	r2, #24
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055be:	3218      	adds	r2, #24
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_IRQHandler+0x542>
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e003      	b.n	80055d6 <HAL_DMA_IRQHandler+0x54a>
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	3301      	adds	r3, #1
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	42ab      	cmp	r3, r5
 80055de:	d804      	bhi.n	80055ea <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f013 0f01 	tst.w	r3, #1
 80055e8:	d1f5      	bne.n	80055d6 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f013 0f01 	tst.w	r3, #1
 80055f2:	d00b      	beq.n	800560c <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80055f4:	2303      	movs	r3, #3
 80055f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80055fa:	2300      	movs	r3, #0
 80055fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005600:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005602:	b10b      	cbz	r3, 8005608 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005604:	4620      	mov	r0, r4
 8005606:	4798      	blx	r3
}
 8005608:	b003      	add	sp, #12
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 800560c:	2301      	movs	r3, #1
 800560e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8005612:	e7f2      	b.n	80055fa <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8005614:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f6      	beq.n	8005608 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 800561a:	4620      	mov	r0, r4
 800561c:	4798      	blx	r3
 800561e:	e7f3      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005620:	f012 0f20 	tst.w	r2, #32
 8005624:	d13a      	bne.n	800569c <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	4964      	ldr	r1, [pc, #400]	; (80057bc <HAL_DMA_IRQHandler+0x730>)
 800562a:	4a65      	ldr	r2, [pc, #404]	; (80057c0 <HAL_DMA_IRQHandler+0x734>)
 800562c:	4293      	cmp	r3, r2
 800562e:	bf18      	it	ne
 8005630:	428b      	cmpne	r3, r1
 8005632:	d02f      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005634:	3218      	adds	r2, #24
 8005636:	4293      	cmp	r3, r2
 8005638:	d02c      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 800563a:	3218      	adds	r2, #24
 800563c:	4293      	cmp	r3, r2
 800563e:	d029      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005640:	3218      	adds	r2, #24
 8005642:	4293      	cmp	r3, r2
 8005644:	d026      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005646:	3218      	adds	r2, #24
 8005648:	4293      	cmp	r3, r2
 800564a:	d023      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 800564c:	3218      	adds	r2, #24
 800564e:	4293      	cmp	r3, r2
 8005650:	d020      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005652:	3218      	adds	r2, #24
 8005654:	4293      	cmp	r3, r2
 8005656:	d01d      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005658:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800565c:	4293      	cmp	r3, r2
 800565e:	d019      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005660:	3218      	adds	r2, #24
 8005662:	4293      	cmp	r3, r2
 8005664:	d016      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005666:	3218      	adds	r2, #24
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 800566c:	3218      	adds	r2, #24
 800566e:	4293      	cmp	r3, r2
 8005670:	d010      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005672:	3218      	adds	r2, #24
 8005674:	4293      	cmp	r3, r2
 8005676:	d00d      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005678:	3218      	adds	r2, #24
 800567a:	4293      	cmp	r3, r2
 800567c:	d00a      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 800567e:	3218      	adds	r2, #24
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 8005684:	3218      	adds	r2, #24
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_DMA_IRQHandler+0x608>
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f022 0204 	bic.w	r2, r2, #4
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e003      	b.n	800569c <HAL_DMA_IRQHandler+0x610>
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f022 0208 	bic.w	r2, r2, #8
 800569a:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800569c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0b2      	beq.n	8005608 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 80056a2:	4620      	mov	r0, r4
 80056a4:	4798      	blx	r3
 80056a6:	e7af      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80056a8:	2002      	movs	r0, #2
 80056aa:	4088      	lsls	r0, r1
 80056ac:	ea10 0f0c 	tst.w	r0, ip
 80056b0:	d060      	beq.n	8005774 <HAL_DMA_IRQHandler+0x6e8>
 80056b2:	f012 0f02 	tst.w	r2, #2
 80056b6:	d05d      	beq.n	8005774 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056b8:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80056be:	d00e      	beq.n	80056de <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056c0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80056c4:	d105      	bne.n	80056d2 <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 80056c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09d      	beq.n	8005608 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 80056cc:	4620      	mov	r0, r4
 80056ce:	4798      	blx	r3
 80056d0:	e79a      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 80056d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d097      	beq.n	8005608 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 80056d8:	4620      	mov	r0, r4
 80056da:	4798      	blx	r3
 80056dc:	e794      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056de:	f012 0f20 	tst.w	r2, #32
 80056e2:	d140      	bne.n	8005766 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	4935      	ldr	r1, [pc, #212]	; (80057bc <HAL_DMA_IRQHandler+0x730>)
 80056e8:	4a35      	ldr	r2, [pc, #212]	; (80057c0 <HAL_DMA_IRQHandler+0x734>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	bf18      	it	ne
 80056ee:	428b      	cmpne	r3, r1
 80056f0:	d02f      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 80056f2:	3218      	adds	r2, #24
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d02c      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 80056f8:	3218      	adds	r2, #24
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d029      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 80056fe:	3218      	adds	r2, #24
 8005700:	4293      	cmp	r3, r2
 8005702:	d026      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005704:	3218      	adds	r2, #24
 8005706:	4293      	cmp	r3, r2
 8005708:	d023      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 800570a:	3218      	adds	r2, #24
 800570c:	4293      	cmp	r3, r2
 800570e:	d020      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005710:	3218      	adds	r2, #24
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005716:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800571a:	4293      	cmp	r3, r2
 800571c:	d019      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 800571e:	3218      	adds	r2, #24
 8005720:	4293      	cmp	r3, r2
 8005722:	d016      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005724:	3218      	adds	r2, #24
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 800572a:	3218      	adds	r2, #24
 800572c:	4293      	cmp	r3, r2
 800572e:	d010      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005730:	3218      	adds	r2, #24
 8005732:	4293      	cmp	r3, r2
 8005734:	d00d      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005736:	3218      	adds	r2, #24
 8005738:	4293      	cmp	r3, r2
 800573a:	d00a      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 800573c:	3218      	adds	r2, #24
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005742:	3218      	adds	r2, #24
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_IRQHandler+0x6c6>
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	f022 020a 	bic.w	r2, r2, #10
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e003      	b.n	800575a <HAL_DMA_IRQHandler+0x6ce>
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	f022 0214 	bic.w	r2, r2, #20
 8005758:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800575a:	2301      	movs	r3, #1
 800575c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005760:	2300      	movs	r3, #0
 8005762:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	f43f af4d 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800576e:	4620      	mov	r0, r4
 8005770:	4798      	blx	r3
 8005772:	e749      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005774:	2008      	movs	r0, #8
 8005776:	fa00 f101 	lsl.w	r1, r0, r1
 800577a:	ea11 0f0c 	tst.w	r1, ip
 800577e:	f43f af43 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
 8005782:	f012 0f08 	tst.w	r2, #8
 8005786:	f43f af3f 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f022 020e 	bic.w	r2, r2, #14
 8005790:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005792:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005794:	f003 031f 	and.w	r3, r3, #31
 8005798:	2201      	movs	r2, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 80057a2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80057a6:	2300      	movs	r3, #0
 80057a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 80057ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f43f af2a 	beq.w	8005608 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80057b4:	4620      	mov	r0, r4
 80057b6:	4798      	blx	r3
  }
 80057b8:	e726      	b.n	8005608 <HAL_DMA_IRQHandler+0x57c>
 80057ba:	bf00      	nop
 80057bc:	40020010 	.word	0x40020010
 80057c0:	40020028 	.word	0x40020028

080057c4 <HAL_DMA_GetState>:
  return hdma->State;
 80057c4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80057c8:	4770      	bx	lr

080057ca <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80057ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80057d4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057d6:	e06b      	b.n	80058b0 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057d8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80057da:	005e      	lsls	r6, r3, #1
 80057dc:	2403      	movs	r4, #3
 80057de:	40b4      	lsls	r4, r6
 80057e0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057e4:	68cc      	ldr	r4, [r1, #12]
 80057e6:	40b4      	lsls	r4, r6
 80057e8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80057ea:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ec:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057ee:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057f2:	684c      	ldr	r4, [r1, #4]
 80057f4:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80057f8:	409c      	lsls	r4, r3
 80057fa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80057fc:	6044      	str	r4, [r0, #4]
 80057fe:	e069      	b.n	80058d4 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005800:	08dd      	lsrs	r5, r3, #3
 8005802:	3508      	adds	r5, #8
 8005804:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005808:	f003 0c07 	and.w	ip, r3, #7
 800580c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005810:	f04f 0e0f 	mov.w	lr, #15
 8005814:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005818:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800581c:	690c      	ldr	r4, [r1, #16]
 800581e:	fa04 f40c 	lsl.w	r4, r4, ip
 8005822:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005826:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800582a:	e06b      	b.n	8005904 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800582c:	2409      	movs	r4, #9
 800582e:	e000      	b.n	8005832 <HAL_GPIO_Init+0x62>
 8005830:	2400      	movs	r4, #0
 8005832:	fa04 f40e 	lsl.w	r4, r4, lr
 8005836:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005838:	f10c 0c02 	add.w	ip, ip, #2
 800583c:	4d69      	ldr	r5, [pc, #420]	; (80059e4 <HAL_GPIO_Init+0x214>)
 800583e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005842:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005846:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005848:	43d4      	mvns	r4, r2
 800584a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800584e:	684f      	ldr	r7, [r1, #4]
 8005850:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005854:	d001      	beq.n	800585a <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8005856:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800585a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800585e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8005860:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8005862:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005866:	684f      	ldr	r7, [r1, #4]
 8005868:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 800586c:	d001      	beq.n	8005872 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800586e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005872:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005876:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005878:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 800587c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005880:	684f      	ldr	r7, [r1, #4]
 8005882:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005886:	d001      	beq.n	800588c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8005888:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800588c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005890:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005894:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8005898:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800589a:	684e      	ldr	r6, [r1, #4]
 800589c:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80058a0:	d001      	beq.n	80058a6 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 80058a2:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80058a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058aa:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80058ae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058b0:	680a      	ldr	r2, [r1, #0]
 80058b2:	fa32 f403 	lsrs.w	r4, r2, r3
 80058b6:	f000 8092 	beq.w	80059de <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058ba:	f04f 0c01 	mov.w	ip, #1
 80058be:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80058c2:	ea1c 0202 	ands.w	r2, ip, r2
 80058c6:	d0f2      	beq.n	80058ae <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058c8:	684c      	ldr	r4, [r1, #4]
 80058ca:	f004 0403 	and.w	r4, r4, #3
 80058ce:	3c01      	subs	r4, #1
 80058d0:	2c01      	cmp	r4, #1
 80058d2:	d981      	bls.n	80057d8 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058d4:	684c      	ldr	r4, [r1, #4]
 80058d6:	f004 0403 	and.w	r4, r4, #3
 80058da:	2c03      	cmp	r4, #3
 80058dc:	d00c      	beq.n	80058f8 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80058de:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058e0:	005d      	lsls	r5, r3, #1
 80058e2:	f04f 0c03 	mov.w	ip, #3
 80058e6:	fa0c fc05 	lsl.w	ip, ip, r5
 80058ea:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058ee:	688c      	ldr	r4, [r1, #8]
 80058f0:	40ac      	lsls	r4, r5
 80058f2:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80058f6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058f8:	684c      	ldr	r4, [r1, #4]
 80058fa:	f004 0403 	and.w	r4, r4, #3
 80058fe:	2c02      	cmp	r4, #2
 8005900:	f43f af7e 	beq.w	8005800 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005904:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005906:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800590a:	f04f 0c03 	mov.w	ip, #3
 800590e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005912:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005916:	684c      	ldr	r4, [r1, #4]
 8005918:	f004 0403 	and.w	r4, r4, #3
 800591c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005920:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005924:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005926:	684c      	ldr	r4, [r1, #4]
 8005928:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800592c:	d0bf      	beq.n	80058ae <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800592e:	4c2e      	ldr	r4, [pc, #184]	; (80059e8 <HAL_GPIO_Init+0x218>)
 8005930:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8005934:	f045 0502 	orr.w	r5, r5, #2
 8005938:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800593c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8005940:	f004 0402 	and.w	r4, r4, #2
 8005944:	9401      	str	r4, [sp, #4]
 8005946:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005948:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800594c:	f10c 0502 	add.w	r5, ip, #2
 8005950:	4c24      	ldr	r4, [pc, #144]	; (80059e4 <HAL_GPIO_Init+0x214>)
 8005952:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005956:	f003 0e03 	and.w	lr, r3, #3
 800595a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800595e:	240f      	movs	r4, #15
 8005960:	fa04 f40e 	lsl.w	r4, r4, lr
 8005964:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005968:	4c20      	ldr	r4, [pc, #128]	; (80059ec <HAL_GPIO_Init+0x21c>)
 800596a:	42a0      	cmp	r0, r4
 800596c:	f43f af60 	beq.w	8005830 <HAL_GPIO_Init+0x60>
 8005970:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005974:	42a0      	cmp	r0, r4
 8005976:	d022      	beq.n	80059be <HAL_GPIO_Init+0x1ee>
 8005978:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800597c:	42a0      	cmp	r0, r4
 800597e:	d020      	beq.n	80059c2 <HAL_GPIO_Init+0x1f2>
 8005980:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005984:	42a0      	cmp	r0, r4
 8005986:	d01e      	beq.n	80059c6 <HAL_GPIO_Init+0x1f6>
 8005988:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800598c:	42a0      	cmp	r0, r4
 800598e:	d01c      	beq.n	80059ca <HAL_GPIO_Init+0x1fa>
 8005990:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005994:	42a0      	cmp	r0, r4
 8005996:	d01a      	beq.n	80059ce <HAL_GPIO_Init+0x1fe>
 8005998:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800599c:	42a0      	cmp	r0, r4
 800599e:	d018      	beq.n	80059d2 <HAL_GPIO_Init+0x202>
 80059a0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059a4:	42a0      	cmp	r0, r4
 80059a6:	d016      	beq.n	80059d6 <HAL_GPIO_Init+0x206>
 80059a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059ac:	42a0      	cmp	r0, r4
 80059ae:	d014      	beq.n	80059da <HAL_GPIO_Init+0x20a>
 80059b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059b4:	42a0      	cmp	r0, r4
 80059b6:	f43f af39 	beq.w	800582c <HAL_GPIO_Init+0x5c>
 80059ba:	240a      	movs	r4, #10
 80059bc:	e739      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059be:	2401      	movs	r4, #1
 80059c0:	e737      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059c2:	2402      	movs	r4, #2
 80059c4:	e735      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059c6:	2403      	movs	r4, #3
 80059c8:	e733      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059ca:	2404      	movs	r4, #4
 80059cc:	e731      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059ce:	2405      	movs	r4, #5
 80059d0:	e72f      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059d2:	2406      	movs	r4, #6
 80059d4:	e72d      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059d6:	2407      	movs	r4, #7
 80059d8:	e72b      	b.n	8005832 <HAL_GPIO_Init+0x62>
 80059da:	2408      	movs	r4, #8
 80059dc:	e729      	b.n	8005832 <HAL_GPIO_Init+0x62>
  }
}
 80059de:	b003      	add	sp, #12
 80059e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e2:	bf00      	nop
 80059e4:	58000400 	.word	0x58000400
 80059e8:	58024400 	.word	0x58024400
 80059ec:	58020000 	.word	0x58020000

080059f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059f0:	6903      	ldr	r3, [r0, #16]
 80059f2:	4219      	tst	r1, r3
 80059f4:	d001      	beq.n	80059fa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80059f6:	2001      	movs	r0, #1
 80059f8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059fa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80059fc:	4770      	bx	lr

080059fe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059fe:	b10a      	cbz	r2, 8005a04 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a00:	6181      	str	r1, [r0, #24]
 8005a02:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a04:	0409      	lsls	r1, r1, #16
 8005a06:	6181      	str	r1, [r0, #24]
  }
}
 8005a08:	4770      	bx	lr

08005a0a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a0a:	6803      	ldr	r3, [r0, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	f012 0f02 	tst.w	r2, #2
 8005a12:	d001      	beq.n	8005a18 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a14:	2200      	movs	r2, #0
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a18:	6803      	ldr	r3, [r0, #0]
 8005a1a:	699a      	ldr	r2, [r3, #24]
 8005a1c:	f012 0f01 	tst.w	r2, #1
 8005a20:	d103      	bne.n	8005a2a <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	619a      	str	r2, [r3, #24]
  }
}
 8005a2a:	4770      	bx	lr

08005a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a2c:	b410      	push	{r4}
 8005a2e:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a30:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a38:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a3a:	4321      	orrs	r1, r4
 8005a3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a40:	6802      	ldr	r2, [r0, #0]
 8005a42:	6853      	ldr	r3, [r2, #4]
 8005a44:	0d64      	lsrs	r4, r4, #21
 8005a46:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005a4a:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005a4e:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8005a52:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005a56:	f044 0403 	orr.w	r4, r4, #3
 8005a5a:	ea23 0304 	bic.w	r3, r3, r4
 8005a5e:	430b      	orrs	r3, r1
 8005a60:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005a68:	f011 0f01 	tst.w	r1, #1
 8005a6c:	d009      	beq.n	8005a82 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a76:	2b28      	cmp	r3, #40	; 0x28
 8005a78:	d001      	beq.n	8005a7e <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a7a:	23f2      	movs	r3, #242	; 0xf2
 8005a7c:	e002      	b.n	8005a84 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005a7e:	2342      	movs	r3, #66	; 0x42
 8005a80:	e000      	b.n	8005a84 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8005a82:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005a84:	f011 0f02 	tst.w	r1, #2
 8005a88:	d009      	beq.n	8005a9e <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005a8a:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a8e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005a92:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005a96:	2a28      	cmp	r2, #40	; 0x28
 8005a98:	d010      	beq.n	8005abc <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005a9a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005a9e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8005aa2:	d10d      	bne.n	8005ac0 <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005aa4:	2910      	cmp	r1, #16
 8005aa6:	d00e      	beq.n	8005ac6 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005aa8:	2920      	cmp	r1, #32
 8005aaa:	d00f      	beq.n	8005acc <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005aac:	2940      	cmp	r1, #64	; 0x40
 8005aae:	d010      	beq.n	8005ad2 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ab0:	6801      	ldr	r1, [r0, #0]
 8005ab2:	680a      	ldr	r2, [r1, #0]
 8005ab4:	ea22 0303 	bic.w	r3, r2, r3
 8005ab8:	600b      	str	r3, [r1, #0]
}
 8005aba:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005abc:	4663      	mov	r3, ip
 8005abe:	e7ee      	b.n	8005a9e <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ac0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005ac4:	e7ee      	b.n	8005aa4 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ac6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005aca:	e7ed      	b.n	8005aa8 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8005acc:	f043 0320 	orr.w	r3, r3, #32
 8005ad0:	e7ec      	b.n	8005aac <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8005ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad6:	e7eb      	b.n	8005ab0 <I2C_Disable_IRQ+0x48>

08005ad8 <I2C_IsErrorOccurred>:
{
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ade:	6803      	ldr	r3, [r0, #0]
 8005ae0:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ae2:	f016 0610 	ands.w	r6, r6, #16
 8005ae6:	d07e      	beq.n	8005be6 <I2C_IsErrorOccurred+0x10e>
 8005ae8:	460d      	mov	r5, r1
 8005aea:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aec:	2210      	movs	r2, #16
 8005aee:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8005af0:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005af2:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	6998      	ldr	r0, [r3, #24]
 8005af8:	f010 0f20 	tst.w	r0, #32
 8005afc:	d132      	bne.n	8005b64 <I2C_IsErrorOccurred+0x8c>
 8005afe:	bb8f      	cbnz	r7, 8005b64 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 8005b00:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005b04:	d0f6      	beq.n	8005af4 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b06:	f7fe f9d7 	bl	8003eb8 <HAL_GetTick>
 8005b0a:	eba0 0008 	sub.w	r0, r0, r8
 8005b0e:	42a8      	cmp	r0, r5
 8005b10:	d801      	bhi.n	8005b16 <I2C_IsErrorOccurred+0x3e>
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	d1ee      	bne.n	8005af4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	684a      	ldr	r2, [r1, #4]
 8005b1a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 8005b1e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005b22:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b24:	6988      	ldr	r0, [r1, #24]
 8005b26:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005b2a:	d004      	beq.n	8005b36 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005b2c:	3b20      	subs	r3, #32
 8005b2e:	bf18      	it	ne
 8005b30:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 8005b32:	b902      	cbnz	r2, 8005b36 <I2C_IsErrorOccurred+0x5e>
 8005b34:	b973      	cbnz	r3, 8005b54 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f013 0f20 	tst.w	r3, #32
 8005b3e:	d1d9      	bne.n	8005af4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b40:	f7fe f9ba 	bl	8003eb8 <HAL_GetTick>
 8005b44:	eba0 0008 	sub.w	r0, r0, r8
 8005b48:	2819      	cmp	r0, #25
 8005b4a:	d9f4      	bls.n	8005b36 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b4c:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8005b50:	2701      	movs	r7, #1
              break;
 8005b52:	e7cf      	b.n	8005af4 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b54:	684b      	ldr	r3, [r1, #4]
 8005b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b5a:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005b5c:	f7fe f9ac 	bl	8003eb8 <HAL_GetTick>
 8005b60:	4680      	mov	r8, r0
 8005b62:	e7e8      	b.n	8005b36 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005b64:	b90f      	cbnz	r7, 8005b6a <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b66:	2220      	movs	r2, #32
 8005b68:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005b6a:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8005b6e:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b74:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b78:	d005      	beq.n	8005b86 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8005b7a:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b82:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005b84:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b86:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005b8a:	d006      	beq.n	8005b9a <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8005b8c:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b96:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005b98:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005b9e:	d024      	beq.n	8005bea <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ba0:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005baa:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005bac:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f7ff ff2b 	bl	8005a0a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005bb4:	6822      	ldr	r2, [r4, #0]
 8005bb6:	6853      	ldr	r3, [r2, #4]
 8005bb8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005bbc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005bc0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005bca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bcc:	4333      	orrs	r3, r6
 8005bce:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005bdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005be0:	4628      	mov	r0, r5
 8005be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2500      	movs	r5, #0
 8005be8:	e7c2      	b.n	8005b70 <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 8005bea:	2d00      	cmp	r5, #0
 8005bec:	d0f8      	beq.n	8005be0 <I2C_IsErrorOccurred+0x108>
 8005bee:	e7de      	b.n	8005bae <I2C_IsErrorOccurred+0xd6>

08005bf0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	460d      	mov	r5, r1
 8005bf6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f013 0f02 	tst.w	r3, #2
 8005c00:	d122      	bne.n	8005c48 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	4632      	mov	r2, r6
 8005c04:	4629      	mov	r1, r5
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff ff66 	bl	8005ad8 <I2C_IsErrorOccurred>
 8005c0c:	b9f0      	cbnz	r0, 8005c4c <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005c12:	d0f1      	beq.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c14:	f7fe f950 	bl	8003eb8 <HAL_GetTick>
 8005c18:	1b80      	subs	r0, r0, r6
 8005c1a:	42a8      	cmp	r0, r5
 8005c1c:	d801      	bhi.n	8005c22 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005c1e:	2d00      	cmp	r5, #0
 8005c20:	d1ea      	bne.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f013 0f02 	tst.w	r3, #2
 8005c2a:	d1e5      	bne.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	2320      	movs	r3, #32
 8005c36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005c40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
 8005c46:	e000      	b.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8005c48:	2000      	movs	r0, #0
}
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	e7fc      	b.n	8005c4a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08005c50 <I2C_WaitOnFlagUntilTimeout>:
{
 8005c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4605      	mov	r5, r0
 8005c56:	460f      	mov	r7, r1
 8005c58:	4616      	mov	r6, r2
 8005c5a:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c5c:	682c      	ldr	r4, [r5, #0]
 8005c5e:	69a4      	ldr	r4, [r4, #24]
 8005c60:	ea37 0404 	bics.w	r4, r7, r4
 8005c64:	bf0c      	ite	eq
 8005c66:	2401      	moveq	r4, #1
 8005c68:	2400      	movne	r4, #0
 8005c6a:	42b4      	cmp	r4, r6
 8005c6c:	d122      	bne.n	8005cb4 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005c72:	d0f3      	beq.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c74:	f7fe f920 	bl	8003eb8 <HAL_GetTick>
 8005c78:	9b06      	ldr	r3, [sp, #24]
 8005c7a:	1ac0      	subs	r0, r0, r3
 8005c7c:	4540      	cmp	r0, r8
 8005c7e:	d802      	bhi.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x36>
 8005c80:	f1b8 0f00 	cmp.w	r8, #0
 8005c84:	d1ea      	bne.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c86:	682b      	ldr	r3, [r5, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	ea37 0303 	bics.w	r3, r7, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	42b3      	cmp	r3, r6
 8005c96:	d1e1      	bne.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c98:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005c9a:	f043 0320 	orr.w	r3, r3, #32
 8005c9e:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005cac:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	e000      	b.n	8005cb6 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8005cb4:	2000      	movs	r0, #0
}
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cba <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc2:	e004      	b.n	8005cce <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f013 0f20 	tst.w	r3, #32
 8005ccc:	d012      	beq.n	8005cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f013 0f20 	tst.w	r3, #32
 8005cd6:	d11b      	bne.n	8005d10 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd8:	4632      	mov	r2, r6
 8005cda:	4629      	mov	r1, r5
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f7ff fefb 	bl	8005ad8 <I2C_IsErrorOccurred>
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fe f8e8 	bl	8003eb8 <HAL_GetTick>
 8005ce8:	1b80      	subs	r0, r0, r6
 8005cea:	42a8      	cmp	r0, r5
 8005cec:	d8ea      	bhi.n	8005cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	d1ed      	bne.n	8005cce <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8005cf2:	e7e7      	b.n	8005cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005cf6:	f043 0320 	orr.w	r3, r3, #32
 8005cfa:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005d08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005d0c:	2001      	movs	r0, #1
 8005d0e:	e000      	b.n	8005d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8005d10:	2000      	movs	r0, #0
}
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005d14:	2001      	movs	r0, #1
 8005d16:	e7fc      	b.n	8005d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08005d18 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d057      	beq.n	8005dcc <HAL_I2C_Init+0xb4>
{
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d041      	beq.n	8005dac <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d28:	2324      	movs	r3, #36	; 0x24
 8005d2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005d2e:	6822      	ldr	r2, [r4, #0]
 8005d30:	6813      	ldr	r3, [r2, #0]
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d38:	6863      	ldr	r3, [r4, #4]
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005d40:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	6893      	ldr	r3, [r2, #8]
 8005d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d4a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d4c:	68e3      	ldr	r3, [r4, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d031      	beq.n	8005db6 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	6822      	ldr	r2, [r4, #0]
 8005d56:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005d5a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d5c:	68e3      	ldr	r3, [r4, #12]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d02f      	beq.n	8005dc2 <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	6851      	ldr	r1, [r2, #4]
 8005d66:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <HAL_I2C_Init+0xb8>)
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	68d3      	ldr	r3, [r2, #12]
 8005d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d74:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	6962      	ldr	r2, [r4, #20]
 8005d7a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d7c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d7e:	6822      	ldr	r2, [r4, #0]
 8005d80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d84:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d86:	69e3      	ldr	r3, [r4, #28]
 8005d88:	6a21      	ldr	r1, [r4, #32]
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	6813      	ldr	r3, [r2, #0]
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	2320      	movs	r3, #32
 8005da0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005daa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005dac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005db0:	f7fb fa10 	bl	80011d4 <HAL_I2C_MspInit>
 8005db4:	e7b8      	b.n	8005d28 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dbe:	6093      	str	r3, [r2, #8]
 8005dc0:	e7cc      	b.n	8005d5c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	e7ca      	b.n	8005d62 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005dcc:	2001      	movs	r0, #1
}
 8005dce:	4770      	bx	lr
 8005dd0:	02008000 	.word	0x02008000

08005dd4 <HAL_I2C_Master_Transmit>:
{
 8005dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	460f      	mov	r7, r1
 8005ddc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dde:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005de2:	b2c9      	uxtb	r1, r1
 8005de4:	2920      	cmp	r1, #32
 8005de6:	f040 80a3 	bne.w	8005f30 <HAL_I2C_Master_Transmit+0x15c>
 8005dea:	4604      	mov	r4, r0
 8005dec:	4690      	mov	r8, r2
 8005dee:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 8005df0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f000 809f 	beq.w	8005f38 <HAL_I2C_Master_Transmit+0x164>
 8005dfa:	f04f 0a01 	mov.w	sl, #1
 8005dfe:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005e02:	f7fe f859 	bl	8003eb8 <HAL_GetTick>
 8005e06:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e08:	9000      	str	r0, [sp, #0]
 8005e0a:	2319      	movs	r3, #25
 8005e0c:	4652      	mov	r2, sl
 8005e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff ff1c 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	f040 808f 	bne.w	8005f3c <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e1e:	2321      	movs	r3, #33	; 0x21
 8005e20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e24:	2310      	movs	r3, #16
 8005e26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005e2e:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e32:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e36:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2bff      	cmp	r3, #255	; 0xff
 8005e3e:	d90a      	bls.n	8005e56 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e40:	22ff      	movs	r2, #255	; 0xff
 8005e42:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e44:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <HAL_I2C_Master_Transmit+0x178>)
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f7ff fdec 	bl	8005a2c <I2C_TransferConfig>
 8005e54:	e018      	b.n	8005e88 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005e56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e58:	b292      	uxth	r2, r2
 8005e5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e5c:	4b3b      	ldr	r3, [pc, #236]	; (8005f4c <HAL_I2C_Master_Transmit+0x178>)
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	4639      	mov	r1, r7
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff fddf 	bl	8005a2c <I2C_TransferConfig>
 8005e6e:	e00b      	b.n	8005e88 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005e70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e72:	b292      	uxth	r2, r2
 8005e74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e76:	2300      	movs	r3, #0
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	4639      	mov	r1, r7
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7ff fdd2 	bl	8005a2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d033      	beq.n	8005ef8 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e90:	462a      	mov	r2, r5
 8005e92:	4631      	mov	r1, r6
 8005e94:	4620      	mov	r0, r4
 8005e96:	f7ff feab 	bl	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	d150      	bne.n	8005f40 <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005eac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005eb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ebe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005ec0:	b292      	uxth	r2, r2
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d0e0      	beq.n	8005e88 <HAL_I2C_Master_Transmit+0xb4>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1de      	bne.n	8005e88 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eca:	9500      	str	r5, [sp, #0]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2180      	movs	r1, #128	; 0x80
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff febc 	bl	8005c50 <I2C_WaitOnFlagUntilTimeout>
 8005ed8:	bba0      	cbnz	r0, 8005f44 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2bff      	cmp	r3, #255	; 0xff
 8005ee0:	d9c6      	bls.n	8005e70 <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ee2:	22ff      	movs	r2, #255	; 0xff
 8005ee4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eee:	4639      	mov	r1, r7
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff fd9b 	bl	8005a2c <I2C_TransferConfig>
 8005ef6:	e7c7      	b.n	8005e88 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef8:	462a      	mov	r2, r5
 8005efa:	4631      	mov	r1, r6
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff fedc 	bl	8005cba <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f02:	bb08      	cbnz	r0, 8005f48 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	2220      	movs	r2, #32
 8005f08:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005f0a:	6821      	ldr	r1, [r4, #0]
 8005f0c:	684b      	ldr	r3, [r1, #4]
 8005f0e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005f12:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005f16:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005f2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005f2e:	e000      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005f30:	2002      	movs	r0, #2
}
 8005f32:	b002      	add	sp, #8
 8005f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005f38:	2002      	movs	r0, #2
 8005f3a:	e7fa      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	e7f8      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005f40:	2001      	movs	r0, #1
 8005f42:	e7f6      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005f44:	2001      	movs	r0, #1
 8005f46:	e7f4      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005f48:	2001      	movs	r0, #1
 8005f4a:	e7f2      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x15e>
 8005f4c:	80002000 	.word	0x80002000

08005f50 <HAL_I2C_EV_IRQHandler>:
{
 8005f50:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005f52:	6803      	ldr	r3, [r0, #0]
 8005f54:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005f56:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005f58:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005f5a:	b103      	cbz	r3, 8005f5e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005f5c:	4798      	blx	r3
}
 8005f5e:	bd08      	pop	{r3, pc}

08005f60 <HAL_I2C_SlaveTxCpltCallback>:
}
 8005f60:	4770      	bx	lr

08005f62 <I2C_ITSlaveSeqCplt>:
{
 8005f62:	b510      	push	{r4, lr}
 8005f64:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f66:	6803      	ldr	r3, [r0, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f70:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005f74:	d00e      	beq.n	8005f94 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f7c:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005f7e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b29      	cmp	r3, #41	; 0x29
 8005f86:	d00d      	beq.n	8005fa4 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f90:	d018      	beq.n	8005fc4 <I2C_ITSlaveSeqCplt+0x62>
}
 8005f92:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f94:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005f98:	d0f1      	beq.n	8005f7e <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e7ec      	b.n	8005f7e <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fa4:	2328      	movs	r3, #40	; 0x28
 8005fa6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005faa:	2321      	movs	r3, #33	; 0x21
 8005fac:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff fd59 	bl	8005a68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff ffcf 	bl	8005f60 <HAL_I2C_SlaveTxCpltCallback>
 8005fc2:	e7e6      	b.n	8005f92 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fc4:	2328      	movs	r3, #40	; 0x28
 8005fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fca:	2322      	movs	r3, #34	; 0x22
 8005fcc:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005fce:	2102      	movs	r1, #2
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff fd49 	bl	8005a68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f014 f8d3 	bl	801a188 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8005fe2:	e7d6      	b.n	8005f92 <I2C_ITSlaveSeqCplt+0x30>

08005fe4 <HAL_I2C_AddrCallback>:
}
 8005fe4:	4770      	bx	lr

08005fe6 <I2C_ITAddrCplt>:
{
 8005fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe8:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005fee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ff2:	2b28      	cmp	r3, #40	; 0x28
 8005ff4:	d006      	beq.n	8006004 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ff6:	6803      	ldr	r3, [r0, #0]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8006004:	6803      	ldr	r3, [r0, #0]
 8006006:	699e      	ldr	r6, [r3, #24]
 8006008:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	0c12      	lsrs	r2, r2, #16
 8006010:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800601a:	68df      	ldr	r7, [r3, #12]
 800601c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006020:	68c1      	ldr	r1, [r0, #12]
 8006022:	2902      	cmp	r1, #2
 8006024:	d122      	bne.n	800606c <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006026:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 800602a:	f015 0f06 	tst.w	r5, #6
 800602e:	d110      	bne.n	8006052 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8006030:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006032:	3101      	adds	r1, #1
 8006034:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006036:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006038:	2902      	cmp	r1, #2
 800603a:	d1e2      	bne.n	8006002 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800603c:	2100      	movs	r1, #0
 800603e:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006040:	2008      	movs	r0, #8
 8006042:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8006044:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006048:	4631      	mov	r1, r6
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ffca 	bl	8005fe4 <HAL_I2C_AddrCallback>
 8006050:	e7d7      	b.n	8006002 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006056:	f7ff fd07 	bl	8005a68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006060:	463a      	mov	r2, r7
 8006062:	4631      	mov	r1, r6
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ffbd 	bl	8005fe4 <HAL_I2C_AddrCallback>
 800606a:	e7ca      	b.n	8006002 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800606c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006070:	f7ff fcfa 	bl	8005a68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006074:	2300      	movs	r3, #0
 8006076:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800607a:	462a      	mov	r2, r5
 800607c:	4631      	mov	r1, r6
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff ffb0 	bl	8005fe4 <HAL_I2C_AddrCallback>
 8006084:	e7bd      	b.n	8006002 <I2C_ITAddrCplt+0x1c>

08006086 <HAL_I2C_ListenCpltCallback>:
}
 8006086:	4770      	bx	lr

08006088 <I2C_ITListenCplt>:
{
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800608c:	4b17      	ldr	r3, [pc, #92]	; (80060ec <I2C_ITListenCplt+0x64>)
 800608e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	2300      	movs	r3, #0
 8006092:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006094:	2220      	movs	r2, #32
 8006096:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800609a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800609e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060a0:	f011 0f04 	tst.w	r1, #4
 80060a4:	d013      	beq.n	80060ce <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060a6:	6803      	ldr	r3, [r0, #0]
 80060a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060b0:	3301      	adds	r3, #1
 80060b2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80060b4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80060b6:	b153      	cbz	r3, 80060ce <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80060b8:	3b01      	subs	r3, #1
 80060ba:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80060bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80060ce:	f248 0103 	movw	r1, #32771	; 0x8003
 80060d2:	4620      	mov	r0, r4
 80060d4:	f7ff fcc8 	bl	8005a68 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	2210      	movs	r2, #16
 80060dc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80060e4:	4620      	mov	r0, r4
 80060e6:	f7ff ffce 	bl	8006086 <HAL_I2C_ListenCpltCallback>
}
 80060ea:	bd10      	pop	{r4, pc}
 80060ec:	ffff0000 	.word	0xffff0000

080060f0 <HAL_I2C_AbortCpltCallback>:
}
 80060f0:	4770      	bx	lr

080060f2 <I2C_TreatErrorCallback>:
{
 80060f2:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b60      	cmp	r3, #96	; 0x60
 80060fc:	d006      	beq.n	800610c <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80060fe:	2300      	movs	r3, #0
 8006100:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006102:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006106:	f014 f83b 	bl	801a180 <__HAL_I2C_ErrorCallback_veneer>
}
 800610a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800610c:	2320      	movs	r3, #32
 800610e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006112:	2300      	movs	r3, #0
 8006114:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006116:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800611a:	f7ff ffe9 	bl	80060f0 <HAL_I2C_AbortCpltCallback>
 800611e:	e7f4      	b.n	800610a <I2C_TreatErrorCallback+0x18>

08006120 <I2C_ITError>:
{
 8006120:	b510      	push	{r4, lr}
 8006122:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006124:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006128:	2200      	movs	r2, #0
 800612a:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800612e:	4845      	ldr	r0, [pc, #276]	; (8006244 <I2C_ITError+0x124>)
 8006130:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006132:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006134:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006136:	430a      	orrs	r2, r1
 8006138:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800613a:	3b28      	subs	r3, #40	; 0x28
 800613c:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800613e:	2b02      	cmp	r3, #2
 8006140:	d82d      	bhi.n	800619e <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006142:	2103      	movs	r1, #3
 8006144:	4620      	mov	r0, r4
 8006146:	f7ff fc8f 	bl	8005a68 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800614a:	2328      	movs	r3, #40	; 0x28
 800614c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006150:	4b3d      	ldr	r3, [pc, #244]	; (8006248 <I2C_ITError+0x128>)
 8006152:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8006154:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006158:	2a00      	cmp	r2, #0
 800615a:	d049      	beq.n	80061f0 <I2C_ITError+0xd0>
 800615c:	2b21      	cmp	r3, #33	; 0x21
 800615e:	bf18      	it	ne
 8006160:	2b11      	cmpne	r3, #17
 8006162:	d145      	bne.n	80061f0 <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800616c:	d003      	beq.n	8006176 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006174:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006176:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006178:	f7ff fb24 	bl	80057c4 <HAL_DMA_GetState>
 800617c:	2801      	cmp	r0, #1
 800617e:	d033      	beq.n	80061e8 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006182:	4a32      	ldr	r2, [pc, #200]	; (800624c <I2C_ITError+0x12c>)
 8006184:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006186:	2300      	movs	r3, #0
 8006188:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800618c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800618e:	f7fe fe45 	bl	8004e1c <HAL_DMA_Abort_IT>
 8006192:	2800      	cmp	r0, #0
 8006194:	d055      	beq.n	8006242 <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006196:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006198:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800619a:	4798      	blx	r3
 800619c:	e051      	b.n	8006242 <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800619e:	f248 0103 	movw	r1, #32771	; 0x8003
 80061a2:	4620      	mov	r0, r4
 80061a4:	f7ff fc60 	bl	8005a68 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 80061a8:	4620      	mov	r0, r4
 80061aa:	f7ff fc2e 	bl	8005a0a <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80061ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b60      	cmp	r3, #96	; 0x60
 80061b6:	d014      	beq.n	80061e2 <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
 80061b8:	2320      	movs	r3, #32
 80061ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	f012 0f20 	tst.w	r2, #32
 80061c6:	d00c      	beq.n	80061e2 <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	f012 0f10 	tst.w	r2, #16
 80061ce:	d005      	beq.n	80061dc <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061d0:	2210      	movs	r2, #16
 80061d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061d6:	f043 0304 	orr.w	r3, r3, #4
 80061da:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	2220      	movs	r2, #32
 80061e0:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	6363      	str	r3, [r4, #52]	; 0x34
 80061e6:	e7b5      	b.n	8006154 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 80061e8:	4620      	mov	r0, r4
 80061ea:	f7ff ff82 	bl	80060f2 <I2C_TreatErrorCallback>
 80061ee:	e028      	b.n	8006242 <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80061f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80061f2:	b31a      	cbz	r2, 800623c <I2C_ITError+0x11c>
 80061f4:	2b22      	cmp	r3, #34	; 0x22
 80061f6:	bf18      	it	ne
 80061f8:	2b12      	cmpne	r3, #18
 80061fa:	d11f      	bne.n	800623c <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8006204:	d003      	beq.n	800620e <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800620c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800620e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006210:	f7ff fad8 	bl	80057c4 <HAL_DMA_GetState>
 8006214:	2801      	cmp	r0, #1
 8006216:	d00d      	beq.n	8006234 <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006218:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <I2C_ITError+0x12c>)
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800621e:	2300      	movs	r3, #0
 8006220:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006224:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006226:	f7fe fdf9 	bl	8004e1c <HAL_DMA_Abort_IT>
 800622a:	b150      	cbz	r0, 8006242 <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800622c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800622e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006230:	4798      	blx	r3
 8006232:	e006      	b.n	8006242 <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff ff5c 	bl	80060f2 <I2C_TreatErrorCallback>
 800623a:	e002      	b.n	8006242 <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
 800623c:	4620      	mov	r0, r4
 800623e:	f7ff ff58 	bl	80060f2 <I2C_TreatErrorCallback>
}
 8006242:	bd10      	pop	{r4, pc}
 8006244:	ffff0000 	.word	0xffff0000
 8006248:	08006495 	.word	0x08006495
 800624c:	0800664f 	.word	0x0800664f

08006250 <I2C_ITSlaveCplt>:
{
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006256:	6802      	ldr	r2, [r0, #0]
 8006258:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800625a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800625e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006260:	2120      	movs	r1, #32
 8006262:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006264:	2b29      	cmp	r3, #41	; 0x29
 8006266:	bf18      	it	ne
 8006268:	2b21      	cmpne	r3, #33	; 0x21
 800626a:	d057      	beq.n	800631c <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800626c:	2b2a      	cmp	r3, #42	; 0x2a
 800626e:	bf18      	it	ne
 8006270:	2b22      	cmpne	r3, #34	; 0x22
 8006272:	d05a      	beq.n	800632a <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	6853      	ldr	r3, [r2, #4]
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	6853      	ldr	r3, [r2, #4]
 8006282:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8006286:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800628a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8006294:	4620      	mov	r0, r4
 8006296:	f7ff fbb8 	bl	8005a0a <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800629a:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800629e:	f000 8085 	beq.w	80063ac <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062a2:	6822      	ldr	r2, [r4, #0]
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062aa:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80062ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d045      	beq.n	800633e <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4974      	ldr	r1, [pc, #464]	; (8006488 <I2C_ITSlaveCplt+0x238>)
 80062b6:	4a75      	ldr	r2, [pc, #468]	; (800648c <I2C_ITSlaveCplt+0x23c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	bf18      	it	ne
 80062bc:	428b      	cmpne	r3, r1
 80062be:	d03b      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062c0:	3218      	adds	r2, #24
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d038      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062c6:	3218      	adds	r2, #24
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d035      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062cc:	3218      	adds	r2, #24
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d032      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062d2:	3218      	adds	r2, #24
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d02f      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062d8:	3218      	adds	r2, #24
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02c      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062de:	3218      	adds	r2, #24
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d029      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062e4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d025      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062ec:	3218      	adds	r2, #24
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d022      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062f2:	3218      	adds	r2, #24
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d01f      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062f8:	3218      	adds	r2, #24
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01c      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 80062fe:	3218      	adds	r2, #24
 8006300:	4293      	cmp	r3, r2
 8006302:	d019      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 8006304:	3218      	adds	r2, #24
 8006306:	4293      	cmp	r3, r2
 8006308:	d016      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 800630a:	3218      	adds	r2, #24
 800630c:	4293      	cmp	r3, r2
 800630e:	d013      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 8006310:	3218      	adds	r2, #24
 8006312:	4293      	cmp	r3, r2
 8006314:	d010      	beq.n	8006338 <I2C_ITSlaveCplt+0xe8>
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	b29b      	uxth	r3, r3
 800631a:	e00f      	b.n	800633c <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800631c:	f248 0101 	movw	r1, #32769	; 0x8001
 8006320:	f7ff fba2 	bl	8005a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006324:	2321      	movs	r3, #33	; 0x21
 8006326:	6323      	str	r3, [r4, #48]	; 0x30
 8006328:	e7a4      	b.n	8006274 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800632a:	f248 0102 	movw	r1, #32770	; 0x8002
 800632e:	f7ff fb9b 	bl	8005a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006332:	2322      	movs	r3, #34	; 0x22
 8006334:	6323      	str	r3, [r4, #48]	; 0x30
 8006336:	e79d      	b.n	8006274 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b29b      	uxth	r3, r3
 800633c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800633e:	f015 0f04 	tst.w	r5, #4
 8006342:	d011      	beq.n	8006368 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006344:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800634c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006352:	3301      	adds	r3, #1
 8006354:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006356:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006358:	b133      	cbz	r3, 8006368 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
 800635a:	3b01      	subs	r3, #1
 800635c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800635e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8006368:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	b11b      	cbz	r3, 8006376 <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800636e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006370:	f043 0304 	orr.w	r3, r3, #4
 8006374:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006376:	2300      	movs	r3, #0
 8006378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 800637c:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800637e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006380:	2b00      	cmp	r3, #0
 8006382:	d157      	bne.n	8006434 <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006384:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006386:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800638a:	d161      	bne.n	8006450 <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800638c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b22      	cmp	r3, #34	; 0x22
 8006394:	d06c      	beq.n	8006470 <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 8006396:	2320      	movs	r3, #32
 8006398:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800639c:	2300      	movs	r3, #0
 800639e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff fddb 	bl	8005f60 <HAL_I2C_SlaveTxCpltCallback>
}
 80063aa:	e060      	b.n	800646e <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80063ac:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80063b0:	d0c5      	beq.n	800633e <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063ba:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 80063bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0bd      	beq.n	800633e <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4930      	ldr	r1, [pc, #192]	; (8006488 <I2C_ITSlaveCplt+0x238>)
 80063c6:	4a31      	ldr	r2, [pc, #196]	; (800648c <I2C_ITSlaveCplt+0x23c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf18      	it	ne
 80063cc:	428b      	cmpne	r3, r1
 80063ce:	d02d      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063d0:	3218      	adds	r2, #24
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d02a      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063d6:	3218      	adds	r2, #24
 80063d8:	4293      	cmp	r3, r2
 80063da:	d027      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063dc:	3218      	adds	r2, #24
 80063de:	4293      	cmp	r3, r2
 80063e0:	d024      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063e2:	3218      	adds	r2, #24
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d021      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063e8:	3218      	adds	r2, #24
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01e      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063ee:	3218      	adds	r2, #24
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d01b      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063f4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d017      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 80063fc:	3218      	adds	r2, #24
 80063fe:	4293      	cmp	r3, r2
 8006400:	d014      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 8006402:	3218      	adds	r2, #24
 8006404:	4293      	cmp	r3, r2
 8006406:	d011      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 8006408:	3218      	adds	r2, #24
 800640a:	4293      	cmp	r3, r2
 800640c:	d00e      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 800640e:	3218      	adds	r2, #24
 8006410:	4293      	cmp	r3, r2
 8006412:	d00b      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 8006414:	3218      	adds	r2, #24
 8006416:	4293      	cmp	r3, r2
 8006418:	d008      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 800641a:	3218      	adds	r2, #24
 800641c:	4293      	cmp	r3, r2
 800641e:	d005      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 8006420:	3218      	adds	r2, #24
 8006422:	4293      	cmp	r3, r2
 8006424:	d002      	beq.n	800642c <I2C_ITSlaveCplt+0x1dc>
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	b29b      	uxth	r3, r3
 800642a:	e001      	b.n	8006430 <I2C_ITSlaveCplt+0x1e0>
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	b29b      	uxth	r3, r3
 8006430:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006432:	e784      	b.n	800633e <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006434:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff fe72 	bl	8006120 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800643c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b28      	cmp	r3, #40	; 0x28
 8006444:	d113      	bne.n	800646e <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006446:	4629      	mov	r1, r5
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fe1d 	bl	8006088 <I2C_ITListenCplt>
 800644e:	e00e      	b.n	800646e <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006450:	4620      	mov	r0, r4
 8006452:	f7ff fd86 	bl	8005f62 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006456:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <I2C_ITSlaveCplt+0x240>)
 8006458:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800645a:	2320      	movs	r3, #32
 800645c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006460:	2300      	movs	r3, #0
 8006462:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006464:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff fe0c 	bl	8006086 <HAL_I2C_ListenCpltCallback>
}
 800646e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006470:	2320      	movs	r3, #32
 8006472:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006476:	2300      	movs	r3, #0
 8006478:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800647a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800647e:	4620      	mov	r0, r4
 8006480:	f013 fe82 	bl	801a188 <__HAL_I2C_SlaveRxCpltCallback_veneer>
 8006484:	e7f3      	b.n	800646e <I2C_ITSlaveCplt+0x21e>
 8006486:	bf00      	nop
 8006488:	40020010 	.word	0x40020010
 800648c:	40020028 	.word	0x40020028
 8006490:	ffff0000 	.word	0xffff0000

08006494 <I2C_Slave_ISR_IT>:
{
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8006496:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006498:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800649c:	2b01      	cmp	r3, #1
 800649e:	f000 809f 	beq.w	80065e0 <I2C_Slave_ISR_IT+0x14c>
 80064a2:	4604      	mov	r4, r0
 80064a4:	460d      	mov	r5, r1
 80064a6:	4616      	mov	r6, r2
 80064a8:	2301      	movs	r3, #1
 80064aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064ae:	f011 0f20 	tst.w	r1, #32
 80064b2:	d002      	beq.n	80064ba <I2C_Slave_ISR_IT+0x26>
 80064b4:	f012 0f20 	tst.w	r2, #32
 80064b8:	d119      	bne.n	80064ee <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064ba:	f015 0f10 	tst.w	r5, #16
 80064be:	d03f      	beq.n	8006540 <I2C_Slave_ISR_IT+0xac>
 80064c0:	f016 0f10 	tst.w	r6, #16
 80064c4:	d03c      	beq.n	8006540 <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
 80064c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	bb43      	cbnz	r3, 800651e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b28      	cmp	r3, #40	; 0x28
 80064d4:	d00e      	beq.n	80064f4 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b29      	cmp	r3, #41	; 0x29
 80064de:	d011      	beq.n	8006504 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	2210      	movs	r2, #16
 80064e4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80064e6:	2000      	movs	r0, #0
 80064e8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80064ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80064ee:	f7ff feaf 	bl	8006250 <I2C_ITSlaveCplt>
 80064f2:	e7e2      	b.n	80064ba <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064f4:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80064f8:	d1ed      	bne.n	80064d6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80064fa:	4629      	mov	r1, r5
 80064fc:	4620      	mov	r0, r4
 80064fe:	f7ff fdc3 	bl	8006088 <I2C_ITListenCplt>
 8006502:	e7f0      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006504:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006508:	d0ea      	beq.n	80064e0 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	2210      	movs	r2, #16
 800650e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8006510:	4620      	mov	r0, r4
 8006512:	f7ff fa7a 	bl	8005a0a <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff fd23 	bl	8005f62 <I2C_ITSlaveSeqCplt>
 800651c:	e7e3      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	2210      	movs	r2, #16
 8006522:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800652c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8006530:	bf18      	it	ne
 8006532:	2f00      	cmpne	r7, #0
 8006534:	d1d7      	bne.n	80064e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006536:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff fdf1 	bl	8006120 <I2C_ITError>
 800653e:	e7d2      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006540:	f015 0f04 	tst.w	r5, #4
 8006544:	d01f      	beq.n	8006586 <I2C_Slave_ISR_IT+0xf2>
 8006546:	f016 0f04 	tst.w	r6, #4
 800654a:	d01c      	beq.n	8006586 <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
 800654c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	b173      	cbz	r3, 8006570 <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006558:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800655a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655c:	3301      	adds	r3, #1
 800655e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006560:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006562:	3b01      	subs	r3, #1
 8006564:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006570:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1b6      	bne.n	80064e6 <I2C_Slave_ISR_IT+0x52>
 8006578:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800657c:	d0b3      	beq.n	80064e6 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fcef 	bl	8005f62 <I2C_ITSlaveSeqCplt>
 8006584:	e7af      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006586:	f015 0f08 	tst.w	r5, #8
 800658a:	d002      	beq.n	8006592 <I2C_Slave_ISR_IT+0xfe>
 800658c:	f016 0f08 	tst.w	r6, #8
 8006590:	d118      	bne.n	80065c4 <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006592:	f015 0f02 	tst.w	r5, #2
 8006596:	d0a6      	beq.n	80064e6 <I2C_Slave_ISR_IT+0x52>
 8006598:	f016 0f02 	tst.w	r6, #2
 800659c:	d0a3      	beq.n	80064e6 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800659e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	b1a3      	cbz	r3, 80065ce <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80065ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ae:	3301      	adds	r3, #1
 80065b0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80065b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80065bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065be:	3b01      	subs	r3, #1
 80065c0:	8523      	strh	r3, [r4, #40]	; 0x28
 80065c2:	e790      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	f7ff fd0d 	bl	8005fe6 <I2C_ITAddrCplt>
 80065cc:	e78b      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80065ce:	2f00      	cmp	r7, #0
 80065d0:	bf18      	it	ne
 80065d2:	f1b7 7f80 	cmpne.w	r7, #16777216	; 0x1000000
 80065d6:	d186      	bne.n	80064e6 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80065d8:	4620      	mov	r0, r4
 80065da:	f7ff fcc2 	bl	8005f62 <I2C_ITSlaveSeqCplt>
 80065de:	e782      	b.n	80064e6 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80065e0:	2002      	movs	r0, #2
 80065e2:	e783      	b.n	80064ec <I2C_Slave_ISR_IT+0x58>

080065e4 <HAL_I2C_ER_IRQHandler>:
{
 80065e4:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80065e6:	6802      	ldr	r2, [r0, #0]
 80065e8:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80065ea:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80065ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80065f0:	d009      	beq.n	8006606 <HAL_I2C_ER_IRQHandler+0x22>
 80065f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80065f6:	d006      	beq.n	8006606 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80065f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80065fa:	f044 0401 	orr.w	r4, r4, #1
 80065fe:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006600:	f44f 7480 	mov.w	r4, #256	; 0x100
 8006604:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006606:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800660a:	d00a      	beq.n	8006622 <HAL_I2C_ER_IRQHandler+0x3e>
 800660c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006610:	d007      	beq.n	8006622 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006612:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006614:	f042 0208 	orr.w	r2, r2, #8
 8006618:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800661a:	6802      	ldr	r2, [r0, #0]
 800661c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006620:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006622:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006626:	d00a      	beq.n	800663e <HAL_I2C_ER_IRQHandler+0x5a>
 8006628:	f011 0f80 	tst.w	r1, #128	; 0x80
 800662c:	d007      	beq.n	800663e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800662e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006636:	6803      	ldr	r3, [r0, #0]
 8006638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800663c:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800663e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006640:	f011 0f0b 	tst.w	r1, #11
 8006644:	d100      	bne.n	8006648 <HAL_I2C_ER_IRQHandler+0x64>
}
 8006646:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8006648:	f7ff fd6a 	bl	8006120 <I2C_ITError>
}
 800664c:	e7fb      	b.n	8006646 <HAL_I2C_ER_IRQHandler+0x62>

0800664e <I2C_DMAAbort>:
{
 800664e:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006650:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8006652:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006654:	b10b      	cbz	r3, 800665a <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006656:	2200      	movs	r2, #0
 8006658:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800665a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800665c:	b10b      	cbz	r3, 8006662 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800665e:	2200      	movs	r2, #0
 8006660:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 8006662:	f7ff fd46 	bl	80060f2 <I2C_TreatErrorCallback>
}
 8006666:	bd08      	pop	{r3, pc}

08006668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006668:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800666a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	2a20      	cmp	r2, #32
 8006672:	d123      	bne.n	80066bc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006674:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006678:	2a01      	cmp	r2, #1
 800667a:	d021      	beq.n	80066c0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800667c:	2201      	movs	r2, #1
 800667e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006682:	2224      	movs	r2, #36	; 0x24
 8006684:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006688:	6800      	ldr	r0, [r0, #0]
 800668a:	6802      	ldr	r2, [r0, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006692:	6818      	ldr	r0, [r3, #0]
 8006694:	6802      	ldr	r2, [r0, #0]
 8006696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800669a:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	6802      	ldr	r2, [r0, #0]
 80066a0:	4311      	orrs	r1, r2
 80066a2:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066a4:	6819      	ldr	r1, [r3, #0]
 80066a6:	680a      	ldr	r2, [r1, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b4:	2000      	movs	r0, #0
 80066b6:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80066ba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2002      	movs	r0, #2
 80066be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80066c0:	2002      	movs	r0, #2
  }
}
 80066c2:	4770      	bx	lr

080066c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066c4:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	2a20      	cmp	r2, #32
 80066ce:	d121      	bne.n	8006714 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	d01f      	beq.n	8006718 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80066d8:	2201      	movs	r2, #1
 80066da:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066de:	2224      	movs	r2, #36	; 0x24
 80066e0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e4:	6800      	ldr	r0, [r0, #0]
 80066e6:	6802      	ldr	r2, [r0, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066f2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066fa:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	680a      	ldr	r2, [r1, #0]
 8006700:	f042 0201 	orr.w	r2, r2, #1
 8006704:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670c:	2000      	movs	r0, #0
 800670e:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8006712:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006714:	2002      	movs	r0, #2
 8006716:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006718:	2002      	movs	r0, #2
  }
}
 800671a:	4770      	bx	lr

0800671c <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800671c:	4b13      	ldr	r3, [pc, #76]	; (800676c <HAL_PWREx_ConfigSupply+0x50>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f013 0f04 	tst.w	r3, #4
 8006724:	d107      	bne.n	8006736 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006726:	4b11      	ldr	r3, [pc, #68]	; (800676c <HAL_PWREx_ConfigSupply+0x50>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	4283      	cmp	r3, r0
 8006730:	d01a      	beq.n	8006768 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006732:	2001      	movs	r0, #1
 8006734:	4770      	bx	lr
{
 8006736:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006738:	4a0c      	ldr	r2, [pc, #48]	; (800676c <HAL_PWREx_ConfigSupply+0x50>)
 800673a:	68d3      	ldr	r3, [r2, #12]
 800673c:	f023 0307 	bic.w	r3, r3, #7
 8006740:	4303      	orrs	r3, r0
 8006742:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006744:	f7fd fbb8 	bl	8003eb8 <HAL_GetTick>
 8006748:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800674a:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_PWREx_ConfigSupply+0x50>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006752:	d107      	bne.n	8006764 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006754:	f7fd fbb0 	bl	8003eb8 <HAL_GetTick>
 8006758:	1b00      	subs	r0, r0, r4
 800675a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800675e:	d9f4      	bls.n	800674a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8006760:	2001      	movs	r0, #1
 8006762:	e000      	b.n	8006766 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006764:	2000      	movs	r0, #0
}
 8006766:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006768:	2000      	movs	r0, #0
}
 800676a:	4770      	bx	lr
 800676c:	58024800 	.word	0x58024800

08006770 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006770:	2800      	cmp	r0, #0
 8006772:	f000 8339 	beq.w	8006de8 <HAL_RCC_OscConfig+0x678>
{
 8006776:	b538      	push	{r3, r4, r5, lr}
 8006778:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800677a:	6803      	ldr	r3, [r0, #0]
 800677c:	f013 0f01 	tst.w	r3, #1
 8006780:	d025      	beq.n	80067ce <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006782:	4a94      	ldr	r2, [pc, #592]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006784:	6913      	ldr	r3, [r2, #16]
 8006786:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800678a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800678c:	2b10      	cmp	r3, #16
 800678e:	d015      	beq.n	80067bc <HAL_RCC_OscConfig+0x4c>
 8006790:	2b18      	cmp	r3, #24
 8006792:	d00f      	beq.n	80067b4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679a:	d03f      	beq.n	800681c <HAL_RCC_OscConfig+0xac>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d153      	bne.n	8006848 <HAL_RCC_OscConfig+0xd8>
 80067a0:	4b8c      	ldr	r3, [pc, #560]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e038      	b.n	8006826 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067b4:	f002 0203 	and.w	r2, r2, #3
 80067b8:	2a02      	cmp	r2, #2
 80067ba:	d1eb      	bne.n	8006794 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067bc:	4b85      	ldr	r3, [pc, #532]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80067c4:	d003      	beq.n	80067ce <HAL_RCC_OscConfig+0x5e>
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 830f 	beq.w	8006dec <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f013 0f02 	tst.w	r3, #2
 80067d4:	f000 80a1 	beq.w	800691a <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067d8:	4a7e      	ldr	r2, [pc, #504]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80067da:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067de:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80067e2:	d05a      	beq.n	800689a <HAL_RCC_OscConfig+0x12a>
 80067e4:	2b18      	cmp	r3, #24
 80067e6:	d055      	beq.n	8006894 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80de 	beq.w	80069ac <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067f0:	4978      	ldr	r1, [pc, #480]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80067f2:	680a      	ldr	r2, [r1, #0]
 80067f4:	f022 0219 	bic.w	r2, r2, #25
 80067f8:	4313      	orrs	r3, r2
 80067fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fd fb5c 	bl	8003eb8 <HAL_GetTick>
 8006800:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006802:	4b74      	ldr	r3, [pc, #464]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f013 0f04 	tst.w	r3, #4
 800680a:	f040 80ad 	bne.w	8006968 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800680e:	f7fd fb53 	bl	8003eb8 <HAL_GetTick>
 8006812:	1b40      	subs	r0, r0, r5
 8006814:	2802      	cmp	r0, #2
 8006816:	d9f4      	bls.n	8006802 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006818:	2003      	movs	r0, #3
 800681a:	e2ee      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681c:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006824:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006826:	6863      	ldr	r3, [r4, #4]
 8006828:	b32b      	cbz	r3, 8006876 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800682a:	f7fd fb45 	bl	8003eb8 <HAL_GetTick>
 800682e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006830:	4b68      	ldr	r3, [pc, #416]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006838:	d1c9      	bne.n	80067ce <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800683a:	f7fd fb3d 	bl	8003eb8 <HAL_GetTick>
 800683e:	1b40      	subs	r0, r0, r5
 8006840:	2864      	cmp	r0, #100	; 0x64
 8006842:	d9f5      	bls.n	8006830 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006844:	2003      	movs	r0, #3
 8006846:	e2d8      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800684c:	d009      	beq.n	8006862 <HAL_RCC_OscConfig+0xf2>
 800684e:	4b61      	ldr	r3, [pc, #388]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	e7e1      	b.n	8006826 <HAL_RCC_OscConfig+0xb6>
 8006862:	4b5c      	ldr	r3, [pc, #368]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e7d7      	b.n	8006826 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006876:	f7fd fb1f 	bl	8003eb8 <HAL_GetTick>
 800687a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800687c:	4b55      	ldr	r3, [pc, #340]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006884:	d0a3      	beq.n	80067ce <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006886:	f7fd fb17 	bl	8003eb8 <HAL_GetTick>
 800688a:	1b40      	subs	r0, r0, r5
 800688c:	2864      	cmp	r0, #100	; 0x64
 800688e:	d9f5      	bls.n	800687c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8006890:	2003      	movs	r0, #3
 8006892:	e2b2      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006894:	f012 0f03 	tst.w	r2, #3
 8006898:	d1a6      	bne.n	80067e8 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800689a:	4b4e      	ldr	r3, [pc, #312]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f013 0f04 	tst.w	r3, #4
 80068a2:	d003      	beq.n	80068ac <HAL_RCC_OscConfig+0x13c>
 80068a4:	68e3      	ldr	r3, [r4, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 82a2 	beq.w	8006df0 <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068ac:	4a49      	ldr	r2, [pc, #292]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80068ae:	6813      	ldr	r3, [r2, #0]
 80068b0:	f023 0319 	bic.w	r3, r3, #25
 80068b4:	68e1      	ldr	r1, [r4, #12]
 80068b6:	430b      	orrs	r3, r1
 80068b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80068ba:	f7fd fafd 	bl	8003eb8 <HAL_GetTick>
 80068be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068c0:	4b44      	ldr	r3, [pc, #272]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f013 0f04 	tst.w	r3, #4
 80068c8:	d106      	bne.n	80068d8 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068ca:	f7fd faf5 	bl	8003eb8 <HAL_GetTick>
 80068ce:	1b40      	subs	r0, r0, r5
 80068d0:	2802      	cmp	r0, #2
 80068d2:	d9f5      	bls.n	80068c0 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80068d4:	2003      	movs	r0, #3
 80068d6:	e290      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d8:	f7fd fb08 	bl	8003eec <HAL_GetREVID>
 80068dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80068e0:	4298      	cmp	r0, r3
 80068e2:	d812      	bhi.n	800690a <HAL_RCC_OscConfig+0x19a>
 80068e4:	6922      	ldr	r2, [r4, #16]
 80068e6:	2a40      	cmp	r2, #64	; 0x40
 80068e8:	d007      	beq.n	80068fa <HAL_RCC_OscConfig+0x18a>
 80068ea:	493a      	ldr	r1, [pc, #232]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80068ec:	684b      	ldr	r3, [r1, #4]
 80068ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80068f2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80068f6:	604b      	str	r3, [r1, #4]
 80068f8:	e00f      	b.n	800691a <HAL_RCC_OscConfig+0x1aa>
 80068fa:	4a36      	ldr	r2, [pc, #216]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80068fc:	6853      	ldr	r3, [r2, #4]
 80068fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006906:	6053      	str	r3, [r2, #4]
 8006908:	e007      	b.n	800691a <HAL_RCC_OscConfig+0x1aa>
 800690a:	4a32      	ldr	r2, [pc, #200]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800690c:	6853      	ldr	r3, [r2, #4]
 800690e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006912:	6921      	ldr	r1, [r4, #16]
 8006914:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006918:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f013 0f10 	tst.w	r3, #16
 8006920:	f000 8088 	beq.w	8006a34 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006924:	4a2b      	ldr	r2, [pc, #172]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006926:	6913      	ldr	r3, [r2, #16]
 8006928:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800692c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800692e:	2b08      	cmp	r3, #8
 8006930:	d056      	beq.n	80069e0 <HAL_RCC_OscConfig+0x270>
 8006932:	2b18      	cmp	r3, #24
 8006934:	d050      	beq.n	80069d8 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006936:	69e3      	ldr	r3, [r4, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80b8 	beq.w	8006aae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800693e:	4a25      	ldr	r2, [pc, #148]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006940:	6813      	ldr	r3, [r2, #0]
 8006942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006948:	f7fd fab6 	bl	8003eb8 <HAL_GetTick>
 800694c:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800694e:	4b21      	ldr	r3, [pc, #132]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006956:	f040 8088 	bne.w	8006a6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800695a:	f7fd faad 	bl	8003eb8 <HAL_GetTick>
 800695e:	1b40      	subs	r0, r0, r5
 8006960:	2802      	cmp	r0, #2
 8006962:	d9f4      	bls.n	800694e <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006964:	2003      	movs	r0, #3
 8006966:	e248      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006968:	f7fd fac0 	bl	8003eec <HAL_GetREVID>
 800696c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006970:	4298      	cmp	r0, r3
 8006972:	d812      	bhi.n	800699a <HAL_RCC_OscConfig+0x22a>
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	2a40      	cmp	r2, #64	; 0x40
 8006978:	d007      	beq.n	800698a <HAL_RCC_OscConfig+0x21a>
 800697a:	4916      	ldr	r1, [pc, #88]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800697c:	684b      	ldr	r3, [r1, #4]
 800697e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006982:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006986:	604b      	str	r3, [r1, #4]
 8006988:	e7c7      	b.n	800691a <HAL_RCC_OscConfig+0x1aa>
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800698c:	6853      	ldr	r3, [r2, #4]
 800698e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006996:	6053      	str	r3, [r2, #4]
 8006998:	e7bf      	b.n	800691a <HAL_RCC_OscConfig+0x1aa>
 800699a:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 800699c:	6853      	ldr	r3, [r2, #4]
 800699e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80069a2:	6921      	ldr	r1, [r4, #16]
 80069a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80069a8:	6053      	str	r3, [r2, #4]
 80069aa:	e7b6      	b.n	800691a <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80069ac:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80069b6:	f7fd fa7f 	bl	8003eb8 <HAL_GetTick>
 80069ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RCC_OscConfig+0x264>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f013 0f04 	tst.w	r3, #4
 80069c4:	d0a9      	beq.n	800691a <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c6:	f7fd fa77 	bl	8003eb8 <HAL_GetTick>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	2802      	cmp	r0, #2
 80069ce:	d9f5      	bls.n	80069bc <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
 80069d2:	e212      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 80069d4:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80069d8:	f002 0203 	and.w	r2, r2, #3
 80069dc:	2a01      	cmp	r2, #1
 80069de:	d1aa      	bne.n	8006936 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069e0:	4ba1      	ldr	r3, [pc, #644]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_OscConfig+0x282>
 80069ea:	69e3      	ldr	r3, [r4, #28]
 80069ec:	2b80      	cmp	r3, #128	; 0x80
 80069ee:	f040 8201 	bne.w	8006df4 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069f2:	f7fd fa7b 	bl	8003eec <HAL_GetREVID>
 80069f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80069fa:	4298      	cmp	r0, r3
 80069fc:	d812      	bhi.n	8006a24 <HAL_RCC_OscConfig+0x2b4>
 80069fe:	6a22      	ldr	r2, [r4, #32]
 8006a00:	2a20      	cmp	r2, #32
 8006a02:	d007      	beq.n	8006a14 <HAL_RCC_OscConfig+0x2a4>
 8006a04:	4998      	ldr	r1, [pc, #608]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a06:	684b      	ldr	r3, [r1, #4]
 8006a08:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a0c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006a10:	604b      	str	r3, [r1, #4]
 8006a12:	e00f      	b.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
 8006a14:	4a94      	ldr	r2, [pc, #592]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a16:	6853      	ldr	r3, [r2, #4]
 8006a18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	6053      	str	r3, [r2, #4]
 8006a22:	e007      	b.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
 8006a24:	4a90      	ldr	r2, [pc, #576]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a26:	68d3      	ldr	r3, [r2, #12]
 8006a28:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006a32:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f013 0f08 	tst.w	r3, #8
 8006a3a:	d060      	beq.n	8006afe <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a3c:	6963      	ldr	r3, [r4, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d049      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a42:	4a89      	ldr	r2, [pc, #548]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fd fa34 	bl	8003eb8 <HAL_GetTick>
 8006a50:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006a52:	4b85      	ldr	r3, [pc, #532]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a56:	f013 0f02 	tst.w	r3, #2
 8006a5a:	d150      	bne.n	8006afe <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a5c:	f7fd fa2c 	bl	8003eb8 <HAL_GetTick>
 8006a60:	1b40      	subs	r0, r0, r5
 8006a62:	2802      	cmp	r0, #2
 8006a64:	d9f5      	bls.n	8006a52 <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8006a66:	2003      	movs	r0, #3
 8006a68:	e1c7      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a6a:	f7fd fa3f 	bl	8003eec <HAL_GetREVID>
 8006a6e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a72:	4298      	cmp	r0, r3
 8006a74:	d812      	bhi.n	8006a9c <HAL_RCC_OscConfig+0x32c>
 8006a76:	6a22      	ldr	r2, [r4, #32]
 8006a78:	2a20      	cmp	r2, #32
 8006a7a:	d007      	beq.n	8006a8c <HAL_RCC_OscConfig+0x31c>
 8006a7c:	497a      	ldr	r1, [pc, #488]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a7e:	684b      	ldr	r3, [r1, #4]
 8006a80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a84:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006a88:	604b      	str	r3, [r1, #4]
 8006a8a:	e7d3      	b.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
 8006a8c:	4a76      	ldr	r2, [pc, #472]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a8e:	6853      	ldr	r3, [r2, #4]
 8006a90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a98:	6053      	str	r3, [r2, #4]
 8006a9a:	e7cb      	b.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
 8006a9c:	4a72      	ldr	r2, [pc, #456]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006a9e:	68d3      	ldr	r3, [r2, #12]
 8006aa0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006aa4:	6a21      	ldr	r1, [r4, #32]
 8006aa6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006aaa:	60d3      	str	r3, [r2, #12]
 8006aac:	e7c2      	b.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 8006aae:	4a6e      	ldr	r2, [pc, #440]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006ab0:	6813      	ldr	r3, [r2, #0]
 8006ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ab8:	f7fd f9fe 	bl	8003eb8 <HAL_GetTick>
 8006abc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006abe:	4b6a      	ldr	r3, [pc, #424]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ac6:	d0b5      	beq.n	8006a34 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ac8:	f7fd f9f6 	bl	8003eb8 <HAL_GetTick>
 8006acc:	1b40      	subs	r0, r0, r5
 8006ace:	2802      	cmp	r0, #2
 8006ad0:	d9f5      	bls.n	8006abe <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 8006ad2:	2003      	movs	r0, #3
 8006ad4:	e191      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ad6:	4a64      	ldr	r2, [pc, #400]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006ad8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006ada:	f023 0301 	bic.w	r3, r3, #1
 8006ade:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ae0:	f7fd f9ea 	bl	8003eb8 <HAL_GetTick>
 8006ae4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ae6:	4b60      	ldr	r3, [pc, #384]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aea:	f013 0f02 	tst.w	r3, #2
 8006aee:	d006      	beq.n	8006afe <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af0:	f7fd f9e2 	bl	8003eb8 <HAL_GetTick>
 8006af4:	1b40      	subs	r0, r0, r5
 8006af6:	2802      	cmp	r0, #2
 8006af8:	d9f5      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006afa:	2003      	movs	r0, #3
 8006afc:	e17d      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f013 0f20 	tst.w	r3, #32
 8006b04:	d029      	beq.n	8006b5a <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b06:	69a3      	ldr	r3, [r4, #24]
 8006b08:	b19b      	cbz	r3, 8006b32 <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b0a:	4a57      	ldr	r2, [pc, #348]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b0c:	6813      	ldr	r3, [r2, #0]
 8006b0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b14:	f7fd f9d0 	bl	8003eb8 <HAL_GetTick>
 8006b18:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b1a:	4b53      	ldr	r3, [pc, #332]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006b22:	d11a      	bne.n	8006b5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b24:	f7fd f9c8 	bl	8003eb8 <HAL_GetTick>
 8006b28:	1b40      	subs	r0, r0, r5
 8006b2a:	2802      	cmp	r0, #2
 8006b2c:	d9f5      	bls.n	8006b1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006b2e:	2003      	movs	r0, #3
 8006b30:	e163      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b32:	4a4d      	ldr	r2, [pc, #308]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b34:	6813      	ldr	r3, [r2, #0]
 8006b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b3c:	f7fd f9bc 	bl	8003eb8 <HAL_GetTick>
 8006b40:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b42:	4b49      	ldr	r3, [pc, #292]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006b4a:	d006      	beq.n	8006b5a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b4c:	f7fd f9b4 	bl	8003eb8 <HAL_GetTick>
 8006b50:	1b40      	subs	r0, r0, r5
 8006b52:	2802      	cmp	r0, #2
 8006b54:	d9f5      	bls.n	8006b42 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006b56:	2003      	movs	r0, #3
 8006b58:	e14f      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	f013 0f04 	tst.w	r3, #4
 8006b60:	d121      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8147 	beq.w	8006df8 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b6a:	4a3f      	ldr	r2, [pc, #252]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	6912      	ldr	r2, [r2, #16]
 8006b6e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006b72:	2a18      	cmp	r2, #24
 8006b74:	f000 80ee 	beq.w	8006d54 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d079      	beq.n	8006c70 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b7c:	4a3a      	ldr	r2, [pc, #232]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b7e:	6813      	ldr	r3, [r2, #0]
 8006b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fd f997 	bl	8003eb8 <HAL_GetTick>
 8006b8a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b8c:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006b94:	f000 80dc 	beq.w	8006d50 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fd f98e 	bl	8003eb8 <HAL_GetTick>
 8006b9c:	1b00      	subs	r0, r0, r4
 8006b9e:	2802      	cmp	r0, #2
 8006ba0:	d9f4      	bls.n	8006b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ba2:	2003      	movs	r0, #3
 8006ba4:	e129      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 8006ba6:	4a31      	ldr	r2, [pc, #196]	; (8006c6c <HAL_RCC_OscConfig+0x4fc>)
 8006ba8:	6813      	ldr	r3, [r2, #0]
 8006baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006bb0:	f7fd f982 	bl	8003eb8 <HAL_GetTick>
 8006bb4:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bb6:	4b2d      	ldr	r3, [pc, #180]	; (8006c6c <HAL_RCC_OscConfig+0x4fc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bbe:	d106      	bne.n	8006bce <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc0:	f7fd f97a 	bl	8003eb8 <HAL_GetTick>
 8006bc4:	1b40      	subs	r0, r0, r5
 8006bc6:	2864      	cmp	r0, #100	; 0x64
 8006bc8:	d9f5      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 8006bca:	2003      	movs	r0, #3
 8006bcc:	e115      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCC_OscConfig+0x47a>
 8006bd4:	bb0b      	cbnz	r3, 8006c1a <HAL_RCC_OscConfig+0x4aa>
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	671a      	str	r2, [r3, #112]	; 0x70
 8006be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006be2:	f022 0204 	bic.w	r2, r2, #4
 8006be6:	671a      	str	r2, [r3, #112]	; 0x70
 8006be8:	e004      	b.n	8006bf4 <HAL_RCC_OscConfig+0x484>
 8006bea:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006bec:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bf4:	68a3      	ldr	r3, [r4, #8]
 8006bf6:	b333      	cbz	r3, 8006c46 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 8006bf8:	f7fd f95e 	bl	8003eb8 <HAL_GetTick>
 8006bfc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f013 0f02 	tst.w	r3, #2
 8006c06:	d1ac      	bne.n	8006b62 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c08:	f7fd f956 	bl	8003eb8 <HAL_GetTick>
 8006c0c:	1b40      	subs	r0, r0, r5
 8006c0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c12:	4298      	cmp	r0, r3
 8006c14:	d9f3      	bls.n	8006bfe <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8006c16:	2003      	movs	r0, #3
 8006c18:	e0ef      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d009      	beq.n	8006c32 <HAL_RCC_OscConfig+0x4c2>
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c22:	f022 0201 	bic.w	r2, r2, #1
 8006c26:	671a      	str	r2, [r3, #112]	; 0x70
 8006c28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	671a      	str	r2, [r3, #112]	; 0x70
 8006c30:	e7e0      	b.n	8006bf4 <HAL_RCC_OscConfig+0x484>
 8006c32:	4b0d      	ldr	r3, [pc, #52]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006c34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c36:	f042 0204 	orr.w	r2, r2, #4
 8006c3a:	671a      	str	r2, [r3, #112]	; 0x70
 8006c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c3e:	f042 0201 	orr.w	r2, r2, #1
 8006c42:	671a      	str	r2, [r3, #112]	; 0x70
 8006c44:	e7d6      	b.n	8006bf4 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8006c46:	f7fd f937 	bl	8003eb8 <HAL_GetTick>
 8006c4a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCC_OscConfig+0x4f8>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c50:	f013 0f02 	tst.w	r3, #2
 8006c54:	d085      	beq.n	8006b62 <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c56:	f7fd f92f 	bl	8003eb8 <HAL_GetTick>
 8006c5a:	1b40      	subs	r0, r0, r5
 8006c5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c60:	4298      	cmp	r0, r3
 8006c62:	d9f3      	bls.n	8006c4c <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8006c64:	2003      	movs	r0, #3
 8006c66:	e0c8      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 8006c70:	4a69      	ldr	r2, [pc, #420]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006c7a:	f7fd f91d 	bl	8003eb8 <HAL_GetTick>
 8006c7e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c80:	4b65      	ldr	r3, [pc, #404]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c88:	d006      	beq.n	8006c98 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8a:	f7fd f915 	bl	8003eb8 <HAL_GetTick>
 8006c8e:	1b40      	subs	r0, r0, r5
 8006c90:	2802      	cmp	r0, #2
 8006c92:	d9f5      	bls.n	8006c80 <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8006c94:	2003      	movs	r0, #3
 8006c96:	e0b0      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c98:	4b5f      	ldr	r3, [pc, #380]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006c9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006c9c:	4a5f      	ldr	r2, [pc, #380]	; (8006e1c <HAL_RCC_OscConfig+0x6ac>)
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006ca2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ca4:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	629a      	str	r2, [r3, #40]	; 0x28
 8006cac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	3901      	subs	r1, #1
 8006cb8:	0249      	lsls	r1, r1, #9
 8006cba:	b289      	uxth	r1, r1
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cc0:	3901      	subs	r1, #1
 8006cc2:	0409      	lsls	r1, r1, #16
 8006cc4:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ccc:	3901      	subs	r1, #1
 8006cce:	0609      	lsls	r1, r1, #24
 8006cd0:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ce0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ce2:	4a4f      	ldr	r2, [pc, #316]	; (8006e20 <HAL_RCC_OscConfig+0x6b0>)
 8006ce4:	400a      	ands	r2, r1
 8006ce6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ce8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006cec:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	f022 020c 	bic.w	r2, r2, #12
 8006cf4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	f022 0202 	bic.w	r2, r2, #2
 8006d00:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d02:	430a      	orrs	r2, r1
 8006d04:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d0c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006d14:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006d2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006d2e:	f7fd f8c3 	bl	8003eb8 <HAL_GetTick>
 8006d32:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d34:	4b38      	ldr	r3, [pc, #224]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006d3c:	d106      	bne.n	8006d4c <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d3e:	f7fd f8bb 	bl	8003eb8 <HAL_GetTick>
 8006d42:	1b00      	subs	r0, r0, r4
 8006d44:	2802      	cmp	r0, #2
 8006d46:	d9f5      	bls.n	8006d34 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8006d48:	2003      	movs	r0, #3
 8006d4a:	e056      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	e054      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006d50:	2000      	movs	r0, #0
 8006d52:	e052      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d54:	4a30      	ldr	r2, [pc, #192]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006d56:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d58:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d04e      	beq.n	8006dfc <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5e:	f001 0303 	and.w	r3, r1, #3
 8006d62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d14b      	bne.n	8006e00 <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d68:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8006d6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	d148      	bne.n	8006e04 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d72:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006d76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d144      	bne.n	8006e08 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d7e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8006d82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d84:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d140      	bne.n	8006e0c <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d8a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8006d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d13c      	bne.n	8006e10 <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d96:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8006d9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d9e:	4298      	cmp	r0, r3
 8006da0:	d138      	bne.n	8006e14 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006da2:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006daa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 8006db0:	2000      	movs	r0, #0
 8006db2:	e022      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 8006db4:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006db6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8006dbe:	f7fd f87b 	bl	8003eb8 <HAL_GetTick>
 8006dc2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006dc4:	f7fd f878 	bl	8003eb8 <HAL_GetTick>
 8006dc8:	42a8      	cmp	r0, r5
 8006dca:	d0fb      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006dcc:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_RCC_OscConfig+0x6a8>)
 8006dce:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8006dd0:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCC_OscConfig+0x6b0>)
 8006dd2:	400b      	ands	r3, r1
 8006dd4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006dd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006dda:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ddc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006dde:	f043 0301 	orr.w	r3, r3, #1
 8006de2:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 8006de4:	2000      	movs	r0, #0
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 8006de8:	2001      	movs	r0, #1
}
 8006dea:	4770      	bx	lr
        return HAL_ERROR;
 8006dec:	2001      	movs	r0, #1
 8006dee:	e004      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8006df0:	2001      	movs	r0, #1
 8006df2:	e002      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 8006df4:	2001      	movs	r0, #1
 8006df6:	e000      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 8006df8:	2000      	movs	r0, #0
}
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8006dfc:	2001      	movs	r0, #1
 8006dfe:	e7fc      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e00:	2001      	movs	r0, #1
 8006e02:	e7fa      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e04:	2001      	movs	r0, #1
 8006e06:	e7f8      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e08:	2001      	movs	r0, #1
 8006e0a:	e7f6      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	e7f4      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e10:	2001      	movs	r0, #1
 8006e12:	e7f2      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e14:	2001      	movs	r0, #1
 8006e16:	e7f0      	b.n	8006dfa <HAL_RCC_OscConfig+0x68a>
 8006e18:	58024400 	.word	0x58024400
 8006e1c:	fffffc0c 	.word	0xfffffc0c
 8006e20:	ffff0007 	.word	0xffff0007

08006e24 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e24:	4b74      	ldr	r3, [pc, #464]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	f000 80de 	beq.w	8006fee <HAL_RCC_GetSysClockFreq+0x1ca>
 8006e32:	2b18      	cmp	r3, #24
 8006e34:	d00f      	beq.n	8006e56 <HAL_RCC_GetSysClockFreq+0x32>
 8006e36:	b10b      	cbz	r3, 8006e3c <HAL_RCC_GetSysClockFreq+0x18>
 8006e38:	4870      	ldr	r0, [pc, #448]	; (8006ffc <HAL_RCC_GetSysClockFreq+0x1d8>)
 8006e3a:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e3c:	4b6e      	ldr	r3, [pc, #440]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f013 0f20 	tst.w	r3, #32
 8006e44:	f000 80d5 	beq.w	8006ff2 <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e48:	4b6b      	ldr	r3, [pc, #428]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006e50:	486b      	ldr	r0, [pc, #428]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8006e52:	40d8      	lsrs	r0, r3
 8006e54:	4770      	bx	lr
{
 8006e56:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e58:	4b67      	ldr	r3, [pc, #412]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006e5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e5c:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e60:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006e62:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e68:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	ee07 3a90 	vmov	s15, r3
 8006e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8006e7e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8006e82:	f000 8094 	beq.w	8006fae <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 8006e86:	2a01      	cmp	r2, #1
 8006e88:	d066      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x134>
 8006e8a:	2a02      	cmp	r2, #2
 8006e8c:	f000 8092 	beq.w	8006fb4 <HAL_RCC_GetSysClockFreq+0x190>
 8006e90:	b1e2      	cbz	r2, 8006ecc <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e92:	ee07 0a10 	vmov	s14, r0
 8006e96:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006e9a:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8007004 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006e9e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006ea2:	4b55      	ldr	r3, [pc, #340]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eaa:	ee06 3a90 	vmov	s13, r3
 8006eae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006eb2:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8007008 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006eb6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8006eca:	e061      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ecc:	4b4a      	ldr	r3, [pc, #296]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f013 0f20 	tst.w	r3, #32
 8006ed4:	d023      	beq.n	8006f1e <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ed6:	4948      	ldr	r1, [pc, #288]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006ed8:	680a      	ldr	r2, [r1, #0]
 8006eda:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006ede:	4b48      	ldr	r3, [pc, #288]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8006ee0:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ee2:	ee07 3a10 	vmov	s14, r3
 8006ee6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006eea:	ee07 0a10 	vmov	s14, r0
 8006eee:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8006ef2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8006ef6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	ee06 3a90 	vmov	s13, r3
 8006f00:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006f04:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007008 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006f08:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f1c:	e038      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f1e:	ee07 0a10 	vmov	s14, r0
 8006f22:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006f26:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800700c <HAL_RCC_GetSysClockFreq+0x1e8>
 8006f2a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006f2e:	4b32      	ldr	r3, [pc, #200]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee06 3a90 	vmov	s13, r3
 8006f3a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006f3e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007008 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006f42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f56:	e01b      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f58:	ee07 0a10 	vmov	s14, r0
 8006f5c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006f60:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8007004 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006f64:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006f68:	4b23      	ldr	r3, [pc, #140]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f70:	ee06 3a90 	vmov	s13, r3
 8006f74:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006f78:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8007008 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006f7c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f90:	4b19      	ldr	r3, [pc, #100]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006f98:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fa6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006faa:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb2:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fb4:	ee07 0a10 	vmov	s14, r0
 8006fb8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006fbc:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8007010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fc0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fcc:	ee06 3a90 	vmov	s13, r3
 8006fd0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006fd4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8007008 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006fd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8006fec:	e7d0      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 8006fee:	4809      	ldr	r0, [pc, #36]	; (8007014 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ff0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ff2:	4803      	ldr	r0, [pc, #12]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	003d0900 	.word	0x003d0900
 8007000:	03d09000 	.word	0x03d09000
 8007004:	4a742400 	.word	0x4a742400
 8007008:	39000000 	.word	0x39000000
 800700c:	4c742400 	.word	0x4c742400
 8007010:	4bbebc20 	.word	0x4bbebc20
 8007014:	017d7840 	.word	0x017d7840

08007018 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007018:	2800      	cmp	r0, #0
 800701a:	f000 8132 	beq.w	8007282 <HAL_RCC_ClockConfig+0x26a>
{
 800701e:	b570      	push	{r4, r5, r6, lr}
 8007020:	460d      	mov	r5, r1
 8007022:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007024:	4b9b      	ldr	r3, [pc, #620]	; (8007294 <HAL_RCC_ClockConfig+0x27c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 030f 	and.w	r3, r3, #15
 800702c:	428b      	cmp	r3, r1
 800702e:	d20b      	bcs.n	8007048 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007030:	4a98      	ldr	r2, [pc, #608]	; (8007294 <HAL_RCC_ClockConfig+0x27c>)
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	f023 030f 	bic.w	r3, r3, #15
 8007038:	430b      	orrs	r3, r1
 800703a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703c:	6813      	ldr	r3, [r2, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	428b      	cmp	r3, r1
 8007044:	f040 811f 	bne.w	8007286 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	f013 0f04 	tst.w	r3, #4
 800704e:	d00c      	beq.n	800706a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007050:	6922      	ldr	r2, [r4, #16]
 8007052:	4b91      	ldr	r3, [pc, #580]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800705a:	429a      	cmp	r2, r3
 800705c:	d905      	bls.n	800706a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800705e:	498e      	ldr	r1, [pc, #568]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007060:	698b      	ldr	r3, [r1, #24]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	431a      	orrs	r2, r3
 8007068:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	f013 0f08 	tst.w	r3, #8
 8007070:	d00c      	beq.n	800708c <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007072:	6962      	ldr	r2, [r4, #20]
 8007074:	4b88      	ldr	r3, [pc, #544]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800707c:	429a      	cmp	r2, r3
 800707e:	d905      	bls.n	800708c <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007080:	4985      	ldr	r1, [pc, #532]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007082:	69cb      	ldr	r3, [r1, #28]
 8007084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007088:	431a      	orrs	r2, r3
 800708a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f013 0f10 	tst.w	r3, #16
 8007092:	d00c      	beq.n	80070ae <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007094:	69a2      	ldr	r2, [r4, #24]
 8007096:	4b80      	ldr	r3, [pc, #512]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709e:	429a      	cmp	r2, r3
 80070a0:	d905      	bls.n	80070ae <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070a2:	497d      	ldr	r1, [pc, #500]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070a4:	69cb      	ldr	r3, [r1, #28]
 80070a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070aa:	431a      	orrs	r2, r3
 80070ac:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	f013 0f20 	tst.w	r3, #32
 80070b4:	d00c      	beq.n	80070d0 <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070b6:	69e2      	ldr	r2, [r4, #28]
 80070b8:	4b77      	ldr	r3, [pc, #476]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d905      	bls.n	80070d0 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070c4:	4974      	ldr	r1, [pc, #464]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070c6:	6a0b      	ldr	r3, [r1, #32]
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	431a      	orrs	r2, r3
 80070ce:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	f013 0f02 	tst.w	r3, #2
 80070d6:	d00c      	beq.n	80070f2 <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070d8:	68e2      	ldr	r2, [r4, #12]
 80070da:	4b6f      	ldr	r3, [pc, #444]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d905      	bls.n	80070f2 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e6:	496c      	ldr	r1, [pc, #432]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070e8:	698b      	ldr	r3, [r1, #24]
 80070ea:	f023 030f 	bic.w	r3, r3, #15
 80070ee:	431a      	orrs	r2, r3
 80070f0:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	f013 0f01 	tst.w	r3, #1
 80070f8:	d041      	beq.n	800717e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070fa:	4a67      	ldr	r2, [pc, #412]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80070fc:	6993      	ldr	r3, [r2, #24]
 80070fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007102:	68a1      	ldr	r1, [r4, #8]
 8007104:	430b      	orrs	r3, r1
 8007106:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007108:	6863      	ldr	r3, [r4, #4]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d00a      	beq.n	8007124 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800710e:	2b03      	cmp	r3, #3
 8007110:	d027      	beq.n	8007162 <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007112:	2b01      	cmp	r3, #1
 8007114:	d02c      	beq.n	8007170 <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007116:	4a60      	ldr	r2, [pc, #384]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	f012 0f04 	tst.w	r2, #4
 800711e:	d106      	bne.n	800712e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8007120:	2001      	movs	r0, #1
 8007122:	e0ad      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800712a:	f000 80ae 	beq.w	800728a <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800712e:	495a      	ldr	r1, [pc, #360]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007130:	690a      	ldr	r2, [r1, #16]
 8007132:	f022 0207 	bic.w	r2, r2, #7
 8007136:	4313      	orrs	r3, r2
 8007138:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 800713a:	f7fc febd 	bl	8003eb8 <HAL_GetTick>
 800713e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007140:	4b55      	ldr	r3, [pc, #340]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007148:	6862      	ldr	r2, [r4, #4]
 800714a:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800714e:	d016      	beq.n	800717e <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007150:	f7fc feb2 	bl	8003eb8 <HAL_GetTick>
 8007154:	1b80      	subs	r0, r0, r6
 8007156:	f241 3388 	movw	r3, #5000	; 0x1388
 800715a:	4298      	cmp	r0, r3
 800715c:	d9f0      	bls.n	8007140 <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 800715e:	2003      	movs	r0, #3
 8007160:	e08e      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007162:	4a4d      	ldr	r2, [pc, #308]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800716a:	d1e0      	bne.n	800712e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800716c:	2001      	movs	r0, #1
 800716e:	e087      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007170:	4a49      	ldr	r2, [pc, #292]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007172:	6812      	ldr	r2, [r2, #0]
 8007174:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007178:	d1d9      	bne.n	800712e <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 800717a:	2001      	movs	r0, #1
 800717c:	e080      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	f013 0f02 	tst.w	r3, #2
 8007184:	d00c      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007186:	68e2      	ldr	r2, [r4, #12]
 8007188:	4b43      	ldr	r3, [pc, #268]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	429a      	cmp	r2, r3
 8007192:	d205      	bcs.n	80071a0 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007194:	4940      	ldr	r1, [pc, #256]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007196:	698b      	ldr	r3, [r1, #24]
 8007198:	f023 030f 	bic.w	r3, r3, #15
 800719c:	431a      	orrs	r2, r3
 800719e:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a0:	4b3c      	ldr	r3, [pc, #240]	; (8007294 <HAL_RCC_ClockConfig+0x27c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	d90a      	bls.n	80071c2 <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ac:	4a39      	ldr	r2, [pc, #228]	; (8007294 <HAL_RCC_ClockConfig+0x27c>)
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	f023 030f 	bic.w	r3, r3, #15
 80071b4:	432b      	orrs	r3, r5
 80071b6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b8:	6813      	ldr	r3, [r2, #0]
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	42ab      	cmp	r3, r5
 80071c0:	d165      	bne.n	800728e <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f013 0f04 	tst.w	r3, #4
 80071c8:	d00c      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071ca:	6922      	ldr	r2, [r4, #16]
 80071cc:	4b32      	ldr	r3, [pc, #200]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d205      	bcs.n	80071e4 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80071d8:	492f      	ldr	r1, [pc, #188]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80071da:	698b      	ldr	r3, [r1, #24]
 80071dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e0:	431a      	orrs	r2, r3
 80071e2:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	f013 0f08 	tst.w	r3, #8
 80071ea:	d00c      	beq.n	8007206 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071ec:	6962      	ldr	r2, [r4, #20]
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d205      	bcs.n	8007206 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071fa:	4927      	ldr	r1, [pc, #156]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 80071fc:	69cb      	ldr	r3, [r1, #28]
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	431a      	orrs	r2, r3
 8007204:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	f013 0f10 	tst.w	r3, #16
 800720c:	d00c      	beq.n	8007228 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800720e:	69a2      	ldr	r2, [r4, #24]
 8007210:	4b21      	ldr	r3, [pc, #132]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007218:	429a      	cmp	r2, r3
 800721a:	d205      	bcs.n	8007228 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800721c:	491e      	ldr	r1, [pc, #120]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 800721e:	69cb      	ldr	r3, [r1, #28]
 8007220:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007224:	431a      	orrs	r2, r3
 8007226:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	f013 0f20 	tst.w	r3, #32
 800722e:	d00c      	beq.n	800724a <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007230:	69e2      	ldr	r2, [r4, #28]
 8007232:	4b19      	ldr	r3, [pc, #100]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800723a:	429a      	cmp	r2, r3
 800723c:	d205      	bcs.n	800724a <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800723e:	4916      	ldr	r1, [pc, #88]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007240:	6a0b      	ldr	r3, [r1, #32]
 8007242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007246:	431a      	orrs	r2, r3
 8007248:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800724a:	f7ff fdeb 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 800724e:	4912      	ldr	r1, [pc, #72]	; (8007298 <HAL_RCC_ClockConfig+0x280>)
 8007250:	698b      	ldr	r3, [r1, #24]
 8007252:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007256:	4a11      	ldr	r2, [pc, #68]	; (800729c <HAL_RCC_ClockConfig+0x284>)
 8007258:	5cd3      	ldrb	r3, [r2, r3]
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007260:	698b      	ldr	r3, [r1, #24]
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	5cd3      	ldrb	r3, [r2, r3]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	fa20 f303 	lsr.w	r3, r0, r3
 8007270:	4a0b      	ldr	r2, [pc, #44]	; (80072a0 <HAL_RCC_ClockConfig+0x288>)
 8007272:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8007274:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <HAL_RCC_ClockConfig+0x28c>)
 8007276:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_RCC_ClockConfig+0x290>)
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	f7fc fdba 	bl	8003df4 <HAL_InitTick>
}
 8007280:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8007282:	2001      	movs	r0, #1
}
 8007284:	4770      	bx	lr
      return HAL_ERROR;
 8007286:	2001      	movs	r0, #1
 8007288:	e7fa      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 800728a:	2001      	movs	r0, #1
 800728c:	e7f8      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800728e:	2001      	movs	r0, #1
 8007290:	e7f6      	b.n	8007280 <HAL_RCC_ClockConfig+0x268>
 8007292:	bf00      	nop
 8007294:	52002000 	.word	0x52002000
 8007298:	58024400 	.word	0x58024400
 800729c:	0801accc 	.word	0x0801accc
 80072a0:	200008f8 	.word	0x200008f8
 80072a4:	200008f4 	.word	0x200008f4
 80072a8:	20000940 	.word	0x20000940

080072ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072ac:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80072ae:	f7ff fdb9 	bl	8006e24 <HAL_RCC_GetSysClockFreq>
 80072b2:	4a0b      	ldr	r2, [pc, #44]	; (80072e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80072b4:	6993      	ldr	r3, [r2, #24]
 80072b6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80072ba:	490a      	ldr	r1, [pc, #40]	; (80072e4 <HAL_RCC_GetHCLKFreq+0x38>)
 80072bc:	5ccb      	ldrb	r3, [r1, r3]
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072c6:	6992      	ldr	r2, [r2, #24]
 80072c8:	f002 020f 	and.w	r2, r2, #15
 80072cc:	5c88      	ldrb	r0, [r1, r2]
 80072ce:	f000 001f 	and.w	r0, r0, #31
 80072d2:	fa23 f000 	lsr.w	r0, r3, r0
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <HAL_RCC_GetHCLKFreq+0x3c>)
 80072d8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072da:	4a04      	ldr	r2, [pc, #16]	; (80072ec <HAL_RCC_GetHCLKFreq+0x40>)
 80072dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80072de:	bd08      	pop	{r3, pc}
 80072e0:	58024400 	.word	0x58024400
 80072e4:	0801accc 	.word	0x0801accc
 80072e8:	200008f8 	.word	0x200008f8
 80072ec:	200008f4 	.word	0x200008f4

080072f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072f2:	f7ff ffdb 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80072fe:	4a04      	ldr	r2, [pc, #16]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007300:	5cd3      	ldrb	r3, [r2, r3]
 8007302:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007306:	40d8      	lsrs	r0, r3
 8007308:	bd08      	pop	{r3, pc}
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	0801accc 	.word	0x0801accc

08007314 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007314:	4b40      	ldr	r3, [pc, #256]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d079      	beq.n	8007414 <RCCEx_PLL2_Config+0x100>
{
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	4605      	mov	r5, r0
 8007324:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007326:	4a3c      	ldr	r2, [pc, #240]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 8007328:	6813      	ldr	r3, [r2, #0]
 800732a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800732e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007330:	f7fc fdc2 	bl	8003eb8 <HAL_GetTick>
 8007334:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007336:	4b38      	ldr	r3, [pc, #224]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800733e:	d006      	beq.n	800734e <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007340:	f7fc fdba 	bl	8003eb8 <HAL_GetTick>
 8007344:	1b03      	subs	r3, r0, r4
 8007346:	2b02      	cmp	r3, #2
 8007348:	d9f5      	bls.n	8007336 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800734a:	2003      	movs	r0, #3

  }


  return status;
}
 800734c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800734e:	4b32      	ldr	r3, [pc, #200]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 8007350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007352:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8007356:	6829      	ldr	r1, [r5, #0]
 8007358:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800735c:	629a      	str	r2, [r3, #40]	; 0x28
 800735e:	686a      	ldr	r2, [r5, #4]
 8007360:	3a01      	subs	r2, #1
 8007362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007366:	68a9      	ldr	r1, [r5, #8]
 8007368:	3901      	subs	r1, #1
 800736a:	0249      	lsls	r1, r1, #9
 800736c:	b289      	uxth	r1, r1
 800736e:	430a      	orrs	r2, r1
 8007370:	68e9      	ldr	r1, [r5, #12]
 8007372:	3901      	subs	r1, #1
 8007374:	0409      	lsls	r1, r1, #16
 8007376:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800737a:	430a      	orrs	r2, r1
 800737c:	6929      	ldr	r1, [r5, #16]
 800737e:	3901      	subs	r1, #1
 8007380:	0609      	lsls	r1, r1, #24
 8007382:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007386:	430a      	orrs	r2, r1
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007390:	6969      	ldr	r1, [r5, #20]
 8007392:	430a      	orrs	r2, r1
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	f022 0220 	bic.w	r2, r2, #32
 800739c:	69a9      	ldr	r1, [r5, #24]
 800739e:	430a      	orrs	r2, r1
 80073a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a4:	f022 0210 	bic.w	r2, r2, #16
 80073a8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80073aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80073ac:	4a1b      	ldr	r2, [pc, #108]	; (800741c <RCCEx_PLL2_Config+0x108>)
 80073ae:	400a      	ands	r2, r1
 80073b0:	69e9      	ldr	r1, [r5, #28]
 80073b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80073b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	f042 0210 	orr.w	r2, r2, #16
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80073c0:	b9c6      	cbnz	r6, 80073f4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073c2:	461a      	mov	r2, r3
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80073cc:	4a12      	ldr	r2, [pc, #72]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80073d6:	f7fc fd6f 	bl	8003eb8 <HAL_GetTick>
 80073da:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073dc:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80073e4:	d114      	bne.n	8007410 <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073e6:	f7fc fd67 	bl	8003eb8 <HAL_GetTick>
 80073ea:	1b00      	subs	r0, r0, r4
 80073ec:	2802      	cmp	r0, #2
 80073ee:	d9f5      	bls.n	80073dc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80073f0:	2003      	movs	r0, #3
 80073f2:	e7ab      	b.n	800734c <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 80073f4:	2e01      	cmp	r6, #1
 80073f6:	d005      	beq.n	8007404 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073f8:	4a07      	ldr	r2, [pc, #28]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 80073fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80073fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007400:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007402:	e7e3      	b.n	80073cc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007404:	4a04      	ldr	r2, [pc, #16]	; (8007418 <RCCEx_PLL2_Config+0x104>)
 8007406:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800740e:	e7dd      	b.n	80073cc <RCCEx_PLL2_Config+0xb8>
  return status;
 8007410:	2000      	movs	r0, #0
 8007412:	e79b      	b.n	800734c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007414:	2001      	movs	r0, #1
}
 8007416:	4770      	bx	lr
 8007418:	58024400 	.word	0x58024400
 800741c:	ffff0007 	.word	0xffff0007

08007420 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007420:	4b40      	ldr	r3, [pc, #256]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 8007422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007424:	f003 0303 	and.w	r3, r3, #3
 8007428:	2b03      	cmp	r3, #3
 800742a:	d079      	beq.n	8007520 <RCCEx_PLL3_Config+0x100>
{
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4605      	mov	r5, r0
 8007430:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007432:	4a3c      	ldr	r2, [pc, #240]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 8007434:	6813      	ldr	r3, [r2, #0]
 8007436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743c:	f7fc fd3c 	bl	8003eb8 <HAL_GetTick>
 8007440:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007442:	4b38      	ldr	r3, [pc, #224]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800744a:	d006      	beq.n	800745a <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800744c:	f7fc fd34 	bl	8003eb8 <HAL_GetTick>
 8007450:	1b03      	subs	r3, r0, r4
 8007452:	2b02      	cmp	r3, #2
 8007454:	d9f5      	bls.n	8007442 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007456:	2003      	movs	r0, #3

  }


  return status;
}
 8007458:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800745a:	4b32      	ldr	r3, [pc, #200]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 800745c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8007462:	6829      	ldr	r1, [r5, #0]
 8007464:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007468:	629a      	str	r2, [r3, #40]	; 0x28
 800746a:	686a      	ldr	r2, [r5, #4]
 800746c:	3a01      	subs	r2, #1
 800746e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007472:	68a9      	ldr	r1, [r5, #8]
 8007474:	3901      	subs	r1, #1
 8007476:	0249      	lsls	r1, r1, #9
 8007478:	b289      	uxth	r1, r1
 800747a:	430a      	orrs	r2, r1
 800747c:	68e9      	ldr	r1, [r5, #12]
 800747e:	3901      	subs	r1, #1
 8007480:	0409      	lsls	r1, r1, #16
 8007482:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007486:	430a      	orrs	r2, r1
 8007488:	6929      	ldr	r1, [r5, #16]
 800748a:	3901      	subs	r1, #1
 800748c:	0609      	lsls	r1, r1, #24
 800748e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8007492:	430a      	orrs	r2, r1
 8007494:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800749c:	6969      	ldr	r1, [r5, #20]
 800749e:	430a      	orrs	r2, r1
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074a8:	69a9      	ldr	r1, [r5, #24]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074b4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80074b8:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <RCCEx_PLL3_Config+0x108>)
 80074ba:	400a      	ands	r2, r1
 80074bc:	69e9      	ldr	r1, [r5, #28]
 80074be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80074c2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ca:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80074cc:	b9c6      	cbnz	r6, 8007500 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074ce:	461a      	mov	r2, r3
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80074d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80074d8:	4a12      	ldr	r2, [pc, #72]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 80074da:	6813      	ldr	r3, [r2, #0]
 80074dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80074e2:	f7fc fce9 	bl	8003eb8 <HAL_GetTick>
 80074e6:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074e8:	4b0e      	ldr	r3, [pc, #56]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80074f0:	d114      	bne.n	800751c <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074f2:	f7fc fce1 	bl	8003eb8 <HAL_GetTick>
 80074f6:	1b00      	subs	r0, r0, r4
 80074f8:	2802      	cmp	r0, #2
 80074fa:	d9f5      	bls.n	80074e8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80074fc:	2003      	movs	r0, #3
 80074fe:	e7ab      	b.n	8007458 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8007500:	2e01      	cmp	r6, #1
 8007502:	d005      	beq.n	8007510 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007504:	4a07      	ldr	r2, [pc, #28]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 8007506:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007508:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800750c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800750e:	e7e3      	b.n	80074d8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007510:	4a04      	ldr	r2, [pc, #16]	; (8007524 <RCCEx_PLL3_Config+0x104>)
 8007512:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007518:	62d3      	str	r3, [r2, #44]	; 0x2c
 800751a:	e7dd      	b.n	80074d8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800751c:	2000      	movs	r0, #0
 800751e:	e79b      	b.n	8007458 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8007520:	2001      	movs	r0, #1
}
 8007522:	4770      	bx	lr
 8007524:	58024400 	.word	0x58024400
 8007528:	ffff0007 	.word	0xffff0007

0800752c <HAL_RCCEx_PeriphCLKConfig>:
{
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007530:	6803      	ldr	r3, [r0, #0]
 8007532:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007536:	d030      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007538:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800753e:	d026      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007540:	d80e      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007542:	b1eb      	cbz	r3, 8007580 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007548:	d107      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800754a:	2102      	movs	r1, #2
 800754c:	3008      	adds	r0, #8
 800754e:	f7ff fee1 	bl	8007314 <RCCEx_PLL2_Config>
 8007552:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007554:	b145      	cbz	r5, 8007568 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007556:	462e      	mov	r6, r5
 8007558:	e021      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800755a:	2601      	movs	r6, #1
 800755c:	4635      	mov	r5, r6
 800755e:	e01e      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007560:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007564:	d109      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007566:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007568:	4a98      	ldr	r2, [pc, #608]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800756a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800756c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007570:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007572:	430b      	orrs	r3, r1
 8007574:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007576:	2600      	movs	r6, #0
 8007578:	e011      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800757a:	2601      	movs	r6, #1
 800757c:	4635      	mov	r5, r6
 800757e:	e00e      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4a92      	ldr	r2, [pc, #584]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007582:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800758a:	2500      	movs	r5, #0
 800758c:	e7ec      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758e:	2102      	movs	r1, #2
 8007590:	3028      	adds	r0, #40	; 0x28
 8007592:	f7ff ff45 	bl	8007420 <RCCEx_PLL3_Config>
 8007596:	4605      	mov	r5, r0
        break;
 8007598:	e7dc      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800759a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800759c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80075a4:	d014      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 80075a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d832      	bhi.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80075ac:	e8df f003 	tbb	[pc, r3]
 80075b0:	082a2303 	.word	0x082a2303
 80075b4:	08          	.byte	0x08
 80075b5:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b6:	4a85      	ldr	r2, [pc, #532]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80075b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80075ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075be:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80075c0:	bb55      	cbnz	r5, 8007618 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075c2:	4a82      	ldr	r2, [pc, #520]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80075c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80075d6:	d031      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
 80075d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80075da:	2b80      	cmp	r3, #128	; 0x80
 80075dc:	d04c      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80075de:	d820      	bhi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d043      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x140>
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d119      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075e8:	2100      	movs	r1, #0
 80075ea:	f104 0008 	add.w	r0, r4, #8
 80075ee:	f7ff fe91 	bl	8007314 <RCCEx_PLL2_Config>
 80075f2:	4605      	mov	r5, r0
        break;
 80075f4:	e01a      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075f6:	2100      	movs	r1, #0
 80075f8:	f104 0008 	add.w	r0, r4, #8
 80075fc:	f7ff fe8a 	bl	8007314 <RCCEx_PLL2_Config>
 8007600:	4605      	mov	r5, r0
        break;
 8007602:	e7dd      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007604:	2100      	movs	r1, #0
 8007606:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800760a:	f7ff ff09 	bl	8007420 <RCCEx_PLL3_Config>
 800760e:	4605      	mov	r5, r0
        break;
 8007610:	e7d6      	b.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007612:	2601      	movs	r6, #1
 8007614:	4635      	mov	r5, r6
 8007616:	e7db      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007618:	462e      	mov	r6, r5
 800761a:	e7d9      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 800761c:	2601      	movs	r6, #1
 800761e:	4635      	mov	r5, r6
 8007620:	e00c      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8007622:	2bc0      	cmp	r3, #192	; 0xc0
 8007624:	d002      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d11c      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 800762c:	bb5d      	cbnz	r5, 8007686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800762e:	4a67      	ldr	r2, [pc, #412]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007630:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007632:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007636:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007638:	430b      	orrs	r3, r1
 800763a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8007642:	d046      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007644:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800764c:	d039      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800764e:	d81f      	bhi.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8007650:	b38b      	cbz	r3, 80076b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007656:	d118      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007658:	2100      	movs	r1, #0
 800765a:	f104 0008 	add.w	r0, r4, #8
 800765e:	f7ff fe59 	bl	8007314 <RCCEx_PLL2_Config>
 8007662:	4605      	mov	r5, r0
        break;
 8007664:	e01a      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007666:	2601      	movs	r6, #1
 8007668:	4635      	mov	r5, r6
 800766a:	e7e7      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800766c:	4a57      	ldr	r2, [pc, #348]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800766e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007674:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007676:	e7d9      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007678:	2100      	movs	r1, #0
 800767a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800767e:	f7ff fecf 	bl	8007420 <RCCEx_PLL3_Config>
 8007682:	4605      	mov	r5, r0
        break;
 8007684:	e7d2      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007686:	462e      	mov	r6, r5
 8007688:	e7d8      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
 800768a:	2601      	movs	r6, #1
 800768c:	4635      	mov	r5, r6
 800768e:	e020      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007690:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007694:	d002      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x170>
 8007696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800769a:	d109      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
 800769c:	b9c5      	cbnz	r5, 80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800769e:	4a4b      	ldr	r2, [pc, #300]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80076a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80076a2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80076a6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80076aa:	430b      	orrs	r3, r1
 80076ac:	6593      	str	r3, [r2, #88]	; 0x58
 80076ae:	e010      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 80076b0:	2601      	movs	r6, #1
 80076b2:	4635      	mov	r5, r6
 80076b4:	e00d      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076b6:	4a45      	ldr	r2, [pc, #276]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80076b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076be:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80076c0:	e7ec      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076c2:	2100      	movs	r1, #0
 80076c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80076c8:	f7ff feaa 	bl	8007420 <RCCEx_PLL3_Config>
 80076cc:	4605      	mov	r5, r0
        break;
 80076ce:	e7e5      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x170>
 80076d0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80076d8:	d024      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
 80076da:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80076de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076e2:	d042      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80076e4:	d80e      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d039      	beq.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x232>
 80076ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ee:	d106      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076f0:	2100      	movs	r1, #0
 80076f2:	f104 0008 	add.w	r0, r4, #8
 80076f6:	f7ff fe0d 	bl	8007314 <RCCEx_PLL2_Config>
 80076fa:	4605      	mov	r5, r0
        break;
 80076fc:	e008      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
 80076fe:	2601      	movs	r6, #1
 8007700:	4635      	mov	r5, r6
 8007702:	e00f      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007704:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007708:	d002      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800770a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800770e:	d123      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
 8007710:	2d00      	cmp	r5, #0
 8007712:	d131      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007714:	4a2d      	ldr	r2, [pc, #180]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007716:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007718:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800771c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007720:	430b      	orrs	r3, r1
 8007722:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800772a:	d02e      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
 800772c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800772e:	2b20      	cmp	r3, #32
 8007730:	d040      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007732:	d826      	bhi.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007734:	b133      	cbz	r3, 8007744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007736:	2b10      	cmp	r3, #16
 8007738:	d120      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800773a:	4a24      	ldr	r2, [pc, #144]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800773c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800773e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007742:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007744:	2d00      	cmp	r5, #0
 8007746:	d13c      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007748:	4a20      	ldr	r2, [pc, #128]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800774a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800774c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007750:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007752:	430b      	orrs	r3, r1
 8007754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007756:	e018      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007758:	2601      	movs	r6, #1
 800775a:	4635      	mov	r5, r6
 800775c:	e7e2      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775e:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007760:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007766:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007768:	e7d2      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800776a:	2100      	movs	r1, #0
 800776c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007770:	f7ff fe56 	bl	8007420 <RCCEx_PLL3_Config>
 8007774:	4605      	mov	r5, r0
        break;
 8007776:	e7cb      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007778:	462e      	mov	r6, r5
 800777a:	e7d3      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
 800777c:	2601      	movs	r6, #1
 800777e:	4635      	mov	r5, r6
 8007780:	e003      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007782:	2b30      	cmp	r3, #48	; 0x30
 8007784:	d0de      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007786:	2601      	movs	r6, #1
 8007788:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8007790:	d02d      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007792:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007798:	d04f      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800779a:	d819      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d046      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x302>
 80077a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077a4:	d10f      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a6:	2100      	movs	r1, #0
 80077a8:	f104 0008 	add.w	r0, r4, #8
 80077ac:	f7ff fdb2 	bl	8007314 <RCCEx_PLL2_Config>
 80077b0:	4605      	mov	r5, r0
        break;
 80077b2:	e013      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077b4:	2102      	movs	r1, #2
 80077b6:	f104 0008 	add.w	r0, r4, #8
 80077ba:	f7ff fdab 	bl	8007314 <RCCEx_PLL2_Config>
 80077be:	4605      	mov	r5, r0
        break;
 80077c0:	e7c0      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80077c2:	462e      	mov	r6, r5
 80077c4:	e7e1      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
 80077c6:	2601      	movs	r6, #1
 80077c8:	4635      	mov	r5, r6
 80077ca:	e010      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80077cc:	58024400 	.word	0x58024400
 80077d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077d4:	d002      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80077d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077da:	d125      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 80077dc:	2d00      	cmp	r5, #0
 80077de:	d133      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077e0:	4a77      	ldr	r2, [pc, #476]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80077e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80077e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80077ea:	430b      	orrs	r3, r1
 80077ec:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80077f4:	d038      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80077f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077fc:	d053      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80077fe:	d828      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007800:	b143      	cbz	r3, 8007814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007806:	d121      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007808:	2101      	movs	r1, #1
 800780a:	f104 0008 	add.w	r0, r4, #8
 800780e:	f7ff fd81 	bl	8007314 <RCCEx_PLL2_Config>
 8007812:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007814:	2d00      	cmp	r5, #0
 8007816:	d14d      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007818:	4a69      	ldr	r2, [pc, #420]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800781a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800781c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007820:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007822:	430b      	orrs	r3, r1
 8007824:	6513      	str	r3, [r2, #80]	; 0x50
 8007826:	e01f      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007828:	2601      	movs	r6, #1
 800782a:	4635      	mov	r5, r6
 800782c:	e7df      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782e:	4a64      	ldr	r2, [pc, #400]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007830:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007836:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007838:	e7d0      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800783a:	2100      	movs	r1, #0
 800783c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007840:	f7ff fdee 	bl	8007420 <RCCEx_PLL3_Config>
 8007844:	4605      	mov	r5, r0
        break;
 8007846:	e7c9      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007848:	462e      	mov	r6, r5
 800784a:	e7d0      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 800784c:	2601      	movs	r6, #1
 800784e:	4635      	mov	r5, r6
 8007850:	e00a      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007852:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007856:	d0dd      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800785c:	d0da      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800785e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007862:	d0d7      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007864:	2601      	movs	r6, #1
 8007866:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800786e:	d031      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007870:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007878:	d045      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 800787a:	d820      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x392>
 800787c:	b143      	cbz	r3, 8007890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800787e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007882:	d119      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007884:	2101      	movs	r1, #1
 8007886:	f104 0008 	add.w	r0, r4, #8
 800788a:	f7ff fd43 	bl	8007314 <RCCEx_PLL2_Config>
 800788e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007890:	2d00      	cmp	r5, #0
 8007892:	d13f      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007894:	4a4a      	ldr	r2, [pc, #296]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007896:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007898:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800789c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6593      	str	r3, [r2, #88]	; 0x58
 80078a4:	e016      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078a6:	2101      	movs	r1, #1
 80078a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80078ac:	f7ff fdb8 	bl	8007420 <RCCEx_PLL3_Config>
 80078b0:	4605      	mov	r5, r0
        break;
 80078b2:	e7af      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80078b4:	462e      	mov	r6, r5
 80078b6:	e7d7      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80078b8:	2601      	movs	r6, #1
 80078ba:	4635      	mov	r5, r6
 80078bc:	e00a      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c2:	d0e5      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c8:	d0e2      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80078ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078ce:	d0df      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80078d0:	2601      	movs	r6, #1
 80078d2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80078da:	d009      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
 80078dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80078de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078e2:	d019      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80078e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078e8:	d024      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80078ea:	b1d3      	cbz	r3, 8007922 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80078ec:	2601      	movs	r6, #1
 80078ee:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80078f6:	d033      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
 80078f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d85b      	bhi.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80078fe:	e8df f003 	tbb	[pc, r3]
 8007902:	2227      	.short	0x2227
 8007904:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007906:	2101      	movs	r1, #1
 8007908:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800790c:	f7ff fd88 	bl	8007420 <RCCEx_PLL3_Config>
 8007910:	4605      	mov	r5, r0
        break;
 8007912:	e7bd      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007914:	462e      	mov	r6, r5
 8007916:	e7dd      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007918:	4a29      	ldr	r2, [pc, #164]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800791a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800791c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007920:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007922:	b975      	cbnz	r5, 8007942 <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007924:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007926:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007928:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800792c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800792e:	430b      	orrs	r3, r1
 8007930:	6513      	str	r3, [r2, #80]	; 0x50
 8007932:	e7dd      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007934:	2101      	movs	r1, #1
 8007936:	f104 0008 	add.w	r0, r4, #8
 800793a:	f7ff fceb 	bl	8007314 <RCCEx_PLL2_Config>
 800793e:	4605      	mov	r5, r0
        break;
 8007940:	e7ef      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8007942:	462e      	mov	r6, r5
 8007944:	e7d4      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007946:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007948:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800794a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800794e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007950:	bba5      	cbnz	r5, 80079bc <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007952:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007954:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800795c:	430b      	orrs	r3, r1
 800795e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007966:	d12d      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	f013 0f01 	tst.w	r3, #1
 800796e:	f000 80a5 	beq.w	8007abc <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007972:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007974:	2b28      	cmp	r3, #40	; 0x28
 8007976:	f200 809f 	bhi.w	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800797a:	e8df f003 	tbb	[pc, r3]
 800797e:	9d8d      	.short	0x9d8d
 8007980:	9d9d9d9d 	.word	0x9d9d9d9d
 8007984:	9d879d9d 	.word	0x9d879d9d
 8007988:	9d9d9d9d 	.word	0x9d9d9d9d
 800798c:	9d969d9d 	.word	0x9d969d9d
 8007990:	9d9d9d9d 	.word	0x9d9d9d9d
 8007994:	9d8d9d9d 	.word	0x9d8d9d9d
 8007998:	9d9d9d9d 	.word	0x9d9d9d9d
 800799c:	9d8d9d9d 	.word	0x9d8d9d9d
 80079a0:	9d9d9d9d 	.word	0x9d9d9d9d
 80079a4:	9d9d      	.short	0x9d9d
 80079a6:	8d          	.byte	0x8d
 80079a7:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079a8:	2102      	movs	r1, #2
 80079aa:	f104 0008 	add.w	r0, r4, #8
 80079ae:	f7ff fcb1 	bl	8007314 <RCCEx_PLL2_Config>
 80079b2:	4605      	mov	r5, r0
        break;
 80079b4:	e7cc      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
 80079b6:	2601      	movs	r6, #1
 80079b8:	4635      	mov	r5, r6
 80079ba:	e7d1      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80079bc:	462e      	mov	r6, r5
 80079be:	e7cf      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80079c0:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079c4:	4a91      	ldr	r2, [pc, #580]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80079ce:	f7fc fa73 	bl	8003eb8 <HAL_GetTick>
 80079d2:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079d4:	4b8d      	ldr	r3, [pc, #564]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80079dc:	d105      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079de:	f7fc fa6b 	bl	8003eb8 <HAL_GetTick>
 80079e2:	1bc0      	subs	r0, r0, r7
 80079e4:	2864      	cmp	r0, #100	; 0x64
 80079e6:	d9f5      	bls.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
 80079e8:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	d14a      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079ee:	4b88      	ldr	r3, [pc, #544]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80079f6:	4053      	eors	r3, r2
 80079f8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80079fc:	d00c      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079fe:	4b84      	ldr	r3, [pc, #528]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a06:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007a08:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007a0c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a0e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007a10:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007a14:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007a16:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a18:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d015      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
 8007a22:	bb8d      	cbnz	r5, 8007a88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a24:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007a28:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007a2c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007a30:	d01e      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007a32:	4a77      	ldr	r2, [pc, #476]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a34:	6913      	ldr	r3, [r2, #16]
 8007a36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a3a:	6113      	str	r3, [r2, #16]
 8007a3c:	4974      	ldr	r1, [pc, #464]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a3e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8007a40:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007a44:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	670b      	str	r3, [r1, #112]	; 0x70
 8007a4c:	e78c      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
 8007a4e:	f7fc fa33 	bl	8003eb8 <HAL_GetTick>
 8007a52:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a54:	4b6e      	ldr	r3, [pc, #440]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	f013 0f02 	tst.w	r3, #2
 8007a5c:	d1e1      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5e:	f7fc fa2b 	bl	8003eb8 <HAL_GetTick>
 8007a62:	1bc0      	subs	r0, r0, r7
 8007a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	d9f3      	bls.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
 8007a6c:	2503      	movs	r5, #3
 8007a6e:	e7d8      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a70:	4867      	ldr	r0, [pc, #412]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a72:	6902      	ldr	r2, [r0, #16]
 8007a74:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007a78:	4966      	ldr	r1, [pc, #408]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007a7a:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	6103      	str	r3, [r0, #16]
 8007a82:	e7db      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
 8007a84:	462e      	mov	r6, r5
 8007a86:	e76f      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
 8007a88:	462e      	mov	r6, r5
 8007a8a:	e76d      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	f104 0008 	add.w	r0, r4, #8
 8007a92:	f7ff fc3f 	bl	8007314 <RCCEx_PLL2_Config>
 8007a96:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a98:	b9e5      	cbnz	r5, 8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a9a:	4a5d      	ldr	r2, [pc, #372]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007a9c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a9e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007aa2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6553      	str	r3, [r2, #84]	; 0x54
 8007aa8:	e008      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aaa:	2101      	movs	r1, #1
 8007aac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007ab0:	f7ff fcb6 	bl	8007420 <RCCEx_PLL3_Config>
 8007ab4:	4605      	mov	r5, r0
        break;
 8007ab6:	e7ef      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007ab8:	2601      	movs	r6, #1
 8007aba:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	f013 0f02 	tst.w	r3, #2
 8007ac2:	d017      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ac4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d828      	bhi.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8007aca:	e8df f003 	tbb	[pc, r3]
 8007ace:	050b      	.short	0x050b
 8007ad0:	0b0b0b20 	.word	0x0b0b0b20
 8007ad4:	462e      	mov	r6, r5
 8007ad6:	e7f1      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ad8:	2101      	movs	r1, #1
 8007ada:	f104 0008 	add.w	r0, r4, #8
 8007ade:	f7ff fc19 	bl	8007314 <RCCEx_PLL2_Config>
 8007ae2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007ae4:	b9ed      	cbnz	r5, 8007b22 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ae6:	4a4a      	ldr	r2, [pc, #296]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007ae8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007af0:	430b      	orrs	r3, r1
 8007af2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	f013 0f04 	tst.w	r3, #4
 8007afa:	d023      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007afc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	d845      	bhi.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007b04:	e8df f003 	tbb	[pc, r3]
 8007b08:	153d0f15 	.word	0x153d0f15
 8007b0c:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b0e:	2101      	movs	r1, #1
 8007b10:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007b14:	f7ff fc84 	bl	8007420 <RCCEx_PLL3_Config>
 8007b18:	4605      	mov	r5, r0
        break;
 8007b1a:	e7e3      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b1c:	2601      	movs	r6, #1
 8007b1e:	4635      	mov	r5, r6
 8007b20:	e7e8      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007b22:	462e      	mov	r6, r5
 8007b24:	e7e6      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b26:	2101      	movs	r1, #1
 8007b28:	f104 0008 	add.w	r0, r4, #8
 8007b2c:	f7ff fbf2 	bl	8007314 <RCCEx_PLL2_Config>
 8007b30:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b32:	bb85      	cbnz	r5, 8007b96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b34:	4a36      	ldr	r2, [pc, #216]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007b36:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b38:	f023 0307 	bic.w	r3, r3, #7
 8007b3c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007b40:	430b      	orrs	r3, r1
 8007b42:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	f013 0f20 	tst.w	r3, #32
 8007b4a:	d034      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b54:	d04e      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8007b56:	d823      	bhi.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8007b58:	b143      	cbz	r3, 8007b6c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5e:	d11c      	bne.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b60:	2100      	movs	r1, #0
 8007b62:	f104 0008 	add.w	r0, r4, #8
 8007b66:	f7ff fbd5 	bl	8007314 <RCCEx_PLL2_Config>
 8007b6a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	d148      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b70:	4a27      	ldr	r2, [pc, #156]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007b72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007b74:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007b78:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6553      	str	r3, [r2, #84]	; 0x54
 8007b80:	e019      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b82:	2101      	movs	r1, #1
 8007b84:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007b88:	f7ff fc4a 	bl	8007420 <RCCEx_PLL3_Config>
 8007b8c:	4605      	mov	r5, r0
        break;
 8007b8e:	e7d0      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b90:	2601      	movs	r6, #1
 8007b92:	4635      	mov	r5, r6
 8007b94:	e7d6      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007b96:	462e      	mov	r6, r5
 8007b98:	e7d4      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b9a:	2601      	movs	r6, #1
 8007b9c:	4635      	mov	r5, r6
 8007b9e:	e00a      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 8007ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba4:	d0e2      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007baa:	d0df      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007bac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007bb0:	d0dc      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007bb2:	2601      	movs	r6, #1
 8007bb4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bbc:	d037      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007bbe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8007bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc6:	d053      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8007bc8:	d826      	bhi.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8007bca:	b143      	cbz	r3, 8007bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd0:	d119      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	f104 0008 	add.w	r0, r4, #8
 8007bd8:	f7ff fb9c 	bl	8007314 <RCCEx_PLL2_Config>
 8007bdc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007bde:	2d00      	cmp	r5, #0
 8007be0:	d14d      	bne.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007be2:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007be4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007be6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007bea:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8007bf2:	e01c      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bf4:	2102      	movs	r1, #2
 8007bf6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007bfa:	f7ff fc11 	bl	8007420 <RCCEx_PLL3_Config>
 8007bfe:	4605      	mov	r5, r0
        break;
 8007c00:	e7b4      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007c02:	462e      	mov	r6, r5
 8007c04:	e7d7      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c06:	2601      	movs	r6, #1
 8007c08:	4635      	mov	r5, r6
 8007c0a:	e010      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8007c0c:	58024800 	.word	0x58024800
 8007c10:	58024400 	.word	0x58024400
 8007c14:	00ffffcf 	.word	0x00ffffcf
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1c:	d0df      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007c1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007c22:	d0dc      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c28:	d0d9      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007c2a:	2601      	movs	r6, #1
 8007c2c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c2e:	6823      	ldr	r3, [r4, #0]
 8007c30:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c34:	d033      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c36:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c3e:	f000 80a3 	beq.w	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8007c42:	d821      	bhi.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8007c44:	b143      	cbz	r3, 8007c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c4a:	d11a      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f104 0008 	add.w	r0, r4, #8
 8007c52:	f7ff fb5f 	bl	8007314 <RCCEx_PLL2_Config>
 8007c56:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	f040 809c 	bne.w	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c5e:	4a81      	ldr	r2, [pc, #516]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007c60:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007c62:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c66:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c6e:	e016      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c70:	2102      	movs	r1, #2
 8007c72:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007c76:	f7ff fbd3 	bl	8007420 <RCCEx_PLL3_Config>
 8007c7a:	4605      	mov	r5, r0
        break;
 8007c7c:	e7af      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007c7e:	462e      	mov	r6, r5
 8007c80:	e7d5      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007c82:	2601      	movs	r6, #1
 8007c84:	4635      	mov	r5, r6
 8007c86:	e00a      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x772>
 8007c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8c:	d0e4      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007c8e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c92:	d0e1      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007c94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c98:	d0de      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007c9a:	2601      	movs	r6, #1
 8007c9c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f013 0f08 	tst.w	r3, #8
 8007ca4:	d00c      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ca6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8007caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cae:	d074      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cb0:	4a6c      	ldr	r2, [pc, #432]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007cb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007cb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007cb8:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	f013 0f10 	tst.w	r3, #16
 8007cc6:	d00c      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cc8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd0:	d06c      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cd2:	4a64      	ldr	r2, [pc, #400]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007cd4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cda:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8007ce8:	d00b      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
 8007cea:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf2:	d074      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf8:	d067      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d05f      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x892>
 8007cfe:	2601      	movs	r6, #1
 8007d00:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007d08:	d00c      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
 8007d0a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d12:	d07c      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d18:	d06f      	beq.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d1e:	d067      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007d20:	2601      	movs	r6, #1
 8007d22:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007d2a:	d008      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007d2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d076      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8007d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d36:	f000 8081 	beq.w	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007d3a:	2601      	movs	r6, #1
 8007d3c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007d44:	f040 8083 	bne.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8007d4e:	f000 808e 	beq.w	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
 8007d52:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5a:	f000 80ec 	beq.w	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007d5e:	f240 8083 	bls.w	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8007d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d66:	d003      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d6c:	f040 80e1 	bne.w	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	f040 80e6 	bne.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d76:	4a3b      	ldr	r2, [pc, #236]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007d78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007d82:	430b      	orrs	r3, r1
 8007d84:	6553      	str	r3, [r2, #84]	; 0x54
 8007d86:	e072      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d88:	2102      	movs	r1, #2
 8007d8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007d8e:	f7ff fb47 	bl	8007420 <RCCEx_PLL3_Config>
 8007d92:	4605      	mov	r5, r0
        break;
 8007d94:	e760      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007d96:	462e      	mov	r6, r5
 8007d98:	e781      	b.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007da0:	f7ff fb3e 	bl	8007420 <RCCEx_PLL3_Config>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d083      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
 8007da8:	2601      	movs	r6, #1
 8007daa:	e781      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dac:	2102      	movs	r1, #2
 8007dae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007db2:	f7ff fb35 	bl	8007420 <RCCEx_PLL3_Config>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d08b      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
 8007dba:	2601      	movs	r6, #1
 8007dbc:	e789      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	f104 0008 	add.w	r0, r4, #8
 8007dc4:	f7ff faa6 	bl	8007314 <RCCEx_PLL2_Config>
 8007dc8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007dca:	b97d      	cbnz	r5, 8007dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dcc:	4a25      	ldr	r2, [pc, #148]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007dce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007dd0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007dd4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6593      	str	r3, [r2, #88]	; 0x58
 8007ddc:	e791      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dde:	2102      	movs	r1, #2
 8007de0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007de4:	f7ff fb1c 	bl	8007420 <RCCEx_PLL3_Config>
 8007de8:	4605      	mov	r5, r0
        break;
 8007dea:	e7ee      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
 8007dec:	462e      	mov	r6, r5
 8007dee:	e788      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007df2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007dfa:	b97d      	cbnz	r5, 8007e1c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dfc:	4a19      	ldr	r2, [pc, #100]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007dfe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007e00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e04:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6553      	str	r3, [r2, #84]	; 0x54
 8007e0c:	e78a      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e0e:	2101      	movs	r1, #1
 8007e10:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e14:	f7ff fb04 	bl	8007420 <RCCEx_PLL3_Config>
 8007e18:	4605      	mov	r5, r0
        break;
 8007e1a:	e7ee      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007e1c:	462e      	mov	r6, r5
 8007e1e:	e781      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e20:	4a10      	ldr	r2, [pc, #64]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007e22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007e2a:	b975      	cbnz	r5, 8007e4a <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e2c:	4a0d      	ldr	r2, [pc, #52]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007e2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e34:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007e36:	430b      	orrs	r3, r1
 8007e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e3a:	e780      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e3c:	2102      	movs	r1, #2
 8007e3e:	f104 0008 	add.w	r0, r4, #8
 8007e42:	f7ff fa67 	bl	8007314 <RCCEx_PLL2_Config>
 8007e46:	4605      	mov	r5, r0
        break;
 8007e48:	e7ef      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007e4a:	462e      	mov	r6, r5
 8007e4c:	e777      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e4e:	2102      	movs	r1, #2
 8007e50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e54:	f7ff fae4 	bl	8007420 <RCCEx_PLL3_Config>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f43f af75 	beq.w	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
 8007e5e:	2601      	movs	r6, #1
 8007e60:	e772      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d081      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007e6c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007e74:	d006      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e76:	4a4f      	ldr	r2, [pc, #316]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e7e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007e80:	430b      	orrs	r3, r1
 8007e82:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007e8a:	d007      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e8c:	4a49      	ldr	r2, [pc, #292]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007e8e:	6913      	ldr	r3, [r2, #16]
 8007e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e94:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e9c:	6823      	ldr	r3, [r4, #0]
 8007e9e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007ea2:	d006      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ea4:	4a43      	ldr	r2, [pc, #268]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ea6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eac:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007eb8:	d009      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eba:	4b3e      	ldr	r3, [pc, #248]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ec2:	611a      	str	r2, [r3, #16]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	da06      	bge.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ed4:	4a37      	ldr	r2, [pc, #220]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ed6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007ed8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007edc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007ee8:	d007      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007eea:	4a32      	ldr	r2, [pc, #200]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007eec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007eee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ef2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007ef6:	430b      	orrs	r3, r1
 8007ef8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	f013 0f01 	tst.w	r3, #1
 8007f00:	d121      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	f013 0f02 	tst.w	r3, #2
 8007f08:	d126      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	f013 0f04 	tst.w	r3, #4
 8007f10:	d12b      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	f013 0f08 	tst.w	r3, #8
 8007f18:	d130      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007f1a:	6863      	ldr	r3, [r4, #4]
 8007f1c:	f013 0f10 	tst.w	r3, #16
 8007f20:	d135      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	f013 0f20 	tst.w	r3, #32
 8007f28:	d13a      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
 8007f2a:	b106      	cbz	r6, 8007f2e <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
 8007f2c:	2601      	movs	r6, #1
}
 8007f2e:	4630      	mov	r0, r6
 8007f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 8007f32:	2601      	movs	r6, #1
 8007f34:	e79b      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f36:	4a1f      	ldr	r2, [pc, #124]	; (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007f40:	e716      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007f42:	462e      	mov	r6, r5
 8007f44:	e793      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f46:	2100      	movs	r1, #0
 8007f48:	f104 0008 	add.w	r0, r4, #8
 8007f4c:	f7ff f9e2 	bl	8007314 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d0d6      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
 8007f54:	4606      	mov	r6, r0
 8007f56:	e7d4      	b.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f58:	2101      	movs	r1, #1
 8007f5a:	f104 0008 	add.w	r0, r4, #8
 8007f5e:	f7ff f9d9 	bl	8007314 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d0d1      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
 8007f66:	4606      	mov	r6, r0
 8007f68:	e7cf      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	f104 0008 	add.w	r0, r4, #8
 8007f70:	f7ff f9d0 	bl	8007314 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0cc      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
 8007f78:	4606      	mov	r6, r0
 8007f7a:	e7ca      	b.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007f82:	f7ff fa4d 	bl	8007420 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d0c7      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	e7c5      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f8e:	2101      	movs	r1, #1
 8007f90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007f94:	f7ff fa44 	bl	8007420 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d0c2      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	e7c0      	b.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007fa6:	f7ff fa3b 	bl	8007420 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d0bd      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
 8007fae:	4606      	mov	r6, r0
 8007fb0:	e7bb      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400

08007fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007fb8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fba:	f7ff f977 	bl	80072ac <HAL_RCC_GetHCLKFreq>
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007fc6:	4a04      	ldr	r2, [pc, #16]	; (8007fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007fc8:	5cd3      	ldrb	r3, [r2, r3]
 8007fca:	f003 031f 	and.w	r3, r3, #31
}
 8007fce:	40d8      	lsrs	r0, r3
 8007fd0:	bd08      	pop	{r3, pc}
 8007fd2:	bf00      	nop
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	0801accc 	.word	0x0801accc

08007fdc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8007fdc:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fde:	4b78      	ldr	r3, [pc, #480]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007fe2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007fe4:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fe8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fea:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8007ff8:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8007ffc:	f000 80db 	beq.w	80081b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 8008000:	f002 0203 	and.w	r2, r2, #3
 8008004:	ee07 3a90 	vmov	s15, r3
 8008008:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800800c:	2a01      	cmp	r2, #1
 800800e:	d066      	beq.n	80080de <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8008010:	2a02      	cmp	r2, #2
 8008012:	f000 80b3 	beq.w	800817c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008016:	b1e2      	cbz	r2, 8008052 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008018:	ee07 ca10 	vmov	s14, ip
 800801c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008020:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8008024:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008028:	4b65      	ldr	r3, [pc, #404]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008030:	ee06 3a90 	vmov	s13, r3
 8008034:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008038:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800803c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804c:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8008050:	e061      	b.n	8008116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008052:	4b5b      	ldr	r3, [pc, #364]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f013 0f20 	tst.w	r3, #32
 800805a:	d023      	beq.n	80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800805c:	4958      	ldr	r1, [pc, #352]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800805e:	680a      	ldr	r2, [r1, #0]
 8008060:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008064:	4b59      	ldr	r3, [pc, #356]	; (80081cc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8008066:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008068:	ee07 3a10 	vmov	s14, r3
 800806c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008070:	ee07 ca10 	vmov	s14, ip
 8008074:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008078:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800807c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	ee06 3a90 	vmov	s13, r3
 8008086:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800808a:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800808e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080a2:	e038      	b.n	8008116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080a4:	ee07 ca10 	vmov	s14, ip
 80080a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080ac:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80081d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80080b0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80080b4:	4b42      	ldr	r3, [pc, #264]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080bc:	ee06 3a90 	vmov	s13, r3
 80080c0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80080c4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80080c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80080cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080dc:	e01b      	b.n	8008116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080de:	ee07 ca10 	vmov	s14, ip
 80080e2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080e6:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80080ea:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80080ee:	4b34      	ldr	r3, [pc, #208]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80080f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f6:	ee06 3a90 	vmov	s13, r3
 80080fa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80080fe:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8008102:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800810a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008112:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008116:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8008118:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800811a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800811e:	ee07 3a90 	vmov	s15, r3
 8008122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008132:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008136:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800813a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800813c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008150:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008154:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008158:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800815a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800816e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008172:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800817a:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800817c:	ee07 ca10 	vmov	s14, ip
 8008180:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008184:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80081d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8008188:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008194:	ee06 3a90 	vmov	s13, r3
 8008198:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800819c:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80081c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80081a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80081a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b0:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80081b4:	e7af      	b.n	8008116 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80081ba:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80081bc:	6083      	str	r3, [r0, #8]
}
 80081be:	e7da      	b.n	8008176 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80081c0:	58024400 	.word	0x58024400
 80081c4:	4a742400 	.word	0x4a742400
 80081c8:	39000000 	.word	0x39000000
 80081cc:	03d09000 	.word	0x03d09000
 80081d0:	4c742400 	.word	0x4c742400
 80081d4:	4bbebc20 	.word	0x4bbebc20

080081d8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80081d8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081da:	4b78      	ldr	r3, [pc, #480]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80081dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80081de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80081e0:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80081e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80081e6:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 80081f4:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 80081f8:	f000 80db 	beq.w	80083b2 <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 80081fc:	f002 0203 	and.w	r2, r2, #3
 8008200:	ee07 3a90 	vmov	s15, r3
 8008204:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008208:	2a01      	cmp	r2, #1
 800820a:	d066      	beq.n	80082da <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800820c:	2a02      	cmp	r2, #2
 800820e:	f000 80b3 	beq.w	8008378 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008212:	b1e2      	cbz	r2, 800824e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008214:	ee07 ca10 	vmov	s14, ip
 8008218:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800821c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8008220:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008224:	4b65      	ldr	r3, [pc, #404]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800822c:	ee06 3a90 	vmov	s13, r3
 8008230:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008234:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8008238:	ee67 7a86 	vmul.f32	s15, s15, s12
 800823c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008244:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008248:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800824c:	e061      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800824e:	4b5b      	ldr	r3, [pc, #364]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f013 0f20 	tst.w	r3, #32
 8008256:	d023      	beq.n	80082a0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008258:	4958      	ldr	r1, [pc, #352]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800825a:	680a      	ldr	r2, [r1, #0]
 800825c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008260:	4b59      	ldr	r3, [pc, #356]	; (80083c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8008262:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008264:	ee07 3a10 	vmov	s14, r3
 8008268:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800826c:	ee07 ca10 	vmov	s14, ip
 8008270:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008274:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee06 3a90 	vmov	s13, r3
 8008282:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008286:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800828a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800829e:	e038      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082a0:	ee07 ca10 	vmov	s14, ip
 80082a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80082a8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80083cc <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80082ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80082b0:	4b42      	ldr	r3, [pc, #264]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80082b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b8:	ee06 3a90 	vmov	s13, r3
 80082bc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082c0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80082c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80082c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082d8:	e01b      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082da:	ee07 ca10 	vmov	s14, ip
 80082de:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80082e2:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80083c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80082e6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80082ea:	4b34      	ldr	r3, [pc, #208]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f2:	ee06 3a90 	vmov	s13, r3
 80082f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80082fa:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80082fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800830a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800830e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008312:	4a2a      	ldr	r2, [pc, #168]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8008314:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008316:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800832a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800832e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008332:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008336:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008338:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800833c:	ee07 3a90 	vmov	s15, r3
 8008340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008348:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800834c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008350:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008354:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008356:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800835a:	ee07 3a90 	vmov	s15, r3
 800835e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008366:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800836a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800836e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008376:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008378:	ee07 ca10 	vmov	s14, ip
 800837c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008380:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80083d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8008384:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008390:	ee06 3a90 	vmov	s13, r3
 8008394:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008398:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80083c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800839c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80083a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ac:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80083b0:	e7af      	b.n	8008312 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80083b6:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80083b8:	6083      	str	r3, [r0, #8]
}
 80083ba:	e7da      	b.n	8008372 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80083bc:	58024400 	.word	0x58024400
 80083c0:	4a742400 	.word	0x4a742400
 80083c4:	39000000 	.word	0x39000000
 80083c8:	03d09000 	.word	0x03d09000
 80083cc:	4c742400 	.word	0x4c742400
 80083d0:	4bbebc20 	.word	0x4bbebc20

080083d4 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 80083d4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083d6:	4b78      	ldr	r3, [pc, #480]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80083d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80083da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80083dc:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80083e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083e2:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 80083f0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80083f4:	f000 80db 	beq.w	80085ae <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 80083f8:	f002 0203 	and.w	r2, r2, #3
 80083fc:	ee07 3a90 	vmov	s15, r3
 8008400:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008404:	2a01      	cmp	r2, #1
 8008406:	d066      	beq.n	80084d6 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8008408:	2a02      	cmp	r2, #2
 800840a:	f000 80b3 	beq.w	8008574 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 800840e:	b1e2      	cbz	r2, 800844a <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008410:	ee07 ca10 	vmov	s14, ip
 8008414:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008418:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80085bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 800841c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008420:	4b65      	ldr	r3, [pc, #404]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008428:	ee06 3a90 	vmov	s13, r3
 800842c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008430:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008434:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008444:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8008448:	e061      	b.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844a:	4b5b      	ldr	r3, [pc, #364]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f013 0f20 	tst.w	r3, #32
 8008452:	d023      	beq.n	800849c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008454:	4958      	ldr	r1, [pc, #352]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008456:	680a      	ldr	r2, [r1, #0]
 8008458:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800845c:	4b59      	ldr	r3, [pc, #356]	; (80085c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800845e:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008460:	ee07 3a10 	vmov	s14, r3
 8008464:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008468:	ee07 ca10 	vmov	s14, ip
 800846c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8008470:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008474:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847a:	ee06 3a90 	vmov	s13, r3
 800847e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008482:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008486:	ee67 7a86 	vmul.f32	s15, s15, s12
 800848a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800849a:	e038      	b.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800849c:	ee07 ca10 	vmov	s14, ip
 80084a0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084a4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80085bc <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80084a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80084ac:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b4:	ee06 3a90 	vmov	s13, r3
 80084b8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084bc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80084c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084d4:	e01b      	b.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d6:	ee07 ca10 	vmov	s14, ip
 80084da:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80084de:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80085c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80084e2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80084e6:	4b34      	ldr	r3, [pc, #208]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ee:	ee06 3a90 	vmov	s13, r3
 80084f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80084f6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80084fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800850e:	4a2a      	ldr	r2, [pc, #168]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008510:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008512:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008526:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800852a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800852e:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008532:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008534:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008538:	ee07 3a90 	vmov	s15, r3
 800853c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008544:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008548:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800854c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008550:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008552:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008556:	ee07 3a90 	vmov	s15, r3
 800855a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008566:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800856a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800856e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008572:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008574:	ee07 ca10 	vmov	s14, ip
 8008578:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800857c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80085cc <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8008580:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008584:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858c:	ee06 3a90 	vmov	s13, r3
 8008590:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008594:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80085c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008598:	ee67 7a86 	vmul.f32	s15, s15, s12
 800859c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80085ac:	e7af      	b.n	800850e <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80085b2:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80085b4:	6083      	str	r3, [r0, #8]
}
 80085b6:	e7da      	b.n	800856e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80085b8:	58024400 	.word	0x58024400
 80085bc:	4c742400 	.word	0x4c742400
 80085c0:	39000000 	.word	0x39000000
 80085c4:	03d09000 	.word	0x03d09000
 80085c8:	4a742400 	.word	0x4a742400
 80085cc:	4bbebc20 	.word	0x4bbebc20

080085d0 <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80085d0:	b500      	push	{lr}
 80085d2:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80085d4:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80085d8:	430b      	orrs	r3, r1
 80085da:	d02d      	beq.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085dc:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80085e0:	430b      	orrs	r3, r1
 80085e2:	d07d      	beq.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80085e4:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80085e8:	430b      	orrs	r3, r1
 80085ea:	f000 80d3 	beq.w	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80085ee:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80085f2:	430b      	orrs	r3, r1
 80085f4:	f000 812b 	beq.w	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80085f8:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 80085fc:	430b      	orrs	r3, r1
 80085fe:	f000 818b 	beq.w	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008602:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008606:	430b      	orrs	r3, r1
 8008608:	f000 81e3 	beq.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800860c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8008610:	430b      	orrs	r3, r1
 8008612:	f000 822c 	beq.w	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008616:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800861a:	430b      	orrs	r3, r1
 800861c:	f000 826f 	beq.w	8008afe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008620:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008624:	430b      	orrs	r3, r1
 8008626:	f000 8290 	beq.w	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800862a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800862e:	4308      	orrs	r0, r1
 8008630:	f000 82d4 	beq.w	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 8008634:	2000      	movs	r0, #0
 8008636:	e302      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008638:	4b95      	ldr	r3, [pc, #596]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008640:	2b04      	cmp	r3, #4
 8008642:	f200 82f3 	bhi.w	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008646:	e8df f003 	tbb	[pc, r3]
 800864a:	1005      	.short	0x1005
 800864c:	031b      	.short	0x031b
 800864e:	26          	.byte	0x26
 800864f:	00          	.byte	0x00
 8008650:	4890      	ldr	r0, [pc, #576]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008652:	e2f4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008654:	4b8e      	ldr	r3, [pc, #568]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800865c:	f000 82ef 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008660:	a807      	add	r0, sp, #28
 8008662:	f7ff feb7 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008666:	9808      	ldr	r0, [sp, #32]
 8008668:	e2e9      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866a:	4b89      	ldr	r3, [pc, #548]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008672:	f000 82e4 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008676:	a804      	add	r0, sp, #16
 8008678:	f7ff fcb0 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800867c:	9804      	ldr	r0, [sp, #16]
 800867e:	e2de      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008680:	4b83      	ldr	r3, [pc, #524]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008688:	f000 82d9 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	a801      	add	r0, sp, #4
 800868e:	f7ff fda3 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008692:	9801      	ldr	r0, [sp, #4]
 8008694:	e2d3      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008696:	4a7e      	ldr	r2, [pc, #504]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008698:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800869a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800869e:	6812      	ldr	r2, [r2, #0]
 80086a0:	f012 0f04 	tst.w	r2, #4
 80086a4:	d007      	beq.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80086a6:	b933      	cbnz	r3, 80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a8:	4b79      	ldr	r3, [pc, #484]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80086b0:	4879      	ldr	r0, [pc, #484]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80086b2:	40d8      	lsrs	r0, r3
 80086b4:	e2c3      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086b6:	4a76      	ldr	r2, [pc, #472]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	f412 7f80 	tst.w	r2, #256	; 0x100
 80086be:	d003      	beq.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80086c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086c4:	f000 82b4 	beq.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086c8:	4a71      	ldr	r2, [pc, #452]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80086d0:	f000 82b0 	beq.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80086d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d8:	f000 82ae 	beq.w	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 80086dc:	2000      	movs	r0, #0
 80086de:	e2ae      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80086e0:	4b6b      	ldr	r3, [pc, #428]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80086e8:	2b80      	cmp	r3, #128	; 0x80
 80086ea:	d033      	beq.n	8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80086ec:	d915      	bls.n	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80086ee:	2bc0      	cmp	r3, #192	; 0xc0
 80086f0:	f000 82a4 	beq.w	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80086f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f8:	d11f      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086fa:	4a65      	ldr	r2, [pc, #404]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80086fc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80086fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008702:	6812      	ldr	r2, [r2, #0]
 8008704:	f012 0f04 	tst.w	r2, #4
 8008708:	d02f      	beq.n	800876a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800870a:	bb73      	cbnz	r3, 800876a <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800870c:	4b60      	ldr	r3, [pc, #384]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008714:	4860      	ldr	r0, [pc, #384]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008716:	40d8      	lsrs	r0, r3
 8008718:	e291      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800871a:	b183      	cbz	r3, 800873e <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	d10a      	bne.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008720:	4b5b      	ldr	r3, [pc, #364]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008728:	f000 8289 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872c:	a804      	add	r0, sp, #16
 800872e:	f7ff fc55 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008732:	9804      	ldr	r0, [sp, #16]
 8008734:	e283      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008736:	2000      	movs	r0, #0
 8008738:	e281      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800873a:	2000      	movs	r0, #0
 800873c:	e27f      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800873e:	4b54      	ldr	r3, [pc, #336]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008740:	6818      	ldr	r0, [r3, #0]
 8008742:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008746:	f000 827a 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800874a:	a807      	add	r0, sp, #28
 800874c:	f7ff fe42 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008750:	9808      	ldr	r0, [sp, #32]
 8008752:	e274      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008754:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800875c:	f000 826f 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008760:	a801      	add	r0, sp, #4
 8008762:	f7ff fd39 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008766:	9801      	ldr	r0, [sp, #4]
 8008768:	e269      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800876a:	4a49      	ldr	r2, [pc, #292]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008772:	d003      	beq.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008778:	f000 8264 	beq.w	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800877c:	4a44      	ldr	r2, [pc, #272]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800877e:	6812      	ldr	r2, [r2, #0]
 8008780:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008784:	f000 8260 	beq.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8008788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800878c:	f000 825e 	beq.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 8008790:	2000      	movs	r0, #0
 8008792:	e254      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008794:	4b3e      	ldr	r3, [pc, #248]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008798:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800879c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087a0:	d035      	beq.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80087a2:	d916      	bls.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80087a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80087a8:	f000 8252 	beq.w	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80087ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087b0:	d120      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087b2:	4a37      	ldr	r2, [pc, #220]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80087b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	f012 0f04 	tst.w	r2, #4
 80087c0:	d030      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80087c2:	bb7b      	cbnz	r3, 8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087c4:	4b32      	ldr	r3, [pc, #200]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80087cc:	4832      	ldr	r0, [pc, #200]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80087ce:	40d8      	lsrs	r0, r3
 80087d0:	e235      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80087d2:	b18b      	cbz	r3, 80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80087d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087d8:	d10a      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087da:	4b2d      	ldr	r3, [pc, #180]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80087e2:	f000 822c 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	a804      	add	r0, sp, #16
 80087e8:	f7ff fbf8 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087ec:	9804      	ldr	r0, [sp, #16]
 80087ee:	e226      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80087f0:	2000      	movs	r0, #0
 80087f2:	e224      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80087f4:	2000      	movs	r0, #0
 80087f6:	e222      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008800:	f000 821d 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008804:	a807      	add	r0, sp, #28
 8008806:	f7ff fde5 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800880a:	9808      	ldr	r0, [sp, #32]
 800880c:	e217      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800880e:	4b20      	ldr	r3, [pc, #128]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008816:	f000 8212 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800881a:	a801      	add	r0, sp, #4
 800881c:	f7ff fcdc 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008820:	9801      	ldr	r0, [sp, #4]
 8008822:	e20c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008824:	4a1a      	ldr	r2, [pc, #104]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	f412 7f80 	tst.w	r2, #256	; 0x100
 800882c:	d003      	beq.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800882e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008832:	f000 820f 	beq.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008836:	4a16      	ldr	r2, [pc, #88]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800883e:	f000 820b 	beq.w	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8008842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008846:	f000 8209 	beq.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 800884a:	2000      	movs	r0, #0
 800884c:	e1f7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800884e:	4b10      	ldr	r3, [pc, #64]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008852:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800885a:	d03d      	beq.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800885c:	d91e      	bls.n	800889c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800885e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008862:	f000 81fd 	beq.w	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8008866:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800886a:	d128      	bne.n	80088be <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800886c:	4a08      	ldr	r2, [pc, #32]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800886e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008874:	6812      	ldr	r2, [r2, #0]
 8008876:	f012 0f04 	tst.w	r2, #4
 800887a:	d038      	beq.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d136      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008880:	4b03      	ldr	r3, [pc, #12]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008888:	4803      	ldr	r0, [pc, #12]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800888a:	40d8      	lsrs	r0, r3
 800888c:	e1d7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	00bb8000 	.word	0x00bb8000
 8008898:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 800889c:	b18b      	cbz	r3, 80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800889e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088a2:	d10a      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088a4:	4b9a      	ldr	r3, [pc, #616]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80088ac:	f000 81c7 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b0:	a804      	add	r0, sp, #16
 80088b2:	f7ff fb93 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088b6:	9804      	ldr	r0, [sp, #16]
 80088b8:	e1c1      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80088ba:	2000      	movs	r0, #0
 80088bc:	e1bf      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80088be:	2000      	movs	r0, #0
 80088c0:	e1bd      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088c2:	4b93      	ldr	r3, [pc, #588]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80088ca:	f000 81b8 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ce:	a807      	add	r0, sp, #28
 80088d0:	f7ff fd80 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088d4:	9808      	ldr	r0, [sp, #32]
 80088d6:	e1b2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088d8:	4b8d      	ldr	r3, [pc, #564]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80088e0:	f000 81ad 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088e4:	a801      	add	r0, sp, #4
 80088e6:	f7ff fc77 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088ea:	9801      	ldr	r0, [sp, #4]
 80088ec:	e1a7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088ee:	4a88      	ldr	r2, [pc, #544]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80088f6:	d003      	beq.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80088f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088fc:	f000 81b2 	beq.w	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008900:	4a83      	ldr	r2, [pc, #524]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008908:	f000 81ae 	beq.w	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 800890c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008910:	f000 81ac 	beq.w	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 8008914:	2000      	movs	r0, #0
 8008916:	e192      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008918:	4b7d      	ldr	r3, [pc, #500]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8008920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008924:	d035      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008926:	d916      	bls.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800892c:	f000 81a0 	beq.w	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008934:	d120      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008936:	4a76      	ldr	r2, [pc, #472]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008938:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800893a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	f012 0f04 	tst.w	r2, #4
 8008944:	d030      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8008946:	bb7b      	cbnz	r3, 80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008948:	4b71      	ldr	r3, [pc, #452]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008950:	4870      	ldr	r0, [pc, #448]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008952:	40d8      	lsrs	r0, r3
 8008954:	e173      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008956:	b18b      	cbz	r3, 800897c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895c:	d10a      	bne.n	8008974 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800895e:	4b6c      	ldr	r3, [pc, #432]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008966:	f000 816a 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800896a:	a804      	add	r0, sp, #16
 800896c:	f7ff fb36 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008970:	9804      	ldr	r0, [sp, #16]
 8008972:	e164      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008974:	2000      	movs	r0, #0
 8008976:	e162      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008978:	2000      	movs	r0, #0
 800897a:	e160      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800897c:	4b64      	ldr	r3, [pc, #400]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008984:	f000 815b 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008988:	a807      	add	r0, sp, #28
 800898a:	f7ff fd23 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800898e:	9808      	ldr	r0, [sp, #32]
 8008990:	e155      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008992:	4b5f      	ldr	r3, [pc, #380]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800899a:	f000 8150 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899e:	a801      	add	r0, sp, #4
 80089a0:	f7ff fc1a 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089a4:	9801      	ldr	r0, [sp, #4]
 80089a6:	e14a      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089a8:	4a59      	ldr	r2, [pc, #356]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 80089b0:	d003      	beq.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80089b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089b6:	f000 815d 	beq.w	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089ba:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089bc:	6812      	ldr	r2, [r2, #0]
 80089be:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80089c2:	f000 8159 	beq.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089ca:	f000 8157 	beq.w	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 80089ce:	2000      	movs	r0, #0
 80089d0:	e135      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80089d2:	4b4f      	ldr	r3, [pc, #316]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80089da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80089de:	d032      	beq.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80089e0:	d816      	bhi.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e6:	d023      	beq.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80089e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ec:	d10a      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089ee:	4b48      	ldr	r3, [pc, #288]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80089f6:	f000 8122 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089fa:	a801      	add	r0, sp, #4
 80089fc:	f7ff fbec 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a00:	9802      	ldr	r0, [sp, #8]
 8008a02:	e11c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008a04:	b913      	cbnz	r3, 8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a06:	f7fe fc73 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8008a0a:	e118      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e116      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008a10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a14:	d023      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008a1c:	4b3c      	ldr	r3, [pc, #240]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a1e:	6818      	ldr	r0, [r3, #0]
 8008a20:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008a24:	f000 810b 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008a28:	483b      	ldr	r0, [pc, #236]	; (8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8008a2a:	e108      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	e106      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a30:	4b37      	ldr	r3, [pc, #220]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008a38:	f000 8101 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3c:	a804      	add	r0, sp, #16
 8008a3e:	f7ff facd 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a42:	9805      	ldr	r0, [sp, #20]
 8008a44:	e0fb      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a46:	4b32      	ldr	r3, [pc, #200]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	f010 0004 	ands.w	r0, r0, #4
 8008a4e:	f000 80f6 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a58:	482e      	ldr	r0, [pc, #184]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008a5a:	40d8      	lsrs	r0, r3
 8008a5c:	e0ef      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008a5e:	4b2c      	ldr	r3, [pc, #176]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a60:	6818      	ldr	r0, [r3, #0]
 8008a62:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008a66:	f000 80ea 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008a6a:	482c      	ldr	r0, [pc, #176]	; (8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008a6c:	e0e7      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a6e:	4b28      	ldr	r3, [pc, #160]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a7a:	d010      	beq.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a80:	d018      	beq.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8008a82:	b10b      	cbz	r3, 8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008a84:	2000      	movs	r0, #0
 8008a86:	e0da      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a88:	4b21      	ldr	r3, [pc, #132]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008a8a:	6818      	ldr	r0, [r3, #0]
 8008a8c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008a90:	f000 80d5 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a94:	a804      	add	r0, sp, #16
 8008a96:	f7ff faa1 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a9a:	9804      	ldr	r0, [sp, #16]
 8008a9c:	e0cf      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008aa6:	f000 80ca 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aaa:	a801      	add	r0, sp, #4
 8008aac:	f7ff fb94 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008ab0:	9803      	ldr	r0, [sp, #12]
 8008ab2:	e0c4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ab4:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008ab6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	f012 0f04 	tst.w	r2, #4
 8008ac2:	d007      	beq.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008ac4:	b933      	cbnz	r3, 8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ace:	4811      	ldr	r0, [pc, #68]	; (8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008ad0:	40d8      	lsrs	r0, r3
 8008ad2:	e0b4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ad4:	4a0e      	ldr	r2, [pc, #56]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008ad6:	6812      	ldr	r2, [r2, #0]
 8008ad8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008adc:	d003      	beq.n	8008ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ae2:	f000 80cd 	beq.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae6:	4a0a      	ldr	r2, [pc, #40]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008aee:	f000 80c9 	beq.w	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008af2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af6:	f000 80c7 	beq.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 8008afa:	2000      	movs	r0, #0
 8008afc:	e09f      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008afe:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 8008b02:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008b06:	d00b      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 8008b08:	b9ab      	cbnz	r3, 8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	e097      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008b0e:	bf00      	nop
 8008b10:	58024400 	.word	0x58024400
 8008b14:	03d09000 	.word	0x03d09000
 8008b18:	017d7840 	.word	0x017d7840
 8008b1c:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b20:	4b5a      	ldr	r3, [pc, #360]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008b28:	f000 8089 	beq.w	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b2c:	a807      	add	r0, sp, #28
 8008b2e:	f7ff fc51 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b32:	9808      	ldr	r0, [sp, #32]
 8008b34:	e083      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b36:	4b55      	ldr	r3, [pc, #340]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008b3e:	d07e      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b40:	a804      	add	r0, sp, #16
 8008b42:	f7ff fa4b 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b46:	9806      	ldr	r0, [sp, #24]
 8008b48:	e079      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b4a:	4b50      	ldr	r3, [pc, #320]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8008b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b56:	d02f      	beq.n	8008bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008b58:	d815      	bhi.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8008b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b5e:	d021      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8008b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b64:	d109      	bne.n	8008b7a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b66:	4b49      	ldr	r3, [pc, #292]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008b6e:	d066      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b70:	a801      	add	r0, sp, #4
 8008b72:	f7ff fb31 	bl	80081d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b76:	9802      	ldr	r0, [sp, #8]
 8008b78:	e061      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008b7a:	b913      	cbnz	r3, 8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b7c:	f7ff fa1c 	bl	8007fb8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8008b80:	e05d      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008b82:	2000      	movs	r0, #0
 8008b84:	e05b      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	d020      	beq.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008b92:	4b3e      	ldr	r3, [pc, #248]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008b9a:	d050      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008b9c:	483c      	ldr	r0, [pc, #240]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008b9e:	e04e      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	e04c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ba4:	4b39      	ldr	r3, [pc, #228]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008bac:	d047      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bae:	a804      	add	r0, sp, #16
 8008bb0:	f7ff fa14 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb4:	9805      	ldr	r0, [sp, #20]
 8008bb6:	e042      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bb8:	4b34      	ldr	r3, [pc, #208]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	f010 0004 	ands.w	r0, r0, #4
 8008bc0:	d03d      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008bc8:	4832      	ldr	r0, [pc, #200]	; (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 8008bca:	40d8      	lsrs	r0, r3
 8008bcc:	e037      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bce:	4b2f      	ldr	r3, [pc, #188]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008bd6:	d032      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008bd8:	482f      	ldr	r0, [pc, #188]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008bda:	e030      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008bdc:	4b2b      	ldr	r3, [pc, #172]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8008be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be8:	d00c      	beq.n	8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8008bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bee:	d013      	beq.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8008bf0:	b10b      	cbz	r3, 8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008bf2:	2000      	movs	r0, #0
  return frequency;
 8008bf4:	e023      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bf6:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008bfe:	d01e      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c00:	4823      	ldr	r0, [pc, #140]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c02:	e01c      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c04:	4b21      	ldr	r3, [pc, #132]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008c0c:	d017      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c0e:	a807      	add	r0, sp, #28
 8008c10:	f7ff fbe0 	bl	80083d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c14:	9808      	ldr	r0, [sp, #32]
 8008c16:	e012      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c18:	4b1c      	ldr	r3, [pc, #112]	; (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008c20:	d00d      	beq.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c22:	a804      	add	r0, sp, #16
 8008c24:	f7ff f9da 	bl	8007fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c28:	9805      	ldr	r0, [sp, #20]
 8008c2a:	e008      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	e006      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008c30:	4819      	ldr	r0, [pc, #100]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c32:	e004      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c34:	2000      	movs	r0, #0
 8008c36:	e002      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c38:	4815      	ldr	r0, [pc, #84]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c3a:	e000      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008c3c:	4817      	ldr	r0, [pc, #92]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 8008c3e:	b00b      	add	sp, #44	; 0x2c
 8008c40:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8008c44:	4814      	ldr	r0, [pc, #80]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c46:	e7fa      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e7f8      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c4c:	4810      	ldr	r0, [pc, #64]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c4e:	e7f6      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008c50:	4812      	ldr	r0, [pc, #72]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8008c52:	e7f4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008c54:	4810      	ldr	r0, [pc, #64]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c56:	e7f2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c58:	2000      	movs	r0, #0
 8008c5a:	e7f0      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c5c:	480c      	ldr	r0, [pc, #48]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c5e:	e7ee      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008c60:	480e      	ldr	r0, [pc, #56]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8008c62:	e7ec      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008c64:	480c      	ldr	r0, [pc, #48]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c66:	e7ea      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7e8      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c6c:	4808      	ldr	r0, [pc, #32]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c6e:	e7e6      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008c70:	480a      	ldr	r0, [pc, #40]	; (8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 8008c72:	e7e4      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008c74:	4808      	ldr	r0, [pc, #32]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c76:	e7e2      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e7e0      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c7c:	4804      	ldr	r0, [pc, #16]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c7e:	e7de      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008c80:	4805      	ldr	r0, [pc, #20]	; (8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008c82:	e7dc      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008c84:	2000      	movs	r0, #0
 8008c86:	e7da      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008c8a:	e7d8      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008c8c:	58024400 	.word	0x58024400
 8008c90:	017d7840 	.word	0x017d7840
 8008c94:	03d09000 	.word	0x03d09000
 8008c98:	003d0900 	.word	0x003d0900
 8008c9c:	00bb8000 	.word	0x00bb8000

08008ca0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	d03b      	beq.n	8008d1c <HAL_RNG_Init+0x7c>
{
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008ca8:	7a43      	ldrb	r3, [r0, #9]
 8008caa:	b1b3      	cbz	r3, 8008cda <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008cac:	2302      	movs	r3, #2
 8008cae:	7263      	strb	r3, [r4, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	f023 0320 	bic.w	r3, r3, #32
 8008cb8:	6861      	ldr	r1, [r4, #4]
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	6813      	ldr	r3, [r2, #0]
 8008cc2:	f043 0304 	orr.w	r3, r3, #4
 8008cc6:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008cd0:	d007      	beq.n	8008ce2 <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8008cd6:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8008cda:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8008cdc:	f7f9 ff40 	bl	8002b60 <HAL_RNG_MspInit>
 8008ce0:	e7e4      	b.n	8008cac <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 8008ce2:	f7fb f8e9 	bl	8003eb8 <HAL_GetTick>
 8008ce6:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f013 0f04 	tst.w	r3, #4
 8008cf0:	d00f      	beq.n	8008d12 <HAL_RNG_Init+0x72>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008cf2:	f7fb f8e1 	bl	8003eb8 <HAL_GetTick>
 8008cf6:	1b40      	subs	r0, r0, r5
 8008cf8:	2802      	cmp	r0, #2
 8008cfa:	d9f5      	bls.n	8008ce8 <HAL_RNG_Init+0x48>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f013 0f04 	tst.w	r3, #4
 8008d04:	d0f0      	beq.n	8008ce8 <HAL_RNG_Init+0x48>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008d06:	2304      	movs	r3, #4
 8008d08:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 8008d0e:	2001      	movs	r0, #1
 8008d10:	e7e2      	b.n	8008cd8 <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 8008d12:	2301      	movs	r3, #1
 8008d14:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008d16:	2000      	movs	r0, #0
 8008d18:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8008d1a:	e7dd      	b.n	8008cd8 <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8008d1c:	2001      	movs	r0, #1
}
 8008d1e:	4770      	bx	lr

08008d20 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008d22:	7a03      	ldrb	r3, [r0, #8]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d030      	beq.n	8008d8a <HAL_RNG_GenerateRandomNumber+0x6a>
 8008d28:	4604      	mov	r4, r0
 8008d2a:	460e      	mov	r6, r1
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008d30:	7a45      	ldrb	r5, [r0, #9]
 8008d32:	b2ed      	uxtb	r5, r5
 8008d34:	429d      	cmp	r5, r3
 8008d36:	d006      	beq.n	8008d46 <HAL_RNG_GenerateRandomNumber+0x26>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008d38:	2304      	movs	r3, #4
 8008d3a:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8008d3c:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	7223      	strb	r3, [r4, #8]

  return status;
}
 8008d42:	4628      	mov	r0, r5
 8008d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008d46:	2302      	movs	r3, #2
 8008d48:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8008d4a:	f7fb f8b5 	bl	8003eb8 <HAL_GetTick>
 8008d4e:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d50:	6823      	ldr	r3, [r4, #0]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	f012 0f01 	tst.w	r2, #1
 8008d58:	d110      	bne.n	8008d7c <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d5a:	f7fb f8ad 	bl	8003eb8 <HAL_GetTick>
 8008d5e:	1bc0      	subs	r0, r0, r7
 8008d60:	2802      	cmp	r0, #2
 8008d62:	d9f5      	bls.n	8008d50 <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f013 0f01 	tst.w	r3, #1
 8008d6c:	d1f0      	bne.n	8008d50 <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	7263      	strb	r3, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d72:	2302      	movs	r3, #2
 8008d74:	60e3      	str	r3, [r4, #12]
          __HAL_UNLOCK(hrng);
 8008d76:	2300      	movs	r3, #0
 8008d78:	7223      	strb	r3, [r4, #8]
          return HAL_ERROR;
 8008d7a:	e7e2      	b.n	8008d42 <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8008d80:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8008d82:	2301      	movs	r3, #1
 8008d84:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8008d86:	2500      	movs	r5, #0
 8008d88:	e7d9      	b.n	8008d3e <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8008d8a:	2502      	movs	r5, #2
 8008d8c:	e7d9      	b.n	8008d42 <HAL_RNG_GenerateRandomNumber+0x22>

08008d8e <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008d8e:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008d90:	2000      	movs	r0, #0
 8008d92:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008d96:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d9a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008d9e:	2802      	cmp	r0, #2
 8008da0:	bf18      	it	ne
 8008da2:	2800      	cmpne	r0, #0
 8008da4:	d11f      	bne.n	8008de6 <SAI_InitI2S+0x58>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008da6:	2000      	movs	r0, #0
 8008da8:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008dac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008db0:	f8cc 005c 	str.w	r0, [ip, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008db4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008db8:	f8cc 0074 	str.w	r0, [ip, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008dc2:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008dc6:	f013 0f01 	tst.w	r3, #1
 8008dca:	d168      	bne.n	8008e9e <SAI_InitI2S+0x110>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 8008dcc:	b979      	cbnz	r1, 8008dee <SAI_InitI2S+0x60>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008dce:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008dd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8008dd6:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 8008dda:	2a03      	cmp	r2, #3
 8008ddc:	d83e      	bhi.n	8008e5c <SAI_InitI2S+0xce>
 8008dde:	e8df f002 	tbb	[pc, r2]
 8008de2:	3f0e      	.short	0x3f0e
 8008de4:	2e1f      	.short	0x2e1f
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008de6:	2001      	movs	r0, #1
 8008de8:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
 8008dec:	e7de      	b.n	8008dac <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008dee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008df2:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008df6:	2000      	movs	r0, #0
 8008df8:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
 8008dfc:	e7ed      	b.n	8008dda <SAI_InitI2S+0x4c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008dfe:	2080      	movs	r0, #128	; 0x80
 8008e00:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	0158      	lsls	r0, r3, #5
 8008e08:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008e18:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008e1a:	2902      	cmp	r1, #2
 8008e1c:	d041      	beq.n	8008ea2 <SAI_InitI2S+0x114>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 8008e1e:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008e20:	20c0      	movs	r0, #192	; 0xc0
 8008e22:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008e26:	085b      	lsrs	r3, r3, #1
 8008e28:	0198      	lsls	r0, r3, #6
 8008e2a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008e2e:	015b      	lsls	r3, r3, #5
 8008e30:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008e34:	2380      	movs	r3, #128	; 0x80
 8008e36:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008e3a:	2000      	movs	r0, #0
      break;
 8008e3c:	e7ed      	b.n	8008e1a <SAI_InitI2S+0x8c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008e3e:	20e0      	movs	r0, #224	; 0xe0
 8008e40:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008e44:	085b      	lsrs	r3, r3, #1
 8008e46:	0198      	lsls	r0, r3, #6
 8008e48:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008e4c:	015b      	lsls	r3, r3, #5
 8008e4e:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008e52:	2380      	movs	r3, #128	; 0x80
 8008e54:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008e58:	2000      	movs	r0, #0
      break;
 8008e5a:	e7de      	b.n	8008e1a <SAI_InitI2S+0x8c>
  switch (datasize)
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	e7dc      	b.n	8008e1a <SAI_InitI2S+0x8c>
{
 8008e60:	b410      	push	{r4}
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008e62:	2080      	movs	r0, #128	; 0x80
 8008e64:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	019c      	lsls	r4, r3, #6
 8008e6c:	f8cc 4054 	str.w	r4, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008e70:	015b      	lsls	r3, r3, #5
 8008e72:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008e76:	f8cc 006c 	str.w	r0, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008e7a:	2000      	movs	r0, #0
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008e7c:	2902      	cmp	r1, #2
 8008e7e:	d002      	beq.n	8008e86 <SAI_InitI2S+0xf8>
}
 8008e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e84:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008e86:	2a01      	cmp	r2, #1
 8008e88:	d005      	beq.n	8008e96 <SAI_InitI2S+0x108>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008e8a:	2a02      	cmp	r2, #2
 8008e8c:	d1f8      	bne.n	8008e80 <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 8;
 8008e8e:	2308      	movs	r3, #8
 8008e90:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008e94:	e7f4      	b.n	8008e80 <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 16;
 8008e96:	2310      	movs	r3, #16
 8008e98:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008e9c:	e7f5      	b.n	8008e8a <SAI_InitI2S+0xfc>
    return HAL_ERROR;
 8008e9e:	2001      	movs	r0, #1
 8008ea0:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008ea2:	2a01      	cmp	r2, #1
 8008ea4:	d005      	beq.n	8008eb2 <SAI_InitI2S+0x124>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008ea6:	2a02      	cmp	r2, #2
 8008ea8:	d1b9      	bne.n	8008e1e <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 8;
 8008eaa:	2308      	movs	r3, #8
 8008eac:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008eb0:	e7b5      	b.n	8008e1e <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 16;
 8008eb2:	2310      	movs	r3, #16
 8008eb4:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008eb8:	e7f5      	b.n	8008ea6 <SAI_InitI2S+0x118>

08008eba <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008eba:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008ebc:	2400      	movs	r4, #0
 8008ebe:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008ec0:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ec2:	6844      	ldr	r4, [r0, #4]
 8008ec4:	2c02      	cmp	r4, #2
 8008ec6:	bf18      	it	ne
 8008ec8:	2c00      	cmpne	r4, #0
 8008eca:	d118      	bne.n	8008efe <SAI_InitPCM+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008ecc:	2401      	movs	r4, #1
 8008ece:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008ed0:	2400      	movs	r4, #0
 8008ed2:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008ed4:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8008ed8:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008eda:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8008ede:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008ee0:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008ee2:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008ee4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8008ee8:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8008eea:	2904      	cmp	r1, #4
 8008eec:	d00a      	beq.n	8008f04 <SAI_InitPCM+0x4a>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8008eee:	210d      	movs	r1, #13
 8008ef0:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8008ef2:	2a03      	cmp	r2, #3
 8008ef4:	d829      	bhi.n	8008f4a <SAI_InitPCM+0x90>
 8008ef6:	e8df f002 	tbb	[pc, r2]
 8008efa:	1108      	.short	0x1108
 8008efc:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008efe:	2400      	movs	r4, #0
 8008f00:	6504      	str	r4, [r0, #80]	; 0x50
 8008f02:	e7e5      	b.n	8008ed0 <SAI_InitPCM+0x16>
      hsai->FrameInit.ActiveFrameLength = 1;
 8008f04:	2101      	movs	r1, #1
 8008f06:	6581      	str	r1, [r0, #88]	; 0x58
 8008f08:	e7f3      	b.n	8008ef2 <SAI_InitPCM+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008f0a:	2280      	movs	r2, #128	; 0x80
 8008f0c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008f0e:	011b      	lsls	r3, r3, #4
 8008f10:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008f12:	2340      	movs	r3, #64	; 0x40
 8008f14:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008f16:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8008f18:	bc30      	pop	{r4, r5}
 8008f1a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008f1c:	2280      	movs	r2, #128	; 0x80
 8008f1e:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008f20:	015b      	lsls	r3, r3, #5
 8008f22:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008f24:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2000      	movs	r0, #0
      break;
 8008f28:	e7f6      	b.n	8008f18 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008f2a:	22c0      	movs	r2, #192	; 0xc0
 8008f2c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008f2e:	015b      	lsls	r3, r3, #5
 8008f30:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008f36:	2000      	movs	r0, #0
      break;
 8008f38:	e7ee      	b.n	8008f18 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008f3a:	22e0      	movs	r2, #224	; 0xe0
 8008f3c:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008f3e:	015b      	lsls	r3, r3, #5
 8008f40:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008f46:	2000      	movs	r0, #0
      break;
 8008f48:	e7e6      	b.n	8008f18 <SAI_InitPCM+0x5e>
  switch (datasize)
 8008f4a:	2001      	movs	r0, #1
 8008f4c:	e7e4      	b.n	8008f18 <SAI_InitPCM+0x5e>

08008f4e <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8008f4e:	2901      	cmp	r1, #1
 8008f50:	d00a      	beq.n	8008f68 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008f52:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f56:	2a08      	cmp	r2, #8
 8008f58:	d008      	beq.n	8008f6c <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f5a:	6842      	ldr	r2, [r0, #4]
 8008f5c:	3a02      	subs	r2, #2
 8008f5e:	2a01      	cmp	r2, #1
 8008f60:	d90c      	bls.n	8008f7c <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008f62:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8008f66:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8008f68:	2309      	movs	r3, #9
 8008f6a:	e7f3      	b.n	8008f54 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008f6c:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008f6e:	2a01      	cmp	r2, #1
 8008f70:	bf18      	it	ne
 8008f72:	2a03      	cmpne	r2, #3
 8008f74:	d1f1      	bne.n	8008f5a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8008f76:	f043 0310 	orr.w	r3, r3, #16
 8008f7a:	e7ee      	b.n	8008f5a <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008f7c:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8008f80:	4770      	bx	lr
	...

08008f84 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f84:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <SAI_Disable+0x3c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a0e      	ldr	r2, [pc, #56]	; (8008fc4 <SAI_Disable+0x40>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	0b1b      	lsrs	r3, r3, #12
 8008f90:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f92:	6801      	ldr	r1, [r0, #0]
 8008f94:	680a      	ldr	r2, [r1, #0]
 8008f96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f9a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008f9c:	b13b      	cbz	r3, 8008fae <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8008f9e:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008fa0:	6802      	ldr	r2, [r0, #0]
 8008fa2:	6812      	ldr	r2, [r2, #0]
 8008fa4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008fa8:	d1f8      	bne.n	8008f9c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008faa:	2000      	movs	r0, #0

  return status;
}
 8008fac:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008fae:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8008fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008fba:	2003      	movs	r0, #3
      break;
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	200008f4 	.word	0x200008f4
 8008fc4:	95cbec1b 	.word	0x95cbec1b

08008fc8 <HAL_SAI_Init>:
{
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f000 81df 	beq.w	8009390 <HAL_SAI_Init+0x3c8>
 8008fd2:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008fd4:	f7fa ff8a 	bl	8003eec <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008fd8:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 8008fdc:	2d01      	cmp	r5, #1
 8008fde:	d025      	beq.n	800902c <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008fe0:	6823      	ldr	r3, [r4, #0]
 8008fe2:	49ad      	ldr	r1, [pc, #692]	; (8009298 <HAL_SAI_Init+0x2d0>)
 8008fe4:	4aad      	ldr	r2, [pc, #692]	; (800929c <HAL_SAI_Init+0x2d4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	bf18      	it	ne
 8008fea:	428b      	cmpne	r3, r1
 8008fec:	d02e      	beq.n	800904c <HAL_SAI_Init+0x84>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008fee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	bf18      	it	ne
 8008ffa:	428b      	cmpne	r3, r1
 8008ffc:	d043      	beq.n	8009086 <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008ffe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009006:	4293      	cmp	r3, r2
 8009008:	bf18      	it	ne
 800900a:	428b      	cmpne	r3, r1
 800900c:	d03d      	beq.n	800908a <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800900e:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8009012:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8009016:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800901a:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 800901e:	4293      	cmp	r3, r2
 8009020:	bf18      	it	ne
 8009022:	428b      	cmpne	r3, r1
 8009024:	f040 81b6 	bne.w	8009394 <HAL_SAI_Init+0x3cc>
    SaiBaseAddress = SAI4;
 8009028:	4e9d      	ldr	r6, [pc, #628]	; (80092a0 <HAL_SAI_Init+0x2d8>)
 800902a:	e010      	b.n	800904e <HAL_SAI_Init+0x86>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	499a      	ldr	r1, [pc, #616]	; (8009298 <HAL_SAI_Init+0x2d0>)
 8009030:	4a9c      	ldr	r2, [pc, #624]	; (80092a4 <HAL_SAI_Init+0x2dc>)
 8009032:	428b      	cmp	r3, r1
 8009034:	bf18      	it	ne
 8009036:	4293      	cmpne	r3, r2
 8009038:	f040 8119 	bne.w	800926e <HAL_SAI_Init+0x2a6>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800903c:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800903e:	2b01      	cmp	r3, #1
 8009040:	f040 8115 	bne.w	800926e <HAL_SAI_Init+0x2a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8009044:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0ca      	beq.n	8008fe0 <HAL_SAI_Init+0x18>
 800904a:	e110      	b.n	800926e <HAL_SAI_Init+0x2a6>
    SaiBaseAddress = SAI1;
 800904c:	4e96      	ldr	r6, [pc, #600]	; (80092a8 <HAL_SAI_Init+0x2e0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800904e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8009052:	b1e3      	cbz	r3, 800908e <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 8009054:	4620      	mov	r0, r4
 8009056:	f7ff ff95 	bl	8008f84 <SAI_Disable>
 800905a:	4605      	mov	r5, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 819b 	bne.w	8009398 <HAL_SAI_Init+0x3d0>
  hsai->State = HAL_SAI_STATE_BUSY;
 8009062:	2302      	movs	r3, #2
 8009064:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8009068:	68e3      	ldr	r3, [r4, #12]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d015      	beq.n	800909a <HAL_SAI_Init+0xd2>
 800906e:	2b02      	cmp	r3, #2
 8009070:	d115      	bne.n	800909e <HAL_SAI_Init+0xd6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009072:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	2b04      	cmp	r3, #4
 800907a:	d812      	bhi.n	80090a2 <HAL_SAI_Init+0xda>
 800907c:	e8df f003 	tbb	[pc, r3]
 8009080:	1b161325 	.word	0x1b161325
 8009084:	20          	.byte	0x20
 8009085:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8009086:	4e89      	ldr	r6, [pc, #548]	; (80092ac <HAL_SAI_Init+0x2e4>)
 8009088:	e7e1      	b.n	800904e <HAL_SAI_Init+0x86>
    SaiBaseAddress = SAI3;
 800908a:	4e89      	ldr	r6, [pc, #548]	; (80092b0 <HAL_SAI_Init+0x2e8>)
 800908c:	e7df      	b.n	800904e <HAL_SAI_Init+0x86>
    hsai->Lock = HAL_UNLOCKED;
 800908e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8009092:	4620      	mov	r0, r4
 8009094:	f7f9 fdca 	bl	8002c2c <HAL_SAI_MspInit>
 8009098:	e7dc      	b.n	8009054 <HAL_SAI_Init+0x8c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800909a:	2210      	movs	r2, #16
 800909c:	e7ea      	b.n	8009074 <HAL_SAI_Init+0xac>
  switch (hsai->Init.SynchroExt)
 800909e:	2200      	movs	r2, #0
 80090a0:	e7e8      	b.n	8009074 <HAL_SAI_Init+0xac>
  switch (hsai->Init.Synchro)
 80090a2:	2700      	movs	r7, #0
 80090a4:	e013      	b.n	80090ce <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80090a6:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80090aa:	e010      	b.n	80090ce <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80090ac:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80090b0:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80090b4:	e00b      	b.n	80090ce <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80090b6:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80090ba:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80090be:	e006      	b.n	80090ce <HAL_SAI_Init+0x106>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80090c0:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80090c4:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80090c8:	e001      	b.n	80090ce <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80090ca:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80090ce:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80090d0:	6a23      	ldr	r3, [r4, #32]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d047      	beq.n	8009166 <HAL_SAI_Init+0x19e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	496f      	ldr	r1, [pc, #444]	; (8009298 <HAL_SAI_Init+0x2d0>)
 80090da:	4a70      	ldr	r2, [pc, #448]	; (800929c <HAL_SAI_Init+0x2d4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	bf18      	it	ne
 80090e0:	428b      	cmpne	r3, r1
 80090e2:	f000 80c7 	beq.w	8009274 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80090e6:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	4972      	ldr	r1, [pc, #456]	; (80092b4 <HAL_SAI_Init+0x2ec>)
 80090ec:	4a72      	ldr	r2, [pc, #456]	; (80092b8 <HAL_SAI_Init+0x2f0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bf18      	it	ne
 80090f2:	428b      	cmpne	r3, r1
 80090f4:	f000 80c4 	beq.w	8009280 <HAL_SAI_Init+0x2b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	4970      	ldr	r1, [pc, #448]	; (80092bc <HAL_SAI_Init+0x2f4>)
 80090fc:	4a70      	ldr	r2, [pc, #448]	; (80092c0 <HAL_SAI_Init+0x2f8>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	bf18      	it	ne
 8009102:	428b      	cmpne	r3, r1
 8009104:	f000 80c2 	beq.w	800928c <HAL_SAI_Init+0x2c4>
    if (hsai->Instance == SAI4_Block_A)
 8009108:	6822      	ldr	r2, [r4, #0]
 800910a:	4b66      	ldr	r3, [pc, #408]	; (80092a4 <HAL_SAI_Init+0x2dc>)
 800910c:	429a      	cmp	r2, r3
 800910e:	f000 80e3 	beq.w	80092d8 <HAL_SAI_Init+0x310>
    if (hsai->Instance == SAI4_Block_B)
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	4b6b      	ldr	r3, [pc, #428]	; (80092c4 <HAL_SAI_Init+0x2fc>)
 8009116:	429a      	cmp	r2, r3
 8009118:	f000 80e4 	beq.w	80092e4 <HAL_SAI_Init+0x31c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800911c:	69a3      	ldr	r3, [r4, #24]
 800911e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009122:	f000 80e5 	beq.w	80092f0 <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009128:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800912c:	f000 80f4 	beq.w	8009318 <HAL_SAI_Init+0x350>
 8009130:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009132:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009136:	0040      	lsls	r0, r0, #1
 8009138:	6a23      	ldr	r3, [r4, #32]
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	021b      	lsls	r3, r3, #8
 8009140:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8009144:	4b60      	ldr	r3, [pc, #384]	; (80092c8 <HAL_SAI_Init+0x300>)
 8009146:	fba3 2300 	umull	r2, r3, r3, r0
 800914a:	08db      	lsrs	r3, r3, #3
 800914c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 800914e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009152:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8009156:	2808      	cmp	r0, #8
 8009158:	d901      	bls.n	800915e <HAL_SAI_Init+0x196>
      hsai->Init.Mckdiv += 1U;
 800915a:	3301      	adds	r3, #1
 800915c:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800915e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009160:	2b04      	cmp	r3, #4
 8009162:	f000 80db 	beq.w	800931c <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	2b02      	cmp	r3, #2
 800916a:	bf18      	it	ne
 800916c:	2b00      	cmpne	r3, #0
 800916e:	f040 80dc 	bne.w	800932a <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009172:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009174:	2b01      	cmp	r3, #1
 8009176:	f000 80d5 	beq.w	8009324 <HAL_SAI_Init+0x35c>
 800917a:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800917e:	f7fa feb5 	bl	8003eec <HAL_GetREVID>
 8009182:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8009186:	f0c0 80d9 	bcc.w	800933c <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	4b4f      	ldr	r3, [pc, #316]	; (80092cc <HAL_SAI_Init+0x304>)
 8009190:	400b      	ands	r3, r1
 8009192:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009194:	6821      	ldr	r1, [r4, #0]
 8009196:	680a      	ldr	r2, [r1, #0]
 8009198:	6863      	ldr	r3, [r4, #4]
 800919a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800919c:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800919e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80091a0:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80091a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80091a4:	4303      	orrs	r3, r0
 80091a6:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 80091aa:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 80091ae:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091b0:	6960      	ldr	r0, [r4, #20]
 80091b2:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80091b4:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80091b6:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80091b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091ba:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80091be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80091c0:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80091c2:	6920      	ldr	r0, [r4, #16]
 80091c4:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80091c6:	431a      	orrs	r2, r3
 80091c8:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80091ca:	6822      	ldr	r2, [r4, #0]
 80091cc:	6851      	ldr	r1, [r2, #4]
 80091ce:	4b40      	ldr	r3, [pc, #256]	; (80092d0 <HAL_SAI_Init+0x308>)
 80091d0:	400b      	ands	r3, r1
 80091d2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	684a      	ldr	r2, [r1, #4]
 80091d8:	69e3      	ldr	r3, [r4, #28]
 80091da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80091dc:	4303      	orrs	r3, r0
 80091de:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091e0:	4303      	orrs	r3, r0
 80091e2:	4313      	orrs	r3, r2
 80091e4:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80091e6:	6822      	ldr	r2, [r4, #0]
 80091e8:	6891      	ldr	r1, [r2, #8]
 80091ea:	4b3a      	ldr	r3, [pc, #232]	; (80092d4 <HAL_SAI_Init+0x30c>)
 80091ec:	400b      	ands	r3, r1
 80091ee:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	6882      	ldr	r2, [r0, #8]
 80091f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80091f6:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 80091f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80091fa:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 80091fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 80091fe:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8009200:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8009202:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8009204:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009206:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8009208:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800920c:	4313      	orrs	r3, r2
 800920e:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	68d3      	ldr	r3, [r2, #12]
 8009214:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8009218:	f023 030f 	bic.w	r3, r3, #15
 800921c:	041b      	lsls	r3, r3, #16
 800921e:	0c1b      	lsrs	r3, r3, #16
 8009220:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009222:	6820      	ldr	r0, [r4, #0]
 8009224:	68c2      	ldr	r2, [r0, #12]
 8009226:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009228:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800922a:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800922c:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800922e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009232:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009234:	3901      	subs	r1, #1
 8009236:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800923a:	4313      	orrs	r3, r2
 800923c:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800923e:	6823      	ldr	r3, [r4, #0]
 8009240:	4915      	ldr	r1, [pc, #84]	; (8009298 <HAL_SAI_Init+0x2d0>)
 8009242:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <HAL_SAI_Init+0x2dc>)
 8009244:	4293      	cmp	r3, r2
 8009246:	bf18      	it	ne
 8009248:	428b      	cmpne	r3, r1
 800924a:	d108      	bne.n	800925e <HAL_SAI_Init+0x296>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800924c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800924e:	f023 0301 	bic.w	r3, r3, #1
 8009252:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009254:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009258:	2b01      	cmp	r3, #1
 800925a:	f000 808e 	beq.w	800937a <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800925e:	2300      	movs	r3, #0
 8009260:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8009264:	2201      	movs	r2, #1
 8009266:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800926a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800926e:	4628      	mov	r0, r5
 8009270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009274:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009278:	2100      	movs	r1, #0
 800927a:	f7ff f9a9 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800927e:	e733      	b.n	80090e8 <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009280:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009284:	2100      	movs	r1, #0
 8009286:	f7ff f9a3 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800928a:	e735      	b.n	80090f8 <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800928c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009290:	2100      	movs	r1, #0
 8009292:	f7ff f99d 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009296:	e737      	b.n	8009108 <HAL_SAI_Init+0x140>
 8009298:	40015804 	.word	0x40015804
 800929c:	40015824 	.word	0x40015824
 80092a0:	58005400 	.word	0x58005400
 80092a4:	58005404 	.word	0x58005404
 80092a8:	40015800 	.word	0x40015800
 80092ac:	40015c00 	.word	0x40015c00
 80092b0:	40016000 	.word	0x40016000
 80092b4:	40015c04 	.word	0x40015c04
 80092b8:	40015c24 	.word	0x40015c24
 80092bc:	40016004 	.word	0x40016004
 80092c0:	40016024 	.word	0x40016024
 80092c4:	58005424 	.word	0x58005424
 80092c8:	cccccccd 	.word	0xcccccccd
 80092cc:	f005c010 	.word	0xf005c010
 80092d0:	ffff1ff0 	.word	0xffff1ff0
 80092d4:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80092d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80092dc:	2100      	movs	r1, #0
 80092de:	f7ff f977 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80092e2:	e716      	b.n	8009112 <HAL_SAI_Init+0x14a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80092e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80092e8:	2100      	movs	r1, #0
 80092ea:	f7ff f971 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80092ee:	e715      	b.n	800911c <HAL_SAI_Init+0x154>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80092f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	d00b      	beq.n	800930e <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d00b      	beq.n	8009312 <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
 80092fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80092fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009300:	0040      	lsls	r0, r0, #1
 8009302:	6a23      	ldr	r3, [r4, #32]
 8009304:	fb02 f303 	mul.w	r3, r2, r3
 8009308:	fbb0 f0f3 	udiv	r0, r0, r3
 800930c:	e71a      	b.n	8009144 <HAL_SAI_Init+0x17c>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800930e:	2240      	movs	r2, #64	; 0x40
 8009310:	e7f4      	b.n	80092fc <HAL_SAI_Init+0x334>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009316:	e7f1      	b.n	80092fc <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009318:	2202      	movs	r2, #2
 800931a:	e70a      	b.n	8009132 <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800931c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800931e:	085b      	lsrs	r3, r3, #1
 8009320:	6263      	str	r3, [r4, #36]	; 0x24
 8009322:	e720      	b.n	8009166 <HAL_SAI_Init+0x19e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009324:	f04f 0800 	mov.w	r8, #0
 8009328:	e729      	b.n	800917e <HAL_SAI_Init+0x1b6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800932a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800932c:	2b01      	cmp	r3, #1
 800932e:	d002      	beq.n	8009336 <HAL_SAI_Init+0x36e>
 8009330:	f04f 0800 	mov.w	r8, #0
 8009334:	e723      	b.n	800917e <HAL_SAI_Init+0x1b6>
 8009336:	f44f 7800 	mov.w	r8, #512	; 0x200
 800933a:	e720      	b.n	800917e <HAL_SAI_Init+0x1b6>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	6811      	ldr	r1, [r2, #0]
 8009340:	4b16      	ldr	r3, [pc, #88]	; (800939c <HAL_SAI_Init+0x3d4>)
 8009342:	400b      	ands	r3, r1
 8009344:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009346:	6821      	ldr	r1, [r4, #0]
 8009348:	680a      	ldr	r2, [r1, #0]
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800934e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009350:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009352:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009354:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009356:	4303      	orrs	r3, r0
 8009358:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 800935c:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800935e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8009360:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009362:	6960      	ldr	r0, [r4, #20]
 8009364:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009366:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009368:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800936a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800936c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8009370:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8009372:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009374:	431a      	orrs	r2, r3
 8009376:	600a      	str	r2, [r1, #0]
 8009378:	e727      	b.n	80091ca <HAL_SAI_Init+0x202>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800937a:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800937c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800937e:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009380:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009384:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009386:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8009388:	f043 0301 	orr.w	r3, r3, #1
 800938c:	6473      	str	r3, [r6, #68]	; 0x44
 800938e:	e766      	b.n	800925e <HAL_SAI_Init+0x296>
    return HAL_ERROR;
 8009390:	2501      	movs	r5, #1
 8009392:	e76c      	b.n	800926e <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8009394:	2501      	movs	r5, #1
 8009396:	e76a      	b.n	800926e <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8009398:	2501      	movs	r5, #1
 800939a:	e768      	b.n	800926e <HAL_SAI_Init+0x2a6>
 800939c:	f805c010 	.word	0xf805c010

080093a0 <HAL_SAI_InitProtocol>:
{
 80093a0:	b510      	push	{r4, lr}
 80093a2:	4604      	mov	r4, r0
  switch (protocol)
 80093a4:	2902      	cmp	r1, #2
 80093a6:	d906      	bls.n	80093b6 <HAL_SAI_InitProtocol+0x16>
 80093a8:	1ec8      	subs	r0, r1, #3
 80093aa:	2801      	cmp	r0, #1
 80093ac:	d80b      	bhi.n	80093c6 <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fd83 	bl	8008eba <SAI_InitPCM>
      break;
 80093b4:	e001      	b.n	80093ba <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80093b6:	f7ff fcea 	bl	8008d8e <SAI_InitI2S>
  if (status == HAL_OK)
 80093ba:	b100      	cbz	r0, 80093be <HAL_SAI_InitProtocol+0x1e>
}
 80093bc:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 80093be:	4620      	mov	r0, r4
 80093c0:	f7ff fe02 	bl	8008fc8 <HAL_SAI_Init>
 80093c4:	e7fa      	b.n	80093bc <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 80093c6:	2001      	movs	r0, #1
 80093c8:	e7f8      	b.n	80093bc <HAL_SAI_InitProtocol+0x1c>
	...

080093cc <HAL_SAI_Transmit_DMA>:
{
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4604      	mov	r4, r0
 80093d2:	4688      	mov	r8, r1
 80093d4:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80093d6:	f7fa fd6f 	bl	8003eb8 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80093da:	2e00      	cmp	r6, #0
 80093dc:	bf18      	it	ne
 80093de:	f1b8 0f00 	cmpne.w	r8, #0
 80093e2:	d066      	beq.n	80094b2 <HAL_SAI_Transmit_DMA+0xe6>
 80093e4:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 80093e6:	f894 7091 	ldrb.w	r7, [r4, #145]	; 0x91
 80093ea:	b2ff      	uxtb	r7, r7
 80093ec:	2f01      	cmp	r7, #1
 80093ee:	d164      	bne.n	80094ba <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 80093f0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d062      	beq.n	80094be <HAL_SAI_Transmit_DMA+0xf2>
 80093f8:	2301      	movs	r3, #1
 80093fa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 80093fe:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8009402:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8009406:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800940a:	2300      	movs	r3, #0
 800940c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009410:	2212      	movs	r2, #18
 8009412:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009416:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800941a:	492a      	ldr	r1, [pc, #168]	; (80094c4 <HAL_SAI_Transmit_DMA+0xf8>)
 800941c:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800941e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009422:	4929      	ldr	r1, [pc, #164]	; (80094c8 <HAL_SAI_Transmit_DMA+0xfc>)
 8009424:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009426:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800942a:	4928      	ldr	r1, [pc, #160]	; (80094cc <HAL_SAI_Transmit_DMA+0x100>)
 800942c:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800942e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009432:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800943a:	321c      	adds	r2, #28
 800943c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800943e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009442:	f7fb f9ff 	bl	8004844 <HAL_DMA_Start_IT>
 8009446:	4606      	mov	r6, r0
 8009448:	bb10      	cbnz	r0, 8009490 <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800944a:	2100      	movs	r1, #0
 800944c:	4620      	mov	r0, r4
 800944e:	f7ff fd7e 	bl	8008f4e <SAI_InterruptFlag>
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	6913      	ldr	r3, [r2, #16]
 8009456:	4303      	orrs	r3, r0
 8009458:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	6813      	ldr	r3, [r2, #0]
 800945e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009462:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	695a      	ldr	r2, [r3, #20]
 8009468:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 800946c:	d114      	bne.n	8009498 <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800946e:	f7fa fd23 	bl	8003eb8 <HAL_GetTick>
 8009472:	1b43      	subs	r3, r0, r5
 8009474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009478:	d9f4      	bls.n	8009464 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800947a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800947e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009482:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8009486:	2300      	movs	r3, #0
 8009488:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 800948c:	2703      	movs	r7, #3
 800948e:	e011      	b.n	80094b4 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 8009490:	2300      	movs	r3, #0
 8009492:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8009496:	e00d      	b.n	80094b4 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800949e:	d103      	bne.n	80094a8 <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80094a6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80094a8:	2300      	movs	r3, #0
 80094aa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80094ae:	4637      	mov	r7, r6
 80094b0:	e000      	b.n	80094b4 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 80094b2:	2701      	movs	r7, #1
}
 80094b4:	4638      	mov	r0, r7
 80094b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80094ba:	2702      	movs	r7, #2
 80094bc:	e7fa      	b.n	80094b4 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 80094be:	2702      	movs	r7, #2
 80094c0:	e7f8      	b.n	80094b4 <HAL_SAI_Transmit_DMA+0xe8>
 80094c2:	bf00      	nop
 80094c4:	0800950b 	.word	0x0800950b
 80094c8:	080094d1 	.word	0x080094d1
 80094cc:	08009515 	.word	0x08009515

080094d0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80094d0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80094d4:	69c3      	ldr	r3, [r0, #28]
 80094d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094da:	d012      	beq.n	8009502 <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 80094dc:	2100      	movs	r1, #0
 80094de:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	6813      	ldr	r3, [r2, #0]
 80094e6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094ea:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80094ec:	4620      	mov	r0, r4
 80094ee:	f7ff fd2e 	bl	8008f4e <SAI_InterruptFlag>
 80094f2:	6822      	ldr	r2, [r4, #0]
 80094f4:	6913      	ldr	r3, [r2, #16]
 80094f6:	ea23 0300 	bic.w	r3, r3, r0
 80094fa:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009502:	4620      	mov	r0, r4
 8009504:	f010 fe5c 	bl	801a1c0 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8009508:	bd10      	pop	{r4, pc}

0800950a <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800950a:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800950c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800950e:	f010 fe5b 	bl	801a1c8 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8009512:	bd08      	pop	{r3, pc}

08009514 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009514:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009516:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009518:	f7fc f957 	bl	80057ca <HAL_DMA_GetError>
 800951c:	2802      	cmp	r0, #2
 800951e:	d100      	bne.n	8009522 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8009520:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009522:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	6813      	ldr	r3, [r2, #0]
 8009532:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009536:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 8009538:	4620      	mov	r0, r4
 800953a:	f7ff fd23 	bl	8008f84 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 800953e:	2301      	movs	r3, #1
 8009540:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800954a:	4620      	mov	r0, r4
 800954c:	f010 fe10 	bl	801a170 <__HAL_SAI_ErrorCallback_veneer>
}
 8009550:	e7e6      	b.n	8009520 <SAI_DMAError+0xc>
	...

08009554 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800955e:	6800      	ldr	r0, [r0, #0]
 8009560:	f001 ffa8 	bl	800b4b4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009564:	4605      	mov	r5, r0
 8009566:	b110      	cbz	r0, 800956e <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 8009568:	4628      	mov	r0, r5
 800956a:	b002      	add	sp, #8
 800956c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	f002 fadc 	bl	800bb2c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009574:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009578:	d007      	beq.n	800958a <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800957a:	2301      	movs	r3, #1
 800957c:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800957e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009580:	2b01      	cmp	r3, #1
 8009582:	d00b      	beq.n	800959c <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009584:	462e      	mov	r6, r5
 8009586:	4628      	mov	r0, r5
 8009588:	e014      	b.n	80095b4 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800958a:	2300      	movs	r3, #0
 800958c:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800958e:	6820      	ldr	r0, [r4, #0]
 8009590:	f001 ff90 	bl	800b4b4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009594:	2800      	cmp	r0, #0
 8009596:	d0f2      	beq.n	800957e <SD_PowerON+0x2a>
      return errorstate;
 8009598:	4605      	mov	r5, r0
 800959a:	e7e5      	b.n	8009568 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800959c:	2100      	movs	r1, #0
 800959e:	6820      	ldr	r0, [r4, #0]
 80095a0:	f002 f90f 	bl	800b7c2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d0ed      	beq.n	8009584 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80095ac:	e7dc      	b.n	8009568 <SD_PowerON+0x14>
    count++;
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	3301      	adds	r3, #1
 80095b2:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095b4:	9a01      	ldr	r2, [sp, #4]
 80095b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d813      	bhi.n	80095e6 <SD_PowerON+0x92>
 80095be:	b996      	cbnz	r6, 80095e6 <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80095c0:	2100      	movs	r1, #0
 80095c2:	6820      	ldr	r0, [r4, #0]
 80095c4:	f002 f8fd 	bl	800b7c2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80095c8:	b9d0      	cbnz	r0, 8009600 <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80095ca:	4912      	ldr	r1, [pc, #72]	; (8009614 <SD_PowerON+0xc0>)
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	f002 f9f9 	bl	800b9c4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80095d2:	4606      	mov	r6, r0
 80095d4:	b9b0      	cbnz	r0, 8009604 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095d6:	2100      	movs	r1, #0
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	f001 ff56 	bl	800b48a <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095de:	0fc3      	lsrs	r3, r0, #31
 80095e0:	d0e5      	beq.n	80095ae <SD_PowerON+0x5a>
 80095e2:	461e      	mov	r6, r3
 80095e4:	e7e3      	b.n	80095ae <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80095e6:	9a01      	ldr	r2, [sp, #4]
 80095e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d80c      	bhi.n	800960a <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 80095f0:	2300      	movs	r3, #0
 80095f2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80095f4:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 80095f8:	d00a      	beq.n	8009610 <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095fa:	2301      	movs	r3, #1
 80095fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80095fe:	e7b3      	b.n	8009568 <SD_PowerON+0x14>
      return errorstate;
 8009600:	4605      	mov	r5, r0
 8009602:	e7b1      	b.n	8009568 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009608:	e7ae      	b.n	8009568 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800960a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800960e:	e7ab      	b.n	8009568 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8009610:	461d      	mov	r5, r3
 8009612:	e7a9      	b.n	8009568 <SD_PowerON+0x14>
 8009614:	c1100000 	.word	0xc1100000

08009618 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009618:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800961a:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 800961c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800961e:	2b1f      	cmp	r3, #31
 8009620:	d815      	bhi.n	800964e <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8009622:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009624:	6830      	ldr	r0, [r6, #0]
 8009626:	f001 ff09 	bl	800b43c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800962a:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800962c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009630:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009632:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009636:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009638:	0e00      	lsrs	r0, r0, #24
 800963a:	70e0      	strb	r0, [r4, #3]
      tmp++;
 800963c:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 800963e:	3501      	adds	r5, #1
 8009640:	2d07      	cmp	r5, #7
 8009642:	d9ef      	bls.n	8009624 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8009644:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009646:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009648:	3b20      	subs	r3, #32
 800964a:	62b3      	str	r3, [r6, #40]	; 0x28
}
 800964c:	e7e9      	b.n	8009622 <SD_Read_IT+0xa>
 800964e:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8009650:	2500      	movs	r5, #0
 8009652:	e7f5      	b.n	8009640 <SD_Read_IT+0x28>

08009654 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009658:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 800965a:	6a03      	ldr	r3, [r0, #32]
 800965c:	2b1f      	cmp	r3, #31
 800965e:	d81c      	bhi.n	800969a <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8009660:	b002      	add	sp, #8
 8009662:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8009664:	7823      	ldrb	r3, [r4, #0]
 8009666:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8009668:	7862      	ldrb	r2, [r4, #1]
 800966a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800966e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8009670:	78a2      	ldrb	r2, [r4, #2]
 8009672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009676:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8009678:	78e2      	ldrb	r2, [r4, #3]
 800967a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800967e:	9301      	str	r3, [sp, #4]
      tmp++;
 8009680:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009682:	a901      	add	r1, sp, #4
 8009684:	6830      	ldr	r0, [r6, #0]
 8009686:	f001 fedc 	bl	800b442 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800968a:	3501      	adds	r5, #1
 800968c:	2d07      	cmp	r5, #7
 800968e:	d9e9      	bls.n	8009664 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8009690:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8009692:	6a33      	ldr	r3, [r6, #32]
 8009694:	3b20      	subs	r3, #32
 8009696:	6233      	str	r3, [r6, #32]
}
 8009698:	e7e2      	b.n	8009660 <SD_Write_IT+0xc>
 800969a:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 800969c:	2500      	movs	r5, #0
 800969e:	e7f5      	b.n	800968c <SD_Write_IT+0x38>

080096a0 <SD_SendSDStatus>:
{
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	b087      	sub	sp, #28
 80096a4:	4605      	mov	r5, r0
 80096a6:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 80096a8:	f7fa fc06 	bl	8003eb8 <HAL_GetTick>
 80096ac:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096ae:	2100      	movs	r1, #0
 80096b0:	6828      	ldr	r0, [r5, #0]
 80096b2:	f001 feea 	bl	800b48a <SDMMC_GetResponse>
 80096b6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80096ba:	d164      	bne.n	8009786 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80096bc:	2140      	movs	r1, #64	; 0x40
 80096be:	6828      	ldr	r0, [r5, #0]
 80096c0:	f001 ffbc 	bl	800b63c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096c4:	4603      	mov	r3, r0
 80096c6:	b110      	cbz	r0, 80096ce <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80096c8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80096ca:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 80096cc:	e05d      	b.n	800978a <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096ce:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80096d0:	0409      	lsls	r1, r1, #16
 80096d2:	6828      	ldr	r0, [r5, #0]
 80096d4:	f002 f875 	bl	800b7c2 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096d8:	4603      	mov	r3, r0
 80096da:	b110      	cbz	r0, 80096e2 <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80096dc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80096de:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 80096e0:	e053      	b.n	800978a <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096e6:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80096ec:	2360      	movs	r3, #96	; 0x60
 80096ee:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096f0:	2302      	movs	r3, #2
 80096f2:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096fc:	4669      	mov	r1, sp
 80096fe:	6828      	ldr	r0, [r5, #0]
 8009700:	f001 fec6 	bl	800b490 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009704:	6828      	ldr	r0, [r5, #0]
 8009706:	f002 f8c0 	bl	800b88a <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800970a:	4603      	mov	r3, r0
 800970c:	b180      	cbz	r0, 8009730 <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800970e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009710:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8009712:	e03a      	b.n	800978a <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009714:	6828      	ldr	r0, [r5, #0]
 8009716:	f001 fe91 	bl	800b43c <SDMMC_ReadFIFO>
 800971a:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800971e:	3401      	adds	r4, #1
 8009720:	2c07      	cmp	r4, #7
 8009722:	d9f7      	bls.n	8009714 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009724:	f7fa fbc8 	bl	8003eb8 <HAL_GetTick>
 8009728:	1bc0      	subs	r0, r0, r7
 800972a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800972e:	d02f      	beq.n	8009790 <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009734:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 8009738:	d104      	bne.n	8009744 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009740:	d0f0      	beq.n	8009724 <SD_SendSDStatus+0x84>
 8009742:	e7ed      	b.n	8009720 <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009746:	f012 0f08 	tst.w	r2, #8
 800974a:	d124      	bne.n	8009796 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800974c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800974e:	f012 0f02 	tst.w	r2, #2
 8009752:	d122      	bne.n	800979a <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009756:	f013 0f20 	tst.w	r3, #32
 800975a:	d120      	bne.n	800979e <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800975c:	6828      	ldr	r0, [r5, #0]
 800975e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009760:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009764:	d00c      	beq.n	8009780 <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009766:	f001 fe69 	bl	800b43c <SDMMC_ReadFIFO>
 800976a:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800976e:	f7fa fba3 	bl	8003eb8 <HAL_GetTick>
 8009772:	1bc0      	subs	r0, r0, r7
 8009774:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009778:	d1f0      	bne.n	800975c <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 800977a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800977e:	e004      	b.n	800978a <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <SD_SendSDStatus+0x104>)
 8009782:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8009784:	e001      	b.n	800978a <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009786:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800978a:	4618      	mov	r0, r3
 800978c:	b007      	add	sp, #28
 800978e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 8009790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009794:	e7f9      	b.n	800978a <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009796:	2308      	movs	r3, #8
 8009798:	e7f7      	b.n	800978a <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800979a:	2302      	movs	r3, #2
 800979c:	e7f5      	b.n	800978a <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800979e:	2320      	movs	r3, #32
 80097a0:	e7f3      	b.n	800978a <SD_SendSDStatus+0xea>
 80097a2:	bf00      	nop
 80097a4:	18000f3a 	.word	0x18000f3a

080097a8 <SD_FindSCR>:
{
 80097a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097aa:	b089      	sub	sp, #36	; 0x24
 80097ac:	4604      	mov	r4, r0
 80097ae:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80097b0:	f7fa fb82 	bl	8003eb8 <HAL_GetTick>
 80097b4:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80097b6:	2300      	movs	r3, #0
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80097bc:	2108      	movs	r1, #8
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	f001 ff3c 	bl	800b63c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097c4:	4606      	mov	r6, r0
 80097c6:	b110      	cbz	r0, 80097ce <SD_FindSCR+0x26>
}
 80097c8:	4630      	mov	r0, r6
 80097ca:	b009      	add	sp, #36	; 0x24
 80097cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80097ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80097d0:	0409      	lsls	r1, r1, #16
 80097d2:	6820      	ldr	r0, [r4, #0]
 80097d4:	f001 fff5 	bl	800b7c2 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80097d8:	4606      	mov	r6, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1f4      	bne.n	80097c8 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097e2:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80097e4:	2308      	movs	r3, #8
 80097e6:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80097e8:	2330      	movs	r3, #48	; 0x30
 80097ea:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097ec:	2302      	movs	r3, #2
 80097ee:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80097f4:	2301      	movs	r3, #1
 80097f6:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097f8:	a902      	add	r1, sp, #8
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	f001 fe48 	bl	800b490 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	f002 f810 	bl	800b826 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009806:	4606      	mov	r6, r0
 8009808:	b130      	cbz	r0, 8009818 <SD_FindSCR+0x70>
 800980a:	e7dd      	b.n	80097c8 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800980c:	f7fa fb54 	bl	8003eb8 <HAL_GetTick>
 8009810:	1b43      	subs	r3, r0, r5
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009816:	d046      	beq.n	80098a6 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800981c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009820:	421a      	tst	r2, r3
 8009822:	d10e      	bne.n	8009842 <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009824:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009826:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800982a:	d1ef      	bne.n	800980c <SD_FindSCR+0x64>
 800982c:	2e00      	cmp	r6, #0
 800982e:	d1ed      	bne.n	800980c <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009830:	f001 fe04 	bl	800b43c <SDMMC_ReadFIFO>
 8009834:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	f001 fe00 	bl	800b43c <SDMMC_ReadFIFO>
 800983c:	9001      	str	r0, [sp, #4]
      index++;
 800983e:	3601      	adds	r6, #1
 8009840:	e7e4      	b.n	800980c <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009842:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009844:	f013 0f08 	tst.w	r3, #8
 8009848:	d124      	bne.n	8009894 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800984a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800984c:	f013 0f02 	tst.w	r3, #2
 8009850:	d123      	bne.n	800989a <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009852:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009854:	f016 0620 	ands.w	r6, r6, #32
 8009858:	d122      	bne.n	80098a0 <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <SD_FindSCR+0x104>)
 800985c:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800985e:	9a01      	ldr	r2, [sp, #4]
 8009860:	0213      	lsls	r3, r2, #8
 8009862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009866:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800986a:	0a11      	lsrs	r1, r2, #8
 800986c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009870:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009872:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009876:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009878:	9a00      	ldr	r2, [sp, #0]
 800987a:	0213      	lsls	r3, r2, #8
 800987c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009880:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009884:	0a11      	lsrs	r1, r2, #8
 8009886:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800988a:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800988c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009890:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8009892:	e799      	b.n	80097c8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009894:	2608      	movs	r6, #8
 8009896:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009898:	e796      	b.n	80097c8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800989a:	2602      	movs	r6, #2
 800989c:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800989e:	e793      	b.n	80097c8 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80098a0:	2620      	movs	r6, #32
 80098a2:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80098a4:	e790      	b.n	80097c8 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80098a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80098aa:	e78d      	b.n	80097c8 <SD_FindSCR+0x20>
 80098ac:	18000f3a 	.word	0x18000f3a

080098b0 <SD_WideBus_Enable>:
{
 80098b0:	b510      	push	{r4, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80098b6:	2100      	movs	r1, #0
 80098b8:	9100      	str	r1, [sp, #0]
 80098ba:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f001 fde4 	bl	800b48a <SDMMC_GetResponse>
 80098c2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80098c6:	d113      	bne.n	80098f0 <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80098c8:	4669      	mov	r1, sp
 80098ca:	4620      	mov	r0, r4
 80098cc:	f7ff ff6c 	bl	80097a8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80098d0:	b980      	cbnz	r0, 80098f4 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80098d2:	9b01      	ldr	r3, [sp, #4]
 80098d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80098d8:	d00e      	beq.n	80098f8 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80098dc:	0409      	lsls	r1, r1, #16
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	f001 ff6f 	bl	800b7c2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098e4:	b930      	cbnz	r0, 80098f4 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80098e6:	2102      	movs	r1, #2
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	f001 ff83 	bl	800b7f4 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098ee:	e001      	b.n	80098f4 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80098f4:	b002      	add	sp, #8
 80098f6:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80098f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80098fc:	e7fa      	b.n	80098f4 <SD_WideBus_Enable+0x44>

080098fe <SD_WideBus_Disable>:
{
 80098fe:	b510      	push	{r4, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009904:	2100      	movs	r1, #0
 8009906:	9100      	str	r1, [sp, #0]
 8009908:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	f001 fdbd 	bl	800b48a <SDMMC_GetResponse>
 8009910:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8009914:	d113      	bne.n	800993e <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8009916:	4669      	mov	r1, sp
 8009918:	4620      	mov	r0, r4
 800991a:	f7ff ff45 	bl	80097a8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800991e:	b980      	cbnz	r0, 8009942 <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009920:	9b01      	ldr	r3, [sp, #4]
 8009922:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009926:	d00e      	beq.n	8009946 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009928:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800992a:	0409      	lsls	r1, r1, #16
 800992c:	6820      	ldr	r0, [r4, #0]
 800992e:	f001 ff48 	bl	800b7c2 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009932:	b930      	cbnz	r0, 8009942 <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009934:	2100      	movs	r1, #0
 8009936:	6820      	ldr	r0, [r4, #0]
 8009938:	f001 ff5c 	bl	800b7f4 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800993c:	e001      	b.n	8009942 <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800993e:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8009942:	b002      	add	sp, #8
 8009944:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009946:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800994a:	e7fa      	b.n	8009942 <SD_WideBus_Disable+0x44>

0800994c <SD_SendStatus>:
{
 800994c:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 800994e:	b181      	cbz	r1, 8009972 <SD_SendStatus+0x26>
 8009950:	4604      	mov	r4, r0
 8009952:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009954:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009956:	0409      	lsls	r1, r1, #16
 8009958:	6800      	ldr	r0, [r0, #0]
 800995a:	f001 ff7d 	bl	800b858 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800995e:	4605      	mov	r5, r0
 8009960:	b108      	cbz	r0, 8009966 <SD_SendStatus+0x1a>
}
 8009962:	4628      	mov	r0, r5
 8009964:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009966:	2100      	movs	r1, #0
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	f001 fd8e 	bl	800b48a <SDMMC_GetResponse>
 800996e:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 8009970:	e7f7      	b.n	8009962 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8009972:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8009976:	e7f4      	b.n	8009962 <SD_SendStatus+0x16>

08009978 <HAL_SD_ReadBlocks>:
{
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	b087      	sub	sp, #28
 800997e:	4605      	mov	r5, r0
 8009980:	460c      	mov	r4, r1
 8009982:	4616      	mov	r6, r2
 8009984:	469a      	mov	sl, r3
 8009986:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800998a:	f7fa fa95 	bl	8003eb8 <HAL_GetTick>
  if (NULL == pData)
 800998e:	2c00      	cmp	r4, #0
 8009990:	d03a      	beq.n	8009a08 <HAL_SD_ReadBlocks+0x90>
 8009992:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009994:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009998:	b2ff      	uxtb	r7, r7
 800999a:	2f01      	cmp	r7, #1
 800999c:	f040 80e0 	bne.w	8009b60 <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099a0:	2300      	movs	r3, #0
 80099a2:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099a4:	eb06 030a 	add.w	r3, r6, sl
 80099a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d832      	bhi.n	8009a14 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 80099ae:	2303      	movs	r3, #3
 80099b0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	2200      	movs	r2, #0
 80099b8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80099ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d000      	beq.n	80099c2 <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80099c0:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099c6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80099c8:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80099cc:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80099ce:	2390      	movs	r3, #144	; 0x90
 80099d0:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099d2:	2302      	movs	r3, #2
 80099d4:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80099da:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099dc:	4669      	mov	r1, sp
 80099de:	6828      	ldr	r0, [r5, #0]
 80099e0:	f001 fd56 	bl	800b490 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80099e4:	682a      	ldr	r2, [r5, #0]
 80099e6:	68d3      	ldr	r3, [r2, #12]
 80099e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ec:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80099ee:	f1ba 0f01 	cmp.w	sl, #1
 80099f2:	d914      	bls.n	8009a1e <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80099f4:	2302      	movs	r3, #2
 80099f6:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80099f8:	4631      	mov	r1, r6
 80099fa:	6828      	ldr	r0, [r5, #0]
 80099fc:	f001 fe50 	bl	800b6a0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a00:	b9a0      	cbnz	r0, 8009a2c <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 8009a02:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a06:	e038      	b.n	8009a7a <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a0e:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009a10:	2701      	movs	r7, #1
 8009a12:	e0aa      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a14:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a1a:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009a1c:	e0a5      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a22:	4631      	mov	r1, r6
 8009a24:	6828      	ldr	r0, [r5, #0]
 8009a26:	f001 fe22 	bl	800b66e <SDMMC_CmdReadSingleBlock>
 8009a2a:	e7e9      	b.n	8009a00 <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	4a51      	ldr	r2, [pc, #324]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009a30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a34:	4303      	orrs	r3, r0
 8009a36:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009a42:	e092      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009a44:	6828      	ldr	r0, [r5, #0]
 8009a46:	f001 fcf9 	bl	800b43c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009a4a:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009a4c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009a50:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009a52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009a56:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009a58:	0e00      	lsrs	r0, r0, #24
 8009a5a:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8009a5c:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 8009a5e:	3601      	adds	r6, #1
 8009a60:	2e07      	cmp	r6, #7
 8009a62:	d9ef      	bls.n	8009a44 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 8009a64:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009a68:	f7fa fa26 	bl	8003eb8 <HAL_GetTick>
 8009a6c:	eba0 0008 	sub.w	r0, r0, r8
 8009a70:	4548      	cmp	r0, r9
 8009a72:	d20f      	bcs.n	8009a94 <HAL_SD_ReadBlocks+0x11c>
 8009a74:	f1b9 0f00 	cmp.w	r9, #0
 8009a78:	d00c      	beq.n	8009a94 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009a7e:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 8009a82:	d115      	bne.n	8009ab0 <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009a8a:	d0ed      	beq.n	8009a68 <HAL_SD_ReadBlocks+0xf0>
 8009a8c:	f1bb 0f1f 	cmp.w	fp, #31
 8009a90:	d9ea      	bls.n	8009a68 <HAL_SD_ReadBlocks+0xf0>
 8009a92:	e7e5      	b.n	8009a60 <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	4a37      	ldr	r2, [pc, #220]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009a9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009aa0:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009aac:	2703      	movs	r7, #3
 8009aae:	e05c      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab6:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ab8:	6828      	ldr	r0, [r5, #0]
 8009aba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009abc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009ac0:	d005      	beq.n	8009ace <HAL_SD_ReadBlocks+0x156>
 8009ac2:	f1ba 0f01 	cmp.w	sl, #1
 8009ac6:	d902      	bls.n	8009ace <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009ac8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d118      	bne.n	8009b00 <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad2:	f012 0f08 	tst.w	r2, #8
 8009ad6:	d124      	bne.n	8009b22 <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ada:	f012 0f02 	tst.w	r2, #2
 8009ade:	d12c      	bne.n	8009b3a <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae2:	f012 0f20 	tst.w	r2, #32
 8009ae6:	d034      	beq.n	8009b52 <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ae8:	4a22      	ldr	r2, [pc, #136]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009aec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009aee:	f043 0320 	orr.w	r3, r3, #32
 8009af2:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009afe:	e034      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b00:	f001 fe1a 	bl	800b738 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009b04:	4603      	mov	r3, r0
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d0e1      	beq.n	8009ace <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b0a:	682a      	ldr	r2, [r5, #0]
 8009b0c:	4919      	ldr	r1, [pc, #100]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009b0e:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009b10:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009b12:	4313      	orrs	r3, r2
 8009b14:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009b16:	2301      	movs	r3, #1
 8009b18:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8009b20:	e023      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b22:	4a14      	ldr	r2, [pc, #80]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009b24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b26:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009b28:	f043 0308 	orr.w	r3, r3, #8
 8009b2c:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009b38:	e017      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b3a:	4a0e      	ldr	r2, [pc, #56]	; (8009b74 <HAL_SD_ReadBlocks+0x1fc>)
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009b40:	f043 0302 	orr.w	r3, r3, #2
 8009b44:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009b50:	e00b      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b52:	4a09      	ldr	r2, [pc, #36]	; (8009b78 <HAL_SD_ReadBlocks+0x200>)
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009b56:	2301      	movs	r3, #1
 8009b58:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8009b5c:	2700      	movs	r7, #0
 8009b5e:	e004      	b.n	8009b6a <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009b60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009b62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b66:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009b68:	2701      	movs	r7, #1
}
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	b007      	add	sp, #28
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	bf00      	nop
 8009b74:	1fe00fff 	.word	0x1fe00fff
 8009b78:	18000f3a 	.word	0x18000f3a

08009b7c <HAL_SD_WriteBlocks>:
{
 8009b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b80:	b08b      	sub	sp, #44	; 0x2c
 8009b82:	4605      	mov	r5, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	4616      	mov	r6, r2
 8009b88:	469a      	mov	sl, r3
 8009b8a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8009b8e:	f7fa f993 	bl	8003eb8 <HAL_GetTick>
  if (NULL == pData)
 8009b92:	2c00      	cmp	r4, #0
 8009b94:	d03b      	beq.n	8009c0e <HAL_SD_WriteBlocks+0x92>
 8009b96:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009b98:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009b9c:	b2ff      	uxtb	r7, r7
 8009b9e:	2f01      	cmp	r7, #1
 8009ba0:	f040 80e9 	bne.w	8009d76 <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ba8:	eb06 030a 	add.w	r3, r6, sl
 8009bac:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d833      	bhi.n	8009c1a <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009bbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d000      	beq.n	8009bc6 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 8009bc4:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bca:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009bcc:	ea4f 234a 	mov.w	r3, sl, lsl #9
 8009bd0:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009bd2:	2390      	movs	r3, #144	; 0x90
 8009bd4:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009bda:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009bdc:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009bde:	a904      	add	r1, sp, #16
 8009be0:	6828      	ldr	r0, [r5, #0]
 8009be2:	f001 fc55 	bl	800b490 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009be6:	682a      	ldr	r2, [r5, #0]
 8009be8:	68d3      	ldr	r3, [r2, #12]
 8009bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bee:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009bf0:	f1ba 0f01 	cmp.w	sl, #1
 8009bf4:	d916      	bls.n	8009c24 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009bf6:	2320      	movs	r3, #32
 8009bf8:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	6828      	ldr	r0, [r5, #0]
 8009bfe:	f001 fd81 	bl	800b704 <SDMMC_CmdWriteMultiBlock>
 8009c02:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c04:	9b01      	ldr	r3, [sp, #4]
 8009c06:	b9ab      	cbnz	r3, 8009c34 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8009c08:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009c0c:	e040      	b.n	8009c90 <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009c0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c14:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009c16:	2701      	movs	r7, #1
 8009c18:	e0b2      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009c1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009c1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c20:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009c22:	e0ad      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009c24:	2310      	movs	r3, #16
 8009c26:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009c28:	4631      	mov	r1, r6
 8009c2a:	6828      	ldr	r0, [r5, #0]
 8009c2c:	f001 fd51 	bl	800b6d2 <SDMMC_CmdWriteSingleBlock>
 8009c30:	9001      	str	r0, [sp, #4]
 8009c32:	e7e7      	b.n	8009c04 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	4a54      	ldr	r2, [pc, #336]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009c3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009c3c:	9a01      	ldr	r2, [sp, #4]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009c4c:	e098      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
 8009c4e:	7823      	ldrb	r3, [r4, #0]
 8009c50:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009c52:	7862      	ldrb	r2, [r4, #1]
 8009c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c58:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009c5a:	78a2      	ldrb	r2, [r4, #2]
 8009c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c60:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009c62:	78e2      	ldrb	r2, [r4, #3]
 8009c64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c68:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8009c6a:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009c6c:	a903      	add	r1, sp, #12
 8009c6e:	6828      	ldr	r0, [r5, #0]
 8009c70:	f001 fbe7 	bl	800b442 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009c74:	3601      	adds	r6, #1
 8009c76:	2e07      	cmp	r6, #7
 8009c78:	d9e9      	bls.n	8009c4e <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 8009c7a:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009c7e:	f7fa f91b 	bl	8003eb8 <HAL_GetTick>
 8009c82:	eba0 0008 	sub.w	r0, r0, r8
 8009c86:	4548      	cmp	r0, r9
 8009c88:	d20f      	bcs.n	8009caa <HAL_SD_WriteBlocks+0x12e>
 8009c8a:	f1b9 0f00 	cmp.w	r9, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009c94:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8009c98:	d115      	bne.n	8009cc6 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8009ca0:	d0ed      	beq.n	8009c7e <HAL_SD_WriteBlocks+0x102>
 8009ca2:	f1bb 0f1f 	cmp.w	fp, #31
 8009ca6:	d9ea      	bls.n	8009c7e <HAL_SD_WriteBlocks+0x102>
 8009ca8:	e7e5      	b.n	8009c76 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	4a36      	ldr	r2, [pc, #216]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009cb0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009cc2:	2703      	movs	r7, #3
 8009cc4:	e05c      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ccc:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009cce:	6828      	ldr	r0, [r5, #0]
 8009cd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cd2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009cd6:	d005      	beq.n	8009ce4 <HAL_SD_WriteBlocks+0x168>
 8009cd8:	f1ba 0f01 	cmp.w	sl, #1
 8009cdc:	d902      	bls.n	8009ce4 <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009cde:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d118      	bne.n	8009d16 <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ce8:	f012 0f08 	tst.w	r2, #8
 8009cec:	d124      	bne.n	8009d38 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf0:	f012 0f02 	tst.w	r2, #2
 8009cf4:	d12c      	bne.n	8009d50 <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cf8:	f012 0f10 	tst.w	r2, #16
 8009cfc:	d034      	beq.n	8009d68 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cfe:	4a22      	ldr	r2, [pc, #136]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009d00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009d04:	f043 0310 	orr.w	r3, r3, #16
 8009d08:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009d14:	e034      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d16:	f001 fd0f 	bl	800b738 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0e1      	beq.n	8009ce4 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d20:	682a      	ldr	r2, [r5, #0]
 8009d22:	4919      	ldr	r1, [pc, #100]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009d24:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009d26:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8009d36:	e023      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d38:	4a13      	ldr	r2, [pc, #76]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009d3e:	f043 0308 	orr.w	r3, r3, #8
 8009d42:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009d4e:	e017      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d50:	4a0d      	ldr	r2, [pc, #52]	; (8009d88 <HAL_SD_WriteBlocks+0x20c>)
 8009d52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009d66:	e00b      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d68:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <HAL_SD_WriteBlocks+0x210>)
 8009d6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8009d72:	2700      	movs	r7, #0
 8009d74:	e004      	b.n	8009d80 <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009d76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009d78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d7c:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009d7e:	2701      	movs	r7, #1
}
 8009d80:	4638      	mov	r0, r7
 8009d82:	b00b      	add	sp, #44	; 0x2c
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	1fe00fff 	.word	0x1fe00fff
 8009d8c:	18000f3a 	.word	0x18000f3a

08009d90 <HAL_SD_ErrorCallback>:
}
 8009d90:	4770      	bx	lr
	...

08009d94 <HAL_SD_GetCardCSD>:
{
 8009d94:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009d96:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009d98:	0f92      	lsrs	r2, r2, #30
 8009d9a:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009d9c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009d9e:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009da2:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009da4:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 8009da8:	f002 0203 	and.w	r2, r2, #3
 8009dac:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009dae:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 8009db2:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009db4:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 8009db8:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009dba:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8009dbe:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009dc0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009dc2:	0d12      	lsrs	r2, r2, #20
 8009dc4:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009dc6:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8009dca:	f002 020f 	and.w	r2, r2, #15
 8009dce:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009dd0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009dd2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009dd6:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009dd8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009dda:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009dde:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009de0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009de2:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009de6:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009de8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009dea:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009dee:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009df0:	2200      	movs	r2, #0
 8009df2:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009df4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	f040 8086 	bne.w	8009f08 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009dfc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8009dfe:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009e02:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8009e06:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009e08:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009e0c:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e10:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009e14:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009e16:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009e1a:	f002 0207 	and.w	r2, r2, #7
 8009e1e:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009e20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e22:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009e26:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009e28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e2a:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8009e2e:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009e30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e32:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009e36:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009e38:	690a      	ldr	r2, [r1, #16]
 8009e3a:	3201      	adds	r2, #1
 8009e3c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009e3e:	7e08      	ldrb	r0, [r1, #24]
 8009e40:	f000 0007 	and.w	r0, r0, #7
 8009e44:	3002      	adds	r0, #2
 8009e46:	4082      	lsls	r2, r0
 8009e48:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009e4a:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009e4e:	f00c 0c0f 	and.w	ip, ip, #15
 8009e52:	2001      	movs	r0, #1
 8009e54:	fa00 f00c 	lsl.w	r0, r0, ip
 8009e58:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009e5a:	0a40      	lsrs	r0, r0, #9
 8009e5c:	fb00 f202 	mul.w	r2, r0, r2
 8009e60:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e66:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009e68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e6a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009e6e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009e70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e72:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009e76:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009e7e:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009e80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e82:	0fd2      	lsrs	r2, r2, #31
 8009e84:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e88:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009e8c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e8e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e90:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009e94:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009e96:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009e98:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009e9c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e9e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ea0:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009ea4:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009eae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009eb2:	f002 0201 	and.w	r2, r2, #1
 8009eb6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009eba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ebc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009ec0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009ec4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ec6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009eca:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009ece:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ed0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009ed4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ed8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009eda:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009ede:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ee2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ee4:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009ee8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009eec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009eee:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009ef2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ef8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009efc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009f00:	2301      	movs	r3, #1
 8009f02:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009f06:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f08:	2a01      	cmp	r2, #1
 8009f0a:	d111      	bne.n	8009f30 <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f0c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009f0e:	0412      	lsls	r2, r2, #16
 8009f10:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009f14:	f8b0 0066 	ldrh.w	r0, [r0, #102]	; 0x66
 8009f18:	4302      	orrs	r2, r0
 8009f1a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009f1c:	690a      	ldr	r2, [r1, #16]
 8009f1e:	3201      	adds	r2, #1
 8009f20:	0292      	lsls	r2, r2, #10
 8009f22:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009f24:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f2c:	655a      	str	r2, [r3, #84]	; 0x54
 8009f2e:	e79b      	b.n	8009e68 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f30:	6802      	ldr	r2, [r0, #0]
 8009f32:	4905      	ldr	r1, [pc, #20]	; (8009f48 <HAL_SD_GetCardCSD+0x1b4>)
 8009f34:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f36:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009f38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f3c:	6342      	str	r2, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f3e:	2001      	movs	r0, #1
 8009f40:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	1fe00fff 	.word	0x1fe00fff

08009f4c <SD_InitCard>:
{
 8009f4c:	b530      	push	{r4, r5, lr}
 8009f4e:	b08d      	sub	sp, #52	; 0x34
 8009f50:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8009f58:	f7f9 ffae 	bl	8003eb8 <HAL_GetTick>
 8009f5c:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009f5e:	6820      	ldr	r0, [r4, #0]
 8009f60:	f001 fa7a 	bl	800b458 <SDMMC_GetPowerState>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d067      	beq.n	800a038 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d117      	bne.n	8009f9e <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d02f      	beq.n	8009fd4 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8009f74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009f78:	bb63      	cbnz	r3, 8009fd4 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009f7a:	f10d 0102 	add.w	r1, sp, #2
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	f001 fd88 	bl	800ba94 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009f84:	4603      	mov	r3, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d158      	bne.n	800a03c <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009f8a:	f7f9 ff95 	bl	8003eb8 <HAL_GetTick>
 8009f8e:	1b43      	subs	r3, r0, r5
 8009f90:	f241 3287 	movw	r2, #4999	; 0x1387
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d9ed      	bls.n	8009f74 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f9c:	e04e      	b.n	800a03c <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	f001 fcbc 	bl	800b91c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d148      	bne.n	800a03c <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009faa:	2100      	movs	r1, #0
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	f001 fa6c 	bl	800b48a <SDMMC_GetResponse>
 8009fb2:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009fb4:	2104      	movs	r1, #4
 8009fb6:	6820      	ldr	r0, [r4, #0]
 8009fb8:	f001 fa67 	bl	800b48a <SDMMC_GetResponse>
 8009fbc:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009fbe:	2108      	movs	r1, #8
 8009fc0:	6820      	ldr	r0, [r4, #0]
 8009fc2:	f001 fa62 	bl	800b48a <SDMMC_GetResponse>
 8009fc6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009fc8:	210c      	movs	r1, #12
 8009fca:	6820      	ldr	r0, [r4, #0]
 8009fcc:	f001 fa5d 	bl	800b48a <SDMMC_GetResponse>
 8009fd0:	67a0      	str	r0, [r4, #120]	; 0x78
 8009fd2:	e7cc      	b.n	8009f6e <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009fd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d01c      	beq.n	800a014 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009fda:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009fde:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009fe0:	0409      	lsls	r1, r1, #16
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	f001 fcb0 	bl	800b948 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe8:	4603      	mov	r3, r0
 8009fea:	bb38      	cbnz	r0, 800a03c <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009fec:	2100      	movs	r1, #0
 8009fee:	6820      	ldr	r0, [r4, #0]
 8009ff0:	f001 fa4b 	bl	800b48a <SDMMC_GetResponse>
 8009ff4:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ff6:	2104      	movs	r1, #4
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	f001 fa46 	bl	800b48a <SDMMC_GetResponse>
 8009ffe:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a000:	2108      	movs	r1, #8
 800a002:	6820      	ldr	r0, [r4, #0]
 800a004:	f001 fa41 	bl	800b48a <SDMMC_GetResponse>
 800a008:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a00a:	210c      	movs	r1, #12
 800a00c:	6820      	ldr	r0, [r4, #0]
 800a00e:	f001 fa3c 	bl	800b48a <SDMMC_GetResponse>
 800a012:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a014:	2104      	movs	r1, #4
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	f001 fa37 	bl	800b48a <SDMMC_GetResponse>
 800a01c:	0d00      	lsrs	r0, r0, #20
 800a01e:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a020:	a901      	add	r1, sp, #4
 800a022:	4620      	mov	r0, r4
 800a024:	f7ff feb6 	bl	8009d94 <HAL_SD_GetCardCSD>
 800a028:	b958      	cbnz	r0, 800a042 <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a02a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a02c:	0409      	lsls	r1, r1, #16
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	f001 fbae 	bl	800b790 <SDMMC_CmdSelDesel>
 800a034:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 800a036:	e001      	b.n	800a03c <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	b00d      	add	sp, #52	; 0x34
 800a040:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a042:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a046:	e7f9      	b.n	800a03c <SD_InitCard+0xf0>

0800a048 <HAL_SD_InitCard>:
{
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	b088      	sub	sp, #32
 800a04c:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a04e:	2300      	movs	r3, #0
 800a050:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a052:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a054:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a056:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a058:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a05c:	2100      	movs	r1, #0
 800a05e:	f7fe fab7 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800a062:	b938      	cbnz	r0, 800a074 <HAL_SD_InitCard+0x2c>
    hsd->State = HAL_SD_STATE_READY;
 800a064:	2001      	movs	r0, #1
 800a066:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a06a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a06e:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a070:	b008      	add	sp, #32
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a076:	0a05      	lsrs	r5, r0, #8
 800a078:	4b23      	ldr	r3, [pc, #140]	; (800a108 <HAL_SD_InitCard+0xc0>)
 800a07a:	fba3 3505 	umull	r3, r5, r3, r5
 800a07e:	092d      	lsrs	r5, r5, #4
 800a080:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 800a082:	ab08      	add	r3, sp, #32
 800a084:	e913 0003 	ldmdb	r3, {r0, r1}
 800a088:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a08c:	ab03      	add	r3, sp, #12
 800a08e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a090:	6820      	ldr	r0, [r4, #0]
 800a092:	f001 f9bb 	bl	800b40c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a096:	6820      	ldr	r0, [r4, #0]
 800a098:	f001 f9d8 	bl	800b44c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800a09c:	b115      	cbz	r5, 800a0a4 <HAL_SD_InitCard+0x5c>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a09e:	006d      	lsls	r5, r5, #1
 800a0a0:	fbb6 f6f5 	udiv	r6, r6, r5
  if (sdmmc_clk != 0U)
 800a0a4:	b95e      	cbnz	r6, 800a0be <HAL_SD_InitCard+0x76>
  errorstate = SD_PowerON(hsd);
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f7ff fa54 	bl	8009554 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	b168      	cbz	r0, 800a0cc <HAL_SD_InitCard+0x84>
    hsd->State = HAL_SD_STATE_READY;
 800a0b0:	2001      	movs	r0, #1
 800a0b2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a0b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a0bc:	e7d8      	b.n	800a070 <HAL_SD_InitCard+0x28>
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a0be:	4813      	ldr	r0, [pc, #76]	; (800a10c <HAL_SD_InitCard+0xc4>)
 800a0c0:	fbb0 f0f6 	udiv	r0, r0, r6
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f7f9 fefd 	bl	8003ec4 <HAL_Delay>
 800a0ca:	e7ec      	b.n	800a0a6 <HAL_SD_InitCard+0x5e>
  errorstate = SD_InitCard(hsd);
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f7ff ff3d 	bl	8009f4c <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	b130      	cbz	r0, 800a0e4 <HAL_SD_InitCard+0x9c>
    hsd->State = HAL_SD_STATE_READY;
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a0e2:	e7c5      	b.n	800a070 <HAL_SD_InitCard+0x28>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0e8:	6820      	ldr	r0, [r4, #0]
 800a0ea:	f001 faa7 	bl	800b63c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0ee:	b908      	cbnz	r0, 800a0f4 <HAL_SD_InitCard+0xac>
  return HAL_OK;
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	e7bd      	b.n	800a070 <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	4906      	ldr	r1, [pc, #24]	; (800a110 <HAL_SD_InitCard+0xc8>)
 800a0f8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0fc:	4303      	orrs	r3, r0
 800a0fe:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a100:	2001      	movs	r0, #1
 800a102:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 800a106:	e7b3      	b.n	800a070 <HAL_SD_InitCard+0x28>
 800a108:	014f8b59 	.word	0x014f8b59
 800a10c:	00012110 	.word	0x00012110
 800a110:	1fe00fff 	.word	0x1fe00fff

0800a114 <HAL_SD_GetCardStatus>:
{
 800a114:	b530      	push	{r4, r5, lr}
 800a116:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a118:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d059      	beq.n	800a1d6 <HAL_SD_GetCardStatus+0xc2>
 800a122:	4604      	mov	r4, r0
 800a124:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a126:	4669      	mov	r1, sp
 800a128:	f7ff faba 	bl	80096a0 <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a12c:	b1b8      	cbz	r0, 800a15e <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	492b      	ldr	r1, [pc, #172]	; (800a1e0 <HAL_SD_GetCardStatus+0xcc>)
 800a132:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a136:	4303      	orrs	r3, r0
 800a138:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a13a:	2501      	movs	r5, #1
 800a13c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a140:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	f001 fa79 	bl	800b63c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d044      	beq.n	800a1d8 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	4923      	ldr	r1, [pc, #140]	; (800a1e0 <HAL_SD_GetCardStatus+0xcc>)
 800a152:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a154:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a156:	2501      	movs	r5, #1
 800a158:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 800a15c:	e03c      	b.n	800a1d8 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a15e:	9a00      	ldr	r2, [sp, #0]
 800a160:	f3c2 1381 	ubfx	r3, r2, #6, #2
 800a164:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a166:	f3c2 1340 	ubfx	r3, r2, #5, #1
 800a16a:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a16c:	0a13      	lsrs	r3, r2, #8
 800a16e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a172:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800a176:	b29b      	uxth	r3, r3
 800a178:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	0213      	lsls	r3, r2, #8
 800a17e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a182:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a186:	0a11      	lsrs	r1, r2, #8
 800a188:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a18c:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a18e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a192:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	b2da      	uxtb	r2, r3
 800a198:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a19a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a19e:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a1a0:	f3c3 5203 	ubfx	r2, r3, #20, #4
 800a1a4:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a1a6:	0c1b      	lsrs	r3, r3, #16
 800a1a8:	9a03      	ldr	r2, [sp, #12]
 800a1aa:	b2d1      	uxtb	r1, r2
 800a1ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a1b4:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800a1b8:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a1ba:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800a1be:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a1c0:	f3c2 1303 	ubfx	r3, r2, #4, #4
 800a1c4:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a1c6:	f002 020f 	and.w	r2, r2, #15
 800a1ca:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a1cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a1d0:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	e7b4      	b.n	800a140 <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 800a1d6:	2501      	movs	r5, #1
}
 800a1d8:	4628      	mov	r0, r5
 800a1da:	b011      	add	sp, #68	; 0x44
 800a1dc:	bd30      	pop	{r4, r5, pc}
 800a1de:	bf00      	nop
 800a1e0:	1fe00fff 	.word	0x1fe00fff

0800a1e4 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a1e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a1e6:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a1e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a1ea:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a1ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a1ee:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a1f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a1f2:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a1f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a1f6:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a1f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a1fa:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a1fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a1fe:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a200:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800a202:	61cb      	str	r3, [r1, #28]
}
 800a204:	2000      	movs	r0, #0
 800a206:	4770      	bx	lr

0800a208 <HAL_SD_ConfigWideBusOperation>:
{
 800a208:	b530      	push	{r4, r5, lr}
 800a20a:	b089      	sub	sp, #36	; 0x24
 800a20c:	4604      	mov	r4, r0
 800a20e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800a210:	2303      	movs	r3, #3
 800a212:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a216:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d01c      	beq.n	800a256 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a21c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a220:	d008      	beq.n	800a234 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a222:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a226:	d00a      	beq.n	800a23e <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a228:	b179      	cbz	r1, 800a24a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a22a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a22c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a230:	6343      	str	r3, [r0, #52]	; 0x34
 800a232:	e014      	b.n	800a25e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a234:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a23a:	6343      	str	r3, [r0, #52]	; 0x34
 800a23c:	e00f      	b.n	800a25e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 800a23e:	f7ff fb37 	bl	80098b0 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 800a242:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a244:	4303      	orrs	r3, r0
 800a246:	6363      	str	r3, [r4, #52]	; 0x34
 800a248:	e009      	b.n	800a25e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800a24a:	f7ff fb58 	bl	80098fe <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 800a24e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a250:	4303      	orrs	r3, r0
 800a252:	6363      	str	r3, [r4, #52]	; 0x34
 800a254:	e003      	b.n	800a25e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a256:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a25c:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a25e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a260:	b1b3      	cbz	r3, 800a290 <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a262:	6823      	ldr	r3, [r4, #0]
 800a264:	4a3a      	ldr	r2, [pc, #232]	; (800a350 <HAL_SD_ConfigWideBusOperation+0x148>)
 800a266:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a268:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a26a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a26e:	6820      	ldr	r0, [r4, #0]
 800a270:	f001 f9e4 	bl	800b63c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a274:	b130      	cbz	r0, 800a284 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	4935      	ldr	r1, [pc, #212]	; (800a350 <HAL_SD_ConfigWideBusOperation+0x148>)
 800a27a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a27c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a27e:	4303      	orrs	r3, r0
 800a280:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 800a282:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 800a284:	2301      	movs	r3, #1
 800a286:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800a28a:	4628      	mov	r0, r5
 800a28c:	b009      	add	sp, #36	; 0x24
 800a28e:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a290:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a294:	2100      	movs	r1, #0
 800a296:	f7fe f99b 	bl	80085d0 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800a29a:	4602      	mov	r2, r0
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d050      	beq.n	800a342 <HAL_SD_ConfigWideBusOperation+0x13a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a2a0:	6863      	ldr	r3, [r4, #4]
 800a2a2:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a2a4:	68a3      	ldr	r3, [r4, #8]
 800a2a6:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 800a2a8:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a2ae:	6961      	ldr	r1, [r4, #20]
 800a2b0:	4b28      	ldr	r3, [pc, #160]	; (800a354 <HAL_SD_ConfigWideBusOperation+0x14c>)
 800a2b2:	fba3 0302 	umull	r0, r3, r3, r2
 800a2b6:	0e18      	lsrs	r0, r3, #24
 800a2b8:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 800a2bc:	d30c      	bcc.n	800a2d8 <HAL_SD_ConfigWideBusOperation+0xd0>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a2be:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 800a2c0:	ab08      	add	r3, sp, #32
 800a2c2:	e913 0003 	ldmdb	r3, {r0, r1}
 800a2c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a2ca:	ab03      	add	r3, sp, #12
 800a2cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	f001 f89c 	bl	800b40c <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 800a2d4:	2500      	movs	r5, #0
 800a2d6:	e7c8      	b.n	800a26a <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a2d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2de:	d008      	beq.n	800a2f2 <HAL_SD_ConfigWideBusOperation+0xea>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e4:	d007      	beq.n	800a2f6 <HAL_SD_ConfigWideBusOperation+0xee>
        if (hsd->Init.ClockDiv == 0U)
 800a2e6:	bb11      	cbnz	r1, 800a32e <HAL_SD_ConfigWideBusOperation+0x126>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a2e8:	4b1b      	ldr	r3, [pc, #108]	; (800a358 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d91d      	bls.n	800a32a <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a2ee:	9007      	str	r0, [sp, #28]
 800a2f0:	e7e6      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a2f2:	9107      	str	r1, [sp, #28]
 800a2f4:	e7e4      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
        if (hsd->Init.ClockDiv == 0U)
 800a2f6:	b951      	cbnz	r1, 800a30e <HAL_SD_ConfigWideBusOperation+0x106>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a2f8:	4b18      	ldr	r3, [pc, #96]	; (800a35c <HAL_SD_ConfigWideBusOperation+0x154>)
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d905      	bls.n	800a30a <HAL_SD_ConfigWideBusOperation+0x102>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a2fe:	4b15      	ldr	r3, [pc, #84]	; (800a354 <HAL_SD_ConfigWideBusOperation+0x14c>)
 800a300:	fba3 2302 	umull	r2, r3, r3, r2
 800a304:	0e5b      	lsrs	r3, r3, #25
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	e7da      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a30a:	9107      	str	r1, [sp, #28]
 800a30c:	e7d8      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a30e:	004b      	lsls	r3, r1, #1
 800a310:	fbb2 f3f3 	udiv	r3, r2, r3
 800a314:	4811      	ldr	r0, [pc, #68]	; (800a35c <HAL_SD_ConfigWideBusOperation+0x154>)
 800a316:	4283      	cmp	r3, r0
 800a318:	d905      	bls.n	800a326 <HAL_SD_ConfigWideBusOperation+0x11e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a31a:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <HAL_SD_ConfigWideBusOperation+0x14c>)
 800a31c:	fba3 2302 	umull	r2, r3, r3, r2
 800a320:	0e5b      	lsrs	r3, r3, #25
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	e7cc      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a326:	9107      	str	r1, [sp, #28]
 800a328:	e7ca      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a32a:	9107      	str	r1, [sp, #28]
 800a32c:	e7c8      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a32e:	004b      	lsls	r3, r1, #1
 800a330:	fbb2 f2f3 	udiv	r2, r2, r3
 800a334:	4b08      	ldr	r3, [pc, #32]	; (800a358 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a336:	429a      	cmp	r2, r3
 800a338:	d901      	bls.n	800a33e <HAL_SD_ConfigWideBusOperation+0x136>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a33a:	9007      	str	r0, [sp, #28]
 800a33c:	e7c0      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a33e:	9107      	str	r1, [sp, #28]
 800a340:	e7be      	b.n	800a2c0 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a344:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a348:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a34a:	2501      	movs	r5, #1
 800a34c:	e78d      	b.n	800a26a <HAL_SD_ConfigWideBusOperation+0x62>
 800a34e:	bf00      	nop
 800a350:	1fe00fff 	.word	0x1fe00fff
 800a354:	55e63b89 	.word	0x55e63b89
 800a358:	017d7840 	.word	0x017d7840
 800a35c:	02faf080 	.word	0x02faf080

0800a360 <HAL_SD_GetCardState>:
{
 800a360:	b510      	push	{r4, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 800a36a:	a901      	add	r1, sp, #4
 800a36c:	f7ff faee 	bl	800994c <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a370:	b110      	cbz	r0, 800a378 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 800a372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a374:	4303      	orrs	r3, r0
 800a376:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a378:	9801      	ldr	r0, [sp, #4]
 800a37a:	f3c0 2043 	ubfx	r0, r0, #9, #4
 800a37e:	b002      	add	sp, #8
 800a380:	bd10      	pop	{r4, pc}

0800a382 <HAL_SD_Init>:
{
 800a382:	b570      	push	{r4, r5, r6, lr}
 800a384:	b086      	sub	sp, #24
  if (hsd == NULL)
 800a386:	2800      	cmp	r0, #0
 800a388:	d054      	beq.n	800a434 <HAL_SD_Init+0xb2>
 800a38a:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 800a38c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a390:	b153      	cbz	r3, 800a3a8 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a392:	2304      	movs	r3, #4
 800a394:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff fe55 	bl	800a048 <HAL_SD_InitCard>
 800a39e:	b138      	cbz	r0, 800a3b0 <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 800a3a0:	2501      	movs	r5, #1
}
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	b006      	add	sp, #24
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 800a3a8:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a3aa:	f7f8 fd03 	bl	8002db4 <HAL_SD_MspInit>
 800a3ae:	e7f0      	b.n	800a392 <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a3b0:	a901      	add	r1, sp, #4
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f7ff feae 	bl	800a114 <HAL_SD_GetCardStatus>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d13d      	bne.n	800a438 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 800a3bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a3c0:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a3c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800a3c6:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a3c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a3ca:	2901      	cmp	r1, #1
 800a3cc:	d00b      	beq.n	800a3e6 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a3ce:	2901      	cmp	r1, #1
 800a3d0:	d00f      	beq.n	800a3f2 <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a3d6:	68e1      	ldr	r1, [r4, #12]
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f7ff ff15 	bl	800a208 <HAL_SD_ConfigWideBusOperation>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	b158      	cbz	r0, 800a3fa <HAL_SD_Init+0x78>
    return HAL_ERROR;
 800a3e2:	2501      	movs	r5, #1
 800a3e4:	e7dd      	b.n	800a3a2 <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	d0f1      	beq.n	800a3ce <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a3ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ee:	65a3      	str	r3, [r4, #88]	; 0x58
 800a3f0:	e7f1      	b.n	800a3d6 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800a3f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3f6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a3f8:	e7ed      	b.n	800a3d6 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 800a3fa:	f7f9 fd5d 	bl	8003eb8 <HAL_GetTick>
 800a3fe:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a400:	4620      	mov	r0, r4
 800a402:	f7ff ffad 	bl	800a360 <HAL_SD_GetCardState>
 800a406:	2804      	cmp	r0, #4
 800a408:	d00d      	beq.n	800a426 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a40a:	f7f9 fd55 	bl	8003eb8 <HAL_GetTick>
 800a40e:	1b80      	subs	r0, r0, r6
 800a410:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a414:	d1f4      	bne.n	800a400 <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a41a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a422:	2503      	movs	r5, #3
 800a424:	e7bd      	b.n	800a3a2 <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a426:	2300      	movs	r3, #0
 800a428:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a42a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a432:	e7b6      	b.n	800a3a2 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800a434:	2501      	movs	r5, #1
 800a436:	e7b4      	b.n	800a3a2 <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800a438:	2501      	movs	r5, #1
 800a43a:	e7b2      	b.n	800a3a2 <HAL_SD_Init+0x20>

0800a43c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a43c:	4770      	bx	lr

0800a43e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a43e:	4770      	bx	lr

0800a440 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a440:	4770      	bx	lr

0800a442 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a442:	4770      	bx	lr

0800a444 <HAL_SD_IRQHandler>:
{
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800a448:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a44a:	6803      	ldr	r3, [r0, #0]
 800a44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a44e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a452:	d002      	beq.n	800a45a <HAL_SD_IRQHandler+0x16>
 800a454:	f015 0f08 	tst.w	r5, #8
 800a458:	d12a      	bne.n	800a4b0 <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a45a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a45c:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a460:	d067      	beq.n	800a532 <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a462:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a46c:	4b7e      	ldr	r3, [pc, #504]	; (800a668 <HAL_SD_IRQHandler+0x224>)
 800a46e:	400b      	ands	r3, r1
 800a470:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a472:	6822      	ldr	r2, [r4, #0]
 800a474:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a47a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	68d3      	ldr	r3, [r2, #12]
 800a480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a484:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a486:	f015 0f08 	tst.w	r5, #8
 800a48a:	d025      	beq.n	800a4d8 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a48c:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a490:	d111      	bne.n	800a4b6 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	4a75      	ldr	r2, [pc, #468]	; (800a66c <HAL_SD_IRQHandler+0x228>)
 800a496:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a498:	2301      	movs	r3, #1
 800a49a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4a2:	f015 0f03 	tst.w	r5, #3
 800a4a6:	d013      	beq.n	800a4d0 <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f001 fb9f 	bl	800bbec <HAL_SD_RxCpltCallback>
 800a4ae:	e001      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 800a4b0:	f7ff f8b2 	bl	8009618 <SD_Read_IT>
}
 800a4b4:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4b6:	6820      	ldr	r0, [r4, #0]
 800a4b8:	f001 f93e 	bl	800b738 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d0e7      	beq.n	800a492 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a4c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7ff fc61 	bl	8009d90 <HAL_SD_ErrorCallback>
 800a4ce:	e7e0      	b.n	800a492 <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f001 fb86 	bl	800bbe2 <HAL_SD_TxCpltCallback>
 800a4d6:	e7ed      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a4d8:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a4dc:	d0ea      	beq.n	800a4b4 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 800a4de:	6822      	ldr	r2, [r4, #0]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4ec:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a4f0:	d10e      	bne.n	800a510 <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4fc:	f015 0f30 	tst.w	r5, #48	; 0x30
 800a500:	d113      	bne.n	800a52a <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a502:	f015 0f03 	tst.w	r5, #3
 800a506:	d0d5      	beq.n	800a4b4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 800a508:	4620      	mov	r0, r4
 800a50a:	f001 fb6f 	bl	800bbec <HAL_SD_RxCpltCallback>
 800a50e:	e7d1      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	f001 f911 	bl	800b738 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a516:	4603      	mov	r3, r0
 800a518:	2800      	cmp	r0, #0
 800a51a:	d0ea      	beq.n	800a4f2 <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 800a51c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a51e:	4313      	orrs	r3, r2
 800a520:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a522:	4620      	mov	r0, r4
 800a524:	f7ff fc34 	bl	8009d90 <HAL_SD_ErrorCallback>
 800a528:	e7e3      	b.n	800a4f2 <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800a52a:	4620      	mov	r0, r4
 800a52c:	f001 fb59 	bl	800bbe2 <HAL_SD_TxCpltCallback>
 800a530:	e7e7      	b.n	800a502 <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a534:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a538:	d002      	beq.n	800a540 <HAL_SD_IRQHandler+0xfc>
 800a53a:	f015 0f08 	tst.w	r5, #8
 800a53e:	d162      	bne.n	800a606 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a542:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800a546:	d06b      	beq.n	800a620 <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a54a:	f012 0f02 	tst.w	r2, #2
 800a54e:	d003      	beq.n	800a558 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a550:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a552:	f042 0202 	orr.w	r2, r2, #2
 800a556:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a55a:	f012 0f08 	tst.w	r2, #8
 800a55e:	d003      	beq.n	800a568 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a560:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a562:	f042 0208 	orr.w	r2, r2, #8
 800a566:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56a:	f012 0f20 	tst.w	r2, #32
 800a56e:	d003      	beq.n	800a578 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a570:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a572:	f042 0220 	orr.w	r2, r2, #32
 800a576:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a57a:	f012 0f10 	tst.w	r2, #16
 800a57e:	d003      	beq.n	800a588 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a580:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a582:	f042 0210 	orr.w	r2, r2, #16
 800a586:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a588:	4a38      	ldr	r2, [pc, #224]	; (800a66c <HAL_SD_IRQHandler+0x228>)
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a58c:	6822      	ldr	r2, [r4, #0]
 800a58e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a590:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a594:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	68d3      	ldr	r3, [r2, #12]
 800a59a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a5a0:	6822      	ldr	r2, [r4, #0]
 800a5a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a5a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a5a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	68d3      	ldr	r3, [r2, #12]
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b2:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	f001 f8bf 	bl	800b738 <SDMMC_CmdStopTransfer>
 800a5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5bc:	4303      	orrs	r3, r0
 800a5be:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	68d3      	ldr	r3, [r2, #12]
 800a5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c8:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a5d2:	f015 0f08 	tst.w	r5, #8
 800a5d6:	d11a      	bne.n	800a60e <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a5d8:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a5dc:	f43f af6a 	beq.w	800a4b4 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a5e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f43f af66 	beq.w	800a4b4 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a5e8:	6822      	ldr	r2, [r4, #0]
 800a5ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a5ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5f0:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff fbc6 	bl	8009d90 <HAL_SD_ErrorCallback>
 800a604:	e756      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 800a606:	4620      	mov	r0, r4
 800a608:	f7ff f824 	bl	8009654 <SD_Write_IT>
 800a60c:	e752      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800a60e:	2301      	movs	r3, #1
 800a610:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a614:	2300      	movs	r3, #0
 800a616:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a618:	4620      	mov	r0, r4
 800a61a:	f7ff fbb9 	bl	8009d90 <HAL_SD_ErrorCallback>
 800a61e:	e749      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a622:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800a626:	f43f af45 	beq.w	800a4b4 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62e:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a634:	f013 0f04 	tst.w	r3, #4
 800a638:	d10a      	bne.n	800a650 <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a63a:	f015 0f20 	tst.w	r5, #32
 800a63e:	d003      	beq.n	800a648 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff fefe 	bl	800a442 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a646:	e735      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a648:	4620      	mov	r0, r4
 800a64a:	f7ff fef8 	bl	800a43e <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a64e:	e731      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a650:	f015 0f20 	tst.w	r5, #32
 800a654:	d003      	beq.n	800a65e <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff fef2 	bl	800a440 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a65c:	e72a      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff feec 	bl	800a43c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a664:	e726      	b.n	800a4b4 <HAL_SD_IRQHandler+0x70>
 800a666:	bf00      	nop
 800a668:	ffff3ec5 	.word	0xffff3ec5
 800a66c:	18000f3a 	.word	0x18000f3a

0800a670 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a670:	b308      	cbz	r0, 800a6b6 <HAL_SDRAM_Init+0x46>
{
 800a672:	b538      	push	{r3, r4, r5, lr}
 800a674:	460d      	mov	r5, r1
 800a676:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a678:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a67c:	b1b3      	cbz	r3, 800a6ac <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a67e:	2302      	movs	r3, #2
 800a680:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a684:	4621      	mov	r1, r4
 800a686:	f851 0b04 	ldr.w	r0, [r1], #4
 800a68a:	f000 fdf1 	bl	800b270 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a68e:	6862      	ldr	r2, [r4, #4]
 800a690:	4629      	mov	r1, r5
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	f000 fe26 	bl	800b2e4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a698:	4a08      	ldr	r2, [pc, #32]	; (800a6bc <HAL_SDRAM_Init+0x4c>)
 800a69a:	6813      	ldr	r3, [r2, #0]
 800a69c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6a0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 800a6a8:	2000      	movs	r0, #0
}
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a6ac:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a6b0:	f7f6 fc62 	bl	8000f78 <HAL_SDRAM_MspInit>
 800a6b4:	e7e3      	b.n	800a67e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800a6b6:	2001      	movs	r0, #1
}
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	52004000 	.word	0x52004000

0800a6c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a6c4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a6c8:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a6ca:	2802      	cmp	r0, #2
 800a6cc:	d005      	beq.n	800a6da <HAL_SDRAM_SendCommand+0x1a>
 800a6ce:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a6d0:	2805      	cmp	r0, #5
 800a6d2:	bf18      	it	ne
 800a6d4:	2801      	cmpne	r0, #1
 800a6d6:	d001      	beq.n	800a6dc <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a6d8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a6dc:	2302      	movs	r3, #2
 800a6de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	f000 fe52 	bl	800b38c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d004      	beq.n	800a6f8 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7f0      	b.n	800a6da <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a6f8:	2305      	movs	r3, #5
 800a6fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a6fe:	2000      	movs	r0, #0
 800a700:	e7eb      	b.n	800a6da <HAL_SDRAM_SendCommand+0x1a>

0800a702 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a702:	b510      	push	{r4, lr}
 800a704:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a706:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a70a:	b2d8      	uxtb	r0, r3
 800a70c:	2802      	cmp	r0, #2
 800a70e:	d005      	beq.n	800a71c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a710:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b01      	cmp	r3, #1
 800a718:	d001      	beq.n	800a71e <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a71a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a71c:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a71e:	2302      	movs	r3, #2
 800a720:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a724:	6820      	ldr	r0, [r4, #0]
 800a726:	f000 fe49 	bl	800b3bc <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a72a:	2301      	movs	r3, #1
 800a72c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a730:	2000      	movs	r0, #0
 800a732:	e7f3      	b.n	800a71c <HAL_SDRAM_ProgramRefreshRate+0x1a>

0800a734 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a734:	6802      	ldr	r2, [r0, #0]
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	6013      	str	r3, [r2, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a73e:	6802      	ldr	r2, [r0, #0]
 800a740:	6911      	ldr	r1, [r2, #16]
 800a742:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <SPI_AbortTransfer+0x70>)
 800a744:	400b      	ands	r3, r1
 800a746:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a748:	6802      	ldr	r2, [r0, #0]
 800a74a:	6993      	ldr	r3, [r2, #24]
 800a74c:	f043 0308 	orr.w	r3, r3, #8
 800a750:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a752:	6802      	ldr	r2, [r0, #0]
 800a754:	6993      	ldr	r3, [r2, #24]
 800a756:	f043 0310 	orr.w	r3, r3, #16
 800a75a:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a75c:	6802      	ldr	r2, [r0, #0]
 800a75e:	6893      	ldr	r3, [r2, #8]
 800a760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a764:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a766:	6802      	ldr	r2, [r0, #0]
 800a768:	6993      	ldr	r3, [r2, #24]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a770:	6802      	ldr	r2, [r0, #0]
 800a772:	6993      	ldr	r3, [r2, #24]
 800a774:	f043 0320 	orr.w	r3, r3, #32
 800a778:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a77a:	6802      	ldr	r2, [r0, #0]
 800a77c:	6993      	ldr	r3, [r2, #24]
 800a77e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a782:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a784:	6802      	ldr	r2, [r0, #0]
 800a786:	6993      	ldr	r3, [r2, #24]
 800a788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a78c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a78e:	6802      	ldr	r2, [r0, #0]
 800a790:	6993      	ldr	r3, [r2, #24]
 800a792:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a796:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a798:	2300      	movs	r3, #0
 800a79a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a79e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a7a2:	4770      	bx	lr
 800a7a4:	fffffc90 	.word	0xfffffc90

0800a7a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a7a8:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a7aa:	6802      	ldr	r2, [r0, #0]
 800a7ac:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7ae:	6991      	ldr	r1, [r2, #24]
 800a7b0:	f041 0108 	orr.w	r1, r1, #8
 800a7b4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7b6:	6801      	ldr	r1, [r0, #0]
 800a7b8:	698a      	ldr	r2, [r1, #24]
 800a7ba:	f042 0210 	orr.w	r2, r2, #16
 800a7be:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7c0:	6801      	ldr	r1, [r0, #0]
 800a7c2:	680a      	ldr	r2, [r1, #0]
 800a7c4:	f022 0201 	bic.w	r2, r2, #1
 800a7c8:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a7ca:	6801      	ldr	r1, [r0, #0]
 800a7cc:	690c      	ldr	r4, [r1, #16]
 800a7ce:	4a29      	ldr	r2, [pc, #164]	; (800a874 <SPI_CloseTransfer+0xcc>)
 800a7d0:	4022      	ands	r2, r4
 800a7d2:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a7d4:	6801      	ldr	r1, [r0, #0]
 800a7d6:	688a      	ldr	r2, [r1, #8]
 800a7d8:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7dc:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7de:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a7e2:	b2d2      	uxtb	r2, r2
 800a7e4:	2a04      	cmp	r2, #4
 800a7e6:	d00d      	beq.n	800a804 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a7e8:	f013 0f20 	tst.w	r3, #32
 800a7ec:	d00a      	beq.n	800a804 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a7ee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a7f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7f6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a7fa:	6801      	ldr	r1, [r0, #0]
 800a7fc:	698a      	ldr	r2, [r1, #24]
 800a7fe:	f042 0220 	orr.w	r2, r2, #32
 800a802:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a804:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	2a03      	cmp	r2, #3
 800a80c:	d00d      	beq.n	800a82a <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a80e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a812:	d00a      	beq.n	800a82a <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a814:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a818:	f042 0204 	orr.w	r2, r2, #4
 800a81c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a820:	6801      	ldr	r1, [r0, #0]
 800a822:	698a      	ldr	r2, [r1, #24]
 800a824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a828:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a82a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a82e:	d00a      	beq.n	800a846 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a830:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a834:	f042 0201 	orr.w	r2, r2, #1
 800a838:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a83c:	6801      	ldr	r1, [r0, #0]
 800a83e:	698a      	ldr	r2, [r1, #24]
 800a840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a844:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a846:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a84a:	d00a      	beq.n	800a862 <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a84c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a850:	f043 0308 	orr.w	r3, r3, #8
 800a854:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a858:	6802      	ldr	r2, [r0, #0]
 800a85a:	6993      	ldr	r3, [r2, #24]
 800a85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a860:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a862:	2300      	movs	r3, #0
 800a864:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a868:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	fffffc90 	.word	0xfffffc90

0800a878 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a878:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a87a:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a87c:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a87e:	3008      	adds	r0, #8
 800a880:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800a882:	fb03 0000 	mla	r0, r3, r0, r0
 800a886:	4770      	bx	lr

0800a888 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a888:	2800      	cmp	r0, #0
 800a88a:	f000 80b7 	beq.w	800a9fc <HAL_SPI_Init+0x174>
{
 800a88e:	b570      	push	{r4, r5, r6, lr}
 800a890:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a892:	2300      	movs	r3, #0
 800a894:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a896:	6805      	ldr	r5, [r0, #0]
 800a898:	4b5c      	ldr	r3, [pc, #368]	; (800aa0c <HAL_SPI_Init+0x184>)
 800a89a:	4e5d      	ldr	r6, [pc, #372]	; (800aa10 <HAL_SPI_Init+0x188>)
 800a89c:	429d      	cmp	r5, r3
 800a89e:	bf18      	it	ne
 800a8a0:	42b5      	cmpne	r5, r6
 800a8a2:	bf14      	ite	ne
 800a8a4:	2601      	movne	r6, #1
 800a8a6:	2600      	moveq	r6, #0
 800a8a8:	d007      	beq.n	800a8ba <HAL_SPI_Init+0x32>
 800a8aa:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a8ae:	429d      	cmp	r5, r3
 800a8b0:	d003      	beq.n	800a8ba <HAL_SPI_Init+0x32>
 800a8b2:	68c3      	ldr	r3, [r0, #12]
 800a8b4:	2b0f      	cmp	r3, #15
 800a8b6:	f200 80a3 	bhi.w	800aa00 <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f7ff ffdc 	bl	800a878 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8c0:	b12e      	cbz	r6, 800a8ce <HAL_SPI_Init+0x46>
 800a8c2:	4b54      	ldr	r3, [pc, #336]	; (800aa14 <HAL_SPI_Init+0x18c>)
 800a8c4:	429d      	cmp	r5, r3
 800a8c6:	d002      	beq.n	800a8ce <HAL_SPI_Init+0x46>
 800a8c8:	2808      	cmp	r0, #8
 800a8ca:	f200 809b 	bhi.w	800aa04 <HAL_SPI_Init+0x17c>
 800a8ce:	4a4f      	ldr	r2, [pc, #316]	; (800aa0c <HAL_SPI_Init+0x184>)
 800a8d0:	4b4f      	ldr	r3, [pc, #316]	; (800aa10 <HAL_SPI_Init+0x188>)
 800a8d2:	429d      	cmp	r5, r3
 800a8d4:	bf18      	it	ne
 800a8d6:	4295      	cmpne	r5, r2
 800a8d8:	d003      	beq.n	800a8e2 <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	d102      	bne.n	800a8e8 <HAL_SPI_Init+0x60>
 800a8e2:	2810      	cmp	r0, #16
 800a8e4:	f200 8090 	bhi.w	800aa08 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8e8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a8ec:	b1f3      	cbz	r3, 800a92c <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a8f4:	6822      	ldr	r2, [r4, #0]
 800a8f6:	6813      	ldr	r3, [r2, #0]
 800a8f8:	f023 0301 	bic.w	r3, r3, #1
 800a8fc:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	689a      	ldr	r2, [r3, #8]
 800a902:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a906:	69a1      	ldr	r1, [r4, #24]
 800a908:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a90c:	d014      	beq.n	800a938 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a914:	d023      	beq.n	800a95e <HAL_SPI_Init+0xd6>
 800a916:	68e3      	ldr	r3, [r4, #12]
 800a918:	2b06      	cmp	r3, #6
 800a91a:	d920      	bls.n	800a95e <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a91c:	6821      	ldr	r1, [r4, #0]
 800a91e:	680b      	ldr	r3, [r1, #0]
 800a920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a924:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a926:	4303      	orrs	r3, r0
 800a928:	600b      	str	r3, [r1, #0]
 800a92a:	e01d      	b.n	800a968 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 800a92c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a930:	4620      	mov	r0, r4
 800a932:	f7f8 fae9 	bl	8002f08 <HAL_SPI_MspInit>
 800a936:	e7da      	b.n	800a8ee <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a938:	6861      	ldr	r1, [r4, #4]
 800a93a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a93e:	d006      	beq.n	800a94e <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a940:	2900      	cmp	r1, #0
 800a942:	d1e4      	bne.n	800a90e <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a944:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a946:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a94a:	d1e0      	bne.n	800a90e <HAL_SPI_Init+0x86>
 800a94c:	e002      	b.n	800a954 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a94e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a950:	2800      	cmp	r0, #0
 800a952:	d1f5      	bne.n	800a940 <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a954:	6819      	ldr	r1, [r3, #0]
 800a956:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a95a:	6019      	str	r1, [r3, #0]
 800a95c:	e7d7      	b.n	800a90e <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a95e:	6821      	ldr	r1, [r4, #0]
 800a960:	680b      	ldr	r3, [r1, #0]
 800a962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a966:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a968:	69e3      	ldr	r3, [r4, #28]
 800a96a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a96c:	430b      	orrs	r3, r1
 800a96e:	4313      	orrs	r3, r2
 800a970:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a972:	4313      	orrs	r3, r2
 800a974:	68e1      	ldr	r1, [r4, #12]
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	430b      	orrs	r3, r1
 800a97a:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a97c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a97e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a980:	4313      	orrs	r3, r2
 800a982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a984:	4313      	orrs	r3, r2
 800a986:	69a2      	ldr	r2, [r4, #24]
 800a988:	4313      	orrs	r3, r2
 800a98a:	6922      	ldr	r2, [r4, #16]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	6962      	ldr	r2, [r4, #20]
 800a990:	4313      	orrs	r3, r2
 800a992:	6a22      	ldr	r2, [r4, #32]
 800a994:	4313      	orrs	r3, r2
 800a996:	6862      	ldr	r2, [r4, #4]
 800a998:	4313      	orrs	r3, r2
 800a99a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a99c:	4313      	orrs	r3, r2
 800a99e:	68a2      	ldr	r2, [r4, #8]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9a8:	6822      	ldr	r2, [r4, #0]
 800a9aa:	430b      	orrs	r3, r1
 800a9ac:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a9ae:	6863      	ldr	r3, [r4, #4]
 800a9b0:	b96b      	cbnz	r3, 800a9ce <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	6893      	ldr	r3, [r2, #8]
 800a9b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a9ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9be:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a9c0:	6822      	ldr	r2, [r4, #0]
 800a9c2:	6893      	ldr	r3, [r2, #8]
 800a9c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a9c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9cc:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9ce:	6822      	ldr	r2, [r4, #0]
 800a9d0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a9d2:	f023 0301 	bic.w	r3, r3, #1
 800a9d6:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a9d8:	6863      	ldr	r3, [r4, #4]
 800a9da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a9de:	d006      	beq.n	800a9ee <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a9e0:	6822      	ldr	r2, [r4, #0]
 800a9e2:	68d3      	ldr	r3, [r2, #12]
 800a9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a9ea:	430b      	orrs	r3, r1
 800a9ec:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a9fc:	2001      	movs	r0, #1
}
 800a9fe:	4770      	bx	lr
    return HAL_ERROR;
 800aa00:	2001      	movs	r0, #1
 800aa02:	e7fa      	b.n	800a9fa <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 800aa04:	2001      	movs	r0, #1
 800aa06:	e7f8      	b.n	800a9fa <HAL_SPI_Init+0x172>
 800aa08:	2001      	movs	r0, #1
 800aa0a:	e7f6      	b.n	800a9fa <HAL_SPI_Init+0x172>
 800aa0c:	40013000 	.word	0x40013000
 800aa10:	40003800 	.word	0x40003800
 800aa14:	40003c00 	.word	0x40003c00

0800aa18 <HAL_SPI_Receive_DMA>:
{
 800aa18:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 800aa1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	f000 80d4 	beq.w	800abcc <HAL_SPI_Receive_DMA+0x1b4>
 800aa24:	4604      	mov	r4, r0
 800aa26:	4616      	mov	r6, r2
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800aa2e:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800aa32:	b2ed      	uxtb	r5, r5
 800aa34:	429d      	cmp	r5, r3
 800aa36:	d17d      	bne.n	800ab34 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 800aa38:	2a00      	cmp	r2, #0
 800aa3a:	bf18      	it	ne
 800aa3c:	2900      	cmpne	r1, #0
 800aa3e:	d07f      	beq.n	800ab40 <HAL_SPI_Receive_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aa40:	2304      	movs	r3, #4
 800aa42:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aa4c:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800aa4e:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800aa52:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800aa56:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 800aa58:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aa5a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800aa5e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa62:	6883      	ldr	r3, [r0, #8]
 800aa64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800aa68:	d06e      	beq.n	800ab48 <HAL_SPI_Receive_DMA+0x130>
    SPI_2LINES_RX(hspi);
 800aa6a:	6802      	ldr	r2, [r0, #0]
 800aa6c:	68d3      	ldr	r3, [r2, #12]
 800aa6e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800aa72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa76:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aa78:	68e3      	ldr	r3, [r4, #12]
 800aa7a:	2b0f      	cmp	r3, #15
 800aa7c:	d904      	bls.n	800aa88 <HAL_SPI_Receive_DMA+0x70>
 800aa7e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800aa80:	6992      	ldr	r2, [r2, #24]
 800aa82:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aa86:	d165      	bne.n	800ab54 <HAL_SPI_Receive_DMA+0x13c>
 800aa88:	2b07      	cmp	r3, #7
 800aa8a:	d907      	bls.n	800aa9c <HAL_SPI_Receive_DMA+0x84>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800aa8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa94:	bf18      	it	ne
 800aa96:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 800aa9a:	d15b      	bne.n	800ab54 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800aa9c:	6822      	ldr	r2, [r4, #0]
 800aa9e:	6893      	ldr	r3, [r2, #8]
 800aaa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa4:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800aaa6:	68e3      	ldr	r3, [r4, #12]
 800aaa8:	2b07      	cmp	r3, #7
 800aaaa:	d867      	bhi.n	800ab7c <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aaac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aaae:	699a      	ldr	r2, [r3, #24]
 800aab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aab4:	d052      	beq.n	800ab5c <HAL_SPI_Receive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aabc:	d056      	beq.n	800ab6c <HAL_SPI_Receive_DMA+0x154>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aabe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aac0:	4a43      	ldr	r2, [pc, #268]	; (800abd0 <HAL_SPI_Receive_DMA+0x1b8>)
 800aac2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800aac4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aac6:	4a43      	ldr	r2, [pc, #268]	; (800abd4 <HAL_SPI_Receive_DMA+0x1bc>)
 800aac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aaca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aacc:	4a42      	ldr	r2, [pc, #264]	; (800abd8 <HAL_SPI_Receive_DMA+0x1c0>)
 800aace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800aad0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aad2:	2200      	movs	r2, #0
 800aad4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aad6:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800aad8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aadc:	b29b      	uxth	r3, r3
 800aade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae0:	3130      	adds	r1, #48	; 0x30
 800aae2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aae4:	f7f9 feae 	bl	8004844 <HAL_DMA_Start_IT>
 800aae8:	4601      	mov	r1, r0
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d155      	bne.n	800ab9a <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aaee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf6:	d05d      	beq.n	800abb4 <HAL_SPI_Receive_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	6842      	ldr	r2, [r0, #4]
 800aafc:	4b37      	ldr	r3, [pc, #220]	; (800abdc <HAL_SPI_Receive_DMA+0x1c4>)
 800aafe:	4013      	ands	r3, r2
 800ab00:	4333      	orrs	r3, r6
 800ab02:	6043      	str	r3, [r0, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ab04:	6822      	ldr	r2, [r4, #0]
 800ab06:	6893      	ldr	r3, [r2, #8]
 800ab08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab0c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ab0e:	6822      	ldr	r2, [r4, #0]
 800ab10:	6913      	ldr	r3, [r2, #16]
 800ab12:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800ab16:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	6813      	ldr	r3, [r2, #0]
 800ab1c:	f043 0301 	orr.w	r3, r3, #1
 800ab20:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab28:	d04a      	beq.n	800abc0 <HAL_SPI_Receive_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ab30:	460d      	mov	r5, r1
 800ab32:	e003      	b.n	800ab3c <HAL_SPI_Receive_DMA+0x124>
    __HAL_UNLOCK(hspi);
 800ab34:	2300      	movs	r3, #0
 800ab36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ab3a:	2502      	movs	r5, #2
}
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800ab40:	2300      	movs	r3, #0
 800ab42:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800ab46:	e7f9      	b.n	800ab3c <HAL_SPI_Receive_DMA+0x124>
    SPI_1LINE_RX(hspi);
 800ab48:	6802      	ldr	r2, [r0, #0]
 800ab4a:	6813      	ldr	r3, [r2, #0]
 800ab4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	e791      	b.n	800aa78 <HAL_SPI_Receive_DMA+0x60>
    __HAL_UNLOCK(hspi);
 800ab54:	2300      	movs	r3, #0
 800ab56:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800ab5a:	e7ef      	b.n	800ab3c <HAL_SPI_Receive_DMA+0x124>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab5c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ab60:	b292      	uxth	r2, r2
 800ab62:	3201      	adds	r2, #1
 800ab64:	0852      	lsrs	r2, r2, #1
 800ab66:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ab6a:	e7a4      	b.n	800aab6 <HAL_SPI_Receive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ab6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	3303      	adds	r3, #3
 800ab74:	089b      	lsrs	r3, r3, #2
 800ab76:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ab7a:	e7a0      	b.n	800aabe <HAL_SPI_Receive_DMA+0xa6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ab7c:	2b0f      	cmp	r3, #15
 800ab7e:	d89e      	bhi.n	800aabe <HAL_SPI_Receive_DMA+0xa6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab88:	d199      	bne.n	800aabe <HAL_SPI_Receive_DMA+0xa6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ab8a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	3301      	adds	r3, #1
 800ab92:	085b      	lsrs	r3, r3, #1
 800ab94:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ab98:	e791      	b.n	800aabe <HAL_SPI_Receive_DMA+0xa6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab9a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ab9e:	f043 0310 	orr.w	r3, r3, #16
 800aba2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800aba6:	2300      	movs	r3, #0
 800aba8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800abac:	2301      	movs	r3, #1
 800abae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800abb2:	e7c3      	b.n	800ab3c <HAL_SPI_Receive_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	6850      	ldr	r0, [r2, #4]
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <HAL_SPI_Receive_DMA+0x1c4>)
 800abba:	4003      	ands	r3, r0
 800abbc:	6053      	str	r3, [r2, #4]
 800abbe:	e7a1      	b.n	800ab04 <HAL_SPI_Receive_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	6813      	ldr	r3, [r2, #0]
 800abc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	e7ae      	b.n	800ab2a <HAL_SPI_Receive_DMA+0x112>
  __HAL_LOCK(hspi);
 800abcc:	2502      	movs	r5, #2
 800abce:	e7b5      	b.n	800ab3c <HAL_SPI_Receive_DMA+0x124>
 800abd0:	0800afcf 	.word	0x0800afcf
 800abd4:	0800af7b 	.word	0x0800af7b
 800abd8:	0800afe5 	.word	0x0800afe5
 800abdc:	ffff0000 	.word	0xffff0000

0800abe0 <HAL_SPI_TransmitReceive_DMA>:
{
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800abe4:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800abe8:	2801      	cmp	r0, #1
 800abea:	f000 8115 	beq.w	800ae18 <HAL_SPI_TransmitReceive_DMA+0x238>
 800abee:	461e      	mov	r6, r3
 800abf0:	2301      	movs	r3, #1
 800abf2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800abf6:	f894 5081 	ldrb.w	r5, [r4, #129]	; 0x81
 800abfa:	b2ed      	uxtb	r5, r5
 800abfc:	429d      	cmp	r5, r3
 800abfe:	d16b      	bne.n	800acd8 <HAL_SPI_TransmitReceive_DMA+0xf8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	bf18      	it	ne
 800ac04:	2900      	cmpne	r1, #0
 800ac06:	d06c      	beq.n	800ace2 <HAL_SPI_TransmitReceive_DMA+0x102>
 800ac08:	2e00      	cmp	r6, #0
 800ac0a:	d06a      	beq.n	800ace2 <HAL_SPI_TransmitReceive_DMA+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ac0c:	2305      	movs	r3, #5
 800ac0e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ac18:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ac1a:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ac1e:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac22:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ac24:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ac28:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800ac2c:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ac2e:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
 800ac30:	6822      	ldr	r2, [r4, #0]
 800ac32:	68d3      	ldr	r3, [r2, #12]
 800ac34:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ac38:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	6893      	ldr	r3, [r2, #8]
 800ac3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ac42:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ac44:	68e3      	ldr	r3, [r4, #12]
 800ac46:	2b0f      	cmp	r3, #15
 800ac48:	d904      	bls.n	800ac54 <HAL_SPI_TransmitReceive_DMA+0x74>
 800ac4a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ac4c:	6992      	ldr	r2, [r2, #24]
 800ac4e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ac52:	d14b      	bne.n	800acec <HAL_SPI_TransmitReceive_DMA+0x10c>
 800ac54:	2b07      	cmp	r3, #7
 800ac56:	d907      	bls.n	800ac68 <HAL_SPI_TransmitReceive_DMA+0x88>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ac58:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ac5a:	6992      	ldr	r2, [r2, #24]
 800ac5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ac60:	bf18      	it	ne
 800ac62:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
 800ac66:	d141      	bne.n	800acec <HAL_SPI_TransmitReceive_DMA+0x10c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ac68:	2b07      	cmp	r3, #7
 800ac6a:	d863      	bhi.n	800ad34 <HAL_SPI_TransmitReceive_DMA+0x154>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac6c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac6e:	699a      	ldr	r2, [r3, #24]
 800ac70:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ac74:	d03e      	beq.n	800acf4 <HAL_SPI_TransmitReceive_DMA+0x114>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac7c:	d042      	beq.n	800ad04 <HAL_SPI_TransmitReceive_DMA+0x124>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ac7e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ac86:	d045      	beq.n	800ad14 <HAL_SPI_TransmitReceive_DMA+0x134>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac8e:	d049      	beq.n	800ad24 <HAL_SPI_TransmitReceive_DMA+0x144>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ac90:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac92:	4a62      	ldr	r2, [pc, #392]	; (800ae1c <HAL_SPI_TransmitReceive_DMA+0x23c>)
 800ac94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ac96:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac98:	4a61      	ldr	r2, [pc, #388]	; (800ae20 <HAL_SPI_TransmitReceive_DMA+0x240>)
 800ac9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ac9c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ac9e:	4a61      	ldr	r2, [pc, #388]	; (800ae24 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800aca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800aca2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aca4:	2200      	movs	r2, #0
 800aca6:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aca8:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800acaa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800acae:	b29b      	uxth	r3, r3
 800acb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acb2:	3130      	adds	r1, #48	; 0x30
 800acb4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800acb6:	f7f9 fdc5 	bl	8004844 <HAL_DMA_Start_IT>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d056      	beq.n	800ad6c <HAL_SPI_TransmitReceive_DMA+0x18c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800acbe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800acc2:	f043 0310 	orr.w	r3, r3, #16
 800acc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800acca:	2300      	movs	r3, #0
 800accc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800acd0:	2301      	movs	r3, #1
 800acd2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800acd6:	e007      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800acd8:	2300      	movs	r3, #0
 800acda:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800acde:	2502      	movs	r5, #2
 800ace0:	e002      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800ace2:	2300      	movs	r3, #0
 800ace4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ace8:	4628      	mov	r0, r5
 800acea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800acec:	2300      	movs	r3, #0
 800acee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800acf2:	e7f9      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800acf4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800acf8:	b292      	uxth	r2, r2
 800acfa:	3201      	adds	r2, #1
 800acfc:	0852      	lsrs	r2, r2, #1
 800acfe:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800ad02:	e7b8      	b.n	800ac76 <HAL_SPI_TransmitReceive_DMA+0x96>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ad04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3303      	adds	r3, #3
 800ad0c:	089b      	lsrs	r3, r3, #2
 800ad0e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800ad12:	e7b4      	b.n	800ac7e <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ad14:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ad18:	b292      	uxth	r2, r2
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	0852      	lsrs	r2, r2, #1
 800ad1e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ad22:	e7b1      	b.n	800ac88 <HAL_SPI_TransmitReceive_DMA+0xa8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ad24:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	3303      	adds	r3, #3
 800ad2c:	089b      	lsrs	r3, r3, #2
 800ad2e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ad32:	e7ad      	b.n	800ac90 <HAL_SPI_TransmitReceive_DMA+0xb0>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800ad34:	2b0f      	cmp	r3, #15
 800ad36:	d8ab      	bhi.n	800ac90 <HAL_SPI_TransmitReceive_DMA+0xb0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad38:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad3a:	699b      	ldr	r3, [r3, #24]
 800ad3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad40:	d00c      	beq.n	800ad5c <HAL_SPI_TransmitReceive_DMA+0x17c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ad42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad4a:	d1a1      	bne.n	800ac90 <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ad4c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3301      	adds	r3, #1
 800ad54:	085b      	lsrs	r3, r3, #1
 800ad56:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800ad5a:	e799      	b.n	800ac90 <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ad5c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3301      	adds	r3, #1
 800ad64:	085b      	lsrs	r3, r3, #1
 800ad66:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800ad6a:	e7ea      	b.n	800ad42 <HAL_SPI_TransmitReceive_DMA+0x162>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ad6c:	6822      	ldr	r2, [r4, #0]
 800ad6e:	6893      	ldr	r3, [r2, #8]
 800ad70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad74:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ad76:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800ad78:	2300      	movs	r3, #0
 800ad7a:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ad7c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800ad7e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ad80:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800ad82:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ad84:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ad86:	4a27      	ldr	r2, [pc, #156]	; (800ae24 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800ad88:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ad8a:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800ad8c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	3220      	adds	r2, #32
 800ad94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ad96:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ad98:	f7f9 fd54 	bl	8004844 <HAL_DMA_Start_IT>
 800ad9c:	4601      	mov	r1, r0
 800ad9e:	bb10      	cbnz	r0, 800ade6 <HAL_SPI_TransmitReceive_DMA+0x206>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ada0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada8:	d02a      	beq.n	800ae00 <HAL_SPI_TransmitReceive_DMA+0x220>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	6850      	ldr	r0, [r2, #4]
 800adae:	4b1e      	ldr	r3, [pc, #120]	; (800ae28 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800adb0:	4003      	ands	r3, r0
 800adb2:	4333      	orrs	r3, r6
 800adb4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	6893      	ldr	r3, [r2, #8]
 800adba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adbe:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800adc0:	6822      	ldr	r2, [r4, #0]
 800adc2:	6913      	ldr	r3, [r2, #16]
 800adc4:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800adc8:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800adca:	6822      	ldr	r2, [r4, #0]
 800adcc:	6813      	ldr	r3, [r2, #0]
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adda:	d017      	beq.n	800ae0c <HAL_SPI_TransmitReceive_DMA+0x22c>
  __HAL_UNLOCK(hspi);
 800addc:	2300      	movs	r3, #0
 800adde:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ade2:	460d      	mov	r5, r1
 800ade4:	e780      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ade6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800adea:	f043 0310 	orr.w	r3, r3, #16
 800adee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800adf2:	2300      	movs	r3, #0
 800adf4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800adf8:	2301      	movs	r3, #1
 800adfa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800adfe:	e773      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ae00:	6822      	ldr	r2, [r4, #0]
 800ae02:	6850      	ldr	r0, [r2, #4]
 800ae04:	4b08      	ldr	r3, [pc, #32]	; (800ae28 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800ae06:	4003      	ands	r3, r0
 800ae08:	6053      	str	r3, [r2, #4]
 800ae0a:	e7d4      	b.n	800adb6 <HAL_SPI_TransmitReceive_DMA+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ae0c:	6822      	ldr	r2, [r4, #0]
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	e7e1      	b.n	800addc <HAL_SPI_TransmitReceive_DMA+0x1fc>
  __HAL_LOCK(hspi);
 800ae18:	2502      	movs	r5, #2
 800ae1a:	e765      	b.n	800ace8 <HAL_SPI_TransmitReceive_DMA+0x108>
 800ae1c:	0800afd9 	.word	0x0800afd9
 800ae20:	0800afa5 	.word	0x0800afa5
 800ae24:	0800afe5 	.word	0x0800afe5
 800ae28:	ffff0000 	.word	0xffff0000

0800ae2c <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800ae2c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	f000 809a 	beq.w	800af6a <HAL_SPI_Abort+0x13e>
{
 800ae36:	b510      	push	{r4, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800ae42:	2307      	movs	r3, #7
 800ae44:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ae48:	4b49      	ldr	r3, [pc, #292]	; (800af70 <HAL_SPI_Abort+0x144>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a49      	ldr	r2, [pc, #292]	; (800af74 <HAL_SPI_Abort+0x148>)
 800ae4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae52:	0a5b      	lsrs	r3, r3, #9
 800ae54:	2264      	movs	r2, #100	; 0x64
 800ae56:	fb02 f303 	mul.w	r3, r2, r3
 800ae5a:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800ae5c:	6803      	ldr	r3, [r0, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ae64:	d040      	beq.n	800aee8 <HAL_SPI_Abort+0xbc>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ae66:	691a      	ldr	r2, [r3, #16]
 800ae68:	f022 0208 	bic.w	r2, r2, #8
 800ae6c:	611a      	str	r2, [r3, #16]
      count--;
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	b12b      	cbz	r3, 800ae84 <HAL_SPI_Abort+0x58>
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	f013 0f08 	tst.w	r3, #8
 800ae80:	d1f5      	bne.n	800ae6e <HAL_SPI_Abort+0x42>
 800ae82:	e005      	b.n	800ae90 <HAL_SPI_Abort+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae84:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	6813      	ldr	r3, [r2, #0]
 800ae94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae98:	6013      	str	r3, [r2, #0]
      count--;
 800ae9a:	9b01      	ldr	r3, [sp, #4]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	b12b      	cbz	r3, 800aeb0 <HAL_SPI_Abort+0x84>
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aeac:	d1f5      	bne.n	800ae9a <HAL_SPI_Abort+0x6e>
 800aeae:	e005      	b.n	800aebc <HAL_SPI_Abort+0x90>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aeb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aeb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aebc:	6822      	ldr	r2, [r4, #0]
 800aebe:	6993      	ldr	r3, [r2, #24]
 800aec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aec4:	6193      	str	r3, [r2, #24]
      count--;
 800aec6:	9b01      	ldr	r3, [sp, #4]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	b12b      	cbz	r3, 800aedc <HAL_SPI_Abort+0xb0>
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800aed8:	d1f5      	bne.n	800aec6 <HAL_SPI_Abort+0x9a>
 800aeda:	e005      	b.n	800aee8 <HAL_SPI_Abort+0xbc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aedc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800aef0:	d007      	beq.n	800af02 <HAL_SPI_Abort+0xd6>
    if (hspi->hdmatx != NULL)
 800aef2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aef4:	b12b      	cbz	r3, 800af02 <HAL_SPI_Abort+0xd6>
      hspi->hdmatx->XferAbortCallback = NULL;
 800aef6:	2200      	movs	r2, #0
 800aef8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800aefa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800aefc:	f7f9 fdee 	bl	8004adc <HAL_DMA_Abort>
 800af00:	b9f8      	cbnz	r0, 800af42 <HAL_SPI_Abort+0x116>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800af0a:	d007      	beq.n	800af1c <HAL_SPI_Abort+0xf0>
    if (hspi->hdmarx != NULL)
 800af0c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af0e:	b12b      	cbz	r3, 800af1c <HAL_SPI_Abort+0xf0>
      hspi->hdmarx->XferAbortCallback = NULL;
 800af10:	2200      	movs	r2, #0
 800af12:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800af14:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800af16:	f7f9 fde1 	bl	8004adc <HAL_DMA_Abort>
 800af1a:	b9d8      	cbnz	r0, 800af54 <HAL_SPI_Abort+0x128>
  SPI_AbortTransfer(hspi);
 800af1c:	4620      	mov	r0, r4
 800af1e:	f7ff fc09 	bl	800a734 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800af22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800af26:	f013 0f40 	tst.w	r3, #64	; 0x40
 800af2a:	d11c      	bne.n	800af66 <HAL_SPI_Abort+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af2c:	2000      	movs	r0, #0
 800af2e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800af32:	2300      	movs	r3, #0
 800af34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800af38:	2301      	movs	r3, #1
 800af3a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800af3e:	b002      	add	sp, #8
 800af40:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800af42:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800af44:	f7fa fc41 	bl	80057ca <HAL_DMA_GetError>
 800af48:	2820      	cmp	r0, #32
 800af4a:	d1da      	bne.n	800af02 <HAL_SPI_Abort+0xd6>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800af4c:	2340      	movs	r3, #64	; 0x40
 800af4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800af52:	e7d6      	b.n	800af02 <HAL_SPI_Abort+0xd6>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800af54:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800af56:	f7fa fc38 	bl	80057ca <HAL_DMA_GetError>
 800af5a:	2820      	cmp	r0, #32
 800af5c:	d1de      	bne.n	800af1c <HAL_SPI_Abort+0xf0>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800af5e:	2340      	movs	r3, #64	; 0x40
 800af60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800af64:	e7da      	b.n	800af1c <HAL_SPI_Abort+0xf0>
    errorcode = HAL_ERROR;
 800af66:	2001      	movs	r0, #1
 800af68:	e7e3      	b.n	800af32 <HAL_SPI_Abort+0x106>
  __HAL_LOCK(hspi);
 800af6a:	2002      	movs	r0, #2
}
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	200008f4 	.word	0x200008f4
 800af74:	057619f1 	.word	0x057619f1

0800af78 <HAL_SPI_TxCpltCallback>:
}
 800af78:	4770      	bx	lr

0800af7a <SPI_DMAReceiveCplt>:
{
 800af7a:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800af7e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b07      	cmp	r3, #7
 800af86:	d009      	beq.n	800af9c <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800af88:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af90:	d005      	beq.n	800af9e <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800af92:	6802      	ldr	r2, [r0, #0]
 800af94:	6913      	ldr	r3, [r2, #16]
 800af96:	f043 0308 	orr.w	r3, r3, #8
 800af9a:	6113      	str	r3, [r2, #16]
}
 800af9c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800af9e:	f00f f8df 	bl	801a160 <__HAL_SPI_RxCpltCallback_veneer>
 800afa2:	e7fb      	b.n	800af9c <SPI_DMAReceiveCplt+0x22>

0800afa4 <SPI_DMATransmitReceiveCplt>:
{
 800afa4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afa6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800afa8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b07      	cmp	r3, #7
 800afb0:	d009      	beq.n	800afc6 <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800afb2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afba:	d005      	beq.n	800afc8 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800afbc:	6802      	ldr	r2, [r0, #0]
 800afbe:	6913      	ldr	r3, [r2, #16]
 800afc0:	f043 0308 	orr.w	r3, r3, #8
 800afc4:	6113      	str	r3, [r2, #16]
}
 800afc6:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800afc8:	f00f f8f2 	bl	801a1b0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800afcc:	e7fb      	b.n	800afc6 <SPI_DMATransmitReceiveCplt+0x22>

0800afce <SPI_DMAHalfReceiveCplt>:
{
 800afce:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800afd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800afd2:	f00f f909 	bl	801a1e8 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800afd6:	bd08      	pop	{r3, pc}

0800afd8 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800afd8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800afda:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800afdc:	f00f f8cc 	bl	801a178 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800afe0:	bd08      	pop	{r3, pc}

0800afe2 <HAL_SPI_ErrorCallback>:
}
 800afe2:	4770      	bx	lr

0800afe4 <SPI_DMAError>:
{
 800afe4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800afe8:	f7fa fbef 	bl	80057ca <HAL_DMA_GetError>
 800afec:	2802      	cmp	r0, #2
 800afee:	d100      	bne.n	800aff2 <SPI_DMAError+0xe>
}
 800aff0:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fbd8 	bl	800a7a8 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aff8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800affc:	f043 0310 	orr.w	r3, r3, #16
 800b000:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b004:	2301      	movs	r3, #1
 800b006:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7ff ffe9 	bl	800afe2 <HAL_SPI_ErrorCallback>
}
 800b010:	e7ee      	b.n	800aff0 <SPI_DMAError+0xc>

0800b012 <SPI_DMAAbortOnError>:
{
 800b012:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b014:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b016:	2300      	movs	r3, #0
 800b018:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b01c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b020:	2301      	movs	r3, #1
 800b022:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b026:	f7ff ffdc 	bl	800afe2 <HAL_SPI_ErrorCallback>
}
 800b02a:	bd08      	pop	{r3, pc}

0800b02c <HAL_SPI_SuspendCallback>:
}
 800b02c:	4770      	bx	lr
	...

0800b030 <HAL_SPI_IRQHandler>:
{
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b036:	6806      	ldr	r6, [r0, #0]
 800b038:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b03a:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800b03c:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b040:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800b044:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800b048:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b04a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b04e:	d002      	beq.n	800b056 <HAL_SPI_IRQHandler+0x26>
 800b050:	f012 0f08 	tst.w	r2, #8
 800b054:	d13f      	bne.n	800b0d6 <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b056:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b05a:	2b04      	cmp	r3, #4
 800b05c:	d042      	beq.n	800b0e4 <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 800b05e:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b060:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800b064:	f1b8 0f01 	cmp.w	r8, #1
 800b068:	d044      	beq.n	800b0f4 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b06a:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800b06e:	2a02      	cmp	r2, #2
 800b070:	d045      	beq.n	800b0fe <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 800b072:	2b00      	cmp	r3, #0
 800b074:	d146      	bne.n	800b104 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b076:	f015 0f08 	tst.w	r5, #8
 800b07a:	d079      	beq.n	800b170 <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b07c:	6822      	ldr	r2, [r4, #0]
 800b07e:	6993      	ldr	r3, [r2, #24]
 800b080:	f043 0308 	orr.w	r3, r3, #8
 800b084:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b086:	6822      	ldr	r2, [r4, #0]
 800b088:	6993      	ldr	r3, [r2, #24]
 800b08a:	f043 0310 	orr.w	r3, r3, #16
 800b08e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b090:	6822      	ldr	r2, [r4, #0]
 800b092:	6993      	ldr	r3, [r2, #24]
 800b094:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b098:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	6913      	ldr	r3, [r2, #16]
 800b09e:	f023 0308 	bic.w	r3, r3, #8
 800b0a2:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b0ac:	d03b      	beq.n	800b126 <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7ff fb7a 	bl	800a7a8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d14a      	bne.n	800b158 <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b0c2:	2f05      	cmp	r7, #5
 800b0c4:	d04c      	beq.n	800b160 <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b0c6:	2f04      	cmp	r7, #4
 800b0c8:	d04e      	beq.n	800b168 <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b0ca:	2f03      	cmp	r7, #3
 800b0cc:	d11a      	bne.n	800b104 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f7ff ff52 	bl	800af78 <HAL_SPI_TxCpltCallback>
    return;
 800b0d4:	e016      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b0d6:	69b3      	ldr	r3, [r6, #24]
 800b0d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b0dc:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b0de:	f7ff ffa5 	bl	800b02c <HAL_SPI_SuspendCallback>
    return;
 800b0e2:	e00f      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 800b0e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b0ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4798      	blx	r3
    handled = 1UL;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7b5      	b.n	800b060 <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 800b0f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	4798      	blx	r3
    handled = 1UL;
 800b0fa:	4643      	mov	r3, r8
 800b0fc:	e7b5      	b.n	800b06a <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800b0fe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b100:	4620      	mov	r0, r4
 800b102:	4798      	blx	r3
}
 800b104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b108:	2b07      	cmp	r3, #7
 800b10a:	d91c      	bls.n	800b146 <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b10c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b10e:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800b110:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b114:	3302      	adds	r3, #2
 800b116:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b118:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	3b01      	subs	r3, #1
 800b120:	b29b      	uxth	r3, r3
 800b122:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b126:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d0be      	beq.n	800b0ae <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b130:	68e3      	ldr	r3, [r4, #12]
 800b132:	2b0f      	cmp	r3, #15
 800b134:	d9e8      	bls.n	800b108 <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b136:	6822      	ldr	r2, [r4, #0]
 800b138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b13a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b13c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b13e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b140:	3304      	adds	r3, #4
 800b142:	6663      	str	r3, [r4, #100]	; 0x64
 800b144:	e7e8      	b.n	800b118 <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800b14e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b152:	3301      	adds	r3, #1
 800b154:	6663      	str	r3, [r4, #100]	; 0x64
 800b156:	e7df      	b.n	800b118 <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 800b158:	4620      	mov	r0, r4
 800b15a:	f7ff ff42 	bl	800afe2 <HAL_SPI_ErrorCallback>
      return;
 800b15e:	e7d1      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 800b160:	4620      	mov	r0, r4
 800b162:	f00f f825 	bl	801a1b0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800b166:	e7cd      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 800b168:	4620      	mov	r0, r4
 800b16a:	f00e fff9 	bl	801a160 <__HAL_SPI_RxCpltCallback_veneer>
 800b16e:	e7c9      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b170:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b174:	d0c6      	beq.n	800b104 <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b176:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b17a:	d00a      	beq.n	800b192 <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b17c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b180:	f043 0304 	orr.w	r3, r3, #4
 800b184:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b188:	6822      	ldr	r2, [r4, #0]
 800b18a:	6993      	ldr	r3, [r2, #24]
 800b18c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b190:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b192:	f415 7f00 	tst.w	r5, #512	; 0x200
 800b196:	d00a      	beq.n	800b1ae <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b198:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b19c:	f043 0301 	orr.w	r3, r3, #1
 800b1a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	6993      	ldr	r3, [r2, #24]
 800b1a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1ac:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b1ae:	f415 7f80 	tst.w	r5, #256	; 0x100
 800b1b2:	d00a      	beq.n	800b1ca <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b1b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1b8:	f043 0308 	orr.w	r3, r3, #8
 800b1bc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	6993      	ldr	r3, [r2, #24]
 800b1c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b1ca:	f015 0f20 	tst.w	r5, #32
 800b1ce:	d00a      	beq.n	800b1e6 <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b1d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b1dc:	6822      	ldr	r2, [r4, #0]
 800b1de:	6993      	ldr	r3, [r2, #24]
 800b1e0:	f043 0320 	orr.w	r3, r3, #32
 800b1e4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d08a      	beq.n	800b104 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	6813      	ldr	r3, [r2, #0]
 800b1f2:	f023 0301 	bic.w	r3, r3, #1
 800b1f6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	6911      	ldr	r1, [r2, #16]
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <HAL_SPI_IRQHandler+0x238>)
 800b1fe:	400b      	ands	r3, r1
 800b200:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b202:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
 800b206:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
 800b20a:	d125      	bne.n	800b258 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b20c:	6822      	ldr	r2, [r4, #0]
 800b20e:	6893      	ldr	r3, [r2, #8]
 800b210:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b214:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b216:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b218:	b15b      	cbz	r3, 800b232 <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b21a:	4a14      	ldr	r2, [pc, #80]	; (800b26c <HAL_SPI_IRQHandler+0x23c>)
 800b21c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b21e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b220:	f7f9 fdfc 	bl	8004e1c <HAL_DMA_Abort_IT>
 800b224:	b128      	cbz	r0, 800b232 <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b226:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b22e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b232:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b234:	2b00      	cmp	r3, #0
 800b236:	f43f af65 	beq.w	800b104 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b23a:	4a0c      	ldr	r2, [pc, #48]	; (800b26c <HAL_SPI_IRQHandler+0x23c>)
 800b23c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b23e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b240:	f7f9 fdec 	bl	8004e1c <HAL_DMA_Abort_IT>
 800b244:	2800      	cmp	r0, #0
 800b246:	f43f af5d 	beq.w	800b104 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b24a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b252:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b256:	e755      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 800b258:	2301      	movs	r3, #1
 800b25a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff febf 	bl	800afe2 <HAL_SPI_ErrorCallback>
    return;
 800b264:	e74e      	b.n	800b104 <HAL_SPI_IRQHandler+0xd4>
 800b266:	bf00      	nop
 800b268:	fffffc94 	.word	0xfffffc94
 800b26c:	0800b013 	.word	0x0800b013

0800b270 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b270:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b272:	680b      	ldr	r3, [r1, #0]
 800b274:	b9cb      	cbnz	r3, 800b2aa <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b276:	6803      	ldr	r3, [r0, #0]
 800b278:	4a19      	ldr	r2, [pc, #100]	; (800b2e0 <FMC_SDRAM_Init+0x70>)
 800b27a:	401a      	ands	r2, r3
 800b27c:	684b      	ldr	r3, [r1, #4]
 800b27e:	688c      	ldr	r4, [r1, #8]
 800b280:	4323      	orrs	r3, r4
 800b282:	68cc      	ldr	r4, [r1, #12]
 800b284:	4323      	orrs	r3, r4
 800b286:	690c      	ldr	r4, [r1, #16]
 800b288:	4323      	orrs	r3, r4
 800b28a:	694c      	ldr	r4, [r1, #20]
 800b28c:	4323      	orrs	r3, r4
 800b28e:	698c      	ldr	r4, [r1, #24]
 800b290:	4323      	orrs	r3, r4
 800b292:	69cc      	ldr	r4, [r1, #28]
 800b294:	4323      	orrs	r3, r4
 800b296:	6a0c      	ldr	r4, [r1, #32]
 800b298:	4323      	orrs	r3, r4
 800b29a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b29c:	430b      	orrs	r3, r1
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2a8:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2aa:	6803      	ldr	r3, [r0, #0]
 800b2ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2b0:	69ca      	ldr	r2, [r1, #28]
 800b2b2:	6a0c      	ldr	r4, [r1, #32]
 800b2b4:	4322      	orrs	r2, r4
 800b2b6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b2b8:	4322      	orrs	r2, r4
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b2be:	6843      	ldr	r3, [r0, #4]
 800b2c0:	4a07      	ldr	r2, [pc, #28]	; (800b2e0 <FMC_SDRAM_Init+0x70>)
 800b2c2:	401a      	ands	r2, r3
 800b2c4:	684b      	ldr	r3, [r1, #4]
 800b2c6:	688c      	ldr	r4, [r1, #8]
 800b2c8:	4323      	orrs	r3, r4
 800b2ca:	68cc      	ldr	r4, [r1, #12]
 800b2cc:	4323      	orrs	r3, r4
 800b2ce:	690c      	ldr	r4, [r1, #16]
 800b2d0:	4323      	orrs	r3, r4
 800b2d2:	694c      	ldr	r4, [r1, #20]
 800b2d4:	4323      	orrs	r3, r4
 800b2d6:	6989      	ldr	r1, [r1, #24]
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	6042      	str	r2, [r0, #4]
 800b2de:	e7e0      	b.n	800b2a2 <FMC_SDRAM_Init+0x32>
 800b2e0:	ffff8000 	.word	0xffff8000

0800b2e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b2e4:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b2e6:	bb3a      	cbnz	r2, 800b338 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b2e8:	6882      	ldr	r2, [r0, #8]
 800b2ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b2ee:	680b      	ldr	r3, [r1, #0]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	684c      	ldr	r4, [r1, #4]
 800b2f4:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b2f8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800b2fc:	688c      	ldr	r4, [r1, #8]
 800b2fe:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b302:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b306:	68cc      	ldr	r4, [r1, #12]
 800b308:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b30c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800b310:	690c      	ldr	r4, [r1, #16]
 800b312:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b316:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800b31a:	694c      	ldr	r4, [r1, #20]
 800b31c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b320:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800b324:	6989      	ldr	r1, [r1, #24]
 800b326:	3901      	subs	r1, #1
 800b328:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b32c:	4313      	orrs	r3, r2
 800b32e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b330:	2000      	movs	r0, #0
 800b332:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b336:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b338:	6883      	ldr	r3, [r0, #8]
 800b33a:	4a13      	ldr	r2, [pc, #76]	; (800b388 <FMC_SDRAM_Timing_Init+0xa4>)
 800b33c:	401a      	ands	r2, r3
 800b33e:	68cb      	ldr	r3, [r1, #12]
 800b340:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800b344:	694b      	ldr	r3, [r1, #20]
 800b346:	3b01      	subs	r3, #1
 800b348:	051b      	lsls	r3, r3, #20
 800b34a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800b34e:	431a      	orrs	r2, r3
 800b350:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b352:	68c2      	ldr	r2, [r0, #12]
 800b354:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800b358:	680b      	ldr	r3, [r1, #0]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	684c      	ldr	r4, [r1, #4]
 800b35e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b362:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800b366:	688c      	ldr	r4, [r1, #8]
 800b368:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b36c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b370:	690c      	ldr	r4, [r1, #16]
 800b372:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b376:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800b37a:	6989      	ldr	r1, [r1, #24]
 800b37c:	3901      	subs	r1, #1
 800b37e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b382:	4313      	orrs	r3, r2
 800b384:	60c3      	str	r3, [r0, #12]
 800b386:	e7d3      	b.n	800b330 <FMC_SDRAM_Timing_Init+0x4c>
 800b388:	ff0f0fff 	.word	0xff0f0fff

0800b38c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b38c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b38e:	6903      	ldr	r3, [r0, #16]
 800b390:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <FMC_SDRAM_SendCommand+0x2c>)
 800b392:	401a      	ands	r2, r3
 800b394:	680b      	ldr	r3, [r1, #0]
 800b396:	684c      	ldr	r4, [r1, #4]
 800b398:	4323      	orrs	r3, r4
 800b39a:	688c      	ldr	r4, [r1, #8]
 800b39c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800b3a0:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 800b3a4:	68c9      	ldr	r1, [r1, #12]
 800b3a6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800b3aa:	431a      	orrs	r2, r3
 800b3ac:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	ffc00000 	.word	0xffc00000

0800b3bc <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b3bc:	6942      	ldr	r2, [r0, #20]
 800b3be:	4b03      	ldr	r3, [pc, #12]	; (800b3cc <FMC_SDRAM_ProgramRefreshRate+0x10>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b3c6:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	4770      	bx	lr
 800b3cc:	ffffc001 	.word	0xffffc001

0800b3d0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3d0:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <SDMMC_GetCmdError+0x30>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a0b      	ldr	r2, [pc, #44]	; (800b404 <SDMMC_GetCmdError+0x34>)
 800b3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3da:	0a5b      	lsrs	r3, r3, #9
 800b3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e0:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	b13a      	cbz	r2, 800b3fa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b3ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800b3ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b3f0:	d0f8      	beq.n	800b3e4 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3f2:	4b05      	ldr	r3, [pc, #20]	; (800b408 <SDMMC_GetCmdError+0x38>)
 800b3f4:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b3fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b3fe:	4770      	bx	lr
 800b400:	200008f4 	.word	0x200008f4
 800b404:	10624dd3 	.word	0x10624dd3
 800b408:	002000c5 	.word	0x002000c5

0800b40c <SDMMC_Init>:
{
 800b40c:	b084      	sub	sp, #16
 800b40e:	f10d 0c04 	add.w	ip, sp, #4
 800b412:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b416:	460b      	mov	r3, r1
 800b418:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800b41a:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800b41c:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800b41e:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800b420:	4313      	orrs	r3, r2
             Init.ClockDiv
 800b422:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800b424:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b426:	6841      	ldr	r1, [r0, #4]
 800b428:	4a03      	ldr	r2, [pc, #12]	; (800b438 <SDMMC_Init+0x2c>)
 800b42a:	400a      	ands	r2, r1
 800b42c:	4313      	orrs	r3, r2
 800b42e:	6043      	str	r3, [r0, #4]
}
 800b430:	2000      	movs	r0, #0
 800b432:	b004      	add	sp, #16
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	ffc02c00 	.word	0xffc02c00

0800b43c <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800b43c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b440:	4770      	bx	lr

0800b442 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800b442:	680b      	ldr	r3, [r1, #0]
 800b444:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800b448:	2000      	movs	r0, #0
 800b44a:	4770      	bx	lr

0800b44c <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b44c:	6803      	ldr	r3, [r0, #0]
 800b44e:	f043 0303 	orr.w	r3, r3, #3
 800b452:	6003      	str	r3, [r0, #0]
}
 800b454:	2000      	movs	r0, #0
 800b456:	4770      	bx	lr

0800b458 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b458:	6800      	ldr	r0, [r0, #0]
}
 800b45a:	f000 0003 	and.w	r0, r0, #3
 800b45e:	4770      	bx	lr

0800b460 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800b460:	680b      	ldr	r3, [r1, #0]
 800b462:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b464:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800b466:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b468:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800b46a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800b46c:	4313      	orrs	r3, r2
                       Command->CPSM);
 800b46e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800b470:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b472:	68c1      	ldr	r1, [r0, #12]
 800b474:	4a02      	ldr	r2, [pc, #8]	; (800b480 <SDMMC_SendCommand+0x20>)
 800b476:	400a      	ands	r2, r1
 800b478:	4313      	orrs	r3, r2
 800b47a:	60c3      	str	r3, [r0, #12]
}
 800b47c:	2000      	movs	r0, #0
 800b47e:	4770      	bx	lr
 800b480:	fffee0c0 	.word	0xfffee0c0

0800b484 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800b484:	6900      	ldr	r0, [r0, #16]
}
 800b486:	b2c0      	uxtb	r0, r0
 800b488:	4770      	bx	lr

0800b48a <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b48a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800b48c:	5840      	ldr	r0, [r0, r1]
}
 800b48e:	4770      	bx	lr

0800b490 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b490:	680b      	ldr	r3, [r1, #0]
 800b492:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800b494:	684b      	ldr	r3, [r1, #4]
 800b496:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b498:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800b49a:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b49c:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800b49e:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800b4a0:	4313      	orrs	r3, r2
                       Data->DPSM);
 800b4a2:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800b4a4:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b4a8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	4770      	bx	lr

0800b4b4 <SDMMC_CmdGoIdleState>:
{
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4be:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b4c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4c8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4ca:	a901      	add	r1, sp, #4
 800b4cc:	f7ff ffc8 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7ff ff7d 	bl	800b3d0 <SDMMC_GetCmdError>
}
 800b4d6:	b006      	add	sp, #24
 800b4d8:	bd10      	pop	{r4, pc}
	...

0800b4dc <SDMMC_GetCmdResp1>:
{
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	4605      	mov	r5, r0
 800b4e0:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b4e2:	4b51      	ldr	r3, [pc, #324]	; (800b628 <SDMMC_GetCmdResp1+0x14c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4951      	ldr	r1, [pc, #324]	; (800b62c <SDMMC_GetCmdResp1+0x150>)
 800b4e8:	fba1 1303 	umull	r1, r3, r1, r3
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	3a01      	subs	r2, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d05e      	beq.n	800b5b8 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800b4fa:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b4fc:	4b4c      	ldr	r3, [pc, #304]	; (800b630 <SDMMC_GetCmdResp1+0x154>)
 800b4fe:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b500:	2b00      	cmp	r3, #0
 800b502:	d0f6      	beq.n	800b4f2 <SDMMC_GetCmdResp1+0x16>
 800b504:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800b508:	d1f3      	bne.n	800b4f2 <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b50a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b50c:	f013 0f04 	tst.w	r3, #4
 800b510:	d106      	bne.n	800b520 <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b512:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b514:	f013 0f01 	tst.w	r3, #1
 800b518:	d005      	beq.n	800b526 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b51a:	2001      	movs	r0, #1
 800b51c:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b51e:	e04d      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b520:	2004      	movs	r0, #4
 800b522:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b524:	e04a      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b526:	4b43      	ldr	r3, [pc, #268]	; (800b634 <SDMMC_GetCmdResp1+0x158>)
 800b528:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b52a:	4628      	mov	r0, r5
 800b52c:	f7ff ffaa 	bl	800b484 <SDMMC_GetCommandResponse>
 800b530:	42b0      	cmp	r0, r6
 800b532:	d001      	beq.n	800b538 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b534:	2001      	movs	r0, #1
 800b536:	e041      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b538:	2100      	movs	r1, #0
 800b53a:	4628      	mov	r0, r5
 800b53c:	f7ff ffa5 	bl	800b48a <SDMMC_GetResponse>
 800b540:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b542:	483d      	ldr	r0, [pc, #244]	; (800b638 <SDMMC_GetCmdResp1+0x15c>)
 800b544:	4018      	ands	r0, r3
 800b546:	b3c8      	cbz	r0, 800b5bc <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b548:	2b00      	cmp	r3, #0
 800b54a:	db38      	blt.n	800b5be <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b54c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b550:	d138      	bne.n	800b5c4 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b552:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800b556:	d137      	bne.n	800b5c8 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b558:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b55c:	d136      	bne.n	800b5cc <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b55e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b562:	d136      	bne.n	800b5d2 <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b564:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800b568:	d136      	bne.n	800b5d8 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b56a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b56e:	d136      	bne.n	800b5de <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b570:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800b574:	d136      	bne.n	800b5e4 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b576:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b57a:	d136      	bne.n	800b5ea <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b57c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800b580:	d136      	bne.n	800b5f0 <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b582:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b586:	d136      	bne.n	800b5f6 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b588:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b58c:	d136      	bne.n	800b5fc <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b58e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b592:	d136      	bne.n	800b602 <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b594:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b598:	d136      	bne.n	800b608 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b59a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b59e:	d136      	bne.n	800b60e <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b5a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b5a4:	d136      	bne.n	800b614 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b5a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b5aa:	d136      	bne.n	800b61a <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b5ac:	f013 0f08 	tst.w	r3, #8
 800b5b0:	d036      	beq.n	800b620 <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b5b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800b5b6:	e001      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800b5b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5be:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b5c2:	e7fb      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5c4:	2040      	movs	r0, #64	; 0x40
 800b5c6:	e7f9      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5c8:	2080      	movs	r0, #128	; 0x80
 800b5ca:	e7f7      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b5d0:	e7f4      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b5d6:	e7f1      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b5dc:	e7ee      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b5de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b5e2:	e7eb      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b5e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b5e8:	e7e8      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b5ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b5ee:	e7e5      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b5f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b5f4:	e7e2      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800b5f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b5fa:	e7df      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b5fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b600:	e7dc      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b602:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b606:	e7d9      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b608:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b60c:	e7d6      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b60e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b612:	e7d3      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b614:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b618:	e7d0      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800b61a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b61e:	e7cd      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b620:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b624:	e7ca      	b.n	800b5bc <SDMMC_GetCmdResp1+0xe0>
 800b626:	bf00      	nop
 800b628:	200008f4 	.word	0x200008f4
 800b62c:	10624dd3 	.word	0x10624dd3
 800b630:	00200045 	.word	0x00200045
 800b634:	002000c5 	.word	0x002000c5
 800b638:	fdffe008 	.word	0xfdffe008

0800b63c <SDMMC_CmdBlockLength>:
{
 800b63c:	b530      	push	{r4, r5, lr}
 800b63e:	b087      	sub	sp, #28
 800b640:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b642:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b644:	2510      	movs	r5, #16
 800b646:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64e:	2300      	movs	r3, #0
 800b650:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b656:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b658:	a901      	add	r1, sp, #4
 800b65a:	f7ff ff01 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b65e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b662:	4629      	mov	r1, r5
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff ff39 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b66a:	b007      	add	sp, #28
 800b66c:	bd30      	pop	{r4, r5, pc}

0800b66e <SDMMC_CmdReadSingleBlock>:
{
 800b66e:	b530      	push	{r4, r5, lr}
 800b670:	b087      	sub	sp, #28
 800b672:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b674:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b676:	2511      	movs	r5, #17
 800b678:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b67a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b67e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b680:	2300      	movs	r3, #0
 800b682:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b688:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b68a:	a901      	add	r1, sp, #4
 800b68c:	f7ff fee8 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b690:	f241 3288 	movw	r2, #5000	; 0x1388
 800b694:	4629      	mov	r1, r5
 800b696:	4620      	mov	r0, r4
 800b698:	f7ff ff20 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b69c:	b007      	add	sp, #28
 800b69e:	bd30      	pop	{r4, r5, pc}

0800b6a0 <SDMMC_CmdReadMultiBlock>:
{
 800b6a0:	b530      	push	{r4, r5, lr}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b6a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b6a8:	2512      	movs	r5, #18
 800b6aa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6b0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ba:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6bc:	a901      	add	r1, sp, #4
 800b6be:	f7ff fecf 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b6c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff ff07 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b6ce:	b007      	add	sp, #28
 800b6d0:	bd30      	pop	{r4, r5, pc}

0800b6d2 <SDMMC_CmdWriteSingleBlock>:
{
 800b6d2:	b530      	push	{r4, r5, lr}
 800b6d4:	b087      	sub	sp, #28
 800b6d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b6d8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b6da:	2518      	movs	r5, #24
 800b6dc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6e2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ee:	a901      	add	r1, sp, #4
 800b6f0:	f7ff feb6 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b6f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f8:	4629      	mov	r1, r5
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff feee 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b700:	b007      	add	sp, #28
 800b702:	bd30      	pop	{r4, r5, pc}

0800b704 <SDMMC_CmdWriteMultiBlock>:
{
 800b704:	b530      	push	{r4, r5, lr}
 800b706:	b087      	sub	sp, #28
 800b708:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b70a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b70c:	2519      	movs	r5, #25
 800b70e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b710:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b714:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b716:	2300      	movs	r3, #0
 800b718:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b71a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b71e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b720:	a901      	add	r1, sp, #4
 800b722:	f7ff fe9d 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b726:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72a:	4629      	mov	r1, r5
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7ff fed5 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b732:	b007      	add	sp, #28
 800b734:	bd30      	pop	{r4, r5, pc}
	...

0800b738 <SDMMC_CmdStopTransfer>:
{
 800b738:	b530      	push	{r4, r5, lr}
 800b73a:	b087      	sub	sp, #28
 800b73c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b73e:	2300      	movs	r3, #0
 800b740:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b742:	250c      	movs	r5, #12
 800b744:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b74a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b752:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b754:	68c3      	ldr	r3, [r0, #12]
 800b756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b75a:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b75c:	68c3      	ldr	r3, [r0, #12]
 800b75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b762:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b764:	a901      	add	r1, sp, #4
 800b766:	f7ff fe7b 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b76a:	4a08      	ldr	r2, [pc, #32]	; (800b78c <SDMMC_CmdStopTransfer+0x54>)
 800b76c:	4629      	mov	r1, r5
 800b76e:	4620      	mov	r0, r4
 800b770:	f7ff feb4 	bl	800b4dc <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b774:	68e3      	ldr	r3, [r4, #12]
 800b776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b77a:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b77c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800b780:	d001      	beq.n	800b786 <SDMMC_CmdStopTransfer+0x4e>
}
 800b782:	b007      	add	sp, #28
 800b784:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800b786:	2000      	movs	r0, #0
  return errorstate;
 800b788:	e7fb      	b.n	800b782 <SDMMC_CmdStopTransfer+0x4a>
 800b78a:	bf00      	nop
 800b78c:	05f5e100 	.word	0x05f5e100

0800b790 <SDMMC_CmdSelDesel>:
{
 800b790:	b530      	push	{r4, r5, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b796:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b798:	2507      	movs	r5, #7
 800b79a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b79c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7aa:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ac:	a901      	add	r1, sp, #4
 800b7ae:	f7ff fe57 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f7ff fe8f 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b7be:	b007      	add	sp, #28
 800b7c0:	bd30      	pop	{r4, r5, pc}

0800b7c2 <SDMMC_CmdAppCommand>:
{
 800b7c2:	b530      	push	{r4, r5, lr}
 800b7c4:	b087      	sub	sp, #28
 800b7c6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7c8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7ca:	2537      	movs	r5, #55	; 0x37
 800b7cc:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7dc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7de:	a901      	add	r1, sp, #4
 800b7e0:	f7ff fe3e 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f7ff fe76 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b7f0:	b007      	add	sp, #28
 800b7f2:	bd30      	pop	{r4, r5, pc}

0800b7f4 <SDMMC_CmdBusWidth>:
{
 800b7f4:	b530      	push	{r4, r5, lr}
 800b7f6:	b087      	sub	sp, #28
 800b7f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7fc:	2506      	movs	r5, #6
 800b7fe:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b800:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b804:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b806:	2300      	movs	r3, #0
 800b808:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b80a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b80e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b810:	a901      	add	r1, sp, #4
 800b812:	f7ff fe25 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b816:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81a:	4629      	mov	r1, r5
 800b81c:	4620      	mov	r0, r4
 800b81e:	f7ff fe5d 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b822:	b007      	add	sp, #28
 800b824:	bd30      	pop	{r4, r5, pc}

0800b826 <SDMMC_CmdSendSCR>:
{
 800b826:	b530      	push	{r4, r5, lr}
 800b828:	b087      	sub	sp, #28
 800b82a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b830:	2533      	movs	r5, #51	; 0x33
 800b832:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b834:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b838:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b83a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b840:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b842:	a901      	add	r1, sp, #4
 800b844:	f7ff fe0c 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b848:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84c:	4629      	mov	r1, r5
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff fe44 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b854:	b007      	add	sp, #28
 800b856:	bd30      	pop	{r4, r5, pc}

0800b858 <SDMMC_CmdSendStatus>:
{
 800b858:	b530      	push	{r4, r5, lr}
 800b85a:	b087      	sub	sp, #28
 800b85c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b85e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b860:	250d      	movs	r5, #13
 800b862:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b864:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b868:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86a:	2300      	movs	r3, #0
 800b86c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b86e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b872:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b874:	a901      	add	r1, sp, #4
 800b876:	f7ff fdf3 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b87a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b87e:	4629      	mov	r1, r5
 800b880:	4620      	mov	r0, r4
 800b882:	f7ff fe2b 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b886:	b007      	add	sp, #28
 800b888:	bd30      	pop	{r4, r5, pc}

0800b88a <SDMMC_CmdStatusRegister>:
{
 800b88a:	b530      	push	{r4, r5, lr}
 800b88c:	b087      	sub	sp, #28
 800b88e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b894:	250d      	movs	r5, #13
 800b896:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b89c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b89e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a6:	a901      	add	r1, sp, #4
 800b8a8:	f7ff fdda 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b8ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7ff fe12 	bl	800b4dc <SDMMC_GetCmdResp1>
}
 800b8b8:	b007      	add	sp, #28
 800b8ba:	bd30      	pop	{r4, r5, pc}

0800b8bc <SDMMC_GetCmdResp2>:
{
 800b8bc:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8be:	4b14      	ldr	r3, [pc, #80]	; (800b910 <SDMMC_GetCmdResp2+0x54>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a14      	ldr	r2, [pc, #80]	; (800b914 <SDMMC_GetCmdResp2+0x58>)
 800b8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c8:	0a5b      	lsrs	r3, r3, #9
 800b8ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ce:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	b1ba      	cbz	r2, 800b908 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800b8d8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8da:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b8de:	d0f8      	beq.n	800b8d2 <SDMMC_GetCmdResp2+0x16>
 800b8e0:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b8e4:	d1f5      	bne.n	800b8d2 <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8e6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b8e8:	f013 0f04 	tst.w	r3, #4
 800b8ec:	d106      	bne.n	800b8fc <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ee:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b8f0:	f010 0001 	ands.w	r0, r0, #1
 800b8f4:	d105      	bne.n	800b902 <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8f6:	4b08      	ldr	r3, [pc, #32]	; (800b918 <SDMMC_GetCmdResp2+0x5c>)
 800b8f8:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b8fa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8fc:	2004      	movs	r0, #4
 800b8fe:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b900:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b902:	2001      	movs	r0, #1
 800b904:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b906:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b908:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	200008f4 	.word	0x200008f4
 800b914:	10624dd3 	.word	0x10624dd3
 800b918:	002000c5 	.word	0x002000c5

0800b91c <SDMMC_CmdSendCID>:
{
 800b91c:	b510      	push	{r4, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b922:	2300      	movs	r3, #0
 800b924:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b926:	2202      	movs	r2, #2
 800b928:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b92a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b92e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b930:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b936:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b938:	a901      	add	r1, sp, #4
 800b93a:	f7ff fd91 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b93e:	4620      	mov	r0, r4
 800b940:	f7ff ffbc 	bl	800b8bc <SDMMC_GetCmdResp2>
}
 800b944:	b006      	add	sp, #24
 800b946:	bd10      	pop	{r4, pc}

0800b948 <SDMMC_CmdSendCSD>:
{
 800b948:	b510      	push	{r4, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b94e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b950:	2309      	movs	r3, #9
 800b952:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b954:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b958:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95a:	2300      	movs	r3, #0
 800b95c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b962:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b964:	a901      	add	r1, sp, #4
 800b966:	f7ff fd7b 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff ffa6 	bl	800b8bc <SDMMC_GetCmdResp2>
}
 800b970:	b006      	add	sp, #24
 800b972:	bd10      	pop	{r4, pc}

0800b974 <SDMMC_GetCmdResp3>:
{
 800b974:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b976:	4b10      	ldr	r3, [pc, #64]	; (800b9b8 <SDMMC_GetCmdResp3+0x44>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a10      	ldr	r2, [pc, #64]	; (800b9bc <SDMMC_GetCmdResp3+0x48>)
 800b97c:	fba2 2303 	umull	r2, r3, r2, r3
 800b980:	0a5b      	lsrs	r3, r3, #9
 800b982:	f241 3288 	movw	r2, #5000	; 0x1388
 800b986:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b98a:	461a      	mov	r2, r3
 800b98c:	3b01      	subs	r3, #1
 800b98e:	b182      	cbz	r2, 800b9b2 <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800b990:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b992:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b996:	d0f8      	beq.n	800b98a <SDMMC_GetCmdResp3+0x16>
 800b998:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b99c:	d1f5      	bne.n	800b98a <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b99e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b9a0:	f010 0004 	ands.w	r0, r0, #4
 800b9a4:	d102      	bne.n	800b9ac <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9a6:	4b06      	ldr	r3, [pc, #24]	; (800b9c0 <SDMMC_GetCmdResp3+0x4c>)
 800b9a8:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b9aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9ac:	2004      	movs	r0, #4
 800b9ae:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9b0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b9b2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b9b6:	4770      	bx	lr
 800b9b8:	200008f4 	.word	0x200008f4
 800b9bc:	10624dd3 	.word	0x10624dd3
 800b9c0:	002000c5 	.word	0x002000c5

0800b9c4 <SDMMC_CmdAppOperCommand>:
{
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b9ca:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b9cc:	2329      	movs	r3, #41	; 0x29
 800b9ce:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9de:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9e0:	a901      	add	r1, sp, #4
 800b9e2:	f7ff fd3d 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f7ff ffc4 	bl	800b974 <SDMMC_GetCmdResp3>
}
 800b9ec:	b006      	add	sp, #24
 800b9ee:	bd10      	pop	{r4, pc}

0800b9f0 <SDMMC_GetCmdResp6>:
{
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	460e      	mov	r6, r1
 800b9f6:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b9f8:	4b23      	ldr	r3, [pc, #140]	; (800ba88 <SDMMC_GetCmdResp6+0x98>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <SDMMC_GetCmdResp6+0x9c>)
 800b9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ba02:	0a5b      	lsrs	r3, r3, #9
 800ba04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba08:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	3b01      	subs	r3, #1
 800ba10:	b38a      	cbz	r2, 800ba76 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800ba12:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba14:	f014 0f45 	tst.w	r4, #69	; 0x45
 800ba18:	d0f8      	beq.n	800ba0c <SDMMC_GetCmdResp6+0x1c>
 800ba1a:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800ba1e:	d1f5      	bne.n	800ba0c <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ba22:	f013 0f04 	tst.w	r3, #4
 800ba26:	d106      	bne.n	800ba36 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ba2a:	f013 0f01 	tst.w	r3, #1
 800ba2e:	d005      	beq.n	800ba3c <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba30:	2001      	movs	r0, #1
 800ba32:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba34:	e021      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba36:	2004      	movs	r0, #4
 800ba38:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba3a:	e01e      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	f7ff fd21 	bl	800b484 <SDMMC_GetCommandResponse>
 800ba42:	42b0      	cmp	r0, r6
 800ba44:	d001      	beq.n	800ba4a <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba46:	2001      	movs	r0, #1
 800ba48:	e017      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4a:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <SDMMC_GetCmdResp6+0xa0>)
 800ba4c:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba4e:	2100      	movs	r1, #0
 800ba50:	4628      	mov	r0, r5
 800ba52:	f7ff fd1a 	bl	800b48a <SDMMC_GetResponse>
 800ba56:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ba58:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800ba5c:	d008      	beq.n	800ba70 <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ba62:	d10b      	bne.n	800ba7c <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba64:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800ba68:	d00b      	beq.n	800ba82 <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba6e:	e004      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ba70:	0c1b      	lsrs	r3, r3, #16
 800ba72:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800ba74:	e001      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800ba76:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ba7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ba80:	e7fb      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba82:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ba86:	e7f8      	b.n	800ba7a <SDMMC_GetCmdResp6+0x8a>
 800ba88:	200008f4 	.word	0x200008f4
 800ba8c:	10624dd3 	.word	0x10624dd3
 800ba90:	002000c5 	.word	0x002000c5

0800ba94 <SDMMC_CmdSetRelAdd>:
{
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	4604      	mov	r4, r0
 800ba9a:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800baa0:	2603      	movs	r6, #3
 800baa2:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800baa8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baaa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bab0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bab2:	a901      	add	r1, sp, #4
 800bab4:	f7ff fcd4 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bab8:	462a      	mov	r2, r5
 800baba:	4631      	mov	r1, r6
 800babc:	4620      	mov	r0, r4
 800babe:	f7ff ff97 	bl	800b9f0 <SDMMC_GetCmdResp6>
}
 800bac2:	b006      	add	sp, #24
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bac8 <SDMMC_GetCmdResp7>:
{
 800bac8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800baca:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <SDMMC_GetCmdResp7+0x5c>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a16      	ldr	r2, [pc, #88]	; (800bb28 <SDMMC_GetCmdResp7+0x60>)
 800bad0:	fba2 2303 	umull	r2, r3, r2, r3
 800bad4:	0a5b      	lsrs	r3, r3, #9
 800bad6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bada:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800bade:	461a      	mov	r2, r3
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b1e2      	cbz	r2, 800bb1e <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800bae4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bae6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800baea:	d0f8      	beq.n	800bade <SDMMC_GetCmdResp7+0x16>
 800baec:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800baf0:	d1f5      	bne.n	800bade <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800baf2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800baf4:	f013 0f04 	tst.w	r3, #4
 800baf8:	d10b      	bne.n	800bb12 <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bafa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bafc:	f013 0301 	ands.w	r3, r3, #1
 800bb00:	d10a      	bne.n	800bb18 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bb02:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bb04:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800bb08:	d00b      	beq.n	800bb22 <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bb0a:	2240      	movs	r2, #64	; 0x40
 800bb0c:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800bb0e:	4618      	mov	r0, r3
 800bb10:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb12:	2004      	movs	r0, #4
 800bb14:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb16:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb18:	2001      	movs	r0, #1
 800bb1a:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb1c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800bb1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bb22:	4770      	bx	lr
 800bb24:	200008f4 	.word	0x200008f4
 800bb28:	10624dd3 	.word	0x10624dd3

0800bb2c <SDMMC_CmdOperCond>:
{
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bb32:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bb36:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bb38:	2308      	movs	r3, #8
 800bb3a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb40:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb42:	2300      	movs	r3, #0
 800bb44:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb4a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb4c:	a901      	add	r1, sp, #4
 800bb4e:	f7ff fc87 	bl	800b460 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bb52:	4620      	mov	r0, r4
 800bb54:	f7ff ffb8 	bl	800bac8 <SDMMC_GetCmdResp7>
}
 800bb58:	b006      	add	sp, #24
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb5c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bb5e:	4903      	ldr	r1, [pc, #12]	; (800bb6c <MX_FATFS_Init+0x10>)
 800bb60:	4803      	ldr	r0, [pc, #12]	; (800bb70 <MX_FATFS_Init+0x14>)
 800bb62:	f002 f967 	bl	800de34 <FATFS_LinkDriver>
 800bb66:	4b03      	ldr	r3, [pc, #12]	; (800bb74 <MX_FATFS_Init+0x18>)
 800bb68:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb6a:	bd08      	pop	{r3, pc}
 800bb6c:	2001dccc 	.word	0x2001dccc
 800bb70:	0801ace4 	.word	0x0801ace4
 800bb74:	2001dcd0 	.word	0x2001dcd0

0800bb78 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800bb78:	2000      	movs	r0, #0
 800bb7a:	4770      	bx	lr

0800bb7c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb7c:	b500      	push	{lr}
 800bb7e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4613      	mov	r3, r2
 800bb84:	460a      	mov	r2, r1
 800bb86:	4601      	mov	r1, r0
 800bb88:	4803      	ldr	r0, [pc, #12]	; (800bb98 <BSP_SD_ReadBlocks+0x1c>)
 800bb8a:	f7fd fef5 	bl	8009978 <HAL_SD_ReadBlocks>
 800bb8e:	b100      	cbz	r0, 800bb92 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800bb90:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800bb92:	b003      	add	sp, #12
 800bb94:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb98:	2001cb7c 	.word	0x2001cb7c

0800bb9c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb9c:	b500      	push	{lr}
 800bb9e:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	4613      	mov	r3, r2
 800bba4:	460a      	mov	r2, r1
 800bba6:	4601      	mov	r1, r0
 800bba8:	4803      	ldr	r0, [pc, #12]	; (800bbb8 <BSP_SD_WriteBlocks+0x1c>)
 800bbaa:	f7fd ffe7 	bl	8009b7c <HAL_SD_WriteBlocks>
 800bbae:	b100      	cbz	r0, 800bbb2 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800bbb0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800bbb2:	b003      	add	sp, #12
 800bbb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbb8:	2001cb7c 	.word	0x2001cb7c

0800bbbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bbbc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bbbe:	4803      	ldr	r0, [pc, #12]	; (800bbcc <BSP_SD_GetCardState+0x10>)
 800bbc0:	f7fe fbce 	bl	800a360 <HAL_SD_GetCardState>
}
 800bbc4:	3804      	subs	r0, #4
 800bbc6:	bf18      	it	ne
 800bbc8:	2001      	movne	r0, #1
 800bbca:	bd08      	pop	{r3, pc}
 800bbcc:	2001cb7c 	.word	0x2001cb7c

0800bbd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bbd0:	b508      	push	{r3, lr}
 800bbd2:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bbd4:	4801      	ldr	r0, [pc, #4]	; (800bbdc <BSP_SD_GetCardInfo+0xc>)
 800bbd6:	f7fe fb05 	bl	800a1e4 <HAL_SD_GetCardInfo>
}
 800bbda:	bd08      	pop	{r3, pc}
 800bbdc:	2001cb7c 	.word	0x2001cb7c

0800bbe0 <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_SD_TxCpltCallback>:
{
 800bbe2:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800bbe4:	f7ff fffc 	bl	800bbe0 <BSP_SD_WriteCpltCallback>
}
 800bbe8:	bd08      	pop	{r3, pc}

0800bbea <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 800bbea:	4770      	bx	lr

0800bbec <HAL_SD_RxCpltCallback>:
{
 800bbec:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800bbee:	f7ff fffc 	bl	800bbea <BSP_SD_ReadCpltCallback>
}
 800bbf2:	bd08      	pop	{r3, pc}

0800bbf4 <BSP_SD_Init>:
{
 800bbf4:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bbf6:	f7f5 fc4b 	bl	8001490 <BSP_SD_IsDetected>
 800bbfa:	2801      	cmp	r0, #1
 800bbfc:	d002      	beq.n	800bc04 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800bbfe:	2502      	movs	r5, #2
}
 800bc00:	4628      	mov	r0, r5
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 800bc06:	4807      	ldr	r0, [pc, #28]	; (800bc24 <BSP_SD_Init+0x30>)
 800bc08:	f7fe fbbb 	bl	800a382 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d1f6      	bne.n	800bc00 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bc12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bc16:	4803      	ldr	r0, [pc, #12]	; (800bc24 <BSP_SD_Init+0x30>)
 800bc18:	f7fe faf6 	bl	800a208 <HAL_SD_ConfigWideBusOperation>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d0ef      	beq.n	800bc00 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800bc20:	4625      	mov	r5, r4
 800bc22:	e7ed      	b.n	800bc00 <BSP_SD_Init+0xc>
 800bc24:	2001cb7c 	.word	0x2001cb7c

0800bc28 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc28:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <SD_CheckStatus+0x20>)
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bc30:	f7ff ffc4 	bl	800bbbc <BSP_SD_GetCardState>
 800bc34:	b920      	cbnz	r0, 800bc40 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800bc36:	4a04      	ldr	r2, [pc, #16]	; (800bc48 <SD_CheckStatus+0x20>)
 800bc38:	7813      	ldrb	r3, [r2, #0]
 800bc3a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800bc3e:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800bc40:	4b01      	ldr	r3, [pc, #4]	; (800bc48 <SD_CheckStatus+0x20>)
 800bc42:	7818      	ldrb	r0, [r3, #0]
}
 800bc44:	bd08      	pop	{r3, pc}
 800bc46:	bf00      	nop
 800bc48:	20000944 	.word	0x20000944

0800bc4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800bc50:	4b07      	ldr	r3, [pc, #28]	; (800bc70 <SD_initialize+0x24>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bc56:	f7ff ffcd 	bl	800bbf4 <BSP_SD_Init>
 800bc5a:	b110      	cbz	r0, 800bc62 <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bc5c:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <SD_initialize+0x24>)
 800bc5e:	7818      	ldrb	r0, [r3, #0]
}
 800bc60:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800bc62:	4620      	mov	r0, r4
 800bc64:	f7ff ffe0 	bl	800bc28 <SD_CheckStatus>
 800bc68:	4b01      	ldr	r3, [pc, #4]	; (800bc70 <SD_initialize+0x24>)
 800bc6a:	7018      	strb	r0, [r3, #0]
 800bc6c:	e7f6      	b.n	800bc5c <SD_initialize+0x10>
 800bc6e:	bf00      	nop
 800bc70:	20000944 	.word	0x20000944

0800bc74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc74:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800bc76:	f7ff ffd7 	bl	800bc28 <SD_CheckStatus>
}
 800bc7a:	bd08      	pop	{r3, pc}

0800bc7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc7c:	b508      	push	{r3, lr}
 800bc7e:	4608      	mov	r0, r1
 800bc80:	4611      	mov	r1, r2
 800bc82:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bc84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc88:	f7ff ff78 	bl	800bb7c <BSP_SD_ReadBlocks>
 800bc8c:	b930      	cbnz	r0, 800bc9c <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bc8e:	f7ff ff95 	bl	800bbbc <BSP_SD_GetCardState>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d1fa      	bne.n	800bc8e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e7fb      	b.n	800bc98 <SD_read+0x1c>

0800bca0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bca0:	b508      	push	{r3, lr}
 800bca2:	4608      	mov	r0, r1
 800bca4:	4611      	mov	r1, r2
 800bca6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcac:	f7ff ff76 	bl	800bb9c <BSP_SD_WriteBlocks>
 800bcb0:	b930      	cbnz	r0, 800bcc0 <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bcb2:	f7ff ff83 	bl	800bbbc <BSP_SD_GetCardState>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d1fa      	bne.n	800bcb2 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	e7fb      	b.n	800bcbc <SD_write+0x1c>

0800bcc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bcc4:	b530      	push	{r4, r5, lr}
 800bcc6:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bcc8:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <SD_ioctl+0x54>)
 800bcca:	7818      	ldrb	r0, [r3, #0]
 800bccc:	f010 0401 	ands.w	r4, r0, #1
 800bcd0:	d11b      	bne.n	800bd0a <SD_ioctl+0x46>
 800bcd2:	4615      	mov	r5, r2

  switch (cmd)
 800bcd4:	2903      	cmp	r1, #3
 800bcd6:	d81c      	bhi.n	800bd12 <SD_ioctl+0x4e>
 800bcd8:	e8df f001 	tbb	[pc, r1]
 800bcdc:	100a0402 	.word	0x100a0402
 800bce0:	460c      	mov	r4, r1
 800bce2:	e013      	b.n	800bd0c <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bce4:	a801      	add	r0, sp, #4
 800bce6:	f7ff ff73 	bl	800bbd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bcea:	9b07      	ldr	r3, [sp, #28]
 800bcec:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800bcee:	e00d      	b.n	800bd0c <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcf0:	a801      	add	r0, sp, #4
 800bcf2:	f7ff ff6d 	bl	800bbd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bcf6:	9b08      	ldr	r3, [sp, #32]
 800bcf8:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800bcfa:	e007      	b.n	800bd0c <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcfc:	a801      	add	r0, sp, #4
 800bcfe:	f7ff ff67 	bl	800bbd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	0a5b      	lsrs	r3, r3, #9
 800bd06:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800bd08:	e000      	b.n	800bd0c <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd0a:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	b00b      	add	sp, #44	; 0x2c
 800bd10:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800bd12:	2404      	movs	r4, #4
 800bd14:	e7fa      	b.n	800bd0c <SD_ioctl+0x48>
 800bd16:	bf00      	nop
 800bd18:	20000944 	.word	0x20000944

0800bd1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bd1c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bd1e:	4b04      	ldr	r3, [pc, #16]	; (800bd30 <disk_status+0x14>)
 800bd20:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800bd24:	6852      	ldr	r2, [r2, #4]
 800bd26:	6852      	ldr	r2, [r2, #4]
 800bd28:	4403      	add	r3, r0
 800bd2a:	7a18      	ldrb	r0, [r3, #8]
 800bd2c:	4790      	blx	r2
  return stat;
}
 800bd2e:	bd08      	pop	{r3, pc}
 800bd30:	2001defc 	.word	0x2001defc

0800bd34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bd34:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800bd36:	4b08      	ldr	r3, [pc, #32]	; (800bd58 <disk_initialize+0x24>)
 800bd38:	5c1b      	ldrb	r3, [r3, r0]
 800bd3a:	b953      	cbnz	r3, 800bd52 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <disk_initialize+0x24>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bd42:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800bd46:	6852      	ldr	r2, [r2, #4]
 800bd48:	6812      	ldr	r2, [r2, #0]
 800bd4a:	4403      	add	r3, r0
 800bd4c:	7a18      	ldrb	r0, [r3, #8]
 800bd4e:	4790      	blx	r2
  }
  return stat;
}
 800bd50:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800bd52:	2000      	movs	r0, #0
 800bd54:	e7fc      	b.n	800bd50 <disk_initialize+0x1c>
 800bd56:	bf00      	nop
 800bd58:	2001defc 	.word	0x2001defc

0800bd5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bd5c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bd5e:	4c04      	ldr	r4, [pc, #16]	; (800bd70 <disk_read+0x14>)
 800bd60:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800bd64:	686d      	ldr	r5, [r5, #4]
 800bd66:	68ad      	ldr	r5, [r5, #8]
 800bd68:	4404      	add	r4, r0
 800bd6a:	7a20      	ldrb	r0, [r4, #8]
 800bd6c:	47a8      	blx	r5
  return res;
}
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	2001defc 	.word	0x2001defc

0800bd74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bd74:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd76:	4c04      	ldr	r4, [pc, #16]	; (800bd88 <disk_write+0x14>)
 800bd78:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800bd7c:	686d      	ldr	r5, [r5, #4]
 800bd7e:	68ed      	ldr	r5, [r5, #12]
 800bd80:	4404      	add	r4, r0
 800bd82:	7a20      	ldrb	r0, [r4, #8]
 800bd84:	47a8      	blx	r5
  return res;
}
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	2001defc 	.word	0x2001defc

0800bd8c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd8c:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <disk_ioctl+0x14>)
 800bd90:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800bd94:	6864      	ldr	r4, [r4, #4]
 800bd96:	6924      	ldr	r4, [r4, #16]
 800bd98:	4403      	add	r3, r0
 800bd9a:	7a18      	ldrb	r0, [r3, #8]
 800bd9c:	47a0      	blx	r4
  return res;
}
 800bd9e:	bd10      	pop	{r4, pc}
 800bda0:	2001defc 	.word	0x2001defc

0800bda4 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800bda4:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800bda6:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800bda8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800bdac:	4770      	bx	lr

0800bdae <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800bdae:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800bdb0:	7882      	ldrb	r2, [r0, #2]
 800bdb2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800bdb6:	7843      	ldrb	r3, [r0, #1]
 800bdb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800bdbc:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800bdbe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800bdc2:	4770      	bx	lr

0800bdc4 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800bdc4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800bdc6:	0a09      	lsrs	r1, r1, #8
 800bdc8:	7041      	strb	r1, [r0, #1]
}
 800bdca:	4770      	bx	lr

0800bdcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800bdcc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdce:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800bdd2:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdd4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800bdd8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800bdda:	0e09      	lsrs	r1, r1, #24
 800bddc:	70c1      	strb	r1, [r0, #3]
}
 800bdde:	4770      	bx	lr

0800bde0 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800bde0:	4694      	mov	ip, r2
 800bde2:	b132      	cbz	r2, 800bdf2 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800bde4:	780a      	ldrb	r2, [r1, #0]
 800bde6:	3101      	adds	r1, #1
 800bde8:	7002      	strb	r2, [r0, #0]
 800bdea:	3001      	adds	r0, #1
		} while (--cnt);
 800bdec:	f1bc 0c01 	subs.w	ip, ip, #1
 800bdf0:	d1f8      	bne.n	800bde4 <mem_cpy+0x4>
	}
}
 800bdf2:	4770      	bx	lr

0800bdf4 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800bdf4:	7001      	strb	r1, [r0, #0]
 800bdf6:	3001      	adds	r0, #1
	} while (--cnt);
 800bdf8:	3a01      	subs	r2, #1
 800bdfa:	d1fb      	bne.n	800bdf4 <mem_set>
}
 800bdfc:	4770      	bx	lr

0800bdfe <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bdfe:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800be00:	f89c 0000 	ldrb.w	r0, [ip]
 800be04:	f10c 0c01 	add.w	ip, ip, #1
 800be08:	780b      	ldrb	r3, [r1, #0]
 800be0a:	3101      	adds	r1, #1
 800be0c:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800be0e:	3a01      	subs	r2, #1
 800be10:	d001      	beq.n	800be16 <mem_cmp+0x18>
 800be12:	2800      	cmp	r0, #0
 800be14:	d0f4      	beq.n	800be00 <mem_cmp+0x2>

	return r;
}
 800be16:	4770      	bx	lr

0800be18 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be18:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800be1a:	e000      	b.n	800be1e <chk_chr+0x6>
 800be1c:	3301      	adds	r3, #1
 800be1e:	7818      	ldrb	r0, [r3, #0]
 800be20:	b108      	cbz	r0, 800be26 <chk_chr+0xe>
 800be22:	4288      	cmp	r0, r1
 800be24:	d1fa      	bne.n	800be1c <chk_chr+0x4>
	return *str;
}
 800be26:	4770      	bx	lr

0800be28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be28:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be2a:	f04f 0c00 	mov.w	ip, #0
 800be2e:	4663      	mov	r3, ip
 800be30:	e002      	b.n	800be38 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800be32:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be36:	3301      	adds	r3, #1
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d815      	bhi.n	800be68 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 800be3c:	011a      	lsls	r2, r3, #4
 800be3e:	4c18      	ldr	r4, [pc, #96]	; (800bea0 <chk_lock+0x78>)
 800be40:	58a2      	ldr	r2, [r4, r2]
 800be42:	2a00      	cmp	r2, #0
 800be44:	d0f5      	beq.n	800be32 <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be46:	6804      	ldr	r4, [r0, #0]
 800be48:	42a2      	cmp	r2, r4
 800be4a:	d1f4      	bne.n	800be36 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 800be4c:	4a14      	ldr	r2, [pc, #80]	; (800bea0 <chk_lock+0x78>)
 800be4e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800be52:	6854      	ldr	r4, [r2, #4]
 800be54:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be56:	4294      	cmp	r4, r2
 800be58:	d1ed      	bne.n	800be36 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 800be5a:	4a11      	ldr	r2, [pc, #68]	; (800bea0 <chk_lock+0x78>)
 800be5c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800be60:	6894      	ldr	r4, [r2, #8]
 800be62:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800be64:	4294      	cmp	r4, r2
 800be66:	d1e6      	bne.n	800be36 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d00b      	beq.n	800be84 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be6c:	b9b1      	cbnz	r1, 800be9c <chk_lock+0x74>
 800be6e:	4a0c      	ldr	r2, [pc, #48]	; (800bea0 <chk_lock+0x78>)
 800be70:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800be74:	899b      	ldrh	r3, [r3, #12]
 800be76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7a:	d00d      	beq.n	800be98 <chk_lock+0x70>
 800be7c:	2000      	movs	r0, #0
}
 800be7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be82:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be84:	2902      	cmp	r1, #2
 800be86:	bf14      	ite	ne
 800be88:	4663      	movne	r3, ip
 800be8a:	f04c 0301 	orreq.w	r3, ip, #1
 800be8e:	b10b      	cbz	r3, 800be94 <chk_lock+0x6c>
 800be90:	2000      	movs	r0, #0
 800be92:	e7f4      	b.n	800be7e <chk_lock+0x56>
 800be94:	2012      	movs	r0, #18
 800be96:	e7f2      	b.n	800be7e <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be98:	2010      	movs	r0, #16
 800be9a:	e7f0      	b.n	800be7e <chk_lock+0x56>
 800be9c:	2010      	movs	r0, #16
 800be9e:	e7ee      	b.n	800be7e <chk_lock+0x56>
 800bea0:	2001dcd8 	.word	0x2001dcd8

0800bea4 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bea4:	2000      	movs	r0, #0
 800bea6:	e000      	b.n	800beaa <enq_lock+0x6>
 800bea8:	3001      	adds	r0, #1
 800beaa:	2801      	cmp	r0, #1
 800beac:	d804      	bhi.n	800beb8 <enq_lock+0x14>
 800beae:	0103      	lsls	r3, r0, #4
 800beb0:	4a03      	ldr	r2, [pc, #12]	; (800bec0 <enq_lock+0x1c>)
 800beb2:	58d3      	ldr	r3, [r2, r3]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1f7      	bne.n	800bea8 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800beb8:	3802      	subs	r0, #2
 800beba:	bf18      	it	ne
 800bebc:	2001      	movne	r0, #1
 800bebe:	4770      	bx	lr
 800bec0:	2001dcd8 	.word	0x2001dcd8

0800bec4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bec4:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bec6:	2300      	movs	r3, #0
 800bec8:	e000      	b.n	800becc <inc_lock+0x8>
 800beca:	3301      	adds	r3, #1
 800becc:	2b01      	cmp	r3, #1
 800bece:	d813      	bhi.n	800bef8 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800bed0:	011a      	lsls	r2, r3, #4
 800bed2:	4c24      	ldr	r4, [pc, #144]	; (800bf64 <inc_lock+0xa0>)
 800bed4:	58a4      	ldr	r4, [r4, r2]
 800bed6:	6802      	ldr	r2, [r0, #0]
 800bed8:	4294      	cmp	r4, r2
 800beda:	d1f6      	bne.n	800beca <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800bedc:	4a21      	ldr	r2, [pc, #132]	; (800bf64 <inc_lock+0xa0>)
 800bede:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bee2:	6854      	ldr	r4, [r2, #4]
 800bee4:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bee6:	4294      	cmp	r4, r2
 800bee8:	d1ef      	bne.n	800beca <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800beea:	4a1e      	ldr	r2, [pc, #120]	; (800bf64 <inc_lock+0xa0>)
 800beec:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bef0:	6894      	ldr	r4, [r2, #8]
 800bef2:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 800bef4:	4294      	cmp	r4, r2
 800bef6:	d1e8      	bne.n	800beca <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d00d      	beq.n	800bf18 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800befc:	b121      	cbz	r1, 800bf08 <inc_lock+0x44>
 800befe:	4a19      	ldr	r2, [pc, #100]	; (800bf64 <inc_lock+0xa0>)
 800bf00:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bf04:	8992      	ldrh	r2, [r2, #12]
 800bf06:	bb52      	cbnz	r2, 800bf5e <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf08:	b9f1      	cbnz	r1, 800bf48 <inc_lock+0x84>
 800bf0a:	4a16      	ldr	r2, [pc, #88]	; (800bf64 <inc_lock+0xa0>)
 800bf0c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bf10:	8991      	ldrh	r1, [r2, #12]
 800bf12:	3101      	adds	r1, #1
 800bf14:	b289      	uxth	r1, r1
 800bf16:	e019      	b.n	800bf4c <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d805      	bhi.n	800bf2a <inc_lock+0x66>
 800bf1e:	011a      	lsls	r2, r3, #4
 800bf20:	4c10      	ldr	r4, [pc, #64]	; (800bf64 <inc_lock+0xa0>)
 800bf22:	58a2      	ldr	r2, [r4, r2]
 800bf24:	b10a      	cbz	r2, 800bf2a <inc_lock+0x66>
 800bf26:	3301      	adds	r3, #1
 800bf28:	e7f7      	b.n	800bf1a <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d015      	beq.n	800bf5a <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800bf2e:	4d0d      	ldr	r5, [pc, #52]	; (800bf64 <inc_lock+0xa0>)
 800bf30:	011c      	lsls	r4, r3, #4
 800bf32:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800bf36:	6806      	ldr	r6, [r0, #0]
 800bf38:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800bf3a:	6884      	ldr	r4, [r0, #8]
 800bf3c:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800bf3e:	6940      	ldr	r0, [r0, #20]
 800bf40:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800bf42:	2000      	movs	r0, #0
 800bf44:	8190      	strh	r0, [r2, #12]
 800bf46:	e7d9      	b.n	800befc <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf48:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bf4c:	4a05      	ldr	r2, [pc, #20]	; (800bf64 <inc_lock+0xa0>)
 800bf4e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bf52:	8191      	strh	r1, [r2, #12]

	return i + 1;
 800bf54:	1c58      	adds	r0, r3, #1
}
 800bf56:	bc70      	pop	{r4, r5, r6}
 800bf58:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	e7fb      	b.n	800bf56 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bf5e:	2000      	movs	r0, #0
 800bf60:	e7f9      	b.n	800bf56 <inc_lock+0x92>
 800bf62:	bf00      	nop
 800bf64:	2001dcd8 	.word	0x2001dcd8

0800bf68 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf68:	3801      	subs	r0, #1
 800bf6a:	2801      	cmp	r0, #1
 800bf6c:	d815      	bhi.n	800bf9a <dec_lock+0x32>
		n = Files[i].ctr;
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <dec_lock+0x3c>)
 800bf70:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800bf74:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf7a:	d003      	beq.n	800bf84 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf7c:	b11b      	cbz	r3, 800bf86 <dec_lock+0x1e>
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	e000      	b.n	800bf86 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf84:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800bf86:	4a07      	ldr	r2, [pc, #28]	; (800bfa4 <dec_lock+0x3c>)
 800bf88:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800bf8c:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bf8e:	b933      	cbnz	r3, 800bf9e <dec_lock+0x36>
 800bf90:	0103      	lsls	r3, r0, #4
 800bf92:	2000      	movs	r0, #0
 800bf94:	4a03      	ldr	r2, [pc, #12]	; (800bfa4 <dec_lock+0x3c>)
 800bf96:	50d0      	str	r0, [r2, r3]
 800bf98:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bf9a:	2002      	movs	r0, #2
 800bf9c:	4770      	bx	lr
		res = FR_OK;
 800bf9e:	2000      	movs	r0, #0
	}
	return res;
}
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop
 800bfa4:	2001dcd8 	.word	0x2001dcd8

0800bfa8 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e003      	b.n	800bfb4 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 800bfac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfb0:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d811      	bhi.n	800bfdc <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfb8:	011a      	lsls	r2, r3, #4
 800bfba:	4909      	ldr	r1, [pc, #36]	; (800bfe0 <clear_lock+0x38>)
 800bfbc:	588a      	ldr	r2, [r1, r2]
 800bfbe:	4282      	cmp	r2, r0
 800bfc0:	d1f7      	bne.n	800bfb2 <clear_lock+0xa>
{
 800bfc2:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfc4:	011a      	lsls	r2, r3, #4
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800bfca:	3301      	adds	r3, #1
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d8ed      	bhi.n	800bfac <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfd0:	011a      	lsls	r2, r3, #4
 800bfd2:	4903      	ldr	r1, [pc, #12]	; (800bfe0 <clear_lock+0x38>)
 800bfd4:	588a      	ldr	r2, [r1, r2]
 800bfd6:	4282      	cmp	r2, r0
 800bfd8:	d1f7      	bne.n	800bfca <clear_lock+0x22>
 800bfda:	e7f3      	b.n	800bfc4 <clear_lock+0x1c>
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	2001dcd8 	.word	0x2001dcd8

0800bfe4 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800bfe4:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfe6:	6983      	ldr	r3, [r0, #24]
 800bfe8:	3b02      	subs	r3, #2
 800bfea:	428b      	cmp	r3, r1
 800bfec:	d904      	bls.n	800bff8 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800bfee:	8943      	ldrh	r3, [r0, #10]
 800bff0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bff2:	fb01 0003 	mla	r0, r1, r3, r0
 800bff6:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bff8:	2000      	movs	r0, #0
}
 800bffa:	4770      	bx	lr

0800bffc <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bffc:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bffe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c000:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c002:	0a49      	lsrs	r1, r1, #9
 800c004:	8952      	ldrh	r2, [r2, #10]
 800c006:	fbb1 f1f2 	udiv	r1, r1, r2
 800c00a:	e001      	b.n	800c010 <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800c00c:	1a09      	subs	r1, r1, r0
 800c00e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c010:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c012:	b118      	cbz	r0, 800c01c <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800c014:	4281      	cmp	r1, r0
 800c016:	d2f9      	bcs.n	800c00c <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 800c018:	6858      	ldr	r0, [r3, #4]
 800c01a:	4408      	add	r0, r1
}
 800c01c:	4770      	bx	lr

0800c01e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c01e:	b570      	push	{r4, r5, r6, lr}
 800c020:	4606      	mov	r6, r0
 800c022:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c024:	f101 001a 	add.w	r0, r1, #26
 800c028:	f7ff febc 	bl	800bda4 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800c02c:	7833      	ldrb	r3, [r6, #0]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d000      	beq.n	800c034 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c036:	f105 0014 	add.w	r0, r5, #20
 800c03a:	f7ff feb3 	bl	800bda4 <ld_word>
 800c03e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800c042:	e7f6      	b.n	800c032 <ld_clust+0x14>

0800c044 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	4606      	mov	r6, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c04c:	b291      	uxth	r1, r2
 800c04e:	f104 001a 	add.w	r0, r4, #26
 800c052:	f7ff feb7 	bl	800bdc4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c056:	7833      	ldrb	r3, [r6, #0]
 800c058:	2b03      	cmp	r3, #3
 800c05a:	d000      	beq.n	800c05e <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c05e:	0c29      	lsrs	r1, r5, #16
 800c060:	f104 0014 	add.w	r0, r4, #20
 800c064:	f7ff feae 	bl	800bdc4 <st_word>
}
 800c068:	e7f8      	b.n	800c05c <st_clust+0x18>
	...

0800c06c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c070:	4680      	mov	r8, r0
 800c072:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c074:	f101 001a 	add.w	r0, r1, #26
 800c078:	f7ff fe94 	bl	800bda4 <ld_word>
 800c07c:	bb50      	cbnz	r0, 800c0d4 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c07e:	7835      	ldrb	r5, [r6, #0]
 800c080:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800c084:	3d01      	subs	r5, #1
 800c086:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c08a:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c08e:	2701      	movs	r7, #1
 800c090:	2400      	movs	r4, #0
 800c092:	e004      	b.n	800c09e <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c098:	4298      	cmp	r0, r3
 800c09a:	d120      	bne.n	800c0de <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c09c:	3401      	adds	r4, #1
 800c09e:	2c0c      	cmp	r4, #12
 800c0a0:	d80d      	bhi.n	800c0be <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c0a2:	4b12      	ldr	r3, [pc, #72]	; (800c0ec <pick_lfn+0x80>)
 800c0a4:	5d18      	ldrb	r0, [r3, r4]
 800c0a6:	4430      	add	r0, r6
 800c0a8:	f7ff fe7c 	bl	800bda4 <ld_word>
		if (wc) {
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	d0f1      	beq.n	800c094 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c0b0:	2dfe      	cmp	r5, #254	; 0xfe
 800c0b2:	d812      	bhi.n	800c0da <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c0b4:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	3501      	adds	r5, #1
 800c0bc:	e7ee      	b.n	800c09c <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c0be:	7833      	ldrb	r3, [r6, #0]
 800c0c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c0c4:	d00d      	beq.n	800c0e2 <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c0c6:	2dfe      	cmp	r5, #254	; 0xfe
 800c0c8:	d80d      	bhi.n	800c0e6 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	e000      	b.n	800c0d6 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c0d4:	2000      	movs	r0, #0
}
 800c0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c0da:	2000      	movs	r0, #0
 800c0dc:	e7fb      	b.n	800c0d6 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c0de:	2000      	movs	r0, #0
 800c0e0:	e7f9      	b.n	800c0d6 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7f7      	b.n	800c0d6 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	e7f5      	b.n	800c0d6 <pick_lfn+0x6a>
 800c0ea:	bf00      	nop
 800c0ec:	0801ad8c 	.word	0x0801ad8c

0800c0f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c0fa:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c0fc:	230f      	movs	r3, #15
 800c0fe:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800c100:	2400      	movs	r4, #0
 800c102:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800c104:	4621      	mov	r1, r4
 800c106:	f107 001a 	add.w	r0, r7, #26
 800c10a:	f7ff fe5b 	bl	800bdc4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c10e:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 800c112:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c116:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800c11a:	4625      	mov	r5, r4
 800c11c:	e002      	b.n	800c124 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800c11e:	3401      	adds	r4, #1
 800c120:	2c0c      	cmp	r4, #12
 800c122:	d811      	bhi.n	800c148 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c128:	429d      	cmp	r5, r3
 800c12a:	d002      	beq.n	800c132 <put_lfn+0x42>
 800c12c:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800c130:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c132:	4b0c      	ldr	r3, [pc, #48]	; (800c164 <put_lfn+0x74>)
 800c134:	5d18      	ldrb	r0, [r3, r4]
 800c136:	4629      	mov	r1, r5
 800c138:	4438      	add	r0, r7
 800c13a:	f7ff fe43 	bl	800bdc4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c13e:	2d00      	cmp	r5, #0
 800c140:	d1ed      	bne.n	800c11e <put_lfn+0x2e>
 800c142:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800c146:	e7ea      	b.n	800c11e <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c14c:	429d      	cmp	r5, r3
 800c14e:	d002      	beq.n	800c156 <put_lfn+0x66>
 800c150:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800c154:	b90b      	cbnz	r3, 800c15a <put_lfn+0x6a>
 800c156:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c15a:	f887 9000 	strb.w	r9, [r7]
}
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	bf00      	nop
 800c164:	0801ad8c 	.word	0x0801ad8c

0800c168 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c168:	b570      	push	{r4, r5, r6, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	4605      	mov	r5, r0
 800c16e:	4616      	mov	r6, r2
 800c170:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c172:	220b      	movs	r2, #11
 800c174:	f7ff fe34 	bl	800bde0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c178:	2c05      	cmp	r4, #5
 800c17a:	d811      	bhi.n	800c1a0 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800c17c:	2307      	movs	r3, #7
 800c17e:	e01f      	b.n	800c1c0 <gen_numname+0x58>
 800c180:	3101      	adds	r1, #1
 800c182:	290f      	cmp	r1, #15
 800c184:	d80c      	bhi.n	800c1a0 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800c186:	f003 0c01 	and.w	ip, r3, #1
 800c18a:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800c18e:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c190:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800c194:	d0f4      	beq.n	800c180 <gen_numname+0x18>
 800c196:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800c19a:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800c19e:	e7ef      	b.n	800c180 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800c1a0:	8833      	ldrh	r3, [r6, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0ea      	beq.n	800c17c <gen_numname+0x14>
			wc = *lfn++;
 800c1a6:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	e7ea      	b.n	800c182 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800c1ac:	1e5a      	subs	r2, r3, #1
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	446b      	add	r3, sp
 800c1b2:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800c1b6:	0921      	lsrs	r1, r4, #4
	} while (seq);
 800c1b8:	2c0f      	cmp	r4, #15
 800c1ba:	d90a      	bls.n	800c1d2 <gen_numname+0x6a>
		ns[i--] = c;
 800c1bc:	4613      	mov	r3, r2
		seq /= 16;
 800c1be:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 800c1c0:	f004 020f 	and.w	r2, r4, #15
 800c1c4:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 800c1c8:	2939      	cmp	r1, #57	; 0x39
 800c1ca:	d9ef      	bls.n	800c1ac <gen_numname+0x44>
 800c1cc:	f102 0137 	add.w	r1, r2, #55	; 0x37
 800c1d0:	e7ec      	b.n	800c1ac <gen_numname+0x44>
	ns[i] = '~';
 800c1d2:	217e      	movs	r1, #126	; 0x7e
 800c1d4:	f102 0308 	add.w	r3, r2, #8
 800c1d8:	446b      	add	r3, sp
 800c1da:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e000      	b.n	800c1e4 <gen_numname+0x7c>
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d209      	bcs.n	800c1fc <gen_numname+0x94>
 800c1e8:	5ce9      	ldrb	r1, [r5, r3]
 800c1ea:	2920      	cmp	r1, #32
 800c1ec:	d1f9      	bne.n	800c1e2 <gen_numname+0x7a>
 800c1ee:	e005      	b.n	800c1fc <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c1f0:	2020      	movs	r0, #32
 800c1f2:	1c59      	adds	r1, r3, #1
 800c1f4:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800c1f6:	2907      	cmp	r1, #7
 800c1f8:	d809      	bhi.n	800c20e <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	2a07      	cmp	r2, #7
 800c1fe:	d8f7      	bhi.n	800c1f0 <gen_numname+0x88>
 800c200:	f102 0108 	add.w	r1, r2, #8
 800c204:	4469      	add	r1, sp
 800c206:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800c20a:	3201      	adds	r2, #1
 800c20c:	e7f1      	b.n	800c1f2 <gen_numname+0x8a>
}
 800c20e:	b002      	add	sp, #8
 800c210:	bd70      	pop	{r4, r5, r6, pc}

0800c212 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c212:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800c214:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800c218:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c21a:	01c3      	lsls	r3, r0, #7
 800c21c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800c220:	780a      	ldrb	r2, [r1, #0]
 800c222:	3101      	adds	r1, #1
 800c224:	fa52 f383 	uxtab	r3, r2, r3
 800c228:	b2d8      	uxtb	r0, r3
	} while (--n);
 800c22a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c22e:	d1f4      	bne.n	800c21a <sum_sfn+0x8>
	return sum;
}
 800c230:	4770      	bx	lr
	...

0800c234 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800c234:	6803      	ldr	r3, [r0, #0]
 800c236:	1c5a      	adds	r2, r3, #1
 800c238:	6002      	str	r2, [r0, #0]
 800c23a:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800c23c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c240:	b29b      	uxth	r3, r3
 800c242:	2b19      	cmp	r3, #25
 800c244:	d801      	bhi.n	800c24a <get_achar+0x16>
 800c246:	3820      	subs	r0, #32
 800c248:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800c24a:	287f      	cmp	r0, #127	; 0x7f
 800c24c:	d902      	bls.n	800c254 <get_achar+0x20>
 800c24e:	3880      	subs	r0, #128	; 0x80
 800c250:	4b01      	ldr	r3, [pc, #4]	; (800c258 <get_achar+0x24>)
 800c252:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	0801ad0c 	.word	0x0801ad0c

0800c25c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	b084      	sub	sp, #16
 800c262:	4607      	mov	r7, r0
 800c264:	9101      	str	r1, [sp, #4]
 800c266:	4614      	mov	r4, r2
 800c268:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800c26a:	4626      	mov	r6, r4
 800c26c:	3c01      	subs	r4, #1
 800c26e:	b14e      	cbz	r6, 800c284 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800c270:	a801      	add	r0, sp, #4
 800c272:	f7ff ffdf 	bl	800c234 <get_achar>
 800c276:	2800      	cmp	r0, #0
 800c278:	d1f7      	bne.n	800c26a <pattern_matching+0xe>
 800c27a:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800c27c:	4630      	mov	r0, r6
 800c27e:	b004      	add	sp, #16
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800c284:	783b      	ldrb	r3, [r7, #0]
 800c286:	bb1b      	cbnz	r3, 800c2d0 <pattern_matching+0x74>
 800c288:	f1b8 0f00 	cmp.w	r8, #0
 800c28c:	d020      	beq.n	800c2d0 <pattern_matching+0x74>
 800c28e:	2601      	movs	r6, #1
 800c290:	e7f4      	b.n	800c27c <pattern_matching+0x20>
				nm = nx = 0;
 800c292:	4633      	mov	r3, r6
 800c294:	4632      	mov	r2, r6
					if (*pp++ == '?') nm++; else nx = 1;
 800c296:	9903      	ldr	r1, [sp, #12]
 800c298:	1c48      	adds	r0, r1, #1
 800c29a:	9003      	str	r0, [sp, #12]
 800c29c:	780c      	ldrb	r4, [r1, #0]
 800c29e:	2c3f      	cmp	r4, #63	; 0x3f
 800c2a0:	d02d      	beq.n	800c2fe <pattern_matching+0xa2>
 800c2a2:	2301      	movs	r3, #1
				} while (*pp == '?' || *pp == '*');
 800c2a4:	7849      	ldrb	r1, [r1, #1]
 800c2a6:	293f      	cmp	r1, #63	; 0x3f
 800c2a8:	d0f5      	beq.n	800c296 <pattern_matching+0x3a>
 800c2aa:	292a      	cmp	r1, #42	; 0x2a
 800c2ac:	d0f3      	beq.n	800c296 <pattern_matching+0x3a>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800c2ae:	9902      	ldr	r1, [sp, #8]
 800c2b0:	f7ff ffd4 	bl	800c25c <pattern_matching>
 800c2b4:	bb28      	cbnz	r0, 800c302 <pattern_matching+0xa6>
				nc = *np; break;	/* Branch mismatched */
 800c2b6:	9b02      	ldr	r3, [sp, #8]
 800c2b8:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800c2ba:	a801      	add	r0, sp, #4
 800c2bc:	f7ff ffba 	bl	800c234 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800c2c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c2c4:	bf18      	it	ne
 800c2c6:	2301      	movne	r3, #1
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	d0d7      	beq.n	800c27c <pattern_matching+0x20>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d0d5      	beq.n	800c27c <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800c2d0:	9703      	str	r7, [sp, #12]
 800c2d2:	9b01      	ldr	r3, [sp, #4]
 800c2d4:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b2a      	cmp	r3, #42	; 0x2a
 800c2dc:	bf18      	it	ne
 800c2de:	2b3f      	cmpne	r3, #63	; 0x3f
 800c2e0:	d0d7      	beq.n	800c292 <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 800c2e2:	a803      	add	r0, sp, #12
 800c2e4:	f7ff ffa6 	bl	800c234 <get_achar>
 800c2e8:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 800c2ea:	a802      	add	r0, sp, #8
 800c2ec:	f7ff ffa2 	bl	800c234 <get_achar>
 800c2f0:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800c2f2:	4284      	cmp	r4, r0
 800c2f4:	d1e1      	bne.n	800c2ba <pattern_matching+0x5e>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800c2f6:	2c00      	cmp	r4, #0
 800c2f8:	d1ed      	bne.n	800c2d6 <pattern_matching+0x7a>
 800c2fa:	2601      	movs	r6, #1
 800c2fc:	e7be      	b.n	800c27c <pattern_matching+0x20>
					if (*pp++ == '?') nm++; else nx = 1;
 800c2fe:	3201      	adds	r2, #1
 800c300:	e7d0      	b.n	800c2a4 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800c302:	2601      	movs	r6, #1
 800c304:	e7ba      	b.n	800c27c <pattern_matching+0x20>

0800c306 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c306:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c308:	6800      	ldr	r0, [r0, #0]
 800c30a:	b108      	cbz	r0, 800c310 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c30c:	4602      	mov	r2, r0
 800c30e:	e003      	b.n	800c318 <get_ldnumber+0x12>
	int vol = -1;
 800c310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c314:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c316:	3201      	adds	r2, #1
 800c318:	7813      	ldrb	r3, [r2, #0]
 800c31a:	2b1f      	cmp	r3, #31
 800c31c:	d901      	bls.n	800c322 <get_ldnumber+0x1c>
 800c31e:	2b3a      	cmp	r3, #58	; 0x3a
 800c320:	d1f9      	bne.n	800c316 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c322:	2b3a      	cmp	r3, #58	; 0x3a
 800c324:	d001      	beq.n	800c32a <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c326:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800c328:	4770      	bx	lr
			i = *tp++ - '0';
 800c32a:	4603      	mov	r3, r0
 800c32c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c330:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c332:	2809      	cmp	r0, #9
 800c334:	bf98      	it	ls
 800c336:	429a      	cmpls	r2, r3
 800c338:	d103      	bne.n	800c342 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c33a:	b928      	cbnz	r0, 800c348 <get_ldnumber+0x42>
					*path = ++tt;
 800c33c:	3201      	adds	r2, #1
 800c33e:	600a      	str	r2, [r1, #0]
 800c340:	4770      	bx	lr
	int vol = -1;
 800c342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c346:	4770      	bx	lr
 800c348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 800c34c:	4770      	bx	lr

0800c34e <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c34e:	b538      	push	{r3, r4, r5, lr}
 800c350:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c352:	4604      	mov	r4, r0
 800c354:	b198      	cbz	r0, 800c37e <validate+0x30>
 800c356:	6803      	ldr	r3, [r0, #0]
 800c358:	b19b      	cbz	r3, 800c382 <validate+0x34>
 800c35a:	781a      	ldrb	r2, [r3, #0]
 800c35c:	b1a2      	cbz	r2, 800c388 <validate+0x3a>
 800c35e:	8881      	ldrh	r1, [r0, #4]
 800c360:	88da      	ldrh	r2, [r3, #6]
 800c362:	4291      	cmp	r1, r2
 800c364:	d003      	beq.n	800c36e <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800c366:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c368:	2400      	movs	r4, #0
 800c36a:	602c      	str	r4, [r5, #0]
	return res;
}
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c36e:	7858      	ldrb	r0, [r3, #1]
 800c370:	f7ff fcd4 	bl	800bd1c <disk_status>
 800c374:	f010 0001 	ands.w	r0, r0, #1
 800c378:	d109      	bne.n	800c38e <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c37a:	6824      	ldr	r4, [r4, #0]
 800c37c:	e7f5      	b.n	800c36a <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c37e:	2009      	movs	r0, #9
 800c380:	e7f3      	b.n	800c36a <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c382:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800c384:	2009      	movs	r0, #9
 800c386:	e7f0      	b.n	800c36a <validate+0x1c>
 800c388:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c38a:	2400      	movs	r4, #0
 800c38c:	e7ed      	b.n	800c36a <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800c38e:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c390:	2400      	movs	r4, #0
 800c392:	e7ea      	b.n	800c36a <validate+0x1c>

0800c394 <sync_window>:
{
 800c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c398:	78c5      	ldrb	r5, [r0, #3]
 800c39a:	b915      	cbnz	r5, 800c3a2 <sync_window+0xe>
}
 800c39c:	4628      	mov	r0, r5
 800c39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800c3a4:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c3a6:	f100 0834 	add.w	r8, r0, #52	; 0x34
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	463a      	mov	r2, r7
 800c3ae:	4641      	mov	r1, r8
 800c3b0:	7840      	ldrb	r0, [r0, #1]
 800c3b2:	f7ff fcdf 	bl	800bd74 <disk_write>
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	b9a0      	cbnz	r0, 800c3e4 <sync_window+0x50>
			fs->wflag = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3c0:	1afb      	subs	r3, r7, r3
 800c3c2:	69e2      	ldr	r2, [r4, #28]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d2e9      	bcs.n	800c39c <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3c8:	78a6      	ldrb	r6, [r4, #2]
 800c3ca:	e008      	b.n	800c3de <sync_window+0x4a>
					wsect += fs->fsize;
 800c3cc:	69e3      	ldr	r3, [r4, #28]
 800c3ce:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	463a      	mov	r2, r7
 800c3d4:	4641      	mov	r1, r8
 800c3d6:	7860      	ldrb	r0, [r4, #1]
 800c3d8:	f7ff fccc 	bl	800bd74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3dc:	3e01      	subs	r6, #1
 800c3de:	2e01      	cmp	r6, #1
 800c3e0:	d8f4      	bhi.n	800c3cc <sync_window+0x38>
 800c3e2:	e7db      	b.n	800c39c <sync_window+0x8>
			res = FR_DISK_ERR;
 800c3e4:	2501      	movs	r5, #1
 800c3e6:	e7d9      	b.n	800c39c <sync_window+0x8>

0800c3e8 <move_window>:
{
 800c3e8:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c3ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c3ec:	428b      	cmp	r3, r1
 800c3ee:	d102      	bne.n	800c3f6 <move_window+0xe>
	FRESULT res = FR_OK;
 800c3f0:	2600      	movs	r6, #0
}
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	bd70      	pop	{r4, r5, r6, pc}
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800c3fa:	f7ff ffcb 	bl	800c394 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c3fe:	4606      	mov	r6, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	d1f6      	bne.n	800c3f2 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c404:	2301      	movs	r3, #1
 800c406:	462a      	mov	r2, r5
 800c408:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800c40c:	7860      	ldrb	r0, [r4, #1]
 800c40e:	f7ff fca5 	bl	800bd5c <disk_read>
 800c412:	b110      	cbz	r0, 800c41a <move_window+0x32>
				res = FR_DISK_ERR;
 800c414:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c416:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800c41a:	6325      	str	r5, [r4, #48]	; 0x30
 800c41c:	e7e9      	b.n	800c3f2 <move_window+0xa>
	...

0800c420 <check_fs>:
{
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c424:	2300      	movs	r3, #0
 800c426:	70c3      	strb	r3, [r0, #3]
 800c428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c42c:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c42e:	f7ff ffdb 	bl	800c3e8 <move_window>
 800c432:	bb30      	cbnz	r0, 800c482 <check_fs+0x62>
 800c434:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c436:	f204 2032 	addw	r0, r4, #562	; 0x232
 800c43a:	f7ff fcb3 	bl	800bda4 <ld_word>
 800c43e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c442:	4298      	cmp	r0, r3
 800c444:	d11f      	bne.n	800c486 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c446:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c44a:	2be9      	cmp	r3, #233	; 0xe9
 800c44c:	d007      	beq.n	800c45e <check_fs+0x3e>
 800c44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c450:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c454:	4a0d      	ldr	r2, [pc, #52]	; (800c48c <check_fs+0x6c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d001      	beq.n	800c45e <check_fs+0x3e>
	return 2;
 800c45a:	2502      	movs	r5, #2
 800c45c:	e014      	b.n	800c488 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c45e:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800c462:	f7ff fca4 	bl	800bdae <ld_dword>
 800c466:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c46a:	4b09      	ldr	r3, [pc, #36]	; (800c490 <check_fs+0x70>)
 800c46c:	4298      	cmp	r0, r3
 800c46e:	d00b      	beq.n	800c488 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c470:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800c474:	f7ff fc9b 	bl	800bdae <ld_dword>
 800c478:	4b06      	ldr	r3, [pc, #24]	; (800c494 <check_fs+0x74>)
 800c47a:	4298      	cmp	r0, r3
 800c47c:	d004      	beq.n	800c488 <check_fs+0x68>
	return 2;
 800c47e:	2502      	movs	r5, #2
 800c480:	e002      	b.n	800c488 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c482:	2504      	movs	r5, #4
 800c484:	e000      	b.n	800c488 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c486:	2503      	movs	r5, #3
}
 800c488:	4628      	mov	r0, r5
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	009000eb 	.word	0x009000eb
 800c490:	00544146 	.word	0x00544146
 800c494:	33544146 	.word	0x33544146

0800c498 <find_volume>:
{
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	b085      	sub	sp, #20
 800c49e:	460d      	mov	r5, r1
 800c4a0:	4616      	mov	r6, r2
	*rfs = 0;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800c4a6:	f7ff ff2e 	bl	800c306 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4aa:	1e07      	subs	r7, r0, #0
 800c4ac:	f2c0 8146 	blt.w	800c73c <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c4b0:	4bb6      	ldr	r3, [pc, #728]	; (800c78c <find_volume+0x2f4>)
 800c4b2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	f000 8145 	beq.w	800c746 <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 800c4bc:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c4be:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c4c2:	7823      	ldrb	r3, [r4, #0]
 800c4c4:	b173      	cbz	r3, 800c4e4 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800c4c6:	7860      	ldrb	r0, [r4, #1]
 800c4c8:	f7ff fc28 	bl	800bd1c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c4cc:	f010 0501 	ands.w	r5, r0, #1
 800c4d0:	d108      	bne.n	800c4e4 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c4d2:	2e00      	cmp	r6, #0
 800c4d4:	f000 8133 	beq.w	800c73e <find_volume+0x2a6>
 800c4d8:	f010 0f04 	tst.w	r0, #4
 800c4dc:	f000 812f 	beq.w	800c73e <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
 800c4e0:	250a      	movs	r5, #10
 800c4e2:	e12c      	b.n	800c73e <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c4e8:	b2f8      	uxtb	r0, r7
 800c4ea:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c4ec:	f7ff fc22 	bl	800bd34 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c4f0:	f010 0501 	ands.w	r5, r0, #1
 800c4f4:	f040 8129 	bne.w	800c74a <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c4f8:	b11e      	cbz	r6, 800c502 <find_volume+0x6a>
 800c4fa:	f010 0f04 	tst.w	r0, #4
 800c4fe:	f040 8126 	bne.w	800c74e <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c502:	2100      	movs	r1, #0
 800c504:	4620      	mov	r0, r4
 800c506:	f7ff ff8b 	bl	800c420 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c50a:	2802      	cmp	r0, #2
 800c50c:	f000 80b8 	beq.w	800c680 <find_volume+0x1e8>
	bsect = 0;
 800c510:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c512:	2804      	cmp	r0, #4
 800c514:	f000 811d 	beq.w	800c752 <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c518:	2801      	cmp	r0, #1
 800c51a:	f200 811c 	bhi.w	800c756 <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c51e:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 800c522:	f7ff fc3f 	bl	800bda4 <ld_word>
 800c526:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c52a:	f040 8116 	bne.w	800c75a <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c52e:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800c532:	f7ff fc37 	bl	800bda4 <ld_word>
 800c536:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c538:	b920      	cbnz	r0, 800c544 <find_volume+0xac>
 800c53a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c53e:	f7ff fc36 	bl	800bdae <ld_dword>
 800c542:	4606      	mov	r6, r0
		fs->fsize = fasize;
 800c544:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c546:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800c54a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c54c:	1e53      	subs	r3, r2, #1
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	2b01      	cmp	r3, #1
 800c552:	f200 8104 	bhi.w	800c75e <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c556:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c55a:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 800c55e:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c562:	f1b9 0f00 	cmp.w	r9, #0
 800c566:	f000 80fc 	beq.w	800c762 <find_volume+0x2ca>
 800c56a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c56e:	ea19 0f03 	tst.w	r9, r3
 800c572:	f040 80f8 	bne.w	800c766 <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c576:	f104 0045 	add.w	r0, r4, #69	; 0x45
 800c57a:	f7ff fc13 	bl	800bda4 <ld_word>
 800c57e:	4682      	mov	sl, r0
 800c580:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c582:	f010 0f0f 	tst.w	r0, #15
 800c586:	f040 80f0 	bne.w	800c76a <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c58a:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800c58e:	f7ff fc09 	bl	800bda4 <ld_word>
 800c592:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c594:	b920      	cbnz	r0, 800c5a0 <find_volume+0x108>
 800c596:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800c59a:	f7ff fc08 	bl	800bdae <ld_dword>
 800c59e:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c5a0:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800c5a4:	f7ff fbfe 	bl	800bda4 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f000 80df 	beq.w	800c76e <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c5b0:	eb00 0308 	add.w	r3, r0, r8
 800c5b4:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c5b8:	459b      	cmp	fp, r3
 800c5ba:	f0c0 80da 	bcc.w	800c772 <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c5be:	ebab 0b03 	sub.w	fp, fp, r3
 800c5c2:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c5c6:	45cb      	cmp	fp, r9
 800c5c8:	f0c0 80d5 	bcc.w	800c776 <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c5cc:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800c5d0:	4281      	cmp	r1, r0
 800c5d2:	d96d      	bls.n	800c6b0 <find_volume+0x218>
		fmt = FS_FAT32;
 800c5d4:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c5d8:	f640 70f5 	movw	r0, #4085	; 0xff5
 800c5dc:	4281      	cmp	r1, r0
 800c5de:	d801      	bhi.n	800c5e4 <find_volume+0x14c>
 800c5e0:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c5e4:	f101 0902 	add.w	r9, r1, #2
 800c5e8:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c5ec:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c5ee:	443a      	add	r2, r7
 800c5f0:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c5f2:	443b      	add	r3, r7
 800c5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c5f6:	f1bb 0f03 	cmp.w	fp, #3
 800c5fa:	d05c      	beq.n	800c6b6 <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c5fc:	f1ba 0f00 	cmp.w	sl, #0
 800c600:	f000 80bf 	beq.w	800c782 <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c604:	4442      	add	r2, r8
 800c606:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c608:	f1bb 0f02 	cmp.w	fp, #2
 800c60c:	d064      	beq.n	800c6d8 <find_volume+0x240>
 800c60e:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800c612:	f009 0901 	and.w	r9, r9, #1
 800c616:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c61a:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 800c61e:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 800c622:	f0c0 80b0 	bcc.w	800c786 <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c62a:	6163      	str	r3, [r4, #20]
 800c62c:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c62e:	2380      	movs	r3, #128	; 0x80
 800c630:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c632:	f1bb 0f03 	cmp.w	fp, #3
 800c636:	d052      	beq.n	800c6de <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
 800c638:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800c63c:	4a54      	ldr	r2, [pc, #336]	; (800c790 <find_volume+0x2f8>)
 800c63e:	8813      	ldrh	r3, [r2, #0]
 800c640:	3301      	adds	r3, #1
 800c642:	b29b      	uxth	r3, r3
 800c644:	8013      	strh	r3, [r2, #0]
 800c646:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c648:	4b52      	ldr	r3, [pc, #328]	; (800c794 <find_volume+0x2fc>)
 800c64a:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
 800c64c:	4620      	mov	r0, r4
 800c64e:	f7ff fcab 	bl	800bfa8 <clear_lock>
	return FR_OK;
 800c652:	e074      	b.n	800c73e <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c654:	2000      	movs	r0, #0
 800c656:	ab04      	add	r3, sp, #16
 800c658:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c65c:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c660:	3601      	adds	r6, #1
 800c662:	2e03      	cmp	r6, #3
 800c664:	d80e      	bhi.n	800c684 <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c666:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c66a:	0133      	lsls	r3, r6, #4
 800c66c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c670:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c672:	7903      	ldrb	r3, [r0, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d0ed      	beq.n	800c654 <find_volume+0x1bc>
 800c678:	3008      	adds	r0, #8
 800c67a:	f7ff fb98 	bl	800bdae <ld_dword>
 800c67e:	e7ea      	b.n	800c656 <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c680:	2600      	movs	r6, #0
 800c682:	e7ee      	b.n	800c662 <find_volume+0x1ca>
 800c684:	2600      	movs	r6, #0
 800c686:	e00a      	b.n	800c69e <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c688:	4639      	mov	r1, r7
 800c68a:	4620      	mov	r0, r4
 800c68c:	f7ff fec8 	bl	800c420 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c690:	2801      	cmp	r0, #1
 800c692:	f67f af3e 	bls.w	800c512 <find_volume+0x7a>
 800c696:	3601      	adds	r6, #1
 800c698:	2e03      	cmp	r6, #3
 800c69a:	f63f af3a 	bhi.w	800c512 <find_volume+0x7a>
			bsect = br[i];
 800c69e:	ab04      	add	r3, sp, #16
 800c6a0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c6a4:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c6a8:	2f00      	cmp	r7, #0
 800c6aa:	d1ed      	bne.n	800c688 <find_volume+0x1f0>
 800c6ac:	2003      	movs	r0, #3
 800c6ae:	e7f2      	b.n	800c696 <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c6b0:	f04f 0b02 	mov.w	fp, #2
 800c6b4:	e790      	b.n	800c5d8 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c6b6:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 800c6ba:	f7ff fb73 	bl	800bda4 <ld_word>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d15b      	bne.n	800c77a <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c6c2:	f1ba 0f00 	cmp.w	sl, #0
 800c6c6:	d15a      	bne.n	800c77e <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c6c8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c6cc:	f7ff fb6f 	bl	800bdae <ld_dword>
 800c6d0:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c6d2:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c6d6:	e7a0      	b.n	800c61a <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c6d8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c6dc:	e79d      	b.n	800c61a <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c6de:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800c6e2:	f7ff fb5f 	bl	800bda4 <ld_word>
 800c6e6:	2801      	cmp	r0, #1
 800c6e8:	d1a6      	bne.n	800c638 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c6ea:	1c79      	adds	r1, r7, #1
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f7ff fe7b 	bl	800c3e8 <move_window>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d1a0      	bne.n	800c638 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c6fa:	f204 2032 	addw	r0, r4, #562	; 0x232
 800c6fe:	f7ff fb51 	bl	800bda4 <ld_word>
 800c702:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c706:	4298      	cmp	r0, r3
 800c708:	d196      	bne.n	800c638 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c70a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c70e:	f7ff fb4e 	bl	800bdae <ld_dword>
 800c712:	4b21      	ldr	r3, [pc, #132]	; (800c798 <find_volume+0x300>)
 800c714:	4298      	cmp	r0, r3
 800c716:	d18f      	bne.n	800c638 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c718:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800c71c:	f7ff fb47 	bl	800bdae <ld_dword>
 800c720:	4b1e      	ldr	r3, [pc, #120]	; (800c79c <find_volume+0x304>)
 800c722:	4298      	cmp	r0, r3
 800c724:	d188      	bne.n	800c638 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c726:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800c72a:	f7ff fb40 	bl	800bdae <ld_dword>
 800c72e:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c730:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800c734:	f7ff fb3b 	bl	800bdae <ld_dword>
 800c738:	6120      	str	r0, [r4, #16]
 800c73a:	e77d      	b.n	800c638 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c73c:	250b      	movs	r5, #11
}
 800c73e:	4628      	mov	r0, r5
 800c740:	b005      	add	sp, #20
 800c742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c746:	250c      	movs	r5, #12
 800c748:	e7f9      	b.n	800c73e <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c74a:	2503      	movs	r5, #3
 800c74c:	e7f7      	b.n	800c73e <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
 800c74e:	250a      	movs	r5, #10
 800c750:	e7f5      	b.n	800c73e <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c752:	2501      	movs	r5, #1
 800c754:	e7f3      	b.n	800c73e <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c756:	250d      	movs	r5, #13
 800c758:	e7f1      	b.n	800c73e <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c75a:	250d      	movs	r5, #13
 800c75c:	e7ef      	b.n	800c73e <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c75e:	250d      	movs	r5, #13
 800c760:	e7ed      	b.n	800c73e <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c762:	250d      	movs	r5, #13
 800c764:	e7eb      	b.n	800c73e <find_volume+0x2a6>
 800c766:	250d      	movs	r5, #13
 800c768:	e7e9      	b.n	800c73e <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c76a:	250d      	movs	r5, #13
 800c76c:	e7e7      	b.n	800c73e <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c76e:	250d      	movs	r5, #13
 800c770:	e7e5      	b.n	800c73e <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c772:	250d      	movs	r5, #13
 800c774:	e7e3      	b.n	800c73e <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c776:	250d      	movs	r5, #13
 800c778:	e7e1      	b.n	800c73e <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c77a:	250d      	movs	r5, #13
 800c77c:	e7df      	b.n	800c73e <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c77e:	250d      	movs	r5, #13
 800c780:	e7dd      	b.n	800c73e <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c782:	250d      	movs	r5, #13
 800c784:	e7db      	b.n	800c73e <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c786:	250d      	movs	r5, #13
 800c788:	e7d9      	b.n	800c73e <find_volume+0x2a6>
 800c78a:	bf00      	nop
 800c78c:	2001dcd4 	.word	0x2001dcd4
 800c790:	2001dcf8 	.word	0x2001dcf8
 800c794:	2001dcfc 	.word	0x2001dcfc
 800c798:	41615252 	.word	0x41615252
 800c79c:	61417272 	.word	0x61417272

0800c7a0 <put_fat>:
{
 800c7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c7a4:	2901      	cmp	r1, #1
 800c7a6:	d97e      	bls.n	800c8a6 <put_fat+0x106>
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	6983      	ldr	r3, [r0, #24]
 800c7b0:	428b      	cmp	r3, r1
 800c7b2:	d97a      	bls.n	800c8aa <put_fat+0x10a>
		switch (fs->fs_type) {
 800c7b4:	7803      	ldrb	r3, [r0, #0]
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d045      	beq.n	800c846 <put_fat+0xa6>
 800c7ba:	2b03      	cmp	r3, #3
 800c7bc:	d057      	beq.n	800c86e <put_fat+0xce>
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d003      	beq.n	800c7ca <put_fat+0x2a>
 800c7c2:	2502      	movs	r5, #2
}
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800c7ca:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c7d0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800c7d4:	f7ff fe08 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800c7d8:	4605      	mov	r5, r0
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d1f2      	bne.n	800c7c4 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 800c7de:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 800c7e2:	f108 0901 	add.w	r9, r8, #1
 800c7e6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c7ea:	f014 0401 	ands.w	r4, r4, #1
 800c7ee:	d01f      	beq.n	800c830 <put_fat+0x90>
 800c7f0:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800c7f4:	f003 030f 	and.w	r3, r3, #15
 800c7f8:	0132      	lsls	r2, r6, #4
 800c7fa:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800c7fe:	4313      	orrs	r3, r2
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800c806:	2301      	movs	r3, #1
 800c808:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c80a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c80c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800c810:	4638      	mov	r0, r7
 800c812:	f7ff fde9 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800c816:	4605      	mov	r5, r0
 800c818:	2800      	cmp	r0, #0
 800c81a:	d1d3      	bne.n	800c7c4 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 800c81c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c820:	b144      	cbz	r4, 800c834 <put_fat+0x94>
 800c822:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800c826:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 800c82a:	2301      	movs	r3, #1
 800c82c:	70fb      	strb	r3, [r7, #3]
			break;
 800c82e:	e7c9      	b.n	800c7c4 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c830:	b2f3      	uxtb	r3, r6
 800c832:	e7e6      	b.n	800c802 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c834:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 800c838:	f023 030f 	bic.w	r3, r3, #15
 800c83c:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800c840:	4313      	orrs	r3, r2
 800c842:	b2db      	uxtb	r3, r3
 800c844:	e7ef      	b.n	800c826 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c846:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c848:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c84c:	f7ff fdcc 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800c850:	4605      	mov	r5, r0
 800c852:	2800      	cmp	r0, #0
 800c854:	d1b6      	bne.n	800c7c4 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c856:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c85a:	0064      	lsls	r4, r4, #1
 800c85c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c860:	b2b1      	uxth	r1, r6
 800c862:	4420      	add	r0, r4
 800c864:	f7ff faae 	bl	800bdc4 <st_word>
			fs->wflag = 1;
 800c868:	2301      	movs	r3, #1
 800c86a:	70fb      	strb	r3, [r7, #3]
			break;
 800c86c:	e7aa      	b.n	800c7c4 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c86e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c870:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c874:	f7ff fdb8 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800c878:	4605      	mov	r5, r0
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d1a2      	bne.n	800c7c4 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c87e:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800c882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c886:	00a4      	lsls	r4, r4, #2
 800c888:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c88c:	441c      	add	r4, r3
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fa8d 	bl	800bdae <ld_dword>
 800c894:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c898:	4331      	orrs	r1, r6
 800c89a:	4620      	mov	r0, r4
 800c89c:	f7ff fa96 	bl	800bdcc <st_dword>
			fs->wflag = 1;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	70fb      	strb	r3, [r7, #3]
			break;
 800c8a4:	e78e      	b.n	800c7c4 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800c8a6:	2502      	movs	r5, #2
 800c8a8:	e78c      	b.n	800c7c4 <put_fat+0x24>
 800c8aa:	2502      	movs	r5, #2
 800c8ac:	e78a      	b.n	800c7c4 <put_fat+0x24>

0800c8ae <get_fat>:
{
 800c8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800c8b0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8b2:	2901      	cmp	r1, #1
 800c8b4:	d956      	bls.n	800c964 <get_fat+0xb6>
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	69ab      	ldr	r3, [r5, #24]
 800c8ba:	428b      	cmp	r3, r1
 800c8bc:	d954      	bls.n	800c968 <get_fat+0xba>
		switch (fs->fs_type) {
 800c8be:	782b      	ldrb	r3, [r5, #0]
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d02d      	beq.n	800c920 <get_fat+0x72>
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d03b      	beq.n	800c940 <get_fat+0x92>
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d001      	beq.n	800c8d0 <get_fat+0x22>
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	e04a      	b.n	800c966 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 800c8d0:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c8d6:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c8da:	4628      	mov	r0, r5
 800c8dc:	f7ff fd84 	bl	800c3e8 <move_window>
 800c8e0:	b110      	cbz	r0, 800c8e8 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8e6:	e03e      	b.n	800c966 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800c8e8:	1c77      	adds	r7, r6, #1
 800c8ea:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c8ee:	442e      	add	r6, r5
 800c8f0:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c8f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c8f6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7ff fd74 	bl	800c3e8 <move_window>
 800c900:	bba0      	cbnz	r0, 800c96c <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c902:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800c906:	442f      	add	r7, r5
 800c908:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c90c:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c910:	f014 0f01 	tst.w	r4, #1
 800c914:	d001      	beq.n	800c91a <get_fat+0x6c>
 800c916:	0900      	lsrs	r0, r0, #4
 800c918:	e025      	b.n	800c966 <get_fat+0xb8>
 800c91a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c91e:	e022      	b.n	800c966 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c920:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c922:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c926:	4628      	mov	r0, r5
 800c928:	f7ff fd5e 	bl	800c3e8 <move_window>
 800c92c:	bb08      	cbnz	r0, 800c972 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c92e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c932:	0064      	lsls	r4, r4, #1
 800c934:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c938:	4420      	add	r0, r4
 800c93a:	f7ff fa33 	bl	800bda4 <ld_word>
			break;
 800c93e:	e012      	b.n	800c966 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c940:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c942:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c946:	4628      	mov	r0, r5
 800c948:	f7ff fd4e 	bl	800c3e8 <move_window>
 800c94c:	b9a0      	cbnz	r0, 800c978 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c94e:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c952:	00a4      	lsls	r4, r4, #2
 800c954:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c958:	4420      	add	r0, r4
 800c95a:	f7ff fa28 	bl	800bdae <ld_dword>
 800c95e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800c962:	e000      	b.n	800c966 <get_fat+0xb8>
		val = 1;	/* Internal error */
 800c964:	2001      	movs	r0, #1
}
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800c968:	2001      	movs	r0, #1
 800c96a:	e7fc      	b.n	800c966 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c970:	e7f9      	b.n	800c966 <get_fat+0xb8>
 800c972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c976:	e7f6      	b.n	800c966 <get_fat+0xb8>
 800c978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 800c97c:	e7f3      	b.n	800c966 <get_fat+0xb8>

0800c97e <dir_sdi>:
{
 800c97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c982:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c986:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c98a:	d240      	bcs.n	800ca0e <dir_sdi+0x90>
 800c98c:	4606      	mov	r6, r0
 800c98e:	460f      	mov	r7, r1
 800c990:	f011 0f1f 	tst.w	r1, #31
 800c994:	d13d      	bne.n	800ca12 <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 800c996:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c998:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c99a:	b92c      	cbnz	r4, 800c9a8 <dir_sdi+0x2a>
 800c99c:	f898 3000 	ldrb.w	r3, [r8]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d901      	bls.n	800c9a8 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800c9a4:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c9a8:	b9b4      	cbnz	r4, 800c9d8 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c9aa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c9ae:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800c9b2:	d930      	bls.n	800ca16 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 800c9b4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c9b8:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800c9ba:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c9bc:	69f3      	ldr	r3, [r6, #28]
 800c9be:	b393      	cbz	r3, 800ca26 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c9c0:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800c9c4:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c9c6:	f108 0334 	add.w	r3, r8, #52	; 0x34
 800c9ca:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800c9ce:	440b      	add	r3, r1
 800c9d0:	6233      	str	r3, [r6, #32]
	return FR_OK;
 800c9d2:	2000      	movs	r0, #0
}
 800c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c9d8:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800c9dc:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9de:	42af      	cmp	r7, r5
 800c9e0:	d30f      	bcc.n	800ca02 <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9e2:	4621      	mov	r1, r4
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff ff62 	bl	800c8ae <get_fat>
 800c9ea:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c9f0:	d013      	beq.n	800ca1a <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c9f2:	2801      	cmp	r0, #1
 800c9f4:	d913      	bls.n	800ca1e <dir_sdi+0xa0>
 800c9f6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c9fa:	4283      	cmp	r3, r0
 800c9fc:	d911      	bls.n	800ca22 <dir_sdi+0xa4>
			ofs -= csz;
 800c9fe:	1b7f      	subs	r7, r7, r5
 800ca00:	e7ed      	b.n	800c9de <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 800ca02:	4621      	mov	r1, r4
 800ca04:	4640      	mov	r0, r8
 800ca06:	f7ff faed 	bl	800bfe4 <clust2sect>
 800ca0a:	61f0      	str	r0, [r6, #28]
 800ca0c:	e7d5      	b.n	800c9ba <dir_sdi+0x3c>
		return FR_INT_ERR;
 800ca0e:	2002      	movs	r0, #2
 800ca10:	e7e0      	b.n	800c9d4 <dir_sdi+0x56>
 800ca12:	2002      	movs	r0, #2
 800ca14:	e7de      	b.n	800c9d4 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca16:	2002      	movs	r0, #2
 800ca18:	e7dc      	b.n	800c9d4 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	e7da      	b.n	800c9d4 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca1e:	2002      	movs	r0, #2
 800ca20:	e7d8      	b.n	800c9d4 <dir_sdi+0x56>
 800ca22:	2002      	movs	r0, #2
 800ca24:	e7d6      	b.n	800c9d4 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 800ca26:	2002      	movs	r0, #2
 800ca28:	e7d4      	b.n	800c9d4 <dir_sdi+0x56>

0800ca2a <create_chain>:
{
 800ca2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2e:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 800ca30:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800ca32:	460f      	mov	r7, r1
 800ca34:	b951      	cbnz	r1, 800ca4c <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca36:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca3a:	f1b8 0f00 	cmp.w	r8, #0
 800ca3e:	d012      	beq.n	800ca66 <create_chain+0x3c>
 800ca40:	69b3      	ldr	r3, [r6, #24]
 800ca42:	4543      	cmp	r3, r8
 800ca44:	d811      	bhi.n	800ca6a <create_chain+0x40>
 800ca46:	f04f 0801 	mov.w	r8, #1
 800ca4a:	e00e      	b.n	800ca6a <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca4c:	f7ff ff2f 	bl	800c8ae <get_fat>
 800ca50:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca52:	2801      	cmp	r0, #1
 800ca54:	d94c      	bls.n	800caf0 <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ca5a:	d04e      	beq.n	800cafa <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca5c:	69b2      	ldr	r2, [r6, #24]
 800ca5e:	4282      	cmp	r2, r0
 800ca60:	d84b      	bhi.n	800cafa <create_chain+0xd0>
		scl = clst;
 800ca62:	46b8      	mov	r8, r7
 800ca64:	e001      	b.n	800ca6a <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca66:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 800ca6a:	4644      	mov	r4, r8
 800ca6c:	e00c      	b.n	800ca88 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4628      	mov	r0, r5
 800ca72:	f7ff ff1c 	bl	800c8ae <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800ca76:	4603      	mov	r3, r0
 800ca78:	b178      	cbz	r0, 800ca9a <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ca7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ca7e:	bf18      	it	ne
 800ca80:	2801      	cmpne	r0, #1
 800ca82:	d03a      	beq.n	800cafa <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800ca84:	4544      	cmp	r4, r8
 800ca86:	d037      	beq.n	800caf8 <create_chain+0xce>
			ncl++;							/* Next cluster */
 800ca88:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca8a:	69b3      	ldr	r3, [r6, #24]
 800ca8c:	42a3      	cmp	r3, r4
 800ca8e:	d8ee      	bhi.n	800ca6e <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 800ca90:	f1b8 0f01 	cmp.w	r8, #1
 800ca94:	d92e      	bls.n	800caf4 <create_chain+0xca>
				ncl = 2;
 800ca96:	2402      	movs	r4, #2
 800ca98:	e7e9      	b.n	800ca6e <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ca9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4630      	mov	r0, r6
 800caa2:	f7ff fe7d 	bl	800c7a0 <put_fat>
		if (res == FR_OK && clst != 0) {
 800caa6:	4602      	mov	r2, r0
 800caa8:	fab0 f080 	clz	r0, r0
 800caac:	0940      	lsrs	r0, r0, #5
 800caae:	2f00      	cmp	r7, #0
 800cab0:	bf08      	it	eq
 800cab2:	2000      	moveq	r0, #0
 800cab4:	b970      	cbnz	r0, 800cad4 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cab6:	b9a2      	cbnz	r2, 800cae2 <create_chain+0xb8>
		fs->last_clst = ncl;
 800cab8:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800caba:	6972      	ldr	r2, [r6, #20]
 800cabc:	69b3      	ldr	r3, [r6, #24]
 800cabe:	3b02      	subs	r3, #2
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d801      	bhi.n	800cac8 <create_chain+0x9e>
 800cac4:	3a01      	subs	r2, #1
 800cac6:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 800cac8:	7933      	ldrb	r3, [r6, #4]
 800caca:	f043 0301 	orr.w	r3, r3, #1
 800cace:	7133      	strb	r3, [r6, #4]
 800cad0:	4623      	mov	r3, r4
 800cad2:	e012      	b.n	800cafa <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cad4:	4622      	mov	r2, r4
 800cad6:	4639      	mov	r1, r7
 800cad8:	4630      	mov	r0, r6
 800cada:	f7ff fe61 	bl	800c7a0 <put_fat>
 800cade:	4602      	mov	r2, r0
 800cae0:	e7e9      	b.n	800cab6 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cae2:	2a01      	cmp	r2, #1
 800cae4:	d001      	beq.n	800caea <create_chain+0xc0>
 800cae6:	2301      	movs	r3, #1
 800cae8:	e007      	b.n	800cafa <create_chain+0xd0>
 800caea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caee:	e004      	b.n	800cafa <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800caf0:	2301      	movs	r3, #1
 800caf2:	e002      	b.n	800cafa <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 800caf4:	2300      	movs	r3, #0
 800caf6:	e000      	b.n	800cafa <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb00 <remove_chain>:
{
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800cb04:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb06:	2901      	cmp	r1, #1
 800cb08:	d92e      	bls.n	800cb68 <remove_chain+0x68>
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	69ab      	ldr	r3, [r5, #24]
 800cb10:	42a3      	cmp	r3, r4
 800cb12:	d92b      	bls.n	800cb6c <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb14:	b14a      	cbz	r2, 800cb2a <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f7ff fe40 	bl	800c7a0 <put_fat>
		if (res != FR_OK) return res;
 800cb20:	4607      	mov	r7, r0
 800cb22:	b110      	cbz	r0, 800cb2a <remove_chain+0x2a>
 800cb24:	e023      	b.n	800cb6e <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb26:	42a2      	cmp	r2, r4
 800cb28:	d921      	bls.n	800cb6e <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb2a:	4627      	mov	r7, r4
 800cb2c:	4621      	mov	r1, r4
 800cb2e:	4630      	mov	r0, r6
 800cb30:	f7ff febd 	bl	800c8ae <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800cb34:	4604      	mov	r4, r0
 800cb36:	b1e0      	cbz	r0, 800cb72 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb38:	2801      	cmp	r0, #1
 800cb3a:	d01c      	beq.n	800cb76 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cb40:	d01b      	beq.n	800cb7a <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb42:	2200      	movs	r2, #0
 800cb44:	4639      	mov	r1, r7
 800cb46:	4628      	mov	r0, r5
 800cb48:	f7ff fe2a 	bl	800c7a0 <put_fat>
			if (res != FR_OK) return res;
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	b970      	cbnz	r0, 800cb6e <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb50:	696b      	ldr	r3, [r5, #20]
 800cb52:	69aa      	ldr	r2, [r5, #24]
 800cb54:	1e91      	subs	r1, r2, #2
 800cb56:	428b      	cmp	r3, r1
 800cb58:	d2e5      	bcs.n	800cb26 <remove_chain+0x26>
			fs->free_clst++;
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800cb5e:	792b      	ldrb	r3, [r5, #4]
 800cb60:	f043 0301 	orr.w	r3, r3, #1
 800cb64:	712b      	strb	r3, [r5, #4]
 800cb66:	e7de      	b.n	800cb26 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb68:	2702      	movs	r7, #2
 800cb6a:	e000      	b.n	800cb6e <remove_chain+0x6e>
 800cb6c:	2702      	movs	r7, #2
}
 800cb6e:	4638      	mov	r0, r7
 800cb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800cb72:	2700      	movs	r7, #0
 800cb74:	e7fb      	b.n	800cb6e <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb76:	2702      	movs	r7, #2
 800cb78:	e7f9      	b.n	800cb6e <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb7a:	2701      	movs	r7, #1
 800cb7c:	e7f7      	b.n	800cb6e <remove_chain+0x6e>

0800cb7e <dir_next>:
{
 800cb7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 800cb82:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cb84:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cb86:	69c3      	ldr	r3, [r0, #28]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d06c      	beq.n	800cc66 <dir_next+0xe8>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	4688      	mov	r8, r1
 800cb90:	3520      	adds	r5, #32
 800cb92:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800cb96:	d268      	bcs.n	800cc6a <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cb98:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800cb9c:	b93f      	cbnz	r7, 800cbae <dir_next+0x30>
		dp->sect++;				/* Next sector */
 800cb9e:	3301      	adds	r3, #1
 800cba0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800cba2:	6981      	ldr	r1, [r0, #24]
 800cba4:	b979      	cbnz	r1, 800cbc6 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cba6:	8933      	ldrh	r3, [r6, #8]
 800cba8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800cbac:	d907      	bls.n	800cbbe <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 800cbae:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbb0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800cbb4:	443b      	add	r3, r7
 800cbb6:	6223      	str	r3, [r4, #32]
	return FR_OK;
 800cbb8:	2000      	movs	r0, #0
}
 800cbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	61c3      	str	r3, [r0, #28]
 800cbc2:	2004      	movs	r0, #4
 800cbc4:	e7f9      	b.n	800cbba <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cbc6:	8973      	ldrh	r3, [r6, #10]
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800cbce:	d1ee      	bne.n	800cbae <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cbd0:	f7ff fe6d 	bl	800c8ae <get_fat>
 800cbd4:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cbd6:	2801      	cmp	r0, #1
 800cbd8:	d949      	bls.n	800cc6e <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cbda:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cbde:	d048      	beq.n	800cc72 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cbe0:	69b3      	ldr	r3, [r6, #24]
 800cbe2:	4283      	cmp	r3, r0
 800cbe4:	d837      	bhi.n	800cc56 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800cbe6:	f1b8 0f00 	cmp.w	r8, #0
 800cbea:	d011      	beq.n	800cc10 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cbec:	69a1      	ldr	r1, [r4, #24]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f7ff ff1b 	bl	800ca2a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cbf4:	4682      	mov	sl, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d03d      	beq.n	800cc76 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cbfa:	2801      	cmp	r0, #1
 800cbfc:	d03d      	beq.n	800cc7a <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cbfe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cc02:	d03c      	beq.n	800cc7e <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cc04:	4630      	mov	r0, r6
 800cc06:	f7ff fbc5 	bl	800c394 <sync_window>
 800cc0a:	b128      	cbz	r0, 800cc18 <dir_next+0x9a>
 800cc0c:	2001      	movs	r0, #1
 800cc0e:	e7d4      	b.n	800cbba <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 800cc10:	2300      	movs	r3, #0
 800cc12:	61e3      	str	r3, [r4, #28]
 800cc14:	2004      	movs	r0, #4
 800cc16:	e7d0      	b.n	800cbba <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cc18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	f106 0034 	add.w	r0, r6, #52	; 0x34
 800cc22:	f7ff f8e7 	bl	800bdf4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc26:	4651      	mov	r1, sl
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7ff f9db 	bl	800bfe4 <clust2sect>
 800cc2e:	6330      	str	r0, [r6, #48]	; 0x30
 800cc30:	8973      	ldrh	r3, [r6, #10]
 800cc32:	4599      	cmp	r9, r3
 800cc34:	d20b      	bcs.n	800cc4e <dir_next+0xd0>
						fs->wflag = 1;
 800cc36:	2301      	movs	r3, #1
 800cc38:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f7ff fbaa 	bl	800c394 <sync_window>
 800cc40:	b9f8      	cbnz	r0, 800cc82 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cc42:	f109 0901 	add.w	r9, r9, #1
 800cc46:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800cc48:	3301      	adds	r3, #1
 800cc4a:	6333      	str	r3, [r6, #48]	; 0x30
 800cc4c:	e7f0      	b.n	800cc30 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 800cc4e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800cc50:	eba3 0309 	sub.w	r3, r3, r9
 800cc54:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800cc56:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800cc5a:	4651      	mov	r1, sl
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7ff f9c1 	bl	800bfe4 <clust2sect>
 800cc62:	61e0      	str	r0, [r4, #28]
 800cc64:	e7a3      	b.n	800cbae <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cc66:	2004      	movs	r0, #4
 800cc68:	e7a7      	b.n	800cbba <dir_next+0x3c>
 800cc6a:	2004      	movs	r0, #4
 800cc6c:	e7a5      	b.n	800cbba <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cc6e:	2002      	movs	r0, #2
 800cc70:	e7a3      	b.n	800cbba <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cc72:	2001      	movs	r0, #1
 800cc74:	e7a1      	b.n	800cbba <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cc76:	2007      	movs	r0, #7
 800cc78:	e79f      	b.n	800cbba <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cc7a:	2002      	movs	r0, #2
 800cc7c:	e79d      	b.n	800cbba <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e79b      	b.n	800cbba <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cc82:	2001      	movs	r0, #1
 800cc84:	e799      	b.n	800cbba <dir_next+0x3c>

0800cc86 <dir_alloc>:
{
 800cc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc88:	4604      	mov	r4, r0
 800cc8a:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800cc8c:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800cc8e:	2100      	movs	r1, #0
 800cc90:	f7ff fe75 	bl	800c97e <dir_sdi>
	if (res == FR_OK) {
 800cc94:	4602      	mov	r2, r0
 800cc96:	b9b8      	cbnz	r0, 800ccc8 <dir_alloc+0x42>
		n = 0;
 800cc98:	2500      	movs	r5, #0
 800cc9a:	e006      	b.n	800ccaa <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 800cc9c:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800cc9e:	2101      	movs	r1, #1
 800cca0:	4620      	mov	r0, r4
 800cca2:	f7ff ff6c 	bl	800cb7e <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cca6:	4602      	mov	r2, r0
 800cca8:	b970      	cbnz	r0, 800ccc8 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 800ccaa:	69e1      	ldr	r1, [r4, #28]
 800ccac:	4638      	mov	r0, r7
 800ccae:	f7ff fb9b 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	b940      	cbnz	r0, 800ccc8 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ccb6:	6a23      	ldr	r3, [r4, #32]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	bf18      	it	ne
 800ccbe:	2be5      	cmpne	r3, #229	; 0xe5
 800ccc0:	d1ec      	bne.n	800cc9c <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ccc2:	3501      	adds	r5, #1
 800ccc4:	42b5      	cmp	r5, r6
 800ccc6:	d1ea      	bne.n	800cc9e <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ccc8:	2a04      	cmp	r2, #4
 800ccca:	d001      	beq.n	800ccd0 <dir_alloc+0x4a>
}
 800cccc:	4610      	mov	r0, r2
 800ccce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ccd0:	2207      	movs	r2, #7
 800ccd2:	e7fb      	b.n	800cccc <dir_alloc+0x46>

0800ccd4 <dir_read>:
{
 800ccd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd8:	4604      	mov	r4, r0
 800ccda:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800ccdc:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800ccde:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800cce2:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 800cce4:	2504      	movs	r5, #4
	while (dp->sect) {
 800cce6:	e02c      	b.n	800cd42 <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cce8:	2b0f      	cmp	r3, #15
 800ccea:	d119      	bne.n	800cd20 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ccec:	f012 0f40 	tst.w	r2, #64	; 0x40
 800ccf0:	d006      	beq.n	800cd00 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 800ccf2:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800ccf6:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800ccfa:	6963      	ldr	r3, [r4, #20]
 800ccfc:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800ccfe:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd00:	42b2      	cmp	r2, r6
 800cd02:	d001      	beq.n	800cd08 <dir_read+0x34>
 800cd04:	26ff      	movs	r6, #255	; 0xff
 800cd06:	e016      	b.n	800cd36 <dir_read+0x62>
 800cd08:	7b4b      	ldrb	r3, [r1, #13]
 800cd0a:	454b      	cmp	r3, r9
 800cd0c:	d001      	beq.n	800cd12 <dir_read+0x3e>
 800cd0e:	26ff      	movs	r6, #255	; 0xff
 800cd10:	e011      	b.n	800cd36 <dir_read+0x62>
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f7ff f9aa 	bl	800c06c <pick_lfn>
 800cd18:	b378      	cbz	r0, 800cd7a <dir_read+0xa6>
 800cd1a:	3e01      	subs	r6, #1
 800cd1c:	b2f6      	uxtb	r6, r6
 800cd1e:	e00a      	b.n	800cd36 <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cd20:	b926      	cbnz	r6, 800cd2c <dir_read+0x58>
 800cd22:	4608      	mov	r0, r1
 800cd24:	f7ff fa75 	bl	800c212 <sum_sfn>
 800cd28:	4548      	cmp	r0, r9
 800cd2a:	d029      	beq.n	800cd80 <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cd2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd30:	6323      	str	r3, [r4, #48]	; 0x30
 800cd32:	e025      	b.n	800cd80 <dir_read+0xac>
				ord = 0xFF;
 800cd34:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800cd36:	2100      	movs	r1, #0
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f7ff ff20 	bl	800cb7e <dir_next>
		if (res != FR_OK) break;
 800cd3e:	4605      	mov	r5, r0
 800cd40:	b9f0      	cbnz	r0, 800cd80 <dir_read+0xac>
	while (dp->sect) {
 800cd42:	69e1      	ldr	r1, [r4, #28]
 800cd44:	b1e1      	cbz	r1, 800cd80 <dir_read+0xac>
		res = move_window(fs, dp->sect);
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7ff fb4e 	bl	800c3e8 <move_window>
		if (res != FR_OK) break;
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	b9b8      	cbnz	r0, 800cd80 <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cd50:	6a21      	ldr	r1, [r4, #32]
 800cd52:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800cd54:	b19a      	cbz	r2, 800cd7e <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd56:	7acb      	ldrb	r3, [r1, #11]
 800cd58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd5c:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cd5e:	2a2e      	cmp	r2, #46	; 0x2e
 800cd60:	bf18      	it	ne
 800cd62:	2ae5      	cmpne	r2, #229	; 0xe5
 800cd64:	d0e6      	beq.n	800cd34 <dir_read+0x60>
 800cd66:	f023 0020 	bic.w	r0, r3, #32
 800cd6a:	2808      	cmp	r0, #8
 800cd6c:	bf14      	ite	ne
 800cd6e:	2000      	movne	r0, #0
 800cd70:	2001      	moveq	r0, #1
 800cd72:	4540      	cmp	r0, r8
 800cd74:	d0b8      	beq.n	800cce8 <dir_read+0x14>
				ord = 0xFF;
 800cd76:	26ff      	movs	r6, #255	; 0xff
 800cd78:	e7dd      	b.n	800cd36 <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd7a:	26ff      	movs	r6, #255	; 0xff
 800cd7c:	e7db      	b.n	800cd36 <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cd7e:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cd80:	b10d      	cbz	r5, 800cd86 <dir_read+0xb2>
 800cd82:	2300      	movs	r3, #0
 800cd84:	61e3      	str	r3, [r4, #28]
}
 800cd86:	4628      	mov	r0, r5
 800cd88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cd8c <dir_remove>:
{
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800cd90:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 800cd92:	6946      	ldr	r6, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800cd94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800cd96:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cd9a:	d118      	bne.n	800cdce <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 800cd9c:	69e1      	ldr	r1, [r4, #28]
 800cd9e:	4628      	mov	r0, r5
 800cda0:	f7ff fb22 	bl	800c3e8 <move_window>
			if (res != FR_OK) break;
 800cda4:	4603      	mov	r3, r0
 800cda6:	b970      	cbnz	r0, 800cdc6 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 800cda8:	6a22      	ldr	r2, [r4, #32]
 800cdaa:	21e5      	movs	r1, #229	; 0xe5
 800cdac:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 800cdae:	2201      	movs	r2, #1
 800cdb0:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800cdb2:	6962      	ldr	r2, [r4, #20]
 800cdb4:	42b2      	cmp	r2, r6
 800cdb6:	d206      	bcs.n	800cdc6 <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 800cdb8:	2100      	movs	r1, #0
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f7ff fedf 	bl	800cb7e <dir_next>
		} while (res == FR_OK);
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0ea      	beq.n	800cd9c <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800cdc6:	2b04      	cmp	r3, #4
 800cdc8:	d007      	beq.n	800cdda <dir_remove+0x4e>
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800cdce:	f7ff fdd6 	bl	800c97e <dir_sdi>
	if (res == FR_OK) {
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d1f8      	bne.n	800cdca <dir_remove+0x3e>
 800cdd8:	e7e0      	b.n	800cd9c <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800cdda:	2302      	movs	r3, #2
 800cddc:	e7f5      	b.n	800cdca <dir_remove+0x3e>
	...

0800cde0 <create_name>:
{
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	b083      	sub	sp, #12
 800cde6:	4680      	mov	r8, r0
 800cde8:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cdea:	f8d1 9000 	ldr.w	r9, [r1]
 800cdee:	6803      	ldr	r3, [r0, #0]
 800cdf0:	68dd      	ldr	r5, [r3, #12]
 800cdf2:	2400      	movs	r4, #0
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	e01d      	b.n	800ce34 <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cdf8:	3701      	adds	r7, #1
 800cdfa:	f819 3007 	ldrb.w	r3, [r9, r7]
 800cdfe:	2b2f      	cmp	r3, #47	; 0x2f
 800ce00:	d0fa      	beq.n	800cdf8 <create_name+0x18>
 800ce02:	2b5c      	cmp	r3, #92	; 0x5c
 800ce04:	d0f8      	beq.n	800cdf8 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800ce06:	444f      	add	r7, r9
 800ce08:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce0c:	281f      	cmp	r0, #31
 800ce0e:	d82e      	bhi.n	800ce6e <create_name+0x8e>
 800ce10:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce14:	b374      	cbz	r4, 800ce74 <create_name+0x94>
		w = lfn[di - 1];
 800ce16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ce1a:	4423      	add	r3, r4
 800ce1c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	bf18      	it	ne
 800ce24:	2b2e      	cmpne	r3, #46	; 0x2e
 800ce26:	d125      	bne.n	800ce74 <create_name+0x94>
		di--;
 800ce28:	3c01      	subs	r4, #1
 800ce2a:	e7f3      	b.n	800ce14 <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 800ce2c:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800ce30:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800ce32:	463b      	mov	r3, r7
 800ce34:	1c5f      	adds	r7, r3, #1
 800ce36:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 800ce3a:	281f      	cmp	r0, #31
 800ce3c:	d9e3      	bls.n	800ce06 <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ce3e:	285c      	cmp	r0, #92	; 0x5c
 800ce40:	bf18      	it	ne
 800ce42:	282f      	cmpne	r0, #47	; 0x2f
 800ce44:	d0d9      	beq.n	800cdfa <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ce46:	2cfe      	cmp	r4, #254	; 0xfe
 800ce48:	f200 80d7 	bhi.w	800cffa <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ce4c:	2101      	movs	r1, #1
 800ce4e:	f000 fff7 	bl	800de40 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ce52:	4606      	mov	r6, r0
 800ce54:	2800      	cmp	r0, #0
 800ce56:	f000 80d2 	beq.w	800cffe <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ce5a:	287f      	cmp	r0, #127	; 0x7f
 800ce5c:	d8e6      	bhi.n	800ce2c <create_name+0x4c>
 800ce5e:	4601      	mov	r1, r0
 800ce60:	4869      	ldr	r0, [pc, #420]	; (800d008 <create_name+0x228>)
 800ce62:	f7fe ffd9 	bl	800be18 <chk_chr>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	d0e0      	beq.n	800ce2c <create_name+0x4c>
 800ce6a:	2006      	movs	r0, #6
 800ce6c:	e06f      	b.n	800cf4e <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ce6e:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce72:	e7cf      	b.n	800ce14 <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 800ce74:	2300      	movs	r3, #0
 800ce76:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	f000 80c1 	beq.w	800d002 <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
 800ce80:	220b      	movs	r2, #11
 800ce82:	2120      	movs	r1, #32
 800ce84:	f108 0024 	add.w	r0, r8, #36	; 0x24
 800ce88:	f7fe ffb4 	bl	800bdf4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	e000      	b.n	800ce92 <create_name+0xb2>
 800ce90:	3301      	adds	r3, #1
 800ce92:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800ce96:	2a20      	cmp	r2, #32
 800ce98:	d0fa      	beq.n	800ce90 <create_name+0xb0>
 800ce9a:	2a2e      	cmp	r2, #46	; 0x2e
 800ce9c:	d0f8      	beq.n	800ce90 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ce9e:	b11b      	cbz	r3, 800cea8 <create_name+0xc8>
 800cea0:	f049 0903 	orr.w	r9, r9, #3
 800cea4:	e000      	b.n	800cea8 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cea6:	3c01      	subs	r4, #1
 800cea8:	b16c      	cbz	r4, 800cec6 <create_name+0xe6>
 800ceaa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ceae:	4422      	add	r2, r4
 800ceb0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800ceb4:	2a2e      	cmp	r2, #46	; 0x2e
 800ceb6:	d1f6      	bne.n	800cea6 <create_name+0xc6>
 800ceb8:	f04f 0b08 	mov.w	fp, #8
 800cebc:	f04f 0a00 	mov.w	sl, #0
 800cec0:	f8cd a004 	str.w	sl, [sp, #4]
 800cec4:	e008      	b.n	800ced8 <create_name+0xf8>
 800cec6:	46a2      	mov	sl, r4
 800cec8:	f04f 0b08 	mov.w	fp, #8
 800cecc:	2200      	movs	r2, #0
 800cece:	9201      	str	r2, [sp, #4]
 800ced0:	e002      	b.n	800ced8 <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
 800ced2:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
 800ced6:	463b      	mov	r3, r7
 800ced8:	1c5f      	adds	r7, r3, #1
 800ceda:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800cede:	b1be      	cbz	r6, 800cf10 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cee0:	2e20      	cmp	r6, #32
 800cee2:	d0f6      	beq.n	800ced2 <create_name+0xf2>
 800cee4:	2e2e      	cmp	r6, #46	; 0x2e
 800cee6:	bf14      	ite	ne
 800cee8:	2300      	movne	r3, #0
 800ceea:	2301      	moveq	r3, #1
 800ceec:	42bc      	cmp	r4, r7
 800ceee:	bf08      	it	eq
 800cef0:	2300      	moveq	r3, #0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1ed      	bne.n	800ced2 <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cef6:	42bc      	cmp	r4, r7
 800cef8:	bf18      	it	ne
 800cefa:	45da      	cmpne	sl, fp
 800cefc:	d337      	bcc.n	800cf6e <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
 800cefe:	f1bb 0f0b 	cmp.w	fp, #11
 800cf02:	d027      	beq.n	800cf54 <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cf04:	42bc      	cmp	r4, r7
 800cf06:	d001      	beq.n	800cf0c <create_name+0x12c>
 800cf08:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 800cf0c:	42bc      	cmp	r4, r7
 800cf0e:	d224      	bcs.n	800cf5a <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cf10:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 800cf14:	2be5      	cmp	r3, #229	; 0xe5
 800cf16:	d061      	beq.n	800cfdc <create_name+0x1fc>
	if (ni == 8) b <<= 2;
 800cf18:	f1bb 0f08 	cmp.w	fp, #8
 800cf1c:	d062      	beq.n	800cfe4 <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	f003 020c 	and.w	r2, r3, #12
 800cf24:	2a0c      	cmp	r2, #12
 800cf26:	d003      	beq.n	800cf30 <create_name+0x150>
 800cf28:	f003 0303 	and.w	r3, r3, #3
 800cf2c:	2b03      	cmp	r3, #3
 800cf2e:	d101      	bne.n	800cf34 <create_name+0x154>
 800cf30:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cf34:	f019 0f02 	tst.w	r9, #2
 800cf38:	d106      	bne.n	800cf48 <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cf3a:	9b01      	ldr	r3, [sp, #4]
 800cf3c:	f003 0303 	and.w	r3, r3, #3
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d054      	beq.n	800cfee <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cf44:	2a04      	cmp	r2, #4
 800cf46:	d055      	beq.n	800cff4 <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cf48:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
 800cf4c:	2000      	movs	r0, #0
}
 800cf4e:	b003      	add	sp, #12
 800cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800cf54:	f049 0903 	orr.w	r9, r9, #3
 800cf58:	e7da      	b.n	800cf10 <create_name+0x130>
			b <<= 2; continue;
 800cf5a:	9b01      	ldr	r3, [sp, #4]
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cf62:	4623      	mov	r3, r4
 800cf64:	f04f 0b0b 	mov.w	fp, #11
 800cf68:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800cf6c:	e7b4      	b.n	800ced8 <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
 800cf6e:	2e7f      	cmp	r6, #127	; 0x7f
 800cf70:	d80b      	bhi.n	800cf8a <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cf72:	b9be      	cbnz	r6, 800cfa4 <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cf74:	f049 0903 	orr.w	r9, r9, #3
 800cf78:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800cf7a:	eb08 030a 	add.w	r3, r8, sl
 800cf7e:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cf82:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 800cf84:	f10a 0a01 	add.w	sl, sl, #1
 800cf88:	e7a6      	b.n	800ced8 <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f000 ff57 	bl	800de40 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cf92:	4606      	mov	r6, r0
 800cf94:	b118      	cbz	r0, 800cf9e <create_name+0x1be>
 800cf96:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800cf9a:	4b1c      	ldr	r3, [pc, #112]	; (800d00c <create_name+0x22c>)
 800cf9c:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800cf9e:	f049 0902 	orr.w	r9, r9, #2
 800cfa2:	e7e6      	b.n	800cf72 <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	481a      	ldr	r0, [pc, #104]	; (800d010 <create_name+0x230>)
 800cfa8:	f7fe ff36 	bl	800be18 <chk_chr>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d1e1      	bne.n	800cf74 <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 800cfb0:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	2b19      	cmp	r3, #25
 800cfb8:	d804      	bhi.n	800cfc4 <create_name+0x1e4>
					b |= 2;
 800cfba:	9b01      	ldr	r3, [sp, #4]
 800cfbc:	f043 0302 	orr.w	r3, r3, #2
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	e7da      	b.n	800cf7a <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
 800cfc4:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	2b19      	cmp	r3, #25
 800cfcc:	d8d5      	bhi.n	800cf7a <create_name+0x19a>
						b |= 1; w -= 0x20;
 800cfce:	9b01      	ldr	r3, [sp, #4]
 800cfd0:	f043 0301 	orr.w	r3, r3, #1
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	3e20      	subs	r6, #32
 800cfd8:	b2b6      	uxth	r6, r6
 800cfda:	e7ce      	b.n	800cf7a <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cfdc:	2305      	movs	r3, #5
 800cfde:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 800cfe2:	e799      	b.n	800cf18 <create_name+0x138>
	if (ni == 8) b <<= 2;
 800cfe4:	9b01      	ldr	r3, [sp, #4]
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	e797      	b.n	800cf1e <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cfee:	f049 0910 	orr.w	r9, r9, #16
 800cff2:	e7a7      	b.n	800cf44 <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cff4:	f049 0908 	orr.w	r9, r9, #8
 800cff8:	e7a6      	b.n	800cf48 <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cffa:	2006      	movs	r0, #6
 800cffc:	e7a7      	b.n	800cf4e <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cffe:	2006      	movs	r0, #6
 800d000:	e7a5      	b.n	800cf4e <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d002:	2006      	movs	r0, #6
 800d004:	e7a3      	b.n	800cf4e <create_name+0x16e>
 800d006:	bf00      	nop
 800d008:	0801acf8 	.word	0x0801acf8
 800d00c:	0801ad0c 	.word	0x0801ad0c
 800d010:	0801ad04 	.word	0x0801ad04

0800d014 <get_fileinfo>:
{
 800d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800d018:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800d01c:	2300      	movs	r3, #0
 800d01e:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d020:	69c3      	ldr	r3, [r0, #28]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d06b      	beq.n	800d0fe <get_fileinfo+0xea>
 800d026:	4606      	mov	r6, r0
 800d028:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d02a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d02c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d030:	d016      	beq.n	800d060 <get_fileinfo+0x4c>
			i = j = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d036:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800d03a:	1c5f      	adds	r7, r3, #1
 800d03c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800d040:	b158      	cbz	r0, 800d05a <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d042:	2100      	movs	r1, #0
 800d044:	f000 fefc 	bl	800de40 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d048:	b130      	cbz	r0, 800d058 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d04a:	2dfe      	cmp	r5, #254	; 0xfe
 800d04c:	d80c      	bhi.n	800d068 <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
 800d04e:	1962      	adds	r2, r4, r5
 800d050:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d052:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 800d054:	3501      	adds	r5, #1
 800d056:	e7ee      	b.n	800d036 <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d058:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d05a:	4425      	add	r5, r4
 800d05c:	2300      	movs	r3, #0
 800d05e:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d060:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
 800d062:	2200      	movs	r2, #0
 800d064:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800d066:	e012      	b.n	800d08e <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d068:	2500      	movs	r5, #0
 800d06a:	e7f6      	b.n	800d05a <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d06c:	23e5      	movs	r3, #229	; 0xe5
 800d06e:	e017      	b.n	800d0a0 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
 800d070:	b915      	cbnz	r5, 800d078 <get_fileinfo+0x64>
 800d072:	18a0      	adds	r0, r4, r2
 800d074:	272e      	movs	r7, #46	; 0x2e
 800d076:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
 800d078:	18a0      	adds	r0, r4, r2
 800d07a:	272e      	movs	r7, #46	; 0x2e
 800d07c:	7247      	strb	r7, [r0, #9]
 800d07e:	3201      	adds	r2, #1
 800d080:	e010      	b.n	800d0a4 <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d082:	2010      	movs	r0, #16
 800d084:	e01c      	b.n	800d0c0 <get_fileinfo+0xac>
			fno->fname[j] = c;
 800d086:	18a0      	adds	r0, r4, r2
 800d088:	7583      	strb	r3, [r0, #22]
		j++;
 800d08a:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d08c:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800d08e:	2b0a      	cmp	r3, #10
 800d090:	d81b      	bhi.n	800d0ca <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
 800d092:	6a30      	ldr	r0, [r6, #32]
 800d094:	1c59      	adds	r1, r3, #1
 800d096:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d098:	2b20      	cmp	r3, #32
 800d09a:	d0f7      	beq.n	800d08c <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d09c:	2b05      	cmp	r3, #5
 800d09e:	d0e5      	beq.n	800d06c <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
 800d0a0:	2909      	cmp	r1, #9
 800d0a2:	d0e5      	beq.n	800d070 <get_fileinfo+0x5c>
		fno->altname[j] = c;
 800d0a4:	18a0      	adds	r0, r4, r2
 800d0a6:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 800d0a8:	2d00      	cmp	r5, #0
 800d0aa:	d1ee      	bne.n	800d08a <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d0ac:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800d0b0:	b2c0      	uxtb	r0, r0
 800d0b2:	2819      	cmp	r0, #25
 800d0b4:	d8e7      	bhi.n	800d086 <get_fileinfo+0x72>
 800d0b6:	6a30      	ldr	r0, [r6, #32]
 800d0b8:	7b07      	ldrb	r7, [r0, #12]
 800d0ba:	2908      	cmp	r1, #8
 800d0bc:	d8e1      	bhi.n	800d082 <get_fileinfo+0x6e>
 800d0be:	2008      	movs	r0, #8
 800d0c0:	4207      	tst	r7, r0
 800d0c2:	d0e0      	beq.n	800d086 <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
 800d0c4:	3320      	adds	r3, #32
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	e7dd      	b.n	800d086 <get_fileinfo+0x72>
	if (!lfv) {
 800d0ca:	b935      	cbnz	r5, 800d0da <get_fileinfo+0xc6>
		fno->fname[j] = 0;
 800d0cc:	18a3      	adds	r3, r4, r2
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d0d2:	6a33      	ldr	r3, [r6, #32]
 800d0d4:	7b1b      	ldrb	r3, [r3, #12]
 800d0d6:	b903      	cbnz	r3, 800d0da <get_fileinfo+0xc6>
 800d0d8:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d0da:	4422      	add	r2, r4
 800d0dc:	2300      	movs	r3, #0
 800d0de:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d0e0:	6a33      	ldr	r3, [r6, #32]
 800d0e2:	7adb      	ldrb	r3, [r3, #11]
 800d0e4:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d0e6:	6a30      	ldr	r0, [r6, #32]
 800d0e8:	301c      	adds	r0, #28
 800d0ea:	f7fe fe60 	bl	800bdae <ld_dword>
 800d0ee:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d0f0:	6a30      	ldr	r0, [r6, #32]
 800d0f2:	3016      	adds	r0, #22
 800d0f4:	f7fe fe5b 	bl	800bdae <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d0f8:	80e0      	strh	r0, [r4, #6]
 800d0fa:	0c00      	lsrs	r0, r0, #16
 800d0fc:	80a0      	strh	r0, [r4, #4]
}
 800d0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d104 <cmp_lfn>:
{
 800d104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d108:	4681      	mov	r9, r0
 800d10a:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d10c:	f101 001a 	add.w	r0, r1, #26
 800d110:	f7fe fe48 	bl	800bda4 <ld_word>
 800d114:	bbc8      	cbnz	r0, 800d18a <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d116:	783e      	ldrb	r6, [r7, #0]
 800d118:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800d11c:	3e01      	subs	r6, #1
 800d11e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800d122:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d126:	f04f 0801 	mov.w	r8, #1
 800d12a:	2500      	movs	r5, #0
 800d12c:	e006      	b.n	800d13c <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800d12e:	2000      	movs	r0, #0
 800d130:	e02c      	b.n	800d18c <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d136:	4298      	cmp	r0, r3
 800d138:	d12a      	bne.n	800d190 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d13a:	3501      	adds	r5, #1
 800d13c:	2d0c      	cmp	r5, #12
 800d13e:	d818      	bhi.n	800d172 <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d140:	4b17      	ldr	r3, [pc, #92]	; (800d1a0 <cmp_lfn+0x9c>)
 800d142:	5d58      	ldrb	r0, [r3, r5]
 800d144:	4438      	add	r0, r7
 800d146:	f7fe fe2d 	bl	800bda4 <ld_word>
 800d14a:	4604      	mov	r4, r0
		if (wc) {
 800d14c:	f1b8 0f00 	cmp.w	r8, #0
 800d150:	d0ef      	beq.n	800d132 <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d152:	2efe      	cmp	r6, #254	; 0xfe
 800d154:	d8eb      	bhi.n	800d12e <cmp_lfn+0x2a>
 800d156:	f000 fe91 	bl	800de7c <ff_wtoupper>
 800d15a:	4680      	mov	r8, r0
 800d15c:	f106 0a01 	add.w	sl, r6, #1
 800d160:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800d164:	f000 fe8a 	bl	800de7c <ff_wtoupper>
 800d168:	4580      	cmp	r8, r0
 800d16a:	d1e0      	bne.n	800d12e <cmp_lfn+0x2a>
			wc = uc;
 800d16c:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d16e:	4656      	mov	r6, sl
 800d170:	e7e3      	b.n	800d13a <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d172:	783b      	ldrb	r3, [r7, #0]
 800d174:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d178:	d00c      	beq.n	800d194 <cmp_lfn+0x90>
 800d17a:	f1b8 0f00 	cmp.w	r8, #0
 800d17e:	d00b      	beq.n	800d198 <cmp_lfn+0x94>
 800d180:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800d184:	b953      	cbnz	r3, 800d19c <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800d186:	2001      	movs	r0, #1
 800d188:	e000      	b.n	800d18c <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d18a:	2000      	movs	r0, #0
}
 800d18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d190:	2000      	movs	r0, #0
 800d192:	e7fb      	b.n	800d18c <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800d194:	2001      	movs	r0, #1
 800d196:	e7f9      	b.n	800d18c <cmp_lfn+0x88>
 800d198:	2001      	movs	r0, #1
 800d19a:	e7f7      	b.n	800d18c <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d19c:	2000      	movs	r0, #0
 800d19e:	e7f5      	b.n	800d18c <cmp_lfn+0x88>
 800d1a0:	0801ad8c 	.word	0x0801ad8c

0800d1a4 <dir_find>:
{
 800d1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d1aa:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f7ff fbe5 	bl	800c97e <dir_sdi>
	if (res != FR_OK) return res;
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d164      	bne.n	800d284 <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1be:	6323      	str	r3, [r4, #48]	; 0x30
 800d1c0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d1c4:	464f      	mov	r7, r9
 800d1c6:	e00a      	b.n	800d1de <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d1c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1cc:	6323      	str	r3, [r4, #48]	; 0x30
 800d1ce:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f7ff fcd3 	bl	800cb7e <dir_next>
	} while (res == FR_OK);
 800d1d8:	4606      	mov	r6, r0
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d152      	bne.n	800d284 <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800d1de:	69e1      	ldr	r1, [r4, #28]
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	f7ff f901 	bl	800c3e8 <move_window>
		if (res != FR_OK) break;
 800d1e6:	4606      	mov	r6, r0
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d14b      	bne.n	800d284 <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 800d1ec:	6a25      	ldr	r5, [r4, #32]
 800d1ee:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d046      	beq.n	800d282 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d1f4:	7ae9      	ldrb	r1, [r5, #11]
 800d1f6:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800d1fa:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d1fc:	2be5      	cmp	r3, #229	; 0xe5
 800d1fe:	d0e3      	beq.n	800d1c8 <dir_find+0x24>
 800d200:	f011 0f08 	tst.w	r1, #8
 800d204:	d001      	beq.n	800d20a <dir_find+0x66>
 800d206:	2a0f      	cmp	r2, #15
 800d208:	d1de      	bne.n	800d1c8 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d20a:	2a0f      	cmp	r2, #15
 800d20c:	d016      	beq.n	800d23c <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d20e:	b927      	cbnz	r7, 800d21a <dir_find+0x76>
 800d210:	4628      	mov	r0, r5
 800d212:	f7fe fffe 	bl	800c212 <sum_sfn>
 800d216:	4548      	cmp	r0, r9
 800d218:	d034      	beq.n	800d284 <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d21a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800d21e:	f013 0f01 	tst.w	r3, #1
 800d222:	d106      	bne.n	800d232 <dir_find+0x8e>
 800d224:	220b      	movs	r2, #11
 800d226:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800d22a:	4628      	mov	r0, r5
 800d22c:	f7fe fde7 	bl	800bdfe <mem_cmp>
 800d230:	b340      	cbz	r0, 800d284 <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d236:	6323      	str	r3, [r4, #48]	; 0x30
 800d238:	27ff      	movs	r7, #255	; 0xff
 800d23a:	e7c9      	b.n	800d1d0 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d23c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800d240:	f012 0f40 	tst.w	r2, #64	; 0x40
 800d244:	d1c4      	bne.n	800d1d0 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d246:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d24a:	d006      	beq.n	800d25a <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 800d24c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d250:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d254:	6962      	ldr	r2, [r4, #20]
 800d256:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d258:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d25a:	42bb      	cmp	r3, r7
 800d25c:	d001      	beq.n	800d262 <dir_find+0xbe>
 800d25e:	27ff      	movs	r7, #255	; 0xff
 800d260:	e7b6      	b.n	800d1d0 <dir_find+0x2c>
 800d262:	7b6b      	ldrb	r3, [r5, #13]
 800d264:	454b      	cmp	r3, r9
 800d266:	d001      	beq.n	800d26c <dir_find+0xc8>
 800d268:	27ff      	movs	r7, #255	; 0xff
 800d26a:	e7b1      	b.n	800d1d0 <dir_find+0x2c>
 800d26c:	4629      	mov	r1, r5
 800d26e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d272:	f7ff ff47 	bl	800d104 <cmp_lfn>
 800d276:	b110      	cbz	r0, 800d27e <dir_find+0xda>
 800d278:	3f01      	subs	r7, #1
 800d27a:	b2ff      	uxtb	r7, r7
 800d27c:	e7a8      	b.n	800d1d0 <dir_find+0x2c>
 800d27e:	27ff      	movs	r7, #255	; 0xff
 800d280:	e7a6      	b.n	800d1d0 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d282:	2604      	movs	r6, #4
}
 800d284:	4630      	mov	r0, r6
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d28a <follow_path>:
{
 800d28a:	b530      	push	{r4, r5, lr}
 800d28c:	b083      	sub	sp, #12
 800d28e:	4604      	mov	r4, r0
 800d290:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800d292:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d294:	e001      	b.n	800d29a <follow_path+0x10>
 800d296:	3301      	adds	r3, #1
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	9b01      	ldr	r3, [sp, #4]
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	2a2f      	cmp	r2, #47	; 0x2f
 800d2a0:	d0f9      	beq.n	800d296 <follow_path+0xc>
 800d2a2:	2a5c      	cmp	r2, #92	; 0x5c
 800d2a4:	d0f7      	beq.n	800d296 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	2b1f      	cmp	r3, #31
 800d2ae:	d91e      	bls.n	800d2ee <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2b0:	a901      	add	r1, sp, #4
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff fd94 	bl	800cde0 <create_name>
			if (res != FR_OK) break;
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	bb00      	cbnz	r0, 800d2fe <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f7ff ff71 	bl	800d1a4 <dir_find>
			ns = dp->fn[NSFLAG];
 800d2c2:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	b9e0      	cbnz	r0, 800d304 <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2ca:	f012 0f04 	tst.w	r2, #4
 800d2ce:	d116      	bne.n	800d2fe <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d2d0:	79a3      	ldrb	r3, [r4, #6]
 800d2d2:	f013 0f10 	tst.w	r3, #16
 800d2d6:	d01c      	beq.n	800d312 <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d2d8:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800d2dc:	6963      	ldr	r3, [r4, #20]
 800d2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2e2:	4419      	add	r1, r3
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f7fe fe9a 	bl	800c01e <ld_clust>
 800d2ea:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2ec:	e7e0      	b.n	800d2b0 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800d2ee:	2380      	movs	r3, #128	; 0x80
 800d2f0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f7ff fb41 	bl	800c97e <dir_sdi>
 800d2fc:	4603      	mov	r3, r0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	b003      	add	sp, #12
 800d302:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d304:	2804      	cmp	r0, #4
 800d306:	d1fa      	bne.n	800d2fe <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d308:	f012 0f04 	tst.w	r2, #4
 800d30c:	d1f7      	bne.n	800d2fe <follow_path+0x74>
 800d30e:	2305      	movs	r3, #5
 800d310:	e7f5      	b.n	800d2fe <follow_path+0x74>
				res = FR_NO_PATH; break;
 800d312:	2305      	movs	r3, #5
 800d314:	e7f3      	b.n	800d2fe <follow_path+0x74>
	...

0800d318 <dir_register>:
{
 800d318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d31c:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800d31e:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d320:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800d324:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800d328:	f040 808e 	bne.w	800d448 <dir_register+0x130>
 800d32c:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d32e:	2400      	movs	r4, #0
 800d330:	e000      	b.n	800d334 <dir_register+0x1c>
 800d332:	3401      	adds	r4, #1
 800d334:	68f3      	ldr	r3, [r6, #12]
 800d336:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1f9      	bne.n	800d332 <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800d33e:	f107 0824 	add.w	r8, r7, #36	; 0x24
 800d342:	220c      	movs	r2, #12
 800d344:	4641      	mov	r1, r8
 800d346:	a801      	add	r0, sp, #4
 800d348:	f7fe fd4a 	bl	800bde0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d34c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d350:	f013 0f01 	tst.w	r3, #1
 800d354:	d01c      	beq.n	800d390 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d356:	2340      	movs	r3, #64	; 0x40
 800d358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d35c:	2501      	movs	r5, #1
 800d35e:	e000      	b.n	800d362 <dir_register+0x4a>
 800d360:	3501      	adds	r5, #1
 800d362:	2d63      	cmp	r5, #99	; 0x63
 800d364:	d80b      	bhi.n	800d37e <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d366:	462b      	mov	r3, r5
 800d368:	68f2      	ldr	r2, [r6, #12]
 800d36a:	a901      	add	r1, sp, #4
 800d36c:	4640      	mov	r0, r8
 800d36e:	f7fe fefb 	bl	800c168 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d372:	4638      	mov	r0, r7
 800d374:	f7ff ff16 	bl	800d1a4 <dir_find>
			if (res != FR_OK) break;
 800d378:	4681      	mov	r9, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d0f0      	beq.n	800d360 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d37e:	2d64      	cmp	r5, #100	; 0x64
 800d380:	d065      	beq.n	800d44e <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d382:	f1b9 0f04 	cmp.w	r9, #4
 800d386:	d11b      	bne.n	800d3c0 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d390:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800d394:	f013 0f02 	tst.w	r3, #2
 800d398:	d006      	beq.n	800d3a8 <dir_register+0x90>
 800d39a:	340c      	adds	r4, #12
 800d39c:	4b2d      	ldr	r3, [pc, #180]	; (800d454 <dir_register+0x13c>)
 800d39e:	fba3 3404 	umull	r3, r4, r3, r4
 800d3a2:	08a4      	lsrs	r4, r4, #2
 800d3a4:	3401      	adds	r4, #1
 800d3a6:	e000      	b.n	800d3aa <dir_register+0x92>
 800d3a8:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	4638      	mov	r0, r7
 800d3ae:	f7ff fc6a 	bl	800cc86 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d3b2:	4681      	mov	r9, r0
 800d3b4:	b908      	cbnz	r0, 800d3ba <dir_register+0xa2>
 800d3b6:	3c01      	subs	r4, #1
 800d3b8:	d106      	bne.n	800d3c8 <dir_register+0xb0>
	if (res == FR_OK) {
 800d3ba:	f1b9 0f00 	cmp.w	r9, #0
 800d3be:	d029      	beq.n	800d414 <dir_register+0xfc>
}
 800d3c0:	4648      	mov	r0, r9
 800d3c2:	b005      	add	sp, #20
 800d3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d3c8:	6979      	ldr	r1, [r7, #20]
 800d3ca:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7ff fad5 	bl	800c97e <dir_sdi>
		if (res == FR_OK) {
 800d3d4:	4681      	mov	r9, r0
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d1ef      	bne.n	800d3ba <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f7fe ff19 	bl	800c212 <sum_sfn>
 800d3e0:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 800d3e2:	69f9      	ldr	r1, [r7, #28]
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f7fe ffff 	bl	800c3e8 <move_window>
				if (res != FR_OK) break;
 800d3ea:	4681      	mov	r9, r0
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	d1e4      	bne.n	800d3ba <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d3f0:	462b      	mov	r3, r5
 800d3f2:	b2e2      	uxtb	r2, r4
 800d3f4:	6a39      	ldr	r1, [r7, #32]
 800d3f6:	68f0      	ldr	r0, [r6, #12]
 800d3f8:	f7fe fe7a 	bl	800c0f0 <put_lfn>
				fs->wflag = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d400:	2100      	movs	r1, #0
 800d402:	4638      	mov	r0, r7
 800d404:	f7ff fbbb 	bl	800cb7e <dir_next>
			} while (res == FR_OK && --nent);
 800d408:	4681      	mov	r9, r0
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d1d5      	bne.n	800d3ba <dir_register+0xa2>
 800d40e:	3c01      	subs	r4, #1
 800d410:	d1e7      	bne.n	800d3e2 <dir_register+0xca>
 800d412:	e7d2      	b.n	800d3ba <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 800d414:	69f9      	ldr	r1, [r7, #28]
 800d416:	4630      	mov	r0, r6
 800d418:	f7fe ffe6 	bl	800c3e8 <move_window>
		if (res == FR_OK) {
 800d41c:	4681      	mov	r9, r0
 800d41e:	2800      	cmp	r0, #0
 800d420:	d1ce      	bne.n	800d3c0 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d422:	2220      	movs	r2, #32
 800d424:	2100      	movs	r1, #0
 800d426:	6a38      	ldr	r0, [r7, #32]
 800d428:	f7fe fce4 	bl	800bdf4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d42c:	220b      	movs	r2, #11
 800d42e:	4641      	mov	r1, r8
 800d430:	6a38      	ldr	r0, [r7, #32]
 800d432:	f7fe fcd5 	bl	800bde0 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d43a:	6a3a      	ldr	r2, [r7, #32]
 800d43c:	f003 0318 	and.w	r3, r3, #24
 800d440:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800d442:	2301      	movs	r3, #1
 800d444:	70f3      	strb	r3, [r6, #3]
 800d446:	e7bb      	b.n	800d3c0 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d448:	f04f 0906 	mov.w	r9, #6
 800d44c:	e7b8      	b.n	800d3c0 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d44e:	f04f 0907 	mov.w	r9, #7
 800d452:	e7b5      	b.n	800d3c0 <dir_register+0xa8>
 800d454:	4ec4ec4f 	.word	0x4ec4ec4f

0800d458 <sync_fs>:
{
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800d45c:	f7fe ff9a 	bl	800c394 <sync_window>
	if (res == FR_OK) {
 800d460:	4605      	mov	r5, r0
 800d462:	b948      	cbnz	r0, 800d478 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d464:	7823      	ldrb	r3, [r4, #0]
 800d466:	2b03      	cmp	r3, #3
 800d468:	d008      	beq.n	800d47c <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d46a:	2200      	movs	r2, #0
 800d46c:	4611      	mov	r1, r2
 800d46e:	7860      	ldrb	r0, [r4, #1]
 800d470:	f7fe fc8c 	bl	800bd8c <disk_ioctl>
 800d474:	b100      	cbz	r0, 800d478 <sync_fs+0x20>
 800d476:	2501      	movs	r5, #1
}
 800d478:	4628      	mov	r0, r5
 800d47a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d47c:	7923      	ldrb	r3, [r4, #4]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d1f3      	bne.n	800d46a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800d482:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800d486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d48a:	2100      	movs	r1, #0
 800d48c:	4630      	mov	r0, r6
 800d48e:	f7fe fcb1 	bl	800bdf4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d492:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d496:	f204 2032 	addw	r0, r4, #562	; 0x232
 800d49a:	f7fe fc93 	bl	800bdc4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d49e:	490f      	ldr	r1, [pc, #60]	; (800d4dc <sync_fs+0x84>)
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7fe fc93 	bl	800bdcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d4a6:	490e      	ldr	r1, [pc, #56]	; (800d4e0 <sync_fs+0x88>)
 800d4a8:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800d4ac:	f7fe fc8e 	bl	800bdcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d4b0:	6961      	ldr	r1, [r4, #20]
 800d4b2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800d4b6:	f7fe fc89 	bl	800bdcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d4ba:	6921      	ldr	r1, [r4, #16]
 800d4bc:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800d4c0:	f7fe fc84 	bl	800bdcc <st_dword>
			fs->winsect = fs->volbase + 1;
 800d4c4:	6a22      	ldr	r2, [r4, #32]
 800d4c6:	3201      	adds	r2, #1
 800d4c8:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	7860      	ldrb	r0, [r4, #1]
 800d4d0:	f7fe fc50 	bl	800bd74 <disk_write>
			fs->fsi_flag = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	7123      	strb	r3, [r4, #4]
 800d4d8:	e7c7      	b.n	800d46a <sync_fs+0x12>
 800d4da:	bf00      	nop
 800d4dc:	41615252 	.word	0x41615252
 800d4e0:	61417272 	.word	0x61417272

0800d4e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	9001      	str	r0, [sp, #4]
 800d4ea:	9100      	str	r1, [sp, #0]
 800d4ec:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4ee:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d4f0:	a803      	add	r0, sp, #12
 800d4f2:	f7fe ff08 	bl	800c306 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4f6:	1e04      	subs	r4, r0, #0
 800d4f8:	db20      	blt.n	800d53c <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d4fa:	4b11      	ldr	r3, [pc, #68]	; (800d540 <f_mount+0x5c>)
 800d4fc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800d500:	b125      	cbz	r5, 800d50c <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d502:	4628      	mov	r0, r5
 800d504:	f7fe fd50 	bl	800bfa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d508:	2300      	movs	r3, #0
 800d50a:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800d50c:	9b01      	ldr	r3, [sp, #4]
 800d50e:	b10b      	cbz	r3, 800d514 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 800d510:	2200      	movs	r2, #0
 800d512:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d514:	9b01      	ldr	r3, [sp, #4]
 800d516:	4a0a      	ldr	r2, [pc, #40]	; (800d540 <f_mount+0x5c>)
 800d518:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d51c:	1e72      	subs	r2, r6, #1
 800d51e:	bf18      	it	ne
 800d520:	2201      	movne	r2, #1
 800d522:	2b00      	cmp	r3, #0
 800d524:	bf08      	it	eq
 800d526:	f042 0201 	orreq.w	r2, r2, #1
 800d52a:	b112      	cbz	r2, 800d532 <f_mount+0x4e>
 800d52c:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800d52e:	b004      	add	sp, #16
 800d530:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d532:	a901      	add	r1, sp, #4
 800d534:	4668      	mov	r0, sp
 800d536:	f7fe ffaf 	bl	800c498 <find_volume>
	LEAVE_FF(fs, res);
 800d53a:	e7f8      	b.n	800d52e <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d53c:	200b      	movs	r0, #11
 800d53e:	e7f6      	b.n	800d52e <f_mount+0x4a>
 800d540:	2001dcd4 	.word	0x2001dcd4

0800d544 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d548:	b093      	sub	sp, #76	; 0x4c
 800d54a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f000 810d 	beq.w	800d76c <f_open+0x228>
 800d552:	4615      	mov	r5, r2
 800d554:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d556:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800d55a:	463a      	mov	r2, r7
 800d55c:	a903      	add	r1, sp, #12
 800d55e:	a801      	add	r0, sp, #4
 800d560:	f7fe ff9a 	bl	800c498 <find_volume>
	if (res == FR_OK) {
 800d564:	4604      	mov	r4, r0
 800d566:	b130      	cbz	r0, 800d576 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d568:	b10c      	cbz	r4, 800d56e <f_open+0x2a>
 800d56a:	2300      	movs	r3, #0
 800d56c:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800d56e:	4620      	mov	r0, r4
 800d570:	b013      	add	sp, #76	; 0x4c
 800d572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d57a:	9901      	ldr	r1, [sp, #4]
 800d57c:	a804      	add	r0, sp, #16
 800d57e:	f7ff fe84 	bl	800d28a <follow_path>
		if (res == FR_OK) {
 800d582:	4604      	mov	r4, r0
 800d584:	b960      	cbnz	r0, 800d5a0 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d586:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	db50      	blt.n	800d630 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d58e:	f037 0301 	bics.w	r3, r7, #1
 800d592:	bf14      	ite	ne
 800d594:	2101      	movne	r1, #1
 800d596:	2100      	moveq	r1, #0
 800d598:	a804      	add	r0, sp, #16
 800d59a:	f7fe fc45 	bl	800be28 <chk_lock>
 800d59e:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d5a0:	f015 0f1c 	tst.w	r5, #28
 800d5a4:	d05a      	beq.n	800d65c <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800d5a6:	2c00      	cmp	r4, #0
 800d5a8:	d04e      	beq.n	800d648 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d5aa:	2c04      	cmp	r4, #4
 800d5ac:	d042      	beq.n	800d634 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5ae:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d5b2:	2c00      	cmp	r4, #0
 800d5b4:	d161      	bne.n	800d67a <f_open+0x136>
 800d5b6:	f017 0f08 	tst.w	r7, #8
 800d5ba:	d05e      	beq.n	800d67a <f_open+0x136>
				dw = GET_FATTIME();
 800d5bc:	f7fe fadc 	bl	800bb78 <get_fattime>
 800d5c0:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5c6:	300e      	adds	r0, #14
 800d5c8:	f7fe fc00 	bl	800bdcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5d0:	3016      	adds	r0, #22
 800d5d2:	f7fe fbfb 	bl	800bdcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d8:	2220      	movs	r2, #32
 800d5da:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d5dc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d5e0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d5e4:	4649      	mov	r1, r9
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	f7fe fd19 	bl	800c01e <ld_clust>
 800d5ec:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	f7fe fd26 	bl	800c044 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5fc:	301c      	adds	r0, #28
 800d5fe:	f7fe fbe5 	bl	800bdcc <st_dword>
					fs->wflag = 1;
 800d602:	9b03      	ldr	r3, [sp, #12]
 800d604:	2201      	movs	r2, #1
 800d606:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800d608:	b3bd      	cbz	r5, 800d67a <f_open+0x136>
						dw = fs->winsect;
 800d60a:	9b03      	ldr	r3, [sp, #12]
 800d60c:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800d610:	2200      	movs	r2, #0
 800d612:	4629      	mov	r1, r5
 800d614:	a804      	add	r0, sp, #16
 800d616:	f7ff fa73 	bl	800cb00 <remove_chain>
						if (res == FR_OK) {
 800d61a:	4604      	mov	r4, r0
 800d61c:	bb68      	cbnz	r0, 800d67a <f_open+0x136>
							res = move_window(fs, dw);
 800d61e:	4641      	mov	r1, r8
 800d620:	9803      	ldr	r0, [sp, #12]
 800d622:	f7fe fee1 	bl	800c3e8 <move_window>
 800d626:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d628:	3d01      	subs	r5, #1
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	611d      	str	r5, [r3, #16]
 800d62e:	e024      	b.n	800d67a <f_open+0x136>
				res = FR_INVALID_NAME;
 800d630:	2406      	movs	r4, #6
 800d632:	e7b5      	b.n	800d5a0 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d634:	f7fe fc36 	bl	800bea4 <enq_lock>
 800d638:	b908      	cbnz	r0, 800d63e <f_open+0xfa>
 800d63a:	2412      	movs	r4, #18
 800d63c:	e7b7      	b.n	800d5ae <f_open+0x6a>
 800d63e:	a804      	add	r0, sp, #16
 800d640:	f7ff fe6a 	bl	800d318 <dir_register>
 800d644:	4604      	mov	r4, r0
 800d646:	e7b2      	b.n	800d5ae <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d648:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d64c:	f013 0f11 	tst.w	r3, #17
 800d650:	d112      	bne.n	800d678 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d652:	f015 0f04 	tst.w	r5, #4
 800d656:	d0ac      	beq.n	800d5b2 <f_open+0x6e>
 800d658:	2408      	movs	r4, #8
 800d65a:	e00e      	b.n	800d67a <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 800d65c:	b96c      	cbnz	r4, 800d67a <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d65e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d662:	f013 0f10 	tst.w	r3, #16
 800d666:	d14c      	bne.n	800d702 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d668:	f015 0f02 	tst.w	r5, #2
 800d66c:	d005      	beq.n	800d67a <f_open+0x136>
 800d66e:	f013 0f01 	tst.w	r3, #1
 800d672:	d002      	beq.n	800d67a <f_open+0x136>
						res = FR_DENIED;
 800d674:	2407      	movs	r4, #7
 800d676:	e016      	b.n	800d6a6 <f_open+0x162>
					res = FR_DENIED;
 800d678:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800d67a:	b9a4      	cbnz	r4, 800d6a6 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d67c:	f017 0f08 	tst.w	r7, #8
 800d680:	d001      	beq.n	800d686 <f_open+0x142>
				mode |= FA_MODIFIED;
 800d682:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68a:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d68c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d68e:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d690:	f037 0301 	bics.w	r3, r7, #1
 800d694:	bf14      	ite	ne
 800d696:	2101      	movne	r1, #1
 800d698:	2100      	moveq	r1, #0
 800d69a:	a804      	add	r0, sp, #16
 800d69c:	f7fe fc12 	bl	800bec4 <inc_lock>
 800d6a0:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d060      	beq.n	800d768 <f_open+0x224>
		if (res == FR_OK) {
 800d6a6:	2c00      	cmp	r4, #0
 800d6a8:	f47f af5e 	bne.w	800d568 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d6ac:	9d03      	ldr	r5, [sp, #12]
 800d6ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d6b2:	4641      	mov	r1, r8
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	f7fe fcb2 	bl	800c01e <ld_clust>
 800d6ba:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d6bc:	f108 001c 	add.w	r0, r8, #28
 800d6c0:	f7fe fb75 	bl	800bdae <ld_dword>
 800d6c4:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6ca:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800d6cc:	88eb      	ldrh	r3, [r5, #6]
 800d6ce:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6d0:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800d6d2:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d6d4:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6d6:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6d8:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800d6dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6e0:	4640      	mov	r0, r8
 800d6e2:	f7fe fb87 	bl	800bdf4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d6e6:	f017 0f20 	tst.w	r7, #32
 800d6ea:	f43f af3d 	beq.w	800d568 <f_open+0x24>
 800d6ee:	68f5      	ldr	r5, [r6, #12]
 800d6f0:	2d00      	cmp	r5, #0
 800d6f2:	f43f af39 	beq.w	800d568 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6f6:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	895f      	ldrh	r7, [r3, #10]
 800d6fc:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d6fe:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d700:	e005      	b.n	800d70e <f_open+0x1ca>
					res = FR_NO_FILE;
 800d702:	2404      	movs	r4, #4
 800d704:	e7cf      	b.n	800d6a6 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d706:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d70a:	d00e      	beq.n	800d72a <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d70c:	1bed      	subs	r5, r5, r7
 800d70e:	42bd      	cmp	r5, r7
 800d710:	bf94      	ite	ls
 800d712:	2300      	movls	r3, #0
 800d714:	2301      	movhi	r3, #1
 800d716:	b954      	cbnz	r4, 800d72e <f_open+0x1ea>
 800d718:	b14b      	cbz	r3, 800d72e <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7ff f8c7 	bl	800c8ae <get_fat>
 800d720:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800d722:	2801      	cmp	r0, #1
 800d724:	d8ef      	bhi.n	800d706 <f_open+0x1c2>
 800d726:	2402      	movs	r4, #2
 800d728:	e7ed      	b.n	800d706 <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d72a:	2401      	movs	r4, #1
 800d72c:	e7ee      	b.n	800d70c <f_open+0x1c8>
				fp->clust = clst;
 800d72e:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d730:	2c00      	cmp	r4, #0
 800d732:	f47f af19 	bne.w	800d568 <f_open+0x24>
 800d736:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f43f af14 	beq.w	800d568 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d740:	9f03      	ldr	r7, [sp, #12]
 800d742:	4638      	mov	r0, r7
 800d744:	f7fe fc4e 	bl	800bfe4 <clust2sect>
 800d748:	b908      	cbnz	r0, 800d74e <f_open+0x20a>
						res = FR_INT_ERR;
 800d74a:	2402      	movs	r4, #2
 800d74c:	e70d      	b.n	800d56a <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d74e:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800d752:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d754:	2301      	movs	r3, #1
 800d756:	4641      	mov	r1, r8
 800d758:	7878      	ldrb	r0, [r7, #1]
 800d75a:	f7fe faff 	bl	800bd5c <disk_read>
 800d75e:	2800      	cmp	r0, #0
 800d760:	f43f af02 	beq.w	800d568 <f_open+0x24>
 800d764:	2401      	movs	r4, #1
 800d766:	e700      	b.n	800d56a <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d768:	2402      	movs	r4, #2
 800d76a:	e6fd      	b.n	800d568 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800d76c:	2409      	movs	r4, #9
 800d76e:	e6fe      	b.n	800d56e <f_open+0x2a>

0800d770 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	b085      	sub	sp, #20
 800d776:	4604      	mov	r4, r0
 800d778:	460e      	mov	r6, r1
 800d77a:	4617      	mov	r7, r2
 800d77c:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800d77e:	2300      	movs	r3, #0
 800d780:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d784:	a903      	add	r1, sp, #12
 800d786:	f7fe fde2 	bl	800c34e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d78a:	9001      	str	r0, [sp, #4]
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f040 80ae 	bne.w	800d8ee <f_read+0x17e>
 800d792:	7d63      	ldrb	r3, [r4, #21]
 800d794:	9301      	str	r3, [sp, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	f040 80a9 	bne.w	800d8ee <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d79c:	7d23      	ldrb	r3, [r4, #20]
 800d79e:	f013 0f01 	tst.w	r3, #1
 800d7a2:	f000 80c3 	beq.w	800d92c <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 800d7a6:	68e5      	ldr	r5, [r4, #12]
 800d7a8:	69a3      	ldr	r3, [r4, #24]
 800d7aa:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7ac:	42bd      	cmp	r5, r7
 800d7ae:	d362      	bcc.n	800d876 <f_read+0x106>
 800d7b0:	463d      	mov	r5, r7
 800d7b2:	e060      	b.n	800d876 <f_read+0x106>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d7b6:	b11b      	cbz	r3, 800d7c0 <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f7fe fc1f 	bl	800bffc <clmt_clust>
 800d7be:	e06a      	b.n	800d896 <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d7c0:	69e1      	ldr	r1, [r4, #28]
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f7ff f873 	bl	800c8ae <get_fat>
 800d7c8:	e065      	b.n	800d896 <f_read+0x126>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d7ca:	f04f 0a02 	mov.w	sl, #2
 800d7ce:	f884 a015 	strb.w	sl, [r4, #21]
 800d7d2:	f8cd a004 	str.w	sl, [sp, #4]
 800d7d6:	e08a      	b.n	800d8ee <f_read+0x17e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7d8:	f04f 0a01 	mov.w	sl, #1
 800d7dc:	f884 a015 	strb.w	sl, [r4, #21]
 800d7e0:	f8cd a004 	str.w	sl, [sp, #4]
 800d7e4:	e083      	b.n	800d8ee <f_read+0x17e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d7e6:	f04f 0a02 	mov.w	sl, #2
 800d7ea:	f884 a015 	strb.w	sl, [r4, #21]
 800d7ee:	f8cd a004 	str.w	sl, [sp, #4]
 800d7f2:	e07c      	b.n	800d8ee <f_read+0x17e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7f4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	db02      	blt.n	800d802 <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d7fc:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800d800:	e02f      	b.n	800d862 <f_read+0xf2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d802:	6a20      	ldr	r0, [r4, #32]
 800d804:	eba0 0009 	sub.w	r0, r0, r9
 800d808:	4550      	cmp	r0, sl
 800d80a:	d2f7      	bcs.n	800d7fc <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d810:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d814:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 800d818:	f7fe fae2 	bl	800bde0 <mem_cpy>
 800d81c:	e7ee      	b.n	800d7fc <f_read+0x8c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d81e:	6a22      	ldr	r2, [r4, #32]
 800d820:	454a      	cmp	r2, r9
 800d822:	d00d      	beq.n	800d840 <f_read+0xd0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d824:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	db64      	blt.n	800d8f6 <f_read+0x186>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d82c:	2301      	movs	r3, #1
 800d82e:	464a      	mov	r2, r9
 800d830:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d834:	9803      	ldr	r0, [sp, #12]
 800d836:	7840      	ldrb	r0, [r0, #1]
 800d838:	f7fe fa90 	bl	800bd5c <disk_read>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d16e      	bne.n	800d91e <f_read+0x1ae>
			}
#endif
			fp->sect = sect;
 800d840:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d844:	69a3      	ldr	r3, [r4, #24]
 800d846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d84a:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d84e:	42bd      	cmp	r5, r7
 800d850:	d200      	bcs.n	800d854 <f_read+0xe4>
 800d852:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d854:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d858:	463a      	mov	r2, r7
 800d85a:	4419      	add	r1, r3
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7fe fabf 	bl	800bde0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d862:	443e      	add	r6, r7
 800d864:	69a3      	ldr	r3, [r4, #24]
 800d866:	443b      	add	r3, r7
 800d868:	61a3      	str	r3, [r4, #24]
 800d86a:	f8d8 3000 	ldr.w	r3, [r8]
 800d86e:	443b      	add	r3, r7
 800d870:	f8c8 3000 	str.w	r3, [r8]
 800d874:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 800d876:	2d00      	cmp	r5, #0
 800d878:	d039      	beq.n	800d8ee <f_read+0x17e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d87a:	69a1      	ldr	r1, [r4, #24]
 800d87c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800d880:	2b00      	cmp	r3, #0
 800d882:	d1df      	bne.n	800d844 <f_read+0xd4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	895f      	ldrh	r7, [r3, #10]
 800d888:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800d88a:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800d88e:	d108      	bne.n	800d8a2 <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d890:	2900      	cmp	r1, #0
 800d892:	d18f      	bne.n	800d7b4 <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d894:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d896:	2801      	cmp	r0, #1
 800d898:	d997      	bls.n	800d7ca <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d89a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d89e:	d09b      	beq.n	800d7d8 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
 800d8a0:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8a6:	69e1      	ldr	r1, [r4, #28]
 800d8a8:	4658      	mov	r0, fp
 800d8aa:	f7fe fb9b 	bl	800bfe4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8ae:	4681      	mov	r9, r0
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d098      	beq.n	800d7e6 <f_read+0x76>
			sect += csect;
 800d8b4:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d8b6:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d8ba:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d8be:	d3ae      	bcc.n	800d81e <f_read+0xae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8c0:	eb07 030a 	add.w	r3, r7, sl
 800d8c4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d901      	bls.n	800d8d0 <f_read+0x160>
					cc = fs->csize - csect;
 800d8cc:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8d0:	4653      	mov	r3, sl
 800d8d2:	464a      	mov	r2, r9
 800d8d4:	4631      	mov	r1, r6
 800d8d6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d8da:	f7fe fa3f 	bl	800bd5c <disk_read>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d088      	beq.n	800d7f4 <f_read+0x84>
 800d8e2:	f04f 0a01 	mov.w	sl, #1
 800d8e6:	f884 a015 	strb.w	sl, [r4, #21]
 800d8ea:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800d8ee:	9801      	ldr	r0, [sp, #4]
 800d8f0:	b005      	add	sp, #20
 800d8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d8fc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d900:	f7fe fa38 	bl	800bd74 <disk_write>
 800d904:	b920      	cbnz	r0, 800d910 <f_read+0x1a0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d906:	7d23      	ldrb	r3, [r4, #20]
 800d908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d90c:	7523      	strb	r3, [r4, #20]
 800d90e:	e78d      	b.n	800d82c <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d910:	f04f 0a01 	mov.w	sl, #1
 800d914:	f884 a015 	strb.w	sl, [r4, #21]
 800d918:	f8cd a004 	str.w	sl, [sp, #4]
 800d91c:	e7e7      	b.n	800d8ee <f_read+0x17e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d91e:	f04f 0a01 	mov.w	sl, #1
 800d922:	f884 a015 	strb.w	sl, [r4, #21]
 800d926:	f8cd a004 	str.w	sl, [sp, #4]
 800d92a:	e7e0      	b.n	800d8ee <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d92c:	2307      	movs	r3, #7
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	e7dd      	b.n	800d8ee <f_read+0x17e>

0800d932 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d936:	b085      	sub	sp, #20
 800d938:	4604      	mov	r4, r0
 800d93a:	460e      	mov	r6, r1
 800d93c:	4615      	mov	r5, r2
 800d93e:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800d940:	2300      	movs	r3, #0
 800d942:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d946:	a903      	add	r1, sp, #12
 800d948:	f7fe fd01 	bl	800c34e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d94c:	9001      	str	r0, [sp, #4]
 800d94e:	2800      	cmp	r0, #0
 800d950:	d149      	bne.n	800d9e6 <f_write+0xb4>
 800d952:	7d63      	ldrb	r3, [r4, #21]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d145      	bne.n	800d9e6 <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d95a:	7d23      	ldrb	r3, [r4, #20]
 800d95c:	f013 0f02 	tst.w	r3, #2
 800d960:	f000 80e2 	beq.w	800db28 <f_write+0x1f6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d964:	69a3      	ldr	r3, [r4, #24]
 800d966:	42eb      	cmn	r3, r5
 800d968:	f0c0 80b0 	bcc.w	800dacc <f_write+0x19a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d96c:	43dd      	mvns	r5, r3
 800d96e:	e0ad      	b.n	800dacc <f_write+0x19a>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d03b      	beq.n	800d9ee <f_write+0xbc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d976:	4620      	mov	r0, r4
 800d978:	f7fe fb40 	bl	800bffc <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d97c:	2800      	cmp	r0, #0
 800d97e:	f000 80ce 	beq.w	800db1e <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d982:	2801      	cmp	r0, #1
 800d984:	d038      	beq.n	800d9f8 <f_write+0xc6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d986:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d98a:	d03c      	beq.n	800da06 <f_write+0xd4>
				fp->clust = clst;			/* Update current cluster */
 800d98c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	b903      	cbnz	r3, 800d994 <f_write+0x62>
 800d992:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d994:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	db3b      	blt.n	800da14 <f_write+0xe2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d99c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d9a0:	69e1      	ldr	r1, [r4, #28]
 800d9a2:	4658      	mov	r0, fp
 800d9a4:	f7fe fb1e 	bl	800bfe4 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d9a8:	4681      	mov	r9, r0
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d047      	beq.n	800da3e <f_write+0x10c>
			sect += csect;
 800d9ae:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d9b0:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d9b4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d9b8:	d35d      	bcc.n	800da76 <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d9ba:	eb07 030a 	add.w	r3, r7, sl
 800d9be:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d901      	bls.n	800d9ca <f_write+0x98>
					cc = fs->csize - csect;
 800d9c6:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9ca:	4653      	mov	r3, sl
 800d9cc:	464a      	mov	r2, r9
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d9d4:	f7fe f9ce 	bl	800bd74 <disk_write>
 800d9d8:	b3c0      	cbz	r0, 800da4c <f_write+0x11a>
 800d9da:	f04f 0a01 	mov.w	sl, #1
 800d9de:	f884 a015 	strb.w	sl, [r4, #21]
 800d9e2:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800d9e6:	9801      	ldr	r0, [sp, #4]
 800d9e8:	b005      	add	sp, #20
 800d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d9ee:	69e1      	ldr	r1, [r4, #28]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f7ff f81a 	bl	800ca2a <create_chain>
 800d9f6:	e7c1      	b.n	800d97c <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d9f8:	f04f 0a02 	mov.w	sl, #2
 800d9fc:	f884 a015 	strb.w	sl, [r4, #21]
 800da00:	f8cd a004 	str.w	sl, [sp, #4]
 800da04:	e7ef      	b.n	800d9e6 <f_write+0xb4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da06:	f04f 0a01 	mov.w	sl, #1
 800da0a:	f884 a015 	strb.w	sl, [r4, #21]
 800da0e:	f8cd a004 	str.w	sl, [sp, #4]
 800da12:	e7e8      	b.n	800d9e6 <f_write+0xb4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da14:	2301      	movs	r3, #1
 800da16:	6a22      	ldr	r2, [r4, #32]
 800da18:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800da1c:	9803      	ldr	r0, [sp, #12]
 800da1e:	7840      	ldrb	r0, [r0, #1]
 800da20:	f7fe f9a8 	bl	800bd74 <disk_write>
 800da24:	b920      	cbnz	r0, 800da30 <f_write+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da26:	7d23      	ldrb	r3, [r4, #20]
 800da28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da2c:	7523      	strb	r3, [r4, #20]
 800da2e:	e7b5      	b.n	800d99c <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da30:	f04f 0a01 	mov.w	sl, #1
 800da34:	f884 a015 	strb.w	sl, [r4, #21]
 800da38:	f8cd a004 	str.w	sl, [sp, #4]
 800da3c:	e7d3      	b.n	800d9e6 <f_write+0xb4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da3e:	f04f 0a02 	mov.w	sl, #2
 800da42:	f884 a015 	strb.w	sl, [r4, #21]
 800da46:	f8cd a004 	str.w	sl, [sp, #4]
 800da4a:	e7cc      	b.n	800d9e6 <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800da4c:	6a21      	ldr	r1, [r4, #32]
 800da4e:	eba1 0109 	sub.w	r1, r1, r9
 800da52:	4551      	cmp	r1, sl
 800da54:	d302      	bcc.n	800da5c <f_write+0x12a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800da56:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800da5a:	e028      	b.n	800daae <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800da5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da60:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800da64:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800da68:	f7fe f9ba 	bl	800bde0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da6c:	7d23      	ldrb	r3, [r4, #20]
 800da6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da72:	7523      	strb	r3, [r4, #20]
 800da74:	e7ef      	b.n	800da56 <f_write+0x124>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da76:	6a23      	ldr	r3, [r4, #32]
 800da78:	454b      	cmp	r3, r9
 800da7a:	d003      	beq.n	800da84 <f_write+0x152>
				fp->fptr < fp->obj.objsize &&
 800da7c:	69a2      	ldr	r2, [r4, #24]
 800da7e:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da80:	429a      	cmp	r2, r3
 800da82:	d33b      	bcc.n	800dafc <f_write+0x1ca>
			fp->sect = sect;
 800da84:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da88:	69a3      	ldr	r3, [r4, #24]
 800da8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da8e:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800da92:	42bd      	cmp	r5, r7
 800da94:	d200      	bcs.n	800da98 <f_write+0x166>
 800da96:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da98:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800da9c:	463a      	mov	r2, r7
 800da9e:	4631      	mov	r1, r6
 800daa0:	4418      	add	r0, r3
 800daa2:	f7fe f99d 	bl	800bde0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800daa6:	7d23      	ldrb	r3, [r4, #20]
 800daa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800daac:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800daae:	443e      	add	r6, r7
 800dab0:	69a3      	ldr	r3, [r4, #24]
 800dab2:	443b      	add	r3, r7
 800dab4:	61a3      	str	r3, [r4, #24]
 800dab6:	68e2      	ldr	r2, [r4, #12]
 800dab8:	4293      	cmp	r3, r2
 800daba:	bf38      	it	cc
 800dabc:	4613      	movcc	r3, r2
 800dabe:	60e3      	str	r3, [r4, #12]
 800dac0:	f8d8 3000 	ldr.w	r3, [r8]
 800dac4:	443b      	add	r3, r7
 800dac6:	f8c8 3000 	str.w	r3, [r8]
 800daca:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 800dacc:	b33d      	cbz	r5, 800db1e <f_write+0x1ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dace:	69a1      	ldr	r1, [r4, #24]
 800dad0:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1d7      	bne.n	800da88 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dad8:	9b03      	ldr	r3, [sp, #12]
 800dada:	895f      	ldrh	r7, [r3, #10]
 800dadc:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800dade:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800dae2:	f47f af57 	bne.w	800d994 <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dae6:	2900      	cmp	r1, #0
 800dae8:	f47f af42 	bne.w	800d970 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800daec:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800daee:	2800      	cmp	r0, #0
 800daf0:	f47f af44 	bne.w	800d97c <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7fe ff98 	bl	800ca2a <create_chain>
 800dafa:	e73f      	b.n	800d97c <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dafc:	2301      	movs	r3, #1
 800dafe:	464a      	mov	r2, r9
 800db00:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800db04:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800db08:	f7fe f928 	bl	800bd5c <disk_read>
				fp->fptr < fp->obj.objsize &&
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d0b9      	beq.n	800da84 <f_write+0x152>
					ABORT(fs, FR_DISK_ERR);
 800db10:	f04f 0a01 	mov.w	sl, #1
 800db14:	f884 a015 	strb.w	sl, [r4, #21]
 800db18:	f8cd a004 	str.w	sl, [sp, #4]
 800db1c:	e763      	b.n	800d9e6 <f_write+0xb4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800db1e:	7d23      	ldrb	r3, [r4, #20]
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800db26:	e75e      	b.n	800d9e6 <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db28:	2307      	movs	r3, #7
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	e75b      	b.n	800d9e6 <f_write+0xb4>

0800db2e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db2e:	b570      	push	{r4, r5, r6, lr}
 800db30:	b082      	sub	sp, #8
 800db32:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db34:	a901      	add	r1, sp, #4
 800db36:	f7fe fc0a 	bl	800c34e <validate>
	if (res == FR_OK) {
 800db3a:	b970      	cbnz	r0, 800db5a <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db3c:	7d23      	ldrb	r3, [r4, #20]
 800db3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800db42:	d00a      	beq.n	800db5a <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800db48:	d109      	bne.n	800db5e <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db4a:	f7fe f815 	bl	800bb78 <get_fattime>
 800db4e:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db52:	9801      	ldr	r0, [sp, #4]
 800db54:	f7fe fc48 	bl	800c3e8 <move_window>
				if (res == FR_OK) {
 800db58:	b178      	cbz	r0, 800db7a <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800db5a:	b002      	add	sp, #8
 800db5c:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800db5e:	2301      	movs	r3, #1
 800db60:	6a22      	ldr	r2, [r4, #32]
 800db62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800db66:	9801      	ldr	r0, [sp, #4]
 800db68:	7840      	ldrb	r0, [r0, #1]
 800db6a:	f7fe f903 	bl	800bd74 <disk_write>
 800db6e:	bb40      	cbnz	r0, 800dbc2 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db70:	7d23      	ldrb	r3, [r4, #20]
 800db72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db76:	7523      	strb	r3, [r4, #20]
 800db78:	e7e7      	b.n	800db4a <f_sync+0x1c>
					dir = fp->dir_ptr;
 800db7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db7c:	7af3      	ldrb	r3, [r6, #11]
 800db7e:	f043 0320 	orr.w	r3, r3, #32
 800db82:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db84:	68a2      	ldr	r2, [r4, #8]
 800db86:	4631      	mov	r1, r6
 800db88:	6820      	ldr	r0, [r4, #0]
 800db8a:	f7fe fa5b 	bl	800c044 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db8e:	68e1      	ldr	r1, [r4, #12]
 800db90:	f106 001c 	add.w	r0, r6, #28
 800db94:	f7fe f91a 	bl	800bdcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db98:	4629      	mov	r1, r5
 800db9a:	f106 0016 	add.w	r0, r6, #22
 800db9e:	f7fe f915 	bl	800bdcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dba2:	2100      	movs	r1, #0
 800dba4:	f106 0012 	add.w	r0, r6, #18
 800dba8:	f7fe f90c 	bl	800bdc4 <st_word>
					fs->wflag = 1;
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dbb2:	9801      	ldr	r0, [sp, #4]
 800dbb4:	f7ff fc50 	bl	800d458 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dbb8:	7d23      	ldrb	r3, [r4, #20]
 800dbba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbbe:	7523      	strb	r3, [r4, #20]
 800dbc0:	e7cb      	b.n	800db5a <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dbc2:	2001      	movs	r0, #1
 800dbc4:	e7c9      	b.n	800db5a <f_sync+0x2c>

0800dbc6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	b082      	sub	sp, #8
 800dbca:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dbcc:	f7ff ffaf 	bl	800db2e <f_sync>
	if (res == FR_OK)
 800dbd0:	b108      	cbz	r0, 800dbd6 <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800dbd2:	b002      	add	sp, #8
 800dbd4:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dbd6:	a901      	add	r1, sp, #4
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f7fe fbb8 	bl	800c34e <validate>
		if (res == FR_OK) {
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d1f7      	bne.n	800dbd2 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dbe2:	6920      	ldr	r0, [r4, #16]
 800dbe4:	f7fe f9c0 	bl	800bf68 <dec_lock>
			if (res == FR_OK)
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d1f2      	bne.n	800dbd2 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800dbec:	6020      	str	r0, [r4, #0]
 800dbee:	e7f0      	b.n	800dbd2 <f_close+0xc>

0800dbf0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800dbf0:	b530      	push	{r4, r5, lr}
 800dbf2:	b085      	sub	sp, #20
 800dbf4:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d03d      	beq.n	800dc76 <f_opendir+0x86>
 800dbfa:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	a903      	add	r1, sp, #12
 800dc00:	a801      	add	r0, sp, #4
 800dc02:	f7fe fc49 	bl	800c498 <find_volume>
	if (res == FR_OK) {
 800dc06:	4604      	mov	r4, r0
 800dc08:	b128      	cbz	r0, 800dc16 <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800dc0a:	b10c      	cbz	r4, 800dc10 <f_opendir+0x20>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800dc10:	4620      	mov	r0, r4
 800dc12:	b005      	add	sp, #20
 800dc14:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800dc16:	9b03      	ldr	r3, [sp, #12]
 800dc18:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800dc1a:	9901      	ldr	r1, [sp, #4]
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f7ff fb34 	bl	800d28a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800dc22:	4604      	mov	r4, r0
 800dc24:	bb18      	cbnz	r0, 800dc6e <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800dc26:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	db08      	blt.n	800dc40 <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800dc2e:	79ab      	ldrb	r3, [r5, #6]
 800dc30:	f013 0f10 	tst.w	r3, #16
 800dc34:	d01a      	beq.n	800dc6c <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800dc36:	6a29      	ldr	r1, [r5, #32]
 800dc38:	9803      	ldr	r0, [sp, #12]
 800dc3a:	f7fe f9f0 	bl	800c01e <ld_clust>
 800dc3e:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	88db      	ldrh	r3, [r3, #6]
 800dc44:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800dc46:	2100      	movs	r1, #0
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f7fe fe98 	bl	800c97e <dir_sdi>
				if (res == FR_OK) {
 800dc4e:	4604      	mov	r4, r0
 800dc50:	b968      	cbnz	r0, 800dc6e <f_opendir+0x7e>
					if (obj->sclust) {
 800dc52:	68ab      	ldr	r3, [r5, #8]
 800dc54:	b913      	cbnz	r3, 800dc5c <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800dc56:	2300      	movs	r3, #0
 800dc58:	612b      	str	r3, [r5, #16]
 800dc5a:	e008      	b.n	800dc6e <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f7fe f930 	bl	800bec4 <inc_lock>
 800dc64:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800dc66:	b910      	cbnz	r0, 800dc6e <f_opendir+0x7e>
 800dc68:	2412      	movs	r4, #18
 800dc6a:	e7ce      	b.n	800dc0a <f_opendir+0x1a>
					res = FR_NO_PATH;
 800dc6c:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dc6e:	2c04      	cmp	r4, #4
 800dc70:	d1cb      	bne.n	800dc0a <f_opendir+0x1a>
 800dc72:	2405      	movs	r4, #5
 800dc74:	e7ca      	b.n	800dc0c <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 800dc76:	2409      	movs	r4, #9
 800dc78:	e7ca      	b.n	800dc10 <f_opendir+0x20>

0800dc7a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dc7a:	b570      	push	{r4, r5, r6, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	4604      	mov	r4, r0
 800dc80:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800dc82:	a901      	add	r1, sp, #4
 800dc84:	f7fe fb63 	bl	800c34e <validate>
	if (res == FR_OK) {
 800dc88:	4606      	mov	r6, r0
 800dc8a:	b9c0      	cbnz	r0, 800dcbe <f_readdir+0x44>
		if (!fno) {
 800dc8c:	b195      	cbz	r5, 800dcb4 <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4620      	mov	r0, r4
 800dc92:	f7ff f81f 	bl	800ccd4 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800dc96:	2804      	cmp	r0, #4
 800dc98:	d000      	beq.n	800dc9c <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800dc9a:	b998      	cbnz	r0, 800dcc4 <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f7ff f9b8 	bl	800d014 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dca4:	2100      	movs	r1, #0
 800dca6:	4620      	mov	r0, r4
 800dca8:	f7fe ff69 	bl	800cb7e <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800dcac:	2804      	cmp	r0, #4
 800dcae:	d006      	beq.n	800dcbe <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800dcb0:	4606      	mov	r6, r0
 800dcb2:	e004      	b.n	800dcbe <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f7fe fe61 	bl	800c97e <dir_sdi>
 800dcbc:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	b002      	add	sp, #8
 800dcc2:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	e7fa      	b.n	800dcbe <f_readdir+0x44>

0800dcc8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800dcc8:	b570      	push	{r4, r5, r6, lr}
 800dcca:	4605      	mov	r5, r0
 800dccc:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800dcce:	4621      	mov	r1, r4
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f7ff ffd2 	bl	800dc7a <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	fab4 f384 	clz	r3, r4
 800dcdc:	095b      	lsrs	r3, r3, #5
 800dcde:	2800      	cmp	r0, #0
 800dce0:	bf18      	it	ne
 800dce2:	f043 0301 	orrne.w	r3, r3, #1
 800dce6:	b953      	cbnz	r3, 800dcfe <f_findnext+0x36>
 800dce8:	7da3      	ldrb	r3, [r4, #22]
 800dcea:	b143      	cbz	r3, 800dcfe <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800dcec:	2300      	movs	r3, #0
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f104 0116 	add.w	r1, r4, #22
 800dcf4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800dcf6:	f7fe fab1 	bl	800c25c <pattern_matching>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d0e7      	beq.n	800dcce <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800dcfe:	4630      	mov	r0, r6
 800dd00:	bd70      	pop	{r4, r5, r6, pc}

0800dd02 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800dd02:	b538      	push	{r3, r4, r5, lr}
 800dd04:	4604      	mov	r4, r0
 800dd06:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800dd08:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800dd0a:	4611      	mov	r1, r2
 800dd0c:	f7ff ff70 	bl	800dbf0 <f_opendir>
	if (res == FR_OK) {
 800dd10:	b100      	cbz	r0, 800dd14 <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800dd14:	4629      	mov	r1, r5
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff ffd6 	bl	800dcc8 <f_findnext>
 800dd1c:	e7f9      	b.n	800dd12 <f_findfirst+0x10>

0800dd1e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dd1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd20:	b0a1      	sub	sp, #132	; 0x84
 800dd22:	9001      	str	r0, [sp, #4]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dd24:	2202      	movs	r2, #2
 800dd26:	a903      	add	r1, sp, #12
 800dd28:	a801      	add	r0, sp, #4
 800dd2a:	f7fe fbb5 	bl	800c498 <find_volume>
	dj.obj.fs = fs;
 800dd2e:	9b03      	ldr	r3, [sp, #12]
 800dd30:	9312      	str	r3, [sp, #72]	; 0x48
	if (res == FR_OK) {
 800dd32:	4604      	mov	r4, r0
 800dd34:	b110      	cbz	r0, 800dd3c <f_unlink+0x1e>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 800dd36:	4620      	mov	r0, r4
 800dd38:	b021      	add	sp, #132	; 0x84
 800dd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
 800dd3c:	9901      	ldr	r1, [sp, #4]
 800dd3e:	a812      	add	r0, sp, #72	; 0x48
 800dd40:	f7ff faa3 	bl	800d28a <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800dd44:	4604      	mov	r4, r0
 800dd46:	b920      	cbnz	r0, 800dd52 <f_unlink+0x34>
 800dd48:	2102      	movs	r1, #2
 800dd4a:	a812      	add	r0, sp, #72	; 0x48
 800dd4c:	f7fe f86c 	bl	800be28 <chk_lock>
 800dd50:	4604      	mov	r4, r0
		if (res == FR_OK) {					/* The object is accessible */
 800dd52:	2c00      	cmp	r4, #0
 800dd54:	d1ef      	bne.n	800dd36 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dd56:	f99d 3077 	ldrsb.w	r3, [sp, #119]	; 0x77
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	db1e      	blt.n	800dd9c <f_unlink+0x7e>
				if (dj.obj.attr & AM_RDO) {
 800dd5e:	f89d 604e 	ldrb.w	r6, [sp, #78]	; 0x4e
 800dd62:	f016 0f01 	tst.w	r6, #1
 800dd66:	d12f      	bne.n	800ddc8 <f_unlink+0xaa>
					dclst = ld_clust(fs, dj.dir);
 800dd68:	9f03      	ldr	r7, [sp, #12]
 800dd6a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd6c:	4638      	mov	r0, r7
 800dd6e:	f7fe f956 	bl	800c01e <ld_clust>
 800dd72:	4605      	mov	r5, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dd74:	f016 0f10 	tst.w	r6, #16
 800dd78:	d012      	beq.n	800dda0 <f_unlink+0x82>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dd7a:	9704      	str	r7, [sp, #16]
						sdj.obj.sclust = dclst;
 800dd7c:	9006      	str	r0, [sp, #24]
						res = dir_sdi(&sdj, 0);
 800dd7e:	2100      	movs	r1, #0
 800dd80:	a804      	add	r0, sp, #16
 800dd82:	f7fe fdfc 	bl	800c97e <dir_sdi>
						if (res == FR_OK) {
 800dd86:	4604      	mov	r4, r0
 800dd88:	b950      	cbnz	r0, 800dda0 <f_unlink+0x82>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	a804      	add	r0, sp, #16
 800dd8e:	f7fe ffa1 	bl	800ccd4 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dd92:	4604      	mov	r4, r0
 800dd94:	b1d8      	cbz	r0, 800ddce <f_unlink+0xb0>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dd96:	2804      	cmp	r0, #4
 800dd98:	d102      	bne.n	800dda0 <f_unlink+0x82>
 800dd9a:	e003      	b.n	800dda4 <f_unlink+0x86>
	DWORD dclst = 0;
 800dd9c:	2500      	movs	r5, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dd9e:	2406      	movs	r4, #6
			if (res == FR_OK) {
 800dda0:	2c00      	cmp	r4, #0
 800dda2:	d1c8      	bne.n	800dd36 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dda4:	a812      	add	r0, sp, #72	; 0x48
 800dda6:	f7fe fff1 	bl	800cd8c <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ddaa:	4604      	mov	r4, r0
 800ddac:	fab0 f080 	clz	r0, r0
 800ddb0:	0940      	lsrs	r0, r0, #5
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	bf08      	it	eq
 800ddb6:	2000      	moveq	r0, #0
 800ddb8:	b958      	cbnz	r0, 800ddd2 <f_unlink+0xb4>
				if (res == FR_OK) res = sync_fs(fs);
 800ddba:	2c00      	cmp	r4, #0
 800ddbc:	d1bb      	bne.n	800dd36 <f_unlink+0x18>
 800ddbe:	9803      	ldr	r0, [sp, #12]
 800ddc0:	f7ff fb4a 	bl	800d458 <sync_fs>
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	e7b6      	b.n	800dd36 <f_unlink+0x18>
	DWORD dclst = 0;
 800ddc8:	2500      	movs	r5, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ddca:	2407      	movs	r4, #7
 800ddcc:	e7e8      	b.n	800dda0 <f_unlink+0x82>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ddce:	2407      	movs	r4, #7
 800ddd0:	e7e6      	b.n	800dda0 <f_unlink+0x82>
					res = remove_chain(&dj.obj, dclst, 0);
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	a812      	add	r0, sp, #72	; 0x48
 800ddd8:	f7fe fe92 	bl	800cb00 <remove_chain>
 800dddc:	4604      	mov	r4, r0
 800ddde:	e7ec      	b.n	800ddba <f_unlink+0x9c>

0800dde0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800dde0:	4b13      	ldr	r3, [pc, #76]	; (800de30 <FATFS_LinkDriverEx+0x50>)
 800dde2:	7a5b      	ldrb	r3, [r3, #9]
 800dde4:	bb13      	cbnz	r3, 800de2c <FATFS_LinkDriverEx+0x4c>
{
 800dde6:	b510      	push	{r4, lr}
 800dde8:	4604      	mov	r4, r0
 800ddea:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800ddee:	4b10      	ldr	r3, [pc, #64]	; (800de30 <FATFS_LinkDriverEx+0x50>)
 800ddf0:	f893 c009 	ldrb.w	ip, [r3, #9]
 800ddf4:	fa5f fc8c 	uxtb.w	ip, ip
 800ddf8:	f04f 0e00 	mov.w	lr, #0
 800ddfc:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800de00:	f893 c009 	ldrb.w	ip, [r3, #9]
 800de04:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800de08:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800de0c:	7a5c      	ldrb	r4, [r3, #9]
 800de0e:	441c      	add	r4, r3
 800de10:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800de12:	7a5a      	ldrb	r2, [r3, #9]
 800de14:	1c54      	adds	r4, r2, #1
 800de16:	b2e4      	uxtb	r4, r4
 800de18:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800de1a:	3230      	adds	r2, #48	; 0x30
 800de1c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800de1e:	233a      	movs	r3, #58	; 0x3a
 800de20:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800de22:	232f      	movs	r3, #47	; 0x2f
 800de24:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800de26:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800de2a:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800de2c:	2001      	movs	r0, #1
}
 800de2e:	4770      	bx	lr
 800de30:	2001defc 	.word	0x2001defc

0800de34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800de34:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800de36:	2200      	movs	r2, #0
 800de38:	f7ff ffd2 	bl	800dde0 <FATFS_LinkDriverEx>
}
 800de3c:	bd08      	pop	{r3, pc}
	...

0800de40 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800de40:	287f      	cmp	r0, #127	; 0x7f
 800de42:	d917      	bls.n	800de74 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800de44:	b131      	cbz	r1, 800de54 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de46:	28ff      	cmp	r0, #255	; 0xff
 800de48:	d813      	bhi.n	800de72 <ff_convert+0x32>
 800de4a:	3880      	subs	r0, #128	; 0x80
 800de4c:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <ff_convert+0x38>)
 800de4e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800de52:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800de54:	2300      	movs	r3, #0
 800de56:	2b7f      	cmp	r3, #127	; 0x7f
 800de58:	d807      	bhi.n	800de6a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800de5a:	4a07      	ldr	r2, [pc, #28]	; (800de78 <ff_convert+0x38>)
 800de5c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800de60:	4282      	cmp	r2, r0
 800de62:	d002      	beq.n	800de6a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800de64:	3301      	adds	r3, #1
 800de66:	b29b      	uxth	r3, r3
 800de68:	e7f5      	b.n	800de56 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800de6a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800de6e:	b2c0      	uxtb	r0, r0
 800de70:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800de72:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	0801ad9c 	.word	0x0801ad9c

0800de7c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de7c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800de80:	d207      	bcs.n	800de92 <ff_wtoupper+0x16>
 800de82:	4b24      	ldr	r3, [pc, #144]	; (800df14 <ff_wtoupper+0x98>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800de84:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800de86:	1e4a      	subs	r2, r1, #1
 800de88:	b292      	uxth	r2, r2
 800de8a:	4290      	cmp	r0, r2
 800de8c:	d940      	bls.n	800df10 <ff_wtoupper+0x94>
{
 800de8e:	b510      	push	{r4, lr}
 800de90:	e007      	b.n	800dea2 <ff_wtoupper+0x26>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800de92:	4b21      	ldr	r3, [pc, #132]	; (800df18 <ff_wtoupper+0x9c>)
 800de94:	e7f6      	b.n	800de84 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de96:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800de98:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800de9a:	1e4a      	subs	r2, r1, #1
 800de9c:	b292      	uxth	r2, r2
 800de9e:	4290      	cmp	r0, r2
 800dea0:	d919      	bls.n	800ded6 <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dea2:	f103 0e04 	add.w	lr, r3, #4
 800dea6:	885b      	ldrh	r3, [r3, #2]
 800dea8:	0a1a      	lsrs	r2, r3, #8
 800deaa:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800deac:	eb03 0c01 	add.w	ip, r3, r1
 800deb0:	4560      	cmp	r0, ip
 800deb2:	db04      	blt.n	800debe <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800deb4:	2a00      	cmp	r2, #0
 800deb6:	d1ee      	bne.n	800de96 <ff_wtoupper+0x1a>
 800deb8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800debc:	e7ec      	b.n	800de98 <ff_wtoupper+0x1c>
			switch (cmd) {
 800debe:	2a08      	cmp	r2, #8
 800dec0:	d809      	bhi.n	800ded6 <ff_wtoupper+0x5a>
 800dec2:	e8df f002 	tbb	[pc, r2]
 800dec6:	0905      	.short	0x0905
 800dec8:	1815120f 	.word	0x1815120f
 800decc:	1e1b      	.short	0x1e1b
 800dece:	21          	.byte	0x21
 800decf:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ded0:	1a44      	subs	r4, r0, r1
 800ded2:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 800ded6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ded8:	1a43      	subs	r3, r0, r1
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	1ac0      	subs	r0, r0, r3
 800dee0:	b280      	uxth	r0, r0
 800dee2:	e7f8      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dee4:	3810      	subs	r0, #16
 800dee6:	b280      	uxth	r0, r0
 800dee8:	e7f5      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800deea:	3820      	subs	r0, #32
 800deec:	b280      	uxth	r0, r0
 800deee:	e7f2      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800def0:	3830      	subs	r0, #48	; 0x30
 800def2:	b280      	uxth	r0, r0
 800def4:	e7ef      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800def6:	381a      	subs	r0, #26
 800def8:	b280      	uxth	r0, r0
 800defa:	e7ec      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800defc:	3008      	adds	r0, #8
 800defe:	b280      	uxth	r0, r0
 800df00:	e7e9      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800df02:	3850      	subs	r0, #80	; 0x50
 800df04:	b280      	uxth	r0, r0
 800df06:	e7e6      	b.n	800ded6 <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800df08:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800df0c:	b280      	uxth	r0, r0
 800df0e:	e7e2      	b.n	800ded6 <ff_wtoupper+0x5a>
}
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	0801ae9c 	.word	0x0801ae9c
 800df18:	0801b090 	.word	0x0801b090

0800df1c <tEnvelopeFollower_initToPool>:
{
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
 800df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1e:	4606      	mov	r6, r0
 800df20:	ee10 5a10 	vmov	r5, s0
 800df24:	ee10 4a90 	vmov	r4, s1
    _tMempool* m = *mp;
 800df28:	680f      	ldr	r7, [r1, #0]
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800df2a:	4639      	mov	r1, r7
 800df2c:	2010      	movs	r0, #16
 800df2e:	f004 febd 	bl	8012cac <mpool_alloc>
 800df32:	6030      	str	r0, [r6, #0]
    e->mempool = m;
 800df34:	6007      	str	r7, [r0, #0]
    
    e->y = 0.0f;
 800df36:	2300      	movs	r3, #0
 800df38:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800df3a:	6085      	str	r5, [r0, #8]
    e->d_coeff = decayCoeff;
 800df3c:	60c4      	str	r4, [r0, #12]
}
 800df3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df40 <tEnvelopeFollower_init>:
{
 800df40:	b508      	push	{r3, lr}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
 800df42:	3118      	adds	r1, #24
 800df44:	f7ff ffea 	bl	800df1c <tEnvelopeFollower_initToPool>
}
 800df48:	bd08      	pop	{r3, pc}
	...

0800df4c <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800df4c:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800df4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df56:	d415      	bmi.n	800df84 <tEnvelopeFollower_tick+0x38>
    
    if (isnan(x)) return 0.0f;
 800df58:	eeb4 0a40 	vcmp.f32	s0, s0
 800df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df60:	d61c      	bvs.n	800df9c <tEnvelopeFollower_tick+0x50>
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800df62:	edd3 7a01 	vldr	s15, [r3, #4]
 800df66:	eef4 7ac0 	vcmpe.f32	s15, s0
 800df6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6e:	d80c      	bhi.n	800df8a <tEnvelopeFollower_tick+0x3e>
 800df70:	ed93 7a02 	vldr	s14, [r3, #8]
 800df74:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800df78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7c:	d505      	bpl.n	800df8a <tEnvelopeFollower_tick+0x3e>
 800df7e:	ed83 0a01 	vstr	s0, [r3, #4]
 800df82:	e008      	b.n	800df96 <tEnvelopeFollower_tick+0x4a>
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800df84:	eeb1 0a40 	vneg.f32	s0, s0
 800df88:	e7e6      	b.n	800df58 <tEnvelopeFollower_tick+0xc>
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800df8a:	ed93 7a03 	vldr	s14, [r3, #12]
 800df8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df92:	edc3 7a01 	vstr	s15, [r3, #4]
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
 800df96:	ed93 0a01 	vldr	s0, [r3, #4]
 800df9a:	4770      	bx	lr
    if (isnan(x)) return 0.0f;
 800df9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dfa4 <tEnvelopeFollower_tick+0x58>
}
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	00000000 	.word	0x00000000

0800dfa8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	ed2d 8b02 	vpush	{d8}
 800dfae:	4604      	mov	r4, r0
 800dfb0:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800dfb4:	680d      	ldr	r5, [r1, #0]
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	2010      	movs	r0, #16
 800dfba:	f004 fe77 	bl	8012cac <mpool_alloc>
 800dfbe:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800dfc0:	6005      	str	r5, [r0, #0]
    
    p->curr=0.0f;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800dfc6:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800dfca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dfce:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800dfd2:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800dfd6:	ecbd 8b02 	vpop	{d8}
 800dfda:	bd38      	pop	{r3, r4, r5, pc}

0800dfdc <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
 800dfdc:	b508      	push	{r3, lr}
    _tPowerFollower* p = *pf;
 800dfde:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800dfe0:	6801      	ldr	r1, [r0, #0]
 800dfe2:	f004 ff4f 	bl	8012e84 <mpool_free>
}
 800dfe6:	bd08      	pop	{r3, pc}

0800dfe8 <tPowerFollower_setFactor>:

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800dfe8:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
 800dfea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff2:	d411      	bmi.n	800e018 <tPowerFollower_setFactor+0x30>
    if (factor>1.0f) factor=1.0f;
 800dff4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dff8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e000:	dd01      	ble.n	800e006 <tPowerFollower_setFactor+0x1e>
 800e002:	eeb0 0a67 	vmov.f32	s0, s15
    p->factor=factor;
 800e006:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800e00a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e00e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e012:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e016:	4770      	bx	lr
    if (factor<0.0f) factor=0.0f;
 800e018:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e020 <tPowerFollower_setFactor+0x38>
 800e01c:	e7ea      	b.n	800dff4 <tPowerFollower_setFactor+0xc>
 800e01e:	bf00      	nop
 800e020:	00000000 	.word	0x00000000

0800e024 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800e024:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800e026:	edd3 7a01 	vldr	s15, [r3, #4]
 800e02a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e02e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e032:	edd3 7a02 	vldr	s15, [r3, #8]
 800e036:	ed93 7a03 	vldr	s14, [r3, #12]
 800e03a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e03e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e042:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800e046:	4770      	bx	lr

0800e048 <tLinearDelay_free>:
    
    tLinearDelay_setDelay(dl, d->delay);
}

void tLinearDelay_free (tLinearDelay* const dl)
{
 800e048:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800e04a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)d->buff, d->mempool);
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	68a0      	ldr	r0, [r4, #8]
 800e050:	f004 ff18 	bl	8012e84 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800e054:	6821      	ldr	r1, [r4, #0]
 800e056:	4620      	mov	r0, r4
 800e058:	f004 ff14 	bl	8012e84 <mpool_free>
}
 800e05c:	bd10      	pop	{r4, pc}

0800e05e <tLinearDelay_clear>:

void    tLinearDelay_clear(tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800e05e:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800e060:	2300      	movs	r3, #0
 800e062:	e005      	b.n	800e070 <tLinearDelay_clear+0x12>
    {
        d->buff[i] = 0;
 800e064:	688a      	ldr	r2, [r1, #8]
 800e066:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e06a:	2000      	movs	r0, #0
 800e06c:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800e06e:	3301      	adds	r3, #1
 800e070:	69ca      	ldr	r2, [r1, #28]
 800e072:	429a      	cmp	r2, r3
 800e074:	d8f6      	bhi.n	800e064 <tLinearDelay_clear+0x6>
    }
}
 800e076:	4770      	bx	lr

0800e078 <tLinearDelay_tick>:

Lfloat   tLinearDelay_tick (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800e078:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800e07a:	edd3 7a01 	vldr	s15, [r3, #4]
 800e07e:	689a      	ldr	r2, [r3, #8]
 800e080:	6959      	ldr	r1, [r3, #20]
 800e082:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e086:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e08a:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e08e:	695a      	ldr	r2, [r3, #20]
 800e090:	3201      	adds	r2, #1
 800e092:	615a      	str	r2, [r3, #20]
 800e094:	69d9      	ldr	r1, [r3, #28]
 800e096:	428a      	cmp	r2, r1
 800e098:	d022      	beq.n	800e0e0 <tLinearDelay_tick+0x68>

    uint32_t idx = (uint32_t) d->outPoint;
 800e09a:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800e09c:	6898      	ldr	r0, [r3, #8]
 800e09e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800e0a2:	eddc 7a00 	vldr	s15, [ip]
 800e0a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800e0aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e0ae:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 800e0b2:	3201      	adds	r2, #1
 800e0b4:	4291      	cmp	r1, r2
 800e0b6:	d916      	bls.n	800e0e6 <tLinearDelay_tick+0x6e>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800e0b8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e0bc:	ed90 7a00 	vldr	s14, [r0]
 800e0c0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800e0c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e0c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0cc:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800e0d0:	619a      	str	r2, [r3, #24]
 800e0d2:	4291      	cmp	r1, r2
 800e0d4:	d801      	bhi.n	800e0da <tLinearDelay_tick+0x62>
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800e0da:	ed93 0a03 	vldr	s0, [r3, #12]
 800e0de:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	615a      	str	r2, [r3, #20]
 800e0e4:	e7d9      	b.n	800e09a <tLinearDelay_tick+0x22>
        d->lastOut += d->buff[0] * d->alpha;
 800e0e6:	ed90 7a00 	vldr	s14, [r0]
 800e0ea:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800e0ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e0f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e0f6:	edc3 7a03 	vstr	s15, [r3, #12]
 800e0fa:	e7e9      	b.n	800e0d0 <tLinearDelay_tick+0x58>

0800e0fc <tLinearDelay_tickIn>:

void   tLinearDelay_tickIn (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800e0fc:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800e0fe:	edd3 7a01 	vldr	s15, [r3, #4]
 800e102:	689a      	ldr	r2, [r3, #8]
 800e104:	6959      	ldr	r1, [r3, #20]
 800e106:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e10a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e10e:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e112:	695a      	ldr	r2, [r3, #20]
 800e114:	3201      	adds	r2, #1
 800e116:	615a      	str	r2, [r3, #20]
 800e118:	69d9      	ldr	r1, [r3, #28]
 800e11a:	428a      	cmp	r2, r1
 800e11c:	d000      	beq.n	800e120 <tLinearDelay_tickIn+0x24>
}
 800e11e:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e120:	2200      	movs	r2, #0
 800e122:	615a      	str	r2, [r3, #20]
}
 800e124:	e7fb      	b.n	800e11e <tLinearDelay_tickIn+0x22>

0800e126 <tLinearDelay_tickOut>:

Lfloat   tLinearDelay_tickOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800e126:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800e128:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800e12a:	6899      	ldr	r1, [r3, #8]
 800e12c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800e130:	edd0 7a00 	vldr	s15, [r0]
 800e134:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800e138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e13c:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
        
    if ((idx + 1) < d->maxDelay)
 800e140:	3201      	adds	r2, #1
 800e142:	69d8      	ldr	r0, [r3, #28]
 800e144:	4282      	cmp	r2, r0
 800e146:	d213      	bcs.n	800e170 <tLinearDelay_tickOut+0x4a>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800e148:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e14c:	ed91 7a00 	vldr	s14, [r1]
 800e150:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800e154:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e15c:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800e160:	619a      	str	r2, [r3, #24]
 800e162:	4282      	cmp	r2, r0
 800e164:	d301      	bcc.n	800e16a <tLinearDelay_tickOut+0x44>
 800e166:	2200      	movs	r2, #0
 800e168:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800e16a:	ed93 0a03 	vldr	s0, [r3, #12]
 800e16e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800e170:	ed91 7a00 	vldr	s14, [r1]
 800e174:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800e178:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e17c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e180:	edc3 7a03 	vstr	s15, [r3, #12]
 800e184:	e7ec      	b.n	800e160 <tLinearDelay_tickOut+0x3a>

0800e186 <tLinearDelay_setDelay>:

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;
 800e186:	6803      	ldr	r3, [r0, #0]

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800e188:	69d9      	ldr	r1, [r3, #28]
 800e18a:	ee07 1a90 	vmov	s15, r1
 800e18e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
#else
    inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 800e192:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e196:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19e:	d407      	bmi.n	800e1b0 <tLinearDelay_setDelay+0x2a>
    {
        return min;
    }
    else if (val > max)
 800e1a0:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	d504      	bpl.n	800e1b4 <tLinearDelay_setDelay+0x2e>
    {
        return max;
 800e1aa:	eeb0 0a47 	vmov.f32	s0, s14
 800e1ae:	e001      	b.n	800e1b4 <tLinearDelay_setDelay+0x2e>
        return min;
 800e1b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e1b4:	ed83 0a08 	vstr	s0, [r3, #32]

    Lfloat outPointer = d->inPoint - d->delay;
 800e1b8:	edd3 7a05 	vldr	s15, [r3, #20]
 800e1bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1c0:	ee77 7ac0 	vsub.f32	s15, s15, s0

    while ( outPointer < 0 )
 800e1c4:	e001      	b.n	800e1ca <tLinearDelay_setDelay+0x44>
        outPointer += d->maxDelay; // modulo maximum length
 800e1c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800e1ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d2:	d4f8      	bmi.n	800e1c6 <tLinearDelay_setDelay+0x40>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800e1d4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e1d8:	ee17 2a10 	vmov	r2, s14
 800e1dc:	ed83 7a06 	vstr	s14, [r3, #24]

    d->alpha = outPointer - d->outPoint; // fractional part
 800e1e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e1e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1e8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800e1ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800e1f8:	4291      	cmp	r1, r2
 800e1fa:	d000      	beq.n	800e1fe <tLinearDelay_setDelay+0x78>
}
 800e1fc:	4770      	bx	lr
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800e1fe:	2200      	movs	r2, #0
 800e200:	619a      	str	r2, [r3, #24]
}
 800e202:	e7fb      	b.n	800e1fc <tLinearDelay_setDelay+0x76>

0800e204 <tLinearDelay_initToPool>:
{
 800e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e206:	ed2d 8b02 	vpush	{d8}
 800e20a:	4606      	mov	r6, r0
 800e20c:	eeb0 8a40 	vmov.f32	s16, s0
 800e210:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800e212:	6817      	ldr	r7, [r2, #0]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800e214:	4639      	mov	r1, r7
 800e216:	202c      	movs	r0, #44	; 0x2c
 800e218:	f004 fd48 	bl	8012cac <mpool_alloc>
 800e21c:	4604      	mov	r4, r0
 800e21e:	6030      	str	r0, [r6, #0]
    d->mempool = m;
 800e220:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 800e222:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800e224:	ee07 5a90 	vmov	s15, r5
 800e228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e234:	d517      	bpl.n	800e266 <tLinearDelay_initToPool+0x62>
 800e236:	edc0 7a08 	vstr	s15, [r0, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800e23a:	4639      	mov	r1, r7
 800e23c:	00a8      	lsls	r0, r5, #2
 800e23e:	f004 fd35 	bl	8012cac <mpool_alloc>
 800e242:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800e244:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e248:	6063      	str	r3, [r4, #4]
    d->lastIn = 0.0f;
 800e24a:	2300      	movs	r3, #0
 800e24c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800e24e:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800e250:	2300      	movs	r3, #0
 800e252:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800e254:	61a3      	str	r3, [r4, #24]
    tLinearDelay_setDelay(dl, d->delay);
 800e256:	ed94 0a08 	vldr	s0, [r4, #32]
 800e25a:	4630      	mov	r0, r6
 800e25c:	f7ff ff93 	bl	800e186 <tLinearDelay_setDelay>
}
 800e260:	ecbd 8b02 	vpop	{d8}
 800e264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 800e266:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26e:	d402      	bmi.n	800e276 <tLinearDelay_initToPool+0x72>
    else                    d->delay = delay;
 800e270:	ed80 8a08 	vstr	s16, [r0, #32]
 800e274:	e7e1      	b.n	800e23a <tLinearDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800e276:	2300      	movs	r3, #0
 800e278:	6203      	str	r3, [r0, #32]
 800e27a:	e7de      	b.n	800e23a <tLinearDelay_initToPool+0x36>

0800e27c <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800e27c:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800e27e:	6953      	ldr	r3, [r2, #20]
 800e280:	1a59      	subs	r1, r3, r1
 800e282:	3901      	subs	r1, #1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800e284:	e001      	b.n	800e28a <tLinearDelay_addTo+0xe>
 800e286:	69d3      	ldr	r3, [r2, #28]
 800e288:	4419      	add	r1, r3
 800e28a:	2900      	cmp	r1, #0
 800e28c:	dbfb      	blt.n	800e286 <tLinearDelay_addTo+0xa>
    
    return (d->buff[tap] += value);
 800e28e:	6893      	ldr	r3, [r2, #8]
 800e290:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800e294:	edd3 7a00 	vldr	s15, [r3]
 800e298:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e29c:	ed83 0a00 	vstr	s0, [r3]
}
 800e2a0:	4770      	bx	lr

0800e2a2 <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800e2a2:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800e2a4:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800e2a6:	6821      	ldr	r1, [r4, #0]
 800e2a8:	6860      	ldr	r0, [r4, #4]
 800e2aa:	f004 fdeb 	bl	8012e84 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800e2ae:	6821      	ldr	r1, [r4, #0]
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f004 fde7 	bl	8012e84 <mpool_free>
}
 800e2b6:	bd10      	pop	{r4, pc}

0800e2b8 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800e2b8:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	e005      	b.n	800e2ca <tLagrangeDelay_clear+0x12>
    {
        d->buff[i] = 0.0f;
 800e2be:	684a      	ldr	r2, [r1, #4]
 800e2c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	69ca      	ldr	r2, [r1, #28]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d8f6      	bhi.n	800e2be <tLagrangeDelay_clear+0x6>
    }
}
 800e2d0:	4770      	bx	lr

0800e2d2 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800e2d2:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800e2d4:	685a      	ldr	r2, [r3, #4]
 800e2d6:	6959      	ldr	r1, [r3, #20]
 800e2d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e2dc:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800e2e0:	695a      	ldr	r2, [r3, #20]
 800e2e2:	3201      	adds	r2, #1
 800e2e4:	6899      	ldr	r1, [r3, #8]
 800e2e6:	400a      	ands	r2, r1
 800e2e8:	615a      	str	r2, [r3, #20]
}
 800e2ea:	4770      	bx	lr

0800e2ec <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800e2ec:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800e2ee:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800e2f0:	6998      	ldr	r0, [r3, #24]

   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	4402      	add	r2, r0
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	689c      	ldr	r4, [r3, #8]
 800e2fa:	4022      	ands	r2, r4

    d->lastOut =    (d->buff[previdx] * d->h0) +
 800e2fc:	6859      	ldr	r1, [r3, #4]
 800e2fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e302:	ed92 0a00 	vldr	s0, [r2]
 800e306:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e30a:	ee20 0a27 	vmul.f32	s0, s0, s15
    		(d->buff[idx] * d->h1) +
 800e30e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800e312:	edd2 7a00 	vldr	s15, [r2]
 800e316:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800e31a:	ee67 7a87 	vmul.f32	s15, s15, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800e31e:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800e322:	1c42      	adds	r2, r0, #1
 800e324:	4022      	ands	r2, r4
 800e326:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800e32a:	eddc 7a00 	vldr	s15, [ip]
 800e32e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800e332:	ee67 7a87 	vmul.f32	s15, s15, s14
    		(d->buff[idx] * d->h1) +
 800e336:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800e33a:	3002      	adds	r0, #2
 800e33c:	4004      	ands	r4, r0
 800e33e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e342:	edd1 7a00 	vldr	s15, [r1]
 800e346:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800e34a:	ee67 7a87 	vmul.f32	s15, s15, s14
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800e34e:	ee30 0a27 	vadd.f32	s0, s0, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800e352:	ed83 0a03 	vstr	s0, [r3, #12]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800e356:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800e358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e35c:	4770      	bx	lr
	...

0800e360 <tLagrangeDelay_setDelay>:

void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
 800e360:	6803      	ldr	r3, [r0, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
 800e362:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800e366:	edd3 7a05 	vldr	s15, [r3, #20]
 800e36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e36e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e376:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800e37a:	e005      	b.n	800e388 <tLagrangeDelay_setDelay+0x28>
        outPointer += d->maxDelay; // modulo maximum length
 800e37c:	ed93 7a07 	vldr	s14, [r3, #28]
 800e380:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e384:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800e388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e390:	d4f4      	bmi.n	800e37c <tLagrangeDelay_setDelay+0x1c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800e392:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e396:	ee17 2a10 	vmov	r2, s14
 800e39a:	ed83 7a06 	vstr	s14, [r3, #24]

    //Lfloat alpha = 1.0f - (outPointer - d->outPoint); // fractional part
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800e39e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e3a2:	ee77 7ac7 	vsub.f32	s15, s15, s14

	Lfloat dp1 = alpha+1.0f;
 800e3a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3aa:	ee37 6a87 	vadd.f32	s12, s15, s14
	Lfloat dm1 = alpha-1.0f;
 800e3ae:	ee37 7ac7 	vsub.f32	s14, s15, s14
	Lfloat dm2 = alpha-2.0f;
 800e3b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e3b6:	ee77 6ae6 	vsub.f32	s13, s15, s13

	Lfloat pdp1d = dp1*alpha;
 800e3ba:	ee67 5a86 	vmul.f32	s11, s15, s12
	Lfloat pddm1 = alpha*dm1;
 800e3be:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat pdm1dm2 = dm1*dm2;
 800e3c2:	ee27 5a26 	vmul.f32	s10, s14, s13

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800e3c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3ca:	eddf 4a11 	vldr	s9, [pc, #68]	; 800e410 <tLagrangeDelay_setDelay+0xb0>
 800e3ce:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800e3d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800e3d6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800e3da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e3de:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e3e2:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
	d->h2 = -0.5f * (pdp1d * dm2);
 800e3e6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e3ea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800e3ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e3f2:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800e3f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e3fa:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e414 <tLagrangeDelay_setDelay+0xb4>
 800e3fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e402:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    d->outPoint &= d->bufferMask;
 800e406:	6899      	ldr	r1, [r3, #8]
 800e408:	400a      	ands	r2, r1
 800e40a:	619a      	str	r2, [r3, #24]
}
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	be2aaaab 	.word	0xbe2aaaab
 800e414:	3e2aaaab 	.word	0x3e2aaaab

0800e418 <tLagrangeDelay_initToPool>:
{
 800e418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41a:	ed2d 8b02 	vpush	{d8}
 800e41e:	4605      	mov	r5, r0
 800e420:	eeb0 8a40 	vmov.f32	s16, s0
 800e424:	460f      	mov	r7, r1
    _tMempool* m = *mp;
 800e426:	6816      	ldr	r6, [r2, #0]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800e428:	4631      	mov	r1, r6
 800e42a:	2034      	movs	r0, #52	; 0x34
 800e42c:	f004 fc3e 	bl	8012cac <mpool_alloc>
 800e430:	4604      	mov	r4, r0
 800e432:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800e434:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
 800e436:	61c7      	str	r7, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800e438:	ee07 7a90 	vmov	s15, r7
 800e43c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e440:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e448:	d507      	bpl.n	800e45a <tLagrangeDelay_initToPool+0x42>
 800e44a:	edc0 7a08 	vstr	s15, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800e44e:	b17f      	cbz	r7, 800e470 <tLagrangeDelay_initToPool+0x58>
 800e450:	1e7b      	subs	r3, r7, #1
 800e452:	423b      	tst	r3, r7
 800e454:	d10c      	bne.n	800e470 <tLagrangeDelay_initToPool+0x58>
        d->bufferMask = maxDelay - 1;
 800e456:	60a3      	str	r3, [r4, #8]
 800e458:	e018      	b.n	800e48c <tLagrangeDelay_initToPool+0x74>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800e45a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	d402      	bmi.n	800e46a <tLagrangeDelay_initToPool+0x52>
    else                    d->delay = delay;
 800e464:	ed80 8a08 	vstr	s16, [r0, #32]
 800e468:	e7f1      	b.n	800e44e <tLagrangeDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800e46a:	2300      	movs	r3, #0
 800e46c:	6203      	str	r3, [r0, #32]
 800e46e:	e7ee      	b.n	800e44e <tLagrangeDelay_initToPool+0x36>
        maxDelay--;
 800e470:	1e7b      	subs	r3, r7, #1
        maxDelay |= maxDelay >> 1;
 800e472:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800e476:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800e47a:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800e47e:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800e482:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
        maxDelay++;
 800e486:	1c5f      	adds	r7, r3, #1
        d->maxDelay = maxDelay;
 800e488:	61e7      	str	r7, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800e48a:	60a3      	str	r3, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800e48c:	4631      	mov	r1, r6
 800e48e:	00b8      	lsls	r0, r7, #2
 800e490:	f004 fc0c 	bl	8012cac <mpool_alloc>
 800e494:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 800e496:	2300      	movs	r3, #0
 800e498:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800e49a:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800e4a0:	61a3      	str	r3, [r4, #24]
    tLagrangeDelay_setDelay(dl, d->delay);
 800e4a2:	ed94 0a08 	vldr	s0, [r4, #32]
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f7ff ff5a 	bl	800e360 <tLagrangeDelay_setDelay>
}
 800e4ac:	ecbd 8b02 	vpop	{d8}
 800e4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e4b2 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800e4b2:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800e4b4:	6953      	ldr	r3, [r2, #20]
 800e4b6:	1a5b      	subs	r3, r3, r1
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	6891      	ldr	r1, [r2, #8]
 800e4bc:	400b      	ands	r3, r1

    return d->buff[tap];
 800e4be:	6852      	ldr	r2, [r2, #4]
 800e4c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2

}
 800e4c4:	ed93 0a00 	vldr	s0, [r3]
 800e4c8:	4770      	bx	lr
	...

0800e4cc <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 800e4cc:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800e4ce:	6804      	ldr	r4, [r0, #0]

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800e4d0:	6963      	ldr	r3, [r4, #20]
 800e4d2:	1a59      	subs	r1, r3, r1
 800e4d4:	3902      	subs	r1, #2
 800e4d6:	68a0      	ldr	r0, [r4, #8]
 800e4d8:	4001      	ands	r1, r0

    alpha = 1.0f - alpha;
 800e4da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4de:	ee37 0ac0 	vsub.f32	s0, s15, s0
    Lfloat dp1 = alpha+1.0f;
 800e4e2:	ee70 6a27 	vadd.f32	s13, s0, s15
    Lfloat dm1 = alpha-1.0f;
 800e4e6:	ee70 7a67 	vsub.f32	s15, s0, s15
    Lfloat dm2 = alpha-2.0f;
 800e4ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e4ee:	ee30 7a47 	vsub.f32	s14, s0, s14

    Lfloat pdp1d = dp1*alpha;
 800e4f2:	ee60 5a26 	vmul.f32	s11, s0, s13
    Lfloat pddm1 = alpha*dm1;
 800e4f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    Lfloat pdm1dm2 = dm1*dm2;
 800e4fa:	ee27 6a87 	vmul.f32	s12, s15, s14

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800e4fe:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e502:	ed9f 5a20 	vldr	s10, [pc, #128]	; 800e584 <tLagrangeDelay_tapOutInterpolated+0xb8>
 800e506:	ee20 0a05 	vmul.f32	s0, s0, s10
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800e50a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e50e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e512:	ee26 6a86 	vmul.f32	s12, s13, s12
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800e516:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e51a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800e51e:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800e522:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e526:	eddf 6a18 	vldr	s13, [pc, #96]	; 800e588 <tLagrangeDelay_tapOutInterpolated+0xbc>
 800e52a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800e52e:	6862      	ldr	r2, [r4, #4]
 800e530:	69e3      	ldr	r3, [r4, #28]
 800e532:	440b      	add	r3, r1
 800e534:	3b01      	subs	r3, #1
 800e536:	4003      	ands	r3, r0
 800e538:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e53c:	edd3 6a00 	vldr	s13, [r3]
 800e540:	ee26 0a80 	vmul.f32	s0, s13, s0
    		(d->buff[idx] * h1) +
 800e544:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800e548:	edd3 6a00 	vldr	s13, [r3]
 800e54c:	ee66 6a86 	vmul.f32	s13, s13, s12
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800e550:	ee30 0a26 	vadd.f32	s0, s0, s13
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800e554:	1c4b      	adds	r3, r1, #1
 800e556:	4003      	ands	r3, r0
 800e558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e55c:	edd3 6a00 	vldr	s13, [r3]
 800e560:	ee26 7a87 	vmul.f32	s14, s13, s14
    		(d->buff[idx] * h1) +
 800e564:	ee30 7a07 	vadd.f32	s14, s0, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800e568:	3102      	adds	r1, #2
 800e56a:	4008      	ands	r0, r1
 800e56c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e570:	ed92 0a00 	vldr	s0, [r2]
 800e574:	ee20 0a27 	vmul.f32	s0, s0, s15

}
 800e578:	ee37 0a00 	vadd.f32	s0, s14, s0
 800e57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	be2aaaab 	.word	0xbe2aaaab
 800e588:	3e2aaaab 	.word	0x3e2aaaab

0800e58c <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800e58c:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800e58e:	6953      	ldr	r3, [r2, #20]
 800e590:	1a5b      	subs	r3, r3, r1
 800e592:	3b01      	subs	r3, #1
 800e594:	6891      	ldr	r1, [r2, #8]
 800e596:	400b      	ands	r3, r1

    d->buff[tap] = value;
 800e598:	6852      	ldr	r2, [r2, #4]
 800e59a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e59e:	ed83 0a00 	vstr	s0, [r3]
}
 800e5a2:	4770      	bx	lr

0800e5a4 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800e5a4:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800e5a6:	6953      	ldr	r3, [r2, #20]
 800e5a8:	1a5b      	subs	r3, r3, r1
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	6891      	ldr	r1, [r2, #8]
 800e5ae:	400b      	ands	r3, r1

    return (d->buff[tap] += value);
 800e5b0:	6852      	ldr	r2, [r2, #4]
 800e5b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5b6:	edd3 7a00 	vldr	s15, [r3]
 800e5ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5be:	ed83 0a00 	vstr	s0, [r3]
}
 800e5c2:	4770      	bx	lr

0800e5c4 <tLagrangeDelay_getMaxDelay>:
}


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800e5c4:	6803      	ldr	r3, [r0, #0]
    return d->maxDelay;
 800e5c6:	ed93 0a07 	vldr	s0, [r3, #28]
}
 800e5ca:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e5ce:	4770      	bx	lr

0800e5d0 <tTapeDelay_free>:

    tTapeDelay_setDelay(dl, delay);
}

void tTapeDelay_free (tTapeDelay* const dl)
{
 800e5d0:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 800e5d2:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800e5d4:	6821      	ldr	r1, [r4, #0]
 800e5d6:	68a0      	ldr	r0, [r4, #8]
 800e5d8:	f004 fc54 	bl	8012e84 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800e5dc:	6821      	ldr	r1, [r4, #0]
 800e5de:	4620      	mov	r0, r4
 800e5e0:	f004 fc50 	bl	8012e84 <mpool_free>
}
 800e5e4:	bd10      	pop	{r4, pc}
	...

0800e5e8 <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800e5e8:	b500      	push	{lr}
    _tTapeDelay* d = *dl;
 800e5ea:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800e5ec:	edd3 7a01 	vldr	s15, [r3, #4]
 800e5f0:	689a      	ldr	r2, [r3, #8]
 800e5f2:	6959      	ldr	r1, [r3, #20]
 800e5f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e5f8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e5fc:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e600:	695a      	ldr	r2, [r3, #20]
 800e602:	3201      	adds	r2, #1
 800e604:	615a      	str	r2, [r3, #20]
 800e606:	edd3 6a06 	vldr	s13, [r3, #24]
 800e60a:	ee16 1a90 	vmov	r1, s13
 800e60e:	428a      	cmp	r2, r1
 800e610:	d05b      	beq.n	800e6ca <tTapeDelay_tick+0xe2>

    int idx =  (int) d->idx;
 800e612:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800e616:	eefd 7ae5 	vcvt.s32.f32	s15, s11
 800e61a:	ee17 2a90 	vmov	r2, s15
    Lfloat alpha = d->idx - idx;
 800e61e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e622:	ee35 7ac7 	vsub.f32	s14, s11, s14

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e626:	6898      	ldr	r0, [r3, #8]
 800e628:	ee16 1a90 	vmov	r1, s13
 800e62c:	4411      	add	r1, r2
 800e62e:	3901      	subs	r1, #1
 800e630:	ee16 ca90 	vmov	ip, s13
 800e634:	fbb1 fcfc 	udiv	ip, r1, ip
 800e638:	ee16 ea90 	vmov	lr, s13
 800e63c:	fb0e 111c 	mls	r1, lr, ip, r1
 800e640:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e644:	edd1 7a00 	vldr	s15, [r1]
                                              d->buff[idx],
 800e648:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e64c:	ed91 0a00 	vldr	s0, [r1]
                                              d->buff[(idx + 1) % d->maxDelay],
 800e650:	1c51      	adds	r1, r2, #1
 800e652:	fbb1 fcfe 	udiv	ip, r1, lr
 800e656:	fb0e 111c 	mls	r1, lr, ip, r1
 800e65a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e65e:	ed91 4a00 	vldr	s8, [r1]
                                              d->buff[(idx + 2) % d->maxDelay],
 800e662:	3202      	adds	r2, #2
 800e664:	fbb2 f1fe 	udiv	r1, r2, lr
 800e668:	fb0e 2211 	mls	r2, lr, r1, r2
 800e66c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e670:	ed90 6a00 	vldr	s12, [r0]
//grabbed this from Tom Erbe's Delay pd code
inline Lfloat LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
    Lfloat c1 = 0.5f * (yy2 - yy0);
 800e674:	ee34 5a67 	vsub.f32	s10, s8, s15
 800e678:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e67c:	ee25 5a23 	vmul.f32	s10, s10, s7
    Lfloat y0my1 = yy0 - yy1;
 800e680:	ee77 7ac0 	vsub.f32	s15, s15, s0
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 800e684:	ee70 4a44 	vsub.f32	s9, s0, s8
 800e688:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e68c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800e690:	ee26 6a23 	vmul.f32	s12, s12, s7
 800e694:	ee34 6a86 	vadd.f32	s12, s9, s12
    Lfloat c2 = y0my1 + c1 - c3;
 800e698:	ee75 7a27 	vadd.f32	s15, s10, s15
 800e69c:	ee77 7ac6 	vsub.f32	s15, s15, s12
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 800e6a0:	ee27 6a06 	vmul.f32	s12, s14, s12
 800e6a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e6a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ac:	ee35 5a27 	vadd.f32	s10, s10, s15
 800e6b0:	ee27 7a05 	vmul.f32	s14, s14, s10
 800e6b4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e6b8:	ed83 0a03 	vstr	s0, [r3, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 800e6bc:	edd3 7a05 	vldr	s15, [r3, #20]
 800e6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6c4:	ee77 7ae5 	vsub.f32	s15, s15, s11
    while (diff < 0.f) diff += d->maxDelay;
 800e6c8:	e006      	b.n	800e6d8 <tTapeDelay_tick+0xf0>
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	615a      	str	r2, [r3, #20]
 800e6ce:	e7a0      	b.n	800e612 <tTapeDelay_tick+0x2a>
    while (diff < 0.f) diff += d->maxDelay;
 800e6d0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800e6d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e0:	d4f6      	bmi.n	800e6d0 <tTapeDelay_tick+0xe8>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800e6e2:	ed93 6a07 	vldr	s12, [r3, #28]
 800e6e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e6ea:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800e6ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6f6:	edc3 7a08 	vstr	s15, [r3, #32]

    d->idx += d->inc;
 800e6fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800e6fe:	edc3 5a09 	vstr	s11, [r3, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800e702:	e003      	b.n	800e70c <tTapeDelay_tick+0x124>
 800e704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e708:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800e70c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800e710:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800e714:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71c:	daf2      	bge.n	800e704 <tTapeDelay_tick+0x11c>

    if (d->lastOut)
 800e71e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e726:	d101      	bne.n	800e72c <tTapeDelay_tick+0x144>
        return d->lastOut;
    return 0.0f;
 800e728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e730 <tTapeDelay_tick+0x148>
}
 800e72c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e730:	00000000 	.word	0x00000000

0800e734 <tTapeDelay_setDelay>:
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
 800e734:	6803      	ldr	r3, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 800e736:	edd3 7a06 	vldr	s15, [r3, #24]
 800e73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (val < min)
 800e73e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e742:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	d407      	bmi.n	800e75c <tTapeDelay_setDelay+0x28>
    else if (val > max)
 800e74c:	eef4 7ac0 	vcmpe.f32	s15, s0
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	d504      	bpl.n	800e760 <tTapeDelay_setDelay+0x2c>
        return max;
 800e756:	eeb0 0a67 	vmov.f32	s0, s15
 800e75a:	e001      	b.n	800e760 <tTapeDelay_setDelay+0x2c>
        return min;
 800e75c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e760:	ed83 0a07 	vstr	s0, [r3, #28]
}
 800e764:	4770      	bx	lr

0800e766 <tTapeDelay_initToPool>:
{
 800e766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e768:	ed2d 8b02 	vpush	{d8}
 800e76c:	4605      	mov	r5, r0
 800e76e:	eeb0 8a40 	vmov.f32	s16, s0
 800e772:	460e      	mov	r6, r1
    _tMempool* m = *mp;
 800e774:	6817      	ldr	r7, [r2, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800e776:	4639      	mov	r1, r7
 800e778:	202c      	movs	r0, #44	; 0x2c
 800e77a:	f004 fa97 	bl	8012cac <mpool_alloc>
 800e77e:	4604      	mov	r4, r0
 800e780:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800e782:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 800e784:	6186      	str	r6, [r0, #24]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800e786:	4639      	mov	r1, r7
 800e788:	00b0      	lsls	r0, r6, #2
 800e78a:	f004 fa8f 	bl	8012cac <mpool_alloc>
 800e78e:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800e790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e794:	6062      	str	r2, [r4, #4]
    d->lastIn = 0.0f;
 800e796:	2300      	movs	r3, #0
 800e798:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800e79a:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 800e79c:	6263      	str	r3, [r4, #36]	; 0x24
    d->inc = 1.0f;
 800e79e:	6222      	str	r2, [r4, #32]
    d->inPoint = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	6163      	str	r3, [r4, #20]
    tTapeDelay_setDelay(dl, delay);
 800e7a4:	eeb0 0a48 	vmov.f32	s0, s16
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f7ff ffc3 	bl	800e734 <tTapeDelay_setDelay>
}
 800e7ae:	ecbd 8b02 	vpop	{d8}
 800e7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7b4 <tSampleReducer_initToPool>:
{
    tSampleReducer_initToPool(sr, &leaf->mempool);
}

void tSampleReducer_initToPool (tSampleReducer* const sr, tMempool* const mp)
{
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800e7b8:	680d      	ldr	r5, [r1, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	2010      	movs	r0, #16
 800e7be:	f004 fa75 	bl	8012cac <mpool_alloc>
 800e7c2:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800e7c4:	6005      	str	r5, [r0, #0]
    
    s->invRatio = 1.0f;
 800e7c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e7ca:	6043      	str	r3, [r0, #4]
    s->hold = 0.0f;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	6083      	str	r3, [r0, #8]
    s->count = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60c3      	str	r3, [r0, #12]
}
 800e7d4:	bd38      	pop	{r3, r4, r5, pc}

0800e7d6 <tSampleReducer_tick>:
    mpool_free((char*)s, s->mempool);
}

Lfloat tSampleReducer_tick(tSampleReducer* const sr, Lfloat input)
{
    _tSampleReducer* s = *sr;
 800e7d6:	6803      	ldr	r3, [r0, #0]
    if (s->count > s->invRatio)
 800e7d8:	edd3 7a03 	vldr	s15, [r3, #12]
 800e7dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7e0:	ed93 7a01 	vldr	s14, [r3, #4]
 800e7e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ec:	dd03      	ble.n	800e7f6 <tSampleReducer_tick+0x20>
    {
        s->hold = input;
 800e7ee:	ed83 0a02 	vstr	s0, [r3, #8]
        s->count = 0;
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	60da      	str	r2, [r3, #12]
    }
    
    s->count++;
 800e7f6:	68da      	ldr	r2, [r3, #12]
 800e7f8:	3201      	adds	r2, #1
 800e7fa:	60da      	str	r2, [r3, #12]
    return s->hold;
}
 800e7fc:	ed93 0a02 	vldr	s0, [r3, #8]
 800e800:	4770      	bx	lr

0800e802 <tSampleReducer_setRatio>:


void tSampleReducer_setRatio(tSampleReducer* const sr, Lfloat ratio)
{
    _tSampleReducer* s = *sr;
 800e802:	6803      	ldr	r3, [r0, #0]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e804:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e808:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e810:	d900      	bls.n	800e814 <tSampleReducer_setRatio+0x12>
        s->invRatio = 1.0f / ratio;
    
}
 800e812:	4770      	bx	lr
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e814:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81c:	dbf9      	blt.n	800e812 <tSampleReducer_setRatio+0x10>
        s->invRatio = 1.0f / ratio;
 800e81e:	eeb0 7a67 	vmov.f32	s14, s15
 800e822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e826:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800e82a:	e7f2      	b.n	800e812 <tSampleReducer_setRatio+0x10>

0800e82c <tOversampler_initToPool>:
{
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf->mempool);
}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
 800e82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e830:	4606      	mov	r6, r0
 800e832:	460c      	mov	r4, r1
    _tMempool* m = *mp;
 800e834:	681f      	ldr	r7, [r3, #0]
    int offset = 0;
    if (extraQuality) offset = 6;
 800e836:	4691      	mov	r9, r2
 800e838:	b982      	cbnz	r2, 800e85c <tOversampler_initToPool+0x30>
    int offset = 0;
 800e83a:	4690      	mov	r8, r2
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 800e83c:	2c04      	cmp	r4, #4
 800e83e:	bf18      	it	ne
 800e840:	2c02      	cmpne	r4, #2
 800e842:	d010      	beq.n	800e866 <tOversampler_initToPool+0x3a>
 800e844:	2c20      	cmp	r4, #32
 800e846:	dc0c      	bgt.n	800e862 <tOversampler_initToPool+0x36>
 800e848:	2c08      	cmp	r4, #8
 800e84a:	db3b      	blt.n	800e8c4 <tOversampler_initToPool+0x98>
 800e84c:	f1a4 0208 	sub.w	r2, r4, #8
 800e850:	4b1d      	ldr	r3, [pc, #116]	; (800e8c8 <tOversampler_initToPool+0x9c>)
 800e852:	40d3      	lsrs	r3, r2
 800e854:	f013 0f01 	tst.w	r3, #1
 800e858:	d034      	beq.n	800e8c4 <tOversampler_initToPool+0x98>
 800e85a:	e004      	b.n	800e866 <tOversampler_initToPool+0x3a>
    if (extraQuality) offset = 6;
 800e85c:	f04f 0806 	mov.w	r8, #6
 800e860:	e7ec      	b.n	800e83c <tOversampler_initToPool+0x10>
 800e862:	2c40      	cmp	r4, #64	; 0x40
 800e864:	d12e      	bne.n	800e8c4 <tOversampler_initToPool+0x98>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 800e866:	4639      	mov	r1, r7
 800e868:	2028      	movs	r0, #40	; 0x28
 800e86a:	f004 fa1f 	bl	8012cac <mpool_alloc>
 800e86e:	4605      	mov	r5, r0
 800e870:	6030      	str	r0, [r6, #0]
        os->mempool = m;
 800e872:	6007      	str	r7, [r0, #0]
        
        os->offset = offset;
 800e874:	f8c0 8010 	str.w	r8, [r0, #16]
        os->maxRatio = maxRatio;
 800e878:	6044      	str	r4, [r0, #4]
        os->allowHighQuality = extraQuality;
 800e87a:	f880 9008 	strb.w	r9, [r0, #8]
        os->ratio = os->maxRatio;
 800e87e:	60c4      	str	r4, [r0, #12]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
 800e880:	ee07 4a90 	vmov	s15, r4
 800e884:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800e888:	f009 fb52 	bl	8017f30 <log2f>
 800e88c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e890:	ee17 3a90 	vmov	r3, s15
 800e894:	4443      	add	r3, r8
 800e896:	3b01      	subs	r3, #1
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800e898:	4a0c      	ldr	r2, [pc, #48]	; (800e8cc <tOversampler_initToPool+0xa0>)
 800e89a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e89e:	6228      	str	r0, [r5, #32]
        os->phaseLength = os->numTaps / os->ratio;
 800e8a0:	fbb0 f4f4 	udiv	r4, r0, r4
 800e8a4:	626c      	str	r4, [r5, #36]	; 0x24
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
 800e8a6:	4a0a      	ldr	r2, [pc, #40]	; (800e8d0 <tOversampler_initToPool+0xa4>)
 800e8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8ac:	616b      	str	r3, [r5, #20]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	00c0      	lsls	r0, r0, #3
 800e8b2:	f004 f9fb 	bl	8012cac <mpool_alloc>
 800e8b6:	61a8      	str	r0, [r5, #24]
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
 800e8b8:	6a28      	ldr	r0, [r5, #32]
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	00c0      	lsls	r0, r0, #3
 800e8be:	f004 f9f5 	bl	8012cac <mpool_alloc>
 800e8c2:	61e8      	str	r0, [r5, #28]
    }
}
 800e8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8c8:	01000101 	.word	0x01000101
 800e8cc:	080287cc 	.word	0x080287cc
 800e8d0:	20000948 	.word	0x20000948

0800e8d4 <tOversampler_init>:
{
 800e8d4:	b508      	push	{r3, lr}
    tOversampler_initToPool(osr, ratio, extraQuality, &leaf->mempool);
 800e8d6:	3318      	adds	r3, #24
 800e8d8:	f7ff ffa8 	bl	800e82c <tOversampler_initToPool>
}
 800e8dc:	bd08      	pop	{r3, pc}
	...

0800e8e0 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#else
void tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#endif
{
 800e8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e4:	468c      	mov	ip, r1
    _tOversampler* os = *osr;
 800e8e6:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d00e      	beq.n	800e90c <tOversampler_upsample+0x2c>
    {
        output[0] = input;
        return;
    }
    
    Lfloat *pState = os->upState;                 /* State pointer */
 800e8ee:	69bc      	ldr	r4, [r7, #24]
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 800e8f0:	f8d7 8014 	ldr.w	r8, [r7, #20]
    Lfloat *pStateCur;
    Lfloat *ptr1;                               /* Temporary pointer for state buffer */
    Lfloat *ptr2;                               /* Temporary pointer for coefficient buffer */
    Lfloat sum0;                                /* Accumulators */
    uint_fast16_t i, tapCnt;                    /* Loop counters */
    uint_fast16_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 800e8f4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    uint_fast16_t j;
    
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
 800e8f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e8fa:	442b      	add	r3, r5
 800e8fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 800e900:	ed83 0a00 	vstr	s0, [r3]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 800e904:	68fe      	ldr	r6, [r7, #12]
    j = 1U;
 800e906:	f04f 0e01 	mov.w	lr, #1
    
    while (i > 0U)
 800e90a:	e01c      	b.n	800e946 <tOversampler_upsample+0x66>
        output[0] = input;
 800e90c:	ed81 0a00 	vstr	s0, [r1]
        return;
 800e910:	e02f      	b.n	800e972 <tOversampler_upsample+0x92>
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
        {
            /* Perform the multiply-accumulate */
            sum0 += *ptr1++ * *ptr2;
 800e912:	ecf3 7a01 	vldmia	r3!, {s15}
 800e916:	edd2 6a00 	vldr	s13, [r2]
 800e91a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e91e:	ee37 7a27 	vadd.f32	s14, s14, s15
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 800e922:	eb02 0281 	add.w	r2, r2, r1, lsl #2
            
            /* Decrement loop counter */
            tapCnt--;
 800e926:	3801      	subs	r0, #1
        while (tapCnt > 0U)
 800e928:	2800      	cmp	r0, #0
 800e92a:	d1f2      	bne.n	800e912 <tOversampler_upsample+0x32>
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 800e92c:	4663      	mov	r3, ip
 800e92e:	ee07 1a90 	vmov	s15, r1
 800e932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e93a:	ece3 7a01 	vstmia	r3!, {s15}
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 800e93e:	f10e 0e01 	add.w	lr, lr, #1
        
        /* Decrement the loop counter */
        i--;
 800e942:	3e01      	subs	r6, #1
        *output++ = sum0 * os->ratio;
 800e944:	469c      	mov	ip, r3
    while (i > 0U)
 800e946:	b14e      	cbz	r6, 800e95c <tOversampler_upsample+0x7c>
        ptr2 = pCoeffs + (os->ratio - j);
 800e948:	68f9      	ldr	r1, [r7, #12]
 800e94a:	eba1 020e 	sub.w	r2, r1, lr
 800e94e:	eb08 0282 	add.w	r2, r8, r2, lsl #2
        tapCnt = phaseLen;
 800e952:	4628      	mov	r0, r5
        ptr1 = pState;
 800e954:	4623      	mov	r3, r4
        sum0 = 0.0f;
 800e956:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e978 <tOversampler_upsample+0x98>
        while (tapCnt > 0U)
 800e95a:	e7e5      	b.n	800e928 <tOversampler_upsample+0x48>
    }
    
    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 800e95c:	1d23      	adds	r3, r4, #4
    /* Processing is complete.
     Now copy the last phaseLen - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */
    
    /* Points to the start of the state buffer */
    pStateCur = os->upState;
 800e95e:	69ba      	ldr	r2, [r7, #24]
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
 800e960:	3d01      	subs	r5, #1
    
    /* Copy data */
    while (tapCnt > 0U)
 800e962:	e004      	b.n	800e96e <tOversampler_upsample+0x8e>
    {
        *pStateCur++ = *pState++;
 800e964:	f853 0b04 	ldr.w	r0, [r3], #4
 800e968:	f842 0b04 	str.w	r0, [r2], #4
        
        /* Decrement loop counter */
        tapCnt--;
 800e96c:	3d01      	subs	r5, #1
    while (tapCnt > 0U)
 800e96e:	2d00      	cmp	r5, #0
 800e970:	d1f8      	bne.n	800e964 <tOversampler_upsample+0x84>
    }
}
 800e972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e976:	bf00      	nop
 800e978:	00000000 	.word	0x00000000

0800e97c <tOversampler_downsample>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#else
Lfloat tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#endif
{
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	468c      	mov	ip, r1
    _tOversampler* os = *osr;
 800e980:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 800e982:	68f5      	ldr	r5, [r6, #12]
 800e984:	2d01      	cmp	r5, #1
 800e986:	d016      	beq.n	800e9b6 <tOversampler_downsample+0x3a>
    
    Lfloat *pState = os->downState;                 /* State pointer */
 800e988:	69f3      	ldr	r3, [r6, #28]
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 800e98a:	6971      	ldr	r1, [r6, #20]
    Lfloat *pStateCur;                          /* Points to the current sample of the state */
    Lfloat *px0;                                /* Temporary pointer for state buffer */
    Lfloat *pb;                                 /* Temporary pointer for coefficient buffer */
    Lfloat x0, c0;                              /* Temporary variables to hold state and coefficient values */
    Lfloat acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 800e98c:	6a34      	ldr	r4, [r6, #32]
    uint32_t i, tapCnt;
    Lfloat output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 800e98e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800e992:	4420      	add	r0, r4
 800e994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 800e998:	4686      	mov	lr, r0
 800e99a:	3004      	adds	r0, #4
 800e99c:	f8dc 2000 	ldr.w	r2, [ip]
 800e9a0:	f10c 0c04 	add.w	ip, ip, #4
 800e9a4:	f8ce 2000 	str.w	r2, [lr]
        
    } while (--i);
 800e9a8:	3d01      	subs	r5, #1
 800e9aa:	d1f5      	bne.n	800e998 <tOversampler_downsample+0x1c>
    
    /* Initialize coeff pointer */
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
 800e9ac:	4620      	mov	r0, r4
    px0 = pState;
 800e9ae:	461a      	mov	r2, r3
    acc0 = 0.0f;
 800e9b0:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800e9f0 <tOversampler_downsample+0x74>
 800e9b4:	e00b      	b.n	800e9ce <tOversampler_downsample+0x52>
    if (os->ratio == 1) return input[0];
 800e9b6:	ed91 0a00 	vldr	s0, [r1]
 800e9ba:	e017      	b.n	800e9ec <tOversampler_downsample+0x70>
    
    while (tapCnt > 0U)
    {
        /* Read coefficients */
        c0 = *pb++;
 800e9bc:	ecf1 7a01 	vldmia	r1!, {s15}
        
        /* Fetch 1 state variable */
        x0 = *px0++;
 800e9c0:	ecb2 7a01 	vldmia	r2!, {s14}
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 800e9c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e9c8:	ee30 0a27 	vadd.f32	s0, s0, s15
        
        /* Decrement loop counter */
        tapCnt--;
 800e9cc:	3801      	subs	r0, #1
    while (tapCnt > 0U)
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d1f4      	bne.n	800e9bc <tOversampler_downsample+0x40>
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 800e9d2:	68f2      	ldr	r2, [r6, #12]
 800e9d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */
    
    /* Points to the start of the state buffer */
    pStateCur = os->downState;
 800e9d8:	69f2      	ldr	r2, [r6, #28]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
 800e9da:	3c01      	subs	r4, #1
    
    /* Copy data */
    while (tapCnt > 0U)
 800e9dc:	e004      	b.n	800e9e8 <tOversampler_downsample+0x6c>
    {
        *pStateCur++ = *pState++;
 800e9de:	f853 0b04 	ldr.w	r0, [r3], #4
 800e9e2:	f842 0b04 	str.w	r0, [r2], #4
        
        /* Decrement loop counter */
        tapCnt--;
 800e9e6:	3c01      	subs	r4, #1
    while (tapCnt > 0U)
 800e9e8:	2c00      	cmp	r4, #0
 800e9ea:	d1f8      	bne.n	800e9de <tOversampler_downsample+0x62>
    }
    
    return output;
}
 800e9ec:	bd70      	pop	{r4, r5, r6, pc}
 800e9ee:	bf00      	nop
 800e9f0:	00000000 	.word	0x00000000

0800e9f4 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	4606      	mov	r6, r0
 800e9f8:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800e9fa:	680f      	ldr	r7, [r1, #0]
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	2020      	movs	r0, #32
 800ea00:	f004 f954 	bl	8012cac <mpool_alloc>
 800ea04:	4604      	mov	r4, r0
 800ea06:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800ea08:	6007      	str	r7, [r0, #0]
    
    c->op = 4;
 800ea0a:	2304      	movs	r3, #4
 800ea0c:	6143      	str	r3, [r0, #20]
    c->div = 1.0f / SCALAR;
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <tCrusher_initToPool+0x50>)
 800ea10:	60c3      	str	r3, [r0, #12]
    c->rnd = 0.25f;
 800ea12:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800ea16:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 800ea18:	6043      	str	r3, [r0, #4]
    tSampleReducer_initToPool(&c->sReducer, mp);
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	301c      	adds	r0, #28
 800ea1e:	f7ff fec9 	bl	800e7b4 <tSampleReducer_initToPool>
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800ea22:	edd4 6a03 	vldr	s13, [r4, #12]
 800ea26:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ea48 <tCrusher_initToPool+0x54>
 800ea2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea2e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ea4c <tCrusher_initToPool+0x58>
 800ea32:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ea50 <tCrusher_initToPool+0x5c>
 800ea3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea3e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800ea42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea44:	3951b717 	.word	0x3951b717
 800ea48:	459c4000 	.word	0x459c4000
 800ea4c:	3f333333 	.word	0x3f333333
 800ea50:	3e99999a 	.word	0x3e99999a

0800ea54 <tCrusher_init>:
{
 800ea54:	b508      	push	{r3, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
 800ea56:	3118      	adds	r1, #24
 800ea58:	f7ff ffcc 	bl	800e9f4 <tCrusher_initToPool>
}
 800ea5c:	bd08      	pop	{r3, pc}
	...

0800ea60 <tCrusher_tick>:
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
}

Lfloat tCrusher_tick (tCrusher* const cr, Lfloat input)
{
 800ea60:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 800ea62:	6804      	ldr	r4, [r0, #0]
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 800ea64:	eddf 7a21 	vldr	s15, [pc, #132]	; 800eaec <tCrusher_tick+0x8c>
 800ea68:	ee60 7a27 	vmul.f32	s15, s0, s15
    
    sample = (int32_t) sample;
 800ea6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    
    sample *= c->div;
 800ea74:	ed94 0a03 	vldr	s0, [r4, #12]
 800ea78:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800ea7c:	6963      	ldr	r3, [r4, #20]
    return unholy.f;
 800ea7e:	ee10 2a10 	vmov	r2, s0
 800ea82:	ea82 53c3 	eor.w	r3, r2, r3, lsl #23
 800ea86:	ee00 3a10 	vmov	s0, r3
    if (val < min)
 800ea8a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ea8e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	d409      	bmi.n	800eaac <tCrusher_tick+0x4c>
    else if (val > max)
 800ea98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa4:	dd04      	ble.n	800eab0 <tCrusher_tick+0x50>
        return max;
 800eaa6:	eeb0 0a67 	vmov.f32	s0, s15
 800eaaa:	e001      	b.n	800eab0 <tCrusher_tick+0x50>
        return min;
 800eaac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    
    sample = LEAF_clip(-1.f, sample, 1.f);
    
    sample = LEAF_round(sample, c->rnd);
 800eab0:	edd4 7a04 	vldr	s15, [r4, #16]
    rnd = fabsf(rnd);
 800eab4:	eef0 7ae7 	vabs.f32	s15, s15
    if (rnd <= 0.0000001f) return input;
 800eab8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800eaf0 <tCrusher_tick+0x90>
 800eabc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac4:	d909      	bls.n	800eada <tCrusher_tick+0x7a>
    Lfloat scale = 1.f / rnd;
 800eac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    return roundf(input * scale) * rnd;
 800eace:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ead2:	feb8 0a40 	vrinta.f32	s0, s0
 800ead6:	ee27 0a80 	vmul.f32	s0, s15, s0
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
 800eada:	f104 001c 	add.w	r0, r4, #28
 800eade:	f7ff fe7a 	bl	800e7d6 <tSampleReducer_tick>
    
    return sample * c->gain;
 800eae2:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 800eae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800eaea:	bd10      	pop	{r4, pc}
 800eaec:	459c4000 	.word	0x459c4000
 800eaf0:	33d6bf95 	.word	0x33d6bf95

0800eaf4 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
 800eaf4:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 800eaf6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800eafa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eafe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800eb02:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800eb06:	4770      	bx	lr

0800eb08 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
    _tCrusher* c = *cr;
 800eb08:	6803      	ldr	r3, [r0, #0]
    if (val < min)
 800eb0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eb0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb12:	d409      	bmi.n	800eb28 <tCrusher_setQuality+0x20>
    else if (val > max)
 800eb14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb20:	dd04      	ble.n	800eb2c <tCrusher_setQuality+0x24>
        return max;
 800eb22:	eeb0 0a67 	vmov.f32	s0, s15
 800eb26:	e001      	b.n	800eb2c <tCrusher_setQuality+0x24>
        return min;
 800eb28:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800eb60 <tCrusher_setQuality+0x58>
    
    val = LEAF_clip(0.0f, val, 1.0f);
    
    c->div = 0.01f + val * SCALAR;
 800eb2c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eb64 <tCrusher_setQuality+0x5c>
 800eb30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb34:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800eb68 <tCrusher_setQuality+0x60>
 800eb38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb3c:	ed83 0a03 	vstr	s0, [r3, #12]
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800eb40:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800eb6c <tCrusher_setQuality+0x64>
 800eb44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb48:	eddf 7a09 	vldr	s15, [pc, #36]	; 800eb70 <tCrusher_setQuality+0x68>
 800eb4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eb50:	eddf 7a08 	vldr	s15, [pc, #32]	; 800eb74 <tCrusher_setQuality+0x6c>
 800eb54:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eb58:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	00000000 	.word	0x00000000
 800eb64:	459c4000 	.word	0x459c4000
 800eb68:	3c23d70a 	.word	0x3c23d70a
 800eb6c:	3951b717 	.word	0x3951b717
 800eb70:	3f333333 	.word	0x3f333333
 800eb74:	3e99999a 	.word	0x3e99999a

0800eb78 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 800eb78:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 800eb7a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800eb7e:	4770      	bx	lr

0800eb80 <tCrusher_setSamplingRatio>:

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
 800eb80:	b508      	push	{r3, lr}
    _tCrusher* c = *cr;
 800eb82:	6800      	ldr	r0, [r0, #0]
    c->srr = ratio;
 800eb84:	ed80 0a01 	vstr	s0, [r0, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
 800eb88:	301c      	adds	r0, #28
 800eb8a:	f7ff fe3a 	bl	800e802 <tSampleReducer_setRatio>
}
 800eb8e:	bd08      	pop	{r3, pc}

0800eb90 <tCompressor_initToPool>:
{
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
 800eb90:	b570      	push	{r4, r5, r6, lr}
 800eb92:	ed2d 8b02 	vpush	{d8}
 800eb96:	4606      	mov	r6, r0
    _tMempool* m = *mp;
 800eb98:	680d      	ldr	r5, [r1, #0]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	206c      	movs	r0, #108	; 0x6c
 800eb9e:	f004 f885 	bl	8012cac <mpool_alloc>
 800eba2:	4604      	mov	r4, r0
 800eba4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800eba6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800eba8:	686b      	ldr	r3, [r5, #4]
    c->sampleRate = leaf->sampleRate;
 800ebaa:	ed93 8a00 	vldr	s16, [r3]
 800ebae:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800ebb2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ec18 <tCompressor_initToPool+0x88>
 800ebb6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ebba:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800ebbe:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800ebc2:	f009 f8db 	bl	8017d7c <expf>
 800ebc6:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800ebca:	eddf 7a14 	vldr	s15, [pc, #80]	; 800ec1c <tCompressor_initToPool+0x8c>
 800ebce:	ee28 0a27 	vmul.f32	s0, s16, s15
 800ebd2:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800ebd6:	f009 f8d1 	bl	8017d7c <expf>
 800ebda:	ed84 0a02 	vstr	s0, [r4, #8]
    
    c->isActive = 0;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_G[0] = 0.0f;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	6263      	str	r3, [r4, #36]	; 0x24
    c->x_G[1] = 0.0f;
 800ebe6:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 800ebe8:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 800ebea:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 800ebec:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 800ebee:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 800ebf0:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 800ebf2:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 800ebf4:	60e3      	str	r3, [r4, #12]
    c->R = 0.5f; // compression Ratio
 800ebf6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800ebfa:	6123      	str	r3, [r4, #16]
    c->invR = 2.0f; //inverse of ratio
 800ebfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ec00:	61e3      	str	r3, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 800ec02:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <tCompressor_initToPool+0x90>)
 800ec04:	61a3      	str	r3, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 800ec06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ec0a:	6163      	str	r3, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800ec0c:	4b05      	ldr	r3, [pc, #20]	; (800ec24 <tCompressor_initToPool+0x94>)
 800ec0e:	6223      	str	r3, [r4, #32]
    

}
 800ec10:	ecbd 8b02 	vpop	{d8}
 800ec14:	bd70      	pop	{r4, r5, r6, pc}
 800ec16:	bf00      	nop
 800ec18:	3d4ccccd 	.word	0x3d4ccccd
 800ec1c:	3dcccccd 	.word	0x3dcccccd
 800ec20:	40400000 	.word	0x40400000
 800ec24:	3e2aaaab 	.word	0x3e2aaaab

0800ec28 <tCompressor_init>:
{
 800ec28:	b508      	push	{r3, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
 800ec2a:	3118      	adds	r1, #24
 800ec2c:	f7ff ffb0 	bl	800eb90 <tCompressor_initToPool>
}
 800ec30:	bd08      	pop	{r3, pc}
	...

0800ec34 <tCompressor_tickWithTableHardKnee>:
}

//requires tables to be set with set function
Lfloat tCompressor_tickWithTableHardKnee(tCompressor* const comp, Lfloat in)
{
    _tCompressor* c = *comp;
 800ec34:	6803      	ldr	r3, [r0, #0]
    return alias.f;
 800ec36:	ee10 2a10 	vmov	r2, s0
 800ec3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ec3e:	ee00 2a10 	vmov	s0, r2

    Lfloat slope, overshoot;

    in = fastabsf(in);
    int inAmpIndex = LEAF_clip (0, (in * c->atodbScalar) - c->atodbOffset, c->atodbTableSizeMinus1);
 800ec42:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800ec46:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ec4a:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800ec4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec52:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800ec56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if (val < min)
 800ec5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ec5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec62:	d407      	bmi.n	800ec74 <tCompressor_tickWithTableHardKnee+0x40>
    else if (val > max)
 800ec64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6c:	dd04      	ble.n	800ec78 <tCompressor_tickWithTableHardKnee+0x44>
        return max;
 800ec6e:	eef0 7a47 	vmov.f32	s15, s14
 800ec72:	e001      	b.n	800ec78 <tCompressor_tickWithTableHardKnee+0x44>
        return min;
 800ec74:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800ed6c <tCompressor_tickWithTableHardKnee+0x138>
 800ec78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    Lfloat in_db = c->atodbTable[inAmpIndex];
 800ec7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec7e:	ee17 1a90 	vmov	r1, s15
 800ec82:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec86:	ed92 6a00 	vldr	s12, [r2]
    Lfloat out_db = 0.0f;

    c->y_T[1] = c->y_T[0];
 800ec8a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800ec8e:	ed83 7a10 	vstr	s14, [r3, #64]	; 0x40

    slope = 1.0f - c->invR; // feed-forward topology;
 800ec92:	edd3 6a07 	vldr	s13, [r3, #28]
 800ec96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec9a:	ee77 7ae6 	vsub.f32	s15, s15, s13

    overshoot = in_db - c->T;
 800ec9e:	edd3 6a03 	vldr	s13, [r3, #12]
 800eca2:	ee76 6a66 	vsub.f32	s13, s12, s13

  // simpler hard-knee version (more efficient)
    if (overshoot <= 0.0f)
 800eca6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	d93b      	bls.n	800ed28 <tCompressor_tickWithTableHardKnee+0xf4>
        out_db = in_db;
        c->isActive = 0;
    }
    else
    {
        out_db = in_db + slope * overshoot;
 800ecb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ecb4:	ee77 7a86 	vadd.f32	s15, s15, s12
        c->isActive = 1;
 800ecb8:	2201      	movs	r2, #1
 800ecba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    c->x_T[0] = out_db - in_db;
 800ecbc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ecc0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 800ecc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ecc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eccc:	d531      	bpl.n	800ed32 <tCompressor_tickWithTableHardKnee+0xfe>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800ecce:	ed93 6a01 	vldr	s12, [r3, #4]
 800ecd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ecd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecda:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ecde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ece2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ece6:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuationDb = c->M - c->y_T[0];
 800ecea:	ed93 7a06 	vldr	s14, [r3, #24]
 800ecee:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ecf2:	ee37 7a67 	vsub.f32	s14, s14, s15
   // tempdbToA = dbtoa(attenuationDb);
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 800ecf6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ecfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecfe:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ed02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed06:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800ed0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    if (val < min)
 800ed0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed16:	d41b      	bmi.n	800ed50 <tCompressor_tickWithTableHardKnee+0x11c>
    else if (val > max)
 800ed18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ed1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed20:	dd18      	ble.n	800ed54 <tCompressor_tickWithTableHardKnee+0x120>
        return max;
 800ed22:	eef0 7a47 	vmov.f32	s15, s14
 800ed26:	e015      	b.n	800ed54 <tCompressor_tickWithTableHardKnee+0x120>
        c->isActive = 0;
 800ed28:	2200      	movs	r2, #0
 800ed2a:	645a      	str	r2, [r3, #68]	; 0x44
        out_db = in_db;
 800ed2c:	eef0 7a46 	vmov.f32	s15, s12
 800ed30:	e7c4      	b.n	800ecbc <tCompressor_tickWithTableHardKnee+0x88>
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 800ed32:	ed93 6a02 	vldr	s12, [r3, #8]
 800ed36:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ed3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed3e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ed42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed4a:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
 800ed4e:	e7cc      	b.n	800ecea <tCompressor_tickWithTableHardKnee+0xb6>
        return min;
 800ed50:	eddf 7a06 	vldr	s15, [pc, #24]	; 800ed6c <tCompressor_tickWithTableHardKnee+0x138>
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
 800ed54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    Lfloat attenuation = c->dbtoaTable[attenuationDbIndex];
 800ed58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed5a:	ee17 2a90 	vmov	r2, s15
 800ed5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ed62:	edd3 7a00 	vldr	s15, [r3]
    return attenuation * in;
}
 800ed66:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ed6a:	4770      	bx	lr
 800ed6c:	00000000 	.word	0x00000000

0800ed70 <tCompressor_setTables>:

void tCompressor_setTables(tCompressor* const comp, Lfloat* atodb, Lfloat* dbtoa, Lfloat atodbMinIn, Lfloat atodbMaxIn, Lfloat dbtoaMinIn, Lfloat dbtoaMaxIn, int atodbTableSize, int dbtoaTableSize)
{
    _tCompressor* c = *comp;
 800ed70:	6800      	ldr	r0, [r0, #0]
	c->atodbTable = atodb;
 800ed72:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTable = dbtoa;
 800ed74:	6502      	str	r2, [r0, #80]	; 0x50

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 800ed76:	3b01      	subs	r3, #1
 800ed78:	6643      	str	r3, [r0, #100]	; 0x64
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 800ed7a:	9a00      	ldr	r2, [sp, #0]
 800ed7c:	3a01      	subs	r2, #1
 800ed7e:	6682      	str	r2, [r0, #104]	; 0x68

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800ed80:	ee70 0ac0 	vsub.f32	s1, s1, s0
 800ed84:	ee07 3a90 	vmov	s15, r3
 800ed88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed8c:	ee87 7aa0 	vdiv.f32	s14, s15, s1
 800ed90:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 800ed94:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ed98:	ed80 7a17 	vstr	s14, [r0, #92]	; 0x5c


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800ed9c:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800eda0:	ee07 2a90 	vmov	s15, r2
 800eda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eda8:	ee87 7aa1 	vdiv.f32	s14, s15, s3
 800edac:	ed80 7a16 	vstr	s14, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 800edb0:	ee27 7a01 	vmul.f32	s14, s14, s2
 800edb4:	ed80 7a18 	vstr	s14, [r0, #96]	; 0x60

}
 800edb8:	4770      	bx	lr

0800edba <tCompressor_setSampleRate>:
    c->tauRelease = fastExp4(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 800edba:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 800edbc:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 800edc0:	4770      	bx	lr

0800edc2 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
 800edc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc6:	ed2d 8b02 	vpush	{d8}
 800edca:	4681      	mov	r9, r0
 800edcc:	ee10 8a10 	vmov	r8, s0
 800edd0:	eeb0 8a60 	vmov.f32	s16, s1
 800edd4:	ee11 6a10 	vmov	r6, s2
 800edd8:	460f      	mov	r7, r1
 800edda:	4615      	mov	r5, r2
    _tMempool* m = *mp;
 800eddc:	f8d2 a000 	ldr.w	sl, [r2]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800ede0:	4651      	mov	r1, sl
 800ede2:	2018      	movs	r0, #24
 800ede4:	f003 ff62 	bl	8012cac <mpool_alloc>
 800ede8:	4604      	mov	r4, r0
 800edea:	f8c9 0000 	str.w	r0, [r9]
    p->mempool = m;
 800edee:	f8c0 a000 	str.w	sl, [r0]
    
    p->curr=0.0f;
 800edf2:	2300      	movs	r3, #0
 800edf4:	6103      	str	r3, [r0, #16]
    p->targetLevel=targetLevel;
 800edf6:	f8c0 8004 	str.w	r8, [r0, #4]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800edfa:	4629      	mov	r1, r5
 800edfc:	eeb0 0a48 	vmov.f32	s0, s16
 800ee00:	3014      	adds	r0, #20
 800ee02:	f7ff f8d1 	bl	800dfa8 <tPowerFollower_initToPool>
    p->mode=mode;
 800ee06:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 800ee08:	60a6      	str	r6, [r4, #8]
}
 800ee0a:	ecbd 8b02 	vpop	{d8}
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ee12 <tFeedbackLeveler_init>:
{
 800ee12:	b508      	push	{r3, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
 800ee14:	3218      	adds	r2, #24
 800ee16:	f7ff ffd4 	bl	800edc2 <tFeedbackLeveler_initToPool>
}
 800ee1a:	bd08      	pop	{r3, pc}

0800ee1c <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 800ee1c:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 800ee1e:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 800ee20:	f104 0014 	add.w	r0, r4, #20
 800ee24:	f7ff f8da 	bl	800dfdc <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 800ee28:	6821      	ldr	r1, [r4, #0]
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f004 f82a 	bl	8012e84 <mpool_free>
}
 800ee30:	bd10      	pop	{r4, pc}

0800ee32 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 800ee32:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 800ee34:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800ee38:	4770      	bx	lr

0800ee3a <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
 800ee3a:	b508      	push	{r3, lr}
    _tFeedbackLeveler* p = *fb;
 800ee3c:	6800      	ldr	r0, [r0, #0]
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 800ee3e:	3014      	adds	r0, #20
 800ee40:	f7ff f8d2 	bl	800dfe8 <tPowerFollower_setFactor>
}
 800ee44:	bd08      	pop	{r3, pc}

0800ee46 <tFeedbackLeveler_setMode>:

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 800ee46:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 800ee48:	60d9      	str	r1, [r3, #12]
}
 800ee4a:	4770      	bx	lr

0800ee4c <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	ed2d 8b02 	vpush	{d8}
 800ee52:	eeb0 8a40 	vmov.f32	s16, s0
    _tFeedbackLeveler* p = *fb;
 800ee56:	6804      	ldr	r4, [r0, #0]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800ee58:	f104 0014 	add.w	r0, r4, #20
 800ee5c:	f7ff f8e2 	bl	800e024 <tPowerFollower_tick>
 800ee60:	edd4 7a01 	vldr	s15, [r4, #4]
 800ee64:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800ee68:	68e3      	ldr	r3, [r4, #12]
 800ee6a:	b923      	cbnz	r3, 800ee76 <tFeedbackLeveler_tick+0x2a>
 800ee6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	d40e      	bmi.n	800ee94 <tFeedbackLeveler_tick+0x48>
    p->curr=input*(1.0f-p->strength*levdiff);
 800ee76:	ed94 7a02 	vldr	s14, [r4, #8]
 800ee7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ee82:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee86:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ee8a:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 800ee8e:	ecbd 8b02 	vpop	{d8}
 800ee92:	bd10      	pop	{r4, pc}
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800ee94:	eddf 7a01 	vldr	s15, [pc, #4]	; 800ee9c <tFeedbackLeveler_tick+0x50>
 800ee98:	e7ed      	b.n	800ee76 <tFeedbackLeveler_tick+0x2a>
 800ee9a:	bf00      	nop
 800ee9c:	00000000 	.word	0x00000000

0800eea0 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 800eea0:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 800eea2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800eea6:	4770      	bx	lr

0800eea8 <tADSRT_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	ed2d 8b04 	vpush	{d8-d9}
 800eeae:	4607      	mov	r7, r0
 800eeb0:	eef0 9a40 	vmov.f32	s19, s0
 800eeb4:	eeb0 9a60 	vmov.f32	s18, s1
 800eeb8:	eeb0 8a41 	vmov.f32	s16, s2
 800eebc:	eef0 8a61 	vmov.f32	s17, s3
 800eec0:	460d      	mov	r5, r1
 800eec2:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 800eec4:	681e      	ldr	r6, [r3, #0]
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800eec6:	4631      	mov	r1, r6
 800eec8:	206c      	movs	r0, #108	; 0x6c
 800eeca:	f003 feef 	bl	8012cac <mpool_alloc>
 800eece:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
 800eed0:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = adsr->mempool->leaf;
 800eed2:	6873      	ldr	r3, [r6, #4]

    adsr->exp_buff = expBuffer;
 800eed4:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 800eed6:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800eed8:	1e62      	subs	r2, r4, #1
 800eeda:	60c2      	str	r2, [r0, #12]

    adsr->sampleRate = leaf->sampleRate;
 800eedc:	edd3 7a00 	vldr	s15, [r3]
 800eee0:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800eee4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800ef9c <tADSRT_initToPool+0xf4>
 800eee8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800eeec:	ee07 4a90 	vmov	s15, r4
 800eef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800eef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eef8:	edc0 7a05 	vstr	s15, [r0, #20]

    if (attack < 0.0f)
 800eefc:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef04:	d43e      	bmi.n	800ef84 <tADSRT_initToPool+0xdc>
        attack = 0.0f;

    if (decay < 0.0f)
 800ef06:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800ef0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0e:	d43c      	bmi.n	800ef8a <tADSRT_initToPool+0xe2>
        decay = 0.0f;

    if (sustain > 1.0f)
 800ef10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ef14:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800ef18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1c:	dd01      	ble.n	800ef22 <tADSRT_initToPool+0x7a>
        sustain = 1.0f;
 800ef1e:	eeb0 8a47 	vmov.f32	s16, s14
    if (sustain < 0.0f)
 800ef22:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2a:	d431      	bmi.n	800ef90 <tADSRT_initToPool+0xe8>
        sustain = 0.0f;

    if (release < 0.0f)
 800ef2c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800ef30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef34:	d42f      	bmi.n	800ef96 <tADSRT_initToPool+0xee>
        release = 0.0f;

    adsr->next = 0.0f;
 800ef36:	2200      	movs	r2, #0
 800ef38:	6182      	str	r2, [r0, #24]

    adsr->whichStage = env_idle;
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	63c2      	str	r2, [r0, #60]	; 0x3c

    adsr->sustain = sustain;
 800ef3e:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40

    adsr->attack = attack;
 800ef42:	edc0 9a08 	vstr	s19, [r0, #32]
    adsr->decay = decay;
 800ef46:	ed80 9a09 	vstr	s18, [r0, #36]	; 0x24
    adsr->release = release;
 800ef4a:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800ef4e:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 800ef52:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800ef56:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800ef5a:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800ef5e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ef62:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800ef66:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800ef6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ef6e:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38

    adsr->baseLeakFactor = 1.0f;
 800ef72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ef76:	6602      	str	r2, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 800ef78:	6642      	str	r2, [r0, #100]	; 0x64
    adsr->invSampleRate = leaf->invSampleRate;
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800ef7e:	ecbd 8b04 	vpop	{d8-d9}
 800ef82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attack = 0.0f;
 800ef84:	eddf 9a06 	vldr	s19, [pc, #24]	; 800efa0 <tADSRT_initToPool+0xf8>
 800ef88:	e7bd      	b.n	800ef06 <tADSRT_initToPool+0x5e>
        decay = 0.0f;
 800ef8a:	ed9f 9a05 	vldr	s18, [pc, #20]	; 800efa0 <tADSRT_initToPool+0xf8>
 800ef8e:	e7bf      	b.n	800ef10 <tADSRT_initToPool+0x68>
        sustain = 0.0f;
 800ef90:	ed9f 8a03 	vldr	s16, [pc, #12]	; 800efa0 <tADSRT_initToPool+0xf8>
 800ef94:	e7ca      	b.n	800ef2c <tADSRT_initToPool+0x84>
        release = 0.0f;
 800ef96:	eddf 8a02 	vldr	s17, [pc, #8]	; 800efa0 <tADSRT_initToPool+0xf8>
 800ef9a:	e7cc      	b.n	800ef36 <tADSRT_initToPool+0x8e>
 800ef9c:	3a83126f 	.word	0x3a83126f
 800efa0:	00000000 	.word	0x00000000

0800efa4 <tADSRT_init>:
{
 800efa4:	b508      	push	{r3, lr}
    tADSRT_initToPool    (adsrenv, attack, decay, sustain, release, expBuffer, bufferSize, &leaf->mempool);
 800efa6:	3318      	adds	r3, #24
 800efa8:	f7ff ff7e 	bl	800eea8 <tADSRT_initToPool>
}
 800efac:	bd08      	pop	{r3, pc}
	...

0800efb0 <tADSRT_setAttack>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#else
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800efb0:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
 800efb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	d408      	bmi.n	800efce <tADSRT_setAttack+0x1e>
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
 800efbc:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800efc0:	ed93 7a05 	vldr	s14, [r3, #20]
 800efc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800efc8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800efcc:	4770      	bx	lr
        attack = 0.01f;
 800efce:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800efd4 <tADSRT_setAttack+0x24>
 800efd2:	e7f3      	b.n	800efbc <tADSRT_setAttack+0xc>
 800efd4:	3c23d70a 	.word	0x3c23d70a

0800efd8 <tADSRT_setDecay>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#else
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800efd8:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800efda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800efde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe2:	d408      	bmi.n	800eff6 <tADSRT_setDecay+0x1e>
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
 800efe4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800efe8:	ed93 7a05 	vldr	s14, [r3, #20]
 800efec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800eff0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800eff4:	4770      	bx	lr
        decay = 0.01f;
 800eff6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800effc <tADSRT_setDecay+0x24>
 800effa:	e7f3      	b.n	800efe4 <tADSRT_setDecay+0xc>
 800effc:	3c23d70a 	.word	0x3c23d70a

0800f000 <tADSRT_setSustain>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#else
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f000:	6803      	ldr	r3, [r0, #0]

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800f002:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f006:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00e:	dd02      	ble.n	800f016 <tADSRT_setSustain+0x16>
 800f010:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800f014:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800f016:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01e:	d402      	bmi.n	800f026 <tADSRT_setSustain+0x26>
    else                     adsr->sustain = sustain;
 800f020:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 800f024:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800f026:	2200      	movs	r2, #0
 800f028:	641a      	str	r2, [r3, #64]	; 0x40
 800f02a:	4770      	bx	lr

0800f02c <tADSRT_setRelease>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#else
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f02c:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
 800f02e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f036:	d408      	bmi.n	800f04a <tADSRT_setRelease+0x1e>
    {
        release = 0.01f;
    }
    adsr->release = release;
 800f038:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800f03c:	ed93 7a05 	vldr	s14, [r3, #20]
 800f040:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f044:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800f048:	4770      	bx	lr
        release = 0.01f;
 800f04a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f050 <tADSRT_setRelease+0x24>
 800f04e:	e7f3      	b.n	800f038 <tADSRT_setRelease+0xc>
 800f050:	3c23d70a 	.word	0x3c23d70a

0800f054 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 800f054:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800f056:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
 800f058:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800f05c:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 800f060:	eddf 7a04 	vldr	s15, [pc, #16]	; 800f074 <tADSRT_setLeakFactor+0x20>
 800f064:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f068:	f009 f902 	bl	8018270 <powf>
 800f06c:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 800f070:	bd10      	pop	{r4, pc}
 800f072:	bf00      	nop
 800f074:	472c4400 	.word	0x472c4400

0800f078 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f078:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800f07a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f07c:	b162      	cbz	r2, 800f098 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800f07e:	2200      	movs	r2, #0
 800f080:	65da      	str	r2, [r3, #92]	; 0x5c
        adsr->whichStage = env_ramp;
 800f082:	2205      	movs	r2, #5
 800f084:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->rampPeak = adsr->next;
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800f08a:	2200      	movs	r2, #0
 800f08c:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 800f08e:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 800f090:	659a      	str	r2, [r3, #88]	; 0x58
    adsr->gain = velocity;
 800f092:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 800f096:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800f098:	2201      	movs	r2, #1
 800f09a:	63da      	str	r2, [r3, #60]	; 0x3c
 800f09c:	e7f5      	b.n	800f08a <tADSRT_on+0x12>

0800f09e <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f09e:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800f0a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0a2:	b11a      	cbz	r2, 800f0ac <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800f0a4:	2204      	movs	r2, #4
 800f0a6:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 800f0a8:	699a      	ldr	r2, [r3, #24]
 800f0aa:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 800f0ac:	4770      	bx	lr

0800f0ae <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f0ae:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	619a      	str	r2, [r3, #24]
}
 800f0b8:	4770      	bx	lr
	...

0800f0bc <tADSRT_tick>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f0bc:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800f0be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f0c0:	3a01      	subs	r2, #1
 800f0c2:	2a04      	cmp	r2, #4
 800f0c4:	d81b      	bhi.n	800f0fe <tADSRT_tick+0x42>
 800f0c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f0ca:	0061      	.short	0x0061
 800f0cc:	012c00bd 	.word	0x012c00bd
 800f0d0:	0005013d 	.word	0x0005013d
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800f0d4:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f0d8:	ed93 7a03 	vldr	s14, [r3, #12]
 800f0dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f0e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e8:	dd0c      	ble.n	800f104 <tADSRT_tick+0x48>
            {
                adsr->whichStage = env_attack;
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	619a      	str	r2, [r3, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800f0f2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800f0f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f0fa:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800f0fe:	ed93 0a06 	vldr	s0, [r3, #24]
 800f102:	4770      	bx	lr
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800f104:	eefc 5ae7 	vcvt.u32.f32	s11, s15
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 800f108:	eef8 6a65 	vcvt.f32.u32	s13, s11
 800f10c:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800f110:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f114:	ee37 6a86 	vadd.f32	s12, s15, s12
 800f118:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f120:	d420      	bmi.n	800f164 <tADSRT_tick+0xa8>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800f128:	ee16 1a10 	vmov	r1, s12
 800f12c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f130:	ed92 7a00 	vldr	s14, [r2]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800f134:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800f138:	685a      	ldr	r2, [r3, #4]
 800f13a:	ee15 1a90 	vmov	r1, s11
 800f13e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f142:	edd2 5a00 	vldr	s11, [r2]
    if (val < min)
 800f146:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14e:	d40c      	bmi.n	800f16a <tADSRT_tick+0xae>
    else if (val > max)
 800f150:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f154:	eef4 6ac5 	vcmpe.f32	s13, s10
 800f158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15c:	dd07      	ble.n	800f16e <tADSRT_tick+0xb2>
        return max;
 800f15e:	eef0 6a45 	vmov.f32	s13, s10
 800f162:	e004      	b.n	800f16e <tADSRT_tick+0xb2>
                    secondValue = 0.0f;
 800f164:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800f3f8 <tADSRT_tick+0x33c>
 800f168:	e7e4      	b.n	800f134 <tADSRT_tick+0x78>
        return min;
 800f16a:	eddf 6aa3 	vldr	s13, [pc, #652]	; 800f3f8 <tADSRT_tick+0x33c>
// alpha, [0.0, 1.0]
inline Lfloat LEAF_interpolation_linear (Lfloat A, Lfloat B, Lfloat alpha)
{
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
    
    Lfloat omAlpha = 1.0f - alpha;
 800f16e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800f172:	ee35 5a66 	vsub.f32	s10, s10, s13
    
    // First 1/2 of interpolation
    Lfloat out = A * omAlpha;
 800f176:	ee65 5a85 	vmul.f32	s11, s11, s10
    
    out += B * alpha;
 800f17a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f17e:	ee37 7a25 	vadd.f32	s14, s14, s11
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800f182:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f186:	ed83 7a06 	vstr	s14, [r3, #24]
 800f18a:	e7b2      	b.n	800f0f2 <tADSRT_tick+0x36>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800f18c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f190:	ed93 7a03 	vldr	s14, [r3, #12]
 800f194:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a0:	dd0a      	ble.n	800f1b8 <tADSRT_tick+0xfc>
                adsr->whichStage = env_decay;
 800f1a2:	2202      	movs	r2, #2
 800f1a4:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain;
 800f1a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1a8:	619a      	str	r2, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
 800f1aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f1ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800f1b6:	e7a2      	b.n	800f0fe <tADSRT_tick+0x42>
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800f1b8:	eefc 4ae7 	vcvt.u32.f32	s9, s15
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 800f1bc:	eef8 6a64 	vcvt.f32.u32	s13, s9
 800f1c0:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800f1c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f1c8:	ee37 6a86 	vadd.f32	s12, s15, s12
 800f1cc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d4:	d420      	bmi.n	800f218 <tADSRT_tick+0x15c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800f1d6:	685a      	ldr	r2, [r3, #4]
 800f1d8:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800f1dc:	ee16 1a10 	vmov	r1, s12
 800f1e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f1e4:	ed92 5a00 	vldr	s10, [r2]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800f1e8:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	ee14 1a90 	vmov	r1, s9
 800f1f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f1f6:	ed92 7a00 	vldr	s14, [r2]
    if (val < min)
 800f1fa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f202:	d40c      	bmi.n	800f21e <tADSRT_tick+0x162>
    else if (val > max)
 800f204:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f208:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f210:	dd07      	ble.n	800f222 <tADSRT_tick+0x166>
        return max;
 800f212:	eef0 6a46 	vmov.f32	s13, s12
 800f216:	e004      	b.n	800f222 <tADSRT_tick+0x166>
                    secondValue = 0.0f;
 800f218:	ed9f 5a77 	vldr	s10, [pc, #476]	; 800f3f8 <tADSRT_tick+0x33c>
 800f21c:	e7e4      	b.n	800f1e8 <tADSRT_tick+0x12c>
        return min;
 800f21e:	eddf 6a76 	vldr	s13, [pc, #472]	; 800f3f8 <tADSRT_tick+0x33c>
    Lfloat omAlpha = 1.0f - alpha;
 800f222:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f226:	ee76 4a66 	vsub.f32	s9, s12, s13
    Lfloat out = A * omAlpha;
 800f22a:	ee27 7a24 	vmul.f32	s14, s14, s9
    out += B * alpha;
 800f22e:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f232:	ee37 7a26 	vadd.f32	s14, s14, s13
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800f236:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f23a:	ee25 7a86 	vmul.f32	s14, s11, s12
 800f23e:	ed83 7a06 	vstr	s14, [r3, #24]
 800f242:	e7b2      	b.n	800f1aa <tADSRT_tick+0xee>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800f244:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800f248:	ed93 7a03 	vldr	s14, [r3, #12]
 800f24c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f250:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f258:	dd13      	ble.n	800f282 <tADSRT_tick+0x1c6>
                adsr->whichStage = env_sustain;
 800f25a:	2203      	movs	r2, #3
 800f25c:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800f25e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f262:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800f266:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f26a:	ed83 7a06 	vstr	s14, [r3, #24]
                adsr->sustainWithLeak = 1.0f;
 800f26e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f272:	61da      	str	r2, [r3, #28]
            adsr->decayPhase += adsr->decayInc;
 800f274:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f27c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 800f280:	e73d      	b.n	800f0fe <tADSRT_tick+0x42>
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800f282:	eebc 5ae7 	vcvt.u32.f32	s10, s15
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 800f286:	eef8 6a45 	vcvt.f32.u32	s13, s10
 800f28a:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800f28e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f292:	ee37 6a86 	vadd.f32	s12, s15, s12
 800f296:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f29e:	d41e      	bmi.n	800f2de <tADSRT_tick+0x222>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800f2a0:	685a      	ldr	r2, [r3, #4]
 800f2a2:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800f2a6:	ee16 1a10 	vmov	r1, s12
 800f2aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2ae:	edd2 5a00 	vldr	s11, [r2]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 800f2b2:	685a      	ldr	r2, [r3, #4]
 800f2b4:	ee15 1a10 	vmov	r1, s10
 800f2b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f2bc:	ed92 6a00 	vldr	s12, [r2]
    if (val < min)
 800f2c0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c8:	d40c      	bmi.n	800f2e4 <tADSRT_tick+0x228>
    else if (val > max)
 800f2ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d6:	dd07      	ble.n	800f2e8 <tADSRT_tick+0x22c>
        return max;
 800f2d8:	eef0 6a47 	vmov.f32	s13, s14
 800f2dc:	e004      	b.n	800f2e8 <tADSRT_tick+0x22c>
                    secondValue = 0.0f;
 800f2de:	eddf 5a46 	vldr	s11, [pc, #280]	; 800f3f8 <tADSRT_tick+0x33c>
 800f2e2:	e7e6      	b.n	800f2b2 <tADSRT_tick+0x1f6>
        return min;
 800f2e4:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f3f8 <tADSRT_tick+0x33c>
    Lfloat omAlpha = 1.0f - alpha;
 800f2e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2ec:	ee37 5a66 	vsub.f32	s10, s14, s13
    Lfloat out = A * omAlpha;
 800f2f0:	ee26 6a05 	vmul.f32	s12, s12, s10
    out += B * alpha;
 800f2f4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800f2f8:	ee36 6a26 	vadd.f32	s12, s12, s13
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800f2fc:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800f300:	edd3 5a10 	vldr	s11, [r3, #64]	; 0x40
 800f304:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f308:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f30c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f310:	ee26 7aa5 	vmul.f32	s14, s13, s11
 800f314:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800f318:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f31c:	ed83 7a06 	vstr	s14, [r3, #24]
 800f320:	e7a8      	b.n	800f274 <tADSRT_tick+0x1b8>
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 800f322:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800f326:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f32a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f32e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800f332:	edd3 6a07 	vldr	s13, [r3, #28]
 800f336:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f33a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f33e:	edc3 7a06 	vstr	s15, [r3, #24]
            break;
 800f342:	e6dc      	b.n	800f0fe <tADSRT_tick+0x42>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800f344:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800f348:	ed93 7a03 	vldr	s14, [r3, #12]
 800f34c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f350:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	dd0a      	ble.n	800f370 <tADSRT_tick+0x2b4>
                adsr->whichStage = env_idle;
 800f35a:	2200      	movs	r2, #0
 800f35c:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800f35e:	2200      	movs	r2, #0
 800f360:	619a      	str	r2, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
 800f362:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800f366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f36a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800f36e:	e6c6      	b.n	800f0fe <tADSRT_tick+0x42>
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800f370:	eefc 5ae7 	vcvt.u32.f32	s11, s15
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 800f374:	eef8 6a65 	vcvt.f32.u32	s13, s11
 800f378:	ee77 6ae6 	vsub.f32	s13, s15, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800f37c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f380:	ee37 6a86 	vadd.f32	s12, s15, s12
 800f384:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38c:	d420      	bmi.n	800f3d0 <tADSRT_tick+0x314>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800f38e:	685a      	ldr	r2, [r3, #4]
 800f390:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800f394:	ee16 1a10 	vmov	r1, s12
 800f398:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f39c:	ed92 5a00 	vldr	s10, [r2]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800f3a0:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	ee15 1a90 	vmov	r1, s11
 800f3aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f3ae:	ed92 7a00 	vldr	s14, [r2]
    if (val < min)
 800f3b2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ba:	d40c      	bmi.n	800f3d6 <tADSRT_tick+0x31a>
    else if (val > max)
 800f3bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f3c0:	eef4 6ae5 	vcmpe.f32	s13, s11
 800f3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c8:	dd07      	ble.n	800f3da <tADSRT_tick+0x31e>
        return max;
 800f3ca:	eef0 6a65 	vmov.f32	s13, s11
 800f3ce:	e004      	b.n	800f3da <tADSRT_tick+0x31e>
                    secondValue = 0.0f;
 800f3d0:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800f3f8 <tADSRT_tick+0x33c>
 800f3d4:	e7e4      	b.n	800f3a0 <tADSRT_tick+0x2e4>
        return min;
 800f3d6:	eddf 6a08 	vldr	s13, [pc, #32]	; 800f3f8 <tADSRT_tick+0x33c>
    Lfloat omAlpha = 1.0f - alpha;
 800f3da:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f3de:	ee75 5ae6 	vsub.f32	s11, s11, s13
    Lfloat out = A * omAlpha;
 800f3e2:	ee27 7a25 	vmul.f32	s14, s14, s11
    out += B * alpha;
 800f3e6:	ee65 6a26 	vmul.f32	s13, s10, s13
 800f3ea:	ee37 7a26 	vadd.f32	s14, s14, s13
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800f3ee:	ee26 7a07 	vmul.f32	s14, s12, s14
 800f3f2:	ed83 7a06 	vstr	s14, [r3, #24]
 800f3f6:	e7b4      	b.n	800f362 <tADSRT_tick+0x2a6>
 800f3f8:	00000000 	.word	0x00000000

0800f3fc <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800f3fc:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800f3fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f400:	3a01      	subs	r2, #1
 800f402:	2a04      	cmp	r2, #4
 800f404:	d819      	bhi.n	800f43a <tADSRT_tickNoInterp+0x3e>
 800f406:	e8df f002 	tbb	[pc, r2]
 800f40a:	552b      	.short	0x552b
 800f40c:	a592      	.short	0xa592
 800f40e:	03          	.byte	0x03
 800f40f:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800f410:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800f414:	ed93 7a03 	vldr	s14, [r3, #12]
 800f418:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f41c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f424:	dd0c      	ble.n	800f440 <tADSRT_tickNoInterp+0x44>
            {
                adsr->whichStage = env_attack;
 800f426:	2201      	movs	r2, #1
 800f428:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800f42a:	2200      	movs	r2, #0
 800f42c:	619a      	str	r2, [r3, #24]
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800f42e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800f432:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f436:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800f43a:	ed93 0a06 	vldr	s0, [r3, #24]
 800f43e:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800f440:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f44a:	ee16 1a90 	vmov	r1, s13
 800f44e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f452:	edd2 6a00 	vldr	s13, [r2]
 800f456:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f45a:	ed83 7a06 	vstr	s14, [r3, #24]
 800f45e:	e7e6      	b.n	800f42e <tADSRT_tickNoInterp+0x32>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800f460:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800f464:	ed93 7a03 	vldr	s14, [r3, #12]
 800f468:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f46c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f474:	dd0a      	ble.n	800f48c <tADSRT_tickNoInterp+0x90>
                adsr->whichStage = env_decay;
 800f476:	2202      	movs	r2, #2
 800f478:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain;
 800f47a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f47c:	619a      	str	r2, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
 800f47e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f482:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f486:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800f48a:	e7d6      	b.n	800f43a <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800f48c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f490:	685a      	ldr	r2, [r3, #4]
 800f492:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f496:	ee16 1a90 	vmov	r1, s13
 800f49a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f49e:	ed92 6a00 	vldr	s12, [r2]
 800f4a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4a6:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f4aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f4ae:	ed83 7a06 	vstr	s14, [r3, #24]
 800f4b2:	e7e4      	b.n	800f47e <tADSRT_tickNoInterp+0x82>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800f4b4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800f4b8:	ed93 7a03 	vldr	s14, [r3, #12]
 800f4bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f4c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	dd13      	ble.n	800f4f2 <tADSRT_tickNoInterp+0xf6>
                adsr->whichStage = env_sustain;
 800f4ca:	2203      	movs	r2, #3
 800f4cc:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800f4ce:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f4d2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800f4d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f4da:	ed83 7a06 	vstr	s14, [r3, #24]
                adsr->sustainWithLeak = 1.0f;
 800f4de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f4e2:	61da      	str	r2, [r3, #28]
            adsr->decayPhase += adsr->decayInc;
 800f4e4:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f4e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4ec:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 800f4f0:	e7a3      	b.n	800f43a <tADSRT_tickNoInterp+0x3e>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800f4f2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f4f6:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800f4fa:	685a      	ldr	r2, [r3, #4]
 800f4fc:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800f500:	ee16 1a10 	vmov	r1, s12
 800f504:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f508:	ed92 6a00 	vldr	s12, [r2]
 800f50c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f510:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800f514:	ee26 6a25 	vmul.f32	s12, s12, s11
 800f518:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f51c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f520:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800f524:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f528:	ed83 7a06 	vstr	s14, [r3, #24]
 800f52c:	e7da      	b.n	800f4e4 <tADSRT_tickNoInterp+0xe8>
            adsr->sustainWithLeak *= adsr->leakFactor;
 800f52e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800f532:	ed93 7a07 	vldr	s14, [r3, #28]
 800f536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f53a:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800f53e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800f542:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800f546:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f54a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f54e:	edc3 7a06 	vstr	s15, [r3, #24]
            break;
 800f552:	e772      	b.n	800f43a <tADSRT_tickNoInterp+0x3e>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800f554:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800f558:	ed93 7a03 	vldr	s14, [r3, #12]
 800f55c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f560:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	dd0a      	ble.n	800f580 <tADSRT_tickNoInterp+0x184>
                adsr->whichStage = env_idle;
 800f56a:	2200      	movs	r2, #0
 800f56c:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800f56e:	2200      	movs	r2, #0
 800f570:	619a      	str	r2, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
 800f572:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800f576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f57a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800f57e:	e75c      	b.n	800f43a <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800f580:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800f58a:	ee16 1a90 	vmov	r1, s13
 800f58e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f592:	edd2 6a00 	vldr	s13, [r2]
 800f596:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f59a:	ed83 7a06 	vstr	s14, [r3, #24]
 800f59e:	e7e8      	b.n	800f572 <tADSRT_tickNoInterp+0x176>

0800f5a0 <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	ed2d 8b02 	vpush	{d8}
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	ee10 4a10 	vmov	r4, s0
 800f5ac:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800f5b0:	680e      	ldr	r6, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	2014      	movs	r0, #20
 800f5b6:	f003 fb79 	bl	8012cac <mpool_alloc>
 800f5ba:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 800f5bc:	6006      	str	r6, [r0, #0]
    
    smooth->curr = val;
 800f5be:	60c4      	str	r4, [r0, #12]
    smooth->dest = val;
 800f5c0:	6104      	str	r4, [r0, #16]
    if (factor < 0.0f) factor = 0.0f;
 800f5c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ca:	d413      	bmi.n	800f5f4 <tExpSmooth_initToPool+0x54>
    if (factor > 1.0f) factor = 1.0f;
 800f5cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d8:	dd01      	ble.n	800f5de <tExpSmooth_initToPool+0x3e>
 800f5da:	eeb0 8a67 	vmov.f32	s16, s15
    //smooth->baseFactor = factor;
    smooth->factor = factor;
 800f5de:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800f5e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5e6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800f5ea:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
 800f5ee:	ecbd 8b02 	vpop	{d8}
 800f5f2:	bd70      	pop	{r4, r5, r6, pc}
    if (factor < 0.0f) factor = 0.0f;
 800f5f4:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800f5fc <tExpSmooth_initToPool+0x5c>
 800f5f8:	e7e8      	b.n	800f5cc <tExpSmooth_initToPool+0x2c>
 800f5fa:	bf00      	nop
 800f5fc:	00000000 	.word	0x00000000

0800f600 <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800f600:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
 800f602:	3118      	adds	r1, #24
 800f604:	f7ff ffcc 	bl	800f5a0 <tExpSmooth_initToPool>
}
 800f608:	bd08      	pop	{r3, pc}

0800f60a <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
 800f60a:	b508      	push	{r3, lr}
    _tExpSmooth* smooth = *expsmooth;
 800f60c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 800f60e:	6801      	ldr	r1, [r0, #0]
 800f610:	f003 fc38 	bl	8012e84 <mpool_free>
}
 800f614:	bd08      	pop	{r3, pc}
	...

0800f618 <tExpSmooth_setFactor>:

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
 800f618:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
 800f61a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	d409      	bmi.n	800f638 <tExpSmooth_setFactor+0x20>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
 800f624:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f628:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f630:	dd04      	ble.n	800f63c <tExpSmooth_setFactor+0x24>
 800f632:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f636:	e001      	b.n	800f63c <tExpSmooth_setFactor+0x24>
        factor = 0.0f;
 800f638:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f650 <tExpSmooth_setFactor+0x38>
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
 800f63c:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800f640:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f644:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f648:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	00000000 	.word	0x00000000

0800f654 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800f654:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800f656:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800f65a:	4770      	bx	lr

0800f65c <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800f65c:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800f65e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800f662:	4770      	bx	lr

0800f664 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800f664:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800f666:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
 800f66a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800f66e:	4770      	bx	lr

0800f670 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800f670:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800f672:	ed93 0a01 	vldr	s0, [r3, #4]
 800f676:	edd3 7a04 	vldr	s15, [r3, #16]
 800f67a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f67e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f682:	ed93 7a03 	vldr	s14, [r3, #12]
 800f686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f68a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f68e:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 800f692:	4770      	bx	lr

0800f694 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	ed2d 8b02 	vpush	{d8}
 800f69a:	4604      	mov	r4, r0
 800f69c:	eef0 8a40 	vmov.f32	s17, s0
 800f6a0:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800f6a4:	680d      	ldr	r5, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	201c      	movs	r0, #28
 800f6aa:	f003 faff 	bl	8012cac <mpool_alloc>
 800f6ae:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800f6b0:	6005      	str	r5, [r0, #0]
    
    s->prevIn = 0.0f;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800f6b6:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800f6b8:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800f6ba:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 800f6bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f6c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800f6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c8:	d413      	bmi.n	800f6f2 <tSlide_initToPool+0x5e>
    {
        upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 800f6ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f6ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d6:	d40f      	bmi.n	800f6f8 <tSlide_initToPool+0x64>
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800f6d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f6dc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800f6e0:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800f6e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800f6e8:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800f6ec:	ecbd 8b02 	vpop	{d8}
 800f6f0:	bd38      	pop	{r3, r4, r5, pc}
        upSlide = 1.0f;
 800f6f2:	eef0 8a67 	vmov.f32	s17, s15
 800f6f6:	e7e8      	b.n	800f6ca <tSlide_initToPool+0x36>
        downSlide = 1.0f;
 800f6f8:	eeb0 8a67 	vmov.f32	s16, s15
 800f6fc:	e7ec      	b.n	800f6d8 <tSlide_initToPool+0x44>

0800f6fe <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
 800f6fe:	b508      	push	{r3, lr}
    _tSlide* s = *sl;
 800f700:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 800f702:	6801      	ldr	r1, [r0, #0]
 800f704:	f003 fbbe 	bl	8012e84 <mpool_free>
}
 800f708:	bd08      	pop	{r3, pc}

0800f70a <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 800f70a:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 800f70c:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800f710:	4770      	bx	lr

0800f712 <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 800f712:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;
 800f714:	ed93 7a06 	vldr	s14, [r3, #24]

    if (in >= s->prevOut)
 800f718:	edd3 7a01 	vldr	s15, [r3, #4]
 800f71c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f724:	d810      	bhi.n	800f748 <tSlide_tickNoInput+0x36>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800f726:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f72a:	ed93 6a04 	vldr	s12, [r3, #16]
 800f72e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f736:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800f73a:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 800f73e:	ed93 0a02 	vldr	s0, [r3, #8]
 800f742:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800f746:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800f748:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f74c:	ed93 6a05 	vldr	s12, [r3, #20]
 800f750:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f758:	edc3 7a02 	vstr	s15, [r3, #8]
 800f75c:	e7ed      	b.n	800f73a <tSlide_tickNoInput+0x28>

0800f75e <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 800f75e:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 800f760:	edd3 7a01 	vldr	s15, [r3, #4]
 800f764:	eef4 7ac0 	vcmpe.f32	s15, s0
 800f768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76c:	d810      	bhi.n	800f790 <tSlide_tick+0x32>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800f76e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f772:	edd3 6a04 	vldr	s13, [r3, #16]
 800f776:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f77a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f77e:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800f782:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
 800f786:	ed93 0a02 	vldr	s0, [r3, #8]
 800f78a:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800f78e:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800f790:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f794:	edd3 6a05 	vldr	s13, [r3, #20]
 800f798:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f79c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7a0:	edc3 7a02 	vstr	s15, [r3, #8]
 800f7a4:	e7ed      	b.n	800f782 <tSlide_tick+0x24>

0800f7a6 <tAllpassSO_initToPool>:
{
    tAllpassSO_initToPool(ft, &leaf->mempool);
}

void    tAllpassSO_initToPool     (tAllpassSO* const ft, tMempool* const mp)
{
 800f7a6:	b538      	push	{r3, r4, r5, lr}
 800f7a8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800f7aa:	680d      	ldr	r5, [r1, #0]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	201c      	movs	r0, #28
 800f7b0:	f003 fa7c 	bl	8012cac <mpool_alloc>
 800f7b4:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800f7b6:	6005      	str	r5, [r0, #0]
    
    f->prevSamp = 0.0f;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	6043      	str	r3, [r0, #4]
    f->prevPrevSamp = 0.0f;
 800f7bc:	6083      	str	r3, [r0, #8]
    f->a1 = 0.0f;
 800f7be:	6143      	str	r3, [r0, #20]
    f->a2 = 0.0f;
 800f7c0:	6183      	str	r3, [r0, #24]
}
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}

0800f7c4 <tAllpassSO_free>:

void    tAllpassSO_free  (tAllpassSO* const ft)
{
 800f7c4:	b508      	push	{r3, lr}
    _tAllpassSO* f = *ft;
 800f7c6:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800f7c8:	6801      	ldr	r1, [r0, #0]
 800f7ca:	f003 fb5b 	bl	8012e84 <mpool_free>
}
 800f7ce:	bd08      	pop	{r3, pc}

0800f7d0 <tAllpassSO_setCoeff>:

void    tAllpassSO_setCoeff(tAllpassSO* const ft, Lfloat a1, Lfloat a2)
{
    _tAllpassSO* f = *ft;
 800f7d0:	6803      	ldr	r3, [r0, #0]
    ////if (prevSum != 0.0f)
    //{
    //    ratio = fabsf(newSum / prevSum);
    //}

    f->a1 = a1;
 800f7d2:	ed83 0a05 	vstr	s0, [r3, #20]
    f->a2 = a2;
 800f7d6:	edc3 0a06 	vstr	s1, [r3, #24]
    //f->prevSamp *= ratio;
    //f->prevPrevSamp *= ratio;
}
 800f7da:	4770      	bx	lr

0800f7dc <tAllpassSO_tick>:

Lfloat   tAllpassSO_tick(tAllpassSO* const ft, Lfloat input)
{
 800f7dc:	eeb0 7a40 	vmov.f32	s14, s0
    _tAllpassSO* f = *ft;
 800f7e0:	6803      	ldr	r3, [r0, #0]
    f->prevPrevSamp = input + (vn * -f->a2);
    return vn;]

*/
    //DFI version
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 800f7e2:	edd3 6a06 	vldr	s13, [r3, #24]
 800f7e6:	ee26 6a80 	vmul.f32	s12, s13, s0
 800f7ea:	ed93 5a01 	vldr	s10, [r3, #4]
 800f7ee:	edd3 7a05 	vldr	s15, [r3, #20]
 800f7f2:	ee65 5a27 	vmul.f32	s11, s10, s15
 800f7f6:	edd3 4a02 	vldr	s9, [r3, #8]
 800f7fa:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800f7fe:	ee36 6a25 	vadd.f32	s12, s12, s11
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800f802:	edd3 5a03 	vldr	s11, [r3, #12]
 800f806:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 800f80a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f80e:	ed93 6a04 	vldr	s12, [r3, #16]
 800f812:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800f816:	ee37 0aa6 	vadd.f32	s0, s15, s13
    f->prevPrevSamp = f->prevSamp;
 800f81a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->prevSamp = input;
 800f81e:	ed83 7a01 	vstr	s14, [r3, #4]
    f->prevPrevSamp2 = f->prevSamp2;
 800f822:	edc3 5a04 	vstr	s11, [r3, #16]
    f->prevSamp2 = output;
 800f826:	ed83 0a03 	vstr	s0, [r3, #12]

    return output;


}
 800f82a:	4770      	bx	lr

0800f82c <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 800f82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f830:	4680      	mov	r8, r0
 800f832:	460e      	mov	r6, r1
 800f834:	4617      	mov	r7, r2
    _tMempool* m = *mp;
 800f836:	6814      	ldr	r4, [r2, #0]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800f838:	4621      	mov	r1, r4
 800f83a:	2058      	movs	r0, #88	; 0x58
 800f83c:	f003 fa36 	bl	8012cac <mpool_alloc>
 800f840:	4605      	mov	r5, r0
 800f842:	f8c8 0000 	str.w	r0, [r8]
    f->mempool = m;
 800f846:	6004      	str	r4, [r0, #0]
    f->numFilts = numFilts;
 800f848:	6046      	str	r6, [r0, #4]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800f84a:	4621      	mov	r1, r4
 800f84c:	00b0      	lsls	r0, r6, #2
 800f84e:	f003 faa5 	bl	8012d9c <mpool_calloc>
 800f852:	60a8      	str	r0, [r5, #8]
    f->k1[0] = -0.00050469f;
 800f854:	4b12      	ldr	r3, [pc, #72]	; (800f8a0 <tThiranAllpassSOCascade_initToPool+0x74>)
 800f856:	61eb      	str	r3, [r5, #28]
    f->k2[0] = -0.0064264f;
 800f858:	4b12      	ldr	r3, [pc, #72]	; (800f8a4 <tThiranAllpassSOCascade_initToPool+0x78>)
 800f85a:	626b      	str	r3, [r5, #36]	; 0x24
    f->k3[0] = -2.8743f;
 800f85c:	4b12      	ldr	r3, [pc, #72]	; (800f8a8 <tThiranAllpassSOCascade_initToPool+0x7c>)
 800f85e:	62eb      	str	r3, [r5, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 800f860:	4b12      	ldr	r3, [pc, #72]	; (800f8ac <tThiranAllpassSOCascade_initToPool+0x80>)
 800f862:	636b      	str	r3, [r5, #52]	; 0x34
    f->C2[0] = 2.0427f;
 800f864:	4b12      	ldr	r3, [pc, #72]	; (800f8b0 <tThiranAllpassSOCascade_initToPool+0x84>)
 800f866:	63eb      	str	r3, [r5, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 800f868:	4b12      	ldr	r3, [pc, #72]	; (800f8b4 <tThiranAllpassSOCascade_initToPool+0x88>)
 800f86a:	622b      	str	r3, [r5, #32]
    f->k2[1] = -0.014811f;
 800f86c:	4b12      	ldr	r3, [pc, #72]	; (800f8b8 <tThiranAllpassSOCascade_initToPool+0x8c>)
 800f86e:	62ab      	str	r3, [r5, #40]	; 0x28
    f->k3[1] = -2.9018f;
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <tThiranAllpassSOCascade_initToPool+0x90>)
 800f872:	632b      	str	r3, [r5, #48]	; 0x30
    f->C1[1] = 0.071089f;
 800f874:	4b12      	ldr	r3, [pc, #72]	; (800f8c0 <tThiranAllpassSOCascade_initToPool+0x94>)
 800f876:	63ab      	str	r3, [r5, #56]	; 0x38
    f->C2[1] = 2.1074f;
 800f878:	4b12      	ldr	r3, [pc, #72]	; (800f8c4 <tThiranAllpassSOCascade_initToPool+0x98>)
 800f87a:	642b      	str	r3, [r5, #64]	; 0x40
    f->isHigh = 0;
 800f87c:	2400      	movs	r4, #0
 800f87e:	652c      	str	r4, [r5, #80]	; 0x50
    f->numFiltsMap[0] = numFilts;
 800f880:	64ae      	str	r6, [r5, #72]	; 0x48
    f->numFiltsMap[1] = 1;
 800f882:	2301      	movs	r3, #1
 800f884:	64eb      	str	r3, [r5, #76]	; 0x4c
    f->numActiveFilters = numFilts;
 800f886:	646e      	str	r6, [r5, #68]	; 0x44
    for (int i = 0; i < numFilts; i++)
 800f888:	e006      	b.n	800f898 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 800f88a:	68a8      	ldr	r0, [r5, #8]
 800f88c:	4639      	mov	r1, r7
 800f88e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f892:	f7ff ff88 	bl	800f7a6 <tAllpassSO_initToPool>
    for (int i = 0; i < numFilts; i++)
 800f896:	3401      	adds	r4, #1
 800f898:	42b4      	cmp	r4, r6
 800f89a:	dbf6      	blt.n	800f88a <tThiranAllpassSOCascade_initToPool+0x5e>
    }
}
 800f89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a0:	ba044d2c 	.word	0xba044d2c
 800f8a4:	bbd2948d 	.word	0xbbd2948d
 800f8a8:	c037f488 	.word	0xc037f488
 800f8ac:	3d8e93e2 	.word	0x3d8e93e2
 800f8b0:	4002bb99 	.word	0x4002bb99
 800f8b4:	bb2e31d7 	.word	0xbb2e31d7
 800f8b8:	bc72a9d6 	.word	0xbc72a9d6
 800f8bc:	c039b717 	.word	0xc039b717
 800f8c0:	3d91971c 	.word	0x3d91971c
 800f8c4:	4006dfa4 	.word	0x4006dfa4

0800f8c8 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 800f8c8:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800f8ca:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800f8cc:	2400      	movs	r4, #0
 800f8ce:	e005      	b.n	800f8dc <tThiranAllpassSOCascade_free+0x14>
    {
        tAllpassSO_free(&f->filters[i]);
 800f8d0:	68a8      	ldr	r0, [r5, #8]
 800f8d2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f8d6:	f7ff ff75 	bl	800f7c4 <tAllpassSO_free>
    for (int i = 0; i < f->numFilts; i++)
 800f8da:	3401      	adds	r4, #1
 800f8dc:	686b      	ldr	r3, [r5, #4]
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	dcf6      	bgt.n	800f8d0 <tThiranAllpassSOCascade_free+0x8>
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 800f8e2:	6829      	ldr	r1, [r5, #0]
 800f8e4:	68a8      	ldr	r0, [r5, #8]
 800f8e6:	f003 facd 	bl	8012e84 <mpool_free>
    mpool_free((char*)f, f->mempool);
 800f8ea:	6829      	ldr	r1, [r5, #0]
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f003 fac9 	bl	8012e84 <mpool_free>
}
 800f8f2:	bd38      	pop	{r3, r4, r5, pc}

0800f8f4 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 800f8f4:	b538      	push	{r3, r4, r5, lr}
 800f8f6:	ed2d 8b08 	vpush	{d8-d11}
 800f8fa:	eeb0 ba40 	vmov.f32	s22, s0
 800f8fe:	eeb0 8a60 	vmov.f32	s16, s1
 800f902:	eef0 8a41 	vmov.f32	s17, s2
    _tThiranAllpassSOCascade* f = *ft;
 800f906:	6804      	ldr	r4, [r0, #0]

    f->B = dispersionCoeff;
 800f908:	ed84 0a03 	vstr	s0, [r4, #12]
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800f90c:	eddf aa90 	vldr	s21, [pc, #576]	; 800fb50 <tThiranAllpassSOCascade_setCoeff+0x25c>
 800f910:	ee20 0aaa 	vmul.f32	s0, s1, s21
 800f914:	f008 fb0c 	bl	8017f30 <log2f>
 800f918:	eeb2 aa08 	vmov.f32	s20, #40	; 0x41400000  12.0
 800f91c:	ee60 9a0a 	vmul.f32	s19, s0, s20
 800f920:	ed9f 9a8c 	vldr	s18, [pc, #560]	; 800fb54 <tThiranAllpassSOCascade_setCoeff+0x260>
 800f924:	ee79 9a89 	vadd.f32	s19, s19, s18
 800f928:	edc4 9a04 	vstr	s19, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800f92c:	ee28 8a28 	vmul.f32	s16, s16, s17
 800f930:	ee28 0a2a 	vmul.f32	s0, s16, s21
 800f934:	f008 fafc 	bl	8017f30 <log2f>
 800f938:	ee60 7a0a 	vmul.f32	s15, s0, s20
 800f93c:	ee77 7a89 	vadd.f32	s15, s15, s18
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 800f940:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f944:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f948:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800fb58 <tThiranAllpassSOCascade_setCoeff+0x264>
 800f94c:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 800f950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f958:	d409      	bmi.n	800f96e <tThiranAllpassSOCascade_setCoeff+0x7a>
    else if (val > max)
 800f95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f95e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f966:	dd04      	ble.n	800f972 <tThiranAllpassSOCascade_setCoeff+0x7e>
        return max;
 800f968:	eef0 7a47 	vmov.f32	s15, s14
 800f96c:	e001      	b.n	800f972 <tThiranAllpassSOCascade_setCoeff+0x7e>
        return min;
 800f96e:	eddf 7a7b 	vldr	s15, [pc, #492]	; 800fb5c <tThiranAllpassSOCascade_setCoeff+0x268>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 800f972:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f976:	ee39 7a67 	vsub.f32	s14, s18, s15

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800f97a:	ed94 8a07 	vldr	s16, [r4, #28]
 800f97e:	ee28 8a07 	vmul.f32	s16, s16, s14
 800f982:	edd4 6a08 	vldr	s13, [r4, #32]
 800f986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f98a:	ee38 8a26 	vadd.f32	s16, s16, s13
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800f98e:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
 800f992:	ee2a aa07 	vmul.f32	s20, s20, s14
 800f996:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800f99a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f99e:	ee3a aa26 	vadd.f32	s20, s20, s13
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800f9a2:	edd4 ba0b 	vldr	s23, [r4, #44]	; 0x2c
 800f9a6:	ee6b ba87 	vmul.f32	s23, s23, s14
 800f9aa:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f9ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f9b2:	ee7b baa6 	vadd.f32	s23, s23, s13
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800f9b6:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
 800f9ba:	ee68 8a87 	vmul.f32	s17, s17, s14
 800f9be:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f9c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f9c6:	ee78 8aa6 	vadd.f32	s17, s17, s13
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800f9ca:	edd4 aa0f 	vldr	s21, [r4, #60]	; 0x3c
 800f9ce:	ee6a aa87 	vmul.f32	s21, s21, s14
 800f9d2:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800f9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9da:	ee7a aaa7 	vadd.f32	s21, s21, s15
    Lfloat logB = logf(f->B);
 800f9de:	eeb0 0a4b 	vmov.f32	s0, s22
 800f9e2:	f008 fa3f 	bl	8017e64 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 800f9e6:	ee68 7a00 	vmul.f32	s15, s16, s0
 800f9ea:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f9ee:	ee2a aa00 	vmul.f32	s20, s20, s0
 800f9f2:	ee77 7a8a 	vadd.f32	s15, s15, s20
 800f9f6:	ee77 7aab 	vadd.f32	s15, s15, s23
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 800f9fa:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800fb60 <tThiranAllpassSOCascade_setCoeff+0x26c>
 800f9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa06:	ee17 3a90 	vmov	r3, s15
 800fa0a:	f103 5c7e 	add.w	ip, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 800fa0e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 800fa12:	f240 45fd 	movw	r5, #1277	; 0x4fd
 800fa16:	fb05 f203 	mul.w	r2, r5, r3
 800fa1a:	f643 11e9 	movw	r1, #14825	; 0x39e9
 800fa1e:	eb01 32a2 	add.w	r2, r1, r2, asr #14
 800fa22:	fb03 f202 	mul.w	r2, r3, r2
 800fa26:	484f      	ldr	r0, [pc, #316]	; (800fb64 <tThiranAllpassSOCascade_setCoeff+0x270>)
 800fa28:	eb00 32a2 	add.w	r2, r0, r2, asr #14
 800fa2c:	fb02 f303 	mul.w	r3, r2, r3
 800fa30:	12db      	asrs	r3, r3, #11
 800fa32:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
 800fa36:	eb0c 0e03 	add.w	lr, ip, r3
    Lfloat kd = fastExp3(temp);
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 800fa3a:	ee68 8a80 	vmul.f32	s17, s17, s0
 800fa3e:	ee78 8aaa 	vadd.f32	s17, s17, s21
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 800fa42:	ee68 8a87 	vmul.f32	s17, s17, s14
 800fa46:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800fa4a:	ee17 2a90 	vmov	r2, s15
 800fa4e:	f102 537e 	add.w	r3, r2, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 800fa52:	f3c2 12cf 	ubfx	r2, r2, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 800fa56:	fb05 fc02 	mul.w	ip, r5, r2
 800fa5a:	eb01 3cac 	add.w	ip, r1, ip, asr #14
 800fa5e:	fb0c fc02 	mul.w	ip, ip, r2
 800fa62:	eb00 3cac 	add.w	ip, r0, ip, asr #14
 800fa66:	fb0c f202 	mul.w	r2, ip, r2
 800fa6a:	12d2      	asrs	r2, r2, #11
 800fa6c:	f2a2 2272 	subw	r2, r2, #626	; 0x272
    reinterpreter.i +=
 800fa70:	4413      	add	r3, r2
 800fa72:	ee07 3a90 	vmov	s15, r3
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 800fa76:	ee06 ea90 	vmov	s13, lr
 800fa7a:	ee69 9aa6 	vmul.f32	s19, s19, s13
 800fa7e:	ee77 7ae9 	vsub.f32	s15, s15, s19
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 800fa82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa8a:	ee17 3a90 	vmov	r3, s15
 800fa8e:	f103 527e 	add.w	r2, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 800fa92:	f3c3 13cf 	ubfx	r3, r3, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 800fa96:	fb03 f505 	mul.w	r5, r3, r5
 800fa9a:	eb01 31a5 	add.w	r1, r1, r5, asr #14
 800fa9e:	fb03 f101 	mul.w	r1, r3, r1
 800faa2:	eb00 30a1 	add.w	r0, r0, r1, asr #14
 800faa6:	fb00 f303 	mul.w	r3, r0, r3
 800faaa:	12db      	asrs	r3, r3, #11
 800faac:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 800fab0:	18d3      	adds	r3, r2, r3
 800fab2:	ee08 3a10 	vmov	s16, r3
    f->D = D;
 800fab6:	6563      	str	r3, [r4, #84]	; 0x54

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 800fab8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fabc:	ee78 5a47 	vsub.f32	s11, s16, s14
 800fac0:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800fac4:	ee65 6aa6 	vmul.f32	s13, s11, s13
	a_k /= (D - 1.0f);
 800fac8:	ee78 7a49 	vsub.f32	s15, s16, s18
 800facc:	ee86 6aa7 	vdiv.f32	s12, s13, s15

	a_k *= (D - 1.0f);
 800fad0:	ee27 6a86 	vmul.f32	s12, s15, s12
	a_k /= D;
 800fad4:	eec6 6a08 	vdiv.f32	s13, s12, s16

	a_k *= D;
 800fad8:	ee66 6a88 	vmul.f32	s13, s13, s16
	a_k /= (D + 1.0f);
 800fadc:	ee38 9a09 	vadd.f32	s18, s16, s18
 800fae0:	ee86 6a89 	vdiv.f32	s12, s13, s18

	f->a[0] = a_k;
 800fae4:	ed84 6a05 	vstr	s12, [r4, #20]

	a_k = 1.0f;

	a_k *= (D - 2.0f);
	a_k /= D;
 800fae8:	eec5 6a88 	vdiv.f32	s13, s11, s16

	a_k *= (D - 1.0f);
 800faec:	ee67 7aa6 	vmul.f32	s15, s15, s13
	a_k /= (D + 1.0f);
 800faf0:	eec7 6a89 	vdiv.f32	s13, s15, s18

	a_k *= D;
 800faf4:	ee66 7a88 	vmul.f32	s15, s13, s16
	a_k /= (D + 2.0f);
 800faf8:	ee38 7a07 	vadd.f32	s14, s16, s14
 800fafc:	eec7 6a87 	vdiv.f32	s13, s15, s14

	f->a[1] = a_k;
 800fb00:	edc4 6a06 	vstr	s13, [r4, #24]

	if (f->a[0] > 0.99f)
 800fb04:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fb68 <tThiranAllpassSOCascade_setCoeff+0x274>
 800fb08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800fb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb10:	dd05      	ble.n	800fb1e <tThiranAllpassSOCascade_setCoeff+0x22a>
	{
		f->a[0] = 0.99f;
 800fb12:	edc4 7a05 	vstr	s15, [r4, #20]
		f->a[1] = 0.01f;
 800fb16:	4b15      	ldr	r3, [pc, #84]	; (800fb6c <tThiranAllpassSOCascade_setCoeff+0x278>)
 800fb18:	61a3      	str	r3, [r4, #24]
		D = 1.0f;
 800fb1a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 800fb1e:	2500      	movs	r5, #0
 800fb20:	e009      	b.n	800fb36 <tThiranAllpassSOCascade_setCoeff+0x242>
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 800fb22:	68a0      	ldr	r0, [r4, #8]
 800fb24:	edd4 0a06 	vldr	s1, [r4, #24]
 800fb28:	ed94 0a05 	vldr	s0, [r4, #20]
 800fb2c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800fb30:	f7ff fe4e 	bl	800f7d0 <tAllpassSO_setCoeff>
    for (int i = 0; i < f->numActiveFilters; i++)
 800fb34:	3501      	adds	r5, #1
 800fb36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800fb38:	42ab      	cmp	r3, r5
 800fb3a:	dcf2      	bgt.n	800fb22 <tThiranAllpassSOCascade_setCoeff+0x22e>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 800fb3c:	ee07 3a90 	vmov	s15, r3
 800fb40:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 800fb44:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fb48:	ecbd 8b08 	vpop	{d8-d11}
 800fb4c:	bd38      	pop	{r3, r4, r5, pc}
 800fb4e:	bf00      	nop
 800fb50:	3b14f209 	.word	0x3b14f209
 800fb54:	42440000 	.word	0x42440000
 800fb58:	3cf5c28f 	.word	0x3cf5c28f
 800fb5c:	00000000 	.word	0x00000000
 800fb60:	4b38aa3b 	.word	0x4b38aa3b
 800fb64:	fffec87b 	.word	0xfffec87b
 800fb68:	3f7d70a4 	.word	0x3f7d70a4
 800fb6c:	3c23d70a 	.word	0x3c23d70a

0800fb70 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
 800fb70:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800fb72:	6805      	ldr	r5, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 800fb74:	2400      	movs	r4, #0
 800fb76:	e005      	b.n	800fb84 <tThiranAllpassSOCascade_tick+0x14>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
 800fb78:	68a8      	ldr	r0, [r5, #8]
 800fb7a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800fb7e:	f7ff fe2d 	bl	800f7dc <tAllpassSO_tick>
    for (int i = 0; i < f->numActiveFilters; i++)
 800fb82:	3401      	adds	r4, #1
 800fb84:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800fb86:	42a3      	cmp	r3, r4
 800fb88:	dcf6      	bgt.n	800fb78 <tThiranAllpassSOCascade_tick+0x8>
    }
    return sample;
}
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}

0800fb8c <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 800fb8c:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e009      	b.n	800fba6 <tThiranAllpassSOCascade_clear+0x1a>
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 800fb92:	6891      	ldr	r1, [r2, #8]
 800fb94:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800fb98:	2100      	movs	r1, #0
 800fb9a:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 800fb9c:	6890      	ldr	r0, [r2, #8]
 800fb9e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fba2:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 800fba4:	3301      	adds	r3, #1
 800fba6:	6851      	ldr	r1, [r2, #4]
 800fba8:	4299      	cmp	r1, r3
 800fbaa:	dcf2      	bgt.n	800fb92 <tThiranAllpassSOCascade_clear+0x6>

    }
}
 800fbac:	4770      	bx	lr

0800fbae <tOnePole_free>:
    
    tOnePole_setFreq(ft, freq);
}

void    tOnePole_free   (tOnePole* const ft)
{
 800fbae:	b508      	push	{r3, lr}
    _tOnePole* f = *ft;
 800fbb0:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800fbb2:	6801      	ldr	r1, [r0, #0]
 800fbb4:	f003 f966 	bl	8012e84 <mpool_free>
}
 800fbb8:	bd08      	pop	{r3, pc}
	...

0800fbbc <tOnePole_setFreq>:
    f->a1 = -thePole;
}

void        tOnePole_setFreq        (tOnePole* const ft, Lfloat freq)
{
    _tOnePole* f = *ft;
 800fbbc:	6803      	ldr	r3, [r0, #0]
    
    f->freq = freq;
 800fbbe:	ed83 0a01 	vstr	s0, [r3, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800fbc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800fbc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fbca:	ed83 0a04 	vstr	s0, [r3, #16]
    if (val < min)
 800fbce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd6:	d409      	bmi.n	800fbec <tOnePole_setFreq+0x30>
    else if (val > max)
 800fbd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbdc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe4:	dd04      	ble.n	800fbf0 <tOnePole_setFreq+0x34>
        return max;
 800fbe6:	eeb0 0a67 	vmov.f32	s0, s15
 800fbea:	e001      	b.n	800fbf0 <tOnePole_setFreq+0x34>
        return min;
 800fbec:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800fc04 <tOnePole_setFreq+0x48>
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800fbf0:	ed83 0a04 	vstr	s0, [r3, #16]
    f->b0 = 1.0f - f->a1;
 800fbf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbf8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fbfc:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	00000000 	.word	0x00000000

0800fc08 <tOnePole_initToPool>:
{
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	ed2d 8b02 	vpush	{d8}
 800fc0e:	4604      	mov	r4, r0
 800fc10:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800fc14:	680d      	ldr	r5, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800fc16:	4629      	mov	r1, r5
 800fc18:	2028      	movs	r0, #40	; 0x28
 800fc1a:	f003 f847 	bl	8012cac <mpool_alloc>
 800fc1e:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800fc20:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800fc22:	686a      	ldr	r2, [r5, #4]
    f->gain = 1.0f;
 800fc24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fc28:	6083      	str	r3, [r0, #8]
    f->a0 = 1.0;
 800fc2a:	60c3      	str	r3, [r0, #12]
    f->lastIn = 0.0f;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	61c3      	str	r3, [r0, #28]
    f->lastOut = 0.0f;
 800fc30:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800fc32:	68d3      	ldr	r3, [r2, #12]
 800fc34:	6243      	str	r3, [r0, #36]	; 0x24
    tOnePole_setFreq(ft, freq);
 800fc36:	eeb0 0a48 	vmov.f32	s0, s16
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f7ff ffbe 	bl	800fbbc <tOnePole_setFreq>
}
 800fc40:	ecbd 8b02 	vpop	{d8}
 800fc44:	bd38      	pop	{r3, r4, r5, pc}

0800fc46 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 800fc46:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
 800fc48:	edd3 7a02 	vldr	s15, [r3, #8]
 800fc4c:	ee67 7a80 	vmul.f32	s15, s15, s0
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800fc50:	ed93 0a05 	vldr	s0, [r3, #20]
 800fc54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc58:	ed93 7a04 	vldr	s14, [r3, #16]
 800fc5c:	edd3 6a08 	vldr	s13, [r3, #32]
 800fc60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fc64:	ee30 0a07 	vadd.f32	s0, s0, s14
    
    f->lastIn = in;
 800fc68:	edc3 7a07 	vstr	s15, [r3, #28]
    f->lastOut = out;
 800fc6c:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 800fc70:	4770      	bx	lr
	...

0800fc74 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
 800fc74:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800fc76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc7e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800fccc <tOnePole_setSampleRate+0x58>
 800fc82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc86:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800fc8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc92:	edc3 7a05 	vstr	s15, [r3, #20]
    if (val < min)
 800fc96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9e:	d409      	bmi.n	800fcb4 <tOnePole_setSampleRate+0x40>
    else if (val > max)
 800fca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcac:	dd04      	ble.n	800fcb8 <tOnePole_setSampleRate+0x44>
        return max;
 800fcae:	eef0 7a47 	vmov.f32	s15, s14
 800fcb2:	e001      	b.n	800fcb8 <tOnePole_setSampleRate+0x44>
        return min;
 800fcb4:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fcd0 <tOnePole_setSampleRate+0x5c>
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800fcb8:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a1 = 1.0f - f->b0;
 800fcbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcc4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800fcc8:	4770      	bx	lr
 800fcca:	bf00      	nop
 800fccc:	40c90fdb 	.word	0x40c90fdb
 800fcd0:	00000000 	.word	0x00000000

0800fcd4 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800fcd8:	680c      	ldr	r4, [r1, #0]
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 800fcda:	4621      	mov	r1, r4
 800fcdc:	2018      	movs	r0, #24
 800fcde:	f002 ffe5 	bl	8012cac <mpool_alloc>
 800fce2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800fce4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800fce6:	6863      	ldr	r3, [r4, #4]
    
    f->poleCoeff     = 0.9f;
 800fce8:	4a04      	ldr	r2, [pc, #16]	; (800fcfc <tCookOnePole_initToPool+0x28>)
 800fcea:	6042      	str	r2, [r0, #4]
    f->sgain         = 0.1f;
 800fcec:	4a04      	ldr	r2, [pc, #16]	; (800fd00 <tCookOnePole_initToPool+0x2c>)
 800fcee:	6082      	str	r2, [r0, #8]
    f->output         = 0.0f;
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	6103      	str	r3, [r0, #16]
}
 800fcf8:	bd38      	pop	{r3, r4, r5, pc}
 800fcfa:	bf00      	nop
 800fcfc:	3f666666 	.word	0x3f666666
 800fd00:	3dcccccd 	.word	0x3dcccccd

0800fd04 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
 800fd04:	b508      	push	{r3, lr}
    _tCookOnePole* f = *ft;
 800fd06:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800fd08:	6801      	ldr	r1, [r0, #0]
 800fd0a:	f003 f8bb 	bl	8012e84 <mpool_free>
}
 800fd0e:	bd08      	pop	{r3, pc}

0800fd10 <tCookOnePole_setPole>:


void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
 800fd10:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = aValue;
 800fd12:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 800fd16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1e:	dd06      	ble.n	800fd2e <tCookOnePole_setPole+0x1e>
        onepole->sgain = (1.0f - onepole->poleCoeff);
 800fd20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd24:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fd28:	edc3 7a02 	vstr	s15, [r3, #8]
 800fd2c:	4770      	bx	lr
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
 800fd2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd32:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd36:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800fd3a:	4770      	bx	lr

0800fd3c <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 800fd3c:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 800fd3e:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 800fd42:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 800fd46:	4770      	bx	lr

0800fd48 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 800fd48:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 800fd4a:	edd3 7a02 	vldr	s15, [r3, #8]
 800fd4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd52:	edd3 7a01 	vldr	s15, [r3, #4]
 800fd56:	ed93 7a03 	vldr	s14, [r3, #12]
 800fd5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd62:	ed83 0a03 	vstr	s0, [r3, #12]
    return onepole->output;
}
 800fd66:	4770      	bx	lr

0800fd68 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
 800fd68:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800fd6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd72:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800fd80 <tCookOnePole_setSampleRate+0x18>
 800fd76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd7a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800fd7e:	4770      	bx	lr
 800fd80:	40c90fdb 	.word	0x40c90fdb

0800fd84 <tSVF_initToPool>:
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	ed2d 8b02 	vpush	{d8}
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	460f      	mov	r7, r1
 800fd8e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd92:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800fd96:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800fd98:	4629      	mov	r1, r5
 800fd9a:	2054      	movs	r0, #84	; 0x54
 800fd9c:	f002 ff86 	bl	8012cac <mpool_alloc>
 800fda0:	4604      	mov	r4, r0
 800fda2:	6030      	str	r0, [r6, #0]
    svf->mempool = m;
 800fda4:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800fda6:	686e      	ldr	r6, [r5, #4]
    
    svf->sampleRate = leaf->sampleRate;
 800fda8:	edd6 7a00 	vldr	s15, [r6]
 800fdac:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 800fdb0:	ed96 0a01 	vldr	s0, [r6, #4]
 800fdb4:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
    svf->sampleRatio = 48000.0f /svf->sampleRate;
 800fdb8:	eddf 6a35 	vldr	s13, [pc, #212]	; 800fe90 <tSVF_initToPool+0x10c>
 800fdbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdc0:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    svf->type = type;
 800fdc4:	7107      	strb	r7, [r0, #4]
    
    svf->ic1eq = 0.0f;
 800fdc6:	2500      	movs	r5, #0
 800fdc8:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0.0f;
 800fdca:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 800fdcc:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800fdd0:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800fdd4:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800fe94 <tSVF_initToPool+0x110>
 800fdd8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fddc:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fde0:	f008 fc46 	bl	8018670 <tanf>
 800fde4:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->k = 1.0f/Q;
 800fde8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdec:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800fdf0:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800fdf4:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fdf8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fdfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe04:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g*svf->a1;
 800fe08:	ee60 7a07 	vmul.f32	s15, s0, s14
 800fe0c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 800fe10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe14:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    
    svf->cH = 0.0f;
 800fe18:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cB = 0.0f;
 800fe1a:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 800fe1c:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->cL = 1.0f;
 800fe1e:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    
    if (type == SVFTypeLowpass)
 800fe22:	2f01      	cmp	r7, #1
 800fe24:	d00b      	beq.n	800fe3e <tSVF_initToPool+0xba>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800fe26:	2f04      	cmp	r7, #4
 800fe28:	d809      	bhi.n	800fe3e <tSVF_initToPool+0xba>
 800fe2a:	e8df f007 	tbb	[pc, r7]
 800fe2e:	0816      	.short	0x0816
 800fe30:	1d03      	.short	0x1d03
 800fe32:	25          	.byte	0x25
 800fe33:	00          	.byte	0x00
    {
        svf->cH = 0.0f;
        svf->cB = 1.0f;
 800fe34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fe38:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 800fe3e:	ed96 7a00 	vldr	s14, [r6]
 800fe42:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fe98 <tSVF_initToPool+0x114>
 800fe46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe4e:	dd1c      	ble.n	800fe8a <tSVF_initToPool+0x106>
    {
        svf->table = __filterTanhTable_96000;
 800fe50:	4b12      	ldr	r3, [pc, #72]	; (800fe9c <tSVF_initToPool+0x118>)
 800fe52:	6523      	str	r3, [r4, #80]	; 0x50
    }
    else
    {
        svf->table = __filterTanhTable_48000;
    }
}
 800fe54:	ecbd 8b02 	vpop	{d8}
 800fe58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 800fe5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fe5e:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800fe60:	4b0f      	ldr	r3, [pc, #60]	; (800fea0 <tSVF_initToPool+0x11c>)
 800fe62:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -1.0f;
 800fe64:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe66:	e7ea      	b.n	800fe3e <tSVF_initToPool+0xba>
        svf->cH = 1.0f;
 800fe68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fe6c:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800fe6e:	4b0c      	ldr	r3, [pc, #48]	; (800fea0 <tSVF_initToPool+0x11c>)
 800fe70:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 800fe72:	2300      	movs	r3, #0
 800fe74:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe76:	e7e2      	b.n	800fe3e <tSVF_initToPool+0xba>
        svf->cH = 1.0f;
 800fe78:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fe7c:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800fe7e:	4b08      	ldr	r3, [pc, #32]	; (800fea0 <tSVF_initToPool+0x11c>)
 800fe80:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 800fe82:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800fe86:	63a3      	str	r3, [r4, #56]	; 0x38
 800fe88:	e7d9      	b.n	800fe3e <tSVF_initToPool+0xba>
        svf->table = __filterTanhTable_48000;
 800fe8a:	4b06      	ldr	r3, [pc, #24]	; (800fea4 <tSVF_initToPool+0x120>)
 800fe8c:	6523      	str	r3, [r4, #80]	; 0x50
}
 800fe8e:	e7e1      	b.n	800fe54 <tSVF_initToPool+0xd0>
 800fe90:	473b8000 	.word	0x473b8000
 800fe94:	40490fdb 	.word	0x40490fdb
 800fe98:	47afc800 	.word	0x47afc800
 800fe9c:	0801f14c 	.word	0x0801f14c
 800fea0:	bf800000 	.word	0xbf800000
 800fea4:	0801b14c 	.word	0x0801b14c

0800fea8 <tSVF_init>:
{
 800fea8:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800feaa:	3218      	adds	r2, #24
 800feac:	f7ff ff6a 	bl	800fd84 <tSVF_initToPool>
}
 800feb0:	bd08      	pop	{r3, pc}

0800feb2 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
 800feb2:	b508      	push	{r3, lr}
    _tSVF* svf = *svff;
 800feb4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 800feb6:	6801      	ldr	r1, [r0, #0]
 800feb8:	f002 ffe4 	bl	8012e84 <mpool_free>
}
 800febc:	bd08      	pop	{r3, pc}

0800febe <tSVF_tick>:

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800febe:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 800fec0:	ed93 6a06 	vldr	s12, [r3, #24]
 800fec4:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800fec8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800fecc:	edd3 5a05 	vldr	s11, [r3, #20]
 800fed0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800fed4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fed8:	ee67 6a85 	vmul.f32	s13, s15, s10
 800fedc:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800fee0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800fee4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800fee8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800feec:	ee66 6a85 	vmul.f32	s13, s13, s10
 800fef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800fef4:	ee77 6a07 	vadd.f32	s13, s14, s14
 800fef8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800fefc:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800ff00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ff04:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ff08:	edc3 6a06 	vstr	s13, [r3, #24]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800ff0c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800ff10:	ee26 0a80 	vmul.f32	s0, s13, s0
 800ff14:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800ff18:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ff1c:	ee30 0a26 	vadd.f32	s0, s0, s13
 800ff20:	edd3 6a08 	vldr	s13, [r3, #32]
 800ff24:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ff28:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800ff2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ff30:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ff34:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 800ff38:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800ff3c:	ee37 0a00 	vadd.f32	s0, s14, s0
 800ff40:	4770      	bx	lr

0800ff42 <tSVF_tickHP>:

Lfloat   tSVF_tickHP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800ff42:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
 800ff44:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ff48:	edd3 5a05 	vldr	s11, [r3, #20]
 800ff4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ff50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ff54:	ed93 6a06 	vldr	s12, [r3, #24]
 800ff58:	ee70 6a46 	vsub.f32	s13, s0, s12
 800ff5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ff60:	ee77 7a87 	vadd.f32	s15, s15, s14
    v2 = svf->ic2eq + svf->g * v1;
 800ff64:	ed93 7a07 	vldr	s14, [r3, #28]
 800ff68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff6c:	ee36 7a07 	vadd.f32	s14, s12, s14
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800ff70:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ff74:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ff78:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800ff7c:	ee77 6a07 	vadd.f32	s13, s14, s14
 800ff80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ff84:	edc3 6a06 	vstr	s13, [r3, #24]
    return v0  - (svf->k * v1) - (v2);
 800ff88:	edd3 6a08 	vldr	s13, [r3, #32]
 800ff8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff90:	ee30 0a67 	vsub.f32	s0, s0, s15
}
 800ff94:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ff98:	4770      	bx	lr

0800ff9a <tSVF_tickBP>:

Lfloat   tSVF_tickBP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800ff9a:	6803      	ldr	r3, [r0, #0]

    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
 800ff9c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ffa0:	ed93 6a05 	vldr	s12, [r3, #20]
 800ffa4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ffa8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800ffac:	ed93 7a06 	vldr	s14, [r3, #24]
 800ffb0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ffb4:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ffb8:	ee37 0aa6 	vadd.f32	s0, s15, s13
    v2 = svf->ic2eq + svf->g * v1;
 800ffbc:	edd3 7a07 	vldr	s15, [r3, #28]
 800ffc0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ffc4:	ee77 7a27 	vadd.f32	s15, s14, s15
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800ffc8:	ee70 6a00 	vadd.f32	s13, s0, s0
 800ffcc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ffd0:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800ffd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ffd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffdc:	edc3 7a06 	vstr	s15, [r3, #24]
    
    return v1;
}
 800ffe0:	4770      	bx	lr

0800ffe2 <tSVF_tickLP>:

Lfloat   tSVF_tickLP(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800ffe2:	6803      	ldr	r3, [r0, #0]
    Lfloat v1,v2;
    v1 = svf->a1 * svf->ic1eq + svf->a2 * (v0 - svf->ic2eq);
 800ffe4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800ffe8:	ed93 6a05 	vldr	s12, [r3, #20]
 800ffec:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fff0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800fff4:	ed93 7a06 	vldr	s14, [r3, #24]
 800fff8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fffc:	ee66 6a80 	vmul.f32	s13, s13, s0
 8010000:	ee77 7aa6 	vadd.f32	s15, s15, s13
    v2 = svf->ic2eq + svf->g * v1;
 8010004:	ed93 0a07 	vldr	s0, [r3, #28]
 8010008:	ee20 0a27 	vmul.f32	s0, s0, s15
 801000c:	ee37 0a00 	vadd.f32	s0, s14, s0
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8010010:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010014:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010018:	edc3 7a05 	vstr	s15, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 801001c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010024:	edc3 7a06 	vstr	s15, [r3, #24]
    return v2;
}
 8010028:	4770      	bx	lr
	...

0801002c <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 801002c:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 801002e:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8010030:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8010034:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010038:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 801003c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010044:	d407      	bmi.n	8010056 <tSVF_setFreq+0x2a>
    else if (val > max)
 8010046:	eef4 7ac0 	vcmpe.f32	s15, s0
 801004a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004e:	d504      	bpl.n	801005a <tSVF_setFreq+0x2e>
        return max;
 8010050:	eeb0 0a67 	vmov.f32	s0, s15
 8010054:	e001      	b.n	801005a <tSVF_setFreq+0x2e>
        return min;
 8010056:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80100a4 <tSVF_setFreq+0x78>
 801005a:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 801005e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80100a8 <tSVF_setFreq+0x7c>
 8010062:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010066:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 801006a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801006e:	f008 faff 	bl	8018670 <tanf>
 8010072:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8010076:	edd4 7a08 	vldr	s15, [r4, #32]
 801007a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801007e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010082:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801008e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 8010092:	ee60 7a07 	vmul.f32	s15, s0, s14
 8010096:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 801009a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801009e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 80100a2:	bd10      	pop	{r4, pc}
 80100a4:	00000000 	.word	0x00000000
 80100a8:	40490fdb 	.word	0x40490fdb

080100ac <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
    _tSVF* svf = *vf;
 80100ac:	6803      	ldr	r3, [r0, #0]
    svf->cutoffMIDI = cutoff;
 80100ae:	ed83 0a04 	vstr	s0, [r3, #16]
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 80100b2:	eddf 7a23 	vldr	s15, [pc, #140]	; 8010140 <tSVF_setFreqFast+0x94>
 80100b6:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 80100ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100be:	ee17 2a90 	vmov	r2, s15
    if (intVer > 4094)
 80100c2:	f640 71fe 	movw	r1, #4094	; 0xffe
 80100c6:	428a      	cmp	r2, r1
 80100c8:	dc03      	bgt.n	80100d2 <tSVF_setFreqFast+0x26>
    {
        intVer = 4094;
    }
    if (intVer < 0)
 80100ca:	2a00      	cmp	r2, #0
 80100cc:	da03      	bge.n	80100d6 <tSVF_setFreqFast+0x2a>
    {
        intVer = 0;
 80100ce:	2200      	movs	r2, #0
 80100d0:	e001      	b.n	80100d6 <tSVF_setFreqFast+0x2a>
        intVer = 4094;
 80100d2:	f640 72fe 	movw	r2, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80100d6:	ee07 2a90 	vmov	s15, r2
 80100da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100de:	ee30 0a67 	vsub.f32	s0, s0, s15

    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
 80100e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80100e4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80100e8:	edd0 7a00 	vldr	s15, [r0]
 80100ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80100f0:	ee36 7a40 	vsub.f32	s14, s12, s0
 80100f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100f8:	3201      	adds	r2, #1
 80100fa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80100fe:	ed91 7a00 	vldr	s14, [r1]
 8010102:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010106:	ee77 7a87 	vadd.f32	s15, s15, s14
 801010a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 801010e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010112:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8010116:	ed93 7a08 	vldr	s14, [r3, #32]
 801011a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801011e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010122:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010126:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801012a:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 801012e:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8010132:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8010136:	ee67 7a87 	vmul.f32	s15, s15, s14
 801013a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 801013e:	4770      	bx	lr
 8010140:	41f4898d 	.word	0x41f4898d

08010144 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
 8010144:	6803      	ldr	r3, [r0, #0]
    svf->Q = Q;
 8010146:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->k = 1.0f/Q;
 801014a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801014e:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8010152:	edc3 7a08 	vstr	s15, [r3, #32]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8010156:	ed93 7a07 	vldr	s14, [r3, #28]
 801015a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801015e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010162:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010166:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801016a:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 801016e:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010172:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8010176:	ee27 7a27 	vmul.f32	s14, s14, s15
 801017a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 801017e:	4770      	bx	lr

08010180 <tSVF_setSampleRate>:
    }
}

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
 8010180:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 8010182:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8010186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801018a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801018e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    svf->sampleRatio = 48000.0f /svf->sampleRate;
 8010192:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80101b8 <tSVF_setSampleRate+0x38>
 8010196:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801019a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    if (sr > 80000)
 801019e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80101bc <tSVF_setSampleRate+0x3c>
 80101a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80101a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101aa:	dd02      	ble.n	80101b2 <tSVF_setSampleRate+0x32>
    {
        svf->table = __filterTanhTable_96000;
 80101ac:	4a04      	ldr	r2, [pc, #16]	; (80101c0 <tSVF_setSampleRate+0x40>)
 80101ae:	651a      	str	r2, [r3, #80]	; 0x50
 80101b0:	4770      	bx	lr
    }
    else
    {
        svf->table = __filterTanhTable_48000;
 80101b2:	4a04      	ldr	r2, [pc, #16]	; (80101c4 <tSVF_setSampleRate+0x44>)
 80101b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
}
 80101b6:	4770      	bx	lr
 80101b8:	473b8000 	.word	0x473b8000
 80101bc:	479c4000 	.word	0x479c4000
 80101c0:	0801f14c 	.word	0x0801f14c
 80101c4:	0801b14c 	.word	0x0801b14c

080101c8 <tSVF_LP_initToPool>:
{
    tSVF_LP_initToPool     (svff, freq, Q, &leaf->mempool);
}

void    tSVF_LP_initToPool     (tSVF_LP* const svff, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 80101c8:	b570      	push	{r4, r5, r6, lr}
 80101ca:	ed2d 8b02 	vpush	{d8}
 80101ce:	4606      	mov	r6, r0
 80101d0:	eef0 8a40 	vmov.f32	s17, s0
 80101d4:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 80101d8:	680d      	ldr	r5, [r1, #0]
    _tSVF_LP* svf = *svff = (_tSVF_LP*) mpool_alloc(sizeof(_tSVF_LP), m);
 80101da:	4629      	mov	r1, r5
 80101dc:	2048      	movs	r0, #72	; 0x48
 80101de:	f002 fd65 	bl	8012cac <mpool_alloc>
 80101e2:	4604      	mov	r4, r0
 80101e4:	6030      	str	r0, [r6, #0]
    svf->mempool = m;
 80101e6:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80101e8:	686d      	ldr	r5, [r5, #4]
    
    svf->sampleRate = leaf->sampleRate;
 80101ea:	edd5 7a00 	vldr	s15, [r5]
 80101ee:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    svf->invSampleRate = leaf->invSampleRate;
 80101f2:	ed95 0a01 	vldr	s0, [r5, #4]
 80101f6:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
    svf->sampleRatio = svf->sampleRate/48000.0f;
 80101fa:	eddf 6a27 	vldr	s13, [pc, #156]	; 8010298 <tSVF_LP_initToPool+0xd0>
 80101fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010202:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    
    svf->ic1eq = 0.0f;
 8010206:	2300      	movs	r3, #0
 8010208:	6043      	str	r3, [r0, #4]
    svf->ic2eq = 0.0f;
 801020a:	6083      	str	r3, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 801020c:	eddf 7a23 	vldr	s15, [pc, #140]	; 801029c <tSVF_LP_initToPool+0xd4>
 8010210:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010214:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010218:	f008 fa2a 	bl	8018670 <tanf>
 801021c:	ed84 0a03 	vstr	s0, [r4, #12]
    svf->k = 2.0f *Q;
 8010220:	ee78 0a08 	vadd.f32	s1, s16, s16
 8010224:	edc4 0a05 	vstr	s1, [r4, #20]
    svf->onePlusg = 1.0f + svf->g;
 8010228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801022c:	ee30 7a26 	vadd.f32	s14, s0, s13
 8010230:	ed84 7a04 	vstr	s14, [r4, #16]
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
 8010234:	ee27 6a07 	vmul.f32	s12, s14, s14
 8010238:	ee60 7a20 	vmul.f32	s15, s0, s1
 801023c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8010240:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010244:	edc4 7a06 	vstr	s15, [r4, #24]
    svf->a1 = svf->k * svf->a0;
 8010248:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801024c:	edc4 0a07 	vstr	s1, [r4, #28]
    svf->a2 = svf->onePlusg*svf->a0;
 8010250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010254:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8010258:	ee60 7a27 	vmul.f32	s15, s0, s15
 801025c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a4 = 1.0f / svf->onePlusg;
 8010260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010264:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a5 = svf->g*svf->a4;
 8010268:	ee20 0a27 	vmul.f32	s0, s0, s15
 801026c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    svf->nan = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	6423      	str	r3, [r4, #64]	; 0x40
    
    if (leaf->sampleRate > 80000)
 8010274:	ed95 7a00 	vldr	s14, [r5]
 8010278:	eddf 7a09 	vldr	s15, [pc, #36]	; 80102a0 <tSVF_LP_initToPool+0xd8>
 801027c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010284:	dd04      	ble.n	8010290 <tSVF_LP_initToPool+0xc8>
    {
        svf->table = __filterTanhTable_96000;
 8010286:	4b07      	ldr	r3, [pc, #28]	; (80102a4 <tSVF_LP_initToPool+0xdc>)
 8010288:	6463      	str	r3, [r4, #68]	; 0x44
    }
    else
    {
        svf->table = __filterTanhTable_48000;
    }
}
 801028a:	ecbd 8b02 	vpop	{d8}
 801028e:	bd70      	pop	{r4, r5, r6, pc}
        svf->table = __filterTanhTable_48000;
 8010290:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <tSVF_LP_initToPool+0xe0>)
 8010292:	6463      	str	r3, [r4, #68]	; 0x44
}
 8010294:	e7f9      	b.n	801028a <tSVF_LP_initToPool+0xc2>
 8010296:	bf00      	nop
 8010298:	473b8000 	.word	0x473b8000
 801029c:	40490fdb 	.word	0x40490fdb
 80102a0:	479c4000 	.word	0x479c4000
 80102a4:	0801f14c 	.word	0x0801f14c
 80102a8:	0801b14c 	.word	0x0801b14c

080102ac <tSVF_LP_init>:
{
 80102ac:	b508      	push	{r3, lr}
    tSVF_LP_initToPool     (svff, freq, Q, &leaf->mempool);
 80102ae:	3118      	adds	r1, #24
 80102b0:	f7ff ff8a 	bl	80101c8 <tSVF_LP_initToPool>
}
 80102b4:	bd08      	pop	{r3, pc}

080102b6 <tSVF_LP_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_LP_tick(tSVF_LP* const svff, Lfloat v0)
{
    _tSVF_LP* svf = *svff;
 80102b6:	6803      	ldr	r3, [r0, #0]
    Lfloat v1,v2;
    v1 = svf->a1*svf->ic2eq + svf->a2*svf->ic1eq + svf->a3*v0;
 80102b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80102bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80102c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102c4:	edd3 6a08 	vldr	s13, [r3, #32]
 80102c8:	ed93 6a01 	vldr	s12, [r3, #4]
 80102cc:	ee66 6a86 	vmul.f32	s13, s13, s12
 80102d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102d4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80102d8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80102dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
    v2 = svf->a4*svf->ic2eq + svf->a5*v1;
 80102e0:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 80102e4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80102e8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80102ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80102f0:	ee30 0a26 	vadd.f32	s0, s0, s13
    svf->ic1eq = (2.0f*(v1 - svf->k*v2)) - svf->ic1eq;
 80102f4:	edd3 6a05 	vldr	s13, [r3, #20]
 80102f8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80102fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010300:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010304:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010308:	edc3 7a01 	vstr	s15, [r3, #4]
    svf->ic2eq = (2.0f*v2) - svf->ic2eq;
 801030c:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010314:	edc3 7a02 	vstr	s15, [r3, #8]
    return v2;
}
 8010318:	4770      	bx	lr
	...

0801031c <tSVF_LP_setFreqFast>:
    
}

void    tSVF_LP_setFreqFast     (tSVF_LP* const vf, Lfloat cutoff)
{
    _tSVF_LP* svf = *vf;
 801031c:	6803      	ldr	r3, [r0, #0]
    //svf->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 801031e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80103cc <tSVF_LP_setFreqFast+0xb0>
 8010322:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 8010326:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801032a:	ee17 2a90 	vmov	r2, s15
    if (intVer > 4094)
 801032e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8010332:	428a      	cmp	r2, r1
 8010334:	dc03      	bgt.n	801033e <tSVF_LP_setFreqFast+0x22>
    {
        intVer = 4094;
    }
    if (intVer < 0)
 8010336:	2a00      	cmp	r2, #0
 8010338:	da03      	bge.n	8010342 <tSVF_LP_setFreqFast+0x26>
    {
        intVer = 0;
 801033a:	2200      	movs	r2, #0
 801033c:	e001      	b.n	8010342 <tSVF_LP_setFreqFast+0x26>
        intVer = 4094;
 801033e:	f640 72fe 	movw	r2, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010342:	ee07 2a90 	vmov	s15, r2
 8010346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801034a:	ee30 0a67 	vsub.f32	s0, s0, s15

    svf->g = ((svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer)) * svf->sampleRatio;
 801034e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8010350:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8010354:	edd0 7a00 	vldr	s15, [r0]
 8010358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801035c:	ee36 7a40 	vsub.f32	s14, s12, s0
 8010360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010364:	3201      	adds	r2, #1
 8010366:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801036a:	ed91 7a00 	vldr	s14, [r1]
 801036e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010376:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801037a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801037e:	edc3 7a03 	vstr	s15, [r3, #12]
    svf->onePlusg = 1.0f + svf->g;
 8010382:	ee77 6a86 	vadd.f32	s13, s15, s12
 8010386:	edc3 6a04 	vstr	s13, [r3, #16]
    svf->a0 = 1.0f / ((svf->onePlusg * svf->onePlusg) - (svf->g * svf->k));
 801038a:	ee26 5aa6 	vmul.f32	s10, s13, s13
 801038e:	edd3 5a05 	vldr	s11, [r3, #20]
 8010392:	ee27 7aa5 	vmul.f32	s14, s15, s11
 8010396:	ee35 5a47 	vsub.f32	s10, s10, s14
 801039a:	ee86 7a05 	vdiv.f32	s14, s12, s10
 801039e:	ed83 7a06 	vstr	s14, [r3, #24]
    svf->a1 = svf->k * svf->a0;
 80103a2:	ee65 5a87 	vmul.f32	s11, s11, s14
 80103a6:	edc3 5a07 	vstr	s11, [r3, #28]
    svf->a2 = svf->onePlusg*svf->a0;
 80103aa:	ee26 7a87 	vmul.f32	s14, s13, s14
 80103ae:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g*svf->a2;
 80103b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80103b6:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a4 = 1.0f / svf->onePlusg;
 80103ba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80103be:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a5 = svf->g*svf->a4;
 80103c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80103ca:	4770      	bx	lr
 80103cc:	41f4898d 	.word	0x41f4898d

080103d0 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	ed2d 8b02 	vpush	{d8}
 80103d6:	4605      	mov	r5, r0
 80103d8:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 80103dc:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80103de:	4621      	mov	r1, r4
 80103e0:	2018      	movs	r0, #24
 80103e2:	f002 fcdb 	bl	8012d9c <mpool_calloc>
 80103e6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 80103e8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 80103ea:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80103ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80103f0:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80103f4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80103f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010400:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 8010404:	2300      	movs	r3, #0
 8010406:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 8010408:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 801040a:	ed80 8a04 	vstr	s16, [r0, #16]
}
 801040e:	ecbd 8b02 	vpop	{d8}
 8010412:	bd38      	pop	{r3, r4, r5, pc}

08010414 <tHighpass_init>:
{
 8010414:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 8010416:	3118      	adds	r1, #24
 8010418:	f7ff ffda 	bl	80103d0 <tHighpass_initToPool>
}
 801041c:	bd08      	pop	{r3, pc}

0801041e <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
 801041e:	b508      	push	{r3, lr}
    _tHighpass* f = *ft;
 8010420:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8010422:	6801      	ldr	r1, [r0, #0]
 8010424:	f002 fd2e 	bl	8012e84 <mpool_free>
}
 8010428:	bd08      	pop	{r3, pc}

0801042a <tHighpass_setFreq>:

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 801042a:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
 801042c:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8010430:	ed93 7a05 	vldr	s14, [r3, #20]
 8010434:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801043c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010440:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8010444:	4770      	bx	lr

08010446 <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
 8010446:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
 801044a:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 801044c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010450:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010454:	edd3 6a03 	vldr	s13, [r3, #12]
 8010458:	ed93 6a02 	vldr	s12, [r3, #8]
 801045c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010460:	ee37 0aa6 	vadd.f32	s0, s15, s13
 8010464:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
 8010468:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
 801046c:	4770      	bx	lr
	...

08010470 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
 8010470:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8010472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010476:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801047a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8010498 <tHighpass_setSampleRate+0x28>
 801047e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010482:	edc3 7a05 	vstr	s15, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8010486:	edd3 6a04 	vldr	s13, [r3, #16]
 801048a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801048e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010492:	ed83 7a03 	vstr	s14, [r3, #12]
}
 8010496:	4770      	bx	lr
 8010498:	40c90fdb 	.word	0x40c90fdb

0801049c <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 801049c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801049e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80104a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80104a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80104aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80104ae:	ed93 6a03 	vldr	s12, [r3, #12]
 80104b2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80104b6:	ed93 7a06 	vldr	s14, [r3, #24]
 80104ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80104be:	ed93 7a04 	vldr	s14, [r3, #16]
 80104c2:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 80104c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 80104ca:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80104ce:	edc3 5a02 	vstr	s11, [r3, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 80104d2:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 80104d6:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 80104da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80104de:	ed83 7a03 	vstr	s14, [r3, #12]
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 80104e2:	ed93 7a07 	vldr	s14, [r3, #28]
 80104e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80104ea:	ed93 6a08 	vldr	s12, [r3, #32]
 80104ee:	ee66 6a26 	vmul.f32	s13, s12, s13
 80104f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80104f6:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 80104fa:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80104fe:	ee37 0a00 	vadd.f32	s0, s14, s0
 8010502:	4770      	bx	lr

08010504 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8010504:	b510      	push	{r4, lr}
 8010506:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilter* f = *vf;
 801050a:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801050c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8010510:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80107a0 <tVZFilter_calcCoeffs+0x29c>
 8010514:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010518:	ed94 9a12 	vldr	s18, [r4, #72]	; 0x48
 801051c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010520:	f008 f8a6 	bl	8018670 <tanf>
 8010524:	eeb0 8a40 	vmov.f32	s16, s0
 8010528:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
 801052c:	7923      	ldrb	r3, [r4, #4]
 801052e:	2b0a      	cmp	r3, #10
 8010530:	d80e      	bhi.n	8010550 <tVZFilter_calcCoeffs+0x4c>
 8010532:	e8df f003 	tbb	[pc, r3]
 8010536:	262d      	.short	0x262d
 8010538:	4e473b34 	.word	0x4e473b34
 801053c:	06c4a189 	.word	0x06c4a189
 8010540:	b9          	.byte	0xb9
 8010541:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 8010542:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010544:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 8010546:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801054a:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 801054c:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 801054e:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
 8010550:	edd4 7a05 	vldr	s15, [r4, #20]
 8010554:	ed94 7a04 	vldr	s14, [r4, #16]
 8010558:	ee77 6a87 	vadd.f32	s13, s15, s14
 801055c:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8010560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801056c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010578:	ed84 7a06 	vstr	s14, [r4, #24]
}
 801057c:	ecbd 8b04 	vpop	{d8-d9}
 8010580:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8010582:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010586:	61e3      	str	r3, [r4, #28]
 8010588:	2300      	movs	r3, #0
 801058a:	6223      	str	r3, [r4, #32]
 801058c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801058e:	e7df      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8010590:	2300      	movs	r3, #0
 8010592:	61e3      	str	r3, [r4, #28]
 8010594:	6223      	str	r3, [r4, #32]
 8010596:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801059a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801059c:	e7d8      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 801059e:	2300      	movs	r3, #0
 80105a0:	61e3      	str	r3, [r4, #28]
 80105a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80105a6:	6222      	str	r2, [r4, #32]
 80105a8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80105aa:	e7d1      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80105ac:	2300      	movs	r3, #0
 80105ae:	61e3      	str	r3, [r4, #28]
 80105b0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80105b4:	ed94 7a05 	vldr	s14, [r4, #20]
 80105b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105bc:	edc4 7a08 	vstr	s15, [r4, #32]
 80105c0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80105c2:	e7c5      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80105c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80105c8:	61e3      	str	r3, [r4, #28]
 80105ca:	2200      	movs	r2, #0
 80105cc:	6222      	str	r2, [r4, #32]
 80105ce:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80105d0:	e7be      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80105d2:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80105d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80105da:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 80105de:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80105e2:	f007 fe45 	bl	8018270 <powf>
 80105e6:	ee28 0a80 	vmul.f32	s0, s17, s0
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80105ea:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80107a0 <tVZFilter_calcCoeffs+0x29c>
 80105ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105f2:	ee29 0a00 	vmul.f32	s0, s18, s0
 80105f6:	f008 f83b 	bl	8018670 <tanf>
            Lfloat r  = f->g/wl;
 80105fa:	eec8 7a00 	vdiv.f32	s15, s16, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80105fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010602:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010606:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801060a:	ee37 7a28 	vadd.f32	s14, s14, s17
 801060e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010612:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010616:	ee30 0a67 	vsub.f32	s0, s0, s15
 801061a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 801061e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8010622:	ee68 7a27 	vmul.f32	s15, s16, s15
 8010626:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801062a:	f007 fff5 	bl	8018618 <sqrtf>
 801062e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010632:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8010636:	edc4 8a07 	vstr	s17, [r4, #28]
 801063a:	ee28 8a00 	vmul.f32	s16, s16, s0
 801063e:	ed84 8a08 	vstr	s16, [r4, #32]
 8010642:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 8010646:	e783      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 8010648:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 801064c:	eeb0 0a68 	vmov.f32	s0, s17
 8010650:	f007 ffe2 	bl	8018618 <sqrtf>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8010654:	f007 ffe0 	bl	8018618 <sqrtf>
 8010658:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801065c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8010660:	edc4 8a07 	vstr	s17, [r4, #28]
 8010664:	edd4 7a05 	vldr	s15, [r4, #20]
 8010668:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801066c:	edc4 8a08 	vstr	s17, [r4, #32]
 8010670:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010674:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8010676:	e76b      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 8010678:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 801067c:	eeb0 0a68 	vmov.f32	s0, s17
 8010680:	f007 ffca 	bl	8018618 <sqrtf>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8010684:	f007 ffc8 	bl	8018618 <sqrtf>
 8010688:	ee28 8a00 	vmul.f32	s16, s16, s0
 801068c:	ed84 8a04 	vstr	s16, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8010690:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010694:	61e3      	str	r3, [r4, #28]
 8010696:	edd4 7a05 	vldr	s15, [r4, #20]
 801069a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801069e:	edc4 7a08 	vstr	s15, [r4, #32]
 80106a2:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 80106a6:	e753      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80106a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80106ac:	61e3      	str	r3, [r4, #28]
 80106ae:	edd4 7a05 	vldr	s15, [r4, #20]
 80106b2:	eef1 7a67 	vneg.f32	s15, s15
 80106b6:	edc4 7a08 	vstr	s15, [r4, #32]
 80106ba:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80106bc:	e748      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
            Lfloat x  = (2.0f*f->m-1.0f);
 80106be:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 80106c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80106c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80106ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80106ce:	eeb1 7a67 	vneg.f32	s14, s15
}


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
 80106d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106da:	d401      	bmi.n	80106e0 <tVZFilter_calcCoeffs+0x1dc>
 80106dc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80107a4 <tVZFilter_calcCoeffs+0x2a0>
 80106e0:	ed84 7a07 	vstr	s14, [r4, #28]
}

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
 80106e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80106e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ec:	d554      	bpl.n	8010798 <tVZFilter_calcCoeffs+0x294>
 80106ee:	eeb0 5a67 	vmov.f32	s10, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80106f2:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 80106f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80106fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80106fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8010702:	ed84 6a08 	vstr	s12, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8010706:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801070a:	edd4 7a05 	vldr	s15, [r4, #20]
 801070e:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8010712:	ee67 7a07 	vmul.f32	s15, s14, s14
 8010716:	ee66 5a06 	vmul.f32	s11, s12, s12
 801071a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801071e:	ee65 5a05 	vmul.f32	s11, s10, s10
 8010722:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010726:	ee77 5a07 	vadd.f32	s11, s14, s14
 801072a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801072e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010732:	eec4 5aa7 	vdiv.f32	s11, s9, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010736:	4b1c      	ldr	r3, [pc, #112]	; (80107a8 <tVZFilter_calcCoeffs+0x2a4>)
 8010738:	ee15 2a90 	vmov	r2, s11
 801073c:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8010740:	ee07 3a90 	vmov	s15, r3
 8010744:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8010748:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801074c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010750:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010754:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8010758:	ee74 5ae5 	vsub.f32	s11, s9, s11
 801075c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010760:	ee17 3a90 	vmov	r3, s15
    z.i = 0x7EEEEEEE - z.i;
 8010764:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8010768:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 801076c:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8010770:	336e      	adds	r3, #110	; 0x6e
 8010772:	ee07 3a90 	vmov	s15, r3
 8010776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801077a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL *= s; f->cB *= s; f->cH *= s;
 801077e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010782:	ed84 7a07 	vstr	s14, [r4, #28]
 8010786:	ee26 6a27 	vmul.f32	s12, s12, s15
 801078a:	ed84 6a08 	vstr	s12, [r4, #32]
 801078e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010792:	ed84 5a09 	vstr	s10, [r4, #36]	; 0x24
        break;
 8010796:	e6db      	b.n	8010550 <tVZFilter_calcCoeffs+0x4c>
    return (num1 < num2 ) ? num1 : num2;
 8010798:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80107a4 <tVZFilter_calcCoeffs+0x2a0>
 801079c:	e7a9      	b.n	80106f2 <tVZFilter_calcCoeffs+0x1ee>
 801079e:	bf00      	nop
 80107a0:	40490fdb 	.word	0x40490fdb
 80107a4:	00000000 	.word	0x00000000
 80107a8:	5f3759df 	.word	0x5f3759df

080107ac <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, Lfloat freq)
{
 80107ac:	b508      	push	{r3, lr}
    _tVZFilter* f = *vf;
 80107ae:	6803      	ldr	r3, [r0, #0]
    
    f->fc = LEAF_clip(1.0f, freq, 0.5f * f->sampleRate);
 80107b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80107b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80107b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 80107bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	d407      	bmi.n	80107da <tVZFilter_setFreq+0x2e>
    else if (val > max)
 80107ca:	eef4 7ac0 	vcmpe.f32	s15, s0
 80107ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d2:	d504      	bpl.n	80107de <tVZFilter_setFreq+0x32>
        return max;
 80107d4:	eeb0 0a67 	vmov.f32	s0, s15
 80107d8:	e001      	b.n	80107de <tVZFilter_setFreq+0x32>
        return min;
 80107da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80107de:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    tVZFilter_calcCoeffs(vf);
 80107e2:	f7ff fe8f 	bl	8010504 <tVZFilter_calcCoeffs>
}
 80107e6:	bd08      	pop	{r3, pc}

080107e8 <tVZFilter_setFrequencyAndResonance>:
    tVZFilter_calcCoeffs(vf);
}


void tVZFilter_setFrequencyAndResonance (tVZFilter* const vf, Lfloat freq, Lfloat res)
{
 80107e8:	b508      	push	{r3, lr}
    _tVZFilter* f = *vf;
 80107ea:	6803      	ldr	r3, [r0, #0]
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 80107ec:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80107f0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801085c <tVZFilter_setFrequencyAndResonance+0x74>
 80107f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 80107f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010860 <tVZFilter_setFrequencyAndResonance+0x78>
 80107fc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010804:	d407      	bmi.n	8010816 <tVZFilter_setFrequencyAndResonance+0x2e>
    else if (val > max)
 8010806:	eef4 7ac0 	vcmpe.f32	s15, s0
 801080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080e:	d504      	bpl.n	801081a <tVZFilter_setFrequencyAndResonance+0x32>
        return max;
 8010810:	eeb0 0a67 	vmov.f32	s0, s15
 8010814:	e001      	b.n	801081a <tVZFilter_setFrequencyAndResonance+0x32>
        return min;
 8010816:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8010860 <tVZFilter_setFrequencyAndResonance+0x78>
 801081a:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    if (val < min)
 801081e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8010864 <tVZFilter_setFrequencyAndResonance+0x7c>
 8010822:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082a:	d409      	bmi.n	8010840 <tVZFilter_setFrequencyAndResonance+0x58>
    else if (val > max)
 801082c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8010868 <tVZFilter_setFrequencyAndResonance+0x80>
 8010830:	eef4 0ae7 	vcmpe.f32	s1, s15
 8010834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010838:	dd04      	ble.n	8010844 <tVZFilter_setFrequencyAndResonance+0x5c>
        return max;
 801083a:	eef0 0a67 	vmov.f32	s1, s15
 801083e:	e001      	b.n	8010844 <tVZFilter_setFrequencyAndResonance+0x5c>
        return min;
 8010840:	eddf 0a08 	vldr	s1, [pc, #32]	; 8010864 <tVZFilter_setFrequencyAndResonance+0x7c>
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8010844:	edc3 0a0d 	vstr	s1, [r3, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 8010848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801084c:	eec7 7a20 	vdiv.f32	s15, s14, s1
 8010850:	edc3 7a05 	vstr	s15, [r3, #20]
    tVZFilter_calcCoeffs(vf);
 8010854:	f7ff fe56 	bl	8010504 <tVZFilter_calcCoeffs>
}
 8010858:	bd08      	pop	{r3, pc}
 801085a:	bf00      	nop
 801085c:	3ecccccd 	.word	0x3ecccccd
 8010860:	3dcccccd 	.word	0x3dcccccd
 8010864:	3c23d70a 	.word	0x3c23d70a
 8010868:	42c80000 	.word	0x42c80000

0801086c <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
 801086c:	b510      	push	{r4, lr}
 801086e:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 8010872:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8010874:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 8010878:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801087c:	ee60 0a60 	vnmul.f32	s1, s0, s1
 8010880:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010884:	f007 fcf4 	bl	8018270 <powf>
 8010888:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801088c:	eddf 7a11 	vldr	s15, [pc, #68]	; 80108d4 <tVZFilter_BandwidthToR+0x68>
 8010890:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010894:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 8010898:	ee28 0a00 	vmul.f32	s0, s16, s0
 801089c:	f007 fee8 	bl	8018670 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80108a0:	edd4 7a04 	vldr	s15, [r4, #16]
 80108a4:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80108a8:	ee67 7a07 	vmul.f32	s15, s14, s14
 80108ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80108b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80108b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80108b8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80108bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108c4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80108c8:	f007 fea6 	bl	8018618 <sqrtf>
}
 80108cc:	ecbd 8b02 	vpop	{d8}
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	bf00      	nop
 80108d4:	40490fdb 	.word	0x40490fdb

080108d8 <tVZFilter_setBandwidth>:
{
 80108d8:	b538      	push	{r3, r4, r5, lr}
 80108da:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80108dc:	6805      	ldr	r5, [r0, #0]
    if (val < min)
 80108de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80108e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e6:	d409      	bmi.n	80108fc <tVZFilter_setBandwidth+0x24>
    else if (val > max)
 80108e8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801091c <tVZFilter_setBandwidth+0x44>
 80108ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80108f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f4:	dd04      	ble.n	8010900 <tVZFilter_setBandwidth+0x28>
        return max;
 80108f6:	eeb0 0a67 	vmov.f32	s0, s15
 80108fa:	e001      	b.n	8010900 <tVZFilter_setBandwidth+0x28>
        return min;
 80108fc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010920 <tVZFilter_setBandwidth+0x48>
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8010900:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8010904:	4620      	mov	r0, r4
 8010906:	f7ff ffb1 	bl	801086c <tVZFilter_BandwidthToR>
 801090a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801090e:	ed85 0a05 	vstr	s0, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 8010912:	4620      	mov	r0, r4
 8010914:	f7ff fdf6 	bl	8010504 <tVZFilter_calcCoeffs>
}
 8010918:	bd38      	pop	{r3, r4, r5, pc}
 801091a:	bf00      	nop
 801091c:	42c80000 	.word	0x42c80000
 8010920:	00000000 	.word	0x00000000

08010924 <tVZFilter_initToPool>:
{
 8010924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010926:	ed2d 8b02 	vpush	{d8}
 801092a:	4605      	mov	r5, r0
 801092c:	460f      	mov	r7, r1
 801092e:	eeb0 8a40 	vmov.f32	s16, s0
 8010932:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 8010936:	6816      	ldr	r6, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8010938:	4631      	mov	r1, r6
 801093a:	2058      	movs	r0, #88	; 0x58
 801093c:	f002 f9b6 	bl	8012cac <mpool_alloc>
 8010940:	4604      	mov	r4, r0
 8010942:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8010944:	6006      	str	r6, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8010946:	6876      	ldr	r6, [r6, #4]
    f->sampleRate = leaf->sampleRate;
 8010948:	edd6 7a00 	vldr	s15, [r6]
 801094c:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 8010950:	6873      	ldr	r3, [r6, #4]
 8010952:	6483      	str	r3, [r0, #72]	; 0x48
    f->sampRatio = 48000.0f / f->sampleRate;
 8010954:	eddf 6a36 	vldr	s13, [pc, #216]	; 8010a30 <tVZFilter_initToPool+0x10c>
 8010958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801095c:	ed80 7a13 	vstr	s14, [r0, #76]	; 0x4c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8010960:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010964:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 8010968:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010970:	d407      	bmi.n	8010982 <tVZFilter_initToPool+0x5e>
    else if (val > max)
 8010972:	eef4 7ac8 	vcmpe.f32	s15, s16
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	d504      	bpl.n	8010986 <tVZFilter_initToPool+0x62>
        return max;
 801097c:	eeb0 8a67 	vmov.f32	s16, s15
 8010980:	e001      	b.n	8010986 <tVZFilter_initToPool+0x62>
        return min;
 8010982:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8010a34 <tVZFilter_initToPool+0x110>
 8010986:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 801098a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801098e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010992:	dc3f      	bgt.n	8010a14 <tVZFilter_initToPool+0xf0>
 8010994:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8010a38 <tVZFilter_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
 8010998:	ed84 0a14 	vstr	s0, [r4, #80]	; 0x50
    f->type = type;
 801099c:	7127      	strb	r7, [r4, #4]
    f->G    = INV_SQRT2;
 801099e:	4b27      	ldr	r3, [pc, #156]	; (8010a3c <tVZFilter_initToPool+0x118>)
 80109a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.414213562373095f;
 80109a2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8010a40 <tVZFilter_initToPool+0x11c>
 80109a6:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
 80109aa:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 80109ae:	2300      	movs	r3, #0
 80109b0:	63e3      	str	r3, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 80109b2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80109b6:	6362      	str	r2, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 80109b8:	60a3      	str	r3, [r4, #8]
    f->s2   = 0.0f;
 80109ba:	60e3      	str	r3, [r4, #12]
    f->R2   = f->invG;
 80109bc:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 80109c0:	edd4 7a04 	vldr	s15, [r4, #16]
 80109c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109c8:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80109cc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80109d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010a44 <tVZFilter_initToPool+0x120>
 80109d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109d8:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 80109dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80109e0:	f007 fe46 	bl	8018670 <tanf>
 80109e4:	ed84 0a04 	vstr	s0, [r4, #16]
    tVZFilter_setBandwidth(vf,f->B);
 80109e8:	eeb0 0a68 	vmov.f32	s0, s17
 80109ec:	4628      	mov	r0, r5
 80109ee:	f7ff ff73 	bl	80108d8 <tVZFilter_setBandwidth>
    tVZFilter_calcCoeffs(vf);
 80109f2:	4628      	mov	r0, r5
 80109f4:	f7ff fd86 	bl	8010504 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 80000)
 80109f8:	ed96 7a00 	vldr	s14, [r6]
 80109fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010a48 <tVZFilter_initToPool+0x124>
 8010a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a08:	dd0f      	ble.n	8010a2a <tVZFilter_initToPool+0x106>
    	f->table = __filterTanhTable_96000;
 8010a0a:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <tVZFilter_initToPool+0x128>)
 8010a0c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8010a0e:	ecbd 8b02 	vpop	{d8}
 8010a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a14:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010a50 <tVZFilter_initToPool+0x12c>
 8010a18:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010a1c:	f007 fa22 	bl	8017e64 <logf>
 8010a20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8010a54 <tVZFilter_initToPool+0x130>
 8010a24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a28:	e7b6      	b.n	8010998 <tVZFilter_initToPool+0x74>
    	f->table = __filterTanhTable_48000;
 8010a2a:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <tVZFilter_initToPool+0x134>)
 8010a2c:	6563      	str	r3, [r4, #84]	; 0x54
}
 8010a2e:	e7ee      	b.n	8010a0e <tVZFilter_initToPool+0xea>
 8010a30:	473b8000 	.word	0x473b8000
 8010a34:	00000000 	.word	0x00000000
 8010a38:	c4bb8000 	.word	0xc4bb8000
 8010a3c:	3f3504f3 	.word	0x3f3504f3
 8010a40:	3fb504f3 	.word	0x3fb504f3
 8010a44:	40490fdb 	.word	0x40490fdb
 8010a48:	479c4000 	.word	0x479c4000
 8010a4c:	0801f14c 	.word	0x0801f14c
 8010a50:	3dfa7ed2 	.word	0x3dfa7ed2
 8010a54:	418a7fac 	.word	0x418a7fac
 8010a58:	0801b14c 	.word	0x0801b14c

08010a5c <tVZFilter_init>:
{
 8010a5c:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8010a5e:	3218      	adds	r2, #24
 8010a60:	f7ff ff60 	bl	8010924 <tVZFilter_initToPool>
}
 8010a64:	bd08      	pop	{r3, pc}
	...

08010a68 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8010a68:	b570      	push	{r4, r5, r6, lr}
 8010a6a:	ed2d 8b04 	vpush	{d8-d9}
 8010a6e:	4606      	mov	r6, r0
 8010a70:	eef0 8a40 	vmov.f32	s17, s0
 8010a74:	eeb0 9a60 	vmov.f32	s18, s1
 8010a78:	eeb0 8a41 	vmov.f32	s16, s2
    _tMempool* m = *mp;
 8010a7c:	680d      	ldr	r5, [r1, #0]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8010a7e:	4629      	mov	r1, r5
 8010a80:	2048      	movs	r0, #72	; 0x48
 8010a82:	f002 f913 	bl	8012cac <mpool_alloc>
 8010a86:	4604      	mov	r4, r0
 8010a88:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8010a8a:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010a8c:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 8010a8e:	edd5 7a00 	vldr	s15, [r5]
 8010a92:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8010a96:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8010c08 <tVZFilterLS_initToPool+0x1a0>
 8010a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a9e:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 8010aa2:	686b      	ldr	r3, [r5, #4]
 8010aa4:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8010aa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 8010aae:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab6:	d407      	bmi.n	8010ac8 <tVZFilterLS_initToPool+0x60>
    else if (val > max)
 8010ab8:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac0:	d504      	bpl.n	8010acc <tVZFilterLS_initToPool+0x64>
        return max;
 8010ac2:	eef0 8a67 	vmov.f32	s17, s15
 8010ac6:	e001      	b.n	8010acc <tVZFilterLS_initToPool+0x64>
        return min;
 8010ac8:	eddf 8a50 	vldr	s17, [pc, #320]	; 8010c0c <tVZFilterLS_initToPool+0x1a4>
 8010acc:	edc4 8a06 	vstr	s17, [r4, #24]
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8010ad0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad8:	dc2d      	bgt.n	8010b36 <tVZFilterLS_initToPool+0xce>
 8010ada:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010c10 <tVZFilterLS_initToPool+0x1a8>
    f->cutoffMIDI = ftom(f->fc);
 8010ade:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 8010ae2:	ed84 9a08 	vstr	s18, [r4, #32]
    f->R2 =    1.0f/Q;
 8010ae6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010aea:	eec7 8a89 	vdiv.f32	s17, s15, s18
 8010aee:	edc4 8a04 	vstr	s17, [r4, #16]
    f->s1    = 0.0f;
 8010af2:	2300      	movs	r3, #0
 8010af4:	6063      	str	r3, [r4, #4]
    f->s2   = 0.0f;
 8010af6:	60a3      	str	r3, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010af8:	edd4 7a06 	vldr	s15, [r4, #24]
 8010afc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8010c14 <tVZFilterLS_initToPool+0x1ac>
 8010b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b04:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8010b08:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010b0c:	f007 fdb0 	bl	8018670 <tanf>
 8010b10:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    if (val < min)
 8010b14:	eddf 7a40 	vldr	s15, [pc, #256]	; 8010c18 <tVZFilterLS_initToPool+0x1b0>
 8010b18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b20:	d414      	bmi.n	8010b4c <tVZFilterLS_initToPool+0xe4>
    else if (val > max)
 8010b22:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8010c1c <tVZFilterLS_initToPool+0x1b4>
 8010b26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	dd0f      	ble.n	8010b50 <tVZFilterLS_initToPool+0xe8>
        return max;
 8010b30:	eeb0 8a67 	vmov.f32	s16, s15
 8010b34:	e00c      	b.n	8010b50 <tVZFilterLS_initToPool+0xe8>
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8010b36:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8010c20 <tVZFilterLS_initToPool+0x1b8>
 8010b3a:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010b3e:	f007 f991 	bl	8017e64 <logf>
 8010b42:	eddf 7a38 	vldr	s15, [pc, #224]	; 8010c24 <tVZFilterLS_initToPool+0x1bc>
 8010b46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010b4a:	e7c8      	b.n	8010ade <tVZFilterLS_initToPool+0x76>
        return min;
 8010b4c:	ed9f 8a32 	vldr	s16, [pc, #200]	; 8010c18 <tVZFilterLS_initToPool+0x1b0>
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010b50:	ed84 8a07 	vstr	s16, [r4, #28]
    z.i  = 0x5f3759df - (z.i >> 1);
 8010b54:	4b34      	ldr	r3, [pc, #208]	; (8010c28 <tVZFilterLS_initToPool+0x1c0>)
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010b56:	ee18 2a10 	vmov	r2, s16
 8010b5a:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
 8010b5e:	ee07 2a90 	vmov	s15, r2
 8010b62:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010b66:	ee28 8a06 	vmul.f32	s16, s16, s12
 8010b6a:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010b6e:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010b72:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010b76:	ee36 8ac8 	vsub.f32	s16, s13, s16
 8010b7a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010b7e:	ee17 2a90 	vmov	r2, s15
    z.i = 0x7EEEEEEE - z.i;
 8010b82:	492a      	ldr	r1, [pc, #168]	; (8010c2c <tVZFilterLS_initToPool+0x1c4>)
 8010b84:	1a8a      	subs	r2, r1, r2
    return z.f;
 8010b86:	ee07 2a10 	vmov	s14, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010b8a:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8010b8e:	ee07 3a90 	vmov	s15, r3
 8010b92:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010b9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
    z.i = 0x7EEEEEEE - z.i;
 8010ba6:	ee17 3a90 	vmov	r3, s15
 8010baa:	1ac9      	subs	r1, r1, r3
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8010bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bb0:	ee07 1a10 	vmov	s14, r1
 8010bb4:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8010bb8:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8010bbc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010bc0:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 8010bc4:	ee38 7a80 	vadd.f32	s14, s17, s0
 8010bc8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010bcc:	ee68 8a80 	vmul.f32	s17, s17, s0
 8010bd0:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8010bd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010bd8:	ee78 8a80 	vadd.f32	s17, s17, s0
 8010bdc:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8010be0:	ed84 7a05 	vstr	s14, [r4, #20]
    if (leaf->sampleRate > 80000)
 8010be4:	ed95 7a00 	vldr	s14, [r5]
 8010be8:	eddf 7a11 	vldr	s15, [pc, #68]	; 8010c30 <tVZFilterLS_initToPool+0x1c8>
 8010bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf4:	dd04      	ble.n	8010c00 <tVZFilterLS_initToPool+0x198>
    {
    	f->table = __filterTanhTable_96000;
 8010bf6:	4b0f      	ldr	r3, [pc, #60]	; (8010c34 <tVZFilterLS_initToPool+0x1cc>)
 8010bf8:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8010bfa:	ecbd 8b04 	vpop	{d8-d9}
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 8010c00:	4b0d      	ldr	r3, [pc, #52]	; (8010c38 <tVZFilterLS_initToPool+0x1d0>)
 8010c02:	6423      	str	r3, [r4, #64]	; 0x40
}
 8010c04:	e7f9      	b.n	8010bfa <tVZFilterLS_initToPool+0x192>
 8010c06:	bf00      	nop
 8010c08:	473b8000 	.word	0x473b8000
 8010c0c:	00000000 	.word	0x00000000
 8010c10:	c4bb8000 	.word	0xc4bb8000
 8010c14:	40490fdb 	.word	0x40490fdb
 8010c18:	358637bd 	.word	0x358637bd
 8010c1c:	457a0000 	.word	0x457a0000
 8010c20:	3dfa7ed2 	.word	0x3dfa7ed2
 8010c24:	418a7fac 	.word	0x418a7fac
 8010c28:	5f3759df 	.word	0x5f3759df
 8010c2c:	7eeeeeee 	.word	0x7eeeeeee
 8010c30:	479c4000 	.word	0x479c4000
 8010c34:	0801f14c 	.word	0x0801f14c
 8010c38:	0801b14c 	.word	0x0801b14c

08010c3c <tVZFilterLS_init>:
{
 8010c3c:	b508      	push	{r3, lr}
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8010c3e:	3118      	adds	r1, #24
 8010c40:	f7ff ff12 	bl	8010a68 <tVZFilterLS_initToPool>
}
 8010c44:	bd08      	pop	{r3, pc}
	...

08010c48 <tVZFilterLS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
 8010c48:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 8010c4a:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 8010c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c56:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8010c5a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010c80 <tVZFilterLS_setSampleRate+0x38>
 8010c5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010c62:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 80000)
 8010c66:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010c84 <tVZFilterLS_setSampleRate+0x3c>
 8010c6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c72:	dd02      	ble.n	8010c7a <tVZFilterLS_setSampleRate+0x32>
       {
       	f->table = __filterTanhTable_96000;
 8010c74:	4a04      	ldr	r2, [pc, #16]	; (8010c88 <tVZFilterLS_setSampleRate+0x40>)
 8010c76:	641a      	str	r2, [r3, #64]	; 0x40
 8010c78:	4770      	bx	lr
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 8010c7a:	4a04      	ldr	r2, [pc, #16]	; (8010c8c <tVZFilterLS_setSampleRate+0x44>)
 8010c7c:	641a      	str	r2, [r3, #64]	; 0x40
       }
}
 8010c7e:	4770      	bx	lr
 8010c80:	473b8000 	.word	0x473b8000
 8010c84:	479c4000 	.word	0x479c4000
 8010c88:	0801f14c 	.word	0x0801f14c
 8010c8c:	0801b14c 	.word	0x0801b14c

08010c90 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 8010c90:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8010c92:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010c96:	edd3 6a01 	vldr	s13, [r3, #4]
 8010c9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010c9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ca2:	edd3 7a02 	vldr	s15, [r3, #8]
 8010ca6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010caa:	ed93 7a05 	vldr	s14, [r3, #20]
 8010cae:	ee20 0a07 	vmul.f32	s0, s0, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8010cb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8010cb6:	ee27 6a00 	vmul.f32	s12, s14, s0
    yB = v1 + f->s1;
 8010cba:	ee76 6a86 	vadd.f32	s13, s13, s12
    f->s1 = v1 + yB; // state update in 1st integrator
 8010cbe:	ee36 6a26 	vadd.f32	s12, s12, s13
 8010cc2:	ed83 6a01 	vstr	s12, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 8010cc6:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 8010cca:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010cd2:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return f->G*yL + f->R2*f->G*yB + yH;
 8010cd6:	ed93 7a07 	vldr	s14, [r3, #28]
 8010cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cde:	ed93 6a04 	vldr	s12, [r3, #16]
 8010ce2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010ce6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010cea:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8010cee:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010cf2:	4770      	bx	lr

08010cf4 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
 8010cf4:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 8010cf6:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 8010cfa:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010d90 <tVZFilterLS_setFreqFast+0x9c>
 8010cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 8010d02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010d06:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 8010d0a:	f640 71fe 	movw	r1, #4094	; 0xffe
 8010d0e:	428a      	cmp	r2, r1
 8010d10:	dc03      	bgt.n	8010d1a <tVZFilterLS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 8010d12:	2a00      	cmp	r2, #0
 8010d14:	da03      	bge.n	8010d1e <tVZFilterLS_setFreqFast+0x2a>
        {
        	intVer = 0;
 8010d16:	2200      	movs	r2, #0
 8010d18:	e001      	b.n	8010d1e <tVZFilterLS_setFreqFast+0x2a>
        	intVer = 4094;
 8010d1a:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010d1e:	ee07 2a90 	vmov	s15, r2
 8010d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010d26:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
 8010d2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8010d2c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8010d30:	edd0 7a00 	vldr	s15, [r0]
 8010d34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d38:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8010d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d40:	3201      	adds	r2, #1
 8010d42:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d46:	ed91 7a00 	vldr	s14, [r1]
 8010d4a:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010d4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d52:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8010d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d5a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8010d5e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8010d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d66:	edc3 7a03 	vstr	s15, [r3, #12]
    f->R2Plusg = f->R2+f->g;
 8010d6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8010d6e:	ee37 6a87 	vadd.f32	s12, s15, s14
 8010d72:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010d7a:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010d7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d8a:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8010d8e:	4770      	bx	lr
 8010d90:	41f4898d 	.word	0x41f4898d

08010d94 <tVZFilterLS_setGain>:
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
        _tVZFilterLS* f = *vf;
 8010d94:	6801      	ldr	r1, [r0, #0]
    if (val < min)
 8010d96:	eddf 7a31 	vldr	s15, [pc, #196]	; 8010e5c <tVZFilterLS_setGain+0xc8>
 8010d9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da2:	d409      	bmi.n	8010db8 <tVZFilterLS_setGain+0x24>
    else if (val > max)
 8010da4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8010e60 <tVZFilterLS_setGain+0xcc>
 8010da8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db0:	dd04      	ble.n	8010dbc <tVZFilterLS_setGain+0x28>
        return max;
 8010db2:	eeb0 0a67 	vmov.f32	s0, s15
 8010db6:	e001      	b.n	8010dbc <tVZFilterLS_setGain+0x28>
        return min;
 8010db8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8010e5c <tVZFilterLS_setGain+0xc8>
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010dbc:	ed81 0a07 	vstr	s0, [r1, #28]
    z.i  = 0x5f3759df - (z.i >> 1);
 8010dc0:	4b28      	ldr	r3, [pc, #160]	; (8010e64 <tVZFilterLS_setGain+0xd0>)
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010dc2:	ee10 2a10 	vmov	r2, s0
 8010dc6:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
 8010dca:	ee07 2a90 	vmov	s15, r2
 8010dce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010dd2:	ee20 0a06 	vmul.f32	s0, s0, s12
 8010dd6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010dda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010dde:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010de2:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8010de6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010dea:	ee17 2a90 	vmov	r2, s15
    z.i = 0x7EEEEEEE - z.i;
 8010dee:	481e      	ldr	r0, [pc, #120]	; (8010e68 <tVZFilterLS_setGain+0xd4>)
 8010df0:	1a82      	subs	r2, r0, r2
    return z.f;
 8010df2:	ee07 2a10 	vmov	s14, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010df6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8010dfa:	ee07 3a90 	vmov	s15, r3
 8010dfe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e0a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    z.i = 0x7EEEEEEE - z.i;
 8010e12:	ee17 3a90 	vmov	r3, s15
 8010e16:	1ac0      	subs	r0, r0, r3
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8010e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e1c:	ee07 0a90 	vmov	s15, r0
 8010e20:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8010e24:	edc1 7a0e 	vstr	s15, [r1, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8010e28:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8010e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e30:	edc1 7a03 	vstr	s15, [r1, #12]
    f->R2Plusg = f->R2+f->g;
 8010e34:	ed91 7a04 	vldr	s14, [r1, #16]
 8010e38:	ee37 6a87 	vadd.f32	s12, s15, s14
 8010e3c:	ed81 6a0a 	vstr	s12, [r1, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010e40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010e44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010e48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e54:	edc1 7a05 	vstr	s15, [r1, #20]
}
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop
 8010e5c:	358637bd 	.word	0x358637bd
 8010e60:	457a0000 	.word	0x457a0000
 8010e64:	5f3759df 	.word	0x5f3759df
 8010e68:	7eeeeeee 	.word	0x7eeeeeee

08010e6c <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
 8010e6c:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 8010e6e:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 8010e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010e7a:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 8010e7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8010e82:	ee37 6a87 	vadd.f32	s12, s15, s14
 8010e86:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e92:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e9e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8010ea2:	4770      	bx	lr

08010ea4 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8010ea4:	b570      	push	{r4, r5, r6, lr}
 8010ea6:	ed2d 8b04 	vpush	{d8-d9}
 8010eaa:	4606      	mov	r6, r0
 8010eac:	eef0 8a40 	vmov.f32	s17, s0
 8010eb0:	eeb0 9a60 	vmov.f32	s18, s1
 8010eb4:	eeb0 8a41 	vmov.f32	s16, s2
    _tMempool* m = *mp;
 8010eb8:	680d      	ldr	r5, [r1, #0]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8010eba:	4629      	mov	r1, r5
 8010ebc:	2048      	movs	r0, #72	; 0x48
 8010ebe:	f001 fef5 	bl	8012cac <mpool_alloc>
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8010ec6:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010ec8:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 8010eca:	edd5 7a00 	vldr	s15, [r5]
 8010ece:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 8010ed2:	686b      	ldr	r3, [r5, #4]
 8010ed4:	6303      	str	r3, [r0, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8010ed6:	eddf 6a59 	vldr	s13, [pc, #356]	; 801103c <tVZFilterHS_initToPool+0x198>
 8010eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ede:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8010ee2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 8010eea:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef2:	d407      	bmi.n	8010f04 <tVZFilterHS_initToPool+0x60>
    else if (val > max)
 8010ef4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efc:	d504      	bpl.n	8010f08 <tVZFilterHS_initToPool+0x64>
        return max;
 8010efe:	eef0 8a67 	vmov.f32	s17, s15
 8010f02:	e001      	b.n	8010f08 <tVZFilterHS_initToPool+0x64>
        return min;
 8010f04:	eddf 8a4e 	vldr	s17, [pc, #312]	; 8011040 <tVZFilterHS_initToPool+0x19c>
 8010f08:	edc4 8a06 	vstr	s17, [r4, #24]
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8010f0c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8010f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f14:	dc2d      	bgt.n	8010f72 <tVZFilterHS_initToPool+0xce>
 8010f16:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8011044 <tVZFilterHS_initToPool+0x1a0>
    f->cutoffMIDI = ftom(f->fc);
 8010f1a:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 8010f1e:	ed84 9a08 	vstr	s18, [r4, #32]
    f->R2 =    1.0f/Q;
 8010f22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f26:	eec7 8a89 	vdiv.f32	s17, s15, s18
 8010f2a:	edc4 8a04 	vstr	s17, [r4, #16]
    f->s1    = 0.0f;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	6063      	str	r3, [r4, #4]
    f->s2   = 0.0f;
 8010f32:	60a3      	str	r3, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010f34:	edd4 7a06 	vldr	s15, [r4, #24]
 8010f38:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011048 <tVZFilterHS_initToPool+0x1a4>
 8010f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f40:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8010f44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010f48:	f007 fb92 	bl	8018670 <tanf>
 8010f4c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    if (val < min)
 8010f50:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801104c <tVZFilterHS_initToPool+0x1a8>
 8010f54:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5c:	d414      	bmi.n	8010f88 <tVZFilterHS_initToPool+0xe4>
    else if (val > max)
 8010f5e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8011050 <tVZFilterHS_initToPool+0x1ac>
 8010f62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	dd0f      	ble.n	8010f8c <tVZFilterHS_initToPool+0xe8>
        return max;
 8010f6c:	eeb0 8a67 	vmov.f32	s16, s15
 8010f70:	e00c      	b.n	8010f8c <tVZFilterHS_initToPool+0xe8>
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8010f72:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8011054 <tVZFilterHS_initToPool+0x1b0>
 8010f76:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010f7a:	f006 ff73 	bl	8017e64 <logf>
 8010f7e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8011058 <tVZFilterHS_initToPool+0x1b4>
 8010f82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f86:	e7c8      	b.n	8010f1a <tVZFilterHS_initToPool+0x76>
        return min;
 8010f88:	ed9f 8a30 	vldr	s16, [pc, #192]	; 801104c <tVZFilterHS_initToPool+0x1a8>
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010f8c:	ed84 8a07 	vstr	s16, [r4, #28]
    z.i  = 0x5f3759df - (z.i >> 1);
 8010f90:	4b32      	ldr	r3, [pc, #200]	; (801105c <tVZFilterHS_initToPool+0x1b8>)
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010f92:	ee18 2a10 	vmov	r2, s16
 8010f96:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
 8010f9a:	ee07 2a90 	vmov	s15, r2
 8010f9e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010fa2:	ee28 8a06 	vmul.f32	s16, s16, s12
 8010fa6:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010faa:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010fae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010fb2:	ee36 8ac8 	vsub.f32	s16, s13, s16
 8010fb6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010fba:	ee17 2a90 	vmov	r2, s15
    z.i = 0x7EEEEEEE - z.i;
 8010fbe:	4928      	ldr	r1, [pc, #160]	; (8011060 <tVZFilterHS_initToPool+0x1bc>)
 8010fc0:	1a8a      	subs	r2, r1, r2
    return z.f;
 8010fc2:	ee07 2a10 	vmov	s14, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8010fc6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8010fca:	ee07 3a90 	vmov	s15, r3
 8010fce:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010fd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010fd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010fda:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010fde:	ee67 7aa6 	vmul.f32	s15, s15, s13
    return z.f;
 8010fe2:	ee17 3a90 	vmov	r3, s15
 8010fe6:	1ac9      	subs	r1, r1, r3
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8010fe8:	63a1      	str	r1, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010fea:	ee07 1a90 	vmov	s15, r1
 8010fee:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010ff2:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 8010ff6:	ee78 7a80 	vadd.f32	s15, s17, s0
 8010ffa:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010ffe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011002:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011006:	ee78 8aa7 	vadd.f32	s17, s17, s15
 801100a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801100e:	ee78 8a80 	vadd.f32	s17, s17, s0
 8011012:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8011016:	ed84 7a05 	vstr	s14, [r4, #20]
    if (leaf->sampleRate > 80000)
 801101a:	ed95 7a00 	vldr	s14, [r5]
 801101e:	eddf 7a11 	vldr	s15, [pc, #68]	; 8011064 <tVZFilterHS_initToPool+0x1c0>
 8011022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102a:	dd04      	ble.n	8011036 <tVZFilterHS_initToPool+0x192>
    {
    	f->table = __filterTanhTable_96000;
 801102c:	4b0e      	ldr	r3, [pc, #56]	; (8011068 <tVZFilterHS_initToPool+0x1c4>)
 801102e:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8011030:	ecbd 8b04 	vpop	{d8-d9}
 8011034:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 8011036:	4b0d      	ldr	r3, [pc, #52]	; (801106c <tVZFilterHS_initToPool+0x1c8>)
 8011038:	6423      	str	r3, [r4, #64]	; 0x40
}
 801103a:	e7f9      	b.n	8011030 <tVZFilterHS_initToPool+0x18c>
 801103c:	473b8000 	.word	0x473b8000
 8011040:	00000000 	.word	0x00000000
 8011044:	c4bb8000 	.word	0xc4bb8000
 8011048:	40490fdb 	.word	0x40490fdb
 801104c:	358637bd 	.word	0x358637bd
 8011050:	457a0000 	.word	0x457a0000
 8011054:	3dfa7ed2 	.word	0x3dfa7ed2
 8011058:	418a7fac 	.word	0x418a7fac
 801105c:	5f3759df 	.word	0x5f3759df
 8011060:	7eeeeeee 	.word	0x7eeeeeee
 8011064:	479c4000 	.word	0x479c4000
 8011068:	0801f14c 	.word	0x0801f14c
 801106c:	0801b14c 	.word	0x0801b14c

08011070 <tVZFilterHS_init>:
{
 8011070:	b508      	push	{r3, lr}
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8011072:	3118      	adds	r1, #24
 8011074:	f7ff ff16 	bl	8010ea4 <tVZFilterHS_initToPool>
}
 8011078:	bd08      	pop	{r3, pc}
	...

0801107c <tVZFilterHS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
 801107c:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 801107e:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 8011082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011086:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801108a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 801108e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80110b4 <tVZFilterHS_setSampleRate+0x38>
 8011092:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011096:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 80000)
 801109a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80110b8 <tVZFilterHS_setSampleRate+0x3c>
 801109e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80110a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a6:	dd02      	ble.n	80110ae <tVZFilterHS_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 80110a8:	4a04      	ldr	r2, [pc, #16]	; (80110bc <tVZFilterHS_setSampleRate+0x40>)
 80110aa:	641a      	str	r2, [r3, #64]	; 0x40
 80110ac:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 80110ae:	4a04      	ldr	r2, [pc, #16]	; (80110c0 <tVZFilterHS_setSampleRate+0x44>)
 80110b0:	641a      	str	r2, [r3, #64]	; 0x40
          }
}
 80110b2:	4770      	bx	lr
 80110b4:	473b8000 	.word	0x473b8000
 80110b8:	479c4000 	.word	0x479c4000
 80110bc:	0801f14c 	.word	0x0801f14c
 80110c0:	0801b14c 	.word	0x0801b14c

080110c4 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 80110c4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80110c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80110ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80110ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80110d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80110d6:	ed93 6a02 	vldr	s12, [r3, #8]
 80110da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80110de:	ed93 7a05 	vldr	s14, [r3, #20]
 80110e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80110e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80110ea:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 80110ee:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 80110f2:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80110f6:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 80110fa:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 80110fe:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011102:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011106:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + f->G*yH;
 801110a:	ed93 7a04 	vldr	s14, [r3, #16]
 801110e:	ed93 0a07 	vldr	s0, [r3, #28]
 8011112:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011116:	ee27 7a26 	vmul.f32	s14, s14, s13
 801111a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801111e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011122:	ee37 0a00 	vadd.f32	s0, s14, s0
 8011126:	4770      	bx	lr

08011128 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
 8011128:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 801112a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 801112e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80111c4 <tVZFilterHS_setFreqFast+0x9c>
 8011132:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 8011136:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801113a:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 801113e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8011142:	428a      	cmp	r2, r1
 8011144:	dc03      	bgt.n	801114e <tVZFilterHS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 8011146:	2a00      	cmp	r2, #0
 8011148:	da03      	bge.n	8011152 <tVZFilterHS_setFreqFast+0x2a>
        {
        	intVer = 0;
 801114a:	2200      	movs	r2, #0
 801114c:	e001      	b.n	8011152 <tVZFilterHS_setFreqFast+0x2a>
        	intVer = 4094;
 801114e:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011152:	ee07 2a90 	vmov	s15, r2
 8011156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801115a:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
 801115e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011160:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8011164:	edd0 7a00 	vldr	s15, [r0]
 8011168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801116c:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8011170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011174:	3201      	adds	r2, #1
 8011176:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801117a:	ed91 7a00 	vldr	s14, [r1]
 801117e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011182:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011186:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 801118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801118e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8011192:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011196:	ee67 7a87 	vmul.f32	s15, s15, s14
 801119a:	edc3 7a03 	vstr	s15, [r3, #12]
    
    f->R2Plusg = f->R2+f->g;
 801119e:	ed93 7a04 	vldr	s14, [r3, #16]
 80111a2:	ee37 6a87 	vadd.f32	s12, s15, s14
 80111a6:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80111aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80111ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 80111b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80111b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111be:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80111c2:	4770      	bx	lr
 80111c4:	41f4898d 	.word	0x41f4898d

080111c8 <tVZFilterHS_setGain>:
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
        _tVZFilterHS* f = *vf;
 80111c8:	6801      	ldr	r1, [r0, #0]
    if (val < min)
 80111ca:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8011288 <tVZFilterHS_setGain+0xc0>
 80111ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80111d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d6:	d409      	bmi.n	80111ec <tVZFilterHS_setGain+0x24>
    else if (val > max)
 80111d8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801128c <tVZFilterHS_setGain+0xc4>
 80111dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	dd04      	ble.n	80111f0 <tVZFilterHS_setGain+0x28>
        return max;
 80111e6:	eeb0 0a67 	vmov.f32	s0, s15
 80111ea:	e001      	b.n	80111f0 <tVZFilterHS_setGain+0x28>
        return min;
 80111ec:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8011288 <tVZFilterHS_setGain+0xc0>
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80111f0:	ed81 0a07 	vstr	s0, [r1, #28]
    z.i  = 0x5f3759df - (z.i >> 1);
 80111f4:	4b26      	ldr	r3, [pc, #152]	; (8011290 <tVZFilterHS_setGain+0xc8>)
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80111f6:	ee10 2a10 	vmov	r2, s0
 80111fa:	eba3 0252 	sub.w	r2, r3, r2, lsr #1
 80111fe:	ee07 2a90 	vmov	s15, r2
 8011202:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011206:	ee20 0a06 	vmul.f32	s0, s0, s12
 801120a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801120e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011212:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8011216:	ee36 0ac0 	vsub.f32	s0, s13, s0
 801121a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801121e:	ee17 2a90 	vmov	r2, s15
    z.i = 0x7EEEEEEE - z.i;
 8011222:	481c      	ldr	r0, [pc, #112]	; (8011294 <tVZFilterHS_setGain+0xcc>)
 8011224:	1a82      	subs	r2, r0, r2
    return z.f;
 8011226:	ee07 2a10 	vmov	s14, r2
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 801122a:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 801122e:	ee07 3a90 	vmov	s15, r3
 8011232:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011236:	ee27 7a87 	vmul.f32	s14, s15, s14
 801123a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801123e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011242:	ee67 7aa6 	vmul.f32	s15, s15, s13
    return z.f;
 8011246:	ee17 3a90 	vmov	r3, s15
 801124a:	1ac0      	subs	r0, r0, r3
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 801124c:	6388      	str	r0, [r1, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801124e:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8011252:	ee07 0a10 	vmov	s14, r0
 8011256:	ee67 7a87 	vmul.f32	s15, s15, s14
 801125a:	edc1 7a03 	vstr	s15, [r1, #12]
    f->R2Plusg = f->R2+f->g;
 801125e:	ed91 7a04 	vldr	s14, [r1, #16]
 8011262:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011266:	edc1 6a0a 	vstr	s13, [r1, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801126a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801126e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011272:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011276:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801127a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801127e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011282:	edc1 7a05 	vstr	s15, [r1, #20]
}
 8011286:	4770      	bx	lr
 8011288:	358637bd 	.word	0x358637bd
 801128c:	457a0000 	.word	0x457a0000
 8011290:	5f3759df 	.word	0x5f3759df
 8011294:	7eeeeeee 	.word	0x7eeeeeee

08011298 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
 8011298:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 801129a:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 801129e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112a2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80112a6:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 80112aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80112ae:	ee37 6a87 	vadd.f32	s12, s15, s14
 80112b2:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80112b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80112ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112be:	ee27 7a07 	vmul.f32	s14, s14, s14
 80112c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80112c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112ca:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80112ce:	4770      	bx	lr

080112d0 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 80112d0:	b570      	push	{r4, r5, r6, lr}
 80112d2:	ed2d 8b04 	vpush	{d8-d9}
 80112d6:	4606      	mov	r6, r0
 80112d8:	eeb0 9a40 	vmov.f32	s18, s0
 80112dc:	eeb0 8a60 	vmov.f32	s16, s1
 80112e0:	eef0 8a41 	vmov.f32	s17, s2
    _tMempool* m = *mp;
 80112e4:	680d      	ldr	r5, [r1, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 80112e6:	4629      	mov	r1, r5
 80112e8:	2040      	movs	r0, #64	; 0x40
 80112ea:	f001 fcdf 	bl	8012cac <mpool_alloc>
 80112ee:	4604      	mov	r4, r0
 80112f0:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 80112f2:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 80112f4:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 80112f6:	edd5 7a00 	vldr	s15, [r5]
 80112fa:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 80112fe:	686b      	ldr	r3, [r5, #4]
 8011300:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8011302:	eddf 6a6b 	vldr	s13, [pc, #428]	; 80114b0 <tVZFilterBell_initToPool+0x1e0>
 8011306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801130a:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801130e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011312:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 8011316:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	d407      	bmi.n	8011330 <tVZFilterBell_initToPool+0x60>
    else if (val > max)
 8011320:	eef4 7ac9 	vcmpe.f32	s15, s18
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	d404      	bmi.n	8011334 <tVZFilterBell_initToPool+0x64>
        return val;
 801132a:	eef0 7a49 	vmov.f32	s15, s18
 801132e:	e001      	b.n	8011334 <tVZFilterBell_initToPool+0x64>
        return min;
 8011330:	eddf 7a60 	vldr	s15, [pc, #384]	; 80114b4 <tVZFilterBell_initToPool+0x1e4>
 8011334:	edc4 7a06 	vstr	s15, [r4, #24]
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011340:	dc19      	bgt.n	8011376 <tVZFilterBell_initToPool+0xa6>
 8011342:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80114b8 <tVZFilterBell_initToPool+0x1e8>
    f->cutoffMIDI = ftom(f->fc);
 8011346:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->B = BW;
 801134a:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 801134e:	2300      	movs	r3, #0
 8011350:	6063      	str	r3, [r4, #4]
    f->s2   = 0.0f;
 8011352:	60a3      	str	r3, [r4, #8]
    if (val < min)
 8011354:	eddf 7a59 	vldr	s15, [pc, #356]	; 80114bc <tVZFilterBell_initToPool+0x1ec>
 8011358:	eef4 8ae7 	vcmpe.f32	s17, s15
 801135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011360:	d414      	bmi.n	801138c <tVZFilterBell_initToPool+0xbc>
    else if (val > max)
 8011362:	eddf 7a57 	vldr	s15, [pc, #348]	; 80114c0 <tVZFilterBell_initToPool+0x1f0>
 8011366:	eef4 8ae7 	vcmpe.f32	s17, s15
 801136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136e:	dd0f      	ble.n	8011390 <tVZFilterBell_initToPool+0xc0>
        return max;
 8011370:	eef0 8a67 	vmov.f32	s17, s15
 8011374:	e00c      	b.n	8011390 <tVZFilterBell_initToPool+0xc0>
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011376:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80114c4 <tVZFilterBell_initToPool+0x1f4>
 801137a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801137e:	f006 fd71 	bl	8017e64 <logf>
 8011382:	eddf 7a51 	vldr	s15, [pc, #324]	; 80114c8 <tVZFilterBell_initToPool+0x1f8>
 8011386:	ee20 0a27 	vmul.f32	s0, s0, s15
 801138a:	e7dc      	b.n	8011346 <tVZFilterBell_initToPool+0x76>
        return min;
 801138c:	eddf 8a4b 	vldr	s17, [pc, #300]	; 80114bc <tVZFilterBell_initToPool+0x1ec>
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011390:	edc4 8a07 	vstr	s17, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 8011394:	eddf 9a4d 	vldr	s19, [pc, #308]	; 80114cc <tVZFilterBell_initToPool+0x1fc>
 8011398:	ee29 0a29 	vmul.f32	s0, s18, s19
 801139c:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
 80113a0:	ee20 0a09 	vmul.f32	s0, s0, s18
 80113a4:	f007 f964 	bl	8018670 <tanf>
 80113a8:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80113ac:	edd4 7a06 	vldr	s15, [r4, #24]
 80113b0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80113b4:	ee28 8a65 	vnmul.f32	s16, s16, s11
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 80113b8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80114d0 <tVZFilterBell_initToPool+0x200>
 80113bc:	ee28 8a07 	vmul.f32	s16, s16, s14
 80113c0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80114d4 <tVZFilterBell_initToPool+0x204>
 80113c4:	ee38 8a07 	vadd.f32	s16, s16, s14
 80113c8:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 80113cc:	ee67 7a88 	vmul.f32	s15, s15, s16
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80113d0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80113d4:	ee29 7a27 	vmul.f32	s14, s18, s15
    Lfloat fASqr = fAngle*fAngle;
 80113d8:	ee67 6a07 	vmul.f32	s13, s14, s14
    fResult *= fASqr;
 80113dc:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80114d8 <tVZFilterBell_initToPool+0x208>
 80113e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    fResult += 3.1755e-01f;
 80113e4:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 80114dc <tVZFilterBell_initToPool+0x20c>
 80113e8:	ee77 7a86 	vadd.f32	s15, s15, s12
    fResult *= fASqr;
 80113ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
    fResult += 1.0f;
 80113f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80113f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    fResult *= fAngle;
 80113f8:	ee27 7a27 	vmul.f32	s14, s14, s15
    Lfloat r  = f->g/wl;
 80113fc:	eec0 7a07 	vdiv.f32	s15, s0, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011400:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 8011404:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011408:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801140c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8011410:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8011414:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011418:	ee77 7a67 	vsub.f32	s15, s14, s15
 801141c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8011420:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011424:	ee87 7aa8 	vdiv.f32	s14, s15, s17
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8011428:	4b2d      	ldr	r3, [pc, #180]	; (80114e0 <tVZFilterBell_initToPool+0x210>)
 801142a:	ee17 2a10 	vmov	r2, s14
 801142e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8011432:	ee07 3a90 	vmov	s15, r3
 8011436:	ee27 7a25 	vmul.f32	s14, s14, s11
 801143a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801143e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011442:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8011446:	ee36 7a47 	vsub.f32	s14, s12, s14
 801144a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801144e:	ee17 3a90 	vmov	r3, s15
 8011452:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8011456:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 801145a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801145e:	336e      	adds	r3, #110	; 0x6e
 8011460:	ee07 3a90 	vmov	s15, r3
 8011464:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011468:	edc4 7a04 	vstr	s15, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 801146c:	ee30 7a27 	vadd.f32	s14, s0, s15
 8011470:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8011474:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801147c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011480:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011484:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011488:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 80000)
 801148c:	ed95 7a00 	vldr	s14, [r5]
 8011490:	eddf 7a14 	vldr	s15, [pc, #80]	; 80114e4 <tVZFilterBell_initToPool+0x214>
 8011494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801149c:	dd04      	ble.n	80114a8 <tVZFilterBell_initToPool+0x1d8>
    {
    	f->table = __filterTanhTable_96000;
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <tVZFilterBell_initToPool+0x218>)
 80114a0:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 80114a2:	ecbd 8b04 	vpop	{d8-d9}
 80114a6:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 80114a8:	4b10      	ldr	r3, [pc, #64]	; (80114ec <tVZFilterBell_initToPool+0x21c>)
 80114aa:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80114ac:	e7f9      	b.n	80114a2 <tVZFilterBell_initToPool+0x1d2>
 80114ae:	bf00      	nop
 80114b0:	473b8000 	.word	0x473b8000
 80114b4:	00000000 	.word	0x00000000
 80114b8:	c4bb8000 	.word	0xc4bb8000
 80114bc:	358637bd 	.word	0x358637bd
 80114c0:	457a0000 	.word	0x457a0000
 80114c4:	3dfa7ed2 	.word	0x3dfa7ed2
 80114c8:	418a7fac 	.word	0x418a7fac
 80114cc:	40490fdb 	.word	0x40490fdb
 80114d0:	4b076c0b 	.word	0x4b076c0b
 80114d4:	4e7de250 	.word	0x4e7de250
 80114d8:	3e502de0 	.word	0x3e502de0
 80114dc:	3ea295ea 	.word	0x3ea295ea
 80114e0:	5f3759df 	.word	0x5f3759df
 80114e4:	479c4000 	.word	0x479c4000
 80114e8:	0801f14c 	.word	0x0801f14c
 80114ec:	0801b14c 	.word	0x0801b14c

080114f0 <tVZFilterBell_init>:
{
 80114f0:	b508      	push	{r3, lr}
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 80114f2:	3118      	adds	r1, #24
 80114f4:	f7ff feec 	bl	80112d0 <tVZFilterBell_initToPool>
}
 80114f8:	bd08      	pop	{r3, pc}
	...

080114fc <tVZFilterBell_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
 80114fc:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 80114fe:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->invSampleRate = 1.0f / sampleRate;
 8011502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011506:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801150a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801150e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011534 <tVZFilterBell_setSampleRate+0x38>
 8011512:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011516:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    if (sampleRate > 80000)
 801151a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011538 <tVZFilterBell_setSampleRate+0x3c>
 801151e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	dd02      	ble.n	801152e <tVZFilterBell_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 8011528:	4a04      	ldr	r2, [pc, #16]	; (801153c <tVZFilterBell_setSampleRate+0x40>)
 801152a:	639a      	str	r2, [r3, #56]	; 0x38
 801152c:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 801152e:	4a04      	ldr	r2, [pc, #16]	; (8011540 <tVZFilterBell_setSampleRate+0x44>)
 8011530:	639a      	str	r2, [r3, #56]	; 0x38
          }
}
 8011532:	4770      	bx	lr
 8011534:	473b8000 	.word	0x473b8000
 8011538:	479c4000 	.word	0x479c4000
 801153c:	0801f14c 	.word	0x0801f14c
 8011540:	0801b14c 	.word	0x0801b14c

08011544 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 8011544:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011546:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801154a:	edd3 6a01 	vldr	s13, [r3, #4]
 801154e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011552:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011556:	ed93 6a02 	vldr	s12, [r3, #8]
 801155a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801155e:	ed93 7a05 	vldr	s14, [r3, #20]
 8011562:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011566:	ed93 7a03 	vldr	s14, [r3, #12]
 801156a:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 801156e:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 8011572:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8011576:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 801157a:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 801157e:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011582:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011586:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + yH;
 801158a:	ed93 0a04 	vldr	s0, [r3, #16]
 801158e:	ed93 7a07 	vldr	s14, [r3, #28]
 8011592:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011596:	ee20 0a26 	vmul.f32	s0, s0, s13
 801159a:	ee30 0a06 	vadd.f32	s0, s0, s12
}
 801159e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115a2:	4770      	bx	lr

080115a4 <tVZFilterBell_setBandwidth>:


//relies on a call to set Freq after
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
    _tVZFilterBell* f = *vf;
 80115a4:	6803      	ldr	r3, [r0, #0]
    f->B = bandWidth;
 80115a6:	ed83 0a08 	vstr	s0, [r3, #32]
    //Lfloat r  = f->g/wl;
    //r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    //f->rToUse = r;
    //f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
}
 80115aa:	4770      	bx	lr

080115ac <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 80115ac:	b510      	push	{r4, lr}
 80115ae:	ed2d 8b04 	vpush	{d8-d9}
 80115b2:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf;
 80115b6:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 80115b8:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 80115bc:	ed9f 9a40 	vldr	s18, [pc, #256]	; 80116c0 <tVZFilterBell_setFreq+0x114>
 80115c0:	ee20 0a09 	vmul.f32	s0, s0, s18
 80115c4:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 80115c8:	ee20 0a28 	vmul.f32	s0, s0, s17
 80115cc:	f007 f850 	bl	8018670 <tanf>
 80115d0:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80115d4:	edd4 7a08 	vldr	s15, [r4, #32]
 80115d8:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80115dc:	ee67 7ac5 	vnmul.f32	s15, s15, s10
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 80115e0:	eddf 6a38 	vldr	s13, [pc, #224]	; 80116c4 <tVZFilterBell_setFreq+0x118>
 80115e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80116c8 <tVZFilterBell_setFreq+0x11c>
 80115ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80115f4:	ee28 8a27 	vmul.f32	s16, s16, s15
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80115f8:	ee28 8a09 	vmul.f32	s16, s16, s18
 80115fc:	ee68 6a88 	vmul.f32	s13, s17, s16
    Lfloat fASqr = fAngle*fAngle;
 8011600:	ee26 6aa6 	vmul.f32	s12, s13, s13
    fResult *= fASqr;
 8011604:	eddf 7a31 	vldr	s15, [pc, #196]	; 80116cc <tVZFilterBell_setFreq+0x120>
 8011608:	ee66 7a27 	vmul.f32	s15, s12, s15
    fResult += 3.1755e-01f;
 801160c:	eddf 5a30 	vldr	s11, [pc, #192]	; 80116d0 <tVZFilterBell_setFreq+0x124>
 8011610:	ee77 7aa5 	vadd.f32	s15, s15, s11
    fResult *= fASqr;
 8011614:	ee67 7a86 	vmul.f32	s15, s15, s12
    fResult += 1.0f;
 8011618:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801161c:	ee77 7a86 	vadd.f32	s15, s15, s12
    fResult *= fAngle;
 8011620:	ee66 6aa7 	vmul.f32	s13, s13, s15
    Lfloat r  = f->g/wl;
 8011624:	eec0 7a26 	vdiv.f32	s15, s0, s13
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011628:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 801162c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011630:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011634:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011638:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 801163c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011640:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8011644:	edd4 7a07 	vldr	s15, [r4, #28]
 8011648:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801164c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011650:	eec5 6aa7 	vdiv.f32	s13, s11, s15
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8011654:	4b1f      	ldr	r3, [pc, #124]	; (80116d4 <tVZFilterBell_setFreq+0x128>)
 8011656:	ee16 2a90 	vmov	r2, s13
 801165a:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 801165e:	ee07 3a90 	vmov	s15, r3
 8011662:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011666:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801166a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801166e:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
 8011672:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011676:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801167a:	ee17 3a90 	vmov	r3, s15
 801167e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8011682:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8011686:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801168a:	336e      	adds	r3, #110	; 0x6e
 801168c:	ee07 3a90 	vmov	s15, r3
 8011690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011694:	edc4 7a04 	vstr	s15, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 8011698:	ee70 6a27 	vadd.f32	s13, s0, s15
 801169c:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80116a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80116a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80116a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80116ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80116b0:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80116b4:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80116b8:	ecbd 8b04 	vpop	{d8-d9}
 80116bc:	bd10      	pop	{r4, pc}
 80116be:	bf00      	nop
 80116c0:	40490fdb 	.word	0x40490fdb
 80116c4:	4b076c0b 	.word	0x4b076c0b
 80116c8:	4e7de250 	.word	0x4e7de250
 80116cc:	3e502de0 	.word	0x3e502de0
 80116d0:	3ea295ea 	.word	0x3ea295ea
 80116d4:	5f3759df 	.word	0x5f3759df

080116d8 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
 80116d8:	6802      	ldr	r2, [r0, #0]
    f->cutoffMIDI = cutoff;
 80116da:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    cutoff *= 30.567164179104478f;
 80116de:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011848 <tVZFilterBell_setFreqFast+0x170>
 80116e2:	ee20 0a27 	vmul.f32	s0, s0, s15
	int32_t intVer = (int32_t)cutoff;
 80116e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80116ea:	ee17 3a90 	vmov	r3, s15
	if (intVer > 4094)
 80116ee:	f640 71fe 	movw	r1, #4094	; 0xffe
 80116f2:	428b      	cmp	r3, r1
 80116f4:	dc03      	bgt.n	80116fe <tVZFilterBell_setFreqFast+0x26>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	da03      	bge.n	8011702 <tVZFilterBell_setFreqFast+0x2a>
	{
		intVer = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	e001      	b.n	8011702 <tVZFilterBell_setFreqFast+0x2a>
		intVer = 4094;
 80116fe:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011702:	ee07 3a90 	vmov	s15, r3
 8011706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801170a:	ee70 7a67 	vsub.f32	s15, s0, s15
	f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
 801170e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8011710:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011714:	ed90 7a00 	vldr	s14, [r0]
 8011718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801171c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011720:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011724:	3301      	adds	r3, #1
 8011726:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801172a:	edd3 6a00 	vldr	s13, [r3]
 801172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011736:	edd2 5a0d 	vldr	s11, [r2, #52]	; 0x34
 801173a:	ee27 7a25 	vmul.f32	s14, s14, s11
 801173e:	ed82 7a03 	vstr	s14, [r2, #12]
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8011742:	edd2 7a08 	vldr	s15, [r2, #32]
 8011746:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 801174a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801174e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011756:	ee77 7a80 	vadd.f32	s15, s15, s0
	intVer = (int32_t)fl;
 801175a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801175e:	ee16 3a90 	vmov	r3, s13
	if (intVer > 4094)
 8011762:	f640 70fe 	movw	r0, #4094	; 0xffe
 8011766:	4283      	cmp	r3, r0
 8011768:	dc03      	bgt.n	8011772 <tVZFilterBell_setFreqFast+0x9a>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 801176a:	2b00      	cmp	r3, #0
 801176c:	da03      	bge.n	8011776 <tVZFilterBell_setFreqFast+0x9e>
	{
		intVer = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	e001      	b.n	8011776 <tVZFilterBell_setFreqFast+0x9e>
		intVer = 4094;
 8011772:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	LfloatVer = fl - (Lfloat)intVer;
 8011776:	ee06 3a90 	vmov	s13, r3
 801177a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801177e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Lfloat gLower = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
 8011782:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011786:	edd0 6a00 	vldr	s13, [r0]
 801178a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801178e:	ee36 5a67 	vsub.f32	s10, s12, s15
 8011792:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011796:	3301      	adds	r3, #1
 8011798:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801179c:	ed91 5a00 	vldr	s10, [r1]
 80117a0:	ee65 7a27 	vmul.f32	s15, s10, s15
 80117a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117a8:	ee65 5aa7 	vmul.f32	s11, s11, s15

    Lfloat r  = f->g/gLower;
 80117ac:	eec7 7a25 	vdiv.f32	s15, s14, s11
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80117b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 80117b4:	edc2 7a0c 	vstr	s15, [r2, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80117b8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80117bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80117c0:	eec6 5aa7 	vdiv.f32	s11, s13, s15
 80117c4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80117c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80117cc:	edd2 7a07 	vldr	s15, [r2, #28]
 80117d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80117d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80117d8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80117dc:	4b1b      	ldr	r3, [pc, #108]	; (801184c <tVZFilterBell_setFreqFast+0x174>)
 80117de:	ee16 1a90 	vmov	r1, s13
 80117e2:	eba3 0351 	sub.w	r3, r3, r1, lsr #1
 80117e6:	ee07 3a90 	vmov	s15, r3
 80117ea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80117ee:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80117f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80117f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80117fa:	eef7 5a08 	vmov.f32	s11, #120	; 0x3fc00000  1.5
 80117fe:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011806:	ee17 3a90 	vmov	r3, s15
 801180a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 801180e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8011812:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8011816:	336e      	adds	r3, #110	; 0x6e
 8011818:	ee07 3a90 	vmov	s15, r3
 801181c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011820:	edc2 7a04 	vstr	s15, [r2, #16]
    f->R2Plusg = f->R2+f->g;
 8011824:	ee77 6a27 	vadd.f32	s13, s14, s15
 8011828:	edc2 6a09 	vstr	s13, [r2, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801182c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011830:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011834:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011838:	ee77 7a87 	vadd.f32	s15, s15, s14
 801183c:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8011840:	ed82 7a05 	vstr	s14, [r2, #20]
}
 8011844:	4770      	bx	lr
 8011846:	bf00      	nop
 8011848:	41f4898d 	.word	0x41f4898d
 801184c:	5f3759df 	.word	0x5f3759df

08011850 <tVZFilterBell_setGain>:

}

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
    _tVZFilterBell* f = *vf;
 8011850:	6802      	ldr	r2, [r0, #0]
    if (val < min)
 8011852:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011914 <tVZFilterBell_setGain+0xc4>
 8011856:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185e:	d409      	bmi.n	8011874 <tVZFilterBell_setGain+0x24>
    else if (val > max)
 8011860:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8011918 <tVZFilterBell_setGain+0xc8>
 8011864:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186c:	dd04      	ble.n	8011878 <tVZFilterBell_setGain+0x28>
        return max;
 801186e:	eeb0 0a67 	vmov.f32	s0, s15
 8011872:	e001      	b.n	8011878 <tVZFilterBell_setGain+0x28>
        return min;
 8011874:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8011914 <tVZFilterBell_setGain+0xc4>
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011878:	ed82 0a07 	vstr	s0, [r2, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 801187c:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
 8011880:	ee27 6a07 	vmul.f32	s12, s14, s14
 8011884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011888:	ee36 6a26 	vadd.f32	s12, s12, s13
 801188c:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8011890:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011894:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011898:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801189c:	ee20 0a07 	vmul.f32	s0, s0, s14
 80118a0:	ee87 7a80 	vdiv.f32	s14, s15, s0
    z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80118a4:	4b1d      	ldr	r3, [pc, #116]	; (801191c <tVZFilterBell_setGain+0xcc>)
 80118a6:	ee17 1a10 	vmov	r1, s14
 80118aa:	eba3 0351 	sub.w	r3, r3, r1, lsr #1
 80118ae:	ee07 3a90 	vmov	s15, r3
 80118b2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80118b6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80118ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118c2:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80118c6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80118ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118ce:	ee17 3a90 	vmov	r3, s15
 80118d2:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80118d6:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80118da:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 80118de:	336e      	adds	r3, #110	; 0x6e
 80118e0:	ee07 3a90 	vmov	s15, r3
 80118e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80118e8:	edc2 7a04 	vstr	s15, [r2, #16]
    f->R2Plusg = f->R2+f->g;
 80118ec:	ed92 7a03 	vldr	s14, [r2, #12]
 80118f0:	ee37 6a87 	vadd.f32	s12, s15, s14
 80118f4:	ed82 6a09 	vstr	s12, [r2, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80118f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011900:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011904:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801190c:	ed82 7a05 	vstr	s14, [r2, #20]
}
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop
 8011914:	358637bd 	.word	0x358637bd
 8011918:	457a0000 	.word	0x457a0000
 801191c:	5f3759df 	.word	0x5f3759df

08011920 <tVZFilterBR_initToPool>:
{
    tVZFilterBR_initToPool(vf, freq, Q, &leaf->mempool);
}

void    tVZFilterBR_initToPool     (tVZFilterBR* const vf, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 8011920:	b570      	push	{r4, r5, r6, lr}
 8011922:	ed2d 8b04 	vpush	{d8-d9}
 8011926:	4606      	mov	r6, r0
 8011928:	eeb0 8a40 	vmov.f32	s16, s0
 801192c:	eef0 9a60 	vmov.f32	s19, s1
    _tMempool* m = *mp;
 8011930:	680d      	ldr	r5, [r1, #0]
    _tVZFilterBR* f = *vf = (_tVZFilterBR*) mpool_alloc(sizeof(_tVZFilterBR), m);
 8011932:	4629      	mov	r1, r5
 8011934:	2034      	movs	r0, #52	; 0x34
 8011936:	f001 f9b9 	bl	8012cac <mpool_alloc>
 801193a:	4604      	mov	r4, r0
 801193c:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801193e:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8011940:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 8011942:	edd5 7a00 	vldr	s15, [r5]
 8011946:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    f->sampRatio = 48000.0f / f->sampleRate;
 801194a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8011a18 <tVZFilterBR_initToPool+0xf8>
 801194e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011952:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 8011956:	686b      	ldr	r3, [r5, #4]
 8011958:	6283      	str	r3, [r0, #40]	; 0x28
    Lfloat fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801195a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801195e:	ee67 8a87 	vmul.f32	s17, s15, s14
    if (val < min)
 8011962:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801196a:	d407      	bmi.n	801197c <tVZFilterBR_initToPool+0x5c>
    else if (val > max)
 801196c:	eef4 8ac8 	vcmpe.f32	s17, s16
 8011970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011974:	d404      	bmi.n	8011980 <tVZFilterBR_initToPool+0x60>
        return val;
 8011976:	eef0 8a48 	vmov.f32	s17, s16
 801197a:	e001      	b.n	8011980 <tVZFilterBR_initToPool+0x60>
        return min;
 801197c:	eddf 8a27 	vldr	s17, [pc, #156]	; 8011a1c <tVZFilterBR_initToPool+0xfc>
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011980:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	dc38      	bgt.n	80119fc <tVZFilterBR_initToPool+0xdc>
 801198a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8011a20 <tVZFilterBR_initToPool+0x100>
    f->cutoffMIDI = ftom(freq);
 801198e:	ed84 0a07 	vstr	s0, [r4, #28]
    f->s1    = 0.0f;
 8011992:	2300      	movs	r3, #0
 8011994:	6063      	str	r3, [r4, #4]
    f->s2   = 0.0f;
 8011996:	60a3      	str	r3, [r4, #8]
    f->R2 = 1.0f / Q;
 8011998:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801199c:	ee89 8a29 	vdiv.f32	s16, s18, s19
 80119a0:	ed84 8a04 	vstr	s16, [r4, #16]
    f->G = 1.0f;
 80119a4:	ed84 9a08 	vstr	s18, [r4, #32]
    f->g = tanf(PI * fc * f->invSampleRate);
 80119a8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011a24 <tVZFilterBR_initToPool+0x104>
 80119ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80119b0:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80119b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80119b8:	f006 fe5a 	bl	8018670 <tanf>
 80119bc:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 80119c0:	ee78 7a00 	vadd.f32	s15, s16, s0
 80119c4:	edc4 7a06 	vstr	s15, [r4, #24]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80119c8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80119cc:	ee38 8a09 	vadd.f32	s16, s16, s18
 80119d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80119d4:	ee38 8a00 	vadd.f32	s16, s16, s0
 80119d8:	eec9 7a08 	vdiv.f32	s15, s18, s16
 80119dc:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 80000)
 80119e0:	ed95 7a00 	vldr	s14, [r5]
 80119e4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011a28 <tVZFilterBR_initToPool+0x108>
 80119e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80119ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f0:	dd0f      	ble.n	8011a12 <tVZFilterBR_initToPool+0xf2>
    {
        f->table = __filterTanhTable_96000;
 80119f2:	4b0e      	ldr	r3, [pc, #56]	; (8011a2c <tVZFilterBR_initToPool+0x10c>)
 80119f4:	6323      	str	r3, [r4, #48]	; 0x30
    }
    else
    {
        f->table = __filterTanhTable_48000;
    }
}
 80119f6:	ecbd 8b04 	vpop	{d8-d9}
 80119fa:	bd70      	pop	{r4, r5, r6, pc}
 80119fc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011a30 <tVZFilterBR_initToPool+0x110>
 8011a00:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011a04:	f006 fa2e 	bl	8017e64 <logf>
 8011a08:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011a34 <tVZFilterBR_initToPool+0x114>
 8011a0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011a10:	e7bd      	b.n	801198e <tVZFilterBR_initToPool+0x6e>
        f->table = __filterTanhTable_48000;
 8011a12:	4b09      	ldr	r3, [pc, #36]	; (8011a38 <tVZFilterBR_initToPool+0x118>)
 8011a14:	6323      	str	r3, [r4, #48]	; 0x30
}
 8011a16:	e7ee      	b.n	80119f6 <tVZFilterBR_initToPool+0xd6>
 8011a18:	473b8000 	.word	0x473b8000
 8011a1c:	00000000 	.word	0x00000000
 8011a20:	c4bb8000 	.word	0xc4bb8000
 8011a24:	40490fdb 	.word	0x40490fdb
 8011a28:	479c4000 	.word	0x479c4000
 8011a2c:	0801f14c 	.word	0x0801f14c
 8011a30:	3dfa7ed2 	.word	0x3dfa7ed2
 8011a34:	418a7fac 	.word	0x418a7fac
 8011a38:	0801b14c 	.word	0x0801b14c

08011a3c <tVZFilterBR_init>:
{
 8011a3c:	b508      	push	{r3, lr}
    tVZFilterBR_initToPool(vf, freq, Q, &leaf->mempool);
 8011a3e:	3118      	adds	r1, #24
 8011a40:	f7ff ff6e 	bl	8011920 <tVZFilterBR_initToPool>
}
 8011a44:	bd08      	pop	{r3, pc}
	...

08011a48 <tVZFilterBR_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterBR_setSampleRate  (tVZFilterBR* const vf, Lfloat sampleRate)
{
        _tVZFilterBR* f = *vf;
 8011a48:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 8011a4a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    f->invSampleRate = 1.0f / sampleRate;
 8011a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011a56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 8011a5a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011a80 <tVZFilterBR_setSampleRate+0x38>
 8011a5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011a62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    if (sampleRate > 80000)
 8011a66:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011a84 <tVZFilterBR_setSampleRate+0x3c>
 8011a6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a72:	dd02      	ble.n	8011a7a <tVZFilterBR_setSampleRate+0x32>
       {
           f->table = __filterTanhTable_96000;
 8011a74:	4a04      	ldr	r2, [pc, #16]	; (8011a88 <tVZFilterBR_setSampleRate+0x40>)
 8011a76:	631a      	str	r2, [r3, #48]	; 0x30
 8011a78:	4770      	bx	lr
       }
       else
       {
           f->table = __filterTanhTable_48000;
 8011a7a:	4a04      	ldr	r2, [pc, #16]	; (8011a8c <tVZFilterBR_setSampleRate+0x44>)
 8011a7c:	631a      	str	r2, [r3, #48]	; 0x30
       }
}
 8011a7e:	4770      	bx	lr
 8011a80:	473b8000 	.word	0x473b8000
 8011a84:	479c4000 	.word	0x479c4000
 8011a88:	0801f14c 	.word	0x0801f14c
 8011a8c:	0801b14c 	.word	0x0801b14c

08011a90 <tVZFilterBR_tick>:
Lfloat   tVZFilterBR_tick               (tVZFilterBR* const vf, Lfloat input)
{
        _tVZFilterBR* f = *vf;
 8011a90:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011a92:	edd3 7a06 	vldr	s15, [r3, #24]
 8011a96:	edd3 6a01 	vldr	s13, [r3, #4]
 8011a9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011aa2:	ed93 7a02 	vldr	s14, [r3, #8]
 8011aa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011aaa:	edd3 7a05 	vldr	s15, [r3, #20]
 8011aae:	ee20 0a27 	vmul.f32	s0, s0, s15
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011ab2:	edd3 7a03 	vldr	s15, [r3, #12]
 8011ab6:	ee27 6a80 	vmul.f32	s12, s15, s0
    yB = v1 + f->s1;
 8011aba:	ee76 6a86 	vadd.f32	s13, s13, s12
    f->s1 = v1 + yB; // state update in 1st integrator
 8011abe:	ee36 6a26 	vadd.f32	s12, s12, s13
 8011ac2:	ed83 6a01 	vstr	s12, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 8011ac6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    yL = v2 + f->s2;
 8011aca:	ee37 7a27 	vadd.f32	s14, s14, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ad2:	edc3 7a02 	vstr	s15, [r3, #8]
    
    return (yH + yL)*f->G;
 8011ad6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011ada:	edd3 7a08 	vldr	s15, [r3, #32]
}
 8011ade:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011ae2:	4770      	bx	lr

08011ae4 <tVZFilterBR_setFreqFast>:

void    tVZFilterBR_setFreqFast           (tVZFilterBR* const vf, Lfloat cutoff)
{
        _tVZFilterBR* f = *vf;
 8011ae4:	6802      	ldr	r2, [r0, #0]
        f->cutoffMIDI = cutoff;
 8011ae6:	ed82 0a07 	vstr	s0, [r2, #28]
        cutoff *= 30.567164179104478f;
 8011aea:	eddf 7a22 	vldr	s15, [pc, #136]	; 8011b74 <tVZFilterBR_setFreqFast+0x90>
 8011aee:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 8011af2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011af6:	ee17 3a90 	vmov	r3, s15
        if (intVer > 4094)
 8011afa:	f640 71fe 	movw	r1, #4094	; 0xffe
 8011afe:	428b      	cmp	r3, r1
 8011b00:	dc03      	bgt.n	8011b0a <tVZFilterBR_setFreqFast+0x26>
        {
            intVer = 4094;
        }
        if (intVer < 0)
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da03      	bge.n	8011b0e <tVZFilterBR_setFreqFast+0x2a>
        {
            intVer = 0;
 8011b06:	2300      	movs	r3, #0
 8011b08:	e001      	b.n	8011b0e <tVZFilterBR_setFreqFast+0x2a>
            intVer = 4094;
 8011b0a:	f640 73fe 	movw	r3, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011b0e:	ee07 3a90 	vmov	s15, r3
 8011b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b16:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->g = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampRatio;
 8011b1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011b1c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011b20:	edd0 7a00 	vldr	s15, [r0]
 8011b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b28:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8011b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b30:	3301      	adds	r3, #1
 8011b32:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011b36:	ed91 7a00 	vldr	s14, [r1]
 8011b3a:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b42:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 8011b46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b4a:	edc2 7a03 	vstr	s15, [r2, #12]
    f->R2Plusg = f->R2+f->g;
 8011b4e:	ed92 7a04 	vldr	s14, [r2, #16]
 8011b52:	ee37 6a87 	vadd.f32	s12, s15, s14
 8011b56:	ed82 6a06 	vstr	s12, [r2, #24]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011b5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011b5e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011b62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b6e:	edc2 7a05 	vstr	s15, [r2, #20]
    
}
 8011b72:	4770      	bx	lr
 8011b74:	41f4898d 	.word	0x41f4898d

08011b78 <tVZFilterBR_setGain>:

void    tVZFilterBR_setGain           (tVZFilterBR* const vf, Lfloat gain)
{
    _tVZFilterBR* f = *vf;
 8011b78:	6803      	ldr	r3, [r0, #0]
    f->G = gain;
 8011b7a:	ed83 0a08 	vstr	s0, [r3, #32]
}
 8011b7e:	4770      	bx	lr

08011b80 <tVZFilterBR_setResonance>:
}


void    tVZFilterBR_setResonance                (tVZFilterBR* const vf, Lfloat res)
{
        _tVZFilterBR* f = *vf;
 8011b80:	6803      	ldr	r3, [r0, #0]
        f->R2 = 1.0f/res;
 8011b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8011b8a:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 8011b8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8011b92:	ee37 6a87 	vadd.f32	s12, s15, s14
 8011b96:	ed83 6a06 	vstr	s12, [r3, #24]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8011b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ba2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bae:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8011bb2:	4770      	bx	lr

08011bb4 <tDiodeFilter_initToPool>:
{
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 8011bb4:	b570      	push	{r4, r5, r6, lr}
 8011bb6:	ed2d 8b02 	vpush	{d8}
 8011bba:	4606      	mov	r6, r0
 8011bbc:	eef0 8a40 	vmov.f32	s17, s0
 8011bc0:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 8011bc4:	680d      	ldr	r5, [r1, #0]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	204c      	movs	r0, #76	; 0x4c
 8011bca:	f001 f86f 	bl	8012cac <mpool_alloc>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8011bd2:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8011bd4:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 8011bd6:	ed95 0a01 	vldr	s0, [r5, #4]
 8011bda:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->cutoff = cutoff;
 8011bde:	edc0 8a01 	vstr	s17, [r0, #4]
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8011be2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8011c9c <tDiodeFilter_initToPool+0xe8>
 8011be6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011bea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011bee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8011bf2:	f006 fdd1 	bl	8018798 <tan>
 8011bf6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011bfa:	ed84 0a02 	vstr	s0, [r4, #8]
 8011bfe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8011c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c06:	dc3a      	bgt.n	8011c7e <tDiodeFilter_initToPool+0xca>
 8011c08:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8011ca0 <tDiodeFilter_initToPool+0xec>
    f->cutoffMIDI = ftom(cutoff);
 8011c0c:	ed84 0a12 	vstr	s0, [r4, #72]	; 0x48
    f->r = (7.f * resonance + 0.5f);
 8011c10:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8011c14:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011c18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011c1c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011c20:	ed84 8a03 	vstr	s16, [r4, #12]
    f->Vt = 0.5f;
 8011c24:	edc4 7a04 	vstr	s15, [r4, #16]
    f->n = 1.836f;
 8011c28:	4b1e      	ldr	r3, [pc, #120]	; (8011ca4 <tDiodeFilter_initToPool+0xf0>)
 8011c2a:	6163      	str	r3, [r4, #20]
    f->zi = 0.0f; //previous input value
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	61e3      	str	r3, [r4, #28]
    f->gamma = f->Vt*f->n;
 8011c30:	4b1d      	ldr	r3, [pc, #116]	; (8011ca8 <tDiodeFilter_initToPool+0xf4>)
 8011c32:	61a3      	str	r3, [r4, #24]
    f->s0 = 0.01f;
 8011c34:	4b1d      	ldr	r3, [pc, #116]	; (8011cac <tDiodeFilter_initToPool+0xf8>)
 8011c36:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s1 = 0.02f;
 8011c38:	4b1d      	ldr	r3, [pc, #116]	; (8011cb0 <tDiodeFilter_initToPool+0xfc>)
 8011c3a:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 8011c3c:	4b1d      	ldr	r3, [pc, #116]	; (8011cb4 <tDiodeFilter_initToPool+0x100>)
 8011c3e:	6363      	str	r3, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 8011c40:	4b1d      	ldr	r3, [pc, #116]	; (8011cb8 <tDiodeFilter_initToPool+0x104>)
 8011c42:	63a3      	str	r3, [r4, #56]	; 0x38
    f->g0inv = 1.f/(2.f*f->Vt);
 8011c44:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011c48:	6223      	str	r3, [r4, #32]
    f->g1inv = 1.f/(2.f*f->gamma);
 8011c4a:	4b1c      	ldr	r3, [pc, #112]	; (8011cbc <tDiodeFilter_initToPool+0x108>)
 8011c4c:	6263      	str	r3, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8011c4e:	4b1c      	ldr	r3, [pc, #112]	; (8011cc0 <tDiodeFilter_initToPool+0x10c>)
 8011c50:	62a3      	str	r3, [r4, #40]	; 0x28
    f->sampRatio = 48000.0f / leaf->sampleRate;
 8011c52:	ed95 7a00 	vldr	s14, [r5]
 8011c56:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8011cc4 <tDiodeFilter_initToPool+0x110>
 8011c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c5e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    if (leaf->sampleRate > 80000)
 8011c62:	ed95 7a00 	vldr	s14, [r5]
 8011c66:	eddf 7a18 	vldr	s15, [pc, #96]	; 8011cc8 <tDiodeFilter_initToPool+0x114>
 8011c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	dd0f      	ble.n	8011c94 <tDiodeFilter_initToPool+0xe0>
    {
    	f->table = __filterTanhTable_96000;
 8011c74:	4b15      	ldr	r3, [pc, #84]	; (8011ccc <tDiodeFilter_initToPool+0x118>)
 8011c76:	6463      	str	r3, [r4, #68]	; 0x44
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8011c78:	ecbd 8b02 	vpop	{d8}
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8011cd0 <tDiodeFilter_initToPool+0x11c>
 8011c82:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011c86:	f006 f8ed 	bl	8017e64 <logf>
 8011c8a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011cd4 <tDiodeFilter_initToPool+0x120>
 8011c8e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011c92:	e7bb      	b.n	8011c0c <tDiodeFilter_initToPool+0x58>
    	f->table = __filterTanhTable_48000;
 8011c94:	4b10      	ldr	r3, [pc, #64]	; (8011cd8 <tDiodeFilter_initToPool+0x124>)
 8011c96:	6463      	str	r3, [r4, #68]	; 0x44
}
 8011c98:	e7ee      	b.n	8011c78 <tDiodeFilter_initToPool+0xc4>
 8011c9a:	bf00      	nop
 8011c9c:	40490fdb 	.word	0x40490fdb
 8011ca0:	c4bb8000 	.word	0xc4bb8000
 8011ca4:	3feb020c 	.word	0x3feb020c
 8011ca8:	3f6b020c 	.word	0x3f6b020c
 8011cac:	3c23d70a 	.word	0x3c23d70a
 8011cb0:	3ca3d70a 	.word	0x3ca3d70a
 8011cb4:	3cf5c28f 	.word	0x3cf5c28f
 8011cb8:	3d23d70a 	.word	0x3d23d70a
 8011cbc:	3f0b6efd 	.word	0x3f0b6efd
 8011cc0:	3e39e952 	.word	0x3e39e952
 8011cc4:	473b8000 	.word	0x473b8000
 8011cc8:	479c4000 	.word	0x479c4000
 8011ccc:	0801f14c 	.word	0x0801f14c
 8011cd0:	3dfa7ed2 	.word	0x3dfa7ed2
 8011cd4:	418a7fac 	.word	0x418a7fac
 8011cd8:	0801b14c 	.word	0x0801b14c

08011cdc <tDiodeFilter_init>:
{
 8011cdc:	b508      	push	{r3, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 8011cde:	3118      	adds	r1, #24
 8011ce0:	f7ff ff68 	bl	8011bb4 <tDiodeFilter_initToPool>
}
 8011ce4:	bd08      	pop	{r3, pc}
	...

08011ce8 <tanhXdX>:
    mpool_free((char*)f, f->mempool);
}

Lfloat tanhXdX(Lfloat x)
{
    Lfloat a = x*x;
 8011ce8:	ee20 7a00 	vmul.f32	s14, s0, s0
    // IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)

    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8011cec:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8011cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cf4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8011d34 <tanhXdX+0x4c>
 8011cf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011d00:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8011d38 <tanhXdX+0x50>
 8011d04:	ee77 7aa6 	vadd.f32	s15, s15, s13

    Lfloat output = 1.0f;
    
    if (testVal > 0.000001f)
 8011d08:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8011d3c <tanhXdX+0x54>
 8011d0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d14:	dc01      	bgt.n	8011d1a <tanhXdX+0x32>
    Lfloat output = 1.0f;
 8011d16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    {
        output = testVal;
        
    }
    return ((a + 105.0f)*a + 945.0f) / output;
 8011d1a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8011d40 <tanhXdX+0x58>
 8011d1e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8011d22:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011d26:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8011d38 <tanhXdX+0x50>
 8011d2a:	ee30 0a07 	vadd.f32	s0, s0, s14
}
 8011d2e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8011d32:	4770      	bx	lr
 8011d34:	43d20000 	.word	0x43d20000
 8011d38:	446c4000 	.word	0x446c4000
 8011d3c:	358637bd 	.word	0x358637bd
 8011d40:	42d20000 	.word	0x42d20000

08011d44 <tDiodeFilter_tickEfficient>:
    f->zi = in;
    return tanhf(y3*f->r);
}

Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8011d44:	b510      	push	{r4, lr}
 8011d46:	ed2d 8b0c 	vpush	{d8-d13}
 8011d4a:	eeb0 ca40 	vmov.f32	s24, s0
    _tDiodeFilter* f = *vf;
 8011d4e:	6804      	ldr	r4, [r0, #0]

    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
 8011d50:	ed94 0a07 	vldr	s0, [r4, #28]
 8011d54:	ee30 0a0c 	vadd.f32	s0, s0, s24
 8011d58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011d5c:	ee20 0a27 	vmul.f32	s0, s0, s15

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8011d60:	ed94 da02 	vldr	s26, [r4, #8]
 8011d64:	edd4 8a03 	vldr	s17, [r4, #12]
 8011d68:	ed94 ba0e 	vldr	s22, [r4, #56]	; 0x38
 8011d6c:	ee68 7a8b 	vmul.f32	s15, s17, s22
 8011d70:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d74:	ed94 aa08 	vldr	s20, [r4, #32]
 8011d78:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8011d7c:	f7ff ffb4 	bl	8011ce8 <tanhXdX>
 8011d80:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8011d84:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8011d88:	edd4 ca0c 	vldr	s25, [r4, #48]	; 0x30
 8011d8c:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
 8011d90:	ee3c 0aea 	vsub.f32	s0, s25, s21
 8011d94:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 8011d98:	ee20 0a09 	vmul.f32	s0, s0, s18
 8011d9c:	f7ff ffa4 	bl	8011ce8 <tanhXdX>
 8011da0:	ee2d 8a00 	vmul.f32	s16, s26, s0
 8011da4:	ee29 8a08 	vmul.f32	s16, s18, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8011da8:	edd4 ba0d 	vldr	s23, [r4, #52]	; 0x34
 8011dac:	ee3b 0aec 	vsub.f32	s0, s23, s25
 8011db0:	ee29 0a00 	vmul.f32	s0, s18, s0
 8011db4:	f7ff ff98 	bl	8011ce8 <tanhXdX>
 8011db8:	ee6d 9a00 	vmul.f32	s19, s26, s0
 8011dbc:	ee69 9a29 	vmul.f32	s19, s18, s19
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8011dc0:	ee3b 0a6b 	vsub.f32	s0, s22, s23
 8011dc4:	ee29 0a00 	vmul.f32	s0, s18, s0
 8011dc8:	f7ff ff8e 	bl	8011ce8 <tanhXdX>
 8011dcc:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8011dd0:	ee29 9a00 	vmul.f32	s18, s18, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8011dd4:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
 8011dd8:	ee2b 0a2d 	vmul.f32	s0, s22, s27
 8011ddc:	f7ff ff84 	bl	8011ce8 <tanhXdX>
 8011de0:	ee2d da00 	vmul.f32	s26, s26, s0
 8011de4:	ee6d 7a8d 	vmul.f32	s15, s27, s26

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8011de8:	ee7b 6a2b 	vadd.f32	s13, s22, s23
 8011dec:	ee3c 7aab 	vadd.f32	s14, s25, s23
 8011df0:	ee3b 6a07 	vadd.f32	s12, s22, s14
 8011df4:	ee3c 7aaa 	vadd.f32	s14, s25, s21
 8011df8:	ee3b 7a87 	vadd.f32	s14, s23, s14
 8011dfc:	ee3b 7a07 	vadd.f32	s14, s22, s14
 8011e00:	ee6c 5a0a 	vmul.f32	s11, s24, s20
 8011e04:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011e08:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011e0c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8011e10:	ee27 7a29 	vmul.f32	s14, s14, s19
 8011e14:	ee76 6a87 	vadd.f32	s13, s13, s14
 8011e18:	ee3b 6aab 	vadd.f32	s12, s23, s23
 8011e1c:	ee3b 7a0b 	vadd.f32	s14, s22, s22
 8011e20:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011e24:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011e28:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011e2c:	ee66 6a89 	vmul.f32	s13, s13, s18
 8011e30:	ee7b 6a26 	vadd.f32	s13, s22, s13
 8011e34:	ee27 6a08 	vmul.f32	s12, s14, s16
 8011e38:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011e3c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8011e40:	ee2b 6a05 	vmul.f32	s12, s22, s10
 8011e44:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011e48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011e4c:	ee27 7a29 	vmul.f32	s14, s14, s19
 8011e50:	ee76 6a87 	vadd.f32	s13, s13, s14

    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8011e54:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8011e58:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8011e5c:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8011e60:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e68:	ee28 6a8a 	vmul.f32	s12, s17, s20
 8011e6c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011e70:	ee36 6a24 	vadd.f32	s12, s12, s9
 8011e74:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011e78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011e7c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011e80:	ee26 6a29 	vmul.f32	s12, s12, s19
 8011e84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011e88:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8011e8c:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011e90:	ee27 7a09 	vmul.f32	s14, s14, s18
 8011e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011e98:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8011e9c:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011ea0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011ea4:	ee27 6a85 	vmul.f32	s12, s15, s10
 8011ea8:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011eac:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011eb0:	ee75 5a86 	vadd.f32	s11, s11, s12
 8011eb4:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8011eb8:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8011ebc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011ec0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011ec4:	ee37 7a06 	vadd.f32	s14, s14, s12

    if (tempy3denom < 0.000001f)
 8011ec8:	ed9f 6aab 	vldr	s12, [pc, #684]	; 8012178 <tDiodeFilter_tickEfficient+0x434>
 8011ecc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	d501      	bpl.n	8011eda <tDiodeFilter_tickEfficient+0x196>
    {
        tempy3denom = 0.000001f;
 8011ed6:	eeb0 7a46 	vmov.f32	s14, s12
    }

    y3 = y3 / tempy3denom;
 8011eda:	ee86 5a87 	vdiv.f32	s10, s13, s14

    if (t1 < 0.000001f)
 8011ede:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8012178 <tDiodeFilter_tickEfficient+0x434>
 8011ee2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eea:	d501      	bpl.n	8011ef0 <tDiodeFilter_tickEfficient+0x1ac>
    {
        t1 = 0.000001f;
 8011eec:	eeb0 8a47 	vmov.f32	s16, s14
    }
    if (t2 < 0.000001f)
 8011ef0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8012178 <tDiodeFilter_tickEfficient+0x434>
 8011ef4:	eef4 9ac7 	vcmpe.f32	s19, s14
 8011ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efc:	d501      	bpl.n	8011f02 <tDiodeFilter_tickEfficient+0x1be>
    {
        t2 = 0.000001f;
 8011efe:	eef0 9a47 	vmov.f32	s19, s14
    }
    if (t3 < 0.000001f)
 8011f02:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8012178 <tDiodeFilter_tickEfficient+0x434>
 8011f06:	eeb4 9ac7 	vcmpe.f32	s18, s14
 8011f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f0e:	d501      	bpl.n	8011f14 <tDiodeFilter_tickEfficient+0x1d0>
    {
        t3 = 0.000001f;
 8011f10:	eeb0 9a47 	vmov.f32	s18, s14
    }

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8011f14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8011f18:	ee37 7a86 	vadd.f32	s14, s15, s12
 8011f1c:	ee37 7a09 	vadd.f32	s14, s14, s18
 8011f20:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011f24:	ee3b 7a47 	vsub.f32	s14, s22, s14
 8011f28:	eeb1 7a47 	vneg.f32	s14, s14
 8011f2c:	eec7 4a09 	vdiv.f32	s9, s14, s18
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8011f30:	ee39 7a06 	vadd.f32	s14, s18, s12
 8011f34:	ee37 7a29 	vadd.f32	s14, s14, s19
 8011f38:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011f3c:	ee3b 7ac7 	vsub.f32	s14, s23, s14
 8011f40:	ee69 6a05 	vmul.f32	s13, s18, s10
 8011f44:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011f48:	eeb1 7a47 	vneg.f32	s14, s14
 8011f4c:	eec7 6a29 	vdiv.f32	s13, s14, s19
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8011f50:	ee79 5a86 	vadd.f32	s11, s19, s12
 8011f54:	ee75 5a88 	vadd.f32	s11, s11, s16
 8011f58:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8011f5c:	ee7c 5ae5 	vsub.f32	s11, s25, s11
 8011f60:	ee29 7aa4 	vmul.f32	s14, s19, s9
 8011f64:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011f68:	eef1 5a65 	vneg.f32	s11, s11
 8011f6c:	ee85 7a88 	vdiv.f32	s14, s11, s16
    Lfloat xx = (in - f->r*y3);
 8011f70:	ee68 8a85 	vmul.f32	s17, s17, s10
 8011f74:	ee7c 5a68 	vsub.f32	s11, s24, s17

    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8011f78:	ee2a aa25 	vmul.f32	s20, s20, s11
 8011f7c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011f80:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011f84:	ee3a aa07 	vadd.f32	s20, s20, s14
 8011f88:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8011f8c:	ee7a aa8a 	vadd.f32	s21, s21, s20
 8011f90:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8011f94:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8011f98:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8011f9c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011fa0:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011fa4:	ee3c 7a87 	vadd.f32	s14, s25, s14
 8011fa8:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8011fac:	ee75 4a64 	vsub.f32	s9, s10, s9
 8011fb0:	ee64 4a89 	vmul.f32	s9, s9, s18
 8011fb4:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8011fb8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011fbc:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8011fc0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8011fc4:	ee67 7ac5 	vnmul.f32	s15, s15, s10
 8011fc8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011fcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011fd0:	ee7b 7a27 	vadd.f32	s15, s22, s15
 8011fd4:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    
    f->s0 = 1000.0f * fast_tanh(f->s0 * 0.001f);
 8011fd8:	ed9f 1a68 	vldr	s2, [pc, #416]	; 801217c <tDiodeFilter_tickEfficient+0x438>
 8011fdc:	ee6a aa81 	vmul.f32	s21, s21, s2
  Lfloat x2 = x * x;
 8011fe0:	ee6a 4aaa 	vmul.f32	s9, s21, s21
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
 8011fe4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8012180 <tDiodeFilter_tickEfficient+0x43c>
 8011fe8:	ee34 5aa5 	vadd.f32	s10, s9, s11
 8011fec:	ee24 5a85 	vmul.f32	s10, s9, s10
 8011ff0:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8012184 <tDiodeFilter_tickEfficient+0x440>
 8011ff4:	ee35 5a02 	vadd.f32	s10, s10, s4
 8011ff8:	ee24 5a85 	vmul.f32	s10, s9, s10
 8011ffc:	ed9f 4a62 	vldr	s8, [pc, #392]	; 8012188 <tDiodeFilter_tickEfficient+0x444>
 8012000:	ee35 5a04 	vadd.f32	s10, s10, s8
 8012004:	ee6a aa85 	vmul.f32	s21, s21, s10
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
 8012008:	eeb3 5a0c 	vmov.f32	s10, #60	; 0x41e00000  28.0
 801200c:	ee24 3a85 	vmul.f32	s6, s9, s10
 8012010:	eddf 2a5e 	vldr	s5, [pc, #376]	; 801218c <tDiodeFilter_tickEfficient+0x448>
 8012014:	ee33 3a22 	vadd.f32	s6, s6, s5
 8012018:	ee24 3a83 	vmul.f32	s6, s9, s6
 801201c:	eddf 3a5c 	vldr	s7, [pc, #368]	; 8012190 <tDiodeFilter_tickEfficient+0x44c>
 8012020:	ee33 3a23 	vadd.f32	s6, s6, s7
 8012024:	ee64 4a83 	vmul.f32	s9, s9, s6
 8012028:	ee74 4a84 	vadd.f32	s9, s9, s8
  return a / b;
 801202c:	eeca 1aa4 	vdiv.f32	s3, s21, s9
 8012030:	ed9f 3a58 	vldr	s6, [pc, #352]	; 8012194 <tDiodeFilter_tickEfficient+0x450>
 8012034:	ee61 4a83 	vmul.f32	s9, s3, s6
 8012038:	edc4 4a0b 	vstr	s9, [r4, #44]	; 0x2c
    f->s1 = 1000.0f * fast_tanh(f->s1 * 0.001f);
 801203c:	ee27 7a01 	vmul.f32	s14, s14, s2
  Lfloat x2 = x * x;
 8012040:	ee67 4a07 	vmul.f32	s9, s14, s14
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
 8012044:	ee74 1aa5 	vadd.f32	s3, s9, s11
 8012048:	ee64 1aa1 	vmul.f32	s3, s9, s3
 801204c:	ee71 1a82 	vadd.f32	s3, s3, s4
 8012050:	ee64 1aa1 	vmul.f32	s3, s9, s3
 8012054:	ee71 1a84 	vadd.f32	s3, s3, s8
 8012058:	ee27 7a21 	vmul.f32	s14, s14, s3
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
 801205c:	ee64 1a85 	vmul.f32	s3, s9, s10
 8012060:	ee71 1aa2 	vadd.f32	s3, s3, s5
 8012064:	ee64 1aa1 	vmul.f32	s3, s9, s3
 8012068:	ee71 1aa3 	vadd.f32	s3, s3, s7
 801206c:	ee64 4aa1 	vmul.f32	s9, s9, s3
 8012070:	ee74 4a84 	vadd.f32	s9, s9, s8
  return a / b;
 8012074:	eec7 1a24 	vdiv.f32	s3, s14, s9
 8012078:	ee21 7a83 	vmul.f32	s14, s3, s6
 801207c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->s2 = 1000.0f * fast_tanh(f->s2 * 0.001f);
 8012080:	ee66 6a81 	vmul.f32	s13, s13, s2
  Lfloat x2 = x * x;
 8012084:	ee26 7aa6 	vmul.f32	s14, s13, s13
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
 8012088:	ee77 4a25 	vadd.f32	s9, s14, s11
 801208c:	ee67 4a24 	vmul.f32	s9, s14, s9
 8012090:	ee74 4a82 	vadd.f32	s9, s9, s4
 8012094:	ee67 4a24 	vmul.f32	s9, s14, s9
 8012098:	ee74 4a84 	vadd.f32	s9, s9, s8
 801209c:	ee66 6aa4 	vmul.f32	s13, s13, s9
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
 80120a0:	ee67 4a05 	vmul.f32	s9, s14, s10
 80120a4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80120a8:	ee67 4a24 	vmul.f32	s9, s14, s9
 80120ac:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80120b0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80120b4:	ee37 7a04 	vadd.f32	s14, s14, s8
  return a / b;
 80120b8:	eec6 4a87 	vdiv.f32	s9, s13, s14
 80120bc:	ee24 7a83 	vmul.f32	s14, s9, s6
 80120c0:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    f->s3 = 1000.0f * fast_tanh(f->s3 * 0.001f);
 80120c4:	ee67 7a81 	vmul.f32	s15, s15, s2
  Lfloat x2 = x * x;
 80120c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
  Lfloat a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
 80120cc:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80120d0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80120d4:	ee37 7a02 	vadd.f32	s14, s14, s4
 80120d8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80120dc:	ee37 7a04 	vadd.f32	s14, s14, s8
 80120e0:	ee67 7a87 	vmul.f32	s15, s15, s14
  Lfloat b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
 80120e4:	ee26 7a85 	vmul.f32	s14, s13, s10
 80120e8:	ee37 7a22 	vadd.f32	s14, s14, s5
 80120ec:	ee26 7a87 	vmul.f32	s14, s13, s14
 80120f0:	ee37 7a23 	vadd.f32	s14, s14, s7
 80120f4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80120f8:	ee76 6a84 	vadd.f32	s13, s13, s8
  return a / b;
 80120fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012100:	ee67 7a03 	vmul.f32	s15, s14, s6
 8012104:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    
    f->zi = in;
 8012108:	ed84 ca07 	vstr	s24, [r4, #28]
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 801210c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8012198 <tDiodeFilter_tickEfficient+0x454>
 8012110:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012114:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012118:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801211c:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8012120:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801219c <tDiodeFilter_tickEfficient+0x458>
 8012124:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012128:	ee28 7a87 	vmul.f32	s14, s17, s14
 801212c:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012130:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012134:	ee68 8a87 	vmul.f32	s17, s17, s14
 8012138:	ee77 7aa8 	vadd.f32	s15, s15, s17
    Lfloat den = InvSqrt(1.0f + a * a);
 801213c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012140:	ee76 6a86 	vadd.f32	s13, s13, s12
    Lfloat xhalf = 0.5f*x;
 8012144:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012148:	ee26 7a87 	vmul.f32	s14, s13, s14
    int i = *(int*)&x; // get bits for floating value
 801214c:	ee16 2a90 	vmov	r2, s13
    x = *(Lfloat*)&i; // convert bits back to float
 8012150:	4b13      	ldr	r3, [pc, #76]	; (80121a0 <tDiodeFilter_tickEfficient+0x45c>)
 8012152:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8012156:	ee00 3a10 	vmov	s0, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 801215a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801215e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012162:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8012166:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801216a:	ee20 0a07 	vmul.f32	s0, s0, s14
    return fast_tanh5(y3*f->r);
}
 801216e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012172:	ecbd 8b0c 	vpop	{d8-d13}
 8012176:	bd10      	pop	{r4, pc}
 8012178:	358637bd 	.word	0x358637bd
 801217c:	3a83126f 	.word	0x3a83126f
 8012180:	43bd0000 	.word	0x43bd0000
 8012184:	46875a00 	.word	0x46875a00
 8012188:	4803f7c0 	.word	0x4803f7c0
 801218c:	4544e000 	.word	0x4544e000
 8012190:	4773a200 	.word	0x4773a200
 8012194:	447a0000 	.word	0x447a0000
 8012198:	3e28d927 	.word	0x3e28d927
 801219c:	3c217586 	.word	0x3c217586
 80121a0:	5f3759df 	.word	0x5f3759df

080121a4 <tDiodeFilter_setFreqFast>:
    f->f = tanf(TWO_PI * f->cutoff * f->invSampleRate);
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
 80121a4:	6802      	ldr	r2, [r0, #0]
    cutoff = LEAF_clip(10.0f, cutoff+11.13f, 140.0f);//compensate for tuning error
 80121a6:	eddf 7a26 	vldr	s15, [pc, #152]	; 8012240 <tDiodeFilter_setFreqFast+0x9c>
 80121aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (val < min)
 80121ae:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80121b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ba:	d409      	bmi.n	80121d0 <tDiodeFilter_setFreqFast+0x2c>
    else if (val > max)
 80121bc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012244 <tDiodeFilter_setFreqFast+0xa0>
 80121c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80121c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c8:	dd04      	ble.n	80121d4 <tDiodeFilter_setFreqFast+0x30>
        return max;
 80121ca:	eeb0 0a67 	vmov.f32	s0, s15
 80121ce:	e001      	b.n	80121d4 <tDiodeFilter_setFreqFast+0x30>
        return min;
 80121d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
	f->cutoffMIDI = cutoff;
 80121d4:	ed82 0a12 	vstr	s0, [r2, #72]	; 0x48
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80121d8:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012248 <tDiodeFilter_setFreqFast+0xa4>
 80121dc:	ee20 0a27 	vmul.f32	s0, s0, s15

    int32_t intVer = (int32_t)cutoff;
 80121e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80121e4:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 80121e8:	f640 71fe 	movw	r1, #4094	; 0xffe
 80121ec:	428b      	cmp	r3, r1
 80121ee:	dc03      	bgt.n	80121f8 <tDiodeFilter_setFreqFast+0x54>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	da03      	bge.n	80121fc <tDiodeFilter_setFreqFast+0x58>
    {
    	intVer = 0;
 80121f4:	2300      	movs	r3, #0
 80121f6:	e001      	b.n	80121fc <tDiodeFilter_setFreqFast+0x58>
    	intVer = 4094;
 80121f8:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80121fc:	ee07 3a90 	vmov	s15, r3
 8012200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012204:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->f = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer))  * f->sampRatio;
 8012208:	6c51      	ldr	r1, [r2, #68]	; 0x44
 801220a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801220e:	edd0 7a00 	vldr	s15, [r0]
 8012212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012216:	ee37 7a40 	vsub.f32	s14, s14, s0
 801221a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801221e:	3301      	adds	r3, #1
 8012220:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8012224:	ed91 7a00 	vldr	s14, [r1]
 8012228:	ee27 7a00 	vmul.f32	s14, s14, s0
 801222c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012230:	ed92 7a10 	vldr	s14, [r2, #64]	; 0x40
 8012234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012238:	edc2 7a02 	vstr	s15, [r2, #8]
}
 801223c:	4770      	bx	lr
 801223e:	bf00      	nop
 8012240:	4132147b 	.word	0x4132147b
 8012244:	430c0000 	.word	0x430c0000
 8012248:	41f4898d 	.word	0x41f4898d

0801224c <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
 801224c:	6803      	ldr	r3, [r0, #0]
    //f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 20.0f);
    f->r = LEAF_clip(0.5f, resonance*2.0f, 20.0f);
 801224e:	ee30 0a00 	vadd.f32	s0, s0, s0
    if (val < min)
 8012252:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012256:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801225e:	d409      	bmi.n	8012274 <tDiodeFilter_setQ+0x28>
    else if (val > max)
 8012260:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8012264:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226c:	dd04      	ble.n	8012278 <tDiodeFilter_setQ+0x2c>
        return max;
 801226e:	eeb0 0a67 	vmov.f32	s0, s15
 8012272:	e001      	b.n	8012278 <tDiodeFilter_setQ+0x2c>
        return min;
 8012274:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012278:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801227c:	4770      	bx	lr
	...

08012280 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
 8012280:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 8012282:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012286:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801228a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    f->sampRatio = 48000.0f / sr;
 801228e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80122b4 <tDiodeFilter_setSampleRate+0x34>
 8012292:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012296:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    if (sr > 80000)
 801229a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80122b8 <tDiodeFilter_setSampleRate+0x38>
 801229e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	dd02      	ble.n	80122ae <tDiodeFilter_setSampleRate+0x2e>
    {
    	f->table = __filterTanhTable_96000;
 80122a8:	4a04      	ldr	r2, [pc, #16]	; (80122bc <tDiodeFilter_setSampleRate+0x3c>)
 80122aa:	645a      	str	r2, [r3, #68]	; 0x44
 80122ac:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80122ae:	4a04      	ldr	r2, [pc, #16]	; (80122c0 <tDiodeFilter_setSampleRate+0x40>)
 80122b0:	645a      	str	r2, [r3, #68]	; 0x44
    }
}
 80122b2:	4770      	bx	lr
 80122b4:	473b8000 	.word	0x473b8000
 80122b8:	479c4000 	.word	0x479c4000
 80122bc:	0801f14c 	.word	0x0801f14c
 80122c0:	0801b14c 	.word	0x0801b14c

080122c4 <tLadderFilter_initToPool>:
{
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 80122c4:	b570      	push	{r4, r5, r6, lr}
 80122c6:	ed2d 8b02 	vpush	{d8}
 80122ca:	4606      	mov	r6, r0
 80122cc:	eeb0 8a40 	vmov.f32	s16, s0
 80122d0:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 80122d4:	680d      	ldr	r5, [r1, #0]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80122d6:	4629      	mov	r1, r5
 80122d8:	2048      	movs	r0, #72	; 0x48
 80122da:	f000 fce7 	bl	8012cac <mpool_alloc>
 80122de:	4604      	mov	r4, r0
 80122e0:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 80122e2:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 80122e4:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 80122e6:	686b      	ldr	r3, [r5, #4]
 80122e8:	6083      	str	r3, [r0, #8]
    f->sampleRatio = 48000.0f / leaf->sampleRate;
 80122ea:	ed95 7a00 	vldr	s14, [r5]
 80122ee:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80123a4 <tLadderFilter_initToPool+0xe0>
 80122f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80122f6:	edc0 7a03 	vstr	s15, [r0, #12]
    f->cutoff = cutoff;
 80122fa:	ed80 8a01 	vstr	s16, [r0, #4]
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80122fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012306:	dc3e      	bgt.n	8012386 <tLadderFilter_initToPool+0xc2>
 8012308:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80123a8 <tLadderFilter_initToPool+0xe4>
    f->cutoffMIDI = ftom(cutoff);
 801230c:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->oversampling = 1;
 8012310:	2301      	movs	r3, #1
 8012312:	6123      	str	r3, [r4, #16]
    f->invOS = 1.0f;
 8012314:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 8012318:	6166      	str	r6, [r4, #20]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 801231a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80123ac <tLadderFilter_initToPool+0xe8>
 801231e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012322:	edd4 7a02 	vldr	s15, [r4, #8]
 8012326:	ee20 0a27 	vmul.f32	s0, s0, s15
 801232a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801232e:	f006 fa33 	bl	8018798 <tan>
 8012332:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012336:	ed84 0a06 	vstr	s0, [r4, #24]
    f->c2 = 2.0f * f->c;
 801233a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801233e:	ed84 0a08 	vstr	s0, [r4, #32]
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8012342:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8012346:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801234a:	edc4 8a07 	vstr	s17, [r4, #28]

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801234e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012352:	6263      	str	r3, [r4, #36]	; 0x24
    f->s = 0.1f;
 8012354:	4b16      	ldr	r3, [pc, #88]	; (80123b0 <tLadderFilter_initToPool+0xec>)
 8012356:	62a3      	str	r3, [r4, #40]	; 0x28
    f->d = 1.0f;
 8012358:	62e6      	str	r6, [r4, #44]	; 0x2c
    
    
    f->b[0] = 0.01f;
 801235a:	4b16      	ldr	r3, [pc, #88]	; (80123b4 <tLadderFilter_initToPool+0xf0>)
 801235c:	6323      	str	r3, [r4, #48]	; 0x30
    f->b[0] = 0.02f;
 801235e:	4b16      	ldr	r3, [pc, #88]	; (80123b8 <tLadderFilter_initToPool+0xf4>)
 8012360:	6323      	str	r3, [r4, #48]	; 0x30
    f->b[0] = 0.03f;
 8012362:	4b16      	ldr	r3, [pc, #88]	; (80123bc <tLadderFilter_initToPool+0xf8>)
 8012364:	6323      	str	r3, [r4, #48]	; 0x30
    f->b[0] = 0.04f;
 8012366:	4b16      	ldr	r3, [pc, #88]	; (80123c0 <tLadderFilter_initToPool+0xfc>)
 8012368:	6323      	str	r3, [r4, #48]	; 0x30
    if (leaf->sampleRate > 80000)
 801236a:	ed95 7a00 	vldr	s14, [r5]
 801236e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80123c4 <tLadderFilter_initToPool+0x100>
 8012372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801237a:	dd0f      	ble.n	801239c <tLadderFilter_initToPool+0xd8>
    {
    	f->table = __filterTanhTable_96000;
 801237c:	4b12      	ldr	r3, [pc, #72]	; (80123c8 <tLadderFilter_initToPool+0x104>)
 801237e:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8012380:	ecbd 8b02 	vpop	{d8}
 8012384:	bd70      	pop	{r4, r5, r6, pc}
 8012386:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80123cc <tLadderFilter_initToPool+0x108>
 801238a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801238e:	f005 fd69 	bl	8017e64 <logf>
 8012392:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80123d0 <tLadderFilter_initToPool+0x10c>
 8012396:	ee20 0a27 	vmul.f32	s0, s0, s15
 801239a:	e7b7      	b.n	801230c <tLadderFilter_initToPool+0x48>
    	f->table = __filterTanhTable_48000;
 801239c:	4b0d      	ldr	r3, [pc, #52]	; (80123d4 <tLadderFilter_initToPool+0x110>)
 801239e:	6423      	str	r3, [r4, #64]	; 0x40
}
 80123a0:	e7ee      	b.n	8012380 <tLadderFilter_initToPool+0xbc>
 80123a2:	bf00      	nop
 80123a4:	473b8000 	.word	0x473b8000
 80123a8:	c4bb8000 	.word	0xc4bb8000
 80123ac:	40490fdb 	.word	0x40490fdb
 80123b0:	3dcccccd 	.word	0x3dcccccd
 80123b4:	3c23d70a 	.word	0x3c23d70a
 80123b8:	3ca3d70a 	.word	0x3ca3d70a
 80123bc:	3cf5c28f 	.word	0x3cf5c28f
 80123c0:	3d23d70a 	.word	0x3d23d70a
 80123c4:	479c4000 	.word	0x479c4000
 80123c8:	0801f14c 	.word	0x0801f14c
 80123cc:	3dfa7ed2 	.word	0x3dfa7ed2
 80123d0:	418a7fac 	.word	0x418a7fac
 80123d4:	0801b14c 	.word	0x0801b14c

080123d8 <tLadderFilter_init>:
{
 80123d8:	b508      	push	{r3, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 80123da:	3118      	adds	r1, #24
 80123dc:	f7ff ff72 	bl	80122c4 <tLadderFilter_initToPool>
}
 80123e0:	bd08      	pop	{r3, pc}

080123e2 <smoothABS>:
    _tLadderFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

Lfloat smoothABS ( Lfloat x, const Lfloat y) // y controls 'smoothness' usually between 0.002 -> 0.04
{
 80123e2:	b508      	push	{r3, lr}
 80123e4:	ed2d 8b02 	vpush	{d8}
 80123e8:	eeb0 8a60 	vmov.f32	s16, s1
//		Lfloat output2;
//		arm_sqrt_f32((x * x)  + y, &output1);
//		arm_sqrt_f32(y, &output2);
//		return output1 - output2;
//	#else
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80123ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80123f0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80123f4:	f006 f910 	bl	8018618 <sqrtf>
 80123f8:	eef0 8a40 	vmov.f32	s17, s0
 80123fc:	eeb0 0a48 	vmov.f32	s0, s16
 8012400:	f006 f90a 	bl	8018618 <sqrtf>
//	#endif
}
 8012404:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012408:	ecbd 8b02 	vpop	{d8}
 801240c:	bd08      	pop	{r3, pc}
	...

08012410 <smoothclip>:

Lfloat smoothclip (Lfloat x, const Lfloat a, const Lfloat b) // assuming symmetrical clipping
{
 8012410:	b508      	push	{r3, lr}
 8012412:	ed2d 8b06 	vpush	{d8-d10}
 8012416:	eeb0 9a40 	vmov.f32	s18, s0
 801241a:	eeb0 8a60 	vmov.f32	s16, s1
 801241e:	eef0 8a41 	vmov.f32	s17, s2
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8012422:	ed9f aa0e 	vldr	s20, [pc, #56]	; 801245c <smoothclip+0x4c>
 8012426:	eef0 0a4a 	vmov.f32	s1, s20
 801242a:	ee30 0a48 	vsub.f32	s0, s0, s16
 801242e:	f7ff ffd8 	bl	80123e2 <smoothABS>
 8012432:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8012436:	eef0 0a4a 	vmov.f32	s1, s20
 801243a:	ee39 0a68 	vsub.f32	s0, s18, s17
 801243e:	f7ff ffd0 	bl	80123e2 <smoothABS>
    x = x1 + (a+b);
 8012442:	ee38 8a28 	vadd.f32	s16, s16, s17
 8012446:	ee38 8a29 	vadd.f32	s16, s16, s19
    x = x - x2;
 801244a:	ee38 8a40 	vsub.f32	s16, s16, s0
    x = x * 0.5f;
    return (x);
}
 801244e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012452:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012456:	ecbd 8b06 	vpop	{d8-d10}
 801245a:	bd08      	pop	{r3, pc}
 801245c:	3c23d70a 	.word	0x3c23d70a

08012460 <tanhd>:

Lfloat tanhd(const Lfloat x, const Lfloat d, const Lfloat s)
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8012460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012464:	ee70 7a87 	vadd.f32	s15, s1, s14
 8012468:	ee67 7a81 	vmul.f32	s15, s15, s2
 801246c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012470:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012474:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012478:	ee70 0a20 	vadd.f32	s1, s0, s1
 801247c:	ee87 0aa0 	vdiv.f32	s0, s15, s1
}
 8012480:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012484:	4770      	bx	lr
	...

08012488 <tLadderFilter_tick>:

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	ed2d 8b0e 	vpush	{d8-d14}
    _tLadderFilter* f = *vf;
 801248e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8012490:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8012734 <tLadderFilter_tick+0x2ac>
 8012494:	ee70 da27 	vadd.f32	s27, s0, s15
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8012498:	2500      	movs	r5, #0
    Lfloat y3 = 0.0f;
 801249a:	ed9f aaa7 	vldr	s20, [pc, #668]	; 8012738 <tLadderFilter_tick+0x2b0>
    for (int i = 0; i < f->oversampling; i++) {
 801249e:	e100      	b.n	80126a2 <tLadderFilter_tick+0x21a>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 80124a0:	edd4 ca0c 	vldr	s25, [r4, #48]	; 0x30
 80124a4:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
 80124a8:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
 80124ac:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
 80124b0:	eeb0 1a4b 	vmov.f32	s2, s22
 80124b4:	eef0 0a6a 	vmov.f32	s1, s21
 80124b8:	ee3c 0a8a 	vadd.f32	s0, s25, s20
 80124bc:	f7ff ffd0 	bl	8012460 <tanhd>
 80124c0:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 80124c4:	ed94 da0d 	vldr	s26, [r4, #52]	; 0x34
 80124c8:	eeb0 1a4b 	vmov.f32	s2, s22
 80124cc:	eef0 0a6a 	vmov.f32	s1, s21
 80124d0:	ee3a 0a0d 	vadd.f32	s0, s20, s26
 80124d4:	f7ff ffc4 	bl	8012460 <tanhd>
 80124d8:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80124dc:	ed94 ea0e 	vldr	s28, [r4, #56]	; 0x38
 80124e0:	eeb0 1a4b 	vmov.f32	s2, s22
 80124e4:	eef0 0a6a 	vmov.f32	s1, s21
 80124e8:	ee3a 0a0e 	vadd.f32	s0, s20, s28
 80124ec:	f7ff ffb8 	bl	8012460 <tanhd>
 80124f0:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80124f4:	edd4 9a0f 	vldr	s19, [r4, #60]	; 0x3c
 80124f8:	eeb0 1a4b 	vmov.f32	s2, s22
 80124fc:	eef0 0a6a 	vmov.f32	s1, s21
 8012500:	ee3a 0a29 	vadd.f32	s0, s20, s19
 8012504:	f7ff ffac 	bl	8012460 <tanhd>
 8012508:	eeb0 aa40 	vmov.f32	s20, s0
        
        Lfloat den0 =1.0f / (1.0f + f->c*t0);
 801250c:	edd4 7a06 	vldr	s15, [r4, #24]
 8012510:	ee27 7aa8 	vmul.f32	s14, s15, s17
 8012514:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8012518:	ee77 6a01 	vadd.f32	s13, s14, s2
 801251c:	ee81 ca26 	vdiv.f32	s24, s2, s13
        Lfloat den1 =1.0f / (1.0f + f->c*t1);
 8012520:	ee67 5a88 	vmul.f32	s11, s15, s16
 8012524:	ee75 6a81 	vadd.f32	s13, s11, s2
 8012528:	eec1 ba26 	vdiv.f32	s23, s2, s13
        Lfloat den2 =1.0f / (1.0f + f->c*t2);
 801252c:	ee27 4a89 	vmul.f32	s8, s15, s18
 8012530:	ee74 6a01 	vadd.f32	s13, s8, s2
 8012534:	ee81 ba26 	vdiv.f32	s22, s2, s13
        Lfloat den3 =1.0f / (1.0f + f->c*t3);
 8012538:	ee27 6a80 	vmul.f32	s12, s15, s0
 801253c:	ee76 6a01 	vadd.f32	s13, s12, s2
 8012540:	eec1 aa26 	vdiv.f32	s21, s2, s13
        Lfloat g0 = 1.0f * den0;
        Lfloat g1 = 1.0f * den1;
        Lfloat g2 = 1.0f * den2;
        Lfloat g3 = 1.0f * den3;
        
        Lfloat z0 = f->c*t0 * den0;
 8012544:	ee27 7a0c 	vmul.f32	s14, s14, s24
        Lfloat z1 = f->c*t1 * den1;
 8012548:	ee65 5aab 	vmul.f32	s11, s11, s23
        Lfloat z2 = f->c*t2 * den2;
 801254c:	ee24 5a0b 	vmul.f32	s10, s8, s22
        Lfloat z3 = f->c*t3 * den3;
 8012550:	ee26 6a2a 	vmul.f32	s12, s12, s21
        
        Lfloat f3 = f->c       * t2*g3;
 8012554:	ee24 4a2a 	vmul.f32	s8, s8, s21
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8012558:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801255c:	ee63 4a88 	vmul.f32	s9, s7, s16
 8012560:	ee64 4a8b 	vmul.f32	s9, s9, s22
 8012564:	ee64 4a89 	vmul.f32	s9, s9, s18
 8012568:	ee64 4aaa 	vmul.f32	s9, s9, s21
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801256c:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8012570:	ee63 6aa8 	vmul.f32	s13, s7, s17
 8012574:	ee66 6aab 	vmul.f32	s13, s13, s23
 8012578:	ee66 6a88 	vmul.f32	s13, s13, s16
 801257c:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8012580:	ee66 6a89 	vmul.f32	s13, s13, s18
 8012584:	ee66 6aaa 	vmul.f32	s13, s13, s21
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 8012588:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801258c:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8012590:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8012594:	ee67 7aab 	vmul.f32	s15, s15, s23
 8012598:	ee67 7a88 	vmul.f32	s15, s15, s16
 801259c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80125a0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80125a4:	ee67 7aaa 	vmul.f32	s15, s15, s21
        
        Lfloat estimate =
        g3 * f->b[3] +
 80125a8:	ee29 0aaa 	vmul.f32	s0, s19, s21
        f3 * g2 * f->b[2] +
 80125ac:	ee2b 4a04 	vmul.f32	s8, s22, s8
 80125b0:	ee2e ea04 	vmul.f32	s28, s28, s8
        g3 * f->b[3] +
 80125b4:	ee30 0a0e 	vadd.f32	s0, s0, s28
        f2 * g1 * f->b[1] +
 80125b8:	ee6b 4aa4 	vmul.f32	s9, s23, s9
 80125bc:	ee2d da24 	vmul.f32	s26, s26, s9
        f3 * g2 * f->b[2] +
 80125c0:	ee30 0a0d 	vadd.f32	s0, s0, s26
        f1 * g0 * f->b[0] +
 80125c4:	ee6c 6a26 	vmul.f32	s13, s24, s13
 80125c8:	ee6c caa6 	vmul.f32	s25, s25, s13
        f2 * g1 * f->b[1] +
 80125cc:	ee30 0a2c 	vadd.f32	s0, s0, s25
        f0 * in;
 80125d0:	ee6d 7aa7 	vmul.f32	s15, s27, s15
        Lfloat estimate =
 80125d4:	ee70 7a27 	vadd.f32	s15, s0, s15
        
        // feedback gain coefficient, absolutely critical to get this correct
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80125d8:	ed94 0a07 	vldr	s0, [r4, #28]
 80125dc:	ee20 7a07 	vmul.f32	s14, s0, s14
 80125e0:	ee27 7a25 	vmul.f32	s14, s14, s11
 80125e4:	ee27 7a05 	vmul.f32	s14, s14, s10
 80125e8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80125ec:	ee37 7a01 	vadd.f32	s14, s14, s2
 80125f0:	eec1 9a07 	vdiv.f32	s19, s2, s14
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80125f4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80125f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80125fc:	f7ff ff08 	bl	8012410 <smoothclip>
 8012600:	ee20 0a29 	vmul.f32	s0, s0, s19
 8012604:	ee3d 0ac0 	vsub.f32	s0, s27, s0
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8012608:	ee68 8a8c 	vmul.f32	s17, s17, s24
 801260c:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
 8012610:	edd4 7a06 	vldr	s15, [r4, #24]
 8012614:	ee27 7a80 	vmul.f32	s14, s15, s0
 8012618:	ee35 7a87 	vadd.f32	s14, s11, s14
 801261c:	ee68 8a87 	vmul.f32	s17, s17, s14
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8012620:	ee28 8a2b 	vmul.f32	s16, s16, s23
 8012624:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8012628:	ee27 7aa8 	vmul.f32	s14, s15, s17
 801262c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8012630:	ee28 8a07 	vmul.f32	s16, s16, s14
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8012634:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8012638:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801263c:	ee27 7a88 	vmul.f32	s14, s15, s16
 8012640:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012644:	ee29 9a07 	vmul.f32	s18, s18, s14
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8012648:	ee2a aa2a 	vmul.f32	s20, s20, s21
 801264c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012650:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012658:	ee2a aa27 	vmul.f32	s20, s20, s15
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 801265c:	edd4 7a08 	vldr	s15, [r4, #32]
 8012660:	ee30 0a68 	vsub.f32	s0, s0, s17
 8012664:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012668:	ee75 5a80 	vadd.f32	s11, s11, s0
 801266c:	edc4 5a0c 	vstr	s11, [r4, #48]	; 0x30
        f->b[1] += f->c2 * (y0 - y1);
 8012670:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8012674:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8012678:	ee36 6a28 	vadd.f32	s12, s12, s17
 801267c:	ed84 6a0d 	vstr	s12, [r4, #52]	; 0x34
        f->b[2] += f->c2 * (y1 - y2);
 8012680:	ee38 8a49 	vsub.f32	s16, s16, s18
 8012684:	ee27 8a88 	vmul.f32	s16, s15, s16
 8012688:	ee76 6a88 	vadd.f32	s13, s13, s16
 801268c:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
        f->b[3] += f->c2 * (y2 - y3);
 8012690:	ee39 9a4a 	vsub.f32	s18, s18, s20
 8012694:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012698:	ee37 7a27 	vadd.f32	s14, s14, s15
 801269c:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    for (int i = 0; i < f->oversampling; i++) {
 80126a0:	3501      	adds	r5, #1
 80126a2:	6923      	ldr	r3, [r4, #16]
 80126a4:	42ab      	cmp	r3, r5
 80126a6:	f73f aefb 	bgt.w	80124a0 <tLadderFilter_tick+0x18>
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80126aa:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80126ae:	eddf 0a22 	vldr	s1, [pc, #136]	; 8012738 <tLadderFilter_tick+0x2b0>
 80126b2:	ed94 0a07 	vldr	s0, [r4, #28]
 80126b6:	f7ff feab 	bl	8012410 <smoothclip>
 80126ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80126be:	ee30 0a06 	vadd.f32	s0, s0, s12
    return fast_tanh5(y3 * compensation);
 80126c2:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 80126c6:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801273c <tLadderFilter_tick+0x2b4>
 80126ca:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80126ce:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80126d2:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80126d6:	ee7a 7a27 	vadd.f32	s15, s20, s15
 80126da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8012740 <tLadderFilter_tick+0x2b8>
 80126de:	ee2a 7a07 	vmul.f32	s14, s20, s14
 80126e2:	ee2a 7a07 	vmul.f32	s14, s20, s14
 80126e6:	ee2a 7a07 	vmul.f32	s14, s20, s14
 80126ea:	ee2a 7a07 	vmul.f32	s14, s20, s14
 80126ee:	ee2a aa07 	vmul.f32	s20, s20, s14
 80126f2:	ee77 7a8a 	vadd.f32	s15, s15, s20
    Lfloat den = InvSqrt(1.0f + a * a);
 80126f6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80126fa:	ee76 6a86 	vadd.f32	s13, s13, s12
    Lfloat xhalf = 0.5f*x;
 80126fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012702:	ee26 7a87 	vmul.f32	s14, s13, s14
    int i = *(int*)&x; // get bits for floating value
 8012706:	ee16 2a90 	vmov	r2, s13
    x = *(Lfloat*)&i; // convert bits back to float
 801270a:	4b0e      	ldr	r3, [pc, #56]	; (8012744 <tLadderFilter_tick+0x2bc>)
 801270c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8012710:	ee00 3a10 	vmov	s0, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 8012714:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012718:	ee20 7a07 	vmul.f32	s14, s0, s14
 801271c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8012720:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012724:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8012728:	ee27 0a80 	vmul.f32	s0, s15, s0
 801272c:	ecbd 8b0e 	vpop	{d8-d14}
 8012730:	bd38      	pop	{r3, r4, r5, pc}
 8012732:	bf00      	nop
 8012734:	3c75c28f 	.word	0x3c75c28f
 8012738:	00000000 	.word	0x00000000
 801273c:	3e28d927 	.word	0x3e28d927
 8012740:	3c217586 	.word	0x3c217586
 8012744:	5f3759df 	.word	0x5f3759df

08012748 <tLadderFilter_setFreqFast>:
    f->c2 = 2.0f * f->c;
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
 8012748:	6802      	ldr	r2, [r0, #0]
    cutoff += 3.0f;
 801274a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801274e:	ee30 0a27 	vadd.f32	s0, s0, s15
    f->cutoffMIDI = cutoff;
 8012752:	ed82 0a11 	vstr	s0, [r2, #68]	; 0x44
    cutoff *= 30.567164179104478f;
 8012756:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80127c4 <tLadderFilter_setFreqFast+0x7c>
 801275a:	ee20 0a27 	vmul.f32	s0, s0, s15

    int32_t intVer = (int32_t)cutoff;
 801275e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012762:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 8012766:	f640 71fe 	movw	r1, #4094	; 0xffe
 801276a:	428b      	cmp	r3, r1
 801276c:	dc03      	bgt.n	8012776 <tLadderFilter_setFreqFast+0x2e>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 801276e:	2b00      	cmp	r3, #0
 8012770:	da03      	bge.n	801277a <tLadderFilter_setFreqFast+0x32>
    {
    	intVer = 0;
 8012772:	2300      	movs	r3, #0
 8012774:	e001      	b.n	801277a <tLadderFilter_setFreqFast+0x32>
    	intVer = 4094;
 8012776:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801277a:	ee07 3a90 	vmov	s15, r3
 801277e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012782:	ee30 0a67 	vsub.f32	s0, s0, s15

    f->c = ((f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer)) * f->sampleRatio;
 8012786:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8012788:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801278c:	edd0 7a00 	vldr	s15, [r0]
 8012790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012794:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012798:	ee67 7a87 	vmul.f32	s15, s15, s14
 801279c:	3301      	adds	r3, #1
 801279e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80127a2:	ed91 7a00 	vldr	s14, [r1]
 80127a6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80127aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127ae:	ed92 7a03 	vldr	s14, [r2, #12]
 80127b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127b6:	edc2 7a06 	vstr	s15, [r2, #24]
    f->c2 = 2.0f * f->c;
 80127ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80127be:	edc2 7a08 	vstr	s15, [r2, #32]
}
 80127c2:	4770      	bx	lr
 80127c4:	41f4898d 	.word	0x41f4898d

080127c8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
    _tLadderFilter* f = *vf;
 80127c8:	6803      	ldr	r3, [r0, #0]
    if (val < min)
 80127ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80127f8 <tLadderFilter_setQ+0x30>
 80127ce:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80127d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d6:	d409      	bmi.n	80127ec <tLadderFilter_setQ+0x24>
    else if (val > max)
 80127d8:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80127dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80127e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e4:	dd04      	ble.n	80127f0 <tLadderFilter_setQ+0x28>
        return max;
 80127e6:	eeb0 0a67 	vmov.f32	s0, s15
 80127ea:	e001      	b.n	80127f0 <tLadderFilter_setQ+0x28>
        return min;
 80127ec:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80127f8 <tLadderFilter_setQ+0x30>
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 80127f0:	ed83 0a07 	vstr	s0, [r3, #28]
}
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	3e4ccccd 	.word	0x3e4ccccd

080127fc <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
 80127fc:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 80127fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012802:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012806:	edc3 7a02 	vstr	s15, [r3, #8]
    f->sampleRatio = 48000.0f / sr * f->invOS;
 801280a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012838 <tLadderFilter_setSampleRate+0x3c>
 801280e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012812:	ed93 7a05 	vldr	s14, [r3, #20]
 8012816:	ee67 7a87 	vmul.f32	s15, s15, s14
 801281a:	edc3 7a03 	vstr	s15, [r3, #12]
    if (sr > 80000)
 801281e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801283c <tLadderFilter_setSampleRate+0x40>
 8012822:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282a:	dd02      	ble.n	8012832 <tLadderFilter_setSampleRate+0x36>
    {
    	f->table = __filterTanhTable_96000;
 801282c:	4a04      	ldr	r2, [pc, #16]	; (8012840 <tLadderFilter_setSampleRate+0x44>)
 801282e:	641a      	str	r2, [r3, #64]	; 0x40
 8012830:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012832:	4a04      	ldr	r2, [pc, #16]	; (8012844 <tLadderFilter_setSampleRate+0x48>)
 8012834:	641a      	str	r2, [r3, #64]	; 0x40
    }
}
 8012836:	4770      	bx	lr
 8012838:	473b8000 	.word	0x473b8000
 801283c:	479c4000 	.word	0x479c4000
 8012840:	0801f14c 	.word	0x0801f14c
 8012844:	0801b14c 	.word	0x0801b14c

08012848 <tTiltFilter_initToPool>:
{
    tTiltFilter_initToPool(vf, cutoff, &leaf->mempool);
}

void    tTiltFilter_initToPool     (tTiltFilter* const vf, Lfloat cutoff, tMempool* const mp)
{
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	ed2d 8b02 	vpush	{d8}
 801284e:	4605      	mov	r5, r0
 8012850:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 8012854:	680c      	ldr	r4, [r1, #0]
    _tTiltFilter* f = *vf = (_tTiltFilter*) mpool_alloc(sizeof(_tTiltFilter), m);
 8012856:	4621      	mov	r1, r4
 8012858:	2028      	movs	r0, #40	; 0x28
 801285a:	f000 fa27 	bl	8012cac <mpool_alloc>
 801285e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8012860:	6004      	str	r4, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8012862:	6863      	ldr	r3, [r4, #4]
    f->cutoff = cutoff;
 8012864:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invAmp = 1.0f / (6.0f/logf(2.0f));
 8012868:	4a12      	ldr	r2, [pc, #72]	; (80128b4 <tTiltFilter_initToPool+0x6c>)
 801286a:	6242      	str	r2, [r0, #36]	; 0x24
    f->gfactor = 5.0f;
 801286c:	4a12      	ldr	r2, [pc, #72]	; (80128b8 <tTiltFilter_initToPool+0x70>)
 801286e:	60c2      	str	r2, [r0, #12]
    

    f->sr3 = leaf->sampleRate*3.0f;
 8012870:	edd3 7a00 	vldr	s15, [r3]
 8012874:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012878:	ee67 7a87 	vmul.f32	s15, s15, s14
 801287c:	edc0 7a02 	vstr	s15, [r0, #8]
    Lfloat omega = TWO_PI*cutoff;
 8012880:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80128bc <tTiltFilter_initToPool+0x74>
 8012884:	ee28 0a07 	vmul.f32	s0, s16, s14
    Lfloat n = 1.0f/(f->sr3 + omega);
 8012888:	ee37 7a80 	vadd.f32	s14, s15, s0
 801288c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012890:	eec6 6a07 	vdiv.f32	s13, s12, s14
    f->a0 = 2.0f*omega*n;
 8012894:	ee30 7a00 	vadd.f32	s14, s0, s0
 8012898:	ee27 7a26 	vmul.f32	s14, s14, s13
 801289c:	ed80 7a04 	vstr	s14, [r0, #16]
    f->b1 = (f->sr3 - omega)*n;
 80128a0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80128a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128a8:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80128ac:	ecbd 8b02 	vpop	{d8}
 80128b0:	bd38      	pop	{r3, r4, r5, pc}
 80128b2:	bf00      	nop
 80128b4:	3dec9821 	.word	0x3dec9821
 80128b8:	40a00000 	.word	0x40a00000
 80128bc:	40c90fdb 	.word	0x40c90fdb

080128c0 <tTiltFilter_init>:
{
 80128c0:	b508      	push	{r3, lr}
    tTiltFilter_initToPool(vf, cutoff, &leaf->mempool);
 80128c2:	3118      	adds	r1, #24
 80128c4:	f7ff ffc0 	bl	8012848 <tTiltFilter_initToPool>
}
 80128c8:	bd08      	pop	{r3, pc}

080128ca <tTiltFilter_tick>:



Lfloat   tTiltFilter_tick               (tTiltFilter* const vf, Lfloat in)
{
    _tTiltFilter* f = *vf;
 80128ca:	6803      	ldr	r3, [r0, #0]
    f->lp_out = f->a0*in + f->b1 * f->lp_out;
 80128cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80128d0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80128d4:	ed93 7a05 	vldr	s14, [r3, #20]
 80128d8:	edd3 6a06 	vldr	s13, [r3, #24]
 80128dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80128e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80128e4:	edc3 7a06 	vstr	s15, [r3, #24]
    return in + f->lgain*f->lp_out + f->hgain*(in - f->lp_out);
 80128e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80128ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80128f0:	ee37 7a00 	vadd.f32	s14, s14, s0
 80128f4:	edd3 6a08 	vldr	s13, [r3, #32]
 80128f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80128fc:	ee26 0a80 	vmul.f32	s0, s13, s0
}
 8012900:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012904:	4770      	bx	lr
	...

08012908 <tTiltFilter_setTilt>:

void    tTiltFilter_setTilt     (tTiltFilter* const vf, Lfloat tilt)
{
    _tTiltFilter* f = *vf;
 8012908:	6803      	ldr	r3, [r0, #0]
    Lfloat g1;
    Lfloat g2;
    if (tilt > 0.0f)
 801290a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012912:	dd3e      	ble.n	8012992 <tTiltFilter_setTilt+0x8a>
    {
        g1 = -f->gfactor*tilt;
 8012914:	edd3 7a03 	vldr	s15, [r3, #12]
 8012918:	ee67 7ac0 	vnmul.f32	s15, s15, s0
        g1 = -tilt;
        g2 = f->gfactor*tilt;
    }
    
    //two separate gains
    f->lgain = fasterexpf(g1*f->invAmp)-1.0f;
 801291c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8012920:	ee67 7a27 	vmul.f32	s15, s14, s15
    x = 1.0f + (x * 0.00390625f);
 8012924:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80129a0 <tTiltFilter_setTilt+0x98>
 8012928:	ee67 7a86 	vmul.f32	s15, s15, s12
 801292c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012930:	ee77 7aa6 	vadd.f32	s15, s15, s13
    x *= x; x *= x; x *= x; x *= x;
 8012934:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801293c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012940:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8012944:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012948:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801294c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012950:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012954:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012958:	edc3 7a07 	vstr	s15, [r3, #28]
    f->hgain = fasterexpf(g2*f->invAmp)-1.0f;
 801295c:	ee67 7a00 	vmul.f32	s15, s14, s0
    x = 1.0f + (x * 0.00390625f);
 8012960:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012964:	ee77 7aa6 	vadd.f32	s15, s15, s13
    x *= x; x *= x; x *= x; x *= x;
 8012968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801296c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012970:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012974:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8012978:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801297c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012980:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012984:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012988:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801298c:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8012990:	4770      	bx	lr
        g1 = -tilt;
 8012992:	eef1 7a40 	vneg.f32	s15, s0
        g2 = f->gfactor*tilt;
 8012996:	ed93 7a03 	vldr	s14, [r3, #12]
 801299a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801299e:	e7bd      	b.n	801291c <tTiltFilter_setTilt+0x14>
 80129a0:	3b800000 	.word	0x3b800000

080129a4 <tTiltFilter_setSampleRate>:

void    tTiltFilter_setSampleRate(tTiltFilter* const vf, Lfloat sr)
{
    _tTiltFilter* f = *vf;
 80129a4:	6803      	ldr	r3, [r0, #0]
    
    f->sr3 = sr*3.0f;
 80129a6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80129aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80129ae:	ed83 0a02 	vstr	s0, [r3, #8]
    Lfloat omega = TWO_PI*f->cutoff;
 80129b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80129b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80129e4 <tTiltFilter_setSampleRate+0x40>
 80129ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat n = 1.0f/(f->sr3 + omega);
 80129be:	ee30 7a27 	vadd.f32	s14, s0, s15
 80129c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80129c6:	eec6 6a07 	vdiv.f32	s13, s12, s14
    f->a0 = 2.0f*omega*n;
 80129ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80129ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80129d2:	ed83 7a04 	vstr	s14, [r3, #16]
    f->b1 = (f->sr3 - omega)*n;
 80129d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80129da:	ee20 0a26 	vmul.f32	s0, s0, s13
 80129de:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80129e2:	4770      	bx	lr
 80129e4:	40c90fdb 	.word	0x40c90fdb

080129e8 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	ed2d 8b04 	vpush	{d8-d9}
 80129ee:	4606      	mov	r6, r0
 80129f0:	eeb0 9a40 	vmov.f32	s18, s0
 80129f4:	eeb0 8a60 	vmov.f32	s16, s1
 80129f8:	eef0 8a61 	vmov.f32	s17, s3
 80129fc:	460d      	mov	r5, r1
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 80129fe:	ee31 1a60 	vsub.f32	s2, s2, s1
 8012a02:	1e4b      	subs	r3, r1, #1
 8012a04:	ee07 3a90 	vmov	s15, r3
 8012a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a0c:	eec1 9a27 	vdiv.f32	s19, s2, s15
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8012a10:	2400      	movs	r4, #0
 8012a12:	e00e      	b.n	8012a32 <LEAF_generate_exp+0x4a>
    {
        buffer[i] = powf(base, x) + offset;
 8012a14:	eef0 0a48 	vmov.f32	s1, s16
 8012a18:	eeb0 0a49 	vmov.f32	s0, s18
 8012a1c:	f005 fc28 	bl	8018270 <powf>
 8012a20:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012a24:	ee30 0a28 	vadd.f32	s0, s0, s17
 8012a28:	ed83 0a00 	vstr	s0, [r3]
        x += increment;
 8012a2c:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8012a30:	3401      	adds	r4, #1
 8012a32:	42ac      	cmp	r4, r5
 8012a34:	dbee      	blt.n	8012a14 <LEAF_generate_exp+0x2c>
    }
}
 8012a36:	ecbd 8b04 	vpop	{d8-d9}
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}

08012a3c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	ed2d 8b06 	vpush	{d8-d10}
 8012a42:	4606      	mov	r6, r0
 8012a44:	eef0 8a40 	vmov.f32	s17, s0
 8012a48:	460d      	mov	r5, r1
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8012a4a:	ee31 0a40 	vsub.f32	s0, s2, s0
 8012a4e:	ee30 9ae8 	vsub.f32	s18, s1, s17
 8012a52:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8012a56:	f005 fa05 	bl	8017e64 <logf>
 8012a5a:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012aac <LEAF_generate_table_skew_non_sym+0x70>
 8012a5e:	ee87 aa80 	vdiv.f32	s20, s15, s0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8012a62:	1e6b      	subs	r3, r5, #1
 8012a64:	ee07 3a90 	vmov	s15, r3
 8012a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a70:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8012a74:	2400      	movs	r4, #0
    Lfloat x = 0.0000000001f;
 8012a76:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8012ab0 <LEAF_generate_table_skew_non_sym+0x74>
    for (int i = 0; i < size; i++)
 8012a7a:	e012      	b.n	8012aa2 <LEAF_generate_table_skew_non_sym+0x66>
    {
        proportion = expf (logf(x) / skew);
 8012a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8012a80:	f005 f9f0 	bl	8017e64 <logf>
 8012a84:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 8012a88:	f005 f978 	bl	8017d7c <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8012a8c:	ee69 7a00 	vmul.f32	s15, s18, s0
 8012a90:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012a94:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8012a98:	edc3 7a00 	vstr	s15, [r3]
        x += increment;
 8012a9c:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8012aa0:	3401      	adds	r4, #1
 8012aa2:	42ac      	cmp	r4, r5
 8012aa4:	dbea      	blt.n	8012a7c <LEAF_generate_table_skew_non_sym+0x40>
    }
}
 8012aa6:	ecbd 8b06 	vpop	{d8-d10}
 8012aaa:	bd70      	pop	{r4, r5, r6, pc}
 8012aac:	bf317218 	.word	0xbf317218
 8012ab0:	2edbe6ff 	.word	0x2edbe6ff

08012ab4 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8012ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ab6:	ed2d 8b02 	vpush	{d8}
 8012aba:	4607      	mov	r7, r0
 8012abc:	460e      	mov	r6, r1
 8012abe:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8012ac2:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8012ac6:	1e4b      	subs	r3, r1, #1
 8012ac8:	ee07 3a90 	vmov	s15, r3
 8012acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ad0:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 8012ad4:	2400      	movs	r4, #0
 8012ad6:	e00e      	b.n	8012af6 <LEAF_generate_atodb+0x42>
    {
        buffer[i] = atodb(x);
 8012ad8:	eb07 0584 	add.w	r5, r7, r4, lsl #2
    return 20.0f*log10f(a);
 8012adc:	eeb0 0a48 	vmov.f32	s0, s16
 8012ae0:	f005 fd6c 	bl	80185bc <log10f>
 8012ae4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8012ae8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012aec:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8012af0:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8012af4:	3401      	adds	r4, #1
 8012af6:	42b4      	cmp	r4, r6
 8012af8:	dbee      	blt.n	8012ad8 <LEAF_generate_atodb+0x24>
    }
}
 8012afa:	ecbd 8b02 	vpop	{d8}
 8012afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b00 <LEAF_generate_dbtoa>:

void LEAF_generate_dbtoa(Lfloat* buffer, int size, Lfloat minDb, Lfloat maxDb)
{
 8012b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b02:	ed2d 8b02 	vpush	{d8}
 8012b06:	4607      	mov	r7, r0
 8012b08:	460e      	mov	r6, r1
 8012b0a:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8012b0e:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8012b12:	1e4b      	subs	r3, r1, #1
 8012b14:	ee07 3a90 	vmov	s15, r3
 8012b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b1c:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    Lfloat x = minDb;
    for (int i = 0; i < size; i++)
 8012b20:	2400      	movs	r4, #0
 8012b22:	e00e      	b.n	8012b42 <LEAF_generate_dbtoa+0x42>
    {
        buffer[i] = dbtoa(x);
 8012b24:	eb07 0584 	add.w	r5, r7, r4, lsl #2
    return powf(10.0f, db * 0.05f);
 8012b28:	eddf 0a08 	vldr	s1, [pc, #32]	; 8012b4c <LEAF_generate_dbtoa+0x4c>
 8012b2c:	ee68 0a20 	vmul.f32	s1, s16, s1
 8012b30:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012b34:	f005 fb9c 	bl	8018270 <powf>
 8012b38:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8012b3c:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8012b40:	3401      	adds	r4, #1
 8012b42:	42b4      	cmp	r4, r6
 8012b44:	dbee      	blt.n	8012b24 <LEAF_generate_dbtoa+0x24>
    }
}
 8012b46:	ecbd 8b02 	vpop	{d8}
 8012b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b4c:	3d4ccccd 	.word	0x3d4ccccd

08012b50 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(Lfloat* buffer, Lfloat startMIDI, Lfloat endMIDI, int size)
{
 8012b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b52:	ed2d 8b04 	vpush	{d8-d9}
 8012b56:	4607      	mov	r7, r0
 8012b58:	eef0 8a40 	vmov.f32	s17, s0
 8012b5c:	460e      	mov	r6, r1
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8012b5e:	1e4b      	subs	r3, r1, #1
 8012b60:	ee07 3a90 	vmov	s15, r3
 8012b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b6c:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat x = 0.0f;
    Lfloat scalar = (endMIDI-startMIDI);
 8012b70:	ee30 9ac0 	vsub.f32	s18, s1, s0
    for (int i = 0; i < size; i++)
 8012b74:	2400      	movs	r4, #0
    Lfloat x = 0.0f;
 8012b76:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8012bd8 <LEAF_generate_mtof+0x88>
    for (int i = 0; i < size; i++)
 8012b7a:	e006      	b.n	8012b8a <LEAF_generate_mtof+0x3a>
    if (f <= -1500.0f) return(0);
 8012b7c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012bd8 <LEAF_generate_mtof+0x88>
    {
        Lfloat midiVal = (x * scalar) + startMIDI;
        buffer[i] = mtof(midiVal);
 8012b80:	edc5 7a00 	vstr	s15, [r5]
        x += increment;
 8012b84:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8012b88:	3401      	adds	r4, #1
 8012b8a:	42b4      	cmp	r4, r6
 8012b8c:	da21      	bge.n	8012bd2 <LEAF_generate_mtof+0x82>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8012b8e:	ee68 7a09 	vmul.f32	s15, s16, s18
 8012b92:	ee77 7aa8 	vadd.f32	s15, s15, s17
        buffer[i] = mtof(midiVal);
 8012b96:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8012b9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012bdc <LEAF_generate_mtof+0x8c>
 8012b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba6:	d9e9      	bls.n	8012b7c <LEAF_generate_mtof+0x2c>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8012ba8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012be0 <LEAF_generate_mtof+0x90>
 8012bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb4:	dc0a      	bgt.n	8012bcc <LEAF_generate_mtof+0x7c>
    else return (8.17579891564f * expf(0.0577622650f * f));
 8012bb6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8012be4 <LEAF_generate_mtof+0x94>
 8012bba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012bbe:	f005 f8dd 	bl	8017d7c <expf>
 8012bc2:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012be8 <LEAF_generate_mtof+0x98>
 8012bc6:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012bca:	e7d9      	b.n	8012b80 <LEAF_generate_mtof+0x30>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8012bcc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012bec <LEAF_generate_mtof+0x9c>
 8012bd0:	e7d6      	b.n	8012b80 <LEAF_generate_mtof+0x30>
    }
}
 8012bd2:	ecbd 8b04 	vpop	{d8-d9}
 8012bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd8:	00000000 	.word	0x00000000
 8012bdc:	c4bb8000 	.word	0xc4bb8000
 8012be0:	44bb6000 	.word	0x44bb6000
 8012be4:	3d6c9820 	.word	0x3d6c9820
 8012be8:	4102d013 	.word	0x4102d013
 8012bec:	7f76f0e1 	.word	0x7f76f0e1

08012bf0 <fast_sinf2>:
Lfloat fast_sinf2(Lfloat x)
{
    Lfloat invert = 1.0f;
    Lfloat out;

    x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8012bf0:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012c5c <fast_sinf2+0x6c>
 8012bf4:	ee60 7a27 	vmul.f32	s15, s0, s15

    if (x < 0.0f)
 8012bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c00:	d426      	bmi.n	8012c50 <fast_sinf2+0x60>
    Lfloat invert = 1.0f;
 8012c02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    {
        x *= -1.0f;
        invert = -1.0f;
    }
    int intX = ((int)x) & 2047;
 8012c06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012c0a:	ee17 3a10 	vmov	r3, s14
 8012c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
    int intXNext = (intX + 1) & 2047;
 8012c12:	1c59      	adds	r1, r3, #1
 8012c14:	f3c1 010a 	ubfx	r1, r1, #0, #11
    Lfloat LfloatX = x-intX;
 8012c18:	ee07 3a10 	vmov	s14, r3
 8012c1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c20:	ee77 7ac7 	vsub.f32	s15, s15, s14

    out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8012c24:	4a0e      	ldr	r2, [pc, #56]	; (8012c60 <fast_sinf2+0x70>)
 8012c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c2a:	edd3 6a00 	vldr	s13, [r3]
 8012c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c36:	ee66 6a87 	vmul.f32	s13, s13, s14
    out += __leaf_table_sinewave[intXNext] * LfloatX;
 8012c3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012c3e:	ed92 7a00 	vldr	s14, [r2]
 8012c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
    out *= invert;
    return out;
}
 8012c4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c4e:	4770      	bx	lr
        x *= -1.0f;
 8012c50:	eef1 7a67 	vneg.f32	s15, s15
        invert = -1.0f;
 8012c54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012c58:	e7d5      	b.n	8012c06 <fast_sinf2+0x16>
 8012c5a:	bf00      	nop
 8012c5c:	43a2f983 	.word	0x43a2f983
 8012c60:	080267cc 	.word	0x080267cc

08012c64 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8012c64:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8012c66:	6853      	ldr	r3, [r2, #4]
 8012c68:	2410      	movs	r4, #16
 8012c6a:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8012c6c:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	60d3      	str	r3, [r2, #12]
    if (size < pool->leaf->header_size)
 8012c72:	6854      	ldr	r4, [r2, #4]
 8012c74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c76:	428b      	cmp	r3, r1
 8012c78:	d800      	bhi.n	8012c7c <mpool_create+0x18>
 8012c7a:	460b      	mov	r3, r1
    {
        size = pool->leaf->header_size;
    }
    pool->msize  = size;
 8012c7c:	6113      	str	r3, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8012c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c80:	1a5b      	subs	r3, r3, r1
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8012c82:	4401      	add	r1, r0
 8012c84:	6001      	str	r1, [r0, #0]
    node->next = next;
 8012c86:	2100      	movs	r1, #0
 8012c88:	6041      	str	r1, [r0, #4]
    node->prev = prev;
 8012c8a:	6081      	str	r1, [r0, #8]
    node->size = size;
 8012c8c:	60c3      	str	r3, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8012c8e:	6150      	str	r0, [r2, #20]
}
 8012c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c94:	4770      	bx	lr

08012c96 <leaf_pool_init>:
{
 8012c96:	b538      	push	{r3, r4, r5, lr}
 8012c98:	4604      	mov	r4, r0
 8012c9a:	4608      	mov	r0, r1
 8012c9c:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 8012c9e:	f104 051c 	add.w	r5, r4, #28
 8012ca2:	462a      	mov	r2, r5
 8012ca4:	f7ff ffde 	bl	8012c64 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 8012ca8:	61a5      	str	r5, [r4, #24]
}
 8012caa:	bd38      	pop	{r3, r4, r5, pc}

08012cac <mpool_alloc>:
{
 8012cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cae:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8012cb0:	684a      	ldr	r2, [r1, #4]
 8012cb2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8012cb4:	3301      	adds	r3, #1
 8012cb6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8012cb8:	694c      	ldr	r4, [r1, #20]
 8012cba:	b1ac      	cbz	r4, 8012ce8 <mpool_alloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8012cbc:	1dc2      	adds	r2, r0, #7
 8012cbe:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8012cc2:	68e3      	ldr	r3, [r4, #12]
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d226      	bcs.n	8012d16 <mpool_alloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8012cc8:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8012cca:	2c00      	cmp	r4, #0
 8012ccc:	d1f9      	bne.n	8012cc2 <mpool_alloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8012cce:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8012cd2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012cd6:	1a9b      	subs	r3, r3, r2
 8012cd8:	4283      	cmp	r3, r0
 8012cda:	d916      	bls.n	8012d0a <mpool_alloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8012cdc:	2101      	movs	r1, #1
 8012cde:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012ce2:	f004 ffb1 	bl	8017c48 <LEAF_internalErrorCallback>
 8012ce6:	e057      	b.n	8012d98 <mpool_alloc+0xec>
        if ((pool->msize - pool->usize) > asize)
 8012ce8:	690b      	ldr	r3, [r1, #16]
 8012cea:	68ca      	ldr	r2, [r1, #12]
 8012cec:	1a9b      	subs	r3, r3, r2
 8012cee:	4283      	cmp	r3, r0
 8012cf0:	d905      	bls.n	8012cfe <mpool_alloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8012cf2:	2101      	movs	r1, #1
 8012cf4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012cf8:	f004 ffa6 	bl	8017c48 <LEAF_internalErrorCallback>
 8012cfc:	e04c      	b.n	8012d98 <mpool_alloc+0xec>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012cfe:	2100      	movs	r1, #0
 8012d00:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012d04:	f004 ffa0 	bl	8017c48 <LEAF_internalErrorCallback>
        return NULL;
 8012d08:	e046      	b.n	8012d98 <mpool_alloc+0xec>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012d10:	f004 ff9a 	bl	8017c48 <LEAF_internalErrorCallback>
            return NULL;
 8012d14:	e040      	b.n	8012d98 <mpool_alloc+0xec>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8012d16:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8012d18:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8012d1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012d1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012d20:	4281      	cmp	r1, r0
 8012d22:	d22c      	bcs.n	8012d7e <mpool_alloc+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012d24:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8012d28:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012d2a:	440a      	add	r2, r1
 8012d2c:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 8012d2e:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 8012d30:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 8012d32:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8012d34:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8012d36:	4419      	add	r1, r3
 8012d38:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8012d3a:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8012d3c:	609e      	str	r6, [r3, #8]
    node->size = size;
 8012d3e:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 8012d40:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012d44:	42a2      	cmp	r2, r4
 8012d46:	d01d      	beq.n	8012d84 <mpool_alloc+0xd8>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8012d48:	6863      	ldr	r3, [r4, #4]
 8012d4a:	b10b      	cbz	r3, 8012d50 <mpool_alloc+0xa4>
    {
        // Close the link
        node->next->prev = node->prev;
 8012d4c:	68a2      	ldr	r2, [r4, #8]
 8012d4e:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8012d50:	68a3      	ldr	r3, [r4, #8]
 8012d52:	b10b      	cbz	r3, 8012d58 <mpool_alloc+0xac>
    {
        // Close the link
        node->prev->next = node->next;
 8012d54:	6862      	ldr	r2, [r4, #4]
 8012d56:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8012d5c:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8012d5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012d62:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8012d64:	68e2      	ldr	r2, [r4, #12]
 8012d66:	441a      	add	r2, r3
 8012d68:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	f8cc 300c 	str.w	r3, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8012d72:	694b      	ldr	r3, [r1, #20]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	dd0e      	ble.n	8012d96 <mpool_alloc+0xea>
        char* new_pool = (char*)node_to_alloc->pool;
 8012d78:	6821      	ldr	r1, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	e008      	b.n	8012d90 <mpool_alloc+0xe4>
        node_to_alloc->size += leftover;
 8012d7e:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8012d80:	6863      	ldr	r3, [r4, #4]
 8012d82:	e7dd      	b.n	8012d40 <mpool_alloc+0x94>
        pool->head = new_node;
 8012d84:	f8cc 3014 	str.w	r3, [ip, #20]
 8012d88:	e7de      	b.n	8012d48 <mpool_alloc+0x9c>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	54ca      	strb	r2, [r1, r3]
 8012d8e:	3301      	adds	r3, #1
 8012d90:	68e2      	ldr	r2, [r4, #12]
 8012d92:	429a      	cmp	r2, r3
 8012d94:	d8f9      	bhi.n	8012d8a <mpool_alloc+0xde>
    return node_to_alloc->pool;
 8012d96:	6824      	ldr	r4, [r4, #0]
}
 8012d98:	4620      	mov	r0, r4
 8012d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d9c <mpool_calloc>:
{
 8012d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d9e:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8012da0:	684a      	ldr	r2, [r1, #4]
 8012da2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8012da4:	3301      	adds	r3, #1
 8012da6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8012da8:	694c      	ldr	r4, [r1, #20]
 8012daa:	b1ac      	cbz	r4, 8012dd8 <mpool_calloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8012dac:	1dc2      	adds	r2, r0, #7
 8012dae:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8012db2:	68e3      	ldr	r3, [r4, #12]
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d226      	bcs.n	8012e06 <mpool_calloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8012db8:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8012dba:	2c00      	cmp	r4, #0
 8012dbc:	d1f9      	bne.n	8012db2 <mpool_calloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8012dbe:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8012dc2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012dc6:	1a9b      	subs	r3, r3, r2
 8012dc8:	4283      	cmp	r3, r0
 8012dca:	d916      	bls.n	8012dfa <mpool_calloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8012dcc:	2101      	movs	r1, #1
 8012dce:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012dd2:	f004 ff39 	bl	8017c48 <LEAF_internalErrorCallback>
 8012dd6:	e053      	b.n	8012e80 <mpool_calloc+0xe4>
        if ((pool->msize - pool->usize) > asize)
 8012dd8:	690b      	ldr	r3, [r1, #16]
 8012dda:	68ca      	ldr	r2, [r1, #12]
 8012ddc:	1a9b      	subs	r3, r3, r2
 8012dde:	4283      	cmp	r3, r0
 8012de0:	d905      	bls.n	8012dee <mpool_calloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8012de2:	2101      	movs	r1, #1
 8012de4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012de8:	f004 ff2e 	bl	8017c48 <LEAF_internalErrorCallback>
 8012dec:	e048      	b.n	8012e80 <mpool_calloc+0xe4>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012dee:	2100      	movs	r1, #0
 8012df0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012df4:	f004 ff28 	bl	8017c48 <LEAF_internalErrorCallback>
        return NULL;
 8012df8:	e042      	b.n	8012e80 <mpool_calloc+0xe4>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012dfa:	2100      	movs	r1, #0
 8012dfc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012e00:	f004 ff22 	bl	8017c48 <LEAF_internalErrorCallback>
            return NULL;
 8012e04:	e03c      	b.n	8012e80 <mpool_calloc+0xe4>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8012e06:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8012e08:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8012e0a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012e0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012e10:	4281      	cmp	r1, r0
 8012e12:	d227      	bcs.n	8012e64 <mpool_calloc+0xc8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012e14:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8012e18:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012e1a:	440a      	add	r2, r1
 8012e1c:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 8012e1e:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 8012e20:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 8012e22:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8012e24:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8012e26:	4419      	add	r1, r3
 8012e28:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8012e2a:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8012e2c:	609e      	str	r6, [r3, #8]
    node->size = size;
 8012e2e:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 8012e30:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012e34:	42a2      	cmp	r2, r4
 8012e36:	d018      	beq.n	8012e6a <mpool_calloc+0xce>
    if (node->next != NULL)
 8012e38:	6863      	ldr	r3, [r4, #4]
 8012e3a:	b10b      	cbz	r3, 8012e40 <mpool_calloc+0xa4>
        node->next->prev = node->prev;
 8012e3c:	68a2      	ldr	r2, [r4, #8]
 8012e3e:	609a      	str	r2, [r3, #8]
    if (node->prev != NULL)
 8012e40:	68a3      	ldr	r3, [r4, #8]
 8012e42:	b10b      	cbz	r3, 8012e48 <mpool_calloc+0xac>
        node->prev->next = node->next;
 8012e44:	6862      	ldr	r2, [r4, #4]
 8012e46:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8012e4c:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8012e4e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012e52:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012e54:	68e2      	ldr	r2, [r4, #12]
 8012e56:	4411      	add	r1, r2
 8012e58:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012e5c:	440a      	add	r2, r1
 8012e5e:	f8cc 200c 	str.w	r2, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8012e62:	e009      	b.n	8012e78 <mpool_calloc+0xdc>
        node_to_alloc->size += leftover;
 8012e64:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8012e66:	6863      	ldr	r3, [r4, #4]
 8012e68:	e7e2      	b.n	8012e30 <mpool_calloc+0x94>
        pool->head = new_node;
 8012e6a:	f8cc 3014 	str.w	r3, [ip, #20]
 8012e6e:	e7e3      	b.n	8012e38 <mpool_calloc+0x9c>
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8012e70:	6822      	ldr	r2, [r4, #0]
 8012e72:	2100      	movs	r1, #0
 8012e74:	54d1      	strb	r1, [r2, r3]
 8012e76:	3301      	adds	r3, #1
 8012e78:	68e2      	ldr	r2, [r4, #12]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d8f8      	bhi.n	8012e70 <mpool_calloc+0xd4>
    return node_to_alloc->pool;
 8012e7e:	6824      	ldr	r4, [r4, #0]
}
 8012e80:	4620      	mov	r0, r4
 8012e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e84 <mpool_free>:
{
 8012e84:	468c      	mov	ip, r1
    pool->leaf->freeCount++;
 8012e86:	684a      	ldr	r2, [r1, #4]
 8012e88:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 8012e8e:	684b      	ldr	r3, [r1, #4]
 8012e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e92:	1ac0      	subs	r0, r0, r3
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8012e94:	68c2      	ldr	r2, [r0, #12]
 8012e96:	4413      	add	r3, r2
 8012e98:	68ca      	ldr	r2, [r1, #12]
 8012e9a:	1ad2      	subs	r2, r2, r3
 8012e9c:	60ca      	str	r2, [r1, #12]
    mpool_node_t* other_node = pool->head;
 8012e9e:	694b      	ldr	r3, [r1, #20]
    while (other_node != NULL)
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d05c      	beq.n	8012f5e <mpool_free+0xda>
{
 8012ea4:	b570      	push	{r4, r5, r6, lr}
 8012ea6:	e01b      	b.n	8012ee0 <mpool_free+0x5c>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 8012ea8:	2102      	movs	r1, #2
 8012eaa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012eae:	f004 fecb 	bl	8017c48 <LEAF_internalErrorCallback>
}
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}
            freed_node->size += pool->leaf->header_size + other_node->size;
 8012eb4:	68dc      	ldr	r4, [r3, #12]
 8012eb6:	4422      	add	r2, r4
 8012eb8:	4411      	add	r1, r2
 8012eba:	60c1      	str	r1, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 8012ebc:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d03b      	beq.n	8012f3c <mpool_free+0xb8>
    if (node->next != NULL)
 8012ec4:	685a      	ldr	r2, [r3, #4]
 8012ec6:	b10a      	cbz	r2, 8012ecc <mpool_free+0x48>
        node->next->prev = node->prev;
 8012ec8:	6899      	ldr	r1, [r3, #8]
 8012eca:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8012ecc:	689a      	ldr	r2, [r3, #8]
 8012ece:	b10a      	cbz	r2, 8012ed4 <mpool_free+0x50>
        node->prev->next = node->next;
 8012ed0:	6859      	ldr	r1, [r3, #4]
 8012ed2:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8012ed8:	609a      	str	r2, [r3, #8]
                freed_node = other_node;
 8012eda:	462b      	mov	r3, r5
    while (other_node != NULL)
 8012edc:	2d00      	cmp	r5, #0
 8012ede:	d036      	beq.n	8012f4e <mpool_free+0xca>
        if ((long) other_node < (long) pool->mpool ||
 8012ee0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	dcdf      	bgt.n	8012ea8 <mpool_free+0x24>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8012ee8:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8012eec:	440a      	add	r2, r1
 8012eee:	469e      	mov	lr, r3
        if ((long) other_node < (long) pool->mpool ||
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d9d9      	bls.n	8012ea8 <mpool_free+0x24>
        next_node = other_node->next;
 8012ef4:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8012ef6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012efa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012efc:	68c1      	ldr	r1, [r0, #12]
 8012efe:	1854      	adds	r4, r2, r1
 8012f00:	1826      	adds	r6, r4, r0
 8012f02:	42b3      	cmp	r3, r6
 8012f04:	d0d6      	beq.n	8012eb4 <mpool_free+0x30>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 8012f06:	68d9      	ldr	r1, [r3, #12]
 8012f08:	440a      	add	r2, r1
 8012f0a:	4496      	add	lr, r2
 8012f0c:	4570      	cmp	r0, lr
 8012f0e:	d1e4      	bne.n	8012eda <mpool_free+0x56>
            other_node->size += pool->leaf->header_size + freed_node->size;
 8012f10:	440c      	add	r4, r1
 8012f12:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
 8012f14:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d013      	beq.n	8012f44 <mpool_free+0xc0>
    if (node->next != NULL)
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	b10a      	cbz	r2, 8012f24 <mpool_free+0xa0>
        node->next->prev = node->prev;
 8012f20:	6899      	ldr	r1, [r3, #8]
 8012f22:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8012f24:	689a      	ldr	r2, [r3, #8]
 8012f26:	b10a      	cbz	r2, 8012f2c <mpool_free+0xa8>
        node->prev->next = node->next;
 8012f28:	6859      	ldr	r1, [r3, #4]
 8012f2a:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8012f30:	609a      	str	r2, [r3, #8]
                other_node->next = pool->head;
 8012f32:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012f36:	605a      	str	r2, [r3, #4]
                freed_node = other_node;
 8012f38:	4618      	mov	r0, r3
 8012f3a:	e7ce      	b.n	8012eda <mpool_free+0x56>
            if (other_node == pool->head) pool->head = pool->head->next;
 8012f3c:	6852      	ldr	r2, [r2, #4]
 8012f3e:	f8cc 2014 	str.w	r2, [ip, #20]
 8012f42:	e7bf      	b.n	8012ec4 <mpool_free+0x40>
                pool->head = pool->head->next;
 8012f44:	6852      	ldr	r2, [r2, #4]
 8012f46:	f8cc 2014 	str.w	r2, [ip, #20]
                freed_node = other_node;
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	e7c5      	b.n	8012eda <mpool_free+0x56>
    freed_node->next = pool->head;
 8012f4e:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8012f52:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012f54:	b103      	cbz	r3, 8012f58 <mpool_free+0xd4>
 8012f56:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 8012f58:	f8cc 0014 	str.w	r0, [ip, #20]
 8012f5c:	e7a9      	b.n	8012eb2 <mpool_free+0x2e>
    freed_node->next = pool->head;
 8012f5e:	694b      	ldr	r3, [r1, #20]
 8012f60:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012f62:	b103      	cbz	r3, 8012f66 <mpool_free+0xe2>
 8012f64:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 8012f66:	f8cc 0014 	str.w	r0, [ip, #20]
 8012f6a:	4770      	bx	lr

08012f6c <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8012f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f6e:	4606      	mov	r6, r0
 8012f70:	460c      	mov	r4, r1
 8012f72:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
 8012f74:	681f      	ldr	r7, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8012f76:	4639      	mov	r1, r7
 8012f78:	2018      	movs	r0, #24
 8012f7a:	f7ff fe97 	bl	8012cac <mpool_alloc>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6043      	str	r3, [r0, #4]
    
    mpool_create (memory, size, m);
 8012f86:	4629      	mov	r1, r5
 8012f88:	4620      	mov	r0, r4
 8012f8a:	f7ff fe6b 	bl	8012c64 <mpool_create>
}
 8012f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f90 <tMempool_init>:
{
 8012f90:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8012f92:	3318      	adds	r3, #24
 8012f94:	f7ff ffea 	bl	8012f6c <tMempool_initToPool>
}
 8012f98:	bd08      	pop	{r3, pc}
	...

08012f9c <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8012f9c:	b538      	push	{r3, r4, r5, lr}
 8012f9e:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012fa0:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012fa2:	4621      	mov	r1, r4
 8012fa4:	2018      	movs	r0, #24
 8012fa6:	f7ff fe81 	bl	8012cac <mpool_alloc>
 8012faa:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012fac:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012fae:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012fb4:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012fb6:	edd2 7a01 	vldr	s15, [r2, #4]
 8012fba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012fd0 <tCycle_initToPool+0x34>
 8012fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fc2:	edc0 7a04 	vstr	s15, [r0, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 8012fc6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012fca:	6143      	str	r3, [r0, #20]
}
 8012fcc:	bd38      	pop	{r3, r4, r5, pc}
 8012fce:	bf00      	nop
 8012fd0:	4f800000 	.word	0x4f800000

08012fd4 <tCycle_init>:
{
 8012fd4:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf->mempool);
 8012fd6:	3118      	adds	r1, #24
 8012fd8:	f7ff ffe0 	bl	8012f9c <tCycle_initToPool>
}
 8012fdc:	bd08      	pop	{r3, pc}

08012fde <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
 8012fde:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 8012fe0:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 8012fe2:	6801      	ldr	r1, [r0, #0]
 8012fe4:	f7ff ff4e 	bl	8012e84 <mpool_free>
}
 8012fe8:	bd08      	pop	{r3, pc}
	...

08012fec <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8012fec:	6801      	ldr	r1, [r0, #0]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
 8012fee:	688b      	ldr	r3, [r1, #8]
 8012ff0:	684a      	ldr	r2, [r1, #4]
 8012ff2:	4413      	add	r3, r2
 8012ff4:	604b      	str	r3, [r1, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
 8012ff6:	0d5a      	lsrs	r2, r3, #21
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
 8012ff8:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8012ffc:	ee07 3a90 	vmov	s15, r3
    
    samp0 = __leaf_table_sinewave[idx];
 8013000:	4b0c      	ldr	r3, [pc, #48]	; (8013034 <tCycle_tick+0x48>)
 8013002:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8013006:	ed90 0a00 	vldr	s0, [r0]
    idx = (idx + 1) & c->mask;
 801300a:	3201      	adds	r2, #1
 801300c:	6949      	ldr	r1, [r1, #20]
 801300e:	400a      	ands	r2, r1
    samp1 = __leaf_table_sinewave[idx];
 8013010:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013014:	ed93 7a00 	vldr	s14, [r3]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8013018:	ee37 7a40 	vsub.f32	s14, s14, s0
 801301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013020:	eddf 6a05 	vldr	s13, [pc, #20]	; 8013038 <tCycle_tick+0x4c>
 8013024:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013028:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 801302c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	080267cc 	.word	0x080267cc
 8013038:	35000004 	.word	0x35000004

0801303c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 801303c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 801303e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013042:	edd3 7a04 	vldr	s15, [r3, #16]
 8013046:	ee27 0a80 	vmul.f32	s0, s15, s0
 801304a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801304e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8013052:	4770      	bx	lr

08013054 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
 8013054:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 8013056:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801305a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801305e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8013062:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013074 <tCycle_setPhase+0x20>
 8013066:	ee20 0a27 	vmul.f32	s0, s0, s15
 801306a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801306e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8013072:	4770      	bx	lr
 8013074:	4f800000 	.word	0x4f800000

08013078 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
 8013078:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 801307a:	6803      	ldr	r3, [r0, #0]
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 801307c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013080:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013084:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801309c <tCycle_setSampleRate+0x24>
 8013088:	ee67 7a87 	vmul.f32	s15, s15, s14
 801308c:	edc3 7a04 	vstr	s15, [r3, #16]
    tCycle_setFreq(cy, c->freq);
 8013090:	ed93 0a03 	vldr	s0, [r3, #12]
 8013094:	f7ff ffd2 	bl	801303c <tCycle_setFreq>
}
 8013098:	bd08      	pop	{r3, pc}
 801309a:	bf00      	nop
 801309c:	4f800000 	.word	0x4f800000

080130a0 <tPBTriangle_initToPool>:
{
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 80130a4:	680c      	ldr	r4, [r1, #0]
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 80130a6:	4621      	mov	r1, r4
 80130a8:	2024      	movs	r0, #36	; 0x24
 80130aa:	f7ff fdff 	bl	8012cac <mpool_alloc>
 80130ae:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80130b0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80130b2:	6863      	ldr	r3, [r4, #4]

    c->invSampleRate = leaf->invSampleRate;
 80130b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80130b8:	edc0 7a07 	vstr	s15, [r0, #28]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80130bc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80130dc <tPBTriangle_initToPool+0x3c>
 80130c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130c4:	edc0 7a08 	vstr	s15, [r0, #32]
    c->inc      =  0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 80130cc:	6043      	str	r3, [r0, #4]
    c->width     =  (0.5f * TWO_TO_32);
 80130ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80130d2:	6103      	str	r3, [r0, #16]
    c->oneMinusWidth =  c->width;
 80130d4:	6143      	str	r3, [r0, #20]
    c->freq = 0.0f;
 80130d6:	2300      	movs	r3, #0
 80130d8:	60c3      	str	r3, [r0, #12]
}
 80130da:	bd38      	pop	{r3, r4, r5, pc}
 80130dc:	4f800000 	.word	0x4f800000

080130e0 <tPBTriangle_init>:
{
 80130e0:	b508      	push	{r3, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
 80130e2:	3118      	adds	r1, #24
 80130e4:	f7ff ffdc 	bl	80130a0 <tPBTriangle_initToPool>
}
 80130e8:	bd08      	pop	{r3, pc}
	...

080130ec <tPBTriangle_tick>:
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
    _tPBTriangle* c = *osc;
 80130ec:	6801      	ldr	r1, [r0, #0]

    uint32_t halfWidth =(c->width >> 1);
 80130ee:	690b      	ldr	r3, [r1, #16]
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
 80130f0:	ee07 3a90 	vmov	s15, r3
 80130f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80130f8:	eddf 5a5a 	vldr	s11, [pc, #360]	; 8013264 <tPBTriangle_tick+0x178>
 80130fc:	ee27 7a25 	vmul.f32	s14, s14, s11
    uint32_t t1 = c->phase + halfWidth;
 8013100:	684a      	ldr	r2, [r1, #4]
 8013102:	eb02 0053 	add.w	r0, r2, r3, lsr #1
 8013106:	ee06 0a10 	vmov	s12, r0

    uint32_t t2 = c->phase + (4294967296u - halfWidth);
 801310a:	eba2 0353 	sub.w	r3, r2, r3, lsr #1
 801310e:	ee06 3a90 	vmov	s13, r3
    
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8013112:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8013116:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat t2F = t2 * INV_TWO_TO_32;
 801311a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801311e:	ee66 6aa5 	vmul.f32	s13, s13, s11
    Lfloat t = c->phase * INV_TWO_TO_32;
 8013122:	ee07 2a90 	vmov	s15, r2
 8013126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801312a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801312e:	688b      	ldr	r3, [r1, #8]
 8013130:	ee05 3a10 	vmov	s10, r3
 8013134:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013138:	ee25 5a25 	vmul.f32	s10, s10, s11
    
    float y = t * 2.0f;
 801313c:	ee77 7aa7 	vadd.f32	s15, s15, s15

    if (y >= 2.0f - floatWidth) {
 8013140:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013144:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8013148:	eef4 5ae7 	vcmpe.f32	s11, s15
 801314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013150:	d824      	bhi.n	801319c <tPBTriangle_tick+0xb0>
        y = (y - 2.0f) / floatWidth;
 8013152:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013156:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801315a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    if (t < dt) {
 801315e:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8013162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013166:	d42c      	bmi.n	80131c2 <tPBTriangle_tick+0xd6>
    } else if (t > (1.0f - dt)) {
 8013168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801316c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013170:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8013174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013178:	dd50      	ble.n	801321c <tPBTriangle_tick+0x130>
        t = (t - 1.0f) / dt + 1.0f;
 801317a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801317e:	ee36 6a65 	vsub.f32	s12, s12, s11
 8013182:	eec6 7a05 	vdiv.f32	s15, s12, s10
 8013186:	ee77 7aa5 	vadd.f32	s15, s15, s11
        return 1.0f / 3.0f * t * t * t;
 801318a:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8013268 <tPBTriangle_tick+0x17c>
 801318e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013192:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013196:	ee67 7a86 	vmul.f32	s15, s15, s12
 801319a:	e020      	b.n	80131de <tPBTriangle_tick+0xf2>
    } else if (y >= floatWidth) {
 801319c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80131a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a4:	d80a      	bhi.n	80131bc <tPBTriangle_tick+0xd0>
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
 80131a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80131ae:	ee70 4a47 	vsub.f32	s9, s0, s14
 80131b2:	eec7 5aa4 	vdiv.f32	s11, s15, s9
 80131b6:	ee30 0a65 	vsub.f32	s0, s0, s11
 80131ba:	e7d0      	b.n	801315e <tPBTriangle_tick+0x72>
    } else {
        y /= floatWidth;
 80131bc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80131c0:	e7cd      	b.n	801315e <tPBTriangle_tick+0x72>
        t = (t / dt) - 1.0f;
 80131c2:	eec6 7a05 	vdiv.f32	s15, s12, s10
 80131c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80131ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
        return -1.0f / 3.0f * t * t * t;
 80131ce:	ed9f 6a27 	vldr	s12, [pc, #156]	; 801326c <tPBTriangle_tick+0x180>
 80131d2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80131d6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80131da:	ee67 7a86 	vmul.f32	s15, s15, s12
    if (t < dt) {
 80131de:	eef4 6ac5 	vcmpe.f32	s13, s10
 80131e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e6:	d41c      	bmi.n	8013222 <tPBTriangle_tick+0x136>
    } else if (t > (1.0f - dt)) {
 80131e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80131ec:	ee36 6a45 	vsub.f32	s12, s12, s10
 80131f0:	eef4 6ac6 	vcmpe.f32	s13, s12
 80131f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f8:	dd30      	ble.n	801325c <tPBTriangle_tick+0x170>
        t = (t - 1.0f) / dt + 1.0f;
 80131fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80131fe:	ee36 6ae5 	vsub.f32	s12, s13, s11
 8013202:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8013206:	ee76 6aa5 	vadd.f32	s13, s13, s11
        return 1.0f / 3.0f * t * t * t;
 801320a:	ed9f 6a17 	vldr	s12, [pc, #92]	; 8013268 <tPBTriangle_tick+0x17c>
 801320e:	ee26 6a86 	vmul.f32	s12, s13, s12
 8013212:	ee26 6a86 	vmul.f32	s12, s13, s12
 8013216:	ee66 6a86 	vmul.f32	s13, s13, s12
 801321a:	e010      	b.n	801323e <tPBTriangle_tick+0x152>
        return 0.0f;
 801321c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013270 <tPBTriangle_tick+0x184>
 8013220:	e7dd      	b.n	80131de <tPBTriangle_tick+0xf2>
        t = (t / dt) - 1.0f;
 8013222:	ee86 6a85 	vdiv.f32	s12, s13, s10
 8013226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801322a:	ee76 6a66 	vsub.f32	s13, s12, s13
        return -1.0f / 3.0f * t * t * t;
 801322e:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 801326c <tPBTriangle_tick+0x180>
 8013232:	ee26 6a86 	vmul.f32	s12, s13, s12
 8013236:	ee26 6a86 	vmul.f32	s12, s13, s12
 801323a:	ee66 6a86 	vmul.f32	s13, s13, s12
    }
    Lfloat blampOne = blamp(t1F, incFloat);
    Lfloat blampTwo = blamp(t2F, incFloat);
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
 801323e:	ee27 6a07 	vmul.f32	s12, s14, s14
 8013242:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013246:	ee85 6a07 	vdiv.f32	s12, s10, s14
    y += scaling * (blampOne - blampTwo);
 801324a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801324e:	ee67 7a86 	vmul.f32	s15, s15, s12
    c->phase += c->inc;
 8013252:	441a      	add	r2, r3
 8013254:	604a      	str	r2, [r1, #4]
    return y;
}
 8013256:	ee37 0a80 	vadd.f32	s0, s15, s0
 801325a:	4770      	bx	lr
        return 0.0f;
 801325c:	eddf 6a04 	vldr	s13, [pc, #16]	; 8013270 <tPBTriangle_tick+0x184>
 8013260:	e7ed      	b.n	801323e <tPBTriangle_tick+0x152>
 8013262:	bf00      	nop
 8013264:	2f80000d 	.word	0x2f80000d
 8013268:	3eaaaaab 	.word	0x3eaaaaab
 801326c:	beaaaaab 	.word	0xbeaaaaab
 8013270:	00000000 	.word	0x00000000

08013274 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 8013274:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8013276:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801327a:	edd3 7a08 	vldr	s15, [r3, #32]
 801327e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013282:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013286:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801328a:	4770      	bx	lr

0801328c <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat width)
{
    _tPBTriangle* c = *osc;
 801328c:	6803      	ldr	r3, [r0, #0]
    width = width*0.5f + 0.5f;
 801328e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013292:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013296:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (val < min)
 801329a:	eddf 7a13 	vldr	s15, [pc, #76]	; 80132e8 <tPBTriangle_setSkew+0x5c>
 801329e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	d409      	bmi.n	80132bc <tPBTriangle_setSkew+0x30>
    else if (val > max)
 80132a8:	eddf 7a10 	vldr	s15, [pc, #64]	; 80132ec <tPBTriangle_setSkew+0x60>
 80132ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	dd04      	ble.n	80132c0 <tPBTriangle_setSkew+0x34>
        return max;
 80132b6:	eeb0 0a67 	vmov.f32	s0, s15
 80132ba:	e001      	b.n	80132c0 <tPBTriangle_setSkew+0x34>
        return min;
 80132bc:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80132e8 <tPBTriangle_setSkew+0x5c>
    width = LEAF_clip(0.01f, width, 0.99f);
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 80132c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80132c8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80132f0 <tPBTriangle_setSkew+0x64>
 80132cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80132d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80132d4:	edc3 7a05 	vstr	s15, [r3, #20]
    c->width = width * TWO_TO_32;
 80132d8:	ee20 0a07 	vmul.f32	s0, s0, s14
 80132dc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80132e0:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80132e4:	4770      	bx	lr
 80132e6:	bf00      	nop
 80132e8:	3c23d70a 	.word	0x3c23d70a
 80132ec:	3f7d70a4 	.word	0x3f7d70a4
 80132f0:	4f800000 	.word	0x4f800000

080132f4 <tPBSineTriangle_initToPool>:
{
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
 80132f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132f6:	4607      	mov	r7, r0
 80132f8:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 80132fa:	680e      	ldr	r6, [r1, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 80132fc:	4631      	mov	r1, r6
 80132fe:	2024      	movs	r0, #36	; 0x24
 8013300:	f7ff fcd4 	bl	8012cac <mpool_alloc>
 8013304:	4604      	mov	r4, r0
 8013306:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8013308:	f840 6b08 	str.w	r6, [r0], #8
    LEAF* leaf = c->mempool->leaf;
 801330c:	6876      	ldr	r6, [r6, #4]
    tCycle_initToPool(&c->sine, mp);
 801330e:	4629      	mov	r1, r5
 8013310:	f7ff fe44 	bl	8012f9c <tCycle_initToPool>
    c->invSampleRate = leaf->invSampleRate;
 8013314:	edd6 7a01 	vldr	s15, [r6, #4]
 8013318:	edc4 7a07 	vstr	s15, [r4, #28]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801331c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801333c <tPBSineTriangle_initToPool+0x48>
 8013320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013324:	edc4 7a08 	vstr	s15, [r4, #32]
    c->inc      =  0;
 8013328:	2300      	movs	r3, #0
 801332a:	60e3      	str	r3, [r4, #12]
    c->phase    =  0;
 801332c:	6063      	str	r3, [r4, #4]
    c->freq = 0.0f;
 801332e:	2300      	movs	r3, #0
 8013330:	6123      	str	r3, [r4, #16]
    c->shape     =  0.0f;
 8013332:	6163      	str	r3, [r4, #20]
    c->oneMinusShape = 1.0f;
 8013334:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013338:	61a3      	str	r3, [r4, #24]
}
 801333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801333c:	4f800000 	.word	0x4f800000

08013340 <tPBSineTriangle_init>:
{
 8013340:	b508      	push	{r3, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
 8013342:	3118      	adds	r1, #24
 8013344:	f7ff ffd6 	bl	80132f4 <tPBSineTriangle_initToPool>
}
 8013348:	bd08      	pop	{r3, pc}
	...

0801334c <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
 801334c:	b510      	push	{r4, lr}
 801334e:	ed2d 8b02 	vpush	{d8}
    _tPBSineTriangle* c = *osc;
 8013352:	6804      	ldr	r4, [r0, #0]

    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
 8013354:	6863      	ldr	r3, [r4, #4]
 8013356:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 801335a:	ee06 2a10 	vmov	s12, r2

    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
 801335e:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8013362:	ee05 2a90 	vmov	s11, r2
    
    Lfloat t1F = t1 * INV_TWO_TO_32;
 8013366:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 801336a:	eddf 6a57 	vldr	s13, [pc, #348]	; 80134c8 <tPBSineTriangle_tick+0x17c>
 801336e:	ee26 6a26 	vmul.f32	s12, s12, s13
    Lfloat t2F = t2 * INV_TWO_TO_32;
 8013372:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8013376:	ee65 5aa6 	vmul.f32	s11, s11, s13
    Lfloat t = c->phase * INV_TWO_TO_32;
 801337a:	ee07 3a90 	vmov	s15, r3
 801337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013382:	ee67 7aa6 	vmul.f32	s15, s15, s13
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8013386:	ed94 7a03 	vldr	s14, [r4, #12]
 801338a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801338e:	ee27 7a26 	vmul.f32	s14, s14, s13
    
    float y = t * 4.0f;
 8013392:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013396:	ee67 7aa6 	vmul.f32	s15, s15, s13

    if (y >= 3.0f) {
 801339a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801339e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a6:	db26      	blt.n	80133f6 <tPBSineTriangle_tick+0xaa>
        y -= 4.0f;
 80133a8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80133ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
    } else if (y > 1.0f) {
        y = 2.0f - y;
    }
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 80133b0:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
 80133b4:	ee27 5a05 	vmul.f32	s10, s14, s10
    if (t < dt) {
 80133b8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80133bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c0:	d425      	bmi.n	801340e <tPBSineTriangle_tick+0xc2>
    } else if (t > (1.0f - dt)) {
 80133c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133c6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80133ca:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	dd49      	ble.n	8013468 <tPBSineTriangle_tick+0x11c>
        t = (t - 1.0f) / dt + 1.0f;
 80133d4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80133d8:	ee36 6a64 	vsub.f32	s12, s12, s9
 80133dc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80133e0:	ee76 6aa4 	vadd.f32	s13, s13, s9
        return 1.0f / 3.0f * t * t * t;
 80133e4:	ed9f 6a39 	vldr	s12, [pc, #228]	; 80134cc <tPBSineTriangle_tick+0x180>
 80133e8:	ee26 6a86 	vmul.f32	s12, s13, s12
 80133ec:	ee26 6a86 	vmul.f32	s12, s13, s12
 80133f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80133f4:	e019      	b.n	801342a <tPBSineTriangle_tick+0xde>
    } else if (y > 1.0f) {
 80133f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80133fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013402:	ddd5      	ble.n	80133b0 <tPBSineTriangle_tick+0x64>
        y = 2.0f - y;
 8013404:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013408:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801340c:	e7d0      	b.n	80133b0 <tPBSineTriangle_tick+0x64>
        t = (t / dt) - 1.0f;
 801340e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8013412:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013416:	ee76 6ac6 	vsub.f32	s13, s13, s12
        return -1.0f / 3.0f * t * t * t;
 801341a:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80134d0 <tPBSineTriangle_tick+0x184>
 801341e:	ee26 6a86 	vmul.f32	s12, s13, s12
 8013422:	ee26 6a86 	vmul.f32	s12, s13, s12
 8013426:	ee66 6a86 	vmul.f32	s13, s13, s12
    if (t < dt) {
 801342a:	eef4 5ac7 	vcmpe.f32	s11, s14
 801342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013432:	d41c      	bmi.n	801346e <tPBSineTriangle_tick+0x122>
    } else if (t > (1.0f - dt)) {
 8013434:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013438:	ee36 6a47 	vsub.f32	s12, s12, s14
 801343c:	eef4 5ac6 	vcmpe.f32	s11, s12
 8013440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013444:	dd3c      	ble.n	80134c0 <tPBSineTriangle_tick+0x174>
        t = (t - 1.0f) / dt + 1.0f;
 8013446:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801344a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801344e:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8013452:	ee36 7a24 	vadd.f32	s14, s12, s9
        return 1.0f / 3.0f * t * t * t;
 8013456:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80134cc <tPBSineTriangle_tick+0x180>
 801345a:	ee27 6a06 	vmul.f32	s12, s14, s12
 801345e:	ee27 6a06 	vmul.f32	s12, s14, s12
 8013462:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013466:	e010      	b.n	801348a <tPBSineTriangle_tick+0x13e>
        return 0.0f;
 8013468:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80134d4 <tPBSineTriangle_tick+0x188>
 801346c:	e7dd      	b.n	801342a <tPBSineTriangle_tick+0xde>
        t = (t / dt) - 1.0f;
 801346e:	ee85 6a87 	vdiv.f32	s12, s11, s14
 8013472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013476:	ee36 7a47 	vsub.f32	s14, s12, s14
        return -1.0f / 3.0f * t * t * t;
 801347a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80134d0 <tPBSineTriangle_tick+0x184>
 801347e:	ee27 6a06 	vmul.f32	s12, s14, s12
 8013482:	ee27 6a06 	vmul.f32	s12, s14, s12
 8013486:	ee27 7a06 	vmul.f32	s14, s14, s12
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
 801348a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801348e:	ee25 7a07 	vmul.f32	s14, s10, s14
 8013492:	ee77 7a87 	vadd.f32	s15, s15, s14
    y = y * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8013496:	ed94 8a05 	vldr	s16, [r4, #20]
 801349a:	ee28 8a27 	vmul.f32	s16, s16, s15

    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
 801349e:	f104 0008 	add.w	r0, r4, #8
 80134a2:	f7ff fda3 	bl	8012fec <tCycle_tick>
 80134a6:	edd4 7a06 	vldr	s15, [r4, #24]
 80134aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    c->phase += c->inc;
 80134ae:	68e2      	ldr	r2, [r4, #12]
 80134b0:	6863      	ldr	r3, [r4, #4]
 80134b2:	4413      	add	r3, r2
 80134b4:	6063      	str	r3, [r4, #4]
    
    return y;
}
 80134b6:	ee30 0a08 	vadd.f32	s0, s0, s16
 80134ba:	ecbd 8b02 	vpop	{d8}
 80134be:	bd10      	pop	{r4, pc}
        return 0.0f;
 80134c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80134d4 <tPBSineTriangle_tick+0x188>
 80134c4:	e7e1      	b.n	801348a <tPBSineTriangle_tick+0x13e>
 80134c6:	bf00      	nop
 80134c8:	2f80000d 	.word	0x2f80000d
 80134cc:	3eaaaaab 	.word	0x3eaaaaab
 80134d0:	beaaaaab 	.word	0xbeaaaaab
 80134d4:	00000000 	.word	0x00000000

080134d8 <tPBSineTriangle_setFreq>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
 80134d8:	b508      	push	{r3, lr}
    _tPBSineTriangle* c = *osc;
 80134da:	6800      	ldr	r0, [r0, #0]
    c->freq  = freq;
 80134dc:	ed80 0a04 	vstr	s0, [r0, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80134e0:	edd0 7a08 	vldr	s15, [r0, #32]
 80134e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80134e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134ec:	edc0 7a03 	vstr	s15, [r0, #12]
    tCycle_setFreq(&c->sine, freq);
 80134f0:	3008      	adds	r0, #8
 80134f2:	f7ff fda3 	bl	801303c <tCycle_setFreq>
}
 80134f6:	bd08      	pop	{r3, pc}

080134f8 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
 80134f8:	6803      	ldr	r3, [r0, #0]
    c->shape = 1.0f * shape;
 80134fa:	ed83 0a05 	vstr	s0, [r3, #20]
    c->oneMinusShape = 1.0f - shape;
 80134fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013502:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013506:	edc3 7a06 	vstr	s15, [r3, #24]
}
 801350a:	4770      	bx	lr

0801350c <tPBPulse_initToPool>:
{
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8013510:	680c      	ldr	r4, [r1, #0]
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 8013512:	4621      	mov	r1, r4
 8013514:	2020      	movs	r0, #32
 8013516:	f7ff fbc9 	bl	8012cac <mpool_alloc>
 801351a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801351c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801351e:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 8013520:	edd3 7a01 	vldr	s15, [r3, #4]
 8013524:	edc0 7a06 	vstr	s15, [r0, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8013528:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8013548 <tPBPulse_initToPool+0x3c>
 801352c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013530:	edc0 7a07 	vstr	s15, [r0, #28]
    c->inc      =  0;
 8013534:	2300      	movs	r3, #0
 8013536:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8013538:	6043      	str	r3, [r0, #4]
    c->width     =  (0.5f * TWO_TO_32);
 801353a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801353e:	6103      	str	r3, [r0, #16]
    c->oneMinusWidth =  c->width;
 8013540:	6143      	str	r3, [r0, #20]
    c->freq = 0.0f;
 8013542:	2300      	movs	r3, #0
 8013544:	60c3      	str	r3, [r0, #12]
}
 8013546:	bd38      	pop	{r3, r4, r5, pc}
 8013548:	4f800000 	.word	0x4f800000

0801354c <tPBPulse_init>:
{
 801354c:	b508      	push	{r3, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
 801354e:	3118      	adds	r1, #24
 8013550:	f7ff ffdc 	bl	801350c <tPBPulse_initToPool>
}
 8013554:	bd08      	pop	{r3, pc}
	...

08013558 <tPBPulse_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
    _tPBPulse* c = *osc;
 8013558:	6802      	ldr	r2, [r0, #0]
    
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 801355a:	6851      	ldr	r1, [r2, #4]
 801355c:	ee07 1a90 	vmov	s15, r1
 8013560:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8013564:	eddf 6a49 	vldr	s13, [pc, #292]	; 801368c <tPBPulse_tick+0x134>
 8013568:	ee65 5aa6 	vmul.f32	s11, s11, s13
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 801356c:	6890      	ldr	r0, [r2, #8]
 801356e:	ee07 0a90 	vmov	s15, r0
 8013572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013576:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 801357a:	6953      	ldr	r3, [r2, #20]
 801357c:	18cb      	adds	r3, r1, r3
 801357e:	ee07 3a90 	vmov	s15, r3
 8013582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013586:	ee67 7aa6 	vmul.f32	s15, s15, s13
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
 801358a:	ed92 6a04 	vldr	s12, [r2, #16]
 801358e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8013592:	ee26 6a26 	vmul.f32	s12, s12, s13
    Lfloat out = -2.0f * widthFloat;
 8013596:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 801359a:	ee66 6a26 	vmul.f32	s13, s12, s13
    if (phaseFloat < widthFloat) {
 801359e:	eef4 5ac6 	vcmpe.f32	s11, s12
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a6:	d503      	bpl.n	80135b0 <tPBPulse_tick+0x58>
        out += 2.0f;
 80135a8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80135ac:	ee76 6a86 	vadd.f32	s13, s13, s12
    dt = fabsf(dt);
 80135b0:	eeb0 6ac7 	vabs.f32	s12, s14
    if (dt >= 0.0f)
 80135b4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80135b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135bc:	db28      	blt.n	8013610 <tPBPulse_tick+0xb8>
        if (t < dt)
 80135be:	eef4 5ac6 	vcmpe.f32	s11, s12
 80135c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c6:	d417      	bmi.n	80135f8 <tPBPulse_tick+0xa0>
        else if (t > 1.0f - dt)
 80135c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80135cc:	ee35 5a46 	vsub.f32	s10, s10, s12
 80135d0:	eef4 5ac5 	vcmpe.f32	s11, s10
 80135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d8:	dd40      	ble.n	801365c <tPBPulse_tick+0x104>
            t = (t - 1.0f) / dt;
 80135da:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80135de:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80135e2:	ee85 5a86 	vdiv.f32	s10, s11, s12
            return t*t + t+t + 1.0f;
 80135e6:	ee25 6a05 	vmul.f32	s12, s10, s10
 80135ea:	ee35 6a06 	vadd.f32	s12, s10, s12
 80135ee:	ee35 5a06 	vadd.f32	s10, s10, s12
 80135f2:	ee35 5a24 	vadd.f32	s10, s10, s9
 80135f6:	e00b      	b.n	8013610 <tPBPulse_tick+0xb8>
            t /= dt;
 80135f8:	eec5 4a86 	vdiv.f32	s9, s11, s12
            return t+t - t*t - 1.0f;
 80135fc:	ee34 5aa4 	vadd.f32	s10, s9, s9
 8013600:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8013604:	ee35 5a64 	vsub.f32	s10, s10, s9
 8013608:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801360c:	ee35 5a46 	vsub.f32	s10, s10, s12
    }
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8013610:	ee76 6a85 	vadd.f32	s13, s13, s10
    dt = fabsf(dt);
 8013614:	eeb0 7ac7 	vabs.f32	s14, s14
    if (dt >= 0.0f)
 8013618:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801361c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013620:	db2b      	blt.n	801367a <tPBPulse_tick+0x122>
        if (t < dt)
 8013622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362a:	d41a      	bmi.n	8013662 <tPBPulse_tick+0x10a>
        else if (t > 1.0f - dt)
 801362c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013630:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013634:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363c:	dd22      	ble.n	8013684 <tPBPulse_tick+0x12c>
            t = (t - 1.0f) / dt;
 801363e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013642:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013646:	ee87 0a87 	vdiv.f32	s0, s15, s14
            return t*t + t+t + 1.0f;
 801364a:	ee60 7a00 	vmul.f32	s15, s0, s0
 801364e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013652:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013656:	ee30 0a06 	vadd.f32	s0, s0, s12
 801365a:	e00e      	b.n	801367a <tPBPulse_tick+0x122>
        else return 0.0f;
 801365c:	ed9f 5a0c 	vldr	s10, [pc, #48]	; 8013690 <tPBPulse_tick+0x138>
 8013660:	e7d6      	b.n	8013610 <tPBPulse_tick+0xb8>
            t /= dt;
 8013662:	ee87 6a87 	vdiv.f32	s12, s15, s14
            return t+t - t*t - 1.0f;
 8013666:	ee36 0a06 	vadd.f32	s0, s12, s12
 801366a:	ee26 6a06 	vmul.f32	s12, s12, s12
 801366e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013672:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013676:	ee30 0a67 	vsub.f32	s0, s0, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    c->phase += c->inc;
 801367a:	4401      	add	r1, r0
 801367c:	6051      	str	r1, [r2, #4]
    return out;
    
}
 801367e:	ee36 0ac0 	vsub.f32	s0, s13, s0
 8013682:	4770      	bx	lr
        else return 0.0f;
 8013684:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8013690 <tPBPulse_tick+0x138>
 8013688:	e7f7      	b.n	801367a <tPBPulse_tick+0x122>
 801368a:	bf00      	nop
 801368c:	2f80000d 	.word	0x2f80000d
 8013690:	00000000 	.word	0x00000000

08013694 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 8013694:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8013696:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801369a:	edd3 7a07 	vldr	s15, [r3, #28]
 801369e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80136a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136a6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80136aa:	4770      	bx	lr

080136ac <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
 80136ac:	6803      	ldr	r3, [r0, #0]
    //clip width to avoid silence from pulse widths of 0 or 1
    if (width < 0.05f)
 80136ae:	eddf 7a12 	vldr	s15, [pc, #72]	; 80136f8 <tPBPulse_setWidth+0x4c>
 80136b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80136b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ba:	d501      	bpl.n	80136c0 <tPBPulse_setWidth+0x14>
    {
        width = 0.05f;
 80136bc:	eeb0 0a67 	vmov.f32	s0, s15
    }
    if (width > 0.95f)
 80136c0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80136fc <tPBPulse_setWidth+0x50>
 80136c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80136c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136cc:	dd01      	ble.n	80136d2 <tPBPulse_setWidth+0x26>
    {
        width = 0.95f;
 80136ce:	eeb0 0a67 	vmov.f32	s0, s15
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 80136d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80136da:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013700 <tPBPulse_setWidth+0x54>
 80136de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80136e6:	edc3 7a05 	vstr	s15, [r3, #20]
    c->width = width * TWO_TO_32;
 80136ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80136ee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80136f2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80136f6:	4770      	bx	lr
 80136f8:	3d4ccccd 	.word	0x3d4ccccd
 80136fc:	3f733333 	.word	0x3f733333
 8013700:	4f800000 	.word	0x4f800000

08013704 <tPBSaw_initToPool>:
{
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
 8013704:	b538      	push	{r3, r4, r5, lr}
 8013706:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8013708:	680c      	ldr	r4, [r1, #0]
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 801370a:	4621      	mov	r1, r4
 801370c:	2020      	movs	r0, #32
 801370e:	f7ff facd 	bl	8012cac <mpool_alloc>
 8013712:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8013714:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8013716:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 8013718:	edd3 7a01 	vldr	s15, [r3, #4]
 801371c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8013720:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013738 <tPBSaw_initToPool+0x34>
 8013724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013728:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 801372c:	2300      	movs	r3, #0
 801372e:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8013730:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 8013732:	2300      	movs	r3, #0
 8013734:	60c3      	str	r3, [r0, #12]
}
 8013736:	bd38      	pop	{r3, r4, r5, pc}
 8013738:	4f800000 	.word	0x4f800000

0801373c <tPBSaw_init>:
{
 801373c:	b508      	push	{r3, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
 801373e:	3118      	adds	r1, #24
 8013740:	f7ff ffe0 	bl	8013704 <tPBSaw_initToPool>
}
 8013744:	bd08      	pop	{r3, pc}
	...

08013748 <tPBSaw_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
    _tPBSaw* c = *osc;
 8013748:	6802      	ldr	r2, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 801374a:	6853      	ldr	r3, [r2, #4]
 801374c:	ee07 3a90 	vmov	s15, r3
 8013750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013754:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80137f0 <tPBSaw_tick+0xa8>
 8013758:	ee27 0a80 	vmul.f32	s0, s15, s0
 801375c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013760:	ee30 0a47 	vsub.f32	s0, s0, s14

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
 8013764:	ed9f 6a23 	vldr	s12, [pc, #140]	; 80137f4 <tPBSaw_tick+0xac>
 8013768:	ee27 7a86 	vmul.f32	s14, s15, s12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801376c:	6891      	ldr	r1, [r2, #8]
 801376e:	ee07 1a90 	vmov	s15, r1
 8013772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013776:	ee67 7a86 	vmul.f32	s15, s15, s12
    dt = fabsf(dt);
 801377a:	eef0 7ae7 	vabs.f32	s15, s15
    if (dt >= 0.0f)
 801377e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013786:	db28      	blt.n	80137da <tPBSaw_tick+0x92>
        if (t < dt)
 8013788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013790:	d417      	bmi.n	80137c2 <tPBSaw_tick+0x7a>
        else if (t > 1.0f - dt)
 8013792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013796:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801379a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a2:	dd21      	ble.n	80137e8 <tPBSaw_tick+0xa0>
            t = (t - 1.0f) / dt;
 80137a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80137a8:	ee37 7a46 	vsub.f32	s14, s14, s12
 80137ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
            return t*t + t+t + 1.0f;
 80137b0:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80137b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80137b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80137bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80137c0:	e00b      	b.n	80137da <tPBSaw_tick+0x92>
            t /= dt;
 80137c2:	ee87 6a27 	vdiv.f32	s12, s14, s15
            return t+t - t*t - 1.0f;
 80137c6:	ee76 6a06 	vadd.f32	s13, s12, s12
 80137ca:	ee26 6a06 	vmul.f32	s12, s12, s12
 80137ce:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80137d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 80137da:	ee30 0a66 	vsub.f32	s0, s0, s13
    c->phase += c->inc;
 80137de:	440b      	add	r3, r1
 80137e0:	6053      	str	r3, [r2, #4]
    return (-1.0f * out);
}
 80137e2:	eeb1 0a40 	vneg.f32	s0, s0
 80137e6:	4770      	bx	lr
        else return 0.0f;
 80137e8:	eddf 6a03 	vldr	s13, [pc, #12]	; 80137f8 <tPBSaw_tick+0xb0>
 80137ec:	e7f5      	b.n	80137da <tPBSaw_tick+0x92>
 80137ee:	bf00      	nop
 80137f0:	2ffffff6 	.word	0x2ffffff6
 80137f4:	2f80000d 	.word	0x2f80000d
 80137f8:	00000000 	.word	0x00000000

080137fc <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 80137fc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 80137fe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013802:	edd3 7a05 	vldr	s15, [r3, #20]
 8013806:	ee27 0a80 	vmul.f32	s0, s15, s0
 801380a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801380e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8013812:	4770      	bx	lr

08013814 <tPBSawSquare_initToPool>:
{
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8013818:	680c      	ldr	r4, [r1, #0]
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 801381a:	4621      	mov	r1, r4
 801381c:	2028      	movs	r0, #40	; 0x28
 801381e:	f7ff fa45 	bl	8012cac <mpool_alloc>
 8013822:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8013824:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8013826:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 8013828:	edd3 7a01 	vldr	s15, [r3, #4]
 801382c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8013830:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013848 <tPBSawSquare_initToPool+0x34>
 8013834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013838:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 801383c:	2300      	movs	r3, #0
 801383e:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8013840:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 8013842:	2300      	movs	r3, #0
 8013844:	60c3      	str	r3, [r0, #12]

}
 8013846:	bd38      	pop	{r3, r4, r5, pc}
 8013848:	4f800000 	.word	0x4f800000

0801384c <tPBSawSquare_init>:
{
 801384c:	b508      	push	{r3, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
 801384e:	3118      	adds	r1, #24
 8013850:	f7ff ffe0 	bl	8013814 <tPBSawSquare_initToPool>
}
 8013854:	bd08      	pop	{r3, pc}
	...

08013858 <tPBSawSquare_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
    _tPBSawSquare* c = *osc;
 8013858:	6803      	ldr	r3, [r0, #0]

    //Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 801385a:	685a      	ldr	r2, [r3, #4]
 801385c:	ee07 2a90 	vmov	s15, r2
 8013860:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 8013864:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80139a0 <tPBSawSquare_tick+0x148>
 8013868:	ee25 5a06 	vmul.f32	s10, s10, s12
 801386c:	ee75 7a05 	vadd.f32	s15, s10, s10
 8013870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013874:	ee37 0ac7 	vsub.f32	s0, s15, s14
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8013878:	6899      	ldr	r1, [r3, #8]
 801387a:	ee07 1a90 	vmov	s15, r1
 801387e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013882:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8013886:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
 801388a:	ee07 0a10 	vmov	s14, r0
 801388e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013892:	ee27 7a06 	vmul.f32	s14, s14, s12
    dt = fabsf(dt);
 8013896:	eeb0 6ae7 	vabs.f32	s12, s15
    if (dt >= 0.0f)
 801389a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a2:	db28      	blt.n	80138f6 <tPBSawSquare_tick+0x9e>
        if (t < dt)
 80138a4:	eeb4 5ac6 	vcmpe.f32	s10, s12
 80138a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ac:	d417      	bmi.n	80138de <tPBSawSquare_tick+0x86>
        else if (t > 1.0f - dt)
 80138ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80138b2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80138b6:	eeb4 5ae6 	vcmpe.f32	s10, s13
 80138ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138be:	dd3e      	ble.n	801393e <tPBSawSquare_tick+0xe6>
            t = (t - 1.0f) / dt;
 80138c0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 80138c4:	ee35 4a64 	vsub.f32	s8, s10, s9
 80138c8:	eec4 6a06 	vdiv.f32	s13, s8, s12
            return t*t + t+t + 1.0f;
 80138cc:	ee26 6aa6 	vmul.f32	s12, s13, s13
 80138d0:	ee36 6a86 	vadd.f32	s12, s13, s12
 80138d4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80138d8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80138dc:	e00b      	b.n	80138f6 <tPBSawSquare_tick+0x9e>
            t /= dt;
 80138de:	eec5 4a06 	vdiv.f32	s9, s10, s12
            return t+t - t*t - 1.0f;
 80138e2:	ee74 6aa4 	vadd.f32	s13, s9, s9
 80138e6:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80138ea:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80138ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80138f2:	ee76 6ac6 	vsub.f32	s13, s13, s12
    dt = fabsf(dt);
 80138f6:	eef0 7ae7 	vabs.f32	s15, s15
    if (dt >= 0.0f)
 80138fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013902:	db2b      	blt.n	801395c <tPBSawSquare_tick+0x104>
        if (t < dt)
 8013904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390c:	d41a      	bmi.n	8013944 <tPBSawSquare_tick+0xec>
        else if (t > 1.0f - dt)
 801390e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013912:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013916:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801391e:	dd39      	ble.n	8013994 <tPBSawSquare_tick+0x13c>
            t = (t - 1.0f) / dt;
 8013920:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013924:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013928:	eec7 5a27 	vdiv.f32	s11, s14, s15
            return t*t + t+t + 1.0f;
 801392c:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8013930:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8013934:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013938:	ee75 5a86 	vadd.f32	s11, s11, s12
 801393c:	e00e      	b.n	801395c <tPBSawSquare_tick+0x104>
        else return 0.0f;
 801393e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80139a4 <tPBSawSquare_tick+0x14c>
 8013942:	e7d8      	b.n	80138f6 <tPBSawSquare_tick+0x9e>
            t /= dt;
 8013944:	ee87 6a27 	vdiv.f32	s12, s14, s15
            return t+t - t*t - 1.0f;
 8013948:	ee76 5a06 	vadd.f32	s11, s12, s12
 801394c:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013950:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8013954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013958:	ee75 5ae7 	vsub.f32	s11, s11, s15
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    
    Lfloat squareOut = -1.0f;
    if (phaseFloat < 0.5f) {
 801395c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013960:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013968:	d417      	bmi.n	801399a <tPBSawSquare_tick+0x142>
    Lfloat squareOut = -1.0f;
 801396a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
        squareOut += 2.0f;
    }
    sawOut -= resetBlep;
 801396e:	ee70 7a66 	vsub.f32	s15, s0, s13

    squareOut += resetBlep;
 8013972:	ee37 7a26 	vadd.f32	s14, s14, s13
    squareOut -= midBlep;
 8013976:	ee37 7a65 	vsub.f32	s14, s14, s11

    c->phase += c->inc;
 801397a:	440a      	add	r2, r1
 801397c:	605a      	str	r2, [r3, #4]
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801397e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8013982:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013986:	ed93 0a08 	vldr	s0, [r3, #32]
 801398a:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 801398e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013992:	4770      	bx	lr
        else return 0.0f;
 8013994:	eddf 5a03 	vldr	s11, [pc, #12]	; 80139a4 <tPBSawSquare_tick+0x14c>
 8013998:	e7e0      	b.n	801395c <tPBSawSquare_tick+0x104>
        squareOut += 2.0f;
 801399a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801399e:	e7e6      	b.n	801396e <tPBSawSquare_tick+0x116>
 80139a0:	2f80000d 	.word	0x2f80000d
 80139a4:	00000000 	.word	0x00000000

080139a8 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 80139a8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 80139aa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
 80139ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80139b2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80139b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80139ba:	ed83 0a02 	vstr	s0, [r3, #8]

}
 80139be:	4770      	bx	lr

080139c0 <tPBSawSquare_setShape>:

void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
 80139c0:	6803      	ldr	r3, [r0, #0]
    
    c->shape  = inputShape;
 80139c2:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 80139c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80139ce:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80139d2:	4770      	bx	lr

080139d4 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	4606      	mov	r6, r0
 80139d8:	460c      	mov	r4, r1
    _tMempool* m = *mp;
 80139da:	6815      	ldr	r5, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80139dc:	4629      	mov	r1, r5
 80139de:	2018      	movs	r0, #24
 80139e0:	f7ff f964 	bl	8012cac <mpool_alloc>
 80139e4:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 80139e6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 80139e8:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 80139ea:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	6143      	str	r3, [r0, #20]
}
 80139f0:	bd70      	pop	{r4, r5, r6, pc}

080139f2 <tNoise_init>:
{
 80139f2:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
 80139f4:	3218      	adds	r2, #24
 80139f6:	f7ff ffed 	bl	80139d4 <tNoise_initToPool>
}
 80139fa:	bd08      	pop	{r3, pc}

080139fc <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
 80139fc:	b508      	push	{r3, lr}
    _tNoise* n = *ns;
 80139fe:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8013a00:	6801      	ldr	r1, [r0, #0]
 8013a02:	f7ff fa3f 	bl	8012e84 <mpool_free>
}
 8013a06:	bd08      	pop	{r3, pc}

08013a08 <tNoise_tick>:

Lfloat   tNoise_tick(tNoise* const ns)
{
 8013a08:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8013a0a:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8013a0c:	6963      	ldr	r3, [r4, #20]
 8013a0e:	4798      	blx	r3
 8013a10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a18:	ee30 0a67 	vsub.f32	s0, s0, s15
    
    if (n->type == PinkNoise)
 8013a1c:	7923      	ldrb	r3, [r4, #4]
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	d000      	beq.n	8013a24 <tNoise_tick+0x1c>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8013a22:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8013a24:	ed94 7a02 	vldr	s14, [r4, #8]
 8013a28:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8013a98 <tNoise_tick+0x90>
 8013a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a30:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8013a9c <tNoise_tick+0x94>
 8013a34:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a3c:	ed84 7a02 	vstr	s14, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8013a40:	edd4 6a03 	vldr	s13, [r4, #12]
 8013a44:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013aa0 <tNoise_tick+0x98>
 8013a48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013a4c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013aa4 <tNoise_tick+0x9c>
 8013a50:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013a54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013a58:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8013a5c:	edd4 7a04 	vldr	s15, [r4, #16]
 8013a60:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8013aa8 <tNoise_tick+0xa0>
 8013a64:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013a68:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013aac <tNoise_tick+0xa4>
 8013a6c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8013a70:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013a74:	edc4 7a04 	vstr	s15, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8013a78:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a80:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8013ab0 <tNoise_tick+0xa8>
 8013a84:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013a88:	ee77 7a80 	vadd.f32	s15, s15, s0
        return (tmp * 0.05f);
 8013a8c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013ab4 <tNoise_tick+0xac>
 8013a90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a94:	e7c5      	b.n	8013a22 <tNoise_tick+0x1a>
 8013a96:	bf00      	nop
 8013a98:	3f7f65fe 	.word	0x3f7f65fe
 8013a9c:	3dcad8a1 	.word	0x3dcad8a1
 8013aa0:	3f76872b 	.word	0x3f76872b
 8013aa4:	3e97d0ff 	.word	0x3e97d0ff
 8013aa8:	3f11eb85 	.word	0x3f11eb85
 8013aac:	3f86be97 	.word	0x3f86be97
 8013ab0:	3e3d3c36 	.word	0x3e3d3c36
 8013ab4:	3d4ccccd 	.word	0x3d4ccccd

08013ab8 <tIntPhasor_initToPool>:
{
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
 8013ab8:	b538      	push	{r3, r4, r5, lr}
 8013aba:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8013abc:	680c      	ldr	r4, [r1, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8013abe:	4621      	mov	r1, r4
 8013ac0:	201c      	movs	r0, #28
 8013ac2:	f7ff f8f3 	bl	8012cac <mpool_alloc>
 8013ac6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8013ac8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8013aca:	6862      	ldr	r2, [r4, #4]
    
    c->phase    =  0;
 8013acc:	2300      	movs	r3, #0
 8013ace:	6043      	str	r3, [r0, #4]
    c->inc  = 0;
 8013ad0:	6083      	str	r3, [r0, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8013ad2:	edd2 7a01 	vldr	s15, [r2, #4]
 8013ad6:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8013ae4 <tIntPhasor_initToPool+0x2c>
 8013ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ade:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	4f800000 	.word	0x4f800000

08013ae8 <tIntPhasor_init>:
{
 8013ae8:	b508      	push	{r3, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
 8013aea:	3118      	adds	r1, #24
 8013aec:	f7ff ffe4 	bl	8013ab8 <tIntPhasor_initToPool>
}
 8013af0:	bd08      	pop	{r3, pc}
	...

08013af4 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8013af4:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
 8013af6:	6853      	ldr	r3, [r2, #4]
 8013af8:	6891      	ldr	r1, [r2, #8]
 8013afa:	440b      	add	r3, r1
 8013afc:	6053      	str	r3, [r2, #4]
    
    return c->phase * INV_TWO_TO_32; 
 8013afe:	ee07 3a90 	vmov	s15, r3
 8013b02:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
 8013b06:	eddf 7a02 	vldr	s15, [pc, #8]	; 8013b10 <tIntPhasor_tick+0x1c>
 8013b0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b0e:	4770      	bx	lr
 8013b10:	2f80000d 	.word	0x2f80000d

08013b14 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8013b14:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8013b16:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013b1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8013b1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013b22:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013b26:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8013b2a:	4770      	bx	lr

08013b2c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
 8013b2c:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 8013b2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8013b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b36:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8013b3a:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013b4c <tIntPhasor_setPhase+0x20>
 8013b3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b42:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013b46:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8013b4a:	4770      	bx	lr
 8013b4c:	4f800000 	.word	0x4f800000

08013b50 <tSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tSquareLFO_tick(tSquareLFO* const cy)
{
 8013b50:	b510      	push	{r4, lr}
 8013b52:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy;
 8013b56:	6804      	ldr	r4, [r0, #0]
    // Phasor increment
    Lfloat a = tIntPhasor_tick(&c->phasor);
 8013b58:	f104 0008 	add.w	r0, r4, #8
 8013b5c:	f7ff ffca 	bl	8013af4 <tIntPhasor_tick>
 8013b60:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tIntPhasor_tick(&c->invPhasor);
 8013b64:	f104 000c 	add.w	r0, r4, #12
 8013b68:	f7ff ffc4 	bl	8013af4 <tIntPhasor_tick>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8013b6c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8013b70:	edd4 7a01 	vldr	s15, [r4, #4]
 8013b74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013b7c:	ee30 0a67 	vsub.f32	s0, s0, s15
    return 2 * tmp;
}
 8013b80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b84:	ecbd 8b02 	vpop	{d8}
 8013b88:	bd10      	pop	{r4, pc}

08013b8a <tSquareLFO_setFreq>:

void     tSquareLFO_setFreq(tSquareLFO* const cy, Lfloat freq)
{
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	ed2d 8b02 	vpush	{d8}
 8013b90:	eeb0 8a40 	vmov.f32	s16, s0
    _tSquareLFO* c = *cy;
 8013b94:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setFreq(&c->phasor,freq);
 8013b96:	f104 0008 	add.w	r0, r4, #8
 8013b9a:	f7ff ffbb 	bl	8013b14 <tIntPhasor_setFreq>
    tIntPhasor_setFreq(&c->invPhasor,freq);
 8013b9e:	eeb0 0a48 	vmov.f32	s0, s16
 8013ba2:	f104 000c 	add.w	r0, r4, #12
 8013ba6:	f7ff ffb5 	bl	8013b14 <tIntPhasor_setFreq>
}
 8013baa:	ecbd 8b02 	vpop	{d8}
 8013bae:	bd10      	pop	{r4, pc}

08013bb0 <tSquareLFO_setPulseWidth>:
    tIntPhasor_setSampleRate(&c->phasor, sr);
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
 8013bb0:	b508      	push	{r3, lr}
    _tSquareLFO *c = *cy;
 8013bb2:	6800      	ldr	r0, [r0, #0]

    c->pulsewidth = pw;
 8013bb4:	ed80 0a01 	vstr	s0, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8013bb8:	6883      	ldr	r3, [r0, #8]
 8013bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8013bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bc2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013bd8 <tSquareLFO_setPulseWidth+0x28>
 8013bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bca:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013bce:	300c      	adds	r0, #12
 8013bd0:	f7ff ffac 	bl	8013b2c <tIntPhasor_setPhase>
}
 8013bd4:	bd08      	pop	{r3, pc}
 8013bd6:	bf00      	nop
 8013bd8:	2f80000d 	.word	0x2f80000d

08013bdc <tSquareLFO_initToPool>:
{
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	4606      	mov	r6, r0
 8013be0:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8013be2:	680f      	ldr	r7, [r1, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8013be4:	4639      	mov	r1, r7
 8013be6:	2010      	movs	r0, #16
 8013be8:	f7ff f860 	bl	8012cac <mpool_alloc>
 8013bec:	4604      	mov	r4, r0
 8013bee:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8013bf0:	f840 7b08 	str.w	r7, [r0], #8
    tIntPhasor_initToPool(&c->phasor,mp);
 8013bf4:	4629      	mov	r1, r5
 8013bf6:	f7ff ff5f 	bl	8013ab8 <tIntPhasor_initToPool>
    tIntPhasor_initToPool(&c->invPhasor,mp); 
 8013bfa:	4629      	mov	r1, r5
 8013bfc:	f104 000c 	add.w	r0, r4, #12
 8013c00:	f7ff ff5a 	bl	8013ab8 <tIntPhasor_initToPool>
    tSquareLFO_setPulseWidth(cy, 0.5f);
 8013c04:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013c08:	4630      	mov	r0, r6
 8013c0a:	f7ff ffd1 	bl	8013bb0 <tSquareLFO_setPulseWidth>
}
 8013c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c10 <tSquareLFO_init>:
{
 8013c10:	b508      	push	{r3, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
 8013c12:	3118      	adds	r1, #24
 8013c14:	f7ff ffe2 	bl	8013bdc <tSquareLFO_initToPool>
}
 8013c18:	bd08      	pop	{r3, pc}
	...

08013c1c <tSquareLFO_setPhase>:

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
 8013c1c:	b510      	push	{r4, lr}
    _tSquareLFO *c = *cy;
 8013c1e:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
 8013c20:	f104 0008 	add.w	r0, r4, #8
 8013c24:	f7ff ff82 	bl	8013b2c <tIntPhasor_setPhase>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8013c28:	ed94 0a01 	vldr	s0, [r4, #4]
 8013c2c:	68a3      	ldr	r3, [r4, #8]
 8013c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c36:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013c4c <tSquareLFO_setPhase+0x30>
 8013c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013c42:	f104 000c 	add.w	r0, r4, #12
 8013c46:	f7ff ff71 	bl	8013b2c <tIntPhasor_setPhase>
}
 8013c4a:	bd10      	pop	{r4, pc}
 8013c4c:	2f80000d 	.word	0x2f80000d

08013c50 <tSawSquareLFO_initToPool>:
    tSawSquareLFO_initToPool(cy, &leaf->mempool);

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
 8013c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c52:	4606      	mov	r6, r0
 8013c54:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8013c56:	680f      	ldr	r7, [r1, #0]
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8013c58:	4639      	mov	r1, r7
 8013c5a:	2010      	movs	r0, #16
 8013c5c:	f7ff f826 	bl	8012cac <mpool_alloc>
 8013c60:	4604      	mov	r4, r0
 8013c62:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8013c64:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8013c68:	4629      	mov	r1, r5
 8013c6a:	f7ff ffb7 	bl	8013bdc <tSquareLFO_initToPool>
    tIntPhasor_initToPool(&c->saw,mp); 
 8013c6e:	4629      	mov	r1, r5
 8013c70:	f104 0008 	add.w	r0, r4, #8
 8013c74:	f7ff ff20 	bl	8013ab8 <tIntPhasor_initToPool>
}
 8013c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c7a <tSawSquareLFO_init>:
{
 8013c7a:	b508      	push	{r3, lr}
    tSawSquareLFO_initToPool(cy, &leaf->mempool);
 8013c7c:	3118      	adds	r1, #24
 8013c7e:	f7ff ffe7 	bl	8013c50 <tSawSquareLFO_initToPool>
}
 8013c82:	bd08      	pop	{r3, pc}

08013c84 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8013c84:	b510      	push	{r4, lr}
 8013c86:	ed2d 8b02 	vpush	{d8}
    _tSawSquareLFO* c = *cy;
 8013c8a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8013c8c:	f104 0008 	add.w	r0, r4, #8
 8013c90:	f7ff ff30 	bl	8013af4 <tIntPhasor_tick>
 8013c94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013c98:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c9c:	ee30 8a00 	vadd.f32	s16, s0, s0
    Lfloat b = tSquareLFO_tick(&c->square);
 8013ca0:	f104 000c 	add.w	r0, r4, #12
 8013ca4:	f7ff ff54 	bl	8013b50 <tSquareLFO_tick>
    return  (1 - c->shape) * a + c->shape * b; 
 8013ca8:	ed94 7a01 	vldr	s14, [r4, #4]
 8013cac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cb4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013cb8:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 8013cbc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013cc0:	ecbd 8b02 	vpop	{d8}
 8013cc4:	bd10      	pop	{r4, pc}

08013cc6 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
 8013cc6:	b510      	push	{r4, lr}
 8013cc8:	ed2d 8b02 	vpush	{d8}
 8013ccc:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8013cd0:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setFreq(&c->square, freq);
 8013cd2:	f104 000c 	add.w	r0, r4, #12
 8013cd6:	f7ff ff58 	bl	8013b8a <tSquareLFO_setFreq>
    tIntPhasor_setFreq(&c->saw, freq);
 8013cda:	eeb0 0a48 	vmov.f32	s0, s16
 8013cde:	f104 0008 	add.w	r0, r4, #8
 8013ce2:	f7ff ff17 	bl	8013b14 <tIntPhasor_setFreq>
}
 8013ce6:	ecbd 8b02 	vpop	{d8}
 8013cea:	bd10      	pop	{r4, pc}

08013cec <tSawSquareLFO_setPhase>:
    _tSawSquareLFO* c = *cy;
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
 8013cec:	b510      	push	{r4, lr}
 8013cee:	ed2d 8b02 	vpush	{d8}
 8013cf2:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8013cf6:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setPhase(&c->square, phase);
 8013cf8:	f104 000c 	add.w	r0, r4, #12
 8013cfc:	f7ff ff8e 	bl	8013c1c <tSquareLFO_setPhase>
    tIntPhasor_setPhase(&c->saw, phase);
 8013d00:	eeb0 0a48 	vmov.f32	s0, s16
 8013d04:	f104 0008 	add.w	r0, r4, #8
 8013d08:	f7ff ff10 	bl	8013b2c <tIntPhasor_setPhase>
}
 8013d0c:	ecbd 8b02 	vpop	{d8}
 8013d10:	bd10      	pop	{r4, pc}

08013d12 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8013d12:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8013d14:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8013d18:	4770      	bx	lr
	...

08013d1c <tTriLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tTriLFO_tick(tTriLFO* const cy)
{
    _tTriLFO* c = *cy;
 8013d1c:	6803      	ldr	r3, [r0, #0]
    c->phase += c->inc;
 8013d1e:	689a      	ldr	r2, [r3, #8]
 8013d20:	6859      	ldr	r1, [r3, #4]
 8013d22:	440a      	add	r2, r1
 8013d24:	605a      	str	r2, [r3, #4]
    
    //bitmask fun
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8013d26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    uint32_t mask = shiftedPhase >> 31; //get the sign bit
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8013d2a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8013d2e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
 8013d32:	ee00 3a10 	vmov	s0, r3
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8013d36:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013d3a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013d50 <tTriLFO_tick+0x34>
 8013d3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d46:	ee30 0a67 	vsub.f32	s0, s0, s15
    return output;

}
 8013d4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013d4e:	4770      	bx	lr
 8013d50:	2ffffff6 	.word	0x2ffffff6

08013d54 <tTriLFO_setFreq>:

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
 8013d54:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8013d56:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013d5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8013d5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013d62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013d66:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8013d6a:	4770      	bx	lr

08013d6c <tTriLFO_initToPool>:
{
 8013d6c:	b538      	push	{r3, r4, r5, lr}
 8013d6e:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8013d70:	680d      	ldr	r5, [r1, #0]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8013d72:	4629      	mov	r1, r5
 8013d74:	2018      	movs	r0, #24
 8013d76:	f7fe ff99 	bl	8012cac <mpool_alloc>
 8013d7a:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8013d7c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8013d7e:	686a      	ldr	r2, [r5, #4]
    c->inc      =  0;
 8013d80:	2300      	movs	r3, #0
 8013d82:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8013d84:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8013d86:	edd2 7a01 	vldr	s15, [r2, #4]
 8013d8a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8013d8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013da8 <tTriLFO_initToPool+0x3c>
 8013d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d96:	edc0 7a05 	vstr	s15, [r0, #20]
    tTriLFO_setFreq(cy, 220.0f);
 8013d9a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8013dac <tTriLFO_initToPool+0x40>
 8013d9e:	4620      	mov	r0, r4
 8013da0:	f7ff ffd8 	bl	8013d54 <tTriLFO_setFreq>
}
 8013da4:	bd38      	pop	{r3, r4, r5, pc}
 8013da6:	bf00      	nop
 8013da8:	4f800000 	.word	0x4f800000
 8013dac:	435c0000 	.word	0x435c0000

08013db0 <tTriLFO_init>:
{
 8013db0:	b508      	push	{r3, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
 8013db2:	3118      	adds	r1, #24
 8013db4:	f7ff ffda 	bl	8013d6c <tTriLFO_initToPool>
}
 8013db8:	bd08      	pop	{r3, pc}

08013dba <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
 8013dba:	6803      	ldr	r3, [r0, #0]
    int i = phase;
 8013dbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8013dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013dc4:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8013dc8:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8013dcc:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8013dd0:	4770      	bx	lr

08013dd2 <tSineTriLFO_initToPool>:
{
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
 8013dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8013dd8:	680f      	ldr	r7, [r1, #0]
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8013dda:	4639      	mov	r1, r7
 8013ddc:	2010      	movs	r0, #16
 8013dde:	f7fe ff65 	bl	8012cac <mpool_alloc>
 8013de2:	4604      	mov	r4, r0
 8013de4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8013de6:	f840 7b08 	str.w	r7, [r0], #8
    tTriLFO_initToPool(&c->tri,mp);
 8013dea:	4629      	mov	r1, r5
 8013dec:	f7ff ffbe 	bl	8013d6c <tTriLFO_initToPool>
    tCycle_initToPool(&c->sine,mp); 
 8013df0:	4629      	mov	r1, r5
 8013df2:	f104 000c 	add.w	r0, r4, #12
 8013df6:	f7ff f8d1 	bl	8012f9c <tCycle_initToPool>
   
}
 8013dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013dfc <tSineTriLFO_init>:
{
 8013dfc:	b508      	push	{r3, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
 8013dfe:	3118      	adds	r1, #24
 8013e00:	f7ff ffe7 	bl	8013dd2 <tSineTriLFO_initToPool>
}
 8013e04:	bd08      	pop	{r3, pc}

08013e06 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8013e06:	b510      	push	{r4, lr}
 8013e08:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy;
 8013e0c:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
 8013e0e:	f104 000c 	add.w	r0, r4, #12
 8013e12:	f7ff f8eb 	bl	8012fec <tCycle_tick>
 8013e16:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tTriLFO_tick(&c->tri);
 8013e1a:	f104 0008 	add.w	r0, r4, #8
 8013e1e:	f7ff ff7d 	bl	8013d1c <tTriLFO_tick>
    return  (1.0f - c->shape) * a + c->shape * b;
 8013e22:	ed94 7a01 	vldr	s14, [r4, #4]
 8013e26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e2e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013e32:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 8013e36:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013e3a:	ecbd 8b02 	vpop	{d8}
 8013e3e:	bd10      	pop	{r4, pc}

08013e40 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
 8013e40:	b510      	push	{r4, lr}
 8013e42:	ed2d 8b02 	vpush	{d8}
 8013e46:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8013e4a:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setFreq(&c->tri, freq);
 8013e4c:	f104 0008 	add.w	r0, r4, #8
 8013e50:	f7ff ff80 	bl	8013d54 <tTriLFO_setFreq>
    tCycle_setFreq(&c->sine, freq);
 8013e54:	eeb0 0a48 	vmov.f32	s0, s16
 8013e58:	f104 000c 	add.w	r0, r4, #12
 8013e5c:	f7ff f8ee 	bl	801303c <tCycle_setFreq>
}
 8013e60:	ecbd 8b02 	vpop	{d8}
 8013e64:	bd10      	pop	{r4, pc}

08013e66 <tSineTriLFO_setPhase>:
    _tSineTriLFO* c = *cy;
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
 8013e66:	b510      	push	{r4, lr}
 8013e68:	ed2d 8b02 	vpush	{d8}
 8013e6c:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8013e70:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setPhase(&c->tri, phase);
 8013e72:	f104 0008 	add.w	r0, r4, #8
 8013e76:	f7ff ffa0 	bl	8013dba <tTriLFO_setPhase>
    tCycle_setPhase(&c->sine, phase);
 8013e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8013e7e:	f104 000c 	add.w	r0, r4, #12
 8013e82:	f7ff f8e7 	bl	8013054 <tCycle_setPhase>
}
 8013e86:	ecbd 8b02 	vpop	{d8}
 8013e8a:	bd10      	pop	{r4, pc}

08013e8c <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8013e8c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8013e8e:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 8013e92:	4770      	bx	lr

08013e94 <pickupNonLinearity>:
#endif

Lfloat   pickupNonLinearity          (Lfloat x)
{

	x = x * 2.0f;
 8013e94:	ee30 0a00 	vadd.f32	s0, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8013e98:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8013f04 <pickupNonLinearity+0x70>
 8013e9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013ea0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013f08 <pickupNonLinearity+0x74>
 8013ea4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013ea8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013eb0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013f0c <pickupNonLinearity+0x78>
 8013eb4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013eb8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ebc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ec4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8013f10 <pickupNonLinearity+0x7c>
 8013ec8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013ecc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ed0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ed4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013edc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013f14 <pickupNonLinearity+0x80>
 8013ee0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013ee4:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ee8:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013eec:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ef0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= 4.366812227074236f;
	return out;
}
 8013ef8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8013f18 <pickupNonLinearity+0x84>
 8013efc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013f00:	4770      	bx	lr
 8013f02:	bf00      	nop
 8013f04:	3d99999a 	.word	0x3d99999a
 8013f08:	3bdd2f1b 	.word	0x3bdd2f1b
 8013f0c:	3b0a47ed 	.word	0x3b0a47ed
 8013f10:	39f9096c 	.word	0x39f9096c
 8013f14:	3a59d777 	.word	0x3a59d777
 8013f18:	408bbced 	.word	0x408bbced

08013f1c <tPickupNonLinearity_initToPool>:
void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
 8013f1c:	b538      	push	{r3, r4, r5, lr}
 8013f1e:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8013f20:	680d      	ldr	r5, [r1, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8013f22:	4629      	mov	r1, r5
 8013f24:	2008      	movs	r0, #8
 8013f26:	f7fe fec1 	bl	8012cac <mpool_alloc>
 8013f2a:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 8013f2c:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	6043      	str	r3, [r0, #4]
}
 8013f32:	bd38      	pop	{r3, r4, r5, pc}

08013f34 <tPickupNonLinearity_init>:
{
 8013f34:	b508      	push	{r3, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
 8013f36:	3118      	adds	r1, #24
 8013f38:	f7ff fff0 	bl	8013f1c <tPickupNonLinearity_initToPool>
}
 8013f3c:	bd08      	pop	{r3, pc}

08013f3e <tPickupNonLinearity_free>:
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
 8013f3e:	b508      	push	{r3, lr}
	_tPickupNonLinearity* p = *pl;
 8013f40:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 8013f42:	6801      	ldr	r1, [r0, #0]
 8013f44:	f7fe ff9e 	bl	8012e84 <mpool_free>
}
 8013f48:	bd08      	pop	{r3, pc}
	...

08013f4c <tPickupNonLinearity_tick>:
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
 8013f4c:	6803      	ldr	r3, [r0, #0]
	x = x * 2.0f;
 8013f4e:	ee30 0a00 	vadd.f32	s0, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8013f52:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013fc4 <tPickupNonLinearity_tick+0x78>
 8013f56:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013f5a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8013fc8 <tPickupNonLinearity_tick+0x7c>
 8013f5e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013f62:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f6a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013fcc <tPickupNonLinearity_tick+0x80>
 8013f6e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013f72:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f76:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f7e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013fd0 <tPickupNonLinearity_tick+0x84>
 8013f82:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013f86:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f8a:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f8e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8013fd4 <tPickupNonLinearity_tick+0x88>
 8013f9a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013f9e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013fa2:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013fa6:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013faa:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013fae:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= 4.366812227074236f;
 8013fb2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8013fd8 <tPickupNonLinearity_tick+0x8c>
 8013fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat y = out - p->prev;
 8013fba:	ed93 0a01 	vldr	s0, [r3, #4]
	return y;
}
 8013fbe:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013fc2:	4770      	bx	lr
 8013fc4:	3d99999a 	.word	0x3d99999a
 8013fc8:	3bdd2f1b 	.word	0x3bdd2f1b
 8013fcc:	3b0a47ed 	.word	0x3b0a47ed
 8013fd0:	39f9096c 	.word	0x39f9096c
 8013fd4:	3a59d777 	.word	0x3a59d777
 8013fd8:	408bbced 	.word	0x408bbced

08013fdc <tSimpleLivingString3_free>:


}

void    tSimpleLivingString3_free (tSimpleLivingString3* const pl)
{
 8013fdc:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8013fde:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 8013fe0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8013fe4:	f7fa ff1a 	bl	800ee1c <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 8013fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013fec:	f7fc fa17 	bl	801041e <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 8013ff0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8013ff4:	f7fb fddb 	bl	800fbae <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 8013ff8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013ffc:	f7fa f824 	bl	800e048 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 8014000:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014004:	f7fa f820 	bl	800e048 <tLinearDelay_free>

    tExpSmooth_free(&p->wlSmooth);
 8014008:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801400c:	f7fb fafd 	bl	800f60a <tExpSmooth_free>

    
    mpool_free((char*)p, p->mempool);
 8014010:	6821      	ldr	r1, [r4, #0]
 8014012:	4620      	mov	r0, r4
 8014014:	f7fe ff36 	bl	8012e84 <mpool_free>
}
 8014018:	bd10      	pop	{r4, pc}
 801401a:	0000      	movs	r0, r0
 801401c:	0000      	movs	r0, r0
	...

08014020 <tSimpleLivingString3_setFreq>:

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
 8014020:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8014022:	6804      	ldr	r4, [r0, #0]
    p->freq = freq;
 8014024:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8014028:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 801402c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8014030:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8014034:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80140c0 <tSimpleLivingString3_setFreq+0xa0>
 8014038:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014040:	d40d      	bmi.n	801405e <tSimpleLivingString3_setFreq+0x3e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8014042:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014044:	005b      	lsls	r3, r3, #1
 8014046:	ee00 3a10 	vmov	s0, r3
 801404a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801404e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014056:	d404      	bmi.n	8014062 <tSimpleLivingString3_setFreq+0x42>
    Lfloat waveLength = (p->sampleRate/freq);
 8014058:	eeb0 0a67 	vmov.f32	s0, s15
 801405c:	e001      	b.n	8014062 <tSimpleLivingString3_setFreq+0x42>
    if (waveLength<4.8) waveLength=4.8f;
 801405e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80140d0 <tSimpleLivingString3_setFreq+0xb0>
    p->waveLengthInSamples =  waveLength * 0.5f;
 8014062:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014066:	ee20 0a27 	vmul.f32	s0, s0, s15
 801406a:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801406e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014072:	f7fb faef 	bl	800f654 <tExpSmooth_setDest>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8014076:	ed94 7a05 	vldr	s14, [r4, #20]
 801407a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80140d4 <tSimpleLivingString3_setFreq+0xb4>
 801407e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014086:	eddf 7a14 	vldr	s15, [pc, #80]	; 80140d8 <tSimpleLivingString3_setFreq+0xb8>
 801408a:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801408e:	ed94 6a01 	vldr	s12, [r4, #4]
 8014092:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8014096:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801409a:	ee84 5b06 	vdiv.f64	d5, d4, d6
 801409e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80140a2:	ee85 0b07 	vdiv.f64	d0, d5, d7
 80140a6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80140c8 <tSimpleLivingString3_setFreq+0xa8>
 80140aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80140ae:	f003 ffa7 	bl	8018000 <exp>
 80140b2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80140b6:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 80140ba:	bd10      	pop	{r4, pc}
 80140bc:	f3af 8000 	nop.w
 80140c0:	33333333 	.word	0x33333333
 80140c4:	40133333 	.word	0x40133333
 80140c8:	0a3d70a4 	.word	0x0a3d70a4
 80140cc:	c01ba3d7 	.word	0xc01ba3d7
 80140d0:	4099999a 	.word	0x4099999a
 80140d4:	3c23d70a 	.word	0x3c23d70a
 80140d8:	40dd0cb3 	.word	0x40dd0cb3
 80140dc:	00000000 	.word	0x00000000

080140e0 <tSimpleLivingString3_initToPool>:
{
 80140e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e4:	ed2d 8b08 	vpush	{d8-d11}
 80140e8:	4680      	mov	r8, r0
 80140ea:	460e      	mov	r6, r1
 80140ec:	eef0 8a40 	vmov.f32	s17, s0
 80140f0:	eeb0 8a60 	vmov.f32	s16, s1
 80140f4:	ee11 9a10 	vmov	r9, s2
 80140f8:	eeb0 9a61 	vmov.f32	s18, s3
 80140fc:	eef0 9a42 	vmov.f32	s19, s4
 8014100:	eeb0 aa62 	vmov.f32	s20, s5
 8014104:	4617      	mov	r7, r2
 8014106:	461d      	mov	r5, r3
    _tMempool* m = *mp;
 8014108:	f8d3 a000 	ldr.w	sl, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801410c:	4651      	mov	r1, sl
 801410e:	2070      	movs	r0, #112	; 0x70
 8014110:	f7fe fdcc 	bl	8012cac <mpool_alloc>
 8014114:	4604      	mov	r4, r0
 8014116:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 801411a:	f8c0 a000 	str.w	sl, [r0]
    LEAF* leaf = p->mempool->leaf;
 801411e:	f8da 3004 	ldr.w	r3, [sl, #4]
    p->oversampling = oversampling;
 8014122:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->sampleRate = leaf->sampleRate * oversampling;
 8014124:	ed93 7a00 	vldr	s14, [r3]
 8014128:	ee07 6a90 	vmov	s15, r6
 801412c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014134:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->curr=0.0f;
 8014138:	ed9f ba6b 	vldr	s22, [pc, #428]	; 80142e8 <tSimpleLivingString3_initToPool+0x208>
 801413c:	ed80 ba09 	vstr	s22, [r0, #36]	; 0x24
    p->maxLength = 2400 * oversampling;
 8014140:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8014144:	fb03 f606 	mul.w	r6, r3, r6
 8014148:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801414a:	f100 0658 	add.w	r6, r0, #88	; 0x58
 801414e:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8014152:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8014156:	4629      	mov	r1, r5
 8014158:	eddf 0a64 	vldr	s1, [pc, #400]	; 80142ec <tSimpleLivingString3_initToPool+0x20c>
 801415c:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8014160:	4630      	mov	r0, r6
 8014162:	f7fb fa1d 	bl	800f5a0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8014166:	f104 0b34 	add.w	fp, r4, #52	; 0x34
 801416a:	462a      	mov	r2, r5
 801416c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801416e:	ed94 0a02 	vldr	s0, [r4, #8]
 8014172:	4658      	mov	r0, fp
 8014174:	f7fa f846 	bl	800e204 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8014178:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 801417c:	462a      	mov	r2, r5
 801417e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014180:	ed94 0a02 	vldr	s0, [r4, #8]
 8014184:	4650      	mov	r0, sl
 8014186:	f7fa f83d 	bl	800e204 <tLinearDelay_initToPool>
    tSimpleLivingString3_setFreq(pl, freq);
 801418a:	eeb0 0a68 	vmov.f32	s0, s17
 801418e:	4640      	mov	r0, r8
 8014190:	f7ff ff46 	bl	8014020 <tSimpleLivingString3_setFreq>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8014194:	ed94 0a02 	vldr	s0, [r4, #8]
 8014198:	4658      	mov	r0, fp
 801419a:	f7f9 fff4 	bl	800e186 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 801419e:	ed94 0a02 	vldr	s0, [r4, #8]
 80141a2:	4650      	mov	r0, sl
 80141a4:	f7f9 ffef 	bl	800e186 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 80141a8:	4658      	mov	r0, fp
 80141aa:	f7f9 ff58 	bl	800e05e <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 80141ae:	4650      	mov	r0, sl
 80141b0:	f7f9 ff55 	bl	800e05e <tLinearDelay_clear>
    p->dampFreq = dampFreq;
 80141b4:	ed84 8a03 	vstr	s16, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80141b8:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 80141bc:	4629      	mov	r1, r5
 80141be:	eeb0 0a48 	vmov.f32	s0, s16
 80141c2:	4640      	mov	r0, r8
 80141c4:	f7fb fd20 	bl	800fc08 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 80141c8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80141cc:	4640      	mov	r0, r8
 80141ce:	f7fb fd51 	bl	800fc74 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80141d2:	eeb0 0a48 	vmov.f32	s0, s16
 80141d6:	4640      	mov	r0, r8
 80141d8:	f7fb fcf0 	bl	800fbbc <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 80141dc:	ed84 ba19 	vstr	s22, [r4, #100]	; 0x64
    p->rippleDelay = 0.5f;
 80141e0:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 80141e4:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80141e8:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80141ec:	f104 0850 	add.w	r8, r4, #80	; 0x50
 80141f0:	4629      	mov	r1, r5
 80141f2:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80141f6:	4640      	mov	r0, r8
 80141f8:	f7fc f8ea 	bl	80103d0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 80141fc:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8014200:	4640      	mov	r0, r8
 8014202:	f7fc f935 	bl	8010470 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 8014206:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801420a:	4640      	mov	r0, r8
 801420c:	f7fc f90d 	bl	801042a <tHighpass_setFreq>
    p->userDecay = decay;
 8014210:	f8c4 9014 	str.w	r9, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8014214:	462a      	mov	r2, r5
 8014216:	4639      	mov	r1, r7
 8014218:	eeb0 1a4a 	vmov.f32	s2, s20
 801421c:	eef0 0a69 	vmov.f32	s1, s19
 8014220:	eeb0 0a49 	vmov.f32	s0, s18
 8014224:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014228:	f7fa fdcb 	bl	800edc2 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 801422c:	6227      	str	r7, [r4, #32]
    p->changeGainCompensator = 1.0f;
 801422e:	f8c4 a01c 	str.w	sl, [r4, #28]
    p->freq = freq;
 8014232:	edc4 8a01 	vstr	s17, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8014236:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 801423a:	eec7 7a28 	vdiv.f32	s15, s14, s17
    if (waveLength<4.8) waveLength=4.8f;
 801423e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8014242:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80142d8 <tSimpleLivingString3_initToPool+0x1f8>
 8014246:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801424e:	d40d      	bmi.n	801426c <tSimpleLivingString3_initToPool+0x18c>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8014250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	ee00 3a10 	vmov	s0, r3
 8014258:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801425c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014264:	d404      	bmi.n	8014270 <tSimpleLivingString3_initToPool+0x190>
    Lfloat waveLength = (p->sampleRate/freq);
 8014266:	eeb0 0a67 	vmov.f32	s0, s15
 801426a:	e001      	b.n	8014270 <tSimpleLivingString3_initToPool+0x190>
    if (waveLength<4.8) waveLength=4.8f;
 801426c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80142f0 <tSimpleLivingString3_initToPool+0x210>
    p->waveLengthInSamples =  waveLength * 0.5f;
 8014270:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014274:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014278:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801427c:	4630      	mov	r0, r6
 801427e:	f7fb f9e9 	bl	800f654 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8014282:	ed94 7a05 	vldr	s14, [r4, #20]
 8014286:	eddf 7a19 	vldr	s15, [pc, #100]	; 80142ec <tSimpleLivingString3_initToPool+0x20c>
 801428a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801428e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014292:	eddf 7a18 	vldr	s15, [pc, #96]	; 80142f4 <tSimpleLivingString3_initToPool+0x214>
 8014296:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801429a:	ed94 6a01 	vldr	s12, [r4, #4]
 801429e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80142a2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80142a6:	ee84 5b06 	vdiv.f64	d5, d4, d6
 80142aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80142ae:	ee85 0b07 	vdiv.f64	d0, d5, d7
 80142b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80142e0 <tSimpleLivingString3_initToPool+0x200>
 80142b6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80142ba:	f003 fea1 	bl	8018000 <exp>
 80142be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80142c2:	ed84 0a04 	vstr	s0, [r4, #16]
    p->pickupPoint = 0.9f;
 80142c6:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <tSimpleLivingString3_initToPool+0x218>)
 80142c8:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->prevDelayLength = p->waveLengthInSamples;
 80142ca:	68a3      	ldr	r3, [r4, #8]
 80142cc:	61a3      	str	r3, [r4, #24]
}
 80142ce:	ecbd 8b08 	vpop	{d8-d11}
 80142d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142d6:	bf00      	nop
 80142d8:	33333333 	.word	0x33333333
 80142dc:	40133333 	.word	0x40133333
 80142e0:	0a3d70a4 	.word	0x0a3d70a4
 80142e4:	c01ba3d7 	.word	0xc01ba3d7
 80142e8:	00000000 	.word	0x00000000
 80142ec:	3c23d70a 	.word	0x3c23d70a
 80142f0:	4099999a 	.word	0x4099999a
 80142f4:	40dd0cb3 	.word	0x40dd0cb3
 80142f8:	3f666666 	.word	0x3f666666

080142fc <tSimpleLivingString3_setDampFreq>:
    p->waveLengthInSamples = waveLength * 0.5f;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tSimpleLivingString3_setDampFreq(tSimpleLivingString3* const pl, Lfloat dampFreq)
{
 80142fc:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 80142fe:	6800      	ldr	r0, [r0, #0]
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8014300:	303c      	adds	r0, #60	; 0x3c
 8014302:	f7fb fc5b 	bl	800fbbc <tOnePole_setFreq>
}
 8014306:	bd08      	pop	{r3, pc}

08014308 <tSimpleLivingString3_setDecay>:

void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
 8014308:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801430a:	6804      	ldr	r4, [r0, #0]
    p->userDecay = decay;
 801430c:	ed84 0a05 	vstr	s0, [r4, #20]

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8014310:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014360 <tSimpleLivingString3_setDecay+0x58>
 8014314:	ee20 7a27 	vmul.f32	s14, s0, s15
 8014318:	ee37 7a27 	vadd.f32	s14, s14, s15
 801431c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8014364 <tSimpleLivingString3_setDecay+0x5c>
 8014320:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8014324:	ed94 6a01 	vldr	s12, [r4, #4]
 8014328:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801432c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014330:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8014334:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8014338:	ee85 0b07 	vdiv.f64	d0, d5, d7
 801433c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8014358 <tSimpleLivingString3_setDecay+0x50>
 8014340:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014344:	f003 fe5c 	bl	8018000 <exp>
 8014348:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801434c:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8014350:	bd10      	pop	{r4, pc}
 8014352:	bf00      	nop
 8014354:	f3af 8000 	nop.w
 8014358:	52bd3c36 	.word	0x52bd3c36
 801435c:	c01ba196 	.word	0xc01ba196
 8014360:	3c23d70a 	.word	0x3c23d70a
 8014364:	40dd0cb3 	.word	0x40dd0cb3

08014368 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
 8014368:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 801436a:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 801436c:	3054      	adds	r0, #84	; 0x54
 801436e:	f7fa fd97 	bl	800eea0 <tFeedbackLeveler_setTargetLevel>
}
 8014372:	bd08      	pop	{r3, pc}

08014374 <tSimpleLivingString3_setLevSmoothFactor>:

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
 8014374:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8014376:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8014378:	3054      	adds	r0, #84	; 0x54
 801437a:	f7fa fd5e 	bl	800ee3a <tFeedbackLeveler_setFactor>
}
 801437e:	bd08      	pop	{r3, pc}

08014380 <tSimpleLivingString3_setLevStrength>:

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
 8014380:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8014382:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8014384:	3054      	adds	r0, #84	; 0x54
 8014386:	f7fa fd54 	bl	800ee32 <tFeedbackLeveler_setStrength>
}
 801438a:	bd08      	pop	{r3, pc}

0801438c <tSimpleLivingString3_setLevMode>:

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801438c:	b538      	push	{r3, r4, r5, lr}
 801438e:	460c      	mov	r4, r1
    _tSimpleLivingString3* p = *pl;
 8014390:	6805      	ldr	r5, [r0, #0]
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8014392:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8014396:	f7fa fd56 	bl	800ee46 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801439a:	622c      	str	r4, [r5, #32]
}
 801439c:	bd38      	pop	{r3, r4, r5, pc}

0801439e <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 801439e:	b4f0      	push	{r4, r5, r6, r7}
    _tSimpleLivingString3* p = *pl;
 80143a0:	6804      	ldr	r4, [r0, #0]
    int length = p->waveLengthInSamples;
 80143a2:	edd4 7a02 	vldr	s15, [r4, #8]
 80143a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143aa:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 80143ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143b2:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80143b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80143ba:	ee17 5a90 	vmov	r5, s15
    if (pluckPoint < 1)
 80143be:	2d00      	cmp	r5, #0
 80143c0:	dd03      	ble.n	80143ca <tSimpleLivingString3_pluck+0x2c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 80143c2:	42a8      	cmp	r0, r5
 80143c4:	dc02      	bgt.n	80143cc <tSimpleLivingString3_pluck+0x2e>
    {
    	pluckPoint = length-1;
 80143c6:	1e45      	subs	r5, r0, #1
 80143c8:	e000      	b.n	80143cc <tSimpleLivingString3_pluck+0x2e>
    	pluckPoint = 1;
 80143ca:	2501      	movs	r5, #1
    }
    int remainder = length-pluckPoint;
 80143cc:	1b43      	subs	r3, r0, r5
 80143ce:	ee06 3a10 	vmov	s12, r3
    for (int i = 0; i < length; i++)
 80143d2:	2200      	movs	r2, #0
 80143d4:	e021      	b.n	801441a <tSimpleLivingString3_pluck+0x7c>
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80143d6:	ee07 2a90 	vmov	s15, r2
 80143da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143de:	ee07 5a10 	vmov	s14, r5
 80143e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80143e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143ea:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 80143ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80143f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143fa:	ee67 7a80 	vmul.f32	s15, s15, s0
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80143fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014400:	698b      	ldr	r3, [r1, #24]
 8014402:	4413      	add	r3, r2
 8014404:	69ce      	ldr	r6, [r1, #28]
 8014406:	fbb3 f7f6 	udiv	r7, r3, r6
 801440a:	fb06 3317 	mls	r3, r6, r7, r3
        p->delayLineU->buff[bufWritePoint] = val;
 801440e:	6889      	ldr	r1, [r1, #8]
 8014410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014414:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < length; i++)
 8014418:	3201      	adds	r2, #1
 801441a:	4282      	cmp	r2, r0
 801441c:	da0e      	bge.n	801443c <tSimpleLivingString3_pluck+0x9e>
        if (i <= pluckPoint)
 801441e:	4295      	cmp	r5, r2
 8014420:	dbd9      	blt.n	80143d6 <tSimpleLivingString3_pluck+0x38>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8014422:	ee07 2a90 	vmov	s15, r2
 8014426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801442a:	ee07 5a90 	vmov	s15, r5
 801442e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014436:	ee67 7a80 	vmul.f32	s15, s15, s0
 801443a:	e7e0      	b.n	80143fe <tSimpleLivingString3_pluck+0x60>
    }
    for (int i = 0; i < length; i++)
 801443c:	2100      	movs	r1, #0
 801443e:	e01a      	b.n	8014476 <tSimpleLivingString3_pluck+0xd8>
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8014440:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8014442:	69ab      	ldr	r3, [r5, #24]
 8014444:	440b      	add	r3, r1
 8014446:	69ea      	ldr	r2, [r5, #28]
 8014448:	fbb3 f6f2 	udiv	r6, r3, r2
 801444c:	fb02 3216 	mls	r2, r2, r6, r3
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8014450:	1e43      	subs	r3, r0, #1
 8014452:	1a5b      	subs	r3, r3, r1
 8014454:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8014456:	69b7      	ldr	r7, [r6, #24]
 8014458:	443b      	add	r3, r7
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801445a:	69f7      	ldr	r7, [r6, #28]
 801445c:	fbb3 fcf7 	udiv	ip, r3, r7
 8014460:	fb07 331c 	mls	r3, r7, ip, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8014464:	68b6      	ldr	r6, [r6, #8]
 8014466:	68ad      	ldr	r5, [r5, #8]
 8014468:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801446c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < length; i++)
 8014474:	3101      	adds	r1, #1
 8014476:	4281      	cmp	r1, r0
 8014478:	dbe2      	blt.n	8014440 <tSimpleLivingString3_pluck+0xa2>
    }
}
 801447a:	bcf0      	pop	{r4, r5, r6, r7}
 801447c:	4770      	bx	lr

0801447e <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 801447e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014480:	ed2d 8b02 	vpush	{d8}
 8014484:	eef0 8a40 	vmov.f32	s17, s0
    _tSimpleLivingString3* p = *pl;
 8014488:	6804      	ldr	r4, [r0, #0]

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 801448a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801448e:	f7fb f8ef 	bl	800f670 <tExpSmooth_tick>
 8014492:	eeb0 8a40 	vmov.f32	s16, s0
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8014496:	f104 0634 	add.w	r6, r4, #52	; 0x34
 801449a:	4630      	mov	r0, r6
 801449c:	f7f9 fe73 	bl	800e186 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 80144a0:	f104 0738 	add.w	r7, r4, #56	; 0x38
 80144a4:	eeb0 0a48 	vmov.f32	s0, s16
 80144a8:	4638      	mov	r0, r7
 80144aa:	f7f9 fe6c 	bl	800e186 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 80144ae:	2500      	movs	r5, #0
 80144b0:	e039      	b.n	8014526 <tSimpleLivingString3_tick+0xa8>
        return min;
 80144b2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80144b6:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 80144ba:	4638      	mov	r0, r7
 80144bc:	f7f9 fe33 	bl	800e126 <tLinearDelay_tickOut>
    if (val < min)
 80144c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80144c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144cc:	d409      	bmi.n	80144e2 <tSimpleLivingString3_tick+0x64>
    else if (val > max)
 80144ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80144d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144da:	dd04      	ble.n	80144e6 <tSimpleLivingString3_tick+0x68>
        return max;
 80144dc:	eeb0 0a67 	vmov.f32	s0, s15
 80144e0:	e001      	b.n	80144e6 <tSimpleLivingString3_tick+0x68>
        return min;
 80144e2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80144e6:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 80144ea:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80144ee:	4630      	mov	r0, r6
 80144f0:	f7f9 fe04 	bl	800e0fc <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 80144f4:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80144f8:	eeb1 0a40 	vneg.f32	s0, s0
 80144fc:	4638      	mov	r0, r7
 80144fe:	f7f9 fdfd 	bl	800e0fc <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8014502:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8014506:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 801450a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 801450e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014516:	ee17 1a90 	vmov	r1, s15
 801451a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801451e:	4630      	mov	r0, r6
 8014520:	f7f9 feac 	bl	800e27c <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8014524:	3501      	adds	r5, #1
 8014526:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014528:	42ab      	cmp	r3, r5
 801452a:	dd29      	ble.n	8014580 <tSimpleLivingString3_tick+0x102>
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 801452c:	4630      	mov	r0, r6
 801452e:	f7f9 fdfa 	bl	800e126 <tLinearDelay_tickOut>
 8014532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8014536:	f7fb fb86 	bl	800fc46 <tOnePole_tick>
 801453a:	edd4 7a04 	vldr	s15, [r4, #16]
 801453e:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 8014542:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014546:	ee20 0a27 	vmul.f32	s0, s0, s15
 801454a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801454e:	f7fb ff7a 	bl	8010446 <tHighpass_tick>
 8014552:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8014556:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801455a:	f7fa fc77 	bl	800ee4c <tFeedbackLeveler_tick>
    if (val < min)
 801455e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014562:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456a:	d4a2      	bmi.n	80144b2 <tSimpleLivingString3_tick+0x34>
    else if (val > max)
 801456c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014570:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014578:	dd9d      	ble.n	80144b6 <tSimpleLivingString3_tick+0x38>
        return max;
 801457a:	eeb0 0a67 	vmov.f32	s0, s15
 801457e:	e79a      	b.n	80144b6 <tSimpleLivingString3_tick+0x38>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
 8014580:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8014584:	ee27 7a88 	vmul.f32	s14, s15, s16
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8014588:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801458c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014590:	ee67 7a88 	vmul.f32	s15, s15, s16
    int32_t whichPoint = ((int32_t)roundf(point));
 8014594:	feb8 6a47 	vrinta.f32	s12, s14
 8014598:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat LfloatPart = point - whichPoint;
 801459c:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 80145a0:	ee37 7a65 	vsub.f32	s14, s14, s11

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80145a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80145a6:	6983      	ldr	r3, [r0, #24]
 80145a8:	ee16 2a10 	vmov	r2, s12
 80145ac:	4413      	add	r3, r2
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80145ae:	69c1      	ldr	r1, [r0, #28]
 80145b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80145b4:	fb01 3312 	mls	r3, r1, r2, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 80145b8:	1c5a      	adds	r2, r3, #1
 80145ba:	fb92 f5f1 	sdiv	r5, r2, r1
 80145be:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80145c2:	6882      	ldr	r2, [r0, #8]
 80145c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80145c8:	ed93 0a00 	vldr	s0, [r3]
 80145cc:	ee36 6ac7 	vsub.f32	s12, s13, s14
 80145d0:	ee20 0a06 	vmul.f32	s0, s0, s12
 80145d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80145d8:	ed92 6a00 	vldr	s12, [r2]
 80145dc:	ee26 7a07 	vmul.f32	s14, s12, s14
 80145e0:	ee30 0a07 	vadd.f32	s0, s0, s14


    whichPoint = (int32_t)roundf(reversePoint);
 80145e4:	feb8 7a67 	vrinta.f32	s14, s15
 80145e8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    LfloatPart = reversePoint - whichPoint;
 80145ec:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80145f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80145f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80145f6:	6983      	ldr	r3, [r0, #24]
 80145f8:	ee17 2a10 	vmov	r2, s14
 80145fc:	4413      	add	r3, r2
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 80145fe:	69c1      	ldr	r1, [r0, #28]
 8014600:	fb93 f2f1 	sdiv	r2, r3, r1
 8014604:	fb01 3312 	mls	r3, r1, r2, r3
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8014608:	1c5a      	adds	r2, r3, #1
 801460a:	fb92 f5f1 	sdiv	r5, r2, r1
 801460e:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8014612:	6882      	ldr	r2, [r0, #8]
 8014614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014618:	ed93 7a00 	vldr	s14, [r3]
 801461c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8014620:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014624:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014628:	edd2 6a00 	vldr	s13, [r2]
 801462c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014630:	ee77 7a27 	vadd.f32	s15, s14, s15

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8014634:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014638:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801463c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014640:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8014644:	68a3      	ldr	r3, [r4, #8]
 8014646:	61a3      	str	r3, [r4, #24]
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8014648:	ecbd 8b02 	vpop	{d8}
 801464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801464e <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801464e:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 8014650:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8014654:	4770      	bx	lr

08014656 <tTString_free>:
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
    x->pickupAmount = 0.0f;
    tPickupNonLinearity_initToPool(&x->p, mp);
}
void    tTString_free                  (tTString* const bw)
{
 8014656:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8014658:	6804      	ldr	r4, [r0, #0]
    tPickupNonLinearity_free(&x->p);
 801465a:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 801465e:	f7ff fc6e 	bl	8013f3e <tPickupNonLinearity_free>
    tNoise_free(&x->pickNoiseSource);
 8014662:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8014666:	f7ff f9c9 	bl	80139fc <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 801466a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801466e:	f7fa fbd5 	bl	800ee1c <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 8014672:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8014676:	f7fa fbd1 	bl	800ee1c <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 801467a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801467e:	f7fb fc18 	bl	800feb2 <tSVF_free>
    tHighpass_free(&x->barHP);
 8014682:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8014686:	f7fb feca 	bl	801041e <tHighpass_free>
    tSVF_free(&x->barResonator);
 801468a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801468e:	f7fb fc10 	bl	800feb2 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 8014692:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8014696:	f7fa ffb8 	bl	800f60a <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 801469a:	f504 708a 	add.w	r0, r4, #276	; 0x114
 801469e:	f7fb f82e 	bl	800f6fe <tSlide_free>
    tSlide_free(&x->barSmooth);
 80146a2:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80146a6:	f7fb f82a 	bl	800f6fe <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 80146aa:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 80146ae:	f7fa ffac 	bl	800f60a <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 80146b2:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80146b6:	f7fa ffa8 	bl	800f60a <tExpSmooth_free>
	tSlide_free(&x->slide);
 80146ba:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80146be:	f7fb f81e 	bl	800f6fe <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 80146c2:	f104 0020 	add.w	r0, r4, #32
 80146c6:	f7fb feaa 	bl	801041e <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 80146ca:	f104 001c 	add.w	r0, r4, #28
 80146ce:	f7fb fea6 	bl	801041e <tHighpass_free>
    tNoise_free(&x->noise);
 80146d2:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80146d6:	f7ff f991 	bl	80139fc <tNoise_free>
    tSVF_free(&x->peakFilt);
 80146da:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80146de:	f7fb fbe8 	bl	800feb2 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 80146e2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80146e6:	f7fb fbe4 	bl	800feb2 <tSVF_free>
    tSVF_free(&x->pickupFilter);
 80146ea:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80146ee:	f7fb fbe0 	bl	800feb2 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 80146f2:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80146f6:	f7fe fc72 	bl	8012fde <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 80146fa:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80146fe:	f7fe fc6e 	bl	8012fde <tCycle_free>
    tSVF_free(&x->highpassP);
 8014702:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8014706:	f7fb fbd4 	bl	800feb2 <tSVF_free>
    tSVF_free(&x->lowpassP),
 801470a:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801470e:	f7fb fbd0 	bl	800feb2 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 8014712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014716:	f7fb f8d7 	bl	800f8c8 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 801471a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801471e:	f7fb f8d3 	bl	800f8c8 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 8014722:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8014726:	f7fa ff70 	bl	800f60a <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 801472a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801472e:	f7fa ff6c 	bl	800f60a <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 8014732:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014736:	f7fa ff68 	bl	800f60a <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 801473a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801473e:	f7fb fae1 	bl	800fd04 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 8014742:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014746:	f7fb fadd 	bl	800fd04 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 801474a:	f104 0018 	add.w	r0, r4, #24
 801474e:	f7f9 fda8 	bl	800e2a2 <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 8014752:	f104 0014 	add.w	r0, r4, #20
 8014756:	f7f9 fda4 	bl	800e2a2 <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 801475a:	6821      	ldr	r1, [r4, #0]
 801475c:	4620      	mov	r0, r4
 801475e:	f7fe fb91 	bl	8012e84 <mpool_free>
}
 8014762:	bd10      	pop	{r4, pc}

08014764 <tTString_tick>:

Lfloat   tTString_tick                  (tTString* const bw)
{
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	ed2d 8b0a 	vpush	{d8-d12}
 801476c:	b083      	sub	sp, #12
    _tTString* x = *bw;
 801476e:	6804      	ldr	r4, [r0, #0]
    Lfloat theOutput = 0.0f;
    x->feedbackNoise = tNoise_tick(&x->noise);
 8014770:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8014774:	f7ff f948 	bl	8013a08 <tNoise_tick>
 8014778:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160

    Lfloat barPos = x->barPosition;
 801477c:	edd4 8a3b 	vldr	s17, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8014780:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
 8014784:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014788:	ee37 7a87 	vadd.f32	s14, s15, s14
 801478c:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8014790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014794:	d408      	bmi.n	80147a8 <tTString_tick+0x44>
 8014796:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801479a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801479e:	eef4 7ae8 	vcmpe.f32	s15, s17
 80147a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a6:	dd42      	ble.n	801482e <tTString_tick+0xca>
	{
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 80147a8:	eeb0 0a68 	vmov.f32	s0, s17
 80147ac:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80147b0:	f7fa ff58 	bl	800f664 <tExpSmooth_setValAndDest>
    {
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
    }

    //Lfloat currentBumpSmoothed = currentBump;
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 80147b4:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80147b8:	f7fa ff5a 	bl	800f670 <tExpSmooth_tick>
 80147bc:	eef0 9a40 	vmov.f32	s19, s0

    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80147c0:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
 80147c4:	ee30 0a67 	vsub.f32	s0, s0, s15
    return alias.f;
 80147c8:	ee10 3a10 	vmov	r3, s0
 80147cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147d0:	ee08 3a10 	vmov	s16, r3


    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80147d4:	f504 758e 	add.w	r5, r4, #284	; 0x11c
 80147d8:	eeb0 0a68 	vmov.f32	s0, s17
 80147dc:	4628      	mov	r0, r5
 80147de:	f7fa ff39 	bl	800f654 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80147e2:	4628      	mov	r0, r5
 80147e4:	f7fa ff44 	bl	800f670 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80147e8:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
 80147ec:	ee70 7a67 	vsub.f32	s15, s0, s15
 80147f0:	ee17 3a90 	vmov	r3, s15
 80147f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80147f8:	ee07 3a90 	vmov	s15, r3
        x->prevBarPosSmoothVol = barPosSmoothVol;
 80147fc:	ed84 0a48 	vstr	s0, [r4, #288]	; 0x120
        Lfloat volCut = 1.0f;
        if (differenceFastSmooth < 0.0001f)
 8014800:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8014b88 <tTString_tick+0x424>
 8014804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480c:	d516      	bpl.n	801483c <tTString_tick+0xd8>
        {
        	//volCut = LEAF_map(differenceFastSmooth, 0.00001f, 0.0001f, 0.0f, 1.0f);
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 801480e:	ed9f 7adf 	vldr	s14, [pc, #892]	; 8014b8c <tTString_tick+0x428>
 8014812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014816:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8014b90 <tTString_tick+0x42c>
 801481a:	ee67 8a87 	vmul.f32	s17, s15, s14
        	if (volCut < 0.0f)
 801481e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	d50b      	bpl.n	8014840 <tTString_tick+0xdc>
        	{
        		volCut = 0.0f;
 8014828:	eddf 8ada 	vldr	s17, [pc, #872]	; 8014b94 <tTString_tick+0x430>
 801482c:	e008      	b.n	8014840 <tTString_tick+0xdc>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 801482e:	eeb0 0a68 	vmov.f32	s0, s17
 8014832:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8014836:	f7fa ff0d 	bl	800f654 <tExpSmooth_setDest>
 801483a:	e7bb      	b.n	80147b4 <tTString_tick+0x50>
        Lfloat volCut = 1.0f;
 801483c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
        	}
        }
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8014840:	ed94 9a5b 	vldr	s18, [r4, #364]	; 0x16c
 8014844:	ee29 9a29 	vmul.f32	s18, s18, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8014848:	edd4 7a3f 	vldr	s15, [r4, #252]	; 0xfc
 801484c:	ee79 7a67 	vsub.f32	s15, s18, s15
 8014850:	ee17 3a90 	vmov	r3, s15
 8014854:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000

    x->prevBarPosSmoothed = barPosSmoothed;
 8014858:	edc4 9a4a 	vstr	s19, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 801485c:	ee38 0a08 	vadd.f32	s0, s16, s16
    if (val < min)
 8014860:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014868:	d409      	bmi.n	801487e <tTString_tick+0x11a>
    else if (val > max)
 801486a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801486e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014876:	dd04      	ble.n	8014882 <tTString_tick+0x11e>
        return max;
 8014878:	eeb0 0a67 	vmov.f32	s0, s15
 801487c:	e001      	b.n	8014882 <tTString_tick+0x11e>
        return min;
 801487e:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8014b94 <tTString_tick+0x430>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8014882:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8014886:	f7fa ff6a 	bl	800f75e <tSlide_tick>
 801488a:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 801488e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8014892:	2b00      	cmp	r3, #0
 8014894:	f000 813f 	beq.w	8014b16 <tTString_tick+0x3b2>
    {
		if (bumpDifference > 1.0f)
 8014898:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801489c:	ee07 5a10 	vmov	s14, r5
 80148a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80148a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a8:	f300 80ac 	bgt.w	8014a04 <tTString_tick+0x2a0>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
			x->sampleCount = 0;
		}
		else
		{
			x->bumpOsc = 0;
 80148ac:	2300      	movs	r3, #0
 80148ae:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		}

		if (x->bumpOsc)
 80148b2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 80148b6:	b183      	cbz	r3, 80148da <tTString_tick+0x176>
		{
			if (x->bumpCount > x->timeSinceLastBump)
 80148b8:	edd4 7a4e 	vldr	s15, [r4, #312]	; 0x138
 80148bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148c0:	ed94 7a40 	vldr	s14, [r4, #256]	; 0x100
 80148c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148cc:	f300 80d4 	bgt.w	8014a78 <tTString_tick+0x314>
			{
				tExpSmooth_setVal(&x->barPulse, 1.0f);
				tSlide_setDest(&x->barPulseSlide, 1.0f);
				x->bumpCount = 0;
			}
			x->bumpCount++;
 80148d0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80148d4:	3301      	adds	r3, #1
 80148d6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		}

		if (x->sampleCount < 3000)
 80148da:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80148de:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80148e2:	4293      	cmp	r3, r2
 80148e4:	f200 80d8 	bhi.w	8014a98 <tTString_tick+0x334>
		{
			x->sampleCount++;
 80148e8:	3301      	adds	r3, #1
 80148ea:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		}
		else
		{
			tSlide_setDest(&x->barSmooth, 5.0f);
		}
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 80148ee:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80148f2:	f7fa ff0e 	bl	800f712 <tSlide_tickNoInput>
 80148f6:	eeb0 9a40 	vmov.f32	s18, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 80148fa:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
 80148fe:	4628      	mov	r0, r5
 8014900:	f7fb fb94 	bl	801002c <tSVF_setFreq>
		Lfloat filterAmount = 0.5f;
		Lfloat dryAmount = 1.0f;
		x->slideNoise = x->feedbackNoise;
 8014904:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8014908:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 801490c:	f504 768a 	add.w	r6, r4, #276	; 0x114
 8014910:	4630      	mov	r0, r6
 8014912:	f7fa fefe 	bl	800f712 <tSlide_tickNoInput>
 8014916:	eeb0 8a40 	vmov.f32	s16, s0

		if (pulseVal > .99f)
 801491a:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8014b98 <tTString_tick+0x434>
 801491e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014926:	f300 80be 	bgt.w	8014aa6 <tTString_tick+0x342>
		{
			tSlide_setDest(&x->barPulseSlide, 0.0f);

		}

		x->slideNoise *= pulseVal;
 801492a:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 801492e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014932:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		//x->slideNoise = tExpSmooth_tick(&x->barPulse);
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8014936:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 801493a:	f7fa fe99 	bl	800f670 <tExpSmooth_tick>
 801493e:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8014942:	ee20 8a27 	vmul.f32	s16, s0, s15
 8014946:	ed84 8a34 	vstr	s16, [r4, #208]	; 0xd0
		//x->slideNoise *= x->slideGain;
		Lfloat tempSlideNoise1 = x->slideNoise;
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 801494a:	eeb0 0a48 	vmov.f32	s0, s16
 801494e:	4628      	mov	r0, r5
 8014950:	f7fb fab5 	bl	800febe <tSVF_tick>
 8014954:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 8014958:	ee20 7a27 	vmul.f32	s14, s0, s15
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 801495c:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8014b9c <tTString_tick+0x438>
 8014960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801496c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014970:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8014ba0 <tTString_tick+0x43c>
 8014974:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014978:	ee67 6a26 	vmul.f32	s13, s14, s13
 801497c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014980:	ee67 6a26 	vmul.f32	s13, s14, s13
 8014984:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014988:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat den = InvSqrt(1.0f + a * a);
 801498c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014994:	ee37 7a26 	vadd.f32	s14, s14, s13
    Lfloat xhalf = 0.5f*x;
 8014998:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801499c:	ee67 6a26 	vmul.f32	s13, s14, s13
    int i = *(int*)&x; // get bits for floating value
 80149a0:	ee17 2a10 	vmov	r2, s14
    x = *(Lfloat*)&i; // convert bits back to float
 80149a4:	4b7f      	ldr	r3, [pc, #508]	; (8014ba4 <tTString_tick+0x440>)
 80149a6:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80149aa:	ee07 3a10 	vmov	s14, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 80149ae:	ee66 6a87 	vmul.f32	s13, s13, s14
 80149b2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80149b6:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80149ba:	ee76 6a66 	vsub.f32	s13, s12, s13
 80149be:	ee27 7a26 	vmul.f32	s14, s14, s13
    return a * den;
 80149c2:	ee67 7a87 	vmul.f32	s15, s15, s14

		Lfloat filterFade = 1.0f;
		if (barFreq < 300.0f)
 80149c6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8014ba8 <tTString_tick+0x444>
 80149ca:	eeb4 9ac7 	vcmpe.f32	s18, s14
 80149ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d2:	d56e      	bpl.n	8014ab2 <tTString_tick+0x34e>
		{
			//filterFade = LEAF_map(barFreq, 100.0f, 300.0f, 0.0f, 1.0f);
			filterFade = (barFreq - 100.0f) * 0.005f;
 80149d4:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8014bac <tTString_tick+0x448>
 80149d8:	ee39 7a47 	vsub.f32	s14, s18, s14
 80149dc:	eddf 6a74 	vldr	s13, [pc, #464]	; 8014bb0 <tTString_tick+0x44c>
 80149e0:	ee27 7a26 	vmul.f32	s14, s14, s13
    if (val < min)
 80149e4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80149e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ec:	f100 8090 	bmi.w	8014b10 <tTString_tick+0x3ac>
    else if (val > max)
 80149f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80149f4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80149f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fc:	dd5b      	ble.n	8014ab6 <tTString_tick+0x352>
        return max;
 80149fe:	eeb0 7a66 	vmov.f32	s14, s13
 8014a02:	e058      	b.n	8014ab6 <tTString_tick+0x352>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8014a04:	eeb0 0a67 	vmov.f32	s0, s15
 8014a08:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8014a0c:	f7fa fe26 	bl	800f65c <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8014a10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a14:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8014a18:	f7fa fe77 	bl	800f70a <tSlide_setDest>
			x->lastBump = currentBump;
 8014a1c:	ed84 9a3f 	vstr	s18, [r4, #252]	; 0xfc
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8014a20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a24:	ee07 5a10 	vmov	s14, r5
 8014a28:	ee87 7a87 	vdiv.f32	s14, s15, s14
 8014a2c:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
 8014a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a38:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			if (x->timeSinceLastBump < 100)
 8014a3c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8014bac <tTString_tick+0x448>
 8014a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a48:	d512      	bpl.n	8014a70 <tTString_tick+0x30c>
				x->bumpOsc = 1;
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014a50:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014a54:	ed94 7a02 	vldr	s14, [r4, #8]
 8014a58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014a5c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014a60:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8014a64:	f7fa fe51 	bl	800f70a <tSlide_setDest>
			x->sampleCount = 0;
 8014a68:	2300      	movs	r3, #0
 8014a6a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8014a6e:	e720      	b.n	80148b2 <tTString_tick+0x14e>
				x->bumpOsc = 0;
 8014a70:	2300      	movs	r3, #0
 8014a72:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8014a76:	e7eb      	b.n	8014a50 <tTString_tick+0x2ec>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8014a78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a7c:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8014a80:	f7fa fdec 	bl	800f65c <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 8014a84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a88:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8014a8c:	f7fa fe3d 	bl	800f70a <tSlide_setDest>
				x->bumpCount = 0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8014a96:	e71b      	b.n	80148d0 <tTString_tick+0x16c>
			tSlide_setDest(&x->barSmooth, 5.0f);
 8014a98:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8014a9c:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8014aa0:	f7fa fe33 	bl	800f70a <tSlide_setDest>
 8014aa4:	e723      	b.n	80148ee <tTString_tick+0x18a>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 8014aa6:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8014b94 <tTString_tick+0x430>
 8014aaa:	4630      	mov	r0, r6
 8014aac:	f7fa fe2d 	bl	800f70a <tSlide_setDest>
 8014ab0:	e73b      	b.n	801492a <tTString_tick+0x1c6>
		Lfloat filterFade = 1.0f;
 8014ab2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
		}

		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8014ab6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014aba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ac2:	ee38 0a27 	vadd.f32	s0, s16, s15
 8014ac6:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise *= x->muted;
 8014aca:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
 8014ace:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ad2:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8014ad6:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8014ada:	f7fb fcb4 	bl	8010446 <tHighpass_tick>
 8014ade:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8014ae2:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8014ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014aea:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014aee:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8014af2:	f7fb f9e4 	bl	800febe <tSVF_tick>
 8014af6:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = x->slideNoise * x->slideGain;
 8014afa:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8014afe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b02:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
        while (pickupPos < 0.0f)
        {
        	pickupPos = pickupPos + halfCurrentDelay;
        	backwards = !backwards;
        }
        Lfloat pickupPosFinal = pickupPos;
 8014b06:	f04f 0900 	mov.w	r9, #0
 8014b0a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8014b94 <tTString_tick+0x430>
 8014b0e:	e1ab      	b.n	8014e68 <tTString_tick+0x704>
        return min;
 8014b10:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014b94 <tTString_tick+0x430>
 8014b14:	e7cf      	b.n	8014ab6 <tTString_tick+0x352>
    	x->slideNoise = x->feedbackNoise;
 8014b16:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 8014b1a:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise *= x->muted;
 8014b1e:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
 8014b22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b26:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8014b2a:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8014b2e:	f7fb fc8a 	bl	8010446 <tHighpass_tick>
 8014b32:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8014b36:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8014b3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014b42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b46:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014b4a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8014b4e:	f7fb f9b6 	bl	800febe <tSVF_tick>
 8014b52:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = x->slideNoise * x->slideGain;
 8014b56:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8014b5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b5e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
 8014b62:	e7d0      	b.n	8014b06 <tTString_tick+0x3a2>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8014b64:	eeb0 0a48 	vmov.f32	s0, s16
 8014b68:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014b6c:	f7fb f800 	bl	800fb70 <tThiranAllpassSOCascade_tick>
 8014b70:	eeb0 8a40 	vmov.f32	s16, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8014b74:	eeb0 0a4b 	vmov.f32	s0, s22
 8014b78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b7c:	f7fa fff8 	bl	800fb70 <tThiranAllpassSOCascade_tick>
 8014b80:	eeb0 ba40 	vmov.f32	s22, s0
 8014b84:	e23d      	b.n	8015002 <tTString_tick+0x89e>
 8014b86:	bf00      	nop
 8014b88:	38d1b717 	.word	0x38d1b717
 8014b8c:	3727c5ac 	.word	0x3727c5ac
 8014b90:	448ae38e 	.word	0x448ae38e
 8014b94:	00000000 	.word	0x00000000
 8014b98:	3f7d70a4 	.word	0x3f7d70a4
 8014b9c:	3e28d927 	.word	0x3e28d927
 8014ba0:	3c217586 	.word	0x3c217586
 8014ba4:	5f3759df 	.word	0x5f3759df
 8014ba8:	43960000 	.word	0x43960000
 8014bac:	42c80000 	.word	0x42c80000
 8014bb0:	3ba3d70a 	.word	0x3ba3d70a
 8014bb4:	3dd55555 	.word	0x3dd55555
 8014bb8:	3cb17e4b 	.word	0x3cb17e4b
 8014bbc:	3fa66666 	.word	0x3fa66666
 8014bc0:	3c23d70a 	.word	0x3c23d70a
 8014bc4:	3e22f983 	.word	0x3e22f983
 8014bc8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8014bcc:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8014bd0:	ee66 6a8b 	vmul.f32	s13, s13, s22
 8014bd4:	ee67 7a26 	vmul.f32	s15, s14, s13
    if (val < min)
 8014bd8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be4:	d409      	bmi.n	8014bfa <tTString_tick+0x496>
    else if (val > max)
 8014be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf2:	dd04      	ble.n	8014bfe <tTString_tick+0x49a>
        return max;
 8014bf4:	eef0 7a47 	vmov.f32	s15, s14
 8014bf8:	e001      	b.n	8014bfe <tTString_tick+0x49a>
        return min;
 8014bfa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014bfe:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 8014c02:	edd4 7a3d 	vldr	s15, [r4, #244]	; 0xf4
 8014c06:	ed5f aa15 	vldr	s21, [pc, #-84]	; 8014bb4 <tTString_tick+0x450>
 8014c0a:	ee67 aaaa 	vmul.f32	s21, s15, s21
        Lfloat positionMax = (x->openStringLength * 0.021666666666667f);
 8014c0e:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8014bb8 <tTString_tick+0x454>
 8014c12:	ee27 8a87 	vmul.f32	s16, s15, s14
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8014c16:	ed94 ba27 	vldr	s22, [r4, #156]	; 0x9c
 8014c1a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8014c1e:	f7fe f9e5 	bl	8012fec <tCycle_tick>
 8014c22:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
 8014c26:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c2a:	ee3b ba00 	vadd.f32	s22, s22, s0
    return ostart + (ostop - ostart) * value;
 8014c2e:	ee78 7a6a 	vsub.f32	s15, s16, s21
 8014c32:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8014c36:	ee77 7aaa 	vadd.f32	s15, s15, s21
        uint32_t backwards = 0;
 8014c3a:	2300      	movs	r3, #0
        while (pickupPos > halfCurrentDelay)
 8014c3c:	e003      	b.n	8014c46 <tTString_tick+0x4e2>
        	pickupPos = pickupPos - halfCurrentDelay;
 8014c3e:	ee77 7ae8 	vsub.f32	s15, s15, s17
        	backwards = !backwards;
 8014c42:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 8014c46:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c4e:	dcf6      	bgt.n	8014c3e <tTString_tick+0x4da>
 8014c50:	e003      	b.n	8014c5a <tTString_tick+0x4f6>
        	pickupPos = pickupPos + halfCurrentDelay;
 8014c52:	ee77 7aa8 	vadd.f32	s15, s15, s17
        	backwards = !backwards;
 8014c56:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8014c5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c62:	d4f6      	bmi.n	8014c52 <tTString_tick+0x4ee>
        if (backwards)
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	f000 81eb 	beq.w	8015040 <tTString_tick+0x8dc>
        {
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8014c6a:	ee38 8ae7 	vsub.f32	s16, s17, s15
        }

        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8014c6e:	ee88 7a28 	vdiv.f32	s14, s16, s17
 8014c72:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8014c76:	eebc 7ac8 	vcvt.u32.f32	s14, s16
 8014c7a:	ee17 8a10 	vmov	r8, s14
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8014c7e:	f108 0a01 	add.w	sl, r8, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8014c82:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014c86:	ee38 8a47 	vsub.f32	s16, s16, s14
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8014c8a:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8014c8e:	ee7b bac8 	vsub.f32	s23, s23, s16
        Lfloat inversePickupPos = currentDelay - pickupPos;
 8014c92:	ee39 9a67 	vsub.f32	s18, s18, s15
        if (backwards)
 8014c96:	b10b      	cbz	r3, 8014c9c <tTString_tick+0x538>
        {
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8014c98:	ee37 9aa8 	vadd.f32	s18, s15, s17
        }
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8014c9c:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 8014ca0:	ee17 7a90 	vmov	r7, s15
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8014ca4:	f107 0b01 	add.w	fp, r7, #1
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8014ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cac:	ee39 9a67 	vsub.f32	s18, s18, s15
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8014cb0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014cb4:	ee38 cac9 	vsub.f32	s24, s17, s18

        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8014cb8:	4641      	mov	r1, r8
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f7f9 fbf9 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014cc0:	ee60 aa2b 	vmul.f32	s21, s0, s23
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8014cc4:	4651      	mov	r1, sl
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	f7f9 fbf3 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014ccc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014cd0:	ee7a aa80 	vadd.f32	s21, s21, s0
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8014cd4:	4639      	mov	r1, r7
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f7f9 fbeb 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014cdc:	ee20 ba0c 	vmul.f32	s22, s0, s24
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8014ce0:	4659      	mov	r1, fp
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	f7f9 fbe5 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014ce8:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014cec:	ee3b ba00 	vadd.f32	s22, s22, s0

        //x->pickupOut =  (((volumes[1] * pickupNonLinearity(rightgoing)) + (volumes[0] * rightgoing)) - ((volumes[1] * pickupNonLinearity(leftgoing)) + (volumes[0] * leftgoing)));
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8014cf0:	eeb0 0a6a 	vmov.f32	s0, s21
 8014cf4:	f7ff f8ce 	bl	8013e94 <pickupNonLinearity>
 8014cf8:	eef0 aa40 	vmov.f32	s21, s0
 8014cfc:	eeb0 0a4b 	vmov.f32	s0, s22
 8014d00:	f7ff f8c8 	bl	8013e94 <pickupNonLinearity>
 8014d04:	ee7a aac0 	vsub.f32	s21, s21, s0
 8014d08:	edc4 aa25 	vstr	s21, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8014d0c:	4641      	mov	r1, r8
 8014d0e:	4628      	mov	r0, r5
 8014d10:	f7f9 fbcf 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014d14:	ee60 aa2b 	vmul.f32	s21, s0, s23
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8014d18:	4651      	mov	r1, sl
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	f7f9 fbc9 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014d20:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014d24:	ee7a aa80 	vadd.f32	s21, s21, s0
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8014d28:	4639      	mov	r1, r7
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	f7f9 fbc1 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014d30:	ee20 ca0c 	vmul.f32	s24, s0, s24
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8014d34:	4659      	mov	r1, fp
 8014d36:	4628      	mov	r0, r5
 8014d38:	f7f9 fbbb 	bl	800e4b2 <tLagrangeDelay_tapOut>
 8014d3c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014d40:	ee3c 9a00 	vadd.f32	s18, s24, s0

		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8014d44:	eeb0 0a6a 	vmov.f32	s0, s21
 8014d48:	f7ff f8a4 	bl	8013e94 <pickupNonLinearity>
 8014d4c:	eeb0 8a40 	vmov.f32	s16, s0
 8014d50:	eeb0 0a49 	vmov.f32	s0, s18
 8014d54:	f7ff f89e 	bl	8013e94 <pickupNonLinearity>
 8014d58:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014d5c:	ed84 8a26 	vstr	s16, [r4, #152]	; 0x98

		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8014d60:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
 8014d64:	ee30 0a0a 	vadd.f32	s0, s0, s20
 8014d68:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
 8014d6c:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8014d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d78:	f104 001c 	add.w	r0, r4, #28
 8014d7c:	f7fb fb63 	bl	8010446 <tHighpass_tick>
 8014d80:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8014d84:	f7fa f862 	bl	800ee4c <tFeedbackLeveler_tick>
 8014d88:	eeb0 9a40 	vmov.f32	s18, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8014d8c:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
 8014d90:	ee30 0a29 	vadd.f32	s0, s0, s19
 8014d94:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
 8014d98:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8014d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014da0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014da4:	f104 0020 	add.w	r0, r4, #32
 8014da8:	f7fb fb4d 	bl	8010446 <tHighpass_tick>
 8014dac:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8014db0:	f7fa f84c 	bl	800ee4c <tFeedbackLeveler_tick>
 8014db4:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8014db8:	eeb0 0a49 	vmov.f32	s0, s18
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f7f9 fa88 	bl	800e2d2 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 8014dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8014dc6:	4628      	mov	r0, r5
 8014dc8:	f7f9 fa83 	bl	800e2d2 <tLagrangeDelay_tickIn>
        //tLagrangeDelay_tickIn(&x->delayP, delayOutP + x->slideNoise);
        //Lfloat outputPfilt = 0.0f;
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8014dcc:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8014dd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014dd4:	f7fb f873 	bl	800febe <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8014dd8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8014ddc:	f7fb f86f 	bl	800febe <tSVF_tick>
 8014de0:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat volumes[2];
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8014de4:	ed94 8a63 	vldr	s16, [r4, #396]	; 0x18c
 8014de8:	ee38 8a08 	vadd.f32	s16, s16, s16
 8014dec:	ee38 8a68 	vsub.f32	s16, s16, s17
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8014df0:	ee38 0a28 	vadd.f32	s0, s16, s17
 8014df4:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8014df8:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014dfc:	f003 fc0c 	bl	8018618 <sqrtf>
 8014e00:	ed8d 0a00 	vstr	s0, [sp]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8014e04:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8014e08:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8014e0c:	f003 fc04 	bl	8018618 <sqrtf>
 8014e10:	ed8d 0a01 	vstr	s0, [sp, #4]
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8014e14:	ed94 8a25 	vldr	s16, [r4, #148]	; 0x94
 8014e18:	edd4 7a2a 	vldr	s15, [r4, #168]	; 0xa8
 8014e1c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8014e20:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014e24:	ee38 8a08 	vadd.f32	s16, s16, s16
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8014e28:	eeb0 0a48 	vmov.f32	s0, s16
 8014e2c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8014e30:	f7fb f845 	bl	800febe <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8014e34:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8014e38:	f7fb f841 	bl	800febe <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8014e3c:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8014e40:	f7fb f83d 	bl	800febe <tSVF_tick>

        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8014e44:	ed5f 7aa3 	vldr	s15, [pc, #-652]	; 8014bbc <tTString_tick+0x458>
 8014e48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e4c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014e50:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014e54:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e58:	eddd 7a00 	vldr	s15, [sp]
 8014e5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e60:	ee30 0a08 	vadd.f32	s0, s0, s16
    for (int i = 0; i < x->oversampling; i++)
 8014e64:	f109 0901 	add.w	r9, r9, #1
 8014e68:	6863      	ldr	r3, [r4, #4]
 8014e6a:	454b      	cmp	r3, r9
 8014e6c:	f340 80eb 	ble.w	8015046 <tTString_tick+0x8e2>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8014e70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014e74:	f7fa fbfc 	bl	800f670 <tExpSmooth_tick>
 8014e78:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8014e7c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014e80:	f7fa fbf6 	bl	800f670 <tExpSmooth_tick>
 8014e84:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8014e88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e8c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014e90:	ee20 0a27 	vmul.f32	s0, s0, s15
    	x->tensionAmount = tension * 0.01f;
 8014e94:	ed1f 7ab6 	vldr	s14, [pc, #-728]	; 8014bc0 <tTString_tick+0x45c>
 8014e98:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014e9c:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
        if (currentDelay < 5.0f)
 8014ea0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eac:	d501      	bpl.n	8014eb2 <tTString_tick+0x74e>
        	currentDelay = 5.0f;
 8014eae:	eef0 7a47 	vmov.f32	s15, s14
        if (currentDelay > x->maxDelay)
 8014eb2:	ed94 7a54 	vldr	s14, [r4, #336]	; 0x150
 8014eb6:	eeb8 9a47 	vcvt.f32.u32	s18, s14
 8014eba:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8014ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec2:	d401      	bmi.n	8014ec8 <tTString_tick+0x764>
 8014ec4:	eeb0 9a67 	vmov.f32	s18, s15
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8014ec8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8014ecc:	ee69 8a28 	vmul.f32	s17, s18, s17
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8014ed0:	f104 0614 	add.w	r6, r4, #20
 8014ed4:	ee39 0a40 	vsub.f32	s0, s18, s0
 8014ed8:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8014edc:	ed94 7a53 	vldr	s14, [r4, #332]	; 0x14c
 8014ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ee4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014ee8:	ed94 0a4f 	vldr	s0, [r4, #316]	; 0x13c
 8014eec:	ed1f 8acb 	vldr	s16, [pc, #-812]	; 8014bc4 <tTString_tick+0x460>
 8014ef0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014ef4:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014ef8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014efc:	4630      	mov	r0, r6
 8014efe:	f7f9 fa2f 	bl	800e360 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8014f02:	f104 0518 	add.w	r5, r4, #24
 8014f06:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 8014f0a:	ee39 0a40 	vsub.f32	s0, s18, s0
 8014f0e:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8014f12:	ed94 7a53 	vldr	s14, [r4, #332]	; 0x14c
 8014f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f1e:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 8014f22:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014f26:	ee67 7a89 	vmul.f32	s15, s15, s18
 8014f2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f7f9 fa16 	bl	800e360 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8014f34:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8014f38:	f7fe fd66 	bl	8013a08 <tNoise_tick>
 8014f3c:	eeb0 8a40 	vmov.f32	s16, s0
 8014f40:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8014f44:	f7fa fb94 	bl	800f670 <tExpSmooth_tick>
 8014f48:	ee28 8a00 	vmul.f32	s16, s16, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8014f4c:	ee38 8a08 	vadd.f32	s16, s16, s16
 8014f50:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 8014f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f58:	ee17 1a90 	vmov	r1, s15
 8014f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8014f60:	4630      	mov	r0, r6
 8014f62:	f7f9 fb1f 	bl	800e5a4 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8014f66:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 8014f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014f6e:	ee17 1a90 	vmov	r1, s15
 8014f72:	eeb0 0a48 	vmov.f32	s0, s16
 8014f76:	4628      	mov	r0, r5
 8014f78:	f7f9 fb14 	bl	800e5a4 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8014f7c:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8014f80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014f84:	f7fa fee0 	bl	800fd48 <tCookOnePole_tick>
 8014f88:	eeb0 aa40 	vmov.f32	s20, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8014f8c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8014f90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014f94:	f7fa fed8 	bl	800fd48 <tCookOnePole_tick>
 8014f98:	eef0 9a40 	vmov.f32	s19, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8014f9c:	edd4 aa20 	vldr	s21, [r4, #128]	; 0x80
 8014fa0:	ee6a aa89 	vmul.f32	s21, s21, s18
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 8014fa4:	eebc caea 	vcvt.u32.f32	s24, s21
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 8014fa8:	eef8 7a4c 	vcvt.f32.u32	s15, s24
 8014fac:	ee7a aae7 	vsub.f32	s21, s21, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8014fb0:	4630      	mov	r0, r6
 8014fb2:	f7f9 f99b 	bl	800e2ec <tLagrangeDelay_tickOut>
 8014fb6:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8014fba:	4628      	mov	r0, r5
 8014fbc:	f7f9 f996 	bl	800e2ec <tLagrangeDelay_tickOut>
 8014fc0:	eeb0 ba40 	vmov.f32	s22, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8014fc4:	eeb0 0a6a 	vmov.f32	s0, s21
 8014fc8:	ee1c 1a10 	vmov	r1, s24
 8014fcc:	4630      	mov	r0, r6
 8014fce:	f7f9 fa7d 	bl	800e4cc <tLagrangeDelay_tapOutInterpolated>
 8014fd2:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8014fd6:	ee60 ba27 	vmul.f32	s23, s0, s15
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8014fda:	eeb0 0a6a 	vmov.f32	s0, s21
 8014fde:	ee1c 1a10 	vmov	r1, s24
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	f7f9 fa72 	bl	800e4cc <tLagrangeDelay_tapOutInterpolated>
 8014fe8:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8014fec:	ee20 0a27 	vmul.f32	s0, s0, s15
        Lfloat rippleOut = delayOut + rippleOut1;
 8014ff0:	ee38 8a2b 	vadd.f32	s16, s16, s23
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8014ff4:	ee3b ba00 	vadd.f32	s22, s22, s0
        if (x->inharmonic)
 8014ff8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f47f adb1 	bne.w	8014b64 <tTString_tick+0x400>
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8015002:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8015006:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 801500a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801500e:	ee66 7a88 	vmul.f32	s15, s13, s16
 8015012:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
 8015016:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (val < min)
 801501a:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 801501e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015026:	f53f adcf 	bmi.w	8014bc8 <tTString_tick+0x464>
    else if (val > max)
 801502a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801502e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	f77f adc9 	ble.w	8014bcc <tTString_tick+0x468>
        return max;
 801503a:	eef0 7a46 	vmov.f32	s15, s12
 801503e:	e5c5      	b.n	8014bcc <tTString_tick+0x468>
        Lfloat pickupPosFinal = pickupPos;
 8015040:	eeb0 8a67 	vmov.f32	s16, s15
 8015044:	e613      	b.n	8014c6e <tTString_tick+0x50a>
    }
    return theOutput;
}
 8015046:	b003      	add	sp, #12
 8015048:	ecbd 8b0a 	vpop	{d8-d12}
 801504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015050 <tTString_setFreq>:

void    tTString_setFreq               (tTString* const bw, Lfloat freq)
{
 8015050:	b510      	push	{r4, lr}
 8015052:	ed2d 8b04 	vpush	{d8-d9}
 8015056:	b082      	sub	sp, #8
    _tTString* x = *bw;
 8015058:	6804      	ldr	r4, [r0, #0]
    if (freq < x->actualLowestFreq)
 801505a:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 801505e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8015062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015066:	dc01      	bgt.n	801506c <tTString_setFreq+0x1c>
 8015068:	eef0 7a40 	vmov.f32	s15, s0
        freq = x->actualLowestFreq;
    //freq = freq * x->invOversampling;
    x->freq = freq;
 801506c:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8015070:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8015074:	ee28 8a27 	vmul.f32	s16, s16, s15

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015078:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801507c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015080:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015084:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015088:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801508c:	f7fa fae2 	bl	800f654 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
 8015090:	2300      	movs	r3, #0
 8015092:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8015094:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
 8015098:	eeb0 0a48 	vmov.f32	s0, s16
 801509c:	f7eb faa6 	bl	80005ec <arm_sin_f32>
 80150a0:	ee68 8a80 	vmul.f32	s17, s17, s0
 80150a4:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 80150a8:	eeb0 0a48 	vmov.f32	s0, s16
 80150ac:	f7eb fa52 	bl	8000554 <arm_cos_f32>
 80150b0:	ee29 9a00 	vmul.f32	s18, s18, s0
 80150b4:	a801      	add	r0, sp, #4
 80150b6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80150ba:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80150be:	eeb0 0a68 	vmov.f32	s0, s17
 80150c2:	f7eb f911 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 80150c6:	9b01      	ldr	r3, [sp, #4]
 80150c8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 80150cc:	b002      	add	sp, #8
 80150ce:	ecbd 8b04 	vpop	{d8-d9}
 80150d2:	bd10      	pop	{r4, pc}

080150d4 <tTString_initToPool>:
{
 80150d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150d6:	ed2d 8b06 	vpush	{d8-d10}
 80150da:	b083      	sub	sp, #12
 80150dc:	4606      	mov	r6, r0
 80150de:	460d      	mov	r5, r1
 80150e0:	eef0 9a40 	vmov.f32	s19, s0
 80150e4:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 80150e6:	6817      	ldr	r7, [r2, #0]
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80150e8:	4639      	mov	r1, r7
 80150ea:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80150ee:	f7fd fddd 	bl	8012cac <mpool_alloc>
 80150f2:	6030      	str	r0, [r6, #0]
 80150f4:	9001      	str	r0, [sp, #4]
    x->mempool = m;
 80150f6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 80150f8:	9801      	ldr	r0, [sp, #4]
 80150fa:	6803      	ldr	r3, [r0, #0]
 80150fc:	685b      	ldr	r3, [r3, #4]
    x->oversampling = oversampling;
 80150fe:	6045      	str	r5, [r0, #4]
    x->invOversampling = 1.0f / oversampling;
 8015100:	ee07 5a90 	vmov	s15, r5
 8015104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015108:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801510c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8015110:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8015114:	ee37 7a07 	vadd.f32	s14, s14, s14
 8015118:	ed80 7a03 	vstr	s14, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 801511c:	ed93 7a00 	vldr	s14, [r3]
 8015120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015124:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->invSampleRate = 1.f / x->sampleRate;
 8015128:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 801512c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015130:	ed9f aae4 	vldr	s20, [pc, #912]	; 80154c4 <tTString_initToPool+0x3f0>
 8015134:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8015138:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    x->tensionGain = 0.0f;
 801513c:	ed9f 8ae2 	vldr	s16, [pc, #904]	; 80154c8 <tTString_initToPool+0x3f4>
 8015140:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8015144:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    x->decayCoeff = 1.0f;
 8015148:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 801514c:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 8015150:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8015154:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8015158:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 801515c:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 8015160:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->decayInSeconds = 10.0f;
 8015164:	4bd9      	ldr	r3, [pc, #868]	; (80154cc <tTString_initToPool+0x3f8>)
 8015166:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->harmonic = 1.0f;
 801516a:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 801516e:	ed9f 9ad8 	vldr	s18, [pc, #864]	; 80154d0 <tTString_initToPool+0x3fc>
 8015172:	ed80 9a0b 	vstr	s18, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8015176:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 801517a:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->slideGain = 0.4f;
 801517e:	4bd5      	ldr	r3, [pc, #852]	; (80154d4 <tTString_initToPool+0x400>)
 8015180:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 8015184:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015188:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->wound = 1;
 801518c:	2501      	movs	r5, #1
 801518e:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    x->barPulsePhasor = 0;
 8015192:	2700      	movs	r7, #0
 8015194:	f8c0 70e4 	str.w	r7, [r0, #228]	; 0xe4
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8015198:	ee87 7aa9 	vdiv.f32	s14, s15, s19
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 801519c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80151a0:	ee17 6a90 	vmov	r6, s15
 80151a4:	4622      	mov	r2, r4
 80151a6:	ee17 1a90 	vmov	r1, s15
 80151aa:	eeb0 0a49 	vmov.f32	s0, s18
 80151ae:	3014      	adds	r0, #20
 80151b0:	f7f9 f932 	bl	800e418 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 80151b4:	9801      	ldr	r0, [sp, #4]
 80151b6:	edd0 9a0c 	vldr	s19, [r0, #48]	; 0x30
 80151ba:	3014      	adds	r0, #20
 80151bc:	f7f9 fa02 	bl	800e5c4 <tLagrangeDelay_getMaxDelay>
 80151c0:	9801      	ldr	r0, [sp, #4]
 80151c2:	eec9 7a80 	vdiv.f32	s15, s19, s0
 80151c6:	edc0 7a24 	vstr	s15, [r0, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 80151ca:	3014      	adds	r0, #20
 80151cc:	f7f9 f874 	bl	800e2b8 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 80151d0:	4622      	mov	r2, r4
 80151d2:	4631      	mov	r1, r6
 80151d4:	eeb0 0a49 	vmov.f32	s0, s18
 80151d8:	9801      	ldr	r0, [sp, #4]
 80151da:	3018      	adds	r0, #24
 80151dc:	f7f9 f91c 	bl	800e418 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 80151e0:	9801      	ldr	r0, [sp, #4]
 80151e2:	3018      	adds	r0, #24
 80151e4:	f7f9 f868 	bl	800e2b8 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 80151e8:	9801      	ldr	r0, [sp, #4]
 80151ea:	3014      	adds	r0, #20
 80151ec:	f7f9 f9ea 	bl	800e5c4 <tLagrangeDelay_getMaxDelay>
 80151f0:	9801      	ldr	r0, [sp, #4]
 80151f2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80151f6:	ed80 0a54 	vstr	s0, [r0, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80151fa:	4621      	mov	r1, r4
 80151fc:	3024      	adds	r0, #36	; 0x24
 80151fe:	f7fa fd69 	bl	800fcd4 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 8015202:	9801      	ldr	r0, [sp, #4]
 8015204:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8015208:	3024      	adds	r0, #36	; 0x24
 801520a:	f7fa fdad 	bl	800fd68 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 801520e:	4621      	mov	r1, r4
 8015210:	9801      	ldr	r0, [sp, #4]
 8015212:	3028      	adds	r0, #40	; 0x28
 8015214:	f7fa fd5e 	bl	800fcd4 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 8015218:	9801      	ldr	r0, [sp, #4]
 801521a:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801521e:	3028      	adds	r0, #40	; 0x28
 8015220:	f7fa fda2 	bl	800fd68 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8015224:	eddf aaac 	vldr	s21, [pc, #688]	; 80154d8 <tTString_initToPool+0x404>
 8015228:	eddf 9aac 	vldr	s19, [pc, #688]	; 80154dc <tTString_initToPool+0x408>
 801522c:	eef0 0a6a 	vmov.f32	s1, s21
 8015230:	eeb0 0a69 	vmov.f32	s0, s19
 8015234:	9801      	ldr	r0, [sp, #4]
 8015236:	3024      	adds	r0, #36	; 0x24
 8015238:	f7fa fd80 	bl	800fd3c <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 801523c:	eef0 0a6a 	vmov.f32	s1, s21
 8015240:	eeb0 0a69 	vmov.f32	s0, s19
 8015244:	9801      	ldr	r0, [sp, #4]
 8015246:	3028      	adds	r0, #40	; 0x28
 8015248:	f7fa fd78 	bl	800fd3c <tCookOnePole_setGainAndPole>
    tTString_setFreq(&x, 440.0f);
 801524c:	eddf 9aa4 	vldr	s19, [pc, #656]	; 80154e0 <tTString_initToPool+0x40c>
 8015250:	eeb0 0a69 	vmov.f32	s0, s19
 8015254:	a801      	add	r0, sp, #4
 8015256:	f7ff fefb 	bl	8015050 <tTString_setFreq>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 801525a:	9801      	ldr	r0, [sp, #4]
 801525c:	edd0 0a02 	vldr	s1, [r0, #8]
 8015260:	4621      	mov	r1, r4
 8015262:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80154e4 <tTString_initToPool+0x410>
 8015266:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801526a:	eeb0 0a48 	vmov.f32	s0, s16
 801526e:	304c      	adds	r0, #76	; 0x4c
 8015270:	f7fa f996 	bl	800f5a0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 8015274:	eeb0 0a48 	vmov.f32	s0, s16
 8015278:	9801      	ldr	r0, [sp, #4]
 801527a:	304c      	adds	r0, #76	; 0x4c
 801527c:	f7fa f9ea 	bl	800f654 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 8015280:	9801      	ldr	r0, [sp, #4]
 8015282:	edd0 0a02 	vldr	s1, [r0, #8]
 8015286:	4621      	mov	r1, r4
 8015288:	eddf 7aac 	vldr	s15, [pc, #688]	; 801553c <tTString_initToPool+0x468>
 801528c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015290:	eeb0 0a49 	vmov.f32	s0, s18
 8015294:	3050      	adds	r0, #80	; 0x50
 8015296:	f7fa f983 	bl	800f5a0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 801529a:	eeb0 0a49 	vmov.f32	s0, s18
 801529e:	9801      	ldr	r0, [sp, #4]
 80152a0:	3050      	adds	r0, #80	; 0x50
 80152a2:	f7fa f9d7 	bl	800f654 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 80152a6:	9801      	ldr	r0, [sp, #4]
 80152a8:	edd0 0a02 	vldr	s1, [r0, #8]
 80152ac:	4621      	mov	r1, r4
 80152ae:	eddf 7a8e 	vldr	s15, [pc, #568]	; 80154e8 <tTString_initToPool+0x414>
 80152b2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80152b6:	eeb0 0a48 	vmov.f32	s0, s16
 80152ba:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 80152be:	f7fa f96f 	bl	800f5a0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 80152c2:	eeb0 0a48 	vmov.f32	s0, s16
 80152c6:	9801      	ldr	r0, [sp, #4]
 80152c8:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 80152cc:	f7fa f9c2 	bl	800f654 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80152d0:	4622      	mov	r2, r4
 80152d2:	2104      	movs	r1, #4
 80152d4:	9801      	ldr	r0, [sp, #4]
 80152d6:	3054      	adds	r0, #84	; 0x54
 80152d8:	f7fa faa8 	bl	800f82c <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80152dc:	4622      	mov	r2, r4
 80152de:	2104      	movs	r1, #4
 80152e0:	9801      	ldr	r0, [sp, #4]
 80152e2:	3058      	adds	r0, #88	; 0x58
 80152e4:	f7fa faa2 	bl	800f82c <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80152e8:	9e01      	ldr	r6, [sp, #4]
 80152ea:	ed96 1a02 	vldr	s2, [r6, #8]
 80152ee:	eef0 0a49 	vmov.f32	s1, s18
 80152f2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80154ec <tTString_initToPool+0x418>
 80152f6:	f106 0054 	add.w	r0, r6, #84	; 0x54
 80152fa:	f7fa fafb 	bl	800f8f4 <tThiranAllpassSOCascade_setCoeff>
 80152fe:	ed86 0a17 	vstr	s0, [r6, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8015302:	9e01      	ldr	r6, [sp, #4]
 8015304:	ed96 1a02 	vldr	s2, [r6, #8]
 8015308:	eef0 0a49 	vmov.f32	s1, s18
 801530c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80154f0 <tTString_initToPool+0x41c>
 8015310:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8015314:	f7fa faee 	bl	800f8f4 <tThiranAllpassSOCascade_setCoeff>
 8015318:	ed86 0a18 	vstr	s0, [r6, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 801531c:	eddf aa75 	vldr	s21, [pc, #468]	; 80154f4 <tTString_initToPool+0x420>
 8015320:	4622      	mov	r2, r4
 8015322:	eef0 0a6a 	vmov.f32	s1, s21
 8015326:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80154f8 <tTString_initToPool+0x424>
 801532a:	4629      	mov	r1, r5
 801532c:	9801      	ldr	r0, [sp, #4]
 801532e:	3068      	adds	r0, #104	; 0x68
 8015330:	f7fa fd28 	bl	800fd84 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8015334:	9801      	ldr	r0, [sp, #4]
 8015336:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801533a:	3068      	adds	r0, #104	; 0x68
 801533c:	f7fa ff20 	bl	8010180 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 8015340:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80154fc <tTString_initToPool+0x428>
 8015344:	9801      	ldr	r0, [sp, #4]
 8015346:	3068      	adds	r0, #104	; 0x68
 8015348:	f7fa fe70 	bl	801002c <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 801534c:	ed9f 9a6c 	vldr	s18, [pc, #432]	; 8015500 <tTString_initToPool+0x42c>
 8015350:	4622      	mov	r2, r4
 8015352:	eef0 0a6a 	vmov.f32	s1, s21
 8015356:	eeb0 0a49 	vmov.f32	s0, s18
 801535a:	4639      	mov	r1, r7
 801535c:	9801      	ldr	r0, [sp, #4]
 801535e:	306c      	adds	r0, #108	; 0x6c
 8015360:	f7fa fd10 	bl	800fd84 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8015364:	9801      	ldr	r0, [sp, #4]
 8015366:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801536a:	306c      	adds	r0, #108	; 0x6c
 801536c:	f7fa ff08 	bl	8010180 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8015370:	eeb0 0a49 	vmov.f32	s0, s18
 8015374:	9801      	ldr	r0, [sp, #4]
 8015376:	306c      	adds	r0, #108	; 0x6c
 8015378:	f7fa fe58 	bl	801002c <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 801537c:	9801      	ldr	r0, [sp, #4]
 801537e:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8015382:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8015386:	edc0 7a04 	vstr	s15, [r0, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 801538a:	4621      	mov	r1, r4
 801538c:	30a4      	adds	r0, #164	; 0xa4
 801538e:	f7fd fe05 	bl	8012f9c <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 8015392:	9801      	ldr	r0, [sp, #4]
 8015394:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8015398:	30a4      	adds	r0, #164	; 0xa4
 801539a:	f7fd fe6d 	bl	8013078 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 801539e:	4621      	mov	r1, r4
 80153a0:	9801      	ldr	r0, [sp, #4]
 80153a2:	30ac      	adds	r0, #172	; 0xac
 80153a4:	f7fd fdfa 	bl	8012f9c <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 80153a8:	9801      	ldr	r0, [sp, #4]
 80153aa:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80153ae:	30ac      	adds	r0, #172	; 0xac
 80153b0:	f7fd fe62 	bl	8013078 <tCycle_setSampleRate>
    x->pickupModOscFreq = 440.0f;
 80153b4:	9801      	ldr	r0, [sp, #4]
 80153b6:	edc0 9a2c 	vstr	s19, [r0, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 80153ba:	edc0 8a2d 	vstr	s17, [r0, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 80153be:	4622      	mov	r2, r4
 80153c0:	eef0 0a68 	vmov.f32	s1, s17
 80153c4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8015504 <tTString_initToPool+0x430>
 80153c8:	4629      	mov	r1, r5
 80153ca:	30b8      	adds	r0, #184	; 0xb8
 80153cc:	f7fa fcda 	bl	800fd84 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 80153d0:	9801      	ldr	r0, [sp, #4]
 80153d2:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80153d6:	30b8      	adds	r0, #184	; 0xb8
 80153d8:	f7fa fed2 	bl	8010180 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 80153dc:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8015508 <tTString_initToPool+0x434>
 80153e0:	9801      	ldr	r0, [sp, #4]
 80153e2:	30b8      	adds	r0, #184	; 0xb8
 80153e4:	f7fa fe22 	bl	801002c <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 80153e8:	4622      	mov	r2, r4
 80153ea:	eddf 0a48 	vldr	s1, [pc, #288]	; 801550c <tTString_initToPool+0x438>
 80153ee:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015510 <tTString_initToPool+0x43c>
 80153f2:	4629      	mov	r1, r5
 80153f4:	9801      	ldr	r0, [sp, #4]
 80153f6:	30bc      	adds	r0, #188	; 0xbc
 80153f8:	f7fa fcc4 	bl	800fd84 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 80153fc:	9801      	ldr	r0, [sp, #4]
 80153fe:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8015402:	30bc      	adds	r0, #188	; 0xbc
 8015404:	f7fa febc 	bl	8010180 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 8015408:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8015514 <tTString_initToPool+0x440>
 801540c:	9801      	ldr	r0, [sp, #4]
 801540e:	30bc      	adds	r0, #188	; 0xbc
 8015410:	f7fa fe0c 	bl	801002c <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 8015414:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8015524 <tTString_initToPool+0x450>
 8015418:	4622      	mov	r2, r4
 801541a:	eddf 0a45 	vldr	s1, [pc, #276]	; 8015530 <tTString_initToPool+0x45c>
 801541e:	eeb0 0a49 	vmov.f32	s0, s18
 8015422:	2104      	movs	r1, #4
 8015424:	9801      	ldr	r0, [sp, #4]
 8015426:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 801542a:	f7fa fcab 	bl	800fd84 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 801542e:	9801      	ldr	r0, [sp, #4]
 8015430:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8015434:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8015438:	f7fa fea2 	bl	8010180 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 801543c:	eeb0 0a49 	vmov.f32	s0, s18
 8015440:	9801      	ldr	r0, [sp, #4]
 8015442:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8015446:	f7fa fdf1 	bl	801002c <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 801544a:	4622      	mov	r2, r4
 801544c:	4629      	mov	r1, r5
 801544e:	9801      	ldr	r0, [sp, #4]
 8015450:	30cc      	adds	r0, #204	; 0xcc
 8015452:	f7fe fabf 	bl	80139d4 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8015456:	4621      	mov	r1, r4
 8015458:	eeb0 0a68 	vmov.f32	s0, s17
 801545c:	9801      	ldr	r0, [sp, #4]
 801545e:	301c      	adds	r0, #28
 8015460:	f7fa ffb6 	bl	80103d0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8015464:	9801      	ldr	r0, [sp, #4]
 8015466:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801546a:	301c      	adds	r0, #28
 801546c:	f7fb f800 	bl	8010470 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8015470:	4621      	mov	r1, r4
 8015472:	eeb0 0a68 	vmov.f32	s0, s17
 8015476:	9801      	ldr	r0, [sp, #4]
 8015478:	3020      	adds	r0, #32
 801547a:	f7fa ffa9 	bl	80103d0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 801547e:	9801      	ldr	r0, [sp, #4]
 8015480:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8015484:	3020      	adds	r0, #32
 8015486:	f7fa fff3 	bl	8010470 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 801548a:	4621      	mov	r1, r4
 801548c:	eddf 0a22 	vldr	s1, [pc, #136]	; 8015518 <tTString_initToPool+0x444>
 8015490:	eeb0 0a48 	vmov.f32	s0, s16
 8015494:	9801      	ldr	r0, [sp, #4]
 8015496:	3048      	adds	r0, #72	; 0x48
 8015498:	f7fa f8fc 	bl	800f694 <tSlide_initToPool>
    if (x->wound)
 801549c:	9801      	ldr	r0, [sp, #4]
 801549e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f000 80ee 	beq.w	8015684 <tTString_initToPool+0x5b0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 80154a8:	4621      	mov	r1, r4
 80154aa:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801551c <tTString_initToPool+0x448>
 80154ae:	eeb0 0a48 	vmov.f32	s0, s16
 80154b2:	f500 708c 	add.w	r0, r0, #280	; 0x118
 80154b6:	f7fa f873 	bl	800f5a0 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 80154ba:	eeb0 0a48 	vmov.f32	s0, s16
 80154be:	9801      	ldr	r0, [sp, #4]
 80154c0:	e040      	b.n	8015544 <tTString_initToPool+0x470>
 80154c2:	bf00      	nop
 80154c4:	40c90fdb 	.word	0x40c90fdb
 80154c8:	00000000 	.word	0x00000000
 80154cc:	41200000 	.word	0x41200000
 80154d0:	42c80000 	.word	0x42c80000
 80154d4:	3ecccccd 	.word	0x3ecccccd
 80154d8:	bab78034 	.word	0xbab78034
 80154dc:	3f7fbe77 	.word	0x3f7fbe77
 80154e0:	43dc0000 	.word	0x43dc0000
 80154e4:	3b83126f 	.word	0x3b83126f
 80154e8:	3db851ec 	.word	0x3db851ec
 80154ec:	38d1b717 	.word	0x38d1b717
 80154f0:	37d1b717 	.word	0x37d1b717
 80154f4:	3f4ccccd 	.word	0x3f4ccccd
 80154f8:	459c4000 	.word	0x459c4000
 80154fc:	45bb8000 	.word	0x45bb8000
 8015500:	44e10000 	.word	0x44e10000
 8015504:	45354000 	.word	0x45354000
 8015508:	4573c000 	.word	0x4573c000
 801550c:	3f8ccccd 	.word	0x3f8ccccd
 8015510:	456d8000 	.word	0x456d8000
 8015514:	45802000 	.word	0x45802000
 8015518:	453b8000 	.word	0x453b8000
 801551c:	3a03126f 	.word	0x3a03126f
 8015520:	3a51b717 	.word	0x3a51b717
 8015524:	447a0000 	.word	0x447a0000
 8015528:	00000000 	.word	0x00000000
 801552c:	3d4ccccd 	.word	0x3d4ccccd
 8015530:	3f666666 	.word	0x3f666666
 8015534:	45dac000 	.word	0x45dac000
 8015538:	3dcccccd 	.word	0x3dcccccd
 801553c:	3d23d70a 	.word	0x3d23d70a
 8015540:	3e7ae148 	.word	0x3e7ae148
 8015544:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8015548:	f7fa f884 	bl	800f654 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 801554c:	4621      	mov	r1, r4
 801554e:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8015520 <tTString_initToPool+0x44c>
 8015552:	eeb0 0a48 	vmov.f32	s0, s16
 8015556:	9801      	ldr	r0, [sp, #4]
 8015558:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 801555c:	f7fa f820 	bl	800f5a0 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8015560:	eeb0 0a48 	vmov.f32	s0, s16
 8015564:	9801      	ldr	r0, [sp, #4]
 8015566:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 801556a:	f7fa f873 	bl	800f654 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 801556e:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8015524 <tTString_initToPool+0x450>
 8015572:	4621      	mov	r1, r4
 8015574:	eef0 0a40 	vmov.f32	s1, s0
 8015578:	9801      	ldr	r0, [sp, #4]
 801557a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 801557e:	f7fa f889 	bl	800f694 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8015582:	4621      	mov	r1, r4
 8015584:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8015588:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801558c:	9801      	ldr	r0, [sp, #4]
 801558e:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8015592:	f7fa f87f 	bl	800f694 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8015596:	ed1f 8a1c 	vldr	s16, [pc, #-112]	; 8015528 <tTString_initToPool+0x454>
 801559a:	4621      	mov	r1, r4
 801559c:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801552c <tTString_initToPool+0x458>
 80155a0:	eeb0 0a48 	vmov.f32	s0, s16
 80155a4:	9801      	ldr	r0, [sp, #4]
 80155a6:	30dc      	adds	r0, #220	; 0xdc
 80155a8:	f7f9 fffa 	bl	800f5a0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 80155ac:	eeb0 0a48 	vmov.f32	s0, s16
 80155b0:	9801      	ldr	r0, [sp, #4]
 80155b2:	30dc      	adds	r0, #220	; 0xdc
 80155b4:	f7fa f84e 	bl	800f654 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 80155b8:	4622      	mov	r2, r4
 80155ba:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80155be:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80155c2:	2102      	movs	r1, #2
 80155c4:	9801      	ldr	r0, [sp, #4]
 80155c6:	30e8      	adds	r0, #232	; 0xe8
 80155c8:	f7fa fbdc 	bl	800fd84 <tSVF_initToPool>
    x->timeSinceLastBump = 1;
 80155cc:	9801      	ldr	r0, [sp, #4]
 80155ce:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80155d2:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 80155d6:	4621      	mov	r1, r4
 80155d8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80155dc:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 80155e0:	f7fa fef6 	bl	80103d0 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 80155e4:	4622      	mov	r2, r4
 80155e6:	ed5f 0a2e 	vldr	s1, [pc, #-184]	; 8015530 <tTString_initToPool+0x45c>
 80155ea:	ed1f 0a2e 	vldr	s0, [pc, #-184]	; 8015534 <tTString_initToPool+0x460>
 80155ee:	2101      	movs	r1, #1
 80155f0:	9801      	ldr	r0, [sp, #4]
 80155f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80155f6:	f7fa fbc5 	bl	800fd84 <tSVF_initToPool>
    x->inharmonic = 1;
 80155fa:	9801      	ldr	r0, [sp, #4]
 80155fc:	2501      	movs	r5, #1
 80155fe:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    x->inharmonicMult = 1.0f;
 8015602:	f8c0 614c 	str.w	r6, [r0, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015606:	edd0 0a02 	vldr	s1, [r0, #8]
 801560a:	ed1f 9a35 	vldr	s18, [pc, #-212]	; 8015538 <tTString_initToPool+0x464>
 801560e:	ed5f 8a35 	vldr	s17, [pc, #-212]	; 801553c <tTString_initToPool+0x468>
 8015612:	4622      	mov	r2, r4
 8015614:	4629      	mov	r1, r5
 8015616:	eeb0 1a49 	vmov.f32	s2, s18
 801561a:	ee60 0aa8 	vmul.f32	s1, s1, s17
 801561e:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8015622:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8015626:	f7f9 fbcc 	bl	800edc2 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 801562a:	9801      	ldr	r0, [sp, #4]
 801562c:	edd0 0a02 	vldr	s1, [r0, #8]
 8015630:	4622      	mov	r2, r4
 8015632:	4629      	mov	r1, r5
 8015634:	eeb0 1a49 	vmov.f32	s2, s18
 8015638:	ee60 0aa8 	vmul.f32	s1, s1, s17
 801563c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8015640:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
 8015644:	f7f9 fbbd 	bl	800edc2 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8015648:	9801      	ldr	r0, [sp, #4]
 801564a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 801564e:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8015540 <tTString_initToPool+0x46c>
 8015652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015656:	edc0 7a5a 	vstr	s15, [r0, #360]	; 0x168
    x->windingsPerInch = 70.0f;
 801565a:	4b1c      	ldr	r3, [pc, #112]	; (80156cc <tTString_initToPool+0x5f8>)
 801565c:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8015660:	4622      	mov	r2, r4
 8015662:	4629      	mov	r1, r5
 8015664:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8015668:	f7fe f9b4 	bl	80139d4 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 801566c:	9801      	ldr	r0, [sp, #4]
 801566e:	ed80 8a63 	vstr	s16, [r0, #396]	; 0x18c
    tPickupNonLinearity_initToPool(&x->p, mp);
 8015672:	4621      	mov	r1, r4
 8015674:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8015678:	f7fe fc50 	bl	8013f1c <tPickupNonLinearity_initToPool>
}
 801567c:	b003      	add	sp, #12
 801567e:	ecbd 8b06 	vpop	{d8-d10}
 8015682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 8015684:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80156d0 <tTString_initToPool+0x5fc>
 8015688:	4621      	mov	r1, r4
 801568a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80156d4 <tTString_initToPool+0x600>
 801568e:	eeb0 0a48 	vmov.f32	s0, s16
 8015692:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8015696:	f7f9 ff83 	bl	800f5a0 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 801569a:	eeb0 0a48 	vmov.f32	s0, s16
 801569e:	9801      	ldr	r0, [sp, #4]
 80156a0:	f500 708c 	add.w	r0, r0, #280	; 0x118
 80156a4:	f7f9 ffd6 	bl	800f654 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 80156a8:	4621      	mov	r1, r4
 80156aa:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80156d8 <tTString_initToPool+0x604>
 80156ae:	eeb0 0a48 	vmov.f32	s0, s16
 80156b2:	9801      	ldr	r0, [sp, #4]
 80156b4:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 80156b8:	f7f9 ff72 	bl	800f5a0 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 80156bc:	eeb0 0a48 	vmov.f32	s0, s16
 80156c0:	9801      	ldr	r0, [sp, #4]
 80156c2:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 80156c6:	f7f9 ffc5 	bl	800f654 <tExpSmooth_setDest>
 80156ca:	e750      	b.n	801556e <tTString_initToPool+0x49a>
 80156cc:	428c0000 	.word	0x428c0000
 80156d0:	00000000 	.word	0x00000000
 80156d4:	3ba3d70a 	.word	0x3ba3d70a
 80156d8:	3b83126f 	.word	0x3b83126f

080156dc <tTString_setDecayInSeconds>:
	 }
}

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
 80156dc:	6802      	ldr	r2, [r0, #0]
	 x->decayInSeconds = decay;
 80156de:	ed82 0a22 	vstr	s0, [r2, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 80156e2:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80156e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80156ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ee:	dd03      	ble.n	80156f8 <tTString_setDecayInSeconds+0x1c>
	 {
		 x->decayCoeff = 1.0f;
 80156f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80156f4:	6753      	str	r3, [r2, #116]	; 0x74
 80156f6:	4770      	bx	lr
{
 80156f8:	b410      	push	{r4}
	 }
	 else
	 {
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 80156fa:	ed92 7a19 	vldr	s14, [r2, #100]	; 0x64
 80156fe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8015702:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8015706:	eec6 7a87 	vdiv.f32	s15, s13, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 801570a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801577c <tTString_setDecayInSeconds+0xa0>
 801570e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015716:	ee17 3a90 	vmov	r3, s15
 801571a:	f103 517e 	add.w	r1, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 801571e:	f3c3 13cf 	ubfx	r3, r3, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8015722:	f240 44fd 	movw	r4, #1277	; 0x4fd
 8015726:	fb03 f404 	mul.w	r4, r3, r4
 801572a:	f643 10e9 	movw	r0, #14825	; 0x39e9
 801572e:	eb00 30a4 	add.w	r0, r0, r4, asr #14
 8015732:	fb03 f000 	mul.w	r0, r3, r0
 8015736:	4c12      	ldr	r4, [pc, #72]	; (8015780 <tTString_setDecayInSeconds+0xa4>)
 8015738:	eb04 30a0 	add.w	r0, r4, r0, asr #14
 801573c:	fb00 f303 	mul.w	r3, r0, r3
 8015740:	12db      	asrs	r3, r3, #11
 8015742:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 8015746:	18cb      	adds	r3, r1, r3
 8015748:	ee07 3a90 	vmov	s15, r3
    if (val < min)
 801574c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015784 <tTString_setDecayInSeconds+0xa8>
 8015750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015758:	d409      	bmi.n	801576e <tTString_setDecayInSeconds+0x92>
    else if (val > max)
 801575a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801575e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015766:	dd04      	ble.n	8015772 <tTString_setDecayInSeconds+0x96>
        return max;
 8015768:	eef0 7a47 	vmov.f32	s15, s14
 801576c:	e001      	b.n	8015772 <tTString_setDecayInSeconds+0x96>
        return min;
 801576e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8015784 <tTString_setDecayInSeconds+0xa8>
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
 8015772:	edc2 7a1d 	vstr	s15, [r2, #116]	; 0x74
	 }
}
 8015776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801577a:	4770      	bx	lr
 801577c:	4b38aa3b 	.word	0x4b38aa3b
 8015780:	fffec87b 	.word	0xfffec87b
 8015784:	3dcccccd 	.word	0x3dcccccd

08015788 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8015788:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 801578a:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 801578e:	4770      	bx	lr

08015790 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
 8015790:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
 8015792:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
 8015796:	4770      	bx	lr

08015798 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8015798:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 801579a:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 801579e:	4770      	bx	lr

080157a0 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
 80157a0:	b508      	push	{r3, lr}
	_tTString* x = *bw;
 80157a2:	6800      	ldr	r0, [r0, #0]
	x->pickupModOscFreq = freq;
 80157a4:	ed80 0a2c 	vstr	s0, [r0, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 80157a8:	30ac      	adds	r0, #172	; 0xac
 80157aa:	f7fd fc47 	bl	801303c <tCycle_setFreq>
}
 80157ae:	bd08      	pop	{r3, pc}

080157b0 <tTString_mute>:



void    tTString_mute              (tTString* const bw)
{
 80157b0:	b410      	push	{r4}
	 _tTString* x = *bw;
 80157b2:	6800      	ldr	r0, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 80157b4:	ed90 7a19 	vldr	s14, [r0, #100]	; 0x64
 80157b8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801582c <tTString_mute+0x7c>
 80157bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80157c0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80157c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80157c8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8015830 <tTString_mute+0x80>
 80157cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80157d4:	ee17 3a90 	vmov	r3, s15
 80157d8:	f103 517e 	add.w	r1, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80157dc:	f3c3 13cf 	ubfx	r3, r3, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 80157e0:	f240 44fd 	movw	r4, #1277	; 0x4fd
 80157e4:	fb03 f404 	mul.w	r4, r3, r4
 80157e8:	f643 12e9 	movw	r2, #14825	; 0x39e9
 80157ec:	eb02 32a4 	add.w	r2, r2, r4, asr #14
 80157f0:	fb03 f202 	mul.w	r2, r3, r2
 80157f4:	4c0f      	ldr	r4, [pc, #60]	; (8015834 <tTString_mute+0x84>)
 80157f6:	eb04 32a2 	add.w	r2, r4, r2, asr #14
 80157fa:	fb02 f303 	mul.w	r3, r2, r3
 80157fe:	12db      	asrs	r3, r3, #11
 8015800:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 8015804:	440b      	add	r3, r1
 8015806:	6783      	str	r3, [r0, #120]	; 0x78
	 if (x->muteCoeff < 0.5f)
 8015808:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801580c:	ee07 3a10 	vmov	s14, r3
 8015810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015818:	d501      	bpl.n	801581e <tTString_mute+0x6e>
	 {
		 x->muteCoeff = 0.5f;
 801581a:	edc0 7a1e 	vstr	s15, [r0, #120]	; 0x78
	 }
	 x->muted = 0.0f;
 801581e:	2300      	movs	r3, #0
 8015820:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
}
 8015824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015828:	4770      	bx	lr
 801582a:	bf00      	nop
 801582c:	3be56042 	.word	0x3be56042
 8015830:	4b38aa3b 	.word	0x4b38aa3b
 8015834:	fffec87b 	.word	0xfffec87b

08015838 <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 8015838:	b510      	push	{r4, lr}
 801583a:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 801583e:	6804      	ldr	r4, [r0, #0]
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8015840:	ed94 7a5a 	vldr	s14, [r4, #360]	; 0x168
    if (val < min)
 8015844:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015848:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015850:	d407      	bmi.n	8015862 <tTString_setFilterFreqDirectly+0x2a>
    else if (val > max)
 8015852:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8015856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801585a:	d504      	bpl.n	8015866 <tTString_setFilterFreqDirectly+0x2e>
        return max;
 801585c:	eeb0 0a47 	vmov.f32	s0, s14
 8015860:	e001      	b.n	8015866 <tTString_setFilterFreqDirectly+0x2e>
        return min;
 8015862:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
	x->filterFreq = freqToUse;
 8015866:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 801586a:	edd4 7a04 	vldr	s15, [r4, #16]
 801586e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015872:	f7ea febb 	bl	80005ec <arm_sin_f32>
 8015876:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801587a:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 801587e:	eeb0 0a48 	vmov.f32	s0, s16
 8015882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015886:	f7fa fa43 	bl	800fd10 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 801588a:	eeb0 0a48 	vmov.f32	s0, s16
 801588e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015892:	f7fa fa3d 	bl	800fd10 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 8015896:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 801589a:	ecbd 8b02 	vpop	{d8}
 801589e:	bd10      	pop	{r4, pc}

080158a0 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 80158a0:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 80158a2:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 80158a6:	4770      	bx	lr

080158a8 <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 80158a8:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 80158aa:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80158ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	x->barPosition = barPosition;
 80158b2:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
}
 80158b6:	4770      	bx	lr

080158b8 <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 80158b8:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 80158ba:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80158be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80158c2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80158c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80158ca:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 80158ce:	4770      	bx	lr

080158d0 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 80158d0:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 80158d2:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 80158d6:	4770      	bx	lr

080158d8 <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 80158d8:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 80158da:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
 80158de:	4770      	bx	lr

080158e0 <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 80158e0:	b510      	push	{r4, lr}
 80158e2:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 80158e6:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80158e8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80158ec:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 80158f0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015998 <tTString_setRippleDepth+0xb8>
 80158f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80158f8:	eddf 6a28 	vldr	s13, [pc, #160]	; 801599c <tTString_setRippleDepth+0xbc>
 80158fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015904:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8015908:	eec6 7a87 	vdiv.f32	s15, s13, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 801590c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80159a0 <tTString_setRippleDepth+0xc0>
 8015910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015918:	ee17 3a90 	vmov	r3, s15
 801591c:	f103 527e 	add.w	r2, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8015920:	f3c3 13cf 	ubfx	r3, r3, #7, #16
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8015924:	f240 40fd 	movw	r0, #1277	; 0x4fd
 8015928:	fb03 f000 	mul.w	r0, r3, r0
 801592c:	f643 11e9 	movw	r1, #14825	; 0x39e9
 8015930:	eb01 31a0 	add.w	r1, r1, r0, asr #14
 8015934:	fb03 f101 	mul.w	r1, r3, r1
 8015938:	481a      	ldr	r0, [pc, #104]	; (80159a4 <tTString_setRippleDepth+0xc4>)
 801593a:	eb00 31a1 	add.w	r1, r0, r1, asr #14
 801593e:	fb01 f303 	mul.w	r3, r1, r3
 8015942:	12db      	asrs	r3, r3, #11
 8015944:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    reinterpreter.i +=
 8015948:	18d3      	adds	r3, r2, r3
 801594a:	ee07 3a90 	vmov	s15, r3
 801594e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015952:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015956:	ee67 7a87 	vmul.f32	s15, s15, s14
 801595a:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 801595e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015966:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801596a:	edc4 6a23 	vstr	s13, [r4, #140]	; 0x8c
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 801596e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8015972:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015976:	ee30 8a07 	vadd.f32	s16, s0, s14
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 801597a:	eeb0 0a48 	vmov.f32	s0, s16
 801597e:	f104 001c 	add.w	r0, r4, #28
 8015982:	f7fa fd52 	bl	801042a <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8015986:	eeb0 0a48 	vmov.f32	s0, s16
 801598a:	f104 0020 	add.w	r0, r4, #32
 801598e:	f7fa fd4c 	bl	801042a <tHighpass_setFreq>
}
 8015992:	ecbd 8b02 	vpop	{d8}
 8015996:	bd10      	pop	{r4, pc}
 8015998:	3ba3d70a 	.word	0x3ba3d70a
 801599c:	38d1b717 	.word	0x38d1b717
 80159a0:	4b38aa3b 	.word	0x4b38aa3b
 80159a4:	fffec87b 	.word	0xfffec87b

080159a8 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
 80159a8:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 80159aa:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 80159ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80159b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80159b6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 80159ba:	4770      	bx	lr

080159bc <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
 80159bc:	b510      	push	{r4, lr}
 80159be:	ed2d 8b02 	vpush	{d8}
 80159c2:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 80159c6:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 80159c8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80159cc:	ee60 8a28 	vmul.f32	s17, s0, s17
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 80159d0:	eeb0 0a68 	vmov.f32	s0, s17
 80159d4:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80159d8:	f7f9 fa2b 	bl	800ee32 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 80159dc:	eeb0 0a68 	vmov.f32	s0, s17
 80159e0:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80159e4:	f7f9 fa25 	bl	800ee32 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 80159e8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80159fc <tTString_setFeedbackStrength+0x40>
 80159ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80159f0:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 80159f4:	ecbd 8b02 	vpop	{d8}
 80159f8:	bd10      	pop	{r4, pc}
 80159fa:	bf00      	nop
 80159fc:	3ba3d70a 	.word	0x3ba3d70a

08015a00 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 8015a00:	b510      	push	{r4, lr}
 8015a02:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 8015a06:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8015a08:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015a38 <tTString_setFeedbackReactionSpeed+0x38>
 8015a0c:	ee20 8a27 	vmul.f32	s16, s0, s15
 8015a10:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015a3c <tTString_setFeedbackReactionSpeed+0x3c>
 8015a14:	ee38 8a27 	vadd.f32	s16, s16, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8015a18:	eeb0 0a48 	vmov.f32	s0, s16
 8015a1c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8015a20:	f7f9 fa0b 	bl	800ee3a <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8015a24:	eeb0 0a48 	vmov.f32	s0, s16
 8015a28:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8015a2c:	f7f9 fa05 	bl	800ee3a <tFeedbackLeveler_setFactor>
}
 8015a30:	ecbd 8b02 	vpop	{d8}
 8015a34:	bd10      	pop	{r4, pc}
 8015a36:	bf00      	nop
 8015a38:	3dcccccd 	.word	0x3dcccccd
 8015a3c:	3727c5ac 	.word	0x3727c5ac

08015a40 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8015a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a44:	ed2d 8b06 	vpush	{d8-d10}
 8015a48:	b083      	sub	sp, #12
 8015a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8015a4e:	eeb0 9a60 	vmov.f32	s18, s1
    _tTString* x = *bw;
 8015a52:	6807      	ldr	r7, [r0, #0]

    x->muted = 1.0f;
 8015a54:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8015a58:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8015a5c:	eeb0 0a60 	vmov.f32	s0, s1
 8015a60:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8015a64:	f7f9 fdfa 	bl	800f65c <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8015a68:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 8015a6c:	ee69 8a28 	vmul.f32	s17, s18, s17
 8015a70:	eeb0 0a68 	vmov.f32	s0, s17
 8015a74:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8015a78:	f7f9 fa12 	bl	800eea0 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 8015a7c:	eeb0 0a68 	vmov.f32	s0, s17
 8015a80:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8015a84:	f7f9 fa0c 	bl	800eea0 <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
 8015a88:	4638      	mov	r0, r7
 8015a8a:	f850 3f50 	ldr.w	r3, [r0, #80]!
 8015a8e:	ed93 0a04 	vldr	s0, [r3, #16]
 8015a92:	f7f9 fde7 	bl	800f664 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
 8015a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a98:	edd3 7a04 	vldr	s15, [r3, #16]
 8015a9c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
 8015aa0:	67bc      	str	r4, [r7, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8015aa2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015aae:	ee17 aa90 	vmov	sl, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8015ab2:	eef8 8a67 	vcvt.f32.u32	s17, s15
 8015ab6:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8015aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015abe:	ee17 ba90 	vmov	fp, s15
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8015ac2:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 8015ac6:	eddf 7a64 	vldr	s15, [pc, #400]	; 8015c58 <tTString_pluck+0x218>
 8015aca:	ee67 7a27 	vmul.f32	s15, s14, s15
    Lfloat positionMax = (x->openStringLength * 0.001f);
 8015ace:	eddf 6a63 	vldr	s13, [pc, #396]	; 8015c5c <tTString_pluck+0x21c>
 8015ad2:	ee27 7a26 	vmul.f32	s14, s14, s13
    return ostart + (ostop - ostart) * value;
 8015ad6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015ada:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015ade:	ee77 7a88 	vadd.f32	s15, s15, s16

    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8015ae2:	edcd 7a01 	vstr	s15, [sp, #4]
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8015ae6:	eddd 7a01 	vldr	s15, [sp, #4]
    if (val < min)
 8015aea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015af2:	d407      	bmi.n	8015b04 <tTString_pluck+0xc4>
    else if (val > max)
 8015af4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015afc:	d504      	bpl.n	8015b08 <tTString_pluck+0xc8>
        return max;
 8015afe:	eef0 7a68 	vmov.f32	s15, s17
 8015b02:	e001      	b.n	8015b08 <tTString_pluck+0xc8>
        return min;
 8015b04:	eddf 7a56 	vldr	s15, [pc, #344]	; 8015c60 <tTString_pluck+0x220>
 8015b08:	edcd 7a01 	vstr	s15, [sp, #4]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8015b0c:	eddd 7a01 	vldr	s15, [sp, #4]
 8015b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015b14:	ee17 8a90 	vmov	r8, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8015b18:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8015b1c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8015c5c <tTString_pluck+0x21c>
 8015b20:	ee79 7aa6 	vadd.f32	s15, s19, s13
 8015b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b28:	ee87 aa27 	vdiv.f32	s20, s14, s15
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8015b2c:	eddd 7a01 	vldr	s15, [sp, #4]
 8015b30:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8015b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015b3c:	edcd 6a00 	vstr	s13, [sp]
    tLagrangeDelay_clear(&x->delay);
 8015b40:	f107 0914 	add.w	r9, r7, #20
 8015b44:	4648      	mov	r0, r9
 8015b46:	f7f8 fbb7 	bl	800e2b8 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8015b4a:	ed9d 7a01 	vldr	s14, [sp, #4]
 8015b4e:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015b52:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
    x->pluckPoint_forInput = pluckPoint;
 8015b56:	9b01      	ldr	r3, [sp, #4]
 8015b58:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8015b5c:	2400      	movs	r4, #0
 8015b5e:	e034      	b.n	8015bca <tTString_pluck+0x18a>
        {
            val = ((Lfloat)i * invPluckPointInt);
        }
        else
        {
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8015b60:	ee07 4a90 	vmov	s15, r4
 8015b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015b68:	ee37 7a69 	vsub.f32	s14, s14, s19
 8015b6c:	eddd 7a00 	vldr	s15, [sp]
 8015b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015b7c:	e030      	b.n	8015be0 <tTString_pluck+0x1a0>
            val = 1.0f;
 8015b7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015b82:	e02d      	b.n	8015be0 <tTString_pluck+0x1a0>
        return -1.0f;
 8015b84:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8015b88:	ee29 8a08 	vmul.f32	s16, s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8015b8c:	4621      	mov	r1, r4
 8015b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8015b92:	4648      	mov	r0, r9
 8015b94:	f7f8 fcfa 	bl	800e58c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8015b98:	eef1 8a48 	vneg.f32	s17, s16
 8015b9c:	ebab 0604 	sub.w	r6, fp, r4
 8015ba0:	4631      	mov	r1, r6
 8015ba2:	eeb0 0a68 	vmov.f32	s0, s17
 8015ba6:	4648      	mov	r0, r9
 8015ba8:	f7f8 fcf0 	bl	800e58c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8015bac:	f107 0518 	add.w	r5, r7, #24
 8015bb0:	4621      	mov	r1, r4
 8015bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	f7f8 fce8 	bl	800e58c <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8015bbc:	4631      	mov	r1, r6
 8015bbe:	eeb0 0a68 	vmov.f32	s0, s17
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f7f8 fce2 	bl	800e58c <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8015bc8:	3401      	adds	r4, #1
 8015bca:	4554      	cmp	r4, sl
 8015bcc:	d230      	bcs.n	8015c30 <tTString_pluck+0x1f0>
        if (i == pluckPointInt)
 8015bce:	4544      	cmp	r4, r8
 8015bd0:	d0d5      	beq.n	8015b7e <tTString_pluck+0x13e>
        else if (i < pluckPointInt)
 8015bd2:	d2c5      	bcs.n	8015b60 <tTString_pluck+0x120>
            val = ((Lfloat)i * invPluckPointInt);
 8015bd4:	ee07 4a90 	vmov	s15, r4
 8015bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015bdc:	ee67 7a8a 	vmul.f32	s15, s15, s20
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8015be0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015c64 <tTString_pluck+0x224>
 8015be4:	ee67 7a87 	vmul.f32	s15, s15, s14
    if( x < -3.0f )
 8015be8:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8015bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bf4:	d4c6      	bmi.n	8015b84 <tTString_pluck+0x144>
    else if( x > 3.0f )
 8015bf6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c02:	dc12      	bgt.n	8015c2a <tTString_pluck+0x1ea>
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8015c04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8015c08:	eeb3 6a0b 	vmov.f32	s12, #59	; 0x41d80000  27.0
 8015c0c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015c14:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8015c18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015c1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015c20:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015c24:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8015c28:	e7ae      	b.n	8015b88 <tTString_pluck+0x148>
        return 1.0f;
 8015c2a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015c2e:	e7ab      	b.n	8015b88 <tTString_pluck+0x148>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8015c30:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8015c34:	f7f9 ffaa 	bl	800fb8c <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 8015c38:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8015c3c:	f7f9 ffa6 	bl	800fb8c <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8015c40:	eeb0 0a49 	vmov.f32	s0, s18
 8015c44:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8015c48:	f7f9 fd08 	bl	800f65c <tExpSmooth_setVal>
}
 8015c4c:	b003      	add	sp, #12
 8015c4e:	ecbd 8b06 	vpop	{d8-d10}
 8015c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c56:	bf00      	nop
 8015c58:	3e511111 	.word	0x3e511111
 8015c5c:	3a83126f 	.word	0x3a83126f
 8015c60:	00000000 	.word	0x00000000
 8015c64:	3f99999a 	.word	0x3f99999a

08015c68 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8015c68:	b510      	push	{r4, lr}
 8015c6a:	ed2d 8b02 	vpush	{d8}
 8015c6e:	eef0 8a40 	vmov.f32	s17, s0
 8015c72:	eeb0 8a60 	vmov.f32	s16, s1
    _tTString* x = *bw;
 8015c76:	6804      	ldr	r4, [r0, #0]
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8015c78:	edd4 0a02 	vldr	s1, [r4, #8]
 8015c7c:	edd4 7a01 	vldr	s15, [r4, #4]
 8015c80:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8015c84:	ee60 0a88 	vmul.f32	s1, s1, s16
 8015c88:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015c8c:	f7f9 fe32 	bl	800f8f4 <tThiranAllpassSOCascade_setCoeff>
 8015c90:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8015c94:	edd4 0a02 	vldr	s1, [r4, #8]
 8015c98:	edd4 7a01 	vldr	s15, [r4, #4]
 8015c9c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8015ca0:	ee60 0a88 	vmul.f32	s1, s1, s16
 8015ca4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8015ca8:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015cb0:	f7f9 fe20 	bl	800f8f4 <tThiranAllpassSOCascade_setCoeff>
 8015cb4:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8015cb8:	ecbd 8b02 	vpop	{d8}
 8015cbc:	bd10      	pop	{r4, pc}

08015cbe <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
 8015cbe:	6803      	ldr	r3, [r0, #0]
    x->inharmonic = onOrOff;
 8015cc0:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 8015cc4:	ee07 1a90 	vmov	s15, r1
 8015cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ccc:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 8015cd0:	4770      	bx	lr
	...

08015cd4 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
 8015cd4:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8015cd6:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
 8015cd8:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
 8015cdc:	b161      	cbz	r1, 8015cf8 <tTString_setWoundOrUnwound+0x24>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
 8015cde:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015d14 <tTString_setWoundOrUnwound+0x40>
 8015ce2:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8015ce6:	f7f9 fc97 	bl	800f618 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8015cea:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8015d18 <tTString_setWoundOrUnwound+0x44>
 8015cee:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8015cf2:	f7f9 fc91 	bl	800f618 <tExpSmooth_setFactor>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
 8015cf6:	bd10      	pop	{r4, pc}
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
 8015cf8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8015d1c <tTString_setWoundOrUnwound+0x48>
 8015cfc:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8015d00:	f7f9 fc8a 	bl	800f618 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8015d04:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015d20 <tTString_setWoundOrUnwound+0x4c>
 8015d08:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8015d0c:	f7f9 fc84 	bl	800f618 <tExpSmooth_setFactor>
}
 8015d10:	e7f1      	b.n	8015cf6 <tTString_setWoundOrUnwound+0x22>
 8015d12:	bf00      	nop
 8015d14:	3a03126f 	.word	0x3a03126f
 8015d18:	3a51b717 	.word	0x3a51b717
 8015d1c:	3ba3d70a 	.word	0x3ba3d70a
 8015d20:	3b83126f 	.word	0x3b83126f

08015d24 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
 8015d24:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8015d28:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
 8015d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d2e:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
 8015d32:	4770      	bx	lr

08015d34 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
 8015d34:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8015d36:	6800      	ldr	r0, [r0, #0]
    tSVF_setFreq(&x->pickupFilter,cutoff);
 8015d38:	30b8      	adds	r0, #184	; 0xb8
 8015d3a:	f7fa f977 	bl	801002c <tSVF_setFreq>

}
 8015d3e:	bd08      	pop	{r3, pc}

08015d40 <tTString_setPickupFilterQ>:
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
 8015d40:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8015d42:	6800      	ldr	r0, [r0, #0]
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
 8015d44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d4c:	30b8      	adds	r0, #184	; 0xb8
 8015d4e:	f7fa f9f9 	bl	8010144 <tSVF_setQ>

}
 8015d52:	bd08      	pop	{r3, pc}

08015d54 <tTString_setPeakFilterFreq>:

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
 8015d54:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8015d56:	6800      	ldr	r0, [r0, #0]
    tSVF_setFreq(&x->peakFilt,cutoff);
 8015d58:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8015d5c:	f7fa f966 	bl	801002c <tSVF_setFreq>

}
 8015d60:	bd08      	pop	{r3, pc}

08015d62 <tTString_setPeakFilterQ>:
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
 8015d62:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8015d64:	6800      	ldr	r0, [r0, #0]
    tSVF_setQ(&x->peakFilt,Q+0.5f);
 8015d66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015d6e:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8015d72:	f7fa f9e7 	bl	8010144 <tSVF_setQ>

}
 8015d76:	bd08      	pop	{r3, pc}

08015d78 <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
 8015d78:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
 8015d7a:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
 8015d7c:	2400      	movs	r4, #0
 8015d7e:	e005      	b.n	8015d8c <tStiffString_free+0x14>
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
 8015d80:	68a8      	ldr	r0, [r5, #8]
 8015d82:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015d86:	f7fd f92a 	bl	8012fde <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
 8015d8a:	3401      	adds	r4, #1
 8015d8c:	686b      	ldr	r3, [r5, #4]
 8015d8e:	42a3      	cmp	r3, r4
 8015d90:	dcf6      	bgt.n	8015d80 <tStiffString_free+0x8>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
 8015d92:	6829      	ldr	r1, [r5, #0]
 8015d94:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8015d96:	f7fd f875 	bl	8012e84 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
 8015d9a:	6829      	ldr	r1, [r5, #0]
 8015d9c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015d9e:	f7fd f871 	bl	8012e84 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
 8015da2:	6829      	ldr	r1, [r5, #0]
 8015da4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015da6:	f7fd f86d 	bl	8012e84 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
 8015daa:	6829      	ldr	r1, [r5, #0]
 8015dac:	68e8      	ldr	r0, [r5, #12]
 8015dae:	f7fd f869 	bl	8012e84 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
 8015db2:	6829      	ldr	r1, [r5, #0]
 8015db4:	6928      	ldr	r0, [r5, #16]
 8015db6:	f7fd f865 	bl	8012e84 <mpool_free>
    mpool_free((char *) p, p->mempool);
 8015dba:	6829      	ldr	r1, [r5, #0]
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	f7fd f861 	bl	8012e84 <mpool_free>
}
 8015dc2:	bd38      	pop	{r3, r4, r5, pc}

08015dc4 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
 8015dc4:	b570      	push	{r4, r5, r6, lr}
 8015dc6:	ed2d 8b04 	vpush	{d8-d9}
	_tStiffString *p = *pm;
 8015dca:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 8015dcc:	ed94 9a06 	vldr	s18, [r4, #24]
 8015dd0:	ee29 9a09 	vmul.f32	s18, s18, s18
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8015dd4:	2300      	movs	r3, #0
	Lfloat compensation = 0.0f;
 8015dd6:	eddf 8a4b 	vldr	s17, [pc, #300]	; 8015f04 <tStiffString_updateOscillators+0x140>
    for (int i = 0; i < p->numModes; ++i) {
 8015dda:	e03d      	b.n	8015e58 <tStiffString_updateOscillators+0x94>
        return min;
 8015ddc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015f04 <tStiffString_updateOscillators+0x140>
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8015de0:	edc2 7a00 	vstr	s15, [r2]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
 8015de4:	68a0      	ldr	r0, [r4, #8]
 8015de6:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015dea:	4430      	add	r0, r6
 8015dec:	f7fd f926 	bl	801303c <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
 8015df0:	edd4 7a05 	vldr	s15, [r4, #20]
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
 8015df4:	ee28 8a67 	vnmul.f32	s16, s16, s15
 8015df8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8015dfc:	ee28 8a27 	vmul.f32	s16, s16, s15
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8015e00:	eddf 7a41 	vldr	s15, [pc, #260]	; 8015f08 <tStiffString_updateOscillators+0x144>
 8015e04:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015e08:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8015e0c:	ee17 3a90 	vmov	r3, s15
 8015e10:	f103 527e 	add.w	r2, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8015e14:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8015e18:	f640 51d1 	movw	r1, #3537	; 0xdd1
 8015e1c:	fb03 f101 	mul.w	r1, r3, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 8015e20:	f243 5064 	movw	r0, #13668	; 0x3564
 8015e24:	eb00 4021 	add.w	r0, r0, r1, asr #16
 8015e28:	fb03 f000 	mul.w	r0, r3, r0
 8015e2c:	f643 51c9 	movw	r1, #15817	; 0x3dc9
 8015e30:	eb01 41a0 	add.w	r1, r1, r0, asr #18
 8015e34:	fb03 f101 	mul.w	r1, r3, r1
 8015e38:	4834      	ldr	r0, [pc, #208]	; (8015f0c <tStiffString_updateOscillators+0x148>)
 8015e3a:	eb00 31a1 	add.w	r1, r0, r1, asr #14
 8015e3e:	fb01 f303 	mul.w	r3, r1, r3
    return reinterpreter.f;
 8015e42:	eb02 23e3 	add.w	r3, r2, r3, asr #11
 8015e46:	ee07 3a90 	vmov	s15, r3
	  p->decayScalar[i] = r * r;
 8015e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015e4c:	4433      	add	r3, r6
 8015e4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015e52:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8015e56:	462b      	mov	r3, r5
 8015e58:	6862      	ldr	r2, [r4, #4]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	dd4e      	ble.n	8015efc <tStiffString_updateOscillators+0x138>
      int n = i + 1;
 8015e5e:	1c5d      	adds	r5, r3, #1
      int n_sq = n * n;
 8015e60:	fb05 f205 	mul.w	r2, r5, r5
 8015e64:	ee07 2a90 	vmov	s15, r2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8015e68:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8015e6c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e78:	ee38 8a07 	vadd.f32	s16, s16, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8015e7c:	ee07 5a10 	vmov	s14, r5
 8015e80:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8015e84:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015e88:	ee29 7a26 	vmul.f32	s14, s18, s13
 8015e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015e98:	ee66 7a27 	vmul.f32	s15, s12, s15
      Lfloat zeta = sig / w0;
 8015e9c:	ee88 6a27 	vdiv.f32	s12, s16, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8015ea0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8015ea4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015ea8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015eac:	ee27 7a27 	vmul.f32	s14, s14, s15
      if (i == 0)
 8015eb0:	b91b      	cbnz	r3, 8015eba <tStiffString_updateOscillators+0xf6>
    	  compensation = 1.0f / w;
 8015eb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015eb6:	eec7 8a87 	vdiv.f32	s17, s15, s14
      Lfloat	testFreq = (p->freqHz * w);
 8015eba:	ed94 0a05 	vldr	s0, [r4, #20]
 8015ebe:	ee20 0a07 	vmul.f32	s0, s0, s14
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8015ec2:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8015ec6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015eca:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 8015ece:	ee67 7a87 	vmul.f32	s15, s15, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8015ed2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015ed4:	009e      	lsls	r6, r3, #2
 8015ed6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    if (val < min)
 8015eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee2:	f53f af7b 	bmi.w	8015ddc <tStiffString_updateOscillators+0x18>
    else if (val > max)
 8015ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef2:	f77f af75 	ble.w	8015de0 <tStiffString_updateOscillators+0x1c>
        return max;
 8015ef6:	eef0 7a47 	vmov.f32	s15, s14
 8015efa:	e771      	b.n	8015de0 <tStiffString_updateOscillators+0x1c>
    }
}
 8015efc:	ecbd 8b04 	vpop	{d8-d9}
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
 8015f02:	bf00      	nop
 8015f04:	00000000 	.word	0x00000000
 8015f08:	4b38aa3b 	.word	0x4b38aa3b
 8015f0c:	fffec5aa 	.word	0xfffec5aa

08015f10 <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
 8015f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f12:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
 8015f16:	6804      	ldr	r4, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
 8015f18:	edd4 8a08 	vldr	s17, [r4, #32]
 8015f1c:	eddf 7a26 	vldr	s15, [pc, #152]	; 8015fb8 <tStiffString_updateOutputWeights+0xa8>
 8015f20:	ee68 8aa7 	vmul.f32	s17, s17, s15
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
 8015f24:	2300      	movs	r3, #0
		Lfloat totalGain = 0.0f;
 8015f26:	ed9f 8a25 	vldr	s16, [pc, #148]	; 8015fbc <tStiffString_updateOutputWeights+0xac>
	  for (int i = 0; i < p->numModes; ++i)
 8015f2a:	e01d      	b.n	8015f68 <tStiffString_updateOutputWeights+0x58>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 8015f2c:	1c5e      	adds	r6, r3, #1
 8015f2e:	6925      	ldr	r5, [r4, #16]
 8015f30:	009f      	lsls	r7, r3, #2
 8015f32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8015f36:	ee07 6a90 	vmov	s15, r6
 8015f3a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8015f3e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8015f42:	f7ea fb53 	bl	80005ec <arm_sin_f32>
 8015f46:	ed85 0a00 	vstr	s0, [r5]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8015f4a:	6923      	ldr	r3, [r4, #16]
 8015f4c:	443b      	add	r3, r7
 8015f4e:	edd3 7a00 	vldr	s15, [r3]
 8015f52:	eef0 7ae7 	vabs.f32	s15, s15
 8015f56:	68e3      	ldr	r3, [r4, #12]
 8015f58:	443b      	add	r3, r7
 8015f5a:	ed93 7a00 	vldr	s14, [r3]
 8015f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f62:	ee38 8a27 	vadd.f32	s16, s16, s15
	  for (int i = 0; i < p->numModes; ++i)
 8015f66:	4633      	mov	r3, r6
 8015f68:	6862      	ldr	r2, [r4, #4]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	dcde      	bgt.n	8015f2c <tStiffString_updateOutputWeights+0x1c>
#else
		  p->outputWeights[i] = sinf((i + 1) * x0);
		  totalGain += p->outputWeights[i] * p->amplitudes[i];
#endif
	  }
	  if (totalGain < 0.01f)
 8015f6e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8015fc0 <tStiffString_updateOutputWeights+0xb0>
 8015f72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f7a:	d501      	bpl.n	8015f80 <tStiffString_updateOutputWeights+0x70>
	  {
		  totalGain = 0.01f;
 8015f7c:	eeb0 8a67 	vmov.f32	s16, s15
    if (val < min)
 8015f80:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015fc0 <tStiffString_updateOutputWeights+0xb0>
 8015f84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f8c:	d409      	bmi.n	8015fa2 <tStiffString_updateOutputWeights+0x92>
    else if (val > max)
 8015f8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015f92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8015f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9a:	dd04      	ble.n	8015fa6 <tStiffString_updateOutputWeights+0x96>
        return max;
 8015f9c:	eeb0 8a67 	vmov.f32	s16, s15
 8015fa0:	e001      	b.n	8015fa6 <tStiffString_updateOutputWeights+0x96>
        return min;
 8015fa2:	ed9f 8a07 	vldr	s16, [pc, #28]	; 8015fc0 <tStiffString_updateOutputWeights+0xb0>
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
	  p->gainComp = 1.0f / totalGain;
 8015fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015faa:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8015fae:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 8015fb2:	ecbd 8b02 	vpop	{d8}
 8015fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fb8:	40490fdb 	.word	0x40490fdb
 8015fbc:	00000000 	.word	0x00000000
 8015fc0:	3c23d70a 	.word	0x3c23d70a

08015fc4 <tStiffString_initToPool>:
{
 8015fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc8:	b082      	sub	sp, #8
 8015fca:	4680      	mov	r8, r0
 8015fcc:	460e      	mov	r6, r1
    _tMempool* m = *mp;
 8015fce:	6811      	ldr	r1, [r2, #0]
 8015fd0:	9101      	str	r1, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8015fd2:	2054      	movs	r0, #84	; 0x54
 8015fd4:	f7fc fe6a 	bl	8012cac <mpool_alloc>
 8015fd8:	4605      	mov	r5, r0
 8015fda:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 8015fde:	9901      	ldr	r1, [sp, #4]
 8015fe0:	6001      	str	r1, [r0, #0]
    p->numModes = numModes;
 8015fe2:	6046      	str	r6, [r0, #4]
    p->freqHz = 440.0f;
 8015fe4:	4b2c      	ldr	r3, [pc, #176]	; (8016098 <tStiffString_initToPool+0xd4>)
 8015fe6:	6143      	str	r3, [r0, #20]
    p->stiffness = 0.001f;
 8015fe8:	4b2c      	ldr	r3, [pc, #176]	; (801609c <tStiffString_initToPool+0xd8>)
 8015fea:	6183      	str	r3, [r0, #24]
    p->pluckPos = 0.2f;
 8015fec:	4b2c      	ldr	r3, [pc, #176]	; (80160a0 <tStiffString_initToPool+0xdc>)
 8015fee:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
 8015ff0:	4b2c      	ldr	r3, [pc, #176]	; (80160a4 <tStiffString_initToPool+0xe0>)
 8015ff2:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
 8015ff4:	4b2c      	ldr	r3, [pc, #176]	; (80160a8 <tStiffString_initToPool+0xe4>)
 8015ff6:	6243      	str	r3, [r0, #36]	; 0x24
    p->decayHighFreq = 0.0003f;
 8015ff8:	4b2c      	ldr	r3, [pc, #176]	; (80160ac <tStiffString_initToPool+0xe8>)
 8015ffa:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
 8015ffc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80160b0 <tStiffString_initToPool+0xec>
 8016000:	edc0 6a12 	vstr	s13, [r0, #72]	; 0x48
    p->sampleRate = m->leaf->sampleRate;
 8016004:	684b      	ldr	r3, [r1, #4]
 8016006:	edd3 7a00 	vldr	s15, [r3]
 801600a:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 801600e:	684b      	ldr	r3, [r1, #4]
 8016010:	68db      	ldr	r3, [r3, #12]
 8016012:	6303      	str	r3, [r0, #48]	; 0x30
    p->nyquist = p->sampleRate * 0.5f;
 8016014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016018:	ee27 7a87 	vmul.f32	s14, s15, s14
 801601c:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    Lfloat lessThanNyquist = p->sampleRate * 0.4f;
 8016020:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8016024:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016028:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801602c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016030:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    p->amp = 0.0f;
 8016034:	2300      	movs	r3, #0
 8016036:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
 8016038:	6503      	str	r3, [r0, #80]	; 0x50
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 801603a:	00b7      	lsls	r7, r6, #2
 801603c:	4638      	mov	r0, r7
 801603e:	f7fc fe35 	bl	8012cac <mpool_alloc>
 8016042:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
 8016044:	2400      	movs	r4, #0
 8016046:	e006      	b.n	8016056 <tStiffString_initToPool+0x92>
    	tCycle_initToPool(&p->osc[i], &m);
 8016048:	68a8      	ldr	r0, [r5, #8]
 801604a:	a901      	add	r1, sp, #4
 801604c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8016050:	f7fc ffa4 	bl	8012f9c <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
 8016054:	3401      	adds	r4, #1
 8016056:	42b4      	cmp	r4, r6
 8016058:	dbf6      	blt.n	8016048 <tStiffString_initToPool+0x84>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801605a:	9901      	ldr	r1, [sp, #4]
 801605c:	4638      	mov	r0, r7
 801605e:	f7fc fe25 	bl	8012cac <mpool_alloc>
 8016062:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8016064:	9901      	ldr	r1, [sp, #4]
 8016066:	4638      	mov	r0, r7
 8016068:	f7fc fe20 	bl	8012cac <mpool_alloc>
 801606c:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801606e:	9901      	ldr	r1, [sp, #4]
 8016070:	4638      	mov	r0, r7
 8016072:	f7fc fe1b 	bl	8012cac <mpool_alloc>
 8016076:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8016078:	9901      	ldr	r1, [sp, #4]
 801607a:	4638      	mov	r0, r7
 801607c:	f7fc fe16 	bl	8012cac <mpool_alloc>
 8016080:	63a8      	str	r0, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8016082:	9901      	ldr	r1, [sp, #4]
 8016084:	4638      	mov	r0, r7
 8016086:	f7fc fe11 	bl	8012cac <mpool_alloc>
 801608a:	63e8      	str	r0, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
 801608c:	4640      	mov	r0, r8
 801608e:	f7ff ff3f 	bl	8015f10 <tStiffString_updateOutputWeights>
}
 8016092:	b002      	add	sp, #8
 8016094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016098:	43dc0000 	.word	0x43dc0000
 801609c:	3a83126f 	.word	0x3a83126f
 80160a0:	3e4ccccd 	.word	0x3e4ccccd
 80160a4:	3e99999a 	.word	0x3e99999a
 80160a8:	38d1b717 	.word	0x38d1b717
 80160ac:	399d4952 	.word	0x399d4952
 80160b0:	3ecccccd 	.word	0x3ecccccd

080160b4 <tStiffString_init>:
{
 80160b4:	b508      	push	{r3, lr}
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
 80160b6:	3218      	adds	r2, #24
 80160b8:	f7ff ff84 	bl	8015fc4 <tStiffString_initToPool>
}
 80160bc:	bd08      	pop	{r3, pc}
	...

080160c0 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
 80160c6:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 80160c8:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
 80160ca:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8016148 <tStiffString_tick+0x88>
    for (int i = 0; i < p->numModes; ++i) {
 80160ce:	e02c      	b.n	801612a <tStiffString_tick+0x6a>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80160d0:	68a0      	ldr	r0, [r4, #8]
 80160d2:	00b5      	lsls	r5, r6, #2
 80160d4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80160d8:	f7fc ff88 	bl	8012fec <tCycle_tick>
 80160dc:	68e3      	ldr	r3, [r4, #12]
 80160de:	442b      	add	r3, r5
 80160e0:	edd3 7a00 	vldr	s15, [r3]
 80160e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80160e8:	6923      	ldr	r3, [r4, #16]
 80160ea:	442b      	add	r3, r5
 80160ec:	ed93 7a00 	vldr	s14, [r3]
 80160f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80160f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160f6:	442b      	add	r3, r5
 80160f8:	ed93 7a00 	vldr	s14, [r3]
 80160fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016100:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016102:	442a      	add	r2, r5
 8016104:	edd2 6a00 	vldr	s13, [r2]
 8016108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801610c:	ee38 8a27 	vadd.f32	s16, s16, s15
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8016110:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016112:	442a      	add	r2, r5
 8016114:	edd2 7a00 	vldr	s15, [r2]
 8016118:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
 801611c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016124:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8016128:	3601      	adds	r6, #1
 801612a:	6863      	ldr	r3, [r4, #4]
 801612c:	42b3      	cmp	r3, r6
 801612e:	dccf      	bgt.n	80160d0 <tStiffString_tick+0x10>
    }
    return sample * p->amp * p->gainComp;
 8016130:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8016134:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016138:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
}
 801613c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016140:	ecbd 8b02 	vpop	{d8}
 8016144:	bd70      	pop	{r4, r5, r6, pc}
 8016146:	bf00      	nop
 8016148:	00000000 	.word	0x00000000

0801614c <tStiffString_setFreq>:
    tStiffString_updateOutputWeights(pm);
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
 801614c:	b508      	push	{r3, lr}
    _tStiffString *p = *pm;
 801614e:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8016150:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
 8016154:	f7ff fe36 	bl	8015dc4 <tStiffString_updateOscillators>
}
 8016158:	bd08      	pop	{r3, pc}
	...

0801615c <tStiffString_mute>:
    tStiffString_updateOscillators(pm);
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
 801615c:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
 801615e:	4a01      	ldr	r2, [pc, #4]	; (8016164 <tStiffString_mute+0x8>)
 8016160:	649a      	str	r2, [r3, #72]	; 0x48
}
 8016162:	4770      	bx	lr
 8016164:	3f7d70a4 	.word	0x3f7d70a4

08016168 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
 8016168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801616c:	ed2d 8b02 	vpush	{d8}
 8016170:	4607      	mov	r7, r0
 8016172:	ee10 8a10 	vmov	r8, s0
    _tStiffString* p = *mp;
 8016176:	6806      	ldr	r6, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
 8016178:	edd6 8a07 	vldr	s17, [r6, #28]
 801617c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8016208 <tStiffString_pluck+0xa0>
 8016180:	ee68 8aa7 	vmul.f32	s17, s17, s15
    p->muteDecay = 1.0f;
 8016184:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016188:	64b3      	str	r3, [r6, #72]	; 0x48
    for (int i = 0; i < p->numModes; ++i) {
 801618a:	2400      	movs	r4, #0
 801618c:	e017      	b.n	80161be <tStiffString_pluck+0x56>
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 801618e:	ee07 5a90 	vmov	s15, r5
 8016192:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016196:	ee20 0a28 	vmul.f32	s0, s0, s17
 801619a:	f7ea fa27 	bl	80005ec <arm_sin_f32>
 801619e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80161a2:	68f3      	ldr	r3, [r6, #12]
 80161a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80161a8:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80161ac:	edc3 7a00 	vstr	s15, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
 80161b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80161b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80161b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80161ba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < p->numModes; ++i) {
 80161bc:	462c      	mov	r4, r5
 80161be:	6873      	ldr	r3, [r6, #4]
 80161c0:	42a3      	cmp	r3, r4
 80161c2:	dd18      	ble.n	80161f6 <tStiffString_pluck+0x8e>
        int n = i + 1;
 80161c4:	1c65      	adds	r5, r4, #1
        float denom = n * n * x0 * (PI - x0);
 80161c6:	fb05 f305 	mul.w	r3, r5, r5
 80161ca:	ee08 3a10 	vmov	s16, r3
 80161ce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80161d2:	ee28 8a28 	vmul.f32	s16, s16, s17
 80161d6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8016208 <tStiffString_pluck+0xa0>
 80161da:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80161de:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (denom < 0.001f)
 80161e2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801620c <tStiffString_pluck+0xa4>
 80161e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80161ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ee:	d5ce      	bpl.n	801618e <tStiffString_pluck+0x26>
        	denom = 0.001f; // to avoid divide by zero
 80161f0:	eeb0 8a67 	vmov.f32	s16, s15
 80161f4:	e7cb      	b.n	801618e <tStiffString_pluck+0x26>
    }
    p->amp = amp;
 80161f6:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
 80161fa:	4638      	mov	r0, r7
 80161fc:	f7ff fe88 	bl	8015f10 <tStiffString_updateOutputWeights>
}
 8016200:	ecbd 8b02 	vpop	{d8}
 8016204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016208:	40490fdb 	.word	0x40490fdb
 801620c:	3a83126f 	.word	0x3a83126f

08016210 <tStiffString_setStiffnessNoUpdate>:
    p->twoPiTimesInvSampleRate = TWO_PI / sr;
}

void tStiffString_setStiffnessNoUpdate(tStiffString* const pm, Lfloat newValue)
{
    tStiffString p = *pm;
 8016210:	6803      	ldr	r3, [r0, #0]
    return ostart + (ostop - ostart) * value;
 8016212:	eddf 7a05 	vldr	s15, [pc, #20]	; 8016228 <tStiffString_setStiffnessNoUpdate+0x18>
 8016216:	ee20 0a27 	vmul.f32	s0, s0, s15
 801621a:	eddf 7a04 	vldr	s15, [pc, #16]	; 801622c <tStiffString_setStiffnessNoUpdate+0x1c>
 801621e:	ee30 0a27 	vadd.f32	s0, s0, s15

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
 8016222:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8016226:	4770      	bx	lr
 8016228:	3e4ccccd 	.word	0x3e4ccccd
 801622c:	00000000 	.word	0x00000000

08016230 <tStiffString_setPickupPosNoUpdate>:

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
    tStiffString p = *pm;
 8016230:	6803      	ldr	r3, [r0, #0]
    if (val < min)
 8016232:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016260 <tStiffString_setPickupPosNoUpdate+0x30>
 8016236:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623e:	d409      	bmi.n	8016254 <tStiffString_setPickupPosNoUpdate+0x24>
    else if (val > max)
 8016240:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016264 <tStiffString_setPickupPosNoUpdate+0x34>
 8016244:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801624c:	dd04      	ble.n	8016258 <tStiffString_setPickupPosNoUpdate+0x28>
        return max;
 801624e:	eeb0 0a67 	vmov.f32	s0, s15
 8016252:	e001      	b.n	8016258 <tStiffString_setPickupPosNoUpdate+0x28>
        return min;
 8016254:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016260 <tStiffString_setPickupPosNoUpdate+0x30>

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
 8016258:	ed83 0a08 	vstr	s0, [r3, #32]
}
 801625c:	4770      	bx	lr
 801625e:	bf00      	nop
 8016260:	3c23d70a 	.word	0x3c23d70a
 8016264:	3f7d70a4 	.word	0x3f7d70a4

08016268 <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
    tStiffString p = *pm;
 8016268:	6803      	ldr	r3, [r0, #0]
    if (val < min)
 801626a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016298 <tStiffString_setPluckPosNoUpdate+0x30>
 801626e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	d409      	bmi.n	801628c <tStiffString_setPluckPosNoUpdate+0x24>
    else if (val > max)
 8016278:	eddf 7a08 	vldr	s15, [pc, #32]	; 801629c <tStiffString_setPluckPosNoUpdate+0x34>
 801627c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016284:	dd04      	ble.n	8016290 <tStiffString_setPluckPosNoUpdate+0x28>
        return max;
 8016286:	eeb0 0a67 	vmov.f32	s0, s15
 801628a:	e001      	b.n	8016290 <tStiffString_setPluckPosNoUpdate+0x28>
        return min;
 801628c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8016298 <tStiffString_setPluckPosNoUpdate+0x30>

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
 8016290:	ed83 0a07 	vstr	s0, [r3, #28]
}
 8016294:	4770      	bx	lr
 8016296:	bf00      	nop
 8016298:	3c23d70a 	.word	0x3c23d70a
 801629c:	3f7d70a4 	.word	0x3f7d70a4

080162a0 <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 80162a0:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 80162a2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80162a6:	4770      	bx	lr

080162a8 <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
 80162a8:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
 80162aa:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
 80162ae:	4770      	bx	lr

080162b0 <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
 80162b0:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
 80162b2:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 80162b6:	4770      	bx	lr

080162b8 <glottis_setup_waveform>:
    union { float f; uint32_t x; } u = { f };
    return (u.x << 1) > 0xff000000u;
}

void glottis_setup_waveform(glottis* const glo)
{
 80162b8:	b510      	push	{r4, lr}
 80162ba:	ed2d 8b0a 	vpush	{d8-d12}
	_glottis* glot = *glo;
 80162be:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80162c0:	edd4 7a02 	vldr	s15, [r4, #8]
 80162c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80162c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80162cc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80162d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80162d4:	edc4 7a03 	vstr	s15, [r4, #12]
    glot->waveform_length = 1.0f / glot->freq;
 80162d8:	ed94 6a01 	vldr	s12, [r4, #4]
 80162dc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80162e0:	edc4 6a04 	vstr	s13, [r4, #16]

    Rd = glot->Rd;
    if(Rd < 0.5f) Rd = 0.5f;
 80162e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80162e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f0:	d501      	bpl.n	80162f6 <glottis_setup_waveform+0x3e>
 80162f2:	eef0 7a47 	vmov.f32	s15, s14
    if(Rd > 2.7f) Rd = 2.7f;
 80162f6:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80164f8 <glottis_setup_waveform+0x240>
 80162fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80162fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016302:	dd01      	ble.n	8016308 <glottis_setup_waveform+0x50>
 8016304:	eef0 7a47 	vmov.f32	s15, s14


    Ra = -0.01f + 0.048f*Rd;
 8016308:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80164fc <glottis_setup_waveform+0x244>
 801630c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8016310:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8016500 <glottis_setup_waveform+0x248>
 8016314:	ee76 6ac7 	vsub.f32	s13, s13, s14
    Rk = 0.224f + 0.118f*Rd;
 8016318:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8016504 <glottis_setup_waveform+0x24c>
 801631c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8016320:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8016508 <glottis_setup_waveform+0x250>
 8016324:	ee78 8a87 	vadd.f32	s17, s17, s14
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8016328:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 801632c:	ee28 6a86 	vmul.f32	s12, s17, s12
 8016330:	ed9f 7a76 	vldr	s14, [pc, #472]	; 801650c <glottis_setup_waveform+0x254>
 8016334:	ee28 7a87 	vmul.f32	s14, s17, s14
 8016338:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801633c:	ee37 7a2a 	vadd.f32	s14, s14, s21
 8016340:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016344:	eddf 5a72 	vldr	s11, [pc, #456]	; 8016510 <glottis_setup_waveform+0x258>
 8016348:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801634c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016354:	ee86 7a27 	vdiv.f32	s14, s12, s15


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8016358:	ee37 7a07 	vadd.f32	s14, s14, s14
 801635c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8016360:	ee89 9a87 	vdiv.f32	s18, s19, s14
    Te = Tp + Tp*Rk;
 8016364:	ee68 8a89 	vmul.f32	s17, s17, s18
 8016368:	ee78 8a89 	vadd.f32	s17, s17, s18



    epsilon = (Lfloat)1.0f / Ta;
 801636c:	ee89 aaa6 	vdiv.f32	s20, s19, s13
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8016370:	ee39 7ae8 	vsub.f32	s14, s19, s17
 8016374:	ee2a 8a47 	vnmul.f32	s16, s20, s14
    x = 1.0f + (x * 0.00390625f);
 8016378:	eddf 7a66 	vldr	s15, [pc, #408]	; 8016514 <glottis_setup_waveform+0x25c>
 801637c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016380:	ee38 8a29 	vadd.f32	s16, s16, s19
    x *= x; x *= x; x *= x; x *= x;
 8016384:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016388:	ee28 8a08 	vmul.f32	s16, s16, s16
 801638c:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016390:	ee28 8a08 	vmul.f32	s16, s16, s16
    x *= x; x *= x; x *= x; x *= x;
 8016394:	ee28 8a08 	vmul.f32	s16, s16, s16
 8016398:	ee28 8a08 	vmul.f32	s16, s16, s16
 801639c:	ee28 8a08 	vmul.f32	s16, s16, s16
 80163a0:	ee28 8a08 	vmul.f32	s16, s16, s16
    delta = 1.0f - shift;
 80163a4:	ee79 bac8 	vsub.f32	s23, s19, s16



    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 80163a8:	eec9 7a8a 	vdiv.f32	s15, s19, s20
 80163ac:	ee78 6a69 	vsub.f32	s13, s16, s19
 80163b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80163b4:	ee27 7a08 	vmul.f32	s14, s14, s16
 80163b8:	ee77 7a87 	vadd.f32	s15, s15, s14
    rhs_integral = rhs_integral / delta;
 80163bc:	ee87 7aab 	vdiv.f32	s14, s15, s23
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 80163c0:	ee38 6ac9 	vsub.f32	s12, s17, s18
 80163c4:	ee26 6a6a 	vnmul.f32	s12, s12, s21
 80163c8:	ee36 6a07 	vadd.f32	s12, s12, s14
    upper_integral = -lower_integral;
 80163cc:	eeb1 ca46 	vneg.f32	s24, s12


    omega = M_PI / Tp;
 80163d0:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 80163d4:	ed9f 5b44 	vldr	d5, [pc, #272]	; 80164e8 <glottis_setup_waveform+0x230>
 80163d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80163dc:	eeb7 bbc7 	vcvt.f32.f64	s22, d7
    s = fast_sinf2(omega * Te);
 80163e0:	ee28 0a8b 	vmul.f32	s0, s17, s22
 80163e4:	f7fc fc04 	bl	8012bf0 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 80163e8:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80163ec:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80164f0 <glottis_setup_waveform+0x238>
 80163f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80163f4:	eeb7 6acc 	vcvt.f64.f32	d6, s24
 80163f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80163fc:	ee39 5a09 	vadd.f32	s10, s18, s18
 8016400:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8016404:	ee86 7b05 	vdiv.f64	d7, d6, d5
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 8016408:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801640c:	ee17 3a90 	vmov	r3, s15
 8016410:	4941      	ldr	r1, [pc, #260]	; (8016518 <glottis_setup_waveform+0x260>)
 8016412:	4419      	add	r1, r3
 8016414:	4a41      	ldr	r2, [pc, #260]	; (801651c <glottis_setup_waveform+0x264>)
 8016416:	400a      	ands	r2, r1
    unholy2.i = (unholy.i - e);
 8016418:	1a9b      	subs	r3, r3, r2
 801641a:	ee07 3a10 	vmov	s14, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 801641e:	ee07 2a90 	vmov	s15, r2
 8016422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016426:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8016520 <glottis_setup_waveform+0x268>
 801642a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    f = m - 1.0f;
 801642e:	ee37 7a69 	vsub.f32	s14, s14, s19
    s = f * f;
 8016432:	ee67 5a07 	vmul.f32	s11, s14, s14
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8016436:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8016524 <glottis_setup_waveform+0x26c>
 801643a:	ed9f 6a3b 	vldr	s12, [pc, #236]	; 8016528 <glottis_setup_waveform+0x270>
 801643e:	eea6 6a87 	vfma.f32	s12, s13, s14
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8016442:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801652c <glottis_setup_waveform+0x274>
 8016446:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8016530 <glottis_setup_waveform+0x278>
 801644a:	eee5 6a07 	vfma.f32	s13, s10, s14
    r = fmaf (r, s, t);
 801644e:	eee6 6a25 	vfma.f32	s13, s12, s11
    r = fmaf (r, s, f);
 8016452:	eea6 7aa5 	vfma.f32	s14, s13, s11
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8016456:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016534 <glottis_setup_waveform+0x27c>
 801645a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    z = my_faster_logf(y);
    alpha = z / (Tp/2.0f - Te);
 801645e:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8016462:	ee39 9a68 	vsub.f32	s18, s18, s17
 8016466:	eec7 6a09 	vdiv.f32	s13, s14, s18
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 801646a:	ee68 7aa6 	vmul.f32	s15, s17, s13
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 801646e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8016538 <glottis_setup_waveform+0x280>
 8016472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801647a:	ee17 3a90 	vmov	r3, s15
 801647e:	f103 507e 	add.w	r0, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8016482:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8016486:	f640 52d1 	movw	r2, #3537	; 0xdd1
 801648a:	fb03 f202 	mul.w	r2, r3, r2
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 801648e:	f243 5164 	movw	r1, #13668	; 0x3564
 8016492:	eb01 4122 	add.w	r1, r1, r2, asr #16
 8016496:	fb03 f101 	mul.w	r1, r3, r1
 801649a:	f643 52c9 	movw	r2, #15817	; 0x3dc9
 801649e:	eb02 42a1 	add.w	r2, r2, r1, asr #18
 80164a2:	fb03 f202 	mul.w	r2, r3, r2
 80164a6:	4925      	ldr	r1, [pc, #148]	; (801653c <glottis_setup_waveform+0x284>)
 80164a8:	eb01 32a2 	add.w	r2, r1, r2, asr #14
 80164ac:	fb02 f303 	mul.w	r3, r2, r3
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80164b0:	eb00 20e3 	add.w	r0, r0, r3, asr #11
 80164b4:	ee07 0a90 	vmov	s15, r0
 80164b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80164bc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80164c0:	eec7 7a00 	vdiv.f32	s15, s14, s0



    glot->alpha = alpha;
 80164c4:	edc4 6a06 	vstr	s13, [r4, #24]
    glot->E0 = E0;
 80164c8:	edc4 7a07 	vstr	s15, [r4, #28]
    glot->epsilon = epsilon;
 80164cc:	ed84 aa08 	vstr	s20, [r4, #32]
    glot->shift = shift;
 80164d0:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
    glot->delta = delta;
 80164d4:	edc4 ba0a 	vstr	s23, [r4, #40]	; 0x28
    glot->Te = Te;
 80164d8:	edc4 8a0b 	vstr	s17, [r4, #44]	; 0x2c
    glot->omega = omega;
 80164dc:	ed84 ba0c 	vstr	s22, [r4, #48]	; 0x30
}
 80164e0:	ecbd 8b0a 	vpop	{d8-d12}
 80164e4:	bd10      	pop	{r4, pc}
 80164e6:	bf00      	nop
 80164e8:	54442d18 	.word	0x54442d18
 80164ec:	400921fb 	.word	0x400921fb
 80164f0:	54442d18 	.word	0x54442d18
 80164f4:	c00921fb 	.word	0xc00921fb
 80164f8:	402ccccd 	.word	0x402ccccd
 80164fc:	3d449ba6 	.word	0x3d449ba6
 8016500:	3c23d70a 	.word	0x3c23d70a
 8016504:	3df1a9fc 	.word	0x3df1a9fc
 8016508:	3e656042 	.word	0x3e656042
 801650c:	3f99999a 	.word	0x3f99999a
 8016510:	3de147ae 	.word	0x3de147ae
 8016514:	3b800000 	.word	0x3b800000
 8016518:	c0d55555 	.word	0xc0d55555
 801651c:	ff800000 	.word	0xff800000
 8016520:	34000000 	.word	0x34000000
 8016524:	3e6c6078 	.word	0x3e6c6078
 8016528:	be8ef46d 	.word	0xbe8ef46d
 801652c:	3ea9e51a 	.word	0x3ea9e51a
 8016530:	beff712d 	.word	0xbeff712d
 8016534:	3f317218 	.word	0x3f317218
 8016538:	4b38aa3b 	.word	0x4b38aa3b
 801653c:	fffec5aa 	.word	0xfffec5aa

08016540 <glottis_initToPool>:
{
	glottis_initToPool(glo, &leaf->mempool);
}

void glottis_initToPool(glottis* const glo, tMempool* const mp)
{
 8016540:	b530      	push	{r4, r5, lr}
 8016542:	b083      	sub	sp, #12
 8016544:	4605      	mov	r5, r0

	_tMempool* m = *mp;
 8016546:	680c      	ldr	r4, [r1, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8016548:	4621      	mov	r1, r4
 801654a:	203c      	movs	r0, #60	; 0x3c
 801654c:	f7fc fc26 	bl	8012d9c <mpool_calloc>
 8016550:	6028      	str	r0, [r5, #0]
 8016552:	9001      	str	r0, [sp, #4]
	glot->mempool = m;
 8016554:	6004      	str	r4, [r0, #0]
	LEAF* leaf = glot->mempool->leaf;
 8016556:	9b01      	ldr	r3, [sp, #4]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	6852      	ldr	r2, [r2, #4]
	glot->mempool = m;
 801655c:	601c      	str	r4, [r3, #0]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 801655e:	9b01      	ldr	r3, [sp, #4]
 8016560:	4909      	ldr	r1, [pc, #36]	; (8016588 <glottis_initToPool+0x48>)
 8016562:	6059      	str	r1, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8016564:	4909      	ldr	r1, [pc, #36]	; (801658c <glottis_initToPool+0x4c>)
 8016566:	6099      	str	r1, [r3, #8]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8016568:	ed92 7a00 	vldr	s14, [r2]
 801656c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016574:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glot->time_in_waveform = 0;
 8016578:	2200      	movs	r2, #0
 801657a:	615a      	str	r2, [r3, #20]
    glottis_setup_waveform(&glot);
 801657c:	a801      	add	r0, sp, #4
 801657e:	f7ff fe9b 	bl	80162b8 <glottis_setup_waveform>
}
 8016582:	b003      	add	sp, #12
 8016584:	bd30      	pop	{r4, r5, pc}
 8016586:	bf00      	nop
 8016588:	430c0000 	.word	0x430c0000
 801658c:	3f19999a 	.word	0x3f19999a

08016590 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 8016590:	b510      	push	{r4, lr}
 8016592:	ed2d 8b02 	vpush	{d8}
 8016596:	b082      	sub	sp, #8
	_glottis* glot = *glo;
 8016598:	6803      	ldr	r3, [r0, #0]
 801659a:	9301      	str	r3, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 801659c:	681a      	ldr	r2, [r3, #0]
 801659e:	6854      	ldr	r4, [r2, #4]
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 80165a0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80165a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80165a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80165ac:	edc3 7a05 	vstr	s15, [r3, #20]

    if(glot->time_in_waveform > glot->waveform_length) {
 80165b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80165b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80165b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165bc:	dc66      	bgt.n	801668c <glottis_compute+0xfc>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 80165be:	9a01      	ldr	r2, [sp, #4]
 80165c0:	ed92 7a05 	vldr	s14, [r2, #20]
 80165c4:	edd2 7a01 	vldr	s15, [r2, #4]
 80165c8:	ee27 7a27 	vmul.f32	s14, s14, s15

    if(t > glot->Te) {
 80165cc:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 80165d0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80165d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165d8:	d560      	bpl.n	801669c <glottis_compute+0x10c>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 80165da:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 80165de:	edd2 7a08 	vldr	s15, [r2, #32]
 80165e2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80165e6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80165ea:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016710 <glottis_compute+0x180>
 80165ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80165f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80165f6:	ee17 3a90 	vmov	r3, s15
 80165fa:	f103 5c7e 	add.w	ip, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80165fe:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8016602:	f640 51d1 	movw	r1, #3537	; 0xdd1
 8016606:	fb03 f101 	mul.w	r1, r3, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 801660a:	f243 5064 	movw	r0, #13668	; 0x3564
 801660e:	eb00 4021 	add.w	r0, r0, r1, asr #16
 8016612:	fb03 f000 	mul.w	r0, r3, r0
 8016616:	f643 51c9 	movw	r1, #15817	; 0x3dc9
 801661a:	eb01 41a0 	add.w	r1, r1, r0, asr #18
 801661e:	fb03 f101 	mul.w	r1, r3, r1
 8016622:	483c      	ldr	r0, [pc, #240]	; (8016714 <glottis_compute+0x184>)
 8016624:	eb00 31a1 	add.w	r1, r0, r1, asr #14
 8016628:	fb01 f303 	mul.w	r3, r1, r3
    reinterpreter.i += (((((((((((3537*m) >> 16)
 801662c:	eb0c 2ce3 	add.w	ip, ip, r3, asr #11
 8016630:	ee07 ca90 	vmov	s15, ip
 8016634:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016638:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 801663c:	ee86 8aa7 	vdiv.f32	s16, s13, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8016640:	6923      	ldr	r3, [r4, #16]
 8016642:	4798      	blx	r3
 8016644:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016648:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801664c:	ee70 7a67 	vsub.f32	s15, s0, s15

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
 8016650:	9b01      	ldr	r3, [sp, #4]
 8016652:	ed93 7a02 	vldr	s14, [r3, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8016656:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801665e:	db53      	blt.n	8016708 <glottis_compute+0x178>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8016660:	eeb1 7ac7 	vsqrt.f32	s14, s14
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
 8016664:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016668:	ee30 0a47 	vsub.f32	s0, s0, s14
 801666c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8016718 <glottis_compute+0x188>
 8016670:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016674:	ee20 0a27 	vmul.f32	s0, s0, s15
#else
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;
 8016678:	eddf 7a28 	vldr	s15, [pc, #160]	; 801671c <glottis_compute+0x18c>
 801667c:	ee20 0a27 	vmul.f32	s0, s0, s15

    out += aspiration;

    return out;
}
 8016680:	ee38 0a00 	vadd.f32	s0, s16, s0
 8016684:	b002      	add	sp, #8
 8016686:	ecbd 8b02 	vpop	{d8}
 801668a:	bd10      	pop	{r4, pc}
        glot->time_in_waveform -= glot->waveform_length;
 801668c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016690:	edc3 7a05 	vstr	s15, [r3, #20]
        glottis_setup_waveform(&glot);
 8016694:	a801      	add	r0, sp, #4
 8016696:	f7ff fe0f 	bl	80162b8 <glottis_setup_waveform>
 801669a:	e790      	b.n	80165be <glottis_compute+0x2e>
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
 801669c:	ed92 8a07 	vldr	s16, [r2, #28]
 80166a0:	edd2 7a06 	vldr	s15, [r2, #24]
 80166a4:	ee67 7a87 	vmul.f32	s15, s15, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80166a8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016710 <glottis_compute+0x180>
 80166ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80166b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166b4:	ee17 3a90 	vmov	r3, s15
 80166b8:	f103 5c7e 	add.w	ip, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80166bc:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80166c0:	f640 51d1 	movw	r1, #3537	; 0xdd1
 80166c4:	fb03 f101 	mul.w	r1, r3, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 80166c8:	f243 5064 	movw	r0, #13668	; 0x3564
 80166cc:	eb00 4021 	add.w	r0, r0, r1, asr #16
 80166d0:	fb03 f000 	mul.w	r0, r3, r0
 80166d4:	f643 51c9 	movw	r1, #15817	; 0x3dc9
 80166d8:	eb01 41a0 	add.w	r1, r1, r0, asr #18
 80166dc:	fb03 f101 	mul.w	r1, r3, r1
 80166e0:	480c      	ldr	r0, [pc, #48]	; (8016714 <glottis_compute+0x184>)
 80166e2:	eb00 31a1 	add.w	r1, r0, r1, asr #14
 80166e6:	fb01 f303 	mul.w	r3, r1, r3
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80166ea:	eb0c 2ce3 	add.w	ip, ip, r3, asr #11
 80166ee:	ee07 ca90 	vmov	s15, ip
 80166f2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80166f6:	ed92 0a0c 	vldr	s0, [r2, #48]	; 0x30
 80166fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80166fe:	f7e9 ff75 	bl	80005ec <arm_sin_f32>
 8016702:	ee28 8a00 	vmul.f32	s16, s16, s0
 8016706:	e79b      	b.n	8016640 <glottis_compute+0xb0>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8016708:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8016720 <glottis_compute+0x190>
 801670c:	e7aa      	b.n	8016664 <glottis_compute+0xd4>
 801670e:	bf00      	nop
 8016710:	4b38aa3b 	.word	0x4b38aa3b
 8016714:	fffec5aa 	.word	0xfffec5aa
 8016718:	3e99999a 	.word	0x3e99999a
 801671c:	3e4ccccd 	.word	0x3e4ccccd
 8016720:	00000000 	.word	0x00000000

08016724 <tract_calculate_reflections>:
}


void tract_calculate_reflections(tract* const t)
{
	_tract* tr = *t;
 8016724:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++)
 8016726:	2200      	movs	r2, #0
 8016728:	e010      	b.n	801674c <tract_calculate_reflections+0x28>
    {
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 801672a:	6959      	ldr	r1, [r3, #20]
 801672c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016730:	edd1 7a00 	vldr	s15, [r1]
 8016734:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8016738:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
 801673c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801673e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016742:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016746:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++)
 801674a:	3201      	adds	r2, #1
 801674c:	6859      	ldr	r1, [r3, #4]
 801674e:	4291      	cmp	r1, r2
 8016750:	dceb      	bgt.n	801672a <tract_calculate_reflections+0x6>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++)
 8016752:	2201      	movs	r2, #1
 8016754:	e016      	b.n	8016784 <tract_calculate_reflections+0x60>
        {
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
        }
        else
        {
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
 8016756:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016870 <tract_calculate_reflections+0x14c>
 801675a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016762:	da06      	bge.n	8016772 <tract_calculate_reflections+0x4e>
 8016764:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8016874 <tract_calculate_reflections+0x150>
 8016768:	eef4 6ac6 	vcmpe.f32	s13, s12
 801676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016770:	d807      	bhi.n	8016782 <tract_calculate_reflections+0x5e>
        	{
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
 8016772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8016778:	4461      	add	r1, ip
 801677a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801677e:	edc1 7a00 	vstr	s15, [r1]
    for(i = 1; i < tr->n; i++)
 8016782:	3201      	adds	r2, #1
 8016784:	6859      	ldr	r1, [r3, #4]
 8016786:	4291      	cmp	r1, r2
 8016788:	dd23      	ble.n	80167d2 <tract_calculate_reflections+0xae>
        tr->reflection[i] = tr->new_reflection[i];
 801678a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801678c:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8016790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016792:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016796:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801679a:	6800      	ldr	r0, [r0, #0]
 801679c:	6008      	str	r0, [r1, #0]
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
 801679e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80167a0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80167a4:	4411      	add	r1, r2
 80167a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80167aa:	ed91 7a00 	vldr	s14, [r1]
 80167ae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80167b2:	edd0 7a00 	vldr	s15, [r0]
 80167b6:	ee77 6a27 	vadd.f32	s13, s14, s15
        if(tr->A[i] <= 0.0000001f)
 80167ba:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8016870 <tract_calculate_reflections+0x14c>
 80167be:	eef4 7ac6 	vcmpe.f32	s15, s12
 80167c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c6:	d8c6      	bhi.n	8016756 <tract_calculate_reflections+0x32>
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
 80167c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80167ca:	4461      	add	r1, ip
 80167cc:	482a      	ldr	r0, [pc, #168]	; (8016878 <tract_calculate_reflections+0x154>)
 80167ce:	6008      	str	r0, [r1, #0]
 80167d0:	e7d7      	b.n	8016782 <tract_calculate_reflections+0x5e>
        	}
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 80167d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80167d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->reflection_right = tr->new_reflection_right;
 80167da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80167de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
 80167e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80167e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 80167ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80167ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80167ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80167f2:	ed90 7a00 	vldr	s14, [r0]
 80167f6:	3101      	adds	r1, #1
 80167f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80167fc:	edd2 7a00 	vldr	s15, [r2]
 8016800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016804:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8016806:	edd1 6a00 	vldr	s13, [r1]
 801680a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if ((sum  <= 0.001f) && (sum >= -0.001f))
 801680e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 801687c <tract_calculate_reflections+0x158>
 8016812:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681a:	d808      	bhi.n	801682e <tract_calculate_reflections+0x10a>
 801681c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8016880 <tract_calculate_reflections+0x15c>
 8016820:	eef4 7ae6 	vcmpe.f32	s15, s13
 8016824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016828:	db01      	blt.n	801682e <tract_calculate_reflections+0x10a>
    {
    	sum = 0.001f;
 801682a:	eddf 7a14 	vldr	s15, [pc, #80]	; 801687c <tract_calculate_reflections+0x158>
    }
    Lfloat invSum = 1.0f / sum;
 801682e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016832:	eec6 6a27 	vdiv.f32	s13, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8016836:	ee37 7a07 	vadd.f32	s14, s14, s14
 801683a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801683e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016842:	ed83 7a23 	vstr	s14, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 8016846:	ed92 7a00 	vldr	s14, [r2]
 801684a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801684e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016852:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016856:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 801685a:	ed91 7a00 	vldr	s14, [r1]
 801685e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8016862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016866:	ee27 7a26 	vmul.f32	s14, s14, s13
 801686a:	ed83 7a25 	vstr	s14, [r3, #148]	; 0x94
}
 801686e:	4770      	bx	lr
 8016870:	33d6bf95 	.word	0x33d6bf95
 8016874:	b3d6bf95 	.word	0xb3d6bf95
 8016878:	3f7d70a4 	.word	0x3f7d70a4
 801687c:	3a83126f 	.word	0x3a83126f
 8016880:	ba83126f 	.word	0xba83126f

08016884 <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
	_tract* tr = *t;
 8016884:	6803      	ldr	r3, [r0, #0]
	int i;
	Lfloat diameter, d;
    Lfloat n;
    if (numTractSections < tr->maxNumTractSections)
 8016886:	691a      	ldr	r2, [r3, #16]
 8016888:	428a      	cmp	r2, r1
 801688a:	f340 8088 	ble.w	801699e <tract_newLength+0x11a>
    {
    	n = numTractSections;
 801688e:	ee07 1a90 	vmov	s15, r1
 8016892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    else
    {
    	n = tr->maxNumTractSections;
    }

    tr->n = n; //44
 8016896:	eebd 5ae7 	vcvt.s32.f32	s10, s15
 801689a:	ed83 5a01 	vstr	s10, [r3, #4]
    tr->invN = 1.0f / n;
 801689e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80168a2:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80168a6:	ed83 7a02 	vstr	s14, [r3, #8]
    tr->nose_length = n*0.636363636363636f; //28
 80168aa:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8016b3c <tract_newLength+0x2b8>
 80168ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80168b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80168b6:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80168ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80168c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80168c6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80168ca:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c

    tr->reflection_left = 0.0f;
 80168ce:	2200      	movs	r2, #0
 80168d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->reflection_right = 0.0f;
 80168d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 80168d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 80168dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 80168e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 80168e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->velum_target = 0.01f;
 80168e8:	4995      	ldr	r1, [pc, #596]	; (8016b40 <tract_newLength+0x2bc>)
 80168ea:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 80168ee:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80168f2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    tr->lip_reflection = -0.85f;
 80168f6:	4993      	ldr	r1, [pc, #588]	; (8016b44 <tract_newLength+0x2c0>)
 80168f8:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    tr->last_obstruction = -1;
 80168fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016900:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
    tr->movement_speed = 200.0f;
 8016904:	4990      	ldr	r1, [pc, #576]	; (8016b48 <tract_newLength+0x2c4>)
 8016906:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    tr->lip_output = 0.0f;
 801690a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 801690e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tr->tip_start = n*0.727272727272727f;
 8016912:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8016b4c <tract_newLength+0x2c8>
 8016916:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801691a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801691e:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
    tr->blade_start = n*0.227272727272727f;
 8016922:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8016b50 <tract_newLength+0x2cc>
 8016926:	ee27 7a87 	vmul.f32	s14, s15, s14
 801692a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801692e:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
    tr->lip_start = n*0.886363636363636f;
 8016932:	ed9f 6a88 	vldr	s12, [pc, #544]	; 8016b54 <tract_newLength+0x2d0>
 8016936:	ee27 6a86 	vmul.f32	s12, s15, s12
 801693a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 801693e:	ed83 6a16 	vstr	s12, [r3, #88]	; 0x58

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8016942:	ed9f 6a85 	vldr	s12, [pc, #532]	; 8016b58 <tract_newLength+0x2d4>
 8016946:	ee27 6a86 	vmul.f32	s12, s15, s12
 801694a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801694e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8016952:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8016956:	eddf 6a81 	vldr	s13, [pc, #516]	; 8016b5c <tract_newLength+0x2d8>
 801695a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801695e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016962:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016966:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60

	tr->turbuluencePointPosition[0] = n* 0.45f;
 801696a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016b60 <tract_newLength+0x2dc>
 801696e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016972:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8016976:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801697a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801697e:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8016982:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8016986:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 801698a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    tr->invN = 1.0f / tr->n;
 801698e:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 8016992:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8016996:	ed83 7a02 	vstr	s14, [r3, #8]

    for(i = 0; i < tr->n; i++) {
 801699a:	2200      	movs	r2, #0
 801699c:	e02f      	b.n	80169fe <tract_newLength+0x17a>
    	n = tr->maxNumTractSections;
 801699e:	ee07 2a90 	vmov	s15, r2
 80169a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169a6:	e776      	b.n	8016896 <tract_newLength+0x12>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
            diameter = 0.6f;
 80169a8:	496e      	ldr	r1, [pc, #440]	; (8016b64 <tract_newLength+0x2e0>)
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
 80169aa:	6a18      	ldr	r0, [r3, #32]
 80169ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169b0:	6001      	str	r1, [r0, #0]
            tr->target_diameter[i] =
 80169b2:	69d8      	ldr	r0, [r3, #28]
 80169b4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169b8:	6001      	str	r1, [r0, #0]
            tr->rest_diameter[i] =
 80169ba:	6998      	ldr	r0, [r3, #24]
 80169bc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169c0:	6001      	str	r1, [r0, #0]
        tr->diameter[i] =
 80169c2:	6958      	ldr	r0, [r3, #20]
 80169c4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169c8:	6001      	str	r1, [r0, #0]
        tr->reflection[i] = 0.0f;
 80169ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80169cc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80169d0:	2100      	movs	r1, #0
 80169d2:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
 80169d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80169d6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169da:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
 80169dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80169de:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169e2:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
 80169e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80169e6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169ea:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
 80169ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80169ee:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169f2:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
 80169f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80169f6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80169fa:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 80169fc:	3201      	adds	r2, #1
 80169fe:	6859      	ldr	r1, [r3, #4]
 8016a00:	4291      	cmp	r1, r2
 8016a02:	dd26      	ble.n	8016a52 <tract_newLength+0x1ce>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8016a04:	edd3 6a02 	vldr	s13, [r3, #8]
 8016a08:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8016a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016a10:	ee07 1a10 	vmov	s14, r1
 8016a14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016a18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016a20:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016a28:	ee17 1a90 	vmov	r1, s15
 8016a2c:	4291      	cmp	r1, r2
 8016a2e:	dcbb      	bgt.n	80169a8 <tract_newLength+0x124>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8016a30:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8016a34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8016a38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016a3c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8016a40:	ee17 1a10 	vmov	r1, s14
 8016a44:	4291      	cmp	r1, r2
 8016a46:	dd01      	ble.n	8016a4c <tract_newLength+0x1c8>
            diameter = 1.1f;
 8016a48:	4947      	ldr	r1, [pc, #284]	; (8016b68 <tract_newLength+0x2e4>)
 8016a4a:	e7ae      	b.n	80169aa <tract_newLength+0x126>
            diameter = 1.5f;
 8016a4c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8016a50:	e7ab      	b.n	80169aa <tract_newLength+0x126>
    }

    if (tr->nose_length < 0.01f)
 8016a52:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8016a56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a5a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016b6c <tract_newLength+0x2e8>
 8016a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a66:	d501      	bpl.n	8016a6c <tract_newLength+0x1e8>
    {
    	tr->nose_length = 0.01f;
 8016a68:	2200      	movs	r2, #0
 8016a6a:	649a      	str	r2, [r3, #72]	; 0x48
    }
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8016a6c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8016a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016a74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a78:	eec7 6a27 	vdiv.f32	s13, s14, s15
	for(i = 0; i < tr->nose_length; i++) {
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	e023      	b.n	8016ac8 <tract_newLength+0x244>
		d = 2.0f * ((Lfloat)i * invNoseLength);
		if(d < 1.0f) {
			diameter = 0.4f + 1.6f * d;
 8016a80:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8016b70 <tract_newLength+0x2ec>
 8016a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016a88:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8016b74 <tract_newLength+0x2f0>
 8016a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a90:	e038      	b.n	8016b04 <tract_newLength+0x280>
		} else {
			diameter = 0.5f + 1.5f*(2.0f-d);
		}
		diameter = MIN(diameter, 1.9f);
		tr->nose_diameter[i] = diameter;
 8016a92:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8016a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016a98:	edc1 7a00 	vstr	s15, [r1]
        tr->nose_reflection[i] = 0.0f;
 8016a9c:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8016a9e:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8016aa2:	2100      	movs	r1, #0
 8016aa4:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
 8016aa6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016aa8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8016aac:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
 8016aae:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8016ab0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8016ab4:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
 8016ab6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8016ab8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8016abc:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
 8016abe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016ac0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8016ac4:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
 8016ac6:	3201      	adds	r2, #1
 8016ac8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8016aca:	4291      	cmp	r1, r2
 8016acc:	dd24      	ble.n	8016b18 <tract_newLength+0x294>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8016ace:	ee07 2a90 	vmov	s15, r2
 8016ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ada:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 8016ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aea:	d4c9      	bmi.n	8016a80 <tract_newLength+0x1fc>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8016aec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016af4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016afc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016b00:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 8016b04:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8016b78 <tract_newLength+0x2f4>
 8016b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b10:	d4bf      	bmi.n	8016a92 <tract_newLength+0x20e>
 8016b12:	eef0 7a47 	vmov.f32	s15, s14
 8016b16:	e7bc      	b.n	8016a92 <tract_newLength+0x20e>
	}

    tr->new_reflection_left = 0.0f;
 8016b18:	2200      	movs	r2, #0
 8016b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
 8016b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
 8016b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
 8016b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
 8016b2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
 8016b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
 8016b32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8016b36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
 8016b3a:	4770      	bx	lr
 8016b3c:	3f22e8ba 	.word	0x3f22e8ba
 8016b40:	3c23d70a 	.word	0x3c23d70a
 8016b44:	bf59999a 	.word	0xbf59999a
 8016b48:	43480000 	.word	0x43480000
 8016b4c:	3f3a2e8c 	.word	0x3f3a2e8c
 8016b50:	3e68ba2f 	.word	0x3e68ba2f
 8016b54:	3f62e8ba 	.word	0x3f62e8ba
 8016b58:	3d8ba2e9 	.word	0x3d8ba2e9
 8016b5c:	3d3a2e8c 	.word	0x3d3a2e8c
 8016b60:	3ee66666 	.word	0x3ee66666
 8016b64:	3f19999a 	.word	0x3f19999a
 8016b68:	3f8ccccd 	.word	0x3f8ccccd
 8016b6c:	3c23d70a 	.word	0x3c23d70a
 8016b70:	3fcccccd 	.word	0x3fcccccd
 8016b74:	3ecccccd 	.word	0x3ecccccd
 8016b78:	3ff33333 	.word	0x3ff33333

08016b7c <tract_addTurbulenceNoiseAtPosition>:
	}
}

void tract_addTurbulenceNoiseAtPosition(tract* const t, Lfloat turbulenceNoise, Lfloat position, Lfloat diameter)
{
	_tract* tr = *t;
 8016b7c:	6802      	ldr	r2, [r0, #0]
	int i = (int)floorf(position);
 8016b7e:	fefb 7a60 	vrintm.f32	s15, s1
 8016b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b86:	ee17 3a90 	vmov	r3, s15
	Lfloat delta = position - i;
 8016b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b8e:	ee70 0ae7 	vsub.f32	s1, s1, s15
	//Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8016b92:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8016c78 <tract_addTurbulenceNoiseAtPosition+0xfc>
 8016b96:	ee37 7a41 	vsub.f32	s14, s14, s2
 8016b9a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
    if (val < min)
 8016ba2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016baa:	d409      	bmi.n	8016bc0 <tract_addTurbulenceNoiseAtPosition+0x44>
    else if (val > max)
 8016bac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bb8:	dd04      	ble.n	8016bc4 <tract_addTurbulenceNoiseAtPosition+0x48>
        return max;
 8016bba:	eeb0 7a67 	vmov.f32	s14, s15
 8016bbe:	e001      	b.n	8016bc4 <tract_addTurbulenceNoiseAtPosition+0x48>
        return min;
 8016bc0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8016c7c <tract_addTurbulenceNoiseAtPosition+0x100>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8016bc4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8016bc8:	ee21 1a27 	vmul.f32	s2, s2, s15
    if (val < min)
 8016bcc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8016bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd4:	d409      	bmi.n	8016bea <tract_addTurbulenceNoiseAtPosition+0x6e>
    else if (val > max)
 8016bd6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016bda:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8016bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be2:	dd04      	ble.n	8016bee <tract_addTurbulenceNoiseAtPosition+0x72>
        return max;
 8016be4:	eeb0 1a67 	vmov.f32	s2, s15
 8016be8:	e001      	b.n	8016bee <tract_addTurbulenceNoiseAtPosition+0x72>
        return min;
 8016bea:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016c7c <tract_addTurbulenceNoiseAtPosition+0x100>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8016bee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016bf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016bf6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016bfe:	ee67 7a81 	vmul.f32	s15, s15, s2
 8016c02:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 8016c0a:	ee60 0a80 	vmul.f32	s1, s1, s0
 8016c0e:	ee60 0a87 	vmul.f32	s1, s1, s14
 8016c12:	ee60 0a81 	vmul.f32	s1, s1, s2
 8016c16:	ee60 0aa6 	vmul.f32	s1, s1, s13

	if ((i + 1) < tr->n) {
 8016c1a:	1c59      	adds	r1, r3, #1
 8016c1c:	6850      	ldr	r0, [r2, #4]
 8016c1e:	4281      	cmp	r1, r0
 8016c20:	da12      	bge.n	8016c48 <tract_addTurbulenceNoiseAtPosition+0xcc>
		tr->R[i + 1] += noise0;
 8016c22:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8016c24:	1c58      	adds	r0, r3, #1
 8016c26:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8016c2a:	ed91 7a00 	vldr	s14, [r1]
 8016c2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016c32:	ed81 7a00 	vstr	s14, [r1]
		tr->L[i + 1] += noise0;
 8016c36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8016c38:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8016c3c:	ed91 7a00 	vldr	s14, [r1]
 8016c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c44:	edc1 7a00 	vstr	s15, [r1]
	}
	if ((i + 2) < tr->n) {
 8016c48:	1c99      	adds	r1, r3, #2
 8016c4a:	6850      	ldr	r0, [r2, #4]
 8016c4c:	4281      	cmp	r1, r0
 8016c4e:	da12      	bge.n	8016c76 <tract_addTurbulenceNoiseAtPosition+0xfa>
		tr->R[i + 2] += noise1;
 8016c50:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8016c52:	3302      	adds	r3, #2
 8016c54:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016c58:	edd1 7a00 	vldr	s15, [r1]
 8016c5c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016c60:	edc1 7a00 	vstr	s15, [r1]
		tr->L[i + 2] += noise1;
 8016c64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8016c66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016c6a:	edd3 7a00 	vldr	s15, [r3]
 8016c6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016c72:	edc3 7a00 	vstr	s15, [r3]
	}
 }
 8016c76:	4770      	bx	lr
 8016c78:	3db851ec 	.word	0x3db851ec
 8016c7c:	00000000 	.word	0x00000000

08016c80 <tract_addTurbulenceNoise>:
{
 8016c80:	b530      	push	{r4, r5, lr}
 8016c82:	ed2d 8b02 	vpush	{d8}
 8016c86:	b083      	sub	sp, #12
	_tract* tr = *t;
 8016c88:	6803      	ldr	r3, [r0, #0]
 8016c8a:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 2; i++)
 8016c8c:	2400      	movs	r4, #0
 8016c8e:	e023      	b.n	8016cd8 <tract_addTurbulenceNoise+0x58>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8016c90:	9801      	ldr	r0, [sp, #4]
 8016c92:	ed90 8a10 	vldr	s16, [r0, #64]	; 0x40
 8016c96:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8016c9a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8016c9e:	30cc      	adds	r0, #204	; 0xcc
 8016ca0:	f7fc feb2 	bl	8013a08 <tNoise_tick>
 8016ca4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016ce4 <tract_addTurbulenceNoise+0x64>
 8016ca8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016cac:	4628      	mov	r0, r5
 8016cae:	f7f9 f906 	bl	800febe <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8016cb2:	9b01      	ldr	r3, [sp, #4]
 8016cb4:	f104 0236 	add.w	r2, r4, #54	; 0x36
 8016cb8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8016cbc:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8016cc0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016cc4:	ed92 1a00 	vldr	s2, [r2]
 8016cc8:	edd3 0a00 	vldr	s1, [r3]
 8016ccc:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016cd0:	a801      	add	r0, sp, #4
 8016cd2:	f7ff ff53 	bl	8016b7c <tract_addTurbulenceNoiseAtPosition>
	for (int i = 0; i < 2; i++)
 8016cd6:	3401      	adds	r4, #1
 8016cd8:	2c01      	cmp	r4, #1
 8016cda:	ddd9      	ble.n	8016c90 <tract_addTurbulenceNoise+0x10>
}
 8016cdc:	b003      	add	sp, #12
 8016cde:	ecbd 8b02 	vpop	{d8}
 8016ce2:	bd30      	pop	{r4, r5, pc}
 8016ce4:	3e4ccccd 	.word	0x3e4ccccd

08016ce8 <tract_compute>:


void tract_compute(tract* const t, Lfloat  in, Lfloat  lambda)
{
 8016ce8:	b500      	push	{lr}
 8016cea:	ed2d 8b04 	vpush	{d8-d9}
 8016cee:	b083      	sub	sp, #12
 8016cf0:	eef0 9a40 	vmov.f32	s19, s0
 8016cf4:	eef0 8a60 	vmov.f32	s17, s1
	_tract* tr = *t;
 8016cf8:	6800      	ldr	r0, [r0, #0]
 8016cfa:	9001      	str	r0, [sp, #4]
    //Lfloat  amp;
    //int current_size;
   // _transient_pool *thepool;
    //_transient *n;

    Lfloat oneMinusLambda = 1.0f - lambda;
 8016cfc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016d00:	ee38 9a60 	vsub.f32	s18, s16, s1
		}
		n = n->next;
	}
                  */

    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 8016d04:	30cc      	adds	r0, #204	; 0xcc
 8016d06:	f7fc fe7f 	bl	8013a08 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
 8016d0a:	9801      	ldr	r0, [sp, #4]
 8016d0c:	30c8      	adds	r0, #200	; 0xc8
 8016d0e:	f7f9 f8d6 	bl	800febe <tSVF_tick>

    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 8016d12:	9b01      	ldr	r3, [sp, #4]
 8016d14:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8016d18:	ee67 7a00 	vmul.f32	s15, s14, s0
 8016d1c:	ee38 7a47 	vsub.f32	s14, s16, s14
 8016d20:	ee27 7a29 	vmul.f32	s14, s14, s19
 8016d24:	ee37 0a87 	vadd.f32	s0, s15, s14
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8016d28:	eddf 7ac0 	vldr	s15, [pc, #768]	; 801702c <tract_compute+0x344>
 8016d2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d34:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d38:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016d3c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8017030 <tract_compute+0x348>
 8016d40:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016d44:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016d48:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016d4c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8016d50:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016d54:	ee77 7a80 	vadd.f32	s15, s15, s0
    Lfloat den = InvSqrt(1.0f + a * a);
 8016d58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8016d5c:	ee37 7a08 	vadd.f32	s14, s14, s16
    Lfloat xhalf = 0.5f*x;
 8016d60:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016d64:	ee67 6a26 	vmul.f32	s13, s14, s13
    int i = *(int*)&x; // get bits for floating value
 8016d68:	ee17 2a10 	vmov	r2, s14
    x = *(Lfloat*)&i; // convert bits back to float
 8016d6c:	4bb1      	ldr	r3, [pc, #708]	; (8017034 <tract_compute+0x34c>)
 8016d6e:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 8016d72:	ee07 3a10 	vmov	s14, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
 8016d76:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016d7a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016d7e:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8016d82:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016d86:	ee27 7a26 	vmul.f32	s14, s14, s13
    return a * den;
 8016d8a:	ee27 8a87 	vmul.f32	s16, s15, s14

	tract_addTurbulenceNoise(&tr);
 8016d8e:	a801      	add	r0, sp, #4
 8016d90:	f7ff ff76 	bl	8016c80 <tract_addTurbulenceNoise>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8016d94:	9b01      	ldr	r3, [sp, #4]
 8016d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d98:	edd2 7a00 	vldr	s15, [r2]
 8016d9c:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8016da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016da6:	ee77 7a88 	vadd.f32	s15, s15, s16
 8016daa:	edc3 7a00 	vstr	s15, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8016dae:	9b01      	ldr	r3, [sp, #4]
 8016db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016db2:	6858      	ldr	r0, [r3, #4]
 8016db4:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8016db8:	4401      	add	r1, r0
 8016dba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016dbe:	edd2 7a00 	vldr	s15, [r2]
 8016dc2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8016dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dc8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8016dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016dd0:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->n; i++) {
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e035      	b.n	8016e44 <tract_compute+0x15c>
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8016dd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8016dda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016dde:	ed91 7a00 	vldr	s14, [r1]
 8016de2:	ee27 7a09 	vmul.f32	s14, s14, s18
 8016de6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8016de8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016dec:	edd1 7a00 	vldr	s15, [r1]
 8016df0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8016df4:	ee37 7a27 	vadd.f32	s14, s14, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 8016df8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8016dfa:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8016dfe:	4418      	add	r0, r3
 8016e00:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8016e04:	edd1 6a00 	vldr	s13, [r1]
 8016e08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8016e0a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016e0e:	edd1 7a00 	vldr	s15, [r1]
 8016e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e16:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8016e1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016e1c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016e20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016e24:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 8016e28:	9901      	ldr	r1, [sp, #4]
 8016e2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8016e2c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016e30:	ed92 7a00 	vldr	s14, [r2]
 8016e34:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8016e36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016e3e:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->n; i++) {
 8016e42:	3301      	adds	r3, #1
 8016e44:	9a01      	ldr	r2, [sp, #4]
 8016e46:	6851      	ldr	r1, [r2, #4]
 8016e48:	4299      	cmp	r1, r3
 8016e4a:	dcc5      	bgt.n	8016dd8 <tract_compute+0xf0>
    }


    i = tr->nose_start;
 8016e4c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8016e4e:	edd2 7a23 	vldr	s15, [r2, #140]	; 0x8c
 8016e52:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016e56:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 8016e5a:	ee27 7a28 	vmul.f32	s14, s14, s17
 8016e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8016e62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8016e64:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8016e68:	4408      	add	r0, r1
 8016e6a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8016e6e:	ed93 7a00 	vldr	s14, [r3]
 8016e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e7e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8016e80:	ed93 6a00 	vldr	s12, [r3]
 8016e84:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016e86:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016e8a:	edd3 5a00 	vldr	s11, [r3]
 8016e8e:	ee36 6a25 	vadd.f32	s12, s12, s11
 8016e92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016e96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8016e98:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016ea0:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8016ea4:	9b01      	ldr	r3, [sp, #4]
 8016ea6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8016eaa:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016eae:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8016eb2:	ee27 7a28 	vmul.f32	s14, s14, s17
 8016eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8016eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016ebc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016ec0:	ed92 7a00 	vldr	s14, [r2]
 8016ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016ece:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8016ed2:	ed92 6a00 	vldr	s12, [r2]
 8016ed6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016ed8:	edd2 5a00 	vldr	s11, [r2]
 8016edc:	ee36 6a25 	vadd.f32	s12, s12, s11
 8016ee0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ee6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016eee:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8016ef2:	9b01      	ldr	r3, [sp, #4]
 8016ef4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8016ef8:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016efc:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8016f00:	ee27 7a28 	vmul.f32	s14, s14, s17
 8016f04:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8016f08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016f0a:	ed92 7a00 	vldr	s14, [r2]
 8016f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016f18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016f1c:	edd2 6a00 	vldr	s13, [r2]
 8016f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f22:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8016f26:	ed92 6a00 	vldr	s12, [r2]
 8016f2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8016f2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016f38:	edc3 7a00 	vstr	s15, [r3]


    for(i = 0; i < tr->n; i++) {
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	e01c      	b.n	8016f7a <tract_compute+0x292>
        tr->R[i] = (tr->junction_outR[i]*0.999f);
 8016f40:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8016f42:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016f46:	edd1 7a00 	vldr	s15, [r1]
 8016f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016f4c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016f50:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8017038 <tract_compute+0x350>
 8016f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f58:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = (tr->junction_outL[i + 1]*0.999f);
 8016f5c:	9801      	ldr	r0, [sp, #4]
 8016f5e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016f60:	1c59      	adds	r1, r3, #1
 8016f62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016f66:	edd2 7a00 	vldr	s15, [r2]
 8016f6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016f6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016f74:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < tr->n; i++) {
 8016f78:	460b      	mov	r3, r1
 8016f7a:	9a01      	ldr	r2, [sp, #4]
 8016f7c:	6851      	ldr	r1, [r2, #4]
 8016f7e:	4299      	cmp	r1, r3
 8016f80:	dcde      	bgt.n	8016f40 <tract_compute+0x258>
        //tr->R[i] = LEAF_clip(-1.5f, tr->R[i], 1.5f);



    }
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
 8016f82:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016f84:	edd3 7a00 	vldr	s15, [r3]
    if (val < min)
 8016f88:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8016f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f94:	d409      	bmi.n	8016faa <tract_compute+0x2c2>
    else if (val > max)
 8016f96:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa2:	dd04      	ble.n	8016fae <tract_compute+0x2c6>
        return max;
 8016fa4:	eef0 7a47 	vmov.f32	s15, s14
 8016fa8:	e001      	b.n	8016fae <tract_compute+0x2c6>
        return min;
 8016faa:	eeff 7a08 	vmov.f32	s15, #248	; 0xbfc00000 -1.5
 8016fae:	edc3 7a00 	vstr	s15, [r3]
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
 8016fb2:	9a01      	ldr	r2, [sp, #4]
 8016fb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8016fb6:	6851      	ldr	r1, [r2, #4]
 8016fb8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8016fbc:	440a      	add	r2, r1
 8016fbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016fc2:	edd3 7a00 	vldr	s15, [r3]
    if (val < min)
 8016fc6:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8016fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fd2:	d409      	bmi.n	8016fe8 <tract_compute+0x300>
    else if (val > max)
 8016fd4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe0:	dd04      	ble.n	8016fec <tract_compute+0x304>
        return max;
 8016fe2:	eef0 7a47 	vmov.f32	s15, s14
 8016fe6:	e001      	b.n	8016fec <tract_compute+0x304>
        return min;
 8016fe8:	eeff 7a08 	vmov.f32	s15, #248	; 0xbfc00000 -1.5
 8016fec:	edc3 7a00 	vstr	s15, [r3]
    tr->lip_output = tr->R[tr->n - 1];
 8016ff0:	9b01      	ldr	r3, [sp, #4]
 8016ff2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016ff4:	6858      	ldr	r0, [r3, #4]
 8016ff6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8016ffa:	4410      	add	r0, r2
 8016ffc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8017000:	6809      	ldr	r1, [r1, #0]
 8017002:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0


    tr->nose_junc_outL[tr->nose_length] =
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8017006:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8017008:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801700a:	4402      	add	r2, r0
 801700c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017010:	edd1 7a00 	vldr	s15, [r1]
 8017014:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    tr->nose_junc_outL[tr->nose_length] =
 8017018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801701a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 801701e:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 8017022:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->nose_length; i++) {
 8017026:	2301      	movs	r3, #1
 8017028:	e033      	b.n	8017092 <tract_compute+0x3aa>
 801702a:	bf00      	nop
 801702c:	3e28d927 	.word	0x3e28d927
 8017030:	3c217586 	.word	0x3c217586
 8017034:	5f3759df 	.word	0x5f3759df
 8017038:	3f7fbe77 	.word	0x3f7fbe77
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 801703c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 801703e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017042:	edd1 7a00 	vldr	s15, [r1]
 8017046:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8017048:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801704c:	4418      	add	r0, r3
 801704e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8017052:	ed91 7a00 	vldr	s14, [r1]
 8017056:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8017058:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801705c:	edd1 6a00 	vldr	s13, [r1]
 8017060:	ee77 6a26 	vadd.f32	s13, s14, s13
 8017064:	ee67 7aa6 	vmul.f32	s15, s15, s13
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8017068:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801706a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801706e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017072:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 8017076:	9901      	ldr	r1, [sp, #4]
 8017078:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 801707a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801707e:	ed92 7a00 	vldr	s14, [r2]
 8017082:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 8017084:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017088:	ee77 7a27 	vadd.f32	s15, s14, s15
 801708c:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8017090:	3301      	adds	r3, #1
 8017092:	9a01      	ldr	r2, [sp, #4]
 8017094:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8017096:	4299      	cmp	r1, r3
 8017098:	dcd0      	bgt.n	801703c <tract_compute+0x354>
    }


    for(i = 0; i < tr->nose_length; i++) {
 801709a:	2300      	movs	r3, #0
 801709c:	e011      	b.n	80170c2 <tract_compute+0x3da>
        tr->noseR[i] = tr->nose_junc_outR[i];
 801709e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80170a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80170a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80170a6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80170aa:	6809      	ldr	r1, [r1, #0]
 80170ac:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 80170ae:	9a01      	ldr	r2, [sp, #4]
 80170b0:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 80170b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80170b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80170b8:	3301      	adds	r3, #1
 80170ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80170be:	6809      	ldr	r1, [r1, #0]
 80170c0:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 80170c2:	9a01      	ldr	r2, [sp, #4]
 80170c4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80170c6:	4299      	cmp	r1, r3
 80170c8:	dce9      	bgt.n	801709e <tract_compute+0x3b6>
    }
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 80170ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80170cc:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80170d0:	4408      	add	r0, r1
 80170d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

}
 80170dc:	b003      	add	sp, #12
 80170de:	ecbd 8b04 	vpop	{d8-d9}
 80170e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80170e6:	bf00      	nop

080170e8 <tract_calculate_nose_reflections>:

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 80170e8:	6803      	ldr	r3, [r0, #0]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 80170ea:	2200      	movs	r2, #0
 80170ec:	e00c      	b.n	8017108 <tract_calculate_nose_reflections+0x20>
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 80170ee:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80170f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80170f4:	edd1 7a00 	vldr	s15, [r1]
 80170f8:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80170fa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80170fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017102:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
 8017106:	3201      	adds	r2, #1
 8017108:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801710a:	4291      	cmp	r1, r2
 801710c:	dcef      	bgt.n	80170ee <tract_calculate_nose_reflections+0x6>
    }

    for(i = 1; i < tr->nose_length; i++) {
 801710e:	2201      	movs	r2, #1
 8017110:	e008      	b.n	8017124 <tract_calculate_nose_reflections+0x3c>
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
    	{
    		tempDiv = 0.01f;
    	}
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
 8017112:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017116:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8017118:	4461      	add	r1, ip
 801711a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801711e:	edc1 6a00 	vstr	s13, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8017122:	3201      	adds	r2, #1
 8017124:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8017126:	4291      	cmp	r1, r2
 8017128:	dd20      	ble.n	801716c <tract_calculate_nose_reflections+0x84>
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
 801712a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801712c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8017130:	4411      	add	r1, r2
 8017132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017136:	edd1 7a00 	vldr	s15, [r1]
 801713a:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 801713e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8017142:	edd0 6a00 	vldr	s13, [r0]
 8017146:	ee37 7aa6 	vadd.f32	s14, s15, s13
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
 801714a:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8017170 <tract_calculate_nose_reflections+0x88>
 801714e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017156:	d8dc      	bhi.n	8017112 <tract_calculate_nose_reflections+0x2a>
 8017158:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8017174 <tract_calculate_nose_reflections+0x8c>
 801715c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017164:	dbd5      	blt.n	8017112 <tract_calculate_nose_reflections+0x2a>
    		tempDiv = 0.01f;
 8017166:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8017178 <tract_calculate_nose_reflections+0x90>
 801716a:	e7d2      	b.n	8017112 <tract_calculate_nose_reflections+0x2a>
    }
}
 801716c:	4770      	bx	lr
 801716e:	bf00      	nop
 8017170:	3a83126f 	.word	0x3a83126f
 8017174:	ba83126f 	.word	0xba83126f
 8017178:	3c23d70a 	.word	0x3c23d70a

0801717c <tract_initToPool>:
{
 801717c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801717e:	ed2d 8b02 	vpush	{d8}
 8017182:	b083      	sub	sp, #12
 8017184:	4604      	mov	r4, r0
 8017186:	ee08 1a10 	vmov	s16, r1
 801718a:	4616      	mov	r6, r2
	_tMempool* m = *mp;
 801718c:	6819      	ldr	r1, [r3, #0]
 801718e:	9101      	str	r1, [sp, #4]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017190:	20e8      	movs	r0, #232	; 0xe8
 8017192:	f7fb fe03 	bl	8012d9c <mpool_calloc>
 8017196:	6020      	str	r0, [r4, #0]
 8017198:	9000      	str	r0, [sp, #0]
	tr->mempool = m;
 801719a:	9b01      	ldr	r3, [sp, #4]
 801719c:	6003      	str	r3, [r0, #0]
	LEAF* leaf = m->leaf;
 801719e:	9901      	ldr	r1, [sp, #4]
 80171a0:	684c      	ldr	r4, [r1, #4]
    Lfloat n = numTractSections;
 80171a2:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->maxNumTractSections = maxNumTractSections;
 80171a6:	9d00      	ldr	r5, [sp, #0]
 80171a8:	612e      	str	r6, [r5, #16]
    tr->n = n; //44
 80171aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80171ae:	ed85 7a01 	vstr	s14, [r5, #4]
    tr->invN = 1.0f / n;
 80171b2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80171b6:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80171ba:	ed85 7a02 	vstr	s14, [r5, #8]
    tr->nose_length = n*0.636363636363636f; //28
 80171be:	ed9f 6ab1 	vldr	s12, [pc, #708]	; 8017484 <tract_initToPool+0x308>
 80171c2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80171c6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80171ca:	ed85 6a12 	vstr	s12, [r5, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80171ce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80171d2:	ee37 7ac6 	vsub.f32	s14, s15, s12
 80171d6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80171da:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80171de:	ed85 7a13 	vstr	s14, [r5, #76]	; 0x4c
    tr->reflection_left = 0.0f;
 80171e2:	2300      	movs	r3, #0
 80171e4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    tr->reflection_right = 0.0f;
 80171e8:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 80171ec:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 80171f0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 80171f4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 80171f8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    tr->velum_target = 0.01f;
 80171fc:	4aa2      	ldr	r2, [pc, #648]	; (8017488 <tract_initToPool+0x30c>)
 80171fe:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 8017202:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8017206:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
    tr->lip_reflection = -0.85f;
 801720a:	4aa0      	ldr	r2, [pc, #640]	; (801748c <tract_initToPool+0x310>)
 801720c:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    tr->last_obstruction = -1;
 8017210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017214:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
    tr->movement_speed = 200.0f;
 8017218:	4a9d      	ldr	r2, [pc, #628]	; (8017490 <tract_initToPool+0x314>)
 801721a:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
    tr->lip_output = 0.0f;
 801721e:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8017222:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
    tr->tip_start = n*0.727272727272727f;
 8017226:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8017494 <tract_initToPool+0x318>
 801722a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801722e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017232:	edc5 6a14 	vstr	s13, [r5, #80]	; 0x50
    tr->blade_start = n*0.227272727272727f;
 8017236:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8017498 <tract_initToPool+0x31c>
 801723a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801723e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017242:	ed85 7a15 	vstr	s14, [r5, #84]	; 0x54
    tr->lip_start = n*0.886363636363636f;
 8017246:	eddf 5a95 	vldr	s11, [pc, #596]	; 801749c <tract_initToPool+0x320>
 801724a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801724e:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8017252:	edc5 5a16 	vstr	s11, [r5, #88]	; 0x58
    tr->TnoiseGain = 1.0f;
 8017256:	ed85 5a10 	vstr	s10, [r5, #64]	; 0x40
    tr->AnoiseGain = 1.0f;
 801725a:	ed85 5a11 	vstr	s10, [r5, #68]	; 0x44
    tr->diameterScale = 1.0f;
 801725e:	ed85 5a2f 	vstr	s10, [r5, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017262:	eddf 5a8f 	vldr	s11, [pc, #572]	; 80174a0 <tract_initToPool+0x324>
 8017266:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801726a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801726e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8017272:	edc5 6a17 	vstr	s13, [r5, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017276:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80174a4 <tract_initToPool+0x328>
 801727a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801727e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017282:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017286:	ed85 7a18 	vstr	s14, [r5, #96]	; 0x60
	tr->turbuluencePointPosition[0] = n* 0.45f;
 801728a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80174a8 <tract_initToPool+0x32c>
 801728e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017292:	ed85 7a34 	vstr	s14, [r5, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017296:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801729a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801729e:	edc5 7a35 	vstr	s15, [r5, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 80172a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80172a6:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 80172aa:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 80172ae:	ee85 8a06 	vdiv.f32	s16, s10, s12
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172b2:	00b7      	lsls	r7, r6, #2
 80172b4:	4638      	mov	r0, r7
 80172b6:	f7fb fd71 	bl	8012d9c <mpool_calloc>
 80172ba:	6168      	str	r0, [r5, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172bc:	9d00      	ldr	r5, [sp, #0]
 80172be:	9901      	ldr	r1, [sp, #4]
 80172c0:	4638      	mov	r0, r7
 80172c2:	f7fb fd6b 	bl	8012d9c <mpool_calloc>
 80172c6:	61a8      	str	r0, [r5, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172c8:	9d00      	ldr	r5, [sp, #0]
 80172ca:	9901      	ldr	r1, [sp, #4]
 80172cc:	4638      	mov	r0, r7
 80172ce:	f7fb fd65 	bl	8012d9c <mpool_calloc>
 80172d2:	61e8      	str	r0, [r5, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172d4:	9d00      	ldr	r5, [sp, #0]
 80172d6:	9901      	ldr	r1, [sp, #4]
 80172d8:	4638      	mov	r0, r7
 80172da:	f7fb fd5f 	bl	8012d9c <mpool_calloc>
 80172de:	6228      	str	r0, [r5, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172e0:	9d00      	ldr	r5, [sp, #0]
 80172e2:	9901      	ldr	r1, [sp, #4]
 80172e4:	4638      	mov	r0, r7
 80172e6:	f7fb fd59 	bl	8012d9c <mpool_calloc>
 80172ea:	62a8      	str	r0, [r5, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80172ec:	9d00      	ldr	r5, [sp, #0]
 80172ee:	9901      	ldr	r1, [sp, #4]
 80172f0:	4638      	mov	r0, r7
 80172f2:	f7fb fd53 	bl	8012d9c <mpool_calloc>
 80172f6:	6268      	str	r0, [r5, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80172f8:	1c72      	adds	r2, r6, #1
 80172fa:	0095      	lsls	r5, r2, #2
 80172fc:	9e00      	ldr	r6, [sp, #0]
 80172fe:	9901      	ldr	r1, [sp, #4]
 8017300:	4628      	mov	r0, r5
 8017302:	f7fb fd4b 	bl	8012d9c <mpool_calloc>
 8017306:	62f0      	str	r0, [r6, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017308:	9e00      	ldr	r6, [sp, #0]
 801730a:	9901      	ldr	r1, [sp, #4]
 801730c:	4628      	mov	r0, r5
 801730e:	f7fb fd45 	bl	8012d9c <mpool_calloc>
 8017312:	6330      	str	r0, [r6, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017314:	9e00      	ldr	r6, [sp, #0]
 8017316:	9901      	ldr	r1, [sp, #4]
 8017318:	4628      	mov	r0, r5
 801731a:	f7fb fd3f 	bl	8012d9c <mpool_calloc>
 801731e:	6370      	str	r0, [r6, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017320:	9e00      	ldr	r6, [sp, #0]
 8017322:	9901      	ldr	r1, [sp, #4]
 8017324:	4628      	mov	r0, r5
 8017326:	f7fb fd39 	bl	8012d9c <mpool_calloc>
 801732a:	63b0      	str	r0, [r6, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801732c:	9e00      	ldr	r6, [sp, #0]
 801732e:	9901      	ldr	r1, [sp, #4]
 8017330:	4638      	mov	r0, r7
 8017332:	f7fb fd33 	bl	8012d9c <mpool_calloc>
 8017336:	63f0      	str	r0, [r6, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017338:	9e00      	ldr	r6, [sp, #0]
 801733a:	9901      	ldr	r1, [sp, #4]
 801733c:	4638      	mov	r0, r7
 801733e:	f7fb fd2d 	bl	8012d9c <mpool_calloc>
 8017342:	6670      	str	r0, [r6, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017344:	9e00      	ldr	r6, [sp, #0]
 8017346:	9901      	ldr	r1, [sp, #4]
 8017348:	4638      	mov	r0, r7
 801734a:	f7fb fd27 	bl	8012d9c <mpool_calloc>
 801734e:	66b0      	str	r0, [r6, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017350:	9e00      	ldr	r6, [sp, #0]
 8017352:	9901      	ldr	r1, [sp, #4]
 8017354:	4628      	mov	r0, r5
 8017356:	f7fb fd21 	bl	8012d9c <mpool_calloc>
 801735a:	66f0      	str	r0, [r6, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801735c:	9e00      	ldr	r6, [sp, #0]
 801735e:	9901      	ldr	r1, [sp, #4]
 8017360:	4628      	mov	r0, r5
 8017362:	f7fb fd1b 	bl	8012d9c <mpool_calloc>
 8017366:	6730      	str	r0, [r6, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017368:	9d00      	ldr	r5, [sp, #0]
 801736a:	9901      	ldr	r1, [sp, #4]
 801736c:	4638      	mov	r0, r7
 801736e:	f7fb fd15 	bl	8012d9c <mpool_calloc>
 8017372:	67a8      	str	r0, [r5, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017374:	9d00      	ldr	r5, [sp, #0]
 8017376:	9901      	ldr	r1, [sp, #4]
 8017378:	4638      	mov	r0, r7
 801737a:	f7fb fd0f 	bl	8012d9c <mpool_calloc>
 801737e:	6768      	str	r0, [r5, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017380:	9d00      	ldr	r5, [sp, #0]
 8017382:	9901      	ldr	r1, [sp, #4]
 8017384:	4638      	mov	r0, r7
 8017386:	f7fb fd09 	bl	8012d9c <mpool_calloc>
 801738a:	67e8      	str	r0, [r5, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
 801738c:	2300      	movs	r3, #0
 801738e:	e014      	b.n	80173ba <tract_initToPool+0x23e>
            diameter = 0.6f;
 8017390:	4a46      	ldr	r2, [pc, #280]	; (80174ac <tract_initToPool+0x330>)
            tr->new_diameter[i] = diameter;
 8017392:	6a09      	ldr	r1, [r1, #32]
 8017394:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017398:	600a      	str	r2, [r1, #0]
            tr->target_diameter[i] =
 801739a:	9900      	ldr	r1, [sp, #0]
 801739c:	69c9      	ldr	r1, [r1, #28]
 801739e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80173a2:	600a      	str	r2, [r1, #0]
            tr->rest_diameter[i] =
 80173a4:	9900      	ldr	r1, [sp, #0]
 80173a6:	6989      	ldr	r1, [r1, #24]
 80173a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80173ac:	600a      	str	r2, [r1, #0]
        tr->diameter[i] =
 80173ae:	9900      	ldr	r1, [sp, #0]
 80173b0:	6949      	ldr	r1, [r1, #20]
 80173b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80173b6:	600a      	str	r2, [r1, #0]
    for(i = 0; i < tr->n; i++) {
 80173b8:	3301      	adds	r3, #1
 80173ba:	9900      	ldr	r1, [sp, #0]
 80173bc:	684a      	ldr	r2, [r1, #4]
 80173be:	429a      	cmp	r2, r3
 80173c0:	dd26      	ble.n	8017410 <tract_initToPool+0x294>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 80173c2:	edd1 6a02 	vldr	s13, [r1, #8]
 80173c6:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80173ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80173ce:	ee07 2a10 	vmov	s14, r2
 80173d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80173da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80173de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80173e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80173e6:	ee17 2a90 	vmov	r2, s15
 80173ea:	429a      	cmp	r2, r3
 80173ec:	dcd0      	bgt.n	8017390 <tract_initToPool+0x214>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 80173ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80173f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80173f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80173fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80173fe:	ee17 2a10 	vmov	r2, s14
 8017402:	429a      	cmp	r2, r3
 8017404:	dd01      	ble.n	801740a <tract_initToPool+0x28e>
            diameter = 1.1f;
 8017406:	4a2a      	ldr	r2, [pc, #168]	; (80174b0 <tract_initToPool+0x334>)
 8017408:	e7c3      	b.n	8017392 <tract_initToPool+0x216>
            diameter = 1.5f;
 801740a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 801740e:	e7c0      	b.n	8017392 <tract_initToPool+0x216>
	for(i = 0; i < tr->nose_length; i++) {
 8017410:	2300      	movs	r3, #0
 8017412:	e00e      	b.n	8017432 <tract_initToPool+0x2b6>
			diameter = 0.4f + 1.6f * d;
 8017414:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80174b4 <tract_initToPool+0x338>
 8017418:	ee67 7a87 	vmul.f32	s15, s15, s14
 801741c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80174b8 <tract_initToPool+0x33c>
 8017420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017424:	e024      	b.n	8017470 <tract_initToPool+0x2f4>
		tr->nose_diameter[i] = diameter;
 8017426:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8017428:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801742c:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8017430:	3301      	adds	r3, #1
 8017432:	9800      	ldr	r0, [sp, #0]
 8017434:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8017436:	429a      	cmp	r2, r3
 8017438:	dd4c      	ble.n	80174d4 <tract_initToPool+0x358>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801743a:	ee07 3a90 	vmov	s15, r3
 801743e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017442:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017446:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 801744a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801744e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017456:	d4dd      	bmi.n	8017414 <tract_initToPool+0x298>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017458:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801745c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017460:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8017464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017468:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801746c:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 8017470:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80174bc <tract_initToPool+0x340>
 8017474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801747c:	d4d3      	bmi.n	8017426 <tract_initToPool+0x2aa>
 801747e:	eef0 7a47 	vmov.f32	s15, s14
 8017482:	e7d0      	b.n	8017426 <tract_initToPool+0x2aa>
 8017484:	3f22e8ba 	.word	0x3f22e8ba
 8017488:	3c23d70a 	.word	0x3c23d70a
 801748c:	bf59999a 	.word	0xbf59999a
 8017490:	43480000 	.word	0x43480000
 8017494:	3f3a2e8c 	.word	0x3f3a2e8c
 8017498:	3e68ba2f 	.word	0x3e68ba2f
 801749c:	3f62e8ba 	.word	0x3f62e8ba
 80174a0:	3d8ba2e9 	.word	0x3d8ba2e9
 80174a4:	3d3a2e8c 	.word	0x3d3a2e8c
 80174a8:	3ee66666 	.word	0x3ee66666
 80174ac:	3f19999a 	.word	0x3f19999a
 80174b0:	3f8ccccd 	.word	0x3f8ccccd
 80174b4:	3fcccccd 	.word	0x3fcccccd
 80174b8:	3ecccccd 	.word	0x3ecccccd
 80174bc:	3ff33333 	.word	0x3ff33333
 80174c0:	3f333333 	.word	0x3f333333
 80174c4:	447c8000 	.word	0x447c8000
 80174c8:	44778000 	.word	0x44778000
 80174cc:	43fa0000 	.word	0x43fa0000
 80174d0:	42800000 	.word	0x42800000
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 80174d4:	ed1f 8a06 	vldr	s16, [pc, #-24]	; 80174c0 <tract_initToPool+0x344>
 80174d8:	aa01      	add	r2, sp, #4
 80174da:	eef0 0a48 	vmov.f32	s1, s16
 80174de:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 80174c4 <tract_initToPool+0x348>
 80174e2:	2102      	movs	r1, #2
 80174e4:	30c0      	adds	r0, #192	; 0xc0
 80174e6:	f7f8 fc4d 	bl	800fd84 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
 80174ea:	aa01      	add	r2, sp, #4
 80174ec:	eef0 0a48 	vmov.f32	s1, s16
 80174f0:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 80174c8 <tract_initToPool+0x34c>
 80174f4:	2102      	movs	r1, #2
 80174f6:	9800      	ldr	r0, [sp, #0]
 80174f8:	30c4      	adds	r0, #196	; 0xc4
 80174fa:	f7f8 fc43 	bl	800fd84 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
 80174fe:	aa01      	add	r2, sp, #4
 8017500:	eef0 0a48 	vmov.f32	s1, s16
 8017504:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 80174cc <tract_initToPool+0x350>
 8017508:	2102      	movs	r1, #2
 801750a:	9800      	ldr	r0, [sp, #0]
 801750c:	30c8      	adds	r0, #200	; 0xc8
 801750e:	f7f8 fc39 	bl	800fd84 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8017512:	aa01      	add	r2, sp, #4
 8017514:	2100      	movs	r1, #0
 8017516:	9800      	ldr	r0, [sp, #0]
 8017518:	30cc      	adds	r0, #204	; 0xcc
 801751a:	f7fc fa5b 	bl	80139d4 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 801751e:	4668      	mov	r0, sp
 8017520:	f7ff f900 	bl	8016724 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
 8017524:	4668      	mov	r0, sp
 8017526:	f7ff fddf 	bl	80170e8 <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
 801752a:	9b00      	ldr	r3, [sp, #0]
 801752c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801752e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017532:	6013      	str	r3, [r2, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8017534:	ed94 7a00 	vldr	s14, [r4]
 8017538:	9d00      	ldr	r5, [sp, #0]
 801753a:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 80174d0 <tract_initToPool+0x354>
 801753e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017542:	edc5 7a2e 	vstr	s15, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
 8017546:	ed94 7a00 	vldr	s14, [r4]
 801754a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801754e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017552:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017556:	9901      	ldr	r1, [sp, #4]
 8017558:	201c      	movs	r0, #28
 801755a:	f7fb fba7 	bl	8012cac <mpool_alloc>
 801755e:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    tr->tpool->size = 0;
 8017562:	9b00      	ldr	r3, [sp, #0]
 8017564:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8017568:	2400      	movs	r4, #0
 801756a:	6154      	str	r4, [r2, #20]
    tr->tpool->next_free = 0;
 801756c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8017570:	619c      	str	r4, [r3, #24]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017572:	2c03      	cmp	r4, #3
 8017574:	dc2d      	bgt.n	80175d2 <tract_initToPool+0x456>
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8017576:	9b00      	ldr	r3, [sp, #0]
 8017578:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 801757c:	9901      	ldr	r1, [sp, #4]
 801757e:	2020      	movs	r0, #32
 8017580:	f7fb fb94 	bl	8012cac <mpool_alloc>
 8017584:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8017588:	9b00      	ldr	r3, [sp, #0]
 801758a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801758e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8017592:	2101      	movs	r1, #1
 8017594:	7511      	strb	r1, [r2, #20]
        tr->tpool->pool[i]->id = i;
 8017596:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801759a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801759e:	6194      	str	r4, [r2, #24]
        tr->tpool->pool[i]->position = 0;
 80175a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80175a4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80175a8:	2200      	movs	r2, #0
 80175aa:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 80175ac:	9a00      	ldr	r2, [sp, #0]
 80175ae:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 80175b2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80175b6:	2300      	movs	r3, #0
 80175b8:	604b      	str	r3, [r1, #4]
        tr->tpool->pool[i]->strength = 0;
 80175ba:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
 80175be:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80175c2:	60cb      	str	r3, [r1, #12]
        tr->tpool->pool[i]->exponent = 0;
 80175c4:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 80175c8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80175cc:	6113      	str	r3, [r2, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 80175ce:	3401      	adds	r4, #1
 80175d0:	e7cf      	b.n	8017572 <tract_initToPool+0x3f6>
}
 80175d2:	b003      	add	sp, #12
 80175d4:	ecbd 8b02 	vpop	{d8}
 80175d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175da:	bf00      	nop

080175dc <move_towards>:

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 80175dc:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80175e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e4:	d50b      	bpl.n	80175fe <move_towards+0x22>
        tmp = current + amt_up;
 80175e6:	ee30 0a01 	vadd.f32	s0, s0, s2
        return MIN(tmp, target);
 80175ea:	eef4 0ac0 	vcmpe.f32	s1, s0
 80175ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f2:	dd01      	ble.n	80175f8 <move_towards+0x1c>
 80175f4:	eef0 0a40 	vmov.f32	s1, s0
 80175f8:	eeb0 0a60 	vmov.f32	s0, s1
 80175fc:	4770      	bx	lr
    } else {
        tmp = current - amt_down;
 80175fe:	ee30 0a61 	vsub.f32	s0, s0, s3
        return MAX(tmp, target);
 8017602:	eef4 0ac0 	vcmpe.f32	s1, s0
 8017606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760a:	d501      	bpl.n	8017610 <move_towards+0x34>
 801760c:	eef0 0a40 	vmov.f32	s1, s0
 8017610:	eeb0 0a60 	vmov.f32	s0, s1
    }
    return 0.0f;
}
 8017614:	4770      	bx	lr
	...

08017618 <tract_reshape>:
{
 8017618:	b570      	push	{r4, r5, r6, lr}
 801761a:	ed2d 8b02 	vpush	{d8}
	_tract* tr = *t;
 801761e:	6805      	ldr	r5, [r0, #0]
    amount = tr->block_time * tr->movement_speed;
 8017620:	ed95 8a2e 	vldr	s16, [r5, #184]	; 0xb8
 8017624:	edd5 7a2b 	vldr	s15, [r5, #172]	; 0xac
 8017628:	ee28 8a27 	vmul.f32	s16, s16, s15
    for(i = 0; i < tr->n; i++) {
 801762c:	2400      	movs	r4, #0
 801762e:	e00c      	b.n	801764a <tract_reshape+0x32>
        if(i < tr->nose_start) slow_return = 0.6f;
 8017630:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80176d8 <tract_reshape+0xc0>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017634:	eddf 1a29 	vldr	s3, [pc, #164]	; 80176dc <tract_reshape+0xc4>
 8017638:	ee68 1a21 	vmul.f32	s3, s16, s3
 801763c:	ee21 1a08 	vmul.f32	s2, s2, s16
 8017640:	f7ff ffcc 	bl	80175dc <move_towards>
 8017644:	ed86 0a00 	vstr	s0, [r6]
    for(i = 0; i < tr->n; i++) {
 8017648:	3401      	adds	r4, #1
 801764a:	686b      	ldr	r3, [r5, #4]
 801764c:	42a3      	cmp	r3, r4
 801764e:	dd27      	ble.n	80176a0 <tract_reshape+0x88>
        diameter = tr->diameter[i];
 8017650:	696e      	ldr	r6, [r5, #20]
 8017652:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8017656:	ed96 0a00 	vldr	s0, [r6]
        target_diameter = tr->target_diameter[i];
 801765a:	69eb      	ldr	r3, [r5, #28]
 801765c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017660:	edd3 0a00 	vldr	s1, [r3]
        if(i < tr->nose_start) slow_return = 0.6f;
 8017664:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017666:	42a3      	cmp	r3, r4
 8017668:	dce2      	bgt.n	8017630 <tract_reshape+0x18>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801766a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801766c:	42a2      	cmp	r2, r4
 801766e:	dd14      	ble.n	801769a <tract_reshape+0x82>
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
 8017670:	1ad2      	subs	r2, r2, r3
 8017672:	ee07 2a90 	vmov	s15, r2
 8017676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
 801767a:	1ae3      	subs	r3, r4, r3
 801767c:	ee07 3a90 	vmov	s15, r3
 8017680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017684:	eddf 6a16 	vldr	s13, [pc, #88]	; 80176e0 <tract_reshape+0xc8>
 8017688:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801768c:	ee87 1a87 	vdiv.f32	s2, s15, s14
            slow_return =
 8017690:	eddf 7a11 	vldr	s15, [pc, #68]	; 80176d8 <tract_reshape+0xc0>
 8017694:	ee31 1a27 	vadd.f32	s2, s2, s15
 8017698:	e7cc      	b.n	8017634 <tract_reshape+0x1c>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801769a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801769e:	e7c9      	b.n	8017634 <tract_reshape+0x1c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80176a0:	6fac      	ldr	r4, [r5, #120]	; 0x78
 80176a2:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80176dc <tract_reshape+0xc4>
 80176a6:	ee68 1a21 	vmul.f32	s3, s16, s3
 80176aa:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 80176ae:	ee28 1a01 	vmul.f32	s2, s16, s2
 80176b2:	edd5 0a26 	vldr	s1, [r5, #152]	; 0x98
 80176b6:	ed94 0a00 	vldr	s0, [r4]
 80176ba:	f7ff ff8f 	bl	80175dc <move_towards>
 80176be:	ed84 0a00 	vstr	s0, [r4]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 80176c2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80176c4:	edd3 7a00 	vldr	s15, [r3]
 80176c8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80176ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80176ce:	edc3 7a00 	vstr	s15, [r3]
}
 80176d2:	ecbd 8b02 	vpop	{d8}
 80176d6:	bd70      	pop	{r4, r5, r6, pc}
 80176d8:	3f19999a 	.word	0x3f19999a
 80176dc:	3dcccccd 	.word	0x3dcccccd
 80176e0:	3ecccccd 	.word	0x3ecccccd

080176e4 <tVoc_initToPool>:
{
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
 80176e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176e6:	b083      	sub	sp, #12
 80176e8:	4607      	mov	r7, r0
 80176ea:	460d      	mov	r5, r1
 80176ec:	4616      	mov	r6, r2
	_tMempool* m = *mp;
 80176ee:	6819      	ldr	r1, [r3, #0]
 80176f0:	9101      	str	r1, [sp, #4]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 80176f2:	2018      	movs	r0, #24
 80176f4:	f7fb fada 	bl	8012cac <mpool_alloc>
 80176f8:	4604      	mov	r4, r0
 80176fa:	6038      	str	r0, [r7, #0]
	v->mempool = m;
 80176fc:	9b01      	ldr	r3, [sp, #4]
 80176fe:	f840 3b04 	str.w	r3, [r0], #4
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
 8017702:	a901      	add	r1, sp, #4
 8017704:	f7fe ff1c 	bl	8016540 <glottis_initToPool>
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 8017708:	ab01      	add	r3, sp, #4
 801770a:	4632      	mov	r2, r6
 801770c:	4629      	mov	r1, r5
 801770e:	f104 0008 	add.w	r0, r4, #8
 8017712:	f7ff fd33 	bl	801717c <tract_initToPool>
	v->counter = 0;
 8017716:	2300      	movs	r3, #0
 8017718:	6123      	str	r3, [r4, #16]
}
 801771a:	b003      	add	sp, #12
 801771c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801771e <tVoc_init>:
{
 801771e:	b508      	push	{r3, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
 8017720:	3318      	adds	r3, #24
 8017722:	f7ff ffdf 	bl	80176e4 <tVoc_initToPool>
}
 8017726:	bd08      	pop	{r3, pc}

08017728 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 801772e:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	b393      	cbz	r3, 801779a <tVoc_tick+0x72>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8017734:	edd4 7a04 	vldr	s15, [r4, #16]
 8017738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801773c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80177d8 <tVoc_tick+0xb0>
 8017740:	ee27 8a87 	vmul.f32	s16, s15, s14
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8017744:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801774c:	ee67 8a87 	vmul.f32	s17, s15, s14
	glot = glottis_compute(&v->glot);
 8017750:	1d20      	adds	r0, r4, #4
 8017752:	f7fe ff1d 	bl	8016590 <glottis_compute>
 8017756:	eeb0 9a40 	vmov.f32	s18, s0

	tract_compute(&v->tr, glot, lambda1);
 801775a:	f104 0508 	add.w	r5, r4, #8
 801775e:	eef0 0a48 	vmov.f32	s1, s16
 8017762:	4628      	mov	r0, r5
 8017764:	f7ff fac0 	bl	8016ce8 <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8017768:	68a3      	ldr	r3, [r4, #8]
 801776a:	ed93 8a2c 	vldr	s16, [r3, #176]	; 0xb0
 801776e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8017772:	ee38 8a27 	vadd.f32	s16, s16, s15
 8017776:	eddf 7a19 	vldr	s15, [pc, #100]	; 80177dc <tVoc_tick+0xb4>
 801777a:	ee38 8a27 	vadd.f32	s16, s16, s15

	if (v->doubleCompute)
 801777e:	68e3      	ldr	r3, [r4, #12]
 8017780:	b9a3      	cbnz	r3, 80177ac <tVoc_tick+0x84>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
 8017782:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8017786:	ee28 0a27 	vmul.f32	s0, s16, s15
	}

	v->counter = (v->counter + 1) & 63;
 801778a:	6923      	ldr	r3, [r4, #16]
 801778c:	3301      	adds	r3, #1
 801778e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017792:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8017794:	ecbd 8b04 	vpop	{d8-d9}
 8017798:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 801779a:	f104 0508 	add.w	r5, r4, #8
 801779e:	4628      	mov	r0, r5
 80177a0:	f7ff ff3a 	bl	8017618 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 80177a4:	4628      	mov	r0, r5
 80177a6:	f7fe ffbd 	bl	8016724 <tract_calculate_reflections>
 80177aa:	e7c3      	b.n	8017734 <tVoc_tick+0xc>
		tract_compute(&v->tr, glot, lambda2);
 80177ac:	eef0 0a68 	vmov.f32	s1, s17
 80177b0:	eeb0 0a49 	vmov.f32	s0, s18
 80177b4:	4628      	mov	r0, r5
 80177b6:	f7ff fa97 	bl	8016ce8 <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 80177ba:	68a3      	ldr	r3, [r4, #8]
 80177bc:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80177c0:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80177c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80177c8:	ee77 7a88 	vadd.f32	s15, s15, s16
		vocal_output *= 0.125f;
 80177cc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80177d0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80177d4:	e7d9      	b.n	801778a <tVoc_tick+0x62>
 80177d6:	bf00      	nop
 80177d8:	3c800000 	.word	0x3c800000
 80177dc:	00000000 	.word	0x00000000

080177e0 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 80177e0:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 80177e2:	60d9      	str	r1, [r3, #12]
}
 80177e4:	4770      	bx	lr

080177e6 <tVoc_setFreq>:
	v->sampleRate = sr;
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
 80177e6:	6803      	ldr	r3, [r0, #0]
	v->glot->freq = freq;
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80177ee:	4770      	bx	lr

080177f0 <tVoc_get_tract_diameters>:
	return &v->glot->freq;
}

Lfloat* tVoc_get_tract_diameters(tVoc* const voc)
{
	_tVoc* v = *voc;
 80177f0:	6803      	ldr	r3, [r0, #0]
	return v->tr->target_diameter;
 80177f2:	689b      	ldr	r3, [r3, #8]
}
 80177f4:	69d8      	ldr	r0, [r3, #28]
 80177f6:	4770      	bx	lr

080177f8 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
	v->tr->turbuluencePointPosition[1] = touch_index;
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
 80177f8:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 80177fa:	6800      	ldr	r0, [r0, #0]
	tract_newLength(&v->tr, newLength);
 80177fc:	3008      	adds	r0, #8
 80177fe:	f7ff f841 	bl	8016884 <tract_newLength>
}
 8017802:	bd08      	pop	{r3, pc}

08017804 <tVoc_set_tenseness>:

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
 8017804:	6803      	ldr	r3, [r0, #0]
	v->glot->tenseness = tenseness;
 8017806:	685b      	ldr	r3, [r3, #4]
 8017808:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801780c:	4770      	bx	lr

0801780e <tVoc_set_velum>:
	_tVoc* v = *voc;
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
 801780e:	6803      	ldr	r3, [r0, #0]
	v->tr->velum_target = velum;
 8017810:	689b      	ldr	r3, [r3, #8]
 8017812:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 8017816:	4770      	bx	lr

08017818 <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
 8017818:	6803      	ldr	r3, [r0, #0]
	v->tr->TnoiseGain = gain;
 801781a:	689b      	ldr	r3, [r3, #8]
 801781c:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 8017820:	4770      	bx	lr

08017822 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
 8017822:	6803      	ldr	r3, [r0, #0]
	v->tr->AnoiseGain = gain;
 8017824:	689b      	ldr	r3, [r3, #8]
 8017826:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801782a:	4770      	bx	lr

0801782c <tVoc_setAspirationNoiseFilterFreq>:
	return &v->tr->velum_target;
}

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
 801782c:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 801782e:	6803      	ldr	r3, [r0, #0]
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
 8017830:	6898      	ldr	r0, [r3, #8]
 8017832:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8017836:	ee20 0a27 	vmul.f32	s0, s0, s15
 801783a:	eddf 7a04 	vldr	s15, [pc, #16]	; 801784c <tVoc_setAspirationNoiseFilterFreq+0x20>
 801783e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017842:	30c8      	adds	r0, #200	; 0xc8
 8017844:	f7f8 fc32 	bl	80100ac <tSVF_setFreqFast>
}
 8017848:	bd08      	pop	{r3, pc}
 801784a:	bf00      	nop
 801784c:	42700000 	.word	0x42700000

08017850 <tVoc_setAspirationNoiseFilterQ>:

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
 8017850:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 8017852:	6803      	ldr	r3, [r0, #0]
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
 8017854:	6898      	ldr	r0, [r3, #8]
 8017856:	eddf 7a06 	vldr	s15, [pc, #24]	; 8017870 <tVoc_setAspirationNoiseFilterQ+0x20>
 801785a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801785e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017862:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017866:	30c8      	adds	r0, #200	; 0xc8
 8017868:	f7f8 fc6c 	bl	8010144 <tSVF_setQ>
}
 801786c:	bd08      	pop	{r3, pc}
 801786e:	bf00      	nop
 8017870:	3efae148 	.word	0x3efae148
 8017874:	00000000 	.word	0x00000000

08017878 <tVoc_set_tongue_and_touch_diameters>:


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8017878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801787c:	ed2d 8b06 	vpush	{d8-d10}
 8017880:	eef0 8a40 	vmov.f32	s17, s0
 8017884:	eeb0 9a60 	vmov.f32	s18, s1
 8017888:	eeb0 aa41 	vmov.f32	s20, s2
 801788c:	eef0 aa61 	vmov.f32	s21, s3
 8017890:	460e      	mov	r6, r1
	int i;

	_tVoc* v = *voc;
 8017892:	6805      	ldr	r5, [r0, #0]

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017894:	68aa      	ldr	r2, [r5, #8]
 8017896:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8017898:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801789a:	1a9b      	subs	r3, r3, r2
 801789c:	ee07 3a90 	vmov	s15, r3
 80178a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80178a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80178a8:	eec7 9a27 	vdiv.f32	s19, s14, s15

	for (i = 0; i < v->tr->n; i++)
 80178ac:	2300      	movs	r3, #0
 80178ae:	e007      	b.n	80178c0 <tVoc_set_tongue_and_touch_diameters+0x48>
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 80178b0:	6992      	ldr	r2, [r2, #24]
 80178b2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 80178b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80178ba:	6812      	ldr	r2, [r2, #0]
 80178bc:	600a      	str	r2, [r1, #0]
	for (i = 0; i < v->tr->n; i++)
 80178be:	3301      	adds	r3, #1
 80178c0:	68aa      	ldr	r2, [r5, #8]
 80178c2:	6851      	ldr	r1, [r2, #4]
 80178c4:	4299      	cmp	r1, r3
 80178c6:	dcf3      	bgt.n	80178b0 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80178c8:	6d54      	ldr	r4, [r2, #84]	; 0x54
 80178ca:	e00c      	b.n	80178e6 <tVoc_set_tongue_and_touch_diameters+0x6e>
		{
			curve *= 0.8f;
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
 80178cc:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8017ae8 <tVoc_set_tongue_and_touch_diameters+0x270>
 80178d0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
		theDiameters[i] = 1.5f - curve;
 80178d4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80178d8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80178dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80178e0:	edc3 7a00 	vstr	s15, [r3]
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80178e4:	3401      	adds	r4, #1
 80178e6:	68ab      	ldr	r3, [r5, #8]
 80178e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80178ea:	42a2      	cmp	r2, r4
 80178ec:	dd3b      	ble.n	8017966 <tVoc_set_tongue_and_touch_diameters+0xee>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 80178ee:	ee07 4a90 	vmov	s15, r4
 80178f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80178f6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80178fa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80178fe:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017ad8 <tVoc_set_tongue_and_touch_diameters+0x260>
 8017902:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017906:	eeb7 0ae9 	vcvt.f64.f32	d0, s19
 801790a:	ee20 0b07 	vmul.f64	d0, d0, d7
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 801790e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017912:	ee39 7a67 	vsub.f32	s14, s18, s15
 8017916:	eddf 6a75 	vldr	s13, [pc, #468]	; 8017aec <tVoc_set_tongue_and_touch_diameters+0x274>
 801791a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801791e:	ee37 7a27 	vadd.f32	s14, s14, s15
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8017922:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801792a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017af0 <tVoc_set_tongue_and_touch_diameters+0x278>
 801792e:	ee37 8a87 	vadd.f32	s16, s15, s14
 8017932:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017936:	f7e8 fe0d 	bl	8000554 <arm_cos_f32>
 801793a:	ee68 7a00 	vmul.f32	s15, s16, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 801793e:	68ab      	ldr	r3, [r5, #8]
 8017940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017942:	1e91      	subs	r1, r2, #2
 8017944:	42a1      	cmp	r1, r4
 8017946:	d003      	beq.n	8017950 <tVoc_set_tongue_and_touch_diameters+0xd8>
 8017948:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801794a:	3901      	subs	r1, #1
 801794c:	42a1      	cmp	r1, r4
 801794e:	d103      	bne.n	8017958 <tVoc_set_tongue_and_touch_diameters+0xe0>
			curve *= 0.8f;
 8017950:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8017af4 <tVoc_set_tongue_and_touch_diameters+0x27c>
 8017954:	ee67 7a87 	vmul.f32	s15, s15, s14
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8017958:	42a2      	cmp	r2, r4
 801795a:	d0b7      	beq.n	80178cc <tVoc_set_tongue_and_touch_diameters+0x54>
 801795c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801795e:	3b02      	subs	r3, #2
 8017960:	42a3      	cmp	r3, r4
 8017962:	d1b7      	bne.n	80178d4 <tVoc_set_tongue_and_touch_diameters+0x5c>
 8017964:	e7b2      	b.n	80178cc <tVoc_set_tongue_and_touch_diameters+0x54>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8017966:	edd3 7a01 	vldr	s15, [r3, #4]
 801796a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801796e:	ed9f 8a62 	vldr	s16, [pc, #392]	; 8017af8 <tVoc_set_tongue_and_touch_diameters+0x280>
 8017972:	ee27 8a88 	vmul.f32	s16, s15, s16
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8017976:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8017afc <tVoc_set_tongue_and_touch_diameters+0x284>
 801797a:	ee67 6a87 	vmul.f32	s13, s15, s14
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 801797e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8017b00 <tVoc_set_tongue_and_touch_diameters+0x288>
 8017982:	ee27 7a87 	vmul.f32	s14, s15, s14
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 8017986:	eeb4 7aca 	vcmpe.f32	s14, s20
 801798a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801798e:	dc12      	bgt.n	80179b6 <tVoc_set_tongue_and_touch_diameters+0x13e>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8017990:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8017994:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017998:	eeb4 6aca 	vcmpe.f32	s12, s20
 801799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a0:	d93a      	bls.n	8017a18 <tVoc_set_tongue_and_touch_diameters+0x1a0>
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 80179a2:	ee7a 5a47 	vsub.f32	s11, s20, s14
 80179a6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80179aa:	ee36 6a47 	vsub.f32	s12, s12, s14
 80179ae:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80179b2:	ee38 8a47 	vsub.f32	s16, s16, s14
		if ((width <= 0.01f) && (width >= -0.01f))
 80179b6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8017b04 <tVoc_set_tongue_and_touch_diameters+0x28c>
 80179ba:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80179be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c2:	d808      	bhi.n	80179d6 <tVoc_set_tongue_and_touch_diameters+0x15e>
 80179c4:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8017b08 <tVoc_set_tongue_and_touch_diameters+0x290>
 80179c8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80179cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179d0:	db01      	blt.n	80179d6 <tVoc_set_tongue_and_touch_diameters+0x15e>
		{
			width = 1.0f;
 80179d2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		}
		Lfloat invWidth = 1.0f / width;
 80179d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80179da:	eec7 8a08 	vdiv.f32	s17, s14, s16
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 80179de:	eef4 7aca 	vcmpe.f32	s15, s20
 80179e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e6:	dd72      	ble.n	8017ace <tVoc_set_tongue_and_touch_diameters+0x256>
 80179e8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80179ec:	eef4 aae7 	vcmpe.f32	s21, s15
 80179f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f4:	d56b      	bpl.n	8017ace <tVoc_set_tongue_and_touch_diameters+0x256>
	{
		int intIndex = roundf(touch_index);
 80179f6:	fef8 7a4a 	vrinta.f32	s15, s20
 80179fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179fe:	ee17 8a90 	vmov	r8, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017a02:	fefa 7a48 	vrintp.f32	s15, s16
 8017a06:	eef1 7a67 	vneg.f32	s15, s15
 8017a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a12:	ee17 4a90 	vmov	r4, s15
 8017a16:	e02d      	b.n	8017a74 <tVoc_set_tongue_and_touch_diameters+0x1fc>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8017a18:	eeb0 8a66 	vmov.f32	s16, s13
 8017a1c:	e7cb      	b.n	80179b6 <tVoc_set_tongue_and_touch_diameters+0x13e>
			relpos = fabsf(relpos)-0.5f;
			Lfloat shrink;
			if (relpos <= 0.0f) shrink = 0.0f;
			else if (relpos > width) shrink = 1.0f;
#ifdef ARM_MATH_CM7
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 8017a1e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8017a22:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8017ae0 <tVoc_set_tongue_and_touch_diameters+0x268>
 8017a26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017a2a:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8017a2e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017a32:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017a36:	f7e8 fd8d 	bl	8000554 <arm_cos_f32>
 8017a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017a3e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8017a42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017a4a:	e001      	b.n	8017a50 <tVoc_set_tongue_and_touch_diameters+0x1d8>
			if (relpos <= 0.0f) shrink = 0.0f;
 8017a4c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8017b0c <tVoc_set_tongue_and_touch_diameters+0x294>
#else
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
#endif
			if (touch_diameter < theDiameters[intIndex+i])
 8017a50:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 8017a54:	edd7 7a00 	vldr	s15, [r7]
 8017a58:	eef4 7aea 	vcmpe.f32	s15, s21
 8017a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a60:	dd07      	ble.n	8017a72 <tVoc_set_tongue_and_touch_diameters+0x1fa>
			{
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8017a62:	ee77 7aea 	vsub.f32	s15, s15, s21
 8017a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a6a:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8017a6e:	edc7 7a00 	vstr	s15, [r7]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017a72:	3401      	adds	r4, #1
 8017a74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017a78:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a7c:	ee07 4a10 	vmov	s14, r4
 8017a80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a8c:	d51f      	bpl.n	8017ace <tVoc_set_tongue_and_touch_diameters+0x256>
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8017a8e:	eb14 0708 	adds.w	r7, r4, r8
 8017a92:	d4ee      	bmi.n	8017a72 <tVoc_set_tongue_and_touch_diameters+0x1fa>
 8017a94:	68ab      	ldr	r3, [r5, #8]
 8017a96:	685b      	ldr	r3, [r3, #4]
 8017a98:	429f      	cmp	r7, r3
 8017a9a:	daea      	bge.n	8017a72 <tVoc_set_tongue_and_touch_diameters+0x1fa>
			Lfloat relpos = (intIndex+i) - touch_index;
 8017a9c:	ee07 7a90 	vmov	s15, r7
 8017aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017aa4:	ee37 7a4a 	vsub.f32	s14, s14, s20
			relpos = fabsf(relpos)-0.5f;
 8017aa8:	eeb0 7ac7 	vabs.f32	s14, s14
 8017aac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 8017ab4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8017ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017abc:	d9c6      	bls.n	8017a4c <tVoc_set_tongue_and_touch_diameters+0x1d4>
			else if (relpos > width) shrink = 1.0f;
 8017abe:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8017ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ac6:	d5aa      	bpl.n	8017a1e <tVoc_set_tongue_and_touch_diameters+0x1a6>
 8017ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017acc:	e7c0      	b.n	8017a50 <tVoc_set_tongue_and_touch_diameters+0x1d8>
			}
		}
	}

}
 8017ace:	ecbd 8b06 	vpop	{d8-d10}
 8017ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ad6:	bf00      	nop
 8017ad8:	4d2562ef 	.word	0x4d2562ef
 8017adc:	400ba561 	.word	0x400ba561
 8017ae0:	54442d18 	.word	0x54442d18
 8017ae4:	400921fb 	.word	0x400921fb
 8017ae8:	3f70a3d7 	.word	0x3f70a3d7
 8017aec:	3f2aaaab 	.word	0x3f2aaaab
 8017af0:	3fd9999a 	.word	0x3fd9999a
 8017af4:	3f4ccccd 	.word	0x3f4ccccd
 8017af8:	3e68ba2f 	.word	0x3e68ba2f
 8017afc:	3de8ba2f 	.word	0x3de8ba2f
 8017b00:	3f11745d 	.word	0x3f11745d
 8017b04:	3c23d70a 	.word	0x3c23d70a
 8017b08:	bc23d70a 	.word	0xbc23d70a
 8017b0c:	00000000 	.word	0x00000000

08017b10 <tVoc_set_tongue_shape_and_touch>:
{
 8017b10:	b510      	push	{r4, lr}
 8017b12:	ed2d 8b06 	vpush	{d8-d10}
 8017b16:	b082      	sub	sp, #8
 8017b18:	eeb0 9a40 	vmov.f32	s18, s0
 8017b1c:	eef0 8a60 	vmov.f32	s17, s1
 8017b20:	eeb0 aa41 	vmov.f32	s20, s2
 8017b24:	eeb0 8a61 	vmov.f32	s16, s3
	_tVoc* v = *voc;
 8017b28:	6804      	ldr	r4, [r0, #0]
 8017b2a:	9401      	str	r4, [sp, #4]
	diameters = tVoc_get_tract_diameters(&v);
 8017b2c:	a801      	add	r0, sp, #4
 8017b2e:	f7ff fe5f 	bl	80177f0 <tVoc_get_tract_diameters>
 8017b32:	4601      	mov	r1, r0
	tongue_diameter *= 1.45f;
 8017b34:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017bc8 <tVoc_set_tongue_shape_and_touch+0xb8>
 8017b38:	ee68 8aa7 	vmul.f32	s17, s17, s15
	tongue_diameter += 2.05f;
 8017b3c:	eddf 7a23 	vldr	s15, [pc, #140]	; 8017bcc <tVoc_set_tongue_shape_and_touch+0xbc>
 8017b40:	ee78 8aa7 	vadd.f32	s17, s17, s15
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8017b44:	68a3      	ldr	r3, [r4, #8]
 8017b46:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8017b4a:	edd3 9a18 	vldr	s19, [r3, #96]	; 0x60
 8017b4e:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8017b52:	ee27 0a89 	vmul.f32	s0, s15, s18
 8017b56:	ee79 9a80 	vadd.f32	s19, s19, s0
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 8017b5a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b62:	d42d      	bmi.n	8017bc0 <tVoc_set_tongue_shape_and_touch+0xb0>
	touch_diameter *= 1.6f;
 8017b64:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8017bd0 <tVoc_set_tongue_shape_and_touch+0xc0>
 8017b68:	ee28 9a27 	vmul.f32	s18, s16, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017b6c:	ed93 8a01 	vldr	s16, [r3, #4]
 8017b70:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017b74:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017b78:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017b7c:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8017b80:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017b84:	ee38 8a27 	vadd.f32	s16, s16, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017b88:	eef0 1a49 	vmov.f32	s3, s18
 8017b8c:	eeb0 1a48 	vmov.f32	s2, s16
 8017b90:	eef0 0a68 	vmov.f32	s1, s17
 8017b94:	eeb0 0a69 	vmov.f32	s0, s19
 8017b98:	a801      	add	r0, sp, #4
 8017b9a:	f7ff fe6d 	bl	8017878 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 8017b9e:	9b01      	ldr	r3, [sp, #4]
 8017ba0:	689a      	ldr	r2, [r3, #8]
 8017ba2:	edc2 9a34 	vstr	s19, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 8017ba6:	689a      	ldr	r2, [r3, #8]
 8017ba8:	edc2 8a36 	vstr	s17, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
 8017bac:	689a      	ldr	r2, [r3, #8]
 8017bae:	ed82 8a35 	vstr	s16, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 8017bb2:	689b      	ldr	r3, [r3, #8]
 8017bb4:	ed83 9a37 	vstr	s18, [r3, #220]	; 0xdc
}
 8017bb8:	b002      	add	sp, #8
 8017bba:	ecbd 8b06 	vpop	{d8-d10}
 8017bbe:	bd10      	pop	{r4, pc}
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 8017bc0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8017bd4 <tVoc_set_tongue_shape_and_touch+0xc4>
 8017bc4:	e7ce      	b.n	8017b64 <tVoc_set_tongue_shape_and_touch+0x54>
 8017bc6:	bf00      	nop
 8017bc8:	3fb9999a 	.word	0x3fb9999a
 8017bcc:	40033333 	.word	0x40033333
 8017bd0:	3fcccccd 	.word	0x3fcccccd
 8017bd4:	00000000 	.word	0x00000000

08017bd8 <tVoc_rescaleDiameter>:
	return v->counter;
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
 8017bd8:	6803      	ldr	r3, [r0, #0]
	v->tr->diameterScale = scale;
 8017bda:	689b      	ldr	r3, [r3, #8]
 8017bdc:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
 8017be0:	4770      	bx	lr

08017be2 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8017be2:	4770      	bx	lr

08017be4 <LEAF_init>:
{
 8017be4:	b538      	push	{r3, r4, r5, lr}
 8017be6:	ed2d 8b02 	vpush	{d8}
 8017bea:	4604      	mov	r4, r0
 8017bec:	eeb0 8a40 	vmov.f32	s16, s0
 8017bf0:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
 8017bf2:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8017bf4:	f7fb f84f 	bl	8012c96 <leaf_pool_init>
    leaf->sampleRate = sr;
 8017bf8:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8017bfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017c00:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8017c04:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8017c08:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8017c40 <LEAF_init+0x5c>
 8017c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017c10:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 8017c14:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8017c1a:	4a0a      	ldr	r2, [pc, #40]	; (8017c44 <LEAF_init+0x60>)
 8017c1c:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 8017c1e:	e006      	b.n	8017c2e <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
 8017c20:	f103 020e 	add.w	r2, r3, #14
 8017c24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017c28:	2100      	movs	r1, #0
 8017c2a:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	2b02      	cmp	r3, #2
 8017c30:	ddf6      	ble.n	8017c20 <LEAF_init+0x3c>
    leaf->allocCount = 0;
 8017c32:	2300      	movs	r3, #0
 8017c34:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
 8017c36:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8017c38:	ecbd 8b02 	vpop	{d8}
 8017c3c:	bd38      	pop	{r3, r4, r5, pc}
 8017c3e:	bf00      	nop
 8017c40:	40c90fdb 	.word	0x40c90fdb
 8017c44:	08017be3 	.word	0x08017be3

08017c48 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8017c48:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 8017c4a:	f101 030e 	add.w	r3, r1, #14
 8017c4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017c52:	2401      	movs	r4, #1
 8017c54:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8017c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017c58:	4798      	blx	r3
}
 8017c5a:	bd10      	pop	{r4, pc}

08017c5c <__itoa>:
 8017c5c:	1e93      	subs	r3, r2, #2
 8017c5e:	2b22      	cmp	r3, #34	; 0x22
 8017c60:	b510      	push	{r4, lr}
 8017c62:	460c      	mov	r4, r1
 8017c64:	d904      	bls.n	8017c70 <__itoa+0x14>
 8017c66:	2300      	movs	r3, #0
 8017c68:	700b      	strb	r3, [r1, #0]
 8017c6a:	461c      	mov	r4, r3
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	bd10      	pop	{r4, pc}
 8017c70:	2a0a      	cmp	r2, #10
 8017c72:	d109      	bne.n	8017c88 <__itoa+0x2c>
 8017c74:	2800      	cmp	r0, #0
 8017c76:	da07      	bge.n	8017c88 <__itoa+0x2c>
 8017c78:	232d      	movs	r3, #45	; 0x2d
 8017c7a:	700b      	strb	r3, [r1, #0]
 8017c7c:	4240      	negs	r0, r0
 8017c7e:	2101      	movs	r1, #1
 8017c80:	4421      	add	r1, r4
 8017c82:	f000 f805 	bl	8017c90 <__utoa>
 8017c86:	e7f1      	b.n	8017c6c <__itoa+0x10>
 8017c88:	2100      	movs	r1, #0
 8017c8a:	e7f9      	b.n	8017c80 <__itoa+0x24>

08017c8c <itoa>:
 8017c8c:	f7ff bfe6 	b.w	8017c5c <__itoa>

08017c90 <__utoa>:
 8017c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c92:	4c1f      	ldr	r4, [pc, #124]	; (8017d10 <__utoa+0x80>)
 8017c94:	b08b      	sub	sp, #44	; 0x2c
 8017c96:	4605      	mov	r5, r0
 8017c98:	460b      	mov	r3, r1
 8017c9a:	466e      	mov	r6, sp
 8017c9c:	f104 0c20 	add.w	ip, r4, #32
 8017ca0:	6820      	ldr	r0, [r4, #0]
 8017ca2:	6861      	ldr	r1, [r4, #4]
 8017ca4:	4637      	mov	r7, r6
 8017ca6:	c703      	stmia	r7!, {r0, r1}
 8017ca8:	3408      	adds	r4, #8
 8017caa:	4564      	cmp	r4, ip
 8017cac:	463e      	mov	r6, r7
 8017cae:	d1f7      	bne.n	8017ca0 <__utoa+0x10>
 8017cb0:	7921      	ldrb	r1, [r4, #4]
 8017cb2:	7139      	strb	r1, [r7, #4]
 8017cb4:	1e91      	subs	r1, r2, #2
 8017cb6:	6820      	ldr	r0, [r4, #0]
 8017cb8:	6038      	str	r0, [r7, #0]
 8017cba:	2922      	cmp	r1, #34	; 0x22
 8017cbc:	f04f 0100 	mov.w	r1, #0
 8017cc0:	d904      	bls.n	8017ccc <__utoa+0x3c>
 8017cc2:	7019      	strb	r1, [r3, #0]
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	b00b      	add	sp, #44	; 0x2c
 8017cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ccc:	1e58      	subs	r0, r3, #1
 8017cce:	4684      	mov	ip, r0
 8017cd0:	fbb5 f7f2 	udiv	r7, r5, r2
 8017cd4:	fb02 5617 	mls	r6, r2, r7, r5
 8017cd8:	3628      	adds	r6, #40	; 0x28
 8017cda:	446e      	add	r6, sp
 8017cdc:	460c      	mov	r4, r1
 8017cde:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017ce2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017ce6:	462e      	mov	r6, r5
 8017ce8:	42b2      	cmp	r2, r6
 8017cea:	f101 0101 	add.w	r1, r1, #1
 8017cee:	463d      	mov	r5, r7
 8017cf0:	d9ee      	bls.n	8017cd0 <__utoa+0x40>
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	545a      	strb	r2, [r3, r1]
 8017cf6:	1919      	adds	r1, r3, r4
 8017cf8:	1aa5      	subs	r5, r4, r2
 8017cfa:	42aa      	cmp	r2, r5
 8017cfc:	dae3      	bge.n	8017cc6 <__utoa+0x36>
 8017cfe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017d02:	780e      	ldrb	r6, [r1, #0]
 8017d04:	7006      	strb	r6, [r0, #0]
 8017d06:	3201      	adds	r2, #1
 8017d08:	f801 5901 	strb.w	r5, [r1], #-1
 8017d0c:	e7f4      	b.n	8017cf8 <__utoa+0x68>
 8017d0e:	bf00      	nop
 8017d10:	0802884c 	.word	0x0802884c

08017d14 <memset>:
 8017d14:	4402      	add	r2, r0
 8017d16:	4603      	mov	r3, r0
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d100      	bne.n	8017d1e <memset+0xa>
 8017d1c:	4770      	bx	lr
 8017d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8017d22:	e7f9      	b.n	8017d18 <memset+0x4>

08017d24 <__libc_init_array>:
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	4d0d      	ldr	r5, [pc, #52]	; (8017d5c <__libc_init_array+0x38>)
 8017d28:	4c0d      	ldr	r4, [pc, #52]	; (8017d60 <__libc_init_array+0x3c>)
 8017d2a:	1b64      	subs	r4, r4, r5
 8017d2c:	10a4      	asrs	r4, r4, #2
 8017d2e:	2600      	movs	r6, #0
 8017d30:	42a6      	cmp	r6, r4
 8017d32:	d109      	bne.n	8017d48 <__libc_init_array+0x24>
 8017d34:	4d0b      	ldr	r5, [pc, #44]	; (8017d64 <__libc_init_array+0x40>)
 8017d36:	4c0c      	ldr	r4, [pc, #48]	; (8017d68 <__libc_init_array+0x44>)
 8017d38:	f002 f9fa 	bl	801a130 <_init>
 8017d3c:	1b64      	subs	r4, r4, r5
 8017d3e:	10a4      	asrs	r4, r4, #2
 8017d40:	2600      	movs	r6, #0
 8017d42:	42a6      	cmp	r6, r4
 8017d44:	d105      	bne.n	8017d52 <__libc_init_array+0x2e>
 8017d46:	bd70      	pop	{r4, r5, r6, pc}
 8017d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d4c:	4798      	blx	r3
 8017d4e:	3601      	adds	r6, #1
 8017d50:	e7ee      	b.n	8017d30 <__libc_init_array+0xc>
 8017d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d56:	4798      	blx	r3
 8017d58:	3601      	adds	r6, #1
 8017d5a:	e7f2      	b.n	8017d42 <__libc_init_array+0x1e>
 8017d5c:	08029b40 	.word	0x08029b40
 8017d60:	08029b40 	.word	0x08029b40
 8017d64:	08029b40 	.word	0x08029b40
 8017d68:	08029b44 	.word	0x08029b44

08017d6c <strcpy>:
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d72:	f803 2b01 	strb.w	r2, [r3], #1
 8017d76:	2a00      	cmp	r2, #0
 8017d78:	d1f9      	bne.n	8017d6e <strcpy+0x2>
 8017d7a:	4770      	bx	lr

08017d7c <expf>:
 8017d7c:	ee10 2a10 	vmov	r2, s0
 8017d80:	f240 412a 	movw	r1, #1066	; 0x42a
 8017d84:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8017d88:	428b      	cmp	r3, r1
 8017d8a:	b430      	push	{r4, r5}
 8017d8c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8017d90:	d92a      	bls.n	8017de8 <expf+0x6c>
 8017d92:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8017d96:	d058      	beq.n	8017e4a <expf+0xce>
 8017d98:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8017d9c:	d303      	bcc.n	8017da6 <expf+0x2a>
 8017d9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017da2:	bc30      	pop	{r4, r5}
 8017da4:	4770      	bx	lr
 8017da6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8017e50 <expf+0xd4>
 8017daa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db2:	dd03      	ble.n	8017dbc <expf+0x40>
 8017db4:	bc30      	pop	{r4, r5}
 8017db6:	2000      	movs	r0, #0
 8017db8:	f000 bbd8 	b.w	801856c <__math_oflowf>
 8017dbc:	eddf 7a25 	vldr	s15, [pc, #148]	; 8017e54 <expf+0xd8>
 8017dc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dc8:	d503      	bpl.n	8017dd2 <expf+0x56>
 8017dca:	bc30      	pop	{r4, r5}
 8017dcc:	2000      	movs	r0, #0
 8017dce:	f000 bbc1 	b.w	8018554 <__math_uflowf>
 8017dd2:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017e58 <expf+0xdc>
 8017dd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dde:	d503      	bpl.n	8017de8 <expf+0x6c>
 8017de0:	bc30      	pop	{r4, r5}
 8017de2:	2000      	movs	r0, #0
 8017de4:	f000 bbbc 	b.w	8018560 <__math_may_uflowf>
 8017de8:	4b1c      	ldr	r3, [pc, #112]	; (8017e5c <expf+0xe0>)
 8017dea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017dee:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8017df2:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8017df6:	eeb0 7b44 	vmov.f64	d7, d4
 8017dfa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017dfe:	ee17 0a10 	vmov	r0, s14
 8017e02:	ee37 7b44 	vsub.f64	d7, d7, d4
 8017e06:	f000 021f 	and.w	r2, r0, #31
 8017e0a:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8017e0e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8017e12:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017e16:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8017e1a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8017e1e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017e22:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8017e26:	684d      	ldr	r5, [r1, #4]
 8017e28:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8017e2c:	2100      	movs	r1, #0
 8017e2e:	190a      	adds	r2, r1, r4
 8017e30:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8017e34:	eea5 0b07 	vfma.f64	d0, d5, d7
 8017e38:	ec43 2b17 	vmov	d7, r2, r3
 8017e3c:	eea6 0b04 	vfma.f64	d0, d6, d4
 8017e40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017e44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017e48:	e7ab      	b.n	8017da2 <expf+0x26>
 8017e4a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8017e60 <expf+0xe4>
 8017e4e:	e7a8      	b.n	8017da2 <expf+0x26>
 8017e50:	42b17217 	.word	0x42b17217
 8017e54:	c2cff1b4 	.word	0xc2cff1b4
 8017e58:	c2ce8ecf 	.word	0xc2ce8ecf
 8017e5c:	08028878 	.word	0x08028878
 8017e60:	00000000 	.word	0x00000000

08017e64 <logf>:
 8017e64:	ee10 3a10 	vmov	r3, s0
 8017e68:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8017e6c:	b410      	push	{r4}
 8017e6e:	d055      	beq.n	8017f1c <logf+0xb8>
 8017e70:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8017e74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8017e78:	d31a      	bcc.n	8017eb0 <logf+0x4c>
 8017e7a:	005a      	lsls	r2, r3, #1
 8017e7c:	d104      	bne.n	8017e88 <logf+0x24>
 8017e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e82:	2001      	movs	r0, #1
 8017e84:	f000 bb78 	b.w	8018578 <__math_divzerof>
 8017e88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017e8c:	d043      	beq.n	8017f16 <logf+0xb2>
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	db02      	blt.n	8017e98 <logf+0x34>
 8017e92:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017e96:	d303      	bcc.n	8017ea0 <logf+0x3c>
 8017e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e9c:	f000 bb7e 	b.w	801859c <__math_invalidf>
 8017ea0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8017f24 <logf+0xc0>
 8017ea4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017ea8:	ee10 3a10 	vmov	r3, s0
 8017eac:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8017eb0:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8017eb4:	491c      	ldr	r1, [pc, #112]	; (8017f28 <logf+0xc4>)
 8017eb6:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8017eba:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8017ebe:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8017ec2:	0dd4      	lsrs	r4, r2, #23
 8017ec4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8017ec8:	05e4      	lsls	r4, r4, #23
 8017eca:	ed90 6b00 	vldr	d6, [r0]
 8017ece:	1b1b      	subs	r3, r3, r4
 8017ed0:	ee07 3a90 	vmov	s15, r3
 8017ed4:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8017ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017edc:	15d2      	asrs	r2, r2, #23
 8017ede:	eea6 0b07 	vfma.f64	d0, d6, d7
 8017ee2:	ed90 6b02 	vldr	d6, [r0, #8]
 8017ee6:	ee20 4b00 	vmul.f64	d4, d0, d0
 8017eea:	ee07 2a90 	vmov	s15, r2
 8017eee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ef2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017ef6:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8017efa:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8017efe:	eea5 7b00 	vfma.f64	d7, d5, d0
 8017f02:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8017f06:	ee30 0b06 	vadd.f64	d0, d0, d6
 8017f0a:	eea5 7b04 	vfma.f64	d7, d5, d4
 8017f0e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017f12:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f1a:	4770      	bx	lr
 8017f1c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017f2c <logf+0xc8>
 8017f20:	e7f9      	b.n	8017f16 <logf+0xb2>
 8017f22:	bf00      	nop
 8017f24:	4b000000 	.word	0x4b000000
 8017f28:	080289c0 	.word	0x080289c0
 8017f2c:	00000000 	.word	0x00000000

08017f30 <log2f>:
 8017f30:	ee10 2a10 	vmov	r2, s0
 8017f34:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8017f38:	b410      	push	{r4}
 8017f3a:	d055      	beq.n	8017fe8 <log2f+0xb8>
 8017f3c:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8017f40:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8017f44:	d31a      	bcc.n	8017f7c <log2f+0x4c>
 8017f46:	0053      	lsls	r3, r2, #1
 8017f48:	d104      	bne.n	8017f54 <log2f+0x24>
 8017f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f4e:	2001      	movs	r0, #1
 8017f50:	f000 bb12 	b.w	8018578 <__math_divzerof>
 8017f54:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017f58:	d043      	beq.n	8017fe2 <log2f+0xb2>
 8017f5a:	2a00      	cmp	r2, #0
 8017f5c:	db02      	blt.n	8017f64 <log2f+0x34>
 8017f5e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8017f62:	d303      	bcc.n	8017f6c <log2f+0x3c>
 8017f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f68:	f000 bb18 	b.w	801859c <__math_invalidf>
 8017f6c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8017ff0 <log2f+0xc0>
 8017f70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017f74:	ee10 3a10 	vmov	r3, s0
 8017f78:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8017f7c:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8017f80:	491c      	ldr	r1, [pc, #112]	; (8017ff4 <log2f+0xc4>)
 8017f82:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017f86:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8017f8a:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8017f8e:	0ddc      	lsrs	r4, r3, #23
 8017f90:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8017f94:	05e4      	lsls	r4, r4, #23
 8017f96:	ed90 5b00 	vldr	d5, [r0]
 8017f9a:	1b12      	subs	r2, r2, r4
 8017f9c:	ee07 2a90 	vmov	s15, r2
 8017fa0:	15db      	asrs	r3, r3, #23
 8017fa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8017fa6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8017faa:	ed90 7b02 	vldr	d7, [r0, #8]
 8017fae:	ee26 4b06 	vmul.f64	d4, d6, d6
 8017fb2:	ee00 3a10 	vmov	s0, r3
 8017fb6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8017fba:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8017fbe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017fc2:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8017fc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017fca:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8017fce:	eea5 7b04 	vfma.f64	d7, d5, d4
 8017fd2:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8017fd6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8017fda:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017fde:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fe6:	4770      	bx	lr
 8017fe8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017ff8 <log2f+0xc8>
 8017fec:	e7f9      	b.n	8017fe2 <log2f+0xb2>
 8017fee:	bf00      	nop
 8017ff0:	4b000000 	.word	0x4b000000
 8017ff4:	08029350 	.word	0x08029350
	...

08018000 <exp>:
 8018000:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8018002:	ee10 3a90 	vmov	r3, s1
 8018006:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801800a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801800e:	18a2      	adds	r2, r4, r2
 8018010:	2a3e      	cmp	r2, #62	; 0x3e
 8018012:	ee10 1a10 	vmov	r1, s0
 8018016:	d922      	bls.n	801805e <exp+0x5e>
 8018018:	2a00      	cmp	r2, #0
 801801a:	da06      	bge.n	801802a <exp+0x2a>
 801801c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018020:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018024:	b004      	add	sp, #16
 8018026:	bcf0      	pop	{r4, r5, r6, r7}
 8018028:	4770      	bx	lr
 801802a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801802e:	f04f 0000 	mov.w	r0, #0
 8018032:	d913      	bls.n	801805c <exp+0x5c>
 8018034:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8018038:	bf08      	it	eq
 801803a:	4281      	cmpeq	r1, r0
 801803c:	f000 80a0 	beq.w	8018180 <exp+0x180>
 8018040:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018044:	4294      	cmp	r4, r2
 8018046:	d0e9      	beq.n	801801c <exp+0x1c>
 8018048:	4283      	cmp	r3, r0
 801804a:	da03      	bge.n	8018054 <exp+0x54>
 801804c:	b004      	add	sp, #16
 801804e:	bcf0      	pop	{r4, r5, r6, r7}
 8018050:	f000 b8c6 	b.w	80181e0 <__math_uflow>
 8018054:	b004      	add	sp, #16
 8018056:	bcf0      	pop	{r4, r5, r6, r7}
 8018058:	f000 b8ca 	b.w	80181f0 <__math_oflow>
 801805c:	4604      	mov	r4, r0
 801805e:	4950      	ldr	r1, [pc, #320]	; (80181a0 <exp+0x1a0>)
 8018060:	ed91 6b02 	vldr	d6, [r1, #8]
 8018064:	ed91 5b00 	vldr	d5, [r1]
 8018068:	eeb0 7b46 	vmov.f64	d7, d6
 801806c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018070:	ee17 5a10 	vmov	r5, s14
 8018074:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018078:	ed91 6b04 	vldr	d6, [r1, #16]
 801807c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018080:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018084:	ed91 6b06 	vldr	d6, [r1, #24]
 8018088:	18d8      	adds	r0, r3, r3
 801808a:	f100 030f 	add.w	r3, r0, #15
 801808e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8018092:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018096:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 801809a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801809e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80180a2:	ed91 4b08 	vldr	d4, [r1, #32]
 80180a6:	ee30 6b06 	vadd.f64	d6, d0, d6
 80180aa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80180ae:	eea3 4b00 	vfma.f64	d4, d3, d0
 80180b2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 80180b6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80180ba:	ee27 7b07 	vmul.f64	d7, d7, d7
 80180be:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 80180c2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 80180c6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80180ca:	eea3 4b00 	vfma.f64	d4, d3, d0
 80180ce:	2600      	movs	r6, #0
 80180d0:	19f2      	adds	r2, r6, r7
 80180d2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 80180d6:	eea7 6b04 	vfma.f64	d6, d7, d4
 80180da:	2c00      	cmp	r4, #0
 80180dc:	d14b      	bne.n	8018176 <exp+0x176>
 80180de:	42b5      	cmp	r5, r6
 80180e0:	db10      	blt.n	8018104 <exp+0x104>
 80180e2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 80180e6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8018188 <exp+0x188>
 80180ea:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 80180ee:	4610      	mov	r0, r2
 80180f0:	ec41 0b10 	vmov	d0, r0, r1
 80180f4:	eea6 0b00 	vfma.f64	d0, d6, d0
 80180f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80180fc:	b004      	add	sp, #16
 80180fe:	bcf0      	pop	{r4, r5, r6, r7}
 8018100:	f000 b88a 	b.w	8018218 <__math_check_oflow>
 8018104:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018108:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801810c:	4610      	mov	r0, r2
 801810e:	ec41 0b17 	vmov	d7, r0, r1
 8018112:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018116:	ee26 6b07 	vmul.f64	d6, d6, d7
 801811a:	ee37 5b06 	vadd.f64	d5, d7, d6
 801811e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8018122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018126:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018190 <exp+0x190>
 801812a:	d51e      	bpl.n	801816a <exp+0x16a>
 801812c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8018130:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018134:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018138:	ee34 6b43 	vsub.f64	d6, d4, d3
 801813c:	ee36 6b05 	vadd.f64	d6, d6, d5
 8018140:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018144:	ee36 6b03 	vadd.f64	d6, d6, d3
 8018148:	ee36 5b44 	vsub.f64	d5, d6, d4
 801814c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8018150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018154:	d101      	bne.n	801815a <exp+0x15a>
 8018156:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8018198 <exp+0x198>
 801815a:	ed8d 0b00 	vstr	d0, [sp]
 801815e:	ed9d 7b00 	vldr	d7, [sp]
 8018162:	ee27 7b00 	vmul.f64	d7, d7, d0
 8018166:	ed8d 7b02 	vstr	d7, [sp, #8]
 801816a:	ee25 0b00 	vmul.f64	d0, d5, d0
 801816e:	b004      	add	sp, #16
 8018170:	bcf0      	pop	{r4, r5, r6, r7}
 8018172:	f000 b845 	b.w	8018200 <__math_check_uflow>
 8018176:	ec43 2b10 	vmov	d0, r2, r3
 801817a:	eea6 0b00 	vfma.f64	d0, d6, d0
 801817e:	e751      	b.n	8018024 <exp+0x24>
 8018180:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8018198 <exp+0x198>
 8018184:	e74e      	b.n	8018024 <exp+0x24>
 8018186:	bf00      	nop
 8018188:	00000000 	.word	0x00000000
 801818c:	7f000000 	.word	0x7f000000
 8018190:	00000000 	.word	0x00000000
 8018194:	00100000 	.word	0x00100000
	...
 80181a0:	08028ae0 	.word	0x08028ae0

080181a4 <with_errno>:
 80181a4:	b513      	push	{r0, r1, r4, lr}
 80181a6:	4604      	mov	r4, r0
 80181a8:	ed8d 0b00 	vstr	d0, [sp]
 80181ac:	f001 ffba 	bl	801a124 <__errno>
 80181b0:	ed9d 0b00 	vldr	d0, [sp]
 80181b4:	6004      	str	r4, [r0, #0]
 80181b6:	b002      	add	sp, #8
 80181b8:	bd10      	pop	{r4, pc}

080181ba <xflow>:
 80181ba:	b082      	sub	sp, #8
 80181bc:	b158      	cbz	r0, 80181d6 <xflow+0x1c>
 80181be:	eeb1 7b40 	vneg.f64	d7, d0
 80181c2:	ed8d 7b00 	vstr	d7, [sp]
 80181c6:	ed9d 7b00 	vldr	d7, [sp]
 80181ca:	2022      	movs	r0, #34	; 0x22
 80181cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 80181d0:	b002      	add	sp, #8
 80181d2:	f7ff bfe7 	b.w	80181a4 <with_errno>
 80181d6:	eeb0 7b40 	vmov.f64	d7, d0
 80181da:	e7f2      	b.n	80181c2 <xflow+0x8>
 80181dc:	0000      	movs	r0, r0
	...

080181e0 <__math_uflow>:
 80181e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80181e8 <__math_uflow+0x8>
 80181e4:	f7ff bfe9 	b.w	80181ba <xflow>
 80181e8:	00000000 	.word	0x00000000
 80181ec:	10000000 	.word	0x10000000

080181f0 <__math_oflow>:
 80181f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80181f8 <__math_oflow+0x8>
 80181f4:	f7ff bfe1 	b.w	80181ba <xflow>
 80181f8:	00000000 	.word	0x00000000
 80181fc:	70000000 	.word	0x70000000

08018200 <__math_check_uflow>:
 8018200:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018208:	d102      	bne.n	8018210 <__math_check_uflow+0x10>
 801820a:	2022      	movs	r0, #34	; 0x22
 801820c:	f7ff bfca 	b.w	80181a4 <with_errno>
 8018210:	4770      	bx	lr
 8018212:	0000      	movs	r0, r0
 8018214:	0000      	movs	r0, r0
	...

08018218 <__math_check_oflow>:
 8018218:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8018238 <__math_check_oflow+0x20>
 801821c:	eeb0 7bc0 	vabs.f64	d7, d0
 8018220:	eeb4 7b46 	vcmp.f64	d7, d6
 8018224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018228:	dd02      	ble.n	8018230 <__math_check_oflow+0x18>
 801822a:	2022      	movs	r0, #34	; 0x22
 801822c:	f7ff bfba 	b.w	80181a4 <with_errno>
 8018230:	4770      	bx	lr
 8018232:	bf00      	nop
 8018234:	f3af 8000 	nop.w
 8018238:	ffffffff 	.word	0xffffffff
 801823c:	7fefffff 	.word	0x7fefffff

08018240 <checkint>:
 8018240:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018244:	2b7e      	cmp	r3, #126	; 0x7e
 8018246:	dd10      	ble.n	801826a <checkint+0x2a>
 8018248:	2b96      	cmp	r3, #150	; 0x96
 801824a:	dc0c      	bgt.n	8018266 <checkint+0x26>
 801824c:	2201      	movs	r2, #1
 801824e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018252:	fa02 f303 	lsl.w	r3, r2, r3
 8018256:	1e5a      	subs	r2, r3, #1
 8018258:	4202      	tst	r2, r0
 801825a:	d106      	bne.n	801826a <checkint+0x2a>
 801825c:	4203      	tst	r3, r0
 801825e:	bf0c      	ite	eq
 8018260:	2002      	moveq	r0, #2
 8018262:	2001      	movne	r0, #1
 8018264:	4770      	bx	lr
 8018266:	2002      	movs	r0, #2
 8018268:	4770      	bx	lr
 801826a:	2000      	movs	r0, #0
 801826c:	4770      	bx	lr
	...

08018270 <powf>:
 8018270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018272:	ee10 1a10 	vmov	r1, s0
 8018276:	ee10 4a90 	vmov	r4, s1
 801827a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801827e:	0062      	lsls	r2, r4, #1
 8018280:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018284:	eef0 7a40 	vmov.f32	s15, s0
 8018288:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801828c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8018290:	d252      	bcs.n	8018338 <powf+0xc8>
 8018292:	4298      	cmp	r0, r3
 8018294:	d252      	bcs.n	801833c <powf+0xcc>
 8018296:	2000      	movs	r0, #0
 8018298:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801829c:	4a9e      	ldr	r2, [pc, #632]	; (8018518 <powf+0x2a8>)
 801829e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80182a2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80182a6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80182aa:	0ddb      	lsrs	r3, r3, #23
 80182ac:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80182b0:	05db      	lsls	r3, r3, #23
 80182b2:	ed94 5b00 	vldr	d5, [r4]
 80182b6:	1ac9      	subs	r1, r1, r3
 80182b8:	ee07 1a90 	vmov	s15, r1
 80182bc:	15db      	asrs	r3, r3, #23
 80182be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80182c2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80182c6:	ed94 5b02 	vldr	d5, [r4, #8]
 80182ca:	ee26 2b06 	vmul.f64	d2, d6, d6
 80182ce:	ee22 1b02 	vmul.f64	d1, d2, d2
 80182d2:	ee07 3a90 	vmov	s15, r3
 80182d6:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 80182da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182de:	ee37 7b05 	vadd.f64	d7, d7, d5
 80182e2:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 80182e6:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 80182ea:	eea6 3b05 	vfma.f64	d3, d6, d5
 80182ee:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80182f2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80182f6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 80182fa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80182fe:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8018302:	eea2 7b05 	vfma.f64	d7, d2, d5
 8018306:	eea3 7b01 	vfma.f64	d7, d3, d1
 801830a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801830e:	ee16 3a90 	vmov	r3, s13
 8018312:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8018316:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801831a:	429a      	cmp	r2, r3
 801831c:	f0c0 80b0 	bcc.w	8018480 <powf+0x210>
 8018320:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80184f8 <powf+0x288>
 8018324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801832c:	dd78      	ble.n	8018420 <powf+0x1b0>
 801832e:	b003      	add	sp, #12
 8018330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018334:	f000 b91a 	b.w	801856c <__math_oflowf>
 8018338:	4298      	cmp	r0, r3
 801833a:	d32d      	bcc.n	8018398 <powf+0x128>
 801833c:	b952      	cbnz	r2, 8018354 <powf+0xe4>
 801833e:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 8018342:	0049      	lsls	r1, r1, #1
 8018344:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8018348:	f240 80c8 	bls.w	80184dc <powf+0x26c>
 801834c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8018350:	b003      	add	sp, #12
 8018352:	bd30      	pop	{r4, r5, pc}
 8018354:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8018358:	d105      	bne.n	8018366 <powf+0xf6>
 801835a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801835e:	0064      	lsls	r4, r4, #1
 8018360:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018364:	e7f0      	b.n	8018348 <powf+0xd8>
 8018366:	0049      	lsls	r1, r1, #1
 8018368:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 801836c:	d8ee      	bhi.n	801834c <powf+0xdc>
 801836e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8018372:	d1eb      	bne.n	801834c <powf+0xdc>
 8018374:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8018378:	f000 80b0 	beq.w	80184dc <powf+0x26c>
 801837c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8018380:	ea6f 0404 	mvn.w	r4, r4
 8018384:	bf34      	ite	cc
 8018386:	2100      	movcc	r1, #0
 8018388:	2101      	movcs	r1, #1
 801838a:	0fe4      	lsrs	r4, r4, #31
 801838c:	42a1      	cmp	r1, r4
 801838e:	f040 80a8 	bne.w	80184e2 <powf+0x272>
 8018392:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8018396:	e7db      	b.n	8018350 <powf+0xe0>
 8018398:	004d      	lsls	r5, r1, #1
 801839a:	1e6a      	subs	r2, r5, #1
 801839c:	429a      	cmp	r2, r3
 801839e:	d31c      	bcc.n	80183da <powf+0x16a>
 80183a0:	2900      	cmp	r1, #0
 80183a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80183a6:	da0f      	bge.n	80183c8 <powf+0x158>
 80183a8:	ee10 0a90 	vmov	r0, s1
 80183ac:	f7ff ff48 	bl	8018240 <checkint>
 80183b0:	2801      	cmp	r0, #1
 80183b2:	d109      	bne.n	80183c8 <powf+0x158>
 80183b4:	eeb1 0a40 	vneg.f32	s0, s0
 80183b8:	b945      	cbnz	r5, 80183cc <powf+0x15c>
 80183ba:	2c00      	cmp	r4, #0
 80183bc:	dac8      	bge.n	8018350 <powf+0xe0>
 80183be:	b003      	add	sp, #12
 80183c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183c4:	f000 b8d8 	b.w	8018578 <__math_divzerof>
 80183c8:	2000      	movs	r0, #0
 80183ca:	e7f5      	b.n	80183b8 <powf+0x148>
 80183cc:	2c00      	cmp	r4, #0
 80183ce:	dabf      	bge.n	8018350 <powf+0xe0>
 80183d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80183d4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80183d8:	e7ba      	b.n	8018350 <powf+0xe0>
 80183da:	2900      	cmp	r1, #0
 80183dc:	da1e      	bge.n	801841c <powf+0x1ac>
 80183de:	ee10 0a90 	vmov	r0, s1
 80183e2:	f7ff ff2d 	bl	8018240 <checkint>
 80183e6:	b920      	cbnz	r0, 80183f2 <powf+0x182>
 80183e8:	b003      	add	sp, #12
 80183ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183ee:	f000 b8d5 	b.w	801859c <__math_invalidf>
 80183f2:	1e43      	subs	r3, r0, #1
 80183f4:	4258      	negs	r0, r3
 80183f6:	4158      	adcs	r0, r3
 80183f8:	0400      	lsls	r0, r0, #16
 80183fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80183fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8018402:	f4bf af49 	bcs.w	8018298 <powf+0x28>
 8018406:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801851c <powf+0x2ac>
 801840a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801840e:	ee10 3a10 	vmov	r3, s0
 8018412:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018416:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801841a:	e73d      	b.n	8018298 <powf+0x28>
 801841c:	2000      	movs	r0, #0
 801841e:	e7ee      	b.n	80183fe <powf+0x18e>
 8018420:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8018500 <powf+0x290>
 8018424:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801842c:	dd10      	ble.n	8018450 <powf+0x1e0>
 801842e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8018432:	2800      	cmp	r0, #0
 8018434:	d158      	bne.n	80184e8 <powf+0x278>
 8018436:	9300      	str	r3, [sp, #0]
 8018438:	eddd 7a00 	vldr	s15, [sp]
 801843c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018444:	eef4 7a47 	vcmp.f32	s15, s14
 8018448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801844c:	f47f af6f 	bne.w	801832e <powf+0xbe>
 8018450:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018508 <powf+0x298>
 8018454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801845c:	d804      	bhi.n	8018468 <powf+0x1f8>
 801845e:	b003      	add	sp, #12
 8018460:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018464:	f000 b876 	b.w	8018554 <__math_uflowf>
 8018468:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8018510 <powf+0x2a0>
 801846c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018474:	d504      	bpl.n	8018480 <powf+0x210>
 8018476:	b003      	add	sp, #12
 8018478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801847c:	f000 b870 	b.w	8018560 <__math_may_uflowf>
 8018480:	4b27      	ldr	r3, [pc, #156]	; (8018520 <powf+0x2b0>)
 8018482:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018486:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801848a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801848e:	ee17 2a10 	vmov	r2, s14
 8018492:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018496:	f002 011f 	and.w	r1, r2, #31
 801849a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801849e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80184a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80184a6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80184aa:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80184ae:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80184b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80184b6:	686d      	ldr	r5, [r5, #4]
 80184b8:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80184bc:	1882      	adds	r2, r0, r2
 80184be:	2300      	movs	r3, #0
 80184c0:	1918      	adds	r0, r3, r4
 80184c2:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80184c6:	eea7 0b05 	vfma.f64	d0, d7, d5
 80184ca:	ec41 0b17 	vmov	d7, r0, r1
 80184ce:	eea6 0b04 	vfma.f64	d0, d6, d4
 80184d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80184d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80184da:	e739      	b.n	8018350 <powf+0xe0>
 80184dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80184e0:	e736      	b.n	8018350 <powf+0xe0>
 80184e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8018524 <powf+0x2b4>
 80184e6:	e733      	b.n	8018350 <powf+0xe0>
 80184e8:	9301      	str	r3, [sp, #4]
 80184ea:	eddd 7a01 	vldr	s15, [sp, #4]
 80184ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80184f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80184f6:	e7a5      	b.n	8018444 <powf+0x1d4>
 80184f8:	ffd1d571 	.word	0xffd1d571
 80184fc:	405fffff 	.word	0x405fffff
 8018500:	ffa3aae2 	.word	0xffa3aae2
 8018504:	405fffff 	.word	0x405fffff
 8018508:	00000000 	.word	0x00000000
 801850c:	c062c000 	.word	0xc062c000
 8018510:	00000000 	.word	0x00000000
 8018514:	c062a000 	.word	0xc062a000
 8018518:	08029990 	.word	0x08029990
 801851c:	4b000000 	.word	0x4b000000
 8018520:	08028878 	.word	0x08028878
 8018524:	00000000 	.word	0x00000000

08018528 <with_errnof>:
 8018528:	b513      	push	{r0, r1, r4, lr}
 801852a:	4604      	mov	r4, r0
 801852c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018530:	f001 fdf8 	bl	801a124 <__errno>
 8018534:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018538:	6004      	str	r4, [r0, #0]
 801853a:	b002      	add	sp, #8
 801853c:	bd10      	pop	{r4, pc}

0801853e <xflowf>:
 801853e:	b130      	cbz	r0, 801854e <xflowf+0x10>
 8018540:	eef1 7a40 	vneg.f32	s15, s0
 8018544:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018548:	2022      	movs	r0, #34	; 0x22
 801854a:	f7ff bfed 	b.w	8018528 <with_errnof>
 801854e:	eef0 7a40 	vmov.f32	s15, s0
 8018552:	e7f7      	b.n	8018544 <xflowf+0x6>

08018554 <__math_uflowf>:
 8018554:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801855c <__math_uflowf+0x8>
 8018558:	f7ff bff1 	b.w	801853e <xflowf>
 801855c:	10000000 	.word	0x10000000

08018560 <__math_may_uflowf>:
 8018560:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018568 <__math_may_uflowf+0x8>
 8018564:	f7ff bfeb 	b.w	801853e <xflowf>
 8018568:	1a200000 	.word	0x1a200000

0801856c <__math_oflowf>:
 801856c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018574 <__math_oflowf+0x8>
 8018570:	f7ff bfe5 	b.w	801853e <xflowf>
 8018574:	70000000 	.word	0x70000000

08018578 <__math_divzerof>:
 8018578:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8018598 <__math_divzerof+0x20>
 801857c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018584:	2800      	cmp	r0, #0
 8018586:	f04f 0022 	mov.w	r0, #34	; 0x22
 801858a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801858e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8018592:	f7ff bfc9 	b.w	8018528 <with_errnof>
 8018596:	bf00      	nop
 8018598:	00000000 	.word	0x00000000

0801859c <__math_invalidf>:
 801859c:	eef0 7a40 	vmov.f32	s15, s0
 80185a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80185a4:	eef4 7a67 	vcmp.f32	s15, s15
 80185a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ac:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80185b0:	d602      	bvs.n	80185b8 <__math_invalidf+0x1c>
 80185b2:	2021      	movs	r0, #33	; 0x21
 80185b4:	f7ff bfb8 	b.w	8018528 <with_errnof>
 80185b8:	4770      	bx	lr
	...

080185bc <log10f>:
 80185bc:	b508      	push	{r3, lr}
 80185be:	ed2d 8b02 	vpush	{d8}
 80185c2:	eeb0 8a40 	vmov.f32	s16, s0
 80185c6:	f000 f9ff 	bl	80189c8 <__ieee754_log10f>
 80185ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80185ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d2:	d60f      	bvs.n	80185f4 <log10f+0x38>
 80185d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80185d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185dc:	d80a      	bhi.n	80185f4 <log10f+0x38>
 80185de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80185e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e6:	d108      	bne.n	80185fa <log10f+0x3e>
 80185e8:	f001 fd9c 	bl	801a124 <__errno>
 80185ec:	2322      	movs	r3, #34	; 0x22
 80185ee:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018610 <log10f+0x54>
 80185f2:	6003      	str	r3, [r0, #0]
 80185f4:	ecbd 8b02 	vpop	{d8}
 80185f8:	bd08      	pop	{r3, pc}
 80185fa:	f001 fd93 	bl	801a124 <__errno>
 80185fe:	ecbd 8b02 	vpop	{d8}
 8018602:	2321      	movs	r3, #33	; 0x21
 8018604:	6003      	str	r3, [r0, #0]
 8018606:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801860a:	4802      	ldr	r0, [pc, #8]	; (8018614 <log10f+0x58>)
 801860c:	f000 b82a 	b.w	8018664 <nanf>
 8018610:	ff800000 	.word	0xff800000
 8018614:	08028870 	.word	0x08028870

08018618 <sqrtf>:
 8018618:	b508      	push	{r3, lr}
 801861a:	ed2d 8b02 	vpush	{d8}
 801861e:	eeb0 8a40 	vmov.f32	s16, s0
 8018622:	f000 f9cd 	bl	80189c0 <__ieee754_sqrtf>
 8018626:	eeb4 8a48 	vcmp.f32	s16, s16
 801862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801862e:	d60c      	bvs.n	801864a <sqrtf+0x32>
 8018630:	eddf 8a07 	vldr	s17, [pc, #28]	; 8018650 <sqrtf+0x38>
 8018634:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801863c:	d505      	bpl.n	801864a <sqrtf+0x32>
 801863e:	f001 fd71 	bl	801a124 <__errno>
 8018642:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018646:	2321      	movs	r3, #33	; 0x21
 8018648:	6003      	str	r3, [r0, #0]
 801864a:	ecbd 8b02 	vpop	{d8}
 801864e:	bd08      	pop	{r3, pc}
 8018650:	00000000 	.word	0x00000000

08018654 <fabsf>:
 8018654:	ee10 3a10 	vmov	r3, s0
 8018658:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801865c:	ee00 3a10 	vmov	s0, r3
 8018660:	4770      	bx	lr
	...

08018664 <nanf>:
 8018664:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801866c <nanf+0x8>
 8018668:	4770      	bx	lr
 801866a:	bf00      	nop
 801866c:	7fc00000 	.word	0x7fc00000

08018670 <tanf>:
 8018670:	ee10 3a10 	vmov	r3, s0
 8018674:	b507      	push	{r0, r1, r2, lr}
 8018676:	4a12      	ldr	r2, [pc, #72]	; (80186c0 <tanf+0x50>)
 8018678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801867c:	4293      	cmp	r3, r2
 801867e:	dc07      	bgt.n	8018690 <tanf+0x20>
 8018680:	eddf 0a10 	vldr	s1, [pc, #64]	; 80186c4 <tanf+0x54>
 8018684:	2001      	movs	r0, #1
 8018686:	b003      	add	sp, #12
 8018688:	f85d eb04 	ldr.w	lr, [sp], #4
 801868c:	f000 b8b8 	b.w	8018800 <__kernel_tanf>
 8018690:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018694:	db04      	blt.n	80186a0 <tanf+0x30>
 8018696:	ee30 0a40 	vsub.f32	s0, s0, s0
 801869a:	b003      	add	sp, #12
 801869c:	f85d fb04 	ldr.w	pc, [sp], #4
 80186a0:	4668      	mov	r0, sp
 80186a2:	f000 f9e9 	bl	8018a78 <__ieee754_rem_pio2f>
 80186a6:	0040      	lsls	r0, r0, #1
 80186a8:	f000 0002 	and.w	r0, r0, #2
 80186ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80186b0:	ed9d 0a00 	vldr	s0, [sp]
 80186b4:	f1c0 0001 	rsb	r0, r0, #1
 80186b8:	f000 f8a2 	bl	8018800 <__kernel_tanf>
 80186bc:	e7ed      	b.n	801869a <tanf+0x2a>
 80186be:	bf00      	nop
 80186c0:	3f490fda 	.word	0x3f490fda
 80186c4:	00000000 	.word	0x00000000

080186c8 <tanhf>:
 80186c8:	b538      	push	{r3, r4, r5, lr}
 80186ca:	ee10 5a10 	vmov	r5, s0
 80186ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80186d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80186d6:	ed2d 8b02 	vpush	{d8}
 80186da:	db0f      	blt.n	80186fc <tanhf+0x34>
 80186dc:	4b2a      	ldr	r3, [pc, #168]	; (8018788 <tanhf+0xc0>)
 80186de:	ed93 6a00 	vldr	s12, [r3]
 80186e2:	edd3 6a00 	vldr	s13, [r3]
 80186e6:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80186ea:	2d00      	cmp	r5, #0
 80186ec:	bfac      	ite	ge
 80186ee:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 80186f2:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 80186f6:	ecbd 8b02 	vpop	{d8}
 80186fa:	bd38      	pop	{r3, r4, r5, pc}
 80186fc:	4a23      	ldr	r2, [pc, #140]	; (801878c <tanhf+0xc4>)
 80186fe:	4293      	cmp	r3, r2
 8018700:	dc39      	bgt.n	8018776 <tanhf+0xae>
 8018702:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8018706:	da07      	bge.n	8018718 <tanhf+0x50>
 8018708:	4b1f      	ldr	r3, [pc, #124]	; (8018788 <tanhf+0xc0>)
 801870a:	edd3 7a00 	vldr	s15, [r3]
 801870e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018712:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018716:	e7ee      	b.n	80186f6 <tanhf+0x2e>
 8018718:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801871c:	4c1c      	ldr	r4, [pc, #112]	; (8018790 <tanhf+0xc8>)
 801871e:	db19      	blt.n	8018754 <tanhf+0x8c>
 8018720:	f7ff ff98 	bl	8018654 <fabsf>
 8018724:	edd4 7a00 	vldr	s15, [r4]
 8018728:	ee20 0a27 	vmul.f32	s0, s0, s15
 801872c:	f000 ffc4 	bl	80196b8 <expm1f>
 8018730:	4b15      	ldr	r3, [pc, #84]	; (8018788 <tanhf+0xc0>)
 8018732:	edd3 7a00 	vldr	s15, [r3]
 8018736:	edd4 6a00 	vldr	s13, [r4]
 801873a:	ed94 7a00 	vldr	s14, [r4]
 801873e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8018742:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8018746:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801874a:	2d00      	cmp	r5, #0
 801874c:	bfb8      	it	lt
 801874e:	eeb1 0a40 	vneglt.f32	s0, s0
 8018752:	e7d0      	b.n	80186f6 <tanhf+0x2e>
 8018754:	ed94 8a00 	vldr	s16, [r4]
 8018758:	f7ff ff7c 	bl	8018654 <fabsf>
 801875c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8018760:	f000 ffaa 	bl	80196b8 <expm1f>
 8018764:	edd4 7a00 	vldr	s15, [r4]
 8018768:	ee77 7a80 	vadd.f32	s15, s15, s0
 801876c:	eeb1 7a40 	vneg.f32	s14, s0
 8018770:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018774:	e7e9      	b.n	801874a <tanhf+0x82>
 8018776:	4b04      	ldr	r3, [pc, #16]	; (8018788 <tanhf+0xc0>)
 8018778:	ed93 0a00 	vldr	s0, [r3]
 801877c:	4b05      	ldr	r3, [pc, #20]	; (8018794 <tanhf+0xcc>)
 801877e:	edd3 7a00 	vldr	s15, [r3]
 8018782:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018786:	e7e0      	b.n	801874a <tanhf+0x82>
 8018788:	20000a18 	.word	0x20000a18
 801878c:	41afffff 	.word	0x41afffff
 8018790:	20000a20 	.word	0x20000a20
 8018794:	20000a1c 	.word	0x20000a1c

08018798 <tan>:
 8018798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801879a:	eeb0 7b40 	vmov.f64	d7, d0
 801879e:	ee17 3a90 	vmov	r3, s15
 80187a2:	4a15      	ldr	r2, [pc, #84]	; (80187f8 <tan+0x60>)
 80187a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187a8:	4293      	cmp	r3, r2
 80187aa:	dc07      	bgt.n	80187bc <tan+0x24>
 80187ac:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80187f0 <tan+0x58>
 80187b0:	2001      	movs	r0, #1
 80187b2:	b005      	add	sp, #20
 80187b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80187b8:	f000 be62 	b.w	8019480 <__kernel_tan>
 80187bc:	4a0f      	ldr	r2, [pc, #60]	; (80187fc <tan+0x64>)
 80187be:	4293      	cmp	r3, r2
 80187c0:	dd04      	ble.n	80187cc <tan+0x34>
 80187c2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80187c6:	b005      	add	sp, #20
 80187c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80187cc:	4668      	mov	r0, sp
 80187ce:	f000 fa7f 	bl	8018cd0 <__ieee754_rem_pio2>
 80187d2:	0040      	lsls	r0, r0, #1
 80187d4:	f000 0002 	and.w	r0, r0, #2
 80187d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80187dc:	ed9d 0b00 	vldr	d0, [sp]
 80187e0:	f1c0 0001 	rsb	r0, r0, #1
 80187e4:	f000 fe4c 	bl	8019480 <__kernel_tan>
 80187e8:	e7ed      	b.n	80187c6 <tan+0x2e>
 80187ea:	bf00      	nop
 80187ec:	f3af 8000 	nop.w
	...
 80187f8:	3fe921fb 	.word	0x3fe921fb
 80187fc:	7fefffff 	.word	0x7fefffff

08018800 <__kernel_tanf>:
 8018800:	b508      	push	{r3, lr}
 8018802:	ee10 3a10 	vmov	r3, s0
 8018806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801880a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801880e:	eef0 7a40 	vmov.f32	s15, s0
 8018812:	da17      	bge.n	8018844 <__kernel_tanf+0x44>
 8018814:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8018818:	ee17 1a10 	vmov	r1, s14
 801881c:	bb41      	cbnz	r1, 8018870 <__kernel_tanf+0x70>
 801881e:	1c43      	adds	r3, r0, #1
 8018820:	4313      	orrs	r3, r2
 8018822:	d108      	bne.n	8018836 <__kernel_tanf+0x36>
 8018824:	f7ff ff16 	bl	8018654 <fabsf>
 8018828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801882c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018830:	eeb0 0a67 	vmov.f32	s0, s15
 8018834:	bd08      	pop	{r3, pc}
 8018836:	2801      	cmp	r0, #1
 8018838:	d0fa      	beq.n	8018830 <__kernel_tanf+0x30>
 801883a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801883e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018842:	e7f5      	b.n	8018830 <__kernel_tanf+0x30>
 8018844:	494c      	ldr	r1, [pc, #304]	; (8018978 <__kernel_tanf+0x178>)
 8018846:	428a      	cmp	r2, r1
 8018848:	db12      	blt.n	8018870 <__kernel_tanf+0x70>
 801884a:	2b00      	cmp	r3, #0
 801884c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801897c <__kernel_tanf+0x17c>
 8018850:	bfb8      	it	lt
 8018852:	eef1 7a40 	vneglt.f32	s15, s0
 8018856:	ee37 7a67 	vsub.f32	s14, s14, s15
 801885a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8018980 <__kernel_tanf+0x180>
 801885e:	bfb8      	it	lt
 8018860:	eef1 0a60 	vneglt.f32	s1, s1
 8018864:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018868:	eddf 0a46 	vldr	s1, [pc, #280]	; 8018984 <__kernel_tanf+0x184>
 801886c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018870:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8018874:	eddf 5a44 	vldr	s11, [pc, #272]	; 8018988 <__kernel_tanf+0x188>
 8018878:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801898c <__kernel_tanf+0x18c>
 801887c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8018990 <__kernel_tanf+0x190>
 8018880:	493d      	ldr	r1, [pc, #244]	; (8018978 <__kernel_tanf+0x178>)
 8018882:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018886:	428a      	cmp	r2, r1
 8018888:	eea7 6a25 	vfma.f32	s12, s14, s11
 801888c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8018994 <__kernel_tanf+0x194>
 8018890:	eee6 5a07 	vfma.f32	s11, s12, s14
 8018894:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8018998 <__kernel_tanf+0x198>
 8018898:	eea5 6a87 	vfma.f32	s12, s11, s14
 801889c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801899c <__kernel_tanf+0x19c>
 80188a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80188a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80189a0 <__kernel_tanf+0x1a0>
 80188a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80188ac:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80189a4 <__kernel_tanf+0x1a4>
 80188b0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80188b4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80189a8 <__kernel_tanf+0x1a8>
 80188b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80188bc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80189ac <__kernel_tanf+0x1ac>
 80188c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80188c4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80189b0 <__kernel_tanf+0x1b0>
 80188c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80188cc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80189b4 <__kernel_tanf+0x1b4>
 80188d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80188d4:	eeb0 7a46 	vmov.f32	s14, s12
 80188d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80188dc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80188e0:	eeb0 6a60 	vmov.f32	s12, s1
 80188e4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80188e8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80189b8 <__kernel_tanf+0x1b8>
 80188ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80188f0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80188f4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80188f8:	db1d      	blt.n	8018936 <__kernel_tanf+0x136>
 80188fa:	ee07 0a10 	vmov	s14, r0
 80188fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018902:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8018906:	ee76 6a87 	vadd.f32	s13, s13, s14
 801890a:	179b      	asrs	r3, r3, #30
 801890c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8018910:	f003 0302 	and.w	r3, r3, #2
 8018914:	f1c3 0301 	rsb	r3, r3, #1
 8018918:	ee76 6a60 	vsub.f32	s13, s12, s1
 801891c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018920:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018924:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018928:	ee07 3a90 	vmov	s15, r3
 801892c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018934:	e77c      	b.n	8018830 <__kernel_tanf+0x30>
 8018936:	2801      	cmp	r0, #1
 8018938:	d01b      	beq.n	8018972 <__kernel_tanf+0x172>
 801893a:	4b20      	ldr	r3, [pc, #128]	; (80189bc <__kernel_tanf+0x1bc>)
 801893c:	ee16 2a90 	vmov	r2, s13
 8018940:	401a      	ands	r2, r3
 8018942:	ee05 2a90 	vmov	s11, r2
 8018946:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801894a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801894e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018952:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8018956:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801895a:	ee16 2a10 	vmov	r2, s12
 801895e:	4013      	ands	r3, r2
 8018960:	ee07 3a90 	vmov	s15, r3
 8018964:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018968:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801896c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8018970:	e75e      	b.n	8018830 <__kernel_tanf+0x30>
 8018972:	eef0 7a66 	vmov.f32	s15, s13
 8018976:	e75b      	b.n	8018830 <__kernel_tanf+0x30>
 8018978:	3f2ca140 	.word	0x3f2ca140
 801897c:	3f490fda 	.word	0x3f490fda
 8018980:	33222168 	.word	0x33222168
 8018984:	00000000 	.word	0x00000000
 8018988:	b79bae5f 	.word	0xb79bae5f
 801898c:	38a3f445 	.word	0x38a3f445
 8018990:	37d95384 	.word	0x37d95384
 8018994:	3a1a26c8 	.word	0x3a1a26c8
 8018998:	3b6b6916 	.word	0x3b6b6916
 801899c:	3cb327a4 	.word	0x3cb327a4
 80189a0:	3e088889 	.word	0x3e088889
 80189a4:	3895c07a 	.word	0x3895c07a
 80189a8:	398137b9 	.word	0x398137b9
 80189ac:	3abede48 	.word	0x3abede48
 80189b0:	3c11371f 	.word	0x3c11371f
 80189b4:	3d5d0dd1 	.word	0x3d5d0dd1
 80189b8:	3eaaaaab 	.word	0x3eaaaaab
 80189bc:	fffff000 	.word	0xfffff000

080189c0 <__ieee754_sqrtf>:
 80189c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80189c4:	4770      	bx	lr
	...

080189c8 <__ieee754_log10f>:
 80189c8:	b508      	push	{r3, lr}
 80189ca:	ee10 2a10 	vmov	r2, s0
 80189ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80189d2:	ed2d 8b02 	vpush	{d8}
 80189d6:	d108      	bne.n	80189ea <__ieee754_log10f+0x22>
 80189d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8018a60 <__ieee754_log10f+0x98>
 80189dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018a64 <__ieee754_log10f+0x9c>
 80189e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80189e4:	ecbd 8b02 	vpop	{d8}
 80189e8:	bd08      	pop	{r3, pc}
 80189ea:	2a00      	cmp	r2, #0
 80189ec:	da02      	bge.n	80189f4 <__ieee754_log10f+0x2c>
 80189ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 80189f2:	e7f3      	b.n	80189dc <__ieee754_log10f+0x14>
 80189f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80189f8:	db02      	blt.n	8018a00 <__ieee754_log10f+0x38>
 80189fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80189fe:	e7f1      	b.n	80189e4 <__ieee754_log10f+0x1c>
 8018a00:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8018a04:	bfbf      	itttt	lt
 8018a06:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8018a68 <__ieee754_log10f+0xa0>
 8018a0a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018a0e:	f06f 0118 	mvnlt.w	r1, #24
 8018a12:	ee17 2a90 	vmovlt	r2, s15
 8018a16:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8018a1a:	bfa8      	it	ge
 8018a1c:	2100      	movge	r1, #0
 8018a1e:	3b7f      	subs	r3, #127	; 0x7f
 8018a20:	440b      	add	r3, r1
 8018a22:	0fd9      	lsrs	r1, r3, #31
 8018a24:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8018a28:	ee07 3a90 	vmov	s15, r3
 8018a2c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018a30:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8018a34:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018a38:	ee00 3a10 	vmov	s0, r3
 8018a3c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018a40:	f7ff fa10 	bl	8017e64 <logf>
 8018a44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018a6c <__ieee754_log10f+0xa4>
 8018a48:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a4c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018a70 <__ieee754_log10f+0xa8>
 8018a50:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018a54:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018a74 <__ieee754_log10f+0xac>
 8018a58:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018a5c:	e7c2      	b.n	80189e4 <__ieee754_log10f+0x1c>
 8018a5e:	bf00      	nop
 8018a60:	cc000000 	.word	0xcc000000
 8018a64:	00000000 	.word	0x00000000
 8018a68:	4c000000 	.word	0x4c000000
 8018a6c:	3ede5bd9 	.word	0x3ede5bd9
 8018a70:	355427db 	.word	0x355427db
 8018a74:	3e9a2080 	.word	0x3e9a2080

08018a78 <__ieee754_rem_pio2f>:
 8018a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a7a:	ee10 6a10 	vmov	r6, s0
 8018a7e:	4b86      	ldr	r3, [pc, #536]	; (8018c98 <__ieee754_rem_pio2f+0x220>)
 8018a80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018a84:	429d      	cmp	r5, r3
 8018a86:	b087      	sub	sp, #28
 8018a88:	4604      	mov	r4, r0
 8018a8a:	dc05      	bgt.n	8018a98 <__ieee754_rem_pio2f+0x20>
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	ed80 0a00 	vstr	s0, [r0]
 8018a92:	6043      	str	r3, [r0, #4]
 8018a94:	2000      	movs	r0, #0
 8018a96:	e020      	b.n	8018ada <__ieee754_rem_pio2f+0x62>
 8018a98:	4b80      	ldr	r3, [pc, #512]	; (8018c9c <__ieee754_rem_pio2f+0x224>)
 8018a9a:	429d      	cmp	r5, r3
 8018a9c:	dc38      	bgt.n	8018b10 <__ieee754_rem_pio2f+0x98>
 8018a9e:	2e00      	cmp	r6, #0
 8018aa0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8018ca0 <__ieee754_rem_pio2f+0x228>
 8018aa4:	4b7f      	ldr	r3, [pc, #508]	; (8018ca4 <__ieee754_rem_pio2f+0x22c>)
 8018aa6:	f025 050f 	bic.w	r5, r5, #15
 8018aaa:	dd18      	ble.n	8018ade <__ieee754_rem_pio2f+0x66>
 8018aac:	429d      	cmp	r5, r3
 8018aae:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018ab2:	bf09      	itett	eq
 8018ab4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8018ca8 <__ieee754_rem_pio2f+0x230>
 8018ab8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8018cac <__ieee754_rem_pio2f+0x234>
 8018abc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018ac0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8018cb0 <__ieee754_rem_pio2f+0x238>
 8018ac4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8018ac8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018acc:	edc0 6a00 	vstr	s13, [r0]
 8018ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ad4:	edc0 7a01 	vstr	s15, [r0, #4]
 8018ad8:	2001      	movs	r0, #1
 8018ada:	b007      	add	sp, #28
 8018adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ade:	429d      	cmp	r5, r3
 8018ae0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018ae4:	bf09      	itett	eq
 8018ae6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8018ca8 <__ieee754_rem_pio2f+0x230>
 8018aea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8018cac <__ieee754_rem_pio2f+0x234>
 8018aee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018af2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8018cb0 <__ieee754_rem_pio2f+0x238>
 8018af6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018afa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018afe:	edc0 6a00 	vstr	s13, [r0]
 8018b02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b06:	edc0 7a01 	vstr	s15, [r0, #4]
 8018b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b0e:	e7e4      	b.n	8018ada <__ieee754_rem_pio2f+0x62>
 8018b10:	4b68      	ldr	r3, [pc, #416]	; (8018cb4 <__ieee754_rem_pio2f+0x23c>)
 8018b12:	429d      	cmp	r5, r3
 8018b14:	dc71      	bgt.n	8018bfa <__ieee754_rem_pio2f+0x182>
 8018b16:	f7ff fd9d 	bl	8018654 <fabsf>
 8018b1a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8018cb8 <__ieee754_rem_pio2f+0x240>
 8018b1e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018b22:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018b2e:	ee17 0a90 	vmov	r0, s15
 8018b32:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8018ca0 <__ieee754_rem_pio2f+0x228>
 8018b36:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018b3a:	281f      	cmp	r0, #31
 8018b3c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8018cac <__ieee754_rem_pio2f+0x234>
 8018b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018b44:	eeb1 6a47 	vneg.f32	s12, s14
 8018b48:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018b4c:	ee16 2a90 	vmov	r2, s13
 8018b50:	dc1c      	bgt.n	8018b8c <__ieee754_rem_pio2f+0x114>
 8018b52:	495a      	ldr	r1, [pc, #360]	; (8018cbc <__ieee754_rem_pio2f+0x244>)
 8018b54:	1e47      	subs	r7, r0, #1
 8018b56:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8018b5a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8018b5e:	428b      	cmp	r3, r1
 8018b60:	d014      	beq.n	8018b8c <__ieee754_rem_pio2f+0x114>
 8018b62:	6022      	str	r2, [r4, #0]
 8018b64:	ed94 7a00 	vldr	s14, [r4]
 8018b68:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018b6c:	2e00      	cmp	r6, #0
 8018b6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018b72:	ed84 0a01 	vstr	s0, [r4, #4]
 8018b76:	dab0      	bge.n	8018ada <__ieee754_rem_pio2f+0x62>
 8018b78:	eeb1 7a47 	vneg.f32	s14, s14
 8018b7c:	eeb1 0a40 	vneg.f32	s0, s0
 8018b80:	ed84 7a00 	vstr	s14, [r4]
 8018b84:	ed84 0a01 	vstr	s0, [r4, #4]
 8018b88:	4240      	negs	r0, r0
 8018b8a:	e7a6      	b.n	8018ada <__ieee754_rem_pio2f+0x62>
 8018b8c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018b90:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8018b94:	2908      	cmp	r1, #8
 8018b96:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018b9a:	dde2      	ble.n	8018b62 <__ieee754_rem_pio2f+0xea>
 8018b9c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8018ca8 <__ieee754_rem_pio2f+0x230>
 8018ba0:	eef0 6a40 	vmov.f32	s13, s0
 8018ba4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018ba8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018bac:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018bb0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8018cb0 <__ieee754_rem_pio2f+0x238>
 8018bb4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018bb8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018bbc:	ee15 2a90 	vmov	r2, s11
 8018bc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018bc4:	1a5b      	subs	r3, r3, r1
 8018bc6:	2b19      	cmp	r3, #25
 8018bc8:	dc04      	bgt.n	8018bd4 <__ieee754_rem_pio2f+0x15c>
 8018bca:	edc4 5a00 	vstr	s11, [r4]
 8018bce:	eeb0 0a66 	vmov.f32	s0, s13
 8018bd2:	e7c7      	b.n	8018b64 <__ieee754_rem_pio2f+0xec>
 8018bd4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8018cc0 <__ieee754_rem_pio2f+0x248>
 8018bd8:	eeb0 0a66 	vmov.f32	s0, s13
 8018bdc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018be0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018be4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8018cc4 <__ieee754_rem_pio2f+0x24c>
 8018be8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018bec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018bf0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018bf4:	ed84 7a00 	vstr	s14, [r4]
 8018bf8:	e7b4      	b.n	8018b64 <__ieee754_rem_pio2f+0xec>
 8018bfa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018bfe:	db06      	blt.n	8018c0e <__ieee754_rem_pio2f+0x196>
 8018c00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018c04:	edc0 7a01 	vstr	s15, [r0, #4]
 8018c08:	edc0 7a00 	vstr	s15, [r0]
 8018c0c:	e742      	b.n	8018a94 <__ieee754_rem_pio2f+0x1c>
 8018c0e:	15ea      	asrs	r2, r5, #23
 8018c10:	3a86      	subs	r2, #134	; 0x86
 8018c12:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018c16:	ee07 3a90 	vmov	s15, r3
 8018c1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018c1e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8018cc8 <__ieee754_rem_pio2f+0x250>
 8018c22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c2a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018c2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018c32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018c36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c3e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018c42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4e:	edcd 7a05 	vstr	s15, [sp, #20]
 8018c52:	d11e      	bne.n	8018c92 <__ieee754_rem_pio2f+0x21a>
 8018c54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c5c:	bf14      	ite	ne
 8018c5e:	2302      	movne	r3, #2
 8018c60:	2301      	moveq	r3, #1
 8018c62:	491a      	ldr	r1, [pc, #104]	; (8018ccc <__ieee754_rem_pio2f+0x254>)
 8018c64:	9101      	str	r1, [sp, #4]
 8018c66:	2102      	movs	r1, #2
 8018c68:	9100      	str	r1, [sp, #0]
 8018c6a:	a803      	add	r0, sp, #12
 8018c6c:	4621      	mov	r1, r4
 8018c6e:	f000 fec9 	bl	8019a04 <__kernel_rem_pio2f>
 8018c72:	2e00      	cmp	r6, #0
 8018c74:	f6bf af31 	bge.w	8018ada <__ieee754_rem_pio2f+0x62>
 8018c78:	edd4 7a00 	vldr	s15, [r4]
 8018c7c:	eef1 7a67 	vneg.f32	s15, s15
 8018c80:	edc4 7a00 	vstr	s15, [r4]
 8018c84:	edd4 7a01 	vldr	s15, [r4, #4]
 8018c88:	eef1 7a67 	vneg.f32	s15, s15
 8018c8c:	edc4 7a01 	vstr	s15, [r4, #4]
 8018c90:	e77a      	b.n	8018b88 <__ieee754_rem_pio2f+0x110>
 8018c92:	2303      	movs	r3, #3
 8018c94:	e7e5      	b.n	8018c62 <__ieee754_rem_pio2f+0x1ea>
 8018c96:	bf00      	nop
 8018c98:	3f490fd8 	.word	0x3f490fd8
 8018c9c:	4016cbe3 	.word	0x4016cbe3
 8018ca0:	3fc90f80 	.word	0x3fc90f80
 8018ca4:	3fc90fd0 	.word	0x3fc90fd0
 8018ca8:	37354400 	.word	0x37354400
 8018cac:	37354443 	.word	0x37354443
 8018cb0:	2e85a308 	.word	0x2e85a308
 8018cb4:	43490f80 	.word	0x43490f80
 8018cb8:	3f22f984 	.word	0x3f22f984
 8018cbc:	08029470 	.word	0x08029470
 8018cc0:	2e85a300 	.word	0x2e85a300
 8018cc4:	248d3132 	.word	0x248d3132
 8018cc8:	43800000 	.word	0x43800000
 8018ccc:	080294f0 	.word	0x080294f0

08018cd0 <__ieee754_rem_pio2>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	eeb0 7b40 	vmov.f64	d7, d0
 8018cd6:	ee17 5a90 	vmov	r5, s15
 8018cda:	4b99      	ldr	r3, [pc, #612]	; (8018f40 <__ieee754_rem_pio2+0x270>)
 8018cdc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018ce0:	429e      	cmp	r6, r3
 8018ce2:	b088      	sub	sp, #32
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	dc07      	bgt.n	8018cf8 <__ieee754_rem_pio2+0x28>
 8018ce8:	2200      	movs	r2, #0
 8018cea:	2300      	movs	r3, #0
 8018cec:	ed84 0b00 	vstr	d0, [r4]
 8018cf0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	e01b      	b.n	8018d30 <__ieee754_rem_pio2+0x60>
 8018cf8:	4b92      	ldr	r3, [pc, #584]	; (8018f44 <__ieee754_rem_pio2+0x274>)
 8018cfa:	429e      	cmp	r6, r3
 8018cfc:	dc3b      	bgt.n	8018d76 <__ieee754_rem_pio2+0xa6>
 8018cfe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8018d02:	2d00      	cmp	r5, #0
 8018d04:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8018f00 <__ieee754_rem_pio2+0x230>
 8018d08:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8018d0c:	dd19      	ble.n	8018d42 <__ieee754_rem_pio2+0x72>
 8018d0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018d12:	429e      	cmp	r6, r3
 8018d14:	d00e      	beq.n	8018d34 <__ieee754_rem_pio2+0x64>
 8018d16:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8018f08 <__ieee754_rem_pio2+0x238>
 8018d1a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8018d1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018d22:	ed84 5b00 	vstr	d5, [r4]
 8018d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018d2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8018d2e:	2001      	movs	r0, #1
 8018d30:	b008      	add	sp, #32
 8018d32:	bd70      	pop	{r4, r5, r6, pc}
 8018d34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018f10 <__ieee754_rem_pio2+0x240>
 8018d38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018d3c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8018f18 <__ieee754_rem_pio2+0x248>
 8018d40:	e7eb      	b.n	8018d1a <__ieee754_rem_pio2+0x4a>
 8018d42:	429e      	cmp	r6, r3
 8018d44:	ee30 7b06 	vadd.f64	d7, d0, d6
 8018d48:	d00e      	beq.n	8018d68 <__ieee754_rem_pio2+0x98>
 8018d4a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8018f08 <__ieee754_rem_pio2+0x238>
 8018d4e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018d52:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018d56:	ed84 5b00 	vstr	d5, [r4]
 8018d5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d62:	ed84 7b02 	vstr	d7, [r4, #8]
 8018d66:	e7e3      	b.n	8018d30 <__ieee754_rem_pio2+0x60>
 8018d68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018f10 <__ieee754_rem_pio2+0x240>
 8018d6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018d70:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8018f18 <__ieee754_rem_pio2+0x248>
 8018d74:	e7eb      	b.n	8018d4e <__ieee754_rem_pio2+0x7e>
 8018d76:	4b74      	ldr	r3, [pc, #464]	; (8018f48 <__ieee754_rem_pio2+0x278>)
 8018d78:	429e      	cmp	r6, r3
 8018d7a:	dc70      	bgt.n	8018e5e <__ieee754_rem_pio2+0x18e>
 8018d7c:	f000 fdb8 	bl	80198f0 <fabs>
 8018d80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8018d84:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8018f20 <__ieee754_rem_pio2+0x250>
 8018d88:	eea0 7b06 	vfma.f64	d7, d0, d6
 8018d8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8018d90:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8018d94:	ee17 0a90 	vmov	r0, s15
 8018d98:	eeb1 4b45 	vneg.f64	d4, d5
 8018d9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8018f00 <__ieee754_rem_pio2+0x230>
 8018da0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8018da4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8018f08 <__ieee754_rem_pio2+0x238>
 8018da8:	281f      	cmp	r0, #31
 8018daa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8018dae:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018db2:	dc08      	bgt.n	8018dc6 <__ieee754_rem_pio2+0xf6>
 8018db4:	4b65      	ldr	r3, [pc, #404]	; (8018f4c <__ieee754_rem_pio2+0x27c>)
 8018db6:	1e42      	subs	r2, r0, #1
 8018db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dbc:	42b3      	cmp	r3, r6
 8018dbe:	d002      	beq.n	8018dc6 <__ieee754_rem_pio2+0xf6>
 8018dc0:	ed84 6b00 	vstr	d6, [r4]
 8018dc4:	e024      	b.n	8018e10 <__ieee754_rem_pio2+0x140>
 8018dc6:	ee16 3a90 	vmov	r3, s13
 8018dca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018dce:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8018dd2:	2b10      	cmp	r3, #16
 8018dd4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8018dd8:	ddf2      	ble.n	8018dc0 <__ieee754_rem_pio2+0xf0>
 8018dda:	eeb0 6b40 	vmov.f64	d6, d0
 8018dde:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8018f10 <__ieee754_rem_pio2+0x240>
 8018de2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8018de6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8018dea:	eea4 7b03 	vfma.f64	d7, d4, d3
 8018dee:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8018f18 <__ieee754_rem_pio2+0x248>
 8018df2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8018df6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8018dfa:	ee13 3a90 	vmov	r3, s7
 8018dfe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8018e02:	1ad3      	subs	r3, r2, r3
 8018e04:	2b31      	cmp	r3, #49	; 0x31
 8018e06:	dc17      	bgt.n	8018e38 <__ieee754_rem_pio2+0x168>
 8018e08:	eeb0 0b46 	vmov.f64	d0, d6
 8018e0c:	ed84 3b00 	vstr	d3, [r4]
 8018e10:	ed94 6b00 	vldr	d6, [r4]
 8018e14:	2d00      	cmp	r5, #0
 8018e16:	ee30 0b46 	vsub.f64	d0, d0, d6
 8018e1a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018e1e:	ed84 0b02 	vstr	d0, [r4, #8]
 8018e22:	da85      	bge.n	8018d30 <__ieee754_rem_pio2+0x60>
 8018e24:	eeb1 6b46 	vneg.f64	d6, d6
 8018e28:	eeb1 0b40 	vneg.f64	d0, d0
 8018e2c:	ed84 6b00 	vstr	d6, [r4]
 8018e30:	ed84 0b02 	vstr	d0, [r4, #8]
 8018e34:	4240      	negs	r0, r0
 8018e36:	e77b      	b.n	8018d30 <__ieee754_rem_pio2+0x60>
 8018e38:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8018f28 <__ieee754_rem_pio2+0x258>
 8018e3c:	eeb0 0b46 	vmov.f64	d0, d6
 8018e40:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018e44:	ee36 6b40 	vsub.f64	d6, d6, d0
 8018e48:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018e4c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8018f30 <__ieee754_rem_pio2+0x260>
 8018e50:	eeb0 7b46 	vmov.f64	d7, d6
 8018e54:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8018e58:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018e5c:	e7b0      	b.n	8018dc0 <__ieee754_rem_pio2+0xf0>
 8018e5e:	4b3c      	ldr	r3, [pc, #240]	; (8018f50 <__ieee754_rem_pio2+0x280>)
 8018e60:	429e      	cmp	r6, r3
 8018e62:	dd06      	ble.n	8018e72 <__ieee754_rem_pio2+0x1a2>
 8018e64:	ee30 7b40 	vsub.f64	d7, d0, d0
 8018e68:	ed80 7b02 	vstr	d7, [r0, #8]
 8018e6c:	ed80 7b00 	vstr	d7, [r0]
 8018e70:	e740      	b.n	8018cf4 <__ieee754_rem_pio2+0x24>
 8018e72:	1532      	asrs	r2, r6, #20
 8018e74:	ee10 0a10 	vmov	r0, s0
 8018e78:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8018e7c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8018e80:	ec41 0b17 	vmov	d7, r0, r1
 8018e84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018e88:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8018f38 <__ieee754_rem_pio2+0x268>
 8018e8c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018e90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e94:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018e98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018e9c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8018ea0:	a808      	add	r0, sp, #32
 8018ea2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8018ea6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018eaa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8018eae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8018eb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018eb6:	2103      	movs	r1, #3
 8018eb8:	ed30 7b02 	vldmdb	r0!, {d7}
 8018ebc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8018eca:	d0f5      	beq.n	8018eb8 <__ieee754_rem_pio2+0x1e8>
 8018ecc:	4921      	ldr	r1, [pc, #132]	; (8018f54 <__ieee754_rem_pio2+0x284>)
 8018ece:	9101      	str	r1, [sp, #4]
 8018ed0:	2102      	movs	r1, #2
 8018ed2:	9100      	str	r1, [sp, #0]
 8018ed4:	a802      	add	r0, sp, #8
 8018ed6:	4621      	mov	r1, r4
 8018ed8:	f000 f83e 	bl	8018f58 <__kernel_rem_pio2>
 8018edc:	2d00      	cmp	r5, #0
 8018ede:	f6bf af27 	bge.w	8018d30 <__ieee754_rem_pio2+0x60>
 8018ee2:	ed94 7b00 	vldr	d7, [r4]
 8018ee6:	eeb1 7b47 	vneg.f64	d7, d7
 8018eea:	ed84 7b00 	vstr	d7, [r4]
 8018eee:	ed94 7b02 	vldr	d7, [r4, #8]
 8018ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8018ef6:	ed84 7b02 	vstr	d7, [r4, #8]
 8018efa:	e79b      	b.n	8018e34 <__ieee754_rem_pio2+0x164>
 8018efc:	f3af 8000 	nop.w
 8018f00:	54400000 	.word	0x54400000
 8018f04:	3ff921fb 	.word	0x3ff921fb
 8018f08:	1a626331 	.word	0x1a626331
 8018f0c:	3dd0b461 	.word	0x3dd0b461
 8018f10:	1a600000 	.word	0x1a600000
 8018f14:	3dd0b461 	.word	0x3dd0b461
 8018f18:	2e037073 	.word	0x2e037073
 8018f1c:	3ba3198a 	.word	0x3ba3198a
 8018f20:	6dc9c883 	.word	0x6dc9c883
 8018f24:	3fe45f30 	.word	0x3fe45f30
 8018f28:	2e000000 	.word	0x2e000000
 8018f2c:	3ba3198a 	.word	0x3ba3198a
 8018f30:	252049c1 	.word	0x252049c1
 8018f34:	397b839a 	.word	0x397b839a
 8018f38:	00000000 	.word	0x00000000
 8018f3c:	41700000 	.word	0x41700000
 8018f40:	3fe921fb 	.word	0x3fe921fb
 8018f44:	4002d97b 	.word	0x4002d97b
 8018f48:	413921fb 	.word	0x413921fb
 8018f4c:	08029808 	.word	0x08029808
 8018f50:	7fefffff 	.word	0x7fefffff
 8018f54:	08029888 	.word	0x08029888

08018f58 <__kernel_rem_pio2>:
 8018f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5c:	ed2d 8b06 	vpush	{d8-d10}
 8018f60:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8018f64:	460f      	mov	r7, r1
 8018f66:	9002      	str	r0, [sp, #8]
 8018f68:	49c3      	ldr	r1, [pc, #780]	; (8019278 <__kernel_rem_pio2+0x320>)
 8018f6a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8018f6c:	9301      	str	r3, [sp, #4]
 8018f6e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8018f72:	9901      	ldr	r1, [sp, #4]
 8018f74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8018f76:	f112 0f14 	cmn.w	r2, #20
 8018f7a:	bfa8      	it	ge
 8018f7c:	1ed0      	subge	r0, r2, #3
 8018f7e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8018f82:	bfaa      	itet	ge
 8018f84:	2418      	movge	r4, #24
 8018f86:	2000      	movlt	r0, #0
 8018f88:	fb90 f0f4 	sdivge	r0, r0, r4
 8018f8c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8019260 <__kernel_rem_pio2+0x308>
 8018f90:	f06f 0417 	mvn.w	r4, #23
 8018f94:	fb00 4404 	mla	r4, r0, r4, r4
 8018f98:	eba0 060a 	sub.w	r6, r0, sl
 8018f9c:	4414      	add	r4, r2
 8018f9e:	eb09 0c0a 	add.w	ip, r9, sl
 8018fa2:	ad1a      	add	r5, sp, #104	; 0x68
 8018fa4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8018fa8:	2200      	movs	r2, #0
 8018faa:	4562      	cmp	r2, ip
 8018fac:	dd10      	ble.n	8018fd0 <__kernel_rem_pio2+0x78>
 8018fae:	9a01      	ldr	r2, [sp, #4]
 8018fb0:	a91a      	add	r1, sp, #104	; 0x68
 8018fb2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8018fb6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8018fba:	f04f 0c00 	mov.w	ip, #0
 8018fbe:	45cc      	cmp	ip, r9
 8018fc0:	dc26      	bgt.n	8019010 <__kernel_rem_pio2+0xb8>
 8018fc2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8019260 <__kernel_rem_pio2+0x308>
 8018fc6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8018fca:	4616      	mov	r6, r2
 8018fcc:	2500      	movs	r5, #0
 8018fce:	e015      	b.n	8018ffc <__kernel_rem_pio2+0xa4>
 8018fd0:	42d6      	cmn	r6, r2
 8018fd2:	d409      	bmi.n	8018fe8 <__kernel_rem_pio2+0x90>
 8018fd4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8018fd8:	ee07 1a90 	vmov	s15, r1
 8018fdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018fe0:	eca5 7b02 	vstmia	r5!, {d7}
 8018fe4:	3201      	adds	r2, #1
 8018fe6:	e7e0      	b.n	8018faa <__kernel_rem_pio2+0x52>
 8018fe8:	eeb0 7b46 	vmov.f64	d7, d6
 8018fec:	e7f8      	b.n	8018fe0 <__kernel_rem_pio2+0x88>
 8018fee:	ecbe 5b02 	vldmia	lr!, {d5}
 8018ff2:	ed96 6b00 	vldr	d6, [r6]
 8018ff6:	3501      	adds	r5, #1
 8018ff8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018ffc:	4555      	cmp	r5, sl
 8018ffe:	f1a6 0608 	sub.w	r6, r6, #8
 8019002:	ddf4      	ble.n	8018fee <__kernel_rem_pio2+0x96>
 8019004:	eca8 7b02 	vstmia	r8!, {d7}
 8019008:	f10c 0c01 	add.w	ip, ip, #1
 801900c:	3208      	adds	r2, #8
 801900e:	e7d6      	b.n	8018fbe <__kernel_rem_pio2+0x66>
 8019010:	aa06      	add	r2, sp, #24
 8019012:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8019268 <__kernel_rem_pio2+0x310>
 8019016:	ed9f ab96 	vldr	d10, [pc, #600]	; 8019270 <__kernel_rem_pio2+0x318>
 801901a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801901e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019022:	9204      	str	r2, [sp, #16]
 8019024:	9303      	str	r3, [sp, #12]
 8019026:	464d      	mov	r5, r9
 8019028:	00eb      	lsls	r3, r5, #3
 801902a:	9305      	str	r3, [sp, #20]
 801902c:	ab92      	add	r3, sp, #584	; 0x248
 801902e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019032:	f10d 0b18 	add.w	fp, sp, #24
 8019036:	ab6a      	add	r3, sp, #424	; 0x1a8
 8019038:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801903c:	465e      	mov	r6, fp
 801903e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019042:	4628      	mov	r0, r5
 8019044:	2800      	cmp	r0, #0
 8019046:	f1a2 0208 	sub.w	r2, r2, #8
 801904a:	dc48      	bgt.n	80190de <__kernel_rem_pio2+0x186>
 801904c:	4620      	mov	r0, r4
 801904e:	f000 fc5b 	bl	8019908 <scalbn>
 8019052:	eeb0 8b40 	vmov.f64	d8, d0
 8019056:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801905a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801905e:	f000 ff43 	bl	8019ee8 <floor>
 8019062:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8019066:	eea0 8b47 	vfms.f64	d8, d0, d7
 801906a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801906e:	2c00      	cmp	r4, #0
 8019070:	ee17 8a90 	vmov	r8, s15
 8019074:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019078:	ee38 8b47 	vsub.f64	d8, d8, d7
 801907c:	dd41      	ble.n	8019102 <__kernel_rem_pio2+0x1aa>
 801907e:	1e68      	subs	r0, r5, #1
 8019080:	ab06      	add	r3, sp, #24
 8019082:	f1c4 0c18 	rsb	ip, r4, #24
 8019086:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801908a:	fa46 f20c 	asr.w	r2, r6, ip
 801908e:	4490      	add	r8, r2
 8019090:	fa02 f20c 	lsl.w	r2, r2, ip
 8019094:	1ab6      	subs	r6, r6, r2
 8019096:	f1c4 0217 	rsb	r2, r4, #23
 801909a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801909e:	4116      	asrs	r6, r2
 80190a0:	2e00      	cmp	r6, #0
 80190a2:	dd3d      	ble.n	8019120 <__kernel_rem_pio2+0x1c8>
 80190a4:	f04f 0c00 	mov.w	ip, #0
 80190a8:	f108 0801 	add.w	r8, r8, #1
 80190ac:	4660      	mov	r0, ip
 80190ae:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80190b2:	4565      	cmp	r5, ip
 80190b4:	dc6a      	bgt.n	801918c <__kernel_rem_pio2+0x234>
 80190b6:	2c00      	cmp	r4, #0
 80190b8:	dd04      	ble.n	80190c4 <__kernel_rem_pio2+0x16c>
 80190ba:	2c01      	cmp	r4, #1
 80190bc:	d07b      	beq.n	80191b6 <__kernel_rem_pio2+0x25e>
 80190be:	2c02      	cmp	r4, #2
 80190c0:	f000 8083 	beq.w	80191ca <__kernel_rem_pio2+0x272>
 80190c4:	2e02      	cmp	r6, #2
 80190c6:	d12b      	bne.n	8019120 <__kernel_rem_pio2+0x1c8>
 80190c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80190cc:	ee30 8b48 	vsub.f64	d8, d0, d8
 80190d0:	b330      	cbz	r0, 8019120 <__kernel_rem_pio2+0x1c8>
 80190d2:	4620      	mov	r0, r4
 80190d4:	f000 fc18 	bl	8019908 <scalbn>
 80190d8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80190dc:	e020      	b.n	8019120 <__kernel_rem_pio2+0x1c8>
 80190de:	ee20 7b09 	vmul.f64	d7, d0, d9
 80190e2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80190e6:	3801      	subs	r0, #1
 80190e8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80190ec:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80190f0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80190f4:	eca6 0a01 	vstmia	r6!, {s0}
 80190f8:	ed92 0b00 	vldr	d0, [r2]
 80190fc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8019100:	e7a0      	b.n	8019044 <__kernel_rem_pio2+0xec>
 8019102:	d105      	bne.n	8019110 <__kernel_rem_pio2+0x1b8>
 8019104:	1e6a      	subs	r2, r5, #1
 8019106:	ab06      	add	r3, sp, #24
 8019108:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801910c:	15f6      	asrs	r6, r6, #23
 801910e:	e7c7      	b.n	80190a0 <__kernel_rem_pio2+0x148>
 8019110:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019114:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801911c:	da34      	bge.n	8019188 <__kernel_rem_pio2+0x230>
 801911e:	2600      	movs	r6, #0
 8019120:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019128:	f040 80aa 	bne.w	8019280 <__kernel_rem_pio2+0x328>
 801912c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8019130:	4658      	mov	r0, fp
 8019132:	2200      	movs	r2, #0
 8019134:	4548      	cmp	r0, r9
 8019136:	da50      	bge.n	80191da <__kernel_rem_pio2+0x282>
 8019138:	2a00      	cmp	r2, #0
 801913a:	d06b      	beq.n	8019214 <__kernel_rem_pio2+0x2bc>
 801913c:	ab06      	add	r3, sp, #24
 801913e:	3c18      	subs	r4, #24
 8019140:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8019144:	2b00      	cmp	r3, #0
 8019146:	f000 8087 	beq.w	8019258 <__kernel_rem_pio2+0x300>
 801914a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801914e:	4620      	mov	r0, r4
 8019150:	f000 fbda 	bl	8019908 <scalbn>
 8019154:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8019268 <__kernel_rem_pio2+0x310>
 8019158:	f10b 0201 	add.w	r2, fp, #1
 801915c:	a96a      	add	r1, sp, #424	; 0x1a8
 801915e:	00d3      	lsls	r3, r2, #3
 8019160:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019164:	465a      	mov	r2, fp
 8019166:	2a00      	cmp	r2, #0
 8019168:	f280 80b8 	bge.w	80192dc <__kernel_rem_pio2+0x384>
 801916c:	465a      	mov	r2, fp
 801916e:	2a00      	cmp	r2, #0
 8019170:	f2c0 80d6 	blt.w	8019320 <__kernel_rem_pio2+0x3c8>
 8019174:	a96a      	add	r1, sp, #424	; 0x1a8
 8019176:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801917a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8019260 <__kernel_rem_pio2+0x308>
 801917e:	4d3f      	ldr	r5, [pc, #252]	; (801927c <__kernel_rem_pio2+0x324>)
 8019180:	2000      	movs	r0, #0
 8019182:	ebab 0102 	sub.w	r1, fp, r2
 8019186:	e0c0      	b.n	801930a <__kernel_rem_pio2+0x3b2>
 8019188:	2602      	movs	r6, #2
 801918a:	e78b      	b.n	80190a4 <__kernel_rem_pio2+0x14c>
 801918c:	f8db 2000 	ldr.w	r2, [fp]
 8019190:	b958      	cbnz	r0, 80191aa <__kernel_rem_pio2+0x252>
 8019192:	b122      	cbz	r2, 801919e <__kernel_rem_pio2+0x246>
 8019194:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8019198:	f8cb 2000 	str.w	r2, [fp]
 801919c:	2201      	movs	r2, #1
 801919e:	f10c 0c01 	add.w	ip, ip, #1
 80191a2:	f10b 0b04 	add.w	fp, fp, #4
 80191a6:	4610      	mov	r0, r2
 80191a8:	e783      	b.n	80190b2 <__kernel_rem_pio2+0x15a>
 80191aa:	ebae 0202 	sub.w	r2, lr, r2
 80191ae:	f8cb 2000 	str.w	r2, [fp]
 80191b2:	4602      	mov	r2, r0
 80191b4:	e7f3      	b.n	801919e <__kernel_rem_pio2+0x246>
 80191b6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80191ba:	ab06      	add	r3, sp, #24
 80191bc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80191c0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80191c4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80191c8:	e77c      	b.n	80190c4 <__kernel_rem_pio2+0x16c>
 80191ca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80191ce:	ab06      	add	r3, sp, #24
 80191d0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80191d4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80191d8:	e7f4      	b.n	80191c4 <__kernel_rem_pio2+0x26c>
 80191da:	ab06      	add	r3, sp, #24
 80191dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80191e0:	3801      	subs	r0, #1
 80191e2:	431a      	orrs	r2, r3
 80191e4:	e7a6      	b.n	8019134 <__kernel_rem_pio2+0x1dc>
 80191e6:	3201      	adds	r2, #1
 80191e8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80191ec:	2e00      	cmp	r6, #0
 80191ee:	d0fa      	beq.n	80191e6 <__kernel_rem_pio2+0x28e>
 80191f0:	9b05      	ldr	r3, [sp, #20]
 80191f2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80191f6:	eb0d 0003 	add.w	r0, sp, r3
 80191fa:	9b01      	ldr	r3, [sp, #4]
 80191fc:	18ee      	adds	r6, r5, r3
 80191fe:	ab1a      	add	r3, sp, #104	; 0x68
 8019200:	f105 0c01 	add.w	ip, r5, #1
 8019204:	3898      	subs	r0, #152	; 0x98
 8019206:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801920a:	442a      	add	r2, r5
 801920c:	4562      	cmp	r2, ip
 801920e:	da04      	bge.n	801921a <__kernel_rem_pio2+0x2c2>
 8019210:	4615      	mov	r5, r2
 8019212:	e709      	b.n	8019028 <__kernel_rem_pio2+0xd0>
 8019214:	9804      	ldr	r0, [sp, #16]
 8019216:	2201      	movs	r2, #1
 8019218:	e7e6      	b.n	80191e8 <__kernel_rem_pio2+0x290>
 801921a:	9b03      	ldr	r3, [sp, #12]
 801921c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019220:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019224:	9305      	str	r3, [sp, #20]
 8019226:	ee07 3a90 	vmov	s15, r3
 801922a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801922e:	2500      	movs	r5, #0
 8019230:	eca6 7b02 	vstmia	r6!, {d7}
 8019234:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8019260 <__kernel_rem_pio2+0x308>
 8019238:	46b0      	mov	r8, r6
 801923a:	4555      	cmp	r5, sl
 801923c:	dd04      	ble.n	8019248 <__kernel_rem_pio2+0x2f0>
 801923e:	eca0 7b02 	vstmia	r0!, {d7}
 8019242:	f10c 0c01 	add.w	ip, ip, #1
 8019246:	e7e1      	b.n	801920c <__kernel_rem_pio2+0x2b4>
 8019248:	ecbe 5b02 	vldmia	lr!, {d5}
 801924c:	ed38 6b02 	vldmdb	r8!, {d6}
 8019250:	3501      	adds	r5, #1
 8019252:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019256:	e7f0      	b.n	801923a <__kernel_rem_pio2+0x2e2>
 8019258:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801925c:	e76e      	b.n	801913c <__kernel_rem_pio2+0x1e4>
 801925e:	bf00      	nop
	...
 801926c:	3e700000 	.word	0x3e700000
 8019270:	00000000 	.word	0x00000000
 8019274:	41700000 	.word	0x41700000
 8019278:	08029af8 	.word	0x08029af8
 801927c:	08029ab8 	.word	0x08029ab8
 8019280:	4260      	negs	r0, r4
 8019282:	eeb0 0b48 	vmov.f64	d0, d8
 8019286:	f000 fb3f 	bl	8019908 <scalbn>
 801928a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8019468 <__kernel_rem_pio2+0x510>
 801928e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8019292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019296:	db18      	blt.n	80192ca <__kernel_rem_pio2+0x372>
 8019298:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8019470 <__kernel_rem_pio2+0x518>
 801929c:	ee20 7b07 	vmul.f64	d7, d0, d7
 80192a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80192a4:	aa06      	add	r2, sp, #24
 80192a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80192aa:	eea5 0b46 	vfms.f64	d0, d5, d6
 80192ae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80192b2:	f105 0b01 	add.w	fp, r5, #1
 80192b6:	ee10 3a10 	vmov	r3, s0
 80192ba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80192be:	ee17 3a10 	vmov	r3, s14
 80192c2:	3418      	adds	r4, #24
 80192c4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80192c8:	e73f      	b.n	801914a <__kernel_rem_pio2+0x1f2>
 80192ca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80192ce:	aa06      	add	r2, sp, #24
 80192d0:	ee10 3a10 	vmov	r3, s0
 80192d4:	46ab      	mov	fp, r5
 80192d6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80192da:	e736      	b.n	801914a <__kernel_rem_pio2+0x1f2>
 80192dc:	a806      	add	r0, sp, #24
 80192de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80192e2:	9001      	str	r0, [sp, #4]
 80192e4:	ee07 0a90 	vmov	s15, r0
 80192e8:	3a01      	subs	r2, #1
 80192ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80192ee:	ee27 7b00 	vmul.f64	d7, d7, d0
 80192f2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80192f6:	ed21 7b02 	vstmdb	r1!, {d7}
 80192fa:	e734      	b.n	8019166 <__kernel_rem_pio2+0x20e>
 80192fc:	ecb5 5b02 	vldmia	r5!, {d5}
 8019300:	ecb4 6b02 	vldmia	r4!, {d6}
 8019304:	3001      	adds	r0, #1
 8019306:	eea5 7b06 	vfma.f64	d7, d5, d6
 801930a:	4548      	cmp	r0, r9
 801930c:	dc01      	bgt.n	8019312 <__kernel_rem_pio2+0x3ba>
 801930e:	4288      	cmp	r0, r1
 8019310:	ddf4      	ble.n	80192fc <__kernel_rem_pio2+0x3a4>
 8019312:	a842      	add	r0, sp, #264	; 0x108
 8019314:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8019318:	ed81 7b00 	vstr	d7, [r1]
 801931c:	3a01      	subs	r2, #1
 801931e:	e726      	b.n	801916e <__kernel_rem_pio2+0x216>
 8019320:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8019322:	2a02      	cmp	r2, #2
 8019324:	dc0a      	bgt.n	801933c <__kernel_rem_pio2+0x3e4>
 8019326:	2a00      	cmp	r2, #0
 8019328:	dc2e      	bgt.n	8019388 <__kernel_rem_pio2+0x430>
 801932a:	d047      	beq.n	80193bc <__kernel_rem_pio2+0x464>
 801932c:	f008 0007 	and.w	r0, r8, #7
 8019330:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8019334:	ecbd 8b06 	vpop	{d8-d10}
 8019338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801933e:	2a03      	cmp	r2, #3
 8019340:	d1f4      	bne.n	801932c <__kernel_rem_pio2+0x3d4>
 8019342:	a942      	add	r1, sp, #264	; 0x108
 8019344:	f1a3 0208 	sub.w	r2, r3, #8
 8019348:	440a      	add	r2, r1
 801934a:	4611      	mov	r1, r2
 801934c:	4658      	mov	r0, fp
 801934e:	2800      	cmp	r0, #0
 8019350:	f1a1 0108 	sub.w	r1, r1, #8
 8019354:	dc55      	bgt.n	8019402 <__kernel_rem_pio2+0x4aa>
 8019356:	4659      	mov	r1, fp
 8019358:	2901      	cmp	r1, #1
 801935a:	f1a2 0208 	sub.w	r2, r2, #8
 801935e:	dc60      	bgt.n	8019422 <__kernel_rem_pio2+0x4ca>
 8019360:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8019478 <__kernel_rem_pio2+0x520>
 8019364:	aa42      	add	r2, sp, #264	; 0x108
 8019366:	4413      	add	r3, r2
 8019368:	f1bb 0f01 	cmp.w	fp, #1
 801936c:	dc69      	bgt.n	8019442 <__kernel_rem_pio2+0x4ea>
 801936e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8019372:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8019376:	2e00      	cmp	r6, #0
 8019378:	d16a      	bne.n	8019450 <__kernel_rem_pio2+0x4f8>
 801937a:	ed87 5b00 	vstr	d5, [r7]
 801937e:	ed87 6b02 	vstr	d6, [r7, #8]
 8019382:	ed87 7b04 	vstr	d7, [r7, #16]
 8019386:	e7d1      	b.n	801932c <__kernel_rem_pio2+0x3d4>
 8019388:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8019478 <__kernel_rem_pio2+0x520>
 801938c:	aa42      	add	r2, sp, #264	; 0x108
 801938e:	4413      	add	r3, r2
 8019390:	465a      	mov	r2, fp
 8019392:	2a00      	cmp	r2, #0
 8019394:	da26      	bge.n	80193e4 <__kernel_rem_pio2+0x48c>
 8019396:	b35e      	cbz	r6, 80193f0 <__kernel_rem_pio2+0x498>
 8019398:	eeb1 7b46 	vneg.f64	d7, d6
 801939c:	ed87 7b00 	vstr	d7, [r7]
 80193a0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80193a4:	aa44      	add	r2, sp, #272	; 0x110
 80193a6:	2301      	movs	r3, #1
 80193a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80193ac:	459b      	cmp	fp, r3
 80193ae:	da22      	bge.n	80193f6 <__kernel_rem_pio2+0x49e>
 80193b0:	b10e      	cbz	r6, 80193b6 <__kernel_rem_pio2+0x45e>
 80193b2:	eeb1 7b47 	vneg.f64	d7, d7
 80193b6:	ed87 7b02 	vstr	d7, [r7, #8]
 80193ba:	e7b7      	b.n	801932c <__kernel_rem_pio2+0x3d4>
 80193bc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019478 <__kernel_rem_pio2+0x520>
 80193c0:	aa42      	add	r2, sp, #264	; 0x108
 80193c2:	4413      	add	r3, r2
 80193c4:	f1bb 0f00 	cmp.w	fp, #0
 80193c8:	da05      	bge.n	80193d6 <__kernel_rem_pio2+0x47e>
 80193ca:	b10e      	cbz	r6, 80193d0 <__kernel_rem_pio2+0x478>
 80193cc:	eeb1 7b47 	vneg.f64	d7, d7
 80193d0:	ed87 7b00 	vstr	d7, [r7]
 80193d4:	e7aa      	b.n	801932c <__kernel_rem_pio2+0x3d4>
 80193d6:	ed33 6b02 	vldmdb	r3!, {d6}
 80193da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80193de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80193e2:	e7ef      	b.n	80193c4 <__kernel_rem_pio2+0x46c>
 80193e4:	ed33 7b02 	vldmdb	r3!, {d7}
 80193e8:	3a01      	subs	r2, #1
 80193ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80193ee:	e7d0      	b.n	8019392 <__kernel_rem_pio2+0x43a>
 80193f0:	eeb0 7b46 	vmov.f64	d7, d6
 80193f4:	e7d2      	b.n	801939c <__kernel_rem_pio2+0x444>
 80193f6:	ecb2 6b02 	vldmia	r2!, {d6}
 80193fa:	3301      	adds	r3, #1
 80193fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019400:	e7d4      	b.n	80193ac <__kernel_rem_pio2+0x454>
 8019402:	ed91 7b00 	vldr	d7, [r1]
 8019406:	ed91 5b02 	vldr	d5, [r1, #8]
 801940a:	3801      	subs	r0, #1
 801940c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019410:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019414:	ed81 6b00 	vstr	d6, [r1]
 8019418:	ee37 7b05 	vadd.f64	d7, d7, d5
 801941c:	ed81 7b02 	vstr	d7, [r1, #8]
 8019420:	e795      	b.n	801934e <__kernel_rem_pio2+0x3f6>
 8019422:	ed92 7b00 	vldr	d7, [r2]
 8019426:	ed92 5b02 	vldr	d5, [r2, #8]
 801942a:	3901      	subs	r1, #1
 801942c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8019430:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019434:	ed82 6b00 	vstr	d6, [r2]
 8019438:	ee37 7b05 	vadd.f64	d7, d7, d5
 801943c:	ed82 7b02 	vstr	d7, [r2, #8]
 8019440:	e78a      	b.n	8019358 <__kernel_rem_pio2+0x400>
 8019442:	ed33 6b02 	vldmdb	r3!, {d6}
 8019446:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801944a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801944e:	e78b      	b.n	8019368 <__kernel_rem_pio2+0x410>
 8019450:	eeb1 5b45 	vneg.f64	d5, d5
 8019454:	eeb1 6b46 	vneg.f64	d6, d6
 8019458:	ed87 5b00 	vstr	d5, [r7]
 801945c:	eeb1 7b47 	vneg.f64	d7, d7
 8019460:	ed87 6b02 	vstr	d6, [r7, #8]
 8019464:	e78d      	b.n	8019382 <__kernel_rem_pio2+0x42a>
 8019466:	bf00      	nop
 8019468:	00000000 	.word	0x00000000
 801946c:	41700000 	.word	0x41700000
 8019470:	00000000 	.word	0x00000000
 8019474:	3e700000 	.word	0x3e700000
	...

08019480 <__kernel_tan>:
 8019480:	eeb0 7b40 	vmov.f64	d7, d0
 8019484:	ee17 3a90 	vmov	r3, s15
 8019488:	4989      	ldr	r1, [pc, #548]	; (80196b0 <__kernel_tan+0x230>)
 801948a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801948e:	428a      	cmp	r2, r1
 8019490:	b510      	push	{r4, lr}
 8019492:	dc33      	bgt.n	80194fc <__kernel_tan+0x7c>
 8019494:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8019498:	ee16 1a90 	vmov	r1, s13
 801949c:	2900      	cmp	r1, #0
 801949e:	d143      	bne.n	8019528 <__kernel_tan+0xa8>
 80194a0:	ee10 4a10 	vmov	r4, s0
 80194a4:	1c43      	adds	r3, r0, #1
 80194a6:	4323      	orrs	r3, r4
 80194a8:	4313      	orrs	r3, r2
 80194aa:	d108      	bne.n	80194be <__kernel_tan+0x3e>
 80194ac:	f000 fa20 	bl	80198f0 <fabs>
 80194b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80194b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80194b8:	eeb0 0b47 	vmov.f64	d0, d7
 80194bc:	bd10      	pop	{r4, pc}
 80194be:	2801      	cmp	r0, #1
 80194c0:	d0fa      	beq.n	80194b8 <__kernel_tan+0x38>
 80194c2:	ee30 6b01 	vadd.f64	d6, d0, d1
 80194c6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80194ca:	ec53 2b16 	vmov	r2, r3, d6
 80194ce:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80194d2:	460a      	mov	r2, r1
 80194d4:	ec43 2b15 	vmov	d5, r2, r3
 80194d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80194dc:	ec53 2b13 	vmov	r2, r3, d3
 80194e0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80194e4:	460a      	mov	r2, r1
 80194e6:	ec43 2b17 	vmov	d7, r2, r3
 80194ea:	ee31 4b44 	vsub.f64	d4, d1, d4
 80194ee:	eea5 6b07 	vfma.f64	d6, d5, d7
 80194f2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80194f6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80194fa:	e7dd      	b.n	80194b8 <__kernel_tan+0x38>
 80194fc:	496d      	ldr	r1, [pc, #436]	; (80196b4 <__kernel_tan+0x234>)
 80194fe:	428a      	cmp	r2, r1
 8019500:	dd12      	ble.n	8019528 <__kernel_tan+0xa8>
 8019502:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8019630 <__kernel_tan+0x1b0>
 8019506:	2b00      	cmp	r3, #0
 8019508:	bfb8      	it	lt
 801950a:	eeb1 7b40 	vneglt.f64	d7, d0
 801950e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8019512:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8019638 <__kernel_tan+0x1b8>
 8019516:	bfb8      	it	lt
 8019518:	eeb1 1b41 	vneglt.f64	d1, d1
 801951c:	ee37 7b41 	vsub.f64	d7, d7, d1
 8019520:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8019640 <__kernel_tan+0x1c0>
 8019524:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019528:	ee27 5b07 	vmul.f64	d5, d7, d7
 801952c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8019648 <__kernel_tan+0x1c8>
 8019530:	ee25 6b05 	vmul.f64	d6, d5, d5
 8019534:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8019650 <__kernel_tan+0x1d0>
 8019538:	eea6 4b03 	vfma.f64	d4, d6, d3
 801953c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8019658 <__kernel_tan+0x1d8>
 8019540:	eea4 3b06 	vfma.f64	d3, d4, d6
 8019544:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8019660 <__kernel_tan+0x1e0>
 8019548:	eea3 4b06 	vfma.f64	d4, d3, d6
 801954c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8019668 <__kernel_tan+0x1e8>
 8019550:	eea4 3b06 	vfma.f64	d3, d4, d6
 8019554:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8019670 <__kernel_tan+0x1f0>
 8019558:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8019678 <__kernel_tan+0x1f8>
 801955c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8019560:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8019680 <__kernel_tan+0x200>
 8019564:	eea6 3b02 	vfma.f64	d3, d6, d2
 8019568:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8019688 <__kernel_tan+0x208>
 801956c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8019570:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8019690 <__kernel_tan+0x210>
 8019574:	eea2 3b06 	vfma.f64	d3, d2, d6
 8019578:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8019698 <__kernel_tan+0x218>
 801957c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8019580:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80196a0 <__kernel_tan+0x220>
 8019584:	494b      	ldr	r1, [pc, #300]	; (80196b4 <__kernel_tan+0x234>)
 8019586:	eea2 3b06 	vfma.f64	d3, d2, d6
 801958a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801958e:	eeb0 6b44 	vmov.f64	d6, d4
 8019592:	eeb0 4b41 	vmov.f64	d4, d1
 8019596:	eea3 6b05 	vfma.f64	d6, d3, d5
 801959a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801959e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80196a8 <__kernel_tan+0x228>
 80195a2:	eea4 1b05 	vfma.f64	d1, d4, d5
 80195a6:	428a      	cmp	r2, r1
 80195a8:	eea2 1b06 	vfma.f64	d1, d2, d6
 80195ac:	ee37 5b01 	vadd.f64	d5, d7, d1
 80195b0:	dd1d      	ble.n	80195ee <__kernel_tan+0x16e>
 80195b2:	ee25 3b05 	vmul.f64	d3, d5, d5
 80195b6:	179b      	asrs	r3, r3, #30
 80195b8:	ee06 0a90 	vmov	s13, r0
 80195bc:	f003 0302 	and.w	r3, r3, #2
 80195c0:	f1c3 0301 	rsb	r3, r3, #1
 80195c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80195c8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80195cc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 80195d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80195d4:	ee34 4b41 	vsub.f64	d4, d4, d1
 80195d8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80195dc:	eea7 6b45 	vfms.f64	d6, d7, d5
 80195e0:	ee07 3a90 	vmov	s15, r3
 80195e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80195e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80195ec:	e764      	b.n	80194b8 <__kernel_tan+0x38>
 80195ee:	2801      	cmp	r0, #1
 80195f0:	d01a      	beq.n	8019628 <__kernel_tan+0x1a8>
 80195f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80195f6:	ec51 0b15 	vmov	r0, r1, d5
 80195fa:	2000      	movs	r0, #0
 80195fc:	ec41 0b13 	vmov	d3, r0, r1
 8019600:	ee33 7b47 	vsub.f64	d7, d3, d7
 8019604:	ee31 1b47 	vsub.f64	d1, d1, d7
 8019608:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801960c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8019610:	ec53 2b14 	vmov	r2, r3, d4
 8019614:	4602      	mov	r2, r0
 8019616:	ec43 2b17 	vmov	d7, r2, r3
 801961a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801961e:	eea1 6b07 	vfma.f64	d6, d1, d7
 8019622:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019626:	e747      	b.n	80194b8 <__kernel_tan+0x38>
 8019628:	eeb0 7b45 	vmov.f64	d7, d5
 801962c:	e744      	b.n	80194b8 <__kernel_tan+0x38>
 801962e:	bf00      	nop
 8019630:	54442d18 	.word	0x54442d18
 8019634:	3fe921fb 	.word	0x3fe921fb
 8019638:	33145c07 	.word	0x33145c07
 801963c:	3c81a626 	.word	0x3c81a626
	...
 8019648:	db605373 	.word	0xdb605373
 801964c:	bef375cb 	.word	0xbef375cb
 8019650:	a03792a6 	.word	0xa03792a6
 8019654:	3f147e88 	.word	0x3f147e88
 8019658:	f2f26501 	.word	0xf2f26501
 801965c:	3f4344d8 	.word	0x3f4344d8
 8019660:	c9560328 	.word	0xc9560328
 8019664:	3f6d6d22 	.word	0x3f6d6d22
 8019668:	8406d637 	.word	0x8406d637
 801966c:	3f9664f4 	.word	0x3f9664f4
 8019670:	1110fe7a 	.word	0x1110fe7a
 8019674:	3fc11111 	.word	0x3fc11111
 8019678:	74bf7ad4 	.word	0x74bf7ad4
 801967c:	3efb2a70 	.word	0x3efb2a70
 8019680:	32f0a7e9 	.word	0x32f0a7e9
 8019684:	3f12b80f 	.word	0x3f12b80f
 8019688:	1a8d1068 	.word	0x1a8d1068
 801968c:	3f3026f7 	.word	0x3f3026f7
 8019690:	fee08315 	.word	0xfee08315
 8019694:	3f57dbc8 	.word	0x3f57dbc8
 8019698:	e96e8493 	.word	0xe96e8493
 801969c:	3f8226e3 	.word	0x3f8226e3
 80196a0:	1bb341fe 	.word	0x1bb341fe
 80196a4:	3faba1ba 	.word	0x3faba1ba
 80196a8:	55555563 	.word	0x55555563
 80196ac:	3fd55555 	.word	0x3fd55555
 80196b0:	3e2fffff 	.word	0x3e2fffff
 80196b4:	3fe59427 	.word	0x3fe59427

080196b8 <expm1f>:
 80196b8:	ee10 2a10 	vmov	r2, s0
 80196bc:	497d      	ldr	r1, [pc, #500]	; (80198b4 <expm1f+0x1fc>)
 80196be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80196c2:	428b      	cmp	r3, r1
 80196c4:	d920      	bls.n	8019708 <expm1f+0x50>
 80196c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80196ca:	d902      	bls.n	80196d2 <expm1f+0x1a>
 80196cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80196d0:	4770      	bx	lr
 80196d2:	d105      	bne.n	80196e0 <expm1f+0x28>
 80196d4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80196d8:	2a00      	cmp	r2, #0
 80196da:	fe20 0a27 	vselge.f32	s0, s0, s15
 80196de:	4770      	bx	lr
 80196e0:	2a00      	cmp	r2, #0
 80196e2:	db05      	blt.n	80196f0 <expm1f+0x38>
 80196e4:	4974      	ldr	r1, [pc, #464]	; (80198b8 <expm1f+0x200>)
 80196e6:	428b      	cmp	r3, r1
 80196e8:	d95c      	bls.n	80197a4 <expm1f+0xec>
 80196ea:	2000      	movs	r0, #0
 80196ec:	f7fe bf3e 	b.w	801856c <__math_oflowf>
 80196f0:	eddf 7a72 	vldr	s15, [pc, #456]	; 80198bc <expm1f+0x204>
 80196f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80196f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80196fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019700:	d550      	bpl.n	80197a4 <expm1f+0xec>
 8019702:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019706:	4770      	bx	lr
 8019708:	496d      	ldr	r1, [pc, #436]	; (80198c0 <expm1f+0x208>)
 801970a:	428b      	cmp	r3, r1
 801970c:	d966      	bls.n	80197dc <expm1f+0x124>
 801970e:	496d      	ldr	r1, [pc, #436]	; (80198c4 <expm1f+0x20c>)
 8019710:	428b      	cmp	r3, r1
 8019712:	d847      	bhi.n	80197a4 <expm1f+0xec>
 8019714:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80198c8 <expm1f+0x210>
 8019718:	2a00      	cmp	r2, #0
 801971a:	bfa7      	ittee	ge
 801971c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8019720:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 80198cc <expm1f+0x214>
 8019724:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 80198d0 <expm1f+0x218>
 8019728:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801972c:	bfac      	ite	ge
 801972e:	2301      	movge	r3, #1
 8019730:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019734:	ee37 0a66 	vsub.f32	s0, s14, s13
 8019738:	ee77 7a40 	vsub.f32	s15, s14, s0
 801973c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019740:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8019744:	ee20 4a25 	vmul.f32	s8, s0, s11
 8019748:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80198d4 <expm1f+0x21c>
 801974c:	eddf 6a62 	vldr	s13, [pc, #392]	; 80198d8 <expm1f+0x220>
 8019750:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80198dc <expm1f+0x224>
 8019754:	ee20 7a04 	vmul.f32	s14, s0, s8
 8019758:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801975c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8019760:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80198e0 <expm1f+0x228>
 8019764:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019768:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80198e4 <expm1f+0x22c>
 801976c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019770:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019774:	eea6 5a87 	vfma.f32	s10, s13, s14
 8019778:	eef0 6a46 	vmov.f32	s13, s12
 801977c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8019780:	eee4 4a66 	vfms.f32	s9, s8, s13
 8019784:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8019788:	eea0 4a64 	vfms.f32	s8, s0, s9
 801978c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8019790:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8019794:	ee66 6a87 	vmul.f32	s13, s13, s14
 8019798:	bb73      	cbnz	r3, 80197f8 <expm1f+0x140>
 801979a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801979e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80197a2:	4770      	bx	lr
 80197a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80197a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80197ac:	2a00      	cmp	r2, #0
 80197ae:	fe67 7a87 	vselge.f32	s15, s15, s14
 80197b2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80198e8 <expm1f+0x230>
 80197b6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80197ba:	eeb0 7a40 	vmov.f32	s14, s0
 80197be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80197c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80197c6:	ee17 3a90 	vmov	r3, s15
 80197ca:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80198c8 <expm1f+0x210>
 80197ce:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80197d2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80198cc <expm1f+0x214>
 80197d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80197da:	e7ab      	b.n	8019734 <expm1f+0x7c>
 80197dc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80197e0:	d208      	bcs.n	80197f4 <expm1f+0x13c>
 80197e2:	eddf 7a42 	vldr	s15, [pc, #264]	; 80198ec <expm1f+0x234>
 80197e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80197ea:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80197ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80197f2:	4770      	bx	lr
 80197f4:	2300      	movs	r3, #0
 80197f6:	e7a3      	b.n	8019740 <expm1f+0x88>
 80197f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80197fc:	1c5a      	adds	r2, r3, #1
 80197fe:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8019802:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019806:	d106      	bne.n	8019816 <expm1f+0x15e>
 8019808:	ee70 7a67 	vsub.f32	s15, s0, s15
 801980c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019810:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8019814:	4770      	bx	lr
 8019816:	2b01      	cmp	r3, #1
 8019818:	d118      	bne.n	801984c <expm1f+0x194>
 801981a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801981e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019826:	bf5b      	ittet	pl
 8019828:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801982c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8019830:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8019834:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8019838:	bf43      	ittte	mi
 801983a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801983e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8019842:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8019846:	eeb0 0a46 	vmovpl.f32	s0, s12
 801984a:	4770      	bx	lr
 801984c:	1c5a      	adds	r2, r3, #1
 801984e:	2a39      	cmp	r2, #57	; 0x39
 8019850:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8019854:	d90b      	bls.n	801986e <expm1f+0x1b6>
 8019856:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801985a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801985e:	ee17 3a90 	vmov	r3, s15
 8019862:	4419      	add	r1, r3
 8019864:	ee07 1a90 	vmov	s15, r1
 8019868:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801986c:	4770      	bx	lr
 801986e:	2b16      	cmp	r3, #22
 8019870:	dc11      	bgt.n	8019896 <expm1f+0x1de>
 8019872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019876:	fa42 f303 	asr.w	r3, r2, r3
 801987a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801987e:	ee07 3a10 	vmov	s14, r3
 8019882:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019886:	ee77 7a67 	vsub.f32	s15, s14, s15
 801988a:	ee17 3a90 	vmov	r3, s15
 801988e:	440b      	add	r3, r1
 8019890:	ee00 3a10 	vmov	s0, r3
 8019894:	4770      	bx	lr
 8019896:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801989a:	05db      	lsls	r3, r3, #23
 801989c:	ee07 3a10 	vmov	s14, r3
 80198a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80198a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80198a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80198ac:	ee17 3a90 	vmov	r3, s15
 80198b0:	e7ed      	b.n	801988e <expm1f+0x1d6>
 80198b2:	bf00      	nop
 80198b4:	4195b843 	.word	0x4195b843
 80198b8:	42b17217 	.word	0x42b17217
 80198bc:	0da24260 	.word	0x0da24260
 80198c0:	3eb17218 	.word	0x3eb17218
 80198c4:	3f851591 	.word	0x3f851591
 80198c8:	3f317180 	.word	0x3f317180
 80198cc:	3717f7d1 	.word	0x3717f7d1
 80198d0:	b717f7d1 	.word	0xb717f7d1
 80198d4:	b457edbb 	.word	0xb457edbb
 80198d8:	36867e54 	.word	0x36867e54
 80198dc:	bd088889 	.word	0xbd088889
 80198e0:	b8a670cd 	.word	0xb8a670cd
 80198e4:	3ad00d01 	.word	0x3ad00d01
 80198e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80198ec:	7149f2ca 	.word	0x7149f2ca

080198f0 <fabs>:
 80198f0:	ec51 0b10 	vmov	r0, r1, d0
 80198f4:	ee10 2a10 	vmov	r2, s0
 80198f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80198fc:	ec43 2b10 	vmov	d0, r2, r3
 8019900:	4770      	bx	lr
 8019902:	0000      	movs	r0, r0
 8019904:	0000      	movs	r0, r0
	...

08019908 <scalbn>:
 8019908:	ee10 1a90 	vmov	r1, s1
 801990c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019910:	b98b      	cbnz	r3, 8019936 <scalbn+0x2e>
 8019912:	ee10 3a10 	vmov	r3, s0
 8019916:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801991a:	4319      	orrs	r1, r3
 801991c:	d00a      	beq.n	8019934 <scalbn+0x2c>
 801991e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80199d0 <scalbn+0xc8>
 8019922:	4b37      	ldr	r3, [pc, #220]	; (8019a00 <scalbn+0xf8>)
 8019924:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019928:	4298      	cmp	r0, r3
 801992a:	da0b      	bge.n	8019944 <scalbn+0x3c>
 801992c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80199d8 <scalbn+0xd0>
 8019930:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019934:	4770      	bx	lr
 8019936:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801993a:	4293      	cmp	r3, r2
 801993c:	d107      	bne.n	801994e <scalbn+0x46>
 801993e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019942:	4770      	bx	lr
 8019944:	ee10 1a90 	vmov	r1, s1
 8019948:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801994c:	3b36      	subs	r3, #54	; 0x36
 801994e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8019952:	4290      	cmp	r0, r2
 8019954:	dd0d      	ble.n	8019972 <scalbn+0x6a>
 8019956:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80199e0 <scalbn+0xd8>
 801995a:	ee10 3a90 	vmov	r3, s1
 801995e:	eeb0 6b47 	vmov.f64	d6, d7
 8019962:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80199e8 <scalbn+0xe0>
 8019966:	2b00      	cmp	r3, #0
 8019968:	fe27 7b05 	vselge.f64	d7, d7, d5
 801996c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8019970:	4770      	bx	lr
 8019972:	4418      	add	r0, r3
 8019974:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8019978:	4298      	cmp	r0, r3
 801997a:	dcec      	bgt.n	8019956 <scalbn+0x4e>
 801997c:	2800      	cmp	r0, #0
 801997e:	dd0a      	ble.n	8019996 <scalbn+0x8e>
 8019980:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8019984:	ec53 2b10 	vmov	r2, r3, d0
 8019988:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801998c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8019990:	ec43 2b10 	vmov	d0, r2, r3
 8019994:	4770      	bx	lr
 8019996:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801999a:	da09      	bge.n	80199b0 <scalbn+0xa8>
 801999c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80199d8 <scalbn+0xd0>
 80199a0:	ee10 3a90 	vmov	r3, s1
 80199a4:	eeb0 6b47 	vmov.f64	d6, d7
 80199a8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80199f0 <scalbn+0xe8>
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	e7db      	b.n	8019968 <scalbn+0x60>
 80199b0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80199b4:	ec53 2b10 	vmov	r2, r3, d0
 80199b8:	3036      	adds	r0, #54	; 0x36
 80199ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80199be:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80199c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80199f8 <scalbn+0xf0>
 80199c6:	ec43 2b10 	vmov	d0, r2, r3
 80199ca:	e7b1      	b.n	8019930 <scalbn+0x28>
 80199cc:	f3af 8000 	nop.w
 80199d0:	00000000 	.word	0x00000000
 80199d4:	43500000 	.word	0x43500000
 80199d8:	c2f8f359 	.word	0xc2f8f359
 80199dc:	01a56e1f 	.word	0x01a56e1f
 80199e0:	8800759c 	.word	0x8800759c
 80199e4:	7e37e43c 	.word	0x7e37e43c
 80199e8:	8800759c 	.word	0x8800759c
 80199ec:	fe37e43c 	.word	0xfe37e43c
 80199f0:	c2f8f359 	.word	0xc2f8f359
 80199f4:	81a56e1f 	.word	0x81a56e1f
 80199f8:	00000000 	.word	0x00000000
 80199fc:	3c900000 	.word	0x3c900000
 8019a00:	ffff3cb0 	.word	0xffff3cb0

08019a04 <__kernel_rem_pio2f>:
 8019a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a08:	ed2d 8b04 	vpush	{d8-d9}
 8019a0c:	b0d9      	sub	sp, #356	; 0x164
 8019a0e:	4688      	mov	r8, r1
 8019a10:	9002      	str	r0, [sp, #8]
 8019a12:	49b8      	ldr	r1, [pc, #736]	; (8019cf4 <__kernel_rem_pio2f+0x2f0>)
 8019a14:	9866      	ldr	r0, [sp, #408]	; 0x198
 8019a16:	9301      	str	r3, [sp, #4]
 8019a18:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8019a1c:	9901      	ldr	r1, [sp, #4]
 8019a1e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8019a20:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8019a24:	1d11      	adds	r1, r2, #4
 8019a26:	db25      	blt.n	8019a74 <__kernel_rem_pio2f+0x70>
 8019a28:	1ed0      	subs	r0, r2, #3
 8019a2a:	bf48      	it	mi
 8019a2c:	1d10      	addmi	r0, r2, #4
 8019a2e:	10c0      	asrs	r0, r0, #3
 8019a30:	1c45      	adds	r5, r0, #1
 8019a32:	00e9      	lsls	r1, r5, #3
 8019a34:	eba0 070b 	sub.w	r7, r0, fp
 8019a38:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019a3c:	9103      	str	r1, [sp, #12]
 8019a3e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8019a42:	eb0a 0c0b 	add.w	ip, sl, fp
 8019a46:	ae1c      	add	r6, sp, #112	; 0x70
 8019a48:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8019a4c:	2400      	movs	r4, #0
 8019a4e:	4564      	cmp	r4, ip
 8019a50:	dd12      	ble.n	8019a78 <__kernel_rem_pio2f+0x74>
 8019a52:	9901      	ldr	r1, [sp, #4]
 8019a54:	ac1c      	add	r4, sp, #112	; 0x70
 8019a56:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019a5a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8019a5e:	f04f 0c00 	mov.w	ip, #0
 8019a62:	45d4      	cmp	ip, sl
 8019a64:	dc27      	bgt.n	8019ab6 <__kernel_rem_pio2f+0xb2>
 8019a66:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019a6a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019a6e:	4627      	mov	r7, r4
 8019a70:	2600      	movs	r6, #0
 8019a72:	e016      	b.n	8019aa2 <__kernel_rem_pio2f+0x9e>
 8019a74:	2000      	movs	r0, #0
 8019a76:	e7db      	b.n	8019a30 <__kernel_rem_pio2f+0x2c>
 8019a78:	42e7      	cmn	r7, r4
 8019a7a:	bf5d      	ittte	pl
 8019a7c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8019a80:	ee07 1a90 	vmovpl	s15, r1
 8019a84:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019a88:	eef0 7a47 	vmovmi.f32	s15, s14
 8019a8c:	ece6 7a01 	vstmia	r6!, {s15}
 8019a90:	3401      	adds	r4, #1
 8019a92:	e7dc      	b.n	8019a4e <__kernel_rem_pio2f+0x4a>
 8019a94:	ecfe 6a01 	vldmia	lr!, {s13}
 8019a98:	ed97 7a00 	vldr	s14, [r7]
 8019a9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019aa0:	3601      	adds	r6, #1
 8019aa2:	455e      	cmp	r6, fp
 8019aa4:	f1a7 0704 	sub.w	r7, r7, #4
 8019aa8:	ddf4      	ble.n	8019a94 <__kernel_rem_pio2f+0x90>
 8019aaa:	ece9 7a01 	vstmia	r9!, {s15}
 8019aae:	f10c 0c01 	add.w	ip, ip, #1
 8019ab2:	3404      	adds	r4, #4
 8019ab4:	e7d5      	b.n	8019a62 <__kernel_rem_pio2f+0x5e>
 8019ab6:	a908      	add	r1, sp, #32
 8019ab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019abc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019ac0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8019d00 <__kernel_rem_pio2f+0x2fc>
 8019ac4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8019cfc <__kernel_rem_pio2f+0x2f8>
 8019ac8:	9105      	str	r1, [sp, #20]
 8019aca:	9304      	str	r3, [sp, #16]
 8019acc:	4656      	mov	r6, sl
 8019ace:	00b3      	lsls	r3, r6, #2
 8019ad0:	9306      	str	r3, [sp, #24]
 8019ad2:	ab58      	add	r3, sp, #352	; 0x160
 8019ad4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019ad8:	ac08      	add	r4, sp, #32
 8019ada:	ab44      	add	r3, sp, #272	; 0x110
 8019adc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8019ae0:	46a4      	mov	ip, r4
 8019ae2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8019ae6:	4637      	mov	r7, r6
 8019ae8:	2f00      	cmp	r7, #0
 8019aea:	f1a0 0004 	sub.w	r0, r0, #4
 8019aee:	dc4a      	bgt.n	8019b86 <__kernel_rem_pio2f+0x182>
 8019af0:	4628      	mov	r0, r5
 8019af2:	9207      	str	r2, [sp, #28]
 8019af4:	f000 fab2 	bl	801a05c <scalbnf>
 8019af8:	eeb0 8a40 	vmov.f32	s16, s0
 8019afc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019b00:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019b04:	f000 fa68 	bl	8019fd8 <floorf>
 8019b08:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019b0c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019b10:	2d00      	cmp	r5, #0
 8019b12:	9a07      	ldr	r2, [sp, #28]
 8019b14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019b18:	ee17 9a90 	vmov	r9, s15
 8019b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b20:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019b24:	dd41      	ble.n	8019baa <__kernel_rem_pio2f+0x1a6>
 8019b26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8019b2a:	ab08      	add	r3, sp, #32
 8019b2c:	f1c5 0e08 	rsb	lr, r5, #8
 8019b30:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8019b34:	fa47 f00e 	asr.w	r0, r7, lr
 8019b38:	4481      	add	r9, r0
 8019b3a:	fa00 f00e 	lsl.w	r0, r0, lr
 8019b3e:	1a3f      	subs	r7, r7, r0
 8019b40:	f1c5 0007 	rsb	r0, r5, #7
 8019b44:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8019b48:	4107      	asrs	r7, r0
 8019b4a:	2f00      	cmp	r7, #0
 8019b4c:	dd3c      	ble.n	8019bc8 <__kernel_rem_pio2f+0x1c4>
 8019b4e:	f04f 0e00 	mov.w	lr, #0
 8019b52:	f109 0901 	add.w	r9, r9, #1
 8019b56:	4671      	mov	r1, lr
 8019b58:	4576      	cmp	r6, lr
 8019b5a:	dc67      	bgt.n	8019c2c <__kernel_rem_pio2f+0x228>
 8019b5c:	2d00      	cmp	r5, #0
 8019b5e:	dd03      	ble.n	8019b68 <__kernel_rem_pio2f+0x164>
 8019b60:	2d01      	cmp	r5, #1
 8019b62:	d074      	beq.n	8019c4e <__kernel_rem_pio2f+0x24a>
 8019b64:	2d02      	cmp	r5, #2
 8019b66:	d07b      	beq.n	8019c60 <__kernel_rem_pio2f+0x25c>
 8019b68:	2f02      	cmp	r7, #2
 8019b6a:	d12d      	bne.n	8019bc8 <__kernel_rem_pio2f+0x1c4>
 8019b6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019b70:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019b74:	b341      	cbz	r1, 8019bc8 <__kernel_rem_pio2f+0x1c4>
 8019b76:	4628      	mov	r0, r5
 8019b78:	9207      	str	r2, [sp, #28]
 8019b7a:	f000 fa6f 	bl	801a05c <scalbnf>
 8019b7e:	9a07      	ldr	r2, [sp, #28]
 8019b80:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019b84:	e020      	b.n	8019bc8 <__kernel_rem_pio2f+0x1c4>
 8019b86:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019b8a:	3f01      	subs	r7, #1
 8019b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b94:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019b98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019b9c:	ecac 0a01 	vstmia	ip!, {s0}
 8019ba0:	ed90 0a00 	vldr	s0, [r0]
 8019ba4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019ba8:	e79e      	b.n	8019ae8 <__kernel_rem_pio2f+0xe4>
 8019baa:	d105      	bne.n	8019bb8 <__kernel_rem_pio2f+0x1b4>
 8019bac:	1e70      	subs	r0, r6, #1
 8019bae:	ab08      	add	r3, sp, #32
 8019bb0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8019bb4:	11ff      	asrs	r7, r7, #7
 8019bb6:	e7c8      	b.n	8019b4a <__kernel_rem_pio2f+0x146>
 8019bb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019bbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bc4:	da30      	bge.n	8019c28 <__kernel_rem_pio2f+0x224>
 8019bc6:	2700      	movs	r7, #0
 8019bc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bd0:	f040 809a 	bne.w	8019d08 <__kernel_rem_pio2f+0x304>
 8019bd4:	1e74      	subs	r4, r6, #1
 8019bd6:	46a4      	mov	ip, r4
 8019bd8:	2100      	movs	r1, #0
 8019bda:	45d4      	cmp	ip, sl
 8019bdc:	da47      	bge.n	8019c6e <__kernel_rem_pio2f+0x26a>
 8019bde:	2900      	cmp	r1, #0
 8019be0:	d063      	beq.n	8019caa <__kernel_rem_pio2f+0x2a6>
 8019be2:	ab08      	add	r3, sp, #32
 8019be4:	3d08      	subs	r5, #8
 8019be6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d07f      	beq.n	8019cee <__kernel_rem_pio2f+0x2ea>
 8019bee:	4628      	mov	r0, r5
 8019bf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019bf4:	f000 fa32 	bl	801a05c <scalbnf>
 8019bf8:	1c63      	adds	r3, r4, #1
 8019bfa:	aa44      	add	r2, sp, #272	; 0x110
 8019bfc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8019d00 <__kernel_rem_pio2f+0x2fc>
 8019c00:	0099      	lsls	r1, r3, #2
 8019c02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019c06:	4623      	mov	r3, r4
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	f280 80ad 	bge.w	8019d68 <__kernel_rem_pio2f+0x364>
 8019c0e:	4623      	mov	r3, r4
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	f2c0 80cb 	blt.w	8019dac <__kernel_rem_pio2f+0x3a8>
 8019c16:	aa44      	add	r2, sp, #272	; 0x110
 8019c18:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019c1c:	4e36      	ldr	r6, [pc, #216]	; (8019cf8 <__kernel_rem_pio2f+0x2f4>)
 8019c1e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019c22:	2000      	movs	r0, #0
 8019c24:	1ae2      	subs	r2, r4, r3
 8019c26:	e0b6      	b.n	8019d96 <__kernel_rem_pio2f+0x392>
 8019c28:	2702      	movs	r7, #2
 8019c2a:	e790      	b.n	8019b4e <__kernel_rem_pio2f+0x14a>
 8019c2c:	6820      	ldr	r0, [r4, #0]
 8019c2e:	b949      	cbnz	r1, 8019c44 <__kernel_rem_pio2f+0x240>
 8019c30:	b118      	cbz	r0, 8019c3a <__kernel_rem_pio2f+0x236>
 8019c32:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8019c36:	6020      	str	r0, [r4, #0]
 8019c38:	2001      	movs	r0, #1
 8019c3a:	f10e 0e01 	add.w	lr, lr, #1
 8019c3e:	3404      	adds	r4, #4
 8019c40:	4601      	mov	r1, r0
 8019c42:	e789      	b.n	8019b58 <__kernel_rem_pio2f+0x154>
 8019c44:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8019c48:	6020      	str	r0, [r4, #0]
 8019c4a:	4608      	mov	r0, r1
 8019c4c:	e7f5      	b.n	8019c3a <__kernel_rem_pio2f+0x236>
 8019c4e:	1e74      	subs	r4, r6, #1
 8019c50:	ab08      	add	r3, sp, #32
 8019c52:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c56:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8019c5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8019c5e:	e783      	b.n	8019b68 <__kernel_rem_pio2f+0x164>
 8019c60:	1e74      	subs	r4, r6, #1
 8019c62:	ab08      	add	r3, sp, #32
 8019c64:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8019c6c:	e7f5      	b.n	8019c5a <__kernel_rem_pio2f+0x256>
 8019c6e:	ab08      	add	r3, sp, #32
 8019c70:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8019c74:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8019c78:	4301      	orrs	r1, r0
 8019c7a:	e7ae      	b.n	8019bda <__kernel_rem_pio2f+0x1d6>
 8019c7c:	3001      	adds	r0, #1
 8019c7e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8019c82:	2f00      	cmp	r7, #0
 8019c84:	d0fa      	beq.n	8019c7c <__kernel_rem_pio2f+0x278>
 8019c86:	9b06      	ldr	r3, [sp, #24]
 8019c88:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8019c8c:	eb0d 0403 	add.w	r4, sp, r3
 8019c90:	9b01      	ldr	r3, [sp, #4]
 8019c92:	18f7      	adds	r7, r6, r3
 8019c94:	ab1c      	add	r3, sp, #112	; 0x70
 8019c96:	f106 0c01 	add.w	ip, r6, #1
 8019c9a:	3c4c      	subs	r4, #76	; 0x4c
 8019c9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019ca0:	4430      	add	r0, r6
 8019ca2:	4560      	cmp	r0, ip
 8019ca4:	da04      	bge.n	8019cb0 <__kernel_rem_pio2f+0x2ac>
 8019ca6:	4606      	mov	r6, r0
 8019ca8:	e711      	b.n	8019ace <__kernel_rem_pio2f+0xca>
 8019caa:	9c05      	ldr	r4, [sp, #20]
 8019cac:	2001      	movs	r0, #1
 8019cae:	e7e6      	b.n	8019c7e <__kernel_rem_pio2f+0x27a>
 8019cb0:	9b04      	ldr	r3, [sp, #16]
 8019cb2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019cb6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8019cba:	9306      	str	r3, [sp, #24]
 8019cbc:	ee07 3a90 	vmov	s15, r3
 8019cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cc4:	2600      	movs	r6, #0
 8019cc6:	ece7 7a01 	vstmia	r7!, {s15}
 8019cca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019cce:	46b9      	mov	r9, r7
 8019cd0:	455e      	cmp	r6, fp
 8019cd2:	dd04      	ble.n	8019cde <__kernel_rem_pio2f+0x2da>
 8019cd4:	ece4 7a01 	vstmia	r4!, {s15}
 8019cd8:	f10c 0c01 	add.w	ip, ip, #1
 8019cdc:	e7e1      	b.n	8019ca2 <__kernel_rem_pio2f+0x29e>
 8019cde:	ecfe 6a01 	vldmia	lr!, {s13}
 8019ce2:	ed39 7a01 	vldmdb	r9!, {s14}
 8019ce6:	3601      	adds	r6, #1
 8019ce8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019cec:	e7f0      	b.n	8019cd0 <__kernel_rem_pio2f+0x2cc>
 8019cee:	3c01      	subs	r4, #1
 8019cf0:	e777      	b.n	8019be2 <__kernel_rem_pio2f+0x1de>
 8019cf2:	bf00      	nop
 8019cf4:	08029b34 	.word	0x08029b34
 8019cf8:	08029b08 	.word	0x08029b08
 8019cfc:	43800000 	.word	0x43800000
 8019d00:	3b800000 	.word	0x3b800000
 8019d04:	00000000 	.word	0x00000000
 8019d08:	9b03      	ldr	r3, [sp, #12]
 8019d0a:	eeb0 0a48 	vmov.f32	s0, s16
 8019d0e:	1a98      	subs	r0, r3, r2
 8019d10:	f000 f9a4 	bl	801a05c <scalbnf>
 8019d14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8019cfc <__kernel_rem_pio2f+0x2f8>
 8019d18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d20:	db19      	blt.n	8019d56 <__kernel_rem_pio2f+0x352>
 8019d22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8019d00 <__kernel_rem_pio2f+0x2fc>
 8019d26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019d2a:	aa08      	add	r2, sp, #32
 8019d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d30:	1c74      	adds	r4, r6, #1
 8019d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d36:	3508      	adds	r5, #8
 8019d38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d44:	ee10 3a10 	vmov	r3, s0
 8019d48:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8019d4c:	ee17 3a90 	vmov	r3, s15
 8019d50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019d54:	e74b      	b.n	8019bee <__kernel_rem_pio2f+0x1ea>
 8019d56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019d5a:	aa08      	add	r2, sp, #32
 8019d5c:	ee10 3a10 	vmov	r3, s0
 8019d60:	4634      	mov	r4, r6
 8019d62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8019d66:	e742      	b.n	8019bee <__kernel_rem_pio2f+0x1ea>
 8019d68:	a808      	add	r0, sp, #32
 8019d6a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019d6e:	9001      	str	r0, [sp, #4]
 8019d70:	ee07 0a90 	vmov	s15, r0
 8019d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d78:	3b01      	subs	r3, #1
 8019d7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019d7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019d82:	ed62 7a01 	vstmdb	r2!, {s15}
 8019d86:	e73f      	b.n	8019c08 <__kernel_rem_pio2f+0x204>
 8019d88:	ecf6 6a01 	vldmia	r6!, {s13}
 8019d8c:	ecb5 7a01 	vldmia	r5!, {s14}
 8019d90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019d94:	3001      	adds	r0, #1
 8019d96:	4550      	cmp	r0, sl
 8019d98:	dc01      	bgt.n	8019d9e <__kernel_rem_pio2f+0x39a>
 8019d9a:	4290      	cmp	r0, r2
 8019d9c:	ddf4      	ble.n	8019d88 <__kernel_rem_pio2f+0x384>
 8019d9e:	a858      	add	r0, sp, #352	; 0x160
 8019da0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019da4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8019da8:	3b01      	subs	r3, #1
 8019daa:	e731      	b.n	8019c10 <__kernel_rem_pio2f+0x20c>
 8019dac:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019dae:	2b02      	cmp	r3, #2
 8019db0:	dc09      	bgt.n	8019dc6 <__kernel_rem_pio2f+0x3c2>
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	dc2b      	bgt.n	8019e0e <__kernel_rem_pio2f+0x40a>
 8019db6:	d044      	beq.n	8019e42 <__kernel_rem_pio2f+0x43e>
 8019db8:	f009 0007 	and.w	r0, r9, #7
 8019dbc:	b059      	add	sp, #356	; 0x164
 8019dbe:	ecbd 8b04 	vpop	{d8-d9}
 8019dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dc6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8019dc8:	2b03      	cmp	r3, #3
 8019dca:	d1f5      	bne.n	8019db8 <__kernel_rem_pio2f+0x3b4>
 8019dcc:	aa30      	add	r2, sp, #192	; 0xc0
 8019dce:	1f0b      	subs	r3, r1, #4
 8019dd0:	4413      	add	r3, r2
 8019dd2:	461a      	mov	r2, r3
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	2800      	cmp	r0, #0
 8019dd8:	f1a2 0204 	sub.w	r2, r2, #4
 8019ddc:	dc52      	bgt.n	8019e84 <__kernel_rem_pio2f+0x480>
 8019dde:	4622      	mov	r2, r4
 8019de0:	2a01      	cmp	r2, #1
 8019de2:	f1a3 0304 	sub.w	r3, r3, #4
 8019de6:	dc5d      	bgt.n	8019ea4 <__kernel_rem_pio2f+0x4a0>
 8019de8:	ab30      	add	r3, sp, #192	; 0xc0
 8019dea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019dee:	440b      	add	r3, r1
 8019df0:	2c01      	cmp	r4, #1
 8019df2:	dc67      	bgt.n	8019ec4 <__kernel_rem_pio2f+0x4c0>
 8019df4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019df8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8019dfc:	2f00      	cmp	r7, #0
 8019dfe:	d167      	bne.n	8019ed0 <__kernel_rem_pio2f+0x4cc>
 8019e00:	edc8 6a00 	vstr	s13, [r8]
 8019e04:	ed88 7a01 	vstr	s14, [r8, #4]
 8019e08:	edc8 7a02 	vstr	s15, [r8, #8]
 8019e0c:	e7d4      	b.n	8019db8 <__kernel_rem_pio2f+0x3b4>
 8019e0e:	ab30      	add	r3, sp, #192	; 0xc0
 8019e10:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019e14:	440b      	add	r3, r1
 8019e16:	4622      	mov	r2, r4
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	da24      	bge.n	8019e66 <__kernel_rem_pio2f+0x462>
 8019e1c:	b34f      	cbz	r7, 8019e72 <__kernel_rem_pio2f+0x46e>
 8019e1e:	eef1 7a47 	vneg.f32	s15, s14
 8019e22:	edc8 7a00 	vstr	s15, [r8]
 8019e26:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8019e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e2e:	aa31      	add	r2, sp, #196	; 0xc4
 8019e30:	2301      	movs	r3, #1
 8019e32:	429c      	cmp	r4, r3
 8019e34:	da20      	bge.n	8019e78 <__kernel_rem_pio2f+0x474>
 8019e36:	b10f      	cbz	r7, 8019e3c <__kernel_rem_pio2f+0x438>
 8019e38:	eef1 7a67 	vneg.f32	s15, s15
 8019e3c:	edc8 7a01 	vstr	s15, [r8, #4]
 8019e40:	e7ba      	b.n	8019db8 <__kernel_rem_pio2f+0x3b4>
 8019e42:	ab30      	add	r3, sp, #192	; 0xc0
 8019e44:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8019d04 <__kernel_rem_pio2f+0x300>
 8019e48:	440b      	add	r3, r1
 8019e4a:	2c00      	cmp	r4, #0
 8019e4c:	da05      	bge.n	8019e5a <__kernel_rem_pio2f+0x456>
 8019e4e:	b10f      	cbz	r7, 8019e54 <__kernel_rem_pio2f+0x450>
 8019e50:	eef1 7a67 	vneg.f32	s15, s15
 8019e54:	edc8 7a00 	vstr	s15, [r8]
 8019e58:	e7ae      	b.n	8019db8 <__kernel_rem_pio2f+0x3b4>
 8019e5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8019e5e:	3c01      	subs	r4, #1
 8019e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e64:	e7f1      	b.n	8019e4a <__kernel_rem_pio2f+0x446>
 8019e66:	ed73 7a01 	vldmdb	r3!, {s15}
 8019e6a:	3a01      	subs	r2, #1
 8019e6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e70:	e7d2      	b.n	8019e18 <__kernel_rem_pio2f+0x414>
 8019e72:	eef0 7a47 	vmov.f32	s15, s14
 8019e76:	e7d4      	b.n	8019e22 <__kernel_rem_pio2f+0x41e>
 8019e78:	ecb2 7a01 	vldmia	r2!, {s14}
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e82:	e7d6      	b.n	8019e32 <__kernel_rem_pio2f+0x42e>
 8019e84:	edd2 7a00 	vldr	s15, [r2]
 8019e88:	edd2 6a01 	vldr	s13, [r2, #4]
 8019e8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019e90:	3801      	subs	r0, #1
 8019e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e96:	ed82 7a00 	vstr	s14, [r2]
 8019e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019e9e:	edc2 7a01 	vstr	s15, [r2, #4]
 8019ea2:	e798      	b.n	8019dd6 <__kernel_rem_pio2f+0x3d2>
 8019ea4:	edd3 7a00 	vldr	s15, [r3]
 8019ea8:	edd3 6a01 	vldr	s13, [r3, #4]
 8019eac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019eb0:	3a01      	subs	r2, #1
 8019eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019eb6:	ed83 7a00 	vstr	s14, [r3]
 8019eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ebe:	edc3 7a01 	vstr	s15, [r3, #4]
 8019ec2:	e78d      	b.n	8019de0 <__kernel_rem_pio2f+0x3dc>
 8019ec4:	ed33 7a01 	vldmdb	r3!, {s14}
 8019ec8:	3c01      	subs	r4, #1
 8019eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ece:	e78f      	b.n	8019df0 <__kernel_rem_pio2f+0x3ec>
 8019ed0:	eef1 6a66 	vneg.f32	s13, s13
 8019ed4:	eeb1 7a47 	vneg.f32	s14, s14
 8019ed8:	edc8 6a00 	vstr	s13, [r8]
 8019edc:	ed88 7a01 	vstr	s14, [r8, #4]
 8019ee0:	eef1 7a67 	vneg.f32	s15, s15
 8019ee4:	e790      	b.n	8019e08 <__kernel_rem_pio2f+0x404>
 8019ee6:	bf00      	nop

08019ee8 <floor>:
 8019ee8:	ee10 1a90 	vmov	r1, s1
 8019eec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019ef0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8019ef4:	2b13      	cmp	r3, #19
 8019ef6:	b530      	push	{r4, r5, lr}
 8019ef8:	ee10 0a10 	vmov	r0, s0
 8019efc:	ee10 5a10 	vmov	r5, s0
 8019f00:	dc31      	bgt.n	8019f66 <floor+0x7e>
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	da15      	bge.n	8019f32 <floor+0x4a>
 8019f06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8019fc8 <floor+0xe0>
 8019f0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019f0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f16:	dd07      	ble.n	8019f28 <floor+0x40>
 8019f18:	2900      	cmp	r1, #0
 8019f1a:	da4e      	bge.n	8019fba <floor+0xd2>
 8019f1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019f20:	4308      	orrs	r0, r1
 8019f22:	d04d      	beq.n	8019fc0 <floor+0xd8>
 8019f24:	492a      	ldr	r1, [pc, #168]	; (8019fd0 <floor+0xe8>)
 8019f26:	2000      	movs	r0, #0
 8019f28:	460b      	mov	r3, r1
 8019f2a:	4602      	mov	r2, r0
 8019f2c:	ec43 2b10 	vmov	d0, r2, r3
 8019f30:	e020      	b.n	8019f74 <floor+0x8c>
 8019f32:	4a28      	ldr	r2, [pc, #160]	; (8019fd4 <floor+0xec>)
 8019f34:	411a      	asrs	r2, r3
 8019f36:	ea01 0402 	and.w	r4, r1, r2
 8019f3a:	4304      	orrs	r4, r0
 8019f3c:	d01a      	beq.n	8019f74 <floor+0x8c>
 8019f3e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8019fc8 <floor+0xe0>
 8019f42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019f46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f4e:	ddeb      	ble.n	8019f28 <floor+0x40>
 8019f50:	2900      	cmp	r1, #0
 8019f52:	bfbe      	ittt	lt
 8019f54:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8019f58:	fa40 f303 	asrlt.w	r3, r0, r3
 8019f5c:	18c9      	addlt	r1, r1, r3
 8019f5e:	ea21 0102 	bic.w	r1, r1, r2
 8019f62:	2000      	movs	r0, #0
 8019f64:	e7e0      	b.n	8019f28 <floor+0x40>
 8019f66:	2b33      	cmp	r3, #51	; 0x33
 8019f68:	dd05      	ble.n	8019f76 <floor+0x8e>
 8019f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f6e:	d101      	bne.n	8019f74 <floor+0x8c>
 8019f70:	ee30 0b00 	vadd.f64	d0, d0, d0
 8019f74:	bd30      	pop	{r4, r5, pc}
 8019f76:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8019f7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f7e:	40e2      	lsrs	r2, r4
 8019f80:	4210      	tst	r0, r2
 8019f82:	d0f7      	beq.n	8019f74 <floor+0x8c>
 8019f84:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8019fc8 <floor+0xe0>
 8019f88:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019f8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f94:	ddc8      	ble.n	8019f28 <floor+0x40>
 8019f96:	2900      	cmp	r1, #0
 8019f98:	da02      	bge.n	8019fa0 <floor+0xb8>
 8019f9a:	2b14      	cmp	r3, #20
 8019f9c:	d103      	bne.n	8019fa6 <floor+0xbe>
 8019f9e:	3101      	adds	r1, #1
 8019fa0:	ea20 0002 	bic.w	r0, r0, r2
 8019fa4:	e7c0      	b.n	8019f28 <floor+0x40>
 8019fa6:	2401      	movs	r4, #1
 8019fa8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019fac:	fa04 f303 	lsl.w	r3, r4, r3
 8019fb0:	4418      	add	r0, r3
 8019fb2:	4285      	cmp	r5, r0
 8019fb4:	bf88      	it	hi
 8019fb6:	1909      	addhi	r1, r1, r4
 8019fb8:	e7f2      	b.n	8019fa0 <floor+0xb8>
 8019fba:	2000      	movs	r0, #0
 8019fbc:	4601      	mov	r1, r0
 8019fbe:	e7b3      	b.n	8019f28 <floor+0x40>
 8019fc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019fc4:	e7b0      	b.n	8019f28 <floor+0x40>
 8019fc6:	bf00      	nop
 8019fc8:	8800759c 	.word	0x8800759c
 8019fcc:	7e37e43c 	.word	0x7e37e43c
 8019fd0:	bff00000 	.word	0xbff00000
 8019fd4:	000fffff 	.word	0x000fffff

08019fd8 <floorf>:
 8019fd8:	ee10 3a10 	vmov	r3, s0
 8019fdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019fe0:	3a7f      	subs	r2, #127	; 0x7f
 8019fe2:	2a16      	cmp	r2, #22
 8019fe4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019fe8:	dc2a      	bgt.n	801a040 <floorf+0x68>
 8019fea:	2a00      	cmp	r2, #0
 8019fec:	da11      	bge.n	801a012 <floorf+0x3a>
 8019fee:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a050 <floorf+0x78>
 8019ff2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ff6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ffe:	dd05      	ble.n	801a00c <floorf+0x34>
 801a000:	2b00      	cmp	r3, #0
 801a002:	da23      	bge.n	801a04c <floorf+0x74>
 801a004:	4a13      	ldr	r2, [pc, #76]	; (801a054 <floorf+0x7c>)
 801a006:	2900      	cmp	r1, #0
 801a008:	bf18      	it	ne
 801a00a:	4613      	movne	r3, r2
 801a00c:	ee00 3a10 	vmov	s0, r3
 801a010:	4770      	bx	lr
 801a012:	4911      	ldr	r1, [pc, #68]	; (801a058 <floorf+0x80>)
 801a014:	4111      	asrs	r1, r2
 801a016:	420b      	tst	r3, r1
 801a018:	d0fa      	beq.n	801a010 <floorf+0x38>
 801a01a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a050 <floorf+0x78>
 801a01e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a022:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a02a:	ddef      	ble.n	801a00c <floorf+0x34>
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	bfbe      	ittt	lt
 801a030:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801a034:	fa40 f202 	asrlt.w	r2, r0, r2
 801a038:	189b      	addlt	r3, r3, r2
 801a03a:	ea23 0301 	bic.w	r3, r3, r1
 801a03e:	e7e5      	b.n	801a00c <floorf+0x34>
 801a040:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801a044:	d3e4      	bcc.n	801a010 <floorf+0x38>
 801a046:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a04a:	4770      	bx	lr
 801a04c:	2300      	movs	r3, #0
 801a04e:	e7dd      	b.n	801a00c <floorf+0x34>
 801a050:	7149f2ca 	.word	0x7149f2ca
 801a054:	bf800000 	.word	0xbf800000
 801a058:	007fffff 	.word	0x007fffff

0801a05c <scalbnf>:
 801a05c:	ee10 3a10 	vmov	r3, s0
 801a060:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a064:	d02a      	beq.n	801a0bc <scalbnf+0x60>
 801a066:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a06a:	d302      	bcc.n	801a072 <scalbnf+0x16>
 801a06c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a070:	4770      	bx	lr
 801a072:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a076:	d122      	bne.n	801a0be <scalbnf+0x62>
 801a078:	4b23      	ldr	r3, [pc, #140]	; (801a108 <scalbnf+0xac>)
 801a07a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801a10c <scalbnf+0xb0>
 801a07e:	4298      	cmp	r0, r3
 801a080:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a084:	db16      	blt.n	801a0b4 <scalbnf+0x58>
 801a086:	ee10 3a10 	vmov	r3, s0
 801a08a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a08e:	3a19      	subs	r2, #25
 801a090:	f24c 3150 	movw	r1, #50000	; 0xc350
 801a094:	4288      	cmp	r0, r1
 801a096:	dd14      	ble.n	801a0c2 <scalbnf+0x66>
 801a098:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801a110 <scalbnf+0xb4>
 801a09c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801a114 <scalbnf+0xb8>
 801a0a0:	ee10 3a10 	vmov	r3, s0
 801a0a4:	eeb0 7a67 	vmov.f32	s14, s15
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801a0ae:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a0b2:	4770      	bx	lr
 801a0b4:	eddf 7a18 	vldr	s15, [pc, #96]	; 801a118 <scalbnf+0xbc>
 801a0b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a0bc:	4770      	bx	lr
 801a0be:	0dd2      	lsrs	r2, r2, #23
 801a0c0:	e7e6      	b.n	801a090 <scalbnf+0x34>
 801a0c2:	4410      	add	r0, r2
 801a0c4:	28fe      	cmp	r0, #254	; 0xfe
 801a0c6:	dce7      	bgt.n	801a098 <scalbnf+0x3c>
 801a0c8:	2800      	cmp	r0, #0
 801a0ca:	dd06      	ble.n	801a0da <scalbnf+0x7e>
 801a0cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a0d0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a0d4:	ee00 3a10 	vmov	s0, r3
 801a0d8:	4770      	bx	lr
 801a0da:	f110 0f16 	cmn.w	r0, #22
 801a0de:	da09      	bge.n	801a0f4 <scalbnf+0x98>
 801a0e0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801a118 <scalbnf+0xbc>
 801a0e4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801a11c <scalbnf+0xc0>
 801a0e8:	ee10 3a10 	vmov	r3, s0
 801a0ec:	eeb0 7a67 	vmov.f32	s14, s15
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	e7da      	b.n	801a0aa <scalbnf+0x4e>
 801a0f4:	3019      	adds	r0, #25
 801a0f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a0fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a0fe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801a120 <scalbnf+0xc4>
 801a102:	ee07 3a90 	vmov	s15, r3
 801a106:	e7d7      	b.n	801a0b8 <scalbnf+0x5c>
 801a108:	ffff3cb0 	.word	0xffff3cb0
 801a10c:	4c000000 	.word	0x4c000000
 801a110:	7149f2ca 	.word	0x7149f2ca
 801a114:	f149f2ca 	.word	0xf149f2ca
 801a118:	0da24260 	.word	0x0da24260
 801a11c:	8da24260 	.word	0x8da24260
 801a120:	33000000 	.word	0x33000000

0801a124 <__errno>:
 801a124:	4b01      	ldr	r3, [pc, #4]	; (801a12c <__errno+0x8>)
 801a126:	6818      	ldr	r0, [r3, #0]
 801a128:	4770      	bx	lr
 801a12a:	bf00      	nop
 801a12c:	20000a14 	.word	0x20000a14

0801a130 <_init>:
 801a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a132:	bf00      	nop
 801a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a136:	bc08      	pop	{r3}
 801a138:	469e      	mov	lr, r3
 801a13a:	4770      	bx	lr

0801a13c <_fini>:
 801a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a13e:	bf00      	nop
 801a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a142:	bc08      	pop	{r3}
 801a144:	469e      	mov	lr, r3
 801a146:	4770      	bx	lr

0801a148 <__audioInitString3_veneer>:
 801a148:	f85f f000 	ldr.w	pc, [pc]	; 801a14c <__audioInitString3_veneer+0x4>
 801a14c:	00005421 	.word	0x00005421

0801a150 <__audioSwitchToAdditive_veneer>:
 801a150:	f85f f000 	ldr.w	pc, [pc]	; 801a154 <__audioSwitchToAdditive_veneer+0x4>
 801a154:	00000781 	.word	0x00000781

0801a158 <__audioSwitchToString1_veneer>:
 801a158:	f85f f000 	ldr.w	pc, [pc]	; 801a15c <__audioSwitchToString1_veneer+0x4>
 801a15c:	00004381 	.word	0x00004381

0801a160 <__HAL_SPI_RxCpltCallback_veneer>:
 801a160:	f85f f000 	ldr.w	pc, [pc]	; 801a164 <__HAL_SPI_RxCpltCallback_veneer+0x4>
 801a164:	00004001 	.word	0x00004001

0801a168 <__audioFreeString2_veneer>:
 801a168:	f85f f000 	ldr.w	pc, [pc]	; 801a16c <__audioFreeString2_veneer+0x4>
 801a16c:	00004a81 	.word	0x00004a81

0801a170 <__HAL_SAI_ErrorCallback_veneer>:
 801a170:	f85f f000 	ldr.w	pc, [pc]	; 801a174 <__HAL_SAI_ErrorCallback_veneer+0x4>
 801a174:	000016e1 	.word	0x000016e1

0801a178 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 801a178:	f85f f000 	ldr.w	pc, [pc]	; 801a17c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801a17c:	00003f21 	.word	0x00003f21

0801a180 <__HAL_I2C_ErrorCallback_veneer>:
 801a180:	f85f f000 	ldr.w	pc, [pc]	; 801a184 <__HAL_I2C_ErrorCallback_veneer+0x4>
 801a184:	00003e01 	.word	0x00003e01

0801a188 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 801a188:	f85f f000 	ldr.w	pc, [pc]	; 801a18c <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801a18c:	00003dc1 	.word	0x00003dc1

0801a190 <__audioSwitchToVocal_veneer>:
 801a190:	f85f f000 	ldr.w	pc, [pc]	; 801a194 <__audioSwitchToVocal_veneer+0x4>
 801a194:	00009001 	.word	0x00009001

0801a198 <__audioInitAdditive_veneer>:
 801a198:	f85f f000 	ldr.w	pc, [pc]	; 801a19c <__audioInitAdditive_veneer+0x4>
 801a19c:	00000401 	.word	0x00000401

0801a1a0 <__audioSwitchToString3_veneer>:
 801a1a0:	f85f f000 	ldr.w	pc, [pc]	; 801a1a4 <__audioSwitchToString3_veneer+0x4>
 801a1a4:	000054a1 	.word	0x000054a1

0801a1a8 <__audioSwitchToString2_veneer>:
 801a1a8:	f85f f000 	ldr.w	pc, [pc]	; 801a1ac <__audioSwitchToString2_veneer+0x4>
 801a1ac:	00004ac1 	.word	0x00004ac1

0801a1b0 <__HAL_SPI_TxRxCpltCallback_veneer>:
 801a1b0:	f85f f000 	ldr.w	pc, [pc]	; 801a1b4 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801a1b4:	00003e41 	.word	0x00003e41

0801a1b8 <__audioInitVocal_veneer>:
 801a1b8:	f85f f000 	ldr.w	pc, [pc]	; 801a1bc <__audioInitVocal_veneer+0x4>
 801a1bc:	00008fa1 	.word	0x00008fa1

0801a1c0 <__HAL_SAI_TxCpltCallback_veneer>:
 801a1c0:	f85f f000 	ldr.w	pc, [pc]	; 801a1c4 <__HAL_SAI_TxCpltCallback_veneer+0x4>
 801a1c4:	00001601 	.word	0x00001601

0801a1c8 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 801a1c8:	f85f f000 	ldr.w	pc, [pc]	; 801a1cc <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801a1cc:	00001681 	.word	0x00001681

0801a1d0 <__randomNumber_veneer>:
 801a1d0:	f85f f000 	ldr.w	pc, [pc]	; 801a1d4 <__randomNumber_veneer+0x4>
 801a1d4:	00001a21 	.word	0x00001a21

0801a1d8 <__audioFreeString1_veneer>:
 801a1d8:	f85f f000 	ldr.w	pc, [pc]	; 801a1dc <__audioFreeString1_veneer+0x4>
 801a1dc:	00004341 	.word	0x00004341

0801a1e0 <__parsePreset_veneer>:
 801a1e0:	f85f f000 	ldr.w	pc, [pc]	; 801a1e4 <__parsePreset_veneer+0x4>
 801a1e4:	00001a61 	.word	0x00001a61

0801a1e8 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 801a1e8:	f85f f000 	ldr.w	pc, [pc]	; 801a1ec <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 801a1ec:	00004121 	.word	0x00004121

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
            f->cL *= s; f->cB *= s; f->cH *= s;
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     402:	ed2d 8b02 	vpush	{d8}
     406:	4bb7      	ldr	r3, [pc, #732]	; (6e4 <audioInitAdditive+0x2e4>)
        break;
     408:	4ab7      	ldr	r2, [pc, #732]	; (6e8 <audioInitAdditive+0x2e8>)
    return (num1 < num2 ) ? num1 : num2;
     40a:	601a      	str	r2, [r3, #0]
     40c:	2400      	movs	r4, #0
     40e:	e020      	b.n	452 <audioInitAdditive+0x52>
     410:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
     414:	0043      	lsls	r3, r0, #1
     416:	2036      	movs	r0, #54	; 0x36
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     418:	fb00 3301 	mla	r3, r0, r1, r3
     41c:	4423      	add	r3, r4
     41e:	48b3      	ldr	r0, [pc, #716]	; (6ec <audioInitAdditive+0x2ec>)
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     420:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     424:	ed93 7a00 	vldr	s14, [r3]
     428:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     42c:	4410      	add	r0, r2
  return status;
     42e:	4bb0      	ldr	r3, [pc, #704]	; (6f0 <audioInitAdditive+0x2f0>)
     430:	eb03 0380 	add.w	r3, r3, r0, lsl #2
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     434:	edd3 7a00 	vldr	s15, [r3]
     438:	ee77 7a87 	vadd.f32	s15, s15, s14
     43c:	edc3 7a00 	vstr	s15, [r3]
  return status;
     440:	3201      	adds	r2, #1
     442:	2a02      	cmp	r2, #2
    return HAL_ERROR;
     444:	dde4      	ble.n	410 <audioInitAdditive+0x10>
     446:	3101      	adds	r1, #1
     448:	2902      	cmp	r1, #2
     44a:	dc01      	bgt.n	450 <audioInitAdditive+0x50>
     44c:	2200      	movs	r2, #0
     44e:	e7f8      	b.n	442 <audioInitAdditive+0x42>
    collector->_first_period = 0.01f;
}

static inline Lfloat sub_collector_period_of(_sub_collector* collector, _auto_correlation_info info)
{
    tZeroCrossingInfo first = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i1);
     450:	3401      	adds	r4, #1
     452:	2c0e      	cmp	r4, #14
     454:	dc18      	bgt.n	488 <audioInitAdditive+0x88>
     456:	4ba7      	ldr	r3, [pc, #668]	; (6f4 <audioInitAdditive+0x2f4>)
    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i2);
     458:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     45c:	ed93 7a00 	vldr	s14, [r3]
     460:	4ba5      	ldr	r3, [pc, #660]	; (6f8 <audioInitAdditive+0x2f8>)
    return tZeroCrossingInfo_fractionalPeriod(&first, &next);
     462:	edd3 7a00 	vldr	s15, [r3]
     466:	ee77 7a87 	vadd.f32	s15, s15, s14

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     46a:	edc3 7a00 	vstr	s15, [r3]
     46e:	4aa3      	ldr	r2, [pc, #652]	; (6fc <audioInitAdditive+0x2fc>)
        for (int i = 0; i != n - 1; ++i)
     470:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     474:	ed92 7a00 	vldr	s14, [r2]
     478:	edd3 7a01 	vldr	s15, [r3, #4]
     47c:	ee77 7a87 	vadd.f32	s15, s15, s14
     480:	edc3 7a01 	vstr	s15, [r3, #4]
            tZeroCrossingInfo curr = tZeroCrossingCollector_getCrossing(&p->_zc, i);
     484:	2100      	movs	r1, #0
     486:	e7df      	b.n	448 <audioInitAdditive+0x48>
     488:	2000      	movs	r0, #0
     48a:	e014      	b.n	4b6 <audioInitAdditive+0xb6>
            if (curr->_peak >= threshold)
     48c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     490:	4413      	add	r3, r2
     492:	4997      	ldr	r1, [pc, #604]	; (6f0 <audioInitAdditive+0x2f0>)
     494:	eb01 0183 	add.w	r1, r1, r3, lsl #2
     498:	ed91 7a00 	vldr	s14, [r1]
                for (int j = i + 1; j != n; ++j)
     49c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        result->period = sub_collector_period_of(collector, info) / info._harmonic;
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
     4a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
        result->period = 0.0f;
     4a4:	4996      	ldr	r1, [pc, #600]	; (700 <audioInitAdditive+0x300>)
     4a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     4aa:	edc3 7a00 	vstr	s15, [r3]
     4ae:	3201      	adds	r2, #1
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
     4b0:	2a02      	cmp	r2, #2
     4b2:	ddeb      	ble.n	48c <audioInitAdditive+0x8c>
     4b4:	3001      	adds	r0, #1
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
     4b6:	2802      	cmp	r0, #2
     4b8:	dc01      	bgt.n	4be <audioInitAdditive+0xbe>
     4ba:	2200      	movs	r2, #0
     4bc:	e7f8      	b.n	4b0 <audioInitAdditive+0xb0>
     4be:	4a8e      	ldr	r2, [pc, #568]	; (6f8 <audioInitAdditive+0x2f8>)
     4c0:	ed92 7a00 	vldr	s14, [r2]
     4c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     4c8:	ee87 6a87 	vdiv.f32	s12, s15, s14
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
     4cc:	4b8d      	ldr	r3, [pc, #564]	; (704 <audioInitAdditive+0x304>)
     4ce:	ed83 6a00 	vstr	s12, [r3]
     4d2:	ed92 7a01 	vldr	s14, [r2, #4]
     4d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
     4da:	edc3 6a01 	vstr	s13, [r3, #4]
     4de:	2400      	movs	r4, #0
     4e0:	e020      	b.n	524 <audioInitAdditive+0x124>
     4e2:	eb00 0140 	add.w	r1, r0, r0, lsl #1
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     4e6:	4411      	add	r1, r2
     4e8:	4b85      	ldr	r3, [pc, #532]	; (700 <audioInitAdditive+0x300>)
     4ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     4ee:	ed93 7a00 	vldr	s14, [r3]
     4f2:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
     4f6:	004b      	lsls	r3, r1, #1
     4f8:	2136      	movs	r1, #54	; 0x36
     4fa:	fb01 3300 	mla	r3, r1, r0, r3
     4fe:	4423      	add	r3, r4
        p->curr = fromBridge;
     500:	497a      	ldr	r1, [pc, #488]	; (6ec <audioInitAdditive+0x2ec>)
     502:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     506:	edd3 7a00 	vldr	s15, [r3]
     50a:	ee67 7a87 	vmul.f32	s15, s15, s14
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
     50e:	edc3 7a00 	vstr	s15, [r3]
     512:	3201      	adds	r2, #1
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     514:	2a02      	cmp	r2, #2
     516:	dde4      	ble.n	4e2 <audioInitAdditive+0xe2>
     518:	3001      	adds	r0, #1
     51a:	2802      	cmp	r0, #2
     51c:	dc01      	bgt.n	522 <audioInitAdditive+0x122>
     51e:	2200      	movs	r2, #0
     520:	e7f8      	b.n	514 <audioInitAdditive+0x114>
     522:	3401      	adds	r4, #1
     524:	2c0e      	cmp	r4, #14
				mem_set(buf, 0, ss);
     526:	dc13      	bgt.n	550 <audioInitAdditive+0x150>
     528:	4b72      	ldr	r3, [pc, #456]	; (6f4 <audioInitAdditive+0x2f4>)
     52a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     52e:	edd3 7a00 	vldr	s15, [r3]
				sect += n; nsect -= n;
     532:	ee66 7a27 	vmul.f32	s15, s12, s15
			} while (nsect);
     536:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
     53a:	4b70      	ldr	r3, [pc, #448]	; (6fc <audioInitAdditive+0x2fc>)
     53c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
     540:	edd3 7a00 	vldr	s15, [r3]
     544:	ee66 7aa7 	vmul.f32	s15, s13, s15
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
     548:	edc3 7a00 	vstr	s15, [r3]
     54c:	2000      	movs	r0, #0
     54e:	e7e4      	b.n	51a <audioInitAdditive+0x11a>
     550:	f04f 0c00 	mov.w	ip, #0
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
     554:	e055      	b.n	602 <audioInitAdditive+0x202>
     556:	1c58      	adds	r0, r3, #1
     558:	4a6b      	ldr	r2, [pc, #428]	; (708 <audioInitAdditive+0x308>)
     55a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
     55e:	eb04 0e00 	add.w	lr, r4, r0
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     562:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
     566:	edde 6a00 	vldr	s13, [lr]
     56a:	441c      	add	r4, r3
     56c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     570:	edd2 7a00 	vldr	s15, [r2]
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     574:	ee76 6ae7 	vsub.f32	s13, s13, s15
     578:	4c64      	ldr	r4, [pc, #400]	; (70c <audioInitAdditive+0x30c>)
     57a:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
     57e:	006a      	lsls	r2, r5, #1
     580:	f04f 0e36 	mov.w	lr, #54	; 0x36
     584:	fb0e fe01 	mul.w	lr, lr, r1
     588:	4472      	add	r2, lr
     58a:	4462      	add	r2, ip
     58c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			sys = 0x0C;		/* FAT32X */
     590:	ed92 7a00 	vldr	s14, [r2]
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     594:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
			mem_set(buf, 0, ss);
     598:	ee85 6a87 	vdiv.f32	s12, s11, s14
     59c:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
     5a0:	006a      	lsls	r2, r5, #1
     5a2:	4472      	add	r2, lr
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
     5a4:	4462      	add	r2, ip
     5a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
     5aa:	ed94 5a00 	vldr	s10, [r4]
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
     5ae:	ee85 7a85 	vdiv.f32	s14, s11, s10
     5b2:	ee36 6a47 	vsub.f32	s12, s12, s14
			pte[PTE_StHead] = 1;				/* Start head */
     5b6:	eec6 5a26 	vdiv.f32	s11, s12, s13
     5ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
			pte[PTE_StSec] = 1;					/* Start sector */
     5be:	ebc1 1401 	rsb	r4, r1, r1, lsl #4
			pte[PTE_StCyl] = 0;					/* Start cylinder */
     5c2:	0062      	lsls	r2, r4, #1
			pte[PTE_System] = sys;				/* System type */
     5c4:	4413      	add	r3, r2
     5c6:	4463      	add	r3, ip
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     5c8:	4a51      	ldr	r2, [pc, #324]	; (710 <audioInitAdditive+0x310>)
     5ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     5ce:	edc2 5a00 	vstr	s11, [r2]
     5d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
			pte[PTE_EdHead] = 254;				/* End head */
     5d6:	4a4f      	ldr	r2, [pc, #316]	; (714 <audioInitAdditive+0x314>)
     5d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     5dc:	edc2 7a00 	vstr	s15, [r2]
     5e0:	ee37 7a67 	vsub.f32	s14, s14, s15
     5e4:	4a4c      	ldr	r2, [pc, #304]	; (718 <audioInitAdditive+0x318>)
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     5e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
     5ea:	ed83 7a00 	vstr	s14, [r3]
     5ee:	4603      	mov	r3, r0
     5f0:	2b01      	cmp	r3, #1
     5f2:	ddb0      	ble.n	556 <audioInitAdditive+0x156>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
     5f4:	3101      	adds	r1, #1
     5f6:	2902      	cmp	r1, #2
     5f8:	dc01      	bgt.n	5fe <audioInitAdditive+0x1fe>
     5fa:	2300      	movs	r3, #0
     5fc:	e7f8      	b.n	5f0 <audioInitAdditive+0x1f0>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     5fe:	f10c 0c01 	add.w	ip, ip, #1
     602:	f1bc 0f0e 	cmp.w	ip, #14
     606:	dc2c      	bgt.n	662 <audioInitAdditive+0x262>
     608:	4b44      	ldr	r3, [pc, #272]	; (71c <audioInitAdditive+0x31c>)
     60a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     60e:	ed93 7a00 	vldr	s14, [r3]
     612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     616:	eec6 7a87 	vdiv.f32	s15, s13, s14
     61a:	4b41      	ldr	r3, [pc, #260]	; (720 <audioInitAdditive+0x320>)
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     61c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
	if (vol < 0) return FR_INVALID_DRIVE;
     620:	ed93 6a00 	vldr	s12, [r3]
	if (stat & STA_NOINIT) return FR_NOT_READY;
     624:	ee86 7a86 	vdiv.f32	s14, s13, s12
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
     628:	ee77 7ac7 	vsub.f32	s15, s15, s14

	return FR_OK;
}
     62c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 724 <audioInitAdditive+0x324>
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
     630:	ee67 7aa6 	vmul.f32	s15, s15, s13
     634:	4b3c      	ldr	r3, [pc, #240]	; (728 <audioInitAdditive+0x328>)
     636:	eb03 038c 	add.w	r3, r3, ip, lsl #2
     63a:	edc3 7a00 	vstr	s15, [r3]
	if (!szb_buf) return FR_MKFS_ABORTED;
     63e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 72c <audioInitAdditive+0x32c>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
     642:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
     646:	4b3a      	ldr	r3, [pc, #232]	; (730 <audioInitAdditive+0x330>)
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
     648:	eb03 038c 	add.w	r3, r3, ip, lsl #2
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
     64c:	edc3 7a00 	vstr	s15, [r3]
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
     650:	ee37 7a67 	vsub.f32	s14, s14, s15
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
     654:	4b37      	ldr	r3, [pc, #220]	; (734 <audioInitAdditive+0x334>)
     656:	eb03 038c 	add.w	r3, r3, ip, lsl #2
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
     65a:	ed83 7a00 	vstr	s14, [r3]
					return FR_MKFS_ABORTED;
     65e:	2100      	movs	r1, #0
					return FR_MKFS_ABORTED;
     660:	e7c9      	b.n	5f6 <audioInitAdditive+0x1f6>
     662:	2700      	movs	r7, #0
					return FR_MKFS_ABORTED;
     664:	e037      	b.n	6d6 <audioInitAdditive+0x2d6>
     666:	4e34      	ldr	r6, [pc, #208]	; (738 <audioInitAdditive+0x338>)
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
     668:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     66c:	4423      	add	r3, r4
     66e:	009d      	lsls	r5, r3, #2
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     670:	4631      	mov	r1, r6
     672:	4832      	ldr	r0, [pc, #200]	; (73c <audioInitAdditive+0x33c>)
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     674:	eb00 0083 	add.w	r0, r0, r3, lsl #2
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     678:	f009 f8e2 	bl	9840 <__tCycle_init_veneer>
                p += 1.0f;
     67c:	4b28      	ldr	r3, [pc, #160]	; (720 <audioInitAdditive+0x320>)
                x = 0.5f - (p - b) * invB1;
     67e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     682:	edd3 0a00 	vldr	s1, [r3]
     686:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 740 <audioInitAdditive+0x340>
     68a:	4633      	mov	r3, r6
     68c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     690:	492c      	ldr	r1, [pc, #176]	; (744 <audioInitAdditive+0x344>)
     692:	eddf 1a2d 	vldr	s3, [pc, #180]	; 748 <audioInitAdditive+0x348>
     696:	eeb0 1a48 	vmov.f32	s2, s16
     69a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 74c <audioInitAdditive+0x34c>
     69e:	ee60 0aa7 	vmul.f32	s1, s1, s15
     6a2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
                k = 1;
     6a6:	482a      	ldr	r0, [pc, #168]	; (750 <audioInitAdditive+0x350>)
     6a8:	4428      	add	r0, r5
                x = -0.5f + p * invB;
     6aa:	f009 f8bd 	bl	9828 <__tADSRT_init_veneer>
     6ae:	4d29      	ldr	r5, [pc, #164]	; (754 <audioInitAdditive+0x354>)
     6b0:	eb05 0587 	add.w	r5, r5, r7, lsl #2
     6b4:	4631      	mov	r1, r6
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     6b6:	eddf 0a28 	vldr	s1, [pc, #160]	; 758 <audioInitAdditive+0x358>
     6ba:	eeb0 0a48 	vmov.f32	s0, s16
     6be:	4628      	mov	r0, r5
     6c0:	f009 f88e 	bl	97e0 <__tExpSmooth_init_veneer>
     6c4:	eeb0 0a48 	vmov.f32	s0, s16
     6c8:	4628      	mov	r0, r5
     6ca:	f008 ffb1 	bl	9630 <__tExpSmooth_setDest_veneer>
     6ce:	3401      	adds	r4, #1
     6d0:	2c0e      	cmp	r4, #14
     6d2:	ddc8      	ble.n	666 <audioInitAdditive+0x266>
     6d4:	3701      	adds	r7, #1
                k = 0;
     6d6:	2f01      	cmp	r7, #1
     6d8:	dc01      	bgt.n	6de <audioInitAdditive+0x2de>
     6da:	2400      	movs	r4, #0
     6dc:	e7f8      	b.n	6d0 <audioInitAdditive+0x2d0>
    	sinPhase -= 1.0f;
     6de:	ecbd 8b02 	vpop	{d8}
     6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6e4:	200010d8 	.word	0x200010d8
    while (sinPhase >= 1.0f)
     6e8:	3d888889 	.word	0x3d888889
     6ec:	200003fc 	.word	0x200003fc
     6f0:	20001164 	.word	0x20001164
     6f4:	200000c0 	.word	0x200000c0
    	sinPhase += 1.0f;
     6f8:	2000115c 	.word	0x2000115c
     6fc:	20000108 	.word	0x20000108
    while (sinPhase < 0.0f)
     700:	200010a4 	.word	0x200010a4
     704:	2000109c 	.word	0x2000109c
    Lfloat tempPhase = (sinPhase * 2048.0f);
     708:	200003d8 	.word	0x200003d8
     70c:	20000150 	.word	0x20000150
    idx = (uint32_t)tempPhase; //11 bit table
     710:	20000ca0 	.word	0x20000ca0
     714:	20000b38 	.word	0x20000b38
    tempFrac = tempPhase - idx;
     718:	20000e08 	.word	0x20000e08
     71c:	20000078 	.word	0x20000078
    samp0 = __leaf_table_sinewave[idx];
     720:	20000030 	.word	0x20000030
     724:	3b84a9fa 	.word	0x3b84a9fa
     728:	20000fac 	.word	0x20000fac
    idx = (idx + 1) & c->sineMask;
     72c:	42f60000 	.word	0x42f60000
     730:	20000f70 	.word	0x20000f70
    samp1 = __leaf_table_sinewave[idx];
     734:	20000fe8 	.word	0x20000fe8
     738:	20005294 	.word	0x20005294
    Lfloat sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
     73c:	20000a40 	.word	0x20000a40
     740:	00000000 	.word	0x00000000
     744:	200011b8 	.word	0x200011b8
     748:	43160000 	.word	0x43160000
     74c:	447a0000 	.word	0x447a0000
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
     750:	20000ab8 	.word	0x20000ab8
     754:	20001154 	.word	0x20001154
     758:	3a83126f 	.word	0x3a83126f
     75c:	f3af 8000 	nop.w

00000760 <audioFreeAdditive>:
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	f3af 8000 	nop.w
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
     768:	f3af 8000 	nop.w
     76c:	f3af 8000 	nop.w
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     770:	f3af 8000 	nop.w
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
     774:	f3af 8000 	nop.w
     778:	f3af 8000 	nop.w
     77c:	f3af 8000 	nop.w

00000780 <audioSwitchToAdditive>:
     780:	b538      	push	{r3, r4, r5, lr}
     782:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     786:	ed9f 0a20 	vldr	s0, [pc, #128]	; 808 <audioSwitchToAdditive+0x88>
     78a:	4820      	ldr	r0, [pc, #128]	; (80c <audioSwitchToAdditive+0x8c>)
     78c:	f008 ff48 	bl	9620 <__tVZFilter_setFrequencyAndResonance_veneer>
     790:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     794:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 810 <audioSwitchToAdditive+0x90>
     798:	481e      	ldr	r0, [pc, #120]	; (814 <audioSwitchToAdditive+0x94>)
     79a:	f008 ff41 	bl	9620 <__tVZFilter_setFrequencyAndResonance_veneer>
     79e:	2400      	movs	r4, #0
     7a0:	e00b      	b.n	7ba <audioSwitchToAdditive+0x3a>
     7a2:	4b1d      	ldr	r3, [pc, #116]	; (818 <audioSwitchToAdditive+0x98>)
     7a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     7a8:	ed93 0a00 	vldr	s0, [r3]
     7ac:	4628      	mov	r0, r5
     7ae:	f008 ff7f 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
     7b2:	4b1a      	ldr	r3, [pc, #104]	; (81c <audioSwitchToAdditive+0x9c>)
     7b4:	2201      	movs	r2, #1
     7b6:	551a      	strb	r2, [r3, r4]
     7b8:	4414      	add	r4, r2
     7ba:	2c0b      	cmp	r4, #11
     7bc:	dc14      	bgt.n	7e8 <audioSwitchToAdditive+0x68>
     7be:	4d18      	ldr	r5, [pc, #96]	; (820 <audioSwitchToAdditive+0xa0>)
     7c0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
     7c4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 824 <audioSwitchToAdditive+0xa4>
     7c8:	4628      	mov	r0, r5
     7ca:	f008 ff95 	bl	96f8 <__tExpSmooth_setFactor_veneer>
     7ce:	4b16      	ldr	r3, [pc, #88]	; (828 <audioSwitchToAdditive+0xa8>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	2b3d      	cmp	r3, #61	; 0x3d
     7d4:	d0e5      	beq.n	7a2 <audioSwitchToAdditive+0x22>
     7d6:	4b15      	ldr	r3, [pc, #84]	; (82c <audioSwitchToAdditive+0xac>)
     7d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     7dc:	ed93 0a00 	vldr	s0, [r3]
     7e0:	4628      	mov	r0, r5
     7e2:	f008 ff65 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
     7e6:	e7e4      	b.n	7b2 <audioSwitchToAdditive+0x32>
     7e8:	2400      	movs	r4, #0
     7ea:	e007      	b.n	7fc <audioSwitchToAdditive+0x7c>
     7ec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 830 <audioSwitchToAdditive+0xb0>
     7f0:	4810      	ldr	r0, [pc, #64]	; (834 <audioSwitchToAdditive+0xb4>)
     7f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     7f6:	f009 f84f 	bl	9898 <__tADSRT_setSustain_veneer>
     7fa:	3401      	adds	r4, #1
     7fc:	4b0e      	ldr	r3, [pc, #56]	; (838 <audioSwitchToAdditive+0xb8>)
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	42a3      	cmp	r3, r4
     802:	dcf3      	bgt.n	7ec <audioSwitchToAdditive+0x6c>
     804:	bd38      	pop	{r3, r4, r5, pc}
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     806:	bf00      	nop
     808:	44dc0000 	.word	0x44dc0000
     80c:	200052f4 	.word	0x200052f4
     810:	42740000 	.word	0x42740000
     814:	200052f8 	.word	0x200052f8
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
     818:	20000000 	.word	0x20000000
     81c:	200051dc 	.word	0x200051dc
     820:	20005240 	.word	0x20005240
     824:	3a83126f 	.word	0x3a83126f
     828:	20014258 	.word	0x20014258
     82c:	20018540 	.word	0x20018540
    			c->numBLEPs--;
     830:	00000000 	.word	0x00000000
     834:	200051c4 	.word	0x200051c4
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     838:	20000694 	.word	0x20000694
     83c:	f3af 8000 	nop.w

00000840 <audioTickAdditive>:
     840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
     844:	ed2d 8b0c 	vpush	{d8-d13}
     848:	2400      	movs	r4, #0
     84a:	e00a      	b.n	862 <audioTickAdditive+0x22>
     84c:	00a5      	lsls	r5, r4, #2
     84e:	489c      	ldr	r0, [pc, #624]	; (ac0 <audioTickAdditive+0x280>)
    	whichBLEP &= 63;
     850:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     854:	f008 fe8c 	bl	9570 <__tExpSmooth_tick_veneer>
     858:	4b9a      	ldr	r3, [pc, #616]	; (ac4 <audioTickAdditive+0x284>)
     85a:	442b      	add	r3, r5
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
     85c:	ed83 0a00 	vstr	s0, [r3]
     860:	3401      	adds	r4, #1
     862:	2c0b      	cmp	r4, #11
     864:	ddf2      	ble.n	84c <audioTickAdditive+0xc>
     866:	4c98      	ldr	r4, [pc, #608]	; (ac8 <audioTickAdditive+0x288>)
     868:	4620      	mov	r0, r4
     86a:	f009 f879 	bl	9960 <__tNoise_tick_veneer>
     86e:	4897      	ldr	r0, [pc, #604]	; (acc <audioTickAdditive+0x28c>)
     870:	f009 f882 	bl	9978 <__tVZFilter_tickEfficient_veneer>
     874:	eeb0 ca40 	vmov.f32	s24, s0
     878:	4620      	mov	r0, r4
     87a:	f009 f871 	bl	9960 <__tNoise_tick_veneer>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
     87e:	4894      	ldr	r0, [pc, #592]	; (ad0 <audioTickAdditive+0x290>)
     880:	f009 f87a 	bl	9978 <__tVZFilter_tickEfficient_veneer>
     884:	ee3c ca00 	vadd.f32	s24, s24, s0
     888:	ee3c ca0c 	vadd.f32	s24, s24, s24
     88c:	4b8d      	ldr	r3, [pc, #564]	; (ac4 <audioTickAdditive+0x284>)
     88e:	edd3 7a00 	vldr	s15, [r3]
     892:	ee27 9aa7 	vmul.f32	s18, s15, s15
     896:	ee29 9a27 	vmul.f32	s18, s18, s15
     89a:	ee29 9a27 	vmul.f32	s18, s18, s15
     89e:	eddf 7a8d 	vldr	s15, [pc, #564]	; ad4 <audioTickAdditive+0x294>
     8a2:	ee29 9a27 	vmul.f32	s18, s18, s15
     8a6:	edd3 aa04 	vldr	s21, [r3, #16]
     8aa:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     8ae:	ee39 baea 	vsub.f32	s22, s19, s21
     8b2:	ed93 aa01 	vldr	s20, [r3, #4]
     8b6:	ee79 9aca 	vsub.f32	s19, s19, s20
     8ba:	4887      	ldr	r0, [pc, #540]	; (ad8 <audioTickAdditive+0x298>)
     8bc:	f008 fe58 	bl	9570 <__tExpSmooth_tick_veneer>
     8c0:	eef0 ba40 	vmov.f32	s23, s0
     8c4:	2500      	movs	r5, #0
     8c6:	eddf 8a85 	vldr	s17, [pc, #532]	; adc <audioTickAdditive+0x29c>
     8ca:	e061      	b.n	990 <audioTickAdditive+0x150>
     8cc:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
     8d0:	4423      	add	r3, r4
     8d2:	009e      	lsls	r6, r3, #2
     8d4:	4882      	ldr	r0, [pc, #520]	; (ae0 <audioTickAdditive+0x2a0>)
     8d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     8da:	f009 f859 	bl	9990 <__tADSRT_tick_veneer>
     8de:	eeb0 da40 	vmov.f32	s26, s0
     8e2:	ea4f 0885 	mov.w	r8, r5, lsl #2
     8e6:	4b7f      	ldr	r3, [pc, #508]	; (ae4 <audioTickAdditive+0x2a4>)
     8e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     8ec:	edd3 7a00 	vldr	s15, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     8f0:	1c67      	adds	r7, r4, #1
     8f2:	ee07 7a10 	vmov	s14, r7
     8f6:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
     8fa:	ee20 0a27 	vmul.f32	s0, s0, s15
     8fe:	ee07 4a90 	vmov	s15, r4
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
     902:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
     906:	ee68 7a09 	vmul.f32	s15, s16, s18
     90a:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
     90e:	ee77 7aac 	vadd.f32	s15, s15, s25
     912:	4c75      	ldr	r4, [pc, #468]	; (ae8 <audioTickAdditive+0x2a8>)
     914:	4434      	add	r4, r6
     916:	ee20 0a27 	vmul.f32	s0, s0, s15
    			c->numBLEPs--;
     91a:	4620      	mov	r0, r4
     91c:	f008 ffd0 	bl	98c0 <__tCycle_setFreq_veneer>
     920:	4b72      	ldr	r3, [pc, #456]	; (aec <audioTickAdditive+0x2ac>)
     922:	edd3 7a00 	vldr	s15, [r3]
    z += 0.5f * (c->_f[j] - z);
     926:	ee28 8a27 	vmul.f32	s16, s16, s15
     92a:	ee7c cac8 	vsub.f32	s25, s25, s16
     92e:	ee2a 8a08 	vmul.f32	s16, s20, s16
     932:	ee69 caac 	vmul.f32	s25, s19, s25
     936:	ee38 8a2c 	vadd.f32	s16, s16, s25
     93a:	4b6d      	ldr	r3, [pc, #436]	; (af0 <audioTickAdditive+0x2b0>)
     93c:	4433      	add	r3, r6
     93e:	ed93 7a00 	vldr	s14, [r3]
    j = (j+1) & 7;
     942:	ee27 7a08 	vmul.f32	s14, s14, s16
    c->out = z;
     946:	4b6b      	ldr	r3, [pc, #428]	; (af4 <audioTickAdditive+0x2b4>)
     948:	4443      	add	r3, r8
    c->_p = p;
     94a:	edd3 7a00 	vldr	s15, [r3]
    c->_w = w;
     94e:	ee77 7a87 	vadd.f32	s15, s15, s14
    c->_b = b;
     952:	edc3 7a00 	vstr	s15, [r3]
    c->_z = z;
     956:	4b68      	ldr	r3, [pc, #416]	; (af8 <audioTickAdditive+0x2b8>)
     958:	4433      	add	r3, r6
    c->_j = j;
     95a:	edd3 ca00 	vldr	s25, [r3]
    c->_sinPhase = sinPhase;
     95e:	ee6a caac 	vmul.f32	s25, s21, s25
}
     962:	ee7c ca8b 	vadd.f32	s25, s25, s22
     966:	4620      	mov	r0, r4
     968:	f009 f8b6 	bl	9ad8 <__tCycle_tick_veneer>
     96c:	ee60 7a0d 	vmul.f32	s15, s0, s26
     970:	ee67 7aac 	vmul.f32	s15, s15, s25
     974:	ee67 7a88 	vmul.f32	s15, s15, s16
     978:	4b60      	ldr	r3, [pc, #384]	; (afc <audioTickAdditive+0x2bc>)
     97a:	4443      	add	r3, r8
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     97c:	ed93 7a00 	vldr	s14, [r3]
     980:	ee67 7a87 	vmul.f32	s15, s15, s14
     984:	ee78 8aa7 	vadd.f32	s17, s17, s15
		for (int j = 0; j < NUM_OVERTONES; j++)
     988:	463c      	mov	r4, r7
     98a:	2c0e      	cmp	r4, #14
     98c:	dd9e      	ble.n	8cc <audioTickAdditive+0x8c>
	for (int i = 0; i < numStringsThisBoard; i++)
     98e:	3501      	adds	r5, #1
     990:	4b5b      	ldr	r3, [pc, #364]	; (b00 <audioTickAdditive+0x2c0>)
     992:	781b      	ldrb	r3, [r3, #0]
     994:	42ab      	cmp	r3, r5
     996:	dd5d      	ble.n	a54 <audioTickAdditive+0x214>
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     998:	00ac      	lsls	r4, r5, #2
     99a:	4e5a      	ldr	r6, [pc, #360]	; (b04 <audioTickAdditive+0x2c4>)
     99c:	eb06 0685 	add.w	r6, r6, r5, lsl #2
     9a0:	4630      	mov	r0, r6
     9a2:	f008 fde5 	bl	9570 <__tExpSmooth_tick_veneer>
		thisTension = knobScaled[5] * thisTension;
     9a6:	4f47      	ldr	r7, [pc, #284]	; (ac4 <audioTickAdditive+0x284>)
     9a8:	ed97 da05 	vldr	s26, [r7, #20]
     9ac:	ee2d da00 	vmul.f32	s26, s26, s0
		float tensionSpeed = (1.0f - knobScaled[6]);
     9b0:	edd7 7a06 	vldr	s15, [r7, #24]
     9b4:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
     9b8:	ee7c 7ae7 	vsub.f32	s15, s25, s15
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
     9bc:	ee27 0aa7 	vmul.f32	s0, s15, s15
     9c0:	ee20 0a27 	vmul.f32	s0, s0, s15
     9c4:	ee20 0a27 	vmul.f32	s0, s0, s15
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     9c8:	eddf 7a4f 	vldr	s15, [pc, #316]	; b08 <audioTickAdditive+0x2c8>
     9cc:	ee20 0a27 	vmul.f32	s0, s0, s15
     9d0:	eddf da4e 	vldr	s27, [pc, #312]	; b0c <audioTickAdditive+0x2cc>
     9d4:	ee30 0a2d 	vadd.f32	s0, s0, s27
     9d8:	4630      	mov	r0, r6
     9da:	f008 fe8d 	bl	96f8 <__tExpSmooth_setFactor_veneer>
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     9de:	4b4c      	ldr	r3, [pc, #304]	; (b10 <audioTickAdditive+0x2d0>)
     9e0:	4423      	add	r3, r4
     9e2:	ed93 8a00 	vldr	s16, [r3]
     9e6:	4b4b      	ldr	r3, [pc, #300]	; (b14 <audioTickAdditive+0x2d4>)
     9e8:	4423      	add	r3, r4
     9ea:	edd3 7a00 	vldr	s15, [r3]
     9ee:	ee38 8a27 	vadd.f32	s16, s16, s15
     9f2:	ee38 8a0d 	vadd.f32	s16, s16, s26
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     9f6:	4848      	ldr	r0, [pc, #288]	; (b18 <audioTickAdditive+0x2d8>)
     9f8:	4420      	add	r0, r4
     9fa:	f008 ffc9 	bl	9990 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     9fe:	ee6c 7a00 	vmul.f32	s15, s24, s0
     a02:	ed97 7a02 	vldr	s14, [r7, #8]
     a06:	ee67 7a87 	vmul.f32	s15, s15, s14
     a0a:	ee78 8aa7 	vadd.f32	s17, s17, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a0e:	eeb0 0a48 	vmov.f32	s0, s16
     a12:	f008 fe11 	bl	9638 <__mtofTableLookup_veneer>
     a16:	4b33      	ldr	r3, [pc, #204]	; (ae4 <audioTickAdditive+0x2a4>)
     a18:	4423      	add	r3, r4
     a1a:	ed83 0a00 	vstr	s0, [r3]
		invGainSum[i] = 1.0f;
     a1e:	4b37      	ldr	r3, [pc, #220]	; (afc <audioTickAdditive+0x2bc>)
     a20:	4423      	add	r3, r4
     a22:	edc3 ca00 	vstr	s25, [r3]
		if(gainSum[i] > 0.0001f)
     a26:	4b33      	ldr	r3, [pc, #204]	; (af4 <audioTickAdditive+0x2b4>)
     a28:	4423      	add	r3, r4
     a2a:	edd3 7a00 	vldr	s15, [r3]
     a2e:	eef4 7aed 	vcmpe.f32	s15, s27
     a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a36:	dd06      	ble.n	a46 <audioTickAdditive+0x206>
			invGainSum[i] = 1.0f / gainSum[i];
     a38:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
     a3c:	4b2f      	ldr	r3, [pc, #188]	; (afc <audioTickAdditive+0x2bc>)
     a3e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     a42:	ed83 7a00 	vstr	s14, [r3]
		gainSum[i] = 0.0f;
     a46:	4b2b      	ldr	r3, [pc, #172]	; (af4 <audioTickAdditive+0x2b4>)
     a48:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     a4c:	2200      	movs	r2, #0
     a4e:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < NUM_OVERTONES; j++)
     a50:	2400      	movs	r4, #0
     a52:	e79a      	b.n	98a <audioTickAdditive+0x14a>
		}
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     a54:	eddf 7a31 	vldr	s15, [pc, #196]	; b1c <audioTickAdditive+0x2dc>
     a58:	ee6b 7aa7 	vmul.f32	s15, s23, s15
     a5c:	ed9f 7a30 	vldr	s14, [pc, #192]	; b20 <audioTickAdditive+0x2e0>
     a60:	ee77 7a87 	vadd.f32	s15, s15, s14
     a64:	ed9f 7a2f 	vldr	s14, [pc, #188]	; b24 <audioTickAdditive+0x2e4>
     a68:	ee2b 7a87 	vmul.f32	s14, s23, s14
     a6c:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
     a74:	ed9f 7a2c 	vldr	s14, [pc, #176]	; b28 <audioTickAdditive+0x2e8>
     a78:	ee2b 7a87 	vmul.f32	s14, s23, s14
     a7c:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a80:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a84:	ee77 7a87 	vadd.f32	s15, s15, s14
     a88:	ed9f 7a28 	vldr	s14, [pc, #160]	; b2c <audioTickAdditive+0x2ec>
     a8c:	ee2b 7a87 	vmul.f32	s14, s23, s14
     a90:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a94:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a98:	ee27 7a2b 	vmul.f32	s14, s14, s23
     a9c:	ee77 7ac7 	vsub.f32	s15, s15, s14


	tempSamp *= 0.5f;
     aa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     aa4:	ee68 8a87 	vmul.f32	s17, s17, s14
	tempSamp *= outVol;
     aa8:	ee67 7aa8 	vmul.f32	s15, s15, s17
	tempSamp *= masterVolFromBrain;
     aac:	4b20      	ldr	r3, [pc, #128]	; (b30 <audioTickAdditive+0x2f0>)
     aae:	ed93 0a00 	vldr	s0, [r3]
	return tempSamp;
}
     ab2:	ee27 0a80 	vmul.f32	s0, s15, s0
     ab6:	ecbd 8b0c 	vpop	{d8-d13}
     aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     abe:	bf00      	nop
     ac0:	20005240 	.word	0x20005240
     ac4:	200051f0 	.word	0x200051f0
     ac8:	200052ec 	.word	0x200052ec
     acc:	200052f4 	.word	0x200052f4
     ad0:	200052f8 	.word	0x200052f8
     ad4:	3e99999a 	.word	0x3e99999a
     ad8:	20014264 	.word	0x20014264
     adc:	00000000 	.word	0x00000000
     ae0:	20000ab8 	.word	0x20000ab8
     ae4:	200141dc 	.word	0x200141dc
     ae8:	20000a40 	.word	0x20000a40
     aec:	200010d8 	.word	0x200010d8
     af0:	20001024 	.word	0x20001024
     af4:	200010c8 	.word	0x200010c8
     af8:	200010dc 	.word	0x200010dc
     afc:	200010d0 	.word	0x200010d0
     b00:	20000694 	.word	0x20000694
     b04:	20001154 	.word	0x20001154
     b08:	3c23d70a 	.word	0x3c23d70a
     b0c:	38d1b717 	.word	0x38d1b717
     b10:	20014224 	.word	0x20014224
     b14:	2001422c 	.word	0x2001422c
     b18:	200051c4 	.word	0x200051c4
     b1c:	3ef1ac0b 	.word	0x3ef1ac0b
     b20:	3bdc4213 	.word	0x3bdc4213
     b24:	4022be0a 	.word	0x4022be0a
     b28:	40caa285 	.word	0x40caa285
     b2c:	40516313 	.word	0x40516313
     b30:	2000068c 	.word	0x2000068c
     b34:	f3af 8000 	nop.w
     b38:	f3af 8000 	nop.w
     b3c:	f3af 8000 	nop.w

00000b40 <audioFrameAdditive>:
{
     b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b44:	ed2d 8b0a 	vpush	{d8-d12}
     b48:	b083      	sub	sp, #12
     b4a:	4604      	mov	r4, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
     b4c:	4bcd      	ldr	r3, [pc, #820]	; (e84 <audioFrameAdditive+0x344>)
     b4e:	685b      	ldr	r3, [r3, #4]
     b50:	9300      	str	r3, [sp, #0]
	if (resetStringInputs)
     b52:	4bcd      	ldr	r3, [pc, #820]	; (e88 <audioFrameAdditive+0x348>)
     b54:	781b      	ldrb	r3, [r3, #0]
     b56:	b9e3      	cbnz	r3, b92 <audioFrameAdditive+0x52>
		for (int j = 0; j < NUM_OVERTONES; j++)
     b58:	2600      	movs	r6, #0
     b5a:	e041      	b.n	be0 <audioFrameAdditive+0xa0>
			tADSRT_clear(&fenvelopes[i]);
     b5c:	48cb      	ldr	r0, [pc, #812]	; (e8c <audioFrameAdditive+0x34c>)
     b5e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     b62:	f008 fd4d 	bl	9600 <__tADSRT_clear_veneer>
			previousStringInputs[i] = 0;
     b66:	4bca      	ldr	r3, [pc, #808]	; (e90 <audioFrameAdditive+0x350>)
     b68:	2200      	movs	r2, #0
     b6a:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     b6e:	3601      	adds	r6, #1
     b70:	4bc8      	ldr	r3, [pc, #800]	; (e94 <audioFrameAdditive+0x354>)
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	42b3      	cmp	r3, r6
     b76:	dd0e      	ble.n	b96 <audioFrameAdditive+0x56>
			for (int j = 0; j < NUM_OVERTONES; j++)
     b78:	2500      	movs	r5, #0
     b7a:	2d0e      	cmp	r5, #14
     b7c:	dcee      	bgt.n	b5c <audioFrameAdditive+0x1c>
				tADSRT_clear(&additiveEnv[i][j]);
     b7e:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
     b82:	442b      	add	r3, r5
     b84:	48c4      	ldr	r0, [pc, #784]	; (e98 <audioFrameAdditive+0x358>)
     b86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     b8a:	f008 fd39 	bl	9600 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     b8e:	3501      	adds	r5, #1
     b90:	e7f3      	b.n	b7a <audioFrameAdditive+0x3a>
		for (int i = 0; i < numStringsThisBoard; i++)
     b92:	2600      	movs	r6, #0
     b94:	e7ec      	b.n	b70 <audioFrameAdditive+0x30>
		resetStringInputs = 0;
     b96:	4bbc      	ldr	r3, [pc, #752]	; (e88 <audioFrameAdditive+0x348>)
     b98:	2200      	movs	r2, #0
     b9a:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
     b9c:	4bbf      	ldr	r3, [pc, #764]	; (e9c <audioFrameAdditive+0x35c>)
     b9e:	2201      	movs	r2, #1
     ba0:	601a      	str	r2, [r3, #0]
     ba2:	e7d9      	b.n	b58 <audioFrameAdditive+0x18>
			Lfloat x0 = additivePickupPos[i] * PI;
     ba4:	4bbe      	ldr	r3, [pc, #760]	; (ea0 <audioFrameAdditive+0x360>)
     ba6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     baa:	edd3 7a00 	vldr	s15, [r3]
     bae:	ed9f 7abd 	vldr	s14, [pc, #756]	; ea4 <audioFrameAdditive+0x364>
     bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     bb6:	1c6f      	adds	r7, r5, #1
     bb8:	ee07 7a10 	vmov	s14, r7
     bbc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
     bc0:	ee20 0a27 	vmul.f32	s0, s0, s15
     bc4:	f008 fce4 	bl	9590 <__arm_sin_f32_veneer>
     bc8:	ebc6 1206 	rsb	r2, r6, r6, lsl #4
     bcc:	442a      	add	r2, r5
     bce:	4bb6      	ldr	r3, [pc, #728]	; (ea8 <audioFrameAdditive+0x368>)
     bd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     bd4:	ed83 0a00 	vstr	s0, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     bd8:	463d      	mov	r5, r7
     bda:	2d0e      	cmp	r5, #14
     bdc:	dde2      	ble.n	ba4 <audioFrameAdditive+0x64>
	for (int i = 0; i < numStringsThisBoard; i++)
     bde:	3601      	adds	r6, #1
     be0:	4bac      	ldr	r3, [pc, #688]	; (e94 <audioFrameAdditive+0x354>)
     be2:	781b      	ldrb	r3, [r3, #0]
     be4:	42b3      	cmp	r3, r6
     be6:	dd11      	ble.n	c0c <audioFrameAdditive+0xcc>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     be8:	4bb0      	ldr	r3, [pc, #704]	; (eac <audioFrameAdditive+0x36c>)
     bea:	edd3 7a03 	vldr	s15, [r3, #12]
     bee:	ed9f 7ab0 	vldr	s14, [pc, #704]	; eb0 <audioFrameAdditive+0x370>
     bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
     bf6:	ed9f 7aaf 	vldr	s14, [pc, #700]	; eb4 <audioFrameAdditive+0x374>
     bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
     bfe:	4ba8      	ldr	r3, [pc, #672]	; (ea0 <audioFrameAdditive+0x360>)
     c00:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     c04:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     c08:	2500      	movs	r5, #0
     c0a:	e7e6      	b.n	bda <audioFrameAdditive+0x9a>
	if (newPluck)
     c0c:	4ba3      	ldr	r3, [pc, #652]	; (e9c <audioFrameAdditive+0x35c>)
     c0e:	681b      	ldr	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	f040 83a9 	bne.w	1368 <audioFrameAdditive+0x828>
		for (int i = 0; i < numStringsThisBoard; i++)
     c16:	2500      	movs	r5, #0
     c18:	e3be      	b.n	1398 <audioFrameAdditive+0x858>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     c1a:	4ba7      	ldr	r3, [pc, #668]	; (eb8 <audioFrameAdditive+0x378>)
     c1c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     c20:	b29b      	uxth	r3, r3
     c22:	ee0c 3a10 	vmov	s24, r3
     c26:	eeb8 cacc 	vcvt.f32.s32	s24, s24
     c2a:	eddf 7aa4 	vldr	s15, [pc, #656]	; ebc <audioFrameAdditive+0x37c>
     c2e:	ee2c ca27 	vmul.f32	s24, s24, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     c32:	00ae      	lsls	r6, r5, #2
     c34:	eeb0 0a4c 	vmov.f32	s0, s24
     c38:	48a1      	ldr	r0, [pc, #644]	; (ec0 <audioFrameAdditive+0x380>)
     c3a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     c3e:	f008 fed7 	bl	99f0 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     c42:	4fa0      	ldr	r7, [pc, #640]	; (ec4 <audioFrameAdditive+0x384>)
     c44:	4437      	add	r7, r6
     c46:	4ba0      	ldr	r3, [pc, #640]	; (ec8 <audioFrameAdditive+0x388>)
     c48:	681b      	ldr	r3, [r3, #0]
     c4a:	603b      	str	r3, [r7, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     c4c:	4b8f      	ldr	r3, [pc, #572]	; (e8c <audioFrameAdditive+0x34c>)
     c4e:	eb06 0803 	add.w	r8, r6, r3
     c52:	ed9f 0a9e 	vldr	s0, [pc, #632]	; ecc <audioFrameAdditive+0x38c>
     c56:	4640      	mov	r0, r8
     c58:	f008 fdca 	bl	97f0 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     c5c:	eeb0 0a4c 	vmov.f32	s0, s24
     c60:	4640      	mov	r0, r8
     c62:	f008 ff21 	bl	9aa8 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     c66:	4b9a      	ldr	r3, [pc, #616]	; (ed0 <audioFrameAdditive+0x390>)
     c68:	4433      	add	r3, r6
     c6a:	ed93 0a00 	vldr	s0, [r3]
     c6e:	edd7 7a00 	vldr	s15, [r7]
     c72:	ee30 0a27 	vadd.f32	s0, s0, s15
     c76:	f008 fcdf 	bl	9638 <__mtofTableLookup_veneer>
     c7a:	4b96      	ldr	r3, [pc, #600]	; (ed4 <audioFrameAdditive+0x394>)
     c7c:	4433      	add	r3, r6
     c7e:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     c82:	4b95      	ldr	r3, [pc, #596]	; (ed8 <audioFrameAdditive+0x398>)
     c84:	681b      	ldr	r3, [r3, #0]
     c86:	195a      	adds	r2, r3, r5
     c88:	9201      	str	r2, [sp, #4]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     c8a:	4b88      	ldr	r3, [pc, #544]	; (eac <audioFrameAdditive+0x36c>)
     c8c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
     c90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
     c98:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
     c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
     ca0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     ca4:	ee77 7a87 	vadd.f32	s15, s15, s14
     ca8:	ee60 8a27 	vmul.f32	s17, s0, s15
				if (thisString < 6)
     cac:	2a05      	cmp	r2, #5
     cae:	dc49      	bgt.n	d44 <audioFrameAdditive+0x204>
					stringFade = (float)thisString * 0.2f;
     cb0:	ee07 2a90 	vmov	s15, r2
     cb4:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
     cb8:	eddf 7a88 	vldr	s15, [pc, #544]	; edc <audioFrameAdditive+0x39c>
     cbc:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
     cc0:	4b87      	ldr	r3, [pc, #540]	; (ee0 <audioFrameAdditive+0x3a0>)
     cc2:	ed93 7a06 	vldr	s14, [r3, #24]
     cc6:	edd3 7a08 	vldr	s15, [r3, #32]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
     cca:	ee78 6ac7 	vsub.f32	s13, s17, s14
     cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
     cd2:	eec6 9aa7 	vdiv.f32	s19, s13, s15
     cd6:	ee79 9aa9 	vadd.f32	s19, s19, s19
     cda:	eddf 7a82 	vldr	s15, [pc, #520]	; ee4 <audioFrameAdditive+0x3a4>
     cde:	ee79 9aa7 	vadd.f32	s19, s19, s15
    if (val < min)
     ce2:	eef4 9ae7 	vcmpe.f32	s19, s15
     ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cea:	d409      	bmi.n	d00 <audioFrameAdditive+0x1c0>
    else if (val > max)
     cec:	eddf 7a7e 	vldr	s15, [pc, #504]	; ee8 <audioFrameAdditive+0x3a8>
     cf0:	eef4 9ae7 	vcmpe.f32	s19, s15
     cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     cf8:	dd04      	ble.n	d04 <audioFrameAdditive+0x1c4>
        return max;
     cfa:	eef0 9a67 	vmov.f32	s19, s15
     cfe:	e001      	b.n	d04 <audioFrameAdditive+0x1c4>
        return min;
     d00:	eddf 9a78 	vldr	s19, [pc, #480]	; ee4 <audioFrameAdditive+0x3a4>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d04:	4b76      	ldr	r3, [pc, #472]	; (ee0 <audioFrameAdditive+0x3a0>)
     d06:	ed93 7a03 	vldr	s14, [r3, #12]
     d0a:	edd3 7a05 	vldr	s15, [r3, #20]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
     d0e:	ee78 6ac7 	vsub.f32	s13, s17, s14
     d12:	ee77 7ac7 	vsub.f32	s15, s15, s14
     d16:	ee86 aaa7 	vdiv.f32	s20, s13, s15
     d1a:	ee3a aa0a 	vadd.f32	s20, s20, s20
     d1e:	eddf 7a71 	vldr	s15, [pc, #452]	; ee4 <audioFrameAdditive+0x3a4>
     d22:	ee3a aa27 	vadd.f32	s20, s20, s15
    if (val < min)
     d26:	eeb4 aae7 	vcmpe.f32	s20, s15
     d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d2e:	d457      	bmi.n	de0 <audioFrameAdditive+0x2a0>
    else if (val > max)
     d30:	eddf 7a6d 	vldr	s15, [pc, #436]	; ee8 <audioFrameAdditive+0x3a8>
     d34:	eeb4 aae7 	vcmpe.f32	s20, s15
     d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d3c:	dd52      	ble.n	de4 <audioFrameAdditive+0x2a4>
        return max;
     d3e:	eeb0 aa67 	vmov.f32	s20, s15
     d42:	e04f      	b.n	de4 <audioFrameAdditive+0x2a4>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     d44:	eddd 7a01 	vldr	s15, [sp, #4]
     d48:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
     d4c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
     d50:	ee39 9a67 	vsub.f32	s18, s18, s15
     d54:	eddf 7a61 	vldr	s15, [pc, #388]	; edc <audioFrameAdditive+0x39c>
     d58:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d5c:	4b60      	ldr	r3, [pc, #384]	; (ee0 <audioFrameAdditive+0x3a0>)
     d5e:	ed93 7a03 	vldr	s14, [r3, #12]
     d62:	edd3 7a05 	vldr	s15, [r3, #20]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
     d66:	ee78 6ac7 	vsub.f32	s13, s17, s14
     d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
     d6e:	eec6 9aa7 	vdiv.f32	s19, s13, s15
     d72:	ee79 9aa9 	vadd.f32	s19, s19, s19
     d76:	eddf 7a5b 	vldr	s15, [pc, #364]	; ee4 <audioFrameAdditive+0x3a4>
     d7a:	ee79 9aa7 	vadd.f32	s19, s19, s15
    if (val < min)
     d7e:	eef4 9ae7 	vcmpe.f32	s19, s15
     d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d86:	d409      	bmi.n	d9c <audioFrameAdditive+0x25c>
    else if (val > max)
     d88:	eddf 7a57 	vldr	s15, [pc, #348]	; ee8 <audioFrameAdditive+0x3a8>
     d8c:	eef4 9ae7 	vcmpe.f32	s19, s15
     d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d94:	dd04      	ble.n	da0 <audioFrameAdditive+0x260>
        return max;
     d96:	eef0 9a67 	vmov.f32	s19, s15
     d9a:	e001      	b.n	da0 <audioFrameAdditive+0x260>
        return min;
     d9c:	eddf 9a51 	vldr	s19, [pc, #324]	; ee4 <audioFrameAdditive+0x3a4>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
     da0:	4b4f      	ldr	r3, [pc, #316]	; (ee0 <audioFrameAdditive+0x3a0>)
     da2:	ed93 7a00 	vldr	s14, [r3]
     da6:	edd3 7a02 	vldr	s15, [r3, #8]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
     daa:	ee78 6ac7 	vsub.f32	s13, s17, s14
     dae:	ee77 7ac7 	vsub.f32	s15, s15, s14
     db2:	ee86 aaa7 	vdiv.f32	s20, s13, s15
     db6:	ee3a aa0a 	vadd.f32	s20, s20, s20
     dba:	eddf 7a4a 	vldr	s15, [pc, #296]	; ee4 <audioFrameAdditive+0x3a4>
     dbe:	ee3a aa27 	vadd.f32	s20, s20, s15
    if (val < min)
     dc2:	eeb4 aae7 	vcmpe.f32	s20, s15
     dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dca:	d429      	bmi.n	e20 <audioFrameAdditive+0x2e0>
    else if (val > max)
     dcc:	eddf 7a46 	vldr	s15, [pc, #280]	; ee8 <audioFrameAdditive+0x3a8>
     dd0:	eeb4 aae7 	vcmpe.f32	s20, s15
     dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     dd8:	dd04      	ble.n	de4 <audioFrameAdditive+0x2a4>
        return max;
     dda:	eeb0 aa67 	vmov.f32	s20, s15
     dde:	e001      	b.n	de4 <audioFrameAdditive+0x2a4>
        return min;
     de0:	ed9f aa40 	vldr	s20, [pc, #256]	; ee4 <audioFrameAdditive+0x3a4>
				float oneMinusStringFade = 1.0f - stringFade;
     de4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
     de8:	ee7a aac9 	vsub.f32	s21, s21, s18
				int height1Int = floor(height1);
     dec:	eeb7 7aca 	vcvt.f64.f32	d7, s20
     df0:	febb 7b47 	vrintm.f64	d7, d7
     df4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     df8:	ee17 aa90 	vmov	sl, s15
				float height1Float = height1 - height1Int;
     dfc:	eef8 bae7 	vcvt.f32.s32	s23, s15
     e00:	ee7a ba6b 	vsub.f32	s23, s20, s23
				int height2Int = floor(height2);
     e04:	eeb7 7ae9 	vcvt.f64.f32	d7, s19
     e08:	febb 7b47 	vrintm.f64	d7, d7
     e0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     e10:	ee17 9a90 	vmov	r9, s15
				float height2Float = height2 - height2Int;
     e14:	eeb8 bae7 	vcvt.f32.s32	s22, s15
     e18:	ee39 bacb 	vsub.f32	s22, s19, s22
				for (int j = 0; j < NUM_OVERTONES; j++)
     e1c:	2600      	movs	r6, #0
     e1e:	e0d0      	b.n	fc2 <audioFrameAdditive+0x482>
     e20:	ed9f aa30 	vldr	s20, [pc, #192]	; ee4 <audioFrameAdditive+0x3a4>
     e24:	e7de      	b.n	de4 <audioFrameAdditive+0x2a4>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
     e26:	f106 023c 	add.w	r2, r6, #60	; 0x3c
     e2a:	4b30      	ldr	r3, [pc, #192]	; (eec <audioFrameAdditive+0x3ac>)
     e2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e30:	edd3 7a00 	vldr	s15, [r3]
     e34:	4b2a      	ldr	r3, [pc, #168]	; (ee0 <audioFrameAdditive+0x3a0>)
     e36:	ed93 7a06 	vldr	s14, [r3, #24]
     e3a:	edd3 6a07 	vldr	s13, [r3, #28]
    if (val < min)
     e3e:	eeb4 7ae8 	vcmpe.f32	s14, s17
     e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e46:	dc06      	bgt.n	e56 <audioFrameAdditive+0x316>
    else if (val > max)
     e48:	eef4 6ae8 	vcmpe.f32	s13, s17
     e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e50:	d511      	bpl.n	e76 <audioFrameAdditive+0x336>
        return max;
     e52:	eeb0 7a66 	vmov.f32	s14, s13
     e56:	ee67 7a87 	vmul.f32	s15, s15, s14
     e5a:	f106 023c 	add.w	r2, r6, #60	; 0x3c
     e5e:	4b24      	ldr	r3, [pc, #144]	; (ef0 <audioFrameAdditive+0x3b0>)
     e60:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e64:	ed93 7a00 	vldr	s14, [r3]
     e68:	ee77 7a87 	vadd.f32	s15, s15, s14
     e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
     e74:	e11b      	b.n	10ae <audioFrameAdditive+0x56e>
        return val;
     e76:	eeb0 7a68 	vmov.f32	s14, s17
     e7a:	e7ec      	b.n	e56 <audioFrameAdditive+0x316>
     e7c:	eeb0 7a68 	vmov.f32	s14, s17
     e80:	e106      	b.n	1090 <audioFrameAdditive+0x550>
     e82:	bf00      	nop
     e84:	e0001000 	.word	0xe0001000
     e88:	20005778 	.word	0x20005778
     e8c:	200051c4 	.word	0x200051c4
     e90:	20005360 	.word	0x20005360
     e94:	20000694 	.word	0x20000694
     e98:	20000ab8 	.word	0x20000ab8
     e9c:	200052f0 	.word	0x200052f0
     ea0:	20000b30 	.word	0x20000b30
     ea4:	40490fdb 	.word	0x40490fdb
     ea8:	200010dc 	.word	0x200010dc
     eac:	200051f0 	.word	0x200051f0
     eb0:	3ecccccd 	.word	0x3ecccccd
     eb4:	3dcccccd 	.word	0x3dcccccd
     eb8:	2001420c 	.word	0x2001420c
     ebc:	37800080 	.word	0x37800080
     ec0:	20001154 	.word	0x20001154
     ec4:	2001422c 	.word	0x2001422c
     ec8:	200052fc 	.word	0x200052fc
     ecc:	42480000 	.word	0x42480000
     ed0:	20014224 	.word	0x20014224
     ed4:	200141dc 	.word	0x200141dc
     ed8:	200051cc 	.word	0x200051cc
     edc:	3e4ccccd 	.word	0x3e4ccccd
     ee0:	200003d8 	.word	0x200003d8
     ee4:	00000000 	.word	0x00000000
     ee8:	3ffeb852 	.word	0x3ffeb852
     eec:	20000ca0 	.word	0x20000ca0
     ef0:	20000e08 	.word	0x20000e08
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
     ef4:	f106 021e 	add.w	r2, r6, #30
     ef8:	4bdf      	ldr	r3, [pc, #892]	; (1278 <audioFrameAdditive+0x738>)
     efa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     efe:	edd3 6a00 	vldr	s13, [r3]
     f02:	4bde      	ldr	r3, [pc, #888]	; (127c <audioFrameAdditive+0x73c>)
     f04:	edd3 7a03 	vldr	s15, [r3, #12]
     f08:	ed93 6a04 	vldr	s12, [r3, #16]
    if (val < min)
     f0c:	eef4 7ae8 	vcmpe.f32	s15, s17
     f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f14:	dc06      	bgt.n	f24 <audioFrameAdditive+0x3e4>
    else if (val > max)
     f16:	eeb4 6ae8 	vcmpe.f32	s12, s17
     f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     f1e:	d511      	bpl.n	f44 <audioFrameAdditive+0x404>
        return max;
     f20:	eef0 7a46 	vmov.f32	s15, s12
     f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
     f28:	f106 021e 	add.w	r2, r6, #30
     f2c:	4bd4      	ldr	r3, [pc, #848]	; (1280 <audioFrameAdditive+0x740>)
     f2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f32:	edd3 7a00 	vldr	s15, [r3]
     f36:	ee76 6aa7 	vadd.f32	s13, s13, s15
     f3a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     f3e:	eec6 7a26 	vdiv.f32	s15, s12, s13
     f42:	e013      	b.n	f6c <audioFrameAdditive+0x42c>
        return val;
     f44:	eef0 7a68 	vmov.f32	s15, s17
     f48:	e7ec      	b.n	f24 <audioFrameAdditive+0x3e4>
     f4a:	eef0 7a68 	vmov.f32	s15, s17
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
     f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
     f52:	f106 022d 	add.w	r2, r6, #45	; 0x2d
     f56:	4bca      	ldr	r3, [pc, #808]	; (1280 <audioFrameAdditive+0x740>)
     f58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f5c:	edd3 7a00 	vldr	s15, [r3]
     f60:	ee76 6aa7 	vadd.f32	s13, s13, s15
     f64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     f68:	eec6 7a26 	vdiv.f32	s15, s12, s13
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
     f6c:	ee67 7a89 	vmul.f32	s15, s15, s18
     f70:	ee27 7a2a 	vmul.f32	s14, s14, s21
     f74:	ee77 7a87 	vadd.f32	s15, s15, s14
					thisDecay *= 2000.0f * knobScaled[10];
     f78:	4bc2      	ldr	r3, [pc, #776]	; (1284 <audioFrameAdditive+0x744>)
     f7a:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
     f7e:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 1288 <audioFrameAdditive+0x748>
     f82:	ee20 0a07 	vmul.f32	s0, s0, s14
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
     f86:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
     f8a:	4433      	add	r3, r6
     f8c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
     f90:	4abe      	ldr	r2, [pc, #760]	; (128c <audioFrameAdditive+0x74c>)
     f92:	eb02 0883 	add.w	r8, r2, r3, lsl #2
     f96:	ee20 0a27 	vmul.f32	s0, s0, s15
     f9a:	4640      	mov	r0, r8
     f9c:	f008 fc28 	bl	97f0 <__tADSRT_setDecay_veneer>
					currentRandom++;
     fa0:	4fbb      	ldr	r7, [pc, #748]	; (1290 <audioFrameAdditive+0x750>)
     fa2:	783b      	ldrb	r3, [r7, #0]
     fa4:	3301      	adds	r3, #1
     fa6:	703b      	strb	r3, [r7, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
     fa8:	ee28 0a0c 	vmul.f32	s0, s16, s24
     fac:	4640      	mov	r0, r8
     fae:	f008 fd7b 	bl	9aa8 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
     fb2:	4bb8      	ldr	r3, [pc, #736]	; (1294 <audioFrameAdditive+0x754>)
     fb4:	445b      	add	r3, fp
     fb6:	ed83 8a00 	vstr	s16, [r3]
					currentRandom++;
     fba:	783b      	ldrb	r3, [r7, #0]
     fbc:	3301      	adds	r3, #1
     fbe:	703b      	strb	r3, [r7, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
     fc0:	3601      	adds	r6, #1
     fc2:	2e0e      	cmp	r6, #14
     fc4:	f300 81aa 	bgt.w	131c <audioFrameAdditive+0x7dc>
					if (thisString < 6)
     fc8:	9b01      	ldr	r3, [sp, #4]
     fca:	2b05      	cmp	r3, #5
     fcc:	f300 8092 	bgt.w	10f4 <audioFrameAdditive+0x5b4>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     fd0:	4ab1      	ldr	r2, [pc, #708]	; (1298 <audioFrameAdditive+0x758>)
     fd2:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
     fd6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
     fda:	3336      	adds	r3, #54	; 0x36
     fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fe0:	ed93 8a00 	vldr	s16, [r3]
     fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     fe8:	ee77 7a6b 	vsub.f32	s15, s14, s23
     fec:	ee28 8a27 	vmul.f32	s16, s16, s15
     ff0:	f10a 0301 	add.w	r3, sl, #1
     ff4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     ff8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
     ffc:	3336      	adds	r3, #54	; 0x36
     ffe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1002:	edd3 7a00 	vldr	s15, [r3]
    1006:	ee67 7aab 	vmul.f32	s15, s15, s23
    100a:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    100e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
    1012:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    1016:	336c      	adds	r3, #108	; 0x6c
    1018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    101c:	edd3 7a00 	vldr	s15, [r3]
    1020:	ee77 6a4b 	vsub.f32	s13, s14, s22
    1024:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1028:	f109 0301 	add.w	r3, r9, #1
    102c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1030:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    1034:	336c      	adds	r3, #108	; 0x6c
    1036:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    103a:	edd2 6a00 	vldr	s13, [r2]
    103e:	ee66 6a8b 	vmul.f32	s13, s13, s22
    1042:	ee77 7aa6 	vadd.f32	s15, s15, s13
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    1046:	ee29 8a08 	vmul.f32	s16, s18, s16
    104a:	ee6a 7aa7 	vmul.f32	s15, s21, s15
    104e:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
    1052:	eef4 9ac7 	vcmpe.f32	s19, s14
    1056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    105a:	f53f aee4 	bmi.w	e26 <audioFrameAdditive+0x2e6>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    105e:	f106 024b 	add.w	r2, r6, #75	; 0x4b
    1062:	4b85      	ldr	r3, [pc, #532]	; (1278 <audioFrameAdditive+0x738>)
    1064:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1068:	edd3 7a00 	vldr	s15, [r3]
    106c:	4b83      	ldr	r3, [pc, #524]	; (127c <audioFrameAdditive+0x73c>)
    106e:	ed93 7a07 	vldr	s14, [r3, #28]
    1072:	edd3 6a08 	vldr	s13, [r3, #32]
    if (val < min)
    1076:	eeb4 7ae8 	vcmpe.f32	s14, s17
    107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    107e:	dc07      	bgt.n	1090 <audioFrameAdditive+0x550>
    else if (val > max)
    1080:	eef4 6ae8 	vcmpe.f32	s13, s17
    1084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1088:	f57f aef8 	bpl.w	e7c <audioFrameAdditive+0x33c>
        return max;
    108c:	eeb0 7a66 	vmov.f32	s14, s13
    1090:	ee67 7a87 	vmul.f32	s15, s15, s14
    1094:	f106 024b 	add.w	r2, r6, #75	; 0x4b
    1098:	4b79      	ldr	r3, [pc, #484]	; (1280 <audioFrameAdditive+0x740>)
    109a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    109e:	ed93 7a00 	vldr	s14, [r3]
    10a2:	ee77 7a87 	vadd.f32	s15, s15, s14
    10a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    10aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						if (height1 < 1.0f)
    10ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    10b2:	eeb4 aae7 	vcmpe.f32	s20, s15
    10b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ba:	f53f af1b 	bmi.w	ef4 <audioFrameAdditive+0x3b4>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    10be:	f106 022d 	add.w	r2, r6, #45	; 0x2d
    10c2:	4b6d      	ldr	r3, [pc, #436]	; (1278 <audioFrameAdditive+0x738>)
    10c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    10c8:	edd3 6a00 	vldr	s13, [r3]
    10cc:	4b6b      	ldr	r3, [pc, #428]	; (127c <audioFrameAdditive+0x73c>)
    10ce:	edd3 7a04 	vldr	s15, [r3, #16]
    10d2:	ed93 6a05 	vldr	s12, [r3, #20]
    if (val < min)
    10d6:	eef4 7ae8 	vcmpe.f32	s15, s17
    10da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10de:	f73f af36 	bgt.w	f4e <audioFrameAdditive+0x40e>
    else if (val > max)
    10e2:	eeb4 6ae8 	vcmpe.f32	s12, s17
    10e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10ea:	f57f af2e 	bpl.w	f4a <audioFrameAdditive+0x40a>
        return max;
    10ee:	eef0 7a46 	vmov.f32	s15, s12
    10f2:	e72c      	b.n	f4e <audioFrameAdditive+0x40e>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10f4:	4a68      	ldr	r2, [pc, #416]	; (1298 <audioFrameAdditive+0x758>)
    10f6:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
    10fa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    10fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1102:	ed93 8a00 	vldr	s16, [r3]
    1106:	f10a 0301 	add.w	r3, sl, #1
    110a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    110e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    1112:	3336      	adds	r3, #54	; 0x36
    1114:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1118:	edd3 7a00 	vldr	s15, [r3]
    111c:	ee67 7aab 	vmul.f32	s15, s15, s23
    1120:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1124:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
    1128:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    112c:	3336      	adds	r3, #54	; 0x36
    112e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1132:	edd3 7a00 	vldr	s15, [r3]
    1136:	f109 0301 	add.w	r3, r9, #1
    113a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    113e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    1142:	336c      	adds	r3, #108	; 0x6c
    1144:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1148:	ed92 7a00 	vldr	s14, [r2]
    114c:	ee27 7a0b 	vmul.f32	s14, s14, s22
    1150:	ee77 7a87 	vadd.f32	s15, s15, s14
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    1154:	ee29 8a08 	vmul.f32	s16, s18, s16
    1158:	ee6a 7aa7 	vmul.f32	s15, s21, s15
    115c:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
    1160:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1164:	eef4 9ae7 	vcmpe.f32	s19, s15
    1168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    116c:	d45c      	bmi.n	1228 <audioFrameAdditive+0x6e8>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    116e:	f106 022d 	add.w	r2, r6, #45	; 0x2d
    1172:	4b41      	ldr	r3, [pc, #260]	; (1278 <audioFrameAdditive+0x738>)
    1174:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1178:	edd3 7a00 	vldr	s15, [r3]
    117c:	4b3f      	ldr	r3, [pc, #252]	; (127c <audioFrameAdditive+0x73c>)
    117e:	ed93 7a04 	vldr	s14, [r3, #16]
    1182:	edd3 6a05 	vldr	s13, [r3, #20]
    if (val < min)
    1186:	eeb4 7ae8 	vcmpe.f32	s14, s17
    118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    118e:	dc07      	bgt.n	11a0 <audioFrameAdditive+0x660>
    else if (val > max)
    1190:	eef4 6ae8 	vcmpe.f32	s13, s17
    1194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1198:	f140 8083 	bpl.w	12a2 <audioFrameAdditive+0x762>
        return max;
    119c:	eeb0 7a66 	vmov.f32	s14, s13
    11a0:	ee67 7a87 	vmul.f32	s15, s15, s14
    11a4:	f106 022d 	add.w	r2, r6, #45	; 0x2d
    11a8:	4b35      	ldr	r3, [pc, #212]	; (1280 <audioFrameAdditive+0x740>)
    11aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11ae:	ed93 7a00 	vldr	s14, [r3]
    11b2:	ee77 7a87 	vadd.f32	s15, s15, s14
    11b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    11ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						if (height1 < 1.0f)
    11be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    11c2:	eeb4 aae7 	vcmpe.f32	s20, s15
    11c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11ca:	d46d      	bmi.n	12a8 <audioFrameAdditive+0x768>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    11cc:	f106 020f 	add.w	r2, r6, #15
    11d0:	4b29      	ldr	r3, [pc, #164]	; (1278 <audioFrameAdditive+0x738>)
    11d2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11d6:	edd3 6a00 	vldr	s13, [r3]
    11da:	4b28      	ldr	r3, [pc, #160]	; (127c <audioFrameAdditive+0x73c>)
    11dc:	edd3 7a01 	vldr	s15, [r3, #4]
    11e0:	ed93 6a02 	vldr	s12, [r3, #8]
    if (val < min)
    11e4:	eef4 7ae8 	vcmpe.f32	s15, s17
    11e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11ec:	dc06      	bgt.n	11fc <audioFrameAdditive+0x6bc>
    else if (val > max)
    11ee:	eeb4 6ae8 	vcmpe.f32	s12, s17
    11f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11f6:	d57e      	bpl.n	12f6 <audioFrameAdditive+0x7b6>
        return max;
    11f8:	eef0 7a46 	vmov.f32	s15, s12
    11fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    1200:	f106 020f 	add.w	r2, r6, #15
    1204:	4b1e      	ldr	r3, [pc, #120]	; (1280 <audioFrameAdditive+0x740>)
    1206:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    120a:	edd3 7a00 	vldr	s15, [r3]
    120e:	ee76 6aa7 	vadd.f32	s13, s13, s15
    1212:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    1216:	eec6 7a26 	vdiv.f32	s15, s12, s13
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    121a:	ee67 7a89 	vmul.f32	s15, s15, s18
    121e:	ee27 7a2a 	vmul.f32	s14, s14, s21
    1222:	ee77 7a87 	vadd.f32	s15, s15, s14
    1226:	e6a7      	b.n	f78 <audioFrameAdditive+0x438>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1228:	f106 021e 	add.w	r2, r6, #30
    122c:	4b12      	ldr	r3, [pc, #72]	; (1278 <audioFrameAdditive+0x738>)
    122e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1232:	edd3 7a00 	vldr	s15, [r3]
    1236:	4b11      	ldr	r3, [pc, #68]	; (127c <audioFrameAdditive+0x73c>)
    1238:	ed93 7a03 	vldr	s14, [r3, #12]
    123c:	edd3 6a04 	vldr	s13, [r3, #16]
    if (val < min)
    1240:	eeb4 7ae8 	vcmpe.f32	s14, s17
    1244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1248:	dc06      	bgt.n	1258 <audioFrameAdditive+0x718>
    else if (val > max)
    124a:	eef4 6ae8 	vcmpe.f32	s13, s17
    124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1252:	d523      	bpl.n	129c <audioFrameAdditive+0x75c>
        return max;
    1254:	eeb0 7a66 	vmov.f32	s14, s13
    1258:	ee67 7a87 	vmul.f32	s15, s15, s14
    125c:	f106 021e 	add.w	r2, r6, #30
    1260:	4b07      	ldr	r3, [pc, #28]	; (1280 <audioFrameAdditive+0x740>)
    1262:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1266:	ed93 7a00 	vldr	s14, [r3]
    126a:	ee77 7a87 	vadd.f32	s15, s15, s14
    126e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    1276:	e7a2      	b.n	11be <audioFrameAdditive+0x67e>
    1278:	20000ca0 	.word	0x20000ca0
    127c:	200003d8 	.word	0x200003d8
    1280:	20000e08 	.word	0x20000e08
    1284:	200051f0 	.word	0x200051f0
    1288:	44fa0000 	.word	0x44fa0000
    128c:	20000ab8 	.word	0x20000ab8
    1290:	2001431c 	.word	0x2001431c
    1294:	20001024 	.word	0x20001024
    1298:	200003fc 	.word	0x200003fc
        return val;
    129c:	eeb0 7a68 	vmov.f32	s14, s17
    12a0:	e7da      	b.n	1258 <audioFrameAdditive+0x718>
    12a2:	eeb0 7a68 	vmov.f32	s14, s17
    12a6:	e77b      	b.n	11a0 <audioFrameAdditive+0x660>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    12a8:	4b48      	ldr	r3, [pc, #288]	; (13cc <audioFrameAdditive+0x88c>)
    12aa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    12ae:	edd3 6a00 	vldr	s13, [r3]
    12b2:	4b47      	ldr	r3, [pc, #284]	; (13d0 <audioFrameAdditive+0x890>)
    12b4:	edd3 7a00 	vldr	s15, [r3]
    12b8:	ed93 6a01 	vldr	s12, [r3, #4]
    if (val < min)
    12bc:	eef4 7ae8 	vcmpe.f32	s15, s17
    12c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12c4:	dc06      	bgt.n	12d4 <audioFrameAdditive+0x794>
    else if (val > max)
    12c6:	eeb4 6ae8 	vcmpe.f32	s12, s17
    12ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12ce:	d50f      	bpl.n	12f0 <audioFrameAdditive+0x7b0>
        return max;
    12d0:	eef0 7a46 	vmov.f32	s15, s12
    12d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
    12d8:	4b3e      	ldr	r3, [pc, #248]	; (13d4 <audioFrameAdditive+0x894>)
    12da:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    12de:	edd3 7a00 	vldr	s15, [r3]
    12e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
    12e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    12ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
    12ee:	e794      	b.n	121a <audioFrameAdditive+0x6da>
        return val;
    12f0:	eef0 7a68 	vmov.f32	s15, s17
    12f4:	e7ee      	b.n	12d4 <audioFrameAdditive+0x794>
    12f6:	eef0 7a68 	vmov.f32	s15, s17
    12fa:	e77f      	b.n	11fc <audioFrameAdditive+0x6bc>
					tADSRT_off(&additiveEnv[i][j]);
    12fc:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    1300:	4433      	add	r3, r6
    1302:	4835      	ldr	r0, [pc, #212]	; (13d8 <audioFrameAdditive+0x898>)
    1304:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1308:	f008 fb6a 	bl	99e0 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    130c:	3601      	adds	r6, #1
    130e:	2e0e      	cmp	r6, #14
    1310:	ddf4      	ble.n	12fc <audioFrameAdditive+0x7bc>
				tADSRT_off(&fenvelopes[i]);
    1312:	4832      	ldr	r0, [pc, #200]	; (13dc <audioFrameAdditive+0x89c>)
    1314:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1318:	f008 fb62 	bl	99e0 <__tADSRT_off_veneer>
			previousStringInputs[i] = stringInputs[i];
    131c:	4b30      	ldr	r3, [pc, #192]	; (13e0 <audioFrameAdditive+0x8a0>)
    131e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    1322:	b29b      	uxth	r3, r3
    1324:	4a2f      	ldr	r2, [pc, #188]	; (13e4 <audioFrameAdditive+0x8a4>)
    1326:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    132a:	3501      	adds	r5, #1
    132c:	4b2e      	ldr	r3, [pc, #184]	; (13e8 <audioFrameAdditive+0x8a8>)
    132e:	781b      	ldrb	r3, [r3, #0]
    1330:	42ab      	cmp	r3, r5
    1332:	dd1b      	ble.n	136c <audioFrameAdditive+0x82c>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1334:	4b2b      	ldr	r3, [pc, #172]	; (13e4 <audioFrameAdditive+0x8a4>)
    1336:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    133a:	b29b      	uxth	r3, r3
    133c:	b933      	cbnz	r3, 134c <audioFrameAdditive+0x80c>
    133e:	4b28      	ldr	r3, [pc, #160]	; (13e0 <audioFrameAdditive+0x8a0>)
    1340:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    1344:	b29b      	uxth	r3, r3
    1346:	2b00      	cmp	r3, #0
    1348:	f47f ac67 	bne.w	c1a <audioFrameAdditive+0xda>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    134c:	4b25      	ldr	r3, [pc, #148]	; (13e4 <audioFrameAdditive+0x8a4>)
    134e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    1352:	b29b      	uxth	r3, r3
    1354:	2b00      	cmp	r3, #0
    1356:	d0e1      	beq.n	131c <audioFrameAdditive+0x7dc>
    1358:	4b21      	ldr	r3, [pc, #132]	; (13e0 <audioFrameAdditive+0x8a0>)
    135a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    135e:	b29b      	uxth	r3, r3
    1360:	2b00      	cmp	r3, #0
    1362:	d1db      	bne.n	131c <audioFrameAdditive+0x7dc>
				for (int j = 0; j < NUM_OVERTONES; j++)
    1364:	2600      	movs	r6, #0
    1366:	e7d2      	b.n	130e <audioFrameAdditive+0x7ce>
		for (int i = 0; i < numStringsThisBoard; i++)
    1368:	2500      	movs	r5, #0
    136a:	e7df      	b.n	132c <audioFrameAdditive+0x7ec>
		newPluck = 0;
    136c:	4b1f      	ldr	r3, [pc, #124]	; (13ec <audioFrameAdditive+0x8ac>)
    136e:	2200      	movs	r2, #0
    1370:	601a      	str	r2, [r3, #0]
    1372:	e450      	b.n	c16 <audioFrameAdditive+0xd6>
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    1374:	f7ff fa64 	bl	840 <audioTickAdditive>
    1378:	eddf 7a1d 	vldr	s15, [pc, #116]	; 13f0 <audioFrameAdditive+0x8b0>
    137c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1380:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1384:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    1388:	1962      	adds	r2, r4, r5
    138a:	491a      	ldr	r1, [pc, #104]	; (13f4 <audioFrameAdditive+0x8b4>)
    138c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    1390:	3201      	adds	r2, #1
    1392:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1396:	3502      	adds	r5, #2
    1398:	2d7f      	cmp	r5, #127	; 0x7f
    139a:	ddeb      	ble.n	1374 <audioFrameAdditive+0x834>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    139c:	4b16      	ldr	r3, [pc, #88]	; (13f8 <audioFrameAdditive+0x8b8>)
    139e:	685b      	ldr	r3, [r3, #4]
    13a0:	9a00      	ldr	r2, [sp, #0]
    13a2:	1a9b      	subs	r3, r3, r2
    13a4:	4a15      	ldr	r2, [pc, #84]	; (13fc <audioFrameAdditive+0x8bc>)
    13a6:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    13a8:	ee07 3a90 	vmov	s15, r3
    13ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
    13b0:	4b13      	ldr	r3, [pc, #76]	; (1400 <audioFrameAdditive+0x8c0>)
    13b2:	ed93 7a00 	vldr	s14, [r3]
    13b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    13ba:	4b12      	ldr	r3, [pc, #72]	; (1404 <audioFrameAdditive+0x8c4>)
    13bc:	edc3 7a00 	vstr	s15, [r3]
}
    13c0:	b003      	add	sp, #12
    13c2:	ecbd 8b0a 	vpop	{d8-d12}
    13c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13ca:	bf00      	nop
    13cc:	20000ca0 	.word	0x20000ca0
    13d0:	200003d8 	.word	0x200003d8
    13d4:	20000e08 	.word	0x20000e08
    13d8:	20000ab8 	.word	0x20000ab8
    13dc:	200051c4 	.word	0x200051c4
    13e0:	2001420c 	.word	0x2001420c
    13e4:	20005360 	.word	0x20005360
    13e8:	20000694 	.word	0x20000694
    13ec:	200052f0 	.word	0x200052f0
    13f0:	4b000000 	.word	0x4b000000
    13f4:	30000000 	.word	0x30000000
    13f8:	e0001000 	.word	0xe0001000
    13fc:	2001424c 	.word	0x2001424c
    1400:	20000684 	.word	0x20000684
    1404:	200051d4 	.word	0x200051d4
	...

00001420 <audioFrameWaiting>:
{
}


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
    1420:	b410      	push	{r4}
    1422:	4684      	mov	ip, r0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	uint32_t tempCountFrame = DWT->CYCCNT;
    1424:	4b11      	ldr	r3, [pc, #68]	; (146c <audioFrameWaiting+0x4c>)
    1426:	685c      	ldr	r4, [r3, #4]
	//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1428:	2200      	movs	r2, #0
    142a:	e009      	b.n	1440 <audioFrameWaiting+0x20>
	{
		int iplusbuffer = buffer_offset + i;
    142c:	eb0c 0302 	add.w	r3, ip, r2
		audioOutBuffer[iplusbuffer] = 0;
    1430:	490f      	ldr	r1, [pc, #60]	; (1470 <audioFrameWaiting+0x50>)
    1432:	2000      	movs	r0, #0
    1434:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		audioOutBuffer[iplusbuffer + 1] = 0;
    1438:	3301      	adds	r3, #1
    143a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    143e:	3202      	adds	r2, #2
    1440:	2a7f      	cmp	r2, #127	; 0x7f
    1442:	ddf3      	ble.n	142c <audioFrameWaiting+0xc>
	}
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1444:	4b09      	ldr	r3, [pc, #36]	; (146c <audioFrameWaiting+0x4c>)
    1446:	685b      	ldr	r3, [r3, #4]
    1448:	1b1b      	subs	r3, r3, r4
    144a:	4a0a      	ldr	r2, [pc, #40]	; (1474 <audioFrameWaiting+0x54>)
    144c:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    144e:	ee07 3a90 	vmov	s15, r3
    1452:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1456:	4b08      	ldr	r3, [pc, #32]	; (1478 <audioFrameWaiting+0x58>)
    1458:	ed93 7a00 	vldr	s14, [r3]
    145c:	ee67 7a87 	vmul.f32	s15, s15, s14
    1460:	4b06      	ldr	r3, [pc, #24]	; (147c <audioFrameWaiting+0x5c>)
    1462:	edc3 7a00 	vstr	s15, [r3]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    1466:	f85d 4b04 	ldr.w	r4, [sp], #4
    146a:	4770      	bx	lr
    146c:	e0001000 	.word	0xe0001000
    1470:	30000000 	.word	0x30000000
    1474:	2001424c 	.word	0x2001424c
    1478:	20000684 	.word	0x20000684
    147c:	200051d4 	.word	0x200051d4

00001480 <updateStateFromSPIMessage>:
{
    1480:	b570      	push	{r4, r5, r6, lr}
	uint32_t tempCountSPI = DWT->CYCCNT;
    1482:	4b47      	ldr	r3, [pc, #284]	; (15a0 <updateStateFromSPIMessage+0x120>)
    1484:	685c      	ldr	r4, [r3, #4]
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1486:	f100 0318 	add.w	r3, r0, #24
    148a:	4946      	ldr	r1, [pc, #280]	; (15a4 <updateStateFromSPIMessage+0x124>)
    148c:	5ccb      	ldrb	r3, [r1, r3]
	octaveAction = (modeBit >> 6) & 1;
    148e:	f3c3 1580 	ubfx	r5, r3, #6, #1
    1492:	4a45      	ldr	r2, [pc, #276]	; (15a8 <updateStateFromSPIMessage+0x128>)
    1494:	7015      	strb	r5, [r2, #0]
	dualSlider = (modeBit >> 5) & 1;
    1496:	f3c3 1640 	ubfx	r6, r3, #5, #1
    149a:	4d44      	ldr	r5, [pc, #272]	; (15ac <updateStateFromSPIMessage+0x12c>)
    149c:	602e      	str	r6, [r5, #0]
	edit = (modeBit >> 4) & 1;
    149e:	f3c3 1600 	ubfx	r6, r3, #4, #1
    14a2:	4d43      	ldr	r5, [pc, #268]	; (15b0 <updateStateFromSPIMessage+0x130>)
    14a4:	602e      	str	r6, [r5, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    14a6:	f100 0519 	add.w	r5, r0, #25
    14aa:	5d4d      	ldrb	r5, [r1, r5]
    14ac:	4941      	ldr	r1, [pc, #260]	; (15b4 <updateStateFromSPIMessage+0x134>)
    14ae:	600d      	str	r5, [r1, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    14b0:	f003 030f 	and.w	r3, r3, #15
    14b4:	3b05      	subs	r3, #5
    14b6:	ee07 3a90 	vmov	s15, r3
    14ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    14be:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    14c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    14c6:	4b3c      	ldr	r3, [pc, #240]	; (15b8 <updateStateFromSPIMessage+0x138>)
    14c8:	edc3 7a00 	vstr	s15, [r3]
	if (octaveAction)
    14cc:	7813      	ldrb	r3, [r2, #0]
    14ce:	2b00      	cmp	r3, #0
    14d0:	d163      	bne.n	159a <updateStateFromSPIMessage+0x11a>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14d2:	f100 031a 	add.w	r3, r0, #26
    14d6:	4a33      	ldr	r2, [pc, #204]	; (15a4 <updateStateFromSPIMessage+0x124>)
    14d8:	5cd1      	ldrb	r1, [r2, r3]
    14da:	f100 031b 	add.w	r3, r0, #27
    14de:	5cd3      	ldrb	r3, [r2, r3]
    14e0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    14e4:	b29b      	uxth	r3, r3
    14e6:	4935      	ldr	r1, [pc, #212]	; (15bc <updateStateFromSPIMessage+0x13c>)
    14e8:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14ea:	880b      	ldrh	r3, [r1, #0]
    14ec:	b29b      	uxth	r3, r3
    14ee:	ee00 3a10 	vmov	s0, r3
    14f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    14f6:	eddf 7a32 	vldr	s15, [pc, #200]	; 15c0 <updateStateFromSPIMessage+0x140>
    14fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    14fe:	4b31      	ldr	r3, [pc, #196]	; (15c4 <updateStateFromSPIMessage+0x144>)
    1500:	ed83 0a00 	vstr	s0, [r3]
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1504:	f100 031c 	add.w	r3, r0, #28
    1508:	f812 c003 	ldrb.w	ip, [r2, r3]
    150c:	301d      	adds	r0, #29
    150e:	5c11      	ldrb	r1, [r2, r0]
    1510:	4b2d      	ldr	r3, [pc, #180]	; (15c8 <updateStateFromSPIMessage+0x148>)
    1512:	781a      	ldrb	r2, [r3, #0]
    1514:	b2d2      	uxtb	r2, r2
    1516:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    151a:	482c      	ldr	r0, [pc, #176]	; (15cc <updateStateFromSPIMessage+0x14c>)
    151c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1520:	781a      	ldrb	r2, [r3, #0]
    1522:	b2d2      	uxtb	r2, r2
    1524:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	b2db      	uxtb	r3, r3
    152c:	4928      	ldr	r1, [pc, #160]	; (15d0 <updateStateFromSPIMessage+0x150>)
    152e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    1532:	429a      	cmp	r2, r3
    1534:	d01d      	beq.n	1572 <updateStateFromSPIMessage+0xf2>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1536:	4b24      	ldr	r3, [pc, #144]	; (15c8 <updateStateFromSPIMessage+0x148>)
    1538:	7819      	ldrb	r1, [r3, #0]
    153a:	b2c9      	uxtb	r1, r1
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	b2d2      	uxtb	r2, r2
    1540:	4603      	mov	r3, r0
    1542:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    1546:	4922      	ldr	r1, [pc, #136]	; (15d0 <updateStateFromSPIMessage+0x150>)
    1548:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    154c:	edd3 7a00 	vldr	s15, [r3]
    1550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1554:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 15d4 <updateStateFromSPIMessage+0x154>
    1558:	ee67 7a87 	vmul.f32	s15, s15, s14
    155c:	4a1e      	ldr	r2, [pc, #120]	; (15d8 <updateStateFromSPIMessage+0x158>)
    155e:	edc2 7a00 	vstr	s15, [r2]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1562:	edd3 7a01 	vldr	s15, [r3, #4]
    1566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    156a:	ee67 7a87 	vmul.f32	s15, s15, s14
    156e:	edc2 7a01 	vstr	s15, [r2, #4]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1572:	481a      	ldr	r0, [pc, #104]	; (15dc <updateStateFromSPIMessage+0x15c>)
    1574:	f008 f85c 	bl	9630 <__tExpSmooth_setDest_veneer>
	timeSPI = DWT->CYCCNT - tempCountSPI;
    1578:	4b09      	ldr	r3, [pc, #36]	; (15a0 <updateStateFromSPIMessage+0x120>)
    157a:	685b      	ldr	r3, [r3, #4]
    157c:	1b1b      	subs	r3, r3, r4
    157e:	4a18      	ldr	r2, [pc, #96]	; (15e0 <updateStateFromSPIMessage+0x160>)
    1580:	6013      	str	r3, [r2, #0]
}
    1582:	bd70      	pop	{r4, r5, r6, pc}
			stringOctave[i] = octave;
    1584:	4a17      	ldr	r2, [pc, #92]	; (15e4 <updateStateFromSPIMessage+0x164>)
    1586:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    158a:	edc2 7a00 	vstr	s15, [r2]
		for (int i = 0; i < numStringsThisBoard; i++)
    158e:	3301      	adds	r3, #1
    1590:	4a15      	ldr	r2, [pc, #84]	; (15e8 <updateStateFromSPIMessage+0x168>)
    1592:	7812      	ldrb	r2, [r2, #0]
    1594:	429a      	cmp	r2, r3
    1596:	dcf5      	bgt.n	1584 <updateStateFromSPIMessage+0x104>
    1598:	e79b      	b.n	14d2 <updateStateFromSPIMessage+0x52>
    159a:	2300      	movs	r3, #0
    159c:	e7f8      	b.n	1590 <updateStateFromSPIMessage+0x110>
    159e:	bf00      	nop
    15a0:	e0001000 	.word	0xe0001000
    15a4:	30000840 	.word	0x30000840
    15a8:	20005300 	.word	0x20005300
    15ac:	200051bc 	.word	0x200051bc
    15b0:	200051c0 	.word	0x200051c0
    15b4:	20014258 	.word	0x20014258
    15b8:	200052fc 	.word	0x200052fc
    15bc:	20014260 	.word	0x20014260
    15c0:	39800801 	.word	0x39800801
    15c4:	2001425c 	.word	0x2001425c
    15c8:	20014268 	.word	0x20014268
    15cc:	20014234 	.word	0x20014234
    15d0:	2001423c 	.word	0x2001423c
    15d4:	3b000000 	.word	0x3b000000
    15d8:	20001194 	.word	0x20001194
    15dc:	20014264 	.word	0x20014264
    15e0:	20014250 	.word	0x20014250
    15e4:	2001422c 	.word	0x2001422c
    15e8:	20000694 	.word	0x20000694
    15ec:	f3af 8000 	nop.w
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <HAL_SAI_TxCpltCallback>:
{
    1600:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    1602:	4b13      	ldr	r3, [pc, #76]	; (1650 <HAL_SAI_TxCpltCallback+0x50>)
    1604:	781b      	ldrb	r3, [r3, #0]
    1606:	b933      	cbnz	r3, 1616 <HAL_SAI_TxCpltCallback+0x16>
    1608:	4b12      	ldr	r3, [pc, #72]	; (1654 <HAL_SAI_TxCpltCallback+0x54>)
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	b11b      	cbz	r3, 1616 <HAL_SAI_TxCpltCallback+0x16>
		audioFrameFunction(HALF_BUFFER_SIZE);
    160e:	4b12      	ldr	r3, [pc, #72]	; (1658 <HAL_SAI_TxCpltCallback+0x58>)
    1610:	681b      	ldr	r3, [r3, #0]
    1612:	2080      	movs	r0, #128	; 0x80
    1614:	4798      	blx	r3
	voiceChangeCheck();
    1616:	f007 ff97 	bl	9548 <__voiceChangeCheck_veneer>
	uint32_t tempCountClean = DWT->CYCCNT;
    161a:	4b10      	ldr	r3, [pc, #64]	; (165c <HAL_SAI_TxCpltCallback+0x5c>)
    161c:	6858      	ldr	r0, [r3, #4]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    161e:	4b10      	ldr	r3, [pc, #64]	; (1660 <HAL_SAI_TxCpltCallback+0x60>)
    1620:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    1624:	f3bf 8f4f 	dsb	sy
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    1628:	f44f 7290 	mov.w	r2, #288	; 0x120
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    162c:	490d      	ldr	r1, [pc, #52]	; (1664 <HAL_SAI_TxCpltCallback+0x64>)
    162e:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1632:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    1634:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    1636:	2a00      	cmp	r2, #0
    1638:	dcf8      	bgt.n	162c <HAL_SAI_TxCpltCallback+0x2c>
    163a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    163e:	f3bf 8f6f 	isb	sy
	timeClean = DWT->CYCCNT - tempCountClean;
    1642:	4b06      	ldr	r3, [pc, #24]	; (165c <HAL_SAI_TxCpltCallback+0x5c>)
    1644:	685b      	ldr	r3, [r3, #4]
    1646:	1a1b      	subs	r3, r3, r0
    1648:	4a07      	ldr	r2, [pc, #28]	; (1668 <HAL_SAI_TxCpltCallback+0x68>)
    164a:	6013      	str	r3, [r2, #0]
}
    164c:	bd08      	pop	{r3, pc}
    164e:	bf00      	nop
    1650:	20014358 	.word	0x20014358
    1654:	20005354 	.word	0x20005354
    1658:	20001190 	.word	0x20001190
    165c:	e0001000 	.word	0xe0001000
    1660:	30000000 	.word	0x30000000
    1664:	e000ed00 	.word	0xe000ed00
    1668:	20014248 	.word	0x20014248
    166c:	f3af 8000 	nop.w
    1670:	f3af 8000 	nop.w
    1674:	f3af 8000 	nop.w
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <HAL_SAI_TxHalfCpltCallback>:
{
    1680:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    1682:	4b0f      	ldr	r3, [pc, #60]	; (16c0 <HAL_SAI_TxHalfCpltCallback+0x40>)
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	b933      	cbnz	r3, 1696 <HAL_SAI_TxHalfCpltCallback+0x16>
    1688:	4b0e      	ldr	r3, [pc, #56]	; (16c4 <HAL_SAI_TxHalfCpltCallback+0x44>)
    168a:	681b      	ldr	r3, [r3, #0]
    168c:	b11b      	cbz	r3, 1696 <HAL_SAI_TxHalfCpltCallback+0x16>
		audioFrameFunction(0);
    168e:	4b0e      	ldr	r3, [pc, #56]	; (16c8 <HAL_SAI_TxHalfCpltCallback+0x48>)
    1690:	681b      	ldr	r3, [r3, #0]
    1692:	2000      	movs	r0, #0
    1694:	4798      	blx	r3
	voiceChangeCheck();
    1696:	f007 ff57 	bl	9548 <__voiceChangeCheck_veneer>
	SCB_CleanInvalidateDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    169a:	4b0c      	ldr	r3, [pc, #48]	; (16cc <HAL_SAI_TxHalfCpltCallback+0x4c>)
    169c:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    16a0:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    16a4:	f44f 7290 	mov.w	r2, #288	; 0x120
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    16a8:	4909      	ldr	r1, [pc, #36]	; (16d0 <HAL_SAI_TxHalfCpltCallback+0x50>)
    16aa:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    16ae:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    16b0:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    16b2:	2a00      	cmp	r2, #0
    16b4:	dcf8      	bgt.n	16a8 <HAL_SAI_TxHalfCpltCallback+0x28>
    16b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16ba:	f3bf 8f6f 	isb	sy
}
    16be:	bd08      	pop	{r3, pc}
    16c0:	20014358 	.word	0x20014358
    16c4:	20005354 	.word	0x20005354
    16c8:	20001190 	.word	0x20001190
    16cc:	30000000 	.word	0x30000000
    16d0:	e000ed00 	.word	0xe000ed00
    16d4:	f3af 8000 	nop.w
    16d8:	f3af 8000 	nop.w
    16dc:	f3af 8000 	nop.w

000016e0 <HAL_SAI_ErrorCallback>:
}
    16e0:	4770      	bx	lr
    16e2:	bf00      	nop
	...

00001700 <scaleFilterResonance>:
	input *= 2047.0f;
    1700:	eddf 7a26 	vldr	s15, [pc, #152]	; 179c <scaleFilterResonance+0x9c>
    1704:	ee20 0a27 	vmul.f32	s0, s0, s15
	int inputInt = (int)input;
    1708:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    170c:	ee17 3a90 	vmov	r3, s15
	float inputFloat = (float)inputInt - input;
    1710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1714:	ee37 7a40 	vsub.f32	s14, s14, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1718:	1c5a      	adds	r2, r3, #1
    171a:	ee07 2a90 	vmov	s15, r2
    171e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (val < min)
    1722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    172a:	d409      	bmi.n	1740 <scaleFilterResonance+0x40>
    else if (val > max)
    172c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 179c <scaleFilterResonance+0x9c>
    1730:	eef4 7ae6 	vcmpe.f32	s15, s13
    1734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1738:	dd04      	ble.n	1744 <scaleFilterResonance+0x44>
        return max;
    173a:	eef0 7a66 	vmov.f32	s15, s13
    173e:	e001      	b.n	1744 <scaleFilterResonance+0x44>
        return min;
    1740:	eddf 7a17 	vldr	s15, [pc, #92]	; 17a0 <scaleFilterResonance+0xa0>
    1744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1748:	4a16      	ldr	r2, [pc, #88]	; (17a4 <scaleFilterResonance+0xa4>)
    174a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    174e:	ed93 0a00 	vldr	s0, [r3]
    1752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1756:	ee76 6ac7 	vsub.f32	s13, s13, s14
    175a:	ee20 0a26 	vmul.f32	s0, s0, s13
    175e:	ee17 3a90 	vmov	r3, s15
    1762:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1766:	edd2 7a00 	vldr	s15, [r2]
    176a:	ee67 7a87 	vmul.f32	s15, s15, s14
    176e:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (val < min)
    1772:	eddf 7a0d 	vldr	s15, [pc, #52]	; 17a8 <scaleFilterResonance+0xa8>
    1776:	eeb4 0ae7 	vcmpe.f32	s0, s15
    177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    177e:	d409      	bmi.n	1794 <scaleFilterResonance+0x94>
    else if (val > max)
    1780:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1784:	eeb4 0ae7 	vcmpe.f32	s0, s15
    1788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    178c:	dd04      	ble.n	1798 <scaleFilterResonance+0x98>
        return max;
    178e:	eeb0 0a67 	vmov.f32	s0, s15
    1792:	4770      	bx	lr
        return min;
    1794:	ed9f 0a04 	vldr	s0, [pc, #16]	; 17a8 <scaleFilterResonance+0xa8>
}
    1798:	4770      	bx	lr
    179a:	bf00      	nop
    179c:	44ffe000 	.word	0x44ffe000
    17a0:	00000000 	.word	0x00000000
    17a4:	2001a79c 	.word	0x2001a79c
    17a8:	3dcccccd 	.word	0x3dcccccd
    17ac:	f3af 8000 	nop.w
    17b0:	f3af 8000 	nop.w
    17b4:	f3af 8000 	nop.w
    17b8:	f3af 8000 	nop.w
    17bc:	f3af 8000 	nop.w

000017c0 <scaleDefault>:
}
    17c0:	4770      	bx	lr
    17c2:	bf00      	nop
    17c4:	f3af 8000 	nop.w
    17c8:	f3af 8000 	nop.w
    17cc:	f3af 8000 	nop.w
    17d0:	f3af 8000 	nop.w
    17d4:	f3af 8000 	nop.w
    17d8:	f3af 8000 	nop.w
    17dc:	f3af 8000 	nop.w

000017e0 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    17e0:	ee30 0a00 	vadd.f32	s0, s0, s0
}
    17e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    17e8:	ee30 0a67 	vsub.f32	s0, s0, s15
    17ec:	4770      	bx	lr
    17ee:	bf00      	nop
    17f0:	f3af 8000 	nop.w
    17f4:	f3af 8000 	nop.w
    17f8:	f3af 8000 	nop.w
    17fc:	f3af 8000 	nop.w

00001800 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1800:	eddf 7a04 	vldr	s15, [pc, #16]	; 1814 <scaleOscFine+0x14>
    1804:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1808:	eddf 7a03 	vldr	s15, [pc, #12]	; 1818 <scaleOscFine+0x18>
    180c:	ee30 0a67 	vsub.f32	s0, s0, s15
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	43480000 	.word	0x43480000
    1818:	42c80000 	.word	0x42c80000
    181c:	f3af 8000 	nop.w

00001820 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1820:	eddf 7a04 	vldr	s15, [pc, #16]	; 1834 <scaleOscFreq+0x14>
    1824:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1828:	eddf 7a03 	vldr	s15, [pc, #12]	; 1838 <scaleOscFreq+0x18>
    182c:	ee30 0a67 	vsub.f32	s0, s0, s15
    1830:	4770      	bx	lr
    1832:	bf00      	nop
    1834:	457a0000 	.word	0x457a0000
    1838:	44fa0000 	.word	0x44fa0000
    183c:	f3af 8000 	nop.w

00001840 <scaleTranspose>:
    if (val < min)
    1840:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    1844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1848:	d409      	bmi.n	185e <scaleTranspose+0x1e>
    else if (val > max)
    184a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    184e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    1852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1856:	dd04      	ble.n	1862 <scaleTranspose+0x22>
        return max;
    1858:	eeb0 0a67 	vmov.f32	s0, s15
    185c:	e001      	b.n	1862 <scaleTranspose+0x22>
        return min;
    185e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1874 <scaleTranspose+0x34>
	return (input * 96.0f) - 48.0f;
    1862:	eddf 7a05 	vldr	s15, [pc, #20]	; 1878 <scaleTranspose+0x38>
    1866:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    186a:	eddf 7a04 	vldr	s15, [pc, #16]	; 187c <scaleTranspose+0x3c>
    186e:	ee30 0a67 	vsub.f32	s0, s0, s15
    1872:	4770      	bx	lr
    1874:	00000000 	.word	0x00000000
    1878:	42c00000 	.word	0x42c00000
    187c:	42400000 	.word	0x42400000

00001880 <scalePitchBend>:
    if (val < min)
    1880:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    1884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1888:	d409      	bmi.n	189e <scalePitchBend+0x1e>
    else if (val > max)
    188a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    188e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    1892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1896:	dd04      	ble.n	18a2 <scalePitchBend+0x22>
        return max;
    1898:	eeb0 0a67 	vmov.f32	s0, s15
    189c:	e001      	b.n	18a2 <scalePitchBend+0x22>
        return min;
    189e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 18ac <scalePitchBend+0x2c>
}
    18a2:	eddf 7a03 	vldr	s15, [pc, #12]	; 18b0 <scalePitchBend+0x30>
    18a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    18aa:	4770      	bx	lr
    18ac:	00000000 	.word	0x00000000
    18b0:	42400000 	.word	0x42400000
    18b4:	f3af 8000 	nop.w
    18b8:	f3af 8000 	nop.w
    18bc:	f3af 8000 	nop.w

000018c0 <scaleFilterCutoff>:
}
    18c0:	eddf 7a02 	vldr	s15, [pc, #8]	; 18cc <scaleFilterCutoff+0xc>
    18c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	42fe0000 	.word	0x42fe0000
    18d0:	f3af 8000 	nop.w
    18d4:	f3af 8000 	nop.w
    18d8:	f3af 8000 	nop.w
    18dc:	f3af 8000 	nop.w

000018e0 <scaleEnvTimes>:
	input *= 2047.0f;
    18e0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 1954 <scaleEnvTimes+0x74>
    18e4:	ee20 0a27 	vmul.f32	s0, s0, s15
	int inputInt = (int)input;
    18e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    18ec:	ee17 3a90 	vmov	r3, s15
	float inputFloat = (float)inputInt - input;
    18f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    18f4:	ee37 7a40 	vsub.f32	s14, s14, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    18f8:	1c5a      	adds	r2, r3, #1
    18fa:	ee07 2a90 	vmov	s15, r2
    18fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (val < min)
    1902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    190a:	d409      	bmi.n	1920 <scaleEnvTimes+0x40>
    else if (val > max)
    190c:	eddf 6a11 	vldr	s13, [pc, #68]	; 1954 <scaleEnvTimes+0x74>
    1910:	eef4 7ae6 	vcmpe.f32	s15, s13
    1914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1918:	dd04      	ble.n	1924 <scaleEnvTimes+0x44>
        return max;
    191a:	eef0 7a66 	vmov.f32	s15, s13
    191e:	e001      	b.n	1924 <scaleEnvTimes+0x44>
        return min;
    1920:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1958 <scaleEnvTimes+0x78>
    1924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1928:	4a0c      	ldr	r2, [pc, #48]	; (195c <scaleEnvTimes+0x7c>)
    192a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    192e:	ed93 0a00 	vldr	s0, [r3]
    1932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1936:	ee76 6ac7 	vsub.f32	s13, s13, s14
    193a:	ee20 0a26 	vmul.f32	s0, s0, s13
    193e:	ee17 3a90 	vmov	r3, s15
    1942:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1946:	edd2 7a00 	vldr	s15, [r2]
    194a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    194e:	ee30 0a27 	vadd.f32	s0, s0, s15
    1952:	4770      	bx	lr
    1954:	44ffe000 	.word	0x44ffe000
    1958:	00000000 	.word	0x00000000
    195c:	200143b0 	.word	0x200143b0

00001960 <scaleLFORates>:
	input *= 2047.0f;
    1960:	eddf 7a1c 	vldr	s15, [pc, #112]	; 19d4 <scaleLFORates+0x74>
    1964:	ee20 0a27 	vmul.f32	s0, s0, s15
	int inputInt = (int)input;
    1968:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    196c:	ee17 3a90 	vmov	r3, s15
	float inputFloat = (float)inputInt - input;
    1970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1974:	ee37 7a40 	vsub.f32	s14, s14, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1978:	1c5a      	adds	r2, r3, #1
    197a:	ee07 2a90 	vmov	s15, r2
    197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (val < min)
    1982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    198a:	d409      	bmi.n	19a0 <scaleLFORates+0x40>
    else if (val > max)
    198c:	eddf 6a11 	vldr	s13, [pc, #68]	; 19d4 <scaleLFORates+0x74>
    1990:	eef4 7ae6 	vcmpe.f32	s15, s13
    1994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1998:	dd04      	ble.n	19a4 <scaleLFORates+0x44>
        return max;
    199a:	eef0 7a66 	vmov.f32	s15, s13
    199e:	e001      	b.n	19a4 <scaleLFORates+0x44>
        return min;
    19a0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 19d8 <scaleLFORates+0x78>
    19a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    19a8:	4a0c      	ldr	r2, [pc, #48]	; (19dc <scaleLFORates+0x7c>)
    19aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    19ae:	ed93 0a00 	vldr	s0, [r3]
    19b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    19b6:	ee76 6ac7 	vsub.f32	s13, s13, s14
    19ba:	ee20 0a26 	vmul.f32	s0, s0, s13
    19be:	ee17 3a90 	vmov	r3, s15
    19c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    19c6:	edd2 7a00 	vldr	s15, [r2]
    19ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
    19ce:	ee30 0a27 	vadd.f32	s0, s0, s15
    19d2:	4770      	bx	lr
    19d4:	44ffe000 	.word	0x44ffe000
    19d8:	00000000 	.word	0x00000000
    19dc:	2001650c 	.word	0x2001650c

000019e0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    19e0:	eddf 7a04 	vldr	s15, [pc, #16]	; 19f4 <scaleFinalLowpass+0x14>
    19e4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    19e8:	eddf 7a03 	vldr	s15, [pc, #12]	; 19f8 <scaleFinalLowpass+0x18>
    19ec:	ee30 0a27 	vadd.f32	s0, s0, s15
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	428c0000 	.word	0x428c0000
    19f8:	42680000 	.word	0x42680000
    19fc:	f3af 8000 	nop.w

00001a00 <blankFunction>:
}
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <randomNumber>:
	return random_values[currentRandom++];
    1a20:	4b04      	ldr	r3, [pc, #16]	; (1a34 <randomNumber+0x14>)
    1a22:	781a      	ldrb	r2, [r3, #0]
    1a24:	1c51      	adds	r1, r2, #1
    1a26:	7019      	strb	r1, [r3, #0]
    1a28:	4b03      	ldr	r3, [pc, #12]	; (1a38 <randomNumber+0x18>)
    1a2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    1a2e:	ed93 0a00 	vldr	s0, [r3]
    1a32:	4770      	bx	lr
    1a34:	2001431c 	.word	0x2001431c
    1a38:	2001a398 	.word	0x2001a398
    1a3c:	f3af 8000 	nop.w

00001a40 <scaleTwo>:
}
    1a40:	ee30 0a00 	vadd.f32	s0, s0, s0
    1a44:	4770      	bx	lr
    1a46:	bf00      	nop
    1a48:	f3af 8000 	nop.w
    1a4c:	f3af 8000 	nop.w
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <parsePreset>:
{
    1a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a64:	b085      	sub	sp, #20
    1a66:	460c      	mov	r4, r1
	currentPresetSize = size;
    1a68:	4ba1      	ldr	r3, [pc, #644]	; (1cf0 <parsePreset+0x290>)
    1a6a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1a6c:	b672      	cpsid	i
	 presetReady = 0;
    1a6e:	2300      	movs	r3, #0
    1a70:	4aa0      	ldr	r2, [pc, #640]	; (1cf4 <parsePreset+0x294>)
    1a72:	6013      	str	r3, [r2, #0]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    1a74:	e004      	b.n	1a80 <parsePreset+0x20>
		 audioOutBuffer[i] = 0;
    1a76:	4aa0      	ldr	r2, [pc, #640]	; (1cf8 <parsePreset+0x298>)
    1a78:	2100      	movs	r1, #0
    1a7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    1a7e:	3301      	adds	r3, #1
    1a80:	2bff      	cmp	r3, #255	; 0xff
    1a82:	ddf8      	ble.n	1a76 <parsePreset+0x16>
	audioMasterLevel = 0.0f;
    1a84:	4b9d      	ldr	r3, [pc, #628]	; (1cfc <parsePreset+0x29c>)
    1a86:	2200      	movs	r2, #0
    1a88:	601a      	str	r2, [r3, #0]
	chorusAssignment = 255;
    1a8a:	23ff      	movs	r3, #255	; 0xff
    1a8c:	4a9c      	ldr	r2, [pc, #624]	; (1d00 <parsePreset+0x2a0>)
    1a8e:	7013      	strb	r3, [r2, #0]
	delayAssignment = 255;
    1a90:	4a9c      	ldr	r2, [pc, #624]	; (1d04 <parsePreset+0x2a4>)
    1a92:	7013      	strb	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1a94:	4b9c      	ldr	r3, [pc, #624]	; (1d08 <parsePreset+0x2a8>)
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	2b11      	cmp	r3, #17
    1a9a:	d003      	beq.n	1aa4 <parsePreset+0x44>
	uint16_t bufferIndex = 0;
    1a9c:	2300      	movs	r3, #0
	uint16_t presetVersionNumber = 0;
    1a9e:	461e      	mov	r6, r3
	for (int i = 0; i < 14; i++)
    1aa0:	2200      	movs	r2, #0
    1aa2:	e0d5      	b.n	1c50 <parsePreset+0x1f0>
		if (buffer[bufferIndex + 1] == 18)
    1aa4:	4b98      	ldr	r3, [pc, #608]	; (1d08 <parsePreset+0x2a8>)
    1aa6:	785b      	ldrb	r3, [r3, #1]
    1aa8:	2b12      	cmp	r3, #18
    1aaa:	d009      	beq.n	1ac0 <parsePreset+0x60>
	uint16_t bufferIndex = 0;
    1aac:	2300      	movs	r3, #0
	uint16_t presetVersionNumber = 0;
    1aae:	461e      	mov	r6, r3
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    1ab0:	1c5a      	adds	r2, r3, #1
    1ab2:	4995      	ldr	r1, [pc, #596]	; (1d08 <parsePreset+0x2a8>)
    1ab4:	5c8a      	ldrb	r2, [r1, r2]
    1ab6:	2a13      	cmp	r2, #19
    1ab8:	d1f2      	bne.n	1aa0 <parsePreset+0x40>
			for (int i = 0; i < 14; i++)
    1aba:	2200      	movs	r2, #0
			bufferIndex = 4;
    1abc:	2304      	movs	r3, #4
    1abe:	e017      	b.n	1af0 <parsePreset+0x90>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    1ac0:	4b91      	ldr	r3, [pc, #580]	; (1d08 <parsePreset+0x2a8>)
    1ac2:	789a      	ldrb	r2, [r3, #2]
    1ac4:	78de      	ldrb	r6, [r3, #3]
    1ac6:	eb06 2602 	add.w	r6, r6, r2, lsl #8
    1aca:	b2b6      	uxth	r6, r6
			whichModel = 0; //this is a synth preset
    1acc:	4b8f      	ldr	r3, [pc, #572]	; (1d0c <parsePreset+0x2ac>)
    1ace:	2200      	movs	r2, #0
    1ad0:	701a      	strb	r2, [r3, #0]
			bufferIndex = 4;
    1ad2:	2304      	movs	r3, #4
    1ad4:	e7ec      	b.n	1ab0 <parsePreset+0x50>
				presetName[i] = buffer[bufferIndex];
    1ad6:	498c      	ldr	r1, [pc, #560]	; (1d08 <parsePreset+0x2a8>)
    1ad8:	5ccd      	ldrb	r5, [r1, r3]
    1ada:	498d      	ldr	r1, [pc, #564]	; (1d10 <parsePreset+0x2b0>)
    1adc:	548d      	strb	r5, [r1, r2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1ade:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1ae2:	498c      	ldr	r1, [pc, #560]	; (1d14 <parsePreset+0x2b4>)
    1ae4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1ae8:	548d      	strb	r5, [r1, r2]
				bufferIndex++;
    1aea:	3301      	adds	r3, #1
    1aec:	b29b      	uxth	r3, r3
			for (int i = 0; i < 14; i++)
    1aee:	3201      	adds	r2, #1
    1af0:	2a0d      	cmp	r2, #13
    1af2:	ddf0      	ble.n	1ad6 <parsePreset+0x76>
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    1af4:	4b84      	ldr	r3, [pc, #528]	; (1d08 <parsePreset+0x2a8>)
    1af6:	7d1d      	ldrb	r5, [r3, #20]
    1af8:	4b84      	ldr	r3, [pc, #528]	; (1d0c <parsePreset+0x2ac>)
    1afa:	701d      	strb	r5, [r3, #0]
			for (int j = 0; j < 8; j++)
    1afc:	2600      	movs	r6, #0
			bufferIndex++;
    1afe:	2315      	movs	r3, #21
			for (int j = 0; j < 8; j++)
    1b00:	e011      	b.n	1b26 <parsePreset+0xc6>
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1b02:	4a81      	ldr	r2, [pc, #516]	; (1d08 <parsePreset+0x2a8>)
    1b04:	5cd7      	ldrb	r7, [r2, r3]
    1b06:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    1b0a:	22c8      	movs	r2, #200	; 0xc8
    1b0c:	fb04 f202 	mul.w	r2, r4, r2
    1b10:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    1b14:	4880      	ldr	r0, [pc, #512]	; (1d18 <parsePreset+0x2b8>)
    1b16:	4402      	add	r2, r0
    1b18:	5457      	strb	r7, [r2, r1]
					bufferIndex++;
    1b1a:	3301      	adds	r3, #1
    1b1c:	b29b      	uxth	r3, r3
				for (int k = 0; k < 9; k++)
    1b1e:	3101      	adds	r1, #1
    1b20:	2908      	cmp	r1, #8
    1b22:	ddee      	ble.n	1b02 <parsePreset+0xa2>
			for (int j = 0; j < 8; j++)
    1b24:	3601      	adds	r6, #1
    1b26:	2e07      	cmp	r6, #7
    1b28:	dc01      	bgt.n	1b2e <parsePreset+0xce>
				for (int k = 0; k < 9; k++)
    1b2a:	2100      	movs	r1, #0
    1b2c:	e7f8      	b.n	1b20 <parsePreset+0xc0>
			for (int j = 0; j < 4; j++)
    1b2e:	2600      	movs	r6, #0
    1b30:	e013      	b.n	1b5a <parsePreset+0xfa>
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b32:	f106 0208 	add.w	r2, r6, #8
    1b36:	4974      	ldr	r1, [pc, #464]	; (1d08 <parsePreset+0x2a8>)
    1b38:	5ccf      	ldrb	r7, [r1, r3]
    1b3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1b3e:	21c8      	movs	r1, #200	; 0xc8
    1b40:	fb04 f101 	mul.w	r1, r4, r1
    1b44:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1b48:	4973      	ldr	r1, [pc, #460]	; (1d18 <parsePreset+0x2b8>)
    1b4a:	440a      	add	r2, r1
    1b4c:	5417      	strb	r7, [r2, r0]
					bufferIndex++;
    1b4e:	3301      	adds	r3, #1
    1b50:	b29b      	uxth	r3, r3
				for (int k = 0; k < 10; k++)
    1b52:	3001      	adds	r0, #1
    1b54:	2809      	cmp	r0, #9
    1b56:	ddec      	ble.n	1b32 <parsePreset+0xd2>
			for (int j = 0; j < 4; j++)
    1b58:	3601      	adds	r6, #1
    1b5a:	2e03      	cmp	r6, #3
    1b5c:	dc01      	bgt.n	1b62 <parsePreset+0x102>
				for (int k = 0; k < 10; k++)
    1b5e:	2000      	movs	r0, #0
    1b60:	e7f8      	b.n	1b54 <parsePreset+0xf4>
			for (int j = 0; j < 8; j++)
    1b62:	2600      	movs	r6, #0
    1b64:	e013      	b.n	1b8e <parsePreset+0x12e>
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    1b66:	f106 020c 	add.w	r2, r6, #12
    1b6a:	4967      	ldr	r1, [pc, #412]	; (1d08 <parsePreset+0x2a8>)
    1b6c:	5ccf      	ldrb	r7, [r1, r3]
    1b6e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1b72:	21c8      	movs	r1, #200	; 0xc8
    1b74:	fb04 f101 	mul.w	r1, r4, r1
    1b78:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1b7c:	4966      	ldr	r1, [pc, #408]	; (1d18 <parsePreset+0x2b8>)
    1b7e:	440a      	add	r2, r1
    1b80:	5417      	strb	r7, [r2, r0]
					bufferIndex++;
    1b82:	3301      	adds	r3, #1
    1b84:	b29b      	uxth	r3, r3
				for (int k = 0; k < 9; k++)
    1b86:	3001      	adds	r0, #1
    1b88:	2808      	cmp	r0, #8
    1b8a:	ddec      	ble.n	1b66 <parsePreset+0x106>
			for (int j = 0; j < 8; j++)
    1b8c:	3601      	adds	r6, #1
    1b8e:	2e07      	cmp	r6, #7
    1b90:	dc01      	bgt.n	1b96 <parsePreset+0x136>
				for (int k = 0; k < 9; k++)
    1b92:	2000      	movs	r0, #0
    1b94:	e7f8      	b.n	1b88 <parsePreset+0x128>
			for (int i = 0; i < 20; i++)
    1b96:	2100      	movs	r1, #0
    1b98:	e015      	b.n	1bc6 <parsePreset+0x166>
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1b9a:	4a5b      	ldr	r2, [pc, #364]	; (1d08 <parsePreset+0x2a8>)
    1b9c:	5cd0      	ldrb	r0, [r2, r3]
    1b9e:	1c5e      	adds	r6, r3, #1
    1ba0:	5d92      	ldrb	r2, [r2, r6]
    1ba2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    1ba6:	ee07 2a90 	vmov	s15, r2
    1baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1bae:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 1d1c <parsePreset+0x2bc>
    1bb2:	ee67 7a87 	vmul.f32	s15, s15, s14
    1bb6:	4a5a      	ldr	r2, [pc, #360]	; (1d20 <parsePreset+0x2c0>)
    1bb8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1bbc:	edc2 7a00 	vstr	s15, [r2]
				bufferIndex = bufferIndex + 2;
    1bc0:	3302      	adds	r3, #2
    1bc2:	b29b      	uxth	r3, r3
			for (int i = 0; i < 20; i++)
    1bc4:	3101      	adds	r1, #1
    1bc6:	2913      	cmp	r1, #19
    1bc8:	dde7      	ble.n	1b9a <parsePreset+0x13a>
			presetWaitingToParse = 0;
    1bca:	4b56      	ldr	r3, [pc, #344]	; (1d24 <parsePreset+0x2c4>)
    1bcc:	2200      	movs	r2, #0
    1bce:	601a      	str	r2, [r3, #0]
			currentActivePreset = presetNumber;
    1bd0:	b2e4      	uxtb	r4, r4
    1bd2:	4b55      	ldr	r3, [pc, #340]	; (1d28 <parsePreset+0x2c8>)
    1bd4:	701c      	strb	r4, [r3, #0]
			if (whichModel == 1)
    1bd6:	2d01      	cmp	r5, #1
    1bd8:	d006      	beq.n	1be8 <parsePreset+0x188>
			else if (whichModel == 2)
    1bda:	3d02      	subs	r5, #2
    1bdc:	2d03      	cmp	r5, #3
    1bde:	d806      	bhi.n	1bee <parsePreset+0x18e>
    1be0:	e8df f005 	tbb	[pc, r5]
    1be4:	231d1713 	.word	0x231d1713
				switchStrings = 1;
    1be8:	4b50      	ldr	r3, [pc, #320]	; (1d2c <parsePreset+0x2cc>)
    1bea:	2201      	movs	r2, #1
    1bec:	601a      	str	r2, [r3, #0]
			audioMasterLevel = 1.0f;
    1bee:	4b43      	ldr	r3, [pc, #268]	; (1cfc <parsePreset+0x29c>)
    1bf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    1bf6:	b662      	cpsie	i
			presetReady = 1;
    1bf8:	4b3e      	ldr	r3, [pc, #248]	; (1cf4 <parsePreset+0x294>)
    1bfa:	2201      	movs	r2, #1
    1bfc:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    1bfe:	2300      	movs	r3, #0
    1c00:	4a4b      	ldr	r2, [pc, #300]	; (1d30 <parsePreset+0x2d0>)
    1c02:	7013      	strb	r3, [r2, #0]
			receivingI2C = 0;
    1c04:	4a4b      	ldr	r2, [pc, #300]	; (1d34 <parsePreset+0x2d4>)
    1c06:	7013      	strb	r3, [r2, #0]
			return;
    1c08:	e0cb      	b.n	1da2 <parsePreset+0x342>
				switchStrings = 2;
    1c0a:	4b48      	ldr	r3, [pc, #288]	; (1d2c <parsePreset+0x2cc>)
    1c0c:	2202      	movs	r2, #2
    1c0e:	601a      	str	r2, [r3, #0]
    1c10:	e7ed      	b.n	1bee <parsePreset+0x18e>
				audioFrameFunction = audioFrameAdditive;
    1c12:	4b49      	ldr	r3, [pc, #292]	; (1d38 <parsePreset+0x2d8>)
    1c14:	4a49      	ldr	r2, [pc, #292]	; (1d3c <parsePreset+0x2dc>)
    1c16:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    1c18:	f7fe fdb2 	bl	780 <audioSwitchToAdditive>
    1c1c:	e7e7      	b.n	1bee <parsePreset+0x18e>
				audioFrameFunction = audioFrameVocal;
    1c1e:	4b46      	ldr	r3, [pc, #280]	; (1d38 <parsePreset+0x2d8>)
    1c20:	4a47      	ldr	r2, [pc, #284]	; (1d40 <parsePreset+0x2e0>)
    1c22:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    1c24:	f007 f9ec 	bl	9000 <audioSwitchToVocal>
    1c28:	e7e1      	b.n	1bee <parsePreset+0x18e>
				audioFrameFunction = audioFrameString3;
    1c2a:	4b43      	ldr	r3, [pc, #268]	; (1d38 <parsePreset+0x2d8>)
    1c2c:	4a45      	ldr	r2, [pc, #276]	; (1d44 <parsePreset+0x2e4>)
    1c2e:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    1c30:	f003 fc36 	bl	54a0 <audioSwitchToString3>
    1c34:	e7db      	b.n	1bee <parsePreset+0x18e>
		presetName[i] = buffer[bufferIndex];
    1c36:	4934      	ldr	r1, [pc, #208]	; (1d08 <parsePreset+0x2a8>)
    1c38:	5ccf      	ldrb	r7, [r1, r3]
    1c3a:	4935      	ldr	r1, [pc, #212]	; (1d10 <parsePreset+0x2b0>)
    1c3c:	548f      	strb	r7, [r1, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c3e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    1c42:	4934      	ldr	r1, [pc, #208]	; (1d14 <parsePreset+0x2b4>)
    1c44:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    1c48:	548f      	strb	r7, [r1, r2]
		bufferIndex++;
    1c4a:	3301      	adds	r3, #1
    1c4c:	b29b      	uxth	r3, r3
	for (int i = 0; i < 14; i++)
    1c4e:	3201      	adds	r2, #1
    1c50:	2a0d      	cmp	r2, #13
    1c52:	ddf0      	ble.n	1c36 <parsePreset+0x1d6>
	for (int j = 0; j < 8; j++)
    1c54:	2700      	movs	r7, #0
    1c56:	e013      	b.n	1c80 <parsePreset+0x220>
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c58:	4a2b      	ldr	r2, [pc, #172]	; (1d08 <parsePreset+0x2a8>)
    1c5a:	f812 c003 	ldrb.w	ip, [r2, r3]
    1c5e:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    1c62:	22c8      	movs	r2, #200	; 0xc8
    1c64:	fb04 f202 	mul.w	r2, r4, r2
    1c68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1c6c:	492a      	ldr	r1, [pc, #168]	; (1d18 <parsePreset+0x2b8>)
    1c6e:	440a      	add	r2, r1
    1c70:	f802 c005 	strb.w	ip, [r2, r5]
			bufferIndex++;
    1c74:	3301      	adds	r3, #1
    1c76:	b29b      	uxth	r3, r3
		for (int k = 0; k < 9; k++)
    1c78:	3501      	adds	r5, #1
    1c7a:	2d08      	cmp	r5, #8
    1c7c:	ddec      	ble.n	1c58 <parsePreset+0x1f8>
	for (int j = 0; j < 8; j++)
    1c7e:	3701      	adds	r7, #1
    1c80:	2f07      	cmp	r7, #7
    1c82:	dc01      	bgt.n	1c88 <parsePreset+0x228>
		for (int k = 0; k < 9; k++)
    1c84:	2500      	movs	r5, #0
    1c86:	e7f8      	b.n	1c7a <parsePreset+0x21a>
	for (int j = 0; j < 4; j++)
    1c88:	f04f 0c00 	mov.w	ip, #0
    1c8c:	e014      	b.n	1cb8 <parsePreset+0x258>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1c8e:	f10c 0208 	add.w	r2, ip, #8
    1c92:	491d      	ldr	r1, [pc, #116]	; (1d08 <parsePreset+0x2a8>)
    1c94:	5ccf      	ldrb	r7, [r1, r3]
    1c96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1c9a:	21c8      	movs	r1, #200	; 0xc8
    1c9c:	fb04 f101 	mul.w	r1, r4, r1
    1ca0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1ca4:	491c      	ldr	r1, [pc, #112]	; (1d18 <parsePreset+0x2b8>)
    1ca6:	440a      	add	r2, r1
    1ca8:	5557      	strb	r7, [r2, r5]
			bufferIndex++;
    1caa:	3301      	adds	r3, #1
    1cac:	b29b      	uxth	r3, r3
		for (int k = 0; k < 10; k++)
    1cae:	3501      	adds	r5, #1
    1cb0:	2d09      	cmp	r5, #9
    1cb2:	ddec      	ble.n	1c8e <parsePreset+0x22e>
	for (int j = 0; j < 4; j++)
    1cb4:	f10c 0c01 	add.w	ip, ip, #1
    1cb8:	f1bc 0f03 	cmp.w	ip, #3
    1cbc:	dc01      	bgt.n	1cc2 <parsePreset+0x262>
		for (int k = 0; k < 10; k++)
    1cbe:	2500      	movs	r5, #0
    1cc0:	e7f6      	b.n	1cb0 <parsePreset+0x250>
	for (int j = 0; j < 8; j++)
    1cc2:	2700      	movs	r7, #0
    1cc4:	e010      	b.n	1ce8 <parsePreset+0x288>
			macroNamesArray[presetNumber][j+12][k] = 32;
    1cc6:	f107 020c 	add.w	r2, r7, #12
    1cca:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    1cce:	22c8      	movs	r2, #200	; 0xc8
    1cd0:	fb04 f202 	mul.w	r2, r4, r2
    1cd4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1cd8:	490f      	ldr	r1, [pc, #60]	; (1d18 <parsePreset+0x2b8>)
    1cda:	440a      	add	r2, r1
    1cdc:	2120      	movs	r1, #32
    1cde:	5551      	strb	r1, [r2, r5]
		for (int k = 0; k < 9; k++)
    1ce0:	3501      	adds	r5, #1
    1ce2:	2d08      	cmp	r5, #8
    1ce4:	ddef      	ble.n	1cc6 <parsePreset+0x266>
	for (int j = 0; j < 8; j++)
    1ce6:	3701      	adds	r7, #1
    1ce8:	2f07      	cmp	r7, #7
    1cea:	dc2d      	bgt.n	1d48 <parsePreset+0x2e8>
		for (int k = 0; k < 9; k++)
    1cec:	2500      	movs	r5, #0
    1cee:	e7f8      	b.n	1ce2 <parsePreset+0x282>
    1cf0:	20014318 	.word	0x20014318
    1cf4:	20005354 	.word	0x20005354
    1cf8:	30000000 	.word	0x30000000
    1cfc:	200006a8 	.word	0x200006a8
    1d00:	200006ac 	.word	0x200006ac
    1d04:	200006b4 	.word	0x200006b4
    1d08:	30042380 	.word	0x30042380
    1d0c:	2001c941 	.word	0x2001c941
    1d10:	2001a32c 	.word	0x2001a32c
    1d14:	30042000 	.word	0x30042000
    1d18:	30043380 	.word	0x30043380
    1d1c:	377ffff6 	.word	0x377ffff6
    1d20:	20018540 	.word	0x20018540
    1d24:	2001a340 	.word	0x2001a340
    1d28:	200006ad 	.word	0x200006ad
    1d2c:	20014244 	.word	0x20014244
    1d30:	20014358 	.word	0x20014358
    1d34:	2001a798 	.word	0x2001a798
    1d38:	20001190 	.word	0x20001190
    1d3c:	00000b41 	.word	0x00000b41
    1d40:	000091c1 	.word	0x000091c1
    1d44:	000057a1 	.word	0x000057a1
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1d48:	4ab0      	ldr	r2, [pc, #704]	; (200c <parsePreset+0x5ac>)
    1d4a:	5cd5      	ldrb	r5, [r2, r3]
    1d4c:	1c59      	adds	r1, r3, #1
    1d4e:	5c51      	ldrb	r1, [r2, r1]
    1d50:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1d54:	b289      	uxth	r1, r1
	if (paramCount > size)
    1d56:	460a      	mov	r2, r1
    1d58:	4281      	cmp	r1, r0
    1d5a:	dc1a      	bgt.n	1d92 <parsePreset+0x332>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    1d5c:	eb03 0741 	add.w	r7, r3, r1, lsl #1
    1d60:	f107 0c02 	add.w	ip, r7, #2
    1d64:	4da9      	ldr	r5, [pc, #676]	; (200c <parsePreset+0x5ac>)
    1d66:	f815 c00c 	ldrb.w	ip, [r5, ip]
    1d6a:	f107 0e03 	add.w	lr, r7, #3
    1d6e:	f815 500e 	ldrb.w	r5, [r5, lr]
    1d72:	eb05 250c 	add.w	r5, r5, ip, lsl #8
    1d76:	b2ad      	uxth	r5, r5
	if (paramEndCheck != 0xefef)
    1d78:	f64e 7cef 	movw	ip, #61423	; 0xefef
    1d7c:	4565      	cmp	r5, ip
    1d7e:	d013      	beq.n	1da8 <parsePreset+0x348>
		audioMasterLevel = 1.0f;
    1d80:	4ba3      	ldr	r3, [pc, #652]	; (2010 <parsePreset+0x5b0>)
    1d82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1d86:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1d88:	4ba2      	ldr	r3, [pc, #648]	; (2014 <parsePreset+0x5b4>)
    1d8a:	2200      	movs	r2, #0
    1d8c:	601a      	str	r2, [r3, #0]
    1d8e:	b662      	cpsie	i
		return;
    1d90:	e007      	b.n	1da2 <parsePreset+0x342>
		audioMasterLevel = 1.0f;
    1d92:	4b9f      	ldr	r3, [pc, #636]	; (2010 <parsePreset+0x5b0>)
    1d94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1d98:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1d9a:	4b9e      	ldr	r3, [pc, #632]	; (2014 <parsePreset+0x5b4>)
    1d9c:	2200      	movs	r2, #0
    1d9e:	601a      	str	r2, [r3, #0]
    1da0:	b662      	cpsie	i
}
    1da2:	b005      	add	sp, #20
    1da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    1da8:	f107 0c04 	add.w	ip, r7, #4
    1dac:	4d97      	ldr	r5, [pc, #604]	; (200c <parsePreset+0x5ac>)
    1dae:	f815 c00c 	ldrb.w	ip, [r5, ip]
    1db2:	3705      	adds	r7, #5
    1db4:	5ded      	ldrb	r5, [r5, r7]
    1db6:	eb05 250c 	add.w	r5, r5, ip, lsl #8
    1dba:	b2ad      	uxth	r5, r5
    1dbc:	9502      	str	r5, [sp, #8]
	if (presetVersionNumber == 0)
    1dbe:	b9f6      	cbnz	r6, 1dfe <parsePreset+0x39e>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    1dc0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1dc4:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    1dc8:	fa13 f181 	uxtah	r1, r3, r1
    1dcc:	b289      	uxth	r1, r1
    1dce:	3106      	adds	r1, #6
    1dd0:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    1dd2:	4281      	cmp	r1, r0
    1dd4:	dc1d      	bgt.n	1e12 <parsePreset+0x3b2>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    1dd6:	488d      	ldr	r0, [pc, #564]	; (200c <parsePreset+0x5ac>)
    1dd8:	5c45      	ldrb	r5, [r0, r1]
    1dda:	3101      	adds	r1, #1
    1ddc:	5c41      	ldrb	r1, [r0, r1]
    1dde:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1de2:	b289      	uxth	r1, r1
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    1de4:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    1de8:	4281      	cmp	r1, r0
    1dea:	d01b      	beq.n	1e24 <parsePreset+0x3c4>
		audioMasterLevel = 1.0f;
    1dec:	4b88      	ldr	r3, [pc, #544]	; (2010 <parsePreset+0x5b0>)
    1dee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1df2:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1df4:	4b87      	ldr	r3, [pc, #540]	; (2014 <parsePreset+0x5b4>)
    1df6:	2200      	movs	r2, #0
    1df8:	601a      	str	r2, [r3, #0]
    1dfa:	b662      	cpsie	i
		return;
    1dfc:	e7d1      	b.n	1da2 <parsePreset+0x342>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    1dfe:	9d02      	ldr	r5, [sp, #8]
    1e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1e04:	4429      	add	r1, r5
    1e06:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    1e0a:	b289      	uxth	r1, r1
    1e0c:	3106      	adds	r1, #6
    1e0e:	b289      	uxth	r1, r1
    1e10:	e7df      	b.n	1dd2 <parsePreset+0x372>
		audioMasterLevel = 1.0f;
    1e12:	4b7f      	ldr	r3, [pc, #508]	; (2010 <parsePreset+0x5b0>)
    1e14:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1e18:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1e1a:	4b7e      	ldr	r3, [pc, #504]	; (2014 <parsePreset+0x5b4>)
    1e1c:	2200      	movs	r2, #0
    1e1e:	601a      	str	r2, [r3, #0]
    1e20:	b662      	cpsie	i
		return;
    1e22:	e7be      	b.n	1da2 <parsePreset+0x342>
	bufferIndex = bufferIndex + 2;
    1e24:	3302      	adds	r3, #2
    1e26:	b29d      	uxth	r5, r3
	for (int i = 0; i < paramCount; i++)
    1e28:	2000      	movs	r0, #0
    1e2a:	e026      	b.n	1e7a <parsePreset+0x41a>
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1e2c:	4977      	ldr	r1, [pc, #476]	; (200c <parsePreset+0x5ac>)
    1e2e:	5d4f      	ldrb	r7, [r1, r5]
    1e30:	f105 0c01 	add.w	ip, r5, #1
    1e34:	f811 100c 	ldrb.w	r1, [r1, ip]
    1e38:	eb01 2107 	add.w	r1, r1, r7, lsl #8
    1e3c:	ee07 1a90 	vmov	s15, r1
    1e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1e44:	ed9f 7a74 	vldr	s14, [pc, #464]	; 2018 <parsePreset+0x5b8>
    1e48:	ee67 7a87 	vmul.f32	s15, s15, s14
    1e4c:	ebc0 07c0 	rsb	r7, r0, r0, lsl #3
    1e50:	441f      	add	r7, r3
    1e52:	4972      	ldr	r1, [pc, #456]	; (201c <parsePreset+0x5bc>)
    1e54:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    1e58:	edc1 7a00 	vstr	s15, [r1]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1e5c:	3301      	adds	r3, #1
    1e5e:	2b01      	cmp	r3, #1
    1e60:	dde4      	ble.n	1e2c <parsePreset+0x3cc>
		params[i].scaleFunc = &scaleDefault;
    1e62:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1e66:	4b6d      	ldr	r3, [pc, #436]	; (201c <parsePreset+0x5bc>)
    1e68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1e6c:	496c      	ldr	r1, [pc, #432]	; (2020 <parsePreset+0x5c0>)
    1e6e:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    1e70:	496c      	ldr	r1, [pc, #432]	; (2024 <parsePreset+0x5c4>)
    1e72:	6159      	str	r1, [r3, #20]
		bufferIndex += 2;
    1e74:	3502      	adds	r5, #2
    1e76:	b2ad      	uxth	r5, r5
	for (int i = 0; i < paramCount; i++)
    1e78:	3001      	adds	r0, #1
    1e7a:	4282      	cmp	r2, r0
    1e7c:	dd16      	ble.n	1eac <parsePreset+0x44c>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1e7e:	2300      	movs	r3, #0
    1e80:	e7ed      	b.n	1e5e <parsePreset+0x3fe>
			params[i].zeroToOneVal[v] = 0.0f;
    1e82:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
    1e86:	4418      	add	r0, r3
    1e88:	4964      	ldr	r1, [pc, #400]	; (201c <parsePreset+0x5bc>)
    1e8a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1e8e:	2000      	movs	r0, #0
    1e90:	6008      	str	r0, [r1, #0]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1e92:	3301      	adds	r3, #1
    1e94:	2b01      	cmp	r3, #1
    1e96:	ddf4      	ble.n	1e82 <parsePreset+0x422>
		params[i].scaleFunc = &scaleDefault;
    1e98:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
    1e9c:	4b5f      	ldr	r3, [pc, #380]	; (201c <parsePreset+0x5bc>)
    1e9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1ea2:	495f      	ldr	r1, [pc, #380]	; (2020 <parsePreset+0x5c0>)
    1ea4:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    1ea6:	495f      	ldr	r1, [pc, #380]	; (2024 <parsePreset+0x5c4>)
    1ea8:	6159      	str	r1, [r3, #20]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    1eaa:	3201      	adds	r2, #1
    1eac:	2a9b      	cmp	r2, #155	; 0x9b
    1eae:	dc01      	bgt.n	1eb4 <parsePreset+0x454>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1eb0:	2300      	movs	r3, #0
    1eb2:	e7ef      	b.n	1e94 <parsePreset+0x434>
	params[Transpose].scaleFunc = &scaleTranspose;
    1eb4:	4b59      	ldr	r3, [pc, #356]	; (201c <parsePreset+0x5bc>)
    1eb6:	4a5c      	ldr	r2, [pc, #368]	; (2028 <parsePreset+0x5c8>)
    1eb8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    1ebc:	4a5b      	ldr	r2, [pc, #364]	; (202c <parsePreset+0x5cc>)
    1ebe:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    1ec2:	4a5b      	ldr	r2, [pc, #364]	; (2030 <parsePreset+0x5d0>)
    1ec4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    1ec8:	485a      	ldr	r0, [pc, #360]	; (2034 <parsePreset+0x5d4>)
    1eca:	f8c3 02e8 	str.w	r0, [r3, #744]	; 0x2e8
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    1ece:	495a      	ldr	r1, [pc, #360]	; (2038 <parsePreset+0x5d8>)
    1ed0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    1ed4:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    1ed8:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    1edc:	f8c3 0454 	str.w	r0, [r3, #1108]	; 0x454
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    1ee0:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    1ee4:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    1ee8:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    1eec:	f8c3 05c0 	str.w	r0, [r3, #1472]	; 0x5c0
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    1ef0:	f8c3 15dc 	str.w	r1, [r3, #1500]	; 0x5dc
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    1ef4:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    1ef8:	4950      	ldr	r1, [pc, #320]	; (203c <parsePreset+0x5dc>)
    1efa:	f8c3 1aac 	str.w	r1, [r3, #2732]	; 0xaac
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    1efe:	4a50      	ldr	r2, [pc, #320]	; (2040 <parsePreset+0x5e0>)
    1f00:	f8c3 2ae4 	str.w	r2, [r3, #2788]	; 0xae4
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    1f04:	f8c3 1b54 	str.w	r1, [r3, #2900]	; 0xb54
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    1f08:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    1f0c:	4a4d      	ldr	r2, [pc, #308]	; (2044 <parsePreset+0x5e4>)
    1f0e:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    1f12:	f8c3 2bfc 	str.w	r2, [r3, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    1f16:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    1f1a:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    1f1e:	f8c3 2ca4 	str.w	r2, [r3, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    1f22:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    1f26:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    1f2a:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    1f2e:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    1f32:	f8c3 2dd8 	str.w	r2, [r3, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    1f36:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    1f3a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    1f3e:	4a42      	ldr	r2, [pc, #264]	; (2048 <parsePreset+0x5e8>)
    1f40:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    1f44:	f8c3 2f0c 	str.w	r2, [r3, #3852]	; 0xf0c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    1f48:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    1f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1f50:	625a      	str	r2, [r3, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    1f52:	4a3e      	ldr	r2, [pc, #248]	; (204c <parsePreset+0x5ec>)
    1f54:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	for (int i = 0; i < NUM_EFFECT; i++)
    1f58:	f04f 0800 	mov.w	r8, #0
    1f5c:	e02a      	b.n	1fb4 <parsePreset+0x554>
			setEffectsFunctions(effectType, i);
    1f5e:	4641      	mov	r1, r8
    1f60:	f007 fd86 	bl	9a70 <__setEffectsFunctions_veneer>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1f64:	3701      	adds	r7, #1
    1f66:	2f01      	cmp	r7, #1
    1f68:	dc22      	bgt.n	1fb0 <parsePreset+0x550>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1f6a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
    1f6e:	333f      	adds	r3, #63	; 0x3f
    1f70:	4a2a      	ldr	r2, [pc, #168]	; (201c <parsePreset+0x5bc>)
    1f72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1f76:	443b      	add	r3, r7
    1f78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f7c:	edd3 7a00 	vldr	s15, [r3]
    1f80:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    1f84:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f88:	fef8 7a67 	vrinta.f32	s15, s15
    1f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1f90:	edcd 7a01 	vstr	s15, [sp, #4]
    1f94:	f89d 0004 	ldrb.w	r0, [sp, #4]
			param *FXAlias = &params[Effect1Param1 + (EffectParamsNum*i)];
    1f98:	f108 0108 	add.w	r1, r8, #8
    1f9c:	018b      	lsls	r3, r1, #6
    1f9e:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
    1fa2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			if (effectType > FXLowpass) // this assumes filters are the last effects
    1fa6:	280d      	cmp	r0, #13
    1fa8:	d9d9      	bls.n	1f5e <parsePreset+0x4fe>
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    1faa:	4b25      	ldr	r3, [pc, #148]	; (2040 <parsePreset+0x5e0>)
    1fac:	6493      	str	r3, [r2, #72]	; 0x48
    1fae:	e7d6      	b.n	1f5e <parsePreset+0x4fe>
	for (int i = 0; i < NUM_EFFECT; i++)
    1fb0:	f108 0801 	add.w	r8, r8, #1
    1fb4:	f1b8 0f03 	cmp.w	r8, #3
    1fb8:	dc01      	bgt.n	1fbe <parsePreset+0x55e>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1fba:	2700      	movs	r7, #0
    1fbc:	e7d3      	b.n	1f66 <parsePreset+0x506>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1fbe:	f04f 0a00 	mov.w	sl, #0
    1fc2:	46a1      	mov	r9, r4
    1fc4:	e018      	b.n	1ff8 <parsePreset+0x598>
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1fc6:	4c15      	ldr	r4, [pc, #84]	; (201c <parsePreset+0x5bc>)
    1fc8:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    1fcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1fd0:	691b      	ldr	r3, [r3, #16]
    1fd2:	ebc7 08c7 	rsb	r8, r7, r7, lsl #3
    1fd6:	44d0      	add	r8, sl
    1fd8:	eb04 0288 	add.w	r2, r4, r8, lsl #2
    1fdc:	ed92 0a00 	vldr	s0, [r2]
    1fe0:	4798      	blx	r3
    1fe2:	f108 0802 	add.w	r8, r8, #2
    1fe6:	eb04 0388 	add.w	r3, r4, r8, lsl #2
    1fea:	ed83 0a00 	vstr	s0, [r3]
		for (int i = 0; i < NUM_PARAMS; i++)
    1fee:	3701      	adds	r7, #1
    1ff0:	2f9b      	cmp	r7, #155	; 0x9b
    1ff2:	dde8      	ble.n	1fc6 <parsePreset+0x566>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1ff4:	f10a 0a01 	add.w	sl, sl, #1
    1ff8:	f1ba 0f01 	cmp.w	sl, #1
    1ffc:	dc01      	bgt.n	2002 <parsePreset+0x5a2>
		for (int i = 0; i < NUM_PARAMS; i++)
    1ffe:	2700      	movs	r7, #0
    2000:	e7f6      	b.n	1ff0 <parsePreset+0x590>
	for (int i = 0; i < NUM_OSC; i++)
    2002:	f04f 0800 	mov.w	r8, #0
	uint8_t enabledCount = 0;
    2006:	46c2      	mov	sl, r8
    2008:	e02b      	b.n	2062 <parsePreset+0x602>
    200a:	bf00      	nop
    200c:	30042380 	.word	0x30042380
    2010:	200006a8 	.word	0x200006a8
    2014:	2001a340 	.word	0x2001a340
    2018:	377ffff6 	.word	0x377ffff6
    201c:	200191e8 	.word	0x200191e8
    2020:	000017c1 	.word	0x000017c1
    2024:	00001a01 	.word	0x00001a01
    2028:	00001841 	.word	0x00001841
    202c:	00001881 	.word	0x00001881
    2030:	000017e1 	.word	0x000017e1
    2034:	00001801 	.word	0x00001801
    2038:	00001821 	.word	0x00001821
    203c:	000018c1 	.word	0x000018c1
    2040:	00001701 	.word	0x00001701
    2044:	000018e1 	.word	0x000018e1
    2048:	00001961 	.word	0x00001961
    204c:	000019e1 	.word	0x000019e1
			oscsEnabled[i] = 0;
    2050:	2300      	movs	r3, #0
    2052:	4acd      	ldr	r2, [pc, #820]	; (2388 <parsePreset+0x928>)
    2054:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
			oscOn[i] = 0;
    2058:	4acc      	ldr	r2, [pc, #816]	; (238c <parsePreset+0x92c>)
    205a:	f802 3008 	strb.w	r3, [r2, r8]
	for (int i = 0; i < NUM_OSC; i++)
    205e:	f108 0801 	add.w	r8, r8, #1
    2062:	f1b8 0f02 	cmp.w	r8, #2
    2066:	dc33      	bgt.n	20d0 <parsePreset+0x670>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2068:	eb08 0748 	add.w	r7, r8, r8, lsl #1
    206c:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    2070:	f107 0323 	add.w	r3, r7, #35	; 0x23
    2074:	4cc6      	ldr	r4, [pc, #792]	; (2390 <parsePreset+0x930>)
    2076:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    207a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    207e:	edd3 7a02 	vldr	s15, [r3, #8]
    2082:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2086:	ee67 7a87 	vmul.f32	s15, s15, s14
    208a:	fef8 7a67 	vrinta.f32	s15, s15
		setOscilllatorShapes(oscshape, i);
    208e:	4641      	mov	r1, r8
    2090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2094:	ee17 0a90 	vmov	r0, s15
    2098:	f007 fc6a 	bl	9970 <__setOscilllatorShapes_veneer>
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    209c:	3718      	adds	r7, #24
    209e:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    20a2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    20a6:	ed94 7a02 	vldr	s14, [r4, #8]
    20aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    20ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
    20b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20b6:	ddcb      	ble.n	2050 <parsePreset+0x5f0>
			enabledCount++;
    20b8:	f10a 0a01 	add.w	sl, sl, #1
    20bc:	fa5f fa8a 	uxtb.w	sl, sl
			oscsEnabled[i] = 1;
    20c0:	2301      	movs	r3, #1
    20c2:	4ab1      	ldr	r2, [pc, #708]	; (2388 <parsePreset+0x928>)
    20c4:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
			oscOn[i] = 1;
    20c8:	4ab0      	ldr	r2, [pc, #704]	; (238c <parsePreset+0x92c>)
    20ca:	f802 3008 	strb.w	r3, [r2, r8]
    20ce:	e7c6      	b.n	205e <parsePreset+0x5fe>
	oscAmpMult = oscAmpMultArray[enabledCount];
    20d0:	464c      	mov	r4, r9
    20d2:	4bb0      	ldr	r3, [pc, #704]	; (2394 <parsePreset+0x934>)
    20d4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    20d8:	681a      	ldr	r2, [r3, #0]
    20da:	4baf      	ldr	r3, [pc, #700]	; (2398 <parsePreset+0x938>)
    20dc:	601a      	str	r2, [r3, #0]
	if (params[Noise].realVal[0]  > 0.5f)
    20de:	4bac      	ldr	r3, [pc, #688]	; (2390 <parsePreset+0x930>)
    20e0:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
    20e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    20e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    20ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    20f0:	dd04      	ble.n	20fc <parsePreset+0x69c>
		noiseOn = 1;
    20f2:	4baa      	ldr	r3, [pc, #680]	; (239c <parsePreset+0x93c>)
    20f4:	2201      	movs	r2, #1
    20f6:	701a      	strb	r2, [r3, #0]
	uint8_t enabledCount = 0;
    20f8:	2700      	movs	r7, #0
    20fa:	e01c      	b.n	2136 <parsePreset+0x6d6>
		noiseOn = 0;
    20fc:	4ba7      	ldr	r3, [pc, #668]	; (239c <parsePreset+0x93c>)
    20fe:	2200      	movs	r2, #0
    2100:	701a      	strb	r2, [r3, #0]
    2102:	e7f9      	b.n	20f8 <parsePreset+0x698>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2104:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    2108:	005b      	lsls	r3, r3, #1
    210a:	3360      	adds	r3, #96	; 0x60
    210c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2110:	4a9f      	ldr	r2, [pc, #636]	; (2390 <parsePreset+0x930>)
    2112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2116:	edd3 7a02 	vldr	s15, [r3, #8]
    211a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    211e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2122:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2126:	4639      	mov	r1, r7
    2128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    212c:	ee17 0a90 	vmov	r0, s15
    2130:	f007 fb02 	bl	9738 <__setFilterTypes_veneer>
	for (int i = 0; i < NUM_FILT; i++)
    2134:	3701      	adds	r7, #1
    2136:	2f01      	cmp	r7, #1
    2138:	dde4      	ble.n	2104 <parsePreset+0x6a4>
	for (int i = 0; i < NUM_LFOS; i++)
    213a:	2700      	movs	r7, #0
    213c:	e017      	b.n	216e <parsePreset+0x70e>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    213e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    2142:	3387      	adds	r3, #135	; 0x87
    2144:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2148:	4a91      	ldr	r2, [pc, #580]	; (2390 <parsePreset+0x930>)
    214a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    214e:	edd3 7a02 	vldr	s15, [r3, #8]
    2152:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2156:	ee67 7a87 	vmul.f32	s15, s15, s14
    215a:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    215e:	4639      	mov	r1, r7
    2160:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2164:	ee17 0a90 	vmov	r0, s15
    2168:	f007 fc22 	bl	99b0 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    216c:	3701      	adds	r7, #1
    216e:	2f03      	cmp	r7, #3
    2170:	dde5      	ble.n	213e <parsePreset+0x6de>
	params[NoiseTilt].setParam = &noiseSetTilt;
    2172:	4b87      	ldr	r3, [pc, #540]	; (2390 <parsePreset+0x930>)
    2174:	4a8a      	ldr	r2, [pc, #552]	; (23a0 <parsePreset+0x940>)
    2176:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    217a:	4a8a      	ldr	r2, [pc, #552]	; (23a4 <parsePreset+0x944>)
    217c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2180:	4a89      	ldr	r2, [pc, #548]	; (23a8 <parsePreset+0x948>)
    2182:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2186:	4a89      	ldr	r2, [pc, #548]	; (23ac <parsePreset+0x94c>)
    2188:	64da      	str	r2, [r3, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    218a:	4a89      	ldr	r2, [pc, #548]	; (23b0 <parsePreset+0x950>)
    218c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    2190:	4a88      	ldr	r2, [pc, #544]	; (23b4 <parsePreset+0x954>)
    2192:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2196:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
    219a:	4a87      	ldr	r2, [pc, #540]	; (23b8 <parsePreset+0x958>)
    219c:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    21a0:	4a86      	ldr	r2, [pc, #536]	; (23bc <parsePreset+0x95c>)
    21a2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    21a6:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    21aa:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    21ae:	4a84      	ldr	r2, [pc, #528]	; (23c0 <parsePreset+0x960>)
    21b0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    21b4:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    21b8:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    21bc:	4a81      	ldr	r2, [pc, #516]	; (23c4 <parsePreset+0x964>)
    21be:	6810      	ldr	r0, [r2, #0]
    21c0:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    21c4:	6850      	ldr	r0, [r2, #4]
    21c6:	f8c3 0730 	str.w	r0, [r3, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    21ca:	6890      	ldr	r0, [r2, #8]
    21cc:	f8c3 074c 	str.w	r0, [r3, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    21d0:	68d0      	ldr	r0, [r2, #12]
    21d2:	f8c3 0768 	str.w	r0, [r3, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    21d6:	6910      	ldr	r0, [r2, #16]
    21d8:	f8c3 0784 	str.w	r0, [r3, #1924]	; 0x784
	params[Effect1Mix].setParam = &fxMixSet;
    21dc:	f8df c204 	ldr.w	ip, [pc, #516]	; 23e4 <parsePreset+0x984>
    21e0:	f8c3 c7a0 	str.w	ip, [r3, #1952]	; 0x7a0
	params[Effect1PostGain].setParam = &fxPostGainSet;
    21e4:	4f78      	ldr	r7, [pc, #480]	; (23c8 <parsePreset+0x968>)
    21e6:	f8c3 77bc 	str.w	r7, [r3, #1980]	; 0x7bc
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    21ea:	6950      	ldr	r0, [r2, #20]
    21ec:	f8c3 07f4 	str.w	r0, [r3, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    21f0:	6990      	ldr	r0, [r2, #24]
    21f2:	f8c3 0810 	str.w	r0, [r3, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    21f6:	69d0      	ldr	r0, [r2, #28]
    21f8:	f8c3 082c 	str.w	r0, [r3, #2092]	; 0x82c
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    21fc:	6a10      	ldr	r0, [r2, #32]
    21fe:	f8c3 0848 	str.w	r0, [r3, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2202:	6a50      	ldr	r0, [r2, #36]	; 0x24
    2204:	f8c3 0864 	str.w	r0, [r3, #2148]	; 0x864
	params[Effect2Mix].setParam = &fxMixSet;
    2208:	f8c3 c880 	str.w	ip, [r3, #2176]	; 0x880
	params[Effect2PostGain].setParam = &fxPostGainSet;
    220c:	f8c3 789c 	str.w	r7, [r3, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2210:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2212:	f8c3 08d4 	str.w	r0, [r3, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2216:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    2218:	f8c3 08f0 	str.w	r0, [r3, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    221c:	6b10      	ldr	r0, [r2, #48]	; 0x30
    221e:	f8c3 090c 	str.w	r0, [r3, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2222:	6b50      	ldr	r0, [r2, #52]	; 0x34
    2224:	f8c3 0928 	str.w	r0, [r3, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    2228:	6b90      	ldr	r0, [r2, #56]	; 0x38
    222a:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
	params[Effect3Mix].setParam = &fxMixSet;
    222e:	f8c3 c960 	str.w	ip, [r3, #2400]	; 0x960
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2232:	f8c3 797c 	str.w	r7, [r3, #2428]	; 0x97c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2236:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    2238:	f8c3 09b4 	str.w	r0, [r3, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    223c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    223e:	f8c3 09d0 	str.w	r0, [r3, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    2242:	6c50      	ldr	r0, [r2, #68]	; 0x44
    2244:	f8c3 09ec 	str.w	r0, [r3, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2248:	6c90      	ldr	r0, [r2, #72]	; 0x48
    224a:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    224e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    2250:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	params[Effect4Mix].setParam = &fxMixSet;
    2254:	f8c3 ca40 	str.w	ip, [r3, #2624]	; 0xa40
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2258:	f8c3 7a5c 	str.w	r7, [r3, #2652]	; 0xa5c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    225c:	4a5b      	ldr	r2, [pc, #364]	; (23cc <parsePreset+0x96c>)
    225e:	6810      	ldr	r0, [r2, #0]
    2260:	f8c3 0ae8 	str.w	r0, [r3, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2264:	6850      	ldr	r0, [r2, #4]
    2266:	f8c3 0acc 	str.w	r0, [r3, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    226a:	6890      	ldr	r0, [r2, #8]
    226c:	f8c3 0b90 	str.w	r0, [r3, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2270:	68d2      	ldr	r2, [r2, #12]
    2272:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2276:	f8df e170 	ldr.w	lr, [pc, #368]	; 23e8 <parsePreset+0x988>
    227a:	f8c3 ebe4 	str.w	lr, [r3, #3044]	; 0xbe4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    227e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 23ec <parsePreset+0x98c>
    2282:	f8c3 cc00 	str.w	ip, [r3, #3072]	; 0xc00
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2286:	4f52      	ldr	r7, [pc, #328]	; (23d0 <parsePreset+0x970>)
    2288:	f8c3 7c1c 	str.w	r7, [r3, #3100]	; 0xc1c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    228c:	4851      	ldr	r0, [pc, #324]	; (23d4 <parsePreset+0x974>)
    228e:	f8c3 0c38 	str.w	r0, [r3, #3128]	; 0xc38
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2292:	4a51      	ldr	r2, [pc, #324]	; (23d8 <parsePreset+0x978>)
    2294:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2298:	f8c3 ec8c 	str.w	lr, [r3, #3212]	; 0xc8c
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    229c:	f8c3 cca8 	str.w	ip, [r3, #3240]	; 0xca8
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    22a0:	f8c3 7cc4 	str.w	r7, [r3, #3268]	; 0xcc4
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    22a4:	f8c3 0ce0 	str.w	r0, [r3, #3296]	; 0xce0
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    22a8:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    22ac:	f8c3 ed34 	str.w	lr, [r3, #3380]	; 0xd34
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    22b0:	f8c3 cd50 	str.w	ip, [r3, #3408]	; 0xd50
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    22b4:	f8c3 7d6c 	str.w	r7, [r3, #3436]	; 0xd6c
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    22b8:	f8c3 0d88 	str.w	r0, [r3, #3464]	; 0xd88
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    22bc:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    22c0:	f8c3 eddc 	str.w	lr, [r3, #3548]	; 0xddc
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    22c4:	f8c3 cdf8 	str.w	ip, [r3, #3576]	; 0xdf8
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    22c8:	f8c3 7e14 	str.w	r7, [r3, #3604]	; 0xe14
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    22cc:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    22d0:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    22d4:	4a41      	ldr	r2, [pc, #260]	; (23dc <parsePreset+0x97c>)
    22d6:	6810      	ldr	r0, [r2, #0]
    22d8:	f8c3 0e84 	str.w	r0, [r3, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    22dc:	68d0      	ldr	r0, [r2, #12]
    22de:	f8c3 0f10 	str.w	r0, [r3, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    22e2:	6990      	ldr	r0, [r2, #24]
    22e4:	f8c3 0f9c 	str.w	r0, [r3, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    22e8:	6a50      	ldr	r0, [r2, #36]	; 0x24
    22ea:	6288      	str	r0, [r1, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    22ec:	6850      	ldr	r0, [r2, #4]
    22ee:	f8c3 0ea0 	str.w	r0, [r3, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    22f2:	6910      	ldr	r0, [r2, #16]
    22f4:	f8c3 0f2c 	str.w	r0, [r3, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    22f8:	69d0      	ldr	r0, [r2, #28]
    22fa:	f8c3 0fb8 	str.w	r0, [r3, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    22fe:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2300:	6448      	str	r0, [r1, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2302:	6890      	ldr	r0, [r2, #8]
    2304:	f8c3 0ebc 	str.w	r0, [r3, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2308:	6950      	ldr	r0, [r2, #20]
    230a:	f8c3 0f48 	str.w	r0, [r3, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    230e:	6a10      	ldr	r0, [r2, #32]
    2310:	f8c3 0fd4 	str.w	r0, [r3, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2314:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2316:	660b      	str	r3, [r1, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    2318:	4b31      	ldr	r3, [pc, #196]	; (23e0 <parsePreset+0x980>)
    231a:	f8c1 30b4 	str.w	r3, [r1, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    231e:	2700      	movs	r7, #0
    2320:	46a1      	mov	r9, r4
    2322:	e0ae      	b.n	2482 <parsePreset+0xa22>
			params[i].objectNumber = 1;
    2324:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2328:	4b19      	ldr	r3, [pc, #100]	; (2390 <parsePreset+0x930>)
    232a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    232e:	2201      	movs	r2, #1
    2330:	761a      	strb	r2, [r3, #24]
	for (int i = 0; i < NUM_LFOS; i++)
    2332:	f04f 0800 	mov.w	r8, #0
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2336:	f1b8 0f01 	cmp.w	r8, #1
    233a:	f300 80a1 	bgt.w	2480 <parsePreset+0xa20>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    233e:	4a14      	ldr	r2, [pc, #80]	; (2390 <parsePreset+0x930>)
    2340:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    2344:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2348:	6944      	ldr	r4, [r0, #20]
    234a:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    234e:	4443      	add	r3, r8
    2350:	3302      	adds	r3, #2
    2352:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2356:	4641      	mov	r1, r8
    2358:	7e00      	ldrb	r0, [r0, #24]
    235a:	ed92 0a00 	vldr	s0, [r2]
    235e:	47a0      	blx	r4
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2360:	f108 0801 	add.w	r8, r8, #1
    2364:	e7e7      	b.n	2336 <parsePreset+0x8d6>
			params[i].objectNumber = 2;
    2366:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    236a:	4b09      	ldr	r3, [pc, #36]	; (2390 <parsePreset+0x930>)
    236c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2370:	2202      	movs	r2, #2
    2372:	761a      	strb	r2, [r3, #24]
    2374:	e7dd      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 1;
    2376:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    237a:	4b05      	ldr	r3, [pc, #20]	; (2390 <parsePreset+0x930>)
    237c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2380:	2201      	movs	r2, #1
    2382:	761a      	strb	r2, [r3, #24]
    2384:	e7d5      	b.n	2332 <parsePreset+0x8d2>
    2386:	bf00      	nop
    2388:	200191dc 	.word	0x200191dc
    238c:	2001d4d4 	.word	0x2001d4d4
    2390:	200191e8 	.word	0x200191e8
    2394:	200008dc 	.word	0x200008dc
    2398:	200008d8 	.word	0x200008d8
    239c:	2001d4b0 	.word	0x2001d4b0
    23a0:	00008501 	.word	0x00008501
    23a4:	00008581 	.word	0x00008581
    23a8:	00008541 	.word	0x00008541
    23ac:	00006901 	.word	0x00006901
    23b0:	00006921 	.word	0x00006921
    23b4:	00006941 	.word	0x00006941
    23b8:	00006981 	.word	0x00006981
    23bc:	000062c1 	.word	0x000062c1
    23c0:	00006321 	.word	0x00006321
    23c4:	2001435c 	.word	0x2001435c
    23c8:	000074a1 	.word	0x000074a1
    23cc:	200163b0 	.word	0x200163b0
    23d0:	00006841 	.word	0x00006841
    23d4:	00006861 	.word	0x00006861
    23d8:	000068a1 	.word	0x000068a1
    23dc:	2001850c 	.word	0x2001850c
    23e0:	000068e1 	.word	0x000068e1
    23e4:	00007481 	.word	0x00007481
    23e8:	000067c1 	.word	0x000067c1
    23ec:	00006801 	.word	0x00006801
			params[i].objectNumber = 1;
    23f0:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    23f4:	4bd3      	ldr	r3, [pc, #844]	; (2744 <parsePreset+0xce4>)
    23f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    23fa:	2201      	movs	r2, #1
    23fc:	761a      	strb	r2, [r3, #24]
    23fe:	e798      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 2;
    2400:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2404:	4bcf      	ldr	r3, [pc, #828]	; (2744 <parsePreset+0xce4>)
    2406:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    240a:	2202      	movs	r2, #2
    240c:	761a      	strb	r2, [r3, #24]
    240e:	e790      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 3;
    2410:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2414:	4bcb      	ldr	r3, [pc, #812]	; (2744 <parsePreset+0xce4>)
    2416:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    241a:	2203      	movs	r2, #3
    241c:	761a      	strb	r2, [r3, #24]
    241e:	e788      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 1;
    2420:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2424:	4bc7      	ldr	r3, [pc, #796]	; (2744 <parsePreset+0xce4>)
    2426:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    242a:	2201      	movs	r2, #1
    242c:	761a      	strb	r2, [r3, #24]
    242e:	e780      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 2;
    2430:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2434:	4bc3      	ldr	r3, [pc, #780]	; (2744 <parsePreset+0xce4>)
    2436:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    243a:	2202      	movs	r2, #2
    243c:	761a      	strb	r2, [r3, #24]
    243e:	e778      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 3;
    2440:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2444:	4bbf      	ldr	r3, [pc, #764]	; (2744 <parsePreset+0xce4>)
    2446:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    244a:	2203      	movs	r2, #3
    244c:	761a      	strb	r2, [r3, #24]
    244e:	e770      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 1;
    2450:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2454:	4bbb      	ldr	r3, [pc, #748]	; (2744 <parsePreset+0xce4>)
    2456:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    245a:	2201      	movs	r2, #1
    245c:	761a      	strb	r2, [r3, #24]
    245e:	e768      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 2;
    2460:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2464:	4bb7      	ldr	r3, [pc, #732]	; (2744 <parsePreset+0xce4>)
    2466:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    246a:	2202      	movs	r2, #2
    246c:	761a      	strb	r2, [r3, #24]
    246e:	e760      	b.n	2332 <parsePreset+0x8d2>
			params[i].objectNumber = 3;
    2470:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    2474:	4bb3      	ldr	r3, [pc, #716]	; (2744 <parsePreset+0xce4>)
    2476:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    247a:	2203      	movs	r2, #3
    247c:	761a      	strb	r2, [r3, #24]
    247e:	e758      	b.n	2332 <parsePreset+0x8d2>
	for (int i = 0; i < NUM_PARAMS; i++)
    2480:	3701      	adds	r7, #1
    2482:	2f9b      	cmp	r7, #155	; 0x9b
    2484:	f300 80fa 	bgt.w	267c <parsePreset+0xc1c>
		params[i].objectNumber = 0;
    2488:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    248c:	4bad      	ldr	r3, [pc, #692]	; (2744 <parsePreset+0xce4>)
    248e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2492:	2200      	movs	r2, #0
    2494:	761a      	strb	r2, [r3, #24]
		if ((i >= Osc1) && (i < Osc2))
    2496:	f1a7 0318 	sub.w	r3, r7, #24
    249a:	2b0c      	cmp	r3, #12
    249c:	f67f af49 	bls.w	2332 <parsePreset+0x8d2>
		else if ((i >= Osc2) && (i < Osc3))
    24a0:	f1a7 0325 	sub.w	r3, r7, #37	; 0x25
    24a4:	2b72      	cmp	r3, #114	; 0x72
    24a6:	f63f af44 	bhi.w	2332 <parsePreset+0x8d2>
    24aa:	a201      	add	r2, pc, #4	; (adr r2, 24b0 <parsePreset+0xa50>)
    24ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    24b0:	00002325 	.word	0x00002325
    24b4:	00002325 	.word	0x00002325
    24b8:	00002325 	.word	0x00002325
    24bc:	00002325 	.word	0x00002325
    24c0:	00002325 	.word	0x00002325
    24c4:	00002325 	.word	0x00002325
    24c8:	00002325 	.word	0x00002325
    24cc:	00002325 	.word	0x00002325
    24d0:	00002325 	.word	0x00002325
    24d4:	00002325 	.word	0x00002325
    24d8:	00002325 	.word	0x00002325
    24dc:	00002325 	.word	0x00002325
    24e0:	00002325 	.word	0x00002325
    24e4:	00002367 	.word	0x00002367
    24e8:	00002367 	.word	0x00002367
    24ec:	00002367 	.word	0x00002367
    24f0:	00002367 	.word	0x00002367
    24f4:	00002367 	.word	0x00002367
    24f8:	00002367 	.word	0x00002367
    24fc:	00002367 	.word	0x00002367
    2500:	00002367 	.word	0x00002367
    2504:	00002367 	.word	0x00002367
    2508:	00002367 	.word	0x00002367
    250c:	00002367 	.word	0x00002367
    2510:	00002367 	.word	0x00002367
    2514:	00002367 	.word	0x00002367
    2518:	00002333 	.word	0x00002333
    251c:	00002333 	.word	0x00002333
    2520:	00002333 	.word	0x00002333
    2524:	00002333 	.word	0x00002333
    2528:	00002333 	.word	0x00002333
    252c:	00002333 	.word	0x00002333
    2530:	00002333 	.word	0x00002333
    2534:	00002333 	.word	0x00002333
    2538:	00002451 	.word	0x00002451
    253c:	00002451 	.word	0x00002451
    2540:	00002451 	.word	0x00002451
    2544:	00002451 	.word	0x00002451
    2548:	00002451 	.word	0x00002451
    254c:	00002451 	.word	0x00002451
    2550:	00002451 	.word	0x00002451
    2554:	00002451 	.word	0x00002451
    2558:	00002461 	.word	0x00002461
    255c:	00002461 	.word	0x00002461
    2560:	00002461 	.word	0x00002461
    2564:	00002461 	.word	0x00002461
    2568:	00002461 	.word	0x00002461
    256c:	00002461 	.word	0x00002461
    2570:	00002461 	.word	0x00002461
    2574:	00002461 	.word	0x00002461
    2578:	00002471 	.word	0x00002471
    257c:	00002471 	.word	0x00002471
    2580:	00002471 	.word	0x00002471
    2584:	00002471 	.word	0x00002471
    2588:	00002471 	.word	0x00002471
    258c:	00002471 	.word	0x00002471
    2590:	00002471 	.word	0x00002471
    2594:	00002471 	.word	0x00002471
    2598:	00002333 	.word	0x00002333
    259c:	00002333 	.word	0x00002333
    25a0:	00002333 	.word	0x00002333
    25a4:	00002333 	.word	0x00002333
    25a8:	00002333 	.word	0x00002333
    25ac:	00002333 	.word	0x00002333
    25b0:	00002377 	.word	0x00002377
    25b4:	00002377 	.word	0x00002377
    25b8:	00002377 	.word	0x00002377
    25bc:	00002377 	.word	0x00002377
    25c0:	00002377 	.word	0x00002377
    25c4:	00002377 	.word	0x00002377
    25c8:	00002377 	.word	0x00002377
    25cc:	00002333 	.word	0x00002333
    25d0:	00002333 	.word	0x00002333
    25d4:	00002333 	.word	0x00002333
    25d8:	00002333 	.word	0x00002333
    25dc:	00002333 	.word	0x00002333
    25e0:	00002333 	.word	0x00002333
    25e4:	000023f1 	.word	0x000023f1
    25e8:	000023f1 	.word	0x000023f1
    25ec:	000023f1 	.word	0x000023f1
    25f0:	000023f1 	.word	0x000023f1
    25f4:	000023f1 	.word	0x000023f1
    25f8:	000023f1 	.word	0x000023f1
    25fc:	00002401 	.word	0x00002401
    2600:	00002401 	.word	0x00002401
    2604:	00002401 	.word	0x00002401
    2608:	00002401 	.word	0x00002401
    260c:	00002401 	.word	0x00002401
    2610:	00002401 	.word	0x00002401
    2614:	00002411 	.word	0x00002411
    2618:	00002411 	.word	0x00002411
    261c:	00002411 	.word	0x00002411
    2620:	00002411 	.word	0x00002411
    2624:	00002411 	.word	0x00002411
    2628:	00002411 	.word	0x00002411
    262c:	00002333 	.word	0x00002333
    2630:	00002333 	.word	0x00002333
    2634:	00002333 	.word	0x00002333
    2638:	00002333 	.word	0x00002333
    263c:	00002333 	.word	0x00002333
    2640:	00002421 	.word	0x00002421
    2644:	00002421 	.word	0x00002421
    2648:	00002421 	.word	0x00002421
    264c:	00002421 	.word	0x00002421
    2650:	00002421 	.word	0x00002421
    2654:	00002431 	.word	0x00002431
    2658:	00002431 	.word	0x00002431
    265c:	00002431 	.word	0x00002431
    2660:	00002431 	.word	0x00002431
    2664:	00002431 	.word	0x00002431
    2668:	00002441 	.word	0x00002441
    266c:	00002441 	.word	0x00002441
    2670:	00002441 	.word	0x00002441
    2674:	00002441 	.word	0x00002441
    2678:	00002441 	.word	0x00002441
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    267c:	464c      	mov	r4, r9
    267e:	4b31      	ldr	r3, [pc, #196]	; (2744 <parsePreset+0xce4>)
    2680:	edd3 7a02 	vldr	s15, [r3, #8]
    2684:	eddf 6a30 	vldr	s13, [pc, #192]	; 2748 <parsePreset+0xce8>
    2688:	ee67 7aa6 	vmul.f32	s15, s15, s13
    268c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    2690:	ee27 7a26 	vmul.f32	s14, s14, s13
    2694:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2698:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    269c:	eec6 6a27 	vdiv.f32	s13, s12, s15
    26a0:	4a2a      	ldr	r2, [pc, #168]	; (274c <parsePreset+0xcec>)
    26a2:	edc2 6a00 	vstr	s13, [r2]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    26a6:	4a2a      	ldr	r2, [pc, #168]	; (2750 <parsePreset+0xcf0>)
    26a8:	ed82 7a00 	vstr	s14, [r2]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    26ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    26b0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    26b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    26b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    26bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26c0:	bfcc      	ite	gt
    26c2:	2201      	movgt	r2, #1
    26c4:	2200      	movle	r2, #0
    26c6:	4b23      	ldr	r3, [pc, #140]	; (2754 <parsePreset+0xcf4>)
    26c8:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    26ca:	b196      	cbz	r6, 26f2 <parsePreset+0xc92>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    26cc:	4b22      	ldr	r3, [pc, #136]	; (2758 <parsePreset+0xcf8>)
    26ce:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    26d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    26d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26da:	bfcc      	ite	gt
    26dc:	2201      	movgt	r2, #1
    26de:	2200      	movle	r2, #0
    26e0:	4b1e      	ldr	r3, [pc, #120]	; (275c <parsePreset+0xcfc>)
    26e2:	701a      	strb	r2, [r3, #0]
	bufferIndex += 2;
    26e4:	3504      	adds	r5, #4
    26e6:	fa1f fb85 	uxth.w	fp, r5
	numMappings = 0;
    26ea:	2300      	movs	r3, #0
    26ec:	4a1c      	ldr	r2, [pc, #112]	; (2760 <parsePreset+0xd00>)
    26ee:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    26f0:	e007      	b.n	2702 <parsePreset+0xca2>
		pedalControlsMaster = 1;
    26f2:	4b1a      	ldr	r3, [pc, #104]	; (275c <parsePreset+0xcfc>)
    26f4:	2201      	movs	r2, #1
    26f6:	701a      	strb	r2, [r3, #0]
    26f8:	e7f4      	b.n	26e4 <parsePreset+0xc84>
		lfoOn[i] = 0;
    26fa:	4a1a      	ldr	r2, [pc, #104]	; (2764 <parsePreset+0xd04>)
    26fc:	2100      	movs	r1, #0
    26fe:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_LFOS; i++)
    2700:	3301      	adds	r3, #1
    2702:	2b03      	cmp	r3, #3
    2704:	ddf9      	ble.n	26fa <parsePreset+0xc9a>
	for (int i = 0; i < NUM_ENV; i++)
    2706:	2300      	movs	r3, #0
    2708:	e003      	b.n	2712 <parsePreset+0xcb2>
		envOn[i] = 0;
    270a:	4a17      	ldr	r2, [pc, #92]	; (2768 <parsePreset+0xd08>)
    270c:	2100      	movs	r1, #0
    270e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_ENV; i++)
    2710:	3301      	adds	r3, #1
    2712:	2b03      	cmp	r3, #3
    2714:	ddf9      	ble.n	270a <parsePreset+0xcaa>
	for (int i = 0; i < 12; i++)
    2716:	2300      	movs	r3, #0
    2718:	e006      	b.n	2728 <parsePreset+0xcc8>
		knobFrozen[i] = 0;
    271a:	2200      	movs	r2, #0
    271c:	4913      	ldr	r1, [pc, #76]	; (276c <parsePreset+0xd0c>)
    271e:	54ca      	strb	r2, [r1, r3]
		knobTicked[i] = 0;
    2720:	4913      	ldr	r1, [pc, #76]	; (2770 <parsePreset+0xd10>)
    2722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 12; i++)
    2726:	3301      	adds	r3, #1
    2728:	2b0b      	cmp	r3, #11
    272a:	ddf6      	ble.n	271a <parsePreset+0xcba>
	for (int i = 0; i < 10; i++)
    272c:	2300      	movs	r3, #0
    272e:	e004      	b.n	273a <parsePreset+0xcda>
		pedalTicked[i] = 0;
    2730:	4a10      	ldr	r2, [pc, #64]	; (2774 <parsePreset+0xd14>)
    2732:	2100      	movs	r1, #0
    2734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
    2738:	3301      	adds	r3, #1
    273a:	2b09      	cmp	r3, #9
    273c:	ddf8      	ble.n	2730 <parsePreset+0xcd0>
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    273e:	2100      	movs	r1, #0
    2740:	e02b      	b.n	279a <parsePreset+0xd3a>
    2742:	bf00      	nop
    2744:	200191e8 	.word	0x200191e8
    2748:	42fe0000 	.word	0x42fe0000
    274c:	200191cc 	.word	0x200191cc
    2750:	200191d0 	.word	0x200191d0
    2754:	200164d9 	.word	0x200164d9
    2758:	2001a1e8 	.word	0x2001a1e8
    275c:	2001a2f8 	.word	0x2001a2f8
    2760:	200191d8 	.word	0x200191d8
    2764:	2001d264 	.word	0x2001d264
    2768:	2001d160 	.word	0x2001d160
    276c:	200051dc 	.word	0x200051dc
    2770:	200164dc 	.word	0x200164dc
    2774:	2001a2fc 	.word	0x2001a2fc
		mappings[i].destNumber = 255;
    2778:	489e      	ldr	r0, [pc, #632]	; (29f4 <parsePreset+0xf94>)
    277a:	224c      	movs	r2, #76	; 0x4c
    277c:	fb01 f202 	mul.w	r2, r1, r2
    2780:	1883      	adds	r3, r0, r2
    2782:	25ff      	movs	r5, #255	; 0xff
    2784:	5485      	strb	r5, [r0, r2]
		mappings[i].hookActive[0] = 0;
    2786:	2200      	movs	r2, #0
    2788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		mappings[i].hookActive[1] = 0;
    278c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		mappings[i].hookActive[2] = 0;
    2790:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		mappings[i].numHooks = 0;
    2794:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2798:	3101      	adds	r1, #1
    279a:	291f      	cmp	r1, #31
    279c:	ddec      	ble.n	2778 <parsePreset+0xd18>
	for (int i = 0; i < mappingCount; i++)
    279e:	2300      	movs	r3, #0
    27a0:	469a      	mov	sl, r3
    27a2:	9403      	str	r4, [sp, #12]
    27a4:	e175      	b.n	2a92 <parsePreset+0x1032>
				foundOne = 1;
    27a6:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    27a8:	3301      	adds	r3, #1
    27aa:	2b1f      	cmp	r3, #31
    27ac:	dc15      	bgt.n	27da <parsePreset+0xd7a>
			if (mappings[j].destNumber == destNumber)
    27ae:	224c      	movs	r2, #76	; 0x4c
    27b0:	fb03 f202 	mul.w	r2, r3, r2
    27b4:	4f8f      	ldr	r7, [pc, #572]	; (29f4 <parsePreset+0xf94>)
    27b6:	5cba      	ldrb	r2, [r7, r2]
    27b8:	42a2      	cmp	r2, r4
    27ba:	d1f5      	bne.n	27a8 <parsePreset+0xd48>
				whichMapping = j;
    27bc:	b2d9      	uxtb	r1, r3
				if (presetVersionNumber == 0)
    27be:	2e00      	cmp	r6, #0
    27c0:	d1f1      	bne.n	27a6 <parsePreset+0xd46>
					whichHook = mappings[j].numHooks;
    27c2:	204c      	movs	r0, #76	; 0x4c
    27c4:	fb00 7203 	mla	r2, r0, r3, r7
    27c8:	f892 004b 	ldrb.w	r0, [r2, #75]	; 0x4b
				foundOne = 1;
    27cc:	2501      	movs	r5, #1
    27ce:	e7eb      	b.n	27a8 <parsePreset+0xd48>
		uint8_t whichHook = 0;
    27d0:	2000      	movs	r0, #0
    27d2:	2300      	movs	r3, #0
    27d4:	461d      	mov	r5, r3
    27d6:	4619      	mov	r1, r3
    27d8:	e7e7      	b.n	27aa <parsePreset+0xd4a>
		if (foundOne == 0)
    27da:	b98d      	cbnz	r5, 2800 <parsePreset+0xda0>
			whichMapping = numMappings;
    27dc:	4b86      	ldr	r3, [pc, #536]	; (29f8 <parsePreset+0xf98>)
    27de:	7819      	ldrb	r1, [r3, #0]
			numMappings++;
    27e0:	1c4a      	adds	r2, r1, #1
    27e2:	701a      	strb	r2, [r3, #0]
			if (presetVersionNumber == 0)
    27e4:	b906      	cbnz	r6, 27e8 <parsePreset+0xd88>
				whichHook = 0;
    27e6:	4628      	mov	r0, r5
			mappings[whichMapping].destNumber = destNumber;
    27e8:	4d82      	ldr	r5, [pc, #520]	; (29f4 <parsePreset+0xf94>)
    27ea:	234c      	movs	r3, #76	; 0x4c
    27ec:	fb01 f303 	mul.w	r3, r1, r3
    27f0:	18ea      	adds	r2, r5, r3
    27f2:	54ec      	strb	r4, [r5, r3]
			mappings[whichMapping].dest = &params[destNumber];
    27f4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    27f8:	4b80      	ldr	r3, [pc, #512]	; (29fc <parsePreset+0xf9c>)
    27fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    27fe:	6053      	str	r3, [r2, #4]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    2800:	460c      	mov	r4, r1
    2802:	4680      	mov	r8, r0
    2804:	4b7b      	ldr	r3, [pc, #492]	; (29f4 <parsePreset+0xf94>)
    2806:	224c      	movs	r2, #76	; 0x4c
    2808:	fb02 3301 	mla	r3, r2, r1, r3
    280c:	4403      	add	r3, r0
    280e:	2201      	movs	r2, #1
    2810:	f883 2020 	strb.w	r2, [r3, #32]
		int source = buffer[bufferIndex];
    2814:	4b7a      	ldr	r3, [pc, #488]	; (2a00 <parsePreset+0xfa0>)
    2816:	f813 5009 	ldrb.w	r5, [r3, r9]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    281a:	2200      	movs	r2, #0
    281c:	e010      	b.n	2840 <parsePreset+0xde0>
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    281e:	eb02 0345 	add.w	r3, r2, r5, lsl #1
    2822:	4978      	ldr	r1, [pc, #480]	; (2a04 <parsePreset+0xfa4>)
    2824:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    2828:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    282c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2830:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    2834:	4413      	add	r3, r2
    2836:	3302      	adds	r3, #2
    2838:	486e      	ldr	r0, [pc, #440]	; (29f4 <parsePreset+0xf94>)
    283a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    283e:	3201      	adds	r2, #1
    2840:	2a01      	cmp	r2, #1
    2842:	ddec      	ble.n	281e <parsePreset+0xdbe>
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2844:	2d03      	cmp	r5, #3
    2846:	dc07      	bgt.n	2858 <parsePreset+0xdf8>
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    2848:	4b6a      	ldr	r3, [pc, #424]	; (29f4 <parsePreset+0xf94>)
    284a:	224c      	movs	r2, #76	; 0x4c
    284c:	fb02 3304 	mla	r3, r2, r4, r3
    2850:	4443      	add	r3, r8
    2852:	2200      	movs	r2, #0
    2854:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2858:	f1a5 0318 	sub.w	r3, r5, #24
    285c:	2b03      	cmp	r3, #3
    285e:	d802      	bhi.n	2866 <parsePreset+0xe06>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2860:	4a69      	ldr	r2, [pc, #420]	; (2a08 <parsePreset+0xfa8>)
    2862:	2101      	movs	r1, #1
    2864:	54d1      	strb	r1, [r2, r3]
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2866:	f1a5 0314 	sub.w	r3, r5, #20
    286a:	2b03      	cmp	r3, #3
    286c:	d802      	bhi.n	2874 <parsePreset+0xe14>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    286e:	4a67      	ldr	r2, [pc, #412]	; (2a0c <parsePreset+0xfac>)
    2870:	2101      	movs	r1, #1
    2872:	54d1      	strb	r1, [r2, r3]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2874:	2d02      	cmp	r5, #2
    2876:	d802      	bhi.n	287e <parsePreset+0xe1e>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2878:	4b65      	ldr	r3, [pc, #404]	; (2a10 <parsePreset+0xfb0>)
    287a:	2201      	movs	r2, #1
    287c:	555a      	strb	r2, [r3, r5]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    287e:	2d03      	cmp	r5, #3
    2880:	d011      	beq.n	28a6 <parsePreset+0xe46>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2882:	1f2b      	subs	r3, r5, #4
    2884:	2b0b      	cmp	r3, #11
    2886:	d912      	bls.n	28ae <parsePreset+0xe4e>
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    2888:	f1a5 031c 	sub.w	r3, r5, #28
    288c:	2b09      	cmp	r3, #9
    288e:	d804      	bhi.n	289a <parsePreset+0xe3a>
			pedalTicked[source - PEDAL_SOURCE_OFFSET] = 1;
    2890:	461d      	mov	r5, r3
    2892:	4b60      	ldr	r3, [pc, #384]	; (2a14 <parsePreset+0xfb4>)
    2894:	2201      	movs	r2, #1
    2896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
		int scalar = buffer[bufferIndex+2];
    289a:	f109 0302 	add.w	r3, r9, #2
    289e:	4a58      	ldr	r2, [pc, #352]	; (2a00 <parsePreset+0xfa0>)
    28a0:	5cd5      	ldrb	r5, [r2, r3]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    28a2:	2700      	movs	r7, #0
    28a4:	e03c      	b.n	2920 <parsePreset+0xec0>
			noiseOn = 1;
    28a6:	4b5c      	ldr	r3, [pc, #368]	; (2a18 <parsePreset+0xfb8>)
    28a8:	2201      	movs	r2, #1
    28aa:	701a      	strb	r2, [r3, #0]
    28ac:	e7e9      	b.n	2882 <parsePreset+0xe22>
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    28ae:	b2df      	uxtb	r7, r3
			for (int v = 0; v < numStringsThisBoard; v++)
    28b0:	2200      	movs	r2, #0
    28b2:	e00f      	b.n	28d4 <parsePreset+0xe74>
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    28b4:	1cfb      	adds	r3, r7, #3
    28b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    28ba:	4413      	add	r3, r2
    28bc:	3302      	adds	r3, #2
    28be:	494f      	ldr	r1, [pc, #316]	; (29fc <parsePreset+0xf9c>)
    28c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    28c4:	6819      	ldr	r1, [r3, #0]
    28c6:	eb02 0045 	add.w	r0, r2, r5, lsl #1
    28ca:	4b4e      	ldr	r3, [pc, #312]	; (2a04 <parsePreset+0xfa4>)
    28cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    28d0:	6019      	str	r1, [r3, #0]
			for (int v = 0; v < numStringsThisBoard; v++)
    28d2:	3201      	adds	r2, #1
    28d4:	4b51      	ldr	r3, [pc, #324]	; (2a1c <parsePreset+0xfbc>)
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	4293      	cmp	r3, r2
    28da:	dceb      	bgt.n	28b4 <parsePreset+0xe54>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    28dc:	1cfb      	adds	r3, r7, #3
    28de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    28e2:	4a46      	ldr	r2, [pc, #280]	; (29fc <parsePreset+0xf9c>)
    28e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28e8:	ed93 0a02 	vldr	s0, [r3, #8]
    28ec:	484c      	ldr	r0, [pc, #304]	; (2a20 <parsePreset+0xfc0>)
    28ee:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    28f2:	f006 fedd 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    28f6:	2301      	movs	r3, #1
    28f8:	4a4a      	ldr	r2, [pc, #296]	; (2a24 <parsePreset+0xfc4>)
    28fa:	55d3      	strb	r3, [r2, r7]
			knobTicked[whichMacro] = 1;
    28fc:	4a4a      	ldr	r2, [pc, #296]	; (2a28 <parsePreset+0xfc8>)
    28fe:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    2902:	e7c1      	b.n	2888 <parsePreset+0xe28>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2904:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2908:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    290c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    2910:	443b      	add	r3, r7
    2912:	3308      	adds	r3, #8
    2914:	4a37      	ldr	r2, [pc, #220]	; (29f4 <parsePreset+0xf94>)
    2916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    291a:	4a44      	ldr	r2, [pc, #272]	; (2a2c <parsePreset+0xfcc>)
    291c:	605a      	str	r2, [r3, #4]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    291e:	3701      	adds	r7, #1
    2920:	2f01      	cmp	r7, #1
    2922:	f300 8085 	bgt.w	2a30 <parsePreset+0xfd0>
			if (scalar == 0xff)
    2926:	2dff      	cmp	r5, #255	; 0xff
    2928:	d0ec      	beq.n	2904 <parsePreset+0xea4>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    292a:	eb07 0345 	add.w	r3, r7, r5, lsl #1
    292e:	4a35      	ldr	r2, [pc, #212]	; (2a04 <parsePreset+0xfa4>)
    2930:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2934:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2938:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    293c:	eb03 0348 	add.w	r3, r3, r8, lsl #1
    2940:	443b      	add	r3, r7
    2942:	3308      	adds	r3, #8
    2944:	492b      	ldr	r1, [pc, #172]	; (29f4 <parsePreset+0xf94>)
    2946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    294a:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    294c:	f1a5 0318 	sub.w	r3, r5, #24
    2950:	2b03      	cmp	r3, #3
    2952:	d802      	bhi.n	295a <parsePreset+0xefa>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2954:	4a2c      	ldr	r2, [pc, #176]	; (2a08 <parsePreset+0xfa8>)
    2956:	2101      	movs	r1, #1
    2958:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    295a:	f1a5 0314 	sub.w	r3, r5, #20
    295e:	2b03      	cmp	r3, #3
    2960:	d802      	bhi.n	2968 <parsePreset+0xf08>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2962:	4a2a      	ldr	r2, [pc, #168]	; (2a0c <parsePreset+0xfac>)
    2964:	2101      	movs	r1, #1
    2966:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2968:	2d02      	cmp	r5, #2
    296a:	d802      	bhi.n	2972 <parsePreset+0xf12>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    296c:	4b28      	ldr	r3, [pc, #160]	; (2a10 <parsePreset+0xfb0>)
    296e:	2201      	movs	r2, #1
    2970:	555a      	strb	r2, [r3, r5]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2972:	2d03      	cmp	r5, #3
    2974:	d00b      	beq.n	298e <parsePreset+0xf2e>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2976:	1f2b      	subs	r3, r5, #4
    2978:	2b0b      	cmp	r3, #11
    297a:	d90c      	bls.n	2996 <parsePreset+0xf36>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    297c:	f1a5 031c 	sub.w	r3, r5, #28
    2980:	2b09      	cmp	r3, #9
    2982:	d8cc      	bhi.n	291e <parsePreset+0xebe>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    2984:	4a23      	ldr	r2, [pc, #140]	; (2a14 <parsePreset+0xfb4>)
    2986:	2101      	movs	r1, #1
    2988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    298c:	e7c7      	b.n	291e <parsePreset+0xebe>
					noiseOn = 1;
    298e:	4b22      	ldr	r3, [pc, #136]	; (2a18 <parsePreset+0xfb8>)
    2990:	2201      	movs	r2, #1
    2992:	701a      	strb	r2, [r3, #0]
    2994:	e7ef      	b.n	2976 <parsePreset+0xf16>
					uint8_t whichMacro = scalar - MACRO_SOURCE_OFFSET;
    2996:	b2d9      	uxtb	r1, r3
    2998:	9101      	str	r1, [sp, #4]
					for (int v = 0; v < numStringsThisBoard; v++)
    299a:	2200      	movs	r2, #0
    299c:	e00f      	b.n	29be <parsePreset+0xf5e>
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    299e:	1ccb      	adds	r3, r1, #3
    29a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    29a4:	4413      	add	r3, r2
    29a6:	3302      	adds	r3, #2
    29a8:	4814      	ldr	r0, [pc, #80]	; (29fc <parsePreset+0xf9c>)
    29aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    29ae:	6818      	ldr	r0, [r3, #0]
    29b0:	eb02 0c45 	add.w	ip, r2, r5, lsl #1
    29b4:	4b13      	ldr	r3, [pc, #76]	; (2a04 <parsePreset+0xfa4>)
    29b6:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    29ba:	6018      	str	r0, [r3, #0]
					for (int v = 0; v < numStringsThisBoard; v++)
    29bc:	3201      	adds	r2, #1
    29be:	4b17      	ldr	r3, [pc, #92]	; (2a1c <parsePreset+0xfbc>)
    29c0:	781b      	ldrb	r3, [r3, #0]
    29c2:	4293      	cmp	r3, r2
    29c4:	dceb      	bgt.n	299e <parsePreset+0xf3e>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    29c6:	9901      	ldr	r1, [sp, #4]
    29c8:	1ccb      	adds	r3, r1, #3
    29ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    29ce:	4a0b      	ldr	r2, [pc, #44]	; (29fc <parsePreset+0xf9c>)
    29d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29d4:	ed93 0a02 	vldr	s0, [r3, #8]
    29d8:	4811      	ldr	r0, [pc, #68]	; (2a20 <parsePreset+0xfc0>)
    29da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    29de:	f006 fe67 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    29e2:	2301      	movs	r3, #1
    29e4:	4a0f      	ldr	r2, [pc, #60]	; (2a24 <parsePreset+0xfc4>)
    29e6:	9901      	ldr	r1, [sp, #4]
    29e8:	5453      	strb	r3, [r2, r1]
					knobTicked[whichMacro] = 1;
    29ea:	4a0f      	ldr	r2, [pc, #60]	; (2a28 <parsePreset+0xfc8>)
    29ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    29f0:	e7c4      	b.n	297c <parsePreset+0xf1c>
    29f2:	bf00      	nop
    29f4:	20018590 	.word	0x20018590
    29f8:	200191d8 	.word	0x200191d8
    29fc:	200191e8 	.word	0x200191e8
    2a00:	30042380 	.word	0x30042380
    2a04:	2001d6b4 	.word	0x2001d6b4
    2a08:	2001d264 	.word	0x2001d264
    2a0c:	2001d160 	.word	0x2001d160
    2a10:	2001d4d4 	.word	0x2001d4d4
    2a14:	2001a2fc 	.word	0x2001a2fc
    2a18:	2001d4b0 	.word	0x2001d4b0
    2a1c:	20000694 	.word	0x20000694
    2a20:	20005240 	.word	0x20005240
    2a24:	200051dc 	.word	0x200051dc
    2a28:	200164dc 	.word	0x200164dc
    2a2c:	200006b0 	.word	0x200006b0
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2a30:	f109 0203 	add.w	r2, r9, #3
    2a34:	4b61      	ldr	r3, [pc, #388]	; (2bbc <parsePreset+0x115c>)
    2a36:	5c9a      	ldrb	r2, [r3, r2]
    2a38:	f109 0904 	add.w	r9, r9, #4
    2a3c:	f813 3009 	ldrb.w	r3, [r3, r9]
    2a40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2a44:	b21b      	sxth	r3, r3
    2a46:	ee07 3a90 	vmov	s15, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2a4e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 2bc0 <parsePreset+0x1160>
    2a52:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2a56:	4a5b      	ldr	r2, [pc, #364]	; (2bc4 <parsePreset+0x1164>)
    2a58:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2a5c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2a60:	4443      	add	r3, r8
    2a62:	330e      	adds	r3, #14
    2a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a68:	edc3 7a01 	vstr	s15, [r3, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2a6c:	234c      	movs	r3, #76	; 0x4c
    2a6e:	fb03 2304 	mla	r3, r3, r4, r2
    2a72:	4498      	add	r8, r3
    2a74:	2201      	movs	r2, #1
    2a76:	f888 2048 	strb.w	r2, [r8, #72]	; 0x48
		mappings[whichMapping].numHooks++;
    2a7a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    2a7e:	3201      	adds	r2, #1
    2a80:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2a84:	b1a6      	cbz	r6, 2ab0 <parsePreset+0x1050>
			bufferIndex += 6;
    2a86:	f10b 0b06 	add.w	fp, fp, #6
    2a8a:	fa1f fb8b 	uxth.w	fp, fp
	for (int i = 0; i < mappingCount; i++)
    2a8e:	f10a 0a01 	add.w	sl, sl, #1
    2a92:	9b02      	ldr	r3, [sp, #8]
    2a94:	4553      	cmp	r3, sl
    2a96:	dd10      	ble.n	2aba <parsePreset+0x105a>
		uint8_t destNumber = buffer[bufferIndex+1];
    2a98:	46d9      	mov	r9, fp
    2a9a:	f10b 0301 	add.w	r3, fp, #1
    2a9e:	4a47      	ldr	r2, [pc, #284]	; (2bbc <parsePreset+0x115c>)
    2aa0:	5cd4      	ldrb	r4, [r2, r3]
		if (presetVersionNumber > 0)
    2aa2:	2e00      	cmp	r6, #0
    2aa4:	f43f ae94 	beq.w	27d0 <parsePreset+0xd70>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2aa8:	f10b 0305 	add.w	r3, fp, #5
    2aac:	5cd0      	ldrb	r0, [r2, r3]
    2aae:	e690      	b.n	27d2 <parsePreset+0xd72>
			bufferIndex += 5;
    2ab0:	f10b 0b05 	add.w	fp, fp, #5
    2ab4:	fa1f fb8b 	uxth.w	fp, fp
    2ab8:	e7e9      	b.n	2a8e <parsePreset+0x102e>
    2aba:	9c03      	ldr	r4, [sp, #12]
    2abc:	2500      	movs	r5, #0
    2abe:	e052      	b.n	2b66 <parsePreset+0x1106>
				for (int j = 0; j < 3; j++)
    2ac0:	3201      	adds	r2, #1
    2ac2:	2a02      	cmp	r2, #2
    2ac4:	dc28      	bgt.n	2b18 <parsePreset+0x10b8>
					if (mappings[i].hookActive[j])
    2ac6:	4b3f      	ldr	r3, [pc, #252]	; (2bc4 <parsePreset+0x1164>)
    2ac8:	214c      	movs	r1, #76	; 0x4c
    2aca:	fb01 3305 	mla	r3, r1, r5, r3
    2ace:	4413      	add	r3, r2
    2ad0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d0f3      	beq.n	2ac0 <parsePreset+0x1060>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2ad8:	483a      	ldr	r0, [pc, #232]	; (2bc4 <parsePreset+0x1164>)
    2ada:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2ade:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    2ae2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2ae6:	4431      	add	r1, r6
    2ae8:	1c8f      	adds	r7, r1, #2
    2aea:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    2aee:	edd7 7a00 	vldr	s15, [r7]
    2af2:	4413      	add	r3, r2
    2af4:	330e      	adds	r3, #14
    2af6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2afa:	edd3 6a01 	vldr	s13, [r3, #4]
    2afe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2b02:	3108      	adds	r1, #8
    2b04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2b08:	6843      	ldr	r3, [r0, #4]
    2b0a:	edd3 6a00 	vldr	s13, [r3]
    2b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
						unsmoothedValue += sum;
    2b12:	ee37 7a27 	vadd.f32	s14, s14, s15
    2b16:	e7d3      	b.n	2ac0 <parsePreset+0x1060>
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2b18:	4b2a      	ldr	r3, [pc, #168]	; (2bc4 <parsePreset+0x1164>)
    2b1a:	224c      	movs	r2, #76	; 0x4c
    2b1c:	fb02 3805 	mla	r8, r2, r5, r3
    2b20:	f8d8 7004 	ldr.w	r7, [r8, #4]
    2b24:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    2b28:	ed93 0a00 	vldr	s0, [r3]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2b2c:	693b      	ldr	r3, [r7, #16]
    2b2e:	ee30 0a07 	vadd.f32	s0, s0, s14
    2b32:	4798      	blx	r3
    2b34:	1cb3      	adds	r3, r6, #2
    2b36:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    2b3a:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2b3e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2b42:	6957      	ldr	r7, [r2, #20]
    2b44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b48:	4631      	mov	r1, r6
    2b4a:	7e10      	ldrb	r0, [r2, #24]
    2b4c:	ed93 0a00 	vldr	s0, [r3]
    2b50:	47b8      	blx	r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2b52:	3601      	adds	r6, #1
    2b54:	4b1c      	ldr	r3, [pc, #112]	; (2bc8 <parsePreset+0x1168>)
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	42b3      	cmp	r3, r6
    2b5a:	dd03      	ble.n	2b64 <parsePreset+0x1104>
				for (int j = 0; j < 3; j++)
    2b5c:	2200      	movs	r2, #0
				float unsmoothedValue = 0.0f;
    2b5e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 2bcc <parsePreset+0x116c>
    2b62:	e7ae      	b.n	2ac2 <parsePreset+0x1062>
	for (int i = 0; i < numMappings; i++)
    2b64:	3501      	adds	r5, #1
    2b66:	4b1a      	ldr	r3, [pc, #104]	; (2bd0 <parsePreset+0x1170>)
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	42ab      	cmp	r3, r5
    2b6c:	dd08      	ble.n	2b80 <parsePreset+0x1120>
		if (mappings[i].destNumber != 255)
    2b6e:	234c      	movs	r3, #76	; 0x4c
    2b70:	fb05 f303 	mul.w	r3, r5, r3
    2b74:	4a13      	ldr	r2, [pc, #76]	; (2bc4 <parsePreset+0x1164>)
    2b76:	5cd3      	ldrb	r3, [r2, r3]
    2b78:	2bff      	cmp	r3, #255	; 0xff
    2b7a:	d0f3      	beq.n	2b64 <parsePreset+0x1104>
			for (int v = 0; v < numStringsThisBoard; v++)
    2b7c:	2600      	movs	r6, #0
    2b7e:	e7e9      	b.n	2b54 <parsePreset+0x10f4>
	audioSwitchToSynth();
    2b80:	f006 fe7e 	bl	9880 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    2b84:	2500      	movs	r5, #0
    2b86:	4b13      	ldr	r3, [pc, #76]	; (2bd4 <parsePreset+0x1174>)
    2b88:	601d      	str	r5, [r3, #0]
	currentActivePreset = presetNumber;
    2b8a:	b2e4      	uxtb	r4, r4
    2b8c:	4b12      	ldr	r3, [pc, #72]	; (2bd8 <parsePreset+0x1178>)
    2b8e:	701c      	strb	r4, [r3, #0]
	audioMasterLevel = 1.0f;
    2b90:	4b12      	ldr	r3, [pc, #72]	; (2bdc <parsePreset+0x117c>)
    2b92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2b96:	601a      	str	r2, [r3, #0]
	oscToTick = NUM_OSC;
    2b98:	4b11      	ldr	r3, [pc, #68]	; (2be0 <parsePreset+0x1180>)
    2b9a:	2203      	movs	r2, #3
    2b9c:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    2b9e:	2401      	movs	r4, #1
    2ba0:	4b10      	ldr	r3, [pc, #64]	; (2be4 <parsePreset+0x1184>)
    2ba2:	601c      	str	r4, [r3, #0]
	changeOversampling(overSampled);
    2ba4:	4620      	mov	r0, r4
    2ba6:	f006 feeb 	bl	9980 <__changeOversampling_veneer>
    2baa:	b662      	cpsie	i
	presetReady = 1;
    2bac:	4b0e      	ldr	r3, [pc, #56]	; (2be8 <parsePreset+0x1188>)
    2bae:	601c      	str	r4, [r3, #0]
	diskBusy = 0;
    2bb0:	4b0e      	ldr	r3, [pc, #56]	; (2bec <parsePreset+0x118c>)
    2bb2:	701d      	strb	r5, [r3, #0]
	receivingI2C = 0;
    2bb4:	4b0e      	ldr	r3, [pc, #56]	; (2bf0 <parsePreset+0x1190>)
    2bb6:	701d      	strb	r5, [r3, #0]
    2bb8:	f7ff b8f3 	b.w	1da2 <parsePreset+0x342>
    2bbc:	30042380 	.word	0x30042380
    2bc0:	37fffffc 	.word	0x37fffffc
    2bc4:	20018590 	.word	0x20018590
    2bc8:	20000694 	.word	0x20000694
    2bcc:	00000000 	.word	0x00000000
    2bd0:	200191d8 	.word	0x200191d8
    2bd4:	2001a340 	.word	0x2001a340
    2bd8:	200006ad 	.word	0x200006ad
    2bdc:	200006a8 	.word	0x200006a8
    2be0:	200008ec 	.word	0x200008ec
    2be4:	200008f0 	.word	0x200008f0
    2be8:	20005354 	.word	0x20005354
    2bec:	20014358 	.word	0x20014358
    2bf0:	2001a798 	.word	0x2001a798
    2bf4:	f3af 8000 	nop.w
    2bf8:	f3af 8000 	nop.w
    2bfc:	f3af 8000 	nop.w

00002c00 <handleSPI>:
{
    2c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c04:	b082      	sub	sp, #8
    2c06:	4604      	mov	r4, r0
	interruptChecker = 1;
    2c08:	4b72      	ldr	r3, [pc, #456]	; (2dd4 <handleSPI+0x1d4>)
    2c0a:	2201      	movs	r2, #1
    2c0c:	701a      	strb	r2, [r3, #0]
	if (foundBrainFirmware)
    2c0e:	4b72      	ldr	r3, [pc, #456]	; (2dd8 <handleSPI+0x1d8>)
    2c10:	781a      	ldrb	r2, [r3, #0]
    2c12:	2a00      	cmp	r2, #0
    2c14:	f000 8086 	beq.w	2d24 <handleSPI+0x124>
		if (brainFirmwareEndSignal)
    2c18:	4b70      	ldr	r3, [pc, #448]	; (2ddc <handleSPI+0x1dc>)
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	b1fb      	cbz	r3, 2c5e <handleSPI+0x5e>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    2c1e:	4b70      	ldr	r3, [pc, #448]	; (2de0 <handleSPI+0x1e0>)
    2c20:	22f9      	movs	r2, #249	; 0xf9
    2c22:	541a      	strb	r2, [r3, r0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2c24:	4a6f      	ldr	r2, [pc, #444]	; (2de4 <handleSPI+0x1e4>)
    2c26:	6812      	ldr	r2, [r2, #0]
    2c28:	0e10      	lsrs	r0, r2, #24
    2c2a:	1c61      	adds	r1, r4, #1
    2c2c:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    2c2e:	0c10      	lsrs	r0, r2, #16
    2c30:	1ca1      	adds	r1, r4, #2
    2c32:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    2c34:	0a10      	lsrs	r0, r2, #8
    2c36:	1ce1      	adds	r1, r4, #3
    2c38:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    2c3a:	1d21      	adds	r1, r4, #4
    2c3c:	3a00      	subs	r2, #0
    2c3e:	bf18      	it	ne
    2c40:	2201      	movne	r2, #1
    2c42:	545a      	strb	r2, [r3, r1]
			SPI_LEVERS_TX[offset+31] = 254;
    2c44:	341f      	adds	r4, #31
    2c46:	22fe      	movs	r2, #254	; 0xfe
    2c48:	551a      	strb	r2, [r3, r4]
			brainFirmwareEndSignal = 0;
    2c4a:	2300      	movs	r3, #0
    2c4c:	4a63      	ldr	r2, [pc, #396]	; (2ddc <handleSPI+0x1dc>)
    2c4e:	6013      	str	r3, [r2, #0]
			brainFirmwareSendInProgress = 0;
    2c50:	4a65      	ldr	r2, [pc, #404]	; (2de8 <handleSPI+0x1e8>)
    2c52:	6013      	str	r3, [r2, #0]
			foundBrainFirmware = 0;
    2c54:	4a60      	ldr	r2, [pc, #384]	; (2dd8 <handleSPI+0x1d8>)
    2c56:	7013      	strb	r3, [r2, #0]
}
    2c58:	b002      	add	sp, #8
    2c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if (brainFirmwareSendInProgress)
    2c5e:	4b62      	ldr	r3, [pc, #392]	; (2de8 <handleSPI+0x1e8>)
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	2b00      	cmp	r3, #0
    2c64:	d046      	beq.n	2cf4 <handleSPI+0xf4>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    2c66:	4b5e      	ldr	r3, [pc, #376]	; (2de0 <handleSPI+0x1e0>)
    2c68:	22fb      	movs	r2, #251	; 0xfb
    2c6a:	541a      	strb	r2, [r3, r0]
			for (int i = 0; i < 30; i++)
    2c6c:	2500      	movs	r5, #0
			uint8_t rowEnded = 0;
    2c6e:	462f      	mov	r7, r5
			for (int i = 0; i < 30; i++)
    2c70:	e008      	b.n	2c84 <handleSPI+0x84>
					rowEnded = 1;
    2c72:	2701      	movs	r7, #1
				positionInRowLine++;
    2c74:	3301      	adds	r3, #1
    2c76:	4a5d      	ldr	r2, [pc, #372]	; (2dec <handleSPI+0x1ec>)
    2c78:	8013      	strh	r3, [r2, #0]
				if (rowEnded == 0)
    2c7a:	b9bf      	cbnz	r7, 2cac <handleSPI+0xac>
					brainFirmwareBufferIndex += 2;
    2c7c:	3602      	adds	r6, #2
    2c7e:	4b5c      	ldr	r3, [pc, #368]	; (2df0 <handleSPI+0x1f0>)
    2c80:	601e      	str	r6, [r3, #0]
			for (int i = 0; i < 30; i++)
    2c82:	3501      	adds	r5, #1
    2c84:	2d1d      	cmp	r5, #29
    2c86:	dc27      	bgt.n	2cd8 <handleSPI+0xd8>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    2c88:	4b59      	ldr	r3, [pc, #356]	; (2df0 <handleSPI+0x1f0>)
    2c8a:	681e      	ldr	r6, [r3, #0]
    2c8c:	4b59      	ldr	r3, [pc, #356]	; (2df4 <handleSPI+0x1f4>)
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    2c8e:	1c72      	adds	r2, r6, #1
				uint8_t valToSend = fromAscii(val1, val2);
    2c90:	5c99      	ldrb	r1, [r3, r2]
    2c92:	5d98      	ldrb	r0, [r3, r6]
    2c94:	f006 fd40 	bl	9718 <__fromAscii_veneer>
				if (positionInRowLine < 294)
    2c98:	4b54      	ldr	r3, [pc, #336]	; (2dec <handleSPI+0x1ec>)
    2c9a:	881b      	ldrh	r3, [r3, #0]
    2c9c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
    2ca0:	d2e7      	bcs.n	2c72 <handleSPI+0x72>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2ca2:	1962      	adds	r2, r4, r5
    2ca4:	3201      	adds	r2, #1
    2ca6:	494e      	ldr	r1, [pc, #312]	; (2de0 <handleSPI+0x1e0>)
    2ca8:	5488      	strb	r0, [r1, r2]
    2caa:	e7e3      	b.n	2c74 <handleSPI+0x74>
					positionInRowLine = 0;
    2cac:	2300      	movs	r3, #0
    2cae:	4a4f      	ldr	r2, [pc, #316]	; (2dec <handleSPI+0x1ec>)
    2cb0:	8013      	strh	r3, [r2, #0]
					for (uint8_t j = 0; j<10; j++)
    2cb2:	e001      	b.n	2cb8 <handleSPI+0xb8>
    2cb4:	3301      	adds	r3, #1
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	2b09      	cmp	r3, #9
    2cba:	d80a      	bhi.n	2cd2 <handleSPI+0xd2>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    2cbc:	4a4c      	ldr	r2, [pc, #304]	; (2df0 <handleSPI+0x1f0>)
    2cbe:	6812      	ldr	r2, [r2, #0]
    2cc0:	441a      	add	r2, r3
    2cc2:	494c      	ldr	r1, [pc, #304]	; (2df4 <handleSPI+0x1f4>)
    2cc4:	5c89      	ldrb	r1, [r1, r2]
    2cc6:	293a      	cmp	r1, #58	; 0x3a
    2cc8:	d1f4      	bne.n	2cb4 <handleSPI+0xb4>
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    2cca:	3201      	adds	r2, #1
    2ccc:	4948      	ldr	r1, [pc, #288]	; (2df0 <handleSPI+0x1f0>)
    2cce:	600a      	str	r2, [r1, #0]
    2cd0:	e7f0      	b.n	2cb4 <handleSPI+0xb4>
					i-=1;//push i back one because otherwise it increments even though we didn't send, just prepped for next send
    2cd2:	3d01      	subs	r5, #1
					rowEnded = 0;
    2cd4:	2700      	movs	r7, #0
    2cd6:	e7d4      	b.n	2c82 <handleSPI+0x82>
			SPI_LEVERS_TX[offset+31] = 254;
    2cd8:	341f      	adds	r4, #31
    2cda:	4b41      	ldr	r3, [pc, #260]	; (2de0 <handleSPI+0x1e0>)
    2cdc:	22fe      	movs	r2, #254	; 0xfe
    2cde:	551a      	strb	r2, [r3, r4]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    2ce0:	4b43      	ldr	r3, [pc, #268]	; (2df0 <handleSPI+0x1f0>)
    2ce2:	681a      	ldr	r2, [r3, #0]
    2ce4:	4b3f      	ldr	r3, [pc, #252]	; (2de4 <handleSPI+0x1e4>)
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	429a      	cmp	r2, r3
    2cea:	d3b5      	bcc.n	2c58 <handleSPI+0x58>
				brainFirmwareEndSignal = 1;
    2cec:	4b3b      	ldr	r3, [pc, #236]	; (2ddc <handleSPI+0x1dc>)
    2cee:	2201      	movs	r2, #1
    2cf0:	601a      	str	r2, [r3, #0]
    2cf2:	e7b1      	b.n	2c58 <handleSPI+0x58>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    2cf4:	4b3a      	ldr	r3, [pc, #232]	; (2de0 <handleSPI+0x1e0>)
    2cf6:	22fc      	movs	r2, #252	; 0xfc
    2cf8:	541a      	strb	r2, [r3, r0]
			brainFirmwareSendInProgress = 1;
    2cfa:	4b3b      	ldr	r3, [pc, #236]	; (2de8 <handleSPI+0x1e8>)
    2cfc:	2201      	movs	r2, #1
    2cfe:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i<100; i++)
    2d00:	2300      	movs	r3, #0
    2d02:	e001      	b.n	2d08 <handleSPI+0x108>
    2d04:	3301      	adds	r3, #1
    2d06:	b2db      	uxtb	r3, r3
    2d08:	2b63      	cmp	r3, #99	; 0x63
    2d0a:	d807      	bhi.n	2d1c <handleSPI+0x11c>
				if (brainFirmwareBuffer[i] ==  0x3a)
    2d0c:	4a39      	ldr	r2, [pc, #228]	; (2df4 <handleSPI+0x1f4>)
    2d0e:	5cd2      	ldrb	r2, [r2, r3]
    2d10:	2a3a      	cmp	r2, #58	; 0x3a
    2d12:	d1f7      	bne.n	2d04 <handleSPI+0x104>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    2d14:	1c5a      	adds	r2, r3, #1
    2d16:	4936      	ldr	r1, [pc, #216]	; (2df0 <handleSPI+0x1f0>)
    2d18:	600a      	str	r2, [r1, #0]
    2d1a:	e7f3      	b.n	2d04 <handleSPI+0x104>
			positionInRowLine = 0;
    2d1c:	4b33      	ldr	r3, [pc, #204]	; (2dec <handleSPI+0x1ec>)
    2d1e:	2200      	movs	r2, #0
    2d20:	801a      	strh	r2, [r3, #0]
    2d22:	e799      	b.n	2c58 <handleSPI+0x58>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    2d24:	4b2e      	ldr	r3, [pc, #184]	; (2de0 <handleSPI+0x1e0>)
    2d26:	4403      	add	r3, r0
    2d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2d2c:	2b01      	cmp	r3, #1
    2d2e:	d016      	beq.n	2d5e <handleSPI+0x15e>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    2d30:	2b0e      	cmp	r3, #14
    2d32:	f200 8196 	bhi.w	3062 <_Min_Heap_Size+0x62>
    2d36:	2b02      	cmp	r3, #2
    2d38:	d36e      	bcc.n	2e18 <handleSPI+0x218>
    2d3a:	3b02      	subs	r3, #2
    2d3c:	2b0c      	cmp	r3, #12
    2d3e:	d86b      	bhi.n	2e18 <handleSPI+0x218>
    2d40:	e8df f013 	tbh	[pc, r3, lsl #1]
    2d44:	020801aa 	.word	0x020801aa
    2d48:	006a006a 	.word	0x006a006a
    2d4c:	05830319 	.word	0x05830319
    2d50:	006a006a 	.word	0x006a006a
    2d54:	070706ee 	.word	0x070706ee
    2d58:	028d0711 	.word	0x028d0711
    2d5c:	071b      	.short	0x071b
			 uint8_t currentByte = offset+1;
    2d5e:	1c41      	adds	r1, r0, #1
    2d60:	b2c9      	uxtb	r1, r1
			 for (int i = 0; i < numStringsThisBoard; i++)
    2d62:	2200      	movs	r2, #0
    2d64:	e000      	b.n	2d68 <handleSPI+0x168>
    2d66:	3201      	adds	r2, #1
    2d68:	4b23      	ldr	r3, [pc, #140]	; (2df8 <handleSPI+0x1f8>)
    2d6a:	781b      	ldrb	r3, [r3, #0]
    2d6c:	4293      	cmp	r3, r2
    2d6e:	dd4d      	ble.n	2e0c <handleSPI+0x20c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    2d70:	4d22      	ldr	r5, [pc, #136]	; (2dfc <handleSPI+0x1fc>)
    2d72:	682b      	ldr	r3, [r5, #0]
    2d74:	4413      	add	r3, r2
    2d76:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2d7a:	4819      	ldr	r0, [pc, #100]	; (2de0 <handleSPI+0x1e0>)
    2d7c:	4403      	add	r3, r0
    2d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2d82:	021b      	lsls	r3, r3, #8
    2d84:	ee07 3a90 	vmov	s15, r3
    2d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d8c:	682b      	ldr	r3, [r5, #0]
    2d8e:	4413      	add	r3, r2
    2d90:	005b      	lsls	r3, r3, #1
    2d92:	3301      	adds	r3, #1
    2d94:	440b      	add	r3, r1
    2d96:	4418      	add	r0, r3
    2d98:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    2d9c:	ee07 3a10 	vmov	s14, r3
    2da0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2da4:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2da8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2e00 <handleSPI+0x200>
    2dac:	ee67 7a87 	vmul.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2db8:	ddd5      	ble.n	2d66 <handleSPI+0x166>
    2dba:	ed9f 7a12 	vldr	s14, [pc, #72]	; 2e04 <handleSPI+0x204>
    2dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
    2dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2dc6:	d5ce      	bpl.n	2d66 <handleSPI+0x166>
					stringMIDIPitches[i] = myPitch;
    2dc8:	4b0f      	ldr	r3, [pc, #60]	; (2e08 <handleSPI+0x208>)
    2dca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2dce:	edc3 7a00 	vstr	s15, [r3]
    2dd2:	e7c8      	b.n	2d66 <handleSPI+0x166>
    2dd4:	200164db 	.word	0x200164db
    2dd8:	200164d8 	.word	0x200164d8
    2ddc:	20014304 	.word	0x20014304
    2de0:	30000800 	.word	0x30000800
    2de4:	2001430c 	.word	0x2001430c
    2de8:	20014308 	.word	0x20014308
    2dec:	2001a328 	.word	0x2001a328
    2df0:	20014300 	.word	0x20014300
    2df4:	61e00000 	.word	0x61e00000
    2df8:	20000694 	.word	0x20000694
    2dfc:	200051cc 	.word	0x200051cc
    2e00:	3b000080 	.word	0x3b000080
    2e04:	430c0000 	.word	0x430c0000
    2e08:	20014224 	.word	0x20014224
			 whichBar = 0;
    2e0c:	4bbf      	ldr	r3, [pc, #764]	; (310c <_Min_Heap_Size+0x10c>)
    2e0e:	2200      	movs	r2, #0
    2e10:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    2e12:	4620      	mov	r0, r4
    2e14:	f7fe fb34 	bl	1480 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    2e18:	4bbd      	ldr	r3, [pc, #756]	; (3110 <_Min_Heap_Size+0x110>)
    2e1a:	781b      	ldrb	r3, [r3, #0]
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	f47f af1b 	bne.w	2c58 <handleSPI+0x58>
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2e22:	4bbc      	ldr	r3, [pc, #752]	; (3114 <_Min_Heap_Size+0x114>)
    2e24:	22fd      	movs	r2, #253	; 0xfd
    2e26:	551a      	strb	r2, [r3, r4]
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    2e28:	1c62      	adds	r2, r4, #1
    2e2a:	49bb      	ldr	r1, [pc, #748]	; (3118 <_Min_Heap_Size+0x118>)
    2e2c:	7808      	ldrb	r0, [r1, #0]
    2e2e:	5498      	strb	r0, [r3, r2]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2e30:	7808      	ldrb	r0, [r1, #0]
    2e32:	1ca5      	adds	r5, r4, #2
    2e34:	4ab9      	ldr	r2, [pc, #740]	; (311c <_Min_Heap_Size+0x11c>)
    2e36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e3a:	0040      	lsls	r0, r0, #1
    2e3c:	5c10      	ldrb	r0, [r2, r0]
    2e3e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    2e40:	7808      	ldrb	r0, [r1, #0]
    2e42:	1ce5      	adds	r5, r4, #3
    2e44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e48:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e4c:	7840      	ldrb	r0, [r0, #1]
    2e4e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    2e50:	7808      	ldrb	r0, [r1, #0]
    2e52:	1d25      	adds	r5, r4, #4
    2e54:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e58:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e5c:	7880      	ldrb	r0, [r0, #2]
    2e5e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2e60:	7808      	ldrb	r0, [r1, #0]
    2e62:	1d65      	adds	r5, r4, #5
    2e64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e68:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e6c:	78c0      	ldrb	r0, [r0, #3]
    2e6e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2e70:	7808      	ldrb	r0, [r1, #0]
    2e72:	1da5      	adds	r5, r4, #6
    2e74:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e78:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e7c:	7900      	ldrb	r0, [r0, #4]
    2e7e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2e80:	7808      	ldrb	r0, [r1, #0]
    2e82:	1de5      	adds	r5, r4, #7
    2e84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e88:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e8c:	7940      	ldrb	r0, [r0, #5]
    2e8e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2e90:	7808      	ldrb	r0, [r1, #0]
    2e92:	f104 0508 	add.w	r5, r4, #8
    2e96:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2e9a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2e9e:	7980      	ldrb	r0, [r0, #6]
    2ea0:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    2ea2:	7808      	ldrb	r0, [r1, #0]
    2ea4:	f104 0509 	add.w	r5, r4, #9
    2ea8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2eac:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2eb0:	79c0      	ldrb	r0, [r0, #7]
    2eb2:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    2eb4:	7808      	ldrb	r0, [r1, #0]
    2eb6:	f104 050a 	add.w	r5, r4, #10
    2eba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ebe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ec2:	7a00      	ldrb	r0, [r0, #8]
    2ec4:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    2ec6:	7808      	ldrb	r0, [r1, #0]
    2ec8:	f104 050b 	add.w	r5, r4, #11
    2ecc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ed0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ed4:	7a40      	ldrb	r0, [r0, #9]
    2ed6:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2ed8:	7808      	ldrb	r0, [r1, #0]
    2eda:	f104 050c 	add.w	r5, r4, #12
    2ede:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ee2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ee6:	7a80      	ldrb	r0, [r0, #10]
    2ee8:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    2eea:	7808      	ldrb	r0, [r1, #0]
    2eec:	f104 050d 	add.w	r5, r4, #13
    2ef0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ef4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ef8:	7ac0      	ldrb	r0, [r0, #11]
    2efa:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    2efc:	7808      	ldrb	r0, [r1, #0]
    2efe:	f104 050e 	add.w	r5, r4, #14
    2f02:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f06:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2f0a:	7b00      	ldrb	r0, [r0, #12]
    2f0c:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    2f0e:	7808      	ldrb	r0, [r1, #0]
    2f10:	f104 050f 	add.w	r5, r4, #15
    2f14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f18:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    2f1c:	7b52      	ldrb	r2, [r2, #13]
    2f1e:	555a      	strb	r2, [r3, r5]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2f20:	f104 0010 	add.w	r0, r4, #16
    2f24:	4f7e      	ldr	r7, [pc, #504]	; (3120 <_Min_Heap_Size+0x120>)
    2f26:	783a      	ldrb	r2, [r7, #0]
    2f28:	541a      	strb	r2, [r3, r0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2f2a:	780e      	ldrb	r6, [r1, #0]
    2f2c:	f104 0c11 	add.w	ip, r4, #17
    2f30:	4d7c      	ldr	r5, [pc, #496]	; (3124 <_Min_Heap_Size+0x124>)
    2f32:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    2f36:	20c8      	movs	r0, #200	; 0xc8
    2f38:	fb00 f606 	mul.w	r6, r0, r6
    2f3c:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2f40:	5dae      	ldrb	r6, [r5, r6]
    2f42:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    2f46:	780e      	ldrb	r6, [r1, #0]
    2f48:	f104 0c12 	add.w	ip, r4, #18
    2f4c:	fb00 f606 	mul.w	r6, r0, r6
    2f50:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2f54:	442e      	add	r6, r5
    2f56:	7876      	ldrb	r6, [r6, #1]
    2f58:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    2f5c:	780e      	ldrb	r6, [r1, #0]
    2f5e:	f104 0c13 	add.w	ip, r4, #19
    2f62:	fb00 f606 	mul.w	r6, r0, r6
    2f66:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2f6a:	442e      	add	r6, r5
    2f6c:	78b6      	ldrb	r6, [r6, #2]
    2f6e:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    2f72:	780e      	ldrb	r6, [r1, #0]
    2f74:	f104 0c14 	add.w	ip, r4, #20
    2f78:	fb00 f606 	mul.w	r6, r0, r6
    2f7c:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2f80:	442e      	add	r6, r5
    2f82:	78f6      	ldrb	r6, [r6, #3]
    2f84:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    2f88:	780e      	ldrb	r6, [r1, #0]
    2f8a:	f104 0c15 	add.w	ip, r4, #21
    2f8e:	fb00 f606 	mul.w	r6, r0, r6
    2f92:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2f96:	442e      	add	r6, r5
    2f98:	7936      	ldrb	r6, [r6, #4]
    2f9a:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    2f9e:	780e      	ldrb	r6, [r1, #0]
    2fa0:	f104 0c16 	add.w	ip, r4, #22
    2fa4:	fb00 f606 	mul.w	r6, r0, r6
    2fa8:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2fac:	442e      	add	r6, r5
    2fae:	7976      	ldrb	r6, [r6, #5]
    2fb0:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    2fb4:	780e      	ldrb	r6, [r1, #0]
    2fb6:	f104 0c17 	add.w	ip, r4, #23
    2fba:	fb00 f606 	mul.w	r6, r0, r6
    2fbe:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2fc2:	442e      	add	r6, r5
    2fc4:	79b6      	ldrb	r6, [r6, #6]
    2fc6:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    2fca:	780e      	ldrb	r6, [r1, #0]
    2fcc:	f104 0c18 	add.w	ip, r4, #24
    2fd0:	fb00 f606 	mul.w	r6, r0, r6
    2fd4:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2fd8:	442e      	add	r6, r5
    2fda:	79f6      	ldrb	r6, [r6, #7]
    2fdc:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    2fe0:	780e      	ldrb	r6, [r1, #0]
    2fe2:	f104 0c19 	add.w	ip, r4, #25
    2fe6:	fb00 f606 	mul.w	r6, r0, r6
    2fea:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    2fee:	442e      	add	r6, r5
    2ff0:	7a36      	ldrb	r6, [r6, #8]
    2ff2:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    2ff6:	f891 c000 	ldrb.w	ip, [r1]
    2ffa:	f104 011a 	add.w	r1, r4, #26
    2ffe:	fb0c f000 	mul.w	r0, ip, r0
    3002:	eb00 004e 	add.w	r0, r0, lr, lsl #1
    3006:	4405      	add	r5, r0
    3008:	7a68      	ldrb	r0, [r5, #9]
    300a:	5458      	strb	r0, [r3, r1]
				SPI_LEVERS_TX[offset+27] = 13;
    300c:	f104 001b 	add.w	r0, r4, #27
    3010:	210d      	movs	r1, #13
    3012:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+28] = 13;
    3014:	f104 001c 	add.w	r0, r4, #28
    3018:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+29] = 13;
    301a:	f104 001d 	add.w	r0, r4, #29
    301e:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3020:	4941      	ldr	r1, [pc, #260]	; (3128 <_Min_Heap_Size+0x128>)
    3022:	8809      	ldrh	r1, [r1, #0]
    3024:	b289      	uxth	r1, r1
    3026:	f104 001e 	add.w	r0, r4, #30
    302a:	3900      	subs	r1, #0
    302c:	bf18      	it	ne
    302e:	2101      	movne	r1, #1
    3030:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+31] = 254;
    3032:	341f      	adds	r4, #31
    3034:	21fe      	movs	r1, #254	; 0xfe
    3036:	5519      	strb	r1, [r3, r4]
				whichMacroToSendName = (whichMacroToSendName + 1);
    3038:	3201      	adds	r2, #1
    303a:	b2d2      	uxtb	r2, r2
    303c:	703a      	strb	r2, [r7, #0]
				if (whichMacroToSendName >= 20)
    303e:	2a13      	cmp	r2, #19
    3040:	f67f ae0a 	bls.w	2c58 <handleSPI+0x58>
					whichMacroToSendName = 0;
    3044:	2200      	movs	r2, #0
    3046:	703a      	strb	r2, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3048:	4933      	ldr	r1, [pc, #204]	; (3118 <_Min_Heap_Size+0x118>)
    304a:	780b      	ldrb	r3, [r1, #0]
    304c:	3301      	adds	r3, #1
    304e:	1ad2      	subs	r2, r2, r3
    3050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3054:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3058:	bf58      	it	pl
    305a:	4253      	negpl	r3, r2
    305c:	b2db      	uxtb	r3, r3
    305e:	700b      	strb	r3, [r1, #0]
}
    3060:	e5fa      	b.n	2c58 <handleSPI+0x58>
    3062:	2bfd      	cmp	r3, #253	; 0xfd
    3064:	f47f aed8 	bne.w	2e18 <handleSPI+0x218>
			if(writingState == ReceivingPreset)
    3068:	4b30      	ldr	r3, [pc, #192]	; (312c <_Min_Heap_Size+0x12c>)
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	b2db      	uxtb	r3, r3
    306e:	2b02      	cmp	r3, #2
    3070:	f47f aed2 	bne.w	2e18 <handleSPI+0x218>
				 writingState = 0;
    3074:	4b2d      	ldr	r3, [pc, #180]	; (312c <_Min_Heap_Size+0x12c>)
    3076:	2200      	movs	r2, #0
    3078:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    307a:	4b2d      	ldr	r3, [pc, #180]	; (3130 <_Min_Heap_Size+0x130>)
    307c:	781b      	ldrb	r3, [r3, #0]
    307e:	b2db      	uxtb	r3, r3
    3080:	4a2c      	ldr	r2, [pc, #176]	; (3134 <_Min_Heap_Size+0x134>)
    3082:	7013      	strb	r3, [r2, #0]
				 presetWaitingToParse = bufferPos;
    3084:	4a2c      	ldr	r2, [pc, #176]	; (3138 <_Min_Heap_Size+0x138>)
    3086:	8813      	ldrh	r3, [r2, #0]
    3088:	b29b      	uxth	r3, r3
    308a:	492c      	ldr	r1, [pc, #176]	; (313c <_Min_Heap_Size+0x13c>)
    308c:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    308e:	8813      	ldrh	r3, [r2, #0]
    3090:	b29b      	uxth	r3, r3
    3092:	4a2b      	ldr	r2, [pc, #172]	; (3140 <_Min_Heap_Size+0x140>)
    3094:	6013      	str	r3, [r2, #0]
    3096:	e6bf      	b.n	2e18 <handleSPI+0x218>
			 if (writingState != ReceivingPreset)
    3098:	4b24      	ldr	r3, [pc, #144]	; (312c <_Min_Heap_Size+0x12c>)
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	b2db      	uxtb	r3, r3
    309e:	2b02      	cmp	r3, #2
    30a0:	d017      	beq.n	30d2 <_Min_Heap_Size+0xd2>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    30a2:	4b22      	ldr	r3, [pc, #136]	; (312c <_Min_Heap_Size+0x12c>)
    30a4:	2202      	movs	r2, #2
    30a6:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    30a8:	2300      	movs	r3, #0
    30aa:	e007      	b.n	30bc <_Min_Heap_Size+0xbc>
						audioOutBuffer[i] = 0;
    30ac:	4a25      	ldr	r2, [pc, #148]	; (3144 <_Min_Heap_Size+0x144>)
    30ae:	2100      	movs	r1, #0
    30b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						audioOutBuffer[i + 1] = 0;
    30b4:	1c58      	adds	r0, r3, #1
    30b6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    30ba:	3302      	adds	r3, #2
    30bc:	2bff      	cmp	r3, #255	; 0xff
    30be:	ddf5      	ble.n	30ac <_Min_Heap_Size+0xac>
				 diskBusy = 1;
    30c0:	4b21      	ldr	r3, [pc, #132]	; (3148 <_Min_Heap_Size+0x148>)
    30c2:	2201      	movs	r2, #1
    30c4:	701a      	strb	r2, [r3, #0]
				 audioMasterLevel = 0.0f;
    30c6:	4b21      	ldr	r3, [pc, #132]	; (314c <_Min_Heap_Size+0x14c>)
    30c8:	2200      	movs	r2, #0
    30ca:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    30cc:	4b1a      	ldr	r3, [pc, #104]	; (3138 <_Min_Heap_Size+0x138>)
    30ce:	2200      	movs	r2, #0
    30d0:	801a      	strh	r2, [r3, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    30d2:	1c62      	adds	r2, r4, #1
    30d4:	4b0f      	ldr	r3, [pc, #60]	; (3114 <_Min_Heap_Size+0x114>)
    30d6:	4413      	add	r3, r2
    30d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    30dc:	4b14      	ldr	r3, [pc, #80]	; (3130 <_Min_Heap_Size+0x130>)
    30de:	701a      	strb	r2, [r3, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    30e0:	1ca6      	adds	r6, r4, #2
    30e2:	b2f6      	uxtb	r6, r6
			 for (int i = 0; i < 28; i++)
    30e4:	2200      	movs	r2, #0
    30e6:	e00d      	b.n	3104 <_Min_Heap_Size+0x104>
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    30e8:	18b5      	adds	r5, r6, r2
    30ea:	4813      	ldr	r0, [pc, #76]	; (3138 <_Min_Heap_Size+0x138>)
    30ec:	8803      	ldrh	r3, [r0, #0]
    30ee:	b29b      	uxth	r3, r3
    30f0:	1c59      	adds	r1, r3, #1
    30f2:	b289      	uxth	r1, r1
    30f4:	8001      	strh	r1, [r0, #0]
    30f6:	4907      	ldr	r1, [pc, #28]	; (3114 <_Min_Heap_Size+0x114>)
    30f8:	4429      	add	r1, r5
    30fa:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    30fe:	4914      	ldr	r1, [pc, #80]	; (3150 <_Min_Heap_Size+0x150>)
    3100:	54c8      	strb	r0, [r1, r3]
			 for (int i = 0; i < 28; i++)
    3102:	3201      	adds	r2, #1
    3104:	2a1b      	cmp	r2, #27
    3106:	ddef      	ble.n	30e8 <_Min_Heap_Size+0xe8>
    3108:	e686      	b.n	2e18 <handleSPI+0x218>
    310a:	bf00      	nop
    310c:	20014268 	.word	0x20014268
    3110:	200142fd 	.word	0x200142fd
    3114:	30000800 	.word	0x30000800
    3118:	2001c942 	.word	0x2001c942
    311c:	30042000 	.word	0x30042000
    3120:	2001c940 	.word	0x2001c940
    3124:	30043380 	.word	0x30043380
    3128:	2000577a 	.word	0x2000577a
    312c:	2001c943 	.word	0x2001c943
    3130:	2001a33b 	.word	0x2001a33b
    3134:	2001a33a 	.word	0x2001a33a
    3138:	20014314 	.word	0x20014314
    313c:	2001a340 	.word	0x2001a340
    3140:	2001a344 	.word	0x2001a344
    3144:	30000000 	.word	0x30000000
    3148:	20014358 	.word	0x20014358
    314c:	200006a8 	.word	0x200006a8
    3150:	30042380 	.word	0x30042380
			uint8_t currentByte = offset+1;
    3154:	1c47      	adds	r7, r0, #1
    3156:	b2ff      	uxtb	r7, r7
			for (int i = 0; i < 8; i++)
    3158:	2500      	movs	r5, #0
    315a:	e006      	b.n	316a <_Min_Heap_Size+0x16a>
						knobFrozen[i] = 0;
    315c:	4ba6      	ldr	r3, [pc, #664]	; (33f8 <_Min_Heap_Size+0x3f8>)
    315e:	2200      	movs	r2, #0
    3160:	555a      	strb	r2, [r3, r5]
						prevKnobByte[i] = newByte;
    3162:	4ba6      	ldr	r3, [pc, #664]	; (33fc <_Min_Heap_Size+0x3fc>)
    3164:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
			for (int i = 0; i < 8; i++)
    3168:	3501      	adds	r5, #1
    316a:	2d07      	cmp	r5, #7
    316c:	dc25      	bgt.n	31ba <_Min_Heap_Size+0x1ba>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    316e:	197a      	adds	r2, r7, r5
    3170:	4ba3      	ldr	r3, [pc, #652]	; (3400 <_Min_Heap_Size+0x400>)
    3172:	4413      	add	r3, r2
    3174:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				if (knobFrozen[i])
    3178:	4b9f      	ldr	r3, [pc, #636]	; (33f8 <_Min_Heap_Size+0x3f8>)
    317a:	5d5b      	ldrb	r3, [r3, r5]
    317c:	b163      	cbz	r3, 3198 <_Min_Heap_Size+0x198>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    317e:	4b9f      	ldr	r3, [pc, #636]	; (33fc <_Min_Heap_Size+0x3fc>)
    3180:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3184:	3303      	adds	r3, #3
    3186:	42b3      	cmp	r3, r6
    3188:	dbe8      	blt.n	315c <_Min_Heap_Size+0x15c>
    318a:	4b9c      	ldr	r3, [pc, #624]	; (33fc <_Min_Heap_Size+0x3fc>)
    318c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3190:	3b03      	subs	r3, #3
    3192:	42b3      	cmp	r3, r6
    3194:	dde8      	ble.n	3168 <_Min_Heap_Size+0x168>
    3196:	e7e1      	b.n	315c <_Min_Heap_Size+0x15c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3198:	ee07 6a90 	vmov	s15, r6
    319c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    31a0:	eddf 7a98 	vldr	s15, [pc, #608]	; 3404 <_Min_Heap_Size+0x404>
    31a4:	ee20 0a27 	vmul.f32	s0, s0, s15
    31a8:	4897      	ldr	r0, [pc, #604]	; (3408 <_Min_Heap_Size+0x408>)
    31aa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    31ae:	f006 fa3f 	bl	9630 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    31b2:	4b92      	ldr	r3, [pc, #584]	; (33fc <_Min_Heap_Size+0x3fc>)
    31b4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    31b8:	e7d6      	b.n	3168 <_Min_Heap_Size+0x168>
			for (int i = 8; i < 12; i++)
    31ba:	2508      	movs	r5, #8
    31bc:	e006      	b.n	31cc <_Min_Heap_Size+0x1cc>
						knobFrozen[i] = 0;
    31be:	4b8e      	ldr	r3, [pc, #568]	; (33f8 <_Min_Heap_Size+0x3f8>)
    31c0:	2200      	movs	r2, #0
    31c2:	555a      	strb	r2, [r3, r5]
						prevKnobByte[i] = newByte;
    31c4:	4b8d      	ldr	r3, [pc, #564]	; (33fc <_Min_Heap_Size+0x3fc>)
    31c6:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
			for (int i = 8; i < 12; i++)
    31ca:	3501      	adds	r5, #1
    31cc:	2d0b      	cmp	r5, #11
    31ce:	dc25      	bgt.n	321c <_Min_Heap_Size+0x21c>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    31d0:	197a      	adds	r2, r7, r5
    31d2:	4b8b      	ldr	r3, [pc, #556]	; (3400 <_Min_Heap_Size+0x400>)
    31d4:	4413      	add	r3, r2
    31d6:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				if (knobFrozen[i])
    31da:	4b87      	ldr	r3, [pc, #540]	; (33f8 <_Min_Heap_Size+0x3f8>)
    31dc:	5d5b      	ldrb	r3, [r3, r5]
    31de:	b163      	cbz	r3, 31fa <_Min_Heap_Size+0x1fa>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    31e0:	4b86      	ldr	r3, [pc, #536]	; (33fc <_Min_Heap_Size+0x3fc>)
    31e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    31e6:	3303      	adds	r3, #3
    31e8:	42b3      	cmp	r3, r6
    31ea:	dbe8      	blt.n	31be <_Min_Heap_Size+0x1be>
    31ec:	4b83      	ldr	r3, [pc, #524]	; (33fc <_Min_Heap_Size+0x3fc>)
    31ee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    31f2:	3b03      	subs	r3, #3
    31f4:	42b3      	cmp	r3, r6
    31f6:	dde8      	ble.n	31ca <_Min_Heap_Size+0x1ca>
    31f8:	e7e1      	b.n	31be <_Min_Heap_Size+0x1be>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    31fa:	ee07 6a90 	vmov	s15, r6
    31fe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3202:	eddf 7a80 	vldr	s15, [pc, #512]	; 3404 <_Min_Heap_Size+0x404>
    3206:	ee20 0a27 	vmul.f32	s0, s0, s15
    320a:	487f      	ldr	r0, [pc, #508]	; (3408 <_Min_Heap_Size+0x408>)
    320c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3210:	f006 fa0e 	bl	9630 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3214:	4b79      	ldr	r3, [pc, #484]	; (33fc <_Min_Heap_Size+0x3fc>)
    3216:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    321a:	e7d6      	b.n	31ca <_Min_Heap_Size+0x1ca>
			currentByte += 12;
    321c:	f104 060d 	add.w	r6, r4, #13
    3220:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    3222:	2500      	movs	r5, #0
    3224:	e012      	b.n	324c <_Min_Heap_Size+0x24c>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3226:	1972      	adds	r2, r6, r5
    3228:	4b75      	ldr	r3, [pc, #468]	; (3400 <_Min_Heap_Size+0x400>)
    322a:	4413      	add	r3, r2
    322c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3230:	ee07 3a90 	vmov	s15, r3
    3234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3238:	ed9f 0a72 	vldr	s0, [pc, #456]	; 3404 <_Min_Heap_Size+0x404>
    323c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3240:	4872      	ldr	r0, [pc, #456]	; (340c <_Min_Heap_Size+0x40c>)
    3242:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3246:	f006 f9f3 	bl	9630 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    324a:	3501      	adds	r5, #1
    324c:	2d09      	cmp	r5, #9
    324e:	ddea      	ble.n	3226 <_Min_Heap_Size+0x226>
			whichBar = 1;
    3250:	4b6f      	ldr	r3, [pc, #444]	; (3410 <_Min_Heap_Size+0x410>)
    3252:	2201      	movs	r2, #1
    3254:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    3256:	4620      	mov	r0, r4
    3258:	f7fe f912 	bl	1480 <updateStateFromSPIMessage>
    325c:	e5dc      	b.n	2e18 <handleSPI+0x218>
			 uint8_t currentByte = offset+1;
    325e:	f100 0801 	add.w	r8, r0, #1
    3262:	fa5f f888 	uxtb.w	r8, r8
			for (int i = 0; i < 8; i++)
    3266:	2500      	movs	r5, #0
    3268:	e006      	b.n	3278 <_Min_Heap_Size+0x278>
						knobFrozen[whichKnob] = 0;
    326a:	4b63      	ldr	r3, [pc, #396]	; (33f8 <_Min_Heap_Size+0x3f8>)
    326c:	2200      	movs	r2, #0
    326e:	559a      	strb	r2, [r3, r6]
						prevKnobByte[whichKnob] = newByte;
    3270:	4b62      	ldr	r3, [pc, #392]	; (33fc <_Min_Heap_Size+0x3fc>)
    3272:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
			for (int i = 0; i < 8; i++)
    3276:	3501      	adds	r5, #1
    3278:	2d07      	cmp	r5, #7
    327a:	dc28      	bgt.n	32ce <_Min_Heap_Size+0x2ce>
				uint32_t whichKnob = i+12;
    327c:	f105 060c 	add.w	r6, r5, #12
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3280:	eb08 0205 	add.w	r2, r8, r5
    3284:	4b5e      	ldr	r3, [pc, #376]	; (3400 <_Min_Heap_Size+0x400>)
    3286:	4413      	add	r3, r2
    3288:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
				if (knobFrozen[whichKnob])
    328c:	4b5a      	ldr	r3, [pc, #360]	; (33f8 <_Min_Heap_Size+0x3f8>)
    328e:	5d9b      	ldrb	r3, [r3, r6]
    3290:	b163      	cbz	r3, 32ac <_Min_Heap_Size+0x2ac>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3292:	4b5a      	ldr	r3, [pc, #360]	; (33fc <_Min_Heap_Size+0x3fc>)
    3294:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    3298:	3303      	adds	r3, #3
    329a:	42bb      	cmp	r3, r7
    329c:	dbe5      	blt.n	326a <_Min_Heap_Size+0x26a>
    329e:	4b57      	ldr	r3, [pc, #348]	; (33fc <_Min_Heap_Size+0x3fc>)
    32a0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    32a4:	3b03      	subs	r3, #3
    32a6:	42bb      	cmp	r3, r7
    32a8:	dde5      	ble.n	3276 <_Min_Heap_Size+0x276>
    32aa:	e7de      	b.n	326a <_Min_Heap_Size+0x26a>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    32ac:	ee07 7a90 	vmov	s15, r7
    32b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    32b4:	eddf 7a53 	vldr	s15, [pc, #332]	; 3404 <_Min_Heap_Size+0x404>
    32b8:	ee20 0a27 	vmul.f32	s0, s0, s15
    32bc:	4852      	ldr	r0, [pc, #328]	; (3408 <_Min_Heap_Size+0x408>)
    32be:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    32c2:	f006 f9b5 	bl	9630 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    32c6:	4b4d      	ldr	r3, [pc, #308]	; (33fc <_Min_Heap_Size+0x3fc>)
    32c8:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    32cc:	e7d3      	b.n	3276 <_Min_Heap_Size+0x276>
			for (int i = 8; i < 12; i++)
    32ce:	2508      	movs	r5, #8
    32d0:	e006      	b.n	32e0 <_Min_Heap_Size+0x2e0>
						knobFrozen[whichKnob] = 0;
    32d2:	4b49      	ldr	r3, [pc, #292]	; (33f8 <_Min_Heap_Size+0x3f8>)
    32d4:	2100      	movs	r1, #0
    32d6:	5499      	strb	r1, [r3, r2]
						prevKnobByte[whichKnob] = newByte;
    32d8:	4b48      	ldr	r3, [pc, #288]	; (33fc <_Min_Heap_Size+0x3fc>)
    32da:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
			for (int i = 8; i < 12; i++)
    32de:	3501      	adds	r5, #1
    32e0:	2d0b      	cmp	r5, #11
    32e2:	dc27      	bgt.n	3334 <_Min_Heap_Size+0x334>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    32e4:	eb08 0205 	add.w	r2, r8, r5
    32e8:	4b45      	ldr	r3, [pc, #276]	; (3400 <_Min_Heap_Size+0x400>)
    32ea:	4413      	add	r3, r2
    32ec:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				uint32_t whichKnob = i;
    32f0:	462a      	mov	r2, r5
				if (knobFrozen[whichKnob])
    32f2:	4b41      	ldr	r3, [pc, #260]	; (33f8 <_Min_Heap_Size+0x3f8>)
    32f4:	5d5b      	ldrb	r3, [r3, r5]
    32f6:	b163      	cbz	r3, 3312 <_Min_Heap_Size+0x312>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    32f8:	4b40      	ldr	r3, [pc, #256]	; (33fc <_Min_Heap_Size+0x3fc>)
    32fa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    32fe:	3303      	adds	r3, #3
    3300:	42b3      	cmp	r3, r6
    3302:	dbe6      	blt.n	32d2 <_Min_Heap_Size+0x2d2>
    3304:	4b3d      	ldr	r3, [pc, #244]	; (33fc <_Min_Heap_Size+0x3fc>)
    3306:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    330a:	3b03      	subs	r3, #3
    330c:	42b3      	cmp	r3, r6
    330e:	dde6      	ble.n	32de <_Min_Heap_Size+0x2de>
    3310:	e7df      	b.n	32d2 <_Min_Heap_Size+0x2d2>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3312:	ee07 6a90 	vmov	s15, r6
    3316:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    331a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 3404 <_Min_Heap_Size+0x404>
    331e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3322:	4839      	ldr	r0, [pc, #228]	; (3408 <_Min_Heap_Size+0x408>)
    3324:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3328:	f006 f982 	bl	9630 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    332c:	4b33      	ldr	r3, [pc, #204]	; (33fc <_Min_Heap_Size+0x3fc>)
    332e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    3332:	e7d4      	b.n	32de <_Min_Heap_Size+0x2de>
			currentByte += 12;
    3334:	f104 060d 	add.w	r6, r4, #13
    3338:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    333a:	2500      	movs	r5, #0
    333c:	e012      	b.n	3364 <_Min_Heap_Size+0x364>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    333e:	1972      	adds	r2, r6, r5
    3340:	4b2f      	ldr	r3, [pc, #188]	; (3400 <_Min_Heap_Size+0x400>)
    3342:	4413      	add	r3, r2
    3344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3348:	ee07 3a90 	vmov	s15, r3
    334c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3350:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 3404 <_Min_Heap_Size+0x404>
    3354:	ee27 0a80 	vmul.f32	s0, s15, s0
    3358:	482c      	ldr	r0, [pc, #176]	; (340c <_Min_Heap_Size+0x40c>)
    335a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    335e:	f006 f967 	bl	9630 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    3362:	3501      	adds	r5, #1
    3364:	2d09      	cmp	r5, #9
    3366:	ddea      	ble.n	333e <_Min_Heap_Size+0x33e>
			whichBar = 1;
    3368:	4b29      	ldr	r3, [pc, #164]	; (3410 <_Min_Heap_Size+0x410>)
    336a:	2201      	movs	r2, #1
    336c:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    336e:	4620      	mov	r0, r4
    3370:	f7fe f886 	bl	1480 <updateStateFromSPIMessage>
    3374:	e550      	b.n	2e18 <handleSPI+0x218>
			if (presetReady)
    3376:	4b27      	ldr	r3, [pc, #156]	; (3414 <_Min_Heap_Size+0x414>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	2b00      	cmp	r3, #0
    337c:	f43f ad4c 	beq.w	2e18 <handleSPI+0x218>
				uint8_t currentByte = offset+1;
    3380:	1c43      	adds	r3, r0, #1
    3382:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3384:	4a1e      	ldr	r2, [pc, #120]	; (3400 <_Min_Heap_Size+0x400>)
    3386:	18d1      	adds	r1, r2, r3
    3388:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    338c:	3301      	adds	r3, #1
    338e:	441a      	add	r2, r3
    3390:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
    3394:	eb05 2501 	add.w	r5, r5, r1, lsl #8
    3398:	b2ad      	uxth	r5, r5
				currentByte = currentByte + 2;
    339a:	3003      	adds	r0, #3
    339c:	b2c0      	uxtb	r0, r0
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    339e:	2200      	movs	r2, #0
    33a0:	e01a      	b.n	33d8 <_Min_Heap_Size+0x3d8>
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    33a2:	4b17      	ldr	r3, [pc, #92]	; (3400 <_Min_Heap_Size+0x400>)
    33a4:	1819      	adds	r1, r3, r0
    33a6:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    33aa:	1c46      	adds	r6, r0, #1
    33ac:	4433      	add	r3, r6
    33ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    33b2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    33b6:	ee07 3a90 	vmov	s15, r3
    33ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33be:	ed9f 7a16 	vldr	s14, [pc, #88]	; 3418 <_Min_Heap_Size+0x418>
    33c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    33c6:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    33ca:	4411      	add	r1, r2
    33cc:	4b13      	ldr	r3, [pc, #76]	; (341c <_Min_Heap_Size+0x41c>)
    33ce:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    33d2:	edc3 7a00 	vstr	s15, [r3]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    33d6:	3201      	adds	r2, #1
    33d8:	2a01      	cmp	r2, #1
    33da:	dde2      	ble.n	33a2 <_Min_Heap_Size+0x3a2>
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    33dc:	f1a5 033f 	sub.w	r3, r5, #63	; 0x3f
    33e0:	b29b      	uxth	r3, r3
    33e2:	2b18      	cmp	r3, #24
    33e4:	d806      	bhi.n	33f4 <_Min_Heap_Size+0x3f4>
    33e6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
    33ea:	fa22 f303 	lsr.w	r3, r2, r3
    33ee:	f013 0f01 	tst.w	r3, #1
    33f2:	d115      	bne.n	3420 <_Min_Heap_Size+0x420>
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    33f4:	2700      	movs	r7, #0
    33f6:	e06f      	b.n	34d8 <_Min_Heap_Size+0x4d8>
    33f8:	200051dc 	.word	0x200051dc
    33fc:	2001a348 	.word	0x2001a348
    3400:	30000800 	.word	0x30000800
    3404:	3b808081 	.word	0x3b808081
    3408:	20005240 	.word	0x20005240
    340c:	2000532c 	.word	0x2000532c
    3410:	20014268 	.word	0x20014268
    3414:	20005354 	.word	0x20005354
    3418:	377ffff6 	.word	0x377ffff6
    341c:	200191e8 	.word	0x200191e8
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    3420:	f1b5 033f 	subs.w	r3, r5, #63	; 0x3f
    3424:	d43a      	bmi.n	349c <_Min_Heap_Size+0x49c>
    3426:	10db      	asrs	r3, r3, #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3428:	4fbc      	ldr	r7, [pc, #752]	; (371c <_Min_Heap_Size+0x71c>)
    342a:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    342e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3432:	edd2 7a00 	vldr	s15, [r2]
    3436:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    343a:	ee67 7a87 	vmul.f32	s15, s15, s14
    343e:	fef8 7a67 	vrinta.f32	s15, s15
    3442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3446:	edcd 7a01 	vstr	s15, [sp, #4]
    344a:	f89d 0004 	ldrb.w	r0, [sp, #4]
					param *FXAlias = &params[whichParam + 1];
    344e:	f105 0801 	add.w	r8, r5, #1
    3452:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    3456:	eb07 0782 	add.w	r7, r7, r2, lsl #2
					if (effectType > FXLowpass)
    345a:	280d      	cmp	r0, #13
    345c:	d901      	bls.n	3462 <_Min_Heap_Size+0x462>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    345e:	4ab0      	ldr	r2, [pc, #704]	; (3720 <_Min_Heap_Size+0x720>)
    3460:	64ba      	str	r2, [r7, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    3462:	b2de      	uxtb	r6, r3
    3464:	4631      	mov	r1, r6
    3466:	f006 fb03 	bl	9a70 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    346a:	4aae      	ldr	r2, [pc, #696]	; (3724 <_Min_Heap_Size+0x724>)
    346c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    3470:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    3474:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
    3478:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    347c:	48a7      	ldr	r0, [pc, #668]	; (371c <_Min_Heap_Size+0x71c>)
    347e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3482:	f8c3 c014 	str.w	ip, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    3486:	684b      	ldr	r3, [r1, #4]
    3488:	633b      	str	r3, [r7, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    348a:	688b      	ldr	r3, [r1, #8]
    348c:	64fb      	str	r3, [r7, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    348e:	68cb      	ldr	r3, [r1, #12]
    3490:	66bb      	str	r3, [r7, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    3492:	460a      	mov	r2, r1
    3494:	690b      	ldr	r3, [r1, #16]
    3496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    349a:	e7ab      	b.n	33f4 <_Min_Heap_Size+0x3f4>
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    349c:	3307      	adds	r3, #7
    349e:	e7c2      	b.n	3426 <_Min_Heap_Size+0x426>
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    34a0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 371c <_Min_Heap_Size+0x71c>
    34a4:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
    34a8:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    34ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
    34b0:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
    34b4:	443e      	add	r6, r7
    34b6:	eb09 0286 	add.w	r2, r9, r6, lsl #2
    34ba:	ed92 0a00 	vldr	s0, [r2]
    34be:	4798      	blx	r3
    34c0:	3602      	adds	r6, #2
    34c2:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    34c6:	ed89 0a00 	vstr	s0, [r9]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    34ca:	f8d8 3014 	ldr.w	r3, [r8, #20]
    34ce:	4639      	mov	r1, r7
    34d0:	f898 0018 	ldrb.w	r0, [r8, #24]
    34d4:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    34d6:	3701      	adds	r7, #1
    34d8:	2f01      	cmp	r7, #1
    34da:	dde1      	ble.n	34a0 <_Min_Heap_Size+0x4a0>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    34dc:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    34e0:	b29b      	uxth	r3, r3
    34e2:	2b1a      	cmp	r3, #26
    34e4:	d805      	bhi.n	34f2 <_Min_Heap_Size+0x4f2>
    34e6:	4a90      	ldr	r2, [pc, #576]	; (3728 <_Min_Heap_Size+0x728>)
    34e8:	fa22 f303 	lsr.w	r3, r2, r3
    34ec:	f013 0f01 	tst.w	r3, #1
    34f0:	d124      	bne.n	353c <_Min_Heap_Size+0x53c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    34f2:	2d25      	cmp	r5, #37	; 0x25
    34f4:	bf18      	it	ne
    34f6:	2d18      	cmpne	r5, #24
    34f8:	d001      	beq.n	34fe <_Min_Heap_Size+0x4fe>
    34fa:	2d32      	cmp	r5, #50	; 0x32
    34fc:	d14c      	bne.n	3598 <_Min_Heap_Size+0x598>
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    34fe:	f1a5 0318 	sub.w	r3, r5, #24
    3502:	4a8a      	ldr	r2, [pc, #552]	; (372c <_Min_Heap_Size+0x72c>)
    3504:	fb82 1203 	smull	r1, r2, r2, r3
    3508:	17db      	asrs	r3, r3, #31
    350a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    350e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    3512:	4a82      	ldr	r2, [pc, #520]	; (371c <_Min_Heap_Size+0x71c>)
    3514:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3518:	ed92 7a02 	vldr	s14, [r2, #8]
    351c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3520:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3528:	dd24      	ble.n	3574 <_Min_Heap_Size+0x574>
						oscsEnabled[whichOsc] = 1;
    352a:	2201      	movs	r2, #1
    352c:	4980      	ldr	r1, [pc, #512]	; (3730 <_Min_Heap_Size+0x730>)
    352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						oscOn[whichOsc] = 1;
    3532:	4980      	ldr	r1, [pc, #512]	; (3734 <_Min_Heap_Size+0x734>)
    3534:	54ca      	strb	r2, [r1, r3]
					for (int j = 0; j < 3; j++)
    3536:	2300      	movs	r3, #0
					int enabledCount = 0;
    3538:	461a      	mov	r2, r3
					for (int j = 0; j < 3; j++)
    353a:	e025      	b.n	3588 <_Min_Heap_Size+0x588>
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    353c:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    3540:	497a      	ldr	r1, [pc, #488]	; (372c <_Min_Heap_Size+0x72c>)
    3542:	fb81 2103 	smull	r2, r1, r1, r3
    3546:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    3548:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    354c:	4a73      	ldr	r2, [pc, #460]	; (371c <_Min_Heap_Size+0x71c>)
    354e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3552:	edd2 7a02 	vldr	s15, [r2, #8]
    3556:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    355a:	ee67 7a87 	vmul.f32	s15, s15, s14
    355e:	fef8 7a67 	vrinta.f32	s15, s15
					setOscilllatorShapes(oscshape, whichOsc);
    3562:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
    3566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    356a:	ee17 0a90 	vmov	r0, s15
    356e:	f006 f9ff 	bl	9970 <__setOscilllatorShapes_veneer>
    3572:	e7be      	b.n	34f2 <_Min_Heap_Size+0x4f2>
						oscsEnabled[whichOsc] = 0;
    3574:	4a6e      	ldr	r2, [pc, #440]	; (3730 <_Min_Heap_Size+0x730>)
    3576:	2100      	movs	r1, #0
    3578:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    357c:	e7db      	b.n	3536 <_Min_Heap_Size+0x536>
						enabledCount += oscsEnabled[j];
    357e:	496c      	ldr	r1, [pc, #432]	; (3730 <_Min_Heap_Size+0x730>)
    3580:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    3584:	440a      	add	r2, r1
					for (int j = 0; j < 3; j++)
    3586:	3301      	adds	r3, #1
    3588:	2b02      	cmp	r3, #2
    358a:	ddf8      	ble.n	357e <_Min_Heap_Size+0x57e>
					oscAmpMult = oscAmpMultArray[enabledCount];
    358c:	4b6a      	ldr	r3, [pc, #424]	; (3738 <_Min_Heap_Size+0x738>)
    358e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3592:	681a      	ldr	r2, [r3, #0]
    3594:	4b69      	ldr	r3, [pc, #420]	; (373c <_Min_Heap_Size+0x73c>)
    3596:	601a      	str	r2, [r3, #0]
				if ((whichParam == Noise))
    3598:	2d12      	cmp	r5, #18
    359a:	d053      	beq.n	3644 <_Min_Heap_Size+0x644>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    359c:	2d66      	cmp	r5, #102	; 0x66
    359e:	bf18      	it	ne
    35a0:	2d60      	cmpne	r5, #96	; 0x60
    35a2:	d061      	beq.n	3668 <_Min_Heap_Size+0x668>
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    35a4:	2d8c      	cmp	r5, #140	; 0x8c
    35a6:	bf18      	it	ne
    35a8:	2d87      	cmpne	r5, #135	; 0x87
    35aa:	d008      	beq.n	35be <_Min_Heap_Size+0x5be>
    35ac:	2d96      	cmp	r5, #150	; 0x96
    35ae:	bf14      	ite	ne
    35b0:	2300      	movne	r3, #0
    35b2:	2301      	moveq	r3, #1
    35b4:	2d91      	cmp	r5, #145	; 0x91
    35b6:	d002      	beq.n	35be <_Min_Heap_Size+0x5be>
    35b8:	2b00      	cmp	r3, #0
    35ba:	f000 8100 	beq.w	37be <_Min_Heap_Size+0x7be>
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    35be:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
    35c2:	4a5f      	ldr	r2, [pc, #380]	; (3740 <_Min_Heap_Size+0x740>)
    35c4:	fb82 1203 	smull	r1, r2, r2, r3
    35c8:	17db      	asrs	r3, r3, #31
    35ca:	ebc3 0662 	rsb	r6, r3, r2, asr #1
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    35ce:	f8df a14c 	ldr.w	sl, [pc, #332]	; 371c <_Min_Heap_Size+0x71c>
    35d2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    35d6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    35da:	edd3 7a02 	vldr	s15, [r3, #8]
    35de:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    35e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    35e6:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    35ea:	4631      	mov	r1, r6
    35ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    35f0:	ee17 0a90 	vmov	r0, s15
    35f4:	f006 f9dc 	bl	99b0 <__setLFOShapes_veneer>
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    35f8:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    35fc:	f107 0984 	add.w	r9, r7, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    3600:	f107 0885 	add.w	r8, r7, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    3604:	3786      	adds	r7, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3606:	4b4f      	ldr	r3, [pc, #316]	; (3744 <_Min_Heap_Size+0x744>)
    3608:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    360c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3610:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3614:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    3618:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    361c:	6150      	str	r0, [r2, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    361e:	6849      	ldr	r1, [r1, #4]
    3620:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    3624:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    3628:	6151      	str	r1, [r2, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    362a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    362e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    3632:	689b      	ldr	r3, [r3, #8]
    3634:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    3638:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
    363c:	f8ca 3014 	str.w	r3, [sl, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3640:	2600      	movs	r6, #0
    3642:	e0ba      	b.n	37ba <_Min_Heap_Size+0x7ba>
					if (params[whichParam].realVal[0]  > 0.5f)
    3644:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    3648:	4b34      	ldr	r3, [pc, #208]	; (371c <_Min_Heap_Size+0x71c>)
    364a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    364e:	ed93 7a02 	vldr	s14, [r3, #8]
    3652:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3656:	eeb4 7ae7 	vcmpe.f32	s14, s15
    365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    365e:	dd9d      	ble.n	359c <_Min_Heap_Size+0x59c>
						noiseOn = 1;
    3660:	4b39      	ldr	r3, [pc, #228]	; (3748 <_Min_Heap_Size+0x748>)
    3662:	2201      	movs	r2, #1
    3664:	701a      	strb	r2, [r3, #0]
    3666:	e799      	b.n	359c <_Min_Heap_Size+0x59c>
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    3668:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    366c:	4f37      	ldr	r7, [pc, #220]	; (374c <_Min_Heap_Size+0x74c>)
    366e:	fb87 2703 	smull	r2, r7, r7, r3
    3672:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    3676:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 371c <_Min_Heap_Size+0x71c>
    367a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    367e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3682:	edd3 7a02 	vldr	s15, [r3, #8]
    3686:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    368a:	ee67 7a87 	vmul.f32	s15, s15, s14
    368e:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    3692:	4639      	mov	r1, r7
    3694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3698:	ee17 0a90 	vmov	r0, s15
    369c:	f006 f84c 	bl	9738 <__setFilterTypes_veneer>
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    36a0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    36a4:	0076      	lsls	r6, r6, #1
    36a6:	f106 0863 	add.w	r8, r6, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    36aa:	3662      	adds	r6, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    36ac:	4b28      	ldr	r3, [pc, #160]	; (3750 <_Min_Heap_Size+0x750>)
    36ae:	f853 1037 	ldr.w	r1, [r3, r7, lsl #3]
    36b2:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    36b6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    36ba:	6151      	str	r1, [r2, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    36bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    36c0:	685a      	ldr	r2, [r3, #4]
    36c2:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    36c6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    36ca:	615a      	str	r2, [r3, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    36cc:	2700      	movs	r7, #0
    36ce:	e022      	b.n	3716 <_Min_Heap_Size+0x716>
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    36d0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 371c <_Min_Heap_Size+0x71c>
    36d4:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    36d8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    36dc:	6942      	ldr	r2, [r0, #20]
    36de:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    36e2:	443b      	add	r3, r7
    36e4:	3302      	adds	r3, #2
    36e6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    36ea:	4639      	mov	r1, r7
    36ec:	7e00      	ldrb	r0, [r0, #24]
    36ee:	ed93 0a00 	vldr	s0, [r3]
    36f2:	4790      	blx	r2
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    36f4:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    36f8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    36fc:	6942      	ldr	r2, [r0, #20]
    36fe:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3702:	443b      	add	r3, r7
    3704:	3302      	adds	r3, #2
    3706:	eb09 0983 	add.w	r9, r9, r3, lsl #2
    370a:	4639      	mov	r1, r7
    370c:	7e00      	ldrb	r0, [r0, #24]
    370e:	ed99 0a00 	vldr	s0, [r9]
    3712:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3714:	3701      	adds	r7, #1
    3716:	2f01      	cmp	r7, #1
    3718:	ddda      	ble.n	36d0 <_Min_Heap_Size+0x6d0>
    371a:	e743      	b.n	35a4 <_Min_Heap_Size+0x5a4>
    371c:	200191e8 	.word	0x200191e8
    3720:	00001701 	.word	0x00001701
    3724:	2001435c 	.word	0x2001435c
    3728:	04002001 	.word	0x04002001
    372c:	4ec4ec4f 	.word	0x4ec4ec4f
    3730:	200191dc 	.word	0x200191dc
    3734:	2001d4d4 	.word	0x2001d4d4
    3738:	200008dc 	.word	0x200008dc
    373c:	200008d8 	.word	0x200008d8
    3740:	66666667 	.word	0x66666667
    3744:	2001850c 	.word	0x2001850c
    3748:	2001d4b0 	.word	0x2001d4b0
    374c:	2aaaaaab 	.word	0x2aaaaaab
    3750:	200163b0 	.word	0x200163b0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    3754:	f8df a384 	ldr.w	sl, [pc, #900]	; 3adc <_Min_Heap_Size+0xadc>
    3758:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
    375c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    3760:	6942      	ldr	r2, [r0, #20]
    3762:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
    3766:	4433      	add	r3, r6
    3768:	3302      	adds	r3, #2
    376a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    376e:	4631      	mov	r1, r6
    3770:	7e00      	ldrb	r0, [r0, #24]
    3772:	ed93 0a00 	vldr	s0, [r3]
    3776:	4790      	blx	r2
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    3778:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    377c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    3780:	6942      	ldr	r2, [r0, #20]
    3782:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    3786:	4433      	add	r3, r6
    3788:	3302      	adds	r3, #2
    378a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    378e:	4631      	mov	r1, r6
    3790:	7e00      	ldrb	r0, [r0, #24]
    3792:	ed93 0a00 	vldr	s0, [r3]
    3796:	4790      	blx	r2
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    3798:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    379c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    37a0:	6942      	ldr	r2, [r0, #20]
    37a2:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    37a6:	4433      	add	r3, r6
    37a8:	3302      	adds	r3, #2
    37aa:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    37ae:	4631      	mov	r1, r6
    37b0:	7e00      	ldrb	r0, [r0, #24]
    37b2:	ed93 0a00 	vldr	s0, [r3]
    37b6:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    37b8:	3601      	adds	r6, #1
    37ba:	2e01      	cmp	r6, #1
    37bc:	ddca      	ble.n	3754 <_Min_Heap_Size+0x754>
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    37be:	2d01      	cmp	r5, #1
    37c0:	d916      	bls.n	37f0 <_Min_Heap_Size+0x7f0>
				if (whichParam == Transpose)
    37c2:	2d10      	cmp	r5, #16
    37c4:	d02c      	beq.n	3820 <_Min_Heap_Size+0x820>
				if (whichParam == FXOrder)
    37c6:	2d9a      	cmp	r5, #154	; 0x9a
    37c8:	d030      	beq.n	382c <_Min_Heap_Size+0x82c>
				if (whichParam == PedalControlsMaster)
    37ca:	2d9b      	cmp	r5, #155	; 0x9b
    37cc:	f47f ab24 	bne.w	2e18 <handleSPI+0x218>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    37d0:	4bc0      	ldr	r3, [pc, #768]	; (3ad4 <_Min_Heap_Size+0xad4>)
    37d2:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    37d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    37da:	eeb4 7ae7 	vcmpe.f32	s14, s15
    37de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    37e2:	bfcc      	ite	gt
    37e4:	2201      	movgt	r2, #1
    37e6:	2200      	movle	r2, #0
    37e8:	4bbb      	ldr	r3, [pc, #748]	; (3ad8 <_Min_Heap_Size+0xad8>)
    37ea:	701a      	strb	r2, [r3, #0]
    37ec:	f7ff bb14 	b.w	2e18 <handleSPI+0x218>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    37f0:	4bba      	ldr	r3, [pc, #744]	; (3adc <_Min_Heap_Size+0xadc>)
    37f2:	edd3 7a02 	vldr	s15, [r3, #8]
    37f6:	eddf 6aba 	vldr	s13, [pc, #744]	; 3ae0 <_Min_Heap_Size+0xae0>
    37fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
    37fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    3802:	ee27 7a26 	vmul.f32	s14, s14, s13
    3806:	ee77 7ac7 	vsub.f32	s15, s15, s14
    380a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    380e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    3812:	4bb4      	ldr	r3, [pc, #720]	; (3ae4 <_Min_Heap_Size+0xae4>)
    3814:	edc3 6a00 	vstr	s13, [r3]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3818:	4bb3      	ldr	r3, [pc, #716]	; (3ae8 <_Min_Heap_Size+0xae8>)
    381a:	ed83 7a00 	vstr	s14, [r3]
    381e:	e7d0      	b.n	37c2 <_Min_Heap_Size+0x7c2>
					masterTranspose = params[Transpose].realVal[0];
    3820:	4bae      	ldr	r3, [pc, #696]	; (3adc <_Min_Heap_Size+0xadc>)
    3822:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
    3826:	4bb1      	ldr	r3, [pc, #708]	; (3aec <_Min_Heap_Size+0xaec>)
    3828:	601a      	str	r2, [r3, #0]
    382a:	e7cc      	b.n	37c6 <_Min_Heap_Size+0x7c6>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    382c:	4ba9      	ldr	r3, [pc, #676]	; (3ad4 <_Min_Heap_Size+0xad4>)
    382e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    3832:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3836:	eeb4 7ae7 	vcmpe.f32	s14, s15
    383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    383e:	bfcc      	ite	gt
    3840:	2201      	movgt	r2, #1
    3842:	2200      	movle	r2, #0
    3844:	4baa      	ldr	r3, [pc, #680]	; (3af0 <_Min_Heap_Size+0xaf0>)
    3846:	701a      	strb	r2, [r3, #0]
    3848:	e7bf      	b.n	37ca <_Min_Heap_Size+0x7ca>
			if (presetReady)
    384a:	4baa      	ldr	r3, [pc, #680]	; (3af4 <_Min_Heap_Size+0xaf4>)
    384c:	681b      	ldr	r3, [r3, #0]
    384e:	2b00      	cmp	r3, #0
    3850:	f43f aae2 	beq.w	2e18 <handleSPI+0x218>
				uint8_t currentByte = offset+1;
    3854:	1c41      	adds	r1, r0, #1
    3856:	b2c9      	uxtb	r1, r1
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3858:	4ba7      	ldr	r3, [pc, #668]	; (3af8 <_Min_Heap_Size+0xaf8>)
    385a:	1858      	adds	r0, r3, r1
    385c:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
    3860:	1c48      	adds	r0, r1, #1
    3862:	4418      	add	r0, r3
    3864:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
    3868:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    386c:	b2ad      	uxth	r5, r5
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    386e:	1c88      	adds	r0, r1, #2
    3870:	4418      	add	r0, r3
    3872:	f890 c040 	ldrb.w	ip, [r0, #64]	; 0x40
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3876:	1cc8      	adds	r0, r1, #3
    3878:	4418      	add	r0, r3
    387a:	f890 e040 	ldrb.w	lr, [r0, #64]	; 0x40
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    387e:	1d08      	adds	r0, r1, #4
    3880:	4418      	add	r0, r3
    3882:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    3886:	3105      	adds	r1, #5
    3888:	440b      	add	r3, r1
    388a:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
    388e:	eb06 2600 	add.w	r6, r6, r0, lsl #8
    3892:	b236      	sxth	r6, r6
				uint8_t foundOne = 0;
    3894:	4690      	mov	r8, r2
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3896:	2300      	movs	r3, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3898:	2720      	movs	r7, #32
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    389a:	e004      	b.n	38a6 <_Min_Heap_Size+0x8a6>
						whichMapping = j;
    389c:	b2da      	uxtb	r2, r3
						foundOne = 1;
    389e:	f04f 0801 	mov.w	r8, #1
    38a2:	e00a      	b.n	38ba <_Min_Heap_Size+0x8ba>
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    38a4:	3301      	adds	r3, #1
    38a6:	2b1f      	cmp	r3, #31
    38a8:	dc0d      	bgt.n	38c6 <_Min_Heap_Size+0x8c6>
					if (mappings[j].destNumber == destNumber)
    38aa:	214c      	movs	r1, #76	; 0x4c
    38ac:	fb03 f101 	mul.w	r1, r3, r1
    38b0:	4892      	ldr	r0, [pc, #584]	; (3afc <_Min_Heap_Size+0xafc>)
    38b2:	5c41      	ldrb	r1, [r0, r1]
    38b4:	b288      	uxth	r0, r1
    38b6:	42a8      	cmp	r0, r5
    38b8:	d0f0      	beq.n	389c <_Min_Heap_Size+0x89c>
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    38ba:	29ff      	cmp	r1, #255	; 0xff
    38bc:	d1f2      	bne.n	38a4 <_Min_Heap_Size+0x8a4>
    38be:	429f      	cmp	r7, r3
    38c0:	ddf0      	ble.n	38a4 <_Min_Heap_Size+0x8a4>
						lowestEmptyMapping = j;
    38c2:	b2df      	uxtb	r7, r3
    38c4:	e7ee      	b.n	38a4 <_Min_Heap_Size+0x8a4>
				if (foundOne == 0)
    38c6:	f1b8 0f00 	cmp.w	r8, #0
    38ca:	d110      	bne.n	38ee <_Min_Heap_Size+0x8ee>
					numMappings++;
    38cc:	4a8c      	ldr	r2, [pc, #560]	; (3b00 <_Min_Heap_Size+0xb00>)
    38ce:	7813      	ldrb	r3, [r2, #0]
    38d0:	3301      	adds	r3, #1
    38d2:	7013      	strb	r3, [r2, #0]
					mappings[whichMapping].destNumber = destNumber;
    38d4:	4a89      	ldr	r2, [pc, #548]	; (3afc <_Min_Heap_Size+0xafc>)
    38d6:	234c      	movs	r3, #76	; 0x4c
    38d8:	fb07 f303 	mul.w	r3, r7, r3
    38dc:	18d1      	adds	r1, r2, r3
    38de:	54d5      	strb	r5, [r2, r3]
					mappings[whichMapping].dest = &params[destNumber];
    38e0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    38e4:	4b7d      	ldr	r3, [pc, #500]	; (3adc <_Min_Heap_Size+0xadc>)
    38e6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    38ea:	604b      	str	r3, [r1, #4]
					whichMapping = lowestEmptyMapping;
    38ec:	463a      	mov	r2, r7
				if (mappingChangeType == SourceID)
    38ee:	f1be 0f00 	cmp.w	lr, #0
    38f2:	f040 8091 	bne.w	3a18 <_Min_Heap_Size+0xa18>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    38f6:	4615      	mov	r5, r2
    38f8:	4b80      	ldr	r3, [pc, #512]	; (3afc <_Min_Heap_Size+0xafc>)
    38fa:	214c      	movs	r1, #76	; 0x4c
    38fc:	fb01 3302 	mla	r3, r1, r2, r3
    3900:	4463      	add	r3, ip
    3902:	2101      	movs	r1, #1
    3904:	f883 1020 	strb.w	r1, [r3, #32]
					if (source == 255)
    3908:	2eff      	cmp	r6, #255	; 0xff
    390a:	d009      	beq.n	3920 <_Min_Heap_Size+0x920>
						mappings[whichMapping].hookActive[whichSlot] = 1;
    390c:	4b7b      	ldr	r3, [pc, #492]	; (3afc <_Min_Heap_Size+0xafc>)
    390e:	214c      	movs	r1, #76	; 0x4c
    3910:	fb01 3302 	mla	r3, r1, r2, r3
    3914:	4463      	add	r3, ip
    3916:	2201      	movs	r2, #1
    3918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    391c:	2200      	movs	r2, #0
    391e:	e049      	b.n	39b4 <_Min_Heap_Size+0x9b4>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    3920:	4b76      	ldr	r3, [pc, #472]	; (3afc <_Min_Heap_Size+0xafc>)
    3922:	214c      	movs	r1, #76	; 0x4c
    3924:	fb01 3202 	mla	r2, r1, r2, r3
    3928:	4462      	add	r2, ip
    392a:	2300      	movs	r3, #0
    392c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
						for (int i = 0; i < 3; i++)
    3930:	e000      	b.n	3934 <_Min_Heap_Size+0x934>
    3932:	3301      	adds	r3, #1
    3934:	2b02      	cmp	r3, #2
    3936:	ddfc      	ble.n	3932 <_Min_Heap_Size+0x932>
							mappings[whichMapping].destNumber = 255;
    3938:	234c      	movs	r3, #76	; 0x4c
    393a:	fb05 f303 	mul.w	r3, r5, r3
    393e:	4a6f      	ldr	r2, [pc, #444]	; (3afc <_Min_Heap_Size+0xafc>)
    3940:	21ff      	movs	r1, #255	; 0xff
    3942:	54d1      	strb	r1, [r2, r3]
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3944:	2600      	movs	r6, #0
    3946:	e01b      	b.n	3980 <_Min_Heap_Size+0x980>
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    3948:	4b6c      	ldr	r3, [pc, #432]	; (3afc <_Min_Heap_Size+0xafc>)
    394a:	224c      	movs	r2, #76	; 0x4c
    394c:	fb02 3805 	mla	r8, r2, r5, r3
    3950:	f8d8 7004 	ldr.w	r7, [r8, #4]
    3954:	eb07 0286 	add.w	r2, r7, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    3958:	693b      	ldr	r3, [r7, #16]
    395a:	ed92 0a00 	vldr	s0, [r2]
    395e:	4798      	blx	r3
    3960:	1cb3      	adds	r3, r6, #2
    3962:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    3966:	ed87 0a00 	vstr	s0, [r7]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    396a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    396e:	6957      	ldr	r7, [r2, #20]
    3970:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3974:	4631      	mov	r1, r6
    3976:	7e10      	ldrb	r0, [r2, #24]
    3978:	ed93 0a00 	vldr	s0, [r3]
    397c:	47b8      	blx	r7
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    397e:	3601      	adds	r6, #1
    3980:	2e01      	cmp	r6, #1
    3982:	dde1      	ble.n	3948 <_Min_Heap_Size+0x948>
    3984:	f7ff ba48 	b.w	2e18 <handleSPI+0x218>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3988:	eb02 0346 	add.w	r3, r2, r6, lsl #1
    398c:	485d      	ldr	r0, [pc, #372]	; (3b04 <_Min_Heap_Size+0xb04>)
    398e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3992:	495a      	ldr	r1, [pc, #360]	; (3afc <_Min_Heap_Size+0xafc>)
    3994:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3998:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    399c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    39a0:	4413      	add	r3, r2
    39a2:	1c9f      	adds	r7, r3, #2
    39a4:	f841 0027 	str.w	r0, [r1, r7, lsl #2]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    39a8:	3308      	adds	r3, #8
    39aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    39ae:	4b56      	ldr	r3, [pc, #344]	; (3b08 <_Min_Heap_Size+0xb08>)
    39b0:	604b      	str	r3, [r1, #4]
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    39b2:	3201      	adds	r2, #1
    39b4:	2a01      	cmp	r2, #1
    39b6:	dde7      	ble.n	3988 <_Min_Heap_Size+0x988>
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    39b8:	2e03      	cmp	r6, #3
    39ba:	dc07      	bgt.n	39cc <_Min_Heap_Size+0x9cc>
							mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    39bc:	4b4f      	ldr	r3, [pc, #316]	; (3afc <_Min_Heap_Size+0xafc>)
    39be:	224c      	movs	r2, #76	; 0x4c
    39c0:	fb02 3305 	mla	r3, r2, r5, r3
    39c4:	4463      	add	r3, ip
    39c6:	2200      	movs	r2, #0
    39c8:	f883 2020 	strb.w	r2, [r3, #32]
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    39cc:	f1a6 0318 	sub.w	r3, r6, #24
    39d0:	2b03      	cmp	r3, #3
    39d2:	d802      	bhi.n	39da <_Min_Heap_Size+0x9da>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    39d4:	4a4d      	ldr	r2, [pc, #308]	; (3b0c <_Min_Heap_Size+0xb0c>)
    39d6:	2101      	movs	r1, #1
    39d8:	54d1      	strb	r1, [r2, r3]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    39da:	f1a6 0314 	sub.w	r3, r6, #20
    39de:	2b03      	cmp	r3, #3
    39e0:	d802      	bhi.n	39e8 <_Min_Heap_Size+0x9e8>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    39e2:	4a4b      	ldr	r2, [pc, #300]	; (3b10 <_Min_Heap_Size+0xb10>)
    39e4:	2101      	movs	r1, #1
    39e6:	54d1      	strb	r1, [r2, r3]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    39e8:	2e02      	cmp	r6, #2
    39ea:	d802      	bhi.n	39f2 <_Min_Heap_Size+0x9f2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    39ec:	4b49      	ldr	r3, [pc, #292]	; (3b14 <_Min_Heap_Size+0xb14>)
    39ee:	2201      	movs	r2, #1
    39f0:	559a      	strb	r2, [r3, r6]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    39f2:	2e03      	cmp	r6, #3
    39f4:	d00c      	beq.n	3a10 <_Min_Heap_Size+0xa10>
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    39f6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    39fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    39fe:	4463      	add	r3, ip
    3a00:	330e      	adds	r3, #14
    3a02:	4a3e      	ldr	r2, [pc, #248]	; (3afc <_Min_Heap_Size+0xafc>)
    3a04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a08:	2200      	movs	r2, #0
    3a0a:	605a      	str	r2, [r3, #4]
    3a0c:	f7ff ba04 	b.w	2e18 <handleSPI+0x218>
							noiseOn = 1;
    3a10:	4b41      	ldr	r3, [pc, #260]	; (3b18 <_Min_Heap_Size+0xb18>)
    3a12:	2201      	movs	r2, #1
    3a14:	701a      	strb	r2, [r3, #0]
    3a16:	e7ee      	b.n	39f6 <_Min_Heap_Size+0x9f6>
				else if (mappingChangeType == Amount)
    3a18:	f1be 0f01 	cmp.w	lr, #1
    3a1c:	d005      	beq.n	3a2a <_Min_Heap_Size+0xa2a>
				else if (mappingChangeType == ScalarID)
    3a1e:	f1be 0f02 	cmp.w	lr, #2
    3a22:	f47f a9f9 	bne.w	2e18 <handleSPI+0x218>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a26:	2100      	movs	r1, #0
    3a28:	e025      	b.n	3a76 <_Min_Heap_Size+0xa76>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    3a2a:	ee07 6a90 	vmov	s15, r6
    3a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a32:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 3b1c <_Min_Heap_Size+0xb1c>
    3a36:	ee67 7a87 	vmul.f32	s15, s15, s14
    3a3a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3a3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3a42:	4463      	add	r3, ip
    3a44:	330e      	adds	r3, #14
    3a46:	4a2d      	ldr	r2, [pc, #180]	; (3afc <_Min_Heap_Size+0xafc>)
    3a48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3a4c:	edc3 7a01 	vstr	s15, [r3, #4]
    3a50:	f7ff b9e2 	b.w	2e18 <handleSPI+0x218>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3a54:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3a58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3a5c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3a60:	440b      	add	r3, r1
    3a62:	3308      	adds	r3, #8
    3a64:	4825      	ldr	r0, [pc, #148]	; (3afc <_Min_Heap_Size+0xafc>)
    3a66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3a6a:	4827      	ldr	r0, [pc, #156]	; (3b08 <_Min_Heap_Size+0xb08>)
    3a6c:	6058      	str	r0, [r3, #4]
    3a6e:	e001      	b.n	3a74 <_Min_Heap_Size+0xa74>
							if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    3a70:	2e03      	cmp	r6, #3
    3a72:	d02a      	beq.n	3aca <_Min_Heap_Size+0xaca>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a74:	3101      	adds	r1, #1
    3a76:	2901      	cmp	r1, #1
    3a78:	f73f a9ce 	bgt.w	2e18 <handleSPI+0x218>
						if (scalar == 0xff)
    3a7c:	2eff      	cmp	r6, #255	; 0xff
    3a7e:	d0e9      	beq.n	3a54 <_Min_Heap_Size+0xa54>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3a80:	eb01 0346 	add.w	r3, r1, r6, lsl #1
    3a84:	4d1f      	ldr	r5, [pc, #124]	; (3b04 <_Min_Heap_Size+0xb04>)
    3a86:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3a8a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3a8e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3a92:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3a96:	440b      	add	r3, r1
    3a98:	3308      	adds	r3, #8
    3a9a:	4818      	ldr	r0, [pc, #96]	; (3afc <_Min_Heap_Size+0xafc>)
    3a9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3aa0:	605d      	str	r5, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3aa2:	f1a6 0318 	sub.w	r3, r6, #24
    3aa6:	2b03      	cmp	r3, #3
    3aa8:	d802      	bhi.n	3ab0 <_Min_Heap_Size+0xab0>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3aaa:	4818      	ldr	r0, [pc, #96]	; (3b0c <_Min_Heap_Size+0xb0c>)
    3aac:	2501      	movs	r5, #1
    3aae:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3ab0:	f1a6 0314 	sub.w	r3, r6, #20
    3ab4:	2b03      	cmp	r3, #3
    3ab6:	d802      	bhi.n	3abe <_Min_Heap_Size+0xabe>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3ab8:	4815      	ldr	r0, [pc, #84]	; (3b10 <_Min_Heap_Size+0xb10>)
    3aba:	2501      	movs	r5, #1
    3abc:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3abe:	2e02      	cmp	r6, #2
    3ac0:	d8d6      	bhi.n	3a70 <_Min_Heap_Size+0xa70>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    3ac2:	4b14      	ldr	r3, [pc, #80]	; (3b14 <_Min_Heap_Size+0xb14>)
    3ac4:	2001      	movs	r0, #1
    3ac6:	5598      	strb	r0, [r3, r6]
    3ac8:	e7d2      	b.n	3a70 <_Min_Heap_Size+0xa70>
								noiseOn = 1;
    3aca:	4b13      	ldr	r3, [pc, #76]	; (3b18 <_Min_Heap_Size+0xb18>)
    3acc:	2001      	movs	r0, #1
    3ace:	7018      	strb	r0, [r3, #0]
    3ad0:	e7d0      	b.n	3a74 <_Min_Heap_Size+0xa74>
    3ad2:	bf00      	nop
    3ad4:	2001a1e8 	.word	0x2001a1e8
    3ad8:	2001a2f8 	.word	0x2001a2f8
    3adc:	200191e8 	.word	0x200191e8
    3ae0:	42fe0000 	.word	0x42fe0000
    3ae4:	200191cc 	.word	0x200191cc
    3ae8:	200191d0 	.word	0x200191d0
    3aec:	2001d448 	.word	0x2001d448
    3af0:	200164d9 	.word	0x200164d9
    3af4:	20005354 	.word	0x20005354
    3af8:	30000800 	.word	0x30000800
    3afc:	20018590 	.word	0x20018590
    3b00:	200191d8 	.word	0x200191d8
    3b04:	2001d6b4 	.word	0x2001d6b4
    3b08:	200006b0 	.word	0x200006b0
    3b0c:	2001d264 	.word	0x2001d264
    3b10:	2001d160 	.word	0x2001d160
    3b14:	2001d4d4 	.word	0x2001d4d4
    3b18:	2001d4b0 	.word	0x2001d4b0
    3b1c:	37fffffc 	.word	0x37fffffc
			uint_fast8_t  currentByte = offset+1;
    3b20:	1c42      	adds	r2, r0, #1
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3b22:	4b94      	ldr	r3, [pc, #592]	; (3d74 <_Min_Heap_Size+0xd74>)
    3b24:	4413      	add	r3, r2
    3b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3b2a:	ee07 3a90 	vmov	s15, r3
    3b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b32:	ed9f 7a91 	vldr	s14, [pc, #580]	; 3d78 <_Min_Heap_Size+0xd78>
    3b36:	ee67 7a87 	vmul.f32	s15, s15, s14
    3b3a:	4b90      	ldr	r3, [pc, #576]	; (3d7c <_Min_Heap_Size+0xd7c>)
    3b3c:	edc3 7a00 	vstr	s15, [r3]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3b40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3b44:	ee67 7a87 	vmul.f32	s15, s15, s14
    3b48:	4b8d      	ldr	r3, [pc, #564]	; (3d80 <_Min_Heap_Size+0xd80>)
    3b4a:	edc3 7a00 	vstr	s15, [r3]
    3b4e:	f7ff b963 	b.w	2e18 <handleSPI+0x218>
			if (boardNumber == 0)
    3b52:	4b8c      	ldr	r3, [pc, #560]	; (3d84 <_Min_Heap_Size+0xd84>)
    3b54:	781b      	ldrb	r3, [r3, #0]
    3b56:	2b00      	cmp	r3, #0
    3b58:	f47f a95e 	bne.w	2e18 <handleSPI+0x218>
				brainFirmwareUpdateRequested = 1;
    3b5c:	4b8a      	ldr	r3, [pc, #552]	; (3d88 <_Min_Heap_Size+0xd88>)
    3b5e:	2201      	movs	r2, #1
    3b60:	601a      	str	r2, [r3, #0]
    3b62:	f7ff b959 	b.w	2e18 <handleSPI+0x218>
			if (boardNumber == 0)
    3b66:	4b87      	ldr	r3, [pc, #540]	; (3d84 <_Min_Heap_Size+0xd84>)
    3b68:	781b      	ldrb	r3, [r3, #0]
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	f47f a954 	bne.w	2e18 <handleSPI+0x218>
				pluckFirmwareUpdateRequested = 1;
    3b70:	4b86      	ldr	r3, [pc, #536]	; (3d8c <_Min_Heap_Size+0xd8c>)
    3b72:	2201      	movs	r2, #1
    3b74:	601a      	str	r2, [r3, #0]
    3b76:	f7ff b94f 	b.w	2e18 <handleSPI+0x218>
			if (boardNumber == 0)
    3b7a:	4b82      	ldr	r3, [pc, #520]	; (3d84 <_Min_Heap_Size+0xd84>)
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	2b00      	cmp	r3, #0
    3b80:	f47f a94a 	bne.w	2e18 <handleSPI+0x218>
				uint_fast8_t  currentByte = offset+1;
    3b84:	1c42      	adds	r2, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    3b86:	4b7b      	ldr	r3, [pc, #492]	; (3d74 <_Min_Heap_Size+0xd74>)
    3b88:	4413      	add	r3, r2
    3b8a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    3b8e:	4b80      	ldr	r3, [pc, #512]	; (3d90 <_Min_Heap_Size+0xd90>)
    3b90:	701a      	strb	r2, [r3, #0]
				currentByte++;
    3b92:	3002      	adds	r0, #2
				bufferPos = 0;
    3b94:	2100      	movs	r1, #0
    3b96:	4b7f      	ldr	r3, [pc, #508]	; (3d94 <_Min_Heap_Size+0xd94>)
    3b98:	8019      	strh	r1, [r3, #0]
				for (int i = 0; i < 18; i++)
    3b9a:	e00d      	b.n	3bb8 <_Min_Heap_Size+0xbb8>
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    3b9c:	4d7d      	ldr	r5, [pc, #500]	; (3d94 <_Min_Heap_Size+0xd94>)
    3b9e:	882b      	ldrh	r3, [r5, #0]
    3ba0:	b29b      	uxth	r3, r3
    3ba2:	1c5a      	adds	r2, r3, #1
    3ba4:	b292      	uxth	r2, r2
    3ba6:	802a      	strh	r2, [r5, #0]
    3ba8:	4a72      	ldr	r2, [pc, #456]	; (3d74 <_Min_Heap_Size+0xd74>)
    3baa:	4402      	add	r2, r0
    3bac:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
    3bb0:	4a79      	ldr	r2, [pc, #484]	; (3d98 <_Min_Heap_Size+0xd98>)
    3bb2:	54d5      	strb	r5, [r2, r3]
				for (int i = 0; i < 18; i++)
    3bb4:	3101      	adds	r1, #1
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    3bb6:	3001      	adds	r0, #1
				for (int i = 0; i < 18; i++)
    3bb8:	2911      	cmp	r1, #17
    3bba:	ddef      	ble.n	3b9c <_Min_Heap_Size+0xb9c>
				if (whichModel != 0)
    3bbc:	4b77      	ldr	r3, [pc, #476]	; (3d9c <_Min_Heap_Size+0xd9c>)
    3bbe:	7818      	ldrb	r0, [r3, #0]
    3bc0:	2800      	cmp	r0, #0
    3bc2:	f000 80a4 	beq.w	3d0e <_Min_Heap_Size+0xd0e>
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    3bc6:	4974      	ldr	r1, [pc, #464]	; (3d98 <_Min_Heap_Size+0xd98>)
    3bc8:	2313      	movs	r3, #19
    3bca:	704b      	strb	r3, [r1, #1]
					bufferPos = 20;//first byte after name
    3bcc:	4a71      	ldr	r2, [pc, #452]	; (3d94 <_Min_Heap_Size+0xd94>)
    3bce:	2314      	movs	r3, #20
    3bd0:	8013      	strh	r3, [r2, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    3bd2:	8813      	ldrh	r3, [r2, #0]
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	54c8      	strb	r0, [r1, r3]
					bufferPos++;
    3bd8:	8813      	ldrh	r3, [r2, #0]
    3bda:	b29b      	uxth	r3, r3
    3bdc:	3301      	adds	r3, #1
    3bde:	b29b      	uxth	r3, r3
    3be0:	8013      	strh	r3, [r2, #0]
					for (int j = 0; j < 8; j++)
    3be2:	2600      	movs	r6, #0
    3be4:	e019      	b.n	3c1a <_Min_Heap_Size+0xc1a>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    3be6:	4b6e      	ldr	r3, [pc, #440]	; (3da0 <_Min_Heap_Size+0xda0>)
    3be8:	781f      	ldrb	r7, [r3, #0]
    3bea:	496a      	ldr	r1, [pc, #424]	; (3d94 <_Min_Heap_Size+0xd94>)
    3bec:	8808      	ldrh	r0, [r1, #0]
    3bee:	b280      	uxth	r0, r0
    3bf0:	eb06 0586 	add.w	r5, r6, r6, lsl #2
    3bf4:	23c8      	movs	r3, #200	; 0xc8
    3bf6:	fb07 f303 	mul.w	r3, r7, r3
    3bfa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    3bfe:	4d69      	ldr	r5, [pc, #420]	; (3da4 <_Min_Heap_Size+0xda4>)
    3c00:	442b      	add	r3, r5
    3c02:	5c9d      	ldrb	r5, [r3, r2]
    3c04:	4b64      	ldr	r3, [pc, #400]	; (3d98 <_Min_Heap_Size+0xd98>)
    3c06:	541d      	strb	r5, [r3, r0]
							bufferPos++;
    3c08:	880b      	ldrh	r3, [r1, #0]
    3c0a:	b29b      	uxth	r3, r3
    3c0c:	3301      	adds	r3, #1
    3c0e:	b29b      	uxth	r3, r3
    3c10:	800b      	strh	r3, [r1, #0]
						for (int k = 0; k < 9; k++)
    3c12:	3201      	adds	r2, #1
    3c14:	2a08      	cmp	r2, #8
    3c16:	dde6      	ble.n	3be6 <_Min_Heap_Size+0xbe6>
					for (int j = 0; j < 8; j++)
    3c18:	3601      	adds	r6, #1
    3c1a:	2e07      	cmp	r6, #7
    3c1c:	dc01      	bgt.n	3c22 <_Min_Heap_Size+0xc22>
						for (int k = 0; k < 9; k++)
    3c1e:	2200      	movs	r2, #0
    3c20:	e7f8      	b.n	3c14 <_Min_Heap_Size+0xc14>
					for (int j = 0; j < 4; j++)
    3c22:	2500      	movs	r5, #0
    3c24:	e01b      	b.n	3c5e <_Min_Heap_Size+0xc5e>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    3c26:	4b5e      	ldr	r3, [pc, #376]	; (3da0 <_Min_Heap_Size+0xda0>)
    3c28:	781f      	ldrb	r7, [r3, #0]
    3c2a:	f105 0308 	add.w	r3, r5, #8
    3c2e:	4859      	ldr	r0, [pc, #356]	; (3d94 <_Min_Heap_Size+0xd94>)
    3c30:	8806      	ldrh	r6, [r0, #0]
    3c32:	b2b6      	uxth	r6, r6
    3c34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c38:	22c8      	movs	r2, #200	; 0xc8
    3c3a:	fb07 f202 	mul.w	r2, r7, r2
    3c3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3c42:	4a58      	ldr	r2, [pc, #352]	; (3da4 <_Min_Heap_Size+0xda4>)
    3c44:	4413      	add	r3, r2
    3c46:	5c5a      	ldrb	r2, [r3, r1]
    3c48:	4b53      	ldr	r3, [pc, #332]	; (3d98 <_Min_Heap_Size+0xd98>)
    3c4a:	559a      	strb	r2, [r3, r6]
							bufferPos++;
    3c4c:	8803      	ldrh	r3, [r0, #0]
    3c4e:	b29b      	uxth	r3, r3
    3c50:	3301      	adds	r3, #1
    3c52:	b29b      	uxth	r3, r3
    3c54:	8003      	strh	r3, [r0, #0]
						for (int k = 0; k < 10; k++)
    3c56:	3101      	adds	r1, #1
    3c58:	2909      	cmp	r1, #9
    3c5a:	dde4      	ble.n	3c26 <_Min_Heap_Size+0xc26>
					for (int j = 0; j < 4; j++)
    3c5c:	3501      	adds	r5, #1
    3c5e:	2d03      	cmp	r5, #3
    3c60:	dc01      	bgt.n	3c66 <_Min_Heap_Size+0xc66>
						for (int k = 0; k < 10; k++)
    3c62:	2100      	movs	r1, #0
    3c64:	e7f8      	b.n	3c58 <_Min_Heap_Size+0xc58>
					for (int j = 0; j < 8; j++)
    3c66:	2500      	movs	r5, #0
    3c68:	e01b      	b.n	3ca2 <_Min_Heap_Size+0xca2>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    3c6a:	4b4d      	ldr	r3, [pc, #308]	; (3da0 <_Min_Heap_Size+0xda0>)
    3c6c:	781f      	ldrb	r7, [r3, #0]
    3c6e:	f105 030c 	add.w	r3, r5, #12
    3c72:	4848      	ldr	r0, [pc, #288]	; (3d94 <_Min_Heap_Size+0xd94>)
    3c74:	8806      	ldrh	r6, [r0, #0]
    3c76:	b2b6      	uxth	r6, r6
    3c78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3c7c:	22c8      	movs	r2, #200	; 0xc8
    3c7e:	fb07 f202 	mul.w	r2, r7, r2
    3c82:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3c86:	4a47      	ldr	r2, [pc, #284]	; (3da4 <_Min_Heap_Size+0xda4>)
    3c88:	4413      	add	r3, r2
    3c8a:	5c5a      	ldrb	r2, [r3, r1]
    3c8c:	4b42      	ldr	r3, [pc, #264]	; (3d98 <_Min_Heap_Size+0xd98>)
    3c8e:	559a      	strb	r2, [r3, r6]
							bufferPos++;
    3c90:	8803      	ldrh	r3, [r0, #0]
    3c92:	b29b      	uxth	r3, r3
    3c94:	3301      	adds	r3, #1
    3c96:	b29b      	uxth	r3, r3
    3c98:	8003      	strh	r3, [r0, #0]
						for (int k = 0; k < 9; k++)
    3c9a:	3101      	adds	r1, #1
    3c9c:	2908      	cmp	r1, #8
    3c9e:	dde4      	ble.n	3c6a <_Min_Heap_Size+0xc6a>
					for (int j = 0; j < 8; j++)
    3ca0:	3501      	adds	r5, #1
    3ca2:	2d07      	cmp	r5, #7
    3ca4:	dc01      	bgt.n	3caa <_Min_Heap_Size+0xcaa>
						for (int k = 0; k < 9; k++)
    3ca6:	2100      	movs	r1, #0
    3ca8:	e7f8      	b.n	3c9c <_Min_Heap_Size+0xc9c>
					for (int i = 0; i < 20; i++)
    3caa:	2000      	movs	r0, #0
    3cac:	e01d      	b.n	3cea <_Min_Heap_Size+0xcea>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3cae:	4b3e      	ldr	r3, [pc, #248]	; (3da8 <_Min_Heap_Size+0xda8>)
    3cb0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3cb4:	edd3 7a00 	vldr	s15, [r3]
    3cb8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 3dac <_Min_Heap_Size+0xdac>
    3cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
    3cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3cc4:	ee17 3a90 	vmov	r3, s15
						buffer[bufferPos] = integerVersion >> 8;
    3cc8:	4932      	ldr	r1, [pc, #200]	; (3d94 <_Min_Heap_Size+0xd94>)
    3cca:	880a      	ldrh	r2, [r1, #0]
    3ccc:	b292      	uxth	r2, r2
    3cce:	4d32      	ldr	r5, [pc, #200]	; (3d98 <_Min_Heap_Size+0xd98>)
    3cd0:	f3c3 2607 	ubfx	r6, r3, #8, #8
    3cd4:	54ae      	strb	r6, [r5, r2]
						buffer[bufferPos+1] = integerVersion & 255;
    3cd6:	880a      	ldrh	r2, [r1, #0]
    3cd8:	b292      	uxth	r2, r2
    3cda:	3201      	adds	r2, #1
    3cdc:	54ab      	strb	r3, [r5, r2]
						bufferPos = bufferPos + 2;
    3cde:	880b      	ldrh	r3, [r1, #0]
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	3302      	adds	r3, #2
    3ce4:	b29b      	uxth	r3, r3
    3ce6:	800b      	strh	r3, [r1, #0]
					for (int i = 0; i < 20; i++)
    3ce8:	3001      	adds	r0, #1
    3cea:	2813      	cmp	r0, #19
    3cec:	dddf      	ble.n	3cae <_Min_Heap_Size+0xcae>
					 presetNumberToLoad = presetNumberToSave;
    3cee:	4b28      	ldr	r3, [pc, #160]	; (3d90 <_Min_Heap_Size+0xd90>)
    3cf0:	781b      	ldrb	r3, [r3, #0]
    3cf2:	b2db      	uxtb	r3, r3
    3cf4:	4a2e      	ldr	r2, [pc, #184]	; (3db0 <_Min_Heap_Size+0xdb0>)
    3cf6:	7013      	strb	r3, [r2, #0]
					 presetWaitingToParse = bufferPos;
    3cf8:	4a26      	ldr	r2, [pc, #152]	; (3d94 <_Min_Heap_Size+0xd94>)
    3cfa:	8813      	ldrh	r3, [r2, #0]
    3cfc:	b29b      	uxth	r3, r3
    3cfe:	492d      	ldr	r1, [pc, #180]	; (3db4 <_Min_Heap_Size+0xdb4>)
    3d00:	600b      	str	r3, [r1, #0]
					 presetWaitingToWrite = bufferPos;
    3d02:	8813      	ldrh	r3, [r2, #0]
    3d04:	b29b      	uxth	r3, r3
    3d06:	4a2c      	ldr	r2, [pc, #176]	; (3db8 <_Min_Heap_Size+0xdb8>)
    3d08:	6013      	str	r3, [r2, #0]
    3d0a:	f7ff b885 	b.w	2e18 <handleSPI+0x218>
					bufferPos = 138;//first byte after name
    3d0e:	4b21      	ldr	r3, [pc, #132]	; (3d94 <_Min_Heap_Size+0xd94>)
    3d10:	228a      	movs	r2, #138	; 0x8a
    3d12:	801a      	strh	r2, [r3, #0]
					for (int i = 0; i < 12; i++)
    3d14:	2000      	movs	r0, #0
    3d16:	e01d      	b.n	3d54 <_Min_Heap_Size+0xd54>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3d18:	4b23      	ldr	r3, [pc, #140]	; (3da8 <_Min_Heap_Size+0xda8>)
    3d1a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3d1e:	edd3 7a00 	vldr	s15, [r3]
    3d22:	ed9f 7a22 	vldr	s14, [pc, #136]	; 3dac <_Min_Heap_Size+0xdac>
    3d26:	ee67 7a87 	vmul.f32	s15, s15, s14
    3d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3d2e:	ee17 3a90 	vmov	r3, s15
						buffer[bufferPos] = integerVersion >> 8;
    3d32:	4918      	ldr	r1, [pc, #96]	; (3d94 <_Min_Heap_Size+0xd94>)
    3d34:	880a      	ldrh	r2, [r1, #0]
    3d36:	b292      	uxth	r2, r2
    3d38:	4d17      	ldr	r5, [pc, #92]	; (3d98 <_Min_Heap_Size+0xd98>)
    3d3a:	f3c3 2607 	ubfx	r6, r3, #8, #8
    3d3e:	54ae      	strb	r6, [r5, r2]
						buffer[bufferPos+1] = integerVersion & 255;
    3d40:	880a      	ldrh	r2, [r1, #0]
    3d42:	b292      	uxth	r2, r2
    3d44:	3201      	adds	r2, #1
    3d46:	54ab      	strb	r3, [r5, r2]
						bufferPos = bufferPos + 2;
    3d48:	880b      	ldrh	r3, [r1, #0]
    3d4a:	b29b      	uxth	r3, r3
    3d4c:	3302      	adds	r3, #2
    3d4e:	b29b      	uxth	r3, r3
    3d50:	800b      	strh	r3, [r1, #0]
					for (int i = 0; i < 12; i++)
    3d52:	3001      	adds	r0, #1
    3d54:	280b      	cmp	r0, #11
    3d56:	dddf      	ble.n	3d18 <_Min_Heap_Size+0xd18>
					 presetNumberToLoad = presetNumberToSave;
    3d58:	4b0d      	ldr	r3, [pc, #52]	; (3d90 <_Min_Heap_Size+0xd90>)
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	b2db      	uxtb	r3, r3
    3d5e:	4a14      	ldr	r2, [pc, #80]	; (3db0 <_Min_Heap_Size+0xdb0>)
    3d60:	7013      	strb	r3, [r2, #0]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    3d62:	4b16      	ldr	r3, [pc, #88]	; (3dbc <_Min_Heap_Size+0xdbc>)
    3d64:	681b      	ldr	r3, [r3, #0]
    3d66:	4a13      	ldr	r2, [pc, #76]	; (3db4 <_Min_Heap_Size+0xdb4>)
    3d68:	6013      	str	r3, [r2, #0]
					 presetWaitingToWrite = currentPresetSize;
    3d6a:	4a13      	ldr	r2, [pc, #76]	; (3db8 <_Min_Heap_Size+0xdb8>)
    3d6c:	6013      	str	r3, [r2, #0]
    3d6e:	f7ff b853 	b.w	2e18 <handleSPI+0x218>
    3d72:	bf00      	nop
    3d74:	30000800 	.word	0x30000800
    3d78:	3c23d70a 	.word	0x3c23d70a
    3d7c:	2000068c 	.word	0x2000068c
    3d80:	20000690 	.word	0x20000690
    3d84:	200142fd 	.word	0x200142fd
    3d88:	20014310 	.word	0x20014310
    3d8c:	2001a324 	.word	0x2001a324
    3d90:	2001a33b 	.word	0x2001a33b
    3d94:	20014314 	.word	0x20014314
    3d98:	30042380 	.word	0x30042380
    3d9c:	2001c941 	.word	0x2001c941
    3da0:	200006ad 	.word	0x200006ad
    3da4:	30043380 	.word	0x30043380
    3da8:	200051f0 	.word	0x200051f0
    3dac:	47800000 	.word	0x47800000
    3db0:	2001a33a 	.word	0x2001a33a
    3db4:	2001a340 	.word	0x2001a340
    3db8:	2001a344 	.word	0x2001a344
    3dbc:	20014318 	.word	0x20014318

00003dc0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    3dc0:	4b02      	ldr	r3, [pc, #8]	; (3dcc <HAL_I2C_SlaveRxCpltCallback+0xc>)
    3dc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3dc6:	601a      	str	r2, [r3, #0]
}
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop
    3dcc:	2001a340 	.word	0x2001a340
    3dd0:	f3af 8000 	nop.w
    3dd4:	f3af 8000 	nop.w
    3dd8:	f3af 8000 	nop.w
    3ddc:	f3af 8000 	nop.w

00003de0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    3de0:	4b01      	ldr	r3, [pc, #4]	; (3de8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    3de2:	2200      	movs	r2, #0
    3de4:	701a      	strb	r2, [r3, #0]
}
    3de6:	4770      	bx	lr
    3de8:	200164da 	.word	0x200164da
    3dec:	f3af 8000 	nop.w
    3df0:	f3af 8000 	nop.w
    3df4:	f3af 8000 	nop.w
    3df8:	f3af 8000 	nop.w
    3dfc:	f3af 8000 	nop.w

00003e00 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    3e00:	2300      	movs	r3, #0
    3e02:	4a05      	ldr	r2, [pc, #20]	; (3e18 <HAL_I2C_ErrorCallback+0x18>)
    3e04:	7013      	strb	r3, [r2, #0]
	receivingI2C = 0;
    3e06:	4a05      	ldr	r2, [pc, #20]	; (3e1c <HAL_I2C_ErrorCallback+0x1c>)
    3e08:	7013      	strb	r3, [r2, #0]
	I2CErrors++;
    3e0a:	4a05      	ldr	r2, [pc, #20]	; (3e20 <HAL_I2C_ErrorCallback+0x20>)
    3e0c:	7813      	ldrb	r3, [r2, #0]
    3e0e:	3301      	adds	r3, #1
    3e10:	b2db      	uxtb	r3, r3
    3e12:	7013      	strb	r3, [r2, #0]
}
    3e14:	4770      	bx	lr
    3e16:	bf00      	nop
    3e18:	200164da 	.word	0x200164da
    3e1c:	2001a798 	.word	0x2001a798
    3e20:	200142fc 	.word	0x200142fc
    3e24:	f3af 8000 	nop.w
    3e28:	f3af 8000 	nop.w
    3e2c:	f3af 8000 	nop.w
    3e30:	f3af 8000 	nop.w
    3e34:	f3af 8000 	nop.w
    3e38:	f3af 8000 	nop.w
    3e3c:	f3af 8000 	nop.w

00003e40 <HAL_SPI_TxRxCpltCallback>:
{
    3e40:	b510      	push	{r4, lr}
	interrupted = 1;
    3e42:	4b2b      	ldr	r3, [pc, #172]	; (3ef0 <HAL_SPI_TxRxCpltCallback+0xb0>)
    3e44:	2201      	movs	r2, #1
    3e46:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3e48:	4b2a      	ldr	r3, [pc, #168]	; (3ef4 <HAL_SPI_TxRxCpltCallback+0xb4>)
    3e4a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3e4e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3e52:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3e54:	4928      	ldr	r1, [pc, #160]	; (3ef8 <HAL_SPI_TxRxCpltCallback+0xb8>)
    3e56:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3e5a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3e5c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3e5e:	2a00      	cmp	r2, #0
    3e60:	dcf8      	bgt.n	3e54 <HAL_SPI_TxRxCpltCallback+0x14>
    3e62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e66:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    3e6a:	4b24      	ldr	r3, [pc, #144]	; (3efc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3e6c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    3e70:	2bfe      	cmp	r3, #254	; 0xfe
    3e72:	d104      	bne.n	3e7e <HAL_SPI_TxRxCpltCallback+0x3e>
    3e74:	4b21      	ldr	r3, [pc, #132]	; (3efc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3e76:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    3e7a:	2bfd      	cmp	r3, #253	; 0xfd
    3e7c:	d034      	beq.n	3ee8 <HAL_SPI_TxRxCpltCallback+0xa8>
		HAL_SPI_Abort(&hspi1);
    3e7e:	4c20      	ldr	r4, [pc, #128]	; (3f00 <HAL_SPI_TxRxCpltCallback+0xc0>)
    3e80:	4620      	mov	r0, r4
    3e82:	f005 fcc5 	bl	9810 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    3e86:	4b1f      	ldr	r3, [pc, #124]	; (3f04 <HAL_SPI_TxRxCpltCallback+0xc4>)
    3e88:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    3e94:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3e98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3e9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    3ea0:	f005 fe0e 	bl	9ac0 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    3ea4:	6822      	ldr	r2, [r4, #0]
    3ea6:	6813      	ldr	r3, [r2, #0]
    3ea8:	f043 0301 	orr.w	r3, r3, #1
    3eac:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3eae:	4913      	ldr	r1, [pc, #76]	; (3efc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3eb0:	2340      	movs	r3, #64	; 0x40
    3eb2:	18ca      	adds	r2, r1, r3
    3eb4:	4620      	mov	r0, r4
    3eb6:	f005 fc3b 	bl	9730 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    3eba:	4a13      	ldr	r2, [pc, #76]	; (3f08 <HAL_SPI_TxRxCpltCallback+0xc8>)
    3ebc:	7813      	ldrb	r3, [r2, #0]
    3ebe:	3301      	adds	r3, #1
    3ec0:	b2db      	uxtb	r3, r3
    3ec2:	7013      	strb	r3, [r2, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3ec4:	4b0d      	ldr	r3, [pc, #52]	; (3efc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3ec6:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3eca:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3ece:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3ed0:	4909      	ldr	r1, [pc, #36]	; (3ef8 <HAL_SPI_TxRxCpltCallback+0xb8>)
    3ed2:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3ed6:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3ed8:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3eda:	2a00      	cmp	r2, #0
    3edc:	dcf8      	bgt.n	3ed0 <HAL_SPI_TxRxCpltCallback+0x90>
    3ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ee2:	f3bf 8f6f 	isb	sy
}
    3ee6:	bd10      	pop	{r4, pc}
		handleSPI(LEVER_BUFFER_SIZE);
    3ee8:	2020      	movs	r0, #32
    3eea:	f7fe fe89 	bl	2c00 <handleSPI>
    3eee:	e7e9      	b.n	3ec4 <HAL_SPI_TxRxCpltCallback+0x84>
    3ef0:	200051d8 	.word	0x200051d8
    3ef4:	30000840 	.word	0x30000840
    3ef8:	e000ed00 	.word	0xe000ed00
    3efc:	30000800 	.word	0x30000800
    3f00:	2001cd60 	.word	0x2001cd60
    3f04:	58024400 	.word	0x58024400
    3f08:	200191d9 	.word	0x200191d9
    3f0c:	f3af 8000 	nop.w
    3f10:	f3af 8000 	nop.w
    3f14:	f3af 8000 	nop.w
    3f18:	f3af 8000 	nop.w
    3f1c:	f3af 8000 	nop.w

00003f20 <HAL_SPI_TxRxHalfCpltCallback>:
{
    3f20:	b510      	push	{r4, lr}
	interrupted = 1;
    3f22:	4b2b      	ldr	r3, [pc, #172]	; (3fd0 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
    3f24:	2201      	movs	r2, #1
    3f26:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3f28:	4b2a      	ldr	r3, [pc, #168]	; (3fd4 <HAL_SPI_TxRxHalfCpltCallback+0xb4>)
    3f2a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3f2e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3f32:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3f34:	4928      	ldr	r1, [pc, #160]	; (3fd8 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    3f36:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3f3a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3f3c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3f3e:	2a00      	cmp	r2, #0
    3f40:	dcf8      	bgt.n	3f34 <HAL_SPI_TxRxHalfCpltCallback+0x14>
    3f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f46:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    3f4a:	4b24      	ldr	r3, [pc, #144]	; (3fdc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    3f4c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    3f50:	2bfe      	cmp	r3, #254	; 0xfe
    3f52:	d104      	bne.n	3f5e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
    3f54:	4b21      	ldr	r3, [pc, #132]	; (3fdc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    3f56:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    3f5a:	2bfd      	cmp	r3, #253	; 0xfd
    3f5c:	d034      	beq.n	3fc8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>
		HAL_SPI_Abort(&hspi1);
    3f5e:	4c20      	ldr	r4, [pc, #128]	; (3fe0 <HAL_SPI_TxRxHalfCpltCallback+0xc0>)
    3f60:	4620      	mov	r0, r4
    3f62:	f005 fc55 	bl	9810 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    3f66:	4b1f      	ldr	r3, [pc, #124]	; (3fe4 <HAL_SPI_TxRxHalfCpltCallback+0xc4>)
    3f68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3f70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    3f74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3f7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    3f80:	f005 fd9e 	bl	9ac0 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    3f84:	6822      	ldr	r2, [r4, #0]
    3f86:	6813      	ldr	r3, [r2, #0]
    3f88:	f043 0301 	orr.w	r3, r3, #1
    3f8c:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3f8e:	4913      	ldr	r1, [pc, #76]	; (3fdc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    3f90:	2340      	movs	r3, #64	; 0x40
    3f92:	18ca      	adds	r2, r1, r3
    3f94:	4620      	mov	r0, r4
    3f96:	f005 fbcb 	bl	9730 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    3f9a:	4a13      	ldr	r2, [pc, #76]	; (3fe8 <HAL_SPI_TxRxHalfCpltCallback+0xc8>)
    3f9c:	7813      	ldrb	r3, [r2, #0]
    3f9e:	3301      	adds	r3, #1
    3fa0:	b2db      	uxtb	r3, r3
    3fa2:	7013      	strb	r3, [r2, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3fa4:	4b0d      	ldr	r3, [pc, #52]	; (3fdc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    3fa6:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3faa:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3fae:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3fb0:	4909      	ldr	r1, [pc, #36]	; (3fd8 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    3fb2:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3fb6:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3fb8:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3fba:	2a00      	cmp	r2, #0
    3fbc:	dcf8      	bgt.n	3fb0 <HAL_SPI_TxRxHalfCpltCallback+0x90>
    3fbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fc2:	f3bf 8f6f 	isb	sy
}
    3fc6:	bd10      	pop	{r4, pc}
		handleSPI(0);
    3fc8:	2000      	movs	r0, #0
    3fca:	f7fe fe19 	bl	2c00 <handleSPI>
    3fce:	e7e9      	b.n	3fa4 <HAL_SPI_TxRxHalfCpltCallback+0x84>
    3fd0:	200051d8 	.word	0x200051d8
    3fd4:	30000840 	.word	0x30000840
    3fd8:	e000ed00 	.word	0xe000ed00
    3fdc:	30000800 	.word	0x30000800
    3fe0:	2001cd60 	.word	0x2001cd60
    3fe4:	58024400 	.word	0x58024400
    3fe8:	200191d9 	.word	0x200191d9
    3fec:	f3af 8000 	nop.w
    3ff0:	f3af 8000 	nop.w
    3ff4:	f3af 8000 	nop.w
    3ff8:	f3af 8000 	nop.w
    3ffc:	f3af 8000 	nop.w

00004000 <HAL_SPI_RxCpltCallback>:
	interrupted = 1;
    4000:	4b35      	ldr	r3, [pc, #212]	; (40d8 <HAL_SPI_RxCpltCallback+0xd8>)
    4002:	2201      	movs	r2, #1
    4004:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4006:	4b35      	ldr	r3, [pc, #212]	; (40dc <HAL_SPI_RxCpltCallback+0xdc>)
    4008:	4283      	cmp	r3, r0
    400a:	d000      	beq.n	400e <HAL_SPI_RxCpltCallback+0xe>
    400c:	4770      	bx	lr
{
    400e:	b510      	push	{r4, lr}
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4010:	4b33      	ldr	r3, [pc, #204]	; (40e0 <HAL_SPI_RxCpltCallback+0xe0>)
    4012:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    4016:	2bfe      	cmp	r3, #254	; 0xfe
    4018:	d104      	bne.n	4024 <HAL_SPI_RxCpltCallback+0x24>
    401a:	4b31      	ldr	r3, [pc, #196]	; (40e0 <HAL_SPI_RxCpltCallback+0xe0>)
    401c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    4020:	2bfd      	cmp	r3, #253	; 0xfd
    4022:	d057      	beq.n	40d4 <HAL_SPI_RxCpltCallback+0xd4>
			HAL_SPI_Abort(&hspi5);
    4024:	4c2d      	ldr	r4, [pc, #180]	; (40dc <HAL_SPI_RxCpltCallback+0xdc>)
    4026:	4620      	mov	r0, r4
    4028:	f005 fbf2 	bl	9810 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    402c:	4b2d      	ldr	r3, [pc, #180]	; (40e4 <HAL_SPI_RxCpltCallback+0xe4>)
    402e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4032:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4036:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    403a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    403e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4042:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4046:	f005 fc0f 	bl	9868 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    404a:	6822      	ldr	r2, [r4, #0]
    404c:	6813      	ldr	r3, [r2, #0]
    404e:	f043 0301 	orr.w	r3, r3, #1
    4052:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4054:	2240      	movs	r2, #64	; 0x40
    4056:	4924      	ldr	r1, [pc, #144]	; (40e8 <HAL_SPI_RxCpltCallback+0xe8>)
    4058:	4620      	mov	r0, r4
    405a:	f005 fd1d 	bl	9a98 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    405e:	4a23      	ldr	r2, [pc, #140]	; (40ec <HAL_SPI_RxCpltCallback+0xec>)
    4060:	7813      	ldrb	r3, [r2, #0]
    4062:	3301      	adds	r3, #1
    4064:	b2db      	uxtb	r3, r3
    4066:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4068:	4b1f      	ldr	r3, [pc, #124]	; (40e8 <HAL_SPI_RxCpltCallback+0xe8>)
    406a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    406e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4072:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4074:	491e      	ldr	r1, [pc, #120]	; (40f0 <HAL_SPI_RxCpltCallback+0xf0>)
    4076:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    407a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    407c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    407e:	2a00      	cmp	r2, #0
    4080:	dcf8      	bgt.n	4074 <HAL_SPI_RxCpltCallback+0x74>
    4082:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4086:	f3bf 8f6f 	isb	sy
}
    408a:	bd10      	pop	{r4, pc}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    408c:	4819      	ldr	r0, [pc, #100]	; (40f4 <HAL_SPI_RxCpltCallback+0xf4>)
    408e:	6803      	ldr	r3, [r0, #0]
    4090:	4413      	add	r3, r2
    4092:	005b      	lsls	r3, r3, #1
    4094:	3321      	adds	r3, #33	; 0x21
    4096:	4912      	ldr	r1, [pc, #72]	; (40e0 <HAL_SPI_RxCpltCallback+0xe0>)
    4098:	440b      	add	r3, r1
    409a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    409e:	6803      	ldr	r3, [r0, #0]
    40a0:	4413      	add	r3, r2
    40a2:	3311      	adds	r3, #17
    40a4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    40a8:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    40ac:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    40b0:	b29b      	uxth	r3, r3
    40b2:	4911      	ldr	r1, [pc, #68]	; (40f8 <HAL_SPI_RxCpltCallback+0xf8>)
    40b4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    40b8:	3201      	adds	r2, #1
    40ba:	4b10      	ldr	r3, [pc, #64]	; (40fc <HAL_SPI_RxCpltCallback+0xfc>)
    40bc:	781b      	ldrb	r3, [r3, #0]
    40be:	4293      	cmp	r3, r2
    40c0:	d8e4      	bhi.n	408c <HAL_SPI_RxCpltCallback+0x8c>
			newPluck = 1;
    40c2:	4b0f      	ldr	r3, [pc, #60]	; (4100 <HAL_SPI_RxCpltCallback+0x100>)
    40c4:	2201      	movs	r2, #1
    40c6:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    40c8:	2240      	movs	r2, #64	; 0x40
    40ca:	4907      	ldr	r1, [pc, #28]	; (40e8 <HAL_SPI_RxCpltCallback+0xe8>)
    40cc:	4803      	ldr	r0, [pc, #12]	; (40dc <HAL_SPI_RxCpltCallback+0xdc>)
    40ce:	f005 fce3 	bl	9a98 <__HAL_SPI_Receive_DMA_veneer>
    40d2:	e7c9      	b.n	4068 <HAL_SPI_RxCpltCallback+0x68>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    40d4:	2200      	movs	r2, #0
    40d6:	e7f0      	b.n	40ba <HAL_SPI_RxCpltCallback+0xba>
    40d8:	200051d8 	.word	0x200051d8
    40dc:	2001cde8 	.word	0x2001cde8
    40e0:	38000000 	.word	0x38000000
    40e4:	58024400 	.word	0x58024400
    40e8:	38000040 	.word	0x38000040
    40ec:	200191d9 	.word	0x200191d9
    40f0:	e000ed00 	.word	0xe000ed00
    40f4:	200051cc 	.word	0x200051cc
    40f8:	2001420c 	.word	0x2001420c
    40fc:	20000694 	.word	0x20000694
    4100:	200052f0 	.word	0x200052f0
    4104:	f3af 8000 	nop.w
    4108:	f3af 8000 	nop.w
    410c:	f3af 8000 	nop.w
    4110:	f3af 8000 	nop.w
    4114:	f3af 8000 	nop.w
    4118:	f3af 8000 	nop.w
    411c:	f3af 8000 	nop.w

00004120 <HAL_SPI_RxHalfCpltCallback>:
	interrupted = 1;
    4120:	4b35      	ldr	r3, [pc, #212]	; (41f8 <HAL_SPI_RxHalfCpltCallback+0xd8>)
    4122:	2201      	movs	r2, #1
    4124:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4126:	4b35      	ldr	r3, [pc, #212]	; (41fc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    4128:	4283      	cmp	r3, r0
    412a:	d000      	beq.n	412e <HAL_SPI_RxHalfCpltCallback+0xe>
    412c:	4770      	bx	lr
{
    412e:	b510      	push	{r4, lr}
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4130:	4b33      	ldr	r3, [pc, #204]	; (4200 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    4132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    4136:	2bfe      	cmp	r3, #254	; 0xfe
    4138:	d104      	bne.n	4144 <HAL_SPI_RxHalfCpltCallback+0x24>
    413a:	4b31      	ldr	r3, [pc, #196]	; (4200 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    413c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    4140:	2bfd      	cmp	r3, #253	; 0xfd
    4142:	d057      	beq.n	41f4 <HAL_SPI_RxHalfCpltCallback+0xd4>
			HAL_SPI_Abort(&hspi5);
    4144:	4c2d      	ldr	r4, [pc, #180]	; (41fc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    4146:	4620      	mov	r0, r4
    4148:	f005 fb62 	bl	9810 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    414c:	4b2d      	ldr	r3, [pc, #180]	; (4204 <HAL_SPI_RxHalfCpltCallback+0xe4>)
    414e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4152:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4156:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    415a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    415e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4162:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4166:	f005 fb7f 	bl	9868 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    416a:	6822      	ldr	r2, [r4, #0]
    416c:	6813      	ldr	r3, [r2, #0]
    416e:	f043 0301 	orr.w	r3, r3, #1
    4172:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4174:	2240      	movs	r2, #64	; 0x40
    4176:	4924      	ldr	r1, [pc, #144]	; (4208 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    4178:	4620      	mov	r0, r4
    417a:	f005 fc8d 	bl	9a98 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    417e:	4a23      	ldr	r2, [pc, #140]	; (420c <HAL_SPI_RxHalfCpltCallback+0xec>)
    4180:	7813      	ldrb	r3, [r2, #0]
    4182:	3301      	adds	r3, #1
    4184:	b2db      	uxtb	r3, r3
    4186:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4188:	4b1f      	ldr	r3, [pc, #124]	; (4208 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    418a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    418e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4192:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4194:	491e      	ldr	r1, [pc, #120]	; (4210 <HAL_SPI_RxHalfCpltCallback+0xf0>)
    4196:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    419a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    419c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    419e:	2a00      	cmp	r2, #0
    41a0:	dcf8      	bgt.n	4194 <HAL_SPI_RxHalfCpltCallback+0x74>
    41a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41a6:	f3bf 8f6f 	isb	sy
}
    41aa:	bd10      	pop	{r4, pc}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    41ac:	4819      	ldr	r0, [pc, #100]	; (4214 <HAL_SPI_RxHalfCpltCallback+0xf4>)
    41ae:	6803      	ldr	r3, [r0, #0]
    41b0:	4413      	add	r3, r2
    41b2:	005b      	lsls	r3, r3, #1
    41b4:	3301      	adds	r3, #1
    41b6:	4912      	ldr	r1, [pc, #72]	; (4200 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    41b8:	440b      	add	r3, r1
    41ba:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    41be:	6803      	ldr	r3, [r0, #0]
    41c0:	4413      	add	r3, r2
    41c2:	3301      	adds	r3, #1
    41c4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    41c8:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    41cc:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    41d0:	b29b      	uxth	r3, r3
    41d2:	4911      	ldr	r1, [pc, #68]	; (4218 <HAL_SPI_RxHalfCpltCallback+0xf8>)
    41d4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    41d8:	3201      	adds	r2, #1
    41da:	4b10      	ldr	r3, [pc, #64]	; (421c <HAL_SPI_RxHalfCpltCallback+0xfc>)
    41dc:	781b      	ldrb	r3, [r3, #0]
    41de:	4293      	cmp	r3, r2
    41e0:	d8e4      	bhi.n	41ac <HAL_SPI_RxHalfCpltCallback+0x8c>
			newPluck = 1;
    41e2:	4b0f      	ldr	r3, [pc, #60]	; (4220 <HAL_SPI_RxHalfCpltCallback+0x100>)
    41e4:	2201      	movs	r2, #1
    41e6:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    41e8:	2240      	movs	r2, #64	; 0x40
    41ea:	4907      	ldr	r1, [pc, #28]	; (4208 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    41ec:	4803      	ldr	r0, [pc, #12]	; (41fc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    41ee:	f005 fc53 	bl	9a98 <__HAL_SPI_Receive_DMA_veneer>
    41f2:	e7c9      	b.n	4188 <HAL_SPI_RxHalfCpltCallback+0x68>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    41f4:	2200      	movs	r2, #0
    41f6:	e7f0      	b.n	41da <HAL_SPI_RxHalfCpltCallback+0xba>
    41f8:	200051d8 	.word	0x200051d8
    41fc:	2001cde8 	.word	0x2001cde8
    4200:	38000000 	.word	0x38000000
    4204:	58024400 	.word	0x58024400
    4208:	38000040 	.word	0x38000040
    420c:	200191d9 	.word	0x200191d9
    4210:	e000ed00 	.word	0xe000ed00
    4214:	200051cc 	.word	0x200051cc
    4218:	2001420c 	.word	0x2001420c
    421c:	20000694 	.word	0x20000694
    4220:	200052f0 	.word	0x200052f0
	...

00004240 <audioInitString1>:
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
	if (whichStringModelLoaded != String1Loaded)
    4240:	4b2c      	ldr	r3, [pc, #176]	; (42f4 <audioInitString1+0xb4>)
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2b01      	cmp	r3, #1
    4246:	d053      	beq.n	42f0 <audioInitString1+0xb0>
{
    4248:	b570      	push	{r4, r5, r6, lr}
    424a:	ed2d 8b02 	vpush	{d8}
	{

		if (whichStringModelLoaded == String2Loaded)
    424e:	2b02      	cmp	r3, #2
    4250:	d003      	beq.n	425a <audioInitString1+0x1a>
		{
			audioFreeString2();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    4252:	2b04      	cmp	r3, #4
    4254:	d004      	beq.n	4260 <audioInitString1+0x20>
{
    4256:	2500      	movs	r5, #0
    4258:	e040      	b.n	42dc <audioInitString1+0x9c>
			audioFreeString2();
    425a:	f000 fc11 	bl	4a80 <audioFreeString2>
    425e:	e7fa      	b.n	4256 <audioInitString1+0x16>
		{
			audioFreeSynth();
    4260:	f005 fa7e 	bl	9760 <__audioFreeSynth_veneer>
    4264:	e7f7      	b.n	4256 <audioInitString1+0x16>
		}

		for (int v = 0; v < numStringsThisBoard; v++)
		{

			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4266:	00ae      	lsls	r6, r5, #2
    4268:	4c23      	ldr	r4, [pc, #140]	; (42f8 <audioInitString1+0xb8>)
    426a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    426e:	ed9f 2a23 	vldr	s4, [pc, #140]	; 42fc <audioInitString1+0xbc>
    4272:	ed9f 8a23 	vldr	s16, [pc, #140]	; 4300 <audioInitString1+0xc0>
    4276:	4b23      	ldr	r3, [pc, #140]	; (4304 <audioInitString1+0xc4>)
    4278:	2200      	movs	r2, #0
    427a:	eef0 2a42 	vmov.f32	s5, s4
    427e:	eef0 1a48 	vmov.f32	s3, s16
    4282:	ed9f 1a21 	vldr	s2, [pc, #132]	; 4308 <audioInitString1+0xc8>
    4286:	eddf 0a21 	vldr	s1, [pc, #132]	; 430c <audioInitString1+0xcc>
    428a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 4310 <audioInitString1+0xd0>
    428e:	2104      	movs	r1, #4
    4290:	4620      	mov	r0, r4
    4292:	f005 fbfd 	bl	9a90 <__tSimpleLivingString3_initToPool_veneer>
														 0.99999f, 0.0f, 0.01f,
													 0.01f, 0, &mediumPool);
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4296:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4314 <audioInitString1+0xd4>
    429a:	4620      	mov	r0, r4
    429c:	f005 f9bc 	bl	9618 <__tSimpleLivingString3_setTargetLev_veneer>
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    42a0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 4318 <audioInitString1+0xd8>
    42a4:	4620      	mov	r0, r4
    42a6:	f005 f9b3 	bl	9610 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    42aa:	eeb0 0a48 	vmov.f32	s0, s16
    42ae:	4620      	mov	r0, r4
    42b0:	f005 fb12 	bl	98d8 <__tSimpleLivingString3_setLevStrength_veneer>
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    42b4:	2101      	movs	r1, #1
    42b6:	4620      	mov	r0, r4
    42b8:	f005 fa32 	bl	9720 <__tSimpleLivingString3_setLevMode_veneer>
			tPickupNonLinearity_init(&pu[v], &leaf);
    42bc:	4c17      	ldr	r4, [pc, #92]	; (431c <audioInitString1+0xdc>)
    42be:	4621      	mov	r1, r4
    42c0:	4817      	ldr	r0, [pc, #92]	; (4320 <audioInitString1+0xe0>)
    42c2:	4430      	add	r0, r6
    42c4:	f005 fa58 	bl	9778 <__tPickupNonLinearity_init_veneer>
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    42c8:	4621      	mov	r1, r4
    42ca:	eddf 0a16 	vldr	s1, [pc, #88]	; 4324 <audioInitString1+0xe4>
    42ce:	ed9f 0a16 	vldr	s0, [pc, #88]	; 4328 <audioInitString1+0xe8>
    42d2:	4816      	ldr	r0, [pc, #88]	; (432c <audioInitString1+0xec>)
    42d4:	4430      	add	r0, r6
    42d6:	f005 fa83 	bl	97e0 <__tExpSmooth_init_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    42da:	3501      	adds	r5, #1
    42dc:	4b14      	ldr	r3, [pc, #80]	; (4330 <audioInitString1+0xf0>)
    42de:	781b      	ldrb	r3, [r3, #0]
    42e0:	42ab      	cmp	r3, r5
    42e2:	dcc0      	bgt.n	4266 <audioInitString1+0x26>
		}
		whichStringModelLoaded = String1Loaded;
    42e4:	4b03      	ldr	r3, [pc, #12]	; (42f4 <audioInitString1+0xb4>)
    42e6:	2201      	movs	r2, #1
    42e8:	701a      	strb	r2, [r3, #0]
	}

}
    42ea:	ecbd 8b02 	vpop	{d8}
    42ee:	bd70      	pop	{r4, r5, r6, pc}
    42f0:	4770      	bx	lr
    42f2:	bf00      	nop
    42f4:	20014269 	.word	0x20014269
    42f8:	2001ce70 	.word	0x2001ce70
    42fc:	3c23d70a 	.word	0x3c23d70a
    4300:	00000000 	.word	0x00000000
    4304:	200052e8 	.word	0x200052e8
    4308:	3f7fff58 	.word	0x3f7fff58
    430c:	4684d000 	.word	0x4684d000
    4310:	435c0000 	.word	0x435c0000
    4314:	3d40c0f0 	.word	0x3d40c0f0
    4318:	3cf753bf 	.word	0x3cf753bf
    431c:	20005294 	.word	0x20005294
    4320:	2001ce80 	.word	0x2001ce80
    4324:	3f19999a 	.word	0x3f19999a
    4328:	42800000 	.word	0x42800000
    432c:	2001ce78 	.word	0x2001ce78
    4330:	20000694 	.word	0x20000694
    4334:	f3af 8000 	nop.w
    4338:	f3af 8000 	nop.w
    433c:	f3af 8000 	nop.w

00004340 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    4340:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4342:	2400      	movs	r4, #0
    4344:	e00e      	b.n	4364 <audioFreeString1+0x24>
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    4346:	00a5      	lsls	r5, r4, #2
    4348:	4809      	ldr	r0, [pc, #36]	; (4370 <audioFreeString1+0x30>)
    434a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    434e:	f005 f91b 	bl	9588 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    4352:	4808      	ldr	r0, [pc, #32]	; (4374 <audioFreeString1+0x34>)
    4354:	4428      	add	r0, r5
    4356:	f005 fa33 	bl	97c0 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    435a:	4807      	ldr	r0, [pc, #28]	; (4378 <audioFreeString1+0x38>)
    435c:	4428      	add	r0, r5
    435e:	f005 f927 	bl	95b0 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4362:	3401      	adds	r4, #1
    4364:	4b05      	ldr	r3, [pc, #20]	; (437c <audioFreeString1+0x3c>)
    4366:	781b      	ldrb	r3, [r3, #0]
    4368:	42a3      	cmp	r3, r4
    436a:	dcec      	bgt.n	4346 <audioFreeString1+0x6>
	}
}
    436c:	bd38      	pop	{r3, r4, r5, pc}
    436e:	bf00      	nop
    4370:	2001ce78 	.word	0x2001ce78
    4374:	2001ce70 	.word	0x2001ce70
    4378:	2001ce80 	.word	0x2001ce80
    437c:	20000694 	.word	0x20000694

00004380 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    4380:	b538      	push	{r3, r4, r5, lr}

	audioInitString1();
    4382:	f7ff ff5d 	bl	4240 <audioInitString1>
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    4386:	2400      	movs	r4, #0
    4388:	e00b      	b.n	43a2 <audioSwitchToString1+0x22>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);

		if (voice == 63)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    438a:	4b17      	ldr	r3, [pc, #92]	; (43e8 <audioSwitchToString1+0x68>)
    438c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4390:	ed93 0a00 	vldr	s0, [r3]
    4394:	4628      	mov	r0, r5
    4396:	f005 f98b 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    439a:	4b14      	ldr	r3, [pc, #80]	; (43ec <audioSwitchToString1+0x6c>)
    439c:	2201      	movs	r2, #1
    439e:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    43a0:	4414      	add	r4, r2
    43a2:	2c0b      	cmp	r4, #11
    43a4:	dc14      	bgt.n	43d0 <audioSwitchToString1+0x50>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    43a6:	4d12      	ldr	r5, [pc, #72]	; (43f0 <audioSwitchToString1+0x70>)
    43a8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    43ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 43f4 <audioSwitchToString1+0x74>
    43b0:	4628      	mov	r0, r5
    43b2:	f005 f9a1 	bl	96f8 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    43b6:	4b10      	ldr	r3, [pc, #64]	; (43f8 <audioSwitchToString1+0x78>)
    43b8:	681b      	ldr	r3, [r3, #0]
    43ba:	2b3f      	cmp	r3, #63	; 0x3f
    43bc:	d0e5      	beq.n	438a <audioSwitchToString1+0xa>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    43be:	4b0f      	ldr	r3, [pc, #60]	; (43fc <audioSwitchToString1+0x7c>)
    43c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    43c4:	ed93 0a00 	vldr	s0, [r3]
    43c8:	4628      	mov	r0, r5
    43ca:	f005 f971 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
    43ce:	e7e4      	b.n	439a <audioSwitchToString1+0x1a>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    43d0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 4400 <audioSwitchToString1+0x80>
    43d4:	480b      	ldr	r0, [pc, #44]	; (4404 <audioSwitchToString1+0x84>)
    43d6:	f005 fa0f 	bl	97f8 <__tVZFilter_setFreq_veneer>
	audioFrameFunction = audioFrameString1;
    43da:	4b0b      	ldr	r3, [pc, #44]	; (4408 <audioSwitchToString1+0x88>)
    43dc:	4a0b      	ldr	r2, [pc, #44]	; (440c <audioSwitchToString1+0x8c>)
    43de:	601a      	str	r2, [r3, #0]
	presetReady = 1;
    43e0:	4b0b      	ldr	r3, [pc, #44]	; (4410 <audioSwitchToString1+0x90>)
    43e2:	2201      	movs	r2, #1
    43e4:	601a      	str	r2, [r3, #0]
}
    43e6:	bd38      	pop	{r3, r4, r5, pc}
    43e8:	200006b8 	.word	0x200006b8
    43ec:	200051dc 	.word	0x200051dc
    43f0:	20005240 	.word	0x20005240
    43f4:	3a83126f 	.word	0x3a83126f
    43f8:	20014258 	.word	0x20014258
    43fc:	20018540 	.word	0x20018540
    4400:	45504000 	.word	0x45504000
    4404:	200052f8 	.word	0x200052f8
    4408:	20001190 	.word	0x20001190
    440c:	00004761 	.word	0x00004761
    4410:	20005354 	.word	0x20005354
    4414:	f3af 8000 	nop.w
    4418:	f3af 8000 	nop.w
    441c:	f3af 8000 	nop.w

00004420 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    4420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4424:	ed2d 8b04 	vpush	{d8-d9}
    4428:	af00      	add	r7, sp, #0
	float temp = 0.0f;
	float note[numStringsThisBoard];
    442a:	4ba4      	ldr	r3, [pc, #656]	; (46bc <audioTickString1+0x29c>)
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	009b      	lsls	r3, r3, #2
    4430:	3307      	adds	r3, #7
    4432:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    4436:	ebad 0d03 	sub.w	sp, sp, r3
    443a:	466e      	mov	r6, sp

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    443c:	48a0      	ldr	r0, [pc, #640]	; (46c0 <audioTickString1+0x2a0>)
    443e:	f005 f897 	bl	9570 <__tExpSmooth_tick_veneer>
    4442:	eeb0 9a40 	vmov.f32	s18, s0

	for (int i = 0; i < 12; i++)
    4446:	2400      	movs	r4, #0
    4448:	e00a      	b.n	4460 <audioTickString1+0x40>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    444a:	00a5      	lsls	r5, r4, #2
    444c:	489d      	ldr	r0, [pc, #628]	; (46c4 <audioTickString1+0x2a4>)
    444e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4452:	f005 f88d 	bl	9570 <__tExpSmooth_tick_veneer>
    4456:	4b9c      	ldr	r3, [pc, #624]	; (46c8 <audioTickString1+0x2a8>)
    4458:	442b      	add	r3, r5
    445a:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    445e:	3401      	adds	r4, #1
    4460:	2c0b      	cmp	r4, #11
    4462:	ddf2      	ble.n	444a <audioTickString1+0x2a>
	}
	pluckPos = knobScaled[9];
    4464:	4b98      	ldr	r3, [pc, #608]	; (46c8 <audioTickString1+0x2a8>)
    4466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4468:	4b98      	ldr	r3, [pc, #608]	; (46cc <audioTickString1+0x2ac>)
    446a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < numStringsThisBoard; i++)
    446c:	2400      	movs	r4, #0
	float temp = 0.0f;
    446e:	eddf 8a98 	vldr	s17, [pc, #608]	; 46d0 <audioTickString1+0x2b0>
	for (int i = 0; i < numStringsThisBoard; i++)
    4472:	e057      	b.n	4524 <audioTickString1+0x104>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
    4474:	2200      	movs	r2, #0
    4476:	601a      	str	r2, [r3, #0]
    4478:	e06e      	b.n	4558 <audioTickString1+0x138>
		{
			note[i] = 127.0f;
		}
		if (isnan(note[i]))
		{
			note[i] = 64.0f;
    447a:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    447e:	601a      	str	r2, [r3, #0]
    4480:	e081      	b.n	4586 <audioTickString1+0x166>
		}

		//float finalFreq = mtof(note[i]);
		float dampFreq = 15778.3f;
		float decay = 0.1f;
    4482:	ed9f 8a94 	vldr	s16, [pc, #592]	; 46d4 <audioTickString1+0x2b4>
    4486:	e08e      	b.n	45a6 <audioTickString1+0x186>



inline Lfloat mtof(Lfloat f)
{
    if (f <= -1500.0f) return(0);
    4488:	ed9f 0a91 	vldr	s0, [pc, #580]	; 46d0 <audioTickString1+0x2b0>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
		livStr[i]->rippleDelay = knobScaled[11];
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    448c:	4640      	mov	r0, r8
    448e:	f005 f8cf 	bl	9630 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    4492:	4640      	mov	r0, r8
    4494:	f005 f86c 	bl	9570 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4498:	4628      	mov	r0, r5
    449a:	f005 f971 	bl	9780 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    449e:	4b8e      	ldr	r3, [pc, #568]	; (46d8 <audioTickString1+0x2b8>)
    44a0:	ed93 0a00 	vldr	s0, [r3]
    44a4:	4b8d      	ldr	r3, [pc, #564]	; (46dc <audioTickString1+0x2bc>)
    44a6:	edd3 7a00 	vldr	s15, [r3]
    44aa:	ee30 0a67 	vsub.f32	s0, s0, s15
    44ae:	eeb0 0ac0 	vabs.f32	s0, s0
		if (barDelta > 0.2f)
    44b2:	eddf 7a8b 	vldr	s15, [pc, #556]	; 46e0 <audioTickString1+0x2c0>
    44b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    44ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44be:	dd01      	ble.n	44c4 <audioTickString1+0xa4>
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
    44c0:	ed9f 0a83 	vldr	s0, [pc, #524]	; 46d0 <audioTickString1+0x2b0>
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    44c4:	ea4f 0984 	mov.w	r9, r4, lsl #2
    44c8:	4b86      	ldr	r3, [pc, #536]	; (46e4 <audioTickString1+0x2c4>)
    44ca:	eb03 0884 	add.w	r8, r3, r4, lsl #2
    44ce:	4640      	mov	r0, r8
    44d0:	f005 f8ae 	bl	9630 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    44d4:	4640      	mov	r0, r8
    44d6:	f005 f84b 	bl	9570 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    44da:	4883      	ldr	r0, [pc, #524]	; (46e8 <audioTickString1+0x2c8>)
    44dc:	4448      	add	r0, r9
    44de:	f005 f837 	bl	9550 <__tEnvelopeFollower_tick_veneer>
    44e2:	eeb0 8a40 	vmov.f32	s16, s0
		prevBarInMIDI[0] = barInMIDI[0];
    44e6:	4b7c      	ldr	r3, [pc, #496]	; (46d8 <audioTickString1+0x2b8>)
    44e8:	681a      	ldr	r2, [r3, #0]
    44ea:	4b7c      	ldr	r3, [pc, #496]	; (46dc <audioTickString1+0x2bc>)
    44ec:	601a      	str	r2, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    44ee:	487f      	ldr	r0, [pc, #508]	; (46ec <audioTickString1+0x2cc>)
    44f0:	f005 fa36 	bl	9960 <__tNoise_tick_veneer>
    44f4:	487e      	ldr	r0, [pc, #504]	; (46f0 <audioTickString1+0x2d0>)
    44f6:	f005 fa3f 	bl	9978 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    44fa:	ee28 8a00 	vmul.f32	s16, s16, s0
    44fe:	4b72      	ldr	r3, [pc, #456]	; (46c8 <audioTickString1+0x2a8>)
    4500:	edd3 7a01 	vldr	s15, [r3, #4]
    4504:	ee28 8a27 	vmul.f32	s16, s16, s15

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4508:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    450c:	ee28 0a00 	vmul.f32	s0, s16, s0
    4510:	4628      	mov	r0, r5
    4512:	f005 f959 	bl	97c8 <__tSimpleLivingString3_tick_veneer>
    4516:	4877      	ldr	r0, [pc, #476]	; (46f4 <audioTickString1+0x2d4>)
    4518:	4448      	add	r0, r9
    451a:	f005 f935 	bl	9788 <__tPickupNonLinearity_tick_veneer>
    451e:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4522:	3401      	adds	r4, #1
    4524:	4b65      	ldr	r3, [pc, #404]	; (46bc <audioTickString1+0x29c>)
    4526:	781b      	ldrb	r3, [r3, #0]
    4528:	42a3      	cmp	r3, r4
    452a:	f340 8094 	ble.w	4656 <audioTickString1+0x236>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    452e:	4b72      	ldr	r3, [pc, #456]	; (46f8 <audioTickString1+0x2d8>)
    4530:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4534:	edd3 7a00 	vldr	s15, [r3]
    4538:	4b70      	ldr	r3, [pc, #448]	; (46fc <audioTickString1+0x2dc>)
    453a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    453e:	ed93 7a00 	vldr	s14, [r3]
    4542:	ee77 7a87 	vadd.f32	s15, s15, s14
    4546:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    454a:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
    454e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4556:	d48d      	bmi.n	4474 <audioTickString1+0x54>
		if (note[i] > 127.0f)
    4558:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    455c:	ed93 7a00 	vldr	s14, [r3]
    4560:	eddf 7a67 	vldr	s15, [pc, #412]	; 4700 <audioTickString1+0x2e0>
    4564:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    456c:	dd01      	ble.n	4572 <audioTickString1+0x152>
			note[i] = 127.0f;
    456e:	edc3 7a00 	vstr	s15, [r3]
		if (isnan(note[i]))
    4572:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    4576:	edd3 7a00 	vldr	s15, [r3]
    457a:	eef4 7a67 	vcmp.f32	s15, s15
    457e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4582:	f5bf af7a 	bvs.w	447a <audioTickString1+0x5a>
		if (lsDecay[i])
    4586:	4b5f      	ldr	r3, [pc, #380]	; (4704 <audioTickString1+0x2e4>)
    4588:	5d1b      	ldrb	r3, [r3, r4]
    458a:	2b00      	cmp	r3, #0
    458c:	f43f af79 	beq.w	4482 <audioTickString1+0x62>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    4590:	4b4d      	ldr	r3, [pc, #308]	; (46c8 <audioTickString1+0x2a8>)
    4592:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    4596:	eddf 7a5c 	vldr	s15, [pc, #368]	; 4708 <audioTickString1+0x2e8>
    459a:	ee28 8a27 	vmul.f32	s16, s16, s15
    459e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    45a2:	ee38 8a27 	vadd.f32	s16, s16, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    45a6:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 4748 <audioTickString1+0x328>
    45aa:	ea4f 0984 	mov.w	r9, r4, lsl #2
    45ae:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
    45b2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 46c8 <audioTickString1+0x2a8>
    45b6:	ed98 0a08 	vldr	s0, [r8, #32]
    45ba:	4628      	mov	r0, r5
    45bc:	f005 f814 	bl	95e8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    45c0:	eeb0 0a48 	vmov.f32	s0, s16
    45c4:	4628      	mov	r0, r5
    45c6:	f005 f8bb 	bl	9740 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    45ca:	ed9f 0a50 	vldr	s0, [pc, #320]	; 470c <audioTickString1+0x2ec>
    45ce:	4628      	mov	r0, r5
    45d0:	f005 f886 	bl	96e0 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    45d4:	ed98 0a00 	vldr	s0, [r8]
    45d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 4710 <audioTickString1+0x2f0>
    45dc:	ee20 0a27 	vmul.f32	s0, s0, s15
    45e0:	4628      	mov	r0, r5
    45e2:	f005 f979 	bl	98d8 <__tSimpleLivingString3_setLevStrength_veneer>
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    45e6:	edd8 7a05 	vldr	s15, [r8, #20]
    45ea:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    45ee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 4714 <audioTickString1+0x2f4>
    45f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    45f6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    45fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    45fe:	ee77 7a87 	vadd.f32	s15, s15, s14
    4602:	eec7 6a27 	vdiv.f32	s13, s14, s15
    4606:	edc3 6a1b 	vstr	s13, [r3, #108]	; 0x6c
		livStr[i]->rippleDelay = knobScaled[11];
    460a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    460e:	669a      	str	r2, [r3, #104]	; 0x68
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    4610:	4b41      	ldr	r3, [pc, #260]	; (4718 <audioTickString1+0x2f8>)
    4612:	eb03 0809 	add.w	r8, r3, r9
    4616:	44b1      	add	r9, r6
    4618:	edd9 7a00 	vldr	s15, [r9]
    461c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 471c <audioTickString1+0x2fc>
    4620:	eef4 7ac7 	vcmpe.f32	s15, s14
    4624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4628:	f67f af2e 	bls.w	4488 <audioTickString1+0x68>
    else if (f > 1499.0f) return(mtof(1499.0f));
    462c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 4720 <audioTickString1+0x300>
    4630:	eef4 7ac7 	vcmpe.f32	s15, s14
    4634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4638:	dc0a      	bgt.n	4650 <audioTickString1+0x230>
    else return (8.17579891564f * expf(0.0577622650f * f));
    463a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 4724 <audioTickString1+0x304>
    463e:	ee27 0a80 	vmul.f32	s0, s15, s0
    4642:	f004 ffc9 	bl	95d8 <__expf_veneer>
    4646:	eddf 7a38 	vldr	s15, [pc, #224]	; 4728 <audioTickString1+0x308>
    464a:	ee20 0a27 	vmul.f32	s0, s0, s15
    464e:	e71d      	b.n	448c <audioTickString1+0x6c>
    else if (f > 1499.0f) return(mtof(1499.0f));
    4650:	ed9f 0a36 	vldr	s0, [pc, #216]	; 472c <audioTickString1+0x30c>
    4654:	e71a      	b.n	448c <audioTickString1+0x6c>
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);

	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    4656:	ed9f 0a36 	vldr	s0, [pc, #216]	; 4730 <audioTickString1+0x310>
    465a:	ee29 0a00 	vmul.f32	s0, s18, s0
    465e:	eddf 7a35 	vldr	s15, [pc, #212]	; 4734 <audioTickString1+0x314>
    4662:	ee30 0a27 	vadd.f32	s0, s0, s15
    4666:	eddf 7a34 	vldr	s15, [pc, #208]	; 4738 <audioTickString1+0x318>
    466a:	ee69 7a27 	vmul.f32	s15, s18, s15
    466e:	ee67 7a89 	vmul.f32	s15, s15, s18
    4672:	ee30 0a67 	vsub.f32	s0, s0, s15
    4676:	eddf 7a31 	vldr	s15, [pc, #196]	; 473c <audioTickString1+0x31c>
    467a:	ee69 7a27 	vmul.f32	s15, s18, s15
    467e:	ee67 7a89 	vmul.f32	s15, s15, s18
    4682:	ee67 7a89 	vmul.f32	s15, s15, s18
    4686:	ee30 0a27 	vadd.f32	s0, s0, s15
    468a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 4740 <audioTickString1+0x320>
    468e:	ee69 7a27 	vmul.f32	s15, s18, s15
    4692:	ee67 7a89 	vmul.f32	s15, s15, s18
    4696:	ee67 7a89 	vmul.f32	s15, s15, s18
    469a:	ee67 7a89 	vmul.f32	s15, s15, s18
    469e:	ee30 0a67 	vsub.f32	s0, s0, s15


	//temp = input;
	temp *= outVol * masterVolFromBrain;
    46a2:	4b28      	ldr	r3, [pc, #160]	; (4744 <audioTickString1+0x324>)
    46a4:	edd3 7a00 	vldr	s15, [r3]
    46a8:	ee20 0a27 	vmul.f32	s0, s0, s15

	return temp;
}
    46ac:	ee20 0a28 	vmul.f32	s0, s0, s17
    46b0:	46bd      	mov	sp, r7
    46b2:	ecbd 8b04 	vpop	{d8-d9}
    46b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46ba:	bf00      	nop
    46bc:	20000694 	.word	0x20000694
    46c0:	20014264 	.word	0x20014264
    46c4:	20005240 	.word	0x20005240
    46c8:	200051f0 	.word	0x200051f0
    46cc:	20000698 	.word	0x20000698
    46d0:	00000000 	.word	0x00000000
    46d4:	3dcccccd 	.word	0x3dcccccd
    46d8:	20001194 	.word	0x20001194
    46dc:	20005358 	.word	0x20005358
    46e0:	3e4ccccd 	.word	0x3e4ccccd
    46e4:	200011a4 	.word	0x200011a4
    46e8:	2000119c 	.word	0x2000119c
    46ec:	200052ec 	.word	0x200052ec
    46f0:	200052f8 	.word	0x200052f8
    46f4:	2001ce80 	.word	0x2001ce80
    46f8:	20014224 	.word	0x20014224
    46fc:	2001422c 	.word	0x2001422c
    4700:	42fe0000 	.word	0x42fe0000
    4704:	200052e4 	.word	0x200052e4
    4708:	44480000 	.word	0x44480000
    470c:	46768933 	.word	0x46768933
    4710:	3d108950 	.word	0x3d108950
    4714:	bcf5c28f 	.word	0xbcf5c28f
    4718:	2001ce78 	.word	0x2001ce78
    471c:	c4bb8000 	.word	0xc4bb8000
    4720:	44bb6000 	.word	0x44bb6000
    4724:	3d6c9820 	.word	0x3d6c9820
    4728:	4102d013 	.word	0x4102d013
    472c:	7f76f0e1 	.word	0x7f76f0e1
    4730:	3ef1ac0b 	.word	0x3ef1ac0b
    4734:	3bdc4213 	.word	0x3bdc4213
    4738:	4022be0a 	.word	0x4022be0a
    473c:	40caa285 	.word	0x40caa285
    4740:	40516313 	.word	0x40516313
    4744:	2000068c 	.word	0x2000068c
    4748:	2001ce70 	.word	0x2001ce70
    474c:	f3af 8000 	nop.w
    4750:	f3af 8000 	nop.w
    4754:	f3af 8000 	nop.w
    4758:	f3af 8000 	nop.w
    475c:	f3af 8000 	nop.w

00004760 <audioFrameString1>:
{
    4760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4762:	4606      	mov	r6, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    4764:	4b85      	ldr	r3, [pc, #532]	; (497c <audioFrameString1+0x21c>)
    4766:	685f      	ldr	r7, [r3, #4]
	if (resetStringInputs)
    4768:	4b85      	ldr	r3, [pc, #532]	; (4980 <audioFrameString1+0x220>)
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	b9c3      	cbnz	r3, 47a0 <audioFrameString1+0x40>
	if (newPluck)
    476e:	4b85      	ldr	r3, [pc, #532]	; (4984 <audioFrameString1+0x224>)
    4770:	681b      	ldr	r3, [r3, #0]
    4772:	2b00      	cmp	r3, #0
    4774:	f040 80d6 	bne.w	4924 <audioFrameString1+0x1c4>
		for (int i = 0; i < numStringsThisBoard; i++)
    4778:	2500      	movs	r5, #0
    477a:	e0eb      	b.n	4954 <audioFrameString1+0x1f4>
			lsDecay[i] = 0;
    477c:	2200      	movs	r2, #0
    477e:	4982      	ldr	r1, [pc, #520]	; (4988 <audioFrameString1+0x228>)
    4780:	54ca      	strb	r2, [r1, r3]
			previousStringInputs[i] = 0;
    4782:	4982      	ldr	r1, [pc, #520]	; (498c <audioFrameString1+0x22c>)
    4784:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4788:	3301      	adds	r3, #1
    478a:	4a81      	ldr	r2, [pc, #516]	; (4990 <audioFrameString1+0x230>)
    478c:	7812      	ldrb	r2, [r2, #0]
    478e:	429a      	cmp	r2, r3
    4790:	dcf4      	bgt.n	477c <audioFrameString1+0x1c>
		resetStringInputs = 0;
    4792:	4b7b      	ldr	r3, [pc, #492]	; (4980 <audioFrameString1+0x220>)
    4794:	2200      	movs	r2, #0
    4796:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    4798:	4b7a      	ldr	r3, [pc, #488]	; (4984 <audioFrameString1+0x224>)
    479a:	2201      	movs	r2, #1
    479c:	601a      	str	r2, [r3, #0]
    479e:	e7e6      	b.n	476e <audioFrameString1+0xe>
		for (int i = 0; i < numStringsThisBoard; i++)
    47a0:	2300      	movs	r3, #0
    47a2:	e7f2      	b.n	478a <audioFrameString1+0x2a>
					note = 0.0f;
    47a4:	eddf 7a7b 	vldr	s15, [pc, #492]	; 4994 <audioFrameString1+0x234>
    47a8:	e080      	b.n	48ac <audioFrameString1+0x14c>
					note = 64.0f;
    47aa:	eddf 7a7b 	vldr	s15, [pc, #492]	; 4998 <audioFrameString1+0x238>
    47ae:	e08c      	b.n	48ca <audioFrameString1+0x16a>
    if (f <= -1500.0f) return(0);
    47b0:	ed9f 0a78 	vldr	s0, [pc, #480]	; 4994 <audioFrameString1+0x234>
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    47b4:	4628      	mov	r0, r5
    47b6:	f004 ff7b 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    47ba:	4628      	mov	r0, r5
    47bc:	f004 fed8 	bl	9570 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    47c0:	4d76      	ldr	r5, [pc, #472]	; (499c <audioFrameString1+0x23c>)
    47c2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    47c6:	4628      	mov	r0, r5
    47c8:	f004 ffda 	bl	9780 <__tSimpleLivingString3_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    47cc:	4b74      	ldr	r3, [pc, #464]	; (49a0 <audioFrameString1+0x240>)
    47ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    47d2:	b29b      	uxth	r3, r3
    47d4:	ee00 3a10 	vmov	s0, r3
    47d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    47dc:	eddf 7a71 	vldr	s15, [pc, #452]	; 49a4 <audioFrameString1+0x244>
    47e0:	ee20 0a27 	vmul.f32	s0, s0, s15
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    47e4:	4b70      	ldr	r3, [pc, #448]	; (49a8 <audioFrameString1+0x248>)
    47e6:	781a      	ldrb	r2, [r3, #0]
    47e8:	4b70      	ldr	r3, [pc, #448]	; (49ac <audioFrameString1+0x24c>)
    47ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    47ee:	edd3 0a00 	vldr	s1, [r3]
    47f2:	4b6f      	ldr	r3, [pc, #444]	; (49b0 <audioFrameString1+0x250>)
    47f4:	edd3 7a00 	vldr	s15, [r3]
    47f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
    47fc:	4b6d      	ldr	r3, [pc, #436]	; (49b4 <audioFrameString1+0x254>)
    47fe:	edd3 6a02 	vldr	s13, [r3, #8]
    4802:	ee60 0aa6 	vmul.f32	s1, s1, s13
    4806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    480a:	ee37 7a66 	vsub.f32	s14, s14, s13
    480e:	ee67 7a87 	vmul.f32	s15, s15, s14
    4812:	ee70 0aa7 	vadd.f32	s1, s1, s15
    if (val < min)
    4816:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    481e:	d40c      	bmi.n	483a <audioFrameString1+0xda>
    else if (val > max)
    4820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4824:	eef4 0ae7 	vcmpe.f32	s1, s15
    4828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    482c:	dd07      	ble.n	483e <audioFrameString1+0xde>
        return max;
    482e:	eef0 0a67 	vmov.f32	s1, s15
    4832:	e004      	b.n	483e <audioFrameString1+0xde>
    else if (f > 1499.0f) return(mtof(1499.0f));
    4834:	ed9f 0a60 	vldr	s0, [pc, #384]	; 49b8 <audioFrameString1+0x258>
    4838:	e7bc      	b.n	47b4 <audioFrameString1+0x54>
        return min;
    483a:	eddf 0a56 	vldr	s1, [pc, #344]	; 4994 <audioFrameString1+0x234>
    483e:	4628      	mov	r0, r5
    4840:	f004 fff6 	bl	9830 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    4844:	4a58      	ldr	r2, [pc, #352]	; (49a8 <audioFrameString1+0x248>)
    4846:	7813      	ldrb	r3, [r2, #0]
    4848:	3301      	adds	r3, #1
    484a:	7013      	strb	r3, [r2, #0]
				lsDecay[i] = 1;
    484c:	4b4e      	ldr	r3, [pc, #312]	; (4988 <audioFrameString1+0x228>)
    484e:	2201      	movs	r2, #1
    4850:	551a      	strb	r2, [r3, r4]
			previousStringInputs[i] = stringInputs[i];
    4852:	4b53      	ldr	r3, [pc, #332]	; (49a0 <audioFrameString1+0x240>)
    4854:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4858:	b29b      	uxth	r3, r3
    485a:	4a4c      	ldr	r2, [pc, #304]	; (498c <audioFrameString1+0x22c>)
    485c:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4860:	3401      	adds	r4, #1
    4862:	4b4b      	ldr	r3, [pc, #300]	; (4990 <audioFrameString1+0x230>)
    4864:	781b      	ldrb	r3, [r3, #0]
    4866:	42a3      	cmp	r3, r4
    4868:	dd5e      	ble.n	4928 <audioFrameString1+0x1c8>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    486a:	4b48      	ldr	r3, [pc, #288]	; (498c <audioFrameString1+0x22c>)
    486c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4870:	b29b      	uxth	r3, r3
    4872:	2b00      	cmp	r3, #0
    4874:	d146      	bne.n	4904 <audioFrameString1+0x1a4>
    4876:	4b4a      	ldr	r3, [pc, #296]	; (49a0 <audioFrameString1+0x240>)
    4878:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    487c:	b29b      	uxth	r3, r3
    487e:	2b00      	cmp	r3, #0
    4880:	d040      	beq.n	4904 <audioFrameString1+0x1a4>
				stringOctave[i] = octave;
    4882:	4b4e      	ldr	r3, [pc, #312]	; (49bc <audioFrameString1+0x25c>)
    4884:	edd3 7a00 	vldr	s15, [r3]
    4888:	4b4d      	ldr	r3, [pc, #308]	; (49c0 <audioFrameString1+0x260>)
    488a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    488e:	edc3 7a00 	vstr	s15, [r3]
				float note = stringMIDIPitches[i] + stringOctave[i];
    4892:	4b4c      	ldr	r3, [pc, #304]	; (49c4 <audioFrameString1+0x264>)
    4894:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4898:	ed93 7a00 	vldr	s14, [r3]
    489c:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (note < 0.0f)
    48a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    48a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48a8:	f53f af7c 	bmi.w	47a4 <audioFrameString1+0x44>
				if (note > 127.0f)
    48ac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 49c8 <audioFrameString1+0x268>
    48b0:	eef4 7ac7 	vcmpe.f32	s15, s14
    48b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48b8:	dd01      	ble.n	48be <audioFrameString1+0x15e>
					note = 127.0f;
    48ba:	eef0 7a47 	vmov.f32	s15, s14
				if (isnan(note))
    48be:	eef4 7a67 	vcmp.f32	s15, s15
    48c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48c6:	f5bf af70 	bvs.w	47aa <audioFrameString1+0x4a>
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    48ca:	4d40      	ldr	r5, [pc, #256]	; (49cc <audioFrameString1+0x26c>)
    48cc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    if (f <= -1500.0f) return(0);
    48d0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 49d0 <audioFrameString1+0x270>
    48d4:	eef4 7ac7 	vcmpe.f32	s15, s14
    48d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48dc:	f67f af68 	bls.w	47b0 <audioFrameString1+0x50>
    else if (f > 1499.0f) return(mtof(1499.0f));
    48e0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 49d4 <audioFrameString1+0x274>
    48e4:	eef4 7ac7 	vcmpe.f32	s15, s14
    48e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48ec:	dca2      	bgt.n	4834 <audioFrameString1+0xd4>
    else return (8.17579891564f * expf(0.0577622650f * f));
    48ee:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 49d8 <audioFrameString1+0x278>
    48f2:	ee27 0a80 	vmul.f32	s0, s15, s0
    48f6:	f004 fe6f 	bl	95d8 <__expf_veneer>
    48fa:	eddf 7a38 	vldr	s15, [pc, #224]	; 49dc <audioFrameString1+0x27c>
    48fe:	ee20 0a27 	vmul.f32	s0, s0, s15
    4902:	e757      	b.n	47b4 <audioFrameString1+0x54>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4904:	4b21      	ldr	r3, [pc, #132]	; (498c <audioFrameString1+0x22c>)
    4906:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    490a:	b29b      	uxth	r3, r3
    490c:	2b00      	cmp	r3, #0
    490e:	d0a0      	beq.n	4852 <audioFrameString1+0xf2>
    4910:	4b23      	ldr	r3, [pc, #140]	; (49a0 <audioFrameString1+0x240>)
    4912:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4916:	b29b      	uxth	r3, r3
    4918:	2b00      	cmp	r3, #0
    491a:	d19a      	bne.n	4852 <audioFrameString1+0xf2>
				lsDecay[i] = 0;
    491c:	4b1a      	ldr	r3, [pc, #104]	; (4988 <audioFrameString1+0x228>)
    491e:	2200      	movs	r2, #0
    4920:	551a      	strb	r2, [r3, r4]
    4922:	e796      	b.n	4852 <audioFrameString1+0xf2>
		for (int i = 0; i < numStringsThisBoard; i++)
    4924:	2400      	movs	r4, #0
    4926:	e79c      	b.n	4862 <audioFrameString1+0x102>
		newPluck = 0;
    4928:	4b16      	ldr	r3, [pc, #88]	; (4984 <audioFrameString1+0x224>)
    492a:	2200      	movs	r2, #0
    492c:	601a      	str	r2, [r3, #0]
    492e:	e723      	b.n	4778 <audioFrameString1+0x18>
		int iplusbuffer = buffer_offset + i;
    4930:	1974      	adds	r4, r6, r5
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    4932:	f7ff fd75 	bl	4420 <audioTickString1>
    4936:	eddf 7a2a 	vldr	s15, [pc, #168]	; 49e0 <audioFrameString1+0x280>
    493a:	ee20 0a27 	vmul.f32	s0, s0, s15
    493e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4942:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer] = current_sample;
    4946:	4a27      	ldr	r2, [pc, #156]	; (49e4 <audioFrameString1+0x284>)
    4948:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    494c:	3401      	adds	r4, #1
    494e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4952:	3502      	adds	r5, #2
    4954:	2d7f      	cmp	r5, #127	; 0x7f
    4956:	ddeb      	ble.n	4930 <audioFrameString1+0x1d0>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4958:	4b08      	ldr	r3, [pc, #32]	; (497c <audioFrameString1+0x21c>)
    495a:	685b      	ldr	r3, [r3, #4]
    495c:	1bdb      	subs	r3, r3, r7
    495e:	4a22      	ldr	r2, [pc, #136]	; (49e8 <audioFrameString1+0x288>)
    4960:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4962:	ee07 3a90 	vmov	s15, r3
    4966:	eef8 7a67 	vcvt.f32.u32	s15, s15
    496a:	4b20      	ldr	r3, [pc, #128]	; (49ec <audioFrameString1+0x28c>)
    496c:	ed93 7a00 	vldr	s14, [r3]
    4970:	ee67 7a87 	vmul.f32	s15, s15, s14
    4974:	4b1e      	ldr	r3, [pc, #120]	; (49f0 <audioFrameString1+0x290>)
    4976:	edc3 7a00 	vstr	s15, [r3]
}
    497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    497c:	e0001000 	.word	0xe0001000
    4980:	20005778 	.word	0x20005778
    4984:	200052f0 	.word	0x200052f0
    4988:	200052e4 	.word	0x200052e4
    498c:	20005360 	.word	0x20005360
    4990:	20000694 	.word	0x20000694
    4994:	00000000 	.word	0x00000000
    4998:	42800000 	.word	0x42800000
    499c:	2001ce70 	.word	0x2001ce70
    49a0:	2001420c 	.word	0x2001420c
    49a4:	37800080 	.word	0x37800080
    49a8:	2001431c 	.word	0x2001431c
    49ac:	20005378 	.word	0x20005378
    49b0:	20000698 	.word	0x20000698
    49b4:	200051f0 	.word	0x200051f0
    49b8:	7f76f0e1 	.word	0x7f76f0e1
    49bc:	200052fc 	.word	0x200052fc
    49c0:	2001422c 	.word	0x2001422c
    49c4:	20014224 	.word	0x20014224
    49c8:	42fe0000 	.word	0x42fe0000
    49cc:	2001ce78 	.word	0x2001ce78
    49d0:	c4bb8000 	.word	0xc4bb8000
    49d4:	44bb6000 	.word	0x44bb6000
    49d8:	3d6c9820 	.word	0x3d6c9820
    49dc:	4102d013 	.word	0x4102d013
    49e0:	4b000000 	.word	0x4b000000
    49e4:	30000000 	.word	0x30000000
    49e8:	2001424c 	.word	0x2001424c
    49ec:	20000684 	.word	0x20000684
    49f0:	200051d4 	.word	0x200051d4
	...

00004a00 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    4a00:	b538      	push	{r3, r4, r5, lr}
	if (whichStringModelLoaded != String2Loaded)
    4a02:	4b16      	ldr	r3, [pc, #88]	; (4a5c <audioInitString2+0x5c>)
    4a04:	781b      	ldrb	r3, [r3, #0]
    4a06:	2b02      	cmp	r3, #2
    4a08:	d027      	beq.n	4a5a <audioInitString2+0x5a>
	{
		if (whichStringModelLoaded == String1Loaded)
    4a0a:	2b01      	cmp	r3, #1
    4a0c:	d003      	beq.n	4a16 <audioInitString2+0x16>
		{
			audioFreeString1();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    4a0e:	2b04      	cmp	r3, #4
    4a10:	d004      	beq.n	4a1c <audioInitString2+0x1c>
{
    4a12:	2400      	movs	r4, #0
    4a14:	e01a      	b.n	4a4c <audioInitString2+0x4c>
			audioFreeString1();
    4a16:	f7ff fc93 	bl	4340 <audioFreeString1>
    4a1a:	e7fa      	b.n	4a12 <audioInitString2+0x12>
		{
			audioFreeSynth();
    4a1c:	f004 fea0 	bl	9760 <__audioFreeSynth_veneer>
    4a20:	e7f7      	b.n	4a12 <audioInitString2+0x12>
		}
		for (int v = 0; v < numStringsThisBoard; v++)
		{
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    4a22:	4d0f      	ldr	r5, [pc, #60]	; (4a60 <audioInitString2+0x60>)
    4a24:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    4a28:	4a0e      	ldr	r2, [pc, #56]	; (4a64 <audioInitString2+0x64>)
    4a2a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    4a2e:	2101      	movs	r1, #1
    4a30:	4628      	mov	r0, r5
    4a32:	f004 fe39 	bl	96a8 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    4a36:	4b0c      	ldr	r3, [pc, #48]	; (4a68 <audioInitString2+0x68>)
    4a38:	6819      	ldr	r1, [r3, #0]
    4a3a:	4421      	add	r1, r4
    4a3c:	2903      	cmp	r1, #3
    4a3e:	bfd4      	ite	le
    4a40:	2100      	movle	r1, #0
    4a42:	2101      	movgt	r1, #1
    4a44:	4628      	mov	r0, r5
    4a46:	f004 ff7b 	bl	9940 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    4a4a:	3401      	adds	r4, #1
    4a4c:	4b07      	ldr	r3, [pc, #28]	; (4a6c <audioInitString2+0x6c>)
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	42a3      	cmp	r3, r4
    4a52:	dce6      	bgt.n	4a22 <audioInitString2+0x22>
		}

		whichStringModelLoaded = String2Loaded;
    4a54:	4b01      	ldr	r3, [pc, #4]	; (4a5c <audioInitString2+0x5c>)
    4a56:	2202      	movs	r2, #2
    4a58:	701a      	strb	r2, [r3, #0]
	}
}
    4a5a:	bd38      	pop	{r3, r4, r5, pc}
    4a5c:	20014269 	.word	0x20014269
    4a60:	2001ce88 	.word	0x2001ce88
    4a64:	200052e8 	.word	0x200052e8
    4a68:	200051cc 	.word	0x200051cc
    4a6c:	20000694 	.word	0x20000694
    4a70:	f3af 8000 	nop.w
    4a74:	f3af 8000 	nop.w
    4a78:	f3af 8000 	nop.w
    4a7c:	f3af 8000 	nop.w

00004a80 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    4a80:	b510      	push	{r4, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4a82:	2400      	movs	r4, #0
    4a84:	e005      	b.n	4a92 <audioFreeString2+0x12>
	{
		tTString_free(&strings[v]);
    4a86:	4805      	ldr	r0, [pc, #20]	; (4a9c <audioFreeString2+0x1c>)
    4a88:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4a8c:	f004 fdec 	bl	9668 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4a90:	3401      	adds	r4, #1
    4a92:	4b03      	ldr	r3, [pc, #12]	; (4aa0 <audioFreeString2+0x20>)
    4a94:	781b      	ldrb	r3, [r3, #0]
    4a96:	42a3      	cmp	r3, r4
    4a98:	dcf5      	bgt.n	4a86 <audioFreeString2+0x6>
	}
}
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	2001ce88 	.word	0x2001ce88
    4aa0:	20000694 	.word	0x20000694
    4aa4:	f3af 8000 	nop.w
    4aa8:	f3af 8000 	nop.w
    4aac:	f3af 8000 	nop.w
    4ab0:	f3af 8000 	nop.w
    4ab4:	f3af 8000 	nop.w
    4ab8:	f3af 8000 	nop.w
    4abc:	f3af 8000 	nop.w

00004ac0 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    4ac0:	b538      	push	{r3, r4, r5, lr}
	//load string2 default params:
	audioInitString2();
    4ac2:	f7ff ff9d 	bl	4a00 <audioInitString2>
	for (int i = 0; i < 20; i++)
    4ac6:	2400      	movs	r4, #0
    4ac8:	e00b      	b.n	4ae2 <audioSwitchToString2+0x22>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		if (voice == 62)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    4aca:	4b15      	ldr	r3, [pc, #84]	; (4b20 <audioSwitchToString2+0x60>)
    4acc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4ad0:	ed93 0a00 	vldr	s0, [r3]
    4ad4:	4628      	mov	r0, r5
    4ad6:	f004 fdeb 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    4ada:	4b12      	ldr	r3, [pc, #72]	; (4b24 <audioSwitchToString2+0x64>)
    4adc:	2201      	movs	r2, #1
    4ade:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 20; i++)
    4ae0:	4414      	add	r4, r2
    4ae2:	2c13      	cmp	r4, #19
    4ae4:	dc14      	bgt.n	4b10 <audioSwitchToString2+0x50>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    4ae6:	4d10      	ldr	r5, [pc, #64]	; (4b28 <audioSwitchToString2+0x68>)
    4ae8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    4aec:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 4b2c <audioSwitchToString2+0x6c>
    4af0:	4628      	mov	r0, r5
    4af2:	f004 fe01 	bl	96f8 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    4af6:	4b0e      	ldr	r3, [pc, #56]	; (4b30 <audioSwitchToString2+0x70>)
    4af8:	681b      	ldr	r3, [r3, #0]
    4afa:	2b3e      	cmp	r3, #62	; 0x3e
    4afc:	d0e5      	beq.n	4aca <audioSwitchToString2+0xa>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    4afe:	4b0d      	ldr	r3, [pc, #52]	; (4b34 <audioSwitchToString2+0x74>)
    4b00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4b04:	ed93 0a00 	vldr	s0, [r3]
    4b08:	4628      	mov	r0, r5
    4b0a:	f004 fdd1 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
    4b0e:	e7e4      	b.n	4ada <audioSwitchToString2+0x1a>
	}
	audioFrameFunction = audioFrameString2;
    4b10:	4b09      	ldr	r3, [pc, #36]	; (4b38 <audioSwitchToString2+0x78>)
    4b12:	4a0a      	ldr	r2, [pc, #40]	; (4b3c <audioSwitchToString2+0x7c>)
    4b14:	601a      	str	r2, [r3, #0]
	presetReady = 1;
    4b16:	4b0a      	ldr	r3, [pc, #40]	; (4b40 <audioSwitchToString2+0x80>)
    4b18:	2201      	movs	r2, #1
    4b1a:	601a      	str	r2, [r3, #0]
}
    4b1c:	bd38      	pop	{r3, r4, r5, pc}
    4b1e:	bf00      	nop
    4b20:	200006e8 	.word	0x200006e8
    4b24:	200051dc 	.word	0x200051dc
    4b28:	20005240 	.word	0x20005240
    4b2c:	3a83126f 	.word	0x3a83126f
    4b30:	20014258 	.word	0x20014258
    4b34:	20018540 	.word	0x20018540
    4b38:	20001190 	.word	0x20001190
    4b3c:	000052a1 	.word	0x000052a1
    4b40:	20005354 	.word	0x20005354
    4b44:	f3af 8000 	nop.w
    4b48:	f3af 8000 	nop.w
    4b4c:	f3af 8000 	nop.w
    4b50:	f3af 8000 	nop.w
    4b54:	f3af 8000 	nop.w
    4b58:	f3af 8000 	nop.w
    4b5c:	f3af 8000 	nop.w

00004b60 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    4b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b62:	ed2d 8b06 	vpush	{d8-d10}
    4b66:	b083      	sub	sp, #12
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4b68:	48a8      	ldr	r0, [pc, #672]	; (4e0c <audioTickString2+0x2ac>)
    4b6a:	f004 fd01 	bl	9570 <__tExpSmooth_tick_veneer>
    4b6e:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 20; i++)
    4b72:	2400      	movs	r4, #0
    4b74:	e00a      	b.n	4b8c <audioTickString2+0x2c>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4b76:	00a5      	lsls	r5, r4, #2
    4b78:	48a5      	ldr	r0, [pc, #660]	; (4e10 <audioTickString2+0x2b0>)
    4b7a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b7e:	f004 fcf7 	bl	9570 <__tExpSmooth_tick_veneer>
    4b82:	4ba4      	ldr	r3, [pc, #656]	; (4e14 <audioTickString2+0x2b4>)
    4b84:	442b      	add	r3, r5
    4b86:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 20; i++)
    4b8a:	3401      	adds	r4, #1
    4b8c:	2c13      	cmp	r4, #19
    4b8e:	ddf2      	ble.n	4b76 <audioTickString2+0x16>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    4b90:	4ba1      	ldr	r3, [pc, #644]	; (4e18 <audioTickString2+0x2b8>)
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	2b00      	cmp	r3, #0
    4b96:	f040 8092 	bne.w	4cbe <audioTickString2+0x15e>
        return max;
    4b9a:	2400      	movs	r4, #0
    4b9c:	ed9f 9a9f 	vldr	s18, [pc, #636]	; 4e1c <audioTickString2+0x2bc>
    4ba0:	e20f      	b.n	4fc2 <audioTickString2+0x462>
				stringOctave[i] = octave;

				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
				if (theNote[i] < 0.0f)
				{
					theNote[i] = 0.0f;
    4ba2:	2200      	movs	r2, #0
    4ba4:	ab02      	add	r3, sp, #8
    4ba6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4baa:	f843 2c08 	str.w	r2, [r3, #-8]
    4bae:	e04f      	b.n	4c50 <audioTickString2+0xf0>
				{
					theNote[i] = 127.0f;
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
    4bb0:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    4bb4:	ab02      	add	r3, sp, #8
    4bb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4bba:	f843 2c08 	str.w	r2, [r3, #-8]
    4bbe:	e062      	b.n	4c86 <audioTickString2+0x126>
				float finalFreq = mtofTableLookup(theNote[i]);
				tTString_setFreq(&strings[i], finalFreq);
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);

			}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4bc0:	4b97      	ldr	r3, [pc, #604]	; (4e20 <audioTickString2+0x2c0>)
    4bc2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bc6:	b29b      	uxth	r3, r3
    4bc8:	b12b      	cbz	r3, 4bd6 <audioTickString2+0x76>
    4bca:	4b96      	ldr	r3, [pc, #600]	; (4e24 <audioTickString2+0x2c4>)
    4bcc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	d06d      	beq.n	4cb2 <audioTickString2+0x152>
			{
				//note off
				tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    4bd6:	4b93      	ldr	r3, [pc, #588]	; (4e24 <audioTickString2+0x2c4>)
    4bd8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bdc:	b29b      	uxth	r3, r3
    4bde:	4a90      	ldr	r2, [pc, #576]	; (4e20 <audioTickString2+0x2c0>)
    4be0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4be4:	3401      	adds	r4, #1
    4be6:	4b90      	ldr	r3, [pc, #576]	; (4e28 <audioTickString2+0x2c8>)
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	42a3      	cmp	r3, r4
    4bec:	dd69      	ble.n	4cc2 <audioTickString2+0x162>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    4bee:	4b8c      	ldr	r3, [pc, #560]	; (4e20 <audioTickString2+0x2c0>)
    4bf0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bf4:	b29b      	uxth	r3, r3
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d1e2      	bne.n	4bc0 <audioTickString2+0x60>
    4bfa:	4b8a      	ldr	r3, [pc, #552]	; (4e24 <audioTickString2+0x2c4>)
    4bfc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4c00:	b29b      	uxth	r3, r3
    4c02:	2b00      	cmp	r3, #0
    4c04:	d0dc      	beq.n	4bc0 <audioTickString2+0x60>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4c06:	4b87      	ldr	r3, [pc, #540]	; (4e24 <audioTickString2+0x2c4>)
    4c08:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4c0c:	b29b      	uxth	r3, r3
    4c0e:	ee08 3a10 	vmov	s16, r3
    4c12:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4c16:	eddf 7a85 	vldr	s15, [pc, #532]	; 4e2c <audioTickString2+0x2cc>
    4c1a:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    4c1e:	4b84      	ldr	r3, [pc, #528]	; (4e30 <audioTickString2+0x2d0>)
    4c20:	edd3 7a00 	vldr	s15, [r3]
    4c24:	4b83      	ldr	r3, [pc, #524]	; (4e34 <audioTickString2+0x2d4>)
    4c26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c2a:	edc3 7a00 	vstr	s15, [r3]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4c2e:	4b82      	ldr	r3, [pc, #520]	; (4e38 <audioTickString2+0x2d8>)
    4c30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c34:	ed93 7a00 	vldr	s14, [r3]
    4c38:	ee77 7a87 	vadd.f32	s15, s15, s14
    4c3c:	ab02      	add	r3, sp, #8
    4c3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c42:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (theNote[i] < 0.0f)
    4c46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c4e:	d4a8      	bmi.n	4ba2 <audioTickString2+0x42>
				if (theNote[i] > 127.0f)
    4c50:	ab02      	add	r3, sp, #8
    4c52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c56:	ed13 7a02 	vldr	s14, [r3, #-8]
    4c5a:	eddf 7a78 	vldr	s15, [pc, #480]	; 4e3c <audioTickString2+0x2dc>
    4c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c66:	dd04      	ble.n	4c72 <audioTickString2+0x112>
					theNote[i] = 127.0f;
    4c68:	ab02      	add	r3, sp, #8
    4c6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c6e:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (isnan(theNote[i]))
    4c72:	ab02      	add	r3, sp, #8
    4c74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c78:	ed53 7a02 	vldr	s15, [r3, #-8]
    4c7c:	eef4 7a67 	vcmp.f32	s15, s15
    4c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c84:	d694      	bvs.n	4bb0 <audioTickString2+0x50>
				float finalFreq = mtofTableLookup(theNote[i]);
    4c86:	00a6      	lsls	r6, r4, #2
    4c88:	ab02      	add	r3, sp, #8
    4c8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c8e:	ed13 0a02 	vldr	s0, [r3, #-8]
    4c92:	f004 fcd1 	bl	9638 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    4c96:	4d6a      	ldr	r5, [pc, #424]	; (4e40 <audioTickString2+0x2e0>)
    4c98:	4435      	add	r5, r6
    4c9a:	4628      	mov	r0, r5
    4c9c:	f004 fdb4 	bl	9808 <__tTString_setFreq_veneer>
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    4ca0:	eef0 0a48 	vmov.f32	s1, s16
    4ca4:	4b5b      	ldr	r3, [pc, #364]	; (4e14 <audioTickString2+0x2b4>)
    4ca6:	ed93 0a02 	vldr	s0, [r3, #8]
    4caa:	4628      	mov	r0, r5
    4cac:	f004 fec8 	bl	9a40 <__tTString_pluck_veneer>
			{
    4cb0:	e791      	b.n	4bd6 <audioTickString2+0x76>
				tTString_mute(&strings[i]);
    4cb2:	4863      	ldr	r0, [pc, #396]	; (4e40 <audioTickString2+0x2e0>)
    4cb4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4cb8:	f004 fc5e 	bl	9578 <__tTString_mute_veneer>
    4cbc:	e78b      	b.n	4bd6 <audioTickString2+0x76>
		for (int i = 0; i < numStringsThisBoard; i++)
    4cbe:	2400      	movs	r4, #0
    4cc0:	e791      	b.n	4be6 <audioTickString2+0x86>
		}
		newPluck = 0;
    4cc2:	4b55      	ldr	r3, [pc, #340]	; (4e18 <audioTickString2+0x2b8>)
    4cc4:	2200      	movs	r2, #0
    4cc6:	601a      	str	r2, [r3, #0]
    4cc8:	e767      	b.n	4b9a <audioTickString2+0x3a>
	{
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];

		if (theNote[i] < 0.0f)
		{
			theNote[i] = 0.0f;
    4cca:	2200      	movs	r2, #0
    4ccc:	ab02      	add	r3, sp, #8
    4cce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4cd2:	f843 2c08 	str.w	r2, [r3, #-8]
    4cd6:	e190      	b.n	4ffa <audioTickString2+0x49a>
		{
			theNote[i] = 127.0f;
		}
		if (isnan(theNote[i]))
		{
			theNote[i] = 64.0f;
    4cd8:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    4cdc:	ab02      	add	r3, sp, #8
    4cde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4ce2:	f843 2c08 	str.w	r2, [r3, #-8]
    4ce6:	e1a4      	b.n	5032 <audioTickString2+0x4d2>
        return min;
    4ce8:	ed9f 0a56 	vldr	s0, [pc, #344]	; 4e44 <audioTickString2+0x2e4>
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
			if (knobScaled[5] > 0.05f)
			{
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    4cec:	eef0 0a6a 	vmov.f32	s1, s21
    4cf0:	4628      	mov	r0, r5
    4cf2:	f004 fcad 	bl	9650 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    4cf6:	2101      	movs	r1, #1
    4cf8:	4628      	mov	r0, r5
    4cfa:	f004 fea5 	bl	9a48 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    4cfe:	eeb0 0a69 	vmov.f32	s0, s19
    4d02:	4628      	mov	r0, r5
    4d04:	f004 fdf0 	bl	98e8 <__tTString_setHarmonic_veneer>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    4d08:	4b4f      	ldr	r3, [pc, #316]	; (4e48 <audioTickString2+0x2e8>)
    4d0a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4d0e:	ed93 0a00 	vldr	s0, [r3]
    4d12:	4628      	mov	r0, r5
    4d14:	f004 fd1c 	bl	9750 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    4d18:	eeb0 0a48 	vmov.f32	s0, s16
    4d1c:	4628      	mov	r0, r5
    4d1e:	f004 fe9b 	bl	9a58 <__tTString_setOpenStringFrequency_veneer>



		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    4d22:	4e3c      	ldr	r6, [pc, #240]	; (4e14 <audioTickString2+0x2b4>)
    4d24:	ed96 0a06 	vldr	s0, [r6, #24]
    4d28:	4628      	mov	r0, r5
    4d2a:	f004 fd8d 	bl	9848 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    4d2e:	ed96 0a07 	vldr	s0, [r6, #28]
    4d32:	4628      	mov	r0, r5
    4d34:	f004 fda0 	bl	9878 <__tTString_setFeedbackReactionSpeed_veneer>

		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    4d38:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    4d3c:	4628      	mov	r0, r5
    4d3e:	f004 feaf 	bl	9aa0 <__tTString_setRippleDepth_veneer>





		tTString_setFreq(&strings[i], finalFreq);
    4d42:	eeb0 0a6a 	vmov.f32	s0, s21
    4d46:	4628      	mov	r0, r5
    4d48:	f004 fd5e 	bl	9808 <__tTString_setFreq_veneer>



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4d4c:	edd6 6a00 	vldr	s13, [r6]
    4d50:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
    4d54:	ee66 6a85 	vmul.f32	s13, s13, s10
    4d58:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    4d5c:	ee76 6ae5 	vsub.f32	s13, s13, s11
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
    4d60:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 4e4c <audioTickString2+0x2ec>
    4d64:	ee66 6a86 	vmul.f32	s13, s13, s12
    4d68:	ed9f 7a39 	vldr	s14, [pc, #228]	; 4e50 <audioTickString2+0x2f0>
    4d6c:	ee76 6a87 	vadd.f32	s13, s13, s14
    return u.d;
    4d70:	eefd 6ae6 	vcvt.s32.f32	s13, s13
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    4d74:	edd6 7a01 	vldr	s15, [r6, #4]
    4d78:	ee67 7a85 	vmul.f32	s15, s15, s10
    4d7c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
    4d80:	ee67 7a86 	vmul.f32	s15, s15, s12
    4d84:	ee77 7a87 	vadd.f32	s15, s15, s14
    return u.d;
    4d88:	eefd 9ae7 	vcvt.s32.f32	s19, s15

		uint32_t which = 0;
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
    4d8c:	2300      	movs	r3, #0
		float oneMinusAlpha = 1.0f;
    4d8e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    4d92:	eddf 4a22 	vldr	s9, [pc, #136]	; 4e1c <audioTickString2+0x2bc>
		uint32_t which = 0;
    4d96:	4618      	mov	r0, r3
		for (int i = 0; i < 9; i++)
    4d98:	e00e      	b.n	4db8 <audioTickString2+0x258>
				tTString_setInharmonic(&strings[i], 0);
    4d9a:	2100      	movs	r1, #0
    4d9c:	4628      	mov	r0, r5
    4d9e:	f004 fe53 	bl	9a48 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    4da2:	eebc 0ae9 	vcvt.u32.f32	s0, s19
    4da6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    4daa:	4628      	mov	r0, r5
    4dac:	f004 fd9c 	bl	98e8 <__tTString_setHarmonic_veneer>
    4db0:	e7aa      	b.n	4d08 <audioTickString2+0x1a8>
				{
					which = i;
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
    4db2:	2b08      	cmp	r3, #8
    4db4:	d027      	beq.n	4e06 <audioTickString2+0x2a6>
		for (int i = 0; i < 9; i++)
    4db6:	3301      	adds	r3, #1
    4db8:	2b08      	cmp	r3, #8
    4dba:	dc4d      	bgt.n	4e58 <audioTickString2+0x2f8>
			if (stringParams[i][0][0] > openStringFreq)
    4dbc:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    4dc0:	4a24      	ldr	r2, [pc, #144]	; (4e54 <audioTickString2+0x2f4>)
    4dc2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4dc6:	edd2 7a00 	vldr	s15, [r2]
    4dca:	eef4 7ac8 	vcmpe.f32	s15, s16
    4dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dd2:	ddf0      	ble.n	4db6 <audioTickString2+0x256>
				if (stringParams[i+1][0][0] < openStringFreq)
    4dd4:	1c5a      	adds	r2, r3, #1
    4dd6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    4dda:	491e      	ldr	r1, [pc, #120]	; (4e54 <audioTickString2+0x2f4>)
    4ddc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4de0:	ed92 7a00 	vldr	s14, [r2]
    4de4:	eeb4 7ac8 	vcmpe.f32	s14, s16
    4de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dec:	d5e1      	bpl.n	4db2 <audioTickString2+0x252>
					which = i;
    4dee:	4618      	mov	r0, r3
    return ((value - istart) / (istop - istart));
    4df0:	ee38 6a67 	vsub.f32	s12, s16, s15
    4df4:	ee37 7a67 	vsub.f32	s14, s14, s15
    4df8:	eec6 4a07 	vdiv.f32	s9, s12, s14
					oneMinusAlpha = 1.0f - alpha;
    4dfc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    4e00:	ee36 6a64 	vsub.f32	s12, s12, s9
    4e04:	e7d7      	b.n	4db6 <audioTickString2+0x256>
				{
					which = 9;
    4e06:	2009      	movs	r0, #9
    4e08:	e7d5      	b.n	4db6 <audioTickString2+0x256>
    4e0a:	bf00      	nop
    4e0c:	20014264 	.word	0x20014264
    4e10:	20005240 	.word	0x20005240
    4e14:	200051f0 	.word	0x200051f0
    4e18:	200052f0 	.word	0x200052f0
    4e1c:	00000000 	.word	0x00000000
    4e20:	20005360 	.word	0x20005360
    4e24:	2001420c 	.word	0x2001420c
    4e28:	20000694 	.word	0x20000694
    4e2c:	37800080 	.word	0x37800080
    4e30:	200052fc 	.word	0x200052fc
    4e34:	2001422c 	.word	0x2001422c
    4e38:	20014224 	.word	0x20014224
    4e3c:	42fe0000 	.word	0x42fe0000
    4e40:	2001ce88 	.word	0x2001ce88
    4e44:	322bcc77 	.word	0x322bcc77
    4e48:	20001194 	.word	0x20001194
    4e4c:	4b076c0b 	.word	0x4b076c0b
    4e50:	4e7de250 	.word	0x4e7de250
    4e54:	20000738 	.word	0x20000738
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    4e58:	4bcc      	ldr	r3, [pc, #816]	; (518c <audioTickString2+0x62c>)
    4e5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4e5e:	edd3 5a00 	vldr	s11, [r3]
    4e62:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    4e66:	eec5 7a87 	vdiv.f32	s15, s11, s14

		uint32_t barHeightInt = (uint32_t)barHeight;
    4e6a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
    4e6e:	ee17 ca10 	vmov	ip, s14
		float barHeightAlpha = barHeight - barHeightInt;
    4e72:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    4e76:	ee37 5ac7 	vsub.f32	s10, s15, s14
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    4e7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    4e7e:	ee30 0a45 	vsub.f32	s0, s0, s10
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4e82:	f10c 0301 	add.w	r3, ip, #1
    4e86:	ee07 3a90 	vmov	s15, r3
    4e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    else if (val > max)
    4e8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    4e92:	eef4 7ac7 	vcmpe.f32	s15, s14
    4e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e9a:	dd01      	ble.n	4ea0 <audioTickString2+0x340>
        return max;
    4e9c:	eef0 7a47 	vmov.f32	s15, s14
    4ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ea4:	ee17 3a90 	vmov	r3, s15

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4ea8:	1c42      	adds	r2, r0, #1
    4eaa:	ee07 2a90 	vmov	s15, r2
    4eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
    else if (val > max)
    4eb2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
    4eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
    4eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ebe:	dd01      	ble.n	4ec4 <audioTickString2+0x364>
        return max;
    4ec0:	eef0 7a47 	vmov.f32	s15, s14
    4ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ec8:	ee17 1a90 	vmov	r1, s15
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    4ecc:	2809      	cmp	r0, #9
    4ece:	f000 8136 	beq.w	513e <audioTickString2+0x5de>
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4ed2:	4eaf      	ldr	r6, [pc, #700]	; (5190 <audioTickString2+0x630>)
    4ed4:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
    4ed8:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    4edc:	0092      	lsls	r2, r2, #2
    4ede:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    4ee2:	4432      	add	r2, r6
    4ee4:	edd2 5a01 	vldr	s11, [r2, #4]
    4ee8:	ee65 5a86 	vmul.f32	s11, s11, s12
    4eec:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    4ef0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    4ef4:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
    4ef8:	44b6      	add	lr, r6
    4efa:	edde 7a01 	vldr	s15, [lr, #4]
    4efe:	ee67 7aa4 	vmul.f32	s15, s15, s9
    4f02:	ee75 5aa7 	vadd.f32	s11, s11, s15
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4f06:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    4f0a:	eb00 0ec0 	add.w	lr, r0, r0, lsl #3
    4f0e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    4f12:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
    4f16:	44b6      	add	lr, r6
    4f18:	ed9e 7a01 	vldr	s14, [lr, #4]
    4f1c:	ee27 7a06 	vmul.f32	s14, s14, s12
    4f20:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
    4f24:	eb03 0ec3 	add.w	lr, r3, r3, lsl #3
    4f28:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    4f2c:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
    4f30:	44b6      	add	lr, r6
    4f32:	edde 7a01 	vldr	s15, [lr, #4]
    4f36:	ee67 7aa4 	vmul.f32	s15, s15, s9
    4f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    4f3e:	ee60 5a25 	vmul.f32	s11, s0, s11
    4f42:	ee25 7a07 	vmul.f32	s14, s10, s14
    4f46:	ee35 8a87 	vadd.f32	s16, s11, s14
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4f4a:	ed92 7a02 	vldr	s14, [r2, #8]
    4f4e:	ee27 7a06 	vmul.f32	s14, s14, s12
    4f52:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    4f56:	0089      	lsls	r1, r1, #2
    4f58:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    4f5c:	4431      	add	r1, r6
    4f5e:	edd1 7a02 	vldr	s15, [r1, #8]
    4f62:	ee67 7aa4 	vmul.f32	s15, s15, s9
    4f66:	ee37 7a27 	vadd.f32	s14, s14, s15
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4f6a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4f6e:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    4f72:	0092      	lsls	r2, r2, #2
    4f74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4f78:	4432      	add	r2, r6
    4f7a:	edd2 7a02 	vldr	s15, [r2, #8]
    4f7e:	ee67 7a86 	vmul.f32	s15, s15, s12
    4f82:	ed9e 6a02 	vldr	s12, [lr, #8]
    4f86:	ee26 6a24 	vmul.f32	s12, s12, s9
    4f8a:	ee77 7a86 	vadd.f32	s15, s15, s12
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    4f8e:	ee20 0a07 	vmul.f32	s0, s0, s14
    4f92:	ee65 7a27 	vmul.f32	s15, s10, s15
    4f96:	ee30 0a27 	vadd.f32	s0, s0, s15
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    4f9a:	ee20 0a26 	vmul.f32	s0, s0, s13
    4f9e:	4628      	mov	r0, r5
    4fa0:	f004 fb6a 	bl	9678 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    4fa4:	ee28 0a29 	vmul.f32	s0, s16, s19
    4fa8:	4628      	mov	r0, r5
    4faa:	f004 fcb9 	bl	9920 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]) * 0.5f;
    4fae:	4628      	mov	r0, r5
    4fb0:	f004 fcea 	bl	9988 <__tTString_tick_veneer>
    4fb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4fb8:	ee20 0a27 	vmul.f32	s0, s0, s15
    4fbc:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4fc0:	3401      	adds	r4, #1
    4fc2:	4b74      	ldr	r3, [pc, #464]	; (5194 <audioTickString2+0x634>)
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	42a3      	cmp	r3, r4
    4fc8:	f340 810a 	ble.w	51e0 <audioTickString2+0x680>
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4fcc:	4b72      	ldr	r3, [pc, #456]	; (5198 <audioTickString2+0x638>)
    4fce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4fd2:	edd3 7a00 	vldr	s15, [r3]
    4fd6:	4b71      	ldr	r3, [pc, #452]	; (519c <audioTickString2+0x63c>)
    4fd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4fdc:	ed93 7a00 	vldr	s14, [r3]
    4fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
    4fe4:	ab02      	add	r3, sp, #8
    4fe6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4fea:	ed43 7a02 	vstr	s15, [r3, #-8]
		if (theNote[i] < 0.0f)
    4fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ff6:	f53f ae68 	bmi.w	4cca <audioTickString2+0x16a>
		if (theNote[i] > 127.0f)
    4ffa:	ab02      	add	r3, sp, #8
    4ffc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5000:	ed13 7a02 	vldr	s14, [r3, #-8]
    5004:	eddf 7a66 	vldr	s15, [pc, #408]	; 51a0 <audioTickString2+0x640>
    5008:	eeb4 7ae7 	vcmpe.f32	s14, s15
    500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5010:	dd04      	ble.n	501c <audioTickString2+0x4bc>
			theNote[i] = 127.0f;
    5012:	ab02      	add	r3, sp, #8
    5014:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5018:	ed43 7a02 	vstr	s15, [r3, #-8]
		if (isnan(theNote[i]))
    501c:	ab02      	add	r3, sp, #8
    501e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5022:	ed53 7a02 	vldr	s15, [r3, #-8]
    5026:	eef4 7a67 	vcmp.f32	s15, s15
    502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    502e:	f5bf ae53 	bvs.w	4cd8 <audioTickString2+0x178>
		float finalFreq = mtofTableLookup(theNote[i]);
    5032:	00a6      	lsls	r6, r4, #2
    5034:	ab02      	add	r3, sp, #8
    5036:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    503a:	ed13 aa02 	vldr	s20, [r3, #-8]
    503e:	eeb0 0a4a 	vmov.f32	s0, s20
    5042:	f004 faf9 	bl	9638 <__mtofTableLookup_veneer>
    5046:	eef0 aa40 	vmov.f32	s21, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    504a:	4b50      	ldr	r3, [pc, #320]	; (518c <audioTickString2+0x62c>)
    504c:	4433      	add	r3, r6
    504e:	ed93 0a00 	vldr	s0, [r3]
    5052:	ee3a 0a40 	vsub.f32	s0, s20, s0
    5056:	f004 faef 	bl	9638 <__mtofTableLookup_veneer>
    505a:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    505e:	4d51      	ldr	r5, [pc, #324]	; (51a4 <audioTickString2+0x644>)
    5060:	4435      	add	r5, r6
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    5062:	ed9f 7a51 	vldr	s14, [pc, #324]	; 51a8 <audioTickString2+0x648>
    5066:	ee30 7a47 	vsub.f32	s14, s0, s14
    506a:	eddf 6a50 	vldr	s13, [pc, #320]	; 51ac <audioTickString2+0x64c>
    506e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    5072:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 51b0 <audioTickString2+0x650>
    5076:	ee67 7a87 	vmul.f32	s15, s15, s14
    507a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 51b4 <audioTickString2+0x654>
    507e:	ee77 7a87 	vadd.f32	s15, s15, s14
    5082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5086:	ee17 1a90 	vmov	r1, s15
    508a:	4628      	mov	r0, r5
    508c:	f004 fad8 	bl	9640 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    5090:	4b49      	ldr	r3, [pc, #292]	; (51b8 <audioTickString2+0x658>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	2b00      	cmp	r3, #0
    5096:	f47f ae37 	bne.w	4d08 <audioTickString2+0x1a8>
			float thisString = (firstString + i);
    509a:	4b48      	ldr	r3, [pc, #288]	; (51bc <audioTickString2+0x65c>)
    509c:	681b      	ldr	r3, [r3, #0]
    509e:	4423      	add	r3, r4
    50a0:	ee07 3a90 	vmov	s15, r3
    50a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    50a8:	4b45      	ldr	r3, [pc, #276]	; (51c0 <audioTickString2+0x660>)
    50aa:	ed93 7a00 	vldr	s14, [r3]
    50ae:	ee27 7a27 	vmul.f32	s14, s14, s15
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    50b2:	4b44      	ldr	r3, [pc, #272]	; (51c4 <audioTickString2+0x664>)
    50b4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    50b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    50bc:	ee76 6ac7 	vsub.f32	s13, s13, s14
    50c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    50c4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
    50c8:	ee26 7a87 	vmul.f32	s14, s13, s14
    50cc:	ee77 7a87 	vadd.f32	s15, s15, s14
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    50d0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    50d4:	ee67 7a87 	vmul.f32	s15, s15, s14
    50d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    50dc:	ee77 9a87 	vadd.f32	s19, s15, s14
    50e0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    50e4:	ee7a 7a67 	vsub.f32	s15, s20, s15
    50e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 51c8 <audioTickString2+0x668>
    50ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    50f0:	eddf 7a36 	vldr	s15, [pc, #216]	; 51cc <audioTickString2+0x66c>
    50f4:	ee67 7a27 	vmul.f32	s15, s14, s15
    50f8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 51d0 <audioTickString2+0x670>
    50fc:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (knobScaled[5] > 0.05f)
    5100:	ed93 0a05 	vldr	s0, [r3, #20]
    5104:	ed9f 7a33 	vldr	s14, [pc, #204]	; 51d4 <audioTickString2+0x674>
    5108:	eeb4 0ac7 	vcmpe.f32	s0, s14
    510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5110:	f77f ae43 	ble.w	4d9a <audioTickString2+0x23a>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    5114:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (val < min)
    5118:	eddf 7a2f 	vldr	s15, [pc, #188]	; 51d8 <audioTickString2+0x678>
    511c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5124:	f53f ade0 	bmi.w	4ce8 <audioTickString2+0x188>
    else if (val > max)
    5128:	eddf 7a2c 	vldr	s15, [pc, #176]	; 51dc <audioTickString2+0x67c>
    512c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5134:	f77f adda 	ble.w	4cec <audioTickString2+0x18c>
        return max;
    5138:	eeb0 0a67 	vmov.f32	s0, s15
    513c:	e5d6      	b.n	4cec <audioTickString2+0x18c>
			float freq1 = stringParams[9][barHeightInt][1];
    513e:	4914      	ldr	r1, [pc, #80]	; (5190 <audioTickString2+0x630>)
    5140:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
    5144:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5148:	edd2 5a52 	vldr	s11, [r2, #328]	; 0x148
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    514c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    5150:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5154:	edd2 7a52 	vldr	s15, [r2, #328]	; 0x148
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5158:	ee60 5a25 	vmul.f32	s11, s0, s11
    515c:	ee65 7a27 	vmul.f32	s15, s10, s15
    5160:	ee35 8aa7 	vadd.f32	s16, s11, s15
			float decay1 = stringParams[9][barHeightInt][2];
    5164:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
    5168:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    516c:	ed92 7a53 	vldr	s14, [r2, #332]	; 0x14c
			float decay2 = stringParams[9][barHeightIntPlusOne][2];
    5170:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5174:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    5178:	edd1 7a53 	vldr	s15, [r1, #332]	; 0x14c
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    517c:	ee20 7a07 	vmul.f32	s14, s0, s14
    5180:	ee65 7a27 	vmul.f32	s15, s10, s15
    5184:	ee37 0a27 	vadd.f32	s0, s14, s15
    5188:	e707      	b.n	4f9a <audioTickString2+0x43a>
    518a:	bf00      	nop
    518c:	20001194 	.word	0x20001194
    5190:	20000738 	.word	0x20000738
    5194:	20000694 	.word	0x20000694
    5198:	20014224 	.word	0x20014224
    519c:	2001422c 	.word	0x2001422c
    51a0:	42fe0000 	.word	0x42fe0000
    51a4:	2001ce88 	.word	0x2001ce88
    51a8:	42f60000 	.word	0x42f60000
    51ac:	42f80000 	.word	0x42f80000
    51b0:	42480000 	.word	0x42480000
    51b4:	428c0000 	.word	0x428c0000
    51b8:	2001ce90 	.word	0x2001ce90
    51bc:	200051cc 	.word	0x200051cc
    51c0:	20000688 	.word	0x20000688
    51c4:	200051f0 	.word	0x200051f0
    51c8:	42600000 	.word	0x42600000
    51cc:	b8bcbe62 	.word	0xb8bcbe62
    51d0:	38d1b717 	.word	0x38d1b717
    51d4:	3d4ccccd 	.word	0x3d4ccccd
    51d8:	322bcc77 	.word	0x322bcc77
    51dc:	3c23d70a 	.word	0x3c23d70a
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    51e0:	4a27      	ldr	r2, [pc, #156]	; (5280 <audioTickString2+0x720>)
    51e2:	6813      	ldr	r3, [r2, #0]
    51e4:	3301      	adds	r3, #1
    51e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51ea:	6013      	str	r3, [r2, #0]
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    51ec:	ed9f 0a25 	vldr	s0, [pc, #148]	; 5284 <audioTickString2+0x724>
    51f0:	ee28 0a80 	vmul.f32	s0, s17, s0
    51f4:	eddf 7a24 	vldr	s15, [pc, #144]	; 5288 <audioTickString2+0x728>
    51f8:	ee30 0a27 	vadd.f32	s0, s0, s15
    51fc:	eddf 7a23 	vldr	s15, [pc, #140]	; 528c <audioTickString2+0x72c>
    5200:	ee68 7aa7 	vmul.f32	s15, s17, s15
    5204:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5208:	ee30 0a67 	vsub.f32	s0, s0, s15
    520c:	eddf 7a20 	vldr	s15, [pc, #128]	; 5290 <audioTickString2+0x730>
    5210:	ee68 7aa7 	vmul.f32	s15, s17, s15
    5214:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5218:	ee67 7aa8 	vmul.f32	s15, s15, s17
    521c:	ee30 0a27 	vadd.f32	s0, s0, s15
    5220:	eddf 7a1c 	vldr	s15, [pc, #112]	; 5294 <audioTickString2+0x734>
    5224:	ee68 7aa7 	vmul.f32	s15, s17, s15
    5228:	ee67 7aa8 	vmul.f32	s15, s15, s17
    522c:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5230:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5234:	ee30 0a67 	vsub.f32	s0, s0, s15

	temp *= outVol * masterVolFromBrain;
    5238:	4b17      	ldr	r3, [pc, #92]	; (5298 <audioTickString2+0x738>)
    523a:	edd3 7a00 	vldr	s15, [r3]
    523e:	ee20 0a27 	vmul.f32	s0, s0, s15
	temp = tanhf(temp);
    5242:	ee20 0a09 	vmul.f32	s0, s0, s18
    5246:	f004 fb5f 	bl	9908 <__tanhf_veneer>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    524a:	eddf 7a14 	vldr	s15, [pc, #80]	; 529c <audioTickString2+0x73c>
    524e:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (val < min)
    5252:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    5256:	eeb4 0ae7 	vcmpe.f32	s0, s15
    525a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    525e:	d409      	bmi.n	5274 <audioTickString2+0x714>
    else if (val > max)
    5260:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5264:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    526c:	dd04      	ble.n	5278 <audioTickString2+0x718>
        return max;
    526e:	eeb0 0a67 	vmov.f32	s0, s15
    5272:	e001      	b.n	5278 <audioTickString2+0x718>
        return min;
    5274:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
    5278:	b003      	add	sp, #12
    527a:	ecbd 8b06 	vpop	{d8-d10}
    527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5280:	2001ce90 	.word	0x2001ce90
    5284:	3ef1ac0b 	.word	0x3ef1ac0b
    5288:	3bdc4213 	.word	0x3bdc4213
    528c:	4022be0a 	.word	0x4022be0a
    5290:	40caa285 	.word	0x40caa285
    5294:	40516313 	.word	0x40516313
    5298:	2000068c 	.word	0x2000068c
    529c:	3f7ae148 	.word	0x3f7ae148

000052a0 <audioFrameString2>:
{
    52a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52a4:	ed2d 8b02 	vpush	{d8}
    52a8:	4606      	mov	r6, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    52aa:	4b4e      	ldr	r3, [pc, #312]	; (53e4 <audioFrameString2+0x144>)
    52ac:	685f      	ldr	r7, [r3, #4]
		if (resetStringInputs)
    52ae:	4b4e      	ldr	r3, [pc, #312]	; (53e8 <audioFrameString2+0x148>)
    52b0:	781b      	ldrb	r3, [r3, #0]
    52b2:	b9bb      	cbnz	r3, 52e4 <audioFrameString2+0x44>
			for (int i = 0; i < numStringsThisBoard; i++)
    52b4:	f04f 0800 	mov.w	r8, #0
    52b8:	e065      	b.n	5386 <audioFrameString2+0xe6>
				tTString_mute(&strings[i]);
    52ba:	484c      	ldr	r0, [pc, #304]	; (53ec <audioFrameString2+0x14c>)
    52bc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    52c0:	f004 f95a 	bl	9578 <__tTString_mute_veneer>
				previousStringInputs[i] = 0;
    52c4:	4b4a      	ldr	r3, [pc, #296]	; (53f0 <audioFrameString2+0x150>)
    52c6:	2200      	movs	r2, #0
    52c8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    52cc:	3401      	adds	r4, #1
    52ce:	4b49      	ldr	r3, [pc, #292]	; (53f4 <audioFrameString2+0x154>)
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	42a3      	cmp	r3, r4
    52d4:	dcf1      	bgt.n	52ba <audioFrameString2+0x1a>
			resetStringInputs = 0;
    52d6:	4b44      	ldr	r3, [pc, #272]	; (53e8 <audioFrameString2+0x148>)
    52d8:	2200      	movs	r2, #0
    52da:	701a      	strb	r2, [r3, #0]
			newPluck = 1;
    52dc:	4b46      	ldr	r3, [pc, #280]	; (53f8 <audioFrameString2+0x158>)
    52de:	2201      	movs	r2, #1
    52e0:	601a      	str	r2, [r3, #0]
    52e2:	e7e7      	b.n	52b4 <audioFrameString2+0x14>
			for (int i = 0; i < numStringsThisBoard; i++)
    52e4:	2400      	movs	r4, #0
    52e6:	e7f2      	b.n	52ce <audioFrameString2+0x2e>
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    52e8:	4c40      	ldr	r4, [pc, #256]	; (53ec <audioFrameString2+0x14c>)
    52ea:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    52ee:	4d43      	ldr	r5, [pc, #268]	; (53fc <audioFrameString2+0x15c>)
    52f0:	ed95 0a03 	vldr	s0, [r5, #12]
    52f4:	4620      	mov	r0, r4
    52f6:	f004 fb5f 	bl	99b8 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    52fa:	ed95 0a04 	vldr	s0, [r5, #16]
    52fe:	4620      	mov	r0, r4
    5300:	f004 fa9a 	bl	9838 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    5304:	edd5 7a08 	vldr	s15, [r5, #32]
    5308:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 5400 <audioFrameString2+0x160>
    530c:	ee67 7a88 	vmul.f32	s15, s15, s16
    5310:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 5404 <audioFrameString2+0x164>
    5314:	ee37 0a80 	vadd.f32	s0, s15, s0
    5318:	4620      	mov	r0, r4
    531a:	f004 fc01 	bl	9b20 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    531e:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    5322:	4620      	mov	r0, r4
    5324:	f004 fbe4 	bl	9af0 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    5328:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    532c:	4620      	mov	r0, r4
    532e:	f004 f94f 	bl	95d0 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    5332:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    5336:	4620      	mov	r0, r4
    5338:	f004 faea 	bl	9910 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    533c:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    5340:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5344:	ee30 0a27 	vadd.f32	s0, s0, s15
    5348:	4620      	mov	r0, r4
    534a:	f004 faf5 	bl	9938 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    534e:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    5352:	ee67 7a88 	vmul.f32	s15, s15, s16
    5356:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 5408 <audioFrameString2+0x168>
    535a:	ee37 0a80 	vadd.f32	s0, s15, s0
    535e:	4620      	mov	r0, r4
    5360:	f004 fa22 	bl	97a8 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    5364:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    5368:	4620      	mov	r0, r4
    536a:	f004 fa99 	bl	98a0 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    536e:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    5372:	4620      	mov	r0, r4
    5374:	f004 f914 	bl	95a0 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    5378:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
    537c:	4620      	mov	r0, r4
    537e:	f004 fb53 	bl	9a28 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5382:	f108 0801 	add.w	r8, r8, #1
    5386:	4b1b      	ldr	r3, [pc, #108]	; (53f4 <audioFrameString2+0x154>)
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	4543      	cmp	r3, r8
    538c:	dcac      	bgt.n	52e8 <audioFrameString2+0x48>
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    538e:	2500      	movs	r5, #0
    5390:	e011      	b.n	53b6 <audioFrameString2+0x116>
			int iplusbuffer = buffer_offset + i;
    5392:	1974      	adds	r4, r6, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5394:	f7ff fbe4 	bl	4b60 <audioTickString2>
    5398:	eddf 7a1c 	vldr	s15, [pc, #112]	; 540c <audioFrameString2+0x16c>
    539c:	ee20 0a27 	vmul.f32	s0, s0, s15
    53a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    53a4:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer] = current_sample;
    53a8:	4a19      	ldr	r2, [pc, #100]	; (5410 <audioFrameString2+0x170>)
    53aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    53ae:	3401      	adds	r4, #1
    53b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    53b4:	3502      	adds	r5, #2
    53b6:	2d7f      	cmp	r5, #127	; 0x7f
    53b8:	ddeb      	ble.n	5392 <audioFrameString2+0xf2>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    53ba:	4b0a      	ldr	r3, [pc, #40]	; (53e4 <audioFrameString2+0x144>)
    53bc:	685b      	ldr	r3, [r3, #4]
    53be:	1bdb      	subs	r3, r3, r7
    53c0:	4a14      	ldr	r2, [pc, #80]	; (5414 <audioFrameString2+0x174>)
    53c2:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    53c4:	ee07 3a90 	vmov	s15, r3
    53c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    53cc:	4b12      	ldr	r3, [pc, #72]	; (5418 <audioFrameString2+0x178>)
    53ce:	ed93 7a00 	vldr	s14, [r3]
    53d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    53d6:	4b11      	ldr	r3, [pc, #68]	; (541c <audioFrameString2+0x17c>)
    53d8:	edc3 7a00 	vstr	s15, [r3]
}
    53dc:	ecbd 8b02 	vpop	{d8}
    53e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    53e4:	e0001000 	.word	0xe0001000
    53e8:	20005778 	.word	0x20005778
    53ec:	2001ce88 	.word	0x2001ce88
    53f0:	20005360 	.word	0x20005360
    53f4:	20000694 	.word	0x20000694
    53f8:	200052f0 	.word	0x200052f0
    53fc:	200051f0 	.word	0x200051f0
    5400:	45bb8000 	.word	0x45bb8000
    5404:	447a0000 	.word	0x447a0000
    5408:	42700000 	.word	0x42700000
    540c:	4b000000 	.word	0x4b000000
    5410:	30000000 	.word	0x30000000
    5414:	2001424c 	.word	0x2001424c
    5418:	20000684 	.word	0x20000684
    541c:	200051d4 	.word	0x200051d4

00005420 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    5420:	b510      	push	{r4, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    5422:	2400      	movs	r4, #0
    5424:	e007      	b.n	5436 <audioInitString3+0x16>
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    5426:	4a06      	ldr	r2, [pc, #24]	; (5440 <audioInitString3+0x20>)
    5428:	2146      	movs	r1, #70	; 0x46
    542a:	4806      	ldr	r0, [pc, #24]	; (5444 <audioInitString3+0x24>)
    542c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5430:	f004 fb6e 	bl	9b10 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5434:	3401      	adds	r4, #1
    5436:	4b04      	ldr	r3, [pc, #16]	; (5448 <audioInitString3+0x28>)
    5438:	781b      	ldrb	r3, [r3, #0]
    543a:	42a3      	cmp	r3, r4
    543c:	dcf3      	bgt.n	5426 <audioInitString3+0x6>
	}
}
    543e:	bd10      	pop	{r4, pc}
    5440:	20005294 	.word	0x20005294
    5444:	2001cebc 	.word	0x2001cebc
    5448:	20000694 	.word	0x20000694
    544c:	f3af 8000 	nop.w
    5450:	f3af 8000 	nop.w
    5454:	f3af 8000 	nop.w
    5458:	f3af 8000 	nop.w
    545c:	f3af 8000 	nop.w

00005460 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    5460:	b510      	push	{r4, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5462:	2400      	movs	r4, #0
    5464:	e005      	b.n	5472 <audioFreeString3+0x12>
	{
		tStiffString_free(&stringsC[v]);
    5466:	4805      	ldr	r0, [pc, #20]	; (547c <audioFreeString3+0x1c>)
    5468:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    546c:	f004 fb08 	bl	9a80 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5470:	3401      	adds	r4, #1
    5472:	4b03      	ldr	r3, [pc, #12]	; (5480 <audioFreeString3+0x20>)
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	42a3      	cmp	r3, r4
    5478:	dcf5      	bgt.n	5466 <audioFreeString3+0x6>
	}
}
    547a:	bd10      	pop	{r4, pc}
    547c:	2001cebc 	.word	0x2001cebc
    5480:	20000694 	.word	0x20000694
    5484:	f3af 8000 	nop.w
    5488:	f3af 8000 	nop.w
    548c:	f3af 8000 	nop.w
    5490:	f3af 8000 	nop.w
    5494:	f3af 8000 	nop.w
    5498:	f3af 8000 	nop.w
    549c:	f3af 8000 	nop.w

000054a0 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    54a0:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 12; i++)
    54a2:	2400      	movs	r4, #0
    54a4:	e00b      	b.n	54be <audioSwitchToString3+0x1e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);

		if (voice == 59)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    54a6:	4b12      	ldr	r3, [pc, #72]	; (54f0 <audioSwitchToString3+0x50>)
    54a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    54ac:	ed93 0a00 	vldr	s0, [r3]
    54b0:	4628      	mov	r0, r5
    54b2:	f004 f8fd 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    54b6:	4b0f      	ldr	r3, [pc, #60]	; (54f4 <audioSwitchToString3+0x54>)
    54b8:	2201      	movs	r2, #1
    54ba:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    54bc:	4414      	add	r4, r2
    54be:	2c0b      	cmp	r4, #11
    54c0:	dc14      	bgt.n	54ec <audioSwitchToString3+0x4c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    54c2:	4d0d      	ldr	r5, [pc, #52]	; (54f8 <audioSwitchToString3+0x58>)
    54c4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    54c8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 54fc <audioSwitchToString3+0x5c>
    54cc:	4628      	mov	r0, r5
    54ce:	f004 f913 	bl	96f8 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    54d2:	4b0b      	ldr	r3, [pc, #44]	; (5500 <audioSwitchToString3+0x60>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	2b3b      	cmp	r3, #59	; 0x3b
    54d8:	d0e5      	beq.n	54a6 <audioSwitchToString3+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    54da:	4b0a      	ldr	r3, [pc, #40]	; (5504 <audioSwitchToString3+0x64>)
    54dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    54e0:	ed93 0a00 	vldr	s0, [r3]
    54e4:	4628      	mov	r0, r5
    54e6:	f004 f8e3 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
    54ea:	e7e4      	b.n	54b6 <audioSwitchToString3+0x16>
	}
}
    54ec:	bd38      	pop	{r3, r4, r5, pc}
    54ee:	bf00      	nop
    54f0:	200008a0 	.word	0x200008a0
    54f4:	200051dc 	.word	0x200051dc
    54f8:	20005240 	.word	0x20005240
    54fc:	3a83126f 	.word	0x3a83126f
    5500:	20014258 	.word	0x20014258
    5504:	20018540 	.word	0x20018540
    5508:	f3af 8000 	nop.w
    550c:	f3af 8000 	nop.w
    5510:	f3af 8000 	nop.w
    5514:	f3af 8000 	nop.w
    5518:	f3af 8000 	nop.w
    551c:	f3af 8000 	nop.w

00005520 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    5520:	b570      	push	{r4, r5, r6, lr}
    5522:	ed2d 8b02 	vpush	{d8}
    5526:	b082      	sub	sp, #8
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5528:	4883      	ldr	r0, [pc, #524]	; (5738 <audioTickString3+0x218>)
    552a:	f004 f821 	bl	9570 <__tExpSmooth_tick_veneer>
    552e:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
    5532:	2400      	movs	r4, #0
    5534:	e00a      	b.n	554c <audioTickString3+0x2c>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    5536:	00a5      	lsls	r5, r4, #2
    5538:	4880      	ldr	r0, [pc, #512]	; (573c <audioTickString3+0x21c>)
    553a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    553e:	f004 f817 	bl	9570 <__tExpSmooth_tick_veneer>
    5542:	4b7f      	ldr	r3, [pc, #508]	; (5740 <audioTickString3+0x220>)
    5544:	442b      	add	r3, r5
    5546:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    554a:	3401      	adds	r4, #1
    554c:	2c0b      	cmp	r4, #11
    554e:	ddf2      	ble.n	5536 <audioTickString3+0x16>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    5550:	4b7c      	ldr	r3, [pc, #496]	; (5744 <audioTickString3+0x224>)
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	2b00      	cmp	r3, #0
    5556:	f040 808f 	bne.w	5678 <audioTickString3+0x158>
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    555a:	2400      	movs	r4, #0
    555c:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 5748 <audioTickString3+0x228>
    5560:	e09c      	b.n	569c <audioTickString3+0x17c>
				stringOctave[i] = octave;

				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
				if (theNote[i] < 0.0f)
				{
					theNote[i] = 0.0f;
    5562:	2200      	movs	r2, #0
    5564:	ab02      	add	r3, sp, #8
    5566:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    556a:	f843 2c08 	str.w	r2, [r3, #-8]
    556e:	e04f      	b.n	5610 <audioTickString3+0xf0>
				{
					theNote[i] = 127.0f;
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
    5570:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    5574:	ab02      	add	r3, sp, #8
    5576:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    557a:	f843 2c08 	str.w	r2, [r3, #-8]
    557e:	e062      	b.n	5646 <audioTickString3+0x126>
				float finalFreq = mtofTableLookup(theNote[i]);
				tStiffString_setFreq(&stringsC[i], finalFreq);
				tStiffString_pluck(&stringsC[i], str3Amp);

			}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5580:	4b72      	ldr	r3, [pc, #456]	; (574c <audioTickString3+0x22c>)
    5582:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5586:	b29b      	uxth	r3, r3
    5588:	b12b      	cbz	r3, 5596 <audioTickString3+0x76>
    558a:	4b71      	ldr	r3, [pc, #452]	; (5750 <audioTickString3+0x230>)
    558c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5590:	b29b      	uxth	r3, r3
    5592:	2b00      	cmp	r3, #0
    5594:	d06a      	beq.n	566c <audioTickString3+0x14c>
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    5596:	4b6e      	ldr	r3, [pc, #440]	; (5750 <audioTickString3+0x230>)
    5598:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    559c:	b29b      	uxth	r3, r3
    559e:	4a6b      	ldr	r2, [pc, #428]	; (574c <audioTickString3+0x22c>)
    55a0:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    55a4:	3401      	adds	r4, #1
    55a6:	4b6b      	ldr	r3, [pc, #428]	; (5754 <audioTickString3+0x234>)
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	42a3      	cmp	r3, r4
    55ac:	dd66      	ble.n	567c <audioTickString3+0x15c>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    55ae:	4b67      	ldr	r3, [pc, #412]	; (574c <audioTickString3+0x22c>)
    55b0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    55b4:	b29b      	uxth	r3, r3
    55b6:	2b00      	cmp	r3, #0
    55b8:	d1e2      	bne.n	5580 <audioTickString3+0x60>
    55ba:	4b65      	ldr	r3, [pc, #404]	; (5750 <audioTickString3+0x230>)
    55bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    55c0:	b29b      	uxth	r3, r3
    55c2:	2b00      	cmp	r3, #0
    55c4:	d0dc      	beq.n	5580 <audioTickString3+0x60>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    55c6:	4b62      	ldr	r3, [pc, #392]	; (5750 <audioTickString3+0x230>)
    55c8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    55cc:	b29b      	uxth	r3, r3
    55ce:	ee08 3a10 	vmov	s16, r3
    55d2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    55d6:	eddf 7a60 	vldr	s15, [pc, #384]	; 5758 <audioTickString3+0x238>
    55da:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    55de:	4b5f      	ldr	r3, [pc, #380]	; (575c <audioTickString3+0x23c>)
    55e0:	edd3 7a00 	vldr	s15, [r3]
    55e4:	4b5e      	ldr	r3, [pc, #376]	; (5760 <audioTickString3+0x240>)
    55e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55ea:	edc3 7a00 	vstr	s15, [r3]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    55ee:	4b5d      	ldr	r3, [pc, #372]	; (5764 <audioTickString3+0x244>)
    55f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55f4:	ed93 7a00 	vldr	s14, [r3]
    55f8:	ee77 7a87 	vadd.f32	s15, s15, s14
    55fc:	ab02      	add	r3, sp, #8
    55fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5602:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (theNote[i] < 0.0f)
    5606:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    560a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    560e:	d4a8      	bmi.n	5562 <audioTickString3+0x42>
				if (theNote[i] > 127.0f)
    5610:	ab02      	add	r3, sp, #8
    5612:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5616:	ed13 7a02 	vldr	s14, [r3, #-8]
    561a:	eddf 7a53 	vldr	s15, [pc, #332]	; 5768 <audioTickString3+0x248>
    561e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5626:	dd04      	ble.n	5632 <audioTickString3+0x112>
					theNote[i] = 127.0f;
    5628:	ab02      	add	r3, sp, #8
    562a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    562e:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (isnan(theNote[i]))
    5632:	ab02      	add	r3, sp, #8
    5634:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5638:	ed53 7a02 	vldr	s15, [r3, #-8]
    563c:	eef4 7a67 	vcmp.f32	s15, s15
    5640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5644:	d694      	bvs.n	5570 <audioTickString3+0x50>
				float finalFreq = mtofTableLookup(theNote[i]);
    5646:	00a6      	lsls	r6, r4, #2
    5648:	ab02      	add	r3, sp, #8
    564a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    564e:	ed13 0a02 	vldr	s0, [r3, #-8]
    5652:	f003 fff1 	bl	9638 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    5656:	4d45      	ldr	r5, [pc, #276]	; (576c <audioTickString3+0x24c>)
    5658:	4435      	add	r5, r6
    565a:	4628      	mov	r0, r5
    565c:	f004 f800 	bl	9660 <__tStiffString_setFreq_veneer>
				tStiffString_pluck(&stringsC[i], str3Amp);
    5660:	eeb0 0a48 	vmov.f32	s0, s16
    5664:	4628      	mov	r0, r5
    5666:	f004 fa5f 	bl	9b28 <__tStiffString_pluck_veneer>
			{
    566a:	e794      	b.n	5596 <audioTickString3+0x76>
				tStiffString_mute(&stringsC[i]);
    566c:	483f      	ldr	r0, [pc, #252]	; (576c <audioTickString3+0x24c>)
    566e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5672:	f003 ffa1 	bl	95b8 <__tStiffString_mute_veneer>
    5676:	e78e      	b.n	5596 <audioTickString3+0x76>
		for (int i = 0; i < numStringsThisBoard; i++)
    5678:	2400      	movs	r4, #0
    567a:	e794      	b.n	55a6 <audioTickString3+0x86>
		}
		newPluck = 0;
    567c:	4b31      	ldr	r3, [pc, #196]	; (5744 <audioTickString3+0x224>)
    567e:	2200      	movs	r2, #0
    5680:	601a      	str	r2, [r3, #0]
    5682:	e76a      	b.n	555a <audioTickString3+0x3a>
	}
	for (int i = 0; i < numStringsThisBoard; i++)
	{

		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    5684:	4839      	ldr	r0, [pc, #228]	; (576c <audioTickString3+0x24c>)
    5686:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    568a:	f004 f865 	bl	9758 <__tStiffString_tick_veneer>
    568e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5692:	ee20 0a27 	vmul.f32	s0, s0, s15
    5696:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    569a:	3401      	adds	r4, #1
    569c:	4b2d      	ldr	r3, [pc, #180]	; (5754 <audioTickString3+0x234>)
    569e:	781b      	ldrb	r3, [r3, #0]
    56a0:	42a3      	cmp	r3, r4
    56a2:	dcef      	bgt.n	5684 <audioTickString3+0x164>
	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    56a4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 5770 <audioTickString3+0x250>
    56a8:	ee28 0a80 	vmul.f32	s0, s17, s0
    56ac:	eddf 7a31 	vldr	s15, [pc, #196]	; 5774 <audioTickString3+0x254>
    56b0:	ee30 0a27 	vadd.f32	s0, s0, s15
    56b4:	eddf 7a30 	vldr	s15, [pc, #192]	; 5778 <audioTickString3+0x258>
    56b8:	ee68 7aa7 	vmul.f32	s15, s17, s15
    56bc:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56c0:	ee30 0a67 	vsub.f32	s0, s0, s15
    56c4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 577c <audioTickString3+0x25c>
    56c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
    56cc:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56d0:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56d4:	ee30 0a27 	vadd.f32	s0, s0, s15
    56d8:	eddf 7a29 	vldr	s15, [pc, #164]	; 5780 <audioTickString3+0x260>
    56dc:	ee68 7aa7 	vmul.f32	s15, s17, s15
    56e0:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56e4:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56e8:	ee67 7aa8 	vmul.f32	s15, s15, s17
    56ec:	ee30 0a67 	vsub.f32	s0, s0, s15

	temp *= outVol * masterVolFromBrain;
    56f0:	4b24      	ldr	r3, [pc, #144]	; (5784 <audioTickString3+0x264>)
    56f2:	edd3 7a00 	vldr	s15, [r3]
    56f6:	ee20 0a27 	vmul.f32	s0, s0, s15
	temp = tanhf(temp);
    56fa:	ee20 0a08 	vmul.f32	s0, s0, s16
    56fe:	f004 f903 	bl	9908 <__tanhf_veneer>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5702:	eddf 7a21 	vldr	s15, [pc, #132]	; 5788 <audioTickString3+0x268>
    5706:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (val < min)
    570a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    570e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5716:	d409      	bmi.n	572c <audioTickString3+0x20c>
    else if (val > max)
    5718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    571c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5724:	dd04      	ble.n	5730 <audioTickString3+0x210>
        return max;
    5726:	eeb0 0a67 	vmov.f32	s0, s15
    572a:	e001      	b.n	5730 <audioTickString3+0x210>
        return min;
    572c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
    5730:	b002      	add	sp, #8
    5732:	ecbd 8b02 	vpop	{d8}
    5736:	bd70      	pop	{r4, r5, r6, pc}
    5738:	20014264 	.word	0x20014264
    573c:	20005240 	.word	0x20005240
    5740:	200051f0 	.word	0x200051f0
    5744:	200052f0 	.word	0x200052f0
    5748:	00000000 	.word	0x00000000
    574c:	20005360 	.word	0x20005360
    5750:	2001420c 	.word	0x2001420c
    5754:	20000694 	.word	0x20000694
    5758:	37800080 	.word	0x37800080
    575c:	200052fc 	.word	0x200052fc
    5760:	2001422c 	.word	0x2001422c
    5764:	20014224 	.word	0x20014224
    5768:	42fe0000 	.word	0x42fe0000
    576c:	2001cebc 	.word	0x2001cebc
    5770:	3ef1ac0b 	.word	0x3ef1ac0b
    5774:	3bdc4213 	.word	0x3bdc4213
    5778:	4022be0a 	.word	0x4022be0a
    577c:	40caa285 	.word	0x40caa285
    5780:	40516313 	.word	0x40516313
    5784:	2000068c 	.word	0x2000068c
    5788:	3f7ae148 	.word	0x3f7ae148
    578c:	f3af 8000 	nop.w
    5790:	f3af 8000 	nop.w
    5794:	f3af 8000 	nop.w
    5798:	f3af 8000 	nop.w
    579c:	f3af 8000 	nop.w

000057a0 <audioFrameString3>:
{
    57a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57a4:	ed2d 8b02 	vpush	{d8}
    57a8:	b086      	sub	sp, #24
    57aa:	4606      	mov	r6, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    57ac:	4bd3      	ldr	r3, [pc, #844]	; (5afc <audioFrameString3+0x35c>)
    57ae:	685f      	ldr	r7, [r3, #4]
		if (resetStringInputs)
    57b0:	4bd3      	ldr	r3, [pc, #844]	; (5b00 <audioFrameString3+0x360>)
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b98b      	cbnz	r3, 57da <audioFrameString3+0x3a>
				mainDecay = 0.0f;
    57b6:	2400      	movs	r4, #0
    57b8:	e088      	b.n	58cc <audioFrameString3+0x12c>
				previousStringInputs[i] = 0;
    57ba:	4ad2      	ldr	r2, [pc, #840]	; (5b04 <audioFrameString3+0x364>)
    57bc:	2100      	movs	r1, #0
    57be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    57c2:	3301      	adds	r3, #1
    57c4:	4ad0      	ldr	r2, [pc, #832]	; (5b08 <audioFrameString3+0x368>)
    57c6:	7812      	ldrb	r2, [r2, #0]
    57c8:	429a      	cmp	r2, r3
    57ca:	dcf6      	bgt.n	57ba <audioFrameString3+0x1a>
			resetStringInputs = 0;
    57cc:	4bcc      	ldr	r3, [pc, #816]	; (5b00 <audioFrameString3+0x360>)
    57ce:	2200      	movs	r2, #0
    57d0:	701a      	strb	r2, [r3, #0]
			newPluck = 1;
    57d2:	4bce      	ldr	r3, [pc, #824]	; (5b0c <audioFrameString3+0x36c>)
    57d4:	2201      	movs	r2, #1
    57d6:	601a      	str	r2, [r3, #0]
    57d8:	e7ed      	b.n	57b6 <audioFrameString3+0x16>
			for (int i = 0; i < numStringsThisBoard; i++)
    57da:	2300      	movs	r3, #0
    57dc:	e7f2      	b.n	57c4 <audioFrameString3+0x24>
				theNote[i] = 0.0f;
    57de:	2200      	movs	r2, #0
    57e0:	ab06      	add	r3, sp, #24
    57e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    57e6:	f843 2c08 	str.w	r2, [r3, #-8]
    57ea:	e08b      	b.n	5904 <audioFrameString3+0x164>
				theNote[i] = 64.0f;
    57ec:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    57f0:	ab06      	add	r3, sp, #24
    57f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    57f6:	f843 2c08 	str.w	r2, [r3, #-8]
    57fa:	e09f      	b.n	593c <audioFrameString3+0x19c>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    57fc:	eeb0 0a68 	vmov.f32	s0, s17
    5800:	4628      	mov	r0, r5
    5802:	f004 f8a9 	bl	9958 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    5806:	4bc2      	ldr	r3, [pc, #776]	; (5b10 <audioFrameString3+0x370>)
    5808:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    580c:	edc3 8a00 	vstr	s17, [r3]
    5810:	e0e2      	b.n	59d8 <audioFrameString3+0x238>
					float pickupKnobVal2 = pickupKnobVal;
    5812:	eeb0 7a67 	vmov.f32	s14, s15
    5816:	e12f      	b.n	5a78 <audioFrameString3+0x2d8>
			float pluckKnobVal2 = pluckKnobVal;
    5818:	eeb0 7a40 	vmov.f32	s14, s0
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    581c:	4bbd      	ldr	r3, [pc, #756]	; (5b14 <audioFrameString3+0x374>)
    581e:	edd3 6a02 	vldr	s13, [r3, #8]
    5822:	ee26 0a80 	vmul.f32	s0, s13, s0
    5826:	eddd 7a00 	vldr	s15, [sp]
    582a:	ee67 7a87 	vmul.f32	s15, s15, s14
    582e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5832:	ee37 7a66 	vsub.f32	s14, s14, s13
    5836:	ee67 7a87 	vmul.f32	s15, s15, s14
    583a:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (val < min)
    583e:	eddf 7ab6 	vldr	s15, [pc, #728]	; 5b18 <audioFrameString3+0x378>
    5842:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    584a:	d409      	bmi.n	5860 <audioFrameString3+0xc0>
    else if (val > max)
    584c:	eddf 7ab3 	vldr	s15, [pc, #716]	; 5b1c <audioFrameString3+0x37c>
    5850:	eeb4 0ae7 	vcmpe.f32	s0, s15
    5854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5858:	dd04      	ble.n	5864 <audioFrameString3+0xc4>
        return max;
    585a:	eeb0 0a67 	vmov.f32	s0, s15
    585e:	e001      	b.n	5864 <audioFrameString3+0xc4>
        return min;
    5860:	ed9f 0aad 	vldr	s0, [pc, #692]	; 5b18 <audioFrameString3+0x378>
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    5864:	4628      	mov	r0, r5
    5866:	f003 ff53 	bl	9710 <__tStiffString_setPluckPosNoUpdate_veneer>
			float dampKnob = (1.0f - knobScaled[9]);
    586a:	4baa      	ldr	r3, [pc, #680]	; (5b14 <audioFrameString3+0x374>)
    586c:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
    5870:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5874:	ee37 8ac8 	vsub.f32	s16, s15, s16
			float mainDecay = (1.0f - knobScaled[8]);
    5878:	ed93 7a08 	vldr	s14, [r3, #32]
    587c:	ee77 7ac7 	vsub.f32	s15, s15, s14
			if (mainDecay < 0.01f)
    5880:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 5b20 <audioFrameString3+0x380>
    5884:	eef4 7ac7 	vcmpe.f32	s15, s14
    5888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    588c:	d501      	bpl.n	5892 <audioFrameString3+0xf2>
				mainDecay = 0.0f;
    588e:	eddf 7aa5 	vldr	s15, [pc, #660]	; 5b24 <audioFrameString3+0x384>
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    5892:	ee27 0aa7 	vmul.f32	s0, s15, s15
    5896:	ee60 7a27 	vmul.f32	s15, s0, s15
    589a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 5b28 <audioFrameString3+0x388>
    589e:	ee27 0a80 	vmul.f32	s0, s15, s0
    58a2:	4628      	mov	r0, r5
    58a4:	f004 f8c8 	bl	9a38 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    58a8:	ee68 7a08 	vmul.f32	s15, s16, s16
    58ac:	ee67 7a88 	vmul.f32	s15, s15, s16
    58b0:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 5b2c <audioFrameString3+0x38c>
    58b4:	ee27 0a80 	vmul.f32	s0, s15, s0
    58b8:	4628      	mov	r0, r5
    58ba:	f003 fee1 	bl	9680 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    58be:	4628      	mov	r0, r5
    58c0:	f003 fee2 	bl	9688 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    58c4:	4628      	mov	r0, r5
    58c6:	f003 feaf 	bl	9628 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    58ca:	3401      	adds	r4, #1
    58cc:	4b8e      	ldr	r3, [pc, #568]	; (5b08 <audioFrameString3+0x368>)
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	42a3      	cmp	r3, r4
    58d2:	f340 8111 	ble.w	5af8 <audioFrameString3+0x358>
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    58d6:	4b96      	ldr	r3, [pc, #600]	; (5b30 <audioFrameString3+0x390>)
    58d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58dc:	edd3 7a00 	vldr	s15, [r3]
    58e0:	4b94      	ldr	r3, [pc, #592]	; (5b34 <audioFrameString3+0x394>)
    58e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58e6:	ed93 7a00 	vldr	s14, [r3]
    58ea:	ee77 7a87 	vadd.f32	s15, s15, s14
    58ee:	ab06      	add	r3, sp, #24
    58f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58f4:	ed43 7a02 	vstr	s15, [r3, #-8]
			if (theNote[i] < 0.0f)
    58f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    58fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5900:	f53f af6d 	bmi.w	57de <audioFrameString3+0x3e>
			if (theNote[i] > 127.0f)
    5904:	ab06      	add	r3, sp, #24
    5906:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    590a:	ed13 7a02 	vldr	s14, [r3, #-8]
    590e:	eddf 7a8a 	vldr	s15, [pc, #552]	; 5b38 <audioFrameString3+0x398>
    5912:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    591a:	dd04      	ble.n	5926 <audioFrameString3+0x186>
				theNote[i] = 127.0f;
    591c:	ab06      	add	r3, sp, #24
    591e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5922:	ed43 7a02 	vstr	s15, [r3, #-8]
			if (isnan(theNote[i]))
    5926:	ab06      	add	r3, sp, #24
    5928:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    592c:	ed53 7a02 	vldr	s15, [r3, #-8]
    5930:	eef4 7a67 	vcmp.f32	s15, s15
    5934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5938:	f5bf af58 	bvs.w	57ec <audioFrameString3+0x4c>
			float finalFreq = mtofTableLookup(theNote[i]);
    593c:	ea4f 0884 	mov.w	r8, r4, lsl #2
    5940:	ab06      	add	r3, sp, #24
    5942:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5946:	ed53 8a02 	vldr	s17, [r3, #-8]
    594a:	eeb0 0a68 	vmov.f32	s0, s17
    594e:	f003 fe73 	bl	9638 <__mtofTableLookup_veneer>
    5952:	eeb0 8a40 	vmov.f32	s16, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    5956:	4d79      	ldr	r5, [pc, #484]	; (5b3c <audioFrameString3+0x39c>)
    5958:	4445      	add	r5, r8
    595a:	4628      	mov	r0, r5
    595c:	f003 ff78 	bl	9850 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    5960:	4b77      	ldr	r3, [pc, #476]	; (5b40 <audioFrameString3+0x3a0>)
    5962:	4443      	add	r3, r8
    5964:	ed93 0a00 	vldr	s0, [r3]
    5968:	ee38 0ac0 	vsub.f32	s0, s17, s0
    596c:	f003 fe64 	bl	9638 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    5970:	eec8 7a00 	vdiv.f32	s15, s16, s0
    5974:	edcd 7a00 	vstr	s15, [sp]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    5978:	eec0 7a08 	vdiv.f32	s15, s0, s16
    597c:	edcd 7a01 	vstr	s15, [sp, #4]
			float newStiffness = (knobScaled[0] * 100.0f);
    5980:	4b64      	ldr	r3, [pc, #400]	; (5b14 <audioFrameString3+0x374>)
    5982:	ed93 8a00 	vldr	s16, [r3]
    5986:	eddf 7a6f 	vldr	s15, [pc, #444]	; 5b44 <audioFrameString3+0x3a4>
    598a:	ee28 8a27 	vmul.f32	s16, s16, s15
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    598e:	4b6e      	ldr	r3, [pc, #440]	; (5b48 <audioFrameString3+0x3a8>)
    5990:	4443      	add	r3, r8
    5992:	ed93 7a00 	vldr	s14, [r3]
    5996:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    599a:	ee77 7a27 	vadd.f32	s15, s14, s15
    599e:	eef4 7ac8 	vcmpe.f32	s15, s16
    59a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59a6:	d408      	bmi.n	59ba <audioFrameString3+0x21a>
    59a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    59ac:	ee37 7a67 	vsub.f32	s14, s14, s15
    59b0:	eeb4 7ac8 	vcmpe.f32	s14, s16
    59b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59b8:	dd13      	ble.n	59e2 <audioFrameString3+0x242>
				float squishedStiffness = (newStiffness*0.01f) ;
    59ba:	eddf 8a59 	vldr	s17, [pc, #356]	; 5b20 <audioFrameString3+0x380>
    59be:	ee68 8a28 	vmul.f32	s17, s16, s17
				if ( squishedStiffness != prevSquishedStiffness[i])
    59c2:	4b53      	ldr	r3, [pc, #332]	; (5b10 <audioFrameString3+0x370>)
    59c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59c8:	edd3 7a00 	vldr	s15, [r3]
    59cc:	eef4 7a68 	vcmp.f32	s15, s17
    59d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59d4:	f47f af12 	bne.w	57fc <audioFrameString3+0x5c>
				prevStiffness[i] = newStiffness;
    59d8:	4b5b      	ldr	r3, [pc, #364]	; (5b48 <audioFrameString3+0x3a8>)
    59da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59de:	ed83 8a00 	vstr	s16, [r3]
			float newpuPos = (knobScaled[10] * 200.0f);
    59e2:	4b4c      	ldr	r3, [pc, #304]	; (5b14 <audioFrameString3+0x374>)
    59e4:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    59e8:	eddf 7a58 	vldr	s15, [pc, #352]	; 5b4c <audioFrameString3+0x3ac>
    59ec:	ee28 8a27 	vmul.f32	s16, s16, s15
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    59f0:	4b57      	ldr	r3, [pc, #348]	; (5b50 <audioFrameString3+0x3b0>)
    59f2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59f6:	ed93 7a00 	vldr	s14, [r3]
    59fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    59fe:	ee77 7a27 	vadd.f32	s15, s14, s15
    5a02:	eef4 7ac8 	vcmpe.f32	s15, s16
    5a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a0a:	d408      	bmi.n	5a1e <audioFrameString3+0x27e>
    5a0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5a10:	ee37 7a67 	vsub.f32	s14, s14, s15
    5a14:	eeb4 7ac8 	vcmpe.f32	s14, s16
    5a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a1c:	dd4a      	ble.n	5ab4 <audioFrameString3+0x314>
				float squishedPuPos = (newpuPos*0.005f) ;
    5a1e:	eddf 8a4d 	vldr	s17, [pc, #308]	; 5b54 <audioFrameString3+0x3b4>
    5a22:	ee68 8a28 	vmul.f32	s17, s16, s17
				if ( squishedPuPos != prevSquishedPuPos[i])
    5a26:	4b4c      	ldr	r3, [pc, #304]	; (5b58 <audioFrameString3+0x3b8>)
    5a28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5a2c:	edd3 7a00 	vldr	s15, [r3]
    5a30:	eef4 7a68 	vcmp.f32	s15, s17
    5a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a38:	d037      	beq.n	5aaa <audioFrameString3+0x30a>
					finalPuPos[i] = squishedPuPos;
    5a3a:	4b48      	ldr	r3, [pc, #288]	; (5b5c <audioFrameString3+0x3bc>)
    5a3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5a40:	edc3 8a00 	vstr	s17, [r3]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    5a44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5a48:	ee28 7aa7 	vmul.f32	s14, s17, s15
    5a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
					if (ratioOfNoteToOpenString < pickupKnobVal)
    5a50:	ed9d 7a01 	vldr	s14, [sp, #4]
    5a54:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a5c:	f57f aed9 	bpl.w	5812 <audioFrameString3+0x72>
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    5a60:	ed9d 7a01 	vldr	s14, [sp, #4]
    5a64:	ee37 7ac7 	vsub.f32	s14, s15, s14
    5a68:	ed8d 7a02 	vstr	s14, [sp, #8]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    5a6c:	ed9d 7a01 	vldr	s14, [sp, #4]
    5a70:	eddd 6a02 	vldr	s13, [sp, #8]
    5a74:	ee37 7a66 	vsub.f32	s14, s14, s13
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    5a78:	4b26      	ldr	r3, [pc, #152]	; (5b14 <audioFrameString3+0x374>)
    5a7a:	edd3 6a01 	vldr	s13, [r3, #4]
    5a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    5a82:	ed9d 0a00 	vldr	s0, [sp]
    5a86:	ee20 0a07 	vmul.f32	s0, s0, s14
    5a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5a8e:	ee37 7a66 	vsub.f32	s14, s14, s13
    5a92:	ee20 0a07 	vmul.f32	s0, s0, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    5a96:	ee37 0a80 	vadd.f32	s0, s15, s0
    5a9a:	4628      	mov	r0, r5
    5a9c:	f003 ffc0 	bl	9a20 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    5aa0:	4b2d      	ldr	r3, [pc, #180]	; (5b58 <audioFrameString3+0x3b8>)
    5aa2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5aa6:	edc3 8a00 	vstr	s17, [r3]
				prevPuPos[i] = newpuPos;
    5aaa:	4b29      	ldr	r3, [pc, #164]	; (5b50 <audioFrameString3+0x3b0>)
    5aac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5ab0:	ed83 8a00 	vstr	s16, [r3]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    5ab4:	4b17      	ldr	r3, [pc, #92]	; (5b14 <audioFrameString3+0x374>)
    5ab6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    5aba:	ed9f 0a29 	vldr	s0, [pc, #164]	; 5b60 <audioFrameString3+0x3c0>
    5abe:	ee67 7a80 	vmul.f32	s15, s15, s0
    5ac2:	ee30 0a67 	vsub.f32	s0, s0, s15
    5ac6:	eddf 7a14 	vldr	s15, [pc, #80]	; 5b18 <audioFrameString3+0x378>
    5aca:	ee30 0a27 	vadd.f32	s0, s0, s15
			if (ratioOfNoteToOpenString < pluckKnobVal)
    5ace:	eddd 7a01 	vldr	s15, [sp, #4]
    5ad2:	eef4 7ac0 	vcmpe.f32	s15, s0
    5ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ada:	f57f ae9d 	bpl.w	5818 <audioFrameString3+0x78>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    5ade:	eddd 7a01 	vldr	s15, [sp, #4]
    5ae2:	ee70 7a67 	vsub.f32	s15, s0, s15
    5ae6:	edcd 7a03 	vstr	s15, [sp, #12]
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    5aea:	ed9d 7a01 	vldr	s14, [sp, #4]
    5aee:	eddd 7a03 	vldr	s15, [sp, #12]
    5af2:	ee37 7a67 	vsub.f32	s14, s14, s15
    5af6:	e691      	b.n	581c <audioFrameString3+0x7c>
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5af8:	2500      	movs	r5, #0
    5afa:	e047      	b.n	5b8c <audioFrameString3+0x3ec>
    5afc:	e0001000 	.word	0xe0001000
    5b00:	20005778 	.word	0x20005778
    5b04:	20005360 	.word	0x20005360
    5b08:	20000694 	.word	0x20000694
    5b0c:	200052f0 	.word	0x200052f0
    5b10:	2001ceac 	.word	0x2001ceac
    5b14:	200051f0 	.word	0x200051f0
    5b18:	3dcccccd 	.word	0x3dcccccd
    5b1c:	3f666666 	.word	0x3f666666
    5b20:	3c23d70a 	.word	0x3c23d70a
    5b24:	00000000 	.word	0x00000000
    5b28:	3a83126f 	.word	0x3a83126f
    5b2c:	3983126f 	.word	0x3983126f
    5b30:	20014224 	.word	0x20014224
    5b34:	2001422c 	.word	0x2001422c
    5b38:	42fe0000 	.word	0x42fe0000
    5b3c:	2001cebc 	.word	0x2001cebc
    5b40:	20001194 	.word	0x20001194
    5b44:	42c80000 	.word	0x42c80000
    5b48:	2001ceb4 	.word	0x2001ceb4
    5b4c:	43480000 	.word	0x43480000
    5b50:	2001ce9c 	.word	0x2001ce9c
    5b54:	3ba3d70a 	.word	0x3ba3d70a
    5b58:	2001cea4 	.word	0x2001cea4
    5b5c:	2001ce94 	.word	0x2001ce94
    5b60:	3ecccccd 	.word	0x3ecccccd
    5b64:	4b000000 	.word	0x4b000000
			int iplusbuffer = buffer_offset + i;
    5b68:	1974      	adds	r4, r6, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    5b6a:	f7ff fcd9 	bl	5520 <audioTickString3>
    5b6e:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 5b64 <audioFrameString3+0x3c4>
    5b72:	ee20 0a27 	vmul.f32	s0, s0, s15
    5b76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5b7a:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer] = current_sample;
    5b7e:	4a0f      	ldr	r2, [pc, #60]	; (5bbc <audioFrameString3+0x41c>)
    5b80:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5b84:	3401      	adds	r4, #1
    5b86:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5b8a:	3502      	adds	r5, #2
    5b8c:	2d7f      	cmp	r5, #127	; 0x7f
    5b8e:	ddeb      	ble.n	5b68 <audioFrameString3+0x3c8>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5b90:	4b0b      	ldr	r3, [pc, #44]	; (5bc0 <audioFrameString3+0x420>)
    5b92:	685b      	ldr	r3, [r3, #4]
    5b94:	1bdb      	subs	r3, r3, r7
    5b96:	4a0b      	ldr	r2, [pc, #44]	; (5bc4 <audioFrameString3+0x424>)
    5b98:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5b9a:	ee07 3a90 	vmov	s15, r3
    5b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5ba2:	4b09      	ldr	r3, [pc, #36]	; (5bc8 <audioFrameString3+0x428>)
    5ba4:	ed93 7a00 	vldr	s14, [r3]
    5ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
    5bac:	4b07      	ldr	r3, [pc, #28]	; (5bcc <audioFrameString3+0x42c>)
    5bae:	edc3 7a00 	vstr	s15, [r3]
}
    5bb2:	b006      	add	sp, #24
    5bb4:	ecbd 8b02 	vpop	{d8}
    5bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bbc:	30000000 	.word	0x30000000
    5bc0:	e0001000 	.word	0xe0001000
    5bc4:	2001424c 	.word	0x2001424c
    5bc8:	20000684 	.word	0x20000684
    5bcc:	200051d4 	.word	0x200051d4
	...

00005be0 <oscillator_tick>:
{
    5be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be4:	ed2d 8b06 	vpush	{d8-d10}
    5be8:	b083      	sub	sp, #12
    5bea:	eef0 8a40 	vmov.f32	s17, s0
    5bee:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_OSC; i++)
    5bf0:	2400      	movs	r4, #0
    5bf2:	e00b      	b.n	5c0c <oscillator_tick+0x2c>
		oscOuts[0][i][string] = 0.0f;
    5bf4:	4a4a      	ldr	r2, [pc, #296]	; (5d20 <oscillator_tick+0x140>)
    5bf6:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    5bfa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5bfe:	2300      	movs	r3, #0
    5c00:	6003      	str	r3, [r0, #0]
		oscOuts[1][i][string] = 0.0f;
    5c02:	3106      	adds	r1, #6
    5c04:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5c08:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OSC; i++)
    5c0a:	3401      	adds	r4, #1
    5c0c:	2c02      	cmp	r4, #2
    5c0e:	ddf1      	ble.n	5bf4 <oscillator_tick+0x14>
	for (int osc = 0; osc < oscToTick; osc++)
    5c10:	2400      	movs	r4, #0
    5c12:	e000      	b.n	5c16 <oscillator_tick+0x36>
    5c14:	3401      	adds	r4, #1
    5c16:	4b43      	ldr	r3, [pc, #268]	; (5d24 <oscillator_tick+0x144>)
    5c18:	781b      	ldrb	r3, [r3, #0]
    5c1a:	42a3      	cmp	r3, r4
    5c1c:	dd7a      	ble.n	5d14 <oscillator_tick+0x134>
		if (oscOn[osc])
    5c1e:	4b42      	ldr	r3, [pc, #264]	; (5d28 <oscillator_tick+0x148>)
    5c20:	5d1b      	ldrb	r3, [r3, r4]
    5c22:	2b00      	cmp	r3, #0
    5c24:	d0f6      	beq.n	5c14 <oscillator_tick+0x34>
			param* oscParams = &params[OSC_PARAMS_OFFSET + osc * OscParamsNum];
    5c26:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5c2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5c2e:	3618      	adds	r6, #24
    5c30:	00f7      	lsls	r7, r6, #3
    5c32:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    5c36:	f8df 8110 	ldr.w	r8, [pc, #272]	; 5d48 <oscillator_tick+0x168>
    5c3a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    5c3e:	1caa      	adds	r2, r5, #2
    5c40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5c44:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c48:	edd3 9a15 	vldr	s19, [r3, #84]	; 0x54
			float shape = oscParams[OscShape].realVal[string];
    5c4c:	ed93 aa1c 	vldr	s20, [r3, #112]	; 0x70
			float amp = oscParams[OscAmp].realVal[string];
    5c50:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5c54:	ed93 9a54 	vldr	s18, [r3, #336]	; 0x150
			float freqToSmooth = (note + (fine*0.01f));
    5c58:	eddf 7a34 	vldr	s15, [pc, #208]	; 5d2c <oscillator_tick+0x14c>
    5c5c:	ee20 0a27 	vmul.f32	s0, s0, s15
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c60:	eb05 0a44 	add.w	sl, r5, r4, lsl #1
    5c64:	ea4f 098a 	mov.w	r9, sl, lsl #2
    5c68:	4b31      	ldr	r3, [pc, #196]	; (5d30 <oscillator_tick+0x150>)
    5c6a:	eb03 0b8a 	add.w	fp, r3, sl, lsl #2
    5c6e:	ee30 0a28 	vadd.f32	s0, s0, s17
    5c72:	4658      	mov	r0, fp
    5c74:	f003 fcdc 	bl	9630 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5c78:	4658      	mov	r0, fp
    5c7a:	f003 fc79 	bl	9570 <__tExpSmooth_tick_veneer>
    5c7e:	4b2d      	ldr	r3, [pc, #180]	; (5d34 <oscillator_tick+0x154>)
    5c80:	444b      	add	r3, r9
    5c82:	edd3 7a00 	vldr	s15, [r3]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5c86:	ee30 0a27 	vadd.f32	s0, s0, s15
    5c8a:	f003 fcd5 	bl	9638 <__mtofTableLookup_veneer>
    5c8e:	4b2a      	ldr	r3, [pc, #168]	; (5d38 <oscillator_tick+0x158>)
    5c90:	444b      	add	r3, r9
    5c92:	edd3 7a00 	vldr	s15, [r3]
    5c96:	ee20 0a27 	vmul.f32	s0, s0, s15
			float sample = 0.0f;
    5c9a:	2300      	movs	r3, #0
    5c9c:	9301      	str	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5c9e:	4b27      	ldr	r3, [pc, #156]	; (5d3c <oscillator_tick+0x15c>)
    5ca0:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
    5ca4:	462b      	mov	r3, r5
    5ca6:	2200      	movs	r2, #0
    5ca8:	eef0 0a4a 	vmov.f32	s1, s20
    5cac:	ee30 0a29 	vadd.f32	s0, s0, s19
    5cb0:	4621      	mov	r1, r4
    5cb2:	a801      	add	r0, sp, #4
    5cb4:	47d8      	blx	fp
			sample *= amp;
    5cb6:	eddd 7a01 	vldr	s15, [sp, #4]
    5cba:	ee68 7a27 	vmul.f32	s15, s16, s15
    5cbe:	edcd 7a01 	vstr	s15, [sp, #4]
			sourceValues[osc][string] = sample;
    5cc2:	4b1f      	ldr	r3, [pc, #124]	; (5d40 <oscillator_tick+0x160>)
    5cc4:	444b      	add	r3, r9
    5cc6:	edc3 7a00 	vstr	s15, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5cca:	4b1e      	ldr	r3, [pc, #120]	; (5d44 <oscillator_tick+0x164>)
    5ccc:	ed93 7a00 	vldr	s14, [r3]
    5cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
    5cd4:	edcd 7a01 	vstr	s15, [sp, #4]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5cd8:	ee67 6a89 	vmul.f32	s13, s15, s18
    5cdc:	1bbf      	subs	r7, r7, r6
    5cde:	442f      	add	r7, r5
    5ce0:	3702      	adds	r7, #2
    5ce2:	eb08 0887 	add.w	r8, r8, r7, lsl #2
    5ce6:	ed98 7a00 	vldr	s14, [r8]
    5cea:	ee66 6a87 	vmul.f32	s13, s13, s14
    5cee:	4b0c      	ldr	r3, [pc, #48]	; (5d20 <oscillator_tick+0x140>)
    5cf0:	4499      	add	r9, r3
    5cf2:	edc9 6a00 	vstr	s13, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    5cfa:	ee76 6ac9 	vsub.f32	s13, s13, s18
    5cfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5d02:	ee27 7a27 	vmul.f32	s14, s14, s15
    5d06:	f10a 0a06 	add.w	sl, sl, #6
    5d0a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    5d0e:	ed83 7a00 	vstr	s14, [r3]
    5d12:	e77f      	b.n	5c14 <oscillator_tick+0x34>
}
    5d14:	b003      	add	sp, #12
    5d16:	ecbd 8b06 	vpop	{d8-d10}
    5d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d1e:	bf00      	nop
    5d20:	2001d4d8 	.word	0x2001d4d8
    5d24:	200008ec 	.word	0x200008ec
    5d28:	2001d4d4 	.word	0x2001d4d4
    5d2c:	3c23d70a 	.word	0x3c23d70a
    5d30:	2001d5b0 	.word	0x2001d5b0
    5d34:	2001d44c 	.word	0x2001d44c
    5d38:	2001d1dc 	.word	0x2001d1dc
    5d3c:	2001d678 	.word	0x2001d678
    5d40:	2001d6b4 	.word	0x2001d6b4
    5d44:	200008d8 	.word	0x200008d8
    5d48:	200191e8 	.word	0x200191e8
    5d4c:	f3af 8000 	nop.w
    5d50:	f3af 8000 	nop.w
    5d54:	f3af 8000 	nop.w
    5d58:	f3af 8000 	nop.w
    5d5c:	f3af 8000 	nop.w

00005d60 <sawSquareTick>:
{
    5d60:	b538      	push	{r3, r4, r5, lr}
    5d62:	ed2d 8b02 	vpush	{d8}
    5d66:	4605      	mov	r5, r0
    5d68:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5d6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5d70:	4c0b      	ldr	r4, [pc, #44]	; (5da0 <sawSquareTick+0x40>)
    5d72:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5d76:	4620      	mov	r0, r4
    5d78:	f003 fc9e 	bl	96b8 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    5d7c:	eeb0 0a48 	vmov.f32	s0, s16
    5d80:	4620      	mov	r0, r4
    5d82:	f003 fe81 	bl	9a88 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    5d86:	4620      	mov	r0, r4
    5d88:	f003 fc06 	bl	9598 <__tPBSawSquare_tick_veneer>
    5d8c:	edd5 7a00 	vldr	s15, [r5]
    5d90:	ee77 7a80 	vadd.f32	s15, s15, s0
    5d94:	edc5 7a00 	vstr	s15, [r5]
}
    5d98:	ecbd 8b02 	vpop	{d8}
    5d9c:	bd38      	pop	{r3, r4, r5, pc}
    5d9e:	bf00      	nop
    5da0:	2001d620 	.word	0x2001d620
    5da4:	f3af 8000 	nop.w
    5da8:	f3af 8000 	nop.w
    5dac:	f3af 8000 	nop.w
    5db0:	f3af 8000 	nop.w
    5db4:	f3af 8000 	nop.w
    5db8:	f3af 8000 	nop.w
    5dbc:	f3af 8000 	nop.w

00005dc0 <sineTriTick>:
{
    5dc0:	b538      	push	{r3, r4, r5, lr}
    5dc2:	ed2d 8b02 	vpush	{d8}
    5dc6:	4605      	mov	r5, r0
    5dc8:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5dcc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5dd0:	4c0b      	ldr	r4, [pc, #44]	; (5e00 <sineTriTick+0x40>)
    5dd2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5dd6:	4620      	mov	r0, r4
    5dd8:	f003 fdf6 	bl	99c8 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    5ddc:	eeb0 0a48 	vmov.f32	s0, s16
    5de0:	4620      	mov	r0, r4
    5de2:	f003 fba1 	bl	9528 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    5de6:	4620      	mov	r0, r4
    5de8:	f003 fbb6 	bl	9558 <__tPBSineTriangle_tick_veneer>
    5dec:	edd5 7a00 	vldr	s15, [r5]
    5df0:	ee77 7a80 	vadd.f32	s15, s15, s0
    5df4:	edc5 7a00 	vstr	s15, [r5]
}
    5df8:	ecbd 8b02 	vpop	{d8}
    5dfc:	bd38      	pop	{r3, r4, r5, pc}
    5dfe:	bf00      	nop
    5e00:	2001d69c 	.word	0x2001d69c
    5e04:	f3af 8000 	nop.w
    5e08:	f3af 8000 	nop.w
    5e0c:	f3af 8000 	nop.w
    5e10:	f3af 8000 	nop.w
    5e14:	f3af 8000 	nop.w
    5e18:	f3af 8000 	nop.w
    5e1c:	f3af 8000 	nop.w

00005e20 <sawTick>:
{
    5e20:	b538      	push	{r3, r4, r5, lr}
    5e22:	4604      	mov	r4, r0
	tPBSaw_setFreq(&saw[v][string], freq);
    5e24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5e28:	4d07      	ldr	r5, [pc, #28]	; (5e48 <sawTick+0x28>)
    5e2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5e2e:	4628      	mov	r0, r5
    5e30:	f003 fc6a 	bl	9708 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    5e34:	4628      	mov	r0, r5
    5e36:	f003 fe3b 	bl	9ab0 <__tPBSaw_tick_veneer>
    5e3a:	edd4 7a00 	vldr	s15, [r4]
    5e3e:	ee77 7a80 	vadd.f32	s15, s15, s0
    5e42:	edc4 7a00 	vstr	s15, [r4]
}
    5e46:	bd38      	pop	{r3, r4, r5, pc}
    5e48:	2001d608 	.word	0x2001d608
    5e4c:	f3af 8000 	nop.w
    5e50:	f3af 8000 	nop.w
    5e54:	f3af 8000 	nop.w
    5e58:	f3af 8000 	nop.w
    5e5c:	f3af 8000 	nop.w

00005e60 <pulseTick>:
{
    5e60:	b538      	push	{r3, r4, r5, lr}
    5e62:	ed2d 8b02 	vpush	{d8}
    5e66:	4605      	mov	r5, r0
    5e68:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    5e6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5e70:	4c0b      	ldr	r4, [pc, #44]	; (5ea0 <pulseTick+0x40>)
    5e72:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5e76:	4620      	mov	r0, r4
    5e78:	f003 fd26 	bl	98c8 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    5e7c:	eeb0 0a48 	vmov.f32	s0, s16
    5e80:	4620      	mov	r0, r4
    5e82:	f003 fe3d 	bl	9b00 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    5e86:	4620      	mov	r0, r4
    5e88:	f003 fdb6 	bl	99f8 <__tPBPulse_tick_veneer>
    5e8c:	edd5 7a00 	vldr	s15, [r5]
    5e90:	ee77 7a80 	vadd.f32	s15, s15, s0
    5e94:	edc5 7a00 	vstr	s15, [r5]
}
    5e98:	ecbd 8b02 	vpop	{d8}
    5e9c:	bd38      	pop	{r3, r4, r5, pc}
    5e9e:	bf00      	nop
    5ea0:	2001d5ec 	.word	0x2001d5ec
    5ea4:	f3af 8000 	nop.w
    5ea8:	f3af 8000 	nop.w
    5eac:	f3af 8000 	nop.w
    5eb0:	f3af 8000 	nop.w
    5eb4:	f3af 8000 	nop.w
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <sineTick>:
{
    5ec0:	b538      	push	{r3, r4, r5, lr}
    5ec2:	4604      	mov	r4, r0
    tCycle_setFreq(&sine[v][string], freq);
    5ec4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5ec8:	4d07      	ldr	r5, [pc, #28]	; (5ee8 <sineTick+0x28>)
    5eca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5ece:	4628      	mov	r0, r5
    5ed0:	f003 fcf6 	bl	98c0 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    5ed4:	4628      	mov	r0, r5
    5ed6:	f003 fdff 	bl	9ad8 <__tCycle_tick_veneer>
    5eda:	edd4 7a00 	vldr	s15, [r4]
    5ede:	ee77 7a80 	vadd.f32	s15, s15, s0
    5ee2:	edc4 7a00 	vstr	s15, [r4]
}
    5ee6:	bd38      	pop	{r3, r4, r5, pc}
    5ee8:	2001d684 	.word	0x2001d684
    5eec:	f3af 8000 	nop.w
    5ef0:	f3af 8000 	nop.w
    5ef4:	f3af 8000 	nop.w
    5ef8:	f3af 8000 	nop.w
    5efc:	f3af 8000 	nop.w

00005f00 <triTick>:
{
    5f00:	b538      	push	{r3, r4, r5, lr}
    5f02:	ed2d 8b02 	vpush	{d8}
    5f06:	4605      	mov	r5, r0
    5f08:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    5f0c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5f10:	4c0b      	ldr	r4, [pc, #44]	; (5f40 <triTick+0x40>)
    5f12:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5f16:	4620      	mov	r0, r4
    5f18:	f003 fd46 	bl	99a8 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    5f1c:	eeb0 0a48 	vmov.f32	s0, s16
    5f20:	4620      	mov	r0, r4
    5f22:	f003 fd39 	bl	9998 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    5f26:	4620      	mov	r0, r4
    5f28:	f003 fcf6 	bl	9918 <__tPBTriangle_tick_veneer>
    5f2c:	edd5 7a00 	vldr	s15, [r5]
    5f30:	ee77 7a80 	vadd.f32	s15, s15, s0
    5f34:	edc5 7a00 	vstr	s15, [r5]
}
    5f38:	ecbd 8b02 	vpop	{d8}
    5f3c:	bd38      	pop	{r3, r4, r5, pc}
    5f3e:	bf00      	nop
    5f40:	2001d820 	.word	0x2001d820
    5f44:	f3af 8000 	nop.w
    5f48:	f3af 8000 	nop.w
    5f4c:	f3af 8000 	nop.w
    5f50:	f3af 8000 	nop.w
    5f54:	f3af 8000 	nop.w
    5f58:	f3af 8000 	nop.w
    5f5c:	f3af 8000 	nop.w

00005f60 <userTick>:
}
    5f60:	4770      	bx	lr
    5f62:	bf00      	nop
    5f64:	f3af 8000 	nop.w
    5f68:	f3af 8000 	nop.w
    5f6c:	f3af 8000 	nop.w
    5f70:	f3af 8000 	nop.w
    5f74:	f3af 8000 	nop.w
    5f78:	f3af 8000 	nop.w
    5f7c:	f3af 8000 	nop.w

00005f80 <filter_tick>:
{
    5f80:	b530      	push	{r4, r5, lr}
    5f82:	ed2d 8b02 	vpush	{d8}
    5f86:	b085      	sub	sp, #20
    5f88:	4604      	mov	r4, r0
    5f8a:	460d      	mov	r5, r1
	float cutoff[2] = {0.0f, 0.0f};
    5f8c:	2300      	movs	r3, #0
    5f8e:	9302      	str	r3, [sp, #8]
    5f90:	9303      	str	r3, [sp, #12]
	uint8_t enabledFilt[2] = {0,0};
    5f92:	2200      	movs	r2, #0
    5f94:	f8ad 2004 	strh.w	r2, [sp, #4]
	for (int f = 0; f < NUM_FILT; f++)
    5f98:	e000      	b.n	5f9c <filter_tick+0x1c>
    5f9a:	3201      	adds	r2, #1
    5f9c:	2a01      	cmp	r2, #1
    5f9e:	dc31      	bgt.n	6004 <filter_tick+0x84>
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
    5fa0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5fa4:	005b      	lsls	r3, r3, #1
    5fa6:	335f      	adds	r3, #95	; 0x5f
    5fa8:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
    5fac:	4831      	ldr	r0, [pc, #196]	; (6074 <filter_tick+0xf4>)
    5fae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		float enabled = filtParams[FilterEnabled].realVal[string];
    5fb2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    5fb6:	442b      	add	r3, r5
    5fb8:	3302      	adds	r3, #2
    5fba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5fbe:	ed90 7a00 	vldr	s14, [r0]
		enabledFilt[f] = (enabled > 0.5f);
    5fc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5fce:	bfcc      	ite	gt
    5fd0:	2301      	movgt	r3, #1
    5fd2:	2300      	movle	r3, #0
    5fd4:	f102 0010 	add.w	r0, r2, #16
    5fd8:	4468      	add	r0, sp
    5fda:	f800 3c0c 	strb.w	r3, [r0, #-12]
		if (!enabledFilt[f]) continue;
    5fde:	2b00      	cmp	r3, #0
    5fe0:	d0db      	beq.n	5f9a <filter_tick+0x1a>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5fe2:	1cab      	adds	r3, r5, #2
    5fe4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5fe8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5fec:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
	    cutoff[f]  = MIDIcutoff + (note  * keyFollow);
    5ff0:	ee67 7a80 	vmul.f32	s15, s15, s0
    5ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
    5ff8:	ab04      	add	r3, sp, #16
    5ffa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5ffe:	ed43 7a02 	vstr	s15, [r3, #-8]
    6002:	e7ca      	b.n	5f9a <filter_tick+0x1a>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6004:	f205 22ef 	addw	r2, r5, #751	; 0x2ef
    6008:	4b1a      	ldr	r3, [pc, #104]	; (6074 <filter_tick+0xf4>)
    600a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    600e:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    6012:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6016:	b13b      	cbz	r3, 6028 <filter_tick+0xa8>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    6018:	4b17      	ldr	r3, [pc, #92]	; (6078 <filter_tick+0xf8>)
    601a:	681b      	ldr	r3, [r3, #0]
    601c:	462a      	mov	r2, r5
    601e:	ed9d 0a02 	vldr	s0, [sp, #8]
    6022:	2100      	movs	r1, #0
    6024:	4620      	mov	r0, r4
    6026:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6028:	ed94 7a00 	vldr	s14, [r4]
    602c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6030:	ee77 7ac8 	vsub.f32	s15, s15, s16
    6034:	ee27 7a27 	vmul.f32	s14, s14, s15
	samples[1] += sendToFilter2;
    6038:	edd4 7a01 	vldr	s15, [r4, #4]
    603c:	ee77 7a87 	vadd.f32	s15, s15, s14
    6040:	edc4 7a01 	vstr	s15, [r4, #4]
	if (enabledFilt[1])
    6044:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6048:	b13b      	cbz	r3, 605a <filter_tick+0xda>
		filterTick[1](&samples[1], 1, cutoff[1], string);
    604a:	4b0b      	ldr	r3, [pc, #44]	; (6078 <filter_tick+0xf8>)
    604c:	685b      	ldr	r3, [r3, #4]
    604e:	462a      	mov	r2, r5
    6050:	ed9d 0a03 	vldr	s0, [sp, #12]
    6054:	2101      	movs	r1, #1
    6056:	1d20      	adds	r0, r4, #4
    6058:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    605a:	ed94 0a01 	vldr	s0, [r4, #4]
    605e:	edd4 7a00 	vldr	s15, [r4]
    6062:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    6066:	ee30 0a27 	vadd.f32	s0, s0, s15
    606a:	b005      	add	sp, #20
    606c:	ecbd 8b02 	vpop	{d8}
    6070:	bd30      	pop	{r4, r5, pc}
    6072:	bf00      	nop
    6074:	200191e8 	.word	0x200191e8
    6078:	2001d1c4 	.word	0x2001d1c4
    607c:	f3af 8000 	nop.w

00006080 <lowpassTick>:
{
    6080:	b570      	push	{r4, r5, r6, lr}
    6082:	4604      	mov	r4, r0
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    6084:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6088:	0096      	lsls	r6, r2, #2
    608a:	4d0b      	ldr	r5, [pc, #44]	; (60b8 <lowpassTick+0x38>)
    608c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6090:	4628      	mov	r0, r5
    6092:	f003 fa99 	bl	95c8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickLP(&lowpass[v][string], *sample);
    6096:	ed94 0a00 	vldr	s0, [r4]
    609a:	4628      	mov	r0, r5
    609c:	f003 fb9c 	bl	97d8 <__tSVF_tickLP_veneer>
    60a0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    60a4:	4b05      	ldr	r3, [pc, #20]	; (60bc <lowpassTick+0x3c>)
    60a6:	4433      	add	r3, r6
    60a8:	edd3 7a00 	vldr	s15, [r3]
    60ac:	ee20 0a27 	vmul.f32	s0, s0, s15
    60b0:	ed84 0a00 	vstr	s0, [r4]
}
    60b4:	bd70      	pop	{r4, r5, r6, pc}
    60b6:	bf00      	nop
    60b8:	2001d338 	.word	0x2001d338
    60bc:	2001d1b4 	.word	0x2001d1b4

000060c0 <highpassTick>:
{
    60c0:	b570      	push	{r4, r5, r6, lr}
    60c2:	4604      	mov	r4, r0
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    60c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    60c8:	0096      	lsls	r6, r2, #2
    60ca:	4d0b      	ldr	r5, [pc, #44]	; (60f8 <highpassTick+0x38>)
    60cc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    60d0:	4628      	mov	r0, r5
    60d2:	f003 fa79 	bl	95c8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickHP(&highpass[v][string], *sample);
    60d6:	ed94 0a00 	vldr	s0, [r4]
    60da:	4628      	mov	r0, r5
    60dc:	f003 fca8 	bl	9a30 <__tSVF_tickHP_veneer>
    60e0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    60e4:	4b05      	ldr	r3, [pc, #20]	; (60fc <highpassTick+0x3c>)
    60e6:	4433      	add	r3, r6
    60e8:	edd3 7a00 	vldr	s15, [r3]
    60ec:	ee20 0a27 	vmul.f32	s0, s0, s15
    60f0:	ed84 0a00 	vstr	s0, [r4]
}
    60f4:	bd70      	pop	{r4, r5, r6, pc}
    60f6:	bf00      	nop
    60f8:	2001d234 	.word	0x2001d234
    60fc:	2001d1b4 	.word	0x2001d1b4

00006100 <bandpassTick>:
{
    6100:	b570      	push	{r4, r5, r6, lr}
    6102:	4604      	mov	r4, r0
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    6104:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6108:	0096      	lsls	r6, r2, #2
    610a:	4d0b      	ldr	r5, [pc, #44]	; (6138 <bandpassTick+0x38>)
    610c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6110:	4628      	mov	r0, r5
    6112:	f003 fa59 	bl	95c8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tickBP(&bandpass[v][string], *sample);
    6116:	ed94 0a00 	vldr	s0, [r4]
    611a:	4628      	mov	r0, r5
    611c:	f003 fca0 	bl	9a60 <__tSVF_tickBP_veneer>
    6120:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6124:	4b05      	ldr	r3, [pc, #20]	; (613c <bandpassTick+0x3c>)
    6126:	4433      	add	r3, r6
    6128:	edd3 7a00 	vldr	s15, [r3]
    612c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6130:	ed84 0a00 	vstr	s0, [r4]
}
    6134:	bd70      	pop	{r4, r5, r6, pc}
    6136:	bf00      	nop
    6138:	2001d060 	.word	0x2001d060
    613c:	2001d1b4 	.word	0x2001d1b4

00006140 <diodeLowpassTick>:
{
    6140:	b570      	push	{r4, r5, r6, lr}
    6142:	4604      	mov	r4, r0
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    6144:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6148:	0096      	lsls	r6, r2, #2
    614a:	4d0b      	ldr	r5, [pc, #44]	; (6178 <diodeLowpassTick+0x38>)
    614c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6150:	4628      	mov	r0, r5
    6152:	f003 fcd1 	bl	9af8 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6156:	ed94 0a00 	vldr	s0, [r4]
    615a:	4628      	mov	r0, r5
    615c:	f003 f9ec 	bl	9538 <__tDiodeFilter_tickEfficient_veneer>
    6160:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6164:	4b05      	ldr	r3, [pc, #20]	; (617c <diodeLowpassTick+0x3c>)
    6166:	4433      	add	r3, r6
    6168:	edd3 7a00 	vldr	s15, [r3]
    616c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6170:	ed84 0a00 	vstr	s0, [r4]
}
    6174:	bd70      	pop	{r4, r5, r6, pc}
    6176:	bf00      	nop
    6178:	2001d140 	.word	0x2001d140
    617c:	2001d1b4 	.word	0x2001d1b4

00006180 <VZpeakTick>:
{
    6180:	b538      	push	{r3, r4, r5, lr}
    6182:	4604      	mov	r4, r0
	tVZFilterBell_setFreqFast(&VZfilterPeak[v][string], cutoff);
    6184:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6188:	4d06      	ldr	r5, [pc, #24]	; (61a4 <VZpeakTick+0x24>)
    618a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    618e:	4628      	mov	r0, r5
    6190:	f003 fc16 	bl	99c0 <__tVZFilterBell_setFreqFast_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    6194:	ed94 0a00 	vldr	s0, [r4]
    6198:	4628      	mov	r0, r5
    619a:	f003 fb25 	bl	97e8 <__tVZFilterBell_tick_veneer>
    619e:	ed84 0a00 	vstr	s0, [r4]
}
    61a2:	bd38      	pop	{r3, r4, r5, pc}
    61a4:	2001d044 	.word	0x2001d044
    61a8:	f3af 8000 	nop.w
    61ac:	f3af 8000 	nop.w
    61b0:	f3af 8000 	nop.w
    61b4:	f3af 8000 	nop.w
    61b8:	f3af 8000 	nop.w
    61bc:	f3af 8000 	nop.w

000061c0 <VZlowshelfTick>:
{
    61c0:	b538      	push	{r3, r4, r5, lr}
    61c2:	4604      	mov	r4, r0
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    61c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    61c8:	4d06      	ldr	r5, [pc, #24]	; (61e4 <VZlowshelfTick+0x24>)
    61ca:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    61ce:	4628      	mov	r0, r5
    61d0:	f003 fc72 	bl	9ab8 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    61d4:	ed94 0a00 	vldr	s0, [r4]
    61d8:	4628      	mov	r0, r5
    61da:	f003 fa71 	bl	96c0 <__tVZFilterLS_tick_veneer>
    61de:	ed84 0a00 	vstr	s0, [r4]
}
    61e2:	bd38      	pop	{r3, r4, r5, pc}
    61e4:	2001d034 	.word	0x2001d034
    61e8:	f3af 8000 	nop.w
    61ec:	f3af 8000 	nop.w
    61f0:	f3af 8000 	nop.w
    61f4:	f3af 8000 	nop.w
    61f8:	f3af 8000 	nop.w
    61fc:	f3af 8000 	nop.w

00006200 <VZhighshelfTick>:
{
    6200:	b538      	push	{r3, r4, r5, lr}
    6202:	4604      	mov	r4, r0
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    6204:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6208:	4d06      	ldr	r5, [pc, #24]	; (6224 <VZhighshelfTick+0x24>)
    620a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    620e:	4628      	mov	r0, r5
    6210:	f003 fb52 	bl	98b8 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    6214:	ed94 0a00 	vldr	s0, [r4]
    6218:	4628      	mov	r0, r5
    621a:	f003 fa29 	bl	9670 <__tVZFilterHS_tick_veneer>
    621e:	ed84 0a00 	vstr	s0, [r4]
}
    6222:	bd38      	pop	{r3, r4, r5, pc}
    6224:	2001d024 	.word	0x2001d024
    6228:	f3af 8000 	nop.w
    622c:	f3af 8000 	nop.w
    6230:	f3af 8000 	nop.w
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <VZbandrejectTick>:
{
    6240:	b570      	push	{r4, r5, r6, lr}
    6242:	4604      	mov	r4, r0
	tVZFilterBR_setFreqFast(&VZfilterBR[v][string], cutoff);
    6244:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6248:	0096      	lsls	r6, r2, #2
    624a:	4d0b      	ldr	r5, [pc, #44]	; (6278 <VZbandrejectTick+0x38>)
    624c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6250:	4628      	mov	r0, r5
    6252:	f003 fa41 	bl	96d8 <__tVZFilterBR_setFreqFast_veneer>
	*sample = tVZFilterBR_tick(&VZfilterBR[v][string], *sample);
    6256:	ed94 0a00 	vldr	s0, [r4]
    625a:	4628      	mov	r0, r5
    625c:	f003 fb4c 	bl	98f8 <__tVZFilterBR_tick_veneer>
    6260:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6264:	4b05      	ldr	r3, [pc, #20]	; (627c <VZbandrejectTick+0x3c>)
    6266:	4433      	add	r3, r6
    6268:	edd3 7a00 	vldr	s15, [r3]
    626c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6270:	ed84 0a00 	vstr	s0, [r4]
}
    6274:	bd70      	pop	{r4, r5, r6, pc}
    6276:	bf00      	nop
    6278:	2001d014 	.word	0x2001d014
    627c:	2001d1b4 	.word	0x2001d1b4

00006280 <LadderLowpassTick>:
{
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	4604      	mov	r4, r0
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    6284:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6288:	0096      	lsls	r6, r2, #2
    628a:	4d0b      	ldr	r5, [pc, #44]	; (62b8 <LadderLowpassTick+0x38>)
    628c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6290:	4628      	mov	r0, r5
    6292:	f003 fa49 	bl	9728 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6296:	ed94 0a00 	vldr	s0, [r4]
    629a:	4628      	mov	r0, r5
    629c:	f003 fc34 	bl	9b08 <__tLadderFilter_tick_veneer>
    62a0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    62a4:	4b05      	ldr	r3, [pc, #20]	; (62bc <LadderLowpassTick+0x3c>)
    62a6:	4433      	add	r3, r6
    62a8:	edd3 7a00 	vldr	s15, [r3]
    62ac:	ee20 0a27 	vmul.f32	s0, s0, s15
    62b0:	ed84 0a00 	vstr	s0, [r4]
}
    62b4:	bd70      	pop	{r4, r5, r6, pc}
    62b6:	bf00      	nop
    62b8:	2001d004 	.word	0x2001d004
    62bc:	2001d1b4 	.word	0x2001d1b4

000062c0 <setFreqMultPitch>:
	pitch *= 24.0f;
    62c0:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    62c4:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    62c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    62cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    62d0:	3320      	adds	r3, #32
    62d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    62d6:	440b      	add	r3, r1
    62d8:	3302      	adds	r3, #2
    62da:	4a0b      	ldr	r2, [pc, #44]	; (6308 <setFreqMultPitch+0x48>)
    62dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    62e0:	ed93 7a00 	vldr	s14, [r3]
    62e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    62e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    62ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62f0:	dd01      	ble.n	62f6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    62f2:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    62f6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    62fa:	4b04      	ldr	r3, [pc, #16]	; (630c <setFreqMultPitch+0x4c>)
    62fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6300:	ed83 0a00 	vstr	s0, [r3]
}
    6304:	4770      	bx	lr
    6306:	bf00      	nop
    6308:	200191e8 	.word	0x200191e8
    630c:	2001d44c 	.word	0x2001d44c
    6310:	f3af 8000 	nop.w
    6314:	f3af 8000 	nop.w
    6318:	f3af 8000 	nop.w
    631c:	f3af 8000 	nop.w

00006320 <setFreqMultHarm>:
	harm *= 15.0f;
    6320:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    6324:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6328:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    632c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6330:	3320      	adds	r3, #32
    6332:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    6336:	440b      	add	r3, r1
    6338:	3302      	adds	r3, #2
    633a:	4a17      	ldr	r2, [pc, #92]	; (6398 <setFreqMultHarm+0x78>)
    633c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6340:	ed93 7a00 	vldr	s14, [r3]
    6344:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6348:	eeb4 7ae7 	vcmpe.f32	s14, s15
    634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6350:	dd01      	ble.n	6356 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    6352:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    6356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    635e:	db0b      	blt.n	6378 <setFreqMultHarm+0x58>
		freqMult[osc][string] = (harm + 1);
    6360:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6364:	ee30 0a27 	vadd.f32	s0, s0, s15
    6368:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    636c:	4b0b      	ldr	r3, [pc, #44]	; (639c <setFreqMultHarm+0x7c>)
    636e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6372:	ed83 0a00 	vstr	s0, [r3]
    6376:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    6378:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    637c:	ee30 0a67 	vsub.f32	s0, s0, s15
    6380:	eeb0 0ac0 	vabs.f32	s0, s0
    6384:	ee87 7a80 	vdiv.f32	s14, s15, s0
    6388:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    638c:	4b03      	ldr	r3, [pc, #12]	; (639c <setFreqMultHarm+0x7c>)
    638e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6392:	ed83 7a00 	vstr	s14, [r3]
}
    6396:	4770      	bx	lr
    6398:	200191e8 	.word	0x200191e8
    639c:	2001d1dc 	.word	0x2001d1dc

000063a0 <lowpassSetQ>:
{
    63a0:	b508      	push	{r3, lr}
    tSVF_setQ(&lowpass[v][string], q);
    63a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63a6:	4803      	ldr	r0, [pc, #12]	; (63b4 <lowpassSetQ+0x14>)
    63a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63ac:	f003 fa10 	bl	97d0 <__tSVF_setQ_veneer>
}
    63b0:	bd08      	pop	{r3, pc}
    63b2:	bf00      	nop
    63b4:	2001d338 	.word	0x2001d338
    63b8:	f3af 8000 	nop.w
    63bc:	f3af 8000 	nop.w

000063c0 <highpassSetQ>:
{
    63c0:	b508      	push	{r3, lr}
    tSVF_setQ(&highpass[v][string], q);
    63c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63c6:	4803      	ldr	r0, [pc, #12]	; (63d4 <highpassSetQ+0x14>)
    63c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63cc:	f003 fa00 	bl	97d0 <__tSVF_setQ_veneer>
}
    63d0:	bd08      	pop	{r3, pc}
    63d2:	bf00      	nop
    63d4:	2001d234 	.word	0x2001d234
    63d8:	f3af 8000 	nop.w
    63dc:	f3af 8000 	nop.w

000063e0 <bandpassSetQ>:
{
    63e0:	b508      	push	{r3, lr}
    tSVF_setQ(&bandpass[v][string], q);
    63e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63e6:	4803      	ldr	r0, [pc, #12]	; (63f4 <bandpassSetQ+0x14>)
    63e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63ec:	f003 f9f0 	bl	97d0 <__tSVF_setQ_veneer>
}
    63f0:	bd08      	pop	{r3, pc}
    63f2:	bf00      	nop
    63f4:	2001d060 	.word	0x2001d060
    63f8:	f3af 8000 	nop.w
    63fc:	f3af 8000 	nop.w

00006400 <diodeLowpassSetQ>:
{
    6400:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    6402:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6406:	4803      	ldr	r0, [pc, #12]	; (6414 <diodeLowpassSetQ+0x14>)
    6408:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    640c:	f003 f9c8 	bl	97a0 <__tDiodeFilter_setQ_veneer>
}
    6410:	bd08      	pop	{r3, pc}
    6412:	bf00      	nop
    6414:	2001d140 	.word	0x2001d140
    6418:	f3af 8000 	nop.w
    641c:	f3af 8000 	nop.w

00006420 <VZpeakSetQ>:
{
    6420:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q*20.0f);
    6422:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6426:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
    642a:	ee20 0a27 	vmul.f32	s0, s0, s15
    642e:	4803      	ldr	r0, [pc, #12]	; (643c <VZpeakSetQ+0x1c>)
    6430:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6434:	f003 f908 	bl	9648 <__tVZFilterBell_setBandwidth_veneer>
}
    6438:	bd08      	pop	{r3, pc}
    643a:	bf00      	nop
    643c:	2001d044 	.word	0x2001d044

00006440 <VZlowshelfSetQ>:
{
    6440:	b508      	push	{r3, lr}
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    6442:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6446:	4803      	ldr	r0, [pc, #12]	; (6454 <VZlowshelfSetQ+0x14>)
    6448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    644c:	f003 fa40 	bl	98d0 <__tVZFilterLS_setResonance_veneer>
}
    6450:	bd08      	pop	{r3, pc}
    6452:	bf00      	nop
    6454:	2001d034 	.word	0x2001d034
    6458:	f3af 8000 	nop.w
    645c:	f3af 8000 	nop.w

00006460 <VZhighshelfSetQ>:
{
    6460:	b508      	push	{r3, lr}
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    6462:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6466:	4803      	ldr	r0, [pc, #12]	; (6474 <VZhighshelfSetQ+0x14>)
    6468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    646c:	f003 fa0c 	bl	9888 <__tVZFilterHS_setResonance_veneer>
}
    6470:	bd08      	pop	{r3, pc}
    6472:	bf00      	nop
    6474:	2001d024 	.word	0x2001d024
    6478:	f3af 8000 	nop.w
    647c:	f3af 8000 	nop.w

00006480 <VZbandrejectSetQ>:
{
    6480:	b508      	push	{r3, lr}
	tVZFilterBR_setResonance(&VZfilterBR[v][string], q);
    6482:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6486:	4803      	ldr	r0, [pc, #12]	; (6494 <VZbandrejectSetQ+0x14>)
    6488:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    648c:	f003 fa60 	bl	9950 <__tVZFilterBR_setResonance_veneer>
}
    6490:	bd08      	pop	{r3, pc}
    6492:	bf00      	nop
    6494:	2001d014 	.word	0x2001d014
    6498:	f3af 8000 	nop.w
    649c:	f3af 8000 	nop.w

000064a0 <LadderLowpassSetQ>:
{
    64a0:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    64a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    64a6:	4803      	ldr	r0, [pc, #12]	; (64b4 <LadderLowpassSetQ+0x14>)
    64a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    64ac:	f003 f898 	bl	95e0 <__tLadderFilter_setQ_veneer>
}
    64b0:	bd08      	pop	{r3, pc}
    64b2:	bf00      	nop
    64b4:	2001d004 	.word	0x2001d004
    64b8:	f3af 8000 	nop.w
    64bc:	f3af 8000 	nop.w

000064c0 <lowpassSetGain>:
{
    64c0:	b538      	push	{r3, r4, r5, lr}
    64c2:	4605      	mov	r5, r0
    64c4:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    64c6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    64ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    64ce:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    64d2:	ee30 0a67 	vsub.f32	s0, s0, s15
    64d6:	f003 fac7 	bl	9a68 <__dbToATableLookup_veneer>
    64da:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    64de:	4b03      	ldr	r3, [pc, #12]	; (64ec <lowpassSetGain+0x2c>)
    64e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    64e4:	ed83 0a00 	vstr	s0, [r3]
}
    64e8:	bd38      	pop	{r3, r4, r5, pc}
    64ea:	bf00      	nop
    64ec:	2001d1b4 	.word	0x2001d1b4
    64f0:	f3af 8000 	nop.w
    64f4:	f3af 8000 	nop.w
    64f8:	f3af 8000 	nop.w
    64fc:	f3af 8000 	nop.w

00006500 <highpassSetGain>:
{
    6500:	b538      	push	{r3, r4, r5, lr}
    6502:	4605      	mov	r5, r0
    6504:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6506:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    650a:	ee20 0a27 	vmul.f32	s0, s0, s15
    650e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6512:	ee30 0a67 	vsub.f32	s0, s0, s15
    6516:	f003 faa7 	bl	9a68 <__dbToATableLookup_veneer>
    651a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    651e:	4b03      	ldr	r3, [pc, #12]	; (652c <highpassSetGain+0x2c>)
    6520:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6524:	ed83 0a00 	vstr	s0, [r3]
}
    6528:	bd38      	pop	{r3, r4, r5, pc}
    652a:	bf00      	nop
    652c:	2001d1b4 	.word	0x2001d1b4
    6530:	f3af 8000 	nop.w
    6534:	f3af 8000 	nop.w
    6538:	f3af 8000 	nop.w
    653c:	f3af 8000 	nop.w

00006540 <bandpassSetGain>:
{
    6540:	b538      	push	{r3, r4, r5, lr}
    6542:	4605      	mov	r5, r0
    6544:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6546:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    654a:	ee20 0a27 	vmul.f32	s0, s0, s15
    654e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6552:	ee30 0a67 	vsub.f32	s0, s0, s15
    6556:	f003 fa87 	bl	9a68 <__dbToATableLookup_veneer>
    655a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    655e:	4b03      	ldr	r3, [pc, #12]	; (656c <bandpassSetGain+0x2c>)
    6560:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6564:	ed83 0a00 	vstr	s0, [r3]
}
    6568:	bd38      	pop	{r3, r4, r5, pc}
    656a:	bf00      	nop
    656c:	2001d1b4 	.word	0x2001d1b4
    6570:	f3af 8000 	nop.w
    6574:	f3af 8000 	nop.w
    6578:	f3af 8000 	nop.w
    657c:	f3af 8000 	nop.w

00006580 <diodeLowpassSetGain>:
{
    6580:	b538      	push	{r3, r4, r5, lr}
    6582:	4605      	mov	r5, r0
    6584:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6586:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    658a:	ee20 0a27 	vmul.f32	s0, s0, s15
    658e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6592:	ee30 0a67 	vsub.f32	s0, s0, s15
    6596:	f003 fa67 	bl	9a68 <__dbToATableLookup_veneer>
    659a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    659e:	4b03      	ldr	r3, [pc, #12]	; (65ac <diodeLowpassSetGain+0x2c>)
    65a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    65a4:	ed83 0a00 	vstr	s0, [r3]
}
    65a8:	bd38      	pop	{r3, r4, r5, pc}
    65aa:	bf00      	nop
    65ac:	2001d1b4 	.word	0x2001d1b4
    65b0:	f3af 8000 	nop.w
    65b4:	f3af 8000 	nop.w
    65b8:	f3af 8000 	nop.w
    65bc:	f3af 8000 	nop.w

000065c0 <VZpeakSetGain>:
{
    65c0:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    65c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    65c6:	4c08      	ldr	r4, [pc, #32]	; (65e8 <VZpeakSetGain+0x28>)
    65c8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    65cc:	eddf 7a07 	vldr	s15, [pc, #28]	; 65ec <VZpeakSetGain+0x2c>
    65d0:	ee20 0a27 	vmul.f32	s0, s0, s15
    65d4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    65d8:	ee30 0a67 	vsub.f32	s0, s0, s15
    65dc:	f003 fa44 	bl	9a68 <__dbToATableLookup_veneer>
    65e0:	4620      	mov	r0, r4
    65e2:	f003 f961 	bl	98a8 <__tVZFilterBell_setGain_veneer>
}
    65e6:	bd10      	pop	{r4, pc}
    65e8:	2001d044 	.word	0x2001d044
    65ec:	42480000 	.word	0x42480000
    65f0:	f3af 8000 	nop.w
    65f4:	f3af 8000 	nop.w
    65f8:	f3af 8000 	nop.w
    65fc:	f3af 8000 	nop.w

00006600 <VZlowshelfSetGain>:
{
    6600:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6602:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6606:	4c08      	ldr	r4, [pc, #32]	; (6628 <VZlowshelfSetGain+0x28>)
    6608:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    660c:	eddf 7a07 	vldr	s15, [pc, #28]	; 662c <VZlowshelfSetGain+0x2c>
    6610:	ee20 0a27 	vmul.f32	s0, s0, s15
    6614:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6618:	ee30 0a67 	vsub.f32	s0, s0, s15
    661c:	f003 fa24 	bl	9a68 <__dbToATableLookup_veneer>
    6620:	4620      	mov	r0, r4
    6622:	f003 f855 	bl	96d0 <__tVZFilterLS_setGain_veneer>
}
    6626:	bd10      	pop	{r4, pc}
    6628:	2001d034 	.word	0x2001d034
    662c:	42480000 	.word	0x42480000
    6630:	f3af 8000 	nop.w
    6634:	f3af 8000 	nop.w
    6638:	f3af 8000 	nop.w
    663c:	f3af 8000 	nop.w

00006640 <VZhighshelfSetGain>:
{
    6640:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6642:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6646:	4c08      	ldr	r4, [pc, #32]	; (6668 <VZhighshelfSetGain+0x28>)
    6648:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    664c:	eddf 7a07 	vldr	s15, [pc, #28]	; 666c <VZhighshelfSetGain+0x2c>
    6650:	ee20 0a27 	vmul.f32	s0, s0, s15
    6654:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6658:	ee30 0a67 	vsub.f32	s0, s0, s15
    665c:	f003 fa04 	bl	9a68 <__dbToATableLookup_veneer>
    6660:	4620      	mov	r0, r4
    6662:	f003 f815 	bl	9690 <__tVZFilterHS_setGain_veneer>
}
    6666:	bd10      	pop	{r4, pc}
    6668:	2001d024 	.word	0x2001d024
    666c:	42480000 	.word	0x42480000
    6670:	f3af 8000 	nop.w
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <VZbandrejectSetGain>:
{
    6680:	b538      	push	{r3, r4, r5, lr}
    6682:	4605      	mov	r5, r0
    6684:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6686:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    668a:	ee20 0a27 	vmul.f32	s0, s0, s15
    668e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6692:	ee30 0a67 	vsub.f32	s0, s0, s15
    6696:	f003 f9e7 	bl	9a68 <__dbToATableLookup_veneer>
    669a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    669e:	4b03      	ldr	r3, [pc, #12]	; (66ac <VZbandrejectSetGain+0x2c>)
    66a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    66a4:	ed83 0a00 	vstr	s0, [r3]
}
    66a8:	bd38      	pop	{r3, r4, r5, pc}
    66aa:	bf00      	nop
    66ac:	2001d1b4 	.word	0x2001d1b4
    66b0:	f3af 8000 	nop.w
    66b4:	f3af 8000 	nop.w
    66b8:	f3af 8000 	nop.w
    66bc:	f3af 8000 	nop.w

000066c0 <LadderLowpassSetGain>:
{
    66c0:	b538      	push	{r3, r4, r5, lr}
    66c2:	4605      	mov	r5, r0
    66c4:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    66c6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    66ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    66ce:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    66d2:	ee30 0a67 	vsub.f32	s0, s0, s15
    66d6:	f003 f9c7 	bl	9a68 <__dbToATableLookup_veneer>
    66da:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    66de:	4b03      	ldr	r3, [pc, #12]	; (66ec <LadderLowpassSetGain+0x2c>)
    66e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    66e4:	ed83 0a00 	vstr	s0, [r3]
}
    66e8:	bd38      	pop	{r3, r4, r5, pc}
    66ea:	bf00      	nop
    66ec:	2001d1b4 	.word	0x2001d1b4
    66f0:	f3af 8000 	nop.w
    66f4:	f3af 8000 	nop.w
    66f8:	f3af 8000 	nop.w
    66fc:	f3af 8000 	nop.w

00006700 <envelope_tick>:
{
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	4606      	mov	r6, r0
	for (int v = 0; v < NUM_ENV; v++)
    6704:	2400      	movs	r4, #0
    6706:	e000      	b.n	670a <envelope_tick+0xa>
    6708:	3401      	adds	r4, #1
    670a:	2c03      	cmp	r4, #3
    670c:	dc14      	bgt.n	6738 <envelope_tick+0x38>
		if (envOn[v])
    670e:	4b0b      	ldr	r3, [pc, #44]	; (673c <envelope_tick+0x3c>)
    6710:	5d1b      	ldrb	r3, [r3, r4]
    6712:	2b00      	cmp	r3, #0
    6714:	d0f8      	beq.n	6708 <envelope_tick+0x8>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6716:	f104 0514 	add.w	r5, r4, #20
    671a:	eb06 0044 	add.w	r0, r6, r4, lsl #1
    671e:	4b08      	ldr	r3, [pc, #32]	; (6740 <envelope_tick+0x40>)
    6720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6724:	f003 f9d0 	bl	9ac8 <__tADSRT_tickNoInterp_veneer>
    6728:	eb06 0545 	add.w	r5, r6, r5, lsl #1
    672c:	4b05      	ldr	r3, [pc, #20]	; (6744 <envelope_tick+0x44>)
    672e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6732:	ed83 0a00 	vstr	s0, [r3]
    6736:	e7e7      	b.n	6708 <envelope_tick+0x8>
}
    6738:	bd70      	pop	{r4, r5, r6, pc}
    673a:	bf00      	nop
    673c:	2001d160 	.word	0x2001d160
    6740:	2001d164 	.word	0x2001d164
    6744:	2001d6b4 	.word	0x2001d6b4
    6748:	f3af 8000 	nop.w
    674c:	f3af 8000 	nop.w
    6750:	f3af 8000 	nop.w
    6754:	f3af 8000 	nop.w
    6758:	f3af 8000 	nop.w
    675c:	f3af 8000 	nop.w

00006760 <lfo_tick>:
{
    6760:	b530      	push	{r4, r5, lr}
    6762:	b083      	sub	sp, #12
    6764:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_LFOS; i++)
    6766:	2400      	movs	r4, #0
    6768:	e000      	b.n	676c <lfo_tick+0xc>
    676a:	3401      	adds	r4, #1
    676c:	2c03      	cmp	r4, #3
    676e:	dc16      	bgt.n	679e <lfo_tick+0x3e>
		if (lfoOn[i])
    6770:	4b0c      	ldr	r3, [pc, #48]	; (67a4 <lfo_tick+0x44>)
    6772:	5d1b      	ldrb	r3, [r3, r4]
    6774:	2b00      	cmp	r3, #0
    6776:	d0f8      	beq.n	676a <lfo_tick+0xa>
			float sample = 0.0f;
    6778:	2300      	movs	r3, #0
    677a:	9301      	str	r3, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    677c:	4b0a      	ldr	r3, [pc, #40]	; (67a8 <lfo_tick+0x48>)
    677e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    6782:	462a      	mov	r2, r5
    6784:	4621      	mov	r1, r4
    6786:	a801      	add	r0, sp, #4
    6788:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    678a:	f104 0118 	add.w	r1, r4, #24
    678e:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    6792:	4b06      	ldr	r3, [pc, #24]	; (67ac <lfo_tick+0x4c>)
    6794:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6798:	9a01      	ldr	r2, [sp, #4]
    679a:	601a      	str	r2, [r3, #0]
    679c:	e7e5      	b.n	676a <lfo_tick+0xa>
}
    679e:	b003      	add	sp, #12
    67a0:	bd30      	pop	{r4, r5, pc}
    67a2:	bf00      	nop
    67a4:	2001d264 	.word	0x2001d264
    67a8:	2001d2c8 	.word	0x2001d2c8
    67ac:	2001d6b4 	.word	0x2001d6b4
    67b0:	f3af 8000 	nop.w
    67b4:	f3af 8000 	nop.w
    67b8:	f3af 8000 	nop.w
    67bc:	f3af 8000 	nop.w

000067c0 <setEnvelopeAttack>:
{
    67c0:	b508      	push	{r3, lr}
	tADSRT_setAttack(&envs[v][string], a);
    67c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    67c6:	eddf 7a05 	vldr	s15, [pc, #20]	; 67dc <setEnvelopeAttack+0x1c>
    67ca:	ee30 0a27 	vadd.f32	s0, s0, s15
    67ce:	4804      	ldr	r0, [pc, #16]	; (67e0 <setEnvelopeAttack+0x20>)
    67d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    67d4:	f002 ff94 	bl	9700 <__tADSRT_setAttack_veneer>
}
    67d8:	bd08      	pop	{r3, pc}
    67da:	bf00      	nop
    67dc:	3a83126f 	.word	0x3a83126f
    67e0:	2001d164 	.word	0x2001d164
    67e4:	f3af 8000 	nop.w
    67e8:	f3af 8000 	nop.w
    67ec:	f3af 8000 	nop.w
    67f0:	f3af 8000 	nop.w
    67f4:	f3af 8000 	nop.w
    67f8:	f3af 8000 	nop.w
    67fc:	f3af 8000 	nop.w

00006800 <setEnvelopeDecay>:
{
    6800:	b508      	push	{r3, lr}
	tADSRT_setDecay(&envs[v][string], d);
    6802:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6806:	eddf 7a05 	vldr	s15, [pc, #20]	; 681c <setEnvelopeDecay+0x1c>
    680a:	ee30 0a27 	vadd.f32	s0, s0, s15
    680e:	4804      	ldr	r0, [pc, #16]	; (6820 <setEnvelopeDecay+0x20>)
    6810:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6814:	f002 ffec 	bl	97f0 <__tADSRT_setDecay_veneer>
}
    6818:	bd08      	pop	{r3, pc}
    681a:	bf00      	nop
    681c:	3a83126f 	.word	0x3a83126f
    6820:	2001d164 	.word	0x2001d164
    6824:	f3af 8000 	nop.w
    6828:	f3af 8000 	nop.w
    682c:	f3af 8000 	nop.w
    6830:	f3af 8000 	nop.w
    6834:	f3af 8000 	nop.w
    6838:	f3af 8000 	nop.w
    683c:	f3af 8000 	nop.w

00006840 <setEnvelopeSustain>:
{
    6840:	b508      	push	{r3, lr}
	tADSRT_setSustain(&envs[v][string], s);
    6842:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6846:	4803      	ldr	r0, [pc, #12]	; (6854 <setEnvelopeSustain+0x14>)
    6848:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    684c:	f003 f824 	bl	9898 <__tADSRT_setSustain_veneer>
}
    6850:	bd08      	pop	{r3, pc}
    6852:	bf00      	nop
    6854:	2001d164 	.word	0x2001d164
    6858:	f3af 8000 	nop.w
    685c:	f3af 8000 	nop.w

00006860 <setEnvelopeRelease>:
{
    6860:	b508      	push	{r3, lr}
	tADSRT_setRelease(&envs[v][string], r);
    6862:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6866:	eddf 7a05 	vldr	s15, [pc, #20]	; 687c <setEnvelopeRelease+0x1c>
    686a:	ee30 0a27 	vadd.f32	s0, s0, s15
    686e:	4804      	ldr	r0, [pc, #16]	; (6880 <setEnvelopeRelease+0x20>)
    6870:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6874:	f002 ffa0 	bl	97b8 <__tADSRT_setRelease_veneer>
}
    6878:	bd08      	pop	{r3, pc}
    687a:	bf00      	nop
    687c:	3a83126f 	.word	0x3a83126f
    6880:	2001d164 	.word	0x2001d164
    6884:	f3af 8000 	nop.w
    6888:	f3af 8000 	nop.w
    688c:	f3af 8000 	nop.w
    6890:	f3af 8000 	nop.w
    6894:	f3af 8000 	nop.w
    6898:	f3af 8000 	nop.w
    689c:	f3af 8000 	nop.w

000068a0 <setEnvelopeLeak>:
{
    68a0:	b508      	push	{r3, lr}
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    68a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    68a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
    68aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 68cc <setEnvelopeLeak+0x2c>
    68ae:	ee67 7a87 	vmul.f32	s15, s15, s14
    68b2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    68b6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 68d0 <setEnvelopeLeak+0x30>
    68ba:	ee37 0a80 	vadd.f32	s0, s15, s0
    68be:	4805      	ldr	r0, [pc, #20]	; (68d4 <setEnvelopeLeak+0x34>)
    68c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    68c4:	f002 ffc8 	bl	9858 <__tADSRT_setLeakFactor_veneer>
}
    68c8:	bd08      	pop	{r3, pc}
    68ca:	bf00      	nop
    68cc:	3851b717 	.word	0x3851b717
    68d0:	3f7ffcb9 	.word	0x3f7ffcb9
    68d4:	2001d164 	.word	0x2001d164
    68d8:	f3af 8000 	nop.w
    68dc:	f3af 8000 	nop.w

000068e0 <setAmp>:
	amplitude[string] = amp;
    68e0:	4b02      	ldr	r3, [pc, #8]	; (68ec <setAmp+0xc>)
    68e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    68e6:	ed83 0a00 	vstr	s0, [r3]
}
    68ea:	4770      	bx	lr
    68ec:	2001d054 	.word	0x2001d054
    68f0:	f3af 8000 	nop.w
    68f4:	f3af 8000 	nop.w
    68f8:	f3af 8000 	nop.w
    68fc:	f3af 8000 	nop.w

00006900 <setMaster>:
	finalMaster[string] = amp;
    6900:	4b02      	ldr	r3, [pc, #8]	; (690c <setMaster+0xc>)
    6902:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6906:	ed83 0a00 	vstr	s0, [r3]
}
    690a:	4770      	bx	lr
    690c:	2001d1d4 	.word	0x2001d1d4
    6910:	f3af 8000 	nop.w
    6914:	f3af 8000 	nop.w
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <setTranspose>:
	transpose = in;
    6920:	4b01      	ldr	r3, [pc, #4]	; (6928 <setTranspose+0x8>)
    6922:	ed83 0a00 	vstr	s0, [r3]
}
    6926:	4770      	bx	lr
    6928:	2001d81c 	.word	0x2001d81c
    692c:	f3af 8000 	nop.w
    6930:	f3af 8000 	nop.w
    6934:	f3af 8000 	nop.w
    6938:	f3af 8000 	nop.w
    693c:	f3af 8000 	nop.w

00006940 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    6940:	ee30 0a00 	vadd.f32	s0, s0, s0
    6944:	eddf 7a05 	vldr	s15, [pc, #20]	; 695c <setPitchBendRange+0x1c>
    6948:	ee87 7a80 	vdiv.f32	s14, s15, s0
    694c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    6950:	eec6 7a87 	vdiv.f32	s15, s13, s14
    6954:	4b02      	ldr	r3, [pc, #8]	; (6960 <setPitchBendRange+0x20>)
    6956:	edc3 7a00 	vstr	s15, [r3]
}
    695a:	4770      	bx	lr
    695c:	467ffc00 	.word	0x467ffc00
    6960:	200008d0 	.word	0x200008d0
    6964:	f3af 8000 	nop.w
    6968:	f3af 8000 	nop.w
    696c:	f3af 8000 	nop.w
    6970:	f3af 8000 	nop.w
    6974:	f3af 8000 	nop.w
    6978:	f3af 8000 	nop.w
    697c:	f3af 8000 	nop.w

00006980 <setFinalLowpass>:
{
    6980:	b508      	push	{r3, lr}
	tSVF_LP_setFreqFast(&finalLowpass[string], in);
    6982:	4803      	ldr	r0, [pc, #12]	; (6990 <setFinalLowpass+0x10>)
    6984:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6988:	f002 ff46 	bl	9818 <__tSVF_LP_setFreqFast_veneer>
}
    698c:	bd08      	pop	{r3, pc}
    698e:	bf00      	nop
    6990:	2001d1cc 	.word	0x2001d1cc
    6994:	f3af 8000 	nop.w
    6998:	f3af 8000 	nop.w
    699c:	f3af 8000 	nop.w

000069a0 <tickMappings>:
{
    69a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69a2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    69a6:	2400      	movs	r4, #0
    69a8:	4b3e      	ldr	r3, [pc, #248]	; (6aa4 <tickMappings+0x104>)
    69aa:	701c      	strb	r4, [r3, #0]
	for (int i = 0; i < numMappings; i++)
    69ac:	e06a      	b.n	6a84 <tickMappings+0xe4>
							unsmoothedValue += sum;
    69ae:	ee38 8a27 	vadd.f32	s16, s16, s15
				for (int j = 0; j < 3; j++)
    69b2:	3301      	adds	r3, #1
    69b4:	2b02      	cmp	r3, #2
    69b6:	dc30      	bgt.n	6a1a <tickMappings+0x7a>
					if (mappings[i].hookActive[j])
    69b8:	4a3b      	ldr	r2, [pc, #236]	; (6aa8 <tickMappings+0x108>)
    69ba:	214c      	movs	r1, #76	; 0x4c
    69bc:	fb01 2204 	mla	r2, r1, r4, r2
    69c0:	441a      	add	r2, r3
    69c2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    69c6:	2a00      	cmp	r2, #0
    69c8:	d0f3      	beq.n	69b2 <tickMappings+0x12>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    69ca:	4937      	ldr	r1, [pc, #220]	; (6aa8 <tickMappings+0x108>)
    69cc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    69d0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    69d4:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    69d8:	4428      	add	r0, r5
    69da:	1c86      	adds	r6, r0, #2
    69dc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    69e0:	edd6 7a00 	vldr	s15, [r6]
    69e4:	441a      	add	r2, r3
    69e6:	320e      	adds	r2, #14
    69e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    69ec:	edd2 6a01 	vldr	s13, [r2, #4]
    69f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    69f4:	3008      	adds	r0, #8
    69f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    69fa:	6842      	ldr	r2, [r0, #4]
    69fc:	edd2 6a00 	vldr	s13, [r2]
    6a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
						if (mappings[i].sourceSmoothed[j])
    6a04:	224c      	movs	r2, #76	; 0x4c
    6a06:	fb02 1104 	mla	r1, r2, r4, r1
    6a0a:	4419      	add	r1, r3
    6a0c:	f891 2020 	ldrb.w	r2, [r1, #32]
    6a10:	2a00      	cmp	r2, #0
    6a12:	d0cc      	beq.n	69ae <tickMappings+0xe>
							smoothedValue += sum;
    6a14:	ee37 7a27 	vadd.f32	s14, s14, s15
    6a18:	e7cb      	b.n	69b2 <tickMappings+0x12>
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6a1a:	4e23      	ldr	r6, [pc, #140]	; (6aa8 <tickMappings+0x108>)
    6a1c:	234c      	movs	r3, #76	; 0x4c
    6a1e:	fb03 6604 	mla	r6, r3, r4, r6
    6a22:	6873      	ldr	r3, [r6, #4]
    6a24:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6a28:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    6a2c:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    6a30:	4f1e      	ldr	r7, [pc, #120]	; (6aac <tickMappings+0x10c>)
    6a32:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    6a36:	ee30 0a07 	vadd.f32	s0, s0, s14
    6a3a:	4638      	mov	r0, r7
    6a3c:	f002 fdf8 	bl	9630 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    6a40:	4638      	mov	r0, r7
    6a42:	f002 fd95 	bl	9570 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6a46:	6877      	ldr	r7, [r6, #4]
    6a48:	693b      	ldr	r3, [r7, #16]
    6a4a:	ee38 0a00 	vadd.f32	s0, s16, s0
    6a4e:	4798      	blx	r3
    6a50:	1cab      	adds	r3, r5, #2
    6a52:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    6a56:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    6a5a:	6872      	ldr	r2, [r6, #4]
    6a5c:	6956      	ldr	r6, [r2, #20]
    6a5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6a62:	4629      	mov	r1, r5
    6a64:	7e10      	ldrb	r0, [r2, #24]
    6a66:	ed93 0a00 	vldr	s0, [r3]
    6a6a:	47b0      	blx	r6
			for (int v = 0; v < numStringsThisBoard; v++)
    6a6c:	3501      	adds	r5, #1
    6a6e:	4b10      	ldr	r3, [pc, #64]	; (6ab0 <tickMappings+0x110>)
    6a70:	781b      	ldrb	r3, [r3, #0]
    6a72:	42ab      	cmp	r3, r5
    6a74:	dd05      	ble.n	6a82 <tickMappings+0xe2>
				for (int j = 0; j < 3; j++)
    6a76:	2300      	movs	r3, #0
				float smoothedValue = 0.0f;
    6a78:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 6ab4 <tickMappings+0x114>
				float unsmoothedValue = 0.0f;
    6a7c:	eeb0 8a47 	vmov.f32	s16, s14
    6a80:	e798      	b.n	69b4 <tickMappings+0x14>
	for (int i = 0; i < numMappings; i++)
    6a82:	3401      	adds	r4, #1
    6a84:	4b0c      	ldr	r3, [pc, #48]	; (6ab8 <tickMappings+0x118>)
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	42a3      	cmp	r3, r4
    6a8a:	dd08      	ble.n	6a9e <tickMappings+0xfe>
		if (mappings[i].destNumber != 255)
    6a8c:	234c      	movs	r3, #76	; 0x4c
    6a8e:	fb04 f303 	mul.w	r3, r4, r3
    6a92:	4a05      	ldr	r2, [pc, #20]	; (6aa8 <tickMappings+0x108>)
    6a94:	5cd3      	ldrb	r3, [r2, r3]
    6a96:	2bff      	cmp	r3, #255	; 0xff
    6a98:	d0f3      	beq.n	6a82 <tickMappings+0xe2>
			for (int v = 0; v < numStringsThisBoard; v++)
    6a9a:	2500      	movs	r5, #0
    6a9c:	e7e7      	b.n	6a6e <tickMappings+0xce>
}
    6a9e:	ecbd 8b02 	vpop	{d8}
    6aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aa4:	200164db 	.word	0x200164db
    6aa8:	20018590 	.word	0x20018590
    6aac:	2001d348 	.word	0x2001d348
    6ab0:	20000694 	.word	0x20000694
    6ab4:	00000000 	.word	0x00000000
    6ab8:	200191d8 	.word	0x200191d8
    6abc:	f3af 8000 	nop.w

00006ac0 <lfoSawSquareTick>:
{
    6ac0:	b510      	push	{r4, lr}
    6ac2:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6ac4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ac8:	4803      	ldr	r0, [pc, #12]	; (6ad8 <lfoSawSquareTick+0x18>)
    6aca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6ace:	f002 fd4b 	bl	9568 <__tSawSquareLFO_tick_veneer>
    6ad2:	ed84 0a00 	vstr	s0, [r4]
}
    6ad6:	bd10      	pop	{r4, pc}
    6ad8:	2001d2a8 	.word	0x2001d2a8
    6adc:	f3af 8000 	nop.w

00006ae0 <lfoSineTriTick>:
{
    6ae0:	b510      	push	{r4, lr}
    6ae2:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6ae4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ae8:	4803      	ldr	r0, [pc, #12]	; (6af8 <lfoSineTriTick+0x18>)
    6aea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6aee:	f002 fe3f 	bl	9770 <__tSineTriLFO_tick_veneer>
    6af2:	ed84 0a00 	vstr	s0, [r4]
}
    6af6:	bd10      	pop	{r4, pc}
    6af8:	2001d2f8 	.word	0x2001d2f8
    6afc:	f3af 8000 	nop.w

00006b00 <lfoSineTick>:
{
    6b00:	b510      	push	{r4, lr}
    6b02:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    6b04:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6b08:	4803      	ldr	r0, [pc, #12]	; (6b18 <lfoSineTick+0x18>)
    6b0a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b0e:	f002 ffe3 	bl	9ad8 <__tCycle_tick_veneer>
    6b12:	ed84 0a00 	vstr	s0, [r4]
}
    6b16:	bd10      	pop	{r4, pc}
    6b18:	2001d2d8 	.word	0x2001d2d8
    6b1c:	f3af 8000 	nop.w

00006b20 <lfoTriTick>:
{
    6b20:	b510      	push	{r4, lr}
    6b22:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6b24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6b28:	4803      	ldr	r0, [pc, #12]	; (6b38 <lfoTriTick+0x18>)
    6b2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b2e:	f002 fedf 	bl	98f0 <__tTriLFO_tick_veneer>
    6b32:	ed84 0a00 	vstr	s0, [r4]
}
    6b36:	bd10      	pop	{r4, pc}
    6b38:	2001d318 	.word	0x2001d318
    6b3c:	f3af 8000 	nop.w

00006b40 <lfoSawTick>:
{
    6b40:	b510      	push	{r4, lr}
    6b42:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6b44:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6b48:	4806      	ldr	r0, [pc, #24]	; (6b64 <lfoSawTick+0x24>)
    6b4a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b4e:	f002 fdfb 	bl	9748 <__tIntPhasor_tick_veneer>
    6b52:	ee30 0a00 	vadd.f32	s0, s0, s0
    6b56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6b5a:	ee30 0a67 	vsub.f32	s0, s0, s15
    6b5e:	ed84 0a00 	vstr	s0, [r4]
}
    6b62:	bd10      	pop	{r4, pc}
    6b64:	2001d288 	.word	0x2001d288
    6b68:	f3af 8000 	nop.w
    6b6c:	f3af 8000 	nop.w
    6b70:	f3af 8000 	nop.w
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <lfoPulseTick>:
{
    6b80:	b510      	push	{r4, lr}
    6b82:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6b84:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6b88:	4803      	ldr	r0, [pc, #12]	; (6b98 <lfoPulseTick+0x18>)
    6b8a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b8e:	f002 feeb 	bl	9968 <__tSquareLFO_tick_veneer>
    6b92:	ed84 0a00 	vstr	s0, [r4]
}
    6b96:	bd10      	pop	{r4, pc}
    6b98:	2001d268 	.word	0x2001d268
    6b9c:	f3af 8000 	nop.w

00006ba0 <lfoSawSquareSetRate>:
{
    6ba0:	b508      	push	{r3, lr}
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    6ba2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ba6:	4803      	ldr	r0, [pc, #12]	; (6bb4 <lfoSawSquareSetRate+0x14>)
    6ba8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bac:	f002 fd20 	bl	95f0 <__tSawSquareLFO_setFreq_veneer>
}
    6bb0:	bd08      	pop	{r3, pc}
    6bb2:	bf00      	nop
    6bb4:	2001d2a8 	.word	0x2001d2a8
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <lfoSineTriSetRate>:
{
    6bc0:	b508      	push	{r3, lr}
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    6bc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6bc6:	4803      	ldr	r0, [pc, #12]	; (6bd4 <lfoSineTriSetRate+0x14>)
    6bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bcc:	f002 fd14 	bl	95f8 <__tSineTriLFO_setFreq_veneer>
}
    6bd0:	bd08      	pop	{r3, pc}
    6bd2:	bf00      	nop
    6bd4:	2001d2f8 	.word	0x2001d2f8
    6bd8:	f3af 8000 	nop.w
    6bdc:	f3af 8000 	nop.w

00006be0 <lfoSineSetRate>:
{
    6be0:	b508      	push	{r3, lr}
	tCycle_setFreq(&lfoSine[v][string], r);
    6be2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6be6:	4803      	ldr	r0, [pc, #12]	; (6bf4 <lfoSineSetRate+0x14>)
    6be8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bec:	f002 fe68 	bl	98c0 <__tCycle_setFreq_veneer>
}
    6bf0:	bd08      	pop	{r3, pc}
    6bf2:	bf00      	nop
    6bf4:	2001d2d8 	.word	0x2001d2d8
    6bf8:	f3af 8000 	nop.w
    6bfc:	f3af 8000 	nop.w

00006c00 <lfoTriSetRate>:
{
    6c00:	b508      	push	{r3, lr}
	tTriLFO_setFreq(&lfoTri[v][string], r);
    6c02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c06:	4803      	ldr	r0, [pc, #12]	; (6c14 <lfoTriSetRate+0x14>)
    6c08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c0c:	f002 ff6c 	bl	9ae8 <__tTriLFO_setFreq_veneer>
}
    6c10:	bd08      	pop	{r3, pc}
    6c12:	bf00      	nop
    6c14:	2001d318 	.word	0x2001d318
    6c18:	f3af 8000 	nop.w
    6c1c:	f3af 8000 	nop.w

00006c20 <lfoSawSetRate>:
{
    6c20:	b508      	push	{r3, lr}
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    6c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c26:	4803      	ldr	r0, [pc, #12]	; (6c34 <lfoSawSetRate+0x14>)
    6c28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c2c:	f002 fdc0 	bl	97b0 <__tIntPhasor_setFreq_veneer>
}
    6c30:	bd08      	pop	{r3, pc}
    6c32:	bf00      	nop
    6c34:	2001d288 	.word	0x2001d288
    6c38:	f3af 8000 	nop.w
    6c3c:	f3af 8000 	nop.w

00006c40 <lfoPulseSetRate>:
{
    6c40:	b508      	push	{r3, lr}
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    6c42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c46:	4803      	ldr	r0, [pc, #12]	; (6c54 <lfoPulseSetRate+0x14>)
    6c48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c4c:	f002 fc70 	bl	9530 <__tSquareLFO_setFreq_veneer>
}
    6c50:	bd08      	pop	{r3, pc}
    6c52:	bf00      	nop
    6c54:	2001d268 	.word	0x2001d268
    6c58:	f3af 8000 	nop.w
    6c5c:	f3af 8000 	nop.w

00006c60 <lfoSawSquareSetPhase>:
{
    6c60:	b508      	push	{r3, lr}
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    6c62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c66:	4803      	ldr	r0, [pc, #12]	; (6c74 <lfoSawSquareSetPhase+0x14>)
    6c68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c6c:	f002 fc78 	bl	9560 <__tSawSquareLFO_setPhase_veneer>
}
    6c70:	bd08      	pop	{r3, pc}
    6c72:	bf00      	nop
    6c74:	2001d2a8 	.word	0x2001d2a8
    6c78:	f3af 8000 	nop.w
    6c7c:	f3af 8000 	nop.w

00006c80 <lfoSineTriSetPhase>:
{
    6c80:	b508      	push	{r3, lr}
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    6c82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c86:	4803      	ldr	r0, [pc, #12]	; (6c94 <lfoSineTriSetPhase+0x14>)
    6c88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c8c:	f002 fc8c 	bl	95a8 <__tSineTriLFO_setPhase_veneer>
}
    6c90:	bd08      	pop	{r3, pc}
    6c92:	bf00      	nop
    6c94:	2001d2f8 	.word	0x2001d2f8
    6c98:	f3af 8000 	nop.w
    6c9c:	f3af 8000 	nop.w

00006ca0 <lfoSineSetPhase>:
{
    6ca0:	b508      	push	{r3, lr}
	tCycle_setPhase(&lfoSine[v][string],p);
    6ca2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ca6:	4803      	ldr	r0, [pc, #12]	; (6cb4 <lfoSineSetPhase+0x14>)
    6ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6cac:	f002 fea8 	bl	9a00 <__tCycle_setPhase_veneer>
}
    6cb0:	bd08      	pop	{r3, pc}
    6cb2:	bf00      	nop
    6cb4:	2001d2d8 	.word	0x2001d2d8
    6cb8:	f3af 8000 	nop.w
    6cbc:	f3af 8000 	nop.w

00006cc0 <lfoTriSetPhase>:
{
    6cc0:	b508      	push	{r3, lr}
	tTriLFO_setPhase(&lfoTri[v][string],p);
    6cc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6cc6:	4803      	ldr	r0, [pc, #12]	; (6cd4 <lfoTriSetPhase+0x14>)
    6cc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6ccc:	f002 fe84 	bl	99d8 <__tTriLFO_setPhase_veneer>
}
    6cd0:	bd08      	pop	{r3, pc}
    6cd2:	bf00      	nop
    6cd4:	2001d318 	.word	0x2001d318
    6cd8:	f3af 8000 	nop.w
    6cdc:	f3af 8000 	nop.w

00006ce0 <lfoSawSetPhase>:
{
    6ce0:	b508      	push	{r3, lr}
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    6ce2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ce6:	4803      	ldr	r0, [pc, #12]	; (6cf4 <lfoSawSetPhase+0x14>)
    6ce8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6cec:	f002 fd00 	bl	96f0 <__tIntPhasor_setPhase_veneer>
}
    6cf0:	bd08      	pop	{r3, pc}
    6cf2:	bf00      	nop
    6cf4:	2001d288 	.word	0x2001d288
    6cf8:	f3af 8000 	nop.w
    6cfc:	f3af 8000 	nop.w

00006d00 <lfoPulseSetPhase>:
{
    6d00:	b508      	push	{r3, lr}
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    6d02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d06:	4803      	ldr	r0, [pc, #12]	; (6d14 <lfoPulseSetPhase+0x14>)
    6d08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d0c:	f002 fcc4 	bl	9698 <__tSquareLFO_setPhase_veneer>
}
    6d10:	bd08      	pop	{r3, pc}
    6d12:	bf00      	nop
    6d14:	2001d268 	.word	0x2001d268
    6d18:	f3af 8000 	nop.w
    6d1c:	f3af 8000 	nop.w

00006d20 <lfoSawSquareSetShape>:
{
    6d20:	b508      	push	{r3, lr}
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    6d22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d26:	4803      	ldr	r0, [pc, #12]	; (6d34 <lfoSawSquareSetShape+0x14>)
    6d28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d2c:	f002 fd68 	bl	9800 <__tSawSquareLFO_setShape_veneer>
}
    6d30:	bd08      	pop	{r3, pc}
    6d32:	bf00      	nop
    6d34:	2001d2a8 	.word	0x2001d2a8
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <lfoSineTriSetShape>:
{
    6d40:	b508      	push	{r3, lr}
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    6d42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d46:	4803      	ldr	r0, [pc, #12]	; (6d54 <lfoSineTriSetShape+0x14>)
    6d48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d4c:	f002 fd24 	bl	9798 <__tSineTriLFO_setShape_veneer>
}
    6d50:	bd08      	pop	{r3, pc}
    6d52:	bf00      	nop
    6d54:	2001d2f8 	.word	0x2001d2f8
    6d58:	f3af 8000 	nop.w
    6d5c:	f3af 8000 	nop.w

00006d60 <lfoSineSetShape>:
}
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop
    6d64:	f3af 8000 	nop.w
    6d68:	f3af 8000 	nop.w
    6d6c:	f3af 8000 	nop.w
    6d70:	f3af 8000 	nop.w
    6d74:	f3af 8000 	nop.w
    6d78:	f3af 8000 	nop.w
    6d7c:	f3af 8000 	nop.w

00006d80 <lfoTriSetShape>:
}
    6d80:	4770      	bx	lr
    6d82:	bf00      	nop
    6d84:	f3af 8000 	nop.w
    6d88:	f3af 8000 	nop.w
    6d8c:	f3af 8000 	nop.w
    6d90:	f3af 8000 	nop.w
    6d94:	f3af 8000 	nop.w
    6d98:	f3af 8000 	nop.w
    6d9c:	f3af 8000 	nop.w

00006da0 <lfoSawSetShape>:
}
    6da0:	4770      	bx	lr
    6da2:	bf00      	nop
    6da4:	f3af 8000 	nop.w
    6da8:	f3af 8000 	nop.w
    6dac:	f3af 8000 	nop.w
    6db0:	f3af 8000 	nop.w
    6db4:	f3af 8000 	nop.w
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <lfoPulseSetShape>:
{
    6dc0:	b508      	push	{r3, lr}
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    6dc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6dc6:	4803      	ldr	r0, [pc, #12]	; (6dd4 <lfoPulseSetShape+0x14>)
    6dc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6dcc:	f002 fbb8 	bl	9540 <__tSquareLFO_setPulseWidth_veneer>
}
    6dd0:	bd08      	pop	{r3, pc}
    6dd2:	bf00      	nop
    6dd4:	2001d268 	.word	0x2001d268
    6dd8:	f3af 8000 	nop.w
    6ddc:	f3af 8000 	nop.w

00006de0 <param1Linear>:
	param1[v][string] = value;
    6de0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6de4:	4b02      	ldr	r3, [pc, #8]	; (6df0 <param1Linear+0x10>)
    6de6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6dea:	ed83 0a00 	vstr	s0, [r3]
}
    6dee:	4770      	bx	lr
    6df0:	2001d510 	.word	0x2001d510
    6df4:	f3af 8000 	nop.w
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <clipperGainSet>:
{
    6e00:	b538      	push	{r3, r4, r5, lr}
    6e02:	4605      	mov	r5, r0
    6e04:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    6e06:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    6e0a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6e0e:	f002 fe2b 	bl	9a68 <__dbToATableLookup_veneer>
    6e12:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    6e16:	4b03      	ldr	r3, [pc, #12]	; (6e24 <clipperGainSet+0x24>)
    6e18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e1c:	ed83 0a00 	vstr	s0, [r3]
}
    6e20:	bd38      	pop	{r3, r4, r5, pc}
    6e22:	bf00      	nop
    6e24:	2001d510 	.word	0x2001d510
    6e28:	f3af 8000 	nop.w
    6e2c:	f3af 8000 	nop.w
    6e30:	f3af 8000 	nop.w
    6e34:	f3af 8000 	nop.w
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <wavefolderParam1>:
{
    6e40:	b538      	push	{r3, r4, r5, lr}
    6e42:	4605      	mov	r5, r0
    6e44:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    6e46:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6e4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6e4e:	f002 fe0b 	bl	9a68 <__dbToATableLookup_veneer>
    6e52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    6e56:	4b03      	ldr	r3, [pc, #12]	; (6e64 <wavefolderParam1+0x24>)
    6e58:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e5c:	ed83 0a00 	vstr	s0, [r3]
}
    6e60:	bd38      	pop	{r3, r4, r5, pc}
    6e62:	bf00      	nop
    6e64:	2001d510 	.word	0x2001d510
    6e68:	f3af 8000 	nop.w
    6e6c:	f3af 8000 	nop.w
    6e70:	f3af 8000 	nop.w
    6e74:	f3af 8000 	nop.w
    6e78:	f3af 8000 	nop.w
    6e7c:	f3af 8000 	nop.w

00006e80 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6e80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6e84:	ee70 6a27 	vadd.f32	s13, s0, s15
    6e88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    6e8c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6e90:	4b05      	ldr	r3, [pc, #20]	; (6ea8 <wavefolderParam3+0x28>)
    6e92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6e96:	ed83 7a00 	vstr	s14, [r3]
	param3[v][string] = value;
    6e9a:	4b04      	ldr	r3, [pc, #16]	; (6eac <wavefolderParam3+0x2c>)
    6e9c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6ea0:	ed83 0a00 	vstr	s0, [r3]
}
    6ea4:	4770      	bx	lr
    6ea6:	bf00      	nop
    6ea8:	2001d244 	.word	0x2001d244
    6eac:	2001d550 	.word	0x2001d550
    6eb0:	f3af 8000 	nop.w
    6eb4:	f3af 8000 	nop.w
    6eb8:	f3af 8000 	nop.w
    6ebc:	f3af 8000 	nop.w

00006ec0 <tiltParam1>:
{
    6ec0:	b508      	push	{r3, lr}
	tTiltFilter_setTilt(&FXTilt[v][string], value*12.0f - 6.0f);
    6ec2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6ec6:	ee20 0a27 	vmul.f32	s0, s0, s15
    6eca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ece:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    6ed2:	ee30 0a67 	vsub.f32	s0, s0, s15
    6ed6:	4803      	ldr	r0, [pc, #12]	; (6ee4 <tiltParam1+0x24>)
    6ed8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6edc:	f002 fd00 	bl	98e0 <__tTiltFilter_setTilt_veneer>
}
    6ee0:	bd08      	pop	{r3, pc}
    6ee2:	bf00      	nop
    6ee4:	2001cee4 	.word	0x2001cee4
    6ee8:	f3af 8000 	nop.w
    6eec:	f3af 8000 	nop.w
    6ef0:	f3af 8000 	nop.w
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <tiltParam2>:
{
    6f00:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6f02:	eddf 7a14 	vldr	s15, [pc, #80]	; 6f54 <tiltParam2+0x54>
    6f06:	ee20 0a27 	vmul.f32	s0, s0, s15
    6f0a:	eddf 7a13 	vldr	s15, [pc, #76]	; 6f58 <tiltParam2+0x58>
    6f0e:	ee30 0a27 	vadd.f32	s0, s0, s15
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6f12:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    6f16:	ee30 0a67 	vsub.f32	s0, s0, s15
    6f1a:	eddf 7a10 	vldr	s15, [pc, #64]	; 6f5c <tiltParam2+0x5c>
    6f1e:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (val < min)
    6f22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    6f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f2a:	d409      	bmi.n	6f40 <tiltParam2+0x40>
    else if (val > max)
    6f2c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 6f60 <tiltParam2+0x60>
    6f30:	eeb4 0ae7 	vcmpe.f32	s0, s15
    6f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f38:	dd04      	ble.n	6f44 <tiltParam2+0x44>
        return max;
    6f3a:	eeb0 0a67 	vmov.f32	s0, s15
    6f3e:	e001      	b.n	6f44 <tiltParam2+0x44>
        return min;
    6f40:	ed9f 0a08 	vldr	s0, [pc, #32]	; 6f64 <tiltParam2+0x64>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    6f44:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6f48:	4807      	ldr	r0, [pc, #28]	; (6f68 <tiltParam2+0x68>)
    6f4a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6f4e:	f002 fd5f 	bl	9a10 <__tVZFilterBell_setFreq_veneer>
}
    6f52:	bd08      	pop	{r3, pc}
    6f54:	429a0000 	.word	0x429a0000
    6f58:	42280000 	.word	0x42280000
    6f5c:	420fb824 	.word	0x420fb824
    6f60:	457ff000 	.word	0x457ff000
    6f64:	00000000 	.word	0x00000000
    6f68:	2001d090 	.word	0x2001d090
    6f6c:	f3af 8000 	nop.w
    6f70:	f3af 8000 	nop.w
    6f74:	f3af 8000 	nop.w
    6f78:	f3af 8000 	nop.w
    6f7c:	f3af 8000 	nop.w

00006f80 <tiltParam3>:
{
    6f80:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    6f82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6f86:	ee30 0a27 	vadd.f32	s0, s0, s15
    6f8a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6f8e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    6f92:	ee20 0a27 	vmul.f32	s0, s0, s15
    6f96:	4803      	ldr	r0, [pc, #12]	; (6fa4 <tiltParam3+0x24>)
    6f98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6f9c:	f002 fb54 	bl	9648 <__tVZFilterBell_setBandwidth_veneer>
}
    6fa0:	bd08      	pop	{r3, pc}
    6fa2:	bf00      	nop
    6fa4:	2001d090 	.word	0x2001d090
    6fa8:	f3af 8000 	nop.w
    6fac:	f3af 8000 	nop.w
    6fb0:	f3af 8000 	nop.w
    6fb4:	f3af 8000 	nop.w
    6fb8:	f3af 8000 	nop.w
    6fbc:	f3af 8000 	nop.w

00006fc0 <tiltParam4>:
{
    6fc0:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6fc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6fc6:	4c08      	ldr	r4, [pc, #32]	; (6fe8 <tiltParam4+0x28>)
    6fc8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6fcc:	eddf 7a07 	vldr	s15, [pc, #28]	; 6fec <tiltParam4+0x2c>
    6fd0:	ee20 0a27 	vmul.f32	s0, s0, s15
    6fd4:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    6fd8:	ee30 0a67 	vsub.f32	s0, s0, s15
    6fdc:	f002 fd44 	bl	9a68 <__dbToATableLookup_veneer>
    6fe0:	4620      	mov	r0, r4
    6fe2:	f002 fc61 	bl	98a8 <__tVZFilterBell_setGain_veneer>
}
    6fe6:	bd10      	pop	{r4, pc}
    6fe8:	2001d090 	.word	0x2001d090
    6fec:	42080000 	.word	0x42080000
    6ff0:	f3af 8000 	nop.w
    6ff4:	f3af 8000 	nop.w
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    7000:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7004:	4b04      	ldr	r3, [pc, #16]	; (7018 <compressorParam1+0x18>)
    7006:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    700a:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    700e:	ee20 0a27 	vmul.f32	s0, s0, s15
    7012:	ed83 0a03 	vstr	s0, [r3, #12]
}
    7016:	4770      	bx	lr
    7018:	2001d0b0 	.word	0x2001d0b0
    701c:	f3af 8000 	nop.w

00007020 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    7020:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    7024:	ee20 0a27 	vmul.f32	s0, s0, s15
    7028:	4b09      	ldr	r3, [pc, #36]	; (7050 <compressorParam2+0x30>)
    702a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    702e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7032:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7036:	ee30 0a27 	vadd.f32	s0, s0, s15
    703a:	ed82 0a04 	vstr	s0, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    703e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7042:	edd3 6a04 	vldr	s13, [r3, #16]
    7046:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    704a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    704e:	4770      	bx	lr
    7050:	2001d0b0 	.word	0x2001d0b0
    7054:	f3af 8000 	nop.w
    7058:	f3af 8000 	nop.w
    705c:	f3af 8000 	nop.w

00007060 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    7060:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7064:	4b04      	ldr	r3, [pc, #16]	; (7078 <compressorParam3+0x18>)
    7066:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    706a:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    706e:	ee20 0a27 	vmul.f32	s0, s0, s15
    7072:	ed83 0a06 	vstr	s0, [r3, #24]
}
    7076:	4770      	bx	lr
    7078:	2001d0b0 	.word	0x2001d0b0
    707c:	f3af 8000 	nop.w

00007080 <compressorParam4>:
{
    7080:	b410      	push	{r4}
	value = (value +  0.001f);
    7082:	eddf 7a1c 	vldr	s15, [pc, #112]	; 70f4 <compressorParam4+0x74>
    7086:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    708a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    708e:	4b1a      	ldr	r3, [pc, #104]	; (70f8 <compressorParam4+0x78>)
    7090:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    7094:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    7098:	ee27 7a00 	vmul.f32	s14, s14, s0
    709c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    70a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    70a4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 70fc <compressorParam4+0x7c>
    70a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    70ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    70b0:	ee17 3a90 	vmov	r3, s15
    70b4:	f103 507e 	add.w	r0, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    70b8:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
    70bc:	f640 52d1 	movw	r2, #3537	; 0xdd1
    70c0:	fb03 f202 	mul.w	r2, r3, r2
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    70c4:	f243 5164 	movw	r1, #13668	; 0x3564
    70c8:	eb01 4122 	add.w	r1, r1, r2, asr #16
    70cc:	fb03 f101 	mul.w	r1, r3, r1
    70d0:	f643 52c9 	movw	r2, #15817	; 0x3dc9
    70d4:	eb02 42a1 	add.w	r2, r2, r1, asr #18
    70d8:	fb03 f202 	mul.w	r2, r3, r2
    70dc:	4908      	ldr	r1, [pc, #32]	; (7100 <compressorParam4+0x80>)
    70de:	eb01 32a2 	add.w	r2, r1, r2, asr #14
    70e2:	fb02 f303 	mul.w	r3, r2, r3
    70e6:	eb00 20e3 	add.w	r0, r0, r3, asr #11
    70ea:	6060      	str	r0, [r4, #4]
}
    70ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    70f0:	4770      	bx	lr
    70f2:	bf00      	nop
    70f4:	3a83126f 	.word	0x3a83126f
    70f8:	2001d0b0 	.word	0x2001d0b0
    70fc:	4b38aa3b 	.word	0x4b38aa3b
    7100:	fffec5aa 	.word	0xfffec5aa
    7104:	f3af 8000 	nop.w
    7108:	f3af 8000 	nop.w
    710c:	f3af 8000 	nop.w
    7110:	f3af 8000 	nop.w
    7114:	f3af 8000 	nop.w
    7118:	f3af 8000 	nop.w
    711c:	f3af 8000 	nop.w

00007120 <compressorParam5>:
{
    7120:	b410      	push	{r4}
	value = (value + 0.001f);
    7122:	eddf 7a1c 	vldr	s15, [pc, #112]	; 7194 <compressorParam5+0x74>
    7126:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    712a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    712e:	4b1a      	ldr	r3, [pc, #104]	; (7198 <compressorParam5+0x78>)
    7130:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    7134:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    7138:	ee27 7a00 	vmul.f32	s14, s14, s0
    713c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    7140:	eec6 7a87 	vdiv.f32	s15, s13, s14
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
    7144:	ed9f 7a15 	vldr	s14, [pc, #84]	; 719c <compressorParam5+0x7c>
    7148:	ee67 7a87 	vmul.f32	s15, s15, s14
    714c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7150:	ee17 3a90 	vmov	r3, s15
    7154:	f103 507e 	add.w	r0, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    7158:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    reinterpreter.i += (((((((((((3537*m) >> 16)
    715c:	f640 52d1 	movw	r2, #3537	; 0xdd1
    7160:	fb03 f202 	mul.w	r2, r3, r2
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
    7164:	f243 5164 	movw	r1, #13668	; 0x3564
    7168:	eb01 4122 	add.w	r1, r1, r2, asr #16
    716c:	fb03 f101 	mul.w	r1, r3, r1
    7170:	f643 52c9 	movw	r2, #15817	; 0x3dc9
    7174:	eb02 42a1 	add.w	r2, r2, r1, asr #18
    7178:	fb03 f202 	mul.w	r2, r3, r2
    717c:	4908      	ldr	r1, [pc, #32]	; (71a0 <compressorParam5+0x80>)
    717e:	eb01 32a2 	add.w	r2, r1, r2, asr #14
    7182:	fb02 f303 	mul.w	r3, r2, r3
    7186:	eb00 20e3 	add.w	r0, r0, r3, asr #11
    718a:	60a0      	str	r0, [r4, #8]
}
    718c:	f85d 4b04 	ldr.w	r4, [sp], #4
    7190:	4770      	bx	lr
    7192:	bf00      	nop
    7194:	3a83126f 	.word	0x3a83126f
    7198:	2001d0b0 	.word	0x2001d0b0
    719c:	4b38aa3b 	.word	0x4b38aa3b
    71a0:	fffec5aa 	.word	0xfffec5aa
    71a4:	f3af 8000 	nop.w
    71a8:	f3af 8000 	nop.w
    71ac:	f3af 8000 	nop.w
    71b0:	f3af 8000 	nop.w
    71b4:	f3af 8000 	nop.w
    71b8:	f3af 8000 	nop.w
    71bc:	f3af 8000 	nop.w

000071c0 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    71c0:	ee30 0a00 	vadd.f32	s0, s0, s0
    71c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    71c8:	ee30 0a67 	vsub.f32	s0, s0, s15
    71cc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    71d0:	4b02      	ldr	r3, [pc, #8]	; (71dc <offsetParam2+0x1c>)
    71d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    71d6:	ed83 0a00 	vstr	s0, [r3]
}
    71da:	4770      	bx	lr
    71dc:	2001d530 	.word	0x2001d530

000071e0 <param2Linear>:
	param2[v][string] = value;
    71e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    71e4:	4b02      	ldr	r3, [pc, #8]	; (71f0 <param2Linear+0x10>)
    71e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    71ea:	ed83 0a00 	vstr	s0, [r3]
}
    71ee:	4770      	bx	lr
    71f0:	2001d530 	.word	0x2001d530
    71f4:	f3af 8000 	nop.w
    71f8:	f3af 8000 	nop.w
    71fc:	f3af 8000 	nop.w

00007200 <param3Linear>:
	param3[v][string] = value;
    7200:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7204:	4b02      	ldr	r3, [pc, #8]	; (7210 <param3Linear+0x10>)
    7206:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    720a:	ed83 0a00 	vstr	s0, [r3]
}
    720e:	4770      	bx	lr
    7210:	2001d550 	.word	0x2001d550
    7214:	f3af 8000 	nop.w
    7218:	f3af 8000 	nop.w
    721c:	f3af 8000 	nop.w

00007220 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    7220:	eddf 7a11 	vldr	s15, [pc, #68]	; 7268 <param3Soft+0x48>
    7224:	ee20 0a27 	vmul.f32	s0, s0, s15
    7228:	eddf 7a10 	vldr	s15, [pc, #64]	; 726c <param3Soft+0x4c>
    722c:	ee30 0a27 	vadd.f32	s0, s0, s15
    7230:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7234:	4b0e      	ldr	r3, [pc, #56]	; (7270 <param3Soft+0x50>)
    7236:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    723a:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    723e:	ee60 7a00 	vmul.f32	s15, s0, s0
    7242:	ee60 7a27 	vmul.f32	s15, s0, s15
    7246:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7274 <param3Soft+0x54>
    724a:	ee67 7a87 	vmul.f32	s15, s15, s14
    724e:	ee30 0a67 	vsub.f32	s0, s0, s15
    7252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7256:	eec7 7a00 	vdiv.f32	s15, s14, s0
    725a:	4b07      	ldr	r3, [pc, #28]	; (7278 <param3Soft+0x58>)
    725c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7260:	edc3 7a00 	vstr	s15, [r3]
}
    7264:	4770      	bx	lr
    7266:	bf00      	nop
    7268:	3f7d70a4 	.word	0x3f7d70a4
    726c:	3c23d70a 	.word	0x3c23d70a
    7270:	2001d550 	.word	0x2001d550
    7274:	3eaaaaaa 	.word	0x3eaaaaaa
    7278:	2001d658 	.word	0x2001d658
    727c:	f3af 8000 	nop.w

00007280 <param3Hard>:
{
    7280:	b538      	push	{r3, r4, r5, lr}
    7282:	4605      	mov	r5, r0
    7284:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    7286:	eddf 7a14 	vldr	s15, [pc, #80]	; 72d8 <param3Hard+0x58>
    728a:	ee20 0a27 	vmul.f32	s0, s0, s15
    728e:	eddf 7a13 	vldr	s15, [pc, #76]	; 72dc <param3Hard+0x5c>
    7292:	ee30 0a27 	vadd.f32	s0, s0, s15
    7296:	eddf 7a12 	vldr	s15, [pc, #72]	; 72e0 <param3Hard+0x60>
    729a:	ee20 0a27 	vmul.f32	s0, s0, s15
    729e:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    72a2:	4b10      	ldr	r3, [pc, #64]	; (72e4 <param3Hard+0x64>)
    72a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    72a8:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    72ac:	f002 f970 	bl	9590 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    72b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    72b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    72b8:	d101      	bne.n	72be <param3Hard+0x3e>
		tempDiv = 0.001f;
    72ba:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 72e8 <param3Hard+0x68>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    72be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    72c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    72c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    72ca:	4b08      	ldr	r3, [pc, #32]	; (72ec <param3Hard+0x6c>)
    72cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    72d0:	edc3 7a00 	vstr	s15, [r3]
}
    72d4:	bd38      	pop	{r3, r4, r5, pc}
    72d6:	bf00      	nop
    72d8:	3f7d70a4 	.word	0x3f7d70a4
    72dc:	3c23d70a 	.word	0x3c23d70a
    72e0:	3fc90fdb 	.word	0x3fc90fdb
    72e4:	2001d550 	.word	0x2001d550
    72e8:	3a83126f 	.word	0x3a83126f
    72ec:	2001d638 	.word	0x2001d638
    72f0:	f3af 8000 	nop.w
    72f4:	f3af 8000 	nop.w
    72f8:	f3af 8000 	nop.w
    72fc:	f3af 8000 	nop.w

00007300 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    7300:	eddf 7a1e 	vldr	s15, [pc, #120]	; 737c <param3Poly+0x7c>
    7304:	ee20 0a27 	vmul.f32	s0, s0, s15
    7308:	eddf 7a1d 	vldr	s15, [pc, #116]	; 7380 <param3Poly+0x80>
    730c:	ee30 0a27 	vadd.f32	s0, s0, s15
    7310:	eddf 7a1c 	vldr	s15, [pc, #112]	; 7384 <param3Poly+0x84>
    7314:	ee20 0a27 	vmul.f32	s0, s0, s15
    7318:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    731c:	4b1a      	ldr	r3, [pc, #104]	; (7388 <param3Poly+0x88>)
    731e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7322:	ed83 0a00 	vstr	s0, [r3]
    Lfloat term1 = x * 1.570034357f;
    7326:	eddf 7a19 	vldr	s15, [pc, #100]	; 738c <param3Poly+0x8c>
    732a:	ee20 7a27 	vmul.f32	s14, s0, s15
    Lfloat term2 = x * x * x * -0.6425216143f;
    732e:	ee60 7a00 	vmul.f32	s15, s0, s0
    7332:	ee60 7a27 	vmul.f32	s15, s0, s15
    7336:	eddf 6a16 	vldr	s13, [pc, #88]	; 7390 <param3Poly+0x90>
    733a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    733e:	ee60 7a27 	vmul.f32	s15, s0, s15
    7342:	ee20 0a27 	vmul.f32	s0, s0, s15
    7346:	eddf 7a13 	vldr	s15, [pc, #76]	; 7394 <param3Poly+0x94>
    734a:	ee20 0a27 	vmul.f32	s0, s0, s15
    return term1+term2+term3;
    734e:	ee77 7a26 	vadd.f32	s15, s14, s13
    7352:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (tempDiv == 0.0f)
    7356:	eeb5 0a40 	vcmp.f32	s0, #0.0
    735a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    735e:	d101      	bne.n	7364 <param3Poly+0x64>
        tempDiv = 0.001f;
    7360:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 7398 <param3Poly+0x98>
    polyDivider[v][string] = 1.0f/tempDiv;
    7364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7368:	eec7 7a00 	vdiv.f32	s15, s14, s0
    736c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7370:	4b0a      	ldr	r3, [pc, #40]	; (739c <param3Poly+0x9c>)
    7372:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7376:	edc3 7a00 	vstr	s15, [r3]
}
    737a:	4770      	bx	lr
    737c:	3f7d70a4 	.word	0x3f7d70a4
    7380:	3c23d70a 	.word	0x3c23d70a
    7384:	3fc90fdb 	.word	0x3fc90fdb
    7388:	2001d550 	.word	0x2001d550
    738c:	3fc8f6e3 	.word	0x3fc8f6e3
    7390:	bf247c4c 	.word	0xbf247c4c
    7394:	3d947433 	.word	0x3d947433
    7398:	3a83126f 	.word	0x3a83126f
    739c:	2001d5c8 	.word	0x2001d5c8

000073a0 <param4Linear>:
	param4[v][string] = value;
    73a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    73a4:	4b02      	ldr	r3, [pc, #8]	; (73b0 <param4Linear+0x10>)
    73a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    73aa:	ed83 0a00 	vstr	s0, [r3]
}
    73ae:	4770      	bx	lr
    73b0:	2001d570 	.word	0x2001d570
    73b4:	f3af 8000 	nop.w
    73b8:	f3af 8000 	nop.w
    73bc:	f3af 8000 	nop.w

000073c0 <param5Linear>:
	param5[v][string] = value;
    73c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    73c4:	4b02      	ldr	r3, [pc, #8]	; (73d0 <param5Linear+0x10>)
    73c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    73ca:	ed83 0a00 	vstr	s0, [r3]
}
    73ce:	4770      	bx	lr
    73d0:	2001d590 	.word	0x2001d590
    73d4:	f3af 8000 	nop.w
    73d8:	f3af 8000 	nop.w
    73dc:	f3af 8000 	nop.w

000073e0 <param2BC>:
{
    73e0:	b508      	push	{r3, lr}
	tCrusher_setQuality (&bc[v][string],value);
    73e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    73e6:	4803      	ldr	r0, [pc, #12]	; (73f4 <param2BC+0x14>)
    73e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    73ec:	f002 f8c8 	bl	9580 <__tCrusher_setQuality_veneer>
}
    73f0:	bd08      	pop	{r3, pc}
    73f2:	bf00      	nop
    73f4:	2001d070 	.word	0x2001d070
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <param3BC>:
{
    7400:	b508      	push	{r3, lr}
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    7402:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7406:	ee77 7ac0 	vsub.f32	s15, s15, s0
    740a:	4b08      	ldr	r3, [pc, #32]	; (742c <param3BC+0x2c>)
    740c:	ed93 7a00 	vldr	s14, [r3]
    7410:	ee67 7a87 	vmul.f32	s15, s15, s14
	tCrusher_setSamplingRatio (&bc[v][string], value);
    7414:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7418:	ed9f 0a05 	vldr	s0, [pc, #20]	; 7430 <param3BC+0x30>
    741c:	ee37 0a80 	vadd.f32	s0, s15, s0
    7420:	4804      	ldr	r0, [pc, #16]	; (7434 <param3BC+0x34>)
    7422:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7426:	f002 f9b3 	bl	9790 <__tCrusher_setSamplingRatio_veneer>
}
    742a:	bd08      	pop	{r3, pc}
    742c:	200008d4 	.word	0x200008d4
    7430:	3c23d70a 	.word	0x3c23d70a
    7434:	2001d070 	.word	0x2001d070
    7438:	f3af 8000 	nop.w
    743c:	f3af 8000 	nop.w

00007440 <param4BC>:
{
    7440:	b508      	push	{r3, lr}
	tCrusher_setRound(&bc[v][string], value);
    7442:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7446:	4803      	ldr	r0, [pc, #12]	; (7454 <param4BC+0x14>)
    7448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    744c:	f002 fae4 	bl	9a18 <__tCrusher_setRound_veneer>
}
    7450:	bd08      	pop	{r3, pc}
    7452:	bf00      	nop
    7454:	2001d070 	.word	0x2001d070
    7458:	f3af 8000 	nop.w
    745c:	f3af 8000 	nop.w

00007460 <param5BC>:
{
    7460:	b508      	push	{r3, lr}
	tCrusher_setOperation(&bc[v][string], value);
    7462:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7466:	4803      	ldr	r0, [pc, #12]	; (7474 <param5BC+0x14>)
    7468:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    746c:	f002 f8cc 	bl	9608 <__tCrusher_setOperation_veneer>
}
    7470:	bd08      	pop	{r3, pc}
    7472:	bf00      	nop
    7474:	2001d070 	.word	0x2001d070
    7478:	f3af 8000 	nop.w
    747c:	f3af 8000 	nop.w

00007480 <fxMixSet>:
	fxMix[v][string] = value;
    7480:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7484:	4b02      	ldr	r3, [pc, #8]	; (7490 <fxMixSet+0x10>)
    7486:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    748a:	ed83 0a00 	vstr	s0, [r3]
}
    748e:	4770      	bx	lr
    7490:	2001d1f4 	.word	0x2001d1f4
    7494:	f3af 8000 	nop.w
    7498:	f3af 8000 	nop.w
    749c:	f3af 8000 	nop.w

000074a0 <fxPostGainSet>:
{
    74a0:	b538      	push	{r3, r4, r5, lr}
    74a2:	4605      	mov	r5, r0
    74a4:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    74a6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    74aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    74ae:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    74b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    74b6:	f002 fad7 	bl	9a68 <__dbToATableLookup_veneer>
    74ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    74be:	4b03      	ldr	r3, [pc, #12]	; (74cc <fxPostGainSet+0x2c>)
    74c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    74c4:	ed83 0a00 	vstr	s0, [r3]
}
    74c8:	bd38      	pop	{r3, r4, r5, pc}
    74ca:	bf00      	nop
    74cc:	2001d214 	.word	0x2001d214
    74d0:	f3af 8000 	nop.w
    74d4:	f3af 8000 	nop.w
    74d8:	f3af 8000 	nop.w
    74dc:	f3af 8000 	nop.w

000074e0 <wavefolderTick>:
{
    74e0:	b510      	push	{r4, lr}
    74e2:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    74e6:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    74ea:	4a4b      	ldr	r2, [pc, #300]	; (7618 <wavefolderTick+0x138>)
    74ec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    74f0:	edd2 7a00 	vldr	s15, [r2]
    74f4:	ee27 0a80 	vmul.f32	s0, s15, s0
    74f8:	4a48      	ldr	r2, [pc, #288]	; (761c <wavefolderTick+0x13c>)
    74fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    74fe:	ed92 7a00 	vldr	s14, [r2]
    7502:	ee67 7a87 	vmul.f32	s15, s15, s14
    7506:	ee30 0a27 	vadd.f32	s0, s0, s15
    float curFB = param3[v][string];
    750a:	4a45      	ldr	r2, [pc, #276]	; (7620 <wavefolderTick+0x140>)
    750c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7510:	edd2 6a00 	vldr	s13, [r2]
    float curFF = param4[v][string];
    7514:	4a43      	ldr	r2, [pc, #268]	; (7624 <wavefolderTick+0x144>)
    7516:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    751a:	ed93 6a00 	vldr	s12, [r3]
    if (ffSample <= -1.0f)
    751e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    7522:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    752a:	d90c      	bls.n	7546 <wavefolderTick+0x66>
    } else if (ffSample >= 1.0f)
    752c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7530:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7538:	db02      	blt.n	7540 <wavefolderTick+0x60>
    	ffSample = 1.0f;
    753a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    753e:	e004      	b.n	754a <wavefolderTick+0x6a>
    float ffSample = sample;
    7540:	eef0 7a40 	vmov.f32	s15, s0
    7544:	e001      	b.n	754a <wavefolderTick+0x6a>
    	ffSample = -1.0f;
    7546:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    754a:	ee27 7aa7 	vmul.f32	s14, s15, s15
    754e:	ee27 7a27 	vmul.f32	s14, s14, s15
    7552:	eddf 5a35 	vldr	s11, [pc, #212]	; 7628 <wavefolderTick+0x148>
    7556:	ee27 7a25 	vmul.f32	s14, s14, s11
    755a:	ee37 8ac7 	vsub.f32	s16, s15, s14
    ffSample *= 1.499999f;
    755e:	eddf 7a33 	vldr	s15, [pc, #204]	; 762c <wavefolderTick+0x14c>
    7562:	ee28 8a27 	vmul.f32	s16, s16, s15
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    7566:	ee26 8a08 	vmul.f32	s16, s12, s16
    756a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    756e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    7572:	ee67 7a80 	vmul.f32	s15, s15, s0
    7576:	ee38 8a27 	vadd.f32	s16, s16, s15
    float fbSample = wfState[v][string];
    757a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    757e:	4b2c      	ldr	r3, [pc, #176]	; (7630 <wavefolderTick+0x150>)
    7580:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7584:	edd3 7a00 	vldr	s15, [r3]
    if (fbSample <= -1.0f)
    7588:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    758c:	eef4 7ac7 	vcmpe.f32	s15, s14
    7590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7594:	d909      	bls.n	75aa <wavefolderTick+0xca>
    } else if (fbSample >= 1.0f)
    7596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    759a:	eef4 7ac7 	vcmpe.f32	s15, s14
    759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    75a2:	db04      	blt.n	75ae <wavefolderTick+0xce>
    	fbSample = 1.0f;
    75a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    75a8:	e001      	b.n	75ae <wavefolderTick+0xce>
    	fbSample = -1.0f;
    75aa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    75ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
    75b2:	ee27 7a27 	vmul.f32	s14, s14, s15
    75b6:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 7628 <wavefolderTick+0x148>
    75ba:	ee27 7a06 	vmul.f32	s14, s14, s12
    75be:	ee77 7ac7 	vsub.f32	s15, s15, s14
    fbSample *= 1.499999f;
    75c2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 762c <wavefolderTick+0x14c>
    75c6:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fb = curFB * fbSample;
    75ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    75ce:	ee38 8a27 	vadd.f32	s16, s16, s15
    75d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    75d6:	008c      	lsls	r4, r1, #2
    75d8:	4b16      	ldr	r3, [pc, #88]	; (7634 <wavefolderTick+0x154>)
    75da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    75de:	edd3 8a00 	vldr	s17, [r3]
    75e2:	eddf 7a15 	vldr	s15, [pc, #84]	; 7638 <wavefolderTick+0x158>
    75e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    75ea:	f001 ffd1 	bl	9590 <__arm_sin_f32_veneer>
    75ee:	ee68 8a80 	vmul.f32	s17, s17, s0
    75f2:	ee38 0a68 	vsub.f32	s0, s16, s17
    75f6:	4b0e      	ldr	r3, [pc, #56]	; (7630 <wavefolderTick+0x150>)
    75f8:	4423      	add	r3, r4
    75fa:	ed83 0a00 	vstr	s0, [r3]
    sample = wfState[v][string] * invCurFB[v][string];
    75fe:	4b0f      	ldr	r3, [pc, #60]	; (763c <wavefolderTick+0x15c>)
    7600:	4423      	add	r3, r4
    7602:	edd3 7a00 	vldr	s15, [r3]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7606:	ee20 0a27 	vmul.f32	s0, s0, s15
    760a:	480d      	ldr	r0, [pc, #52]	; (7640 <wavefolderTick+0x160>)
    760c:	4420      	add	r0, r4
    760e:	f002 fa1f 	bl	9a50 <__tHighpass_tick_veneer>
}
    7612:	ecbd 8b02 	vpop	{d8}
    7616:	bd10      	pop	{r4, pc}
    7618:	2001d510 	.word	0x2001d510
    761c:	2001d530 	.word	0x2001d530
    7620:	2001d550 	.word	0x2001d550
    7624:	2001d570 	.word	0x2001d570
    7628:	3eaaaaaa 	.word	0x3eaaaaaa
    762c:	3fbffff8 	.word	0x3fbffff8
    7630:	2001d83c 	.word	0x2001d83c
    7634:	2001d590 	.word	0x2001d590
    7638:	40c90fdb 	.word	0x40c90fdb
    763c:	2001d244 	.word	0x2001d244
    7640:	2001d0d0 	.word	0x2001d0d0
    7644:	f3af 8000 	nop.w
    7648:	f3af 8000 	nop.w
    764c:	f3af 8000 	nop.w
    7650:	f3af 8000 	nop.w
    7654:	f3af 8000 	nop.w
    7658:	f3af 8000 	nop.w
    765c:	f3af 8000 	nop.w

00007660 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    7660:	eddf 7a07 	vldr	s15, [pc, #28]	; 7680 <chorusParam1+0x20>
    7664:	ee20 0a27 	vmul.f32	s0, s0, s15
    7668:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    766c:	ee30 0a27 	vadd.f32	s0, s0, s15
    7670:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7674:	4b03      	ldr	r3, [pc, #12]	; (7684 <chorusParam1+0x24>)
    7676:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    767a:	ed83 0a00 	vstr	s0, [r3]
}
    767e:	4770      	bx	lr
    7680:	45b4a000 	.word	0x45b4a000
    7684:	2001d510 	.word	0x2001d510
    7688:	f3af 8000 	nop.w
    768c:	f3af 8000 	nop.w
    7690:	f3af 8000 	nop.w
    7694:	f3af 8000 	nop.w
    7698:	f3af 8000 	nop.w
    769c:	f3af 8000 	nop.w

000076a0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    76a0:	eddf 7a05 	vldr	s15, [pc, #20]	; 76b8 <chorusParam2+0x18>
    76a4:	ee20 0a27 	vmul.f32	s0, s0, s15
    76a8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    76ac:	4b03      	ldr	r3, [pc, #12]	; (76bc <chorusParam2+0x1c>)
    76ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    76b2:	ed83 0a00 	vstr	s0, [r3]
}
    76b6:	4770      	bx	lr
    76b8:	3dcccccd 	.word	0x3dcccccd
    76bc:	2001d530 	.word	0x2001d530

000076c0 <chorusParam3>:
{
    76c0:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    76c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 76e4 <chorusParam3+0x24>
    76c6:	ee20 0a27 	vmul.f32	s0, s0, s15
    76ca:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    76ce:	eddf 7a06 	vldr	s15, [pc, #24]	; 76e8 <chorusParam3+0x28>
    76d2:	ee30 0a27 	vadd.f32	s0, s0, s15
    76d6:	4805      	ldr	r0, [pc, #20]	; (76ec <chorusParam3+0x2c>)
    76d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    76dc:	f002 f8f0 	bl	98c0 <__tCycle_setFreq_veneer>
}
    76e0:	bd08      	pop	{r3, pc}
    76e2:	bf00      	nop
    76e4:	3ecccccd 	.word	0x3ecccccd
    76e8:	3c23d70a 	.word	0x3c23d70a
    76ec:	2001d464 	.word	0x2001d464
    76f0:	f3af 8000 	nop.w
    76f4:	f3af 8000 	nop.w
    76f8:	f3af 8000 	nop.w
    76fc:	f3af 8000 	nop.w

00007700 <chorusParam4>:
{
    7700:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    7702:	eddf 7a08 	vldr	s15, [pc, #32]	; 7724 <chorusParam4+0x24>
    7706:	ee20 0a27 	vmul.f32	s0, s0, s15
    770a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    770e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7728 <chorusParam4+0x28>
    7712:	ee30 0a27 	vadd.f32	s0, s0, s15
    7716:	4805      	ldr	r0, [pc, #20]	; (772c <chorusParam4+0x2c>)
    7718:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    771c:	f002 f8d0 	bl	98c0 <__tCycle_setFreq_veneer>
}
    7720:	bd08      	pop	{r3, pc}
    7722:	bf00      	nop
    7724:	3ee38e37 	.word	0x3ee38e37
    7728:	3c343958 	.word	0x3c343958
    772c:	2001d484 	.word	0x2001d484
    7730:	f3af 8000 	nop.w
    7734:	f3af 8000 	nop.w
    7738:	f3af 8000 	nop.w
    773c:	f3af 8000 	nop.w

00007740 <delayParam1>:
{
    7740:	b508      	push	{r3, lr}
    tTapeDelay_setDelay(&tapeDelay[string], value * 30000.0f + 1.0f);
    7742:	eddf 7a07 	vldr	s15, [pc, #28]	; 7760 <delayParam1+0x20>
    7746:	ee20 0a27 	vmul.f32	s0, s0, s15
    774a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    774e:	ee30 0a27 	vadd.f32	s0, s0, s15
    7752:	4804      	ldr	r0, [pc, #16]	; (7764 <delayParam1+0x24>)
    7754:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7758:	f002 f8aa 	bl	98b0 <__tTapeDelay_setDelay_veneer>
}
    775c:	bd08      	pop	{r3, pc}
    775e:	bf00      	nop
    7760:	46ea6000 	.word	0x46ea6000
    7764:	2001d7e4 	.word	0x2001d7e4
    7768:	f3af 8000 	nop.w
    776c:	f3af 8000 	nop.w
    7770:	f3af 8000 	nop.w
    7774:	f3af 8000 	nop.w
    7778:	f3af 8000 	nop.w
    777c:	f3af 8000 	nop.w

00007780 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    7780:	eddf 7a0d 	vldr	s15, [pc, #52]	; 77b8 <delayParam2+0x38>
    7784:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (val < min)
    7788:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    778c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7790:	d407      	bmi.n	77a2 <delayParam2+0x22>
    else if (val > max)
    7792:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    779a:	dd04      	ble.n	77a6 <delayParam2+0x26>
        return max;
    779c:	eeb0 0a67 	vmov.f32	s0, s15
    77a0:	e001      	b.n	77a6 <delayParam2+0x26>
        return min;
    77a2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 77bc <delayParam2+0x3c>
    77a6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    77aa:	4b05      	ldr	r3, [pc, #20]	; (77c0 <delayParam2+0x40>)
    77ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    77b0:	ed83 0a00 	vstr	s0, [r3]
}
    77b4:	4770      	bx	lr
    77b6:	bf00      	nop
    77b8:	3f8ccccd 	.word	0x3f8ccccd
    77bc:	00000000 	.word	0x00000000
    77c0:	2001d530 	.word	0x2001d530
    77c4:	f3af 8000 	nop.w
    77c8:	f3af 8000 	nop.w
    77cc:	f3af 8000 	nop.w
    77d0:	f3af 8000 	nop.w
    77d4:	f3af 8000 	nop.w
    77d8:	f3af 8000 	nop.w
    77dc:	f3af 8000 	nop.w

000077e0 <delayParam3>:
{
    77e0:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    77e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    77e6:	eddf 7a05 	vldr	s15, [pc, #20]	; 77fc <delayParam3+0x1c>
    77ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    77ee:	4804      	ldr	r0, [pc, #16]	; (7800 <delayParam3+0x20>)
    77f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    77f4:	f001 fee8 	bl	95c8 <__tSVF_setFreqFast_veneer>
}
    77f8:	bd08      	pop	{r3, pc}
    77fa:	bf00      	nop
    77fc:	42fe0000 	.word	0x42fe0000
    7800:	2001cfe4 	.word	0x2001cfe4
    7804:	f3af 8000 	nop.w
    7808:	f3af 8000 	nop.w
    780c:	f3af 8000 	nop.w
    7810:	f3af 8000 	nop.w
    7814:	f3af 8000 	nop.w
    7818:	f3af 8000 	nop.w
    781c:	f3af 8000 	nop.w

00007820 <delayParam4>:
{
    7820:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    7822:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7826:	eddf 7a05 	vldr	s15, [pc, #20]	; 783c <delayParam4+0x1c>
    782a:	ee20 0a27 	vmul.f32	s0, s0, s15
    782e:	4804      	ldr	r0, [pc, #16]	; (7840 <delayParam4+0x20>)
    7830:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7834:	f001 fec8 	bl	95c8 <__tSVF_setFreqFast_veneer>
}
    7838:	bd08      	pop	{r3, pc}
    783a:	bf00      	nop
    783c:	42fe0000 	.word	0x42fe0000
    7840:	2001cfc4 	.word	0x2001cfc4
    7844:	f3af 8000 	nop.w
    7848:	f3af 8000 	nop.w
    784c:	f3af 8000 	nop.w
    7850:	f3af 8000 	nop.w
    7854:	f3af 8000 	nop.w
    7858:	f3af 8000 	nop.w
    785c:	f3af 8000 	nop.w

00007860 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    7860:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    7864:	ee20 0a27 	vmul.f32	s0, s0, s15
    7868:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    786c:	ee30 0a27 	vadd.f32	s0, s0, s15
    7870:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7874:	4b02      	ldr	r3, [pc, #8]	; (7880 <delayParam5+0x20>)
    7876:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    787a:	ed83 0a00 	vstr	s0, [r3]
}
    787e:	4770      	bx	lr
    7880:	2001d590 	.word	0x2001d590
    7884:	f3af 8000 	nop.w
    7888:	f3af 8000 	nop.w
    788c:	f3af 8000 	nop.w
    7890:	f3af 8000 	nop.w
    7894:	f3af 8000 	nop.w
    7898:	f3af 8000 	nop.w
    789c:	f3af 8000 	nop.w

000078a0 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    78a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    78a4:	ed2d 8b04 	vpush	{d8-d9}
    78a8:	eeb0 8a40 	vmov.f32	s16, s0
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    78ac:	ea4f 0981 	mov.w	r9, r1, lsl #2
    78b0:	4d2a      	ldr	r5, [pc, #168]	; (795c <chorusTick+0xbc>)
    78b2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    78b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    78ba:	ea4f 0881 	mov.w	r8, r1, lsl #2
    78be:	4f28      	ldr	r7, [pc, #160]	; (7960 <chorusTick+0xc0>)
    78c0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    78c4:	ed97 9a00 	vldr	s18, [r7]
    78c8:	eddf 7a26 	vldr	s15, [pc, #152]	; 7964 <chorusTick+0xc4>
    78cc:	ee29 9a27 	vmul.f32	s18, s18, s15
    78d0:	4e25      	ldr	r6, [pc, #148]	; (7968 <chorusTick+0xc8>)
    78d2:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    78d6:	edd6 8a00 	vldr	s17, [r6]
    78da:	4824      	ldr	r0, [pc, #144]	; (796c <chorusTick+0xcc>)
    78dc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    78e0:	f002 f8fa 	bl	9ad8 <__tCycle_tick_veneer>
    78e4:	ee28 0a80 	vmul.f32	s0, s17, s0
    78e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    78ec:	ee30 0a28 	vadd.f32	s0, s0, s17
    78f0:	ee29 0a00 	vmul.f32	s0, s18, s0
    78f4:	4628      	mov	r0, r5
    78f6:	f001 feaf 	bl	9658 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    78fa:	4c1d      	ldr	r4, [pc, #116]	; (7970 <chorusTick+0xd0>)
    78fc:	444c      	add	r4, r9
    78fe:	ed97 9a00 	vldr	s18, [r7]
    7902:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7906:	ee29 9a27 	vmul.f32	s18, s18, s15
    790a:	edd6 9a00 	vldr	s19, [r6]
    790e:	4819      	ldr	r0, [pc, #100]	; (7974 <chorusTick+0xd4>)
    7910:	4440      	add	r0, r8
    7912:	f002 f8e1 	bl	9ad8 <__tCycle_tick_veneer>
    7916:	ee69 9a80 	vmul.f32	s19, s19, s0
    791a:	ee38 0ae9 	vsub.f32	s0, s17, s19
    791e:	ee29 0a00 	vmul.f32	s0, s18, s0
    7922:	4620      	mov	r0, r4
    7924:	f001 fe98 	bl	9658 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[string], sample) - sample;
    7928:	eeb0 0a48 	vmov.f32	s0, s16
    792c:	4628      	mov	r0, r5
    792e:	f002 f8cf 	bl	9ad0 <__tLinearDelay_tick_veneer>
    7932:	ee70 8a48 	vsub.f32	s17, s0, s16
    temp += tLinearDelay_tick(&delay2[string], sample) - sample;
    7936:	eeb0 0a48 	vmov.f32	s0, s16
    793a:	4620      	mov	r0, r4
    793c:	f002 f8c8 	bl	9ad0 <__tLinearDelay_tick_veneer>
    7940:	ee30 0a48 	vsub.f32	s0, s0, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7944:	ee38 0a80 	vadd.f32	s0, s17, s0
    7948:	480b      	ldr	r0, [pc, #44]	; (7978 <chorusTick+0xd8>)
    794a:	4440      	add	r0, r8
    794c:	f002 f880 	bl	9a50 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    7950:	eeb1 0a40 	vneg.f32	s0, s0
    7954:	ecbd 8b04 	vpop	{d8-d9}
    7958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    795c:	2001d110 	.word	0x2001d110
    7960:	2001d510 	.word	0x2001d510
    7964:	3f34fdf4 	.word	0x3f34fdf4
    7968:	2001d530 	.word	0x2001d530
    796c:	2001d464 	.word	0x2001d464
    7970:	2001d118 	.word	0x2001d118
    7974:	2001d484 	.word	0x2001d484
    7978:	2001d0d0 	.word	0x2001d0d0
    797c:	f3af 8000 	nop.w

00007980 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    7980:	b508      	push	{r3, lr}
    sample = sample * (param1[v][string]+1.0f);
    7982:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7986:	4b34      	ldr	r3, [pc, #208]	; (7a58 <shaperTick+0xd8>)
    7988:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    798c:	edd3 7a00 	vldr	s15, [r3]
    7990:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7994:	ee37 7a87 	vadd.f32	s14, s15, s14
    7998:	ee27 7a00 	vmul.f32	s14, s14, s0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    799c:	4b2f      	ldr	r3, [pc, #188]	; (7a5c <shaperTick+0xdc>)
    799e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    79a2:	edd3 6a00 	vldr	s13, [r3]
    79a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    79aa:	ee77 7a87 	vadd.f32	s15, s15, s14
    79ae:	4b2c      	ldr	r3, [pc, #176]	; (7a60 <shaperTick+0xe0>)
    79b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    79b4:	ed93 6a00 	vldr	s12, [r3]
    Lfloat fx = input * 2.0f;    // prescale
    79b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (val < min)
    79bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 7a64 <shaperTick+0xe4>
    79c0:	eef4 7ac7 	vcmpe.f32	s15, s14
    79c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79c8:	d409      	bmi.n	79de <shaperTick+0x5e>
    else if (val > max)
    79ca:	ed9f 7a27 	vldr	s14, [pc, #156]	; 7a68 <shaperTick+0xe8>
    79ce:	eef4 7ac7 	vcmpe.f32	s15, s14
    79d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79d6:	dd3c      	ble.n	7a52 <shaperTick+0xd2>
        return max;
    79d8:	eef0 6a47 	vmov.f32	s13, s14
    79dc:	e001      	b.n	79e2 <shaperTick+0x62>
        return min;
    79de:	eddf 6a21 	vldr	s13, [pc, #132]	; 7a64 <shaperTick+0xe4>
    xc2 = xc*xc;
    79e2:	ee66 6aa6 	vmul.f32	s13, s13, s13
    c = 0.5f*fx*(3.0f - (xc2));
    79e6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    79ea:	ee67 7a80 	vmul.f32	s15, s15, s0
    79ee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    79f2:	ee37 7a66 	vsub.f32	s14, s14, s13
    79f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    xc4 = xc2 * xc2;
    79fa:	ee66 5aa6 	vmul.f32	s11, s13, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
    79fe:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
    7a02:	ee26 5a85 	vmul.f32	s10, s13, s10
    7a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7a0a:	ee37 7a45 	vsub.f32	s14, s14, s10
    7a0e:	ed9f 5a17 	vldr	s10, [pc, #92]	; 7a6c <shaperTick+0xec>
    7a12:	ee65 5a85 	vmul.f32	s11, s11, s10
    7a16:	ee37 7a25 	vadd.f32	s14, s14, s11
    7a1a:	eddf 5a15 	vldr	s11, [pc, #84]	; 7a70 <shaperTick+0xf0>
    7a1e:	ee27 7a25 	vmul.f32	s14, s14, s11
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
    7a22:	eddf 5a14 	vldr	s11, [pc, #80]	; 7a74 <shaperTick+0xf4>
    7a26:	ee66 6aa5 	vmul.f32	s13, s13, s11
    7a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    7a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
    7a32:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
    7a36:	ee36 7a07 	vadd.f32	s14, s12, s14
    7a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7a3e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7a42:	ee27 0a80 	vmul.f32	s0, s15, s0
    7a46:	480c      	ldr	r0, [pc, #48]	; (7a78 <shaperTick+0xf8>)
    7a48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7a4c:	f002 f800 	bl	9a50 <__tHighpass_tick_veneer>
    return temp;
}
    7a50:	bd08      	pop	{r3, pc}
        return val;
    7a52:	eef0 6a67 	vmov.f32	s13, s15
    7a56:	e7c4      	b.n	79e2 <shaperTick+0x62>
    7a58:	2001d510 	.word	0x2001d510
    7a5c:	2001d530 	.word	0x2001d530
    7a60:	2001d550 	.word	0x2001d550
    7a64:	c03504f3 	.word	0xc03504f3
    7a68:	403504f3 	.word	0x403504f3
    7a6c:	3c800000 	.word	0x3c800000
    7a70:	3fa72f05 	.word	0x3fa72f05
    7a74:	3d4ccccd 	.word	0x3d4ccccd
    7a78:	2001d0d0 	.word	0x2001d0d0
    7a7c:	f3af 8000 	nop.w

00007a80 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    7a80:	4770      	bx	lr
    7a82:	bf00      	nop
    7a84:	f3af 8000 	nop.w
    7a88:	f3af 8000 	nop.w
    7a8c:	f3af 8000 	nop.w
    7a90:	f3af 8000 	nop.w
    7a94:	f3af 8000 	nop.w
    7a98:	f3af 8000 	nop.w
    7a9c:	f3af 8000 	nop.w

00007aa0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    7aa0:	b510      	push	{r4, lr}
    sample = tTiltFilter_tick(&FXTilt[v][string], sample);
    7aa2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7aa6:	008c      	lsls	r4, r1, #2
    7aa8:	4804      	ldr	r0, [pc, #16]	; (7abc <tiltFilterTick+0x1c>)
    7aaa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7aae:	f001 fe0b 	bl	96c8 <__tTiltFilter_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7ab2:	4803      	ldr	r0, [pc, #12]	; (7ac0 <tiltFilterTick+0x20>)
    7ab4:	4420      	add	r0, r4
    7ab6:	f001 fe97 	bl	97e8 <__tVZFilterBell_tick_veneer>
    return sample;
}
    7aba:	bd10      	pop	{r4, pc}
    7abc:	2001cee4 	.word	0x2001cee4
    7ac0:	2001d090 	.word	0x2001d090
    7ac4:	f3af 8000 	nop.w
    7ac8:	f3af 8000 	nop.w
    7acc:	f3af 8000 	nop.w
    7ad0:	f3af 8000 	nop.w
    7ad4:	f3af 8000 	nop.w
    7ad8:	f3af 8000 	nop.w
    7adc:	f3af 8000 	nop.w

00007ae0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    7ae0:	b510      	push	{r4, lr}
    7ae2:	ed2d 8b06 	vpush	{d8-d10}
    float gain = param1[v][string];
    7ae6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7aea:	4b3c      	ldr	r3, [pc, #240]	; (7bdc <tanhTick+0xfc>)
    7aec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7af0:	edd3 7a00 	vldr	s15, [r3]
	sample = sample * gain;
    7af4:	ee27 0a80 	vmul.f32	s0, s15, s0
    gain = gain * 0.5f;
    7af8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
    7afc:	ee27 7aa8 	vmul.f32	s14, s15, s17
    //need to do something with shape param
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    7b00:	4b37      	ldr	r3, [pc, #220]	; (7be0 <tanhTick+0x100>)
    7b02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7b06:	edd3 7a00 	vldr	s15, [r3]
    7b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    7b0e:	ee77 7a80 	vadd.f32	s15, s15, s0
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    7b12:	ed9f 8a34 	vldr	s16, [pc, #208]	; 7be4 <tanhTick+0x104>
    7b16:	ee27 0a88 	vmul.f32	s0, s15, s16
    7b1a:	ee27 0a80 	vmul.f32	s0, s15, s0
    7b1e:	ee27 0a80 	vmul.f32	s0, s15, s0
    7b22:	ee37 0a80 	vadd.f32	s0, s15, s0
    7b26:	ed9f 9a30 	vldr	s18, [pc, #192]	; 7be8 <tanhTick+0x108>
    7b2a:	ee27 7a89 	vmul.f32	s14, s15, s18
    7b2e:	ee27 7a87 	vmul.f32	s14, s15, s14
    7b32:	ee27 7a87 	vmul.f32	s14, s15, s14
    7b36:	ee27 7a87 	vmul.f32	s14, s15, s14
    7b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
    7b3e:	ee30 0a27 	vadd.f32	s0, s0, s15
    Lfloat den = InvSqrt(1.0f + a * a);
    7b42:	ee60 7a00 	vmul.f32	s15, s0, s0
    7b46:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    7b4a:	ee77 7aa9 	vadd.f32	s15, s15, s19
    Lfloat xhalf = 0.5f*x;
    7b4e:	ee27 7aa8 	vmul.f32	s14, s15, s17
    int i = *(int*)&x; // get bits for floating value
    7b52:	ee17 3a90 	vmov	r3, s15
    i = 0x5f3759df - (i>>1); // gives initial guess y0
    7b56:	4c25      	ldr	r4, [pc, #148]	; (7bec <tanhTick+0x10c>)
    x = *(Lfloat*)&i; // convert bits back to float
    7b58:	eba4 0363 	sub.w	r3, r4, r3, asr #1
    7b5c:	ee07 3a90 	vmov	s15, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    7b60:	ee27 7a27 	vmul.f32	s14, s14, s15
    7b64:	ee27 7a87 	vmul.f32	s14, s15, s14
    7b68:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
    7b6c:	ee3a 7a47 	vsub.f32	s14, s20, s14
    7b70:	ee67 7a87 	vmul.f32	s15, s15, s14
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7b74:	ee20 0a27 	vmul.f32	s0, s0, s15
    7b78:	481d      	ldr	r0, [pc, #116]	; (7bf0 <tanhTick+0x110>)
    7b7a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7b7e:	f001 ff67 	bl	9a50 <__tHighpass_tick_veneer>
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    7b82:	ee60 7a08 	vmul.f32	s15, s0, s16
    7b86:	ee60 7a27 	vmul.f32	s15, s0, s15
    7b8a:	ee60 7a27 	vmul.f32	s15, s0, s15
    7b8e:	ee70 7a27 	vadd.f32	s15, s0, s15
    7b92:	ee20 9a09 	vmul.f32	s18, s0, s18
    7b96:	ee20 9a09 	vmul.f32	s18, s0, s18
    7b9a:	ee20 9a09 	vmul.f32	s18, s0, s18
    7b9e:	ee20 9a09 	vmul.f32	s18, s0, s18
    7ba2:	ee20 0a09 	vmul.f32	s0, s0, s18
    7ba6:	ee77 7a80 	vadd.f32	s15, s15, s0
    Lfloat den = InvSqrt(1.0f + a * a);
    7baa:	ee27 7aa7 	vmul.f32	s14, s15, s15
    7bae:	ee37 7a29 	vadd.f32	s14, s14, s19
    Lfloat xhalf = 0.5f*x;
    7bb2:	ee67 8a28 	vmul.f32	s17, s14, s17
    int i = *(int*)&x; // get bits for floating value
    7bb6:	ee17 3a10 	vmov	r3, s14
    x = *(Lfloat*)&i; // convert bits back to float
    7bba:	eba4 0363 	sub.w	r3, r4, r3, asr #1
    7bbe:	ee00 3a10 	vmov	s0, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    7bc2:	ee68 8a80 	vmul.f32	s17, s17, s0
    7bc6:	ee60 8a28 	vmul.f32	s17, s0, s17
    7bca:	ee3a aa68 	vsub.f32	s20, s20, s17
    7bce:	ee20 0a0a 	vmul.f32	s0, s0, s20
    //temp *= param4[v][string];
    temp = fast_tanh5(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    7bd2:	ee27 0a80 	vmul.f32	s0, s15, s0
    7bd6:	ecbd 8b06 	vpop	{d8-d10}
    7bda:	bd10      	pop	{r4, pc}
    7bdc:	2001d510 	.word	0x2001d510
    7be0:	2001d530 	.word	0x2001d530
    7be4:	3e28d927 	.word	0x3e28d927
    7be8:	3c217586 	.word	0x3c217586
    7bec:	5f3759df 	.word	0x5f3759df
    7bf0:	2001d0d0 	.word	0x2001d0d0
    7bf4:	f3af 8000 	nop.w
    7bf8:	f3af 8000 	nop.w
    7bfc:	f3af 8000 	nop.w

00007c00 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    7c00:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    7c02:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7c06:	4b1b      	ldr	r3, [pc, #108]	; (7c74 <softClipTick+0x74>)
    7c08:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7c0c:	edd3 7a00 	vldr	s15, [r3]
    7c10:	ee27 0a80 	vmul.f32	s0, s15, s0
    sample = sample + param2[v][string];
    7c14:	4b18      	ldr	r3, [pc, #96]	; (7c78 <softClipTick+0x78>)
    7c16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7c1a:	edd3 7a00 	vldr	s15, [r3]
    7c1e:	ee77 7a80 	vadd.f32	s15, s15, s0
    //float shape = param3[v][string];
    if (sample <= -1.0f)
    7c22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    7c26:	eef4 7ac7 	vcmpe.f32	s15, s14
    7c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c2e:	d909      	bls.n	7c44 <softClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    7c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7c34:	eef4 7ac7 	vcmpe.f32	s15, s14
    7c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c3c:	db04      	blt.n	7c48 <softClipTick+0x48>
    {
        sample = 1.0f;
    7c3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7c42:	e001      	b.n	7c48 <softClipTick+0x48>
        sample = -1.0f;
    7c44:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
    {
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
    7c48:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
    7c4c:	ee27 0a80 	vmul.f32	s0, s15, s0
    7c50:	ee27 7aa7 	vmul.f32	s14, s15, s15
    7c54:	ee67 7a27 	vmul.f32	s15, s14, s15
    7c58:	ed9f 7a08 	vldr	s14, [pc, #32]	; 7c7c <softClipTick+0x7c>
    7c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7c60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c64:	ee30 0a67 	vsub.f32	s0, s0, s15
    7c68:	4805      	ldr	r0, [pc, #20]	; (7c80 <softClipTick+0x80>)
    7c6a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c6e:	f001 feef 	bl	9a50 <__tHighpass_tick_veneer>
    return sample;
}
    7c72:	bd08      	pop	{r3, pc}
    7c74:	2001d510 	.word	0x2001d510
    7c78:	2001d530 	.word	0x2001d530
    7c7c:	3eaaaaaa 	.word	0x3eaaaaaa
    7c80:	2001d0d0 	.word	0x2001d0d0
    7c84:	f3af 8000 	nop.w
    7c88:	f3af 8000 	nop.w
    7c8c:	f3af 8000 	nop.w
    7c90:	f3af 8000 	nop.w
    7c94:	f3af 8000 	nop.w
    7c98:	f3af 8000 	nop.w
    7c9c:	f3af 8000 	nop.w

00007ca0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    7ca0:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    7ca2:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7ca6:	4b21      	ldr	r3, [pc, #132]	; (7d2c <hardClipTick+0x8c>)
    7ca8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7cac:	edd3 7a00 	vldr	s15, [r3]
    7cb0:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    7cb4:	4b1e      	ldr	r3, [pc, #120]	; (7d30 <hardClipTick+0x90>)
    7cb6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7cba:	ed93 0a00 	vldr	s0, [r3]
    7cbe:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (sample <= -1.0f)
    7cc2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    7cc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cce:	d909      	bls.n	7ce4 <hardClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    7cd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7cd4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cdc:	db04      	blt.n	7ce8 <hardClipTick+0x48>
    {
        sample = 1.0f;
    7cde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7ce2:	e001      	b.n	7ce8 <hardClipTick+0x48>
        sample = -1.0f;
    7ce4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7ce8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7cec:	008e      	lsls	r6, r1, #2
    7cee:	4d11      	ldr	r5, [pc, #68]	; (7d34 <hardClipTick+0x94>)
    7cf0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    7cf4:	edd5 7a00 	vldr	s15, [r5]
    7cf8:	ee27 0a80 	vmul.f32	s0, s15, s0
    7cfc:	f001 fc48 	bl	9590 <__arm_sin_f32_veneer>
    7d00:	4c0d      	ldr	r4, [pc, #52]	; (7d38 <hardClipTick+0x98>)
    7d02:	4434      	add	r4, r6
    7d04:	edd4 7a00 	vldr	s15, [r4]
    7d08:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d0c:	edd5 7a00 	vldr	s15, [r5]
    7d10:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d14:	f001 fc3c 	bl	9590 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    7d18:	edd4 7a00 	vldr	s15, [r4]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7d1c:	ee27 0a80 	vmul.f32	s0, s15, s0
    7d20:	4806      	ldr	r0, [pc, #24]	; (7d3c <hardClipTick+0x9c>)
    7d22:	4430      	add	r0, r6
    7d24:	f001 fe94 	bl	9a50 <__tHighpass_tick_veneer>
    return sample;
}
    7d28:	bd70      	pop	{r4, r5, r6, pc}
    7d2a:	bf00      	nop
    7d2c:	2001d510 	.word	0x2001d510
    7d30:	2001d530 	.word	0x2001d530
    7d34:	2001d550 	.word	0x2001d550
    7d38:	2001d638 	.word	0x2001d638
    7d3c:	2001d0d0 	.word	0x2001d0d0

00007d40 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{
    7d40:	b508      	push	{r3, lr}

    sample = sample * param1[v][string];
    7d42:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7d46:	4b32      	ldr	r3, [pc, #200]	; (7e10 <polynomialShaperTick+0xd0>)
    7d48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7d4c:	edd3 7a00 	vldr	s15, [r3]
    7d50:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    7d54:	4b2f      	ldr	r3, [pc, #188]	; (7e14 <polynomialShaperTick+0xd4>)
    7d56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7d5a:	ed93 0a00 	vldr	s0, [r3]
    7d5e:	ee30 0a27 	vadd.f32	s0, s0, s15

    if (sample <= -1.0f)
    7d62:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    7d66:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d6e:	d909      	bls.n	7d84 <polynomialShaperTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    7d70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7d74:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d7c:	db04      	blt.n	7d88 <polynomialShaperTick+0x48>
    {
        sample = 1.0f;
    7d7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7d82:	e001      	b.n	7d88 <polynomialShaperTick+0x48>
        sample = -1.0f;
    7d84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7d88:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d8c:	4b22      	ldr	r3, [pc, #136]	; (7e18 <polynomialShaperTick+0xd8>)
    7d8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7d92:	ed93 7a00 	vldr	s14, [r3]
    7d96:	ee27 0a00 	vmul.f32	s0, s14, s0
    Lfloat term1 = x * 1.570034357f;
    7d9a:	eddf 6a20 	vldr	s13, [pc, #128]	; 7e1c <polynomialShaperTick+0xdc>
    7d9e:	ee60 5a26 	vmul.f32	s11, s0, s13
    Lfloat term2 = x * x * x * -0.6425216143f;
    7da2:	ee60 7a00 	vmul.f32	s15, s0, s0
    7da6:	ee60 7a27 	vmul.f32	s15, s0, s15
    7daa:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 7e20 <polynomialShaperTick+0xe0>
    7dae:	ee67 4a86 	vmul.f32	s9, s15, s12
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    7db2:	ee60 7a27 	vmul.f32	s15, s0, s15
    7db6:	ee60 7a27 	vmul.f32	s15, s0, s15
    7dba:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 7e24 <polynomialShaperTick+0xe4>
    7dbe:	ee67 7a85 	vmul.f32	s15, s15, s10
    return term1+term2+term3;
    7dc2:	ee75 5aa4 	vadd.f32	s11, s11, s9
    7dc6:	ee77 7aa5 	vadd.f32	s15, s15, s11
    7dca:	4b17      	ldr	r3, [pc, #92]	; (7e28 <polynomialShaperTick+0xe8>)
    7dcc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7dd0:	ed93 0a00 	vldr	s0, [r3]
    7dd4:	ee60 7a27 	vmul.f32	s15, s0, s15
    7dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
    Lfloat term1 = x * 1.570034357f;
    7ddc:	ee67 6aa6 	vmul.f32	s13, s15, s13
    Lfloat term2 = x * x * x * -0.6425216143f;
    7de0:	ee27 7aa7 	vmul.f32	s14, s15, s15
    7de4:	ee27 7a87 	vmul.f32	s14, s15, s14
    7de8:	ee27 6a06 	vmul.f32	s12, s14, s12
    Lfloat term3 = x * x * x * x * x * 0.07248725712f;
    7dec:	ee27 7a87 	vmul.f32	s14, s15, s14
    7df0:	ee67 7a87 	vmul.f32	s15, s15, s14
    7df4:	ee67 7a85 	vmul.f32	s15, s15, s10
    return term1+term2+term3;
    7df8:	ee76 6a86 	vadd.f32	s13, s13, s12
    7dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
	sample = sample * polyDivider[v][string];


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7e00:	ee20 0a27 	vmul.f32	s0, s0, s15
    7e04:	4809      	ldr	r0, [pc, #36]	; (7e2c <polynomialShaperTick+0xec>)
    7e06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7e0a:	f001 fe21 	bl	9a50 <__tHighpass_tick_veneer>
    return sample;
}
    7e0e:	bd08      	pop	{r3, pc}
    7e10:	2001d510 	.word	0x2001d510
    7e14:	2001d530 	.word	0x2001d530
    7e18:	2001d550 	.word	0x2001d550
    7e1c:	3fc8f6e3 	.word	0x3fc8f6e3
    7e20:	bf247c4c 	.word	0xbf247c4c
    7e24:	3d947433 	.word	0x3d947433
    7e28:	2001d5c8 	.word	0x2001d5c8
    7e2c:	2001d0d0 	.word	0x2001d0d0
    7e30:	f3af 8000 	nop.w
    7e34:	f3af 8000 	nop.w
    7e38:	f3af 8000 	nop.w
    7e3c:	f3af 8000 	nop.w

00007e40 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    7e40:	b510      	push	{r4, lr}
    7e42:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string];
    7e46:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7e4a:	008c      	lsls	r4, r1, #2
    7e4c:	4b2c      	ldr	r3, [pc, #176]	; (7f00 <satTick+0xc0>)
    7e4e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7e52:	ed93 7a00 	vldr	s14, [r3]
    7e56:	ee67 6a00 	vmul.f32	s13, s14, s0
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    7e5a:	4b2a      	ldr	r3, [pc, #168]	; (7f04 <satTick+0xc4>)
    7e5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7e60:	edd3 7a00 	vldr	s15, [r3]
    7e64:	ee27 7a27 	vmul.f32	s14, s14, s15
    7e68:	ee37 0a26 	vadd.f32	s0, s14, s13
    7e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
    7e70:	eef0 7ae7 	vabs.f32	s15, s15
    7e74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    7e78:	ee77 7a88 	vadd.f32	s15, s15, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7e7c:	ee80 0a27 	vdiv.f32	s0, s0, s15
    7e80:	4821      	ldr	r0, [pc, #132]	; (7f08 <satTick+0xc8>)
    7e82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7e86:	f001 fde3 	bl	9a50 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    7e8a:	4820      	ldr	r0, [pc, #128]	; (7f0c <satTick+0xcc>)
    7e8c:	4420      	add	r0, r4
    7e8e:	f001 fddf 	bl	9a50 <__tHighpass_tick_veneer>
    Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
    7e92:	eddf 7a1f 	vldr	s15, [pc, #124]	; 7f10 <satTick+0xd0>
    7e96:	ee60 7a27 	vmul.f32	s15, s0, s15
    7e9a:	ee60 7a27 	vmul.f32	s15, s0, s15
    7e9e:	ee60 7a27 	vmul.f32	s15, s0, s15
    7ea2:	ee70 7a27 	vadd.f32	s15, s0, s15
    7ea6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 7f14 <satTick+0xd4>
    7eaa:	ee20 7a07 	vmul.f32	s14, s0, s14
    7eae:	ee20 7a07 	vmul.f32	s14, s0, s14
    7eb2:	ee20 7a07 	vmul.f32	s14, s0, s14
    7eb6:	ee20 7a07 	vmul.f32	s14, s0, s14
    7eba:	ee20 0a07 	vmul.f32	s0, s0, s14
    7ebe:	ee77 7a80 	vadd.f32	s15, s15, s0
    Lfloat den = InvSqrt(1.0f + a * a);
    7ec2:	ee67 6aa7 	vmul.f32	s13, s15, s15
    7ec6:	ee76 6a88 	vadd.f32	s13, s13, s16
    Lfloat xhalf = 0.5f*x;
    7eca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    7ece:	ee26 7a87 	vmul.f32	s14, s13, s14
    int i = *(int*)&x; // get bits for floating value
    7ed2:	ee16 2a90 	vmov	r2, s13
    x = *(Lfloat*)&i; // convert bits back to float
    7ed6:	4b10      	ldr	r3, [pc, #64]	; (7f18 <satTick+0xd8>)
    7ed8:	eba3 0362 	sub.w	r3, r3, r2, asr #1
    7edc:	ee00 3a10 	vmov	s0, r3
    x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
    7ee0:	ee27 7a00 	vmul.f32	s14, s14, s0
    7ee4:	ee20 7a07 	vmul.f32	s14, s0, s14
    7ee8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    7eec:	ee36 7ac7 	vsub.f32	s14, s13, s14
    7ef0:	ee20 0a07 	vmul.f32	s0, s0, s14
    temp = fast_tanh5(temp);
    return temp;
}
    7ef4:	ee27 0a80 	vmul.f32	s0, s15, s0
    7ef8:	ecbd 8b02 	vpop	{d8}
    7efc:	bd10      	pop	{r4, pc}
    7efe:	bf00      	nop
    7f00:	2001d510 	.word	0x2001d510
    7f04:	2001d530 	.word	0x2001d530
    7f08:	2001d0d0 	.word	0x2001d0d0
    7f0c:	2001d0f0 	.word	0x2001d0f0
    7f10:	3e28d927 	.word	0x3e28d927
    7f14:	3c217586 	.word	0x3c217586
    7f18:	5f3759df 	.word	0x5f3759df
    7f1c:	f3af 8000 	nop.w

00007f20 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    7f20:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    7f22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f26:	4b06      	ldr	r3, [pc, #24]	; (7f40 <bcTick+0x20>)
    7f28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7f2c:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    7f30:	ee27 0a80 	vmul.f32	s0, s15, s0
    7f34:	4803      	ldr	r0, [pc, #12]	; (7f44 <bcTick+0x24>)
    7f36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7f3a:	f001 fc15 	bl	9768 <__tCrusher_tick_veneer>
}
    7f3e:	bd08      	pop	{r3, pc}
    7f40:	2001d510 	.word	0x2001d510
    7f44:	2001d070 	.word	0x2001d070
    7f48:	f3af 8000 	nop.w
    7f4c:	f3af 8000 	nop.w
    7f50:	f3af 8000 	nop.w
    7f54:	f3af 8000 	nop.w
    7f58:	f3af 8000 	nop.w
    7f5c:	f3af 8000 	nop.w

00007f60 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    7f60:	b508      	push	{r3, lr}
    return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
    7f62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f66:	4803      	ldr	r0, [pc, #12]	; (7f74 <compressorTick+0x14>)
    7f68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7f6c:	f001 fdb8 	bl	9ae0 <__tCompressor_tickWithTableHardKnee_veneer>
	//return tCompressor_tick(&comp[v][string], sample);
}
    7f70:	bd08      	pop	{r3, pc}
    7f72:	bf00      	nop
    7f74:	2001d0b0 	.word	0x2001d0b0
    7f78:	f3af 8000 	nop.w
    7f7c:	f3af 8000 	nop.w

00007f80 <FXlowpassTick>:

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
    7f80:	b508      	push	{r3, lr}
	return tSVF_tickLP(&FXlowpass[v][string], sample);
    7f82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f86:	4803      	ldr	r0, [pc, #12]	; (7f94 <FXlowpassTick+0x14>)
    7f88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7f8c:	f001 fc24 	bl	97d8 <__tSVF_tickLP_veneer>
}
    7f90:	bd08      	pop	{r3, pc}
    7f92:	bf00      	nop
    7f94:	2001cfe4 	.word	0x2001cfe4
    7f98:	f3af 8000 	nop.w
    7f9c:	f3af 8000 	nop.w

00007fa0 <FXhighpassTick>:

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
    7fa0:	b508      	push	{r3, lr}
	return tSVF_tickHP(&FXhighpass[v][string], sample);
    7fa2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fa6:	4803      	ldr	r0, [pc, #12]	; (7fb4 <FXhighpassTick+0x14>)
    7fa8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7fac:	f001 fd40 	bl	9a30 <__tSVF_tickHP_veneer>
}
    7fb0:	bd08      	pop	{r3, pc}
    7fb2:	bf00      	nop
    7fb4:	2001cfc4 	.word	0x2001cfc4
    7fb8:	f3af 8000 	nop.w
    7fbc:	f3af 8000 	nop.w

00007fc0 <FXbandpassTick>:

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
    7fc0:	b508      	push	{r3, lr}
	return tSVF_tickBP(&FXbandpass[v][string], sample);
    7fc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fc6:	4803      	ldr	r0, [pc, #12]	; (7fd4 <FXbandpassTick+0x14>)
    7fc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7fcc:	f001 fd48 	bl	9a60 <__tSVF_tickBP_veneer>
}
    7fd0:	bd08      	pop	{r3, pc}
    7fd2:	bf00      	nop
    7fd4:	2001cf84 	.word	0x2001cf84
    7fd8:	f3af 8000 	nop.w
    7fdc:	f3af 8000 	nop.w

00007fe0 <FXdiodeLowpassTick>:

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
    7fe0:	b508      	push	{r3, lr}
	return tDiodeFilter_tickEfficient(&FXdiodeFilters[v][string], sample);
    7fe2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fe6:	4803      	ldr	r0, [pc, #12]	; (7ff4 <FXdiodeLowpassTick+0x14>)
    7fe8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7fec:	f001 faa4 	bl	9538 <__tDiodeFilter_tickEfficient_veneer>
}
    7ff0:	bd08      	pop	{r3, pc}
    7ff2:	bf00      	nop
    7ff4:	2001cfa4 	.word	0x2001cfa4
    7ff8:	f3af 8000 	nop.w
    7ffc:	f3af 8000 	nop.w

00008000 <FXVZpeakTick>:

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
    8000:	b508      	push	{r3, lr}
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    8002:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8006:	4803      	ldr	r0, [pc, #12]	; (8014 <FXVZpeakTick+0x14>)
    8008:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    800c:	f001 fbec 	bl	97e8 <__tVZFilterBell_tick_veneer>
}
    8010:	bd08      	pop	{r3, pc}
    8012:	bf00      	nop
    8014:	2001cf64 	.word	0x2001cf64
    8018:	f3af 8000 	nop.w
    801c:	f3af 8000 	nop.w

00008020 <FXVZlowshelfTick>:

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
    8020:	b508      	push	{r3, lr}
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    8022:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8026:	4803      	ldr	r0, [pc, #12]	; (8034 <FXVZlowshelfTick+0x14>)
    8028:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    802c:	f001 fb48 	bl	96c0 <__tVZFilterLS_tick_veneer>
}
    8030:	bd08      	pop	{r3, pc}
    8032:	bf00      	nop
    8034:	2001cf44 	.word	0x2001cf44
    8038:	f3af 8000 	nop.w
    803c:	f3af 8000 	nop.w

00008040 <FXVZhighshelfTick>:
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
    8040:	b508      	push	{r3, lr}
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    8042:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8046:	4803      	ldr	r0, [pc, #12]	; (8054 <FXVZhighshelfTick+0x14>)
    8048:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    804c:	f001 fb10 	bl	9670 <__tVZFilterHS_tick_veneer>
}
    8050:	bd08      	pop	{r3, pc}
    8052:	bf00      	nop
    8054:	2001cf24 	.word	0x2001cf24
    8058:	f3af 8000 	nop.w
    805c:	f3af 8000 	nop.w

00008060 <FXVZbandrejectTick>:
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
    8060:	b508      	push	{r3, lr}
	return  tVZFilterBR_tick(&FXVZfilterBR[v][string], sample);
    8062:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8066:	4803      	ldr	r0, [pc, #12]	; (8074 <FXVZbandrejectTick+0x14>)
    8068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    806c:	f001 fc44 	bl	98f8 <__tVZFilterBR_tick_veneer>
}
    8070:	bd08      	pop	{r3, pc}
    8072:	bf00      	nop
    8074:	2001cf04 	.word	0x2001cf04
    8078:	f3af 8000 	nop.w
    807c:	f3af 8000 	nop.w

00008080 <FXLadderLowpassTick>:

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
    8080:	b508      	push	{r3, lr}
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    8082:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8086:	4803      	ldr	r0, [pc, #12]	; (8094 <FXLadderLowpassTick+0x14>)
    8088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    808c:	f001 fd3c 	bl	9b08 <__tLadderFilter_tick_veneer>
}
    8090:	bd08      	pop	{r3, pc}
    8092:	bf00      	nop
    8094:	2001cec4 	.word	0x2001cec4
    8098:	f3af 8000 	nop.w
    809c:	f3af 8000 	nop.w

000080a0 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
    80a0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    80a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80c4 <FXLowpassParam1+0x24>
    80a6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    80aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 80c8 <FXLowpassParam1+0x28>
    80b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    80b6:	4805      	ldr	r0, [pc, #20]	; (80cc <FXLowpassParam1+0x2c>)
    80b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    80bc:	f001 fa84 	bl	95c8 <__tSVF_setFreqFast_veneer>
}
    80c0:	bd08      	pop	{r3, pc}
    80c2:	bf00      	nop
    80c4:	429a0000 	.word	0x429a0000
    80c8:	42280000 	.word	0x42280000
    80cc:	2001cfe4 	.word	0x2001cfe4
    80d0:	f3af 8000 	nop.w
    80d4:	f3af 8000 	nop.w
    80d8:	f3af 8000 	nop.w
    80dc:	f3af 8000 	nop.w

000080e0 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
    80e0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    80e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8104 <FXHighpassParam1+0x24>
    80e6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    80ea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8108 <FXHighpassParam1+0x28>
    80f2:	ee30 0a27 	vadd.f32	s0, s0, s15
    80f6:	4805      	ldr	r0, [pc, #20]	; (810c <FXHighpassParam1+0x2c>)
    80f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    80fc:	f001 fa64 	bl	95c8 <__tSVF_setFreqFast_veneer>
}
    8100:	bd08      	pop	{r3, pc}
    8102:	bf00      	nop
    8104:	429a0000 	.word	0x429a0000
    8108:	42280000 	.word	0x42280000
    810c:	2001cfc4 	.word	0x2001cfc4
    8110:	f3af 8000 	nop.w
    8114:	f3af 8000 	nop.w
    8118:	f3af 8000 	nop.w
    811c:	f3af 8000 	nop.w

00008120 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
    8120:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    8122:	eddf 7a08 	vldr	s15, [pc, #32]	; 8144 <FXBandpassParam1+0x24>
    8126:	ee20 0a27 	vmul.f32	s0, s0, s15
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    812a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    812e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8148 <FXBandpassParam1+0x28>
    8132:	ee30 0a27 	vadd.f32	s0, s0, s15
    8136:	4805      	ldr	r0, [pc, #20]	; (814c <FXBandpassParam1+0x2c>)
    8138:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    813c:	f001 fa44 	bl	95c8 <__tSVF_setFreqFast_veneer>
}
    8140:	bd08      	pop	{r3, pc}
    8142:	bf00      	nop
    8144:	429a0000 	.word	0x429a0000
    8148:	42280000 	.word	0x42280000
    814c:	2001cf84 	.word	0x2001cf84
    8150:	f3af 8000 	nop.w
    8154:	f3af 8000 	nop.w
    8158:	f3af 8000 	nop.w
    815c:	f3af 8000 	nop.w

00008160 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
    8160:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    8162:	eddf 7a08 	vldr	s15, [pc, #32]	; 8184 <FXDiodeParam1+0x24>
    8166:	ee20 0a27 	vmul.f32	s0, s0, s15
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    816a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    816e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8188 <FXDiodeParam1+0x28>
    8172:	ee30 0a27 	vadd.f32	s0, s0, s15
    8176:	4805      	ldr	r0, [pc, #20]	; (818c <FXDiodeParam1+0x2c>)
    8178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    817c:	f001 fcbc 	bl	9af8 <__tDiodeFilter_setFreqFast_veneer>
}
    8180:	bd08      	pop	{r3, pc}
    8182:	bf00      	nop
    8184:	429a0000 	.word	0x429a0000
    8188:	42280000 	.word	0x42280000
    818c:	2001cfa4 	.word	0x2001cfa4
    8190:	f3af 8000 	nop.w
    8194:	f3af 8000 	nop.w
    8198:	f3af 8000 	nop.w
    819c:	f3af 8000 	nop.w

000081a0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
    81a0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    81a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 81c4 <FXPeakParam1+0x24>
    81a6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    81aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    81ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 81c8 <FXPeakParam1+0x28>
    81b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    81b6:	4805      	ldr	r0, [pc, #20]	; (81cc <FXPeakParam1+0x2c>)
    81b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    81bc:	f001 fc28 	bl	9a10 <__tVZFilterBell_setFreq_veneer>
}
    81c0:	bd08      	pop	{r3, pc}
    81c2:	bf00      	nop
    81c4:	429a0000 	.word	0x429a0000
    81c8:	42280000 	.word	0x42280000
    81cc:	2001cf64 	.word	0x2001cf64
    81d0:	f3af 8000 	nop.w
    81d4:	f3af 8000 	nop.w
    81d8:	f3af 8000 	nop.w
    81dc:	f3af 8000 	nop.w

000081e0 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
    81e0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    81e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8204 <FXLowShelfParam1+0x24>
    81e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    81ea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    81ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8208 <FXLowShelfParam1+0x28>
    81f2:	ee30 0a27 	vadd.f32	s0, s0, s15
    81f6:	4805      	ldr	r0, [pc, #20]	; (820c <FXLowShelfParam1+0x2c>)
    81f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    81fc:	f001 fc5c 	bl	9ab8 <__tVZFilterLS_setFreqFast_veneer>
}
    8200:	bd08      	pop	{r3, pc}
    8202:	bf00      	nop
    8204:	429a0000 	.word	0x429a0000
    8208:	42280000 	.word	0x42280000
    820c:	2001cf44 	.word	0x2001cf44
    8210:	f3af 8000 	nop.w
    8214:	f3af 8000 	nop.w
    8218:	f3af 8000 	nop.w
    821c:	f3af 8000 	nop.w

00008220 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
    8220:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    8222:	eddf 7a08 	vldr	s15, [pc, #32]	; 8244 <FXHighShelfParam1+0x24>
    8226:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    822a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    822e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8248 <FXHighShelfParam1+0x28>
    8232:	ee30 0a27 	vadd.f32	s0, s0, s15
    8236:	4805      	ldr	r0, [pc, #20]	; (824c <FXHighShelfParam1+0x2c>)
    8238:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    823c:	f001 fb3c 	bl	98b8 <__tVZFilterHS_setFreqFast_veneer>
}
    8240:	bd08      	pop	{r3, pc}
    8242:	bf00      	nop
    8244:	429a0000 	.word	0x429a0000
    8248:	42280000 	.word	0x42280000
    824c:	2001cf24 	.word	0x2001cf24
    8250:	f3af 8000 	nop.w
    8254:	f3af 8000 	nop.w
    8258:	f3af 8000 	nop.w
    825c:	f3af 8000 	nop.w

00008260 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
    8260:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    8262:	eddf 7a08 	vldr	s15, [pc, #32]	; 8284 <FXNotchParam1+0x24>
    8266:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBR_setFreqFast(&FXVZfilterBR[v][string], value);
    826a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    826e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8288 <FXNotchParam1+0x28>
    8272:	ee30 0a27 	vadd.f32	s0, s0, s15
    8276:	4805      	ldr	r0, [pc, #20]	; (828c <FXNotchParam1+0x2c>)
    8278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    827c:	f001 fa2c 	bl	96d8 <__tVZFilterBR_setFreqFast_veneer>
}
    8280:	bd08      	pop	{r3, pc}
    8282:	bf00      	nop
    8284:	429a0000 	.word	0x429a0000
    8288:	42280000 	.word	0x42280000
    828c:	2001cf04 	.word	0x2001cf04
    8290:	f3af 8000 	nop.w
    8294:	f3af 8000 	nop.w
    8298:	f3af 8000 	nop.w
    829c:	f3af 8000 	nop.w

000082a0 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
    82a0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    82a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 82c4 <FXLadderParam1+0x24>
    82a6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    82aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    82ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 82c8 <FXLadderParam1+0x28>
    82b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    82b6:	4805      	ldr	r0, [pc, #20]	; (82cc <FXLadderParam1+0x2c>)
    82b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    82bc:	f001 fa34 	bl	9728 <__tLadderFilter_setFreqFast_veneer>
}
    82c0:	bd08      	pop	{r3, pc}
    82c2:	bf00      	nop
    82c4:	429a0000 	.word	0x429a0000
    82c8:	42280000 	.word	0x42280000
    82cc:	2001cec4 	.word	0x2001cec4
    82d0:	f3af 8000 	nop.w
    82d4:	f3af 8000 	nop.w
    82d8:	f3af 8000 	nop.w
    82dc:	f3af 8000 	nop.w

000082e0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
    82e0:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    82e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    82e6:	4c08      	ldr	r4, [pc, #32]	; (8308 <FXPeakParam2+0x28>)
    82e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    82ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 830c <FXPeakParam2+0x2c>
    82f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    82f4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    82f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    82fc:	f001 fbb4 	bl	9a68 <__dbToATableLookup_veneer>
    8300:	4620      	mov	r0, r4
    8302:	f001 fad1 	bl	98a8 <__tVZFilterBell_setGain_veneer>
}
    8306:	bd10      	pop	{r4, pc}
    8308:	2001cf64 	.word	0x2001cf64
    830c:	42480000 	.word	0x42480000
    8310:	f3af 8000 	nop.w
    8314:	f3af 8000 	nop.w
    8318:	f3af 8000 	nop.w
    831c:	f3af 8000 	nop.w

00008320 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
    8320:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8322:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8326:	4c08      	ldr	r4, [pc, #32]	; (8348 <FXLowShelfParam2+0x28>)
    8328:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    832c:	eddf 7a07 	vldr	s15, [pc, #28]	; 834c <FXLowShelfParam2+0x2c>
    8330:	ee20 0a27 	vmul.f32	s0, s0, s15
    8334:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    8338:	ee30 0a67 	vsub.f32	s0, s0, s15
    833c:	f001 fb94 	bl	9a68 <__dbToATableLookup_veneer>
    8340:	4620      	mov	r0, r4
    8342:	f001 f9c5 	bl	96d0 <__tVZFilterLS_setGain_veneer>
}
    8346:	bd10      	pop	{r4, pc}
    8348:	2001cf44 	.word	0x2001cf44
    834c:	42480000 	.word	0x42480000
    8350:	f3af 8000 	nop.w
    8354:	f3af 8000 	nop.w
    8358:	f3af 8000 	nop.w
    835c:	f3af 8000 	nop.w

00008360 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
    8360:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8362:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8366:	4c08      	ldr	r4, [pc, #32]	; (8388 <FXHighShelfParam2+0x28>)
    8368:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    836c:	eddf 7a07 	vldr	s15, [pc, #28]	; 838c <FXHighShelfParam2+0x2c>
    8370:	ee20 0a27 	vmul.f32	s0, s0, s15
    8374:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    8378:	ee30 0a67 	vsub.f32	s0, s0, s15
    837c:	f001 fb74 	bl	9a68 <__dbToATableLookup_veneer>
    8380:	4620      	mov	r0, r4
    8382:	f001 f985 	bl	9690 <__tVZFilterHS_setGain_veneer>
}
    8386:	bd10      	pop	{r4, pc}
    8388:	2001cf24 	.word	0x2001cf24
    838c:	42480000 	.word	0x42480000
    8390:	f3af 8000 	nop.w
    8394:	f3af 8000 	nop.w
    8398:	f3af 8000 	nop.w
    839c:	f3af 8000 	nop.w

000083a0 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
    83a0:	b510      	push	{r4, lr}
	tVZFilterBR_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    83a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    83a6:	4c08      	ldr	r4, [pc, #32]	; (83c8 <FXNotchParam2+0x28>)
    83a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    83ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 83cc <FXNotchParam2+0x2c>
    83b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    83b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    83b8:	ee30 0a67 	vsub.f32	s0, s0, s15
    83bc:	f001 fb54 	bl	9a68 <__dbToATableLookup_veneer>
    83c0:	4620      	mov	r0, r4
    83c2:	f001 fb59 	bl	9a78 <__tVZFilterBR_setGain_veneer>

}
    83c6:	bd10      	pop	{r4, pc}
    83c8:	2001cf04 	.word	0x2001cf04
    83cc:	42480000 	.word	0x42480000
    83d0:	f3af 8000 	nop.w
    83d4:	f3af 8000 	nop.w
    83d8:	f3af 8000 	nop.w
    83dc:	f3af 8000 	nop.w

000083e0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
    83e0:	b510      	push	{r4, lr}
	tSVF_setQ(&FXlowpass[v][string], scaleFilterResonance(value));
    83e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    83e6:	4c04      	ldr	r4, [pc, #16]	; (83f8 <FXLowpassParam3+0x18>)
    83e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    83ec:	f7f9 f988 	bl	1700 <scaleFilterResonance>
    83f0:	4620      	mov	r0, r4
    83f2:	f001 f9ed 	bl	97d0 <__tSVF_setQ_veneer>
}
    83f6:	bd10      	pop	{r4, pc}
    83f8:	2001cfe4 	.word	0x2001cfe4
    83fc:	f3af 8000 	nop.w

00008400 <FXHighpassParam3>:

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    8400:	b510      	push	{r4, lr}
    tSVF_setQ(&FXhighpass[v][string], scaleFilterResonance(value));
    8402:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8406:	4c04      	ldr	r4, [pc, #16]	; (8418 <FXHighpassParam3+0x18>)
    8408:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    840c:	f7f9 f978 	bl	1700 <scaleFilterResonance>
    8410:	4620      	mov	r0, r4
    8412:	f001 f9dd 	bl	97d0 <__tSVF_setQ_veneer>
}
    8416:	bd10      	pop	{r4, pc}
    8418:	2001cfc4 	.word	0x2001cfc4
    841c:	f3af 8000 	nop.w

00008420 <FXBandpassParam3>:

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    8420:	b510      	push	{r4, lr}
    tSVF_setQ(&FXbandpass[v][string], scaleFilterResonance(value));
    8422:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8426:	4c04      	ldr	r4, [pc, #16]	; (8438 <FXBandpassParam3+0x18>)
    8428:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    842c:	f7f9 f968 	bl	1700 <scaleFilterResonance>
    8430:	4620      	mov	r0, r4
    8432:	f001 f9cd 	bl	97d0 <__tSVF_setQ_veneer>
}
    8436:	bd10      	pop	{r4, pc}
    8438:	2001cf84 	.word	0x2001cf84
    843c:	f3af 8000 	nop.w

00008440 <FXDiodeParam3>:

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
    8440:	b510      	push	{r4, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], scaleFilterResonance(value));
    8442:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8446:	4c04      	ldr	r4, [pc, #16]	; (8458 <FXDiodeParam3+0x18>)
    8448:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    844c:	f7f9 f958 	bl	1700 <scaleFilterResonance>
    8450:	4620      	mov	r0, r4
    8452:	f001 f9a5 	bl	97a0 <__tDiodeFilter_setQ_veneer>
}
    8456:	bd10      	pop	{r4, pc}
    8458:	2001cfa4 	.word	0x2001cfa4
    845c:	f3af 8000 	nop.w

00008460 <FXPeakParam3>:


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
    8460:	b510      	push	{r4, lr}
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], scaleFilterResonance(value));
    8462:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8466:	4c04      	ldr	r4, [pc, #16]	; (8478 <FXPeakParam3+0x18>)
    8468:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    846c:	f7f9 f948 	bl	1700 <scaleFilterResonance>
    8470:	4620      	mov	r0, r4
    8472:	f001 f8e9 	bl	9648 <__tVZFilterBell_setBandwidth_veneer>
}
    8476:	bd10      	pop	{r4, pc}
    8478:	2001cf64 	.word	0x2001cf64
    847c:	f3af 8000 	nop.w

00008480 <FXLowShelfParam3>:


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
    8480:	b510      	push	{r4, lr}
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], scaleFilterResonance(value));
    8482:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8486:	4c04      	ldr	r4, [pc, #16]	; (8498 <FXLowShelfParam3+0x18>)
    8488:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    848c:	f7f9 f938 	bl	1700 <scaleFilterResonance>
    8490:	4620      	mov	r0, r4
    8492:	f001 fa1d 	bl	98d0 <__tVZFilterLS_setResonance_veneer>
}
    8496:	bd10      	pop	{r4, pc}
    8498:	2001cf44 	.word	0x2001cf44
    849c:	f3af 8000 	nop.w

000084a0 <FXHighShelfParam3>:


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
    84a0:	b510      	push	{r4, lr}
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], scaleFilterResonance(value));
    84a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    84a6:	4c04      	ldr	r4, [pc, #16]	; (84b8 <FXHighShelfParam3+0x18>)
    84a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    84ac:	f7f9 f928 	bl	1700 <scaleFilterResonance>
    84b0:	4620      	mov	r0, r4
    84b2:	f001 f9e9 	bl	9888 <__tVZFilterHS_setResonance_veneer>
}
    84b6:	bd10      	pop	{r4, pc}
    84b8:	2001cf24 	.word	0x2001cf24
    84bc:	f3af 8000 	nop.w

000084c0 <FXNotchParam3>:


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
    84c0:	b510      	push	{r4, lr}
	tVZFilterBR_setResonance(&FXVZfilterBR[v][string], scaleFilterResonance(value));
    84c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    84c6:	4c04      	ldr	r4, [pc, #16]	; (84d8 <FXNotchParam3+0x18>)
    84c8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    84cc:	f7f9 f918 	bl	1700 <scaleFilterResonance>
    84d0:	4620      	mov	r0, r4
    84d2:	f001 fa3d 	bl	9950 <__tVZFilterBR_setResonance_veneer>
}
    84d6:	bd10      	pop	{r4, pc}
    84d8:	2001cf04 	.word	0x2001cf04
    84dc:	f3af 8000 	nop.w

000084e0 <FXLadderParam3>:


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
    84e0:	b510      	push	{r4, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], scaleFilterResonance(value));
    84e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    84e6:	4c04      	ldr	r4, [pc, #16]	; (84f8 <FXLadderParam3+0x18>)
    84e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    84ec:	f7f9 f908 	bl	1700 <scaleFilterResonance>
    84f0:	4620      	mov	r0, r4
    84f2:	f001 f875 	bl	95e0 <__tLadderFilter_setQ_veneer>
}
    84f6:	bd10      	pop	{r4, pc}
    84f8:	2001cec4 	.word	0x2001cec4
    84fc:	f3af 8000 	nop.w

00008500 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    8500:	b508      	push	{r3, lr}
	//tTiltFilter_setTilt(&noiseTilt[string], dbToATableLookup(((value * 30.0f) - 15.0f)));
	tTiltFilter_setTilt(&noiseTilt[string], value*10.0f - 5.0f);
    8502:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    8506:	ee20 0a27 	vmul.f32	s0, s0, s15
    850a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    850e:	ee30 0a67 	vsub.f32	s0, s0, s15
    8512:	4803      	ldr	r0, [pc, #12]	; (8520 <noiseSetTilt+0x20>)
    8514:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8518:	f001 f9e2 	bl	98e0 <__tTiltFilter_setTilt_veneer>
}
    851c:	bd08      	pop	{r3, pc}
    851e:	bf00      	nop
    8520:	2001d4c4 	.word	0x2001d4c4
    8524:	f3af 8000 	nop.w
    8528:	f3af 8000 	nop.w
    852c:	f3af 8000 	nop.w
    8530:	f3af 8000 	nop.w
    8534:	f3af 8000 	nop.w
    8538:	f3af 8000 	nop.w
    853c:	f3af 8000 	nop.w

00008540 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
    8540:	b510      	push	{r4, lr}
    8542:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8544:	eddf 7a07 	vldr	s15, [pc, #28]	; 8564 <noiseSetGain+0x24>
    8548:	ee20 0a27 	vmul.f32	s0, s0, s15
    854c:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    8550:	ee30 0a67 	vsub.f32	s0, s0, s15
    8554:	f001 fa88 	bl	9a68 <__dbToATableLookup_veneer>
    8558:	4803      	ldr	r0, [pc, #12]	; (8568 <noiseSetGain+0x28>)
    855a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    855e:	f001 f9a3 	bl	98a8 <__tVZFilterBell_setGain_veneer>
}
    8562:	bd10      	pop	{r4, pc}
    8564:	42080000 	.word	0x42080000
    8568:	2001d4a8 	.word	0x2001d4a8
    856c:	f3af 8000 	nop.w
    8570:	f3af 8000 	nop.w
    8574:	f3af 8000 	nop.w
    8578:	f3af 8000 	nop.w
    857c:	f3af 8000 	nop.w

00008580 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
    8580:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    8582:	eddf 7a17 	vldr	s15, [pc, #92]	; 85e0 <noiseSetFreq+0x60>
    8586:	ee20 0a27 	vmul.f32	s0, s0, s15
    858a:	eddf 7a16 	vldr	s15, [pc, #88]	; 85e4 <noiseSetFreq+0x64>
    858e:	ee30 0a27 	vadd.f32	s0, s0, s15
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

inline Lfloat faster_mtof(Lfloat f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
    8592:	eddf 7a15 	vldr	s15, [pc, #84]	; 85e8 <noiseSetFreq+0x68>
    8596:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
    859a:	eddf 7a14 	vldr	s15, [pc, #80]	; 85ec <noiseSetFreq+0x6c>
    859e:	ee20 0a27 	vmul.f32	s0, s0, s15
    85a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    85a6:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
    85aa:	ee20 0a00 	vmul.f32	s0, s0, s0
    85ae:	ee20 0a00 	vmul.f32	s0, s0, s0
    85b2:	ee20 0a00 	vmul.f32	s0, s0, s0
    85b6:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
    85ba:	ee20 0a00 	vmul.f32	s0, s0, s0
    85be:	ee20 0a00 	vmul.f32	s0, s0, s0
    85c2:	ee20 0a00 	vmul.f32	s0, s0, s0
    85c6:	ee20 0a00 	vmul.f32	s0, s0, s0
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    85ca:	eddf 7a09 	vldr	s15, [pc, #36]	; 85f0 <noiseSetFreq+0x70>
    85ce:	ee20 0a27 	vmul.f32	s0, s0, s15
    85d2:	4808      	ldr	r0, [pc, #32]	; (85f4 <noiseSetFreq+0x74>)
    85d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    85d8:	f001 fa1a 	bl	9a10 <__tVZFilterBell_setFreq_veneer>
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    85dc:	bd08      	pop	{r3, pc}
    85de:	bf00      	nop
    85e0:	429a0000 	.word	0x429a0000
    85e4:	42280000 	.word	0x42280000
    85e8:	3d6c9820 	.word	0x3d6c9820
    85ec:	3b800000 	.word	0x3b800000
    85f0:	4102d013 	.word	0x4102d013
    85f4:	2001d4a8 	.word	0x2001d4a8
    85f8:	f3af 8000 	nop.w
    85fc:	f3af 8000 	nop.w

00008600 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    8600:	b538      	push	{r3, r4, r5, lr}
    8602:	ed2d 8b04 	vpush	{d8-d9}
    8606:	4604      	mov	r4, r0
	float enabled = params[Noise].realVal[string];
    8608:	4b34      	ldr	r3, [pc, #208]	; (86dc <noise_tick+0xdc>)
    860a:	f100 0280 	add.w	r2, r0, #128	; 0x80
    860e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8612:	edd2 8a00 	vldr	s17, [r2]
	float amp = params[NoiseAmp].realVal[string];
    8616:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    861a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    861e:	ed92 8a00 	vldr	s16, [r2]
	float filterSend = params[NoiseFilterSend].realVal[string];
    8622:	f100 02a3 	add.w	r2, r0, #163	; 0xa3
    8626:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    862a:	ed93 9a00 	vldr	s18, [r3]
	amp = amp < 0.f ? 0.f : amp;
    862e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    8632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8636:	d44e      	bmi.n	86d6 <noise_tick+0xd6>
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    8638:	4b29      	ldr	r3, [pc, #164]	; (86e0 <noise_tick+0xe0>)
    863a:	781a      	ldrb	r2, [r3, #0]
    863c:	1c51      	adds	r1, r2, #1
    863e:	7019      	strb	r1, [r3, #0]
    8640:	4b28      	ldr	r3, [pc, #160]	; (86e4 <noise_tick+0xe4>)
    8642:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8646:	ed93 0a00 	vldr	s0, [r3]
    864a:	ee30 0a00 	vadd.f32	s0, s0, s0
	sample = tTiltFilter_tick(&noiseTilt[string], sample);
    864e:	00a5      	lsls	r5, r4, #2
    8650:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8654:	ee30 0a67 	vsub.f32	s0, s0, s15
    8658:	4823      	ldr	r0, [pc, #140]	; (86e8 <noise_tick+0xe8>)
    865a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    865e:	f001 f833 	bl	96c8 <__tTiltFilter_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    8662:	4822      	ldr	r0, [pc, #136]	; (86ec <noise_tick+0xec>)
    8664:	4428      	add	r0, r5
    8666:	f001 f8bf 	bl	97e8 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
    866a:	ee28 0a00 	vmul.f32	s0, s16, s0
	if (!isfinite(sample))
    866e:	eeb0 7ac0 	vabs.f32	s14, s0
    8672:	eddf 7a1f 	vldr	s15, [pc, #124]	; 86f0 <noise_tick+0xf0>
    8676:	eeb4 7a67 	vcmp.f32	s14, s15
    867a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    867e:	d905      	bls.n	868c <noise_tick+0x8c>
	{
		nanChuckTest++;
    8680:	4a1c      	ldr	r2, [pc, #112]	; (86f4 <noise_tick+0xf4>)
    8682:	6813      	ldr	r3, [r2, #0]
    8684:	3301      	adds	r3, #1
    8686:	6013      	str	r3, [r2, #0]
		sample = 0.0f;
    8688:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 86f8 <noise_tick+0xf8>
	}
	float normSample = (sample + 1.f) * 0.5f;
    868c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8690:	ee30 7a27 	vadd.f32	s14, s0, s15
    8694:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    8698:	ee27 7a26 	vmul.f32	s14, s14, s13
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    869c:	1da2      	adds	r2, r4, #6
    869e:	4b17      	ldr	r3, [pc, #92]	; (86fc <noise_tick+0xfc>)
    86a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    86a4:	ed83 7a00 	vstr	s14, [r3]
	noiseOuts[0][string] = sample * filterSend *  enabled;
    86a8:	ee20 7a09 	vmul.f32	s14, s0, s18
    86ac:	ee27 7a28 	vmul.f32	s14, s14, s17
    86b0:	4b13      	ldr	r3, [pc, #76]	; (8700 <noise_tick+0x100>)
    86b2:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    86b6:	ed82 7a00 	vstr	s14, [r2]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    86ba:	ee77 7ac9 	vsub.f32	s15, s15, s18
    86be:	ee67 7a80 	vmul.f32	s15, s15, s0
    86c2:	ee67 7aa8 	vmul.f32	s15, s15, s17
    86c6:	3402      	adds	r4, #2
    86c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    86cc:	edc3 7a00 	vstr	s15, [r3]
}
    86d0:	ecbd 8b04 	vpop	{d8-d9}
    86d4:	bd38      	pop	{r3, r4, r5, pc}
	amp = amp < 0.f ? 0.f : amp;
    86d6:	ed9f 8a08 	vldr	s16, [pc, #32]	; 86f8 <noise_tick+0xf8>
    86da:	e7ad      	b.n	8638 <noise_tick+0x38>
    86dc:	200191e8 	.word	0x200191e8
    86e0:	2001d604 	.word	0x2001d604
    86e4:	2001a398 	.word	0x2001a398
    86e8:	2001d4c4 	.word	0x2001d4c4
    86ec:	2001d4a8 	.word	0x2001d4a8
    86f0:	7f7fffff 	.word	0x7f7fffff
    86f4:	2001d4a4 	.word	0x2001d4a4
    86f8:	00000000 	.word	0x00000000
    86fc:	2001d6b4 	.word	0x2001d6b4
    8700:	2001d4b4 	.word	0x2001d4b4
    8704:	f3af 8000 	nop.w
    8708:	f3af 8000 	nop.w
    870c:	f3af 8000 	nop.w
    8710:	f3af 8000 	nop.w
    8714:	f3af 8000 	nop.w
    8718:	f3af 8000 	nop.w
    871c:	f3af 8000 	nop.w

00008720 <audioTickSynth>:
{
    8720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8724:	ed2d 8b04 	vpush	{d8-d9}
    8728:	b085      	sub	sp, #20
    872a:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    872c:	4c95      	ldr	r4, [pc, #596]	; (8984 <audioTickSynth+0x264>)
    872e:	f8d4 b004 	ldr.w	fp, [r4, #4]
	antiClickFade = 0.001f + 0.999f * antiClickFade;
    8732:	4b95      	ldr	r3, [pc, #596]	; (8988 <audioTickSynth+0x268>)
    8734:	edd3 7a00 	vldr	s15, [r3]
    8738:	ed9f 7a94 	vldr	s14, [pc, #592]	; 898c <audioTickSynth+0x26c>
    873c:	ee67 7a87 	vmul.f32	s15, s15, s14
    8740:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8990 <audioTickSynth+0x270>
    8744:	ee77 7a87 	vadd.f32	s15, s15, s14
    8748:	edc3 7a00 	vstr	s15, [r3]
	uint32_t tempCountMap = DWT->CYCCNT;
    874c:	6865      	ldr	r5, [r4, #4]
	tickMappings();
    874e:	f7fe f927 	bl	69a0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    8752:	6863      	ldr	r3, [r4, #4]
    8754:	1b5b      	subs	r3, r3, r5
    8756:	4a8f      	ldr	r2, [pc, #572]	; (8994 <audioTickSynth+0x274>)
    8758:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    875a:	6865      	ldr	r5, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    875c:	488e      	ldr	r0, [pc, #568]	; (8998 <audioTickSynth+0x278>)
    875e:	f000 ff07 	bl	9570 <__tExpSmooth_tick_veneer>
    8762:	eef0 8a40 	vmov.f32	s17, s0
	for (int i = 0; i < 12; i++)
    8766:	2400      	movs	r4, #0
    8768:	e000      	b.n	876c <audioTickSynth+0x4c>
    876a:	3401      	adds	r4, #1
    876c:	2c0b      	cmp	r4, #11
    876e:	dc1d      	bgt.n	87ac <audioTickSynth+0x8c>
		if (knobTicked[i])
    8770:	4b8a      	ldr	r3, [pc, #552]	; (899c <audioTickSynth+0x27c>)
    8772:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8776:	2b00      	cmp	r3, #0
    8778:	d0f7      	beq.n	876a <audioTickSynth+0x4a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    877a:	00a6      	lsls	r6, r4, #2
    877c:	4888      	ldr	r0, [pc, #544]	; (89a0 <audioTickSynth+0x280>)
    877e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8782:	f000 fef5 	bl	9570 <__tExpSmooth_tick_veneer>
    8786:	4b87      	ldr	r3, [pc, #540]	; (89a4 <audioTickSynth+0x284>)
    8788:	4433      	add	r3, r6
    878a:	ed83 0a00 	vstr	s0, [r3]
			for (int v = 0; v < numStringsThisBoard; v++)
    878e:	2300      	movs	r3, #0
    8790:	4a85      	ldr	r2, [pc, #532]	; (89a8 <audioTickSynth+0x288>)
    8792:	7812      	ldrb	r2, [r2, #0]
    8794:	429a      	cmp	r2, r3
    8796:	dde8      	ble.n	876a <audioTickSynth+0x4a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    8798:	1d21      	adds	r1, r4, #4
    879a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    879e:	4a83      	ldr	r2, [pc, #524]	; (89ac <audioTickSynth+0x28c>)
    87a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    87a4:	ed82 0a00 	vstr	s0, [r2]
			for (int v = 0; v < numStringsThisBoard; v++)
    87a8:	3301      	adds	r3, #1
    87aa:	e7f1      	b.n	8790 <audioTickSynth+0x70>
	for (int i = 0; i < 10; i++)
    87ac:	2400      	movs	r4, #0
    87ae:	e00e      	b.n	87ce <audioTickSynth+0xae>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    87b0:	f104 011c 	add.w	r1, r4, #28
    87b4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    87b8:	4a7c      	ldr	r2, [pc, #496]	; (89ac <audioTickSynth+0x28c>)
    87ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    87be:	ed82 0a00 	vstr	s0, [r2]
			for (int v = 0; v < numStringsThisBoard; v++)
    87c2:	3301      	adds	r3, #1
    87c4:	4a78      	ldr	r2, [pc, #480]	; (89a8 <audioTickSynth+0x288>)
    87c6:	7812      	ldrb	r2, [r2, #0]
    87c8:	429a      	cmp	r2, r3
    87ca:	dcf1      	bgt.n	87b0 <audioTickSynth+0x90>
	for (int i = 0; i < 10; i++)
    87cc:	3401      	adds	r4, #1
    87ce:	2c09      	cmp	r4, #9
    87d0:	dc10      	bgt.n	87f4 <audioTickSynth+0xd4>
		if (pedalTicked[i])
    87d2:	4b77      	ldr	r3, [pc, #476]	; (89b0 <audioTickSynth+0x290>)
    87d4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    87d8:	2b00      	cmp	r3, #0
    87da:	d0f7      	beq.n	87cc <audioTickSynth+0xac>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    87dc:	00a6      	lsls	r6, r4, #2
    87de:	4875      	ldr	r0, [pc, #468]	; (89b4 <audioTickSynth+0x294>)
    87e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    87e4:	f000 fec4 	bl	9570 <__tExpSmooth_tick_veneer>
    87e8:	4b73      	ldr	r3, [pc, #460]	; (89b8 <audioTickSynth+0x298>)
    87ea:	4433      	add	r3, r6
    87ec:	ed83 0a00 	vstr	s0, [r3]
			for (int v = 0; v < numStringsThisBoard; v++)
    87f0:	2300      	movs	r3, #0
    87f2:	e7e7      	b.n	87c4 <audioTickSynth+0xa4>
	for (int v = 0; v < numStringsThisBoard; v++)
    87f4:	2200      	movs	r2, #0
    87f6:	e008      	b.n	880a <audioTickSynth+0xea>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    87f8:	f102 0120 	add.w	r1, r2, #32
    87fc:	4b6b      	ldr	r3, [pc, #428]	; (89ac <audioTickSynth+0x28c>)
    87fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8802:	496e      	ldr	r1, [pc, #440]	; (89bc <audioTickSynth+0x29c>)
    8804:	6809      	ldr	r1, [r1, #0]
    8806:	6019      	str	r1, [r3, #0]
	for (int v = 0; v < numStringsThisBoard; v++)
    8808:	3201      	adds	r2, #1
    880a:	4b67      	ldr	r3, [pc, #412]	; (89a8 <audioTickSynth+0x288>)
    880c:	781b      	ldrb	r3, [r3, #0]
    880e:	4293      	cmp	r3, r2
    8810:	dcf2      	bgt.n	87f8 <audioTickSynth+0xd8>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8812:	495c      	ldr	r1, [pc, #368]	; (8984 <audioTickSynth+0x264>)
    8814:	684a      	ldr	r2, [r1, #4]
    8816:	1b52      	subs	r2, r2, r5
    8818:	4869      	ldr	r0, [pc, #420]	; (89c0 <audioTickSynth+0x2a0>)
    881a:	6002      	str	r2, [r0, #0]
	float note[numStringsThisBoard];
    881c:	009b      	lsls	r3, r3, #2
    881e:	3307      	adds	r3, #7
    8820:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    8824:	ebad 0d03 	sub.w	sp, sp, r3
    8828:	466e      	mov	r6, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    882a:	684b      	ldr	r3, [r1, #4]
    882c:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    882e:	2400      	movs	r4, #0
	float masterSample = 0.0f;
    8830:	ed9f 9a64 	vldr	s18, [pc, #400]	; 89c4 <audioTickSynth+0x2a4>
	for (int v = 0; v < numStringsThisBoard; v++)
    8834:	e10e      	b.n	8a54 <audioTickSynth+0x334>
			note[v] = 0.0f;
    8836:	2200      	movs	r2, #0
    8838:	601a      	str	r2, [r3, #0]
    883a:	e12d      	b.n	8a98 <audioTickSynth+0x378>
			noise_tick(v);
    883c:	4620      	mov	r0, r4
    883e:	f7ff fedf 	bl	8600 <noise_tick>
    8842:	e176      	b.n	8b32 <audioTickSynth+0x412>
			filterSamps[0] += oscOuts[0][i][v];
    8844:	4b60      	ldr	r3, [pc, #384]	; (89c8 <audioTickSynth+0x2a8>)
    8846:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    884a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    884e:	ed90 7a00 	vldr	s14, [r0]
    8852:	edd7 7a02 	vldr	s15, [r7, #8]
    8856:	ee77 7a87 	vadd.f32	s15, s15, s14
    885a:	edc7 7a02 	vstr	s15, [r7, #8]
			filterSamps[1] += oscOuts[1][i][v];
    885e:	3206      	adds	r2, #6
    8860:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8864:	ed93 7a00 	vldr	s14, [r3]
    8868:	edd7 7a03 	vldr	s15, [r7, #12]
    886c:	ee77 7a87 	vadd.f32	s15, s15, s14
    8870:	edc7 7a03 	vstr	s15, [r7, #12]
		for (int i = 0; i < oscToTick; i++)
    8874:	3101      	adds	r1, #1
    8876:	4b55      	ldr	r3, [pc, #340]	; (89cc <audioTickSynth+0x2ac>)
    8878:	781b      	ldrb	r3, [r3, #0]
    887a:	428b      	cmp	r3, r1
    887c:	dce2      	bgt.n	8844 <audioTickSynth+0x124>
		filterSamps[0] += noiseOuts[0][v];
    887e:	4b54      	ldr	r3, [pc, #336]	; (89d0 <audioTickSynth+0x2b0>)
    8880:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    8884:	ed92 7a00 	vldr	s14, [r2]
    8888:	edd7 7a02 	vldr	s15, [r7, #8]
    888c:	ee77 7a87 	vadd.f32	s15, s15, s14
    8890:	edc7 7a02 	vstr	s15, [r7, #8]
		filterSamps[1] += noiseOuts[1][v];
    8894:	1ca2      	adds	r2, r4, #2
    8896:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    889a:	ed93 7a00 	vldr	s14, [r3]
    889e:	edd7 7a03 	vldr	s15, [r7, #12]
    88a2:	ee77 7a87 	vadd.f32	s15, s15, s14
    88a6:	edc7 7a03 	vstr	s15, [r7, #12]
		uint32_t tempCountFilt = DWT->CYCCNT;
    88aa:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8984 <audioTickSynth+0x264>
    88ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    88b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    88b6:	4621      	mov	r1, r4
    88b8:	ed93 0a00 	vldr	s0, [r3]
    88bc:	f107 0008 	add.w	r0, r7, #8
    88c0:	f7fd fb5e 	bl	5f80 <filter_tick>
    88c4:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    88c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    88cc:	1b5b      	subs	r3, r3, r5
    88ce:	4a41      	ldr	r2, [pc, #260]	; (89d4 <audioTickSynth+0x2b4>)
    88d0:	6013      	str	r3, [r2, #0]
		if (fxPre)
    88d2:	4b41      	ldr	r3, [pc, #260]	; (89d8 <audioTickSynth+0x2b8>)
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	b133      	cbz	r3, 88e6 <audioTickSynth+0x1c6>
			sample *= amplitude[v];
    88d8:	4b40      	ldr	r3, [pc, #256]	; (89dc <audioTickSynth+0x2bc>)
    88da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    88de:	edd3 7a00 	vldr	s15, [r3]
    88e2:	ee20 8a27 	vmul.f32	s16, s0, s15
		uint32_t tempCountOS = DWT->CYCCNT;
    88e6:	4b27      	ldr	r3, [pc, #156]	; (8984 <audioTickSynth+0x264>)
    88e8:	f8d3 a004 	ldr.w	sl, [r3, #4]
		if (overSampled)
    88ec:	4b3c      	ldr	r3, [pc, #240]	; (89e0 <audioTickSynth+0x2c0>)
    88ee:	681b      	ldr	r3, [r3, #0]
    88f0:	b90b      	cbnz	r3, 88f6 <audioTickSynth+0x1d6>
			for (int i = 0; i < NUM_EFFECT; i++)
    88f2:	2500      	movs	r5, #0
    88f4:	e128      	b.n	8b48 <audioTickSynth+0x428>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    88f6:	4b3b      	ldr	r3, [pc, #236]	; (89e4 <audioTickSynth+0x2c4>)
    88f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    88fc:	603b      	str	r3, [r7, #0]
    88fe:	493a      	ldr	r1, [pc, #232]	; (89e8 <audioTickSynth+0x2c8>)
    8900:	eeb0 0a48 	vmov.f32	s0, s16
    8904:	4618      	mov	r0, r3
    8906:	f000 fe5b 	bl	95c0 <__tOversampler_upsample_veneer>
			for (int i = 0; i < 4; i++)
    890a:	2500      	movs	r5, #0
    890c:	e030      	b.n	8970 <audioTickSynth+0x250>
						float dry = oversamplerArray[j]; //store the dry value to mix later
    890e:	4b36      	ldr	r3, [pc, #216]	; (89e8 <audioTickSynth+0x2c8>)
    8910:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    8914:	ed98 8a00 	vldr	s16, [r8]
						oversamplerArray[j] = effectTick[i](dry, i, v); //run the effect
    8918:	4b34      	ldr	r3, [pc, #208]	; (89ec <audioTickSynth+0x2cc>)
    891a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    891e:	4621      	mov	r1, r4
    8920:	4628      	mov	r0, r5
    8922:	eeb0 0a48 	vmov.f32	s0, s16
    8926:	4798      	blx	r3
    8928:	ed88 0a00 	vstr	s0, [r8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    892c:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    8930:	4a2f      	ldr	r2, [pc, #188]	; (89f0 <audioTickSynth+0x2d0>)
    8932:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8936:	ed92 7a00 	vldr	s14, [r2]
    893a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    893e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8942:	ee67 7a88 	vmul.f32	s15, s15, s16
    8946:	ee20 0a07 	vmul.f32	s0, s0, s14
    894a:	ee77 7a80 	vadd.f32	s15, s15, s0
    894e:	edc8 7a00 	vstr	s15, [r8]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8952:	4a28      	ldr	r2, [pc, #160]	; (89f4 <audioTickSynth+0x2d4>)
    8954:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8958:	ed93 7a00 	vldr	s14, [r3]
    895c:	ee67 7a87 	vmul.f32	s15, s15, s14
    8960:	edc8 7a00 	vstr	s15, [r8]
					for (int j = 0; j < OVERSAMPLE; j++)
    8964:	f109 0901 	add.w	r9, r9, #1
    8968:	f1b9 0f01 	cmp.w	r9, #1
    896c:	ddcf      	ble.n	890e <audioTickSynth+0x1ee>
			for (int i = 0; i < 4; i++)
    896e:	3501      	adds	r5, #1
    8970:	2d03      	cmp	r5, #3
    8972:	dc43      	bgt.n	89fc <audioTickSynth+0x2dc>
				if (effectsActive[i])
    8974:	4b20      	ldr	r3, [pc, #128]	; (89f8 <audioTickSynth+0x2d8>)
    8976:	5d5b      	ldrb	r3, [r3, r5]
    8978:	2b00      	cmp	r3, #0
    897a:	d0f8      	beq.n	896e <audioTickSynth+0x24e>
					for (int j = 0; j < OVERSAMPLE; j++)
    897c:	f04f 0900 	mov.w	r9, #0
    8980:	e7f2      	b.n	8968 <audioTickSynth+0x248>
    8982:	bf00      	nop
    8984:	e0001000 	.word	0xe0001000
    8988:	2001d05c 	.word	0x2001d05c
    898c:	3f7fbe77 	.word	0x3f7fbe77
    8990:	3a83126f 	.word	0x3a83126f
    8994:	2001d7fc 	.word	0x2001d7fc
    8998:	20014264 	.word	0x20014264
    899c:	200164dc 	.word	0x200164dc
    89a0:	20005240 	.word	0x20005240
    89a4:	200051f0 	.word	0x200051f0
    89a8:	20000694 	.word	0x20000694
    89ac:	2001d6b4 	.word	0x2001d6b4
    89b0:	2001a2fc 	.word	0x2001a2fc
    89b4:	2000532c 	.word	0x2000532c
    89b8:	20005304 	.word	0x20005304
    89bc:	2001425c 	.word	0x2001425c
    89c0:	2001d810 	.word	0x2001d810
    89c4:	00000000 	.word	0x00000000
    89c8:	2001d4d8 	.word	0x2001d4d8
    89cc:	200008ec 	.word	0x200008ec
    89d0:	2001d4b4 	.word	0x2001d4b4
    89d4:	2001d7f0 	.word	0x2001d7f0
    89d8:	200164d9 	.word	0x200164d9
    89dc:	2001d054 	.word	0x2001d054
    89e0:	200008f0 	.word	0x200008f0
    89e4:	2001d4cc 	.word	0x2001d4cc
    89e8:	2001d508 	.word	0x2001d508
    89ec:	2001d150 	.word	0x2001d150
    89f0:	2001d1f4 	.word	0x2001d1f4
    89f4:	2001d214 	.word	0x2001d214
    89f8:	200143ac 	.word	0x200143ac
			sample = tOversampler_downsample(&os[v], oversamplerArray);
    89fc:	498e      	ldr	r1, [pc, #568]	; (8c38 <audioTickSynth+0x518>)
    89fe:	6838      	ldr	r0, [r7, #0]
    8a00:	f000 ff0e 	bl	9820 <__tOversampler_downsample_veneer>
    8a04:	eeb0 8a40 	vmov.f32	s16, s0
		timeOS = DWT->CYCCNT - tempCountOS;
    8a08:	4b8c      	ldr	r3, [pc, #560]	; (8c3c <audioTickSynth+0x51c>)
    8a0a:	685b      	ldr	r3, [r3, #4]
    8a0c:	eba3 030a 	sub.w	r3, r3, sl
    8a10:	4a8b      	ldr	r2, [pc, #556]	; (8c40 <audioTickSynth+0x520>)
    8a12:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    8a14:	4b8b      	ldr	r3, [pc, #556]	; (8c44 <audioTickSynth+0x524>)
    8a16:	781b      	ldrb	r3, [r3, #0]
    8a18:	b933      	cbnz	r3, 8a28 <audioTickSynth+0x308>
			sample *= amplitude[v];
    8a1a:	4b8b      	ldr	r3, [pc, #556]	; (8c48 <audioTickSynth+0x528>)
    8a1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8a20:	edd3 7a00 	vldr	s15, [r3]
    8a24:	ee28 8a27 	vmul.f32	s16, s16, s15
		sample = tSVF_LP_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    8a28:	00a5      	lsls	r5, r4, #2
    8a2a:	eeb0 0a48 	vmov.f32	s0, s16
    8a2e:	4887      	ldr	r0, [pc, #540]	; (8c4c <audioTickSynth+0x52c>)
    8a30:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8a34:	f000 ff64 	bl	9900 <__tSVF_LP_tick_veneer>
    8a38:	4b85      	ldr	r3, [pc, #532]	; (8c50 <audioTickSynth+0x530>)
    8a3a:	edd3 7a00 	vldr	s15, [r3]
    8a3e:	ee20 0a27 	vmul.f32	s0, s0, s15
		masterSample += sample * finalMaster[v];
    8a42:	4b84      	ldr	r3, [pc, #528]	; (8c54 <audioTickSynth+0x534>)
    8a44:	442b      	add	r3, r5
    8a46:	edd3 7a00 	vldr	s15, [r3]
    8a4a:	ee67 7a80 	vmul.f32	s15, s15, s0
    8a4e:	ee39 9a27 	vadd.f32	s18, s18, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    8a52:	3401      	adds	r4, #1
    8a54:	4b80      	ldr	r3, [pc, #512]	; (8c58 <audioTickSynth+0x538>)
    8a56:	781b      	ldrb	r3, [r3, #0]
    8a58:	42a3      	cmp	r3, r4
    8a5a:	f340 809d 	ble.w	8b98 <audioTickSynth+0x478>
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    8a5e:	4b77      	ldr	r3, [pc, #476]	; (8c3c <audioTickSynth+0x51c>)
    8a60:	6859      	ldr	r1, [r3, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v] + transpose;
    8a62:	4b7e      	ldr	r3, [pc, #504]	; (8c5c <audioTickSynth+0x53c>)
    8a64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8a68:	edd3 7a00 	vldr	s15, [r3]
    8a6c:	4b7c      	ldr	r3, [pc, #496]	; (8c60 <audioTickSynth+0x540>)
    8a6e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8a72:	ed93 7a00 	vldr	s14, [r3]
    8a76:	ee77 7a87 	vadd.f32	s15, s15, s14
    8a7a:	4b7a      	ldr	r3, [pc, #488]	; (8c64 <audioTickSynth+0x544>)
    8a7c:	ed93 7a00 	vldr	s14, [r3]
    8a80:	ee77 7a87 	vadd.f32	s15, s15, s14
    8a84:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    8a88:	edc3 7a00 	vstr	s15, [r3]
		if (note[v] < 0.0f)
    8a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a94:	f53f aecf 	bmi.w	8836 <audioTickSynth+0x116>
		if (note[v] > 127.0f)
    8a98:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    8a9c:	ed93 7a00 	vldr	s14, [r3]
    8aa0:	eddf 7a71 	vldr	s15, [pc, #452]	; 8c68 <audioTickSynth+0x548>
    8aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8aac:	dd01      	ble.n	8ab2 <audioTickSynth+0x392>
			note[v] = 127.0f;
    8aae:	edc3 7a00 	vstr	s15, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8ab2:	eb06 0984 	add.w	r9, r6, r4, lsl #2
    8ab6:	edd9 7a00 	vldr	s15, [r9]
    8aba:	4b6c      	ldr	r3, [pc, #432]	; (8c6c <audioTickSynth+0x54c>)
    8abc:	ed93 7a00 	vldr	s14, [r3]
    8ac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8ac4:	4b6a      	ldr	r3, [pc, #424]	; (8c70 <audioTickSynth+0x550>)
    8ac6:	ed93 7a00 	vldr	s14, [r3]
    8aca:	ee67 7a87 	vmul.f32	s15, s15, s14
    8ace:	f104 0222 	add.w	r2, r4, #34	; 0x22
    8ad2:	4b68      	ldr	r3, [pc, #416]	; (8c74 <audioTickSynth+0x554>)
    8ad4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8ad8:	edc3 7a00 	vstr	s15, [r3]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    8adc:	4d57      	ldr	r5, [pc, #348]	; (8c3c <audioTickSynth+0x51c>)
    8ade:	686b      	ldr	r3, [r5, #4]
    8ae0:	1a5b      	subs	r3, r3, r1
    8ae2:	4a65      	ldr	r2, [pc, #404]	; (8c78 <audioTickSynth+0x558>)
    8ae4:	6013      	str	r3, [r2, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    8ae6:	f8d5 8004 	ldr.w	r8, [r5, #4]
		envelope_tick(v);
    8aea:	4620      	mov	r0, r4
    8aec:	f7fd fe08 	bl	6700 <envelope_tick>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8af0:	686b      	ldr	r3, [r5, #4]
    8af2:	eba3 0308 	sub.w	r3, r3, r8
    8af6:	4a61      	ldr	r2, [pc, #388]	; (8c7c <audioTickSynth+0x55c>)
    8af8:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    8afa:	f8d5 8004 	ldr.w	r8, [r5, #4]
		lfo_tick(v);
    8afe:	4620      	mov	r0, r4
    8b00:	f7fd fe2e 	bl	6760 <lfo_tick>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8b04:	686b      	ldr	r3, [r5, #4]
    8b06:	eba3 0308 	sub.w	r3, r3, r8
    8b0a:	4a5d      	ldr	r2, [pc, #372]	; (8c80 <audioTickSynth+0x560>)
    8b0c:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    8b0e:	f8d5 8004 	ldr.w	r8, [r5, #4]
		oscillator_tick(note[v], v);
    8b12:	4620      	mov	r0, r4
    8b14:	ed99 0a00 	vldr	s0, [r9]
    8b18:	f7fd f862 	bl	5be0 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    8b1c:	686b      	ldr	r3, [r5, #4]
    8b1e:	eba3 0308 	sub.w	r3, r3, r8
    8b22:	4a58      	ldr	r2, [pc, #352]	; (8c84 <audioTickSynth+0x564>)
    8b24:	6013      	str	r3, [r2, #0]
		uint32_t tempCountNoise = DWT->CYCCNT;
    8b26:	686d      	ldr	r5, [r5, #4]
		if (noiseOn)
    8b28:	4b57      	ldr	r3, [pc, #348]	; (8c88 <audioTickSynth+0x568>)
    8b2a:	781b      	ldrb	r3, [r3, #0]
    8b2c:	2b00      	cmp	r3, #0
    8b2e:	f47f ae85 	bne.w	883c <audioTickSynth+0x11c>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    8b32:	4b42      	ldr	r3, [pc, #264]	; (8c3c <audioTickSynth+0x51c>)
    8b34:	685b      	ldr	r3, [r3, #4]
    8b36:	1b5b      	subs	r3, r3, r5
    8b38:	4a54      	ldr	r2, [pc, #336]	; (8c8c <audioTickSynth+0x56c>)
    8b3a:	6013      	str	r3, [r2, #0]
		float filterSamps[2] = {0.0f, 0.0f};
    8b3c:	2300      	movs	r3, #0
    8b3e:	60bb      	str	r3, [r7, #8]
    8b40:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < oscToTick; i++)
    8b42:	2100      	movs	r1, #0
    8b44:	e697      	b.n	8876 <audioTickSynth+0x156>
			for (int i = 0; i < NUM_EFFECT; i++)
    8b46:	3501      	adds	r5, #1
    8b48:	2d03      	cmp	r5, #3
    8b4a:	f73f af5d 	bgt.w	8a08 <audioTickSynth+0x2e8>
				if (effectsActive[i])
    8b4e:	4b50      	ldr	r3, [pc, #320]	; (8c90 <audioTickSynth+0x570>)
    8b50:	5d5b      	ldrb	r3, [r3, r5]
    8b52:	2b00      	cmp	r3, #0
    8b54:	d0f7      	beq.n	8b46 <audioTickSynth+0x426>
					sample = effectTick[i](sample, i, v); //run the effect
    8b56:	4b4f      	ldr	r3, [pc, #316]	; (8c94 <audioTickSynth+0x574>)
    8b58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    8b5c:	4621      	mov	r1, r4
    8b5e:	4628      	mov	r0, r5
    8b60:	eeb0 0a48 	vmov.f32	s0, s16
    8b64:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8b66:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    8b6a:	4a4b      	ldr	r2, [pc, #300]	; (8c98 <audioTickSynth+0x578>)
    8b6c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8b70:	ed92 7a00 	vldr	s14, [r2]
    8b74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8b7c:	ee67 7a88 	vmul.f32	s15, s15, s16
    8b80:	ee27 7a00 	vmul.f32	s14, s14, s0
    8b84:	ee77 7a87 	vadd.f32	s15, s15, s14
					sample *= fxPostGain[i][v];
    8b88:	4a44      	ldr	r2, [pc, #272]	; (8c9c <audioTickSynth+0x57c>)
    8b8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8b8e:	ed93 8a00 	vldr	s16, [r3]
    8b92:	ee28 8a27 	vmul.f32	s16, s16, s15
    8b96:	e7d6      	b.n	8b46 <audioTickSynth+0x426>
	uint32_t tempVolumePoly = DWT->CYCCNT;
    8b98:	4b28      	ldr	r3, [pc, #160]	; (8c3c <audioTickSynth+0x51c>)
    8b9a:	6859      	ldr	r1, [r3, #4]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8b9c:	685b      	ldr	r3, [r3, #4]
    8b9e:	687a      	ldr	r2, [r7, #4]
    8ba0:	1a9b      	subs	r3, r3, r2
    8ba2:	4a3f      	ldr	r2, [pc, #252]	; (8ca0 <audioTickSynth+0x580>)
    8ba4:	6013      	str	r3, [r2, #0]
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    8ba6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8ca4 <audioTickSynth+0x584>
    8baa:	ee68 7aa7 	vmul.f32	s15, s17, s15
    8bae:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8ca8 <audioTickSynth+0x588>
    8bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
    8bb6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8cac <audioTickSynth+0x58c>
    8bba:	ee28 7a87 	vmul.f32	s14, s17, s14
    8bbe:	ee27 7a28 	vmul.f32	s14, s14, s17
    8bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8bc6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8cb0 <audioTickSynth+0x590>
    8bca:	ee28 7a87 	vmul.f32	s14, s17, s14
    8bce:	ee27 7a28 	vmul.f32	s14, s14, s17
    8bd2:	ee27 7a28 	vmul.f32	s14, s14, s17
    8bd6:	ee77 7a87 	vadd.f32	s15, s15, s14
    8bda:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8cb4 <audioTickSynth+0x594>
    8bde:	ee28 7a87 	vmul.f32	s14, s17, s14
    8be2:	ee27 7a28 	vmul.f32	s14, s14, s17
    8be6:	ee27 7a28 	vmul.f32	s14, s14, s17
    8bea:	ee27 7a28 	vmul.f32	s14, s14, s17
    8bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (pedalControlsMaster)
    8bf2:	4b31      	ldr	r3, [pc, #196]	; (8cb8 <audioTickSynth+0x598>)
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	b10b      	cbz	r3, 8bfc <audioTickSynth+0x4dc>
		masterSample *= outVol;
    8bf8:	ee29 9a27 	vmul.f32	s18, s18, s15
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    8bfc:	4a0f      	ldr	r2, [pc, #60]	; (8c3c <audioTickSynth+0x51c>)
    8bfe:	6853      	ldr	r3, [r2, #4]
    8c00:	1a5b      	subs	r3, r3, r1
    8c02:	492e      	ldr	r1, [pc, #184]	; (8cbc <audioTickSynth+0x59c>)
    8c04:	600b      	str	r3, [r1, #0]
	timeTick = DWT->CYCCNT - tempCountTick;
    8c06:	6853      	ldr	r3, [r2, #4]
    8c08:	eba3 030b 	sub.w	r3, r3, fp
    8c0c:	4a2c      	ldr	r2, [pc, #176]	; (8cc0 <audioTickSynth+0x5a0>)
    8c0e:	6013      	str	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f * antiClickFade;
    8c10:	4b2c      	ldr	r3, [pc, #176]	; (8cc4 <audioTickSynth+0x5a4>)
    8c12:	edd3 7a00 	vldr	s15, [r3]
    8c16:	ee67 7a89 	vmul.f32	s15, s15, s18
    8c1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8cc8 <audioTickSynth+0x5a8>
    8c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
    8c22:	4b2a      	ldr	r3, [pc, #168]	; (8ccc <audioTickSynth+0x5ac>)
    8c24:	ed93 0a00 	vldr	s0, [r3]
}
    8c28:	ee27 0a80 	vmul.f32	s0, s15, s0
    8c2c:	3714      	adds	r7, #20
    8c2e:	46bd      	mov	sp, r7
    8c30:	ecbd 8b04 	vpop	{d8-d9}
    8c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c38:	2001d508 	.word	0x2001d508
    8c3c:	e0001000 	.word	0xe0001000
    8c40:	2001d804 	.word	0x2001d804
    8c44:	200164d9 	.word	0x200164d9
    8c48:	2001d054 	.word	0x2001d054
    8c4c:	2001d1cc 	.word	0x2001d1cc
    8c50:	20000690 	.word	0x20000690
    8c54:	2001d1d4 	.word	0x2001d1d4
    8c58:	20000694 	.word	0x20000694
    8c5c:	20014224 	.word	0x20014224
    8c60:	2001422c 	.word	0x2001422c
    8c64:	2001d81c 	.word	0x2001d81c
    8c68:	42fe0000 	.word	0x42fe0000
    8c6c:	200191d0 	.word	0x200191d0
    8c70:	200191cc 	.word	0x200191cc
    8c74:	2001d6b4 	.word	0x2001d6b4
    8c78:	2001d7f4 	.word	0x2001d7f4
    8c7c:	2001d7ec 	.word	0x2001d7ec
    8c80:	2001d7f8 	.word	0x2001d7f8
    8c84:	2001d808 	.word	0x2001d808
    8c88:	2001d4b0 	.word	0x2001d4b0
    8c8c:	2001d800 	.word	0x2001d800
    8c90:	200143ac 	.word	0x200143ac
    8c94:	2001d150 	.word	0x2001d150
    8c98:	2001d1f4 	.word	0x2001d1f4
    8c9c:	2001d214 	.word	0x2001d214
    8ca0:	2001d80c 	.word	0x2001d80c
    8ca4:	3ef1ac0b 	.word	0x3ef1ac0b
    8ca8:	3bdc4213 	.word	0x3bdc4213
    8cac:	4022be0a 	.word	0x4022be0a
    8cb0:	40caa285 	.word	0x40caa285
    8cb4:	40516313 	.word	0x40516313
    8cb8:	2001a2f8 	.word	0x2001a2f8
    8cbc:	2001d818 	.word	0x2001d818
    8cc0:	2001d814 	.word	0x2001d814
    8cc4:	200006a8 	.word	0x200006a8
    8cc8:	3f7ae148 	.word	0x3f7ae148
    8ccc:	2001d05c 	.word	0x2001d05c
    8cd0:	f3af 8000 	nop.w
    8cd4:	f3af 8000 	nop.w
    8cd8:	f3af 8000 	nop.w
    8cdc:	f3af 8000 	nop.w

00008ce0 <audioFrameSynth>:
{
    8ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ce2:	ed2d 8b02 	vpush	{d8}
    8ce6:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    8ce8:	4b90      	ldr	r3, [pc, #576]	; (8f2c <audioFrameSynth+0x24c>)
    8cea:	685e      	ldr	r6, [r3, #4]
	if (resetStringInputs)
    8cec:	4b90      	ldr	r3, [pc, #576]	; (8f30 <audioFrameSynth+0x250>)
    8cee:	781b      	ldrb	r3, [r3, #0]
    8cf0:	b9db      	cbnz	r3, 8d2a <audioFrameSynth+0x4a>
	if (newPluck)
    8cf2:	4b90      	ldr	r3, [pc, #576]	; (8f34 <audioFrameSynth+0x254>)
    8cf4:	681b      	ldr	r3, [r3, #0]
    8cf6:	2b00      	cmp	r3, #0
    8cf8:	f040 80cd 	bne.w	8e96 <audioFrameSynth+0x1b6>
		for (int i = 0; i < numStringsThisBoard; i++)
    8cfc:	2400      	movs	r4, #0
    8cfe:	e0e2      	b.n	8ec6 <audioFrameSynth+0x1e6>
				tADSRT_clear(&envs[v][i]);
    8d00:	eb07 0044 	add.w	r0, r7, r4, lsl #1
    8d04:	4b8c      	ldr	r3, [pc, #560]	; (8f38 <audioFrameSynth+0x258>)
    8d06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d0a:	f000 fc79 	bl	9600 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    8d0e:	4b8b      	ldr	r3, [pc, #556]	; (8f3c <audioFrameSynth+0x25c>)
    8d10:	2200      	movs	r2, #0
    8d12:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    8d16:	3401      	adds	r4, #1
    8d18:	2c03      	cmp	r4, #3
    8d1a:	ddf1      	ble.n	8d00 <audioFrameSynth+0x20>
		for (int i = 0; i < numStringsThisBoard; i++)
    8d1c:	3701      	adds	r7, #1
    8d1e:	4b88      	ldr	r3, [pc, #544]	; (8f40 <audioFrameSynth+0x260>)
    8d20:	781b      	ldrb	r3, [r3, #0]
    8d22:	42bb      	cmp	r3, r7
    8d24:	dd03      	ble.n	8d2e <audioFrameSynth+0x4e>
			for (int v = 0; v < NUM_ENV; v++)
    8d26:	2400      	movs	r4, #0
    8d28:	e7f6      	b.n	8d18 <audioFrameSynth+0x38>
		for (int i = 0; i < numStringsThisBoard; i++)
    8d2a:	2700      	movs	r7, #0
    8d2c:	e7f7      	b.n	8d1e <audioFrameSynth+0x3e>
		resetStringInputs = 0;
    8d2e:	4b80      	ldr	r3, [pc, #512]	; (8f30 <audioFrameSynth+0x250>)
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    8d34:	4b7f      	ldr	r3, [pc, #508]	; (8f34 <audioFrameSynth+0x254>)
    8d36:	2201      	movs	r2, #1
    8d38:	601a      	str	r2, [r3, #0]
    8d3a:	e7da      	b.n	8cf2 <audioFrameSynth+0x12>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8d3c:	4b81      	ldr	r3, [pc, #516]	; (8f44 <audioFrameSynth+0x264>)
    8d3e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8d42:	b29b      	uxth	r3, r3
    8d44:	ee08 3a10 	vmov	s16, r3
    8d48:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    8d4c:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8f48 <audioFrameSynth+0x268>
    8d50:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    8d54:	4b7d      	ldr	r3, [pc, #500]	; (8f4c <audioFrameSynth+0x26c>)
    8d56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8d5a:	4a7d      	ldr	r2, [pc, #500]	; (8f50 <audioFrameSynth+0x270>)
    8d5c:	6812      	ldr	r2, [r2, #0]
    8d5e:	601a      	str	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    8d60:	2700      	movs	r7, #0
    8d62:	e00c      	b.n	8d7e <audioFrameSynth+0x9e>
						if (useVelocity == 0) envVel = 1.f;
    8d64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
						tADSRT_on(&envs[v][i], envVel);
    8d68:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    8d6c:	4872      	ldr	r0, [pc, #456]	; (8f38 <audioFrameSynth+0x258>)
    8d6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8d72:	f000 fe99 	bl	9aa8 <__tADSRT_on_veneer>
						voiceSounding = 1;
    8d76:	4b77      	ldr	r3, [pc, #476]	; (8f54 <audioFrameSynth+0x274>)
    8d78:	2201      	movs	r2, #1
    8d7a:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    8d7c:	3701      	adds	r7, #1
    8d7e:	2f03      	cmp	r7, #3
    8d80:	dc19      	bgt.n	8db6 <audioFrameSynth+0xd6>
					if (envOn[v])
    8d82:	4b75      	ldr	r3, [pc, #468]	; (8f58 <audioFrameSynth+0x278>)
    8d84:	5ddb      	ldrb	r3, [r3, r7]
    8d86:	2b00      	cmp	r3, #0
    8d88:	d0f8      	beq.n	8d7c <audioFrameSynth+0x9c>
						param* envParams = &params[ENVELOPE_PARAMS_OFFSET + v * EnvelopeParamsNum];
    8d8a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8d8e:	005b      	lsls	r3, r3, #1
    8d90:	336c      	adds	r3, #108	; 0x6c
    8d92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8d96:	4a71      	ldr	r2, [pc, #452]	; (8f5c <audioFrameSynth+0x27c>)
    8d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float useVelocity = envParams[EnvelopeVelocity].realVal[i];
    8d9c:	1ca2      	adds	r2, r4, #2
    8d9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8da2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
						if (useVelocity == 0) envVel = 1.f;
    8da6:	eef5 7a40 	vcmp.f32	s15, #0.0
    8daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dae:	d0d9      	beq.n	8d64 <audioFrameSynth+0x84>
						float envVel = amplitz;
    8db0:	eeb0 0a48 	vmov.f32	s0, s16
    8db4:	e7d8      	b.n	8d68 <audioFrameSynth+0x88>
				for (int v = 0; v < NUM_LFOS; v++)
    8db6:	2700      	movs	r7, #0
    8db8:	e000      	b.n	8dbc <audioFrameSynth+0xdc>
    8dba:	3701      	adds	r7, #1
    8dbc:	2f03      	cmp	r7, #3
    8dbe:	dc21      	bgt.n	8e04 <audioFrameSynth+0x124>
					if (lfoOn[v])
    8dc0:	4b67      	ldr	r3, [pc, #412]	; (8f60 <audioFrameSynth+0x280>)
    8dc2:	5ddb      	ldrb	r3, [r3, r7]
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	d0f8      	beq.n	8dba <audioFrameSynth+0xda>
						param* lfoParams = &params[LFO_PARAMS_OFFSET + v * LFOParamsNum];
    8dc8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8dcc:	3384      	adds	r3, #132	; 0x84
    8dce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8dd2:	4a62      	ldr	r2, [pc, #392]	; (8f5c <audioFrameSynth+0x27c>)
    8dd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float noteOnSync = lfoParams[LFOSync].realVal[i];
    8dd8:	1ca2      	adds	r2, r4, #2
    8dda:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8dde:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
						if (noteOnSync > 0.5f)
    8de2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dee:	dde4      	ble.n	8dba <audioFrameSynth+0xda>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    8df0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    8df2:	1ca1      	adds	r1, r4, #2
    8df4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8df8:	4621      	mov	r1, r4
    8dfa:	4638      	mov	r0, r7
    8dfc:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    8e00:	4790      	blx	r2
    8e02:	e7da      	b.n	8dba <audioFrameSynth+0xda>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    8e04:	4b57      	ldr	r3, [pc, #348]	; (8f64 <audioFrameSynth+0x284>)
    8e06:	781a      	ldrb	r2, [r3, #0]
    8e08:	1c51      	adds	r1, r2, #1
    8e0a:	7019      	strb	r1, [r3, #0]
    8e0c:	4b56      	ldr	r3, [pc, #344]	; (8f68 <audioFrameSynth+0x288>)
    8e0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8e12:	6819      	ldr	r1, [r3, #0]
    8e14:	4b55      	ldr	r3, [pc, #340]	; (8f6c <audioFrameSynth+0x28c>)
    8e16:	f104 0226 	add.w	r2, r4, #38	; 0x26
    8e1a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8e1e:	6011      	str	r1, [r2, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    8e20:	f104 0224 	add.w	r2, r4, #36	; 0x24
    8e24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8e28:	ed83 8a00 	vstr	s16, [r3]
			previousStringInputs[i] = stringInputs[i];
    8e2c:	4b45      	ldr	r3, [pc, #276]	; (8f44 <audioFrameSynth+0x264>)
    8e2e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e32:	b29b      	uxth	r3, r3
    8e34:	4a41      	ldr	r2, [pc, #260]	; (8f3c <audioFrameSynth+0x25c>)
    8e36:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8e3a:	3401      	adds	r4, #1
    8e3c:	4b40      	ldr	r3, [pc, #256]	; (8f40 <audioFrameSynth+0x260>)
    8e3e:	781b      	ldrb	r3, [r3, #0]
    8e40:	42a3      	cmp	r3, r4
    8e42:	dd2a      	ble.n	8e9a <audioFrameSynth+0x1ba>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8e44:	4b3d      	ldr	r3, [pc, #244]	; (8f3c <audioFrameSynth+0x25c>)
    8e46:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e4a:	b29b      	uxth	r3, r3
    8e4c:	b933      	cbnz	r3, 8e5c <audioFrameSynth+0x17c>
    8e4e:	4b3d      	ldr	r3, [pc, #244]	; (8f44 <audioFrameSynth+0x264>)
    8e50:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e54:	b29b      	uxth	r3, r3
    8e56:	2b00      	cmp	r3, #0
    8e58:	f47f af70 	bne.w	8d3c <audioFrameSynth+0x5c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8e5c:	4b37      	ldr	r3, [pc, #220]	; (8f3c <audioFrameSynth+0x25c>)
    8e5e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e62:	b29b      	uxth	r3, r3
    8e64:	2b00      	cmp	r3, #0
    8e66:	d0e1      	beq.n	8e2c <audioFrameSynth+0x14c>
    8e68:	4b36      	ldr	r3, [pc, #216]	; (8f44 <audioFrameSynth+0x264>)
    8e6a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e6e:	b29b      	uxth	r3, r3
    8e70:	2b00      	cmp	r3, #0
    8e72:	d1db      	bne.n	8e2c <audioFrameSynth+0x14c>
				for (int v = 0; v < NUM_ENV; v++)
    8e74:	2700      	movs	r7, #0
    8e76:	e000      	b.n	8e7a <audioFrameSynth+0x19a>
    8e78:	3701      	adds	r7, #1
    8e7a:	2f03      	cmp	r7, #3
    8e7c:	dcd6      	bgt.n	8e2c <audioFrameSynth+0x14c>
					if (envOn[v])
    8e7e:	4b36      	ldr	r3, [pc, #216]	; (8f58 <audioFrameSynth+0x278>)
    8e80:	5ddb      	ldrb	r3, [r3, r7]
    8e82:	2b00      	cmp	r3, #0
    8e84:	d0f8      	beq.n	8e78 <audioFrameSynth+0x198>
						tADSRT_off(&envs[v][i]);
    8e86:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    8e8a:	482b      	ldr	r0, [pc, #172]	; (8f38 <audioFrameSynth+0x258>)
    8e8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8e90:	f000 fda6 	bl	99e0 <__tADSRT_off_veneer>
    8e94:	e7f0      	b.n	8e78 <audioFrameSynth+0x198>
		for (int i = 0; i < numStringsThisBoard; i++)
    8e96:	2400      	movs	r4, #0
    8e98:	e7d0      	b.n	8e3c <audioFrameSynth+0x15c>
		newPluck = 0;
    8e9a:	4b26      	ldr	r3, [pc, #152]	; (8f34 <audioFrameSynth+0x254>)
    8e9c:	2200      	movs	r2, #0
    8e9e:	601a      	str	r2, [r3, #0]
    8ea0:	e72c      	b.n	8cfc <audioFrameSynth+0x1c>
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8ea2:	f7ff fc3d 	bl	8720 <audioTickSynth>
    8ea6:	eddf 7a32 	vldr	s15, [pc, #200]	; 8f70 <audioFrameSynth+0x290>
    8eaa:	ee20 0a27 	vmul.f32	s0, s0, s15
    8eae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    8eb2:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    8eb6:	192a      	adds	r2, r5, r4
    8eb8:	492e      	ldr	r1, [pc, #184]	; (8f74 <audioFrameSynth+0x294>)
    8eba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8ebe:	3201      	adds	r2, #1
    8ec0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8ec4:	3402      	adds	r4, #2
    8ec6:	2c7f      	cmp	r4, #127	; 0x7f
    8ec8:	ddeb      	ble.n	8ea2 <audioFrameSynth+0x1c2>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8eca:	4b18      	ldr	r3, [pc, #96]	; (8f2c <audioFrameSynth+0x24c>)
    8ecc:	685b      	ldr	r3, [r3, #4]
    8ece:	1b9b      	subs	r3, r3, r6
    8ed0:	4a29      	ldr	r2, [pc, #164]	; (8f78 <audioFrameSynth+0x298>)
    8ed2:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8ed4:	ee07 3a90 	vmov	s15, r3
    8ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8edc:	4b27      	ldr	r3, [pc, #156]	; (8f7c <audioFrameSynth+0x29c>)
    8ede:	ed93 7a00 	vldr	s14, [r3]
    8ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
    8ee6:	4b26      	ldr	r3, [pc, #152]	; (8f80 <audioFrameSynth+0x2a0>)
    8ee8:	edc3 7a00 	vstr	s15, [r3]
	if (frameLoadPercentage > .99f)
    8eec:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8f84 <audioFrameSynth+0x2a4>
    8ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
    8ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ef8:	dd0f      	ble.n	8f1a <audioFrameSynth+0x23a>
		frameLoadOverCount++;
    8efa:	4a23      	ldr	r2, [pc, #140]	; (8f88 <audioFrameSynth+0x2a8>)
    8efc:	6813      	ldr	r3, [r2, #0]
    8efe:	3301      	adds	r3, #1
    8f00:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    8f02:	2b03      	cmp	r3, #3
    8f04:	d909      	bls.n	8f1a <audioFrameSynth+0x23a>
			if (overSampled == 1)
    8f06:	4b21      	ldr	r3, [pc, #132]	; (8f8c <audioFrameSynth+0x2ac>)
    8f08:	681b      	ldr	r3, [r3, #0]
    8f0a:	2b01      	cmp	r3, #1
    8f0c:	d008      	beq.n	8f20 <audioFrameSynth+0x240>
			else if (oscToTick > 0)
    8f0e:	4b20      	ldr	r3, [pc, #128]	; (8f90 <audioFrameSynth+0x2b0>)
    8f10:	781b      	ldrb	r3, [r3, #0]
    8f12:	b113      	cbz	r3, 8f1a <audioFrameSynth+0x23a>
				oscToTick--;
    8f14:	3b01      	subs	r3, #1
    8f16:	4a1e      	ldr	r2, [pc, #120]	; (8f90 <audioFrameSynth+0x2b0>)
    8f18:	7013      	strb	r3, [r2, #0]
}
    8f1a:	ecbd 8b02 	vpop	{d8}
    8f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				overSampled = 0;
    8f20:	2000      	movs	r0, #0
    8f22:	4b1a      	ldr	r3, [pc, #104]	; (8f8c <audioFrameSynth+0x2ac>)
    8f24:	6018      	str	r0, [r3, #0]
				changeOversampling(overSampled);
    8f26:	f000 fd2b 	bl	9980 <__changeOversampling_veneer>
    8f2a:	e7f6      	b.n	8f1a <audioFrameSynth+0x23a>
    8f2c:	e0001000 	.word	0xe0001000
    8f30:	20005778 	.word	0x20005778
    8f34:	200052f0 	.word	0x200052f0
    8f38:	2001d164 	.word	0x2001d164
    8f3c:	20005360 	.word	0x20005360
    8f40:	20000694 	.word	0x20000694
    8f44:	2001420c 	.word	0x2001420c
    8f48:	37800080 	.word	0x37800080
    8f4c:	2001422c 	.word	0x2001422c
    8f50:	200052fc 	.word	0x200052fc
    8f54:	2001d838 	.word	0x2001d838
    8f58:	2001d160 	.word	0x2001d160
    8f5c:	200191e8 	.word	0x200191e8
    8f60:	2001d264 	.word	0x2001d264
    8f64:	2001d604 	.word	0x2001d604
    8f68:	2001a398 	.word	0x2001a398
    8f6c:	2001d6b4 	.word	0x2001d6b4
    8f70:	4b000000 	.word	0x4b000000
    8f74:	30000000 	.word	0x30000000
    8f78:	2001424c 	.word	0x2001424c
    8f7c:	20000684 	.word	0x20000684
    8f80:	200051d4 	.word	0x200051d4
    8f84:	3f7d70a4 	.word	0x3f7d70a4
    8f88:	200051d0 	.word	0x200051d0
    8f8c:	200008f0 	.word	0x200008f0
    8f90:	200008ec 	.word	0x200008ec
	...

00008fa0 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    8fa0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8fa2:	2400      	movs	r4, #0
    8fa4:	e008      	b.n	8fb8 <audioInitVocal+0x18>
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8fa6:	4b06      	ldr	r3, [pc, #24]	; (8fc0 <audioInitVocal+0x20>)
    8fa8:	2241      	movs	r2, #65	; 0x41
    8faa:	2116      	movs	r1, #22
    8fac:	4805      	ldr	r0, [pc, #20]	; (8fc4 <audioInitVocal+0x24>)
    8fae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8fb2:	f000 fc55 	bl	9860 <__tVoc_init_veneer>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8fb6:	3401      	adds	r4, #1
    8fb8:	2c01      	cmp	r4, #1
    8fba:	ddf4      	ble.n	8fa6 <audioInitVocal+0x6>
	}
}
    8fbc:	bd10      	pop	{r4, pc}
    8fbe:	bf00      	nop
    8fc0:	20005294 	.word	0x20005294
    8fc4:	2001d85c 	.word	0x2001d85c
    8fc8:	f3af 8000 	nop.w
    8fcc:	f3af 8000 	nop.w
    8fd0:	f3af 8000 	nop.w
    8fd4:	f3af 8000 	nop.w
    8fd8:	f3af 8000 	nop.w
    8fdc:	f3af 8000 	nop.w

00008fe0 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    8fe0:	4770      	bx	lr
    8fe2:	bf00      	nop
    8fe4:	f3af 8000 	nop.w
    8fe8:	f3af 8000 	nop.w
    8fec:	f3af 8000 	nop.w
    8ff0:	f3af 8000 	nop.w
    8ff4:	f3af 8000 	nop.w
    8ff8:	f3af 8000 	nop.w
    8ffc:	f3af 8000 	nop.w

00009000 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    9000:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 12; i++)
    9002:	2400      	movs	r4, #0
    9004:	e013      	b.n	902e <audioSwitchToVocal+0x2e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);

		if (voice == 60)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    9006:	4b16      	ldr	r3, [pc, #88]	; (9060 <audioSwitchToVocal+0x60>)
    9008:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    900c:	ed93 0a00 	vldr	s0, [r3]
    9010:	4628      	mov	r0, r5
    9012:	f000 fb4d 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    9016:	4b12      	ldr	r3, [pc, #72]	; (9060 <audioSwitchToVocal+0x60>)
    9018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    901c:	ed93 0a00 	vldr	s0, [r3]
    9020:	4628      	mov	r0, r5
    9022:	f000 fb45 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    9026:	4b0f      	ldr	r3, [pc, #60]	; (9064 <audioSwitchToVocal+0x64>)
    9028:	2201      	movs	r2, #1
    902a:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    902c:	4414      	add	r4, r2
    902e:	2c0b      	cmp	r4, #11
    9030:	dc14      	bgt.n	905c <audioSwitchToVocal+0x5c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    9032:	4d0d      	ldr	r5, [pc, #52]	; (9068 <audioSwitchToVocal+0x68>)
    9034:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    9038:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 906c <audioSwitchToVocal+0x6c>
    903c:	4628      	mov	r0, r5
    903e:	f000 fb5b 	bl	96f8 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    9042:	4b0b      	ldr	r3, [pc, #44]	; (9070 <audioSwitchToVocal+0x70>)
    9044:	681b      	ldr	r3, [r3, #0]
    9046:	2b3c      	cmp	r3, #60	; 0x3c
    9048:	d0dd      	beq.n	9006 <audioSwitchToVocal+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    904a:	4b0a      	ldr	r3, [pc, #40]	; (9074 <audioSwitchToVocal+0x74>)
    904c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9050:	ed93 0a00 	vldr	s0, [r3]
    9054:	4628      	mov	r0, r5
    9056:	f000 fb2b 	bl	96b0 <__tExpSmooth_setValAndDest_veneer>
    905a:	e7dc      	b.n	9016 <audioSwitchToVocal+0x16>
	}
}
    905c:	bd38      	pop	{r3, r4, r5, pc}
    905e:	bf00      	nop
    9060:	2000090c 	.word	0x2000090c
    9064:	200051dc 	.word	0x200051dc
    9068:	20005240 	.word	0x20005240
    906c:	3c23d70a 	.word	0x3c23d70a
    9070:	20014258 	.word	0x20014258
    9074:	20018540 	.word	0x20018540
    9078:	f3af 8000 	nop.w
    907c:	f3af 8000 	nop.w

00009080 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    9080:	b570      	push	{r4, r5, r6, lr}
    9082:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
    9086:	2400      	movs	r4, #0
    9088:	e00a      	b.n	90a0 <audioTickVocal+0x20>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    908a:	00a5      	lsls	r5, r4, #2
    908c:	483a      	ldr	r0, [pc, #232]	; (9178 <audioTickVocal+0xf8>)
    908e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    9092:	f000 fa6d 	bl	9570 <__tExpSmooth_tick_veneer>
    9096:	4b39      	ldr	r3, [pc, #228]	; (917c <audioTickVocal+0xfc>)
    9098:	442b      	add	r3, r5
    909a:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    909e:	3401      	adds	r4, #1
    90a0:	2c0b      	cmp	r4, #11
    90a2:	ddf2      	ble.n	908a <audioTickVocal+0xa>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    90a4:	4836      	ldr	r0, [pc, #216]	; (9180 <audioTickVocal+0x100>)
    90a6:	f000 fa63 	bl	9570 <__tExpSmooth_tick_veneer>
    90aa:	eeb0 8a40 	vmov.f32	s16, s0



	for (int i = 0; i < numStringsThisBoard; i++)
    90ae:	2400      	movs	r4, #0
	float tempSamp = 0.0f;
    90b0:	ed9f 9a34 	vldr	s18, [pc, #208]	; 9184 <audioTickVocal+0x104>
	for (int i = 0; i < numStringsThisBoard; i++)
    90b4:	e029      	b.n	910a <audioTickVocal+0x8a>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    90b6:	00a6      	lsls	r6, r4, #2
    90b8:	4d33      	ldr	r5, [pc, #204]	; (9188 <audioTickVocal+0x108>)
    90ba:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    90be:	4628      	mov	r0, r5
    90c0:	f000 fbd6 	bl	9870 <__tVoc_tick_veneer>
    90c4:	eef0 8a40 	vmov.f32	s17, s0
    90c8:	4830      	ldr	r0, [pc, #192]	; (918c <audioTickVocal+0x10c>)
    90ca:	4430      	add	r0, r6
    90cc:	f000 fcfc 	bl	9ac8 <__tADSRT_tickNoInterp_veneer>
    90d0:	ee68 8a80 	vmul.f32	s17, s17, s0
    90d4:	ee39 9a28 	vadd.f32	s18, s18, s17
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    90d8:	4b2d      	ldr	r3, [pc, #180]	; (9190 <audioTickVocal+0x110>)
    90da:	4433      	add	r3, r6
    90dc:	ed93 0a00 	vldr	s0, [r3]
    90e0:	4b2c      	ldr	r3, [pc, #176]	; (9194 <audioTickVocal+0x114>)
    90e2:	4433      	add	r3, r6
    90e4:	edd3 7a00 	vldr	s15, [r3]
    90e8:	ee30 0a27 	vadd.f32	s0, s0, s15
    90ec:	f000 faa4 	bl	9638 <__mtofTableLookup_veneer>
    90f0:	4b29      	ldr	r3, [pc, #164]	; (9198 <audioTickVocal+0x118>)
    90f2:	4433      	add	r3, r6
    90f4:	ed83 0a00 	vstr	s0, [r3]
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    90f8:	4628      	mov	r0, r5
    90fa:	f000 fc85 	bl	9a08 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    90fe:	eeb0 0a48 	vmov.f32	s0, s16
    9102:	4628      	mov	r0, r5
    9104:	f000 fbc4 	bl	9890 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9108:	3401      	adds	r4, #1
    910a:	4b24      	ldr	r3, [pc, #144]	; (919c <audioTickVocal+0x11c>)
    910c:	781b      	ldrb	r3, [r3, #0]
    910e:	42a3      	cmp	r3, r4
    9110:	dcd1      	bgt.n	90b6 <audioTickVocal+0x36>
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	//float outVol = 0.008315613f + 0.3774075f*volumeSmoothed - 1.785774f*volumeSmoothed*volumeSmoothed + 4.218241f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.8576009f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.9656285f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    9112:	eddf 7a23 	vldr	s15, [pc, #140]	; 91a0 <audioTickVocal+0x120>
    9116:	ee68 7a27 	vmul.f32	s15, s16, s15
    911a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 91a4 <audioTickVocal+0x124>
    911e:	ee77 7a87 	vadd.f32	s15, s15, s14
    9122:	ed9f 7a21 	vldr	s14, [pc, #132]	; 91a8 <audioTickVocal+0x128>
    9126:	ee28 7a07 	vmul.f32	s14, s16, s14
    912a:	ee27 7a08 	vmul.f32	s14, s14, s16
    912e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9132:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 91ac <audioTickVocal+0x12c>
    9136:	ee28 7a07 	vmul.f32	s14, s16, s14
    913a:	ee27 7a08 	vmul.f32	s14, s14, s16
    913e:	ee27 7a08 	vmul.f32	s14, s14, s16
    9142:	ee77 7a87 	vadd.f32	s15, s15, s14
    9146:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 91b0 <audioTickVocal+0x130>
    914a:	ee28 7a07 	vmul.f32	s14, s16, s14
    914e:	ee27 7a08 	vmul.f32	s14, s14, s16
    9152:	ee27 7a08 	vmul.f32	s14, s14, s16
    9156:	ee27 7a08 	vmul.f32	s14, s14, s16
    915a:	ee77 7ac7 	vsub.f32	s15, s15, s14

	tempSamp *= outVol;
    915e:	ee29 9a27 	vmul.f32	s18, s18, s15
	tempSamp *= masterVolFromBrain;
    9162:	4b14      	ldr	r3, [pc, #80]	; (91b4 <audioTickVocal+0x134>)
    9164:	ed93 0a00 	vldr	s0, [r3]
	return tanhf(tempSamp);
    9168:	ee29 0a00 	vmul.f32	s0, s18, s0
    916c:	f000 fbcc 	bl	9908 <__tanhf_veneer>
}
    9170:	ecbd 8b04 	vpop	{d8-d9}
    9174:	bd70      	pop	{r4, r5, r6, pc}
    9176:	bf00      	nop
    9178:	20005240 	.word	0x20005240
    917c:	200051f0 	.word	0x200051f0
    9180:	20014264 	.word	0x20014264
    9184:	00000000 	.word	0x00000000
    9188:	2001d85c 	.word	0x2001d85c
    918c:	200051c4 	.word	0x200051c4
    9190:	20014224 	.word	0x20014224
    9194:	2001422c 	.word	0x2001422c
    9198:	200141dc 	.word	0x200141dc
    919c:	20000694 	.word	0x20000694
    91a0:	3ef1ac0b 	.word	0x3ef1ac0b
    91a4:	3bdc4213 	.word	0x3bdc4213
    91a8:	4022be0a 	.word	0x4022be0a
    91ac:	40caa285 	.word	0x40caa285
    91b0:	40516313 	.word	0x40516313
    91b4:	2000068c 	.word	0x2000068c
    91b8:	f3af 8000 	nop.w
    91bc:	f3af 8000 	nop.w

000091c0 <audioFrameVocal>:
{
    91c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91c4:	ed2d 8b02 	vpush	{d8}
    91c8:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    91ca:	4bb7      	ldr	r3, [pc, #732]	; (94a8 <audioFrameVocal+0x2e8>)
    91cc:	685e      	ldr	r6, [r3, #4]
	if (resetStringInputs)
    91ce:	4bb7      	ldr	r3, [pc, #732]	; (94ac <audioFrameVocal+0x2ec>)
    91d0:	781b      	ldrb	r3, [r3, #0]
    91d2:	b9e3      	cbnz	r3, 920e <audioFrameVocal+0x4e>
	if (newPluck)
    91d4:	4bb6      	ldr	r3, [pc, #728]	; (94b0 <audioFrameVocal+0x2f0>)
    91d6:	681b      	ldr	r3, [r3, #0]
    91d8:	2b00      	cmp	r3, #0
    91da:	f040 808e 	bne.w	92fa <audioFrameVocal+0x13a>
		float doublecompute = knobScaled[1] > 0.5f;
    91de:	f04f 0800 	mov.w	r8, #0
    91e2:	e0ee      	b.n	93c2 <audioFrameVocal+0x202>
			tADSRT_clear(&fenvelopes[i]);
    91e4:	48b3      	ldr	r0, [pc, #716]	; (94b4 <audioFrameVocal+0x2f4>)
    91e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    91ea:	f000 fa09 	bl	9600 <__tADSRT_clear_veneer>
			previousStringInputs[i] = 0;
    91ee:	4bb2      	ldr	r3, [pc, #712]	; (94b8 <audioFrameVocal+0x2f8>)
    91f0:	2200      	movs	r2, #0
    91f2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    91f6:	3401      	adds	r4, #1
    91f8:	4bb0      	ldr	r3, [pc, #704]	; (94bc <audioFrameVocal+0x2fc>)
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	42a3      	cmp	r3, r4
    91fe:	dcf1      	bgt.n	91e4 <audioFrameVocal+0x24>
		resetStringInputs = 0;
    9200:	4baa      	ldr	r3, [pc, #680]	; (94ac <audioFrameVocal+0x2ec>)
    9202:	2200      	movs	r2, #0
    9204:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    9206:	4baa      	ldr	r3, [pc, #680]	; (94b0 <audioFrameVocal+0x2f0>)
    9208:	2201      	movs	r2, #1
    920a:	601a      	str	r2, [r3, #0]
    920c:	e7e2      	b.n	91d4 <audioFrameVocal+0x14>
		for (int i = 0; i < numStringsThisBoard; i++)
    920e:	2400      	movs	r4, #0
    9210:	e7f2      	b.n	91f8 <audioFrameVocal+0x38>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9212:	4bab      	ldr	r3, [pc, #684]	; (94c0 <audioFrameVocal+0x300>)
    9214:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    9218:	b29b      	uxth	r3, r3
    921a:	ee08 3a10 	vmov	s16, r3
    921e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    9222:	eddf 7aa8 	vldr	s15, [pc, #672]	; 94c4 <audioFrameVocal+0x304>
    9226:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    922a:	4ba7      	ldr	r3, [pc, #668]	; (94c8 <audioFrameVocal+0x308>)
    922c:	edd3 7a00 	vldr	s15, [r3]
    9230:	4ba6      	ldr	r3, [pc, #664]	; (94cc <audioFrameVocal+0x30c>)
    9232:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9236:	edc3 7a00 	vstr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    923a:	4ba5      	ldr	r3, [pc, #660]	; (94d0 <audioFrameVocal+0x310>)
    923c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9240:	ed93 7a00 	vldr	s14, [r3]
    9244:	ee77 7a87 	vadd.f32	s15, s15, s14
    if (f <= -1500.0f) return(0);
    9248:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 94d4 <audioFrameVocal+0x314>
    924c:	eef4 7ac7 	vcmpe.f32	s15, s14
    9250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9254:	d911      	bls.n	927a <audioFrameVocal+0xba>
    else if (f > 1499.0f) return(mtof(1499.0f));
    9256:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 94d8 <audioFrameVocal+0x318>
    925a:	eef4 7ac7 	vcmpe.f32	s15, s14
    925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9262:	dc47      	bgt.n	92f4 <audioFrameVocal+0x134>
    else return (8.17579891564f * expf(0.0577622650f * f));
    9264:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 94dc <audioFrameVocal+0x31c>
    9268:	ee27 0a80 	vmul.f32	s0, s15, s0
    926c:	f000 f9b4 	bl	95d8 <__expf_veneer>
    9270:	eddf 7a9b 	vldr	s15, [pc, #620]	; 94e0 <audioFrameVocal+0x320>
    9274:	ee60 7a27 	vmul.f32	s15, s0, s15
    9278:	e001      	b.n	927e <audioFrameVocal+0xbe>
    if (f <= -1500.0f) return(0);
    927a:	eddf 7a9a 	vldr	s15, [pc, #616]	; 94e4 <audioFrameVocal+0x324>
    927e:	4b9a      	ldr	r3, [pc, #616]	; (94e8 <audioFrameVocal+0x328>)
    9280:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9284:	edc3 7a00 	vstr	s15, [r3]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    9288:	4f8a      	ldr	r7, [pc, #552]	; (94b4 <audioFrameVocal+0x2f4>)
    928a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    928e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    9292:	4638      	mov	r0, r7
    9294:	f000 fb00 	bl	9898 <__tADSRT_setSustain_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
    9298:	eeb0 0a48 	vmov.f32	s0, s16
    929c:	4638      	mov	r0, r7
    929e:	f000 fc03 	bl	9aa8 <__tADSRT_on_veneer>
			previousStringInputs[i] = stringInputs[i];
    92a2:	4b87      	ldr	r3, [pc, #540]	; (94c0 <audioFrameVocal+0x300>)
    92a4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    92a8:	b29b      	uxth	r3, r3
    92aa:	4a83      	ldr	r2, [pc, #524]	; (94b8 <audioFrameVocal+0x2f8>)
    92ac:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    92b0:	3401      	adds	r4, #1
    92b2:	4b82      	ldr	r3, [pc, #520]	; (94bc <audioFrameVocal+0x2fc>)
    92b4:	781b      	ldrb	r3, [r3, #0]
    92b6:	42a3      	cmp	r3, r4
    92b8:	dd21      	ble.n	92fe <audioFrameVocal+0x13e>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    92ba:	4b7f      	ldr	r3, [pc, #508]	; (94b8 <audioFrameVocal+0x2f8>)
    92bc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    92c0:	b29b      	uxth	r3, r3
    92c2:	b92b      	cbnz	r3, 92d0 <audioFrameVocal+0x110>
    92c4:	4b7e      	ldr	r3, [pc, #504]	; (94c0 <audioFrameVocal+0x300>)
    92c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    92ca:	b29b      	uxth	r3, r3
    92cc:	2b00      	cmp	r3, #0
    92ce:	d1a0      	bne.n	9212 <audioFrameVocal+0x52>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    92d0:	4b79      	ldr	r3, [pc, #484]	; (94b8 <audioFrameVocal+0x2f8>)
    92d2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    92d6:	b29b      	uxth	r3, r3
    92d8:	2b00      	cmp	r3, #0
    92da:	d0e2      	beq.n	92a2 <audioFrameVocal+0xe2>
    92dc:	4b78      	ldr	r3, [pc, #480]	; (94c0 <audioFrameVocal+0x300>)
    92de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    92e2:	b29b      	uxth	r3, r3
    92e4:	2b00      	cmp	r3, #0
    92e6:	d1dc      	bne.n	92a2 <audioFrameVocal+0xe2>
				tADSRT_off(&fenvelopes[i]);
    92e8:	4872      	ldr	r0, [pc, #456]	; (94b4 <audioFrameVocal+0x2f4>)
    92ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    92ee:	f000 fb77 	bl	99e0 <__tADSRT_off_veneer>
    92f2:	e7d6      	b.n	92a2 <audioFrameVocal+0xe2>
    else if (f > 1499.0f) return(mtof(1499.0f));
    92f4:	eddf 7a7d 	vldr	s15, [pc, #500]	; 94ec <audioFrameVocal+0x32c>
    92f8:	e7c1      	b.n	927e <audioFrameVocal+0xbe>
		for (int i = 0; i < numStringsThisBoard; i++)
    92fa:	2400      	movs	r4, #0
    92fc:	e7d9      	b.n	92b2 <audioFrameVocal+0xf2>
		newPluck = 0;
    92fe:	4b6c      	ldr	r3, [pc, #432]	; (94b0 <audioFrameVocal+0x2f0>)
    9300:	2200      	movs	r2, #0
    9302:	601a      	str	r2, [r3, #0]
    9304:	e76b      	b.n	91de <audioFrameVocal+0x1e>
		float doublecompute = knobScaled[1] > 0.5f;
    9306:	eddf 8a77 	vldr	s17, [pc, #476]	; 94e4 <audioFrameVocal+0x324>
    930a:	e06a      	b.n	93e2 <audioFrameVocal+0x222>
			int32_t squishedTract = (newTractLength*0.168f) ;
    930c:	eddf 7a78 	vldr	s15, [pc, #480]	; 94f0 <audioFrameVocal+0x330>
    9310:	ee68 7a27 	vmul.f32	s15, s16, s15
    9314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    9318:	ee17 4a90 	vmov	r4, s15
			if ( squishedTract != prevActualTractLength[i])
    931c:	4b75      	ldr	r3, [pc, #468]	; (94f4 <audioFrameVocal+0x334>)
    931e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    9322:	42a3      	cmp	r3, r4
    9324:	f040 808b 	bne.w	943e <audioFrameVocal+0x27e>
			prevTractLength[i] = newTractLength;
    9328:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    932c:	4b72      	ldr	r3, [pc, #456]	; (94f8 <audioFrameVocal+0x338>)
    932e:	ee18 2a10 	vmov	r2, s16
    9332:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    9336:	4c71      	ldr	r4, [pc, #452]	; (94fc <audioFrameVocal+0x33c>)
    9338:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    933c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
    9340:	ee17 1a90 	vmov	r1, s15
    9344:	4620      	mov	r0, r4
    9346:	f000 fb4f 	bl	99e8 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    934a:	4f6d      	ldr	r7, [pc, #436]	; (9500 <audioFrameVocal+0x340>)
    934c:	ed97 0a04 	vldr	s0, [r7, #16]
    9350:	4620      	mov	r0, r4
    9352:	f000 f9c9 	bl	96e8 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    9356:	ed97 0a05 	vldr	s0, [r7, #20]
    935a:	4620      	mov	r0, r4
    935c:	f000 f9a0 	bl	96a0 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    9360:	ed97 0a06 	vldr	s0, [r7, #24]
    9364:	4620      	mov	r0, r4
    9366:	f000 fadf 	bl	9928 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    936a:	ed97 0a07 	vldr	s0, [r7, #28]
    936e:	4620      	mov	r0, r4
    9370:	f000 fb16 	bl	99a0 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    9374:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
    9378:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
    937c:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
    9380:	ed97 0a08 	vldr	s0, [r7, #32]
    9384:	4620      	mov	r0, r4
    9386:	f000 fb23 	bl	99d0 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    938a:	edd7 7a03 	vldr	s15, [r7, #12]
    938e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 9504 <audioFrameVocal+0x344>
    9392:	ee67 7a87 	vmul.f32	s15, s15, s14
    9396:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 9508 <audioFrameVocal+0x348>
    939a:	ee37 0a80 	vadd.f32	s0, s15, s0
    939e:	4620      	mov	r0, r4
    93a0:	f000 fac6 	bl	9930 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    93a4:	edd7 7a02 	vldr	s15, [r7, #8]
    93a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    93ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    93b0:	ed9f 0a56 	vldr	s0, [pc, #344]	; 950c <audioFrameVocal+0x34c>
    93b4:	ee37 0a80 	vadd.f32	s0, s15, s0
    93b8:	4620      	mov	r0, r4
    93ba:	f000 fac5 	bl	9948 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    93be:	f108 0801 	add.w	r8, r8, #1
    93c2:	4b3e      	ldr	r3, [pc, #248]	; (94bc <audioFrameVocal+0x2fc>)
    93c4:	781b      	ldrb	r3, [r3, #0]
    93c6:	4543      	cmp	r3, r8
    93c8:	dd43      	ble.n	9452 <audioFrameVocal+0x292>
		float doublecompute = knobScaled[1] > 0.5f;
    93ca:	4b4d      	ldr	r3, [pc, #308]	; (9500 <audioFrameVocal+0x340>)
    93cc:	ed93 7a01 	vldr	s14, [r3, #4]
    93d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    93d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    93d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93dc:	dd93      	ble.n	9306 <audioFrameVocal+0x146>
    93de:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		float oneMinusDoubleCompute = 1.0f-doublecompute;
    93e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    93e6:	ee77 7a68 	vsub.f32	s15, s14, s17
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    93ea:	4b45      	ldr	r3, [pc, #276]	; (9500 <audioFrameVocal+0x340>)
    93ec:	ed93 8a00 	vldr	s16, [r3]
    93f0:	eddf 6a47 	vldr	s13, [pc, #284]	; 9510 <audioFrameVocal+0x350>
    93f4:	ee28 8a26 	vmul.f32	s16, s16, s13
    93f8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    93fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9400:	ee77 7a87 	vadd.f32	s15, s15, s14
    9404:	ee28 8a27 	vmul.f32	s16, s16, s15
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    9408:	4b3b      	ldr	r3, [pc, #236]	; (94f8 <audioFrameVocal+0x338>)
    940a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    940e:	f103 020a 	add.w	r2, r3, #10
    9412:	ee07 2a90 	vmov	s15, r2
    9416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    941a:	eef4 7ac8 	vcmpe.f32	s15, s16
    941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9422:	f53f af73 	bmi.w	930c <audioFrameVocal+0x14c>
    9426:	3b0a      	subs	r3, #10
    9428:	ee07 3a90 	vmov	s15, r3
    942c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9430:	eef4 7ac8 	vcmpe.f32	s15, s16
    9434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9438:	f77f af7d 	ble.w	9336 <audioFrameVocal+0x176>
    943c:	e766      	b.n	930c <audioFrameVocal+0x14c>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    943e:	1ca1      	adds	r1, r4, #2
    9440:	482e      	ldr	r0, [pc, #184]	; (94fc <audioFrameVocal+0x33c>)
    9442:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    9446:	f000 fb67 	bl	9b18 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    944a:	4b2a      	ldr	r3, [pc, #168]	; (94f4 <audioFrameVocal+0x334>)
    944c:	f843 4028 	str.w	r4, [r3, r8, lsl #2]
    9450:	e76a      	b.n	9328 <audioFrameVocal+0x168>
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9452:	2400      	movs	r4, #0
    9454:	e011      	b.n	947a <audioFrameVocal+0x2ba>
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9456:	f7ff fe13 	bl	9080 <audioTickVocal>
    945a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 9514 <audioFrameVocal+0x354>
    945e:	ee20 0a27 	vmul.f32	s0, s0, s15
    9462:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    9466:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    946a:	192a      	adds	r2, r5, r4
    946c:	492a      	ldr	r1, [pc, #168]	; (9518 <audioFrameVocal+0x358>)
    946e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9472:	3201      	adds	r2, #1
    9474:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9478:	3402      	adds	r4, #2
    947a:	2c7f      	cmp	r4, #127	; 0x7f
    947c:	ddeb      	ble.n	9456 <audioFrameVocal+0x296>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    947e:	4b0a      	ldr	r3, [pc, #40]	; (94a8 <audioFrameVocal+0x2e8>)
    9480:	685b      	ldr	r3, [r3, #4]
    9482:	1b9b      	subs	r3, r3, r6
    9484:	4a25      	ldr	r2, [pc, #148]	; (951c <audioFrameVocal+0x35c>)
    9486:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9488:	ee07 3a90 	vmov	s15, r3
    948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9490:	4b23      	ldr	r3, [pc, #140]	; (9520 <audioFrameVocal+0x360>)
    9492:	ed93 7a00 	vldr	s14, [r3]
    9496:	ee67 7a87 	vmul.f32	s15, s15, s14
    949a:	4b22      	ldr	r3, [pc, #136]	; (9524 <audioFrameVocal+0x364>)
    949c:	edc3 7a00 	vstr	s15, [r3]
}
    94a0:	ecbd 8b02 	vpop	{d8}
    94a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94a8:	e0001000 	.word	0xe0001000
    94ac:	20005778 	.word	0x20005778
    94b0:	200052f0 	.word	0x200052f0
    94b4:	200051c4 	.word	0x200051c4
    94b8:	20005360 	.word	0x20005360
    94bc:	20000694 	.word	0x20000694
    94c0:	2001420c 	.word	0x2001420c
    94c4:	37800080 	.word	0x37800080
    94c8:	200052fc 	.word	0x200052fc
    94cc:	2001422c 	.word	0x2001422c
    94d0:	20014224 	.word	0x20014224
    94d4:	c4bb8000 	.word	0xc4bb8000
    94d8:	44bb6000 	.word	0x44bb6000
    94dc:	3d6c9820 	.word	0x3d6c9820
    94e0:	4102d013 	.word	0x4102d013
    94e4:	00000000 	.word	0x00000000
    94e8:	200141dc 	.word	0x200141dc
    94ec:	7f76f0e1 	.word	0x7f76f0e1
    94f0:	3e2c0831 	.word	0x3e2c0831
    94f4:	200008fc 	.word	0x200008fc
    94f8:	20000904 	.word	0x20000904
    94fc:	2001d85c 	.word	0x2001d85c
    9500:	200051f0 	.word	0x200051f0
    9504:	3ecccccd 	.word	0x3ecccccd
    9508:	3c23d70a 	.word	0x3c23d70a
    950c:	3cc8b439 	.word	0x3cc8b439
    9510:	42c80000 	.word	0x42c80000
    9514:	4b000000 	.word	0x4b000000
    9518:	30000000 	.word	0x30000000
    951c:	2001424c 	.word	0x2001424c
    9520:	20000684 	.word	0x20000684
    9524:	200051d4 	.word	0x200051d4

00009528 <__tPBSineTriangle_setShape_veneer>:
    9528:	f85f f000 	ldr.w	pc, [pc]	; 952c <__tPBSineTriangle_setShape_veneer+0x4>
    952c:	080134f9 	.word	0x080134f9

00009530 <__tSquareLFO_setFreq_veneer>:
    9530:	f85f f000 	ldr.w	pc, [pc]	; 9534 <__tSquareLFO_setFreq_veneer+0x4>
    9534:	08013b8b 	.word	0x08013b8b

00009538 <__tDiodeFilter_tickEfficient_veneer>:
    9538:	f85f f000 	ldr.w	pc, [pc]	; 953c <__tDiodeFilter_tickEfficient_veneer+0x4>
    953c:	08011d45 	.word	0x08011d45

00009540 <__tSquareLFO_setPulseWidth_veneer>:
    9540:	f85f f000 	ldr.w	pc, [pc]	; 9544 <__tSquareLFO_setPulseWidth_veneer+0x4>
    9544:	08013bb1 	.word	0x08013bb1

00009548 <__voiceChangeCheck_veneer>:
    9548:	f85f f000 	ldr.w	pc, [pc]	; 954c <__voiceChangeCheck_veneer+0x4>
    954c:	08000ac1 	.word	0x08000ac1

00009550 <__tEnvelopeFollower_tick_veneer>:
    9550:	f85f f000 	ldr.w	pc, [pc]	; 9554 <__tEnvelopeFollower_tick_veneer+0x4>
    9554:	0800df4d 	.word	0x0800df4d

00009558 <__tPBSineTriangle_tick_veneer>:
    9558:	f85f f000 	ldr.w	pc, [pc]	; 955c <__tPBSineTriangle_tick_veneer+0x4>
    955c:	0801334d 	.word	0x0801334d

00009560 <__tSawSquareLFO_setPhase_veneer>:
    9560:	f85f f000 	ldr.w	pc, [pc]	; 9564 <__tSawSquareLFO_setPhase_veneer+0x4>
    9564:	08013ced 	.word	0x08013ced

00009568 <__tSawSquareLFO_tick_veneer>:
    9568:	f85f f000 	ldr.w	pc, [pc]	; 956c <__tSawSquareLFO_tick_veneer+0x4>
    956c:	08013c85 	.word	0x08013c85

00009570 <__tExpSmooth_tick_veneer>:
    9570:	f85f f000 	ldr.w	pc, [pc]	; 9574 <__tExpSmooth_tick_veneer+0x4>
    9574:	0800f671 	.word	0x0800f671

00009578 <__tTString_mute_veneer>:
    9578:	f85f f000 	ldr.w	pc, [pc]	; 957c <__tTString_mute_veneer+0x4>
    957c:	080157b1 	.word	0x080157b1

00009580 <__tCrusher_setQuality_veneer>:
    9580:	f85f f000 	ldr.w	pc, [pc]	; 9584 <__tCrusher_setQuality_veneer+0x4>
    9584:	0800eb09 	.word	0x0800eb09

00009588 <__tExpSmooth_free_veneer>:
    9588:	f85f f000 	ldr.w	pc, [pc]	; 958c <__tExpSmooth_free_veneer+0x4>
    958c:	0800f60b 	.word	0x0800f60b

00009590 <__arm_sin_f32_veneer>:
    9590:	f85f f000 	ldr.w	pc, [pc]	; 9594 <__arm_sin_f32_veneer+0x4>
    9594:	080005ed 	.word	0x080005ed

00009598 <__tPBSawSquare_tick_veneer>:
    9598:	f85f f000 	ldr.w	pc, [pc]	; 959c <__tPBSawSquare_tick_veneer+0x4>
    959c:	08013859 	.word	0x08013859

000095a0 <__tTString_setTensionGain_veneer>:
    95a0:	f85f f000 	ldr.w	pc, [pc]	; 95a4 <__tTString_setTensionGain_veneer+0x4>
    95a4:	080158a1 	.word	0x080158a1

000095a8 <__tSineTriLFO_setPhase_veneer>:
    95a8:	f85f f000 	ldr.w	pc, [pc]	; 95ac <__tSineTriLFO_setPhase_veneer+0x4>
    95ac:	08013e67 	.word	0x08013e67

000095b0 <__tPickupNonLinearity_free_veneer>:
    95b0:	f85f f000 	ldr.w	pc, [pc]	; 95b4 <__tPickupNonLinearity_free_veneer+0x4>
    95b4:	08013f3f 	.word	0x08013f3f

000095b8 <__tStiffString_mute_veneer>:
    95b8:	f85f f000 	ldr.w	pc, [pc]	; 95bc <__tStiffString_mute_veneer+0x4>
    95bc:	0801615d 	.word	0x0801615d

000095c0 <__tOversampler_upsample_veneer>:
    95c0:	f85f f000 	ldr.w	pc, [pc]	; 95c4 <__tOversampler_upsample_veneer+0x4>
    95c4:	0800e8e1 	.word	0x0800e8e1

000095c8 <__tSVF_setFreqFast_veneer>:
    95c8:	f85f f000 	ldr.w	pc, [pc]	; 95cc <__tSVF_setFreqFast_veneer+0x4>
    95cc:	080100ad 	.word	0x080100ad

000095d0 <__tTString_setPickupModAmp_veneer>:
    95d0:	f85f f000 	ldr.w	pc, [pc]	; 95d4 <__tTString_setPickupModAmp_veneer+0x4>
    95d4:	08015799 	.word	0x08015799

000095d8 <__expf_veneer>:
    95d8:	f85f f000 	ldr.w	pc, [pc]	; 95dc <__expf_veneer+0x4>
    95dc:	08017d7d 	.word	0x08017d7d

000095e0 <__tLadderFilter_setQ_veneer>:
    95e0:	f85f f000 	ldr.w	pc, [pc]	; 95e4 <__tLadderFilter_setQ_veneer+0x4>
    95e4:	080127c9 	.word	0x080127c9

000095e8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    95e8:	f85f f000 	ldr.w	pc, [pc]	; 95ec <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    95ec:	0801464f 	.word	0x0801464f

000095f0 <__tSawSquareLFO_setFreq_veneer>:
    95f0:	f85f f000 	ldr.w	pc, [pc]	; 95f4 <__tSawSquareLFO_setFreq_veneer+0x4>
    95f4:	08013cc7 	.word	0x08013cc7

000095f8 <__tSineTriLFO_setFreq_veneer>:
    95f8:	f85f f000 	ldr.w	pc, [pc]	; 95fc <__tSineTriLFO_setFreq_veneer+0x4>
    95fc:	08013e41 	.word	0x08013e41

00009600 <__tADSRT_clear_veneer>:
    9600:	f85f f000 	ldr.w	pc, [pc]	; 9604 <__tADSRT_clear_veneer+0x4>
    9604:	0800f0af 	.word	0x0800f0af

00009608 <__tCrusher_setOperation_veneer>:
    9608:	f85f f000 	ldr.w	pc, [pc]	; 960c <__tCrusher_setOperation_veneer+0x4>
    960c:	0800eaf5 	.word	0x0800eaf5

00009610 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    9610:	f85f f000 	ldr.w	pc, [pc]	; 9614 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    9614:	08014375 	.word	0x08014375

00009618 <__tSimpleLivingString3_setTargetLev_veneer>:
    9618:	f85f f000 	ldr.w	pc, [pc]	; 961c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    961c:	08014369 	.word	0x08014369

00009620 <__tVZFilter_setFrequencyAndResonance_veneer>:
    9620:	f85f f000 	ldr.w	pc, [pc]	; 9624 <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    9624:	080107e9 	.word	0x080107e9

00009628 <__tStiffString_updateOutputWeights_veneer>:
    9628:	f85f f000 	ldr.w	pc, [pc]	; 962c <__tStiffString_updateOutputWeights_veneer+0x4>
    962c:	08015f11 	.word	0x08015f11

00009630 <__tExpSmooth_setDest_veneer>:
    9630:	f85f f000 	ldr.w	pc, [pc]	; 9634 <__tExpSmooth_setDest_veneer+0x4>
    9634:	0800f655 	.word	0x0800f655

00009638 <__mtofTableLookup_veneer>:
    9638:	f85f f000 	ldr.w	pc, [pc]	; 963c <__mtofTableLookup_veneer+0x4>
    963c:	08000711 	.word	0x08000711

00009640 <__tTString_setWindingsPerInch_veneer>:
    9640:	f85f f000 	ldr.w	pc, [pc]	; 9644 <__tTString_setWindingsPerInch_veneer+0x4>
    9644:	08015d25 	.word	0x08015d25

00009648 <__tVZFilterBell_setBandwidth_veneer>:
    9648:	f85f f000 	ldr.w	pc, [pc]	; 964c <__tVZFilterBell_setBandwidth_veneer+0x4>
    964c:	080115a5 	.word	0x080115a5

00009650 <__tTString_setHarmonicity_veneer>:
    9650:	f85f f000 	ldr.w	pc, [pc]	; 9654 <__tTString_setHarmonicity_veneer+0x4>
    9654:	08015c69 	.word	0x08015c69

00009658 <__tLinearDelay_setDelay_veneer>:
    9658:	f85f f000 	ldr.w	pc, [pc]	; 965c <__tLinearDelay_setDelay_veneer+0x4>
    965c:	0800e187 	.word	0x0800e187

00009660 <__tStiffString_setFreq_veneer>:
    9660:	f85f f000 	ldr.w	pc, [pc]	; 9664 <__tStiffString_setFreq_veneer+0x4>
    9664:	0801614d 	.word	0x0801614d

00009668 <__tTString_free_veneer>:
    9668:	f85f f000 	ldr.w	pc, [pc]	; 966c <__tTString_free_veneer+0x4>
    966c:	08014657 	.word	0x08014657

00009670 <__tVZFilterHS_tick_veneer>:
    9670:	f85f f000 	ldr.w	pc, [pc]	; 9674 <__tVZFilterHS_tick_veneer+0x4>
    9674:	080110c5 	.word	0x080110c5

00009678 <__tTString_setDecayInSeconds_veneer>:
    9678:	f85f f000 	ldr.w	pc, [pc]	; 967c <__tTString_setDecayInSeconds_veneer+0x4>
    967c:	080156dd 	.word	0x080156dd

00009680 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    9680:	f85f f000 	ldr.w	pc, [pc]	; 9684 <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    9684:	080162b1 	.word	0x080162b1

00009688 <__tStiffString_updateOscillators_veneer>:
    9688:	f85f f000 	ldr.w	pc, [pc]	; 968c <__tStiffString_updateOscillators_veneer+0x4>
    968c:	08015dc5 	.word	0x08015dc5

00009690 <__tVZFilterHS_setGain_veneer>:
    9690:	f85f f000 	ldr.w	pc, [pc]	; 9694 <__tVZFilterHS_setGain_veneer+0x4>
    9694:	080111c9 	.word	0x080111c9

00009698 <__tSquareLFO_setPhase_veneer>:
    9698:	f85f f000 	ldr.w	pc, [pc]	; 969c <__tSquareLFO_setPhase_veneer+0x4>
    969c:	08013c1d 	.word	0x08013c1d

000096a0 <__tVoc_setAspirationNoiseGain_veneer>:
    96a0:	f85f f000 	ldr.w	pc, [pc]	; 96a4 <__tVoc_setAspirationNoiseGain_veneer+0x4>
    96a4:	08017823 	.word	0x08017823

000096a8 <__tTString_initToPool_veneer>:
    96a8:	f85f f000 	ldr.w	pc, [pc]	; 96ac <__tTString_initToPool_veneer+0x4>
    96ac:	080150d5 	.word	0x080150d5

000096b0 <__tExpSmooth_setValAndDest_veneer>:
    96b0:	f85f f000 	ldr.w	pc, [pc]	; 96b4 <__tExpSmooth_setValAndDest_veneer+0x4>
    96b4:	0800f665 	.word	0x0800f665

000096b8 <__tPBSawSquare_setFreq_veneer>:
    96b8:	f85f f000 	ldr.w	pc, [pc]	; 96bc <__tPBSawSquare_setFreq_veneer+0x4>
    96bc:	080139a9 	.word	0x080139a9

000096c0 <__tVZFilterLS_tick_veneer>:
    96c0:	f85f f000 	ldr.w	pc, [pc]	; 96c4 <__tVZFilterLS_tick_veneer+0x4>
    96c4:	08010c91 	.word	0x08010c91

000096c8 <__tTiltFilter_tick_veneer>:
    96c8:	f85f f000 	ldr.w	pc, [pc]	; 96cc <__tTiltFilter_tick_veneer+0x4>
    96cc:	080128cb 	.word	0x080128cb

000096d0 <__tVZFilterLS_setGain_veneer>:
    96d0:	f85f f000 	ldr.w	pc, [pc]	; 96d4 <__tVZFilterLS_setGain_veneer+0x4>
    96d4:	08010d95 	.word	0x08010d95

000096d8 <__tVZFilterBR_setFreqFast_veneer>:
    96d8:	f85f f000 	ldr.w	pc, [pc]	; 96dc <__tVZFilterBR_setFreqFast_veneer+0x4>
    96dc:	08011ae5 	.word	0x08011ae5

000096e0 <__tSimpleLivingString3_setDampFreq_veneer>:
    96e0:	f85f f000 	ldr.w	pc, [pc]	; 96e4 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    96e4:	080142fd 	.word	0x080142fd

000096e8 <__tVoc_setTurbulenceNoiseGain_veneer>:
    96e8:	f85f f000 	ldr.w	pc, [pc]	; 96ec <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    96ec:	08017819 	.word	0x08017819

000096f0 <__tIntPhasor_setPhase_veneer>:
    96f0:	f85f f000 	ldr.w	pc, [pc]	; 96f4 <__tIntPhasor_setPhase_veneer+0x4>
    96f4:	08013b2d 	.word	0x08013b2d

000096f8 <__tExpSmooth_setFactor_veneer>:
    96f8:	f85f f000 	ldr.w	pc, [pc]	; 96fc <__tExpSmooth_setFactor_veneer+0x4>
    96fc:	0800f619 	.word	0x0800f619

00009700 <__tADSRT_setAttack_veneer>:
    9700:	f85f f000 	ldr.w	pc, [pc]	; 9704 <__tADSRT_setAttack_veneer+0x4>
    9704:	0800efb1 	.word	0x0800efb1

00009708 <__tPBSaw_setFreq_veneer>:
    9708:	f85f f000 	ldr.w	pc, [pc]	; 970c <__tPBSaw_setFreq_veneer+0x4>
    970c:	080137fd 	.word	0x080137fd

00009710 <__tStiffString_setPluckPosNoUpdate_veneer>:
    9710:	f85f f000 	ldr.w	pc, [pc]	; 9714 <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    9714:	08016269 	.word	0x08016269

00009718 <__fromAscii_veneer>:
    9718:	f85f f000 	ldr.w	pc, [pc]	; 971c <__fromAscii_veneer+0x4>
    971c:	0800245b 	.word	0x0800245b

00009720 <__tSimpleLivingString3_setLevMode_veneer>:
    9720:	f85f f000 	ldr.w	pc, [pc]	; 9724 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    9724:	0801438d 	.word	0x0801438d

00009728 <__tLadderFilter_setFreqFast_veneer>:
    9728:	f85f f000 	ldr.w	pc, [pc]	; 972c <__tLadderFilter_setFreqFast_veneer+0x4>
    972c:	08012749 	.word	0x08012749

00009730 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    9730:	f85f f000 	ldr.w	pc, [pc]	; 9734 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    9734:	0800abe1 	.word	0x0800abe1

00009738 <__setFilterTypes_veneer>:
    9738:	f85f f000 	ldr.w	pc, [pc]	; 973c <__setFilterTypes_veneer+0x4>
    973c:	08002175 	.word	0x08002175

00009740 <__tSimpleLivingString3_setDecay_veneer>:
    9740:	f85f f000 	ldr.w	pc, [pc]	; 9744 <__tSimpleLivingString3_setDecay_veneer+0x4>
    9744:	08014309 	.word	0x08014309

00009748 <__tIntPhasor_tick_veneer>:
    9748:	f85f f000 	ldr.w	pc, [pc]	; 974c <__tIntPhasor_tick_veneer+0x4>
    974c:	08013af5 	.word	0x08013af5

00009750 <__tTString_setBarPosition_veneer>:
    9750:	f85f f000 	ldr.w	pc, [pc]	; 9754 <__tTString_setBarPosition_veneer+0x4>
    9754:	080158a9 	.word	0x080158a9

00009758 <__tStiffString_tick_veneer>:
    9758:	f85f f000 	ldr.w	pc, [pc]	; 975c <__tStiffString_tick_veneer+0x4>
    975c:	080160c1 	.word	0x080160c1

00009760 <__audioFreeSynth_veneer>:
    9760:	f85f f000 	ldr.w	pc, [pc]	; 9764 <__audioFreeSynth_veneer+0x4>
    9764:	0800388d 	.word	0x0800388d

00009768 <__tCrusher_tick_veneer>:
    9768:	f85f f000 	ldr.w	pc, [pc]	; 976c <__tCrusher_tick_veneer+0x4>
    976c:	0800ea61 	.word	0x0800ea61

00009770 <__tSineTriLFO_tick_veneer>:
    9770:	f85f f000 	ldr.w	pc, [pc]	; 9774 <__tSineTriLFO_tick_veneer+0x4>
    9774:	08013e07 	.word	0x08013e07

00009778 <__tPickupNonLinearity_init_veneer>:
    9778:	f85f f000 	ldr.w	pc, [pc]	; 977c <__tPickupNonLinearity_init_veneer+0x4>
    977c:	08013f35 	.word	0x08013f35

00009780 <__tSimpleLivingString3_setFreq_veneer>:
    9780:	f85f f000 	ldr.w	pc, [pc]	; 9784 <__tSimpleLivingString3_setFreq_veneer+0x4>
    9784:	08014021 	.word	0x08014021

00009788 <__tPickupNonLinearity_tick_veneer>:
    9788:	f85f f000 	ldr.w	pc, [pc]	; 978c <__tPickupNonLinearity_tick_veneer+0x4>
    978c:	08013f4d 	.word	0x08013f4d

00009790 <__tCrusher_setSamplingRatio_veneer>:
    9790:	f85f f000 	ldr.w	pc, [pc]	; 9794 <__tCrusher_setSamplingRatio_veneer+0x4>
    9794:	0800eb81 	.word	0x0800eb81

00009798 <__tSineTriLFO_setShape_veneer>:
    9798:	f85f f000 	ldr.w	pc, [pc]	; 979c <__tSineTriLFO_setShape_veneer+0x4>
    979c:	08013e8d 	.word	0x08013e8d

000097a0 <__tDiodeFilter_setQ_veneer>:
    97a0:	f85f f000 	ldr.w	pc, [pc]	; 97a4 <__tDiodeFilter_setQ_veneer+0x4>
    97a4:	0801224d 	.word	0x0801224d

000097a8 <__tTString_setPeakFilterFreq_veneer>:
    97a8:	f85f f000 	ldr.w	pc, [pc]	; 97ac <__tTString_setPeakFilterFreq_veneer+0x4>
    97ac:	08015d55 	.word	0x08015d55

000097b0 <__tIntPhasor_setFreq_veneer>:
    97b0:	f85f f000 	ldr.w	pc, [pc]	; 97b4 <__tIntPhasor_setFreq_veneer+0x4>
    97b4:	08013b15 	.word	0x08013b15

000097b8 <__tADSRT_setRelease_veneer>:
    97b8:	f85f f000 	ldr.w	pc, [pc]	; 97bc <__tADSRT_setRelease_veneer+0x4>
    97bc:	0800f02d 	.word	0x0800f02d

000097c0 <__tSimpleLivingString3_free_veneer>:
    97c0:	f85f f000 	ldr.w	pc, [pc]	; 97c4 <__tSimpleLivingString3_free_veneer+0x4>
    97c4:	08013fdd 	.word	0x08013fdd

000097c8 <__tSimpleLivingString3_tick_veneer>:
    97c8:	f85f f000 	ldr.w	pc, [pc]	; 97cc <__tSimpleLivingString3_tick_veneer+0x4>
    97cc:	0801447f 	.word	0x0801447f

000097d0 <__tSVF_setQ_veneer>:
    97d0:	f85f f000 	ldr.w	pc, [pc]	; 97d4 <__tSVF_setQ_veneer+0x4>
    97d4:	08010145 	.word	0x08010145

000097d8 <__tSVF_tickLP_veneer>:
    97d8:	f85f f000 	ldr.w	pc, [pc]	; 97dc <__tSVF_tickLP_veneer+0x4>
    97dc:	0800ffe3 	.word	0x0800ffe3

000097e0 <__tExpSmooth_init_veneer>:
    97e0:	f85f f000 	ldr.w	pc, [pc]	; 97e4 <__tExpSmooth_init_veneer+0x4>
    97e4:	0800f601 	.word	0x0800f601

000097e8 <__tVZFilterBell_tick_veneer>:
    97e8:	f85f f000 	ldr.w	pc, [pc]	; 97ec <__tVZFilterBell_tick_veneer+0x4>
    97ec:	08011545 	.word	0x08011545

000097f0 <__tADSRT_setDecay_veneer>:
    97f0:	f85f f000 	ldr.w	pc, [pc]	; 97f4 <__tADSRT_setDecay_veneer+0x4>
    97f4:	0800efd9 	.word	0x0800efd9

000097f8 <__tVZFilter_setFreq_veneer>:
    97f8:	f85f f000 	ldr.w	pc, [pc]	; 97fc <__tVZFilter_setFreq_veneer+0x4>
    97fc:	080107ad 	.word	0x080107ad

00009800 <__tSawSquareLFO_setShape_veneer>:
    9800:	f85f f000 	ldr.w	pc, [pc]	; 9804 <__tSawSquareLFO_setShape_veneer+0x4>
    9804:	08013d13 	.word	0x08013d13

00009808 <__tTString_setFreq_veneer>:
    9808:	f85f f000 	ldr.w	pc, [pc]	; 980c <__tTString_setFreq_veneer+0x4>
    980c:	08015051 	.word	0x08015051

00009810 <__HAL_SPI_Abort_veneer>:
    9810:	f85f f000 	ldr.w	pc, [pc]	; 9814 <__HAL_SPI_Abort_veneer+0x4>
    9814:	0800ae2d 	.word	0x0800ae2d

00009818 <__tSVF_LP_setFreqFast_veneer>:
    9818:	f85f f000 	ldr.w	pc, [pc]	; 981c <__tSVF_LP_setFreqFast_veneer+0x4>
    981c:	0801031d 	.word	0x0801031d

00009820 <__tOversampler_downsample_veneer>:
    9820:	f85f f000 	ldr.w	pc, [pc]	; 9824 <__tOversampler_downsample_veneer+0x4>
    9824:	0800e97d 	.word	0x0800e97d

00009828 <__tADSRT_init_veneer>:
    9828:	f85f f000 	ldr.w	pc, [pc]	; 982c <__tADSRT_init_veneer+0x4>
    982c:	0800efa5 	.word	0x0800efa5

00009830 <__tSimpleLivingString3_pluck_veneer>:
    9830:	f85f f000 	ldr.w	pc, [pc]	; 9834 <__tSimpleLivingString3_pluck_veneer+0x4>
    9834:	0801439f 	.word	0x0801439f

00009838 <__tTString_setSlideGain_veneer>:
    9838:	f85f f000 	ldr.w	pc, [pc]	; 983c <__tTString_setSlideGain_veneer+0x4>
    983c:	080158d9 	.word	0x080158d9

00009840 <__tCycle_init_veneer>:
    9840:	f85f f000 	ldr.w	pc, [pc]	; 9844 <__tCycle_init_veneer+0x4>
    9844:	08012fd5 	.word	0x08012fd5

00009848 <__tTString_setFeedbackStrength_veneer>:
    9848:	f85f f000 	ldr.w	pc, [pc]	; 984c <__tTString_setFeedbackStrength_veneer+0x4>
    984c:	080159bd 	.word	0x080159bd

00009850 <__tStiffString_setFreqNoUpdate_veneer>:
    9850:	f85f f000 	ldr.w	pc, [pc]	; 9854 <__tStiffString_setFreqNoUpdate_veneer+0x4>
    9854:	080162a1 	.word	0x080162a1

00009858 <__tADSRT_setLeakFactor_veneer>:
    9858:	f85f f000 	ldr.w	pc, [pc]	; 985c <__tADSRT_setLeakFactor_veneer+0x4>
    985c:	0800f055 	.word	0x0800f055

00009860 <__tVoc_init_veneer>:
    9860:	f85f f000 	ldr.w	pc, [pc]	; 9864 <__tVoc_init_veneer+0x4>
    9864:	0801771f 	.word	0x0801771f

00009868 <__MX_SPI5_Init_veneer>:
    9868:	f85f f000 	ldr.w	pc, [pc]	; 986c <__MX_SPI5_Init_veneer+0x4>
    986c:	08002ebd 	.word	0x08002ebd

00009870 <__tVoc_tick_veneer>:
    9870:	f85f f000 	ldr.w	pc, [pc]	; 9874 <__tVoc_tick_veneer+0x4>
    9874:	08017729 	.word	0x08017729

00009878 <__tTString_setFeedbackReactionSpeed_veneer>:
    9878:	f85f f000 	ldr.w	pc, [pc]	; 987c <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    987c:	08015a01 	.word	0x08015a01

00009880 <__audioSwitchToSynth_veneer>:
    9880:	f85f f000 	ldr.w	pc, [pc]	; 9884 <__audioSwitchToSynth_veneer+0x4>
    9884:	080038c5 	.word	0x080038c5

00009888 <__tVZFilterHS_setResonance_veneer>:
    9888:	f85f f000 	ldr.w	pc, [pc]	; 988c <__tVZFilterHS_setResonance_veneer+0x4>
    988c:	08011299 	.word	0x08011299

00009890 <__tVoc_set_tenseness_veneer>:
    9890:	f85f f000 	ldr.w	pc, [pc]	; 9894 <__tVoc_set_tenseness_veneer+0x4>
    9894:	08017805 	.word	0x08017805

00009898 <__tADSRT_setSustain_veneer>:
    9898:	f85f f000 	ldr.w	pc, [pc]	; 989c <__tADSRT_setSustain_veneer+0x4>
    989c:	0800f001 	.word	0x0800f001

000098a0 <__tTString_setPeakFilterQ_veneer>:
    98a0:	f85f f000 	ldr.w	pc, [pc]	; 98a4 <__tTString_setPeakFilterQ_veneer+0x4>
    98a4:	08015d63 	.word	0x08015d63

000098a8 <__tVZFilterBell_setGain_veneer>:
    98a8:	f85f f000 	ldr.w	pc, [pc]	; 98ac <__tVZFilterBell_setGain_veneer+0x4>
    98ac:	08011851 	.word	0x08011851

000098b0 <__tTapeDelay_setDelay_veneer>:
    98b0:	f85f f000 	ldr.w	pc, [pc]	; 98b4 <__tTapeDelay_setDelay_veneer+0x4>
    98b4:	0800e735 	.word	0x0800e735

000098b8 <__tVZFilterHS_setFreqFast_veneer>:
    98b8:	f85f f000 	ldr.w	pc, [pc]	; 98bc <__tVZFilterHS_setFreqFast_veneer+0x4>
    98bc:	08011129 	.word	0x08011129

000098c0 <__tCycle_setFreq_veneer>:
    98c0:	f85f f000 	ldr.w	pc, [pc]	; 98c4 <__tCycle_setFreq_veneer+0x4>
    98c4:	0801303d 	.word	0x0801303d

000098c8 <__tPBPulse_setFreq_veneer>:
    98c8:	f85f f000 	ldr.w	pc, [pc]	; 98cc <__tPBPulse_setFreq_veneer+0x4>
    98cc:	08013695 	.word	0x08013695

000098d0 <__tVZFilterLS_setResonance_veneer>:
    98d0:	f85f f000 	ldr.w	pc, [pc]	; 98d4 <__tVZFilterLS_setResonance_veneer+0x4>
    98d4:	08010e6d 	.word	0x08010e6d

000098d8 <__tSimpleLivingString3_setLevStrength_veneer>:
    98d8:	f85f f000 	ldr.w	pc, [pc]	; 98dc <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    98dc:	08014381 	.word	0x08014381

000098e0 <__tTiltFilter_setTilt_veneer>:
    98e0:	f85f f000 	ldr.w	pc, [pc]	; 98e4 <__tTiltFilter_setTilt_veneer+0x4>
    98e4:	08012909 	.word	0x08012909

000098e8 <__tTString_setHarmonic_veneer>:
    98e8:	f85f f000 	ldr.w	pc, [pc]	; 98ec <__tTString_setHarmonic_veneer+0x4>
    98ec:	080159a9 	.word	0x080159a9

000098f0 <__tTriLFO_tick_veneer>:
    98f0:	f85f f000 	ldr.w	pc, [pc]	; 98f4 <__tTriLFO_tick_veneer+0x4>
    98f4:	08013d1d 	.word	0x08013d1d

000098f8 <__tVZFilterBR_tick_veneer>:
    98f8:	f85f f000 	ldr.w	pc, [pc]	; 98fc <__tVZFilterBR_tick_veneer+0x4>
    98fc:	08011a91 	.word	0x08011a91

00009900 <__tSVF_LP_tick_veneer>:
    9900:	f85f f000 	ldr.w	pc, [pc]	; 9904 <__tSVF_LP_tick_veneer+0x4>
    9904:	080102b7 	.word	0x080102b7

00009908 <__tanhf_veneer>:
    9908:	f85f f000 	ldr.w	pc, [pc]	; 990c <__tanhf_veneer+0x4>
    990c:	080186c9 	.word	0x080186c9

00009910 <__tTString_setPhantomHarmonicsGain_veneer>:
    9910:	f85f f000 	ldr.w	pc, [pc]	; 9914 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    9914:	080158d1 	.word	0x080158d1

00009918 <__tPBTriangle_tick_veneer>:
    9918:	f85f f000 	ldr.w	pc, [pc]	; 991c <__tPBTriangle_tick_veneer+0x4>
    991c:	080130ed 	.word	0x080130ed

00009920 <__tTString_setFilterFreqDirectly_veneer>:
    9920:	f85f f000 	ldr.w	pc, [pc]	; 9924 <__tTString_setFilterFreqDirectly_veneer+0x4>
    9924:	08015839 	.word	0x08015839

00009928 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    9928:	f85f f000 	ldr.w	pc, [pc]	; 992c <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    992c:	0801782d 	.word	0x0801782d

00009930 <__tVoc_set_velum_veneer>:
    9930:	f85f f000 	ldr.w	pc, [pc]	; 9934 <__tVoc_set_velum_veneer+0x4>
    9934:	0801780f 	.word	0x0801780f

00009938 <__tTString_setPickupFilterQ_veneer>:
    9938:	f85f f000 	ldr.w	pc, [pc]	; 993c <__tTString_setPickupFilterQ_veneer+0x4>
    993c:	08015d41 	.word	0x08015d41

00009940 <__tTString_setWoundOrUnwound_veneer>:
    9940:	f85f f000 	ldr.w	pc, [pc]	; 9944 <__tTString_setWoundOrUnwound_veneer+0x4>
    9944:	08015cd5 	.word	0x08015cd5

00009948 <__tVoc_rescaleDiameter_veneer>:
    9948:	f85f f000 	ldr.w	pc, [pc]	; 994c <__tVoc_rescaleDiameter_veneer+0x4>
    994c:	08017bd9 	.word	0x08017bd9

00009950 <__tVZFilterBR_setResonance_veneer>:
    9950:	f85f f000 	ldr.w	pc, [pc]	; 9954 <__tVZFilterBR_setResonance_veneer+0x4>
    9954:	08011b81 	.word	0x08011b81

00009958 <__tStiffString_setStiffnessNoUpdate_veneer>:
    9958:	f85f f000 	ldr.w	pc, [pc]	; 995c <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    995c:	08016211 	.word	0x08016211

00009960 <__tNoise_tick_veneer>:
    9960:	f85f f000 	ldr.w	pc, [pc]	; 9964 <__tNoise_tick_veneer+0x4>
    9964:	08013a09 	.word	0x08013a09

00009968 <__tSquareLFO_tick_veneer>:
    9968:	f85f f000 	ldr.w	pc, [pc]	; 996c <__tSquareLFO_tick_veneer+0x4>
    996c:	08013b51 	.word	0x08013b51

00009970 <__setOscilllatorShapes_veneer>:
    9970:	f85f f000 	ldr.w	pc, [pc]	; 9974 <__setOscilllatorShapes_veneer+0x4>
    9974:	0800210d 	.word	0x0800210d

00009978 <__tVZFilter_tickEfficient_veneer>:
    9978:	f85f f000 	ldr.w	pc, [pc]	; 997c <__tVZFilter_tickEfficient_veneer+0x4>
    997c:	0801049d 	.word	0x0801049d

00009980 <__changeOversampling_veneer>:
    9980:	f85f f000 	ldr.w	pc, [pc]	; 9984 <__changeOversampling_veneer+0x4>
    9984:	080039a1 	.word	0x080039a1

00009988 <__tTString_tick_veneer>:
    9988:	f85f f000 	ldr.w	pc, [pc]	; 998c <__tTString_tick_veneer+0x4>
    998c:	08014765 	.word	0x08014765

00009990 <__tADSRT_tick_veneer>:
    9990:	f85f f000 	ldr.w	pc, [pc]	; 9994 <__tADSRT_tick_veneer+0x4>
    9994:	0800f0bd 	.word	0x0800f0bd

00009998 <__tPBTriangle_setSkew_veneer>:
    9998:	f85f f000 	ldr.w	pc, [pc]	; 999c <__tPBTriangle_setSkew_veneer+0x4>
    999c:	0801328d 	.word	0x0801328d

000099a0 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    99a0:	f85f f000 	ldr.w	pc, [pc]	; 99a4 <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    99a4:	08017851 	.word	0x08017851

000099a8 <__tPBTriangle_setFreq_veneer>:
    99a8:	f85f f000 	ldr.w	pc, [pc]	; 99ac <__tPBTriangle_setFreq_veneer+0x4>
    99ac:	08013275 	.word	0x08013275

000099b0 <__setLFOShapes_veneer>:
    99b0:	f85f f000 	ldr.w	pc, [pc]	; 99b4 <__setLFOShapes_veneer+0x4>
    99b4:	080022e5 	.word	0x080022e5

000099b8 <__tTString_setPickupPos_veneer>:
    99b8:	f85f f000 	ldr.w	pc, [pc]	; 99bc <__tTString_setPickupPos_veneer+0x4>
    99bc:	08015789 	.word	0x08015789

000099c0 <__tVZFilterBell_setFreqFast_veneer>:
    99c0:	f85f f000 	ldr.w	pc, [pc]	; 99c4 <__tVZFilterBell_setFreqFast_veneer+0x4>
    99c4:	080116d9 	.word	0x080116d9

000099c8 <__tPBSineTriangle_setFreq_veneer>:
    99c8:	f85f f000 	ldr.w	pc, [pc]	; 99cc <__tPBSineTriangle_setFreq_veneer+0x4>
    99cc:	080134d9 	.word	0x080134d9

000099d0 <__tVoc_set_tongue_shape_and_touch_veneer>:
    99d0:	f85f f000 	ldr.w	pc, [pc]	; 99d4 <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    99d4:	08017b11 	.word	0x08017b11

000099d8 <__tTriLFO_setPhase_veneer>:
    99d8:	f85f f000 	ldr.w	pc, [pc]	; 99dc <__tTriLFO_setPhase_veneer+0x4>
    99dc:	08013dbb 	.word	0x08013dbb

000099e0 <__tADSRT_off_veneer>:
    99e0:	f85f f000 	ldr.w	pc, [pc]	; 99e4 <__tADSRT_off_veneer+0x4>
    99e4:	0800f09f 	.word	0x0800f09f

000099e8 <__tVoc_setDoubleComputeFlag_veneer>:
    99e8:	f85f f000 	ldr.w	pc, [pc]	; 99ec <__tVoc_setDoubleComputeFlag_veneer+0x4>
    99ec:	080177e1 	.word	0x080177e1

000099f0 <__tExpSmooth_setVal_veneer>:
    99f0:	f85f f000 	ldr.w	pc, [pc]	; 99f4 <__tExpSmooth_setVal_veneer+0x4>
    99f4:	0800f65d 	.word	0x0800f65d

000099f8 <__tPBPulse_tick_veneer>:
    99f8:	f85f f000 	ldr.w	pc, [pc]	; 99fc <__tPBPulse_tick_veneer+0x4>
    99fc:	08013559 	.word	0x08013559

00009a00 <__tCycle_setPhase_veneer>:
    9a00:	f85f f000 	ldr.w	pc, [pc]	; 9a04 <__tCycle_setPhase_veneer+0x4>
    9a04:	08013055 	.word	0x08013055

00009a08 <__tVoc_setFreq_veneer>:
    9a08:	f85f f000 	ldr.w	pc, [pc]	; 9a0c <__tVoc_setFreq_veneer+0x4>
    9a0c:	080177e7 	.word	0x080177e7

00009a10 <__tVZFilterBell_setFreq_veneer>:
    9a10:	f85f f000 	ldr.w	pc, [pc]	; 9a14 <__tVZFilterBell_setFreq_veneer+0x4>
    9a14:	080115ad 	.word	0x080115ad

00009a18 <__tCrusher_setRound_veneer>:
    9a18:	f85f f000 	ldr.w	pc, [pc]	; 9a1c <__tCrusher_setRound_veneer+0x4>
    9a1c:	0800eb79 	.word	0x0800eb79

00009a20 <__tStiffString_setPickupPosNoUpdate_veneer>:
    9a20:	f85f f000 	ldr.w	pc, [pc]	; 9a24 <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    9a24:	08016231 	.word	0x08016231

00009a28 <__tTString_setPickupAmount_veneer>:
    9a28:	f85f f000 	ldr.w	pc, [pc]	; 9a2c <__tTString_setPickupAmount_veneer+0x4>
    9a2c:	08015791 	.word	0x08015791

00009a30 <__tSVF_tickHP_veneer>:
    9a30:	f85f f000 	ldr.w	pc, [pc]	; 9a34 <__tSVF_tickHP_veneer+0x4>
    9a34:	0800ff43 	.word	0x0800ff43

00009a38 <__tStiffString_setDecayNoUpdate_veneer>:
    9a38:	f85f f000 	ldr.w	pc, [pc]	; 9a3c <__tStiffString_setDecayNoUpdate_veneer+0x4>
    9a3c:	080162a9 	.word	0x080162a9

00009a40 <__tTString_pluck_veneer>:
    9a40:	f85f f000 	ldr.w	pc, [pc]	; 9a44 <__tTString_pluck_veneer+0x4>
    9a44:	08015a41 	.word	0x08015a41

00009a48 <__tTString_setInharmonic_veneer>:
    9a48:	f85f f000 	ldr.w	pc, [pc]	; 9a4c <__tTString_setInharmonic_veneer+0x4>
    9a4c:	08015cbf 	.word	0x08015cbf

00009a50 <__tHighpass_tick_veneer>:
    9a50:	f85f f000 	ldr.w	pc, [pc]	; 9a54 <__tHighpass_tick_veneer+0x4>
    9a54:	08010447 	.word	0x08010447

00009a58 <__tTString_setOpenStringFrequency_veneer>:
    9a58:	f85f f000 	ldr.w	pc, [pc]	; 9a5c <__tTString_setOpenStringFrequency_veneer+0x4>
    9a5c:	080158b9 	.word	0x080158b9

00009a60 <__tSVF_tickBP_veneer>:
    9a60:	f85f f000 	ldr.w	pc, [pc]	; 9a64 <__tSVF_tickBP_veneer+0x4>
    9a64:	0800ff9b 	.word	0x0800ff9b

00009a68 <__dbToATableLookup_veneer>:
    9a68:	f85f f000 	ldr.w	pc, [pc]	; 9a6c <__dbToATableLookup_veneer+0x4>
    9a6c:	0800067d 	.word	0x0800067d

00009a70 <__setEffectsFunctions_veneer>:
    9a70:	f85f f000 	ldr.w	pc, [pc]	; 9a74 <__setEffectsFunctions_veneer+0x4>
    9a74:	08001b39 	.word	0x08001b39

00009a78 <__tVZFilterBR_setGain_veneer>:
    9a78:	f85f f000 	ldr.w	pc, [pc]	; 9a7c <__tVZFilterBR_setGain_veneer+0x4>
    9a7c:	08011b79 	.word	0x08011b79

00009a80 <__tStiffString_free_veneer>:
    9a80:	f85f f000 	ldr.w	pc, [pc]	; 9a84 <__tStiffString_free_veneer+0x4>
    9a84:	08015d79 	.word	0x08015d79

00009a88 <__tPBSawSquare_setShape_veneer>:
    9a88:	f85f f000 	ldr.w	pc, [pc]	; 9a8c <__tPBSawSquare_setShape_veneer+0x4>
    9a8c:	080139c1 	.word	0x080139c1

00009a90 <__tSimpleLivingString3_initToPool_veneer>:
    9a90:	f85f f000 	ldr.w	pc, [pc]	; 9a94 <__tSimpleLivingString3_initToPool_veneer+0x4>
    9a94:	080140e1 	.word	0x080140e1

00009a98 <__HAL_SPI_Receive_DMA_veneer>:
    9a98:	f85f f000 	ldr.w	pc, [pc]	; 9a9c <__HAL_SPI_Receive_DMA_veneer+0x4>
    9a9c:	0800aa19 	.word	0x0800aa19

00009aa0 <__tTString_setRippleDepth_veneer>:
    9aa0:	f85f f000 	ldr.w	pc, [pc]	; 9aa4 <__tTString_setRippleDepth_veneer+0x4>
    9aa4:	080158e1 	.word	0x080158e1

00009aa8 <__tADSRT_on_veneer>:
    9aa8:	f85f f000 	ldr.w	pc, [pc]	; 9aac <__tADSRT_on_veneer+0x4>
    9aac:	0800f079 	.word	0x0800f079

00009ab0 <__tPBSaw_tick_veneer>:
    9ab0:	f85f f000 	ldr.w	pc, [pc]	; 9ab4 <__tPBSaw_tick_veneer+0x4>
    9ab4:	08013749 	.word	0x08013749

00009ab8 <__tVZFilterLS_setFreqFast_veneer>:
    9ab8:	f85f f000 	ldr.w	pc, [pc]	; 9abc <__tVZFilterLS_setFreqFast_veneer+0x4>
    9abc:	08010cf5 	.word	0x08010cf5

00009ac0 <__MX_SPI1_Init_veneer>:
    9ac0:	f85f f000 	ldr.w	pc, [pc]	; 9ac4 <__MX_SPI1_Init_veneer+0x4>
    9ac4:	08002e71 	.word	0x08002e71

00009ac8 <__tADSRT_tickNoInterp_veneer>:
    9ac8:	f85f f000 	ldr.w	pc, [pc]	; 9acc <__tADSRT_tickNoInterp_veneer+0x4>
    9acc:	0800f3fd 	.word	0x0800f3fd

00009ad0 <__tLinearDelay_tick_veneer>:
    9ad0:	f85f f000 	ldr.w	pc, [pc]	; 9ad4 <__tLinearDelay_tick_veneer+0x4>
    9ad4:	0800e079 	.word	0x0800e079

00009ad8 <__tCycle_tick_veneer>:
    9ad8:	f85f f000 	ldr.w	pc, [pc]	; 9adc <__tCycle_tick_veneer+0x4>
    9adc:	08012fed 	.word	0x08012fed

00009ae0 <__tCompressor_tickWithTableHardKnee_veneer>:
    9ae0:	f85f f000 	ldr.w	pc, [pc]	; 9ae4 <__tCompressor_tickWithTableHardKnee_veneer+0x4>
    9ae4:	0800ec35 	.word	0x0800ec35

00009ae8 <__tTriLFO_setFreq_veneer>:
    9ae8:	f85f f000 	ldr.w	pc, [pc]	; 9aec <__tTriLFO_setFreq_veneer+0x4>
    9aec:	08013d55 	.word	0x08013d55

00009af0 <__tTString_setPickupModFreq_veneer>:
    9af0:	f85f f000 	ldr.w	pc, [pc]	; 9af4 <__tTString_setPickupModFreq_veneer+0x4>
    9af4:	080157a1 	.word	0x080157a1

00009af8 <__tDiodeFilter_setFreqFast_veneer>:
    9af8:	f85f f000 	ldr.w	pc, [pc]	; 9afc <__tDiodeFilter_setFreqFast_veneer+0x4>
    9afc:	080121a5 	.word	0x080121a5

00009b00 <__tPBPulse_setWidth_veneer>:
    9b00:	f85f f000 	ldr.w	pc, [pc]	; 9b04 <__tPBPulse_setWidth_veneer+0x4>
    9b04:	080136ad 	.word	0x080136ad

00009b08 <__tLadderFilter_tick_veneer>:
    9b08:	f85f f000 	ldr.w	pc, [pc]	; 9b0c <__tLadderFilter_tick_veneer+0x4>
    9b0c:	08012489 	.word	0x08012489

00009b10 <__tStiffString_init_veneer>:
    9b10:	f85f f000 	ldr.w	pc, [pc]	; 9b14 <__tStiffString_init_veneer+0x4>
    9b14:	080160b5 	.word	0x080160b5

00009b18 <__tVoc_set_tractLength_veneer>:
    9b18:	f85f f000 	ldr.w	pc, [pc]	; 9b1c <__tVoc_set_tractLength_veneer+0x4>
    9b1c:	080177f9 	.word	0x080177f9

00009b20 <__tTString_setPickupFilterFreq_veneer>:
    9b20:	f85f f000 	ldr.w	pc, [pc]	; 9b24 <__tTString_setPickupFilterFreq_veneer+0x4>
    9b24:	08015d35 	.word	0x08015d35

00009b28 <__tStiffString_pluck_veneer>:
    9b28:	f85f f000 	ldr.w	pc, [pc]	; 9b2c <__tStiffString_pluck_veneer+0x4>
    9b2c:	08016169 	.word	0x08016169
