
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2f0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018530  0801b588  0801b588  0002b588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033ab8  08033ab8  0005018c  2**0
                  CONTENTS
  4 .ARM          00000000  08033ab8  08033ab8  0005018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08033ab8  08033ab8  0005018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033ab8  08033ab8  00043ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033abc  08033abc  00043abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08033ac0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019af4  20000190  08033c4c  00050190  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019c84  08033c4c  00059c84  2**0
                  ALLOC
 11 .RAM_D1       0005ae80  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       00001294  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0005018c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006f44f  00000000  00000000  000501ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008eb4  00000000  00000000  000bf609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00063cd7  00000000  00000000  000c84bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003090  00000000  00000000  0012c198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c530  00000000  00000000  0012f228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004f593  00000000  00000000  0013b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0000f124  00000000  00000000  0018aceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c5  00000000  00000000  00199e0f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a78c  00000000  00000000  00199ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000190 	.word	0x20000190
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b570 	.word	0x0801b570

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000194 	.word	0x20000194
 80002d4:	0801b570 	.word	0x0801b570

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002ec:	4cd4      	ldr	r4, [pc, #848]	; (8000640 <audioInit+0x358>)
{
 80002ee:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002f0:	ed9f 0ad4 	vldr	s0, [pc, #848]	; 8000644 <audioInit+0x35c>
 80002f4:	f24e 2290 	movw	r2, #58000	; 0xe290
 80002f8:	4620      	mov	r0, r4
 80002fa:	49d3      	ldr	r1, [pc, #844]	; (8000648 <audioInit+0x360>)
 80002fc:	4bd3      	ldr	r3, [pc, #844]	; (800064c <audioInit+0x364>)
{
 80002fe:	ed2d 8b08 	vpush	{d8-d11}
 8000302:	b085      	sub	sp, #20

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
 8000304:	ed9f 8ad2 	vldr	s16, [pc, #840]	; 8000650 <audioInit+0x368>
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000308:	f018 ffa0 	bl	801924c <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800030c:	4623      	mov	r3, r4
 800030e:	4ad1      	ldr	r2, [pc, #836]	; (8000654 <audioInit+0x36c>)
{
 8000310:	ee0b 5a90 	vmov	s23, r5
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000314:	49d0      	ldr	r1, [pc, #832]	; (8000658 <audioInit+0x370>)
 8000316:	48d1      	ldr	r0, [pc, #836]	; (800065c <audioInit+0x374>)
 8000318:	f014 f9dc 	bl	80146d4 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800031c:	4623      	mov	r3, r4
 800031e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000322:	49cf      	ldr	r1, [pc, #828]	; (8000660 <audioInit+0x378>)
 8000324:	48cf      	ldr	r0, [pc, #828]	; (8000664 <audioInit+0x37c>)
 8000326:	f014 f9d5 	bl	80146d4 <tMempool_init>
	leaf.clearOnAllocation = 1;
 800032a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800032c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000334:	eef0 0a48 	vmov.f32	s1, s16
 8000338:	eddf 1acb 	vldr	s3, [pc, #812]	; 8000668 <audioInit+0x380>
 800033c:	ed9f 0acb 	vldr	s0, [pc, #812]	; 800066c <audioInit+0x384>
 8000340:	48cb      	ldr	r0, [pc, #812]	; (8000670 <audioInit+0x388>)
	leaf.clearOnAllocation = 1;
 8000342:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000344:	f013 ffb8 	bl	80142b8 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000348:	4bca      	ldr	r3, [pc, #808]	; (8000674 <audioInit+0x38c>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800034a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800034e:	4aca      	ldr	r2, [pc, #808]	; (8000678 <audioInit+0x390>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000350:	eddf 0aca 	vldr	s1, [pc, #808]	; 800067c <audioInit+0x394>
 8000354:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8000680 <audioInit+0x398>
 8000358:	48ca      	ldr	r0, [pc, #808]	; (8000684 <audioInit+0x39c>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800035a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800035c:	f014 f810 	bl	8014380 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000360:	eddf 9ac9 	vldr	s19, [pc, #804]	; 8000688 <audioInit+0x3a0>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000364:	4bc9      	ldr	r3, [pc, #804]	; (800068c <audioInit+0x3a4>)
 8000366:	4aca      	ldr	r2, [pc, #808]	; (8000690 <audioInit+0x3a8>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000368:	ed9f 9aca 	vldr	s18, [pc, #808]	; 8000694 <audioInit+0x3ac>
        x += increment;
 800036c:	eddf 8aca 	vldr	s17, [pc, #808]	; 8000698 <audioInit+0x3b0>
 8000370:	4cca      	ldr	r4, [pc, #808]	; (800069c <audioInit+0x3b4>)
 8000372:	4dcb      	ldr	r5, [pc, #812]	; (80006a0 <audioInit+0x3b8>)
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000374:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000376:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800037a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800037e:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
 8000382:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000386:	ee20 0a29 	vmul.f32	s0, s0, s19
 800038a:	f014 f85b 	bl	8014444 <ftom>
 800038e:	ee30 0a49 	vsub.f32	s0, s0, s18
 8000392:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
 8000396:	42ac      	cmp	r4, r5
 8000398:	d1ed      	bne.n	8000376 <audioInit+0x8e>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800039a:	2102      	movs	r1, #2
 800039c:	48c1      	ldr	r0, [pc, #772]	; (80006a4 <audioInit+0x3bc>)
 800039e:	f008 f9f7 	bl	8008790 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a2:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003a4:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a6:	48c0      	ldr	r0, [pc, #768]	; (80006a8 <audioInit+0x3c0>)
 80003a8:	f008 f9f2 	bl	8008790 <HAL_GPIO_ReadPin>
 80003ac:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80003ae:	2101      	movs	r1, #1
 80003b0:	48be      	ldr	r0, [pc, #760]	; (80006ac <audioInit+0x3c4>)
 80003b2:	f008 f9ed 	bl	8008790 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 80003b6:	4bbe      	ldr	r3, [pc, #760]	; (80006b0 <audioInit+0x3c8>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003b8:	00a4      	lsls	r4, r4, #2
 80003ba:	49be      	ldr	r1, [pc, #760]	; (80006b4 <audioInit+0x3cc>)
	if (numStrings == 6)
 80003bc:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003be:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
 80003c2:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003c4:	4418      	add	r0, r3
 80003c6:	b2c3      	uxtb	r3, r0
 80003c8:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
 80003ca:	f000 82f2 	beq.w	80009b2 <audioInit+0x6ca>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 80003ce:	2a0a      	cmp	r2, #10
 80003d0:	f000 82ea 	beq.w	80009a8 <audioInit+0x6c0>
		}
	}
	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	48b8      	ldr	r0, [pc, #736]	; (80006b8 <audioInit+0x3d0>)
		numStringsThisBoard = 2;
 80003d8:	2102      	movs	r1, #2
 80003da:	4ab8      	ldr	r2, [pc, #736]	; (80006bc <audioInit+0x3d4>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003dc:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
 80003de:	7011      	strb	r1, [r2, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 80003e0:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80003e4:	4996      	ldr	r1, [pc, #600]	; (8000640 <audioInit+0x358>)
 80003e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003ea:	48b5      	ldr	r0, [pc, #724]	; (80006c0 <audioInit+0x3d8>)
 80003ec:	f012 fade 	bl	80129ac <tSlide_init>

		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 80003f0:	4cb4      	ldr	r4, [pc, #720]	; (80006c4 <audioInit+0x3dc>)
 80003f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003f6:	4992      	ldr	r1, [pc, #584]	; (8000640 <audioInit+0x358>)
 80003f8:	eddf 0ab3 	vldr	s1, [pc, #716]	; 80006c8 <audioInit+0x3e0>
 80003fc:	f104 0610 	add.w	r6, r4, #16
 8000400:	48b2      	ldr	r0, [pc, #712]	; (80006cc <audioInit+0x3e4>)
 8000402:	f012 fa93 	bl	801292c <tExpSmooth_init>
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 8000406:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800040a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800040e:	498c      	ldr	r1, [pc, #560]	; (8000640 <audioInit+0x358>)
 8000410:	48af      	ldr	r0, [pc, #700]	; (80006d0 <audioInit+0x3e8>)
 8000412:	f012 facb 	bl	80129ac <tSlide_init>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000416:	4d8a      	ldr	r5, [pc, #552]	; (8000640 <audioInit+0x358>)
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000418:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800041c:	4988      	ldr	r1, [pc, #544]	; (8000640 <audioInit+0x358>)
 800041e:	eddf 0aaa 	vldr	s1, [pc, #680]	; 80006c8 <audioInit+0x3e0>
 8000422:	48ac      	ldr	r0, [pc, #688]	; (80006d4 <audioInit+0x3ec>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000424:	eddf 8aac 	vldr	s17, [pc, #688]	; 80006d8 <audioInit+0x3f0>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000428:	f012 fa80 	bl	801292c <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800042c:	ed9f 8a88 	vldr	s16, [pc, #544]	; 8000650 <audioInit+0x368>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000430:	4983      	ldr	r1, [pc, #524]	; (8000640 <audioInit+0x358>)
 8000432:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80006d8 <audioInit+0x3f0>
 8000436:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8000650 <audioInit+0x368>
 800043a:	48a8      	ldr	r0, [pc, #672]	; (80006dc <audioInit+0x3f4>)
 800043c:	f012 fa76 	bl	801292c <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000440:	4620      	mov	r0, r4
	for (int i = 0; i < 4; i++)
 8000442:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000444:	eef0 0a68 	vmov.f32	s1, s17
 8000448:	4629      	mov	r1, r5
 800044a:	eeb0 0a48 	vmov.f32	s0, s16
 800044e:	f012 fa6d 	bl	801292c <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 8000452:	42b4      	cmp	r4, r6
 8000454:	d1f4      	bne.n	8000440 <audioInit+0x158>
 8000456:	2600      	movs	r6, #0
 8000458:	4ba1      	ldr	r3, [pc, #644]	; (80006e0 <audioInit+0x3f8>)
 800045a:	f8df b314 	ldr.w	fp, [pc, #788]	; 8000770 <audioInit+0x488>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 800045e:	4c78      	ldr	r4, [pc, #480]	; (8000640 <audioInit+0x358>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000460:	eddf 8aa0 	vldr	s17, [pc, #640]	; 80006e4 <audioInit+0x3fc>
 8000464:	ed9f baa0 	vldr	s22, [pc, #640]	; 80006e8 <audioInit+0x400>
		}

		for (int i = 0; i < NUM_FILT; i++)
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000468:	eddf 9aa0 	vldr	s19, [pc, #640]	; 80006ec <audioInit+0x404>
 800046c:	ed9f 8aa0 	vldr	s16, [pc, #640]	; 80006f0 <audioInit+0x408>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000470:	ed9f aaa0 	vldr	s20, [pc, #640]	; 80006f4 <audioInit+0x40c>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000474:	e9cd 3600 	strd	r3, r6, [sp]
    float x = 0.0f;
 8000478:	2500      	movs	r5, #0
			tMBSaw_init(&saw[i][v],  &leaf);
 800047a:	4b9f      	ldr	r3, [pc, #636]	; (80006f8 <audioInit+0x410>)
 800047c:	4621      	mov	r1, r4
 800047e:	1998      	adds	r0, r3, r6
 8000480:	4428      	add	r0, r5
 8000482:	f017 f929 	bl	80176d8 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 8000486:	4b9d      	ldr	r3, [pc, #628]	; (80006fc <audioInit+0x414>)
 8000488:	4621      	mov	r1, r4
 800048a:	1998      	adds	r0, r3, r6
 800048c:	4428      	add	r0, r5
 800048e:	f014 fa01 	bl	8014894 <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8000492:	4b9b      	ldr	r3, [pc, #620]	; (8000700 <audioInit+0x418>)
 8000494:	4621      	mov	r1, r4
 8000496:	1998      	adds	r0, r3, r6
 8000498:	4428      	add	r0, r5
 800049a:	f014 f99b 	bl	80147d4 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 800049e:	4b99      	ldr	r3, [pc, #612]	; (8000704 <audioInit+0x41c>)
 80004a0:	4621      	mov	r1, r4
 80004a2:	1998      	adds	r0, r3, r6
 80004a4:	4428      	add	r0, r5
 80004a6:	f014 ffe1 	bl	801546c <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 80004aa:	4b97      	ldr	r3, [pc, #604]	; (8000708 <audioInit+0x420>)
 80004ac:	4621      	mov	r1, r4
 80004ae:	1998      	adds	r0, r3, r6
 80004b0:	4428      	add	r0, r5
 80004b2:	f017 fbcf 	bl	8017c54 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 80004b6:	4b95      	ldr	r3, [pc, #596]	; (800070c <audioInit+0x424>)
 80004b8:	4621      	mov	r1, r4
 80004ba:	1998      	adds	r0, r3, r6
 80004bc:	4428      	add	r0, r5
 80004be:	f016 f84b 	bl	8016558 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004c2:	4b93      	ldr	r3, [pc, #588]	; (8000710 <audioInit+0x428>)
 80004c4:	eef0 0a68 	vmov.f32	s1, s17
 80004c8:	4621      	mov	r1, r4
 80004ca:	1998      	adds	r0, r3, r6
 80004cc:	eeb0 0a4b 	vmov.f32	s0, s22
 80004d0:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 80004d2:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004d4:	f012 fa2a 	bl	801292c <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 80004d8:	2d18      	cmp	r5, #24
 80004da:	d1ce      	bne.n	800047a <audioInit+0x192>
 80004dc:	4635      	mov	r5, r6
 80004de:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80004e2:	4b8c      	ldr	r3, [pc, #560]	; (8000714 <audioInit+0x42c>)
 80004e4:	eef0 0a69 	vmov.f32	s1, s19
 80004e8:	eeb0 0a48 	vmov.f32	s0, s16
 80004ec:	2101      	movs	r1, #1
 80004ee:	1958      	adds	r0, r3, r5
 80004f0:	4622      	mov	r2, r4
 80004f2:	f012 fa9d 	bl	8012a30 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <audioInit+0x430>)
 80004f8:	eef0 0a69 	vmov.f32	s1, s19
 80004fc:	4622      	mov	r2, r4
 80004fe:	1958      	adds	r0, r3, r5
 8000500:	eeb0 0a48 	vmov.f32	s0, s16
 8000504:	2100      	movs	r1, #0
 8000506:	f012 fa93 	bl	8012a30 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 800050a:	4b84      	ldr	r3, [pc, #528]	; (800071c <audioInit+0x434>)
 800050c:	4622      	mov	r2, r4
 800050e:	eef0 0a69 	vmov.f32	s1, s19
 8000512:	1958      	adds	r0, r3, r5
 8000514:	eeb0 0a48 	vmov.f32	s0, s16
 8000518:	2102      	movs	r1, #2
 800051a:	f012 fa89 	bl	8012a30 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 800051e:	4b80      	ldr	r3, [pc, #512]	; (8000720 <audioInit+0x438>)
 8000520:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000524:	4621      	mov	r1, r4
 8000526:	1958      	adds	r0, r3, r5
 8000528:	eeb0 0a48 	vmov.f32	s0, s16
 800052c:	f013 f888 	bl	8013640 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000530:	4b7c      	ldr	r3, [pc, #496]	; (8000724 <audioInit+0x43c>)
 8000532:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000536:	4622      	mov	r2, r4
 8000538:	1958      	adds	r0, r3, r5
 800053a:	eeb0 0a48 	vmov.f32	s0, s16
 800053e:	2105      	movs	r1, #5
 8000540:	f012 fda2 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8000544:	4b78      	ldr	r3, [pc, #480]	; (8000728 <audioInit+0x440>)
 8000546:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800054a:	4622      	mov	r2, r4
 800054c:	1958      	adds	r0, r3, r5
 800054e:	eeb0 0a48 	vmov.f32	s0, s16
 8000552:	2106      	movs	r1, #6
 8000554:	f012 fd98 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8000558:	4b74      	ldr	r3, [pc, #464]	; (800072c <audioInit+0x444>)
 800055a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800055e:	4622      	mov	r2, r4
 8000560:	1958      	adds	r0, r3, r5
 8000562:	eeb0 0a48 	vmov.f32	s0, s16
 8000566:	2107      	movs	r1, #7
 8000568:	f012 fd8e 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800056c:	4b70      	ldr	r3, [pc, #448]	; (8000730 <audioInit+0x448>)
 800056e:	4622      	mov	r2, r4
 8000570:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000574:	1958      	adds	r0, r3, r5
 8000576:	eeb0 0a48 	vmov.f32	s0, s16
 800057a:	2104      	movs	r1, #4
 800057c:	f012 fd84 	bl	8013088 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000580:	4b6c      	ldr	r3, [pc, #432]	; (8000734 <audioInit+0x44c>)
 8000582:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000586:	4621      	mov	r1, r4
 8000588:	1958      	adds	r0, r3, r5
 800058a:	eeb0 0a48 	vmov.f32	s0, s16
 800058e:	f013 fbeb 	bl	8013d68 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000592:	4b69      	ldr	r3, [pc, #420]	; (8000738 <audioInit+0x450>)
 8000594:	eef0 0a68 	vmov.f32	s1, s17
 8000598:	4621      	mov	r1, r4
 800059a:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 800059c:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 800059e:	eeb0 0a4b 	vmov.f32	s0, s22
 80005a2:	f012 f9c3 	bl	801292c <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80005a6:	42bd      	cmp	r5, r7
 80005a8:	d19b      	bne.n	80004e2 <audioInit+0x1fa>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005aa:	4b64      	ldr	r3, [pc, #400]	; (800073c <audioInit+0x454>)
 80005ac:	2500      	movs	r5, #0
 80005ae:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005b2:	4b63      	ldr	r3, [pc, #396]	; (8000740 <audioInit+0x458>)
 80005b4:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005b6:	eb08 0005 	add.w	r0, r8, r5
 80005ba:	4621      	mov	r1, r4
 80005bc:	f018 faec 	bl	8018b98 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005c0:	1978      	adds	r0, r7, r5
 80005c2:	4621      	mov	r1, r4
 80005c4:	f018 fb2e 	bl	8018c24 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 80005c8:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <audioInit+0x45c>)
 80005ca:	4621      	mov	r1, r4
 80005cc:	1998      	adds	r0, r3, r6
 80005ce:	4428      	add	r0, r5
 80005d0:	f014 f900 	bl	80147d4 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 80005d4:	4b5c      	ldr	r3, [pc, #368]	; (8000748 <audioInit+0x460>)
 80005d6:	4621      	mov	r1, r4
 80005d8:	1998      	adds	r0, r3, r6
 80005da:	4428      	add	r0, r5
 80005dc:	f018 fd0e 	bl	8018ffc <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 80005e0:	4b5a      	ldr	r3, [pc, #360]	; (800074c <audioInit+0x464>)
 80005e2:	4621      	mov	r1, r4
 80005e4:	1998      	adds	r0, r3, r6
 80005e6:	4428      	add	r0, r5
 80005e8:	f018 fd64 	bl	80190b4 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80005ec:	4b58      	ldr	r3, [pc, #352]	; (8000750 <audioInit+0x468>)
 80005ee:	4621      	mov	r1, r4
 80005f0:	1998      	adds	r0, r3, r6
 80005f2:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 80005f4:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80005f6:	f018 fc3f 	bl	8018e78 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 80005fa:	2d20      	cmp	r5, #32
 80005fc:	d1db      	bne.n	80005b6 <audioInit+0x2ce>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <audioInit+0x46c>)
 8000600:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000604:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000758 <audioInit+0x470>
 8000608:	2106      	movs	r1, #6
 800060a:	1998      	adds	r0, r3, r6
 800060c:	4622      	mov	r2, r4
 800060e:	f012 fd3b 	bl	8013088 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000612:	4b52      	ldr	r3, [pc, #328]	; (800075c <audioInit+0x474>)
 8000614:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000618:	4622      	mov	r2, r4
 800061a:	1998      	adds	r0, r3, r6
 800061c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8000760 <audioInit+0x478>
 8000620:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000622:	eddf aa50 	vldr	s21, [pc, #320]	; 8000764 <audioInit+0x47c>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000626:	f012 fd2f 	bl	8013088 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <audioInit+0x480>)
 800062c:	9f00      	ldr	r7, [sp, #0]
 800062e:	eeb0 0a4a 	vmov.f32	s0, s20
 8000632:	4622      	mov	r2, r4
 8000634:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800076c <audioInit+0x484>
 8000638:	2105      	movs	r1, #5
 800063a:	1998      	adds	r0, r3, r6
 800063c:	e09c      	b.n	8000778 <audioInit+0x490>
 800063e:	bf00      	nop
 8000640:	2000456c 	.word	0x2000456c
 8000644:	473b8000 	.word	0x473b8000
 8000648:	20004a9c 	.word	0x20004a9c
 800064c:	080046c9 	.word	0x080046c9
 8000650:	00000000 	.word	0x00000000
 8000654:	00030d40 	.word	0x00030d40
 8000658:	24028020 	.word	0x24028020
 800065c:	200047a0 	.word	0x200047a0
 8000660:	60000000 	.word	0x60000000
 8000664:	20004568 	.word	0x20004568
 8000668:	ba51b717 	.word	0xba51b717
 800066c:	3a83126f 	.word	0x3a83126f
 8000670:	200003e0 	.word	0x200003e0
 8000674:	200043e0 	.word	0x200043e0
 8000678:	457ff000 	.word	0x457ff000
 800067c:	4323d666 	.word	0x4323d666
 8000680:	c323d666 	.word	0xc323d666
 8000684:	24008020 	.word	0x24008020
 8000688:	435c0000 	.word	0x435c0000
 800068c:	20000060 	.word	0x20000060
 8000690:	449256db 	.word	0x449256db
 8000694:	42640000 	.word	0x42640000
 8000698:	38ffe802 	.word	0x38ffe802
 800069c:	24000000 	.word	0x24000000
 80006a0:	24008010 	.word	0x24008010
 80006a4:	58020400 	.word	0x58020400
 80006a8:	58020800 	.word	0x58020800
 80006ac:	58020000 	.word	0x58020000
 80006b0:	20000065 	.word	0x20000065
 80006b4:	20012f9c 	.word	0x20012f9c
 80006b8:	200044a4 	.word	0x200044a4
 80006bc:	20000066 	.word	0x20000066
 80006c0:	200044c4 	.word	0x200044c4
 80006c4:	20004558 	.word	0x20004558
 80006c8:	3d4ccccd 	.word	0x3d4ccccd
 80006cc:	20012e0c 	.word	0x20012e0c
 80006d0:	200044c8 	.word	0x200044c8
 80006d4:	20012e10 	.word	0x20012e10
 80006d8:	3a03126f 	.word	0x3a03126f
 80006dc:	20012ee8 	.word	0x20012ee8
 80006e0:	2000446c 	.word	0x2000446c
 80006e4:	3c23d70a 	.word	0x3c23d70a
 80006e8:	42800000 	.word	0x42800000
 80006ec:	3f333333 	.word	0x3f333333
 80006f0:	44fa0000 	.word	0x44fa0000
 80006f4:	447a0000 	.word	0x447a0000
 80006f8:	200049b0 	.word	0x200049b0
 80006fc:	20004994 	.word	0x20004994
 8000700:	20004a6c 	.word	0x20004a6c
 8000704:	20012ec0 	.word	0x20012ec0
 8000708:	200049c8 	.word	0x200049c8
 800070c:	20004a84 	.word	0x20004a84
 8000710:	20004944 	.word	0x20004944
 8000714:	20004690 	.word	0x20004690
 8000718:	2000450c 	.word	0x2000450c
 800071c:	20000324 	.word	0x20000324
 8000720:	20004424 	.word	0x20004424
 8000724:	2000030c 	.word	0x2000030c
 8000728:	200002fc 	.word	0x200002fc
 800072c:	200002ec 	.word	0x200002ec
 8000730:	200002dc 	.word	0x200002dc
 8000734:	200002cc 	.word	0x200002cc
 8000738:	2000446c 	.word	0x2000446c
 800073c:	200045e0 	.word	0x200045e0
 8000740:	200045c0 	.word	0x200045c0
 8000744:	20004630 	.word	0x20004630
 8000748:	20004670 	.word	0x20004670
 800074c:	20004650 	.word	0x20004650
 8000750:	20004600 	.word	0x20004600
 8000754:	2000480c 	.word	0x2000480c
 8000758:	42a00000 	.word	0x42a00000
 800075c:	20004814 	.word	0x20004814
 8000760:	463b8000 	.word	0x463b8000
 8000764:	3dcccccd 	.word	0x3dcccccd
 8000768:	200047f4 	.word	0x200047f4
 800076c:	3ff33333 	.word	0x3ff33333
 8000770:	200047a0 	.word	0x200047a0
 8000774:	3f7fffac 	.word	0x3f7fffac
 8000778:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800077c:	ed1f 9a03 	vldr	s18, [pc, #-12]	; 8000774 <audioInit+0x48c>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000780:	f012 fc82 	bl	8013088 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000784:	4628      	mov	r0, r5
 8000786:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800078a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800078e:	4623      	mov	r3, r4
 8000790:	eef0 0a4a 	vmov.f32	s1, s20
 8000794:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000798:	eeb0 0a6a 	vmov.f32	s0, s21
 800079c:	4995      	ldr	r1, [pc, #596]	; (80009f4 <audioInit+0x70c>)
 800079e:	f011 ff1d 	bl	80125dc <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007a2:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80007a4:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007a6:	eeb0 0a49 	vmov.f32	s0, s18
 80007aa:	f011 ffcd 	bl	8012748 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80007ae:	42af      	cmp	r7, r5
 80007b0:	d1e8      	bne.n	8000784 <audioInit+0x49c>
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <audioInit+0x710>)
 80007b4:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80007b6:	eddf aa91 	vldr	s21, [pc, #580]	; 80009fc <audioInit+0x714>
 80007ba:	eb03 0806 	add.w	r8, r3, r6
 80007be:	4b90      	ldr	r3, [pc, #576]	; (8000a00 <audioInit+0x718>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80007c0:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8000a04 <audioInit+0x71c>
 80007c4:	199f      	adds	r7, r3, r6
 80007c6:	f106 0320 	add.w	r3, r6, #32
 80007ca:	e9cd b602 	strd	fp, r6, [sp, #8]
 80007ce:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 80007d0:	4640      	mov	r0, r8
 80007d2:	4621      	mov	r1, r4
 80007d4:	f011 fdd0 	bl	8012378 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80007d8:	4638      	mov	r0, r7
 80007da:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80007de:	4621      	mov	r1, r4
 80007e0:	f012 fa20 	bl	8012c24 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80007e4:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <audioInit+0x720>)
 80007e6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80007ea:	4621      	mov	r1, r4
 80007ec:	195e      	adds	r6, r3, r5
 80007ee:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <audioInit+0x724>)
		for (int i = 0; i < NUM_EFFECT; i++)
 80007f0:	f108 0808 	add.w	r8, r8, #8
 80007f4:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80007f6:	1958      	adds	r0, r3, r5
 80007f8:	f012 fa14 	bl	8012c24 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80007fc:	4b84      	ldr	r3, [pc, #528]	; (8000a10 <audioInit+0x728>)
 80007fe:	eef0 0a6a 	vmov.f32	s1, s21
 8000802:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8000a14 <audioInit+0x72c>
 8000806:	eb03 0a05 	add.w	sl, r3, r5
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <audioInit+0x730>)
 800080c:	4622      	mov	r2, r4
 800080e:	2106      	movs	r1, #6
 8000810:	eb03 0905 	add.w	r9, r3, r5
 8000814:	4630      	mov	r0, r6
 8000816:	f012 fc37 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 800081a:	4650      	mov	r0, sl
 800081c:	eef0 0a6a 	vmov.f32	s1, s21
 8000820:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8000a1c <audioInit+0x734>
 8000824:	4622      	mov	r2, r4
 8000826:	2107      	movs	r1, #7
 8000828:	f012 fc2e 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 800082c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000a20 <audioInit+0x738>
 8000830:	4622      	mov	r2, r4
 8000832:	2105      	movs	r1, #5
 8000834:	4648      	mov	r0, r9
 8000836:	eeb0 0a4a 	vmov.f32	s0, s20
 800083a:	f012 fc25 	bl	8013088 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800083e:	eeb0 0a49 	vmov.f32	s0, s18
 8000842:	4630      	mov	r0, r6
 8000844:	f012 fdba 	bl	80133bc <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000848:	4650      	mov	r0, sl
 800084a:	eeb0 0a49 	vmov.f32	s0, s18
 800084e:	f012 fdb5 	bl	80133bc <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000852:	eeb0 0a49 	vmov.f32	s0, s18
 8000856:	4648      	mov	r0, r9
 8000858:	f012 fdb0 	bl	80133bc <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 800085c:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <audioInit+0x73c>)
 800085e:	4621      	mov	r1, r4
 8000860:	eb03 0a05 	add.w	sl, r3, r5
 8000864:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <audioInit+0x740>)
 8000866:	1958      	adds	r0, r3, r5
 8000868:	f011 fe0e 	bl	8012488 <tCompressor_init>
			//tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			//tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &mediumPool);
			//tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &mediumPool);
			tCycle_init(&mod1[i][v], &leaf);
 800086c:	4b6f      	ldr	r3, [pc, #444]	; (8000a2c <audioInit+0x744>)
 800086e:	4621      	mov	r1, r4
 8000870:	4650      	mov	r0, sl
 8000872:	eb03 0905 	add.w	r9, r3, r5
 8000876:	f013 ffad 	bl	80147d4 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 800087a:	4621      	mov	r1, r4
 800087c:	4648      	mov	r0, r9
 800087e:	f013 ffa9 	bl	80147d4 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8000882:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000a30 <audioInit+0x748>
 8000886:	4650      	mov	r0, sl
 8000888:	f013 ffe6 	bl	8014858 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800088c:	4648      	mov	r0, r9
 800088e:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000a34 <audioInit+0x74c>
 8000892:	f013 ffe1 	bl	8014858 <tCycle_setFreq>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000896:	4b68      	ldr	r3, [pc, #416]	; (8000a38 <audioInit+0x750>)
 8000898:	eef0 0a69 	vmov.f32	s1, s19
 800089c:	4622      	mov	r2, r4
 800089e:	1958      	adds	r0, r3, r5
 80008a0:	eeb0 0a48 	vmov.f32	s0, s16
 80008a4:	2101      	movs	r1, #1
 80008a6:	f012 f8c3 	bl	8012a30 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80008aa:	4b64      	ldr	r3, [pc, #400]	; (8000a3c <audioInit+0x754>)
 80008ac:	eef0 0a69 	vmov.f32	s1, s19
 80008b0:	4622      	mov	r2, r4
 80008b2:	1958      	adds	r0, r3, r5
 80008b4:	eeb0 0a48 	vmov.f32	s0, s16
 80008b8:	2100      	movs	r1, #0
 80008ba:	f012 f8b9 	bl	8012a30 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <audioInit+0x758>)
 80008c0:	4622      	mov	r2, r4
 80008c2:	eef0 0a69 	vmov.f32	s1, s19
 80008c6:	1958      	adds	r0, r3, r5
 80008c8:	eeb0 0a48 	vmov.f32	s0, s16
 80008cc:	2102      	movs	r1, #2
 80008ce:	f012 f8af 	bl	8012a30 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80008d2:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <audioInit+0x75c>)
 80008d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008d8:	4621      	mov	r1, r4
 80008da:	1958      	adds	r0, r3, r5
 80008dc:	eeb0 0a48 	vmov.f32	s0, s16
 80008e0:	f012 feae 	bl	8013640 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 80008e4:	4b58      	ldr	r3, [pc, #352]	; (8000a48 <audioInit+0x760>)
 80008e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008ea:	4622      	mov	r2, r4
 80008ec:	1958      	adds	r0, r3, r5
 80008ee:	eeb0 0a48 	vmov.f32	s0, s16
 80008f2:	2105      	movs	r1, #5
 80008f4:	f012 fbc8 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 80008f8:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <audioInit+0x764>)
 80008fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008fe:	4622      	mov	r2, r4
 8000900:	1958      	adds	r0, r3, r5
 8000902:	eeb0 0a48 	vmov.f32	s0, s16
 8000906:	2106      	movs	r1, #6
 8000908:	f012 fbbe 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 800090c:	4b50      	ldr	r3, [pc, #320]	; (8000a50 <audioInit+0x768>)
 800090e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000912:	4622      	mov	r2, r4
 8000914:	1958      	adds	r0, r3, r5
 8000916:	eeb0 0a48 	vmov.f32	s0, s16
 800091a:	2107      	movs	r1, #7
 800091c:	f012 fbb4 	bl	8013088 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8000920:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <audioInit+0x76c>)
 8000922:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000926:	4622      	mov	r2, r4
 8000928:	1958      	adds	r0, r3, r5
 800092a:	eeb0 0a48 	vmov.f32	s0, s16
 800092e:	2104      	movs	r1, #4
 8000930:	f012 fbaa 	bl	8013088 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000934:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <audioInit+0x770>)
 8000936:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800093a:	4621      	mov	r1, r4
 800093c:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 800093e:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000940:	eeb0 0a48 	vmov.f32	s0, s16
 8000944:	f013 fa10 	bl	8013d68 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8000948:	45ab      	cmp	fp, r5
 800094a:	f47f af41 	bne.w	80007d0 <audioInit+0x4e8>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800094e:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8000a5c <audioInit+0x774>
 8000952:	e9dd b602 	ldrd	fp, r6, [sp, #8]
 8000956:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
 800095a:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800095c:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800095e:	eef0 0a68 	vmov.f32	s1, s17
 8000962:	4621      	mov	r1, r4
 8000964:	eeb0 0a49 	vmov.f32	s0, s18
 8000968:	f011 ffe0 	bl	801292c <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800096c:	455d      	cmp	r5, fp
 800096e:	d1f4      	bne.n	800095a <audioInit+0x672>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000970:	9b00      	ldr	r3, [sp, #0]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8000972:	2102      	movs	r1, #2
 8000974:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000976:	f10b 0b04 	add.w	fp, fp, #4
 800097a:	3304      	adds	r3, #4
 800097c:	9300      	str	r3, [sp, #0]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <audioInit+0x778>)
 8000980:	1998      	adds	r0, r3, r6
 8000982:	4623      	mov	r3, r4
 8000984:	f011 fbfa 	bl	801217c <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8000988:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <audioInit+0x77c>)
 800098a:	4622      	mov	r2, r4
 800098c:	eddf 0a36 	vldr	s1, [pc, #216]	; 8000a68 <audioInit+0x780>
 8000990:	1998      	adds	r0, r3, r6
 8000992:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8000a6c <audioInit+0x784>
 8000996:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000998:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800099a:	f012 f849 	bl	8012a30 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	b96b      	cbnz	r3, 80009be <audioInit+0x6d6>
 80009a2:	2301      	movs	r3, #1
 80009a4:	9301      	str	r3, [sp, #4]
 80009a6:	e567      	b.n	8000478 <audioInit+0x190>
		if (boardNumber == 0)
 80009a8:	b11b      	cbz	r3, 80009b2 <audioInit+0x6ca>
		else if (boardNumber == 1)
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d01d      	beq.n	80009ea <audioInit+0x702>
			firstString = boardNumber - 1 * NUM_STRINGS_PER_BOARD;
 80009ae:	3b02      	subs	r3, #2
 80009b0:	e511      	b.n	80003d6 <audioInit+0xee>
			firstString = 0;
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <audioInit+0x788>)
			numStringsThisBoard = 1;
 80009b4:	2101      	movs	r1, #1
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <audioInit+0x78c>)
			firstString = 0;
 80009b8:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
 80009ba:	7011      	strb	r1, [r2, #0]
 80009bc:	e510      	b.n	80003e0 <audioInit+0xf8>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 80009be:	2280      	movs	r2, #128	; 0x80
 80009c0:	2100      	movs	r1, #0
 80009c2:	482d      	ldr	r0, [pc, #180]	; (8000a78 <audioInit+0x790>)
 80009c4:	f018 fd08 	bl	80193d8 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80009c8:	2220      	movs	r2, #32
 80009ca:	492b      	ldr	r1, [pc, #172]	; (8000a78 <audioInit+0x790>)
 80009cc:	ee1b 0a90 	vmov	r0, s23
 80009d0:	f00b f980 	bl	800bcd4 <HAL_SAI_Transmit_DMA>
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <audioInit+0x794>)
 80009d6:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 80009d8:	9801      	ldr	r0, [sp, #4]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80009da:	701a      	strb	r2, [r3, #0]

}
 80009dc:	b005      	add	sp, #20
 80009de:	ecbd 8b08 	vpop	{d8-d11}
 80009e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 80009e6:	f006 b901 	b.w	8006bec <HAL_Delay>
			firstString = 1;
 80009ea:	4921      	ldr	r1, [pc, #132]	; (8000a70 <audioInit+0x788>)
			numStringsThisBoard = 1;
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <audioInit+0x78c>)
			firstString = 1;
 80009ee:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
 80009f0:	7013      	strb	r3, [r2, #0]
 80009f2:	e4f5      	b.n	80003e0 <audioInit+0xf8>
 80009f4:	200003e0 	.word	0x200003e0
 80009f8:	2000033c 	.word	0x2000033c
 80009fc:	42000000 	.word	0x42000000
 8000a00:	200003a0 	.word	0x200003a0
 8000a04:	47bb8000 	.word	0x47bb8000
 8000a08:	20004a2c 	.word	0x20004a2c
 8000a0c:	200003c0 	.word	0x200003c0
 8000a10:	20004a4c 	.word	0x20004a4c
 8000a14:	42a00000 	.word	0x42a00000
 8000a18:	2000035c 	.word	0x2000035c
 8000a1c:	463b8000 	.word	0x463b8000
 8000a20:	3ff33333 	.word	0x3ff33333
 8000a24:	200047a4 	.word	0x200047a4
 8000a28:	20000380 	.word	0x20000380
 8000a2c:	200047c4 	.word	0x200047c4
 8000a30:	3e4ccccd 	.word	0x3e4ccccd
 8000a34:	3e638e39 	.word	0x3e638e39
 8000a38:	200002ac 	.word	0x200002ac
 8000a3c:	2000028c 	.word	0x2000028c
 8000a40:	2000024c 	.word	0x2000024c
 8000a44:	2000026c 	.word	0x2000026c
 8000a48:	2000022c 	.word	0x2000022c
 8000a4c:	2000020c 	.word	0x2000020c
 8000a50:	200001ec 	.word	0x200001ec
 8000a54:	200001cc 	.word	0x200001cc
 8000a58:	200001ac 	.word	0x200001ac
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	20004820 	.word	0x20004820
 8000a64:	20004494 	.word	0x20004494
 8000a68:	3e99999a 	.word	0x3e99999a
 8000a6c:	46947000 	.word	0x46947000
 8000a70:	200044a4 	.word	0x200044a4
 8000a74:	20000066 	.word	0x20000066
 8000a78:	30000000 	.word	0x30000000
 8000a7c:	20012eb8 	.word	0x20012eb8

08000a80 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8000a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <oscillator_tick+0x1b0>)
 8000a86:	2500      	movs	r5, #0
	{
		oscOuts[0][i][string] = 0.0f;
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 8000a88:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <oscillator_tick+0x1b4>)
{
 8000a8a:	4682      	mov	sl, r0
		oscOuts[0][i][string] = 0.0f;
 8000a8c:	4a6a      	ldr	r2, [pc, #424]	; (8000c38 <oscillator_tick+0x1b8>)
	uint32_t tempCount1 = DWT->CYCCNT;
 8000a8e:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000c6c <oscillator_tick+0x1ec>
		oscOuts[0][i][string] = 0.0f;
 8000a92:	eb02 0680 	add.w	r6, r2, r0, lsl #2
{
 8000a96:	ed2d 8b0a 	vpush	{d8-d12}
		oscOuts[0][i][string] = 0.0f;
 8000a9a:	ed9f 9a68 	vldr	s18, [pc, #416]	; 8000c3c <oscillator_tick+0x1bc>
{
 8000a9e:	b089      	sub	sp, #36	; 0x24
	interruptChecker = 0;
 8000aa0:	700d      	strb	r5, [r1, #0]
	for (int osc = 0; osc < oscToTick; osc++)
 8000aa2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8000aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
		oscOuts[1][i][string] = 0.0f;
 8000aa8:	ed86 9a06 	vstr	s18, [r6, #24]
	uint32_t tempCount1 = DWT->CYCCNT;
 8000aac:	9305      	str	r3, [sp, #20]
		oscOuts[0][i][string] = 0.0f;
 8000aae:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8000ab2:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 8000ab6:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 8000aba:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
		oscOuts[0][i][string] = 0.0f;
 8000abe:	ed86 9a00 	vstr	s18, [r6]
	for (int osc = 0; osc < oscToTick; osc++)
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	f000 80a8 	beq.w	8000c18 <oscillator_tick+0x198>
 8000ac8:	ea4f 0980 	mov.w	r9, r0, lsl #2
 8000acc:	4a5c      	ldr	r2, [pc, #368]	; (8000c40 <oscillator_tick+0x1c0>)
 8000ace:	4c5d      	ldr	r4, [pc, #372]	; (8000c44 <oscillator_tick+0x1c4>)
 8000ad0:	eef0 9a40 	vmov.f32	s19, s0
 8000ad4:	eb02 0309 	add.w	r3, r2, r9
 8000ad8:	4a5b      	ldr	r2, [pc, #364]	; (8000c48 <oscillator_tick+0x1c8>)
 8000ada:	4f5c      	ldr	r7, [pc, #368]	; (8000c4c <oscillator_tick+0x1cc>)
		float fine = oscParams[OscFine].realVal[string];
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000adc:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	eb02 0309 	add.w	r3, r2, r9
 8000ae6:	444c      	add	r4, r9
 8000ae8:	444f      	add	r7, r9
 8000aea:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <oscillator_tick+0x1d0>)
 8000aec:	f8cd 9010 	str.w	r9, [sp, #16]
 8000af0:	4699      	mov	r9, r3
		float freqToSmooth = (note + (fine*0.01f));
 8000af2:	ed9f ba58 	vldr	s22, [pc, #352]	; 8000c54 <oscillator_tick+0x1d4>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((tempMIDI * 100.0f) + 16384.0f);
 8000af6:	eddf aa58 	vldr	s21, [pc, #352]	; 8000c58 <oscillator_tick+0x1d8>
 8000afa:	ed9f aa58 	vldr	s20, [pc, #352]	; 8000c5c <oscillator_tick+0x1dc>
 8000afe:	9200      	str	r2, [sp, #0]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000b00:	ed94 7ae9 	vldr	s14, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000b04:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 8000b08:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000b0c:	4638      	mov	r0, r7
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000b0e:	eeb4 7aeb 	vcmpe.f32	s14, s23
		float shape = oscParams[OscShape].realVal[string];
 8000b12:	edd4 0ac6 	vldr	s1, [r4, #792]	; 0x318
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000b16:	eea7 0a8b 	vfma.f32	s0, s15, s22
		float filterSend = oscParams[OscFilterSend].realVal[string];
 8000b1a:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		float freqOffset= oscParams[OscFreq].realVal[string];
 8000b1e:	edd4 cabf 	vldr	s25, [r4, #764]	; 0x2fc
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000b22:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float amp = oscParams[OscAmp].realVal[string];
 8000b2a:	ed94 cacd 	vldr	s24, [r4, #820]	; 0x334
		float shape = oscParams[OscShape].realVal[string];
 8000b2e:	edcd 0a03 	vstr	s1, [sp, #12]
	for (int osc = 0; osc < oscToTick; osc++)
 8000b32:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 8000b36:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000b3a:	bfcc      	ite	gt
 8000b3c:	2201      	movgt	r2, #1
 8000b3e:	2200      	movle	r2, #0
 8000b40:	9202      	str	r2, [sp, #8]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000b42:	f011 ff1f 	bl	8012984 <tExpSmooth_setDest>
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000b46:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 8000b48:	f8d8 b004 	ldr.w	fp, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000b4c:	f011 ff1e 	bl	801298c <tExpSmooth_tick>
		float tempIndexF =((tempMIDI * 100.0f) + 16384.0f);
 8000b50:	eef0 7a4a 	vmov.f32	s15, s20
		timeApprox = DWT->CYCCNT - tempCountappr;

		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000b54:	9b01      	ldr	r3, [sp, #4]
	for (int osc = 0; osc < oscToTick; osc++)
 8000b56:	3708      	adds	r7, #8
		float freqToSmooth1 = mtofTable[tempIndexI];
 8000b58:	4841      	ldr	r0, [pc, #260]	; (8000c60 <oscillator_tick+0x1e0>)
		float tempIndexF =((tempMIDI * 100.0f) + 16384.0f);
 8000b5a:	eee0 7a2a 	vfma.f32	s15, s0, s21
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000b5e:	461a      	mov	r2, r3
 8000b60:	3308      	adds	r3, #8

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000b62:	eeb0 0a6c 	vmov.f32	s0, s25
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000b66:	edd2 5a00 	vldr	s11, [r2]
 8000b6a:	9301      	str	r3, [sp, #4]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000b6c:	eddd 0a03 	vldr	s1, [sp, #12]
 8000b70:	9a02      	ldr	r2, [sp, #8]
		int tempIndexI = (int)tempIndexF;
 8000b72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000b76:	ee78 6a67 	vsub.f32	s13, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000b7a:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 8000b7e:	ee17 1a10 	vmov	r1, s14
		tempIndexF = tempIndexF -tempIndexI;
 8000b82:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000b86:	1c4b      	adds	r3, r1, #1
		float freqToSmooth1 = mtofTable[tempIndexI];
 8000b88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		tempIndexF = tempIndexF -tempIndexI;
 8000b8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000b90:	f3c3 030e 	ubfx	r3, r3, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000b94:	ee76 6a86 	vadd.f32	s13, s13, s12
 8000b98:	ed91 7a00 	vldr	s14, [r1]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000b9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000ba0:	9904      	ldr	r1, [sp, #16]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000ba2:	a807      	add	r0, sp, #28
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000ba4:	ed93 6a00 	vldr	s12, [r3]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <oscillator_tick+0x1e4>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000baa:	ee67 7a86 	vmul.f32	s15, s15, s12
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000bae:	440b      	add	r3, r1
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000bb0:	492d      	ldr	r1, [pc, #180]	; (8000c68 <oscillator_tick+0x1e8>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000bb2:	eee6 7a87 	vfma.f32	s15, s13, s14
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000bba:	f8d8 3004 	ldr.w	r3, [r8, #4]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000bbe:	ee27 7a25 	vmul.f32	s14, s14, s11
		float sample = 0.0f;
 8000bc2:	ed8d 9a07 	vstr	s18, [sp, #28]
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000bc6:	eba3 030b 	sub.w	r3, r3, fp
 8000bca:	600b      	str	r3, [r1, #0]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000bcc:	4629      	mov	r1, r5
 8000bce:	9b00      	ldr	r3, [sp, #0]
 8000bd0:	eea7 0a87 	vfma.f32	s0, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000bd4:	3501      	adds	r5, #1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000bd6:	f853 bb04 	ldr.w	fp, [r3], #4
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4653      	mov	r3, sl
 8000bde:	47d8      	blx	fp
		sample *= amp;
 8000be0:	eddd 7a07 	vldr	s15, [sp, #28]
		sourceValues[osc][string] = sample;
 8000be4:	464b      	mov	r3, r9
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000be6:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sample *= amp;
 8000bea:	ee6c 7a27 	vmul.f32	s15, s24, s15
		sourceValues[osc][string] = sample;
 8000bee:	f109 0908 	add.w	r9, r9, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000bf2:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 8000bf6:	edc3 7a00 	vstr	s15, [r3]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000bfa:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <oscillator_tick+0x1b4>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000c00:	ee68 8aa7 	vmul.f32	s17, s17, s15
	for (int osc = 0; osc < oscToTick; osc++)
 8000c04:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000c06:	ee28 8a07 	vmul.f32	s16, s16, s14
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000c0a:	ed46 8a02 	vstr	s17, [r6, #-8]
	for (int osc = 0; osc < oscToTick; osc++)
 8000c0e:	42ab      	cmp	r3, r5
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000c10:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 8000c14:	f73f af74 	bgt.w	8000b00 <oscillator_tick+0x80>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <oscillator_tick+0x1ec>)
 8000c1a:	9905      	ldr	r1, [sp, #20]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <oscillator_tick+0x1f0>)
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	b009      	add	sp, #36	; 0x24
 8000c26:	ecbd 8b0a 	vpop	{d8-d12}
 8000c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c2e:	bf00      	nop
 8000c30:	2001515d 	.word	0x2001515d
 8000c34:	2000007c 	.word	0x2000007c
 8000c38:	20004828 	.word	0x20004828
 8000c3c:	00000000 	.word	0x00000000
 8000c40:	200044ac 	.word	0x200044ac
 8000c44:	20015b1c 	.word	0x20015b1c
 8000c48:	20012d2c 	.word	0x20012d2c
 8000c4c:	20004944 	.word	0x20004944
 8000c50:	20004a20 	.word	0x20004a20
 8000c54:	3c23d70a 	.word	0x3c23d70a
 8000c58:	42c80000 	.word	0x42c80000
 8000c5c:	46800000 	.word	0x46800000
 8000c60:	24008020 	.word	0x24008020
 8000c64:	20004540 	.word	0x20004540
 8000c68:	20012e94 	.word	0x20012e94
 8000c6c:	e0001000 	.word	0xe0001000
 8000c70:	20012eac 	.word	0x20012eac

08000c74 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c78:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000c7a:	4c1a      	ldr	r4, [pc, #104]	; (8000ce4 <sawSquareTick+0x70>)
 8000c7c:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000c80:	4617      	mov	r7, r2
 8000c82:	4688      	mov	r8, r1
 8000c84:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000c86:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000c8a:	ed2d 8b02 	vpush	{d8}
 8000c8e:	eeb0 8a60 	vmov.f32	s16, s1
 8000c92:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000c94:	9001      	str	r0, [sp, #4]
 8000c96:	f017 ff19 	bl	8018acc <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8000c9a:	9801      	ldr	r0, [sp, #4]
 8000c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8000ca0:	f017 ff76 	bl	8018b90 <tMBSawPulse_setShape>
    if (sync)
 8000ca4:	9801      	ldr	r0, [sp, #4]
 8000ca6:	b977      	cbnz	r7, 8000cc6 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8000ca8:	f017 f81e 	bl	8017ce8 <tMBSawPulse_tick>
 8000cac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000cb0:	edd5 7a00 	vldr	s15, [r5]
 8000cb4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000cb8:	edc5 7a00 	vstr	s15, [r5]
}
 8000cbc:	b002      	add	sp, #8
 8000cbe:	ecbd 8b02 	vpop	{d8}
 8000cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <sawSquareTick+0x74>)
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <sawSquareTick+0x78>)
 8000cca:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000cce:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000cd2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000cd6:	ed96 0a00 	vldr	s0, [r6]
 8000cda:	f017 ff29 	bl	8018b30 <tMBSawPulse_sync>
 8000cde:	9801      	ldr	r0, [sp, #4]
 8000ce0:	e7e2      	b.n	8000ca8 <sawSquareTick+0x34>
 8000ce2:	bf00      	nop
 8000ce4:	200049c8 	.word	0x200049c8
 8000ce8:	0801b588 	.word	0x0801b588
 8000cec:	20012d2c 	.word	0x20012d2c

08000cf0 <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf4:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000cf6:	4c1a      	ldr	r4, [pc, #104]	; (8000d60 <sineTriTick+0x70>)
 8000cf8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000cfc:	4617      	mov	r7, r2
 8000cfe:	4688      	mov	r8, r1
 8000d00:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000d02:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000d06:	ed2d 8b02 	vpush	{d8}
 8000d0a:	eeb0 8a60 	vmov.f32	s16, s1
 8000d0e:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000d10:	9001      	str	r0, [sp, #4]
 8000d12:	f016 fc9d 	bl	8017650 <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 8000d16:	9801      	ldr	r0, [sp, #4]
 8000d18:	eeb0 0a48 	vmov.f32	s0, s16
 8000d1c:	f016 fcd8 	bl	80176d0 <tMBSineTri_setShape>
    if (sync)
 8000d20:	9801      	ldr	r0, [sp, #4]
 8000d22:	b977      	cbnz	r7, 8000d42 <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 8000d24:	f015 fc64 	bl	80165f0 <tMBSineTri_tick>
 8000d28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d2c:	edd5 7a00 	vldr	s15, [r5]
 8000d30:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000d34:	edc5 7a00 	vstr	s15, [r5]
}
 8000d38:	b002      	add	sp, #8
 8000d3a:	ecbd 8b02 	vpop	{d8}
 8000d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <sineTriTick+0x74>)
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <sineTriTick+0x78>)
 8000d46:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000d4a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000d4e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000d52:	ed96 0a00 	vldr	s0, [r6]
 8000d56:	f016 fc8b 	bl	8017670 <tMBSineTri_sync>
 8000d5a:	9801      	ldr	r0, [sp, #4]
 8000d5c:	e7e2      	b.n	8000d24 <sineTriTick+0x34>
 8000d5e:	bf00      	nop
 8000d60:	20004a84 	.word	0x20004a84
 8000d64:	0801b588 	.word	0x0801b588
 8000d68:	20012d2c 	.word	0x20012d2c

08000d6c <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 8000d70:	4c14      	ldr	r4, [pc, #80]	; (8000dc4 <sawTick+0x58>)
{
 8000d72:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8000d74:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000d78:	b082      	sub	sp, #8
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 8000d7e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000d82:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8000d84:	9001      	str	r0, [sp, #4]
 8000d86:	f016 ff25 	bl	8017bd4 <tMBSaw_setFreq>
    if (sync)
 8000d8a:	9801      	ldr	r0, [sp, #4]
 8000d8c:	b967      	cbnz	r7, 8000da8 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 8000d8e:	f016 fce3 	bl	8017758 <tMBSaw_tick>
 8000d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d96:	edd5 7a00 	vldr	s15, [r5]
 8000d9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000d9e:	edc5 7a00 	vstr	s15, [r5]
}
 8000da2:	b002      	add	sp, #8
 8000da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <sawTick+0x5c>)
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <sawTick+0x60>)
 8000dac:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000db0:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000db4:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000db8:	ed96 0a00 	vldr	s0, [r6]
 8000dbc:	f016 ff1a 	bl	8017bf4 <tMBSaw_sync>
 8000dc0:	9801      	ldr	r0, [sp, #4]
 8000dc2:	e7e4      	b.n	8000d8e <sawTick+0x22>
 8000dc4:	200049b0 	.word	0x200049b0
 8000dc8:	0801b588 	.word	0x0801b588
 8000dcc:	20012d2c 	.word	0x20012d2c

08000dd0 <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd4:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000dd6:	4c1a      	ldr	r4, [pc, #104]	; (8000e40 <pulseTick+0x70>)
 8000dd8:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000ddc:	4617      	mov	r7, r2
 8000dde:	4688      	mov	r8, r1
 8000de0:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000de2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000de6:	ed2d 8b02 	vpush	{d8}
 8000dea:	eeb0 8a60 	vmov.f32	s16, s1
 8000dee:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000df0:	9001      	str	r0, [sp, #4]
 8000df2:	f014 faed 	bl	80153d0 <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 8000df6:	9801      	ldr	r0, [sp, #4]
 8000df8:	eeb0 0a48 	vmov.f32	s0, s16
 8000dfc:	f014 faf8 	bl	80153f0 <tMBPulse_setWidth>
    if (sync)
 8000e00:	9801      	ldr	r0, [sp, #4]
 8000e02:	b977      	cbnz	r7, 8000e22 <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 8000e04:	f013 fd8c 	bl	8014920 <tMBPulse_tick>
 8000e08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e0c:	edd5 7a00 	vldr	s15, [r5]
 8000e10:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e14:	edc5 7a00 	vstr	s15, [r5]
}
 8000e18:	b002      	add	sp, #8
 8000e1a:	ecbd 8b02 	vpop	{d8}
 8000e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <pulseTick+0x74>)
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <pulseTick+0x78>)
 8000e26:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000e2a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000e2e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000e32:	ed96 0a00 	vldr	s0, [r6]
 8000e36:	f014 fae9 	bl	801540c <tMBPulse_sync>
 8000e3a:	9801      	ldr	r0, [sp, #4]
 8000e3c:	e7e2      	b.n	8000e04 <pulseTick+0x34>
 8000e3e:	bf00      	nop
 8000e40:	20004994 	.word	0x20004994
 8000e44:	0801b588 	.word	0x0801b588
 8000e48:	20012d2c 	.word	0x20012d2c

08000e4c <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <sineTick+0x2c>)
 8000e4e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 8000e52:	b510      	push	{r4, lr}
 8000e54:	4604      	mov	r4, r0
 8000e56:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8000e58:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000e5c:	9001      	str	r0, [sp, #4]
 8000e5e:	f013 fcfb 	bl	8014858 <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 8000e62:	9801      	ldr	r0, [sp, #4]
 8000e64:	f013 fcd2 	bl	801480c <tCycle_tick>
 8000e68:	edd4 7a00 	vldr	s15, [r4]
 8000e6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000e70:	ed84 0a00 	vstr	s0, [r4]
}
 8000e74:	b002      	add	sp, #8
 8000e76:	bd10      	pop	{r4, pc}
 8000e78:	20004a6c 	.word	0x20004a6c

08000e7c <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e80:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000e82:	4c1a      	ldr	r4, [pc, #104]	; (8000eec <triTick+0x70>)
 8000e84:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000e88:	4617      	mov	r7, r2
 8000e8a:	4688      	mov	r8, r1
 8000e8c:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000e8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000e92:	ed2d 8b02 	vpush	{d8}
 8000e96:	eeb0 8a60 	vmov.f32	s16, s1
 8000e9a:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000e9c:	9001      	str	r0, [sp, #4]
 8000e9e:	f015 fb09 	bl	80164b4 <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 8000ea2:	9801      	ldr	r0, [sp, #4]
 8000ea4:	eeb0 0a48 	vmov.f32	s0, s16
 8000ea8:	f015 fb14 	bl	80164d4 <tMBTriangle_setWidth>
    if (sync)
 8000eac:	9801      	ldr	r0, [sp, #4]
 8000eae:	b977      	cbnz	r7, 8000ece <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 8000eb0:	f014 fb22 	bl	80154f8 <tMBTriangle_tick>
 8000eb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000eb8:	edd5 7a00 	vldr	s15, [r5]
 8000ebc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000ec0:	edc5 7a00 	vstr	s15, [r5]
}
 8000ec4:	b002      	add	sp, #8
 8000ec6:	ecbd 8b02 	vpop	{d8}
 8000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000ece:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <triTick+0x74>)
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <triTick+0x78>)
 8000ed2:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000ed6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000eda:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000ede:	ed96 0a00 	vldr	s0, [r6]
 8000ee2:	f015 fb09 	bl	80164f8 <tMBTriangle_sync>
 8000ee6:	9801      	ldr	r0, [sp, #4]
 8000ee8:	e7e2      	b.n	8000eb0 <triTick+0x34>
 8000eea:	bf00      	nop
 8000eec:	20012ec0 	.word	0x20012ec0
 8000ef0:	0801b588 	.word	0x0801b588
 8000ef4:	20012d2c 	.word	0x20012d2c

08000ef8 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <filter_tick+0x1cc>)
{
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 8000f04:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80010f4 <filter_tick+0x1f8>
{
 8000f08:	4604      	mov	r4, r0
 8000f0a:	460d      	mov	r5, r1
 8000f0c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8000f10:	7013      	strb	r3, [r2, #0]
{
 8000f12:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 8000f14:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <filter_tick+0x1d0>)
 8000f16:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 8000f18:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 8000f1c:	f898 3000 	ldrb.w	r3, [r8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80bc 	beq.w	800109e <filter_tick+0x1a2>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 8000f26:	4e6a      	ldr	r6, [pc, #424]	; (80010d0 <filter_tick+0x1d4>)
 8000f28:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 8000f2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8000f30:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8000f34:	eeb0 8a40 	vmov.f32	s16, s0
 8000f38:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 8000f3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	d87b      	bhi.n	800103e <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d93b      	bls.n	8000fc2 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
 8000f4a:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 8000f4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8000f52:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8000f56:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 8000f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	bfcc      	ite	gt
 8000f64:	2301      	movgt	r3, #1
 8000f66:	2300      	movle	r3, #0
 8000f68:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 8000f6c:	d929      	bls.n	8000fc2 <filter_tick+0xc6>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8000f6e:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <filter_tick+0x1d8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8000f70:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000f74:	eddf 0a58 	vldr	s1, [pc, #352]	; 80010d8 <filter_tick+0x1dc>
 8000f78:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8000f7c:	ed9f 1a57 	vldr	s2, [pc, #348]	; 80010dc <filter_tick+0x1e0>
 8000f80:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80010e0 <filter_tick+0x1e4>
 8000f84:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8000f88:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8000f8c:	4b55      	ldr	r3, [pc, #340]	; (80010e4 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8000f8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8000f92:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8000f96:	edd3 6a00 	vldr	s13, [r3]
 8000f9a:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8000f9e:	eee8 7a07 	vfma.f32	s15, s16, s14
 8000fa2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000fa6:	f013 f94f 	bl	8014248 <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8000faa:	1cab      	adds	r3, r5, #2
 8000fac:	484e      	ldr	r0, [pc, #312]	; (80010e8 <filter_tick+0x1ec>)
 8000fae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8000fb2:	9001      	str	r0, [sp, #4]
 8000fb4:	f011 fce6 	bl	8012984 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8000fb8:	9801      	ldr	r0, [sp, #4]
 8000fba:	f011 fce7 	bl	801298c <tExpSmooth_tick>
 8000fbe:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 8000fc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8000fc6:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 8000fca:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8000fce:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 8000fd2:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8000fd6:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 8000fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fde:	dd07      	ble.n	8000ff0 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 8000fe0:	4b42      	ldr	r3, [pc, #264]	; (80010ec <filter_tick+0x1f0>)
 8000fe2:	462a      	mov	r2, r5
 8000fe4:	ed9d 0a04 	vldr	s0, [sp, #16]
 8000fe8:	2100      	movs	r1, #0
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4620      	mov	r0, r4
 8000fee:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8000ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8000ff4:	ed94 0a01 	vldr	s0, [r4, #4]
 8000ff8:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8000ffc:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001000:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001004:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 8001008:	f1b8 0f00 	cmp.w	r8, #0
 800100c:	d009      	beq.n	8001022 <filter_tick+0x126>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 800100e:	4b37      	ldr	r3, [pc, #220]	; (80010ec <filter_tick+0x1f0>)
 8001010:	462a      	mov	r2, r5
 8001012:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001016:	2101      	movs	r1, #1
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	1d20      	adds	r0, r4, #4
 800101c:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 800101e:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <filter_tick+0x1d0>)
 8001024:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <filter_tick+0x1f4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	1bdb      	subs	r3, r3, r7
 800102a:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 800102c:	edd4 7a00 	vldr	s15, [r4]
}
 8001030:	eea7 0a88 	vfma.f32	s0, s15, s16
 8001034:	b006      	add	sp, #24
 8001036:	ecbd 8b02 	vpop	{d8}
 800103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 800103e:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001042:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001046:	eddf 0a24 	vldr	s1, [pc, #144]	; 80010d8 <filter_tick+0x1dc>
 800104a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800104e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 80010dc <filter_tick+0x1e0>
 8001052:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80010e0 <filter_tick+0x1e4>
 8001056:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 800105a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001060:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001064:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001070:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001074:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001078:	f013 f8e6 	bl	8014248 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 800107c:	481a      	ldr	r0, [pc, #104]	; (80010e8 <filter_tick+0x1ec>)
 800107e:	00ab      	lsls	r3, r5, #2
 8001080:	4418      	add	r0, r3
 8001082:	9001      	str	r0, [sp, #4]
 8001084:	f011 fc7e 	bl	8012984 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001088:	9801      	ldr	r0, [sp, #4]
 800108a:	f011 fc7f 	bl	801298c <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 800108e:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001092:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 8001096:	2b01      	cmp	r3, #1
 8001098:	f63f af57 	bhi.w	8000f4a <filter_tick+0x4e>
 800109c:	e791      	b.n	8000fc2 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <filter_tick+0x1d4>)
 80010a0:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80010a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 80010a8:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80010ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 80010b0:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80010b4:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80010b8:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 80010bc:	eea7 0a87 	vfma.f32	s0, s15, s14
 80010c0:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 80010c4:	e7ad      	b.n	8001022 <filter_tick+0x126>
 80010c6:	bf00      	nop
 80010c8:	2001515d 	.word	0x2001515d
 80010cc:	e0001000 	.word	0xe0001000
 80010d0:	20015b1c 	.word	0x20015b1c
 80010d4:	20016628 	.word	0x20016628
 80010d8:	420fb824 	.word	0x420fb824
 80010dc:	457ff000 	.word	0x457ff000
 80010e0:	00000000 	.word	0x00000000
 80010e4:	20000334 	.word	0x20000334
 80010e8:	2000446c 	.word	0x2000446c
 80010ec:	2000448c 	.word	0x2000448c
 80010f0:	20012e9c 	.word	0x20012e9c
 80010f4:	20000004 	.word	0x20000004

080010f8 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 80010f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <lowpassTick+0x3c>)
{
 80010fe:	b530      	push	{r4, r5, lr}
 8001100:	4605      	mov	r5, r0
 8001102:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001104:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001108:	0094      	lsls	r4, r2, #2
 800110a:	9001      	str	r0, [sp, #4]
 800110c:	f011 fd36 	bl	8012b7c <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001110:	ed95 0a00 	vldr	s0, [r5]
 8001114:	9801      	ldr	r0, [sp, #4]
 8001116:	f011 fcfb 	bl	8012b10 <tSVF_tick>
    *sample *= filterGain[v][string];
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 800111c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001120:	4422      	add	r2, r4
 8001122:	edd2 7a00 	vldr	s15, [r2]
 8001126:	ee27 0a80 	vmul.f32	s0, s15, s0
 800112a:	ed85 0a00 	vstr	s0, [r5]
}
 800112e:	b003      	add	sp, #12
 8001130:	bd30      	pop	{r4, r5, pc}
 8001132:	bf00      	nop
 8001134:	20004690 	.word	0x20004690
 8001138:	2000447c 	.word	0x2000447c

0800113c <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 800113c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <highpassTick+0x3c>)
{
 8001142:	b530      	push	{r4, r5, lr}
 8001144:	4605      	mov	r5, r0
 8001146:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001148:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800114c:	0094      	lsls	r4, r2, #2
 800114e:	9001      	str	r0, [sp, #4]
 8001150:	f011 fd14 	bl	8012b7c <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001154:	ed95 0a00 	vldr	s0, [r5]
 8001158:	9801      	ldr	r0, [sp, #4]
 800115a:	f011 fcd9 	bl	8012b10 <tSVF_tick>
    *sample *= filterGain[v][string];
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001160:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001164:	4422      	add	r2, r4
 8001166:	edd2 7a00 	vldr	s15, [r2]
 800116a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800116e:	ed85 0a00 	vstr	s0, [r5]
}
 8001172:	b003      	add	sp, #12
 8001174:	bd30      	pop	{r4, r5, pc}
 8001176:	bf00      	nop
 8001178:	2000450c 	.word	0x2000450c
 800117c:	2000447c 	.word	0x2000447c

08001180 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001180:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001184:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <bandpassTick+0x3c>)
{
 8001186:	b530      	push	{r4, r5, lr}
 8001188:	4605      	mov	r5, r0
 800118a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 800118c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001190:	0094      	lsls	r4, r2, #2
 8001192:	9001      	str	r0, [sp, #4]
 8001194:	f011 fcf2 	bl	8012b7c <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001198:	ed95 0a00 	vldr	s0, [r5]
 800119c:	9801      	ldr	r0, [sp, #4]
 800119e:	f011 fcb7 	bl	8012b10 <tSVF_tick>
    *sample *= filterGain[v][string];
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 80011a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80011a8:	4422      	add	r2, r4
 80011aa:	edd2 7a00 	vldr	s15, [r2]
 80011ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80011b2:	ed85 0a00 	vstr	s0, [r5]
}
 80011b6:	b003      	add	sp, #12
 80011b8:	bd30      	pop	{r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	20000324 	.word	0x20000324
 80011c0:	2000447c 	.word	0x2000447c

080011c4 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 80011c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <diodeLowpassTick+0x3c>)
{
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	4605      	mov	r5, r0
 80011ce:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 80011d0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80011d4:	0094      	lsls	r4, r2, #2
 80011d6:	9001      	str	r0, [sp, #4]
 80011d8:	f012 fd92 	bl	8013d00 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 80011dc:	ed95 0a00 	vldr	s0, [r5]
 80011e0:	9801      	ldr	r0, [sp, #4]
 80011e2:	f012 fc0b 	bl	80139fc <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 80011e8:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80011ec:	4422      	add	r2, r4
 80011ee:	edd2 7a00 	vldr	s15, [r2]
 80011f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80011f6:	ed85 0a00 	vstr	s0, [r5]
}
 80011fa:	b003      	add	sp, #12
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	20004424 	.word	0x20004424
 8001204:	2000447c 	.word	0x2000447c

08001208 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <VZpeakTick+0x28>)
 800120a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800120e:	b510      	push	{r4, lr}
 8001210:	4604      	mov	r4, r0
 8001212:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001214:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001218:	9001      	str	r0, [sp, #4]
 800121a:	f011 ff39 	bl	8013090 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 800121e:	9801      	ldr	r0, [sp, #4]
 8001220:	ed94 0a00 	vldr	s0, [r4]
 8001224:	f011 fd2e 	bl	8012c84 <tVZFilter_tickEfficient>
 8001228:	ed84 0a00 	vstr	s0, [r4]
}
 800122c:	b002      	add	sp, #8
 800122e:	bd10      	pop	{r4, pc}
 8001230:	2000030c 	.word	0x2000030c

08001234 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <VZlowshelfTick+0x28>)
 8001236:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800123a:	b510      	push	{r4, lr}
 800123c:	4604      	mov	r4, r0
 800123e:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001240:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001244:	9001      	str	r0, [sp, #4]
 8001246:	f011 ff23 	bl	8013090 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 800124a:	9801      	ldr	r0, [sp, #4]
 800124c:	ed94 0a00 	vldr	s0, [r4]
 8001250:	f011 fd18 	bl	8012c84 <tVZFilter_tickEfficient>
 8001254:	ed84 0a00 	vstr	s0, [r4]
}
 8001258:	b002      	add	sp, #8
 800125a:	bd10      	pop	{r4, pc}
 800125c:	200002fc 	.word	0x200002fc

08001260 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <VZhighshelfTick+0x28>)
 8001262:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001266:	b510      	push	{r4, lr}
 8001268:	4604      	mov	r4, r0
 800126a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 800126c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001270:	9001      	str	r0, [sp, #4]
 8001272:	f011 ff0d 	bl	8013090 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 8001276:	9801      	ldr	r0, [sp, #4]
 8001278:	ed94 0a00 	vldr	s0, [r4]
 800127c:	f011 fd02 	bl	8012c84 <tVZFilter_tickEfficient>
 8001280:	ed84 0a00 	vstr	s0, [r4]
}
 8001284:	b002      	add	sp, #8
 8001286:	bd10      	pop	{r4, pc}
 8001288:	200002ec 	.word	0x200002ec

0800128c <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 800128c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <VZbandrejectTick+0x3c>)
{
 8001292:	b530      	push	{r4, r5, lr}
 8001294:	4605      	mov	r5, r0
 8001296:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001298:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800129c:	0094      	lsls	r4, r2, #2
 800129e:	9001      	str	r0, [sp, #4]
 80012a0:	f011 fef6 	bl	8013090 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 80012a4:	ed95 0a00 	vldr	s0, [r5]
 80012a8:	9801      	ldr	r0, [sp, #4]
 80012aa:	f011 fceb 	bl	8012c84 <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 80012b0:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80012b4:	4422      	add	r2, r4
 80012b6:	edd2 7a00 	vldr	s15, [r2]
 80012ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80012be:	ed85 0a00 	vstr	s0, [r5]
}
 80012c2:	b003      	add	sp, #12
 80012c4:	bd30      	pop	{r4, r5, pc}
 80012c6:	bf00      	nop
 80012c8:	200002dc 	.word	0x200002dc
 80012cc:	2000447c 	.word	0x2000447c

080012d0 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 80012d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <LadderLowpassTick+0x3c>)
{
 80012d6:	b530      	push	{r4, r5, lr}
 80012d8:	4605      	mov	r5, r0
 80012da:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 80012dc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80012e0:	0094      	lsls	r4, r2, #2
 80012e2:	9001      	str	r0, [sp, #4]
 80012e4:	f012 feaa 	bl	801403c <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80012e8:	ed95 0a00 	vldr	s0, [r5]
 80012ec:	9801      	ldr	r0, [sp, #4]
 80012ee:	f012 fd7f 	bl	8013df0 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80012f4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80012f8:	4422      	add	r2, r4
 80012fa:	edd2 7a00 	vldr	s15, [r2]
 80012fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001302:	ed85 0a00 	vstr	s0, [r5]
}
 8001306:	b003      	add	sp, #12
 8001308:	bd30      	pop	{r4, r5, pc}
 800130a:	bf00      	nop
 800130c:	200002cc 	.word	0x200002cc
 8001310:	2000447c 	.word	0x2000447c

08001314 <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001314:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001318:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800131c:	eef0 0a40 	vmov.f32	s1, s0
 8001320:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001322:	0045      	lsls	r5, r0, #1
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <setFreqMultPitch+0x4c>)
 8001326:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 800132a:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 800132c:	3020      	adds	r0, #32
 800132e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001332:	4408      	add	r0, r1
 8001334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001338:	ed90 7a02 	vldr	s14, [r0, #8]
 800133c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd01      	ble.n	800134a <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 8001346:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 800134a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001364 <setFreqMultPitch+0x50>
 800134e:	442c      	add	r4, r5
 8001350:	f018 face 	bl	80198f0 <powf>
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <setFreqMultPitch+0x54>)
 8001356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800135a:	ed84 0a00 	vstr	s0, [r4]

}
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	20015b1c 	.word	0x20015b1c
 8001364:	3f879c7d 	.word	0x3f879c7d
 8001368:	200044ac 	.word	0x200044ac

0800136c <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 800136c:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <setFreqMultHarm+0x5c>)
 8001372:	0042      	lsls	r2, r0, #1
 8001374:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001378:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800137c:	3020      	adds	r0, #32
 800137e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001382:	4408      	add	r0, r1
 8001384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001388:	ed90 7a02 	vldr	s14, [r0, #8]
 800138c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	dd01      	ble.n	800139a <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 8001396:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 800139a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 800139e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	db08      	blt.n	80013ba <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 80013a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <setFreqMultHarm+0x60>)
 80013ae:	4411      	add	r1, r2
 80013b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80013b4:	ed81 0a00 	vstr	s0, [r1]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 80013b8:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 80013ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80013be:	eeb0 7ac0 	vabs.f32	s14, s0
 80013c2:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80013c6:	e7f1      	b.n	80013ac <setFreqMultHarm+0x40>
 80013c8:	20015b1c 	.word	0x20015b1c
 80013cc:	200044ac 	.word	0x200044ac

080013d0 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <lowpassSetQ+0x10>)
 80013d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80013d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013da:	f011 bc05 	b.w	8012be8 <tSVF_setQ>
 80013de:	bf00      	nop
 80013e0:	20004690 	.word	0x20004690

080013e4 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <highpassSetQ+0x10>)
 80013e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80013ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013ee:	f011 bbfb 	b.w	8012be8 <tSVF_setQ>
 80013f2:	bf00      	nop
 80013f4:	2000450c 	.word	0x2000450c

080013f8 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <bandpassSetQ+0x10>)
 80013fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80013fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001402:	f011 bbf1 	b.w	8012be8 <tSVF_setQ>
 8001406:	bf00      	nop
 8001408:	20000324 	.word	0x20000324

0800140c <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <diodeLowpassSetQ+0x10>)
 800140e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001416:	f012 bc93 	b.w	8013d40 <tDiodeFilter_setQ>
 800141a:	bf00      	nop
 800141c:	20004424 	.word	0x20004424

08001420 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <VZpeakSetQ+0x10>)
 8001422:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800142a:	f011 bfab 	b.w	8013384 <tVZFilter_setResonance>
 800142e:	bf00      	nop
 8001430:	2000030c 	.word	0x2000030c

08001434 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <VZlowshelfSetQ+0x10>)
 8001436:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800143a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800143e:	f011 bfa1 	b.w	8013384 <tVZFilter_setResonance>
 8001442:	bf00      	nop
 8001444:	200002fc 	.word	0x200002fc

08001448 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <VZhighshelfSetQ+0x10>)
 800144a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800144e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001452:	f011 bf97 	b.w	8013384 <tVZFilter_setResonance>
 8001456:	bf00      	nop
 8001458:	200002ec 	.word	0x200002ec

0800145c <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <VZbandrejectSetQ+0x10>)
 800145e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001462:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001466:	f011 bf8d 	b.w	8013384 <tVZFilter_setResonance>
 800146a:	bf00      	nop
 800146c:	200002dc 	.word	0x200002dc

08001470 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <LadderLowpassSetQ+0x10>)
 8001472:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001476:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800147a:	f012 be03 	b.w	8014084 <tLadderFilter_setQ>
 800147e:	bf00      	nop
 8001480:	200002cc 	.word	0x200002cc

08001484 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001484:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001488:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 800148c:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 800148e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001492:	4605      	mov	r5, r0
 8001494:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001496:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	f013 f81f 	bl	80144e0 <fasterdbtoa>
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <lowpassSetGain+0x2c>)
 80014a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80014a8:	ed84 0a00 	vstr	s0, [r4]
}
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
 80014ae:	bf00      	nop
 80014b0:	2000447c 	.word	0x2000447c

080014b4 <highpassSetGain>:
 80014b4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80014b8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80014c2:	4605      	mov	r5, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	f013 f807 	bl	80144e0 <fasterdbtoa>
 80014d2:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <highpassSetGain+0x2c>)
 80014d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80014d8:	ed84 0a00 	vstr	s0, [r4]
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
 80014de:	bf00      	nop
 80014e0:	2000447c 	.word	0x2000447c

080014e4 <bandpassSetGain>:
 80014e4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80014e8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80014ec:	b538      	push	{r3, r4, r5, lr}
 80014ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80014f2:	4605      	mov	r5, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	f012 ffef 	bl	80144e0 <fasterdbtoa>
 8001502:	4b03      	ldr	r3, [pc, #12]	; (8001510 <bandpassSetGain+0x2c>)
 8001504:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001508:	ed84 0a00 	vstr	s0, [r4]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	2000447c 	.word	0x2000447c

08001514 <diodeLowpassSetGain>:
 8001514:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001518:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001522:	4605      	mov	r5, r0
 8001524:	460c      	mov	r4, r1
 8001526:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	f012 ffd7 	bl	80144e0 <fasterdbtoa>
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <diodeLowpassSetGain+0x2c>)
 8001534:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001538:	ed84 0a00 	vstr	s0, [r4]
 800153c:	bd38      	pop	{r3, r4, r5, pc}
 800153e:	bf00      	nop
 8001540:	2000447c 	.word	0x2000447c

08001544 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001544:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001548:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001570 <VZpeakSetGain+0x2c>
{
 800154c:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800154e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001552:	4605      	mov	r5, r0
 8001554:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001556:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	f012 ffbf 	bl	80144e0 <fasterdbtoa>
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <VZpeakSetGain+0x30>)
 8001564:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800156c:	f011 beee 	b.w	801334c <tVZFilter_setGain>
 8001570:	42480000 	.word	0x42480000
 8001574:	2000030c 	.word	0x2000030c

08001578 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001578:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800157c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80015a4 <VZlowshelfSetGain+0x2c>
{
 8001580:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001582:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001586:	4605      	mov	r5, r0
 8001588:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800158a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f012 ffa5 	bl	80144e0 <fasterdbtoa>
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <VZlowshelfSetGain+0x30>)
 8001598:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800159c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80015a0:	f011 bed4 	b.w	801334c <tVZFilter_setGain>
 80015a4:	42480000 	.word	0x42480000
 80015a8:	200002fc 	.word	0x200002fc

080015ac <VZhighshelfSetGain>:
 80015ac:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80015b0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80015d8 <VZhighshelfSetGain+0x2c>
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80015ba:	4605      	mov	r5, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	f012 ff8b 	bl	80144e0 <fasterdbtoa>
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <VZhighshelfSetGain+0x30>)
 80015cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80015d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015d4:	f011 beba 	b.w	801334c <tVZFilter_setGain>
 80015d8:	42480000 	.word	0x42480000
 80015dc:	200002fc 	.word	0x200002fc

080015e0 <VZbandrejectSetGain>:
 80015e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80015e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 80015ee:	4605      	mov	r5, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	f012 ff71 	bl	80144e0 <fasterdbtoa>
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <VZbandrejectSetGain+0x2c>)
 8001600:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001604:	ed84 0a00 	vstr	s0, [r4]
 8001608:	bd38      	pop	{r3, r4, r5, pc}
 800160a:	bf00      	nop
 800160c:	2000447c 	.word	0x2000447c

08001610 <LadderLowpassSetGain>:
 8001610:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001614:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001618:	b538      	push	{r3, r4, r5, lr}
 800161a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800161e:	4605      	mov	r5, r0
 8001620:	460c      	mov	r4, r1
 8001622:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	f012 ff59 	bl	80144e0 <fasterdbtoa>
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <LadderLowpassSetGain+0x2c>)
 8001630:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001634:	ed84 0a00 	vstr	s0, [r4]
 8001638:	bd38      	pop	{r3, r4, r5, pc}
 800163a:	bf00      	nop
 800163c:	2000447c 	.word	0x2000447c

08001640 <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 8001640:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001658 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 8001644:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <setEnvelopeAttack+0x1c>)
 800164a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800164e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001652:	f011 b827 	b.w	80126a4 <tADSRT_setAttack>
 8001656:	bf00      	nop
 8001658:	3c23d70a 	.word	0x3c23d70a
 800165c:	2000444c 	.word	0x2000444c

08001660 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 8001660:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001678 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 8001664:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <setEnvelopeDecay+0x1c>)
 800166a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800166e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001672:	f011 b82b 	b.w	80126cc <tADSRT_setDecay>
 8001676:	bf00      	nop
 8001678:	3c23d70a 	.word	0x3c23d70a
 800167c:	2000444c 	.word	0x2000444c

08001680 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <setEnvelopeSustain+0x10>)
 8001682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800168a:	f011 b833 	b.w	80126f4 <tADSRT_setSustain>
 800168e:	bf00      	nop
 8001690:	2000444c 	.word	0x2000444c

08001694 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 8001694:	eddf 7a05 	vldr	s15, [pc, #20]	; 80016ac <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 8001698:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <setEnvelopeRelease+0x1c>)
 800169e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80016a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80016a6:	f011 b83b 	b.w	8012720 <tADSRT_setRelease>
 80016aa:	bf00      	nop
 80016ac:	3c23d70a 	.word	0x3c23d70a
 80016b0:	2000444c 	.word	0x2000444c

080016b4 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 80016b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016b8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80016dc <setEnvelopeLeak+0x28>
 80016bc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80016e0 <setEnvelopeLeak+0x2c>
 80016c0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <setEnvelopeLeak+0x30>)
 80016c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80016ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80016ce:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	f011 b837 	b.w	8012748 <tADSRT_setLeakFactor>
 80016da:	bf00      	nop
 80016dc:	3851b717 	.word	0x3851b717
 80016e0:	3f7ffcb9 	.word	0x3f7ffcb9
 80016e4:	2000444c 	.word	0x2000444c

080016e8 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <setAmp+0xc>)
 80016ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80016ee:	ed81 0a00 	vstr	s0, [r1]
}
 80016f2:	4770      	bx	lr
 80016f4:	2000031c 	.word	0x2000031c

080016f8 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <setMaster+0xc>)
 80016fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80016fe:	ed81 0a00 	vstr	s0, [r1]
}
 8001702:	4770      	bx	lr
 8001704:	2000449c 	.word	0x2000449c

08001708 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 8001708:	4b01      	ldr	r3, [pc, #4]	; (8001710 <setTranspose+0x8>)
 800170a:	ed83 0a00 	vstr	s0, [r3]
}
 800170e:	4770      	bx	lr
 8001710:	20012ebc 	.word	0x20012ebc

08001714 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 8001714:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001724 <setPitchBendRange+0x10>
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <setPitchBendRange+0x14>)
 800171a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800171e:	ed83 0a00 	vstr	s0, [r3]
}
 8001722:	4770      	bx	lr
 8001724:	39000200 	.word	0x39000200
 8001728:	20000000 	.word	0x20000000

0800172c <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800172c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001730:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001760 <setFinalLowpass+0x34>
{
 8001734:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001738:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001764 <setFinalLowpass+0x38>
 800173c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001768 <setFinalLowpass+0x3c>
 8001740:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8001744:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001746:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 800174a:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800174c:	f012 fd7c 	bl	8014248 <LEAF_clip>
 8001750:	4806      	ldr	r0, [pc, #24]	; (800176c <setFinalLowpass+0x40>)
 8001752:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800175a:	f011 ba0f 	b.w	8012b7c <tSVF_setFreqFast>
 800175e:	bf00      	nop
 8001760:	420fb824 	.word	0x420fb824
 8001764:	457ff000 	.word	0x457ff000
 8001768:	00000000 	.word	0x00000000
 800176c:	20004494 	.word	0x20004494

08001770 <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 8001774:	4956      	ldr	r1, [pc, #344]	; (80018d0 <tickMappings+0x160>)
 8001776:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8001778:	4a56      	ldr	r2, [pc, #344]	; (80018d4 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 800177a:	4b57      	ldr	r3, [pc, #348]	; (80018d8 <tickMappings+0x168>)
{
 800177c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001780:	700f      	strb	r7, [r1, #0]
{
 8001782:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 8001784:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 8001786:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8001788:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 8086 	beq.w	800189c <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 8001790:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80018e8 <tickMappings+0x178>
 8001794:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80018ec <tickMappings+0x17c>
 8001798:	f898 2000 	ldrb.w	r2, [r8]
 800179c:	4c4f      	ldr	r4, [pc, #316]	; (80018dc <tickMappings+0x16c>)
 800179e:	2a00      	cmp	r2, #0
 80017a0:	d07c      	beq.n	800189c <tickMappings+0x12c>
 80017a2:	46a3      	mov	fp, r4
 80017a4:	464e      	mov	r6, r9
 80017a6:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 80017a8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80017ac:	2800      	cmp	r0, #0
 80017ae:	f000 8086 	beq.w	80018be <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80017b2:	f8db 101c 	ldr.w	r1, [fp, #28]
 80017b6:	f8db 2000 	ldr.w	r2, [fp]
 80017ba:	edd1 7a00 	vldr	s15, [r1]
 80017be:	ed92 7a00 	vldr	s14, [r2]
 80017c2:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80017c6:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 80017ca:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80017cc:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d16e      	bne.n	80018b2 <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 80017d4:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 80017d8:	eddf 7a41 	vldr	s15, [pc, #260]	; 80018e0 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 80017dc:	2801      	cmp	r0, #1
 80017de:	d027      	beq.n	8001830 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80017e0:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 80017e4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80017e8:	ed91 7a00 	vldr	s14, [r1]
 80017ec:	ed92 6a00 	vldr	s12, [r2]
 80017f0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80017f4:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80017f8:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80017fa:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d15a      	bne.n	80018b8 <tickMappings+0x148>
					unsmoothedValue += sum;
 8001802:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001806:	2802      	cmp	r0, #2
 8001808:	d012      	beq.n	8001830 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800180a:	f8db 1010 	ldr.w	r1, [fp, #16]
 800180e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8001812:	ed91 7a00 	vldr	s14, [r1]
 8001816:	ed92 6a00 	vldr	s12, [r2]
 800181a:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 800181e:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001822:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001824:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8001828:	2800      	cmp	r0, #0
 800182a:	d04d      	beq.n	80018c8 <tickMappings+0x158>
					smoothedValue += sum;
 800182c:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8001830:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001834:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 8001836:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 800183a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800183e:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001842:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001846:	f011 f89d 	bl	8012984 <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 800184a:	4630      	mov	r0, r6
 800184c:	f011 f89e 	bl	801298c <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8001850:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8001854:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 8001858:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 800185a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800185e:	4790      	blx	r2
 8001860:	1caa      	adds	r2, r5, #2
 8001862:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 8001866:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 800186a:	4629      	mov	r1, r5
 800186c:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 8001870:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8001872:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8001876:	6942      	ldr	r2, [r0, #20]
 8001878:	7e00      	ldrb	r0, [r0, #24]
 800187a:	ed9c 0a00 	vldr	s0, [ip]
 800187e:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 8001880:	f898 2000 	ldrb.w	r2, [r8]
 8001884:	42aa      	cmp	r2, r5
 8001886:	dc8f      	bgt.n	80017a8 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <tickMappings+0x168>)
 800188a:	3701      	adds	r7, #1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	429f      	cmp	r7, r3
 8001890:	da04      	bge.n	800189c <tickMappings+0x12c>
 8001892:	f109 0908 	add.w	r9, r9, #8
 8001896:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 8001898:	2a00      	cmp	r2, #0
 800189a:	d182      	bne.n	80017a2 <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <tickMappings+0x164>)
 800189e:	9901      	ldr	r1, [sp, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <tickMappings+0x174>)
 80018a4:	1a5b      	subs	r3, r3, r1
 80018a6:	6013      	str	r3, [r2, #0]

}
 80018a8:	b003      	add	sp, #12
 80018aa:	ecbd 8b02 	vpop	{d8}
 80018ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 80018b2:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 80018e0 <tickMappings+0x170>
 80018b6:	e791      	b.n	80017dc <tickMappings+0x6c>
					smoothedValue += sum;
 80018b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018bc:	e7a3      	b.n	8001806 <tickMappings+0x96>
			float smoothedValue = 0.0f;
 80018be:	eddf 7a08 	vldr	s15, [pc, #32]	; 80018e0 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 80018c2:	eeb0 8a67 	vmov.f32	s16, s15
 80018c6:	e7b3      	b.n	8001830 <tickMappings+0xc0>
					unsmoothedValue += sum;
 80018c8:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80018cc:	e7b0      	b.n	8001830 <tickMappings+0xc0>
 80018ce:	bf00      	nop
 80018d0:	2001515d 	.word	0x2001515d
 80018d4:	e0001000 	.word	0xe0001000
 80018d8:	20015b18 	.word	0x20015b18
 80018dc:	2001519c 	.word	0x2001519c
 80018e0:	00000000 	.word	0x00000000
 80018e4:	20012ea8 	.word	0x20012ea8
 80018e8:	20000066 	.word	0x20000066
 80018ec:	200046a0 	.word	0x200046a0

080018f0 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <lfoSawSquareTick+0x18>)
 80018f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80018f6:	b510      	push	{r4, lr}
 80018f8:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80018fa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80018fe:	f017 fae1 	bl	8018ec4 <tSawSquareLFO_tick>
 8001902:	ed84 0a00 	vstr	s0, [r4]
}
 8001906:	bd10      	pop	{r4, pc}
 8001908:	20004600 	.word	0x20004600

0800190c <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <lfoSineTriTick+0x18>)
 800190e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001912:	b510      	push	{r4, lr}
 8001914:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8001916:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800191a:	f017 fc15 	bl	8019148 <tSineTriLFO_tick>
 800191e:	ed84 0a00 	vstr	s0, [r4]
}
 8001922:	bd10      	pop	{r4, pc}
 8001924:	20004650 	.word	0x20004650

08001928 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <lfoSineTick+0x18>)
 800192a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800192e:	b510      	push	{r4, lr}
 8001930:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001932:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001936:	f012 ff69 	bl	801480c <tCycle_tick>
 800193a:	ed84 0a00 	vstr	s0, [r4]
}
 800193e:	bd10      	pop	{r4, pc}
 8001940:	20004630 	.word	0x20004630

08001944 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <lfoTriTick+0x18>)
 8001946:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800194a:	b510      	push	{r4, lr}
 800194c:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 800194e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001952:	f017 fb7d 	bl	8019050 <tTriLFO_tick>
 8001956:	ed84 0a00 	vstr	s0, [r4]
}
 800195a:	bd10      	pop	{r4, pc}
 800195c:	20004670 	.word	0x20004670

08001960 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <lfoSawTick+0x24>)
 8001962:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 800196a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800196e:	f017 f92b 	bl	8018bc8 <tIntPhasor_tick>
 8001972:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001976:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800197a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800197e:	edc4 7a00 	vstr	s15, [r4]
}
 8001982:	bd10      	pop	{r4, pc}
 8001984:	200045e0 	.word	0x200045e0

08001988 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <lfoPulseTick+0x18>)
 800198a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800198e:	b510      	push	{r4, lr}
 8001990:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001992:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001996:	f017 f9e5 	bl	8018d64 <tSquareLFO_tick>
 800199a:	ed84 0a00 	vstr	s0, [r4]
}
 800199e:	bd10      	pop	{r4, pc}
 80019a0:	200045c0 	.word	0x200045c0

080019a4 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <lfoSawSquareSetRate+0x10>)
 80019a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019ae:	f017 bacb 	b.w	8018f48 <tSawSquareLFO_setFreq>
 80019b2:	bf00      	nop
 80019b4:	20004600 	.word	0x20004600

080019b8 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 80019b8:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <lfoSineTriSetRate+0x10>)
 80019ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019c2:	f017 bc0d 	b.w	80191e0 <tSineTriLFO_setFreq>
 80019c6:	bf00      	nop
 80019c8:	20004650 	.word	0x20004650

080019cc <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <lfoSineSetRate+0x10>)
 80019ce:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019d6:	f012 bf3f 	b.w	8014858 <tCycle_setFreq>
 80019da:	bf00      	nop
 80019dc:	20004630 	.word	0x20004630

080019e0 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <lfoTriSetRate+0x10>)
 80019e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019ea:	f017 bb4b 	b.w	8019084 <tTriLFO_setFreq>
 80019ee:	bf00      	nop
 80019f0:	20004670 	.word	0x20004670

080019f4 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <lfoSawSetRate+0x10>)
 80019f6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019fe:	f017 b8f3 	b.w	8018be8 <tIntPhasor_setFreq>
 8001a02:	bf00      	nop
 8001a04:	200045e0 	.word	0x200045e0

08001a08 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <lfoPulseSetRate+0x10>)
 8001a0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a12:	f017 b9cb 	b.w	8018dac <tSquareLFO_setFreq>
 8001a16:	bf00      	nop
 8001a18:	200045c0 	.word	0x200045c0

08001a1c <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <lfoSawSquareSetPhase+0x10>)
 8001a1e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a26:	f017 bab3 	b.w	8018f90 <tSawSquareLFO_setPhase>
 8001a2a:	bf00      	nop
 8001a2c:	20004600 	.word	0x20004600

08001a30 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <lfoSineTriSetPhase+0x10>)
 8001a32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a3a:	f017 bbe9 	b.w	8019210 <tSineTriLFO_setPhase>
 8001a3e:	bf00      	nop
 8001a40:	20004650 	.word	0x20004650

08001a44 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <lfoSineSetPhase+0x10>)
 8001a46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a4e:	f012 bf0f 	b.w	8014870 <tCycle_setPhase>
 8001a52:	bf00      	nop
 8001a54:	20004630 	.word	0x20004630

08001a58 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <lfoTriSetPhase+0x10>)
 8001a5a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a62:	f017 bb1b 	b.w	801909c <tTriLFO_setPhase>
 8001a66:	bf00      	nop
 8001a68:	20004670 	.word	0x20004670

08001a6c <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <lfoSawSetPhase+0x10>)
 8001a6e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a76:	f017 b8c3 	b.w	8018c00 <tIntPhasor_setPhase>
 8001a7a:	bf00      	nop
 8001a7c:	200045e0 	.word	0x200045e0

08001a80 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <lfoPulseSetPhase+0x10>)
 8001a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a8a:	f017 b9c7 	b.w	8018e1c <tSquareLFO_setPhase>
 8001a8e:	bf00      	nop
 8001a90:	200045c0 	.word	0x200045c0

08001a94 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <lfoSawSquareSetShape+0x10>)
 8001a96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a9e:	f017 baa9 	b.w	8018ff4 <tSawSquareLFO_setShape>
 8001aa2:	bf00      	nop
 8001aa4:	20004600 	.word	0x20004600

08001aa8 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <lfoSineTriSetShape+0x10>)
 8001aaa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001aae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ab2:	f017 bbc5 	b.w	8019240 <tSineTriLFO_setShape>
 8001ab6:	bf00      	nop
 8001ab8:	20004650 	.word	0x20004650

08001abc <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <lfoTriSetShape>:
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop

08001ac4 <lfoSawSetShape>:
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <lfoPulseSetShape+0x10>)
 8001aca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ace:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ad2:	f017 b983 	b.w	8018ddc <tSquareLFO_setPulseWidth>
 8001ad6:	bf00      	nop
 8001ad8:	200045c0 	.word	0x200045c0

08001adc <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001adc:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 8001ae0:	b538      	push	{r3, r4, r5, lr}
 8001ae2:	4605      	mov	r5, r0
 8001ae4:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001aea:	f012 fcf9 	bl	80144e0 <fasterdbtoa>
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <clipperGainSet+0x24>)
 8001af0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001af4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001af8:	ed84 0a00 	vstr	s0, [r4]
}
 8001afc:	bd38      	pop	{r3, r4, r5, pc}
 8001afe:	bf00      	nop
 8001b00:	20004864 	.word	0x20004864

08001b04 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001b04:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001b0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001b12:	f012 fce5 	bl	80144e0 <fasterdbtoa>
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <wavefolderParam1+0x24>)
 8001b18:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001b1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001b20:	ed84 0a00 	vstr	s0, [r4]
}
 8001b24:	bd38      	pop	{r3, r4, r5, pc}
 8001b26:	bf00      	nop
 8001b28:	20004864 	.word	0x20004864

08001b2c <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001b2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001b30:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8001b36:	4808      	ldr	r0, [pc, #32]	; (8001b58 <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001b38:	ee70 6a27 	vadd.f32	s13, s0, s15
 8001b3c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 8001b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001b44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8001b48:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001b4c:	ed83 7a00 	vstr	s14, [r3]
}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20004520 	.word	0x20004520
 8001b58:	200048a4 	.word	0x200048a4

08001b5c <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8001b5c:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001b5e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8001b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001b66:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001b6a:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 8001b6e:	0084      	lsls	r4, r0, #2
{
 8001b70:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001b74:	eee0 7a68 	vfms.f32	s15, s0, s17
 8001b78:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7c:	f012 fcb0 	bl	80144e0 <fasterdbtoa>
 8001b80:	4808      	ldr	r0, [pc, #32]	; (8001ba4 <tiltParam1+0x48>)
 8001b82:	4420      	add	r0, r4
 8001b84:	f011 fbe2 	bl	801334c <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001b88:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8001b8c:	eea8 0a28 	vfma.f32	s0, s16, s17
 8001b90:	f012 fca6 	bl	80144e0 <fasterdbtoa>
 8001b94:	4804      	ldr	r0, [pc, #16]	; (8001ba8 <tiltParam1+0x4c>)
}
 8001b96:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001b9a:	4420      	add	r0, r4
}
 8001b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001ba0:	f011 bbd4 	b.w	801334c <tVZFilter_setGain>
 8001ba4:	20004a2c 	.word	0x20004a2c
 8001ba8:	20004a4c 	.word	0x20004a4c

08001bac <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001bac:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001bb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001be4 <tiltParam2+0x38>
 8001bb4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001be8 <tiltParam2+0x3c>
 8001bb8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001bec <tiltParam2+0x40>
 8001bbc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001bc0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001bf0 <tiltParam2+0x44>
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001bca:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001bce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001bd2:	f012 fb39 	bl	8014248 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <tiltParam2+0x48>)
 8001bd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001be0:	f011 ba56 	b.w	8013090 <tVZFilter_setFreqFast>
 8001be4:	429a0000 	.word	0x429a0000
 8001be8:	420fb824 	.word	0x420fb824
 8001bec:	457ff000 	.word	0x457ff000
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	2000035c 	.word	0x2000035c

08001bf8 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 8001bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <tiltParam3+0x20>)
 8001bfe:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001c02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c06:	ee30 0a07 	vadd.f32	s0, s0, s14
 8001c0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001c12:	f011 bbb7 	b.w	8013384 <tVZFilter_setResonance>
 8001c16:	bf00      	nop
 8001c18:	2000035c 	.word	0x2000035c

08001c1c <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001c1c:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8001c20:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001c48 <tiltParam4+0x2c>
{
 8001c24:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001c26:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001c2a:	4605      	mov	r5, r0
 8001c2c:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001c2e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001c32:	eeb0 0a67 	vmov.f32	s0, s15
 8001c36:	f012 fc4b 	bl	80144d0 <fastdbtoa>
 8001c3a:	4804      	ldr	r0, [pc, #16]	; (8001c4c <tiltParam4+0x30>)
 8001c3c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001c44:	f011 bb82 	b.w	801334c <tVZFilter_setGain>
 8001c48:	42080000 	.word	0x42080000
 8001c4c:	2000035c 	.word	0x2000035c

08001c50 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 8001c50:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <compressorParam1+0x18>)
 8001c56:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001c5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001c62:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8001c66:	4770      	bx	lr
 8001c68:	20000380 	.word	0x20000380

08001c6c <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8001c6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <compressorParam2+0x30>)
 8001c72:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001c76:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001c7a:	eeb0 7a67 	vmov.f32	s14, s15
 8001c7e:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001c82:	eea0 7a26 	vfma.f32	s14, s0, s13
 8001c86:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8001c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c8e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001c92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c96:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000380 	.word	0x20000380

08001ca0 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 8001ca0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <compressorParam3+0x18>)
 8001ca6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001caa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001cae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001cb2:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000380 	.word	0x20000380

08001cbc <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <compressorParam4+0x30>)
 8001cbe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 8001cc2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001cf0 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001cc6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001cca:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001ccc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 8001cd0:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001cd4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001cd8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001cdc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001ce0:	f012 fa1e 	bl	8014120 <fasterexpf>
 8001ce4:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8001ce8:	bd10      	pop	{r4, pc}
 8001cea:	bf00      	nop
 8001cec:	20000380 	.word	0x20000380
 8001cf0:	3a83126f 	.word	0x3a83126f

08001cf4 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <compressorParam5+0x30>)
 8001cf6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 8001cfa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d28 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001cfe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001d02:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001d04:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8001d08:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001d0c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001d10:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001d14:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001d18:	f012 fa02 	bl	8014120 <fasterexpf>
 8001d1c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8001d20:	bd10      	pop	{r4, pc}
 8001d22:	bf00      	nop
 8001d24:	20000380 	.word	0x20000380
 8001d28:	3a83126f 	.word	0x3a83126f

08001d2c <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8001d2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <offsetParam2+0x1c>)
 8001d32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d3a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001d3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
}
 8001d46:	4770      	bx	lr
 8001d48:	20004884 	.word	0x20004884

08001d4c <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <param2Linear+0x10>)
 8001d4e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001d56:	ed83 0a00 	vstr	s0, [r3]
}
 8001d5a:	4770      	bx	lr
 8001d5c:	20004884 	.word	0x20004884

08001d60 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <param3Linear+0x10>)
 8001d62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001d6a:	ed83 0a00 	vstr	s0, [r3]
}
 8001d6e:	4770      	bx	lr
 8001d70:	200048a4 	.word	0x200048a4

08001d74 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8001d74:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001db8 <param3Soft+0x44>
 8001d78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d7c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001dbc <param3Soft+0x48>
 8001d80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001d84:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001dc0 <param3Soft+0x4c>
 8001d88:	eee0 7a26 	vfma.f32	s15, s0, s13
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <param3Soft+0x50>)
 8001d8e:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8001d94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001d98:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d9c:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 8001da0:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001da4:	eee5 6a86 	vfma.f32	s13, s11, s12
 8001da8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001db0:	edc1 6a00 	vstr	s13, [r1]
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	3f7d70a4 	.word	0x3f7d70a4
 8001dbc:	3c23d70a 	.word	0x3c23d70a
 8001dc0:	3eaaaaaa 	.word	0x3eaaaaaa
 8001dc4:	200048a4 	.word	0x200048a4
 8001dc8:	20004a00 	.word	0x20004a00

08001dcc <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001dcc:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001e2c <param3Hard+0x60>
 8001dd0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001e30 <param3Hard+0x64>
 8001dd4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e34 <param3Hard+0x68>
 8001dd8:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 8001ddc:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001dde:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <param3Hard+0x6c>)
 8001de0:	0045      	lsls	r5, r0, #1
 8001de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001de6:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001de8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001dec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001df0:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
 8001df4:	f017 fa5e 	bl	80192b4 <arm_sin_f32>
	if (tempDiv == 0.0f)
 8001df8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e00:	d00a      	beq.n	8001e18 <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <param3Hard+0x70>)
 8001e08:	442c      	add	r4, r5
 8001e0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001e0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001e12:	edc4 7a00 	vstr	s15, [r4]
}
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <param3Hard+0x70>)
 8001e1a:	442c      	add	r4, r5
 8001e1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001e40 <param3Hard+0x74>
 8001e20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001e24:	edc4 7a00 	vstr	s15, [r4]
}
 8001e28:	bd38      	pop	{r3, r4, r5, pc}
 8001e2a:	bf00      	nop
 8001e2c:	3f7d70a4 	.word	0x3f7d70a4
 8001e30:	3c23d70a 	.word	0x3c23d70a
 8001e34:	3fc90fdb 	.word	0x3fc90fdb
 8001e38:	200048a4 	.word	0x200048a4
 8001e3c:	200049e0 	.word	0x200049e0
 8001e40:	4479ffff 	.word	0x4479ffff

08001e44 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <param4Linear+0x10>)
 8001e46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e4e:	ed83 0a00 	vstr	s0, [r3]
}
 8001e52:	4770      	bx	lr
 8001e54:	200048c4 	.word	0x200048c4

08001e58 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <param5Linear+0x10>)
 8001e5a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e62:	ed83 0a00 	vstr	s0, [r3]
}
 8001e66:	4770      	bx	lr
 8001e68:	200048e4 	.word	0x200048e4

08001e6c <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001e6e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 8001e72:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001e90 <param3BC+0x24>
 8001e76:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <param3BC+0x28>)
 8001e7c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8001e80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	f010 bae8 	b.w	801245c <tCrusher_setSamplingRatio>
 8001e8c:	2000005c 	.word	0x2000005c
 8001e90:	3c23d70a 	.word	0x3c23d70a
 8001e94:	2000033c 	.word	0x2000033c

08001e98 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <fxMixSet+0x10>)
 8001e9a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001ea2:	ed83 0a00 	vstr	s0, [r3]
}
 8001ea6:	4770      	bx	lr
 8001ea8:	200044cc 	.word	0x200044cc

08001eac <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001eac:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001eb0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8001eb4:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001eb6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001eba:	4605      	mov	r5, r0
 8001ebc:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001ebe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	f012 fb0b 	bl	80144e0 <fasterdbtoa>
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <fxPostGainSet+0x2c>)
 8001ecc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001ed0:	ed84 0a00 	vstr	s0, [r4]
}
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200044ec 	.word	0x200044ec

08001edc <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 8001edc:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001ede:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 8001ee2:	4d36      	ldr	r5, [pc, #216]	; (8001fbc <wavefolderTick+0xe0>)
 8001ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001ee8:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 8001eea:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8001eee:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001ef2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001ef6:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <wavefolderTick+0xe8>)
 8001ef8:	ed9f 4a33 	vldr	s8, [pc, #204]	; 8001fc8 <wavefolderTick+0xec>
 8001efc:	0084      	lsls	r4, r0, #2
 8001efe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 8001f02:	eddf 3a32 	vldr	s7, [pc, #200]	; 8001fcc <wavefolderTick+0xf0>
{
 8001f06:	ed2d 8b02 	vpush	{d8}
 8001f0a:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001f0e:	ed93 6a00 	vldr	s12, [r3]
 8001f12:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8001f16:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8001f1a:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001f20:	ee30 0a06 	vadd.f32	s0, s0, s12
 8001f24:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
 8001f28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 8001f2c:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <wavefolderTick+0xf8>)
 8001f2e:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8001f32:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
 8001f36:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
 8001f3a:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <wavefolderTick+0xfc>)
 8001f40:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8001f44:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001fdc <wavefolderTick+0x100>
 8001f48:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
 8001f4c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8001f50:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8001f54:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8001f58:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
 8001f5c:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001f64:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 8001f68:	ee36 3ac5 	vsub.f32	s6, s13, s10
 8001f6c:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f70:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 8001f74:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f78:	ee25 5a23 	vmul.f32	s10, s10, s7
 8001f7c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8001f80:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8001f84:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f88:	eee7 7a05 	vfma.f32	s15, s14, s10
 8001f8c:	eeb0 8a67 	vmov.f32	s16, s15
 8001f90:	f017 f990 	bl	80192b4 <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8001f96:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001f98:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 8001f9c:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8001f9e:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 8001fa0:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8001fa4:	eee8 7ac0 	vfms.f32	s15, s17, s0
 8001fa8:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8001fac:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 8001fb0:	ecbd 8b02 	vpop	{d8}
 8001fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8001fb8:	f010 be54 	b.w	8012c64 <tHighpass_tick>
 8001fbc:	20012eec 	.word	0x20012eec
 8001fc0:	20004884 	.word	0x20004884
 8001fc4:	20004864 	.word	0x20004864
 8001fc8:	3eaaaaaa 	.word	0x3eaaaaaa
 8001fcc:	3fbffff8 	.word	0x3fbffff8
 8001fd0:	200048a4 	.word	0x200048a4
 8001fd4:	200048c4 	.word	0x200048c4
 8001fd8:	200048e4 	.word	0x200048e4
 8001fdc:	40c90fdb 	.word	0x40c90fdb
 8001fe0:	20004520 	.word	0x20004520
 8001fe4:	200003a0 	.word	0x200003a0

08001fe8 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 8001fe8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001fec:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002004 <chorusParam1+0x1c>
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <chorusParam1+0x20>)
 8001ff2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ff6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001ffa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001ffe:	edc3 7a00 	vstr	s15, [r3]
}
 8002002:	4770      	bx	lr
 8002004:	45b4a000 	.word	0x45b4a000
 8002008:	20004864 	.word	0x20004864

0800200c <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 800200c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002024 <chorusParam2+0x18>
 8002010:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <chorusParam2+0x1c>)
 8002016:	ee20 0a27 	vmul.f32	s0, s0, s15
 800201a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800201e:	ed83 0a00 	vstr	s0, [r3]
}
 8002022:	4770      	bx	lr
 8002024:	3dcccccd 	.word	0x3dcccccd
 8002028:	20004884 	.word	0x20004884

0800202c <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 800202c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800204c <chorusParam3+0x20>
 8002030:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002034:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002050 <chorusParam3+0x24>
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <chorusParam3+0x28>)
 800203a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800203e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002042:	eeb0 0a67 	vmov.f32	s0, s15
 8002046:	f012 bc07 	b.w	8014858 <tCycle_setFreq>
 800204a:	bf00      	nop
 800204c:	3ecccccd 	.word	0x3ecccccd
 8002050:	3c23d70a 	.word	0x3c23d70a
 8002054:	200047a4 	.word	0x200047a4

08002058 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 8002058:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002078 <chorusParam4+0x20>
 800205c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002060:	eddf 7a06 	vldr	s15, [pc, #24]	; 800207c <chorusParam4+0x24>
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <chorusParam4+0x28>)
 8002066:	eee0 7a07 	vfma.f32	s15, s0, s14
 800206a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800206e:	eeb0 0a67 	vmov.f32	s0, s15
 8002072:	f012 bbf1 	b.w	8014858 <tCycle_setFreq>
 8002076:	bf00      	nop
 8002078:	3ee38e37 	.word	0x3ee38e37
 800207c:	3c343958 	.word	0x3c343958
 8002080:	200047c4 	.word	0x200047c4

08002084 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
 8002084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002086:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 800208a:	4f28      	ldr	r7, [pc, #160]	; (800212c <chorusTick+0xa8>)
 800208c:	4e28      	ldr	r6, [pc, #160]	; (8002130 <chorusTick+0xac>)
 800208e:	4829      	ldr	r0, [pc, #164]	; (8002134 <chorusTick+0xb0>)
 8002090:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8002094:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 8002098:	4d27      	ldr	r5, [pc, #156]	; (8002138 <chorusTick+0xb4>)
 800209a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800209e:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80020a2:	008c      	lsls	r4, r1, #2
{
 80020a4:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 80020a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80020ac:	ed97 9a00 	vldr	s18, [r7]
{
 80020b0:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 80020b4:	edd6 9a00 	vldr	s19, [r6]
 80020b8:	f012 fba8 	bl	801480c <tCycle_tick>
 80020bc:	4628      	mov	r0, r5
 80020be:	eef0 7a48 	vmov.f32	s15, s16
 80020c2:	eee9 7a80 	vfma.f32	s15, s19, s0
 80020c6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800213c <chorusTick+0xb8>
 80020ca:	ee29 0a00 	vmul.f32	s0, s18, s0
 80020ce:	ee20 0a27 	vmul.f32	s0, s0, s15
 80020d2:	f010 f811 	bl	80120f8 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
 80020d6:	481a      	ldr	r0, [pc, #104]	; (8002140 <chorusTick+0xbc>)
 80020d8:	491a      	ldr	r1, [pc, #104]	; (8002144 <chorusTick+0xc0>)
 80020da:	edd6 9a00 	vldr	s19, [r6]
 80020de:	4420      	add	r0, r4
 80020e0:	ed97 9a00 	vldr	s18, [r7]
 80020e4:	440c      	add	r4, r1
 80020e6:	f012 fb91 	bl	801480c <tCycle_tick>
 80020ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80020ee:	eea9 8ac0 	vfms.f32	s16, s19, s0
 80020f2:	4620      	mov	r0, r4
 80020f4:	ee29 0a27 	vmul.f32	s0, s18, s15
 80020f8:	ee20 0a08 	vmul.f32	s0, s0, s16
 80020fc:	f00f fffc 	bl	80120f8 <tLinearDelay_setDelay>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
 8002100:	eeb0 0a68 	vmov.f32	s0, s17
 8002104:	4628      	mov	r0, r5
 8002106:	f00f ffbf 	bl	8012088 <tLinearDelay_tick>
 800210a:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
 800210e:	4620      	mov	r0, r4
 8002110:	eeb0 0a68 	vmov.f32	s0, s17
 8002114:	f00f ffb8 	bl	8012088 <tLinearDelay_tick>
    //temp = tHighpass_tick(&dcBlock1[v], temp);
    return -temp;
 8002118:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800211c:	ee38 0a00 	vadd.f32	s0, s16, s0
}
 8002120:	ee98 0aa7 	vfnms.f32	s0, s17, s15
 8002124:	ecbd 8b04 	vpop	{d8-d9}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800212a:	bf00      	nop
 800212c:	20004864 	.word	0x20004864
 8002130:	20004884 	.word	0x20004884
 8002134:	200047a4 	.word	0x200047a4
 8002138:	200043e4 	.word	0x200043e4
 800213c:	3f34fdf4 	.word	0x3f34fdf4
 8002140:	200047c4 	.word	0x200047c4
 8002144:	20004404 	.word	0x20004404

08002148 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002148:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <shaperTick+0x40>)
    sample = sample * param1[v][string];
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002150:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 8002154:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8002158:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 800215a:	edd2 7a00 	vldr	s15, [r2]
 800215e:	008c      	lsls	r4, r1, #2
 8002160:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <shaperTick+0x48>)
 800216a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800216e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002172:	edd1 0a00 	vldr	s1, [r1]
 8002176:	f012 f803 	bl	8014180 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <shaperTick+0x4c>)
 800217c:	4420      	add	r0, r4
    return temp;
}
 800217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002182:	f010 bd6f 	b.w	8012c64 <tHighpass_tick>
 8002186:	bf00      	nop
 8002188:	20004884 	.word	0x20004884
 800218c:	20004864 	.word	0x20004864
 8002190:	200048a4 	.word	0x200048a4
 8002194:	200003a0 	.word	0x200003a0

08002198 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 800219c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <tiltFilterTick+0x28>)
{
 80021a2:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 80021a4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80021a8:	008c      	lsls	r4, r1, #2
 80021aa:	f010 fd6b 	bl	8012c84 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 80021ae:	4806      	ldr	r0, [pc, #24]	; (80021c8 <tiltFilterTick+0x2c>)
 80021b0:	4420      	add	r0, r4
 80021b2:	f010 fd67 	bl	8012c84 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 80021b6:	4805      	ldr	r0, [pc, #20]	; (80021cc <tiltFilterTick+0x30>)
 80021b8:	4420      	add	r0, r4
    return sample;
}
 80021ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 80021be:	f010 bd61 	b.w	8012c84 <tVZFilter_tickEfficient>
 80021c2:	bf00      	nop
 80021c4:	20004a2c 	.word	0x20004a2c
 80021c8:	20004a4c 	.word	0x20004a4c
 80021cc:	2000035c 	.word	0x2000035c

080021d0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 80021d0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <tanhTick+0x48>)
 80021d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 80021da:	4810      	ldr	r0, [pc, #64]	; (800221c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 80021dc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 80021e0:	b510      	push	{r4, lr}
 80021e2:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
 80021e6:	008c      	lsls	r4, r1, #2
 80021e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80021ec:	eea6 0a87 	vfma.f32	s0, s13, s14
 80021f0:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
 80021f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80021f8:	f017 fd06 	bl	8019c08 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80021fc:	4808      	ldr	r0, [pc, #32]	; (8002220 <tanhTick+0x50>)
 80021fe:	4420      	add	r0, r4
 8002200:	f010 fd30 	bl	8012c64 <tHighpass_tick>
    temp *= param4[v][string];
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <tanhTick+0x54>)
 8002206:	4423      	add	r3, r4
 8002208:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 800220c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 8002210:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002214:	f017 bcf8 	b.w	8019c08 <tanhf>
 8002218:	20004884 	.word	0x20004884
 800221c:	20004864 	.word	0x20004864
 8002220:	200003a0 	.word	0x200003a0
 8002224:	200048c4 	.word	0x200048c4

08002228 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002228:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <softClipTick+0x6c>)
    float shape = param3[v][string];
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <softClipTick+0x70>)
    sample = sample + param2[v][string];
 8002230:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002234:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002238:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800229c <softClipTick+0x74>
    float shape = param3[v][string];
 800223c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002240:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002244:	4816      	ldr	r0, [pc, #88]	; (80022a0 <softClipTick+0x78>)
{
 8002246:	b410      	push	{r4}
    sample = sample * param1[v][string];
 8002248:	4c16      	ldr	r4, [pc, #88]	; (80022a4 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800224a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 800224e:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 8002252:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 8002256:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 800225a:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <softClipTick+0x80>)
    sample = sample + param2[v][string];
 800225c:	ed94 5a00 	vldr	s10, [r4]
 8002260:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 8002264:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 8002268:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 800226c:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 8002270:	ed93 0a00 	vldr	s0, [r3]
 8002274:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 8002278:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 800227c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002284:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002288:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800228c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002290:	f010 bce8 	b.w	8012c64 <tHighpass_tick>
 8002294:	20004884 	.word	0x20004884
 8002298:	200048a4 	.word	0x200048a4
 800229c:	3eaaaaaa 	.word	0x3eaaaaaa
 80022a0:	200003a0 	.word	0x200003a0
 80022a4:	20004864 	.word	0x20004864
 80022a8:	20004a00 	.word	0x20004a00

080022ac <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 80022ac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <hardClipTick+0x74>)
 80022b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 80022b8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80022bc:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 80022c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 80022c6:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 80022ca:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
 80022cc:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80022d0:	4e14      	ldr	r6, [pc, #80]	; (8002324 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 80022d2:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 80022d6:	4d14      	ldr	r5, [pc, #80]	; (8002328 <hardClipTick+0x7c>)
 80022d8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80022dc:	4425      	add	r5, r4
 80022de:	ed96 7a00 	vldr	s14, [r6]
 80022e2:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 80022e6:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 80022ea:	ee27 0a87 	vmul.f32	s0, s15, s14
 80022ee:	f016 ffe1 	bl	80192b4 <arm_sin_f32>
 80022f2:	ed96 7a00 	vldr	s14, [r6]
 80022f6:	edd5 7a00 	vldr	s15, [r5]
 80022fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002302:	f016 ffd7 	bl	80192b4 <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 8002306:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <hardClipTick+0x80>)
 800230c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002310:	4420      	add	r0, r4
    return sample;
}
 8002312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002316:	f010 bca5 	b.w	8012c64 <tHighpass_tick>
 800231a:	bf00      	nop
 800231c:	20004864 	.word	0x20004864
 8002320:	20004884 	.word	0x20004884
 8002324:	200048a4 	.word	0x200048a4
 8002328:	200049e0 	.word	0x200049e0
 800232c:	200003a0 	.word	0x200003a0

08002330 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 8002330:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <satTick+0x64>)
    sample = sample * param1[v][string];
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002338:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800233c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002340:	4816      	ldr	r0, [pc, #88]	; (800239c <satTick+0x6c>)
    sample = sample * param1[v][string];
 8002342:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002346:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 800234a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 800234c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 8002350:	008c      	lsls	r4, r1, #2
 8002352:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002356:	eeb0 6a47 	vmov.f32	s12, s14
 800235a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800235e:	eea7 6a80 	vfma.f32	s12, s15, s0
 8002362:	eea7 7a80 	vfma.f32	s14, s15, s0
 8002366:	eeb0 6ac6 	vabs.f32	s12, s12
 800236a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800236e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002372:	ee36 6b05 	vadd.f64	d6, d6, d5
 8002376:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800237a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800237e:	f010 fc71 	bl	8012c64 <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 8002382:	4807      	ldr	r0, [pc, #28]	; (80023a0 <satTick+0x70>)
 8002384:	4420      	add	r0, r4
 8002386:	f010 fc6d 	bl	8012c64 <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 800238a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 800238e:	f011 bf6f 	b.w	8014270 <LEAF_tanh>
 8002392:	bf00      	nop
 8002394:	20004884 	.word	0x20004884
 8002398:	20004864 	.word	0x20004864
 800239c:	200003a0 	.word	0x200003a0
 80023a0:	200003c0 	.word	0x200003c0

080023a4 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 80023a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <bcTick+0x20>)
    sample = sample * param1[v][string];
 80023ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 80023b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 80023b4:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 80023b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023bc:	f010 b80e 	b.w	80123dc <tCrusher_tick>
 80023c0:	20004864 	.word	0x20004864
 80023c4:	2000033c 	.word	0x2000033c

080023c8 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <compressorTick+0x10>)
 80023ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80023ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023d2:	f010 b89b 	b.w	801250c <tCompressor_tick>
 80023d6:	bf00      	nop
 80023d8:	20000380 	.word	0x20000380

080023dc <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <FXlowpassTick+0x10>)
 80023de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80023e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023e6:	f010 bb93 	b.w	8012b10 <tSVF_tick>
 80023ea:	bf00      	nop
 80023ec:	200002ac 	.word	0x200002ac

080023f0 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <FXhighpassTick+0x10>)
 80023f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80023f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023fa:	f010 bb89 	b.w	8012b10 <tSVF_tick>
 80023fe:	bf00      	nop
 8002400:	2000028c 	.word	0x2000028c

08002404 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <FXbandpassTick+0x10>)
 8002406:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800240a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800240e:	f010 bb7f 	b.w	8012b10 <tSVF_tick>
 8002412:	bf00      	nop
 8002414:	2000024c 	.word	0x2000024c

08002418 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <FXdiodeLowpassTick+0x10>)
 800241a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800241e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002422:	f011 b969 	b.w	80136f8 <tDiodeFilter_tick>
 8002426:	bf00      	nop
 8002428:	2000026c 	.word	0x2000026c

0800242c <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <FXVZpeakTick+0x10>)
 800242e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002432:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002436:	f010 bc25 	b.w	8012c84 <tVZFilter_tickEfficient>
 800243a:	bf00      	nop
 800243c:	2000022c 	.word	0x2000022c

08002440 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <FXVZlowshelfTick+0x10>)
 8002442:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002446:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800244a:	f010 bc1b 	b.w	8012c84 <tVZFilter_tickEfficient>
 800244e:	bf00      	nop
 8002450:	2000020c 	.word	0x2000020c

08002454 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <FXVZhighshelfTick+0x10>)
 8002456:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800245a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800245e:	f010 bc11 	b.w	8012c84 <tVZFilter_tickEfficient>
 8002462:	bf00      	nop
 8002464:	200001ec 	.word	0x200001ec

08002468 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <FXVZbandrejectTick+0x10>)
 800246a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800246e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002472:	f010 bc07 	b.w	8012c84 <tVZFilter_tickEfficient>
 8002476:	bf00      	nop
 8002478:	200001cc 	.word	0x200001cc

0800247c <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <FXLadderLowpassTick+0x10>)
 800247e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002482:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002486:	f011 bcb3 	b.w	8013df0 <tLadderFilter_tick>
 800248a:	bf00      	nop
 800248c:	200001ac 	.word	0x200001ac

08002490 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002490:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002494:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80024c8 <FXLowpassParam1+0x38>
 8002498:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80024cc <FXLowpassParam1+0x3c>
 800249c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80024d0 <FXLowpassParam1+0x40>
 80024a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80024a4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80024d4 <FXLowpassParam1+0x44>
{
 80024a8:	b538      	push	{r3, r4, r5, lr}
 80024aa:	4605      	mov	r5, r0
 80024ac:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80024ae:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80024b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80024b6:	f011 fec7 	bl	8014248 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <FXLowpassParam1+0x48>)
 80024bc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80024c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 80024c4:	f010 bb5a 	b.w	8012b7c <tSVF_setFreqFast>
 80024c8:	429a0000 	.word	0x429a0000
 80024cc:	420fb824 	.word	0x420fb824
 80024d0:	457ff000 	.word	0x457ff000
 80024d4:	00000000 	.word	0x00000000
 80024d8:	200002ac 	.word	0x200002ac

080024dc <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80024dc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80024e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002514 <FXHighpassParam1+0x38>
 80024e4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002518 <FXHighpassParam1+0x3c>
 80024e8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800251c <FXHighpassParam1+0x40>
 80024ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 80024f0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002520 <FXHighpassParam1+0x44>
{
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4605      	mov	r5, r0
 80024f8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80024fa:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 80024fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002502:	f011 fea1 	bl	8014248 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002506:	4807      	ldr	r0, [pc, #28]	; (8002524 <FXHighpassParam1+0x48>)
 8002508:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800250c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002510:	f010 bb34 	b.w	8012b7c <tSVF_setFreqFast>
 8002514:	429a0000 	.word	0x429a0000
 8002518:	420fb824 	.word	0x420fb824
 800251c:	457ff000 	.word	0x457ff000
 8002520:	00000000 	.word	0x00000000
 8002524:	2000028c 	.word	0x2000028c

08002528 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002528:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800252c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002560 <FXBandpassParam1+0x38>
 8002530:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002564 <FXBandpassParam1+0x3c>
 8002534:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002568 <FXBandpassParam1+0x40>
 8002538:	eee0 7a07 	vfma.f32	s15, s0, s14
 800253c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800256c <FXBandpassParam1+0x44>
{
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4605      	mov	r5, r0
 8002544:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002546:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800254a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800254e:	f011 fe7b 	bl	8014248 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8002552:	4807      	ldr	r0, [pc, #28]	; (8002570 <FXBandpassParam1+0x48>)
 8002554:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800255c:	f010 bb0e 	b.w	8012b7c <tSVF_setFreqFast>
 8002560:	429a0000 	.word	0x429a0000
 8002564:	420fb824 	.word	0x420fb824
 8002568:	457ff000 	.word	0x457ff000
 800256c:	00000000 	.word	0x00000000
 8002570:	2000024c 	.word	0x2000024c

08002574 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002574:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002578:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025ac <FXDiodeParam1+0x38>
 800257c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80025b0 <FXDiodeParam1+0x3c>
 8002580:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80025b4 <FXDiodeParam1+0x40>
 8002584:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002588:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80025b8 <FXDiodeParam1+0x44>
{
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	4605      	mov	r5, r0
 8002590:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002592:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002596:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800259a:	f011 fe55 	bl	8014248 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 800259e:	4807      	ldr	r0, [pc, #28]	; (80025bc <FXDiodeParam1+0x48>)
 80025a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80025a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80025a8:	f011 bbaa 	b.w	8013d00 <tDiodeFilter_setFreqFast>
 80025ac:	429a0000 	.word	0x429a0000
 80025b0:	420fb824 	.word	0x420fb824
 80025b4:	457ff000 	.word	0x457ff000
 80025b8:	00000000 	.word	0x00000000
 80025bc:	2000026c 	.word	0x2000026c

080025c0 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025c0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80025c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80025f8 <FXPeakParam1+0x38>
 80025c8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80025fc <FXPeakParam1+0x3c>
 80025cc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002600 <FXPeakParam1+0x40>
 80025d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80025d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002604 <FXPeakParam1+0x44>
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4605      	mov	r5, r0
 80025dc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025de:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80025e2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025e6:	f011 fe2f 	bl	8014248 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80025ea:	4807      	ldr	r0, [pc, #28]	; (8002608 <FXPeakParam1+0x48>)
 80025ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80025f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 80025f4:	f010 bd4c 	b.w	8013090 <tVZFilter_setFreqFast>
 80025f8:	429a0000 	.word	0x429a0000
 80025fc:	420fb824 	.word	0x420fb824
 8002600:	457ff000 	.word	0x457ff000
 8002604:	00000000 	.word	0x00000000
 8002608:	2000022c 	.word	0x2000022c

0800260c <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800260c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002610:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002644 <FXLowShelfParam1+0x38>
 8002614:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002648 <FXLowShelfParam1+0x3c>
 8002618:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800264c <FXLowShelfParam1+0x40>
 800261c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002620:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002650 <FXLowShelfParam1+0x44>
{
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4605      	mov	r5, r0
 8002628:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800262a:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800262e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002632:	f011 fe09 	bl	8014248 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002636:	4807      	ldr	r0, [pc, #28]	; (8002654 <FXLowShelfParam1+0x48>)
 8002638:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800263c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002640:	f010 bd26 	b.w	8013090 <tVZFilter_setFreqFast>
 8002644:	429a0000 	.word	0x429a0000
 8002648:	420fb824 	.word	0x420fb824
 800264c:	457ff000 	.word	0x457ff000
 8002650:	00000000 	.word	0x00000000
 8002654:	2000020c 	.word	0x2000020c

08002658 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002658:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800265c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002690 <FXHighShelfParam1+0x38>
 8002660:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002694 <FXHighShelfParam1+0x3c>
 8002664:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002698 <FXHighShelfParam1+0x40>
 8002668:	eee0 7a07 	vfma.f32	s15, s0, s14
 800266c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800269c <FXHighShelfParam1+0x44>
{
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4605      	mov	r5, r0
 8002674:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002676:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 800267a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800267e:	f011 fde3 	bl	8014248 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 8002682:	4807      	ldr	r0, [pc, #28]	; (80026a0 <FXHighShelfParam1+0x48>)
 8002684:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 800268c:	f010 bd00 	b.w	8013090 <tVZFilter_setFreqFast>
 8002690:	429a0000 	.word	0x429a0000
 8002694:	420fb824 	.word	0x420fb824
 8002698:	457ff000 	.word	0x457ff000
 800269c:	00000000 	.word	0x00000000
 80026a0:	200001ec 	.word	0x200001ec

080026a4 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026a4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026a8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026dc <FXNotchParam1+0x38>
 80026ac:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80026e0 <FXNotchParam1+0x3c>
 80026b0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80026e4 <FXNotchParam1+0x40>
 80026b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80026b8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80026e8 <FXNotchParam1+0x44>
{
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	4605      	mov	r5, r0
 80026c0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026c2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80026c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026ca:	f011 fdbd 	bl	8014248 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80026ce:	4807      	ldr	r0, [pc, #28]	; (80026ec <FXNotchParam1+0x48>)
 80026d0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80026d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 80026d8:	f010 bcda 	b.w	8013090 <tVZFilter_setFreqFast>
 80026dc:	429a0000 	.word	0x429a0000
 80026e0:	420fb824 	.word	0x420fb824
 80026e4:	457ff000 	.word	0x457ff000
 80026e8:	00000000 	.word	0x00000000
 80026ec:	200001cc 	.word	0x200001cc

080026f0 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026f0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002728 <FXLadderParam1+0x38>
 80026f8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800272c <FXLadderParam1+0x3c>
 80026fc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002730 <FXLadderParam1+0x40>
 8002700:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002704:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002734 <FXLadderParam1+0x44>
{
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	4605      	mov	r5, r0
 800270c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800270e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8002712:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002716:	f011 fd97 	bl	8014248 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 800271a:	4807      	ldr	r0, [pc, #28]	; (8002738 <FXLadderParam1+0x48>)
 800271c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8002724:	f011 bc8a 	b.w	801403c <tLadderFilter_setFreqFast>
 8002728:	429a0000 	.word	0x429a0000
 800272c:	420fb824 	.word	0x420fb824
 8002730:	457ff000 	.word	0x457ff000
 8002734:	00000000 	.word	0x00000000
 8002738:	200001ac 	.word	0x200001ac

0800273c <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800273c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002740:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002768 <FXPeakParam2+0x2c>
{
 8002744:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002746:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800274a:	4605      	mov	r5, r0
 800274c:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800274e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002752:	eeb0 0a67 	vmov.f32	s0, s15
 8002756:	f011 fec3 	bl	80144e0 <fasterdbtoa>
 800275a:	4804      	ldr	r0, [pc, #16]	; (800276c <FXPeakParam2+0x30>)
 800275c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002764:	f010 bdf2 	b.w	801334c <tVZFilter_setGain>
 8002768:	42480000 	.word	0x42480000
 800276c:	2000022c 	.word	0x2000022c

08002770 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002770:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002774:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800279c <FXLowShelfParam2+0x2c>
{
 8002778:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800277a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800277e:	4605      	mov	r5, r0
 8002780:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002782:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002786:	eeb0 0a67 	vmov.f32	s0, s15
 800278a:	f011 fea9 	bl	80144e0 <fasterdbtoa>
 800278e:	4804      	ldr	r0, [pc, #16]	; (80027a0 <FXLowShelfParam2+0x30>)
 8002790:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002798:	f010 bdd8 	b.w	801334c <tVZFilter_setGain>
 800279c:	42480000 	.word	0x42480000
 80027a0:	2000020c 	.word	0x2000020c

080027a4 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027a4:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80027a8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80027d0 <FXHighShelfParam2+0x2c>
{
 80027ac:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027ae:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80027b2:	4605      	mov	r5, r0
 80027b4:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027b6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80027ba:	eeb0 0a67 	vmov.f32	s0, s15
 80027be:	f011 fe8f 	bl	80144e0 <fasterdbtoa>
 80027c2:	4804      	ldr	r0, [pc, #16]	; (80027d4 <FXHighShelfParam2+0x30>)
 80027c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80027c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027cc:	f010 bdbe 	b.w	801334c <tVZFilter_setGain>
 80027d0:	42480000 	.word	0x42480000
 80027d4:	200001ec 	.word	0x200001ec

080027d8 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027d8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80027dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002804 <FXNotchParam2+0x2c>
{
 80027e0:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027e2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80027e6:	4605      	mov	r5, r0
 80027e8:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80027ea:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80027ee:	eeb0 0a67 	vmov.f32	s0, s15
 80027f2:	f011 fe75 	bl	80144e0 <fasterdbtoa>
 80027f6:	4804      	ldr	r0, [pc, #16]	; (8002808 <FXNotchParam2+0x30>)
 80027f8:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 80027fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002800:	f010 bda4 	b.w	801334c <tVZFilter_setGain>
 8002804:	42480000 	.word	0x42480000
 8002808:	200001cc 	.word	0x200001cc

0800280c <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 800280c:	4b03      	ldr	r3, [pc, #12]	; (800281c <FXLowpassParam3+0x10>)
 800280e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002812:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002816:	f010 b9e7 	b.w	8012be8 <tSVF_setQ>
 800281a:	bf00      	nop
 800281c:	200002ac 	.word	0x200002ac

08002820 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <FXHighpassParam3+0x10>)
 8002822:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002826:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800282a:	f010 b9dd 	b.w	8012be8 <tSVF_setQ>
 800282e:	bf00      	nop
 8002830:	2000028c 	.word	0x2000028c

08002834 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <FXBandpassParam3+0x10>)
 8002836:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800283a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800283e:	f010 b9d3 	b.w	8012be8 <tSVF_setQ>
 8002842:	bf00      	nop
 8002844:	2000024c 	.word	0x2000024c

08002848 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <FXDiodeParam3+0x10>)
 800284a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800284e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002852:	f011 ba75 	b.w	8013d40 <tDiodeFilter_setQ>
 8002856:	bf00      	nop
 8002858:	2000026c 	.word	0x2000026c

0800285c <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <FXPeakParam3+0x10>)
 800285e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002862:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002866:	f010 bd8d 	b.w	8013384 <tVZFilter_setResonance>
 800286a:	bf00      	nop
 800286c:	2000022c 	.word	0x2000022c

08002870 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <FXLowShelfParam3+0x10>)
 8002872:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002876:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800287a:	f010 bd83 	b.w	8013384 <tVZFilter_setResonance>
 800287e:	bf00      	nop
 8002880:	2000020c 	.word	0x2000020c

08002884 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <FXHighShelfParam3+0x10>)
 8002886:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800288a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800288e:	f010 bd79 	b.w	8013384 <tVZFilter_setResonance>
 8002892:	bf00      	nop
 8002894:	200001ec 	.word	0x200001ec

08002898 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <FXNotchParam3+0x10>)
 800289a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800289e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80028a2:	f010 bd6f 	b.w	8013384 <tVZFilter_setResonance>
 80028a6:	bf00      	nop
 80028a8:	200001cc 	.word	0x200001cc

080028ac <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <FXLadderParam3+0x10>)
 80028ae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80028b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80028b6:	f011 bbe5 	b.w	8014084 <tLadderFilter_setQ>
 80028ba:	bf00      	nop
 80028bc:	200001ac 	.word	0x200001ac

080028c0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 80028c0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80028c2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80028c6:	008c      	lsls	r4, r1, #2
{
 80028c8:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80028cc:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 80028d0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 80028d4:	eee0 7a68 	vfms.f32	s15, s0, s17
 80028d8:	eeb0 0a67 	vmov.f32	s0, s15
 80028dc:	f011 fdf8 	bl	80144d0 <fastdbtoa>
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <noiseSetTilt+0x44>)
 80028e2:	4420      	add	r0, r4
 80028e4:	f010 fd32 	bl	801334c <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 80028e8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 80028ec:	eea8 0a28 	vfma.f32	s0, s16, s17
 80028f0:	f011 fdee 	bl	80144d0 <fastdbtoa>
 80028f4:	4804      	ldr	r0, [pc, #16]	; (8002908 <noiseSetTilt+0x48>)
}
 80028f6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 80028fa:	4420      	add	r0, r4
}
 80028fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8002900:	f010 bd24 	b.w	801334c <tVZFilter_setGain>
 8002904:	2000480c 	.word	0x2000480c
 8002908:	20004814 	.word	0x20004814

0800290c <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 800290c:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8002910:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002934 <noiseSetGain+0x28>
{
 8002914:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002916:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800291a:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 800291c:	eeb0 0a67 	vmov.f32	s0, s15
 8002920:	f011 fdd6 	bl	80144d0 <fastdbtoa>
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <noiseSetGain+0x2c>)
 8002926:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 800292e:	f010 bd0d 	b.w	801334c <tVZFilter_setGain>
 8002932:	bf00      	nop
 8002934:	42080000 	.word	0x42080000
 8002938:	200047f4 	.word	0x200047f4

0800293c <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800293c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002940:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002970 <noiseSetFreq+0x34>
 8002944:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002974 <noiseSetFreq+0x38>
 8002948:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002978 <noiseSetFreq+0x3c>
 800294c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002950:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800297c <noiseSetFreq+0x40>
{
 8002954:	b510      	push	{r4, lr}
 8002956:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002958:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800295c:	f011 fc74 	bl	8014248 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8002960:	4807      	ldr	r0, [pc, #28]	; (8002980 <noiseSetFreq+0x44>)
 8002962:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 800296a:	f010 bb91 	b.w	8013090 <tVZFilter_setFreqFast>
 800296e:	bf00      	nop
 8002970:	429a0000 	.word	0x429a0000
 8002974:	420fb824 	.word	0x420fb824
 8002978:	457ff000 	.word	0x457ff000
 800297c:	00000000 	.word	0x00000000
 8002980:	200047f4 	.word	0x200047f4

08002984 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;

uint8_t randomValPointer = 0;
void __ATTR_ITCMRAM noise_tick(int string)
{
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 8002986:	4d27      	ldr	r5, [pc, #156]	; (8002a24 <noise_tick+0xa0>)
{
 8002988:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 800298a:	4927      	ldr	r1, [pc, #156]	; (8002a28 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 800298e:	4f28      	ldr	r7, [pc, #160]	; (8002a30 <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002990:	4828      	ldr	r0, [pc, #160]	; (8002a34 <noise_tick+0xb0>)
{
 8002992:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 8002996:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002998:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 800299c:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 800299e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80029a2:	3201      	adds	r2, #1
 80029a4:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 80029a6:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 80029aa:	ed91 0a00 	vldr	s0, [r1]
 80029ae:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 80029b0:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 80029b4:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 80029b8:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 80029bc:	f010 f962 	bl	8012c84 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 80029c0:	481d      	ldr	r0, [pc, #116]	; (8002a38 <noise_tick+0xb4>)
 80029c2:	4428      	add	r0, r5
 80029c4:	f010 f95e 	bl	8012c84 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 80029c8:	481c      	ldr	r0, [pc, #112]	; (8002a3c <noise_tick+0xb8>)
 80029ca:	4428      	add	r0, r5
 80029cc:	f010 f95a 	bl	8012c84 <tVZFilter_tickEfficient>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 80029d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
 80029d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002a40 <noise_tick+0xbc>
	sourceValues[3][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
 80029d8:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
 80029dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[3][string] = normSample;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 80029e2:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
 80029e6:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 80029ea:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 80029ee:	4816      	ldr	r0, [pc, #88]	; (8002a48 <noise_tick+0xc4>)
	sourceValues[3][string] = normSample;
 80029f0:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 80029f6:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 80029fa:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
 80029fc:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002a00:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002a04:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
 8002a08:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002a0c:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002a10:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[3][string] = normSample;
 8002a14:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
 8002a18:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 8002a1a:	1b9b      	subs	r3, r3, r6
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	ecbd 8b04 	vpop	{d8-d9}
 8002a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a24:	200049ac 	.word	0x200049ac
 8002a28:	20016c2c 	.word	0x20016c2c
 8002a2c:	20015b1c 	.word	0x20015b1c
 8002a30:	e0001000 	.word	0xe0001000
 8002a34:	2000480c 	.word	0x2000480c
 8002a38:	20004814 	.word	0x20004814
 8002a3c:	200047f4 	.word	0x200047f4
 8002a40:	00000000 	.word	0x00000000
 8002a44:	20012d2c 	.word	0x20012d2c
 8002a48:	200047fc 	.word	0x200047fc
 8002a4c:	20012eb0 	.word	0x20012eb0

08002a50 <audioTickL>:
{
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8002a54:	2100      	movs	r1, #0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002a56:	4aba      	ldr	r2, [pc, #744]	; (8002d40 <audioTickL+0x2f0>)
	interrupted = 0;
 8002a58:	48ba      	ldr	r0, [pc, #744]	; (8002d44 <audioTickL+0x2f4>)
 8002a5a:	4cbb      	ldr	r4, [pc, #748]	; (8002d48 <audioTickL+0x2f8>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002a5c:	4bbb      	ldr	r3, [pc, #748]	; (8002d4c <audioTickL+0x2fc>)
 8002a5e:	4ebc      	ldr	r6, [pc, #752]	; (8002d50 <audioTickL+0x300>)
 8002a60:	f104 0810 	add.w	r8, r4, #16
	tickMappings();
 8002a64:	4dbb      	ldr	r5, [pc, #748]	; (8002d54 <audioTickL+0x304>)
{
 8002a66:	ed2d 8b06 	vpush	{d8-d10}
 8002a6a:	b08d      	sub	sp, #52	; 0x34
 8002a6c:	af00      	add	r7, sp, #0
	interrupted = 0;
 8002a6e:	7001      	strb	r1, [r0, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
 8002a70:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002a72:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002a76:	60ba      	str	r2, [r7, #8]
	tickMappings();
 8002a78:	f7fe fe7a 	bl	8001770 <tickMappings>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f00f ff85 	bl	801298c <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 8002a82:	4bb5      	ldr	r3, [pc, #724]	; (8002d58 <audioTickL+0x308>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002a84:	eca4 0a01 	vstmia	r4!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b12b      	cbz	r3, 8002a98 <audioTickL+0x48>
 8002a8c:	2b01      	cmp	r3, #1
			sourceValues[CTRL_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002a8e:	ed85 0a18 	vstr	s0, [r5, #96]	; 0x60
		for (int v = 0; v < numStringsThisBoard; v++)
 8002a92:	d001      	beq.n	8002a98 <audioTickL+0x48>
			sourceValues[CTRL_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002a94:	ed85 0a19 	vstr	s0, [r5, #100]	; 0x64
	for (int i = 0; i < 4; i++)
 8002a98:	4544      	cmp	r4, r8
 8002a9a:	f106 0604 	add.w	r6, r6, #4
 8002a9e:	f105 0508 	add.w	r5, r5, #8
 8002aa2:	d1eb      	bne.n	8002a7c <audioTickL+0x2c>
	float note[numStringsThisBoard];
 8002aa4:	009a      	lsls	r2, r3, #2
	float masterSample = 0.0f;
 8002aa6:	ed9f 9aad 	vldr	s18, [pc, #692]	; 8002d5c <audioTickL+0x30c>
	float note[numStringsThisBoard];
 8002aaa:	3207      	adds	r2, #7
 8002aac:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 8002ab0:	ebad 0d02 	sub.w	sp, sp, r2
 8002ab4:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8115 	beq.w	8002ce6 <audioTickL+0x296>
 8002abc:	4ba8      	ldr	r3, [pc, #672]	; (8002d60 <audioTickL+0x310>)
 8002abe:	f04f 0a00 	mov.w	sl, #0
		if (note[v] < 0.0f)
 8002ac2:	eef0 8a49 	vmov.f32	s17, s18
 8002ac6:	61fa      	str	r2, [r7, #28]
 8002ac8:	617b      	str	r3, [r7, #20]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002aca:	46d3      	mov	fp, sl
 8002acc:	4ba5      	ldr	r3, [pc, #660]	; (8002d64 <audioTickL+0x314>)
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <audioTickL+0x318>)
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	4ba5      	ldr	r3, [pc, #660]	; (8002d6c <audioTickL+0x31c>)
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	4ba5      	ldr	r3, [pc, #660]	; (8002d70 <audioTickL+0x320>)
 8002ada:	61bb      	str	r3, [r7, #24]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	ecb3 8a01 	vldmia	r3!, {s16}
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	4ba3      	ldr	r3, [pc, #652]	; (8002d74 <audioTickL+0x324>)
 8002ae6:	4453      	add	r3, sl
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (note[v] < 0.0f)
 8002af0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	f100 816a 	bmi.w	8002dd0 <audioTickL+0x380>
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	ed83 8a00 	vstr	s16, [r3]
	interruptChecker = 0;
 8002b02:	4b9d      	ldr	r3, [pc, #628]	; (8002d78 <audioTickL+0x328>)
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	4a8c      	ldr	r2, [pc, #560]	; (8002d40 <audioTickL+0x2f0>)
 8002b0e:	f1a3 0520 	sub.w	r5, r3, #32
 8002b12:	4699      	mov	r9, r3
 8002b14:	6854      	ldr	r4, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8002b16:	4a99      	ldr	r2, [pc, #612]	; (8002d7c <audioTickL+0x32c>)
	uint32_t tempCount1 = DWT->CYCCNT;
 8002b18:	462e      	mov	r6, r5
 8002b1a:	eb02 080a 	add.w	r8, r2, sl
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002b1e:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 8002b20:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002b22:	f00f fe3d 	bl	80127a0 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 8002b26:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 8002b2a:	454e      	cmp	r6, r9
 8002b2c:	f108 0808 	add.w	r8, r8, #8
 8002b30:	d1f5      	bne.n	8002b1e <audioTickL+0xce>
	timeEnv = DWT->CYCCNT - tempCount1;
 8002b32:	4a83      	ldr	r2, [pc, #524]	; (8002d40 <audioTickL+0x2f0>)
	interruptChecker = 0;
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	4e91      	ldr	r6, [pc, #580]	; (8002d80 <audioTickL+0x330>)
	timeEnv = DWT->CYCCNT - tempCount1;
 8002b3a:	6853      	ldr	r3, [r2, #4]
 8002b3c:	1b1c      	subs	r4, r3, r4
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <audioTickL+0x334>)
 8002b40:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < NUM_LFOS; i++)
 8002b42:	2400      	movs	r4, #0
	interruptChecker = 0;
 8002b44:	4b8c      	ldr	r3, [pc, #560]	; (8002d78 <audioTickL+0x328>)
 8002b46:	7019      	strb	r1, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002b48:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8002b4c:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 8002b50:	4621      	mov	r1, r4
 8002b52:	465a      	mov	r2, fp
 8002b54:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 8002b58:	edc7 8a0a 	vstr	s17, [r7, #40]	; 0x28
		if (lfoOn[i])
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 812f 	beq.w	8002dc0 <audioTickL+0x370>
			lfoShapeTick[i](&sample,i, string);
 8002b62:	4b89      	ldr	r3, [pc, #548]	; (8002d88 <audioTickL+0x338>)
	for (int i = 0; i < NUM_LFOS; i++)
 8002b64:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 8002b66:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8002b6a:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 8002b6c:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 8002b70:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002b72:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 8002b76:	d1e9      	bne.n	8002b4c <audioTickL+0xfc>
	timeLFO = DWT->CYCCNT - tempCount1;
 8002b78:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <audioTickL+0x2f0>)
		oscillator_tick(note[v], v);
 8002b7a:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 8002b7e:	4a83      	ldr	r2, [pc, #524]	; (8002d8c <audioTickL+0x33c>)
		oscillator_tick(note[v], v);
 8002b80:	4658      	mov	r0, fp
	timeLFO = DWT->CYCCNT - tempCount1;
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	eba3 0308 	sub.w	r3, r3, r8
 8002b88:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8002b8a:	f7fd ff79 	bl	8000a80 <oscillator_tick>
		noise_tick(v);
 8002b8e:	4658      	mov	r0, fp
 8002b90:	f7ff fef8 	bl	8002984 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8002b94:	4b7e      	ldr	r3, [pc, #504]	; (8002d90 <audioTickL+0x340>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 817a 	beq.w	8002e92 <audioTickL+0x442>
			filterSamps[0] += oscOuts[0][i][v];
 8002b9e:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
 8002ba0:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 8002ba2:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8002ba6:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8002baa:	d011      	beq.n	8002bd0 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002bac:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 8002bb0:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 8002bb2:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8002bb6:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002bba:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 8002bbe:	d007      	beq.n	8002bd0 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002bc0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8002bc4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8002bc8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002bcc:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 8002bd0:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8002bdc:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 8002be0:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8002be4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002be8:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8002bea:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 8002bee:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 8002bf2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002bf6:	f7fe f981 	bl	8000efc <filter_tick>
		if (fxPre)
 8002bfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002bfe:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 8002c02:	eef4 9ae7 	vcmpe.f32	s19, s15
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	dd04      	ble.n	8002c16 <audioTickL+0x1c6>
			sample *= amplitude[v];
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8002c16:	4b5f      	ldr	r3, [pc, #380]	; (8002d94 <audioTickL+0x344>)
 8002c18:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8002c1a:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <audioTickL+0x2f0>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 8002c20:	2c00      	cmp	r4, #0
 8002c22:	f040 80db 	bne.w	8002ddc <audioTickL+0x38c>
			for (int i = 0; i < numEffectToTick; i++)
 8002c26:	4b5c      	ldr	r3, [pc, #368]	; (8002d98 <audioTickL+0x348>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b323      	cbz	r3, 8002c76 <audioTickL+0x226>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002c2c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002c30:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002dbc <audioTickL+0x36c>
			for (int i = 0; i < numEffectToTick; i++)
 8002c34:	46d0      	mov	r8, sl
 8002c36:	4e59      	ldr	r6, [pc, #356]	; (8002d9c <audioTickL+0x34c>)
 8002c38:	4d59      	ldr	r5, [pc, #356]	; (8002da0 <audioTickL+0x350>)
				sample = effectTick[i](sample, i, v); //run the effect
 8002c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f859 3b04 	ldr.w	r3, [r9], #4
 8002c44:	4659      	mov	r1, fp
 8002c46:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002c48:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
 8002c4c:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
				sample *= fxPostGain[i][v];
 8002c52:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
 8002c56:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002c5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c5e:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002c62:	eea7 0a88 	vfma.f32	s0, s15, s16
				sample *= fxPostGain[i][v];
 8002c66:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <audioTickL+0x348>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 8002c70:	ee20 8a08 	vmul.f32	s16, s0, s16
			for (int i = 0; i < numEffectToTick; i++)
 8002c74:	dce1      	bgt.n	8002c3a <audioTickL+0x1ea>
		if (!fxPre)
 8002c76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <audioTickL+0x2f0>)
		oversampleCount = tempCount2-tempCount1;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 8002c7e:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
 8002c80:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <audioTickL+0x354>)
		if (!fxPre)
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
 8002c8c:	6013      	str	r3, [r2, #0]
		if (!fxPre)
 8002c8e:	d804      	bhi.n	8002c9a <audioTickL+0x24a>
			sample *= amplitude[v];
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002c9c:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
 8002ca0:	f10b 0b01 	add.w	fp, fp, #1
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	3304      	adds	r3, #4
 8002cac:	623b      	str	r3, [r7, #32]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <audioTickL+0x358>)
 8002cbc:	eb03 000a 	add.w	r0, r3, sl
 8002cc0:	f00f ff26 	bl	8012b10 <tSVF_tick>
		masterSample *= finalMaster[v] ;
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <audioTickL+0x35c>)
		masterSample += sample;
 8002cc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		masterSample *= finalMaster[v] ;
 8002cca:	4453      	add	r3, sl
	for (int v = 0; v < numStringsThisBoard; v++)
 8002ccc:	f10a 0a04 	add.w	sl, sl, #4
		masterSample += sample;
 8002cd0:	eea0 9a27 	vfma.f32	s18, s0, s15
		masterSample *= finalMaster[v] ;
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002cd8:	4b1f      	ldr	r3, [pc, #124]	; (8002d58 <audioTickL+0x308>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	455b      	cmp	r3, fp
		masterSample *= finalMaster[v] ;
 8002cde:	ee29 9a27 	vmul.f32	s18, s18, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002ce2:	f73f aefb 	bgt.w	8002adc <audioTickL+0x8c>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8002ce6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002cea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002cee:	eef0 0a49 	vmov.f32	s1, s18
 8002cf2:	f011 faa9 	bl	8014248 <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <audioTickL+0x2f0>)
	timeTick = tempCount6-tempCount5;
 8002cf8:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
 8002cfa:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8002cfe:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8002d00:	492b      	ldr	r1, [pc, #172]	; (8002db0 <audioTickL+0x360>)
 8002d02:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 8002d04:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 8002d06:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8002d08:	d90b      	bls.n	8002d22 <audioTickL+0x2d2>
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <audioTickL+0x2f4>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b943      	cbnz	r3, 8002d22 <audioTickL+0x2d2>
		if (overSampled)
 8002d10:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <audioTickL+0x344>)
 8002d12:	7811      	ldrb	r1, [r2, #0]
 8002d14:	b921      	cbnz	r1, 8002d20 <audioTickL+0x2d0>
		else if (oscToTick > 1)
 8002d16:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <audioTickL+0x340>)
 8002d18:	7813      	ldrb	r3, [r2, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d901      	bls.n	8002d22 <audioTickL+0x2d2>
			oscToTick--;
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <audioTickL+0x364>)
}
 8002d24:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 8002d26:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002db8 <audioTickL+0x368>
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002d32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d36:	46bd      	mov	sp, r7
 8002d38:	ecbd 8b06 	vpop	{d8-d10}
 8002d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d40:	e0001000 	.word	0xe0001000
 8002d44:	2000451c 	.word	0x2000451c
 8002d48:	20004548 	.word	0x20004548
 8002d4c:	20016b1c 	.word	0x20016b1c
 8002d50:	20004558 	.word	0x20004558
 8002d54:	20012d2c 	.word	0x20012d2c
 8002d58:	20000066 	.word	0x20000066
 8002d5c:	00000000 	.word	0x00000000
 8002d60:	20012e44 	.word	0x20012e44
 8002d64:	2000031c 	.word	0x2000031c
 8002d68:	200047fc 	.word	0x200047fc
 8002d6c:	20012d4c 	.word	0x20012d4c
 8002d70:	20004828 	.word	0x20004828
 8002d74:	20012e7c 	.word	0x20012e7c
 8002d78:	2001515d 	.word	0x2001515d
 8002d7c:	2000444c 	.word	0x2000444c
 8002d80:	200045bc 	.word	0x200045bc
 8002d84:	20012e98 	.word	0x20012e98
 8002d88:	20004620 	.word	0x20004620
 8002d8c:	20012ea4 	.word	0x20012ea4
 8002d90:	2000007c 	.word	0x2000007c
 8002d94:	2000007d 	.word	0x2000007d
 8002d98:	20000064 	.word	0x20000064
 8002d9c:	200044cc 	.word	0x200044cc
 8002da0:	200044ec 	.word	0x200044ec
 8002da4:	20004858 	.word	0x20004858
 8002da8:	20004494 	.word	0x20004494
 8002dac:	2000449c 	.word	0x2000449c
 8002db0:	20012eb4 	.word	0x20012eb4
 8002db4:	20000088 	.word	0x20000088
 8002db8:	3f7ae148 	.word	0x3f7ae148
 8002dbc:	2000443c 	.word	0x2000443c
	for (int i = 0; i < NUM_LFOS; i++)
 8002dc0:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002dc2:	edc5 8a30 	vstr	s17, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 8002dc6:	3508      	adds	r5, #8
 8002dc8:	2c04      	cmp	r4, #4
 8002dca:	f47f aebf 	bne.w	8002b4c <audioTickL+0xfc>
 8002dce:	e6d3      	b.n	8002b78 <audioTickL+0x128>
			note[v] = 0.0f;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	eeb0 8a68 	vmov.f32	s16, s17
 8002dd6:	edc3 8a00 	vstr	s17, [r3]
 8002dda:	e692      	b.n	8002b02 <audioTickL+0xb2>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <audioTickL+0x454>)
 8002dde:	eeb0 0a48 	vmov.f32	s0, s16
 8002de2:	4931      	ldr	r1, [pc, #196]	; (8002ea8 <audioTickL+0x458>)
 8002de4:	4453      	add	r3, sl
 8002de6:	4618      	mov	r0, r3
 8002de8:	ee0a 3a90 	vmov	s21, r3
 8002dec:	f00f fa1e 	bl	801222c <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 8002df0:	4b2e      	ldr	r3, [pc, #184]	; (8002eac <audioTickL+0x45c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d051      	beq.n	8002e9c <audioTickL+0x44c>
 8002df8:	4e2d      	ldr	r6, [pc, #180]	; (8002eb0 <audioTickL+0x460>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002dfa:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002dfe:	4d2d      	ldr	r5, [pc, #180]	; (8002eb4 <audioTickL+0x464>)
			for (int i = 0; i < numEffectToTick; i++)
 8002e00:	f04f 0800 	mov.w	r8, #0
 8002e04:	eb06 090a 	add.w	r9, r6, sl
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <audioTickL+0x458>)
 8002e0a:	4455      	add	r5, sl
 8002e0c:	4e2a      	ldr	r6, [pc, #168]	; (8002eb8 <audioTickL+0x468>)
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	4c25      	ldr	r4, [pc, #148]	; (8002ea8 <audioTickL+0x458>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 8002e12:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 8002e16:	4659      	mov	r1, fp
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	4640      	mov	r0, r8
 8002e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8002e20:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002e22:	edd9 7a00 	vldr	s15, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002e26:	ed95 7a00 	vldr	s14, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002e2a:	ee20 0a27 	vmul.f32	s0, s0, s15
				for (int j = 0; j < OVERSAMPLE; j++)
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <audioTickL+0x46c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002e30:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002e34:	eea7 0a88 	vfma.f32	s0, s15, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002e38:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002e3c:	eca4 0a01 	vstmia	r4!, {s0}
				for (int j = 0; j < OVERSAMPLE; j++)
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	d1e6      	bne.n	8002e12 <audioTickL+0x3c2>
			for (int i = 0; i < numEffectToTick; i++)
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <audioTickL+0x45c>)
 8002e46:	f108 0801 	add.w	r8, r8, #1
 8002e4a:	3604      	adds	r6, #4
 8002e4c:	f109 0908 	add.w	r9, r9, #8
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	3508      	adds	r5, #8
 8002e54:	4543      	cmp	r3, r8
 8002e56:	dcdb      	bgt.n	8002e10 <audioTickL+0x3c0>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002e58:	687c      	ldr	r4, [r7, #4]
 8002e5a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e5e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002e62:	edd4 0a00 	vldr	s1, [r4]
 8002e66:	f011 f9ef 	bl	8014248 <LEAF_clip>
 8002e6a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e6e:	edd4 0a01 	vldr	s1, [r4, #4]
 8002e72:	ed84 0a00 	vstr	s0, [r4]
 8002e76:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002e7a:	f011 f9e5 	bl	8014248 <LEAF_clip>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002e7e:	ee1a 0a90 	vmov	r0, s21
 8002e82:	4909      	ldr	r1, [pc, #36]	; (8002ea8 <audioTickL+0x458>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002e84:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002e88:	f00f fa38 	bl	80122fc <tOversampler_downsample>
 8002e8c:	eeb0 8a40 	vmov.f32	s16, s0
 8002e90:	e6f1      	b.n	8002c76 <audioTickL+0x226>
		for (int i = 0; i < oscToTick; i++)
 8002e92:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002ec0 <audioTickL+0x470>
 8002e96:	eeb0 6a67 	vmov.f32	s12, s15
 8002e9a:	e699      	b.n	8002bd0 <audioTickL+0x180>
 8002e9c:	4b02      	ldr	r3, [pc, #8]	; (8002ea8 <audioTickL+0x458>)
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	e7da      	b.n	8002e58 <audioTickL+0x408>
 8002ea2:	bf00      	nop
 8002ea4:	20004820 	.word	0x20004820
 8002ea8:	2000485c 	.word	0x2000485c
 8002eac:	20000064 	.word	0x20000064
 8002eb0:	200044cc 	.word	0x200044cc
 8002eb4:	200044ec 	.word	0x200044ec
 8002eb8:	2000443c 	.word	0x2000443c
 8002ebc:	20004864 	.word	0x20004864
	...

08002ec8 <audioFrame>:
{
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
 8002ecc:	499f      	ldr	r1, [pc, #636]	; (800314c <audioFrame+0x284>)
	if (newBar)
 8002ece:	4fa0      	ldr	r7, [pc, #640]	; (8003150 <audioFrame+0x288>)
{
 8002ed0:	ed2d 8b04 	vpush	{d8-d9}
 8002ed4:	b089      	sub	sp, #36	; 0x24
	if (newBar)
 8002ed6:	683a      	ldr	r2, [r7, #0]
{
 8002ed8:	9003      	str	r0, [sp, #12]
	uint32_t tempCountFrame = DWT->CYCCNT;
 8002eda:	684b      	ldr	r3, [r1, #4]
 8002edc:	9302      	str	r3, [sp, #8]
	if (newBar)
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	f000 8095 	beq.w	800300e <audioFrame+0x146>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8002ee4:	4a9b      	ldr	r2, [pc, #620]	; (8003154 <audioFrame+0x28c>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002ee6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002eea:	499b      	ldr	r1, [pc, #620]	; (8003158 <audioFrame+0x290>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8002eec:	ed92 7a02 	vldr	s14, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8002ef0:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002ef4:	edd2 7a03 	vldr	s15, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8002ef8:	ed92 6a00 	vldr	s12, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002efc:	ee77 3a66 	vsub.f32	s7, s14, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002f00:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8002f02:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8002f06:	ee76 4ac6 	vsub.f32	s9, s13, s12
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002f0a:	4282      	cmp	r2, r0
 8002f0c:	d00c      	beq.n	8002f28 <audioFrame+0x60>
 8002f0e:	ee07 2a90 	vmov	s15, r2
 8002f12:	4a92      	ldr	r2, [pc, #584]	; (800315c <audioFrame+0x294>)
 8002f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f18:	ed92 5a00 	vldr	s10, [r2]
 8002f1c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	f340 8263 	ble.w	80033ee <audioFrame+0x526>
				stringMappedPositions[j] = 1.0f;
 8002f28:	f8df b290 	ldr.w	fp, [pc, #656]	; 80031bc <audioFrame+0x2f4>
 8002f2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f30:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8002f34:	684a      	ldr	r2, [r1, #4]
 8002f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f3a:	428a      	cmp	r2, r1
 8002f3c:	d00c      	beq.n	8002f58 <audioFrame+0x90>
 8002f3e:	ee07 2a90 	vmov	s15, r2
 8002f42:	4a86      	ldr	r2, [pc, #536]	; (800315c <audioFrame+0x294>)
 8002f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f48:	ed92 5a01 	vldr	s10, [r2, #4]
 8002f4c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	f140 8238 	bpl.w	80033c8 <audioFrame+0x500>
				stringMappedPositions[j] = 1.0f;
 8002f58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f5c:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
 8002f60:	f8df a25c 	ldr.w	sl, [pc, #604]	; 80031c0 <audioFrame+0x2f8>
 8002f64:	f89a 2000 	ldrb.w	r2, [sl]
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d04e      	beq.n	800300a <audioFrame+0x142>
 8002f6c:	4d7c      	ldr	r5, [pc, #496]	; (8003160 <audioFrame+0x298>)
 8002f6e:	2400      	movs	r4, #0
 8002f70:	4b7c      	ldr	r3, [pc, #496]	; (8003164 <audioFrame+0x29c>)
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8002f72:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8002f76:	f8cd a004 	str.w	sl, [sp, #4]
 8002f7a:	46aa      	mov	sl, r5
 8002f7c:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8003168 <audioFrame+0x2a0>
 8002f80:	4625      	mov	r5, r4
 8002f82:	4e7a      	ldr	r6, [pc, #488]	; (800316c <audioFrame+0x2a4>)
 8002f84:	461c      	mov	r4, r3
 8002f86:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80031c4 <audioFrame+0x2fc>
 8002f8a:	f8df 823c 	ldr.w	r8, [pc, #572]	; 80031c8 <audioFrame+0x300>
			if (dualSlider)
 8002f8e:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8002f92:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
 8002f96:	b1c3      	cbz	r3, 8002fca <audioFrame+0x102>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8002f98:	eeb4 0a48 	vcmp.f32	s0, s16
 8002f9c:	eddb 0a01 	vldr	s1, [fp, #4]
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	f040 80c0 	bne.w	8003128 <audioFrame+0x260>
 8002fa8:	eef4 0ac8 	vcmpe.f32	s1, s16
 8002fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb0:	f100 823b 	bmi.w	800342a <audioFrame+0x562>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <audioFrame+0x2a8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	442b      	add	r3, r5
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8002fc2:	ee21 1a28 	vmul.f32	s2, s2, s17
 8002fc6:	f011 fa29 	bl	801441c <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 8002fca:	4650      	mov	r0, sl
		for (int i = 0; i < numStringsThisBoard; i++)
 8002fcc:	3501      	adds	r5, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 8002fce:	f00f fd13 	bl	80129f8 <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
 8002fd2:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8002fd6:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8002fda:	f10a 0a04 	add.w	sl, sl, #4
 8002fde:	9b01      	ldr	r3, [sp, #4]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8002fe0:	4964      	ldr	r1, [pc, #400]	; (8003174 <audioFrame+0x2ac>)
		for (int i = 0; i < numStringsThisBoard; i++)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8002fe4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
 8002fe8:	42aa      	cmp	r2, r5
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8002fea:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
 8002fee:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8002ff2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002ff6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ffa:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8002ffe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f844 3b04 	str.w	r3, [r4], #4
		for (int i = 0; i < numStringsThisBoard; i++)
 8003008:	dcc1      	bgt.n	8002f8e <audioFrame+0xc6>
		newBar = 0;
 800300a:	2200      	movs	r2, #0
 800300c:	603a      	str	r2, [r7, #0]
	if (newLevers)
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <audioFrame+0x2b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b15b      	cbz	r3, 800302c <audioFrame+0x164>
		int currentLeverBufferL = currentLeverBuffer;
 8003014:	4a59      	ldr	r2, [pc, #356]	; (800317c <audioFrame+0x2b4>)
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 8003016:	234a      	movs	r3, #74	; 0x4a
 8003018:	4e59      	ldr	r6, [pc, #356]	; (8003180 <audioFrame+0x2b8>)
 800301a:	6814      	ldr	r4, [r2, #0]
 800301c:	fb03 f404 	mul.w	r4, r3, r4
 8003020:	1933      	adds	r3, r6, r4
 8003022:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8003026:	2afe      	cmp	r2, #254	; 0xfe
 8003028:	f000 80d6 	beq.w	80031d8 <audioFrame+0x310>
	if (newPluck)
 800302c:	4f55      	ldr	r7, [pc, #340]	; (8003184 <audioFrame+0x2bc>)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	b363      	cbz	r3, 800308c <audioFrame+0x1c4>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003032:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80031c0 <audioFrame+0x2f8>
 8003036:	f89a 3000 	ldrb.w	r3, [sl]
 800303a:	b32b      	cbz	r3, 8003088 <audioFrame+0x1c0>
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <audioFrame+0x2c0>)
 800303e:	2400      	movs	r4, #0
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <audioFrame+0x2c4>)
				float amplitz = stringInputs[i] * 0.00005f;
 8003042:	eddf 8a53 	vldr	s17, [pc, #332]	; 8003190 <audioFrame+0x2c8>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003046:	4690      	mov	r8, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003048:	ed9f 8a52 	vldr	s16, [pc, #328]	; 8003194 <audioFrame+0x2cc>
 800304c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80031cc <audioFrame+0x304>
 8003050:	4d51      	ldr	r5, [pc, #324]	; (8003198 <audioFrame+0x2d0>)
 8003052:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80031d0 <audioFrame+0x308>
 8003056:	9101      	str	r1, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003058:	f8cd a010 	str.w	sl, [sp, #16]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800305c:	f85b 6b04 	ldr.w	r6, [fp], #4
 8003060:	682a      	ldr	r2, [r5, #0]
 8003062:	2e00      	cmp	r6, #0
 8003064:	d146      	bne.n	80030f4 <audioFrame+0x22c>
 8003066:	2a00      	cmp	r2, #0
 8003068:	f040 82ae 	bne.w	80035c8 <audioFrame+0x700>
		for (int i = 0; i < numStringsThisBoard; i++)
 800306c:	3401      	adds	r4, #1
			previousStringInputs[i] = stringInputs[i];
 800306e:	f84b 2c04 	str.w	r2, [fp, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003072:	9a01      	ldr	r2, [sp, #4]
 8003074:	3504      	adds	r5, #4
 8003076:	42a3      	cmp	r3, r4
 8003078:	f108 0804 	add.w	r8, r8, #4
 800307c:	f102 0204 	add.w	r2, r2, #4
 8003080:	f109 0904 	add.w	r9, r9, #4
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	dce9      	bgt.n	800305c <audioFrame+0x194>
		newPluck = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	603b      	str	r3, [r7, #0]
	if ((codecReady)&&(presetReady))
 800308c:	4b43      	ldr	r3, [pc, #268]	; (800319c <audioFrame+0x2d4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b1cb      	cbz	r3, 80030c6 <audioFrame+0x1fe>
 8003092:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <audioFrame+0x2d8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b1b3      	cbz	r3, 80030c6 <audioFrame+0x1fe>
 8003098:	4c42      	ldr	r4, [pc, #264]	; (80031a4 <audioFrame+0x2dc>)
 800309a:	9b03      	ldr	r3, [sp, #12]
 800309c:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80030a0:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80031a8 <audioFrame+0x2e0>
 80030a4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80030a8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80030ac:	f7ff fcd0 	bl	8002a50 <audioTickL>
 80030b0:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80030b4:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80030b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80030ba:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80030bc:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80030c0:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80030c4:	d1f2      	bne.n	80030ac <audioFrame+0x1e4>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80030c6:	4839      	ldr	r0, [pc, #228]	; (80031ac <audioFrame+0x2e4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80030c8:	4b20      	ldr	r3, [pc, #128]	; (800314c <audioFrame+0x284>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80030ca:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	9802      	ldr	r0, [sp, #8]
 80030d2:	4937      	ldr	r1, [pc, #220]	; (80031b0 <audioFrame+0x2e8>)
 80030d4:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80030d6:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <audioFrame+0x2ec>)
 80030d8:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80030dc:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e6:	edc2 7a00 	vstr	s15, [r2]
}
 80030ea:	b009      	add	sp, #36	; 0x24
 80030ec:	ecbd 8b04 	vpop	{d8-d9}
 80030f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 80030f4:	ddba      	ble.n	800306c <audioFrame+0x1a4>
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d1b8      	bne.n	800306c <audioFrame+0x1a4>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80030fa:	2110      	movs	r1, #16
 80030fc:	482e      	ldr	r0, [pc, #184]	; (80031b8 <audioFrame+0x2f0>)
 80030fe:	f005 fb4d 	bl	800879c <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 8003102:	4640      	mov	r0, r8
 8003104:	f00f fb44 	bl	8012790 <tADSRT_off>
 8003108:	f108 0008 	add.w	r0, r8, #8
 800310c:	f00f fb40 	bl	8012790 <tADSRT_off>
 8003110:	f108 0010 	add.w	r0, r8, #16
 8003114:	f00f fb3c 	bl	8012790 <tADSRT_off>
 8003118:	f108 0018 	add.w	r0, r8, #24
 800311c:	f00f fb38 	bl	8012790 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003120:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 8003122:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	e7a1      	b.n	800306c <audioFrame+0x1a4>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 8003128:	eef4 0a48 	vcmp.f32	s1, s16
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	f47f af40 	bne.w	8002fb4 <audioFrame+0xec>
 8003134:	eeb4 0a48 	vcmp.f32	s0, s16
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	f57f af3a 	bpl.w	8002fb4 <audioFrame+0xec>
					stringMappedPositions[1] = stringMappedPositions[0];
 8003140:	eef0 0a40 	vmov.f32	s1, s0
 8003144:	ed8b 0a01 	vstr	s0, [fp, #4]
 8003148:	e734      	b.n	8002fb4 <audioFrame+0xec>
 800314a:	bf00      	nop
 800314c:	e0001000 	.word	0xe0001000
 8003150:	200047e8 	.word	0x200047e8
 8003154:	2000004c 	.word	0x2000004c
 8003158:	20012e84 	.word	0x20012e84
 800315c:	2000000c 	.word	0x2000000c
 8003160:	200044c4 	.word	0x200044c4
 8003164:	20000334 	.word	0x20000334
 8003168:	3dcccccd 	.word	0x3dcccccd
 800316c:	20004540 	.word	0x20004540
 8003170:	200044a4 	.word	0x200044a4
 8003174:	24000000 	.word	0x24000000
 8003178:	200047ec 	.word	0x200047ec
 800317c:	20012fa0 	.word	0x20012fa0
 8003180:	30000160 	.word	0x30000160
 8003184:	200047f0 	.word	0x200047f0
 8003188:	2000444c 	.word	0x2000444c
 800318c:	20012e7c 	.word	0x20012e7c
 8003190:	3851b717 	.word	0x3851b717
 8003194:	00000000 	.word	0x00000000
 8003198:	20012e14 	.word	0x20012e14
 800319c:	2000037c 	.word	0x2000037c
 80031a0:	2000495c 	.word	0x2000495c
 80031a4:	30000000 	.word	0x30000000
 80031a8:	4b000000 	.word	0x4b000000
 80031ac:	20000008 	.word	0x20000008
 80031b0:	20012ea0 	.word	0x20012ea0
 80031b4:	200044a8 	.word	0x200044a8
 80031b8:	58020400 	.word	0x58020400
 80031bc:	20012e4c 	.word	0x20012e4c
 80031c0:	20000066 	.word	0x20000066
 80031c4:	20004434 	.word	0x20004434
 80031c8:	20000060 	.word	0x20000060
 80031cc:	20004964 	.word	0x20004964
 80031d0:	200169cc 	.word	0x200169cc
 80031d4:	3b808081 	.word	0x3b808081
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 80031d8:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80031dc:	2afd      	cmp	r2, #253	; 0xfd
 80031de:	f47f af25 	bne.w	800302c <audioFrame+0x164>
				paramsFromBrain[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 80031e2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80031e6:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 80031d4 <audioFrame+0x30c>
 80031ea:	ee08 2a10 	vmov	s16, r2
 80031ee:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80031f2:	ee00 2a10 	vmov	s0, r2
 80031f6:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80031fa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80031fe:	ee00 2a90 	vmov	s1, r2
 8003202:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8003206:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800320a:	ee01 2a10 	vmov	s2, r2
 800320e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003212:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8003216:	ee01 2a90 	vmov	s3, r2
 800321a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800321e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8003222:	ee02 2a10 	vmov	s4, r2
 8003226:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 800322a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800322e:	ee02 2a90 	vmov	s5, r2
 8003232:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8003236:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 800323a:	ee03 2a10 	vmov	s6, r2
 800323e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003242:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 8003246:	ee03 2a90 	vmov	s7, r2
 800324a:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800324e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8003252:	ee04 2a10 	vmov	s8, r2
 8003256:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800325a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 800325e:	ee04 2a90 	vmov	s9, r2
 8003262:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8003266:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800326a:	ee05 2a10 	vmov	s10, r2
 800326e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8003272:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8003276:	ee05 2a90 	vmov	s11, r2
 800327a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800327e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8003282:	ee06 2a10 	vmov	s12, r2
 8003286:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800328a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800328e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003292:	ee06 2a90 	vmov	s13, r2
 8003296:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800329a:	ee07 3a10 	vmov	s14, r3
 800329e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80032a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80032a6:	4bb6      	ldr	r3, [pc, #728]	; (8003580 <audioFrame+0x6b8>)
 80032a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			for (int i = 0; i < numStringsThisBoard; i++)
 80032ac:	4ab5      	ldr	r2, [pc, #724]	; (8003584 <audioFrame+0x6bc>)
				paramsFromBrain[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 80032ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80032b2:	ed83 8a00 	vstr	s16, [r3]
 80032b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80032ba:	ee21 1a27 	vmul.f32	s2, s2, s15
 80032be:	ee61 1aa7 	vmul.f32	s3, s3, s15
 80032c2:	ed83 0a01 	vstr	s0, [r3, #4]
 80032c6:	ee22 2a27 	vmul.f32	s4, s4, s15
 80032ca:	edc3 0a02 	vstr	s1, [r3, #8]
 80032ce:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80032d2:	ed83 1a03 	vstr	s2, [r3, #12]
 80032d6:	ee23 3a27 	vmul.f32	s6, s6, s15
 80032da:	edc3 1a04 	vstr	s3, [r3, #16]
 80032de:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80032e2:	ed83 2a05 	vstr	s4, [r3, #20]
 80032e6:	ee24 4a27 	vmul.f32	s8, s8, s15
 80032ea:	edc3 2a06 	vstr	s5, [r3, #24]
 80032ee:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80032f2:	ed83 3a07 	vstr	s6, [r3, #28]
 80032f6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80032fa:	edc3 3a08 	vstr	s7, [r3, #32]
 80032fe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003302:	ed83 4a09 	vstr	s8, [r3, #36]	; 0x24
 8003306:	ee26 6a27 	vmul.f32	s12, s12, s15
 800330a:	edc3 4a0a 	vstr	s9, [r3, #40]	; 0x28
 800330e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003312:	ed83 5a0b 	vstr	s10, [r3, #44]	; 0x2c
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	edc3 5a0c 	vstr	s11, [r3, #48]	; 0x30
 800331e:	ed83 6a0d 	vstr	s12, [r3, #52]	; 0x34
 8003322:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
 8003326:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			for (int i = 0; i < numStringsThisBoard; i++)
 800332a:	7810      	ldrb	r0, [r2, #0]
 800332c:	2800      	cmp	r0, #0
 800332e:	f000 8092 	beq.w	8003456 <audioFrame+0x58e>
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8003332:	4a95      	ldr	r2, [pc, #596]	; (8003588 <audioFrame+0x6c0>)
 8003334:	2300      	movs	r3, #0
				stringMIDIPitches[i] = tempBreak.f;
 8003336:	4d95      	ldr	r5, [pc, #596]	; (800358c <audioFrame+0x6c4>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8003338:	2801      	cmp	r0, #1
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8003340:	5d09      	ldrb	r1, [r1, r4]
 8003342:	f361 0307 	bfi	r3, r1, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8003346:	6811      	ldr	r1, [r2, #0]
 8003348:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800334c:	4421      	add	r1, r4
 800334e:	7849      	ldrb	r1, [r1, #1]
 8003350:	f361 230f 	bfi	r3, r1, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800335a:	4421      	add	r1, r4
 800335c:	7889      	ldrb	r1, [r1, #2]
 800335e:	f361 4317 	bfi	r3, r1, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8003362:	6811      	ldr	r1, [r2, #0]
 8003364:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8003368:	4421      	add	r1, r4
 800336a:	78c9      	ldrb	r1, [r1, #3]
 800336c:	f361 631f 	bfi	r3, r1, #24, #8
				stringMIDIPitches[i] = tempBreak.f;
 8003370:	602b      	str	r3, [r5, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003372:	d070      	beq.n	8003456 <audioFrame+0x58e>
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8003374:	6811      	ldr	r1, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003376:	2802      	cmp	r0, #2
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8003378:	f101 0101 	add.w	r1, r1, #1
 800337c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8003380:	5d09      	ldrb	r1, [r1, r4]
 8003382:	f361 0307 	bfi	r3, r1, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8003386:	6811      	ldr	r1, [r2, #0]
 8003388:	f101 0101 	add.w	r1, r1, #1
 800338c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8003390:	4421      	add	r1, r4
 8003392:	7849      	ldrb	r1, [r1, #1]
 8003394:	f361 230f 	bfi	r3, r1, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	f101 0101 	add.w	r1, r1, #1
 800339e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80033a2:	4421      	add	r1, r4
 80033a4:	7889      	ldrb	r1, [r1, #2]
 80033a6:	f361 4317 	bfi	r3, r1, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80033aa:	6811      	ldr	r1, [r2, #0]
 80033ac:	f101 0101 	add.w	r1, r1, #1
 80033b0:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80033b4:	4421      	add	r1, r4
 80033b6:	78c9      	ldrb	r1, [r1, #3]
 80033b8:	f361 631f 	bfi	r3, r1, #24, #8
				stringMIDIPitches[i] = tempBreak.f;
 80033bc:	606b      	str	r3, [r5, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 80033be:	d04a      	beq.n	8003456 <audioFrame+0x58e>
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80033c0:	6813      	ldr	r3, [r2, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80033c2:	6813      	ldr	r3, [r2, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80033c4:	6813      	ldr	r3, [r2, #0]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80033c6:	6813      	ldr	r3, [r2, #0]
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 80033c8:	ed92 4a05 	vldr	s8, [r2, #20]
 80033cc:	eeb4 4ae7 	vcmpe.f32	s8, s15
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	f200 80a0 	bhi.w	8003518 <audioFrame+0x650>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80033d8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80033dc:	ee34 5a45 	vsub.f32	s10, s8, s10
 80033e0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80033e4:	eea4 6a87 	vfma.f32	s12, s9, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80033e8:	ed8b 6a01 	vstr	s12, [fp, #4]
 80033ec:	e5b8      	b.n	8002f60 <audioFrame+0x98>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 80033ee:	ed92 4a04 	vldr	s8, [r2, #16]
 80033f2:	eef4 7ac4 	vcmpe.f32	s15, s8
 80033f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fa:	f280 80ac 	bge.w	8003556 <audioFrame+0x68e>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 80033fe:	ed92 5a08 	vldr	s10, [r2, #32]
 8003402:	eef4 7ac5 	vcmpe.f32	s15, s10
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	db13      	blt.n	8003434 <audioFrame+0x56c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800340c:	ee77 7ac4 	vsub.f32	s15, s15, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003410:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80035c0 <audioFrame+0x6f8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003414:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003418:	ee87 4a85 	vdiv.f32	s8, s15, s10
 800341c:	eef0 7a66 	vmov.f32	s15, s13
 8003420:	eee3 7a84 	vfma.f32	s15, s7, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003424:	edcb 7a00 	vstr	s15, [fp]
 8003428:	e584      	b.n	8002f34 <audioFrame+0x6c>
					stringMappedPositions[0] = stringMappedPositions[1];
 800342a:	eeb0 0a60 	vmov.f32	s0, s1
 800342e:	edcb 0a00 	vstr	s1, [fp]
 8003432:	e5bf      	b.n	8002fb4 <audioFrame+0xec>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003434:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
 8003438:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800343c:	f8df b180 	ldr.w	fp, [pc, #384]	; 80035c0 <audioFrame+0x6f8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003440:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003444:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8003448:	eef0 7a47 	vmov.f32	s15, s14
 800344c:	eee5 7a84 	vfma.f32	s15, s11, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8003450:	edcb 7a00 	vstr	s15, [fp]
 8003454:	e56e      	b.n	8002f34 <audioFrame+0x6c>
 8003456:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800345a:	4d4d      	ldr	r5, [pc, #308]	; (8003590 <audioFrame+0x6c8>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 800345c:	ed9f 8b46 	vldr	d8, [pc, #280]	; 8003578 <audioFrame+0x6b0>
 8003460:	4437      	add	r7, r6
 8003462:	f105 0810 	add.w	r8, r5, #16
 8003466:	f817 3b01 	ldrb.w	r3, [r7], #1
 800346a:	4628      	mov	r0, r5
			for (int i = 0; i < 4; i++)
 800346c:	3504      	adds	r5, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 800346e:	ee00 3a10 	vmov	s0, r3
 8003472:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8003476:	ee20 0b08 	vmul.f64	d0, d0, d8
 800347a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800347e:	f00f fa81 	bl	8012984 <tExpSmooth_setDest>
			for (int i = 0; i < 4; i++)
 8003482:	4545      	cmp	r5, r8
 8003484:	d1ef      	bne.n	8003466 <audioFrame+0x59e>
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 8003486:	1932      	adds	r2, r6, r4
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8003488:	f8df c138 	ldr.w	ip, [pc, #312]	; 80035c4 <audioFrame+0x6fc>
			neck = (modeBit >> 6) & 1;
 800348c:	4f41      	ldr	r7, [pc, #260]	; (8003594 <audioFrame+0x6cc>)
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 800348e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8003492:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
			dualSlider = (modeBit >> 5) & 1;
 8003496:	4d40      	ldr	r5, [pc, #256]	; (8003598 <audioFrame+0x6d0>)
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8003498:	f8cc 2000 	str.w	r2, [ip]
			neck = (modeBit >> 6) & 1;
 800349c:	f3c3 1c80 	ubfx	ip, r3, #6, #1
			edit = (modeBit >> 4) & 1;
 80034a0:	483e      	ldr	r0, [pc, #248]	; (800359c <audioFrame+0x6d4>)
			neck = (modeBit >> 6) & 1;
 80034a2:	f8c7 c000 	str.w	ip, [r7]
			dualSlider = (modeBit >> 5) & 1;
 80034a6:	f3c3 1740 	ubfx	r7, r3, #5, #1
			if (voice != prevVoice)
 80034aa:	493d      	ldr	r1, [pc, #244]	; (80035a0 <audioFrame+0x6d8>)
			dualSlider = (modeBit >> 5) & 1;
 80034ac:	602f      	str	r7, [r5, #0]
			edit = (modeBit >> 4) & 1;
 80034ae:	f3c3 1500 	ubfx	r5, r3, #4, #1
 80034b2:	6005      	str	r5, [r0, #0]
			if (voice != prevVoice)
 80034b4:	6808      	ldr	r0, [r1, #0]
 80034b6:	4282      	cmp	r2, r0
 80034b8:	d004      	beq.n	80034c4 <audioFrame+0x5fc>
				presetWaitingToLoad = 1;
 80034ba:	483a      	ldr	r0, [pc, #232]	; (80035a4 <audioFrame+0x6dc>)
 80034bc:	2501      	movs	r5, #1
 80034be:	6005      	str	r5, [r0, #0]
				presetNumberToLoad = voice;
 80034c0:	4839      	ldr	r0, [pc, #228]	; (80035a8 <audioFrame+0x6e0>)
 80034c2:	7002      	strb	r2, [r0, #0]
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034c4:	4434      	add	r4, r6
			prevVoice = voice;
 80034c6:	600a      	str	r2, [r1, #0]
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034c8:	f003 030f 	and.w	r3, r3, #15
			volumePedal = volumePedalInt * 0.0002442002442f;
 80034cc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80035ac <audioFrame+0x6e4>
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034d0:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034d4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034d8:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034dc:	3b02      	subs	r3, #2
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 80034de:	4834      	ldr	r0, [pc, #208]	; (80035b0 <audioFrame+0x6e8>)
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034e0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034e4:	ee07 3a90 	vmov	s15, r3
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034e8:	4932      	ldr	r1, [pc, #200]	; (80035b4 <audioFrame+0x6ec>)
 80034ea:	b293      	uxth	r3, r2
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80034f0:	800b      	strh	r3, [r1, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 80034f2:	880b      	ldrh	r3, [r1, #0]
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 80034f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
			volumePedal = volumePedalInt * 0.0002442002442f;
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	ee00 3a10 	vmov	s0, r3
 80034fe:	4b2e      	ldr	r3, [pc, #184]	; (80035b8 <audioFrame+0x6f0>)
 8003500:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003504:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003508:	ed83 0a00 	vstr	s0, [r3]
			octave = (((int32_t) (modeBit & 15) - 2 ) * 12.0f);
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <audioFrame+0x6f4>)
 800350e:	edc3 7a00 	vstr	s15, [r3]
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8003512:	f00f fa37 	bl	8012984 <tExpSmooth_setDest>
 8003516:	e589      	b.n	800302c <audioFrame+0x164>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8003518:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800351c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	d80a      	bhi.n	800353c <audioFrame+0x674>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003526:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800352a:	ee36 6a44 	vsub.f32	s12, s12, s8
 800352e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8003532:	eee3 6a87 	vfma.f32	s13, s7, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003536:	edcb 6a01 	vstr	s13, [fp, #4]
 800353a:	e511      	b.n	8002f60 <audioFrame+0x98>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800353c:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 8003540:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003544:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003548:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800354c:	eea5 7aa6 	vfma.f32	s14, s11, s13
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8003550:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003554:	e504      	b.n	8002f60 <audioFrame+0x98>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003556:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 800355a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80035c0 <audioFrame+0x6f8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800355e:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003562:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8003566:	eef0 7a46 	vmov.f32	s15, s12
 800356a:	eee4 7a84 	vfma.f32	s15, s9, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 800356e:	edcb 7a00 	vstr	s15, [fp]
 8003572:	e4df      	b.n	8002f34 <audioFrame+0x6c>
 8003574:	f3af 8000 	nop.w
 8003578:	00000000 	.word	0x00000000
 800357c:	3f800000 	.word	0x3f800000
 8003580:	20004904 	.word	0x20004904
 8003584:	20000066 	.word	0x20000066
 8003588:	200044a4 	.word	0x200044a4
 800358c:	20012e44 	.word	0x20012e44
 8003590:	20004558 	.word	0x20004558
 8003594:	200047e4 	.word	0x200047e4
 8003598:	20004434 	.word	0x20004434
 800359c:	20004438 	.word	0x20004438
 80035a0:	20004960 	.word	0x20004960
 80035a4:	20016c20 	.word	0x20016c20
 80035a8:	20000090 	.word	0x20000090
 80035ac:	39800801 	.word	0x39800801
 80035b0:	20012ee8 	.word	0x20012ee8
 80035b4:	20012ee4 	.word	0x20012ee4
 80035b8:	20012ee0 	.word	0x20012ee0
 80035bc:	2000481c 	.word	0x2000481c
 80035c0:	20012e4c 	.word	0x20012e4c
 80035c4:	20012ed8 	.word	0x20012ed8
				float amplitz = stringInputs[i] * 0.00005f;
 80035c8:	ee07 2a90 	vmov	s15, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80035cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035d0:	eeb0 0a48 	vmov.f32	s0, s16
				float amplitz = stringInputs[i] * 0.00005f;
 80035d4:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80035d8:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80035dc:	f010 fe34 	bl	8014248 <LEAF_clip>
				stringOctave[i] = octave;
 80035e0:	4b28      	ldr	r3, [pc, #160]	; (8003684 <audioFrame+0x7bc>)
 80035e2:	9a01      	ldr	r2, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80035e4:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 80035e6:	681b      	ldr	r3, [r3, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80035e8:	eeb0 9a40 	vmov.f32	s18, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80035ec:	4826      	ldr	r0, [pc, #152]	; (8003688 <audioFrame+0x7c0>)
				stringOctave[i] = octave;
 80035ee:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80035f0:	f5a9 7313 	sub.w	r3, r9, #588	; 0x24c
 80035f4:	2201      	movs	r2, #1
 80035f6:	9307      	str	r3, [sp, #28]
 80035f8:	f109 0354 	add.w	r3, r9, #84	; 0x54
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	f005 f8cd 	bl	800879c <HAL_GPIO_WritePin>
 8003602:	9b07      	ldr	r3, [sp, #28]
 8003604:	9406      	str	r4, [sp, #24]
 8003606:	4644      	mov	r4, r8
 8003608:	469a      	mov	sl, r3
					if (useVelocity == 0) envVel = 1.f;
 800360a:	edda 7a00 	vldr	s15, [sl]
				    tADSRT_on(&envs[v][i], envVel);
 800360e:	4620      	mov	r0, r4
				for (int v = 0; v < NUM_ENV; v++)
 8003610:	f10a 0aa8 	add.w	sl, sl, #168	; 0xa8
 8003614:	3408      	adds	r4, #8
					if (useVelocity == 0) envVel = 1.f;
 8003616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				    tADSRT_on(&envs[v][i], envVel);
 800361e:	bf14      	ite	ne
 8003620:	eeb0 0a49 	vmovne.f32	s0, s18
 8003624:	eeb7 0a00 	vmoveq.f32	s0, #112	; 0x3f800000  1.0
 8003628:	f00f f8a0 	bl	801276c <tADSRT_on>
				    voiceSounding = 1;
 800362c:	4b17      	ldr	r3, [pc, #92]	; (800368c <audioFrame+0x7c4>)
 800362e:	f04f 0201 	mov.w	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 8003634:	9b05      	ldr	r3, [sp, #20]
 8003636:	459a      	cmp	sl, r3
 8003638:	d1e7      	bne.n	800360a <audioFrame+0x742>
 800363a:	9c06      	ldr	r4, [sp, #24]
					if (noteOnSync > 0.5f)
 800363c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003640:	9505      	str	r5, [sp, #20]
 8003642:	46ca      	mov	sl, r9
 8003644:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 8003648:	4625      	mov	r5, r4
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	320c      	adds	r2, #12
 800364e:	4614      	mov	r4, r2
					if (noteOnSync > 0.5f)
 8003650:	edda 7a0e 	vldr	s15, [sl, #56]	; 0x38
 8003654:	eef4 7ac9 	vcmpe.f32	s15, s18
 8003658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365c:	dd06      	ble.n	800366c <audioFrame+0x7a4>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 800365e:	ed9a 0a00 	vldr	s0, [sl]
 8003662:	4629      	mov	r1, r5
 8003664:	f85a 3004 	ldr.w	r3, [sl, r4]
 8003668:	4630      	mov	r0, r6
 800366a:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
 800366c:	3601      	adds	r6, #1
 800366e:	f10a 0a8c 	add.w	sl, sl, #140	; 0x8c
 8003672:	2e04      	cmp	r6, #4
 8003674:	d1ec      	bne.n	8003650 <audioFrame+0x788>
			previousStringInputs[i] = stringInputs[i];
 8003676:	462c      	mov	r4, r5
		for (int i = 0; i < numStringsThisBoard; i++)
 8003678:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 800367a:	9d05      	ldr	r5, [sp, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
 800367c:	781b      	ldrb	r3, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
 800367e:	682a      	ldr	r2, [r5, #0]
 8003680:	e4f4      	b.n	800306c <audioFrame+0x1a4>
 8003682:	bf00      	nop
 8003684:	2000481c 	.word	0x2000481c
 8003688:	58020400 	.word	0x58020400
 800368c:	20012edc 	.word	0x20012edc

08003690 <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003690:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 8003692:	4b7f      	ldr	r3, [pc, #508]	; (8003890 <HAL_SPI_RxCpltCallback+0x200>)
	interrupted = 1;
 8003694:	2101      	movs	r1, #1
 8003696:	4a7f      	ldr	r2, [pc, #508]	; (8003894 <HAL_SPI_RxCpltCallback+0x204>)
{
 8003698:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 800369a:	4298      	cmp	r0, r3
	interrupted = 1;
 800369c:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 800369e:	d015      	beq.n	80036cc <HAL_SPI_RxCpltCallback+0x3c>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 80036a0:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <HAL_SPI_RxCpltCallback+0x208>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d009      	beq.n	80036ba <HAL_SPI_RxCpltCallback+0x2a>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 80036a6:	4b7d      	ldr	r3, [pc, #500]	; (800389c <HAL_SPI_RxCpltCallback+0x20c>)
 80036a8:	429c      	cmp	r4, r3
 80036aa:	d000      	beq.n	80036ae <HAL_SPI_RxCpltCallback+0x1e>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 1;
	}
}
 80036ac:	bd38      	pop	{r3, r4, r5, pc}
		newLevers = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	497b      	ldr	r1, [pc, #492]	; (80038a0 <HAL_SPI_RxCpltCallback+0x210>)
		currentLeverBuffer = 1;
 80036b2:	4a7c      	ldr	r2, [pc, #496]	; (80038a4 <HAL_SPI_RxCpltCallback+0x214>)
		newLevers = 1;
 80036b4:	600b      	str	r3, [r1, #0]
		currentLeverBuffer = 1;
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 80036ba:	4b7b      	ldr	r3, [pc, #492]	; (80038a8 <HAL_SPI_RxCpltCallback+0x218>)
 80036bc:	7b9a      	ldrb	r2, [r3, #14]
 80036be:	2afe      	cmp	r2, #254	; 0xfe
 80036c0:	f000 80d6 	beq.w	8003870 <HAL_SPI_RxCpltCallback+0x1e0>
		newBar = 1;
 80036c4:	4b79      	ldr	r3, [pc, #484]	; (80038ac <HAL_SPI_RxCpltCallback+0x21c>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e7ec      	b.n	80036a6 <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 80036cc:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <HAL_SPI_RxCpltCallback+0x220>)
 80036ce:	7e9a      	ldrb	r2, [r3, #26]
 80036d0:	2afe      	cmp	r2, #254	; 0xfe
 80036d2:	d008      	beq.n	80036e6 <HAL_SPI_RxCpltCallback+0x56>
		newPluck = 1;
 80036d4:	4b77      	ldr	r3, [pc, #476]	; (80038b4 <HAL_SPI_RxCpltCallback+0x224>)
 80036d6:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 80036d8:	2234      	movs	r2, #52	; 0x34
 80036da:	4975      	ldr	r1, [pc, #468]	; (80038b0 <HAL_SPI_RxCpltCallback+0x220>)
		newPluck = 1;
 80036dc:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 80036de:	486c      	ldr	r0, [pc, #432]	; (8003890 <HAL_SPI_RxCpltCallback+0x200>)
 80036e0:	f009 fdaa 	bl	800d238 <HAL_SPI_Receive_DMA>
 80036e4:	e7dc      	b.n	80036a0 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 80036e6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80036ea:	2afd      	cmp	r2, #253	; 0xfd
 80036ec:	d1f2      	bne.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
			for (int i = 0; i < numStringsThisBoard; i++)
 80036ee:	4a72      	ldr	r2, [pc, #456]	; (80038b8 <HAL_SPI_RxCpltCallback+0x228>)
 80036f0:	7811      	ldrb	r1, [r2, #0]
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d0ee      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80036f6:	4a71      	ldr	r2, [pc, #452]	; (80038bc <HAL_SPI_RxCpltCallback+0x22c>)
			for (int i = 0; i < numStringsThisBoard; i++)
 80036f8:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80036fa:	6810      	ldr	r0, [r2, #0]
 80036fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003700:	f890 c01b 	ldrb.w	ip, [r0, #27]
 8003704:	6810      	ldr	r0, [r2, #0]
 8003706:	f100 000e 	add.w	r0, r0, #14
 800370a:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 800370e:	486c      	ldr	r0, [pc, #432]	; (80038c0 <HAL_SPI_RxCpltCallback+0x230>)
 8003710:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003714:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003716:	d0dd      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003718:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800371a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800371c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003720:	f895 e01d 	ldrb.w	lr, [r5, #29]
 8003724:	6815      	ldr	r5, [r2, #0]
 8003726:	f105 0c0f 	add.w	ip, r5, #15
 800372a:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800372e:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003732:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003734:	d0ce      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003736:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003738:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800373a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800373e:	f895 e01f 	ldrb.w	lr, [r5, #31]
 8003742:	6815      	ldr	r5, [r2, #0]
 8003744:	f105 0c10 	add.w	ip, r5, #16
 8003748:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800374c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003750:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003752:	d0bf      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003754:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003756:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003758:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800375c:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 8003760:	6815      	ldr	r5, [r2, #0]
 8003762:	f105 0c11 	add.w	ip, r5, #17
 8003766:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800376a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800376e:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003770:	d0b0      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003772:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003774:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003776:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800377a:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 800377e:	6815      	ldr	r5, [r2, #0]
 8003780:	f105 0c12 	add.w	ip, r5, #18
 8003784:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003788:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800378c:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800378e:	d0a1      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003790:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003792:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003794:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003798:	f895 e025 	ldrb.w	lr, [r5, #37]	; 0x25
 800379c:	6815      	ldr	r5, [r2, #0]
 800379e:	f105 0c13 	add.w	ip, r5, #19
 80037a2:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80037a6:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80037aa:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ac:	d092      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037ae:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037b0:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037b2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037b6:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 80037ba:	6815      	ldr	r5, [r2, #0]
 80037bc:	f105 0514 	add.w	r5, r5, #20
 80037c0:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80037c4:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80037c8:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ca:	d083      	beq.n	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037cc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ce:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037d0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037d4:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 80037d8:	6815      	ldr	r5, [r2, #0]
 80037da:	f105 0515 	add.w	r5, r5, #21
 80037de:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80037e2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80037e6:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037e8:	f43f af74 	beq.w	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037ec:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ee:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80037f0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037f4:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 80037f8:	6815      	ldr	r5, [r2, #0]
 80037fa:	f105 0516 	add.w	r5, r5, #22
 80037fe:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003802:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003806:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003808:	f43f af64 	beq.w	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800380c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800380e:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003810:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003814:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 8003818:	6815      	ldr	r5, [r2, #0]
 800381a:	f105 0517 	add.w	r5, r5, #23
 800381e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003822:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003826:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8003828:	f43f af54 	beq.w	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800382c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800382e:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003830:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003834:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 8003838:	6815      	ldr	r5, [r2, #0]
 800383a:	f105 0518 	add.w	r5, r5, #24
 800383e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003842:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003846:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8003848:	f43f af44 	beq.w	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800384c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800384e:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003850:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003854:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8003858:	6815      	ldr	r5, [r2, #0]
 800385a:	f105 0519 	add.w	r5, r5, #25
 800385e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8003862:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8003866:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8003868:	f43f af34 	beq.w	80036d4 <HAL_SPI_RxCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8003870:	7bda      	ldrb	r2, [r3, #15]
 8003872:	2afd      	cmp	r2, #253	; 0xfd
 8003874:	f47f af26 	bne.w	80036c4 <HAL_SPI_RxCpltCallback+0x34>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 8003878:	7a98      	ldrb	r0, [r3, #10]
 800387a:	7a1d      	ldrb	r5, [r3, #8]
 800387c:	7a5a      	ldrb	r2, [r3, #9]
 800387e:	7ad9      	ldrb	r1, [r3, #11]
 8003880:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8003884:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8003888:	480e      	ldr	r0, [pc, #56]	; (80038c4 <HAL_SPI_RxCpltCallback+0x234>)
 800388a:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 800388e:	e719      	b.n	80036c4 <HAL_SPI_RxCpltCallback+0x34>
 8003890:	20019558 	.word	0x20019558
 8003894:	2000451c 	.word	0x2000451c
 8003898:	200194d0 	.word	0x200194d0
 800389c:	20019448 	.word	0x20019448
 80038a0:	200047ec 	.word	0x200047ec
 80038a4:	20012fa0 	.word	0x20012fa0
 80038a8:	30000100 	.word	0x30000100
 80038ac:	200047e8 	.word	0x200047e8
 80038b0:	30000120 	.word	0x30000120
 80038b4:	200047f0 	.word	0x200047f0
 80038b8:	20000066 	.word	0x20000066
 80038bc:	200044a4 	.word	0x200044a4
 80038c0:	20012e14 	.word	0x20012e14
 80038c4:	20012e84 	.word	0x20012e84

080038c8 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;

	if (hspi == &hspi5)
 80038c8:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <HAL_SPI_RxHalfCpltCallback+0x1f4>)
	interrupted = 1;
 80038ca:	2101      	movs	r1, #1
 80038cc:	4a7c      	ldr	r2, [pc, #496]	; (8003ac0 <HAL_SPI_RxHalfCpltCallback+0x1f8>)
	if (hspi == &hspi5)
 80038ce:	4298      	cmp	r0, r3
{
 80038d0:	b530      	push	{r4, r5, lr}
	interrupted = 1;
 80038d2:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 80038d4:	d016      	beq.n	8003904 <HAL_SPI_RxHalfCpltCallback+0x3c>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <HAL_SPI_RxHalfCpltCallback+0x1fc>)
 80038d8:	4298      	cmp	r0, r3
 80038da:	d00a      	beq.n	80038f2 <HAL_SPI_RxHalfCpltCallback+0x2a>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 80038dc:	4b7a      	ldr	r3, [pc, #488]	; (8003ac8 <HAL_SPI_RxHalfCpltCallback+0x200>)
 80038de:	4298      	cmp	r0, r3
 80038e0:	d000      	beq.n	80038e4 <HAL_SPI_RxHalfCpltCallback+0x1c>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 0;
	}
}
 80038e2:	bd30      	pop	{r4, r5, pc}
		newLevers = 1;
 80038e4:	4979      	ldr	r1, [pc, #484]	; (8003acc <HAL_SPI_RxHalfCpltCallback+0x204>)
 80038e6:	2001      	movs	r0, #1
		currentLeverBuffer = 0;
 80038e8:	4b79      	ldr	r3, [pc, #484]	; (8003ad0 <HAL_SPI_RxHalfCpltCallback+0x208>)
 80038ea:	2200      	movs	r2, #0
		newLevers = 1;
 80038ec:	6008      	str	r0, [r1, #0]
		currentLeverBuffer = 0;
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bd30      	pop	{r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 80038f2:	4b78      	ldr	r3, [pc, #480]	; (8003ad4 <HAL_SPI_RxHalfCpltCallback+0x20c>)
 80038f4:	799a      	ldrb	r2, [r3, #6]
 80038f6:	2afe      	cmp	r2, #254	; 0xfe
 80038f8:	f000 80d0 	beq.w	8003a9c <HAL_SPI_RxHalfCpltCallback+0x1d4>
		newBar = 1;
 80038fc:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <HAL_SPI_RxHalfCpltCallback+0x210>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e7eb      	b.n	80038dc <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8003904:	4b75      	ldr	r3, [pc, #468]	; (8003adc <HAL_SPI_RxHalfCpltCallback+0x214>)
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	2afe      	cmp	r2, #254	; 0xfe
 800390a:	d003      	beq.n	8003914 <HAL_SPI_RxHalfCpltCallback+0x4c>
		newPluck = 1;
 800390c:	4b74      	ldr	r3, [pc, #464]	; (8003ae0 <HAL_SPI_RxHalfCpltCallback+0x218>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e7e0      	b.n	80038d6 <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8003914:	7e5a      	ldrb	r2, [r3, #25]
 8003916:	2afd      	cmp	r2, #253	; 0xfd
 8003918:	d1f8      	bne.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
			for (int i = 0; i < numStringsThisBoard; i++)
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_SPI_RxHalfCpltCallback+0x21c>)
 800391c:	7811      	ldrb	r1, [r2, #0]
 800391e:	2900      	cmp	r1, #0
 8003920:	d0f4      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003922:	4a71      	ldr	r2, [pc, #452]	; (8003ae8 <HAL_SPI_RxHalfCpltCallback+0x220>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8003924:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003926:	6814      	ldr	r4, [r2, #0]
 8003928:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800392c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003930:	6814      	ldr	r4, [r2, #0]
 8003932:	f104 0401 	add.w	r4, r4, #1
 8003936:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 800393a:	4c6c      	ldr	r4, [pc, #432]	; (8003aec <HAL_SPI_RxHalfCpltCallback+0x224>)
 800393c:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003940:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003942:	d0e3      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003944:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003946:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003948:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800394c:	f895 e003 	ldrb.w	lr, [r5, #3]
 8003950:	6815      	ldr	r5, [r2, #0]
 8003952:	f105 0c02 	add.w	ip, r5, #2
 8003956:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800395a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800395e:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003960:	d0d4      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003962:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003964:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003966:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800396a:	f895 e005 	ldrb.w	lr, [r5, #5]
 800396e:	6815      	ldr	r5, [r2, #0]
 8003970:	f105 0c03 	add.w	ip, r5, #3
 8003974:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003978:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800397c:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 800397e:	d0c5      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003980:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003982:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003984:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003988:	f895 e007 	ldrb.w	lr, [r5, #7]
 800398c:	6815      	ldr	r5, [r2, #0]
 800398e:	f105 0c04 	add.w	ip, r5, #4
 8003992:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003996:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800399a:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 800399c:	d0b6      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800399e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039a0:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039a2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80039a6:	f895 e009 	ldrb.w	lr, [r5, #9]
 80039aa:	6815      	ldr	r5, [r2, #0]
 80039ac:	f105 0c05 	add.w	ip, r5, #5
 80039b0:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80039b4:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80039b8:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039ba:	d0a7      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039bc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039be:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80039c4:	f895 e00b 	ldrb.w	lr, [r5, #11]
 80039c8:	6815      	ldr	r5, [r2, #0]
 80039ca:	f105 0c06 	add.w	ip, r5, #6
 80039ce:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80039d2:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80039d6:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039d8:	d098      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039da:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039dc:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039de:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80039e2:	f895 c00d 	ldrb.w	ip, [r5, #13]
 80039e6:	6815      	ldr	r5, [r2, #0]
 80039e8:	f105 0507 	add.w	r5, r5, #7
 80039ec:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80039f0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80039f4:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039f6:	d089      	beq.n	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039f8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80039fa:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80039fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003a00:	f895 c00f 	ldrb.w	ip, [r5, #15]
 8003a04:	6815      	ldr	r5, [r2, #0]
 8003a06:	f105 0508 	add.w	r5, r5, #8
 8003a0a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003a0e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003a12:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a14:	f43f af7a 	beq.w	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a18:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a1a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a1c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003a20:	f895 c011 	ldrb.w	ip, [r5, #17]
 8003a24:	6815      	ldr	r5, [r2, #0]
 8003a26:	f105 0509 	add.w	r5, r5, #9
 8003a2a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003a2e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003a32:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a34:	f43f af6a 	beq.w	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a38:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a3a:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a3c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003a40:	f895 c013 	ldrb.w	ip, [r5, #19]
 8003a44:	6815      	ldr	r5, [r2, #0]
 8003a46:	f105 050a 	add.w	r5, r5, #10
 8003a4a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003a4e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003a52:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a54:	f43f af5a 	beq.w	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a58:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a5a:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a5c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003a60:	f895 c015 	ldrb.w	ip, [r5, #21]
 8003a64:	6815      	ldr	r5, [r2, #0]
 8003a66:	f105 050b 	add.w	r5, r5, #11
 8003a6a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003a6e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003a72:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a74:	f43f af4a 	beq.w	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a78:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a7a:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a7c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003a80:	f895 c017 	ldrb.w	ip, [r5, #23]
 8003a84:	6815      	ldr	r5, [r2, #0]
 8003a86:	f105 050c 	add.w	r5, r5, #12
 8003a8a:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8003a8e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8003a92:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8003a94:	f43f af3a 	beq.w	800390c <HAL_SPI_RxHalfCpltCallback+0x44>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003a98:	6813      	ldr	r3, [r2, #0]
 8003a9a:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8003a9c:	79da      	ldrb	r2, [r3, #7]
 8003a9e:	2afd      	cmp	r2, #253	; 0xfd
 8003aa0:	f47f af2c 	bne.w	80038fc <HAL_SPI_RxHalfCpltCallback+0x34>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8003aa4:	789c      	ldrb	r4, [r3, #2]
 8003aa6:	781d      	ldrb	r5, [r3, #0]
 8003aa8:	785a      	ldrb	r2, [r3, #1]
 8003aaa:	78d9      	ldrb	r1, [r3, #3]
 8003aac:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8003ab0:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8003ab4:	4c0e      	ldr	r4, [pc, #56]	; (8003af0 <HAL_SPI_RxHalfCpltCallback+0x228>)
 8003ab6:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 8003aba:	e71f      	b.n	80038fc <HAL_SPI_RxHalfCpltCallback+0x34>
 8003abc:	20019558 	.word	0x20019558
 8003ac0:	2000451c 	.word	0x2000451c
 8003ac4:	200194d0 	.word	0x200194d0
 8003ac8:	20019448 	.word	0x20019448
 8003acc:	200047ec 	.word	0x200047ec
 8003ad0:	20012fa0 	.word	0x20012fa0
 8003ad4:	30000100 	.word	0x30000100
 8003ad8:	200047e8 	.word	0x200047e8
 8003adc:	30000120 	.word	0x30000120
 8003ae0:	200047f0 	.word	0x200047f0
 8003ae4:	20000066 	.word	0x20000066
 8003ae8:	200044a4 	.word	0x200044a4
 8003aec:	20012e14 	.word	0x20012e14
 8003af0:	20012e84 	.word	0x20012e84

08003af4 <HAL_SAI_TxCpltCallback>:


void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_SAI_TxCpltCallback+0x10>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b103      	cbz	r3, 8003afc <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 8003afa:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 8003afc:	2010      	movs	r0, #16
 8003afe:	f7ff b9e3 	b.w	8002ec8 <audioFrame>
 8003b02:	bf00      	nop
 8003b04:	20012fe0 	.word	0x20012fe0

08003b08 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8003b08:	4b02      	ldr	r3, [pc, #8]	; (8003b14 <HAL_SAI_TxHalfCpltCallback+0xc>)
 8003b0a:	7818      	ldrb	r0, [r3, #0]
 8003b0c:	b100      	cbz	r0, 8003b10 <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 8003b0e:	4770      	bx	lr
	audioFrame(0);
 8003b10:	f7ff b9da 	b.w	8002ec8 <audioFrame>
 8003b14:	20012fe0 	.word	0x20012fe0

08003b18 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop

08003b1c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8003b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003b20:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8003b22:	b082      	sub	sp, #8
 8003b24:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003b26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b2a:	483b      	ldr	r0, [pc, #236]	; (8003c18 <AudioCodec_init+0xfc>)
 8003b2c:	f004 fe36 	bl	800879c <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8003b30:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8003b32:	4c3a      	ldr	r4, [pc, #232]	; (8003c1c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8003b34:	f003 f85a 	bl	8006bec <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b38:	4f39      	ldr	r7, [pc, #228]	; (8003c20 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8003b3a:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b3e:	4e39      	ldr	r6, [pc, #228]	; (8003c24 <AudioCodec_init+0x108>)
 8003b40:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8003b42:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b44:	2120      	movs	r1, #32
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003c2c <AudioCodec_init+0x110>
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	8833      	ldrh	r3, [r6, #0]
 8003b52:	f004 ff4d 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b5a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b5e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8003b60:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b64:	2120      	movs	r1, #32
 8003b66:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8003b68:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b6a:	8833      	ldrh	r3, [r6, #0]
 8003b6c:	f004 ff40 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b74:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b78:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8003b7a:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8003b80:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b82:	8833      	ldrh	r3, [r6, #0]
 8003b84:	f004 ff34 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b8c:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b90:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8003b92:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b96:	2120      	movs	r1, #32
 8003b98:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8003b9a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003b9c:	8833      	ldrh	r3, [r6, #0]
 8003b9e:	f004 ff27 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ba6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003baa:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8003bac:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bb0:	2120      	movs	r1, #32
 8003bb2:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8003bb4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bb6:	8833      	ldrh	r3, [r6, #0]
 8003bb8:	f004 ff1a 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bc0:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bc4:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8003bc6:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bca:	2120      	movs	r1, #32
 8003bcc:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8003bce:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bd0:	8833      	ldrh	r3, [r6, #0]
 8003bd2:	f004 ff0d 	bl	80089f0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bda:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bde:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8003be0:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003be4:	2120      	movs	r1, #32
 8003be6:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8003be8:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bea:	8833      	ldrh	r3, [r6, #0]
 8003bec:	f004 ff00 	bl	80089f0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bf0:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8003bf2:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bf6:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bf8:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	9200      	str	r2, [sp, #0]
 8003c00:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8003c02:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003c04:	2120      	movs	r1, #32
 8003c06:	f004 fef3 	bl	80089f0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <AudioCodec_init+0x10c>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

}
 8003c10:	b002      	add	sp, #8
 8003c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c16:	bf00      	nop
 8003c18:	58020800 	.word	0x58020800
 8003c1c:	20012f0c 	.word	0x20012f0c
 8003c20:	20000080 	.word	0x20000080
 8003c24:	20000084 	.word	0x20000084
 8003c28:	2000037c 	.word	0x2000037c
 8003c2c:	20012f0e 	.word	0x20012f0e

08003c30 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003c32:	210b      	movs	r1, #11
 8003c34:	2200      	movs	r2, #0
 8003c36:	4608      	mov	r0, r1
{
 8003c38:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c3a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8003c3e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c40:	f044 0401 	orr.w	r4, r4, #1
 8003c44:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8003c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003c54:	f002 fffe 	bl	8006c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003c58:	200b      	movs	r0, #11
 8003c5a:	f003 f839 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8003c5e:	2200      	movs	r2, #0
 8003c60:	210a      	movs	r1, #10
 8003c62:	200c      	movs	r0, #12
 8003c64:	f002 fff6 	bl	8006c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003c68:	200c      	movs	r0, #12
 8003c6a:	f003 f831 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2109      	movs	r1, #9
 8003c72:	200d      	movs	r0, #13
 8003c74:	f002 ffee 	bl	8006c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003c78:	200d      	movs	r0, #13
 8003c7a:	f003 f829 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2108      	movs	r1, #8
 8003c82:	200e      	movs	r0, #14
 8003c84:	f002 ffe6 	bl	8006c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003c88:	200e      	movs	r0, #14
 8003c8a:	f003 f821 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8003c8e:	200f      	movs	r0, #15
 8003c90:	2200      	movs	r2, #0
 8003c92:	2107      	movs	r1, #7
 8003c94:	f002 ffde 	bl	8006c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003c98:	200f      	movs	r0, #15

}
 8003c9a:	b002      	add	sp, #8
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003ca0:	f003 b816 	b.w	8006cd0 <HAL_NVIC_EnableIRQ>
 8003ca4:	58024400 	.word	0x58024400

08003ca8 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ca8:	481f      	ldr	r0, [pc, #124]	; (8003d28 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003caa:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003cac:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003cae:	2108      	movs	r1, #8
{
 8003cb0:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003cb2:	4c1e      	ldr	r4, [pc, #120]	; (8003d2c <MX_FMC_Init+0x84>)
{
 8003cb4:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003cb6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003cb8:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003cba:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8003cbc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003cc0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003cc6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003cc8:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003cca:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003cce:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003cd0:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003cd2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003cd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8003cda:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003cdc:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8003ce0:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003ce2:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8003ce4:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8003ce6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8003d20 <MX_FMC_Init+0x78>
 8003cea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	ed8d 7b00 	vstr	d7, [sp]
 8003cf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003cfa:	f009 f90b 	bl	800cf14 <HAL_SDRAM_Init>
 8003cfe:	b928      	cbnz	r0, 8003d0c <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003d00:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003d04:	f002 ff8a 	bl	8006c1c <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003d08:	b008      	add	sp, #32
 8003d0a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003d0c:	f002 fa8c 	bl	8006228 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003d10:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003d14:	f002 ff82 	bl	8006c1c <HAL_SetFMCMemorySwappingConfig>
}
 8003d18:	b008      	add	sp, #32
 8003d1a:	bd10      	pop	{r4, pc}
 8003d1c:	f3af 8000 	nop.w
 8003d20:	00000002 	.word	0x00000002
 8003d24:	00000006 	.word	0x00000006
 8003d28:	20012f14 	.word	0x20012f14
 8003d2c:	52004140 	.word	0x52004140

08003d30 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8003d30:	4836      	ldr	r0, [pc, #216]	; (8003e0c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d32:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003d34:	b5d0      	push	{r4, r6, r7, lr}
 8003d36:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8003d38:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003d3e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003d42:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8003d44:	b109      	cbz	r1, 8003d4a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003d46:	b038      	add	sp, #224	; 0xe0
 8003d48:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8003d4a:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d4c:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8003d4e:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d50:	a80a      	add	r0, sp, #40	; 0x28
 8003d52:	f015 fb41 	bl	80193d8 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003d56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d5a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d5c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003d5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d62:	f006 fac5 	bl	800a2f0 <HAL_RCCEx_PeriphCLKConfig>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d14c      	bne.n	8003e04 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d6a:	4b29      	ldr	r3, [pc, #164]	; (8003e10 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d6c:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8003d70:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d72:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d78:	2600      	movs	r6, #0
 8003d7a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d80:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003d84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003d88:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d92:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d94:	a902      	add	r1, sp, #8
 8003d96:	481f      	ldr	r0, [pc, #124]	; (8003e14 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d98:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003d9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d9e:	f004 fbad 	bl	80084fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003da2:	2219      	movs	r2, #25
 8003da4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da6:	a902      	add	r1, sp, #8
 8003da8:	481b      	ldr	r0, [pc, #108]	; (8003e18 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003daa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003db0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003db4:	f004 fba2 	bl	80084fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003db8:	f248 1237 	movw	r2, #33079	; 0x8137
 8003dbc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dbe:	a902      	add	r1, sp, #8
 8003dc0:	4816      	ldr	r0, [pc, #88]	; (8003e1c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dcc:	f004 fb96 	bl	80084fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003dd0:	f64f 7283 	movw	r2, #65411	; 0xff83
 8003dd4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dd6:	a902      	add	r1, sp, #8
 8003dd8:	4811      	ldr	r0, [pc, #68]	; (8003e20 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dda:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003de0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003de4:	f004 fb8a 	bl	80084fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003de8:	f24c 7203 	movw	r2, #50947	; 0xc703
 8003dec:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dee:	a902      	add	r1, sp, #8
 8003df0:	480c      	ldr	r0, [pc, #48]	; (8003e24 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003df2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003df4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003df8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dfc:	f004 fb7e 	bl	80084fc <HAL_GPIO_Init>
}
 8003e00:	b038      	add	sp, #224	; 0xe0
 8003e02:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003e04:	f002 fa10 	bl	8006228 <Error_Handler>
 8003e08:	e7af      	b.n	8003d6a <HAL_SDRAM_MspInit+0x3a>
 8003e0a:	bf00      	nop
 8003e0c:	20012f10 	.word	0x20012f10
 8003e10:	58024400 	.word	0x58024400
 8003e14:	58021400 	.word	0x58021400
 8003e18:	58020800 	.word	0x58020800
 8003e1c:	58021800 	.word	0x58021800
 8003e20:	58021000 	.word	0x58021000
 8003e24:	58020c00 	.word	0x58020c00

08003e28 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <MX_GPIO_Init+0x200>)
{
 8003e2e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e32:	4f7e      	ldr	r7, [pc, #504]	; (800402c <MX_GPIO_Init+0x204>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003e34:	4e7e      	ldr	r6, [pc, #504]	; (8004030 <MX_GPIO_Init+0x208>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003e3c:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e3e:	4d7d      	ldr	r5, [pc, #500]	; (8004034 <MX_GPIO_Init+0x20c>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e40:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e44:	f04f 0800 	mov.w	r8, #0
 8003e48:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003e50:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e58:	f042 0210 	orr.w	r2, r2, #16
 8003e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e64:	f002 0210 	and.w	r2, r2, #16
 8003e68:	9200      	str	r2, [sp, #0]
 8003e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e70:	f042 0204 	orr.w	r2, r2, #4
 8003e74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e7c:	f002 0204 	and.w	r2, r2, #4
 8003e80:	9201      	str	r2, [sp, #4]
 8003e82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e88:	f042 0220 	orr.w	r2, r2, #32
 8003e8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003e94:	f002 0220 	and.w	r2, r2, #32
 8003e98:	9202      	str	r2, [sp, #8]
 8003e9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ea4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003eb0:	9203      	str	r2, [sp, #12]
 8003eb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ec4:	f002 0201 	and.w	r2, r2, #1
 8003ec8:	9204      	str	r2, [sp, #16]
 8003eca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ed0:	f042 0202 	orr.w	r2, r2, #2
 8003ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003edc:	f002 0202 	and.w	r2, r2, #2
 8003ee0:	9205      	str	r2, [sp, #20]
 8003ee2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ef0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ef4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003ef8:	9206      	str	r2, [sp, #24]
 8003efa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003f00:	f042 0208 	orr.w	r2, r2, #8
 8003f04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003f08:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	9307      	str	r3, [sp, #28]
 8003f14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003f16:	f004 fc41 	bl	800879c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	2102      	movs	r1, #2
 8003f20:	f004 fc3c 	bl	800879c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f24:	4622      	mov	r2, r4
 8003f26:	4628      	mov	r0, r5
 8003f28:	2110      	movs	r1, #16
 8003f2a:	f004 fc37 	bl	800879c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003f2e:	f242 0220 	movw	r2, #8224	; 0x2020
 8003f32:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f34:	a908      	add	r1, sp, #32
 8003f36:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f38:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003f3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f40:	f004 fadc 	bl	80084fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f48:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4a:	a908      	add	r1, sp, #32
 8003f4c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f52:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f56:	f004 fad1 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003f5a:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8003f5e:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f60:	4638      	mov	r0, r7
 8003f62:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f64:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003f66:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f6a:	f004 fac7 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f72:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f74:	a908      	add	r1, sp, #32
 8003f76:	4830      	ldr	r0, [pc, #192]	; (8004038 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f7e:	f004 fabd 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f82:	2201      	movs	r2, #1
 8003f84:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f86:	a908      	add	r1, sp, #32
 8003f88:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f8a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f92:	f004 fab3 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f96:	2202      	movs	r2, #2
 8003f98:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	a908      	add	r1, sp, #32
 8003f9c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003fa2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa6:	f004 faa9 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003faa:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8003fae:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003fb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fba:	f004 fa9f 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003fbe:	f240 32e5 	movw	r2, #997	; 0x3e5
 8003fc2:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc4:	a908      	add	r1, sp, #32
 8003fc6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003fca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fce:	f004 fa95 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	a908      	add	r1, sp, #32
 8003fd8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fda:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fde:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe2:	f004 fa8b 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003fe6:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8003fea:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fec:	a908      	add	r1, sp, #32
 8003fee:	4813      	ldr	r0, [pc, #76]	; (800403c <MX_GPIO_Init+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003ff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ff6:	f004 fa81 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8003ffa:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8003ffe:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004000:	a908      	add	r1, sp, #32
 8004002:	480f      	ldr	r0, [pc, #60]	; (8004040 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8004006:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800400a:	f004 fa77 	bl	80084fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800400e:	2210      	movs	r2, #16
 8004010:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004012:	a908      	add	r1, sp, #32
 8004014:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004016:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800401a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401e:	f004 fa6d 	bl	80084fc <HAL_GPIO_Init>

}
 8004022:	b00e      	add	sp, #56	; 0x38
 8004024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004028:	58024400 	.word	0x58024400
 800402c:	58020800 	.word	0x58020800
 8004030:	58020000 	.word	0x58020000
 8004034:	58020400 	.word	0x58020400
 8004038:	58021400 	.word	0x58021400
 800403c:	58020c00 	.word	0x58020c00
 8004040:	58021800 	.word	0x58021800

08004044 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004044:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004046:	4817      	ldr	r0, [pc, #92]	; (80040a4 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004048:	2300      	movs	r3, #0
 800404a:	4917      	ldr	r1, [pc, #92]	; (80040a8 <MX_I2C2_Init+0x64>)
 800404c:	2401      	movs	r4, #1
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004050:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004052:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8004056:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800405a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800405e:	f004 fc69 	bl	8008934 <HAL_I2C_Init>
 8004062:	b950      	cbnz	r0, 800407a <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004064:	2100      	movs	r1, #0
 8004066:	480f      	ldr	r0, [pc, #60]	; (80040a4 <MX_I2C2_Init+0x60>)
 8004068:	f005 f9f2 	bl	8009450 <HAL_I2CEx_ConfigAnalogFilter>
 800406c:	b968      	cbnz	r0, 800408a <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800406e:	2100      	movs	r1, #0
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <MX_I2C2_Init+0x60>)
 8004072:	f005 fa21 	bl	80094b8 <HAL_I2CEx_ConfigDigitalFilter>
 8004076:	b980      	cbnz	r0, 800409a <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004078:	bd10      	pop	{r4, pc}
    Error_Handler();
 800407a:	f002 f8d5 	bl	8006228 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800407e:	2100      	movs	r1, #0
 8004080:	4808      	ldr	r0, [pc, #32]	; (80040a4 <MX_I2C2_Init+0x60>)
 8004082:	f005 f9e5 	bl	8009450 <HAL_I2CEx_ConfigAnalogFilter>
 8004086:	2800      	cmp	r0, #0
 8004088:	d0f1      	beq.n	800406e <MX_I2C2_Init+0x2a>
    Error_Handler();
 800408a:	f002 f8cd 	bl	8006228 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800408e:	2100      	movs	r1, #0
 8004090:	4804      	ldr	r0, [pc, #16]	; (80040a4 <MX_I2C2_Init+0x60>)
 8004092:	f005 fa11 	bl	80094b8 <HAL_I2CEx_ConfigDigitalFilter>
 8004096:	2800      	cmp	r0, #0
 8004098:	d0ee      	beq.n	8004078 <MX_I2C2_Init+0x34>
}
 800409a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800409e:	f002 b8c3 	b.w	8006228 <Error_Handler>
 80040a2:	bf00      	nop
 80040a4:	20012f48 	.word	0x20012f48
 80040a8:	40005800 	.word	0x40005800
 80040ac:	00b03fdb 	.word	0x00b03fdb

080040b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80040b0:	b510      	push	{r4, lr}
 80040b2:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	2100      	movs	r1, #0
{
 80040b6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040b8:	22c0      	movs	r2, #192	; 0xc0
 80040ba:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040bc:	9106      	str	r1, [sp, #24]
 80040be:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80040c2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040c6:	f015 f987 	bl	80193d8 <memset>
  if(i2cHandle->Instance==I2C2)
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_I2C_MspInit+0xb8>)
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80040d2:	b038      	add	sp, #224	; 0xe0
 80040d4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80040d6:	2208      	movs	r2, #8
 80040d8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040da:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80040dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040e0:	f006 f906 	bl	800a2f0 <HAL_RCCEx_PeriphCLKConfig>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d138      	bne.n	800415a <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e8:	4c20      	ldr	r4, [pc, #128]	; (800416c <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040ea:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ec:	a902      	add	r1, sp, #8
 80040ee:	4820      	ldr	r0, [pc, #128]	; (8004170 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80040fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004100:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004102:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004104:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004108:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8004160 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004110:	2303      	movs	r3, #3
 8004112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004116:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411a:	f004 f9ef 	bl	80084fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800411e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8004122:	2200      	movs	r2, #0
 8004124:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800412a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800412c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8004130:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800413c:	f002 fd8a 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004140:	2021      	movs	r0, #33	; 0x21
 8004142:	f002 fdc5 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8004146:	2200      	movs	r2, #0
 8004148:	2101      	movs	r1, #1
 800414a:	2022      	movs	r0, #34	; 0x22
 800414c:	f002 fd82 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004150:	2022      	movs	r0, #34	; 0x22
 8004152:	f002 fdbd 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
}
 8004156:	b038      	add	sp, #224	; 0xe0
 8004158:	bd10      	pop	{r4, pc}
      Error_Handler();
 800415a:	f002 f865 	bl	8006228 <Error_Handler>
 800415e:	e7c3      	b.n	80040e8 <HAL_I2C_MspInit+0x38>
 8004160:	00000c00 	.word	0x00000c00
 8004164:	00000012 	.word	0x00000012
 8004168:	40005800 	.word	0x40005800
 800416c:	58024400 	.word	0x58024400
 8004170:	58020400 	.word	0x58020400

08004174 <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 8004174:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8004178:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004188 <scaleOscPitch+0x14>
}
 800417c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004180:	eeb0 0a67 	vmov.f32	s0, s15
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	42400000 	.word	0x42400000

0800418c <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 800418c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80041a0 <scaleOscFine+0x14>
 8004190:	eddf 7a04 	vldr	s15, [pc, #16]	; 80041a4 <scaleOscFine+0x18>
}
 8004194:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004198:	eeb0 0a67 	vmov.f32	s0, s15
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	43480000 	.word	0x43480000
 80041a4:	c2c80000 	.word	0xc2c80000

080041a8 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 80041a8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80041bc <scaleOscFreq+0x14>
 80041ac:	eddf 7a04 	vldr	s15, [pc, #16]	; 80041c0 <scaleOscFreq+0x18>
}
 80041b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80041b4:	eeb0 0a67 	vmov.f32	s0, s15
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	457a0000 	.word	0x457a0000
 80041c0:	c4fa0000 	.word	0xc4fa0000

080041c4 <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 80041c4:	eddf 7a02 	vldr	s15, [pc, #8]	; 80041d0 <scaleFilterCutoff+0xc>
}
 80041c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	42fe0000 	.word	0x42fe0000

080041d4 <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 80041d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80041e8 <scaleFinalLowpass+0x14>
 80041d8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80041ec <scaleFinalLowpass+0x18>
}
 80041dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80041e0:	eeb0 0a67 	vmov.f32	s0, s15
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	428c0000 	.word	0x428c0000
 80041ec:	42680000 	.word	0x42680000

080041f0 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop

080041f4 <checkForSDCardPreset>:
{
 80041f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 80041f8:	2301      	movs	r3, #1
{
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 80041fe:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8004202:	f00a fdc9 	bl	800ed98 <BSP_PlatformIsDetected>
 8004206:	b110      	cbz	r0, 800420e <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 8004208:	2300      	movs	r3, #0
 800420a:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 800420e:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8004212:	b95b      	cbnz	r3, 800422c <checkForSDCardPreset+0x38>
 8004214:	4c39      	ldr	r4, [pc, #228]	; (80042fc <checkForSDCardPreset+0x108>)
 8004216:	4d3a      	ldr	r5, [pc, #232]	; (8004300 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 8004218:	2301      	movs	r3, #1
 800421a:	2000      	movs	r0, #0
 800421c:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	4a38      	ldr	r2, [pc, #224]	; (8004304 <checkForSDCardPreset+0x110>)
 8004222:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8004224:	7023      	strb	r3, [r4, #0]
}
 8004226:	b00a      	add	sp, #40	; 0x28
 8004228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 800422c:	2700      	movs	r7, #0
		diskBusy = 1;
 800422e:	f04f 0801 	mov.w	r8, #1
 8004232:	4c32      	ldr	r4, [pc, #200]	; (80042fc <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 8004234:	4d32      	ldr	r5, [pc, #200]	; (8004300 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 8004236:	4638      	mov	r0, r7
		diskBusy = 1;
 8004238:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 800423c:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 800423e:	f00a fe45 	bl	800eecc <disk_initialize>
	    disk_status(0);
 8004242:	4638      	mov	r0, r7
 8004244:	f00a fe38 	bl	800eeb8 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8004248:	4642      	mov	r2, r8
 800424a:	492f      	ldr	r1, [pc, #188]	; (8004308 <checkForSDCardPreset+0x114>)
 800424c:	482f      	ldr	r0, [pc, #188]	; (800430c <checkForSDCardPreset+0x118>)
 800424e:	f00d f8d1 	bl	80113f4 <f_mount>
 8004252:	2800      	cmp	r0, #0
 8004254:	d1e0      	bne.n	8004218 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 8004256:	a904      	add	r1, sp, #16
 8004258:	220a      	movs	r2, #10
 800425a:	4630      	mov	r0, r6
 800425c:	f015 f8ac 	bl	80193b8 <itoa>
			int len = ((strlen(charBuf)));
 8004260:	a804      	add	r0, sp, #16
 8004262:	f7fc f839 	bl	80002d8 <strlen>
			if (len == 1)
 8004266:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 8004268:	4601      	mov	r1, r0
			if (len == 1)
 800426a:	d02d      	beq.n	80042c8 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 800426c:	ab04      	add	r3, sp, #16
 800426e:	4e28      	ldr	r6, [pc, #160]	; (8004310 <checkForSDCardPreset+0x11c>)
 8004270:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 8004274:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 8004276:	181f      	adds	r7, r3, r0
 8004278:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 800427a:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 800427c:	f84c 0001 	str.w	r0, [ip, r1]
 8004280:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 8004282:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 8004284:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 8004286:	4661      	mov	r1, ip
 8004288:	f015 f898 	bl	80193bc <memcpy>
 800428c:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <checkForSDCardPreset+0x114>)
 8004290:	4920      	ldr	r1, [pc, #128]	; (8004314 <checkForSDCardPreset+0x120>)
 8004292:	4821      	ldr	r0, [pc, #132]	; (8004318 <checkForSDCardPreset+0x124>)
 8004294:	f00d fe1e 	bl	8011ed4 <f_findfirst>
			if(res == FR_OK)
 8004298:	2800      	cmp	r0, #0
 800429a:	d1bd      	bne.n	8004218 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800429c:	4e1f      	ldr	r6, [pc, #124]	; (800431c <checkForSDCardPreset+0x128>)
 800429e:	2211      	movs	r2, #17
 80042a0:	491f      	ldr	r1, [pc, #124]	; (8004320 <checkForSDCardPreset+0x12c>)
 80042a2:	4630      	mov	r0, r6
 80042a4:	f00d f8f8 	bl	8011498 <f_open>
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1b5      	bne.n	8004218 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80042ac:	ab03      	add	r3, sp, #12
 80042ae:	68f2      	ldr	r2, [r6, #12]
 80042b0:	491c      	ldr	r1, [pc, #112]	; (8004324 <checkForSDCardPreset+0x130>)
 80042b2:	4630      	mov	r0, r6
 80042b4:	f00d fa6e 	bl	8011794 <f_read>
					presetWaitingToParse = bytesRead;
 80042b8:	9a03      	ldr	r2, [sp, #12]
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 80042bc:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 80042be:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 80042c0:	f00d fcfc 	bl	8011cbc <f_close>
					found = 1;
 80042c4:	2001      	movs	r0, #1
 80042c6:	e7aa      	b.n	800421e <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 80042c8:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 80042cc:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 80042ce:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 80042d2:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 80042d6:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 80042d8:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 80042da:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 80042de:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 80042e0:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 80042e4:	f7fb fff8 	bl	80002d8 <strlen>
 80042e8:	4909      	ldr	r1, [pc, #36]	; (8004310 <checkForSDCardPreset+0x11c>)
 80042ea:	4602      	mov	r2, r0
 80042ec:	9b01      	ldr	r3, [sp, #4]
 80042ee:	181e      	adds	r6, r3, r0
 80042f0:	6808      	ldr	r0, [r1, #0]
 80042f2:	5098      	str	r0, [r3, r2]
 80042f4:	790a      	ldrb	r2, [r1, #4]
 80042f6:	7132      	strb	r2, [r6, #4]
 80042f8:	e7c9      	b.n	800428e <checkForSDCardPreset+0x9a>
 80042fa:	bf00      	nop
 80042fc:	20012fe0 	.word	0x20012fe0
 8004300:	20015190 	.word	0x20015190
 8004304:	20016c20 	.word	0x20016c20
 8004308:	20019a48 	.word	0x20019a48
 800430c:	200195e4 	.word	0x200195e4
 8004310:	0801b594 	.word	0x0801b594
 8004314:	20015044 	.word	0x20015044
 8004318:	20012fa8 	.word	0x20012fa8
 800431c:	20019818 	.word	0x20019818
 8004320:	2001505a 	.word	0x2001505a
 8004324:	30000200 	.word	0x30000200
 8004328:	20016c24 	.word	0x20016c24

0800432c <scaleDefault>:
{
 800432c:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004330:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800433c <scaleDefault+0x10>
 8004334:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004338:	f00f bf86 	b.w	8014248 <LEAF_clip>
 800433c:	00000000 	.word	0x00000000

08004340 <scaleTranspose>:
{
 8004340:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 8004344:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004364 <scaleTranspose+0x24>
 8004348:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800434c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 800434e:	f00f ff7b 	bl	8014248 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 8004352:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004368 <scaleTranspose+0x28>
 8004356:	eddf 7a05 	vldr	s15, [pc, #20]	; 800436c <scaleTranspose+0x2c>
}
 800435a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	bd08      	pop	{r3, pc}
 8004364:	00000000 	.word	0x00000000
 8004368:	42c00000 	.word	0x42c00000
 800436c:	c2400000 	.word	0xc2400000

08004370 <scalePitchBend>:
{
 8004370:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004374:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800438c <scalePitchBend+0x1c>
 8004378:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800437c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 800437e:	f00f ff63 	bl	8014248 <LEAF_clip>
	return (input * 48.0f);
 8004382:	eddf 7a03 	vldr	s15, [pc, #12]	; 8004390 <scalePitchBend+0x20>
}
 8004386:	ee20 0a27 	vmul.f32	s0, s0, s15
 800438a:	bd08      	pop	{r3, pc}
 800438c:	00000000 	.word	0x00000000
 8004390:	42400000 	.word	0x42400000

08004394 <scaleFilterResonance>:
{
 8004394:	b510      	push	{r4, lr}
 8004396:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 800439a:	ed9f 9a21 	vldr	s18, [pc, #132]	; 8004420 <scaleFilterResonance+0x8c>
{
 800439e:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 80043a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80043a6:	eeb0 0a49 	vmov.f32	s0, s18
 80043aa:	f00f ff4d 	bl	8014248 <LEAF_clip>
 80043ae:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 80043b2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8004424 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80043b6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004428 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 80043ba:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80043be:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80043c2:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80043c6:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80043ca:	1c63      	adds	r3, r4, #1
 80043cc:	ee00 3a90 	vmov	s1, r3
 80043d0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80043d4:	f00f ff38 	bl	8014248 <LEAF_clip>
 80043d8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80043dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80043e0:	4b12      	ldr	r3, [pc, #72]	; (800442c <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 80043e2:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80043e6:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80043ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80043ee:	ee38 8a27 	vadd.f32	s16, s16, s15
 80043f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80043f6:	edd4 7a00 	vldr	s15, [r4]
 80043fa:	eeb0 0a49 	vmov.f32	s0, s18
 80043fe:	ed93 7a00 	vldr	s14, [r3]
 8004402:	ee38 8a68 	vsub.f32	s16, s16, s17
 8004406:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800440a:	ee60 0a87 	vmul.f32	s1, s1, s14
 800440e:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 8004412:	ecbd 8b04 	vpop	{d8-d9}
 8004416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 800441a:	f00f bf15 	b.w	8014248 <LEAF_clip>
 800441e:	bf00      	nop
 8004420:	3dcccccd 	.word	0x3dcccccd
 8004424:	44ffe000 	.word	0x44ffe000
 8004428:	00000000 	.word	0x00000000
 800442c:	2001702c 	.word	0x2001702c

08004430 <scaleEnvTimes>:
{
 8004430:	b510      	push	{r4, lr}
 8004432:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8004436:	eddf 8a1d 	vldr	s17, [pc, #116]	; 80044ac <scaleEnvTimes+0x7c>
{
 800443a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 800443e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004442:	eeb0 0a68 	vmov.f32	s0, s17
 8004446:	f00f feff 	bl	8014248 <LEAF_clip>
 800444a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 800444e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80044b0 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004452:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8004456:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 800445a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800445e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8004462:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004466:	1c63      	adds	r3, r4, #1
 8004468:	ee00 3a90 	vmov	s1, r3
 800446c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004470:	f00f feea 	bl	8014248 <LEAF_clip>
 8004474:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 800447e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004482:	ee10 2a10 	vmov	r2, s0
 8004486:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800448a:	ee38 8a07 	vadd.f32	s16, s16, s14
 800448e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004492:	ed94 7a00 	vldr	s14, [r4]
 8004496:	ed93 0a00 	vldr	s0, [r3]
 800449a:	ee38 8a68 	vsub.f32	s16, s16, s17
 800449e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 80044a2:	eea7 0a08 	vfma.f32	s0, s14, s16
 80044a6:	ecbd 8b02 	vpop	{d8}
 80044aa:	bd10      	pop	{r4, pc}
 80044ac:	00000000 	.word	0x00000000
 80044b0:	44ffe000 	.word	0x44ffe000
 80044b4:	20013034 	.word	0x20013034

080044b8 <scaleLFORates>:
{
 80044b8:	b510      	push	{r4, lr}
 80044ba:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 80044be:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8004534 <scaleLFORates+0x7c>
{
 80044c2:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 80044c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80044ca:	eeb0 0a68 	vmov.f32	s0, s17
 80044ce:	f00f febb 	bl	8014248 <LEAF_clip>
 80044d2:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 80044d6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004538 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80044da:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 80044de:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80044e2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80044e6:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80044ea:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80044ee:	1c63      	adds	r3, r4, #1
 80044f0:	ee00 3a90 	vmov	s1, r3
 80044f4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80044f8:	f00f fea6 	bl	8014248 <LEAF_clip>
 80044fc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8004500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004504:	4b0d      	ldr	r3, [pc, #52]	; (800453c <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 8004506:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 800450a:	ee10 2a10 	vmov	r2, s0
 800450e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004512:	ee38 8a07 	vadd.f32	s16, s16, s14
 8004516:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800451a:	ed94 7a00 	vldr	s14, [r4]
 800451e:	ed93 0a00 	vldr	s0, [r3]
 8004522:	ee38 8a68 	vsub.f32	s16, s16, s17
 8004526:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 800452a:	eea7 0a08 	vfma.f32	s0, s14, s16
 800452e:	ecbd 8b02 	vpop	{d8}
 8004532:	bd10      	pop	{r4, pc}
 8004534:	00000000 	.word	0x00000000
 8004538:	44ffe000 	.word	0x44ffe000
 800453c:	24058e80 	.word	0x24058e80

08004540 <SystemClock_Config>:
{
 8004540:	b500      	push	{lr}
 8004542:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004544:	224c      	movs	r2, #76	; 0x4c
 8004546:	2100      	movs	r1, #0
 8004548:	a80c      	add	r0, sp, #48	; 0x30
 800454a:	f014 ff45 	bl	80193d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800454e:	2220      	movs	r2, #32
 8004550:	2100      	movs	r1, #0
 8004552:	a804      	add	r0, sp, #16
 8004554:	f014 ff40 	bl	80193d8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004558:	2002      	movs	r0, #2
 800455a:	f004 ffdf 	bl	800951c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800455e:	4b40      	ldr	r3, [pc, #256]	; (8004660 <SystemClock_Config+0x120>)
 8004560:	2100      	movs	r1, #0
 8004562:	4a40      	ldr	r2, [pc, #256]	; (8004664 <SystemClock_Config+0x124>)
 8004564:	9101      	str	r1, [sp, #4]
 8004566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004568:	f021 0101 	bic.w	r1, r1, #1
 800456c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	6993      	ldr	r3, [r2, #24]
 8004578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800457c:	6193      	str	r3, [r2, #24]
 800457e:	6993      	ldr	r3, [r2, #24]
 8004580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004588:	6993      	ldr	r3, [r2, #24]
 800458a:	0499      	lsls	r1, r3, #18
 800458c:	d5fc      	bpl.n	8004588 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <SystemClock_Config+0x128>)
 8004590:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8004594:	f041 0102 	orr.w	r1, r1, #2
 8004598:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800459c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80045aa:	9103      	str	r1, [sp, #12]
 80045ac:	6991      	ldr	r1, [r2, #24]
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <SystemClock_Config+0x120>)
 80045b0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80045b4:	6191      	str	r1, [r2, #24]
 80045b6:	6992      	ldr	r2, [r2, #24]
 80045b8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80045bc:	9203      	str	r2, [sp, #12]
 80045be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80045c2:	f041 0101 	orr.w	r1, r1, #1
 80045c6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045d2:	6993      	ldr	r3, [r2, #24]
 80045d4:	049b      	lsls	r3, r3, #18
 80045d6:	d5fc      	bpl.n	80045d2 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80045d8:	4a23      	ldr	r2, [pc, #140]	; (8004668 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80045da:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045dc:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80045de:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80045e0:	f023 0303 	bic.w	r3, r3, #3
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045ea:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80045ec:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 80045ee:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80045f0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045f2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80045f4:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80045f6:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80045f8:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 80045fa:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80045fc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8004648 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004600:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004604:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004608:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800460a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800460e:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004612:	f005 f82b 	bl	800966c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004616:	2200      	movs	r2, #0
 8004618:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800461a:	2104      	movs	r1, #4
 800461c:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800461e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004650 <SystemClock_Config+0x110>
 8004622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800462a:	2340      	movs	r3, #64	; 0x40
 800462c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004630:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004658 <SystemClock_Config+0x118>
 8004634:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004638:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800463c:	f005 fba8 	bl	8009d90 <HAL_RCC_ClockConfig>
}
 8004640:	b021      	add	sp, #132	; 0x84
 8004642:	f85d fb04 	ldr.w	pc, [sp], #4
 8004646:	bf00      	nop
 8004648:	00000021 	.word	0x00000021
 800464c:	00010000 	.word	0x00010000
 8004650:	0000003f 	.word	0x0000003f
 8004654:	00000003 	.word	0x00000003
 8004658:	00000040 	.word	0x00000040
 800465c:	00000040 	.word	0x00000040
 8004660:	58000400 	.word	0x58000400
 8004664:	58024800 	.word	0x58024800
 8004668:	58024400 	.word	0x58024400
 800466c:	00000000 	.word	0x00000000

08004670 <PeriphCommonClock_Config>:
{
 8004670:	b500      	push	{lr}
 8004672:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004674:	22a4      	movs	r2, #164	; 0xa4
 8004676:	2100      	movs	r1, #0
 8004678:	a807      	add	r0, sp, #28
 800467a:	f014 fead 	bl	80193d8 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800467e:	2019      	movs	r0, #25
 8004680:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004684:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8004686:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004688:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800468a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800468e:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8004690:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8004692:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80046b8 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8004696:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800469a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800469e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80046a0:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80046a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80046c0 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80046a8:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80046aa:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046ae:	f005 fe1f 	bl	800a2f0 <HAL_RCCEx_PeriphCLKConfig>
}
 80046b2:	b031      	add	sp, #196	; 0xc4
 80046b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80046b8:	00011100 	.word	0x00011100
 80046bc:	00000000 	.word	0x00000000
 80046c0:	00000007 	.word	0x00000007
 80046c4:	00000002 	.word	0x00000002

080046c8 <randomNumber>:
float randomNumber(void) {
 80046c8:	b500      	push	{lr}
 80046ca:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80046cc:	4807      	ldr	r0, [pc, #28]	; (80046ec <randomNumber+0x24>)
 80046ce:	a901      	add	r1, sp, #4
 80046d0:	f007 f836 	bl	800b740 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80046d4:	eddd 7a01 	vldr	s15, [sp, #4]
 80046d8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80046f0 <randomNumber+0x28>
 80046dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80046e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80046e4:	b003      	add	sp, #12
 80046e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80046ea:	bf00      	nop
 80046ec:	2001902c 	.word	0x2001902c
 80046f0:	2f80000d 	.word	0x2f80000d

080046f4 <BSP_SD_IsDetected>:
{
 80046f4:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 80046f6:	2301      	movs	r3, #1
{
 80046f8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80046fa:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 80046fe:	f00a fb4b 	bl	800ed98 <BSP_PlatformIsDetected>
 8004702:	b110      	cbz	r0, 800470a <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 8004704:	2300      	movs	r3, #0
 8004706:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 800470a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800470e:	b003      	add	sp, #12
 8004710:	f85d fb04 	ldr.w	pc, [sp], #4

08004714 <getPresetNamesFromSDCard>:
{
 8004714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8004718:	2301      	movs	r3, #1
{
 800471a:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 800471c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 8004720:	f00a fb3a 	bl	800ed98 <BSP_PlatformIsDetected>
 8004724:	b110      	cbz	r0, 800472c <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 8004726:	2300      	movs	r3, #0
 8004728:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 800472c:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8004730:	b93b      	cbnz	r3, 8004742 <getPresetNamesFromSDCard+0x2e>
 8004732:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80048ac <getPresetNamesFromSDCard+0x198>
	diskBusy = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	f889 3000 	strb.w	r3, [r9]
}
 800473c:	b009      	add	sp, #36	; 0x24
 800473e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 8004742:	2400      	movs	r4, #0
 8004744:	4b51      	ldr	r3, [pc, #324]	; (800488c <getPresetNamesFromSDCard+0x178>)
		diskBusy = 1;
 8004746:	2501      	movs	r5, #1
 8004748:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80048ac <getPresetNamesFromSDCard+0x198>
		disk_initialize(0);
 800474c:	4620      	mov	r0, r4
		loadFailed = 0;
 800474e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8004750:	f889 5000 	strb.w	r5, [r9]
		disk_initialize(0);
 8004754:	f00a fbba 	bl	800eecc <disk_initialize>
	    disk_status(0);
 8004758:	4620      	mov	r0, r4
 800475a:	f00a fbad 	bl	800eeb8 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800475e:	462a      	mov	r2, r5
 8004760:	494b      	ldr	r1, [pc, #300]	; (8004890 <getPresetNamesFromSDCard+0x17c>)
 8004762:	484c      	ldr	r0, [pc, #304]	; (8004894 <getPresetNamesFromSDCard+0x180>)
 8004764:	f00c fe46 	bl	80113f4 <f_mount>
 8004768:	2800      	cmp	r0, #0
 800476a:	d1e4      	bne.n	8004736 <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800476c:	4604      	mov	r4, r0
 800476e:	4d4a      	ldr	r5, [pc, #296]	; (8004898 <getPresetNamesFromSDCard+0x184>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004770:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8004890 <getPresetNamesFromSDCard+0x17c>
 8004774:	4f49      	ldr	r7, [pc, #292]	; (800489c <getPresetNamesFromSDCard+0x188>)
 8004776:	4e4a      	ldr	r6, [pc, #296]	; (80048a0 <getPresetNamesFromSDCard+0x18c>)
 8004778:	e014      	b.n	80047a4 <getPresetNamesFromSDCard+0x90>
					strcat(charBuf, ".ebp");
 800477a:	6828      	ldr	r0, [r5, #0]
 800477c:	f10d 0e08 	add.w	lr, sp, #8
 8004780:	f84e 0003 	str.w	r0, [lr, r3]
					strcpy(finalString, charBuf);
 8004784:	a805      	add	r0, sp, #20
					strcat(charBuf, ".ebp");
 8004786:	792b      	ldrb	r3, [r5, #4]
 8004788:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
 800478c:	f014 fe16 	bl	80193bc <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004790:	ab05      	add	r3, sp, #20
 8004792:	4642      	mov	r2, r8
 8004794:	4639      	mov	r1, r7
 8004796:	4630      	mov	r0, r6
 8004798:	f00d fb9c 	bl	8011ed4 <f_findfirst>
				if(res == FR_OK)
 800479c:	b378      	cbz	r0, 80047fe <getPresetNamesFromSDCard+0xea>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800479e:	3401      	adds	r4, #1
 80047a0:	2c14      	cmp	r4, #20
 80047a2:	d0c8      	beq.n	8004736 <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 80047a4:	220a      	movs	r2, #10
 80047a6:	a902      	add	r1, sp, #8
 80047a8:	4620      	mov	r0, r4
 80047aa:	f014 fe05 	bl	80193b8 <itoa>
				int len = ((strlen(charBuf)));
 80047ae:	a802      	add	r0, sp, #8
 80047b0:	f7fb fd92 	bl	80002d8 <strlen>
					strcpy(finalString, charBuf);
 80047b4:	a902      	add	r1, sp, #8
				if (len == 1)
 80047b6:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80047b8:	4603      	mov	r3, r0
					strcat(charBuf, ".ebp");
 80047ba:	eb01 0c00 	add.w	ip, r1, r0
					strcpy(finalString, charBuf);
 80047be:	f100 0205 	add.w	r2, r0, #5
				if (len == 1)
 80047c2:	d1da      	bne.n	800477a <getPresetNamesFromSDCard+0x66>
					finalString[2] = charBuf[1];
 80047c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebp");
 80047c8:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 80047ca:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 80047ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80047d2:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 80047d6:	2330      	movs	r3, #48	; 0x30
 80047d8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 80047dc:	f7fb fd7c 	bl	80002d8 <strlen>
 80047e0:	aa05      	add	r2, sp, #20
 80047e2:	4603      	mov	r3, r0
 80047e4:	6828      	ldr	r0, [r5, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80047e6:	4639      	mov	r1, r7
					strcat(finalString, ".ebp");
 80047e8:	50d0      	str	r0, [r2, r3]
 80047ea:	4413      	add	r3, r2
 80047ec:	792a      	ldrb	r2, [r5, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80047ee:	4630      	mov	r0, r6
					strcat(finalString, ".ebp");
 80047f0:	711a      	strb	r2, [r3, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80047f2:	ab05      	add	r3, sp, #20
 80047f4:	4642      	mov	r2, r8
 80047f6:	f00d fb6d 	bl	8011ed4 <f_findfirst>
				if(res == FR_OK)
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d1cf      	bne.n	800479e <getPresetNamesFromSDCard+0x8a>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80047fe:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80048b0 <getPresetNamesFromSDCard+0x19c>
 8004802:	2211      	movs	r2, #17
 8004804:	4927      	ldr	r1, [pc, #156]	; (80048a4 <getPresetNamesFromSDCard+0x190>)
 8004806:	4650      	mov	r0, sl
 8004808:	f00c fe46 	bl	8011498 <f_open>
 800480c:	2800      	cmp	r0, #0
 800480e:	d1c6      	bne.n	800479e <getPresetNamesFromSDCard+0x8a>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8004810:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80048b4 <getPresetNamesFromSDCard+0x1a0>
 8004814:	ab01      	add	r3, sp, #4
 8004816:	f8da 200c 	ldr.w	r2, [sl, #12]
 800481a:	4650      	mov	r0, sl
 800481c:	4659      	mov	r1, fp
 800481e:	f00c ffb9 	bl	8011794 <f_read>
						f_close(&SDFile);
 8004822:	4650      	mov	r0, sl
 8004824:	f00d fa4a 	bl	8011cbc <f_close>
							presetNamesArray[i][j] = buffer[j];
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <getPresetNamesFromSDCard+0x194>)
 800482a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800482e:	f89b 1000 	ldrb.w	r1, [fp]
 8004832:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
 8004836:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800483a:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800483e:	705a      	strb	r2, [r3, #1]
 8004840:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8004844:	709a      	strb	r2, [r3, #2]
 8004846:	f89b 2003 	ldrb.w	r2, [fp, #3]
 800484a:	70da      	strb	r2, [r3, #3]
 800484c:	f89b 2004 	ldrb.w	r2, [fp, #4]
 8004850:	711a      	strb	r2, [r3, #4]
 8004852:	f89b 2005 	ldrb.w	r2, [fp, #5]
 8004856:	715a      	strb	r2, [r3, #5]
 8004858:	f89b 2006 	ldrb.w	r2, [fp, #6]
 800485c:	719a      	strb	r2, [r3, #6]
 800485e:	f89b 2007 	ldrb.w	r2, [fp, #7]
 8004862:	71da      	strb	r2, [r3, #7]
 8004864:	f89b 2008 	ldrb.w	r2, [fp, #8]
 8004868:	721a      	strb	r2, [r3, #8]
 800486a:	f89b 2009 	ldrb.w	r2, [fp, #9]
 800486e:	725a      	strb	r2, [r3, #9]
 8004870:	f89b 200a 	ldrb.w	r2, [fp, #10]
 8004874:	729a      	strb	r2, [r3, #10]
 8004876:	f89b 200b 	ldrb.w	r2, [fp, #11]
 800487a:	72da      	strb	r2, [r3, #11]
 800487c:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8004880:	731a      	strb	r2, [r3, #12]
 8004882:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8004886:	735a      	strb	r2, [r3, #13]
						for (int j = 0; j < 14; j++)
 8004888:	e789      	b.n	800479e <getPresetNamesFromSDCard+0x8a>
 800488a:	bf00      	nop
 800488c:	20015190 	.word	0x20015190
 8004890:	20019a48 	.word	0x20019a48
 8004894:	200195e4 	.word	0x200195e4
 8004898:	0801b594 	.word	0x0801b594
 800489c:	20015044 	.word	0x20015044
 80048a0:	20012fa8 	.word	0x20012fa8
 80048a4:	2001505a 	.word	0x2001505a
 80048a8:	24058d60 	.word	0x24058d60
 80048ac:	20012fe0 	.word	0x20012fe0
 80048b0:	20019818 	.word	0x20019818
 80048b4:	30000200 	.word	0x30000200

080048b8 <SDRAM_init>:
{
 80048b8:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 80048ba:	2300      	movs	r3, #0
{
 80048bc:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048be:	4c22      	ldr	r4, [pc, #136]	; (8004948 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80048c0:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 80048c2:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80048c4:	2310      	movs	r3, #16
 80048c6:	2601      	movs	r6, #1
 80048c8:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048ca:	a902      	add	r1, sp, #8
 80048cc:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80048ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80048d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048da:	f008 fb45 	bl	800cf68 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 80048de:	2064      	movs	r0, #100	; 0x64
 80048e0:	f002 f984 	bl	8006bec <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048e4:	a902      	add	r1, sp, #8
 80048e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048ea:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80048ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80048f0:	2602      	movs	r6, #2
 80048f2:	2710      	movs	r7, #16
 80048f4:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80048f8:	f008 fb36 	bl	800cf68 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80048fc:	2003      	movs	r0, #3
 80048fe:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004908:	2004      	movs	r0, #4
 800490a:	2100      	movs	r1, #0
 800490c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004910:	a902      	add	r1, sp, #8
 8004912:	4620      	mov	r0, r4
 8004914:	f008 fb28 	bl	800cf68 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004918:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800491c:	2204      	movs	r2, #4
 800491e:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004920:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 8004922:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004924:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004926:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 800492a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800492c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8004930:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004934:	4620      	mov	r0, r4
 8004936:	f008 fb17 	bl	800cf68 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 800493a:	f640 0106 	movw	r1, #2054	; 0x806
 800493e:	4620      	mov	r0, r4
 8004940:	f008 fb32 	bl	800cfa8 <HAL_SDRAM_ProgramRefreshRate>
}
 8004944:	b006      	add	sp, #24
 8004946:	bdd0      	pop	{r4, r6, r7, pc}
 8004948:	20012f14 	.word	0x20012f14

0800494c <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 800494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004950:	b087      	sub	sp, #28
 8004952:	460c      	mov	r4, r1
 8004954:	9001      	str	r0, [sp, #4]
 8004956:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004958:	b672      	cpsid	i


	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[i];
 800495a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004a7c <parsePreset+0x130>
	 presetReady = 0;
 800495e:	2100      	movs	r1, #0
 8004960:	4b3f      	ldr	r3, [pc, #252]	; (8004a60 <parsePreset+0x114>)
		 audioOutBuffer[i] = 0;
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	483f      	ldr	r0, [pc, #252]	; (8004a64 <parsePreset+0x118>)
	 presetReady = 0;
 8004966:	6019      	str	r1, [r3, #0]
		 audioOutBuffer[i] = 0;
 8004968:	f014 fd36 	bl	80193d8 <memset>
		presetName[i] = buffer[i];
 800496c:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <parsePreset+0x11c>)
		presetNamesArray[presetNumber][i] = buffer[i];
 800496e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
		presetName[i] = buffer[i];
 8004972:	f89b 2000 	ldrb.w	r2, [fp]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004976:	493d      	ldr	r1, [pc, #244]	; (8004a6c <parsePreset+0x120>)
 8004978:	0045      	lsls	r5, r0, #1
		presetName[i] = buffer[i];
 800497a:	9202      	str	r2, [sp, #8]
		presetNamesArray[presetNumber][i] = buffer[i];
 800497c:	460c      	mov	r4, r1
		presetName[i] = buffer[i];
 800497e:	701a      	strb	r2, [r3, #0]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004980:	eb01 0240 	add.w	r2, r1, r0, lsl #1
		presetName[i] = buffer[i];
 8004984:	f89b 1007 	ldrb.w	r1, [fp, #7]
	audioMasterLevel = 0.0f;
 8004988:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004a70 <parsePreset+0x124>
		presetName[i] = buffer[i];
 800498c:	71d9      	strb	r1, [r3, #7]
 800498e:	9103      	str	r1, [sp, #12]
 8004990:	f89b 100a 	ldrb.w	r1, [fp, #10]
 8004994:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004998:	9104      	str	r1, [sp, #16]
	audioMasterLevel = 0.0f;
 800499a:	4936      	ldr	r1, [pc, #216]	; (8004a74 <parsePreset+0x128>)
		presetName[i] = buffer[i];
 800499c:	f89b a002 	ldrb.w	sl, [fp, #2]
	audioMasterLevel = 0.0f;
 80049a0:	edc1 7a00 	vstr	s15, [r1]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049a4:	4621      	mov	r1, r4
		presetName[i] = buffer[i];
 80049a6:	f89b 9003 	ldrb.w	r9, [fp, #3]
 80049aa:	f89b 8004 	ldrb.w	r8, [fp, #4]
 80049ae:	f89b 7005 	ldrb.w	r7, [fp, #5]
 80049b2:	f89b e008 	ldrb.w	lr, [fp, #8]
 80049b6:	f89b c009 	ldrb.w	ip, [fp, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049ba:	9c02      	ldr	r4, [sp, #8]
		presetName[i] = buffer[i];
 80049bc:	f89b 6006 	ldrb.w	r6, [fp, #6]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049c0:	554c      	strb	r4, [r1, r5]
		presetName[i] = buffer[i];
 80049c2:	7058      	strb	r0, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049c4:	7050      	strb	r0, [r2, #1]
		presetName[i] = buffer[i];
 80049c6:	f883 a002 	strb.w	sl, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049ca:	f882 a002 	strb.w	sl, [r2, #2]
		presetName[i] = buffer[i];
 80049ce:	f883 9003 	strb.w	r9, [r3, #3]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049d2:	f882 9003 	strb.w	r9, [r2, #3]
		presetName[i] = buffer[i];
 80049d6:	f883 8004 	strb.w	r8, [r3, #4]
 80049da:	715f      	strb	r7, [r3, #5]
 80049dc:	719e      	strb	r6, [r3, #6]
 80049de:	f883 e008 	strb.w	lr, [r3, #8]
 80049e2:	f883 c009 	strb.w	ip, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049e6:	f882 8004 	strb.w	r8, [r2, #4]
 80049ea:	7157      	strb	r7, [r2, #5]
 80049ec:	7196      	strb	r6, [r2, #6]
		presetName[i] = buffer[i];
 80049ee:	9904      	ldr	r1, [sp, #16]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049f0:	9c03      	ldr	r4, [sp, #12]
	}
	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 80049f2:	f89b 000e 	ldrb.w	r0, [fp, #14]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049f6:	71d4      	strb	r4, [r2, #7]
		presetName[i] = buffer[i];
 80049f8:	7299      	strb	r1, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[i];
 80049fa:	f882 e008 	strb.w	lr, [r2, #8]
 80049fe:	f882 c009 	strb.w	ip, [r2, #9]
 8004a02:	7291      	strb	r1, [r2, #10]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 8004a04:	f89b 100f 	ldrb.w	r1, [fp, #15]
 8004a08:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		presetName[i] = buffer[i];
 8004a0c:	f89b 000b 	ldrb.w	r0, [fp, #11]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004a10:	72d0      	strb	r0, [r2, #11]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
 8004a12:	b289      	uxth	r1, r1
		presetName[i] = buffer[i];
 8004a14:	72d8      	strb	r0, [r3, #11]
 8004a16:	f89b 000c 	ldrb.w	r0, [fp, #12]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004a1a:	7310      	strb	r0, [r2, #12]
		presetName[i] = buffer[i];
 8004a1c:	7318      	strb	r0, [r3, #12]
 8004a1e:	f89b 000d 	ldrb.w	r0, [fp, #13]
 8004a22:	7358      	strb	r0, [r3, #13]
	if (paramCount > size)
 8004a24:	9b01      	ldr	r3, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[i];
 8004a26:	7350      	strb	r0, [r2, #13]
	if (paramCount > size)
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	dc0d      	bgt.n	8004a48 <parsePreset+0xfc>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
 8004a2c:	f101 0308 	add.w	r3, r1, #8
	if (paramEndCheck != 0xefef)
 8004a30:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
 8004a34:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 8004a38:	f81b 5013 	ldrb.w	r5, [fp, r3, lsl #1]
 8004a3c:	7853      	ldrb	r3, [r2, #1]
 8004a3e:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	if (paramEndCheck != 0xefef)
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4283      	cmp	r3, r0
 8004a46:	d01b      	beq.n	8004a80 <parsePreset+0x134>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 8004a48:	4a0b      	ldr	r2, [pc, #44]	; (8004a78 <parsePreset+0x12c>)
 8004a4a:	2100      	movs	r1, #0
		audioMasterLevel = 1.0f;
 8004a4c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 8004a50:	6011      	str	r1, [r2, #0]
		audioMasterLevel = 1.0f;
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <parsePreset+0x128>)
 8004a54:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a56:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 8004a58:	b007      	add	sp, #28
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	2000495c 	.word	0x2000495c
 8004a64:	30000000 	.word	0x30000000
 8004a68:	20016c10 	.word	0x20016c10
 8004a6c:	24058d60 	.word	0x24058d60
 8004a70:	00000000 	.word	0x00000000
 8004a74:	20000088 	.word	0x20000088
 8004a78:	20016c24 	.word	0x20016c24
 8004a7c:	30000200 	.word	0x30000200
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004a80:	7893      	ldrb	r3, [r2, #2]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004a82:	f101 050a 	add.w	r5, r1, #10
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004a86:	f892 a003 	ldrb.w	sl, [r2, #3]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004a8a:	006d      	lsls	r5, r5, #1
	if (mappingEndLocation > size)
 8004a8c:	9a01      	ldr	r2, [sp, #4]
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004a8e:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004a92:	b2ad      	uxth	r5, r5
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
 8004a94:	fa1f fa8a 	uxth.w	sl, sl
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
 8004a98:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	9302      	str	r3, [sp, #8]
 8004aa0:	18eb      	adds	r3, r5, r3
	if (mappingEndLocation > size)
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	dccf      	bgt.n	8004a48 <parsePreset+0xfc>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 8004aa8:	eb0b 0003 	add.w	r0, fp, r3
 8004aac:	f81b 2003 	ldrb.w	r2, [fp, r3]
 8004ab0:	7843      	ldrb	r3, [r0, #1]
 8004ab2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 8004ab6:	f64f 62fe 	movw	r2, #65278	; 0xfefe
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d1c3      	bne.n	8004a48 <parsePreset+0xfc>
	for (int i = 0; i < paramCount; i++)
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	f001 80f1 	beq.w	8005ca8 <parsePreset+0x135c>
 8004ac6:	4fcf      	ldr	r7, [pc, #828]	; (8004e04 <parsePreset+0x4b8>)
 8004ac8:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
 8004acc:	f8df c39c 	ldr.w	ip, [pc, #924]	; 8004e6c <parsePreset+0x520>
 8004ad0:	4658      	mov	r0, fp
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	4ecc      	ldr	r6, [pc, #816]	; (8004e08 <parsePreset+0x4bc>)
 8004ad6:	4667      	mov	r7, ip
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004ad8:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8004e0c <parsePreset+0x4c0>
 8004adc:	468c      	mov	ip, r1
 8004ade:	4632      	mov	r2, r6
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	7c04      	ldrb	r4, [r0, #16]
	for (int i = 0; i < paramCount; i++)
 8004ae4:	3002      	adds	r0, #2
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004ae6:	7bc3      	ldrb	r3, [r0, #15]
	for (int i = 0; i < paramCount; i++)
 8004ae8:	4570      	cmp	r0, lr
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004aea:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		params[i].setParam = &blankFunction;
 8004af6:	e9c2 7104 	strd	r7, r1, [r2, #16]
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004afa:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < paramCount; i++)
 8004afe:	f102 021c 	add.w	r2, r2, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8004b02:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
 8004b06:	ed42 7a06 	vstr	s15, [r2, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 8004b0a:	d1ea      	bne.n	8004ae2 <parsePreset+0x196>
 8004b0c:	4661      	mov	r1, ip
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8004b0e:	299a      	cmp	r1, #154	; 0x9a
 8004b10:	f301 80c7 	bgt.w	8005ca2 <parsePreset+0x1356>
 8004b14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004b18:	f8df c350 	ldr.w	ip, [pc, #848]	; 8004e6c <parsePreset+0x520>
 8004b1c:	4cbc      	ldr	r4, [pc, #752]	; (8004e10 <parsePreset+0x4c4>)
			params[i].zeroToOneVal[v] = 0.0f;
 8004b1e:	2200      	movs	r2, #0
 8004b20:	eb06 0381 	add.w	r3, r6, r1, lsl #2
 8004b24:	4fb7      	ldr	r7, [pc, #732]	; (8004e04 <parsePreset+0x4b8>)
 8004b26:	4661      	mov	r1, ip
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
 8004b2c:	e9c3 1704 	strd	r1, r7, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8004b30:	331c      	adds	r3, #28
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	d1f8      	bne.n	8004b28 <parsePreset+0x1dc>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8004b36:	4bb7      	ldr	r3, [pc, #732]	; (8004e14 <parsePreset+0x4c8>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004b38:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 8004b3c:	49b6      	ldr	r1, [pc, #728]	; (8004e18 <parsePreset+0x4cc>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8004b3e:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 8004b42:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 8004b46:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 8004b4a:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 8004b4e:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 8004b52:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 8004b56:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 8004b5a:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 8004b5e:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 8004b62:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 8004b66:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 8004b6a:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8004b6e:	4bab      	ldr	r3, [pc, #684]	; (8004e1c <parsePreset+0x4d0>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8004b70:	4aab      	ldr	r2, [pc, #684]	; (8004e20 <parsePreset+0x4d4>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8004b72:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 8004b76:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 8004b7a:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 8004b7e:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 8004b82:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 8004b86:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8004b8a:	4ba6      	ldr	r3, [pc, #664]	; (8004e24 <parsePreset+0x4d8>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8004b8c:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8004e70 <parsePreset+0x524>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8004b90:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 8004b94:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 8004b98:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8004b9c:	4ba2      	ldr	r3, [pc, #648]	; (8004e28 <parsePreset+0x4dc>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8004b9e:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8004ba2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8004ba6:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 8004baa:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8004bae:	4b9f      	ldr	r3, [pc, #636]	; (8004e2c <parsePreset+0x4e0>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8004bb0:	499f      	ldr	r1, [pc, #636]	; (8004e30 <parsePreset+0x4e4>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8004bb2:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8004bb6:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8004bba:	4b9e      	ldr	r3, [pc, #632]	; (8004e34 <parsePreset+0x4e8>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8004bbc:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 8004bc0:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8004bc4:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 8004bc8:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8004bcc:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 8004bd0:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8004bd4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004bd8:	f6a9 1214 	subw	r2, r9, #2324	; 0x914
 8004bdc:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8004be0:	4a95      	ldr	r2, [pc, #596]	; (8004e38 <parsePreset+0x4ec>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004be2:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8004be6:	f8c9 20cc 	str.w	r2, [r9, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004bea:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004bee:	fef8 7a67 	vrinta.f32	s15, s15
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf6:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004bfa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004bfe:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c00:	4a8e      	ldr	r2, [pc, #568]	; (8004e3c <parsePreset+0x4f0>)
 8004c02:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004c06:	bf88      	it	hi
 8004c08:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c10:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004c14:	fef8 7a67 	vrinta.f32	s15, s15
 8004c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c1c:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004c20:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c24:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c26:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <parsePreset+0x4f4>)
 8004c28:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004c2c:	bf88      	it	hi
 8004c2e:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c36:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004c3a:	fef8 7a67 	vrinta.f32	s15, s15
 8004c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c42:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004c46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c4a:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c4c:	4a7d      	ldr	r2, [pc, #500]	; (8004e44 <parsePreset+0x4f8>)
 8004c4e:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004c52:	bf88      	it	hi
 8004c54:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004c60:	fef8 7a67 	vrinta.f32	s15, s15
 8004c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c68:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004c6c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c70:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c72:	4a75      	ldr	r2, [pc, #468]	; (8004e48 <parsePreset+0x4fc>)
 8004c74:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004c78:	bf88      	it	hi
 8004c7a:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c82:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004c86:	fef8 7a67 	vrinta.f32	s15, s15
 8004c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8e:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004c92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004c96:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004c98:	4a6c      	ldr	r2, [pc, #432]	; (8004e4c <parsePreset+0x500>)
 8004c9a:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004c9e:	bf88      	it	hi
 8004ca0:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004cac:	fef8 7a67 	vrinta.f32	s15, s15
 8004cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb4:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004cb8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004cbc:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004cbe:	4a64      	ldr	r2, [pc, #400]	; (8004e50 <parsePreset+0x504>)
 8004cc0:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004cc4:	bf88      	it	hi
 8004cc6:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cce:	fef8 7a67 	vrinta.f32	s15, s15
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004cda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004cde:	2a0b      	cmp	r2, #11
 8004ce0:	d901      	bls.n	8004ce6 <parsePreset+0x39a>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004ce2:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <parsePreset+0x508>)
 8004ce8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004cec:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8004e08 <parsePreset+0x4bc>
 8004cf0:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 8004cf4:	4647      	mov	r7, r8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8004cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cfa:	fef8 7a67 	vrinta.f32	s15, s15
 8004cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d02:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
 8004d06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004d0a:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8004d0c:	bf88      	it	hi
 8004d0e:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 8004d12:	4646      	mov	r6, r8
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004d14:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004d16:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004d18:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
 8004d1c:	4798      	blx	r3
 8004d1e:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 8004d22:	42a7      	cmp	r7, r4
 8004d24:	d1f6      	bne.n	8004d14 <parsePreset+0x3c8>
 8004d26:	4f38      	ldr	r7, [pc, #224]	; (8004e08 <parsePreset+0x4bc>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004d28:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004d2a:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8004d2c:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
 8004d30:	4798      	blx	r3
 8004d32:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8004d36:	42a7      	cmp	r7, r4
 8004d38:	d1f6      	bne.n	8004d28 <parsePreset+0x3dc>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d3a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004d3e:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
 8004d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d46:	fef8 7a67 	vrinta.f32	s15, s15
 8004d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d4e:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004d52:	2b06      	cmp	r3, #6
 8004d54:	d80b      	bhi.n	8004d6e <parsePreset+0x422>
 8004d56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d5a:	0007      	.short	0x0007
 8004d5c:	06e306e8 	.word	0x06e306e8
 8004d60:	06d906de 	.word	0x06d906de
 8004d64:	06cf06d4 	.word	0x06cf06d4
				  shapeTick[i] = &sawSquareTick;
 8004d68:	4b3b      	ldr	r3, [pc, #236]	; (8004e58 <parsePreset+0x50c>)
 8004d6a:	4a3c      	ldr	r2, [pc, #240]	; (8004e5c <parsePreset+0x510>)
 8004d6c:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004d6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d72:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <parsePreset+0x514>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004d74:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d78:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004d7c:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d80:	edd3 7a00 	vldr	s15, [r3]
 8004d84:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d8c:	fef8 7a67 	vrinta.f32	s15, s15
 8004d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 8004d94:	bfcc      	ite	gt
 8004d96:	2201      	movgt	r2, #1
 8004d98:	2200      	movle	r2, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004d9a:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004d9e:	2b06      	cmp	r3, #6
 8004da0:	d80b      	bhi.n	8004dba <parsePreset+0x46e>
 8004da2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004da6:	0007      	.short	0x0007
 8004da8:	069f06a4 	.word	0x069f06a4
 8004dac:	0695069a 	.word	0x0695069a
 8004db0:	068b0690 	.word	0x068b0690
				  shapeTick[i] = &sawSquareTick;
 8004db4:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <parsePreset+0x50c>)
 8004db6:	4929      	ldr	r1, [pc, #164]	; (8004e5c <parsePreset+0x510>)
 8004db8:	6059      	str	r1, [r3, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004dba:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <parsePreset+0x518>)
 8004dbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004dc0:	ed93 7a00 	vldr	s14, [r3]
 8004dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dcc:	dd01      	ble.n	8004dd2 <parsePreset+0x486>
			enabledCount++;
 8004dce:	3201      	adds	r2, #1
 8004dd0:	b2d2      	uxtb	r2, r2
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8004dd2:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <parsePreset+0x51c>)
 8004dd4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8004dd8:	edd3 7a00 	vldr	s15, [r3]
 8004ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de0:	fef8 7a67 	vrinta.f32	s15, s15
 8004de4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de8:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d844      	bhi.n	8004e7a <parsePreset+0x52e>
 8004df0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004df4:	065f0040 	.word	0x065f0040
 8004df8:	0655065a 	.word	0x0655065a
 8004dfc:	064b0650 	.word	0x064b0650
 8004e00:	0646      	.short	0x0646
 8004e02:	bf00      	nop
 8004e04:	080041f1 	.word	0x080041f1
 8004e08:	20015b1c 	.word	0x20015b1c
 8004e0c:	377ffff6 	.word	0x377ffff6
 8004e10:	20016c10 	.word	0x20016c10
 8004e14:	08004431 	.word	0x08004431
 8004e18:	08004341 	.word	0x08004341
 8004e1c:	08004175 	.word	0x08004175
 8004e20:	080044b9 	.word	0x080044b9
 8004e24:	0800418d 	.word	0x0800418d
 8004e28:	080041a9 	.word	0x080041a9
 8004e2c:	080041c5 	.word	0x080041c5
 8004e30:	08004371 	.word	0x08004371
 8004e34:	08004395 	.word	0x08004395
 8004e38:	080041d5 	.word	0x080041d5
 8004e3c:	2001620c 	.word	0x2001620c
 8004e40:	200162e8 	.word	0x200162e8
 8004e44:	200162ec 	.word	0x200162ec
 8004e48:	200163c8 	.word	0x200163c8
 8004e4c:	200163cc 	.word	0x200163cc
 8004e50:	200164a8 	.word	0x200164a8
 8004e54:	200164ac 	.word	0x200164ac
 8004e58:	20004a20 	.word	0x20004a20
 8004e5c:	08000c75 	.word	0x08000c75
 8004e60:	20016064 	.word	0x20016064
 8004e64:	20015f30 	.word	0x20015f30
 8004e68:	200161d0 	.word	0x200161d0
 8004e6c:	0800432d 	.word	0x0800432d
 8004e70:	20016b1c 	.word	0x20016b1c
				  shapeTick[i] = &sawSquareTick;
 8004e74:	4b84      	ldr	r3, [pc, #528]	; (8005088 <parsePreset+0x73c>)
 8004e76:	4985      	ldr	r1, [pc, #532]	; (800508c <parsePreset+0x740>)
 8004e78:	6099      	str	r1, [r3, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8004e7a:	4b85      	ldr	r3, [pc, #532]	; (8005090 <parsePreset+0x744>)
 8004e7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004e80:	ed93 7a00 	vldr	s14, [r3]
 8004e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8c:	dd01      	ble.n	8004e92 <parsePreset+0x546>
			enabledCount++;
 8004e8e:	3201      	adds	r2, #1
 8004e90:	b2d2      	uxtb	r2, r2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8004e92:	4b80      	ldr	r3, [pc, #512]	; (8005094 <parsePreset+0x748>)
 8004e94:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004e98:	4f7f      	ldr	r7, [pc, #508]	; (8005098 <parsePreset+0x74c>)
 8004e9a:	edd3 7a00 	vldr	s15, [r3]
	oscAmpMult = oscAmpMultArray[enabledCount];
 8004e9e:	4b7f      	ldr	r3, [pc, #508]	; (800509c <parsePreset+0x750>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8004ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 8004ea4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8004ea8:	fef8 7a67 	vrinta.f32	s15, s15
 8004eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	4a7b      	ldr	r2, [pc, #492]	; (80050a0 <parsePreset+0x754>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8004eb4:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8004eb8:	6011      	str	r1, [r2, #0]
		switch (filterType)
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d811      	bhi.n	8004ee2 <parsePreset+0x596>
 8004ebe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004ec2:	0009      	.short	0x0009
 8004ec4:	066f0678 	.word	0x066f0678
 8004ec8:	065d0666 	.word	0x065d0666
 8004ecc:	064b0654 	.word	0x064b0654
 8004ed0:	06390642 	.word	0x06390642
				  filterTick[i] = &lowpassTick;
 8004ed4:	4b73      	ldr	r3, [pc, #460]	; (80050a4 <parsePreset+0x758>)
 8004ed6:	4a74      	ldr	r2, [pc, #464]	; (80050a8 <parsePreset+0x75c>)
 8004ed8:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 8004eda:	4b74      	ldr	r3, [pc, #464]	; (80050ac <parsePreset+0x760>)
 8004edc:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 8004ede:	4b74      	ldr	r3, [pc, #464]	; (80050b0 <parsePreset+0x764>)
 8004ee0:	607b      	str	r3, [r7, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8004ee2:	4b74      	ldr	r3, [pc, #464]	; (80050b4 <parsePreset+0x768>)
 8004ee4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004ee8:	edd3 7a00 	vldr	s15, [r3]
 8004eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ef0:	fef8 7a67 	vrinta.f32	s15, s15
 8004ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ef8:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d811      	bhi.n	8004f24 <parsePreset+0x5d8>
 8004f00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f04:	069f0009 	.word	0x069f0009
 8004f08:	068d0696 	.word	0x068d0696
 8004f0c:	067b0684 	.word	0x067b0684
 8004f10:	06690672 	.word	0x06690672
 8004f14:	0660      	.short	0x0660
				  filterTick[i] = &lowpassTick;
 8004f16:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <parsePreset+0x758>)
 8004f18:	4a63      	ldr	r2, [pc, #396]	; (80050a8 <parsePreset+0x75c>)
 8004f1a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 8004f1c:	4b63      	ldr	r3, [pc, #396]	; (80050ac <parsePreset+0x760>)
 8004f1e:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 8004f20:	4b63      	ldr	r3, [pc, #396]	; (80050b0 <parsePreset+0x764>)
 8004f22:	60fb      	str	r3, [r7, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8004f24:	4b64      	ldr	r3, [pc, #400]	; (80050b8 <parsePreset+0x76c>)
 8004f26:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004f2a:	edd3 7a00 	vldr	s15, [r3]
 8004f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f32:	fef8 7a67 	vrinta.f32	s15, s15
 8004f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3a:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	f200 872d 	bhi.w	8005d9e <parsePreset+0x1452>
 8004f44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f48:	05840590 	.word	0x05840590
 8004f4c:	051a0526 	.word	0x051a0526
 8004f50:	0006050e 	.word	0x0006050e
				lfoShapeTick[i] = &lfoPulseTick;
 8004f54:	4b59      	ldr	r3, [pc, #356]	; (80050bc <parsePreset+0x770>)
 8004f56:	495a      	ldr	r1, [pc, #360]	; (80050c0 <parsePreset+0x774>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8004f58:	4a5a      	ldr	r2, [pc, #360]	; (80050c4 <parsePreset+0x778>)
				lfoShapeTick[i] = &lfoPulseTick;
 8004f5a:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8004f5c:	4b5a      	ldr	r3, [pc, #360]	; (80050c8 <parsePreset+0x77c>)
 8004f5e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8004f60:	4b5a      	ldr	r3, [pc, #360]	; (80050cc <parsePreset+0x780>)
 8004f62:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8004f64:	4b5a      	ldr	r3, [pc, #360]	; (80050d0 <parsePreset+0x784>)
 8004f66:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <parsePreset+0x788>)
 8004f6a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004f6e:	edd3 7a00 	vldr	s15, [r3]
 8004f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f76:	fef8 7a67 	vrinta.f32	s15, s15
 8004f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f7e:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	d810      	bhi.n	8004fa8 <parsePreset+0x65c>
 8004f86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f8a:	04e2      	.short	0x04e2
 8004f8c:	04cc04d7 	.word	0x04cc04d7
 8004f90:	04ab04c1 	.word	0x04ab04c1
 8004f94:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 8004f96:	4b49      	ldr	r3, [pc, #292]	; (80050bc <parsePreset+0x770>)
 8004f98:	4949      	ldr	r1, [pc, #292]	; (80050c0 <parsePreset+0x774>)
 8004f9a:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	; (80050c8 <parsePreset+0x77c>)
 8004f9e:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8004fa0:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <parsePreset+0x780>)
 8004fa2:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <parsePreset+0x784>)
 8004fa6:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <parsePreset+0x78c>)
 8004faa:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004fae:	edd3 7a00 	vldr	s15, [r3]
 8004fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fb6:	fef8 7a67 	vrinta.f32	s15, s15
 8004fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fbe:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d810      	bhi.n	8004fe8 <parsePreset+0x69c>
 8004fc6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004fca:	0496      	.short	0x0496
 8004fcc:	04750480 	.word	0x04750480
 8004fd0:	0449046a 	.word	0x0449046a
 8004fd4:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 8004fd6:	4b39      	ldr	r3, [pc, #228]	; (80050bc <parsePreset+0x770>)
 8004fd8:	4939      	ldr	r1, [pc, #228]	; (80050c0 <parsePreset+0x774>)
 8004fda:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <parsePreset+0x77c>)
 8004fde:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8004fe0:	4b3a      	ldr	r3, [pc, #232]	; (80050cc <parsePreset+0x780>)
 8004fe2:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <parsePreset+0x784>)
 8004fe6:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8004fe8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004fec:	edd9 7a1c 	vldr	s15, [r9, #112]	; 0x70
 8004ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff4:	fef8 7a67 	vrinta.f32	s15, s15
 8004ff8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ffc:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8005000:	2b05      	cmp	r3, #5
 8005002:	d810      	bhi.n	8005026 <parsePreset+0x6da>
 8005004:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005008:	04350440 	.word	0x04350440
 800500c:	0414041f 	.word	0x0414041f
 8005010:	00060409 	.word	0x00060409
				lfoShapeTick[i] = &lfoPulseTick;
 8005014:	4b29      	ldr	r3, [pc, #164]	; (80050bc <parsePreset+0x770>)
 8005016:	492a      	ldr	r1, [pc, #168]	; (80050c0 <parsePreset+0x774>)
 8005018:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800501a:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <parsePreset+0x77c>)
 800501c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 800501e:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <parsePreset+0x780>)
 8005020:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <parsePreset+0x784>)
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 8005026:	2304      	movs	r3, #4
 8005028:	492c      	ldr	r1, [pc, #176]	; (80050dc <parsePreset+0x790>)
 800502a:	482d      	ldr	r0, [pc, #180]	; (80050e0 <parsePreset+0x794>)
 800502c:	9303      	str	r3, [sp, #12]
 800502e:	460b      	mov	r3, r1
 8005030:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80050e4 <parsePreset+0x798>
				  effectSetters[i].setParam2 = &blankFunction;;
 8005034:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 80050e8 <parsePreset+0x79c>
				  effectTick[i] = FXVZhighshelfTick;
 8005038:	9204      	str	r2, [sp, #16]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 800503a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800503e:	eddc 7a00 	vldr	s15, [ip]
 8005042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005046:	fef8 7a67 	vrinta.f32	s15, s15
 800504a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800504e:	edcd 7a01 	vstr	s15, [sp, #4]
		switch (effectType)
 8005052:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8005056:	2c13      	cmp	r4, #19
 8005058:	d852      	bhi.n	8005100 <parsePreset+0x7b4>
 800505a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800505e:	03d1      	.short	0x03d1
 8005060:	03b703c4 	.word	0x03b703c4
 8005064:	03af03b3 	.word	0x03af03b3
 8005068:	02e303a2 	.word	0x02e303a2
 800506c:	02ce02d6 	.word	0x02ce02d6
 8005070:	02b402c1 	.word	0x02b402c1
 8005074:	029e02a9 	.word	0x029e02a9
 8005078:	038b0293 	.word	0x038b0293
 800507c:	02fb0306 	.word	0x02fb0306
 8005080:	039602f0 	.word	0x039602f0
 8005084:	0047      	.short	0x0047
 8005086:	bf00      	nop
 8005088:	20004a20 	.word	0x20004a20
 800508c:	08000c75 	.word	0x08000c75
 8005090:	2001609c 	.word	0x2001609c
 8005094:	200165a4 	.word	0x200165a4
 8005098:	20015034 	.word	0x20015034
 800509c:	2000006c 	.word	0x2000006c
 80050a0:	20000068 	.word	0x20000068
 80050a4:	2000448c 	.word	0x2000448c
 80050a8:	080010f9 	.word	0x080010f9
 80050ac:	080013d1 	.word	0x080013d1
 80050b0:	08001485 	.word	0x08001485
 80050b4:	2001664c 	.word	0x2001664c
 80050b8:	200169e8 	.word	0x200169e8
 80050bc:	20004620 	.word	0x20004620
 80050c0:	08001989 	.word	0x08001989
 80050c4:	20015160 	.word	0x20015160
 80050c8:	08001a09 	.word	0x08001a09
 80050cc:	08001ac9 	.word	0x08001ac9
 80050d0:	08001a81 	.word	0x08001a81
 80050d4:	20016a74 	.word	0x20016a74
 80050d8:	20016b00 	.word	0x20016b00
 80050dc:	20012fe4 	.word	0x20012fe4
 80050e0:	2000443c 	.word	0x2000443c
 80050e4:	20016208 	.word	0x20016208
 80050e8:	080041f1 	.word	0x080041f1
				  effectTick[i] = &FXLadderLowpassTick;
 80050ec:	4c72      	ldr	r4, [pc, #456]	; (80052b8 <parsePreset+0x96c>)
 80050ee:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 80050f0:	4c72      	ldr	r4, [pc, #456]	; (80052bc <parsePreset+0x970>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80050f2:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 80050f6:	e9c3 4e00 	strd	r4, lr, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 80050fa:	4c71      	ldr	r4, [pc, #452]	; (80052c0 <parsePreset+0x974>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80050fc:	e9c3 4e02 	strd	r4, lr, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 8005100:	3004      	adds	r0, #4
 8005102:	4c70      	ldr	r4, [pc, #448]	; (80052c4 <parsePreset+0x978>)
 8005104:	f10c 0ce0 	add.w	ip, ip, #224	; 0xe0
 8005108:	3314      	adds	r3, #20
 800510a:	4284      	cmp	r4, r0
 800510c:	d195      	bne.n	800503a <parsePreset+0x6ee>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 800510e:	4c6e      	ldr	r4, [pc, #440]	; (80052c8 <parsePreset+0x97c>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005110:	4b6e      	ldr	r3, [pc, #440]	; (80052cc <parsePreset+0x980>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 8005112:	f8c6 42d0 	str.w	r4, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 8005116:	f8c6 443c 	str.w	r4, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 800511a:	f8c6 45a8 	str.w	r4, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 800511e:	4c6c      	ldr	r4, [pc, #432]	; (80052d0 <parsePreset+0x984>)
	params[Effect1Mix].setParam = &fxMixSet;
 8005120:	486c      	ldr	r0, [pc, #432]	; (80052d4 <parsePreset+0x988>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8005122:	f8c6 435c 	str.w	r4, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 8005126:	f8c6 44c8 	str.w	r4, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 800512a:	f8c6 4634 	str.w	r4, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 800512e:	680c      	ldr	r4, [r1, #0]
	params[Effect1Mix].setParam = &fxMixSet;
 8005130:	9a04      	ldr	r2, [sp, #16]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8005132:	f8c6 4714 	str.w	r4, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8005136:	684c      	ldr	r4, [r1, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005138:	f8c6 37bc 	str.w	r3, [r6, #1980]	; 0x7bc
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 800513c:	f8c6 4730 	str.w	r4, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8005140:	688c      	ldr	r4, [r1, #8]
	params[Effect1Mix].setParam = &fxMixSet;
 8005142:	f8c6 07a0 	str.w	r0, [r6, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8005146:	f8c6 474c 	str.w	r4, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 800514a:	68cc      	ldr	r4, [r1, #12]
 800514c:	f8c6 4768 	str.w	r4, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8005150:	690c      	ldr	r4, [r1, #16]
 8005152:	f8c6 4784 	str.w	r4, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 8005156:	694c      	ldr	r4, [r1, #20]
 8005158:	f8c6 47f4 	str.w	r4, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 800515c:	698c      	ldr	r4, [r1, #24]
 800515e:	f8c6 4810 	str.w	r4, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 8005162:	69cc      	ldr	r4, [r1, #28]
 8005164:	f8c6 482c 	str.w	r4, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8005168:	4c5b      	ldr	r4, [pc, #364]	; (80052d8 <parsePreset+0x98c>)
 800516a:	f8c6 4228 	str.w	r4, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 800516e:	4c5b      	ldr	r4, [pc, #364]	; (80052dc <parsePreset+0x990>)
 8005170:	f8c6 4260 	str.w	r4, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 8005174:	4c5a      	ldr	r4, [pc, #360]	; (80052e0 <parsePreset+0x994>)
 8005176:	f8c6 4244 	str.w	r4, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
 800517a:	4c5a      	ldr	r4, [pc, #360]	; (80052e4 <parsePreset+0x998>)
 800517c:	64f4      	str	r4, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 800517e:	4c5a      	ldr	r4, [pc, #360]	; (80052e8 <parsePreset+0x99c>)
 8005180:	f8c6 41d4 	str.w	r4, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 8005184:	4c59      	ldr	r4, [pc, #356]	; (80052ec <parsePreset+0x9a0>)
 8005186:	f8c6 41f0 	str.w	r4, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 800518a:	4c59      	ldr	r4, [pc, #356]	; (80052f0 <parsePreset+0x9a4>)
 800518c:	f8c9 40d0 	str.w	r4, [r9, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8005190:	6a0c      	ldr	r4, [r1, #32]
	params[Effect2PostGain].setParam = &fxPostGainSet;
 8005192:	f8c6 389c 	str.w	r3, [r6, #2204]	; 0x89c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 8005196:	f8c6 397c 	str.w	r3, [r6, #2428]	; 0x97c
	params[Effect4PostGain].setParam = &fxPostGainSet;
 800519a:	f8c6 3a5c 	str.w	r3, [r6, #2652]	; 0xa5c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 800519e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 80051a0:	f8c6 4848 	str.w	r4, [r6, #2120]	; 0x848
	params[OutputAmp].setParam = &setAmp;
 80051a4:	2401      	movs	r4, #1
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 80051a6:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80051aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	params[Effect2Mix].setParam = &fxMixSet;
 80051ac:	f8c6 0880 	str.w	r0, [r6, #2176]	; 0x880
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 80051b0:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80051b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	params[Effect3Mix].setParam = &fxMixSet;
 80051b6:	f8c6 0960 	str.w	r0, [r6, #2400]	; 0x960
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80051ba:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80051be:	6b0b      	ldr	r3, [r1, #48]	; 0x30
	params[Effect4Mix].setParam = &fxMixSet;
 80051c0:	f8c6 0a40 	str.w	r0, [r6, #2624]	; 0xa40
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80051c4:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80051c8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80051ca:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 80051ce:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 80051d0:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 80051d4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80051d6:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 80051da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051dc:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 80051e0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80051e2:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 80051e6:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80051e8:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80051ec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80051ee:	4941      	ldr	r1, [pc, #260]	; (80052f4 <parsePreset+0x9a8>)
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80051f0:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80051fa:	687b      	ldr	r3, [r7, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80051fc:	f8c6 1be4 	str.w	r1, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 8005200:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 8005204:	68bb      	ldr	r3, [r7, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 8005206:	f8c6 1c8c 	str.w	r1, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 800520a:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 800520e:	68fb      	ldr	r3, [r7, #12]
		params[i].objectNumber = 0;
 8005210:	2700      	movs	r7, #0
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 8005212:	f8c6 1d34 	str.w	r1, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 8005216:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 800521a:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <parsePreset+0x9ac>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 800521c:	f8c6 1ddc 	str.w	r1, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8005220:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 8005224:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 8005228:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 800522c:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <parsePreset+0x9b0>)
 8005232:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 8005236:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 800523a:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 800523e:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 8005242:	4b2f      	ldr	r3, [pc, #188]	; (8005300 <parsePreset+0x9b4>)
 8005244:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 8005248:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 800524c:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8005250:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <parsePreset+0x9b8>)
 8005256:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 800525a:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 800525e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 8005262:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 8005266:	6813      	ldr	r3, [r2, #0]
 8005268:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 800526c:	68d3      	ldr	r3, [r2, #12]
 800526e:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 8005272:	6993      	ldr	r3, [r2, #24]
 8005274:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 8005278:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800527a:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 800527e:	6853      	ldr	r3, [r2, #4]
 8005280:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 8005284:	6913      	ldr	r3, [r2, #16]
 8005286:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 800528a:	69d3      	ldr	r3, [r2, #28]
 800528c:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 8005290:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005292:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 8005296:	6893      	ldr	r3, [r2, #8]
 8005298:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 800529c:	6953      	ldr	r3, [r2, #20]
 800529e:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 80052a2:	6a13      	ldr	r3, [r2, #32]
 80052a4:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 80052a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80052aa:	f8c9 3060 	str.w	r3, [r9, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 80052ae:	4b16      	ldr	r3, [pc, #88]	; (8005308 <parsePreset+0x9bc>)
 80052b0:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80052b4:	46a1      	mov	r9, r4
 80052b6:	e02c      	b.n	8005312 <parsePreset+0x9c6>
 80052b8:	0800247d 	.word	0x0800247d
 80052bc:	080026f1 	.word	0x080026f1
 80052c0:	080028ad 	.word	0x080028ad
 80052c4:	2000444c 	.word	0x2000444c
 80052c8:	08001315 	.word	0x08001315
 80052cc:	08001ead 	.word	0x08001ead
 80052d0:	0800136d 	.word	0x0800136d
 80052d4:	08001e99 	.word	0x08001e99
 80052d8:	080028c1 	.word	0x080028c1
 80052dc:	0800293d 	.word	0x0800293d
 80052e0:	0800290d 	.word	0x0800290d
 80052e4:	080016f9 	.word	0x080016f9
 80052e8:	08001709 	.word	0x08001709
 80052ec:	08001715 	.word	0x08001715
 80052f0:	0800172d 	.word	0x0800172d
 80052f4:	08001641 	.word	0x08001641
 80052f8:	08001661 	.word	0x08001661
 80052fc:	08001681 	.word	0x08001681
 8005300:	08001695 	.word	0x08001695
 8005304:	080016b5 	.word	0x080016b5
 8005308:	080016e9 	.word	0x080016e9
 800530c:	f108 081c 	add.w	r8, r8, #28
 8005310:	3401      	adds	r4, #1
		if ((i >= Osc1) && (i < Osc2))
 8005312:	f1a4 0319 	sub.w	r3, r4, #25
		params[i].objectNumber = 0;
 8005316:	f888 7018 	strb.w	r7, [r8, #24]
		if ((i >= Osc1) && (i < Osc2))
 800531a:	2b0c      	cmp	r3, #12
 800531c:	d94b      	bls.n	80053b6 <parsePreset+0xa6a>
		else if ((i >= Osc2) && (i < Osc3))
 800531e:	f1a4 0326 	sub.w	r3, r4, #38	; 0x26
 8005322:	2b0c      	cmp	r3, #12
 8005324:	f240 8538 	bls.w	8005d98 <parsePreset+0x144c>
		else if ((i >= Osc3) && (i < Effect1FXType))
 8005328:	f1a4 0333 	sub.w	r3, r4, #51	; 0x33
 800532c:	2b0c      	cmp	r3, #12
 800532e:	f240 852f 	bls.w	8005d90 <parsePreset+0x1444>
		else if ((i >= Filter1) && (i < Filter2))
 8005332:	f1a4 0360 	sub.w	r3, r4, #96	; 0x60
 8005336:	2b05      	cmp	r3, #5
 8005338:	d93d      	bls.n	80053b6 <parsePreset+0xa6a>
		else if ((i >= Filter2) && (i < Envelope1Attack))
 800533a:	f1a4 0366 	sub.w	r3, r4, #102	; 0x66
 800533e:	2b06      	cmp	r3, #6
 8005340:	f240 852a 	bls.w	8005d98 <parsePreset+0x144c>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
 8005344:	f1a4 036d 	sub.w	r3, r4, #109	; 0x6d
 8005348:	2b05      	cmp	r3, #5
 800534a:	d934      	bls.n	80053b6 <parsePreset+0xa6a>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
 800534c:	f1a4 0373 	sub.w	r3, r4, #115	; 0x73
 8005350:	2b05      	cmp	r3, #5
 8005352:	f240 8521 	bls.w	8005d98 <parsePreset+0x144c>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
 8005356:	f1a4 0379 	sub.w	r3, r4, #121	; 0x79
 800535a:	2b05      	cmp	r3, #5
 800535c:	f240 8518 	bls.w	8005d90 <parsePreset+0x1444>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
 8005360:	f1a4 037f 	sub.w	r3, r4, #127	; 0x7f
 8005364:	2b05      	cmp	r3, #5
 8005366:	f240 84fd 	bls.w	8005d64 <parsePreset+0x1418>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
 800536a:	f1a4 0385 	sub.w	r3, r4, #133	; 0x85
 800536e:	2b04      	cmp	r3, #4
 8005370:	d921      	bls.n	80053b6 <parsePreset+0xa6a>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
 8005372:	f1a4 038a 	sub.w	r3, r4, #138	; 0x8a
 8005376:	2b04      	cmp	r3, #4
 8005378:	f240 850e 	bls.w	8005d98 <parsePreset+0x144c>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
 800537c:	f1a4 038f 	sub.w	r3, r4, #143	; 0x8f
 8005380:	2b04      	cmp	r3, #4
 8005382:	f240 8505 	bls.w	8005d90 <parsePreset+0x1444>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
 8005386:	f1a4 0394 	sub.w	r3, r4, #148	; 0x94
 800538a:	2b04      	cmp	r3, #4
 800538c:	f240 84ea 	bls.w	8005d64 <parsePreset+0x1418>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
 8005390:	f1a4 0340 	sub.w	r3, r4, #64	; 0x40
 8005394:	2b07      	cmp	r3, #7
 8005396:	d90e      	bls.n	80053b6 <parsePreset+0xa6a>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
 8005398:	f1a4 0348 	sub.w	r3, r4, #72	; 0x48
 800539c:	2b07      	cmp	r3, #7
 800539e:	f240 84fb 	bls.w	8005d98 <parsePreset+0x144c>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
 80053a2:	f1a4 0350 	sub.w	r3, r4, #80	; 0x50
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	f240 84f2 	bls.w	8005d90 <parsePreset+0x1444>
		else if ((i >= Effect4FXType) && (i < Filter1))
 80053ac:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
 80053b0:	2b07      	cmp	r3, #7
 80053b2:	f240 84d7 	bls.w	8005d64 <parsePreset+0x1418>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80053b6:	2100      	movs	r1, #0
 80053b8:	ed98 0a02 	vldr	s0, [r8, #8]
 80053bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4798      	blx	r3
 80053c4:	ed98 0a03 	vldr	s0, [r8, #12]
 80053c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80053cc:	2101      	movs	r1, #1
 80053ce:	f898 0018 	ldrb.w	r0, [r8, #24]
 80053d2:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80053d4:	2c9b      	cmp	r4, #155	; 0x9b
 80053d6:	d199      	bne.n	800530c <parsePreset+0x9c0>
	numMappings = 0;
 80053d8:	2200      	movs	r2, #0
 80053da:	4ba9      	ldr	r3, [pc, #676]	; (8005680 <parsePreset+0xd34>)
 80053dc:	f8df e38c 	ldr.w	lr, [pc, #908]	; 800576c <parsePreset+0xe20>
		mappings[i].destNumber = 255;
 80053e0:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
 80053e2:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 80053e4:	4ba7      	ldr	r3, [pc, #668]	; (8005684 <parsePreset+0xd38>)
 80053e6:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 80053ee:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80053f0:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 80053f2:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80053f6:	4283      	cmp	r3, r0
 80053f8:	d1f9      	bne.n	80053ee <parsePreset+0xaa2>
	for (int i = 0; i < mappingCount; i++)
 80053fa:	f1ba 0f00 	cmp.w	sl, #0
 80053fe:	f000 8091 	beq.w	8005524 <parsePreset+0xbd8>
 8005402:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
 8005404:	f04f 0a01 	mov.w	sl, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005408:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005688 <parsePreset+0xd3c>
			mappings[whichMapping].destNumber = destNumber;
 800540c:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8005410:	442b      	add	r3, r5
 8005412:	f8df 935c 	ldr.w	r9, [pc, #860]	; 8005770 <parsePreset+0xe24>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005416:	9602      	str	r6, [sp, #8]
 8005418:	b29b      	uxth	r3, r3
 800541a:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < mappingCount; i++)
 800541c:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800541e:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8005420:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 8005422:	eb0b 0205 	add.w	r2, fp, r5
		uint8_t foundOne = 0;
 8005426:	461c      	mov	r4, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8005428:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 800542a:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 800542c:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 800542e:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
 8005430:	7811      	ldrb	r1, [r2, #0]
 8005432:	4281      	cmp	r1, r0
 8005434:	d103      	bne.n	800543e <parsePreset+0xaf2>
				whichHook = mappings[j].numHooks;
 8005436:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
 800543a:	b2de      	uxtb	r6, r3
				foundOne = 1;
 800543c:	2401      	movs	r4, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 800543e:	3301      	adds	r3, #1
 8005440:	324c      	adds	r2, #76	; 0x4c
 8005442:	2b20      	cmp	r3, #32
 8005444:	d1f4      	bne.n	8005430 <parsePreset+0xae4>
		if (foundOne == 0)
 8005446:	2c00      	cmp	r4, #0
 8005448:	f000 8404 	beq.w	8005c54 <parsePreset+0x1308>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 800544c:	463c      	mov	r4, r7
		int source = buffer[bufferIndex];
 800544e:	f81b 2005 	ldrb.w	r2, [fp, r5]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005452:	fb08 f306 	mul.w	r3, r8, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005456:	1c60      	adds	r0, r4, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005458:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 800545c:	eb09 07c2 	add.w	r7, r9, r2, lsl #3
 8005460:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8005464:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005466:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800546a:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 800546e:	4421      	add	r1, r4
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005470:	4473      	add	r3, lr
 8005472:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8005474:	bfcc      	ite	gt
 8005476:	4653      	movgt	r3, sl
 8005478:	2300      	movle	r3, #0
 800547a:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 800547e:	eb09 03c2 	add.w	r3, r9, r2, lsl #3
 8005482:	00e1      	lsls	r1, r4, #3
 8005484:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005488:	f1a2 0318 	sub.w	r3, r2, #24
 800548c:	2b03      	cmp	r3, #3
 800548e:	d803      	bhi.n	8005498 <parsePreset+0xb4c>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 8005490:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <parsePreset+0xd38>)
 8005492:	441a      	add	r2, r3
 8005494:	f802 ac18 	strb.w	sl, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 8005498:	eb0b 0305 	add.w	r3, fp, r5
 800549c:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 800549e:	2bff      	cmp	r3, #255	; 0xff
 80054a0:	f000 83eb 	beq.w	8005c7a <parsePreset+0x132e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80054a4:	fb08 f006 	mul.w	r0, r8, r6
 80054a8:	1d22      	adds	r2, r4, #4
 80054aa:	eb09 07c3 	add.w	r7, r9, r3, lsl #3
 80054ae:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80054b2:	4472      	add	r2, lr
 80054b4:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80054b6:	f1a3 0218 	sub.w	r2, r3, #24
 80054ba:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80054bc:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80054c0:	f200 83e7 	bhi.w	8005c92 <parsePreset+0x1346>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80054c4:	2004      	movs	r0, #4
 80054c6:	2108      	movs	r1, #8
 80054c8:	4472      	add	r2, lr
 80054ca:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80054ce:	486d      	ldr	r0, [pc, #436]	; (8005684 <parsePreset+0xd38>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80054d0:	4449      	add	r1, r9
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80054d2:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80054d4:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 80054d6:	f803 ac18 	strb.w	sl, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80054da:	eb0b 0205 	add.w	r2, fp, r5
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80054de:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
		bufferIndex += 5;
 80054e2:	3505      	adds	r5, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80054e4:	78d1      	ldrb	r1, [r2, #3]
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80054e6:	eb06 0747 	add.w	r7, r6, r7, lsl #1
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80054ea:	7913      	ldrb	r3, [r2, #4]
		mappings[whichMapping].numHooks++;
 80054ec:	fb08 e606 	mla	r6, r8, r6, lr
		bufferIndex += 5;
 80054f0:	b2ad      	uxth	r5, r5
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80054f2:	443c      	add	r4, r7
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 80054f4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
 80054f8:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 80054fc:	b21b      	sxth	r3, r3
 80054fe:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].numHooks++;
 8005502:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].numHooks++;
 800550a:	3301      	adds	r3, #1
 800550c:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 8005510:	9b01      	ldr	r3, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005512:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < mappingCount; i++)
 8005516:	429d      	cmp	r5, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005518:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
	for (int i = 0; i < mappingCount; i++)
 800551c:	d180      	bne.n	8005420 <parsePreset+0xad4>
 800551e:	4b58      	ldr	r3, [pc, #352]	; (8005680 <parsePreset+0xd34>)
 8005520:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <parsePreset+0xd40>)
	presetWaitingToParse = 0;
 8005526:	2000      	movs	r0, #0
	audioMasterLevel = 1.0f;
 8005528:	4959      	ldr	r1, [pc, #356]	; (8005690 <parsePreset+0xd44>)
	if (params[Filter1].zeroToOneVal[0])
 800552a:	461a      	mov	r2, r3
 800552c:	ed93 7a00 	vldr	s14, [r3]
	if (params[Filter2].zeroToOneVal[0])
 8005530:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
	audioMasterLevel = 1.0f;
 8005534:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	if (params[Filter1].zeroToOneVal[0])
 8005538:	eeb5 7a40 	vcmp.f32	s14, #0.0
	audioMasterLevel = 1.0f;
 800553c:	600b      	str	r3, [r1, #0]
	presetWaitingToParse = 0;
 800553e:	4955      	ldr	r1, [pc, #340]	; (8005694 <parsePreset+0xd48>)
	if (params[Filter1].zeroToOneVal[0])
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscToTick = NUM_OSC;
 8005544:	4b54      	ldr	r3, [pc, #336]	; (8005698 <parsePreset+0xd4c>)
	presetWaitingToParse = 0;
 8005546:	6008      	str	r0, [r1, #0]
	if (params[Filter2].zeroToOneVal[0])
 8005548:	eef5 7a40 	vcmp.f32	s15, #0.0
	currentActivePreset = presetNumber;
 800554c:	9805      	ldr	r0, [sp, #20]
 800554e:	4953      	ldr	r1, [pc, #332]	; (800569c <parsePreset+0xd50>)
	uint8_t totalFilters = 0;
 8005550:	bf14      	ite	ne
 8005552:	2201      	movne	r2, #1
 8005554:	2200      	moveq	r2, #0
	if (params[Filter2].zeroToOneVal[0])
 8005556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 800555a:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 800555c:	f04f 0103 	mov.w	r1, #3
	numEffectToTick = totalEffects;
 8005560:	9803      	ldr	r0, [sp, #12]
	oscToTick = NUM_OSC;
 8005562:	7019      	strb	r1, [r3, #0]
	overSampled = 1;
 8005564:	f04f 0301 	mov.w	r3, #1
 8005568:	494d      	ldr	r1, [pc, #308]	; (80056a0 <parsePreset+0xd54>)
		totalFilters++;
 800556a:	bf18      	it	ne
 800556c:	3201      	addne	r2, #1
	overSampled = 1;
 800556e:	700b      	strb	r3, [r1, #0]
	numEffectToTick = totalEffects;
 8005570:	494c      	ldr	r1, [pc, #304]	; (80056a4 <parsePreset+0xd58>)
 8005572:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 8005574:	494c      	ldr	r1, [pc, #304]	; (80056a8 <parsePreset+0xd5c>)
 8005576:	700a      	strb	r2, [r1, #0]
 8005578:	b662      	cpsie	i
	presetReady = 1;
 800557a:	4a4c      	ldr	r2, [pc, #304]	; (80056ac <parsePreset+0xd60>)
 800557c:	6013      	str	r3, [r2, #0]
}
 800557e:	b007      	add	sp, #28
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
 8005584:	4c4a      	ldr	r4, [pc, #296]	; (80056b0 <parsePreset+0xd64>)
				  effectSetters[i].setParam2 = &blankFunction;
 8005586:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 800558a:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 800558c:	4c49      	ldr	r4, [pc, #292]	; (80056b4 <parsePreset+0xd68>)
 800558e:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8005590:	4c49      	ldr	r4, [pc, #292]	; (80056b8 <parsePreset+0xd6c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005592:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8005596:	609c      	str	r4, [r3, #8]
				  break;
 8005598:	e5b2      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &FXhighpassTick;
 800559a:	4c48      	ldr	r4, [pc, #288]	; (80056bc <parsePreset+0xd70>)
				  effectSetters[i].setParam2 = &blankFunction;
 800559c:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 80055a0:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 80055a2:	4c47      	ldr	r4, [pc, #284]	; (80056c0 <parsePreset+0xd74>)
 80055a4:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80055a6:	4c47      	ldr	r4, [pc, #284]	; (80056c4 <parsePreset+0xd78>)
				  effectSetters[i].setParam5 = &blankFunction;
 80055a8:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80055ac:	609c      	str	r4, [r3, #8]
				  break;
 80055ae:	e5a7      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &FXlowpassTick;
 80055b0:	4c45      	ldr	r4, [pc, #276]	; (80056c8 <parsePreset+0xd7c>)
				  effectSetters[i].setParam2 = &blankFunction;
 80055b2:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 80055b6:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 80055b8:	4c44      	ldr	r4, [pc, #272]	; (80056cc <parsePreset+0xd80>)
 80055ba:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80055bc:	4c44      	ldr	r4, [pc, #272]	; (80056d0 <parsePreset+0xd84>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80055be:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 80055c2:	609c      	str	r4, [r3, #8]
				  break;
 80055c4:	e59c      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &wavefolderTick;
 80055c6:	4c43      	ldr	r4, [pc, #268]	; (80056d4 <parsePreset+0xd88>)
 80055c8:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 80055ca:	4c43      	ldr	r4, [pc, #268]	; (80056d8 <parsePreset+0xd8c>)
 80055cc:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80055ce:	4c43      	ldr	r4, [pc, #268]	; (80056dc <parsePreset+0xd90>)
 80055d0:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 80055d2:	4c43      	ldr	r4, [pc, #268]	; (80056e0 <parsePreset+0xd94>)
 80055d4:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80055d6:	4c43      	ldr	r4, [pc, #268]	; (80056e4 <parsePreset+0xd98>)
 80055d8:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 80055da:	4c43      	ldr	r4, [pc, #268]	; (80056e8 <parsePreset+0xd9c>)
 80055dc:	611c      	str	r4, [r3, #16]
				  break;
 80055de:	e58f      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &tiltFilterTick;
 80055e0:	4c42      	ldr	r4, [pc, #264]	; (80056ec <parsePreset+0xda0>)
 80055e2:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &tiltParam1;
 80055e4:	4c42      	ldr	r4, [pc, #264]	; (80056f0 <parsePreset+0xda4>)
 80055e6:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &tiltParam2;
 80055e8:	4c42      	ldr	r4, [pc, #264]	; (80056f4 <parsePreset+0xda8>)
 80055ea:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 80055ec:	4c42      	ldr	r4, [pc, #264]	; (80056f8 <parsePreset+0xdac>)
 80055ee:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 80055f0:	4c42      	ldr	r4, [pc, #264]	; (80056fc <parsePreset+0xdb0>)
 80055f2:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 80055f4:	4c3c      	ldr	r4, [pc, #240]	; (80056e8 <parsePreset+0xd9c>)
 80055f6:	611c      	str	r4, [r3, #16]
				  break;
 80055f8:	e582      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &bcTick;
 80055fa:	4c41      	ldr	r4, [pc, #260]	; (8005700 <parsePreset+0xdb4>)
 80055fc:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80055fe:	4c41      	ldr	r4, [pc, #260]	; (8005704 <parsePreset+0xdb8>)
 8005600:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &param2Linear;
 8005602:	4c41      	ldr	r4, [pc, #260]	; (8005708 <parsePreset+0xdbc>)
 8005604:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 8005606:	4c41      	ldr	r4, [pc, #260]	; (800570c <parsePreset+0xdc0>)
 8005608:	e7e4      	b.n	80055d4 <parsePreset+0xc88>
				  effectTick[i] = &chorusTick;
 800560a:	4c41      	ldr	r4, [pc, #260]	; (8005710 <parsePreset+0xdc4>)
				  effectSetters[i].setParam5 = &blankFunction;
 800560c:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &chorusTick;
 8005610:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &chorusParam1;
 8005612:	4c40      	ldr	r4, [pc, #256]	; (8005714 <parsePreset+0xdc8>)
 8005614:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &chorusParam2;
 8005616:	4c40      	ldr	r4, [pc, #256]	; (8005718 <parsePreset+0xdcc>)
 8005618:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 800561a:	4c40      	ldr	r4, [pc, #256]	; (800571c <parsePreset+0xdd0>)
 800561c:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 800561e:	4c40      	ldr	r4, [pc, #256]	; (8005720 <parsePreset+0xdd4>)
 8005620:	60dc      	str	r4, [r3, #12]
				  break;
 8005622:	e56d      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &compressorTick;
 8005624:	4c3f      	ldr	r4, [pc, #252]	; (8005724 <parsePreset+0xdd8>)
 8005626:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &compressorParam1;
 8005628:	4c3f      	ldr	r4, [pc, #252]	; (8005728 <parsePreset+0xddc>)
 800562a:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &compressorParam2;
 800562c:	4c3f      	ldr	r4, [pc, #252]	; (800572c <parsePreset+0xde0>)
 800562e:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 8005630:	4c3f      	ldr	r4, [pc, #252]	; (8005730 <parsePreset+0xde4>)
 8005632:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 8005634:	4c3f      	ldr	r4, [pc, #252]	; (8005734 <parsePreset+0xde8>)
 8005636:	60dc      	str	r4, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 8005638:	4c3f      	ldr	r4, [pc, #252]	; (8005738 <parsePreset+0xdec>)
 800563a:	611c      	str	r4, [r3, #16]
				  break;
 800563c:	e560      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = FXVZhighshelfTick;
 800563e:	4c3f      	ldr	r4, [pc, #252]	; (800573c <parsePreset+0xdf0>)
 8005640:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8005642:	4c3f      	ldr	r4, [pc, #252]	; (8005740 <parsePreset+0xdf4>)
 8005644:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8005646:	4c3f      	ldr	r4, [pc, #252]	; (8005744 <parsePreset+0xdf8>)
 8005648:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 800564a:	4c3f      	ldr	r4, [pc, #252]	; (8005748 <parsePreset+0xdfc>)
				  effectSetters[i].setParam5 = &blankFunction;;
 800564c:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8005650:	609c      	str	r4, [r3, #8]
				  break;
 8005652:	e555      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &FXVZlowshelfTick;
 8005654:	4c3d      	ldr	r4, [pc, #244]	; (800574c <parsePreset+0xe00>)
 8005656:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8005658:	4c3d      	ldr	r4, [pc, #244]	; (8005750 <parsePreset+0xe04>)
 800565a:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 800565c:	4c3d      	ldr	r4, [pc, #244]	; (8005754 <parsePreset+0xe08>)
 800565e:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8005660:	4c3d      	ldr	r4, [pc, #244]	; (8005758 <parsePreset+0xe0c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005662:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8005666:	609c      	str	r4, [r3, #8]
				  break;
 8005668:	e54a      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &FXVZpeakTick;
 800566a:	4c3c      	ldr	r4, [pc, #240]	; (800575c <parsePreset+0xe10>)
 800566c:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 800566e:	4c3c      	ldr	r4, [pc, #240]	; (8005760 <parsePreset+0xe14>)
 8005670:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 8005672:	4c3c      	ldr	r4, [pc, #240]	; (8005764 <parsePreset+0xe18>)
 8005674:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8005676:	4c3c      	ldr	r4, [pc, #240]	; (8005768 <parsePreset+0xe1c>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005678:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 800567c:	609c      	str	r4, [r3, #8]
				  break;
 800567e:	e53f      	b.n	8005100 <parsePreset+0x7b4>
 8005680:	20015b18 	.word	0x20015b18
 8005684:	200045bc 	.word	0x200045bc
 8005688:	37fffffc 	.word	0x37fffffc
 800568c:	20016580 	.word	0x20016580
 8005690:	20000088 	.word	0x20000088
 8005694:	20016c24 	.word	0x20016c24
 8005698:	2000007c 	.word	0x2000007c
 800569c:	20012f9d 	.word	0x20012f9d
 80056a0:	2000007d 	.word	0x2000007d
 80056a4:	20000064 	.word	0x20000064
 80056a8:	20000004 	.word	0x20000004
 80056ac:	2000495c 	.word	0x2000495c
 80056b0:	08002405 	.word	0x08002405
 80056b4:	08002529 	.word	0x08002529
 80056b8:	08002835 	.word	0x08002835
 80056bc:	080023f1 	.word	0x080023f1
 80056c0:	080024dd 	.word	0x080024dd
 80056c4:	08002821 	.word	0x08002821
 80056c8:	080023dd 	.word	0x080023dd
 80056cc:	08002491 	.word	0x08002491
 80056d0:	0800280d 	.word	0x0800280d
 80056d4:	08001edd 	.word	0x08001edd
 80056d8:	08001b05 	.word	0x08001b05
 80056dc:	08001d2d 	.word	0x08001d2d
 80056e0:	08001b2d 	.word	0x08001b2d
 80056e4:	08001e45 	.word	0x08001e45
 80056e8:	08001e59 	.word	0x08001e59
 80056ec:	0800219d 	.word	0x0800219d
 80056f0:	08001b5d 	.word	0x08001b5d
 80056f4:	08001bad 	.word	0x08001bad
 80056f8:	08001bf9 	.word	0x08001bf9
 80056fc:	08001c1d 	.word	0x08001c1d
 8005700:	080023a5 	.word	0x080023a5
 8005704:	08001add 	.word	0x08001add
 8005708:	08001d4d 	.word	0x08001d4d
 800570c:	08001e6d 	.word	0x08001e6d
 8005710:	08002085 	.word	0x08002085
 8005714:	08001fe9 	.word	0x08001fe9
 8005718:	0800200d 	.word	0x0800200d
 800571c:	0800202d 	.word	0x0800202d
 8005720:	08002059 	.word	0x08002059
 8005724:	080023c9 	.word	0x080023c9
 8005728:	08001c51 	.word	0x08001c51
 800572c:	08001c6d 	.word	0x08001c6d
 8005730:	08001ca1 	.word	0x08001ca1
 8005734:	08001cbd 	.word	0x08001cbd
 8005738:	08001cf5 	.word	0x08001cf5
 800573c:	08002455 	.word	0x08002455
 8005740:	08002659 	.word	0x08002659
 8005744:	080027a5 	.word	0x080027a5
 8005748:	08002885 	.word	0x08002885
 800574c:	08002441 	.word	0x08002441
 8005750:	0800260d 	.word	0x0800260d
 8005754:	08002771 	.word	0x08002771
 8005758:	08002871 	.word	0x08002871
 800575c:	0800242d 	.word	0x0800242d
 8005760:	080025c1 	.word	0x080025c1
 8005764:	0800273d 	.word	0x0800273d
 8005768:	0800285d 	.word	0x0800285d
 800576c:	20015194 	.word	0x20015194
 8005770:	20012d2c 	.word	0x20012d2c
				  effectTick[i] = &FXdiodeLowpassTick;
 8005774:	4c8d      	ldr	r4, [pc, #564]	; (80059ac <parsePreset+0x1060>)
				  effectSetters[i].setParam2 = &blankFunction;
 8005776:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 800577a:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 800577c:	4c8c      	ldr	r4, [pc, #560]	; (80059b0 <parsePreset+0x1064>)
 800577e:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8005780:	4c8c      	ldr	r4, [pc, #560]	; (80059b4 <parsePreset+0x1068>)
				  effectSetters[i].setParam5 = &blankFunction;
 8005782:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8005786:	609c      	str	r4, [r3, #8]
				  break;
 8005788:	e4ba      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = FXVZbandrejectTick;
 800578a:	4c8b      	ldr	r4, [pc, #556]	; (80059b8 <parsePreset+0x106c>)
 800578c:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 800578e:	4c8b      	ldr	r4, [pc, #556]	; (80059bc <parsePreset+0x1070>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8005790:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8005794:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 8005796:	4c8a      	ldr	r4, [pc, #552]	; (80059c0 <parsePreset+0x1074>)
 8005798:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 800579a:	4c8a      	ldr	r4, [pc, #552]	; (80059c4 <parsePreset+0x1078>)
				  effectSetters[i].setParam4 = &blankFunction;;
 800579c:	e9c3 4e02 	strd	r4, lr, [r3, #8]
				  break;
 80057a0:	e4ae      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &shaperTick;
 80057a2:	4c89      	ldr	r4, [pc, #548]	; (80059c8 <parsePreset+0x107c>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057a4:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &tanhTick;
 80057a8:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80057aa:	4c88      	ldr	r4, [pc, #544]	; (80059cc <parsePreset+0x1080>)
 80057ac:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80057ae:	4c88      	ldr	r4, [pc, #544]	; (80059d0 <parsePreset+0x1084>)
 80057b0:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 80057b2:	4c88      	ldr	r4, [pc, #544]	; (80059d4 <parsePreset+0x1088>)
 80057b4:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80057b6:	4c88      	ldr	r4, [pc, #544]	; (80059d8 <parsePreset+0x108c>)
 80057b8:	60dc      	str	r4, [r3, #12]
				  break;
 80057ba:	e4a1      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &tanhTick;
 80057bc:	4c87      	ldr	r4, [pc, #540]	; (80059dc <parsePreset+0x1090>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057be:	f8c3 e010 	str.w	lr, [r3, #16]
 80057c2:	e7f1      	b.n	80057a8 <parsePreset+0xe5c>
				  effectTick[i] = &satTick;
 80057c4:	4c86      	ldr	r4, [pc, #536]	; (80059e0 <parsePreset+0x1094>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057c6:	f8c3 e010 	str.w	lr, [r3, #16]
 80057ca:	e7ed      	b.n	80057a8 <parsePreset+0xe5c>
				  effectTick[i] = &hardClipTick;
 80057cc:	4c85      	ldr	r4, [pc, #532]	; (80059e4 <parsePreset+0x1098>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057ce:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &hardClipTick;
 80057d2:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80057d4:	4c7d      	ldr	r4, [pc, #500]	; (80059cc <parsePreset+0x1080>)
 80057d6:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80057d8:	4c7d      	ldr	r4, [pc, #500]	; (80059d0 <parsePreset+0x1084>)
 80057da:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 80057dc:	4c82      	ldr	r4, [pc, #520]	; (80059e8 <parsePreset+0x109c>)
 80057de:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80057e0:	4c7d      	ldr	r4, [pc, #500]	; (80059d8 <parsePreset+0x108c>)
 80057e2:	60dc      	str	r4, [r3, #12]
				  break;
 80057e4:	e48c      	b.n	8005100 <parsePreset+0x7b4>
				  effectTick[i] = &softClipTick;
 80057e6:	4c81      	ldr	r4, [pc, #516]	; (80059ec <parsePreset+0x10a0>)
				  effectSetters[i].setParam5 = &blankFunction;
 80057e8:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &softClipTick;
 80057ec:	6004      	str	r4, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80057ee:	4c77      	ldr	r4, [pc, #476]	; (80059cc <parsePreset+0x1080>)
 80057f0:	601c      	str	r4, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
 80057f2:	4c77      	ldr	r4, [pc, #476]	; (80059d0 <parsePreset+0x1084>)
 80057f4:	605c      	str	r4, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 80057f6:	4c7e      	ldr	r4, [pc, #504]	; (80059f0 <parsePreset+0x10a4>)
 80057f8:	609c      	str	r4, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 80057fa:	4c77      	ldr	r4, [pc, #476]	; (80059d8 <parsePreset+0x108c>)
 80057fc:	60dc      	str	r4, [r3, #12]
				  break;
 80057fe:	e47f      	b.n	8005100 <parsePreset+0x7b4>
				  totalEffects--;
 8005800:	9c03      	ldr	r4, [sp, #12]
				  effectSetters[i].setParam3 = &blankFunction;
 8005802:	f8c3 e008 	str.w	lr, [r3, #8]
				  totalEffects--;
 8005806:	3c01      	subs	r4, #1
 8005808:	b2e4      	uxtb	r4, r4
 800580a:	9403      	str	r4, [sp, #12]
				  effectTick[i] = &blankTick;
 800580c:	4c79      	ldr	r4, [pc, #484]	; (80059f4 <parsePreset+0x10a8>)
				  effectSetters[i].setParam2 = &blankFunction;
 800580e:	e9c3 ee00 	strd	lr, lr, [r3]
				  effectSetters[i].setParam5 = &blankFunction;
 8005812:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectTick[i] = &blankTick;
 8005816:	6004      	str	r4, [r0, #0]
				  break;
 8005818:	e472      	b.n	8005100 <parsePreset+0x7b4>
				lfoShapeTick[i] = &lfoSawTick;
 800581a:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <parsePreset+0x10ac>)
 800581c:	4977      	ldr	r1, [pc, #476]	; (80059fc <parsePreset+0x10b0>)
 800581e:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005820:	4b77      	ldr	r3, [pc, #476]	; (8005a00 <parsePreset+0x10b4>)
 8005822:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005824:	4b77      	ldr	r3, [pc, #476]	; (8005a04 <parsePreset+0x10b8>)
 8005826:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005828:	4b77      	ldr	r3, [pc, #476]	; (8005a08 <parsePreset+0x10bc>)
 800582a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 800582c:	f7ff bbfb 	b.w	8005026 <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoTriTick;
 8005830:	4b71      	ldr	r3, [pc, #452]	; (80059f8 <parsePreset+0x10ac>)
 8005832:	4976      	ldr	r1, [pc, #472]	; (8005a0c <parsePreset+0x10c0>)
 8005834:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005836:	4b76      	ldr	r3, [pc, #472]	; (8005a10 <parsePreset+0x10c4>)
 8005838:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 800583a:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <parsePreset+0x10c8>)
 800583c:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 800583e:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <parsePreset+0x10cc>)
 8005840:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005842:	f7ff bbf0 	b.w	8005026 <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSineTick;
 8005846:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <parsePreset+0x10ac>)
 8005848:	4974      	ldr	r1, [pc, #464]	; (8005a1c <parsePreset+0x10d0>)
 800584a:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 800584c:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <parsePreset+0x10d4>)
 800584e:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 8005850:	4b74      	ldr	r3, [pc, #464]	; (8005a24 <parsePreset+0x10d8>)
 8005852:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005854:	4b74      	ldr	r3, [pc, #464]	; (8005a28 <parsePreset+0x10dc>)
 8005856:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005858:	f7ff bbe5 	b.w	8005026 <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSawTick;
 800585c:	4b66      	ldr	r3, [pc, #408]	; (80059f8 <parsePreset+0x10ac>)
 800585e:	4967      	ldr	r1, [pc, #412]	; (80059fc <parsePreset+0x10b0>)
 8005860:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005862:	4b67      	ldr	r3, [pc, #412]	; (8005a00 <parsePreset+0x10b4>)
 8005864:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <parsePreset+0x10b8>)
 8005868:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 800586a:	4b67      	ldr	r3, [pc, #412]	; (8005a08 <parsePreset+0x10bc>)
 800586c:	6213      	str	r3, [r2, #32]
				break;
 800586e:	f7ff bbbb 	b.w	8004fe8 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005872:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <parsePreset+0x10ac>)
 8005874:	496d      	ldr	r1, [pc, #436]	; (8005a2c <parsePreset+0x10e0>)
 8005876:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005878:	4b6d      	ldr	r3, [pc, #436]	; (8005a30 <parsePreset+0x10e4>)
 800587a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 800587c:	4b6d      	ldr	r3, [pc, #436]	; (8005a34 <parsePreset+0x10e8>)
 800587e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005880:	4b6d      	ldr	r3, [pc, #436]	; (8005a38 <parsePreset+0x10ec>)
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8005884:	f7ff bbcf 	b.w	8005026 <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005888:	4b5b      	ldr	r3, [pc, #364]	; (80059f8 <parsePreset+0x10ac>)
 800588a:	496c      	ldr	r1, [pc, #432]	; (8005a3c <parsePreset+0x10f0>)
 800588c:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 800588e:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <parsePreset+0x10f4>)
 8005890:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005892:	4b6c      	ldr	r3, [pc, #432]	; (8005a44 <parsePreset+0x10f8>)
 8005894:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005896:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <parsePreset+0x10fc>)
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 800589a:	f7ff bbc4 	b.w	8005026 <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoTriTick;
 800589e:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <parsePreset+0x10ac>)
 80058a0:	495a      	ldr	r1, [pc, #360]	; (8005a0c <parsePreset+0x10c0>)
 80058a2:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 80058a4:	4b5a      	ldr	r3, [pc, #360]	; (8005a10 <parsePreset+0x10c4>)
 80058a6:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 80058a8:	4b5a      	ldr	r3, [pc, #360]	; (8005a14 <parsePreset+0x10c8>)
 80058aa:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 80058ac:	4b5a      	ldr	r3, [pc, #360]	; (8005a18 <parsePreset+0x10cc>)
 80058ae:	6213      	str	r3, [r2, #32]
				break;
 80058b0:	f7ff bb9a 	b.w	8004fe8 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSineTick;
 80058b4:	4b50      	ldr	r3, [pc, #320]	; (80059f8 <parsePreset+0x10ac>)
 80058b6:	4959      	ldr	r1, [pc, #356]	; (8005a1c <parsePreset+0x10d0>)
 80058b8:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80058ba:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <parsePreset+0x10d4>)
 80058bc:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 80058be:	4b59      	ldr	r3, [pc, #356]	; (8005a24 <parsePreset+0x10d8>)
 80058c0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80058c2:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <parsePreset+0x10dc>)
 80058c4:	6213      	str	r3, [r2, #32]
				break;
 80058c6:	f7ff bb8f 	b.w	8004fe8 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 80058ca:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <parsePreset+0x10ac>)
 80058cc:	4957      	ldr	r1, [pc, #348]	; (8005a2c <parsePreset+0x10e0>)
 80058ce:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80058d0:	4b57      	ldr	r3, [pc, #348]	; (8005a30 <parsePreset+0x10e4>)
 80058d2:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80058d4:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <parsePreset+0x10e8>)
 80058d6:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80058d8:	4b57      	ldr	r3, [pc, #348]	; (8005a38 <parsePreset+0x10ec>)
 80058da:	6213      	str	r3, [r2, #32]
				break;
 80058dc:	f7ff bb84 	b.w	8004fe8 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoSawTick;
 80058e0:	4b45      	ldr	r3, [pc, #276]	; (80059f8 <parsePreset+0x10ac>)
 80058e2:	4946      	ldr	r1, [pc, #280]	; (80059fc <parsePreset+0x10b0>)
 80058e4:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80058e6:	4b46      	ldr	r3, [pc, #280]	; (8005a00 <parsePreset+0x10b4>)
 80058e8:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 80058ea:	4b46      	ldr	r3, [pc, #280]	; (8005a04 <parsePreset+0x10b8>)
 80058ec:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80058ee:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <parsePreset+0x10bc>)
 80058f0:	6153      	str	r3, [r2, #20]
				break;
 80058f2:	f7ff bb59 	b.w	8004fa8 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTriTick;
 80058f6:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <parsePreset+0x10ac>)
 80058f8:	4950      	ldr	r1, [pc, #320]	; (8005a3c <parsePreset+0x10f0>)
 80058fa:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <parsePreset+0x10f4>)
 80058fe:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005900:	4b50      	ldr	r3, [pc, #320]	; (8005a44 <parsePreset+0x10f8>)
 8005902:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005904:	4b50      	ldr	r3, [pc, #320]	; (8005a48 <parsePreset+0x10fc>)
 8005906:	6213      	str	r3, [r2, #32]
				break;
 8005908:	f7ff bb6e 	b.w	8004fe8 <parsePreset+0x69c>
				lfoShapeTick[i] = &lfoTriTick;
 800590c:	4b3a      	ldr	r3, [pc, #232]	; (80059f8 <parsePreset+0x10ac>)
 800590e:	493f      	ldr	r1, [pc, #252]	; (8005a0c <parsePreset+0x10c0>)
 8005910:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005912:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <parsePreset+0x10c4>)
 8005914:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005916:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <parsePreset+0x10c8>)
 8005918:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 800591a:	4b3f      	ldr	r3, [pc, #252]	; (8005a18 <parsePreset+0x10cc>)
 800591c:	6153      	str	r3, [r2, #20]
				break;
 800591e:	f7ff bb43 	b.w	8004fa8 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTick;
 8005922:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <parsePreset+0x10ac>)
 8005924:	493d      	ldr	r1, [pc, #244]	; (8005a1c <parsePreset+0x10d0>)
 8005926:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005928:	4b3d      	ldr	r3, [pc, #244]	; (8005a20 <parsePreset+0x10d4>)
 800592a:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 800592c:	4b3d      	ldr	r3, [pc, #244]	; (8005a24 <parsePreset+0x10d8>)
 800592e:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8005930:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <parsePreset+0x10dc>)
 8005932:	6153      	str	r3, [r2, #20]
				break;
 8005934:	f7ff bb38 	b.w	8004fa8 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005938:	4b2f      	ldr	r3, [pc, #188]	; (80059f8 <parsePreset+0x10ac>)
 800593a:	493c      	ldr	r1, [pc, #240]	; (8005a2c <parsePreset+0x10e0>)
 800593c:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800593e:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <parsePreset+0x10e4>)
 8005940:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005942:	4b3c      	ldr	r3, [pc, #240]	; (8005a34 <parsePreset+0x10e8>)
 8005944:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005946:	4b3c      	ldr	r3, [pc, #240]	; (8005a38 <parsePreset+0x10ec>)
 8005948:	6153      	str	r3, [r2, #20]
				break;
 800594a:	f7ff bb2d 	b.w	8004fa8 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSineTriTick;
 800594e:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <parsePreset+0x10ac>)
 8005950:	493a      	ldr	r1, [pc, #232]	; (8005a3c <parsePreset+0x10f0>)
 8005952:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005954:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <parsePreset+0x10f4>)
 8005956:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005958:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <parsePreset+0x10f8>)
 800595a:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 800595c:	4b3a      	ldr	r3, [pc, #232]	; (8005a48 <parsePreset+0x10fc>)
 800595e:	6153      	str	r3, [r2, #20]
				break;
 8005960:	f7ff bb22 	b.w	8004fa8 <parsePreset+0x65c>
				lfoShapeTick[i] = &lfoSawTick;
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <parsePreset+0x10ac>)
 8005966:	4925      	ldr	r1, [pc, #148]	; (80059fc <parsePreset+0x10b0>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 8005968:	4a38      	ldr	r2, [pc, #224]	; (8005a4c <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoSawTick;
 800596a:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <parsePreset+0x10b4>)
 800596e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8005970:	4b24      	ldr	r3, [pc, #144]	; (8005a04 <parsePreset+0x10b8>)
 8005972:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <parsePreset+0x10bc>)
 8005976:	6093      	str	r3, [r2, #8]
				break;
 8005978:	f7ff baf6 	b.w	8004f68 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoTriTick;
 800597c:	4b1e      	ldr	r3, [pc, #120]	; (80059f8 <parsePreset+0x10ac>)
 800597e:	4923      	ldr	r1, [pc, #140]	; (8005a0c <parsePreset+0x10c0>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005980:	4a32      	ldr	r2, [pc, #200]	; (8005a4c <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoTriTick;
 8005982:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8005984:	4b22      	ldr	r3, [pc, #136]	; (8005a10 <parsePreset+0x10c4>)
 8005986:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <parsePreset+0x10c8>)
 800598a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 800598c:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <parsePreset+0x10cc>)
 800598e:	6093      	str	r3, [r2, #8]
				break;
 8005990:	f7ff baea 	b.w	8004f68 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoSineTick;
 8005994:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <parsePreset+0x10ac>)
 8005996:	4921      	ldr	r1, [pc, #132]	; (8005a1c <parsePreset+0x10d0>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 8005998:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <parsePreset+0x1100>)
				lfoShapeTick[i] = &lfoSineTick;
 800599a:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 800599c:	4b20      	ldr	r3, [pc, #128]	; (8005a20 <parsePreset+0x10d4>)
 800599e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 80059a0:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <parsePreset+0x10d8>)
 80059a2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80059a4:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <parsePreset+0x10dc>)
 80059a6:	6093      	str	r3, [r2, #8]
				break;
 80059a8:	f7ff bade 	b.w	8004f68 <parsePreset+0x61c>
 80059ac:	08002419 	.word	0x08002419
 80059b0:	08002575 	.word	0x08002575
 80059b4:	08002849 	.word	0x08002849
 80059b8:	08002469 	.word	0x08002469
 80059bc:	080026a5 	.word	0x080026a5
 80059c0:	080027d9 	.word	0x080027d9
 80059c4:	08002899 	.word	0x08002899
 80059c8:	08002149 	.word	0x08002149
 80059cc:	08001add 	.word	0x08001add
 80059d0:	08001d2d 	.word	0x08001d2d
 80059d4:	08001d61 	.word	0x08001d61
 80059d8:	08001e45 	.word	0x08001e45
 80059dc:	080021d1 	.word	0x080021d1
 80059e0:	08002331 	.word	0x08002331
 80059e4:	080022ad 	.word	0x080022ad
 80059e8:	08001dcd 	.word	0x08001dcd
 80059ec:	08002229 	.word	0x08002229
 80059f0:	08001d75 	.word	0x08001d75
 80059f4:	08002199 	.word	0x08002199
 80059f8:	20004620 	.word	0x20004620
 80059fc:	08001961 	.word	0x08001961
 8005a00:	080019f5 	.word	0x080019f5
 8005a04:	08001ac5 	.word	0x08001ac5
 8005a08:	08001a6d 	.word	0x08001a6d
 8005a0c:	08001945 	.word	0x08001945
 8005a10:	080019e1 	.word	0x080019e1
 8005a14:	08001ac1 	.word	0x08001ac1
 8005a18:	08001a59 	.word	0x08001a59
 8005a1c:	08001929 	.word	0x08001929
 8005a20:	080019cd 	.word	0x080019cd
 8005a24:	08001abd 	.word	0x08001abd
 8005a28:	08001a45 	.word	0x08001a45
 8005a2c:	080018f1 	.word	0x080018f1
 8005a30:	080019a5 	.word	0x080019a5
 8005a34:	08001a95 	.word	0x08001a95
 8005a38:	08001a1d 	.word	0x08001a1d
 8005a3c:	0800190d 	.word	0x0800190d
 8005a40:	080019b9 	.word	0x080019b9
 8005a44:	08001aa9 	.word	0x08001aa9
 8005a48:	08001a31 	.word	0x08001a31
 8005a4c:	20015160 	.word	0x20015160
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005a50:	4b97      	ldr	r3, [pc, #604]	; (8005cb0 <parsePreset+0x1364>)
 8005a52:	4998      	ldr	r1, [pc, #608]	; (8005cb4 <parsePreset+0x1368>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005a54:	4a98      	ldr	r2, [pc, #608]	; (8005cb8 <parsePreset+0x136c>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 8005a56:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8005a58:	4b98      	ldr	r3, [pc, #608]	; (8005cbc <parsePreset+0x1370>)
 8005a5a:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8005a5c:	4b98      	ldr	r3, [pc, #608]	; (8005cc0 <parsePreset+0x1374>)
 8005a5e:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8005a60:	4b98      	ldr	r3, [pc, #608]	; (8005cc4 <parsePreset+0x1378>)
 8005a62:	6093      	str	r3, [r2, #8]
				break;
 8005a64:	f7ff ba80 	b.w	8004f68 <parsePreset+0x61c>
				lfoShapeTick[i] = &lfoSineTriTick;
 8005a68:	4b91      	ldr	r3, [pc, #580]	; (8005cb0 <parsePreset+0x1364>)
 8005a6a:	4997      	ldr	r1, [pc, #604]	; (8005cc8 <parsePreset+0x137c>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005a6c:	4a92      	ldr	r2, [pc, #584]	; (8005cb8 <parsePreset+0x136c>)
				lfoShapeTick[i] = &lfoSineTriTick;
 8005a6e:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8005a70:	4b96      	ldr	r3, [pc, #600]	; (8005ccc <parsePreset+0x1380>)
 8005a72:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8005a74:	4b96      	ldr	r3, [pc, #600]	; (8005cd0 <parsePreset+0x1384>)
 8005a76:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8005a78:	4b96      	ldr	r3, [pc, #600]	; (8005cd4 <parsePreset+0x1388>)
 8005a7a:	6093      	str	r3, [r2, #8]
				break;
 8005a7c:	f7ff ba74 	b.w	8004f68 <parsePreset+0x61c>
				  shapeTick[i] = &userTick;
 8005a80:	4b95      	ldr	r3, [pc, #596]	; (8005cd8 <parsePreset+0x138c>)
 8005a82:	4996      	ldr	r1, [pc, #600]	; (8005cdc <parsePreset+0x1390>)
 8005a84:	6099      	str	r1, [r3, #8]
				  break;
 8005a86:	f7ff b9f8 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &triTick;
 8005a8a:	4b93      	ldr	r3, [pc, #588]	; (8005cd8 <parsePreset+0x138c>)
 8005a8c:	4994      	ldr	r1, [pc, #592]	; (8005ce0 <parsePreset+0x1394>)
 8005a8e:	6099      	str	r1, [r3, #8]
				  break;
 8005a90:	f7ff b9f3 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &sineTick;
 8005a94:	4b90      	ldr	r3, [pc, #576]	; (8005cd8 <parsePreset+0x138c>)
 8005a96:	4993      	ldr	r1, [pc, #588]	; (8005ce4 <parsePreset+0x1398>)
 8005a98:	6099      	str	r1, [r3, #8]
				  break;
 8005a9a:	f7ff b9ee 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &pulseTick;
 8005a9e:	4b8e      	ldr	r3, [pc, #568]	; (8005cd8 <parsePreset+0x138c>)
 8005aa0:	4991      	ldr	r1, [pc, #580]	; (8005ce8 <parsePreset+0x139c>)
 8005aa2:	6099      	str	r1, [r3, #8]
				  break;
 8005aa4:	f7ff b9e9 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &sawTick;
 8005aa8:	4b8b      	ldr	r3, [pc, #556]	; (8005cd8 <parsePreset+0x138c>)
 8005aaa:	4990      	ldr	r1, [pc, #576]	; (8005cec <parsePreset+0x13a0>)
 8005aac:	6099      	str	r1, [r3, #8]
				  break;
 8005aae:	f7ff b9e4 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &sineTriTick;
 8005ab2:	4b89      	ldr	r3, [pc, #548]	; (8005cd8 <parsePreset+0x138c>)
 8005ab4:	498e      	ldr	r1, [pc, #568]	; (8005cf0 <parsePreset+0x13a4>)
 8005ab6:	6099      	str	r1, [r3, #8]
				  break;
 8005ab8:	f7ff b9df 	b.w	8004e7a <parsePreset+0x52e>
				  shapeTick[i] = &userTick;
 8005abc:	4b86      	ldr	r3, [pc, #536]	; (8005cd8 <parsePreset+0x138c>)
 8005abe:	4987      	ldr	r1, [pc, #540]	; (8005cdc <parsePreset+0x1390>)
 8005ac0:	6059      	str	r1, [r3, #4]
				  break;
 8005ac2:	f7ff b97a 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &triTick;
 8005ac6:	4b84      	ldr	r3, [pc, #528]	; (8005cd8 <parsePreset+0x138c>)
 8005ac8:	4985      	ldr	r1, [pc, #532]	; (8005ce0 <parsePreset+0x1394>)
 8005aca:	6059      	str	r1, [r3, #4]
				  break;
 8005acc:	f7ff b975 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &sineTick;
 8005ad0:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <parsePreset+0x138c>)
 8005ad2:	4984      	ldr	r1, [pc, #528]	; (8005ce4 <parsePreset+0x1398>)
 8005ad4:	6059      	str	r1, [r3, #4]
				  break;
 8005ad6:	f7ff b970 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &pulseTick;
 8005ada:	4b7f      	ldr	r3, [pc, #508]	; (8005cd8 <parsePreset+0x138c>)
 8005adc:	4982      	ldr	r1, [pc, #520]	; (8005ce8 <parsePreset+0x139c>)
 8005ade:	6059      	str	r1, [r3, #4]
				  break;
 8005ae0:	f7ff b96b 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &sawTick;
 8005ae4:	4b7c      	ldr	r3, [pc, #496]	; (8005cd8 <parsePreset+0x138c>)
 8005ae6:	4981      	ldr	r1, [pc, #516]	; (8005cec <parsePreset+0x13a0>)
 8005ae8:	6059      	str	r1, [r3, #4]
				  break;
 8005aea:	f7ff b966 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &sineTriTick;
 8005aee:	4b7a      	ldr	r3, [pc, #488]	; (8005cd8 <parsePreset+0x138c>)
 8005af0:	497f      	ldr	r1, [pc, #508]	; (8005cf0 <parsePreset+0x13a4>)
 8005af2:	6059      	str	r1, [r3, #4]
				  break;
 8005af4:	f7ff b961 	b.w	8004dba <parsePreset+0x46e>
				  shapeTick[i] = &userTick;
 8005af8:	4b77      	ldr	r3, [pc, #476]	; (8005cd8 <parsePreset+0x138c>)
 8005afa:	4a78      	ldr	r2, [pc, #480]	; (8005cdc <parsePreset+0x1390>)
 8005afc:	601a      	str	r2, [r3, #0]
				  break;
 8005afe:	f7ff b936 	b.w	8004d6e <parsePreset+0x422>
				  shapeTick[i] = &triTick;
 8005b02:	4b75      	ldr	r3, [pc, #468]	; (8005cd8 <parsePreset+0x138c>)
 8005b04:	4a76      	ldr	r2, [pc, #472]	; (8005ce0 <parsePreset+0x1394>)
 8005b06:	601a      	str	r2, [r3, #0]
				  break;
 8005b08:	f7ff b931 	b.w	8004d6e <parsePreset+0x422>
				  shapeTick[i] = &sineTick;
 8005b0c:	4b72      	ldr	r3, [pc, #456]	; (8005cd8 <parsePreset+0x138c>)
 8005b0e:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <parsePreset+0x1398>)
 8005b10:	601a      	str	r2, [r3, #0]
				  break;
 8005b12:	f7ff b92c 	b.w	8004d6e <parsePreset+0x422>
				  shapeTick[i] = &pulseTick;
 8005b16:	4b70      	ldr	r3, [pc, #448]	; (8005cd8 <parsePreset+0x138c>)
 8005b18:	4a73      	ldr	r2, [pc, #460]	; (8005ce8 <parsePreset+0x139c>)
 8005b1a:	601a      	str	r2, [r3, #0]
				  break;
 8005b1c:	f7ff b927 	b.w	8004d6e <parsePreset+0x422>
				  shapeTick[i] = &sawTick;
 8005b20:	4b6d      	ldr	r3, [pc, #436]	; (8005cd8 <parsePreset+0x138c>)
 8005b22:	4a72      	ldr	r2, [pc, #456]	; (8005cec <parsePreset+0x13a0>)
 8005b24:	601a      	str	r2, [r3, #0]
				  break;
 8005b26:	f7ff b922 	b.w	8004d6e <parsePreset+0x422>
				  shapeTick[i] = &sineTriTick;
 8005b2a:	4b6b      	ldr	r3, [pc, #428]	; (8005cd8 <parsePreset+0x138c>)
 8005b2c:	4a70      	ldr	r2, [pc, #448]	; (8005cf0 <parsePreset+0x13a4>)
 8005b2e:	601a      	str	r2, [r3, #0]
				  break;
 8005b30:	f7ff b91d 	b.w	8004d6e <parsePreset+0x422>
				  filterTick[i] = &LadderLowpassTick;
 8005b34:	4b6f      	ldr	r3, [pc, #444]	; (8005cf4 <parsePreset+0x13a8>)
 8005b36:	4a70      	ldr	r2, [pc, #448]	; (8005cf8 <parsePreset+0x13ac>)
 8005b38:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8005b3a:	4b70      	ldr	r3, [pc, #448]	; (8005cfc <parsePreset+0x13b0>)
 8005b3c:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8005b3e:	4b70      	ldr	r3, [pc, #448]	; (8005d00 <parsePreset+0x13b4>)
 8005b40:	607b      	str	r3, [r7, #4]
				  break;
 8005b42:	f7ff b9ce 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &VZbandrejectTick;
 8005b46:	4b6b      	ldr	r3, [pc, #428]	; (8005cf4 <parsePreset+0x13a8>)
 8005b48:	4a6e      	ldr	r2, [pc, #440]	; (8005d04 <parsePreset+0x13b8>)
 8005b4a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8005b4c:	4b6e      	ldr	r3, [pc, #440]	; (8005d08 <parsePreset+0x13bc>)
 8005b4e:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8005b50:	4b6e      	ldr	r3, [pc, #440]	; (8005d0c <parsePreset+0x13c0>)
 8005b52:	607b      	str	r3, [r7, #4]
				  break;
 8005b54:	f7ff b9c5 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &VZhighshelfTick;
 8005b58:	4b66      	ldr	r3, [pc, #408]	; (8005cf4 <parsePreset+0x13a8>)
 8005b5a:	4a6d      	ldr	r2, [pc, #436]	; (8005d10 <parsePreset+0x13c4>)
 8005b5c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <parsePreset+0x13c8>)
 8005b60:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8005b62:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <parsePreset+0x13cc>)
 8005b64:	607b      	str	r3, [r7, #4]
				  break;
 8005b66:	f7ff b9bc 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &VZlowshelfTick;
 8005b6a:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <parsePreset+0x13a8>)
 8005b6c:	4a6b      	ldr	r2, [pc, #428]	; (8005d1c <parsePreset+0x13d0>)
 8005b6e:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8005b70:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <parsePreset+0x13d4>)
 8005b72:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8005b74:	4b6b      	ldr	r3, [pc, #428]	; (8005d24 <parsePreset+0x13d8>)
 8005b76:	607b      	str	r3, [r7, #4]
				  break;
 8005b78:	f7ff b9b3 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &VZpeakTick;
 8005b7c:	4b5d      	ldr	r3, [pc, #372]	; (8005cf4 <parsePreset+0x13a8>)
 8005b7e:	4a6a      	ldr	r2, [pc, #424]	; (8005d28 <parsePreset+0x13dc>)
 8005b80:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8005b82:	4b6a      	ldr	r3, [pc, #424]	; (8005d2c <parsePreset+0x13e0>)
 8005b84:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8005b86:	4b6a      	ldr	r3, [pc, #424]	; (8005d30 <parsePreset+0x13e4>)
 8005b88:	607b      	str	r3, [r7, #4]
				  break;
 8005b8a:	f7ff b9aa 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &diodeLowpassTick;
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <parsePreset+0x13a8>)
 8005b90:	4a68      	ldr	r2, [pc, #416]	; (8005d34 <parsePreset+0x13e8>)
 8005b92:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8005b94:	4b68      	ldr	r3, [pc, #416]	; (8005d38 <parsePreset+0x13ec>)
 8005b96:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8005b98:	4b68      	ldr	r3, [pc, #416]	; (8005d3c <parsePreset+0x13f0>)
 8005b9a:	607b      	str	r3, [r7, #4]
				  break;
 8005b9c:	f7ff b9a1 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &bandpassTick;
 8005ba0:	4b54      	ldr	r3, [pc, #336]	; (8005cf4 <parsePreset+0x13a8>)
 8005ba2:	4a67      	ldr	r2, [pc, #412]	; (8005d40 <parsePreset+0x13f4>)
 8005ba4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 8005ba6:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <parsePreset+0x13f8>)
 8005ba8:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 8005baa:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <parsePreset+0x13fc>)
 8005bac:	607b      	str	r3, [r7, #4]
				  break;
 8005bae:	f7ff b998 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &highpassTick;
 8005bb2:	4b50      	ldr	r3, [pc, #320]	; (8005cf4 <parsePreset+0x13a8>)
 8005bb4:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <parsePreset+0x1400>)
 8005bb6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 8005bb8:	4b65      	ldr	r3, [pc, #404]	; (8005d50 <parsePreset+0x1404>)
 8005bba:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 8005bbc:	4b65      	ldr	r3, [pc, #404]	; (8005d54 <parsePreset+0x1408>)
 8005bbe:	607b      	str	r3, [r7, #4]
				  break;
 8005bc0:	f7ff b98f 	b.w	8004ee2 <parsePreset+0x596>
				  filterTick[i] = &LadderLowpassTick;
 8005bc4:	4b4b      	ldr	r3, [pc, #300]	; (8005cf4 <parsePreset+0x13a8>)
 8005bc6:	4a4c      	ldr	r2, [pc, #304]	; (8005cf8 <parsePreset+0x13ac>)
 8005bc8:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <parsePreset+0x13b0>)
 8005bcc:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <parsePreset+0x13b4>)
 8005bd0:	60fb      	str	r3, [r7, #12]
				  break;
 8005bd2:	f7ff b9a7 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &VZbandrejectTick;
 8005bd6:	4b47      	ldr	r3, [pc, #284]	; (8005cf4 <parsePreset+0x13a8>)
 8005bd8:	4a4a      	ldr	r2, [pc, #296]	; (8005d04 <parsePreset+0x13b8>)
 8005bda:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8005bdc:	4b4a      	ldr	r3, [pc, #296]	; (8005d08 <parsePreset+0x13bc>)
 8005bde:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8005be0:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <parsePreset+0x13c0>)
 8005be2:	60fb      	str	r3, [r7, #12]
				  break;
 8005be4:	f7ff b99e 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &VZhighshelfTick;
 8005be8:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <parsePreset+0x13a8>)
 8005bea:	4a49      	ldr	r2, [pc, #292]	; (8005d10 <parsePreset+0x13c4>)
 8005bec:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8005bee:	4b49      	ldr	r3, [pc, #292]	; (8005d14 <parsePreset+0x13c8>)
 8005bf0:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8005bf2:	4b49      	ldr	r3, [pc, #292]	; (8005d18 <parsePreset+0x13cc>)
 8005bf4:	60fb      	str	r3, [r7, #12]
				  break;
 8005bf6:	f7ff b995 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &VZlowshelfTick;
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	; (8005cf4 <parsePreset+0x13a8>)
 8005bfc:	4a47      	ldr	r2, [pc, #284]	; (8005d1c <parsePreset+0x13d0>)
 8005bfe:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8005c00:	4b47      	ldr	r3, [pc, #284]	; (8005d20 <parsePreset+0x13d4>)
 8005c02:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8005c04:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <parsePreset+0x13d8>)
 8005c06:	60fb      	str	r3, [r7, #12]
				  break;
 8005c08:	f7ff b98c 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &VZpeakTick;
 8005c0c:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <parsePreset+0x13a8>)
 8005c0e:	4a46      	ldr	r2, [pc, #280]	; (8005d28 <parsePreset+0x13dc>)
 8005c10:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8005c12:	4b46      	ldr	r3, [pc, #280]	; (8005d2c <parsePreset+0x13e0>)
 8005c14:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8005c16:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <parsePreset+0x13e4>)
 8005c18:	60fb      	str	r3, [r7, #12]
				  break;
 8005c1a:	f7ff b983 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &diodeLowpassTick;
 8005c1e:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <parsePreset+0x13a8>)
 8005c20:	4a44      	ldr	r2, [pc, #272]	; (8005d34 <parsePreset+0x13e8>)
 8005c22:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8005c24:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <parsePreset+0x13ec>)
 8005c26:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8005c28:	4b44      	ldr	r3, [pc, #272]	; (8005d3c <parsePreset+0x13f0>)
 8005c2a:	60fb      	str	r3, [r7, #12]
				  break;
 8005c2c:	f7ff b97a 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &bandpassTick;
 8005c30:	4b30      	ldr	r3, [pc, #192]	; (8005cf4 <parsePreset+0x13a8>)
 8005c32:	4a43      	ldr	r2, [pc, #268]	; (8005d40 <parsePreset+0x13f4>)
 8005c34:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 8005c36:	4b43      	ldr	r3, [pc, #268]	; (8005d44 <parsePreset+0x13f8>)
 8005c38:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8005c3a:	4b43      	ldr	r3, [pc, #268]	; (8005d48 <parsePreset+0x13fc>)
 8005c3c:	60fb      	str	r3, [r7, #12]
				  break;
 8005c3e:	f7ff b971 	b.w	8004f24 <parsePreset+0x5d8>
				  filterTick[i] = &highpassTick;
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <parsePreset+0x13a8>)
 8005c44:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <parsePreset+0x1400>)
 8005c46:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8005c48:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <parsePreset+0x1404>)
 8005c4a:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8005c4c:	4b41      	ldr	r3, [pc, #260]	; (8005d54 <parsePreset+0x1408>)
 8005c4e:	60fb      	str	r3, [r7, #12]
				  break;
 8005c50:	f7ff b968 	b.w	8004f24 <parsePreset+0x5d8>
			mappings[whichMapping].destNumber = destNumber;
 8005c54:	fb08 f30c 	mul.w	r3, r8, ip
 8005c58:	4666      	mov	r6, ip
 8005c5a:	eb0e 0203 	add.w	r2, lr, r3
 8005c5e:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005c68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
 8005c6c:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
 8005c70:	6050      	str	r0, [r2, #4]
			numMappings++;
 8005c72:	fa5f fc83 	uxtb.w	ip, r3
 8005c76:	f7ff bbea 	b.w	800544e <parsePreset+0xb02>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 8005c7a:	fb08 f306 	mul.w	r3, r8, r6
 8005c7e:	18ca      	adds	r2, r1, r3
 8005c80:	4935      	ldr	r1, [pc, #212]	; (8005d58 <parsePreset+0x140c>)
 8005c82:	4472      	add	r2, lr
 8005c84:	6291      	str	r1, [r2, #40]	; 0x28
 8005c86:	1d22      	adds	r2, r4, #4
 8005c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8c:	4473      	add	r3, lr
 8005c8e:	6059      	str	r1, [r3, #4]
 8005c90:	e423      	b.n	80054da <parsePreset+0xb8e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005c92:	2108      	movs	r1, #8
 8005c94:	2004      	movs	r0, #4
 8005c96:	4472      	add	r2, lr
 8005c98:	fb11 0303 	smlabb	r3, r1, r3, r0
 8005c9c:	444b      	add	r3, r9
 8005c9e:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005ca0:	e41b      	b.n	80054da <parsePreset+0xb8e>
 8005ca2:	4c2e      	ldr	r4, [pc, #184]	; (8005d5c <parsePreset+0x1410>)
 8005ca4:	f7fe bf47 	b.w	8004b36 <parsePreset+0x1ea>
	for (int i = 0; i < paramCount; i++)
 8005ca8:	2514      	movs	r5, #20
 8005caa:	4e2d      	ldr	r6, [pc, #180]	; (8005d60 <parsePreset+0x1414>)
 8005cac:	f7fe bf2f 	b.w	8004b0e <parsePreset+0x1c2>
 8005cb0:	20004620 	.word	0x20004620
 8005cb4:	080018f1 	.word	0x080018f1
 8005cb8:	20015160 	.word	0x20015160
 8005cbc:	080019a5 	.word	0x080019a5
 8005cc0:	08001a95 	.word	0x08001a95
 8005cc4:	08001a1d 	.word	0x08001a1d
 8005cc8:	0800190d 	.word	0x0800190d
 8005ccc:	080019b9 	.word	0x080019b9
 8005cd0:	08001aa9 	.word	0x08001aa9
 8005cd4:	08001a31 	.word	0x08001a31
 8005cd8:	20004a20 	.word	0x20004a20
 8005cdc:	08000ef9 	.word	0x08000ef9
 8005ce0:	08000e7d 	.word	0x08000e7d
 8005ce4:	08000e4d 	.word	0x08000e4d
 8005ce8:	08000dd1 	.word	0x08000dd1
 8005cec:	08000d6d 	.word	0x08000d6d
 8005cf0:	08000cf1 	.word	0x08000cf1
 8005cf4:	2000448c 	.word	0x2000448c
 8005cf8:	080012d1 	.word	0x080012d1
 8005cfc:	08001471 	.word	0x08001471
 8005d00:	08001611 	.word	0x08001611
 8005d04:	0800128d 	.word	0x0800128d
 8005d08:	0800145d 	.word	0x0800145d
 8005d0c:	080015e1 	.word	0x080015e1
 8005d10:	08001261 	.word	0x08001261
 8005d14:	08001449 	.word	0x08001449
 8005d18:	080015ad 	.word	0x080015ad
 8005d1c:	08001235 	.word	0x08001235
 8005d20:	08001435 	.word	0x08001435
 8005d24:	08001579 	.word	0x08001579
 8005d28:	08001209 	.word	0x08001209
 8005d2c:	08001421 	.word	0x08001421
 8005d30:	08001545 	.word	0x08001545
 8005d34:	080011c5 	.word	0x080011c5
 8005d38:	0800140d 	.word	0x0800140d
 8005d3c:	08001515 	.word	0x08001515
 8005d40:	08001181 	.word	0x08001181
 8005d44:	080013f9 	.word	0x080013f9
 8005d48:	080014e5 	.word	0x080014e5
 8005d4c:	0800113d 	.word	0x0800113d
 8005d50:	080013e5 	.word	0x080013e5
 8005d54:	080014b5 	.word	0x080014b5
 8005d58:	2000008c 	.word	0x2000008c
 8005d5c:	20016c10 	.word	0x20016c10
 8005d60:	20015b1c 	.word	0x20015b1c
			params[i].objectNumber = 3;
 8005d64:	f04f 0303 	mov.w	r3, #3
 8005d68:	f888 3018 	strb.w	r3, [r8, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 8005d6c:	ed98 0a02 	vldr	s0, [r8, #8]
 8005d70:	2100      	movs	r1, #0
 8005d72:	f898 0018 	ldrb.w	r0, [r8, #24]
 8005d76:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005d7a:	4798      	blx	r3
 8005d7c:	ed98 0a03 	vldr	s0, [r8, #12]
 8005d80:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005d84:	2101      	movs	r1, #1
 8005d86:	f898 0018 	ldrb.w	r0, [r8, #24]
 8005d8a:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 8005d8c:	f7ff babe 	b.w	800530c <parsePreset+0x9c0>
			params[i].objectNumber = 2;
 8005d90:	2302      	movs	r3, #2
 8005d92:	f888 3018 	strb.w	r3, [r8, #24]
 8005d96:	e7e9      	b.n	8005d6c <parsePreset+0x1420>
			params[i].objectNumber = 1;
 8005d98:	f888 9018 	strb.w	r9, [r8, #24]
 8005d9c:	e7e6      	b.n	8005d6c <parsePreset+0x1420>
 8005d9e:	4a01      	ldr	r2, [pc, #4]	; (8005da4 <parsePreset+0x1458>)
 8005da0:	f7ff b8e2 	b.w	8004f68 <parsePreset+0x61c>
 8005da4:	20015160 	.word	0x20015160

08005da8 <main>:
{
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005dac:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005dae:	2501      	movs	r5, #1
{
 8005db0:	ed2d 8b02 	vpush	{d8}
 8005db4:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005db6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8005dba:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_MPU_Disable();
 8005dbe:	f000 ffab 	bl	8006d18 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005dc2:	f248 721f 	movw	r2, #34591	; 0x871f
 8005dc6:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005dca:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005dcc:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005dd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd2:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005dd6:	f000 ffbd 	bl	8006d54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 8005dda:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005dde:	4bb1      	ldr	r3, [pc, #708]	; (80060a4 <main+0x2fc>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005de0:	a808      	add	r0, sp, #32
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8005de2:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8005de6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005dea:	f000 ffb3 	bl	8006d54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8005dee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005df2:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005df4:	a808      	add	r0, sp, #32
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8005df6:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8005df8:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8005dfa:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8005dfe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005e02:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005e06:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e0a:	f000 ffa3 	bl	8006d54 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 8005e0e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8005e12:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8005e14:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e16:	a808      	add	r0, sp, #32
  MPU_InitStruct.BaseAddress = 0x60000000;
 8005e18:	9209      	str	r2, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8005e1a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8005e1e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005e22:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005e26:	f000 ff95 	bl	8006d54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005e2a:	2004      	movs	r0, #4
 8005e2c:	f000 ff82 	bl	8006d34 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8005e30:	4b9d      	ldr	r3, [pc, #628]	; (80060a8 <main+0x300>)
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8005e38:	d111      	bne.n	8005e5e <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e3e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005e42:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e4a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005e54:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005e5a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8005e5e:	4892      	ldr	r0, [pc, #584]	; (80060a8 <main+0x300>)
 8005e60:	6943      	ldr	r3, [r0, #20]
 8005e62:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8005e66:	d124      	bne.n	8005eb2 <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8005e68:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005e6c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8005e70:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005e74:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005e78:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005e7c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8005e80:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005e82:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005e86:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005e88:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8005e8c:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005e8e:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	d1f8      	bne.n	8005e88 <main+0xe0>
    } while(sets-- != 0U);
 8005e96:	3c20      	subs	r4, #32
 8005e98:	f114 0f20 	cmn.w	r4, #32
 8005e9c:	d1f1      	bne.n	8005e82 <main+0xda>
 8005e9e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005ea2:	6943      	ldr	r3, [r0, #20]
 8005ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea8:	6143      	str	r3, [r0, #20]
 8005eaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005eae:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005eb2:	f000 fe59 	bl	8006b68 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8005eb6:	b662      	cpsie	i
  SystemClock_Config();
 8005eb8:	f7fe fb42 	bl	8004540 <SystemClock_Config>
  PeriphCommonClock_Config();
 8005ebc:	f7fe fbd8 	bl	8004670 <PeriphCommonClock_Config>
  HAL_Delay(500);
 8005ec0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ec4:	f000 fe92 	bl	8006bec <HAL_Delay>
  MX_GPIO_Init();
 8005ec8:	f7fd ffae 	bl	8003e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ecc:	f7fd feb0 	bl	8003c30 <MX_DMA_Init>
  MX_FMC_Init();
 8005ed0:	f7fd feea 	bl	8003ca8 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8005ed4:	f000 fae2 	bl	800649c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8005ed8:	f008 fef6 	bl	800ecc8 <MX_FATFS_Init>
  MX_SAI1_Init();
 8005edc:	f000 f9e6 	bl	80062ac <MX_SAI1_Init>
  MX_RNG_Init();
 8005ee0:	f000 f9a4 	bl	800622c <MX_RNG_Init>
  MX_SPI2_Init();
 8005ee4:	f000 fb7c 	bl	80065e0 <MX_SPI2_Init>
  MX_I2C2_Init();
 8005ee8:	f7fe f8ac 	bl	8004044 <MX_I2C2_Init>
  MX_SPI1_Init();
 8005eec:	f000 fb4c 	bl	8006588 <MX_SPI1_Init>
  MX_SPI5_Init();
 8005ef0:	f000 fba2 	bl	8006638 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005efa:	486c      	ldr	r0, [pc, #432]	; (80060ac <main+0x304>)
 8005efc:	f002 fc4e 	bl	800879c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8005f00:	2200      	movs	r2, #0
 8005f02:	2102      	movs	r1, #2
 8005f04:	486a      	ldr	r0, [pc, #424]	; (80060b0 <main+0x308>)
 8005f06:	f002 fc49 	bl	800879c <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8005f0a:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8005f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8005f12:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005f16:	4964      	ldr	r1, [pc, #400]	; (80060a8 <main+0x300>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8005f18:	4a66      	ldr	r2, [pc, #408]	; (80060b4 <main+0x30c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005f1a:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8005f1e:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f26:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8005f2a:	07c3      	lsls	r3, r0, #31
 8005f2c:	d502      	bpl.n	8005f34 <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8005f2e:	4b62      	ldr	r3, [pc, #392]	; (80060b8 <main+0x310>)
 8005f30:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 8005f34:	4b61      	ldr	r3, [pc, #388]	; (80060bc <main+0x314>)
  DWT->CYCCNT = 0;
 8005f36:	2100      	movs	r1, #0
 8005f38:	4a5e      	ldr	r2, [pc, #376]	; (80060b4 <main+0x30c>)
  DWT->CTRL = 0x40000001;
 8005f3a:	4861      	ldr	r0, [pc, #388]	; (80060c0 <main+0x318>)
  DWT->CYCCNT = 0;
 8005f3c:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 8005f3e:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 8005f40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f44:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8005f46:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8006124 <main+0x37c>
	  buffer[i] = 0;
 8005f4a:	f013 fa45 	bl	80193d8 <memset>
  buffer[15] = NUM_PARAMS;
 8005f4e:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 8005f50:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 8005f52:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 8005f54:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8005f58:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 8005f5c:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8005f5e:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 8005f62:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8005f66:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 8005f6a:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8005f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8005f72:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8005f76:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80060c4 <main+0x31c>
 8005f7a:	4853      	ldr	r0, [pc, #332]	; (80060c8 <main+0x320>)
 8005f7c:	f00e f9c4 	bl	8014308 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8005f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f84:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80060cc <main+0x324>
 8005f88:	eddf 0a51 	vldr	s1, [pc, #324]	; 80060d0 <main+0x328>
 8005f8c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80060d4 <main+0x32c>
 8005f90:	4851      	ldr	r0, [pc, #324]	; (80060d8 <main+0x330>)
 8005f92:	f00e f9b9 	bl	8014308 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8005f96:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8005f9a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8005f9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005fa2:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80060d4 <main+0x32c>
 8005fa6:	484d      	ldr	r0, [pc, #308]	; (80060dc <main+0x334>)
 8005fa8:	f00e f9ae 	bl	8014308 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8005fac:	4c4c      	ldr	r4, [pc, #304]	; (80060e0 <main+0x338>)
  getPresetNamesFromSDCard();
 8005fae:	f7fe fbb1 	bl	8004714 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8005fb2:	f89a 0000 	ldrb.w	r0, [sl]
 8005fb6:	f7fe f91d 	bl	80041f4 <checkForSDCardPreset>
 8005fba:	b2c3      	uxtb	r3, r0
 8005fbc:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 8005fbe:	7823      	ldrb	r3, [r4, #0]
 8005fc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8119 	beq.w	80061fc <main+0x454>
  SDRAM_init();
 8005fca:	f7fe fc75 	bl	80048b8 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8005fce:	4945      	ldr	r1, [pc, #276]	; (80060e4 <main+0x33c>)
 8005fd0:	4a45      	ldr	r2, [pc, #276]	; (80060e8 <main+0x340>)
 8005fd2:	4846      	ldr	r0, [pc, #280]	; (80060ec <main+0x344>)
 8005fd4:	f7fa f988 	bl	80002e8 <audioInit>
	AudioCodec_init(&hi2c2);
 8005fd8:	4844      	ldr	r0, [pc, #272]	; (80060ec <main+0x344>)
 8005fda:	f7fd fd9f 	bl	8003b1c <AudioCodec_init>
  	if (foundOne == 0)
 8005fde:	7823      	ldrb	r3, [r4, #0]
 8005fe0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 8102 	bne.w	80061ee <main+0x446>
	  parsePreset((NUM_PARAMS*2)+27, 0); //default preset binary
 8005fea:	f240 1051 	movw	r0, #337	; 0x151
 8005fee:	4d40      	ldr	r5, [pc, #256]	; (80060f0 <main+0x348>)
 8005ff0:	f7fe fcac 	bl	800494c <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	493f      	ldr	r1, [pc, #252]	; (80060f4 <main+0x34c>)
 8005ff8:	483f      	ldr	r0, [pc, #252]	; (80060f8 <main+0x350>)
 8005ffa:	f007 f91d 	bl	800d238 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8005ffe:	2234      	movs	r2, #52	; 0x34
 8006000:	493e      	ldr	r1, [pc, #248]	; (80060fc <main+0x354>)
 8006002:	483f      	ldr	r0, [pc, #252]	; (8006100 <main+0x358>)
 8006004:	f007 f918 	bl	800d238 <HAL_SPI_Receive_DMA>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8006008:	2294      	movs	r2, #148	; 0x94
 800600a:	493e      	ldr	r1, [pc, #248]	; (8006104 <main+0x35c>)
 800600c:	483e      	ldr	r0, [pc, #248]	; (8006108 <main+0x360>)
	  if (rand > TWO_TO_31)
 800600e:	eddf 8a3f 	vldr	s17, [pc, #252]	; 800610c <main+0x364>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8006012:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8006110 <main+0x368>
 8006016:	4f3f      	ldr	r7, [pc, #252]	; (8006114 <main+0x36c>)
 8006018:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8006128 <main+0x380>
 800601c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800612c <main+0x384>
 8006020:	4c3d      	ldr	r4, [pc, #244]	; (8006118 <main+0x370>)
 8006022:	4e3e      	ldr	r6, [pc, #248]	; (800611c <main+0x374>)
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8006024:	f007 f908 	bl	800d238 <HAL_SPI_Receive_DMA>
 8006028:	e02b      	b.n	8006082 <main+0x2da>
	  if (presetWaitingToParse > 0)
 800602a:	6829      	ldr	r1, [r5, #0]
 800602c:	bb99      	cbnz	r1, 8006096 <main+0x2ee>
	  else if (presetWaitingToWrite > 0)
 800602e:	f8d9 b000 	ldr.w	fp, [r9]
 8006032:	f1bb 0f00 	cmp.w	fp, #0
 8006036:	d17b      	bne.n	8006130 <main+0x388>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8006038:	a908      	add	r1, sp, #32
 800603a:	4839      	ldr	r0, [pc, #228]	; (8006120 <main+0x378>)
 800603c:	f005 fb80 	bl	800b740 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8006040:	eddd 7a08 	vldr	s15, [sp, #32]
 8006044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006048:	eef4 7ae8 	vcmpe.f32	s15, s17
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	dd0c      	ble.n	800606c <main+0x2c4>
		  myTestInt++;
 8006052:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8006056:	2180      	movs	r1, #128	; 0x80
 8006058:	4814      	ldr	r0, [pc, #80]	; (80060ac <main+0x304>)
		  myTestInt++;
 800605a:	3301      	adds	r3, #1
 800605c:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8006060:	f002 fba0 	bl	80087a4 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 8006064:	eddd 7a08 	vldr	s15, [sp, #32]
 8006068:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 800606c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006070:	7823      	ldrb	r3, [r4, #0]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006078:	eea7 7a88 	vfma.f32	s14, s15, s16
 800607c:	7022      	strb	r2, [r4, #0]
 800607e:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0d0      	beq.n	800602a <main+0x282>
		  checkForSDCardPreset(presetNumberToLoad);
 8006088:	f89a 0000 	ldrb.w	r0, [sl]
 800608c:	f7fe f8b2 	bl	80041f4 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 8006090:	6829      	ldr	r1, [r5, #0]
 8006092:	2900      	cmp	r1, #0
 8006094:	d0cb      	beq.n	800602e <main+0x286>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8006096:	4608      	mov	r0, r1
 8006098:	f89a 1000 	ldrb.w	r1, [sl]
 800609c:	f7fe fc56 	bl	800494c <parsePreset>
 80060a0:	e7ca      	b.n	8006038 <main+0x290>
 80060a2:	bf00      	nop
 80060a4:	03010011 	.word	0x03010011
 80060a8:	e000ed00 	.word	0xe000ed00
 80060ac:	58020800 	.word	0x58020800
 80060b0:	58020000 	.word	0x58020000
 80060b4:	e0001000 	.word	0xe0001000
 80060b8:	c5acce55 	.word	0xc5acce55
 80060bc:	30000200 	.word	0x30000200
 80060c0:	40000001 	.word	0x40000001
 80060c4:	3c23d70a 	.word	0x3c23d70a
 80060c8:	2001702c 	.word	0x2001702c
 80060cc:	457a0000 	.word	0x457a0000
 80060d0:	469c4000 	.word	0x469c4000
 80060d4:	00000000 	.word	0x00000000
 80060d8:	20013034 	.word	0x20013034
 80060dc:	24058e80 	.word	0x24058e80
 80060e0:	2001515c 	.word	0x2001515c
 80060e4:	20019134 	.word	0x20019134
 80060e8:	200191cc 	.word	0x200191cc
 80060ec:	20012f48 	.word	0x20012f48
 80060f0:	20016c24 	.word	0x20016c24
 80060f4:	30000100 	.word	0x30000100
 80060f8:	200194d0 	.word	0x200194d0
 80060fc:	30000120 	.word	0x30000120
 8006100:	20019558 	.word	0x20019558
 8006104:	30000160 	.word	0x30000160
 8006108:	20019448 	.word	0x20019448
 800610c:	4f000000 	.word	0x4f000000
 8006110:	3000000d 	.word	0x3000000d
 8006114:	20016c20 	.word	0x20016c20
 8006118:	20012fa4 	.word	0x20012fa4
 800611c:	20016c2c 	.word	0x20016c2c
 8006120:	2001902c 	.word	0x2001902c
 8006124:	20000090 	.word	0x20000090
 8006128:	20016c28 	.word	0x20016c28
 800612c:	20015b14 	.word	0x20015b14
  __ASM volatile ("cpsid i" : : : "memory");
 8006130:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	4834      	ldr	r0, [pc, #208]	; (8006208 <main+0x460>)
 8006136:	9101      	str	r1, [sp, #4]
 8006138:	f013 f94e 	bl	80193d8 <memset>
  __IO uint8_t status = SD_PRESENT;
 800613c:	2301      	movs	r3, #1
 800613e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (BSP_PlatformIsDetected() != 0x0)
 8006142:	f008 fe29 	bl	800ed98 <BSP_PlatformIsDetected>
 8006146:	b110      	cbz	r0, 800614e <main+0x3a6>
    status = SD_NOT_PRESENT;
 8006148:	9901      	ldr	r1, [sp, #4]
 800614a:	f88d 100f 	strb.w	r1, [sp, #15]
  return status;
 800614e:	f89d 300f 	ldrb.w	r3, [sp, #15]
	if(BSP_SD_IsDetected())
 8006152:	b323      	cbz	r3, 800619e <main+0x3f6>
				diskBusy = 1;
 8006154:	2301      	movs	r3, #1
 8006156:	4a2d      	ldr	r2, [pc, #180]	; (800620c <main+0x464>)
 8006158:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 800615a:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <main+0x468>)
 800615c:	7818      	ldrb	r0, [r3, #0]
 800615e:	2863      	cmp	r0, #99	; 0x63
 8006160:	d901      	bls.n	8006166 <main+0x3be>
			        presetNumberToSave = 99;
 8006162:	2063      	movs	r0, #99	; 0x63
 8006164:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8006166:	220a      	movs	r2, #10
 8006168:	a905      	add	r1, sp, #20
 800616a:	f013 f925 	bl	80193b8 <itoa>
				int len = ((strlen(charBuf)));
 800616e:	a805      	add	r0, sp, #20
 8006170:	f7fa f8b2 	bl	80002d8 <strlen>
				if (len == 1)
 8006174:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8006176:	4602      	mov	r2, r0
				if (len == 1)
 8006178:	d018      	beq.n	80061ac <main+0x404>
					strcat(charBuf, ".ebp");
 800617a:	4926      	ldr	r1, [pc, #152]	; (8006214 <main+0x46c>)
 800617c:	ab05      	add	r3, sp, #20
 800617e:	6808      	ldr	r0, [r1, #0]
 8006180:	7909      	ldrb	r1, [r1, #4]
 8006182:	5098      	str	r0, [r3, r2]
 8006184:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8006186:	a808      	add	r0, sp, #32
 8006188:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 800618a:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 800618c:	a905      	add	r1, sp, #20
 800618e:	f013 f915 	bl	80193bc <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8006192:	220a      	movs	r2, #10
 8006194:	a908      	add	r1, sp, #32
 8006196:	4820      	ldr	r0, [pc, #128]	; (8006218 <main+0x470>)
 8006198:	f00b f97e 	bl	8011498 <f_open>
 800619c:	b1e8      	cbz	r0, 80061da <main+0x432>
	presetWaitingToWrite = 0;
 800619e:	2300      	movs	r3, #0
	diskBusy = 0;
 80061a0:	4a1a      	ldr	r2, [pc, #104]	; (800620c <main+0x464>)
	presetWaitingToWrite = 0;
 80061a2:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 80061a6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061a8:	b662      	cpsie	i
}
 80061aa:	e745      	b.n	8006038 <main+0x290>
					finalString[2] = charBuf[1];
 80061ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
					strcat(finalString, ".ebp");
 80061b0:	a808      	add	r0, sp, #32
					finalString[2] = charBuf[1];
 80061b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
					finalString[1] = charBuf[0];
 80061b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80061ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
					finalString[0] = '0';
 80061be:	2330      	movs	r3, #48	; 0x30
 80061c0:	f88d 3020 	strb.w	r3, [sp, #32]
					strcat(finalString, ".ebp");
 80061c4:	f7fa f888 	bl	80002d8 <strlen>
 80061c8:	4a12      	ldr	r2, [pc, #72]	; (8006214 <main+0x46c>)
 80061ca:	4603      	mov	r3, r0
 80061cc:	a908      	add	r1, sp, #32
 80061ce:	6810      	ldr	r0, [r2, #0]
 80061d0:	7912      	ldrb	r2, [r2, #4]
 80061d2:	50c8      	str	r0, [r1, r3]
 80061d4:	440b      	add	r3, r1
 80061d6:	711a      	strb	r2, [r3, #4]
 80061d8:	e7db      	b.n	8006192 <main+0x3ea>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 80061da:	465a      	mov	r2, fp
 80061dc:	ab04      	add	r3, sp, #16
 80061de:	490f      	ldr	r1, [pc, #60]	; (800621c <main+0x474>)
 80061e0:	480d      	ldr	r0, [pc, #52]	; (8006218 <main+0x470>)
 80061e2:	f00b fc11 	bl	8011a08 <f_write>
					f_close(&SDFile);
 80061e6:	480c      	ldr	r0, [pc, #48]	; (8006218 <main+0x470>)
 80061e8:	f00b fd68 	bl	8011cbc <f_close>
 80061ec:	e7d7      	b.n	800619e <main+0x3f6>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80061ee:	4d0c      	ldr	r5, [pc, #48]	; (8006220 <main+0x478>)
 80061f0:	f89a 1000 	ldrb.w	r1, [sl]
 80061f4:	6828      	ldr	r0, [r5, #0]
 80061f6:	f7fe fba9 	bl	800494c <parsePreset>
 80061fa:	e6fb      	b.n	8005ff4 <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80061fc:	2110      	movs	r1, #16
 80061fe:	4809      	ldr	r0, [pc, #36]	; (8006224 <main+0x47c>)
 8006200:	f002 facc 	bl	800879c <HAL_GPIO_WritePin>
 8006204:	e6e1      	b.n	8005fca <main+0x222>
 8006206:	bf00      	nop
 8006208:	30000000 	.word	0x30000000
 800620c:	20012fe0 	.word	0x20012fe0
 8006210:	20016c1e 	.word	0x20016c1e
 8006214:	0801b594 	.word	0x0801b594
 8006218:	20019818 	.word	0x20019818
 800621c:	30000200 	.word	0x30000200
 8006220:	20016c24 	.word	0x20016c24
 8006224:	58020400 	.word	0x58020400

08006228 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop

0800622c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800622c:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800622e:	4806      	ldr	r0, [pc, #24]	; (8006248 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8006230:	2300      	movs	r3, #0
 8006232:	4a06      	ldr	r2, [pc, #24]	; (800624c <MX_RNG_Init+0x20>)
 8006234:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006238:	f005 fa40 	bl	800b6bc <HAL_RNG_Init>
 800623c:	b900      	cbnz	r0, 8006240 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800623e:	bd08      	pop	{r3, pc}
 8006240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006244:	f7ff bff0 	b.w	8006228 <Error_Handler>
 8006248:	2001902c 	.word	0x2001902c
 800624c:	48021800 	.word	0x48021800

08006250 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006250:	b510      	push	{r4, lr}
 8006252:	b0b2      	sub	sp, #200	; 0xc8
 8006254:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006256:	22c0      	movs	r2, #192	; 0xc0
 8006258:	2100      	movs	r1, #0
 800625a:	a802      	add	r0, sp, #8
 800625c:	f013 f8bc 	bl	80193d8 <memset>
  if(rngHandle->Instance==RNG)
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <HAL_RNG_MspInit+0x54>)
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006268:	b032      	add	sp, #200	; 0xc8
 800626a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800626c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006270:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006272:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006274:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006278:	f004 f83a 	bl	800a2f0 <HAL_RCCEx_PeriphCLKConfig>
 800627c:	b970      	cbnz	r0, 800629c <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_RNG_MspInit+0x58>)
 8006280:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006288:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800628c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	9b01      	ldr	r3, [sp, #4]
}
 8006298:	b032      	add	sp, #200	; 0xc8
 800629a:	bd10      	pop	{r4, pc}
      Error_Handler();
 800629c:	f7ff ffc4 	bl	8006228 <Error_Handler>
 80062a0:	e7ed      	b.n	800627e <HAL_RNG_MspInit+0x2e>
 80062a2:	bf00      	nop
 80062a4:	48021800 	.word	0x48021800
 80062a8:	58024400 	.word	0x58024400

080062ac <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80062ac:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80062ae:	4818      	ldr	r0, [pc, #96]	; (8006310 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80062b0:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 80062b2:	4c18      	ldr	r4, [pc, #96]	; (8006314 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80062b4:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062b6:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80062b8:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80062ba:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062bc:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80062be:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80062c0:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 80062c2:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80062c6:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80062ca:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80062ce:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80062d0:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062d4:	f005 fc44 	bl	800bb60 <HAL_SAI_InitProtocol>
 80062d8:	b998      	cbnz	r0, 8006302 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 80062da:	480f      	ldr	r0, [pc, #60]	; (8006318 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80062dc:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 80062de:	4c0f      	ldr	r4, [pc, #60]	; (800631c <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062e0:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80062e2:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80062e4:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 80062e6:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80062e8:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80062ea:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062ec:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80062ee:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80062f0:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80062f2:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80062f4:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80062f6:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80062fa:	f005 fc31 	bl	800bb60 <HAL_SAI_InitProtocol>
 80062fe:	b918      	cbnz	r0, 8006308 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006300:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006302:	f7ff ff91 	bl	8006228 <Error_Handler>
 8006306:	e7e8      	b.n	80062da <MX_SAI1_Init+0x2e>
}
 8006308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800630c:	f7ff bf8c 	b.w	8006228 <Error_Handler>
 8006310:	20019134 	.word	0x20019134
 8006314:	40015804 	.word	0x40015804
 8006318:	200191cc 	.word	0x200191cc
 800631c:	40015824 	.word	0x40015824

08006320 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8006320:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8006322:	4a55      	ldr	r2, [pc, #340]	; (8006478 <HAL_SAI_MspInit+0x158>)
{
 8006324:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8006326:	6803      	ldr	r3, [r0, #0]
{
 8006328:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 800632a:	4293      	cmp	r3, r2
 800632c:	d004      	beq.n	8006338 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800632e:	4a53      	ldr	r2, [pc, #332]	; (800647c <HAL_SAI_MspInit+0x15c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d03f      	beq.n	80063b4 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8006334:	b009      	add	sp, #36	; 0x24
 8006336:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8006338:	4b51      	ldr	r3, [pc, #324]	; (8006480 <HAL_SAI_MspInit+0x160>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	2a00      	cmp	r2, #0
 800633e:	f000 8081 	beq.w	8006444 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8006342:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006344:	2074      	movs	r0, #116	; 0x74
 8006346:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006348:	4d4e      	ldr	r5, [pc, #312]	; (8006484 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 800634a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800634c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800634e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8006470 <HAL_SAI_MspInit+0x150>
 8006352:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006356:	a902      	add	r1, sp, #8
 8006358:	484b      	ldr	r0, [pc, #300]	; (8006488 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800635a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800635c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006360:	f002 f8cc 	bl	80084fc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006364:	4949      	ldr	r1, [pc, #292]	; (800648c <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006366:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006368:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800636a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800636c:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800636e:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006370:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006374:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006378:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800637a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800637e:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006388:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800638a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800638e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006396:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800639a:	2304      	movs	r3, #4
 800639c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800639e:	f000 fdef 	bl	8006f80 <HAL_DMA_Init>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d15c      	bne.n	8006460 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 80063a6:	4a35      	ldr	r2, [pc, #212]	; (800647c <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80063a8:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80063ae:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 80063b2:	d1bf      	bne.n	8006334 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 80063b4:	4b32      	ldr	r3, [pc, #200]	; (8006480 <HAL_SAI_MspInit+0x160>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	b3b2      	cbz	r2, 8006428 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 80063ba:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063bc:	2008      	movs	r0, #8
 80063be:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 80063c0:	4d33      	ldr	r5, [pc, #204]	; (8006490 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 80063c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80063c4:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063c6:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8006470 <HAL_SAI_MspInit+0x150>
 80063ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063ce:	a902      	add	r1, sp, #8
 80063d0:	482d      	ldr	r0, [pc, #180]	; (8006488 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80063d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063d4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80063d8:	f002 f890 	bl	80084fc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 80063dc:	492d      	ldr	r1, [pc, #180]	; (8006494 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80063de:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063e0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80063e2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80063e4:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80063e6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80063ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063f2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80063f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80063fe:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8006402:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006406:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800640a:	2304      	movs	r3, #4
 800640c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006410:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006414:	f000 fdb4 	bl	8006f80 <HAL_DMA_Init>
 8006418:	bb28      	cbnz	r0, 8006466 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 800641a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800641e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8006420:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8006424:	b009      	add	sp, #36	; 0x24
 8006426:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006428:	491b      	ldr	r1, [pc, #108]	; (8006498 <HAL_SAI_MspInit+0x178>)
 800642a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800642e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006432:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006436:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800643a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800643e:	9101      	str	r1, [sp, #4]
 8006440:	9901      	ldr	r1, [sp, #4]
 8006442:	e7ba      	b.n	80063ba <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006444:	4914      	ldr	r1, [pc, #80]	; (8006498 <HAL_SAI_MspInit+0x178>)
 8006446:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800644a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800644e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006452:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006456:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800645a:	9100      	str	r1, [sp, #0]
 800645c:	9900      	ldr	r1, [sp, #0]
 800645e:	e770      	b.n	8006342 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8006460:	f7ff fee2 	bl	8006228 <Error_Handler>
 8006464:	e79f      	b.n	80063a6 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8006466:	f7ff fedf 	bl	8006228 <Error_Handler>
 800646a:	e7d6      	b.n	800641a <HAL_SAI_MspInit+0xfa>
 800646c:	f3af 8000 	nop.w
 8006470:	00000000 	.word	0x00000000
 8006474:	00000003 	.word	0x00000003
 8006478:	40015804 	.word	0x40015804
 800647c:	40015824 	.word	0x40015824
 8006480:	20019040 	.word	0x20019040
 8006484:	20019044 	.word	0x20019044
 8006488:	58021000 	.word	0x58021000
 800648c:	40020028 	.word	0x40020028
 8006490:	200190bc 	.word	0x200190bc
 8006494:	40020040 	.word	0x40020040
 8006498:	58024400 	.word	0x58024400

0800649c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800649c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80064a0:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 80064a2:	4c07      	ldr	r4, [pc, #28]	; (80064c0 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80064a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 80064a8:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 80064aa:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80064ae:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 80064b2:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80064b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20019264 	.word	0x20019264
 80064c0:	52007000 	.word	0x52007000

080064c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80064c4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 80064c6:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_SD_MspInit+0xb0>)
{
 80064c8:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 80064ca:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064cc:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 80064ce:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d0:	9408      	str	r4, [sp, #32]
 80064d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80064d6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 80064da:	d001      	beq.n	80064e0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80064dc:	b00b      	add	sp, #44	; 0x2c
 80064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80064e0:	4b25      	ldr	r3, [pc, #148]	; (8006578 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80064e2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80064e4:	2601      	movs	r6, #1
 80064e6:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80064e8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ec:	4823      	ldr	r0, [pc, #140]	; (800657c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80064ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80064f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80064f6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80064fa:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80064fe:	9201      	str	r2, [sp, #4]
 8006500:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006502:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006506:	f042 0204 	orr.w	r2, r2, #4
 800650a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800650e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006512:	f002 0204 	and.w	r2, r2, #4
 8006516:	9202      	str	r2, [sp, #8]
 8006518:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800651a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800651e:	f042 0208 	orr.w	r2, r2, #8
 8006522:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006526:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800652a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800652e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006536:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006538:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800653a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800653c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006540:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006544:	f001 ffda 	bl	80084fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006548:	2302      	movs	r3, #2
 800654a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800654c:	a904      	add	r1, sp, #16
 800654e:	480c      	ldr	r0, [pc, #48]	; (8006580 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006550:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006556:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800655a:	f001 ffcf 	bl	80084fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800655e:	4622      	mov	r2, r4
 8006560:	4621      	mov	r1, r4
 8006562:	2031      	movs	r0, #49	; 0x31
 8006564:	f000 fb76 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006568:	2031      	movs	r0, #49	; 0x31
 800656a:	f000 fbb1 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
}
 800656e:	b00b      	add	sp, #44	; 0x2c
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006572:	bf00      	nop
 8006574:	52007000 	.word	0x52007000
 8006578:	58024400 	.word	0x58024400
 800657c:	58020800 	.word	0x58020800
 8006580:	58020c00 	.word	0x58020c00
 8006584:	00000000 	.word	0x00000000

08006588 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006588:	4813      	ldr	r0, [pc, #76]	; (80065d8 <MX_SPI1_Init+0x50>)
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800658c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80065d0 <MX_SPI1_Init+0x48>
{
 8006590:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8006592:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8006594:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006596:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8006598:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800659a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800659c:	ed80 7b08 	vstr	d7, [r0, #32]
 80065a0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80065a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80065a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80065ac:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80065b0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80065b4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80065b8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80065bc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80065c0:	f006 fd6e 	bl	800d0a0 <HAL_SPI_Init>
 80065c4:	b900      	cbnz	r0, 80065c8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80065c6:	bd08      	pop	{r3, pc}
 80065c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80065cc:	f7ff be2c 	b.w	8006228 <Error_Handler>
	...
 80065d8:	20019448 	.word	0x20019448
 80065dc:	40013000 	.word	0x40013000

080065e0 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80065e0:	4813      	ldr	r0, [pc, #76]	; (8006630 <MX_SPI2_Init+0x50>)
 80065e2:	4a14      	ldr	r2, [pc, #80]	; (8006634 <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006628 <MX_SPI2_Init+0x48>
{
 80065e8:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80065ea:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 80065ec:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065ee:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80065f0:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80065f2:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065f4:	ed80 7b08 	vstr	d7, [r0, #32]
 80065f8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80065fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006600:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006604:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006608:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800660c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006610:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006614:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006618:	f006 fd42 	bl	800d0a0 <HAL_SPI_Init>
 800661c:	b900      	cbnz	r0, 8006620 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800661e:	bd08      	pop	{r3, pc}
 8006620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006624:	f7ff be00 	b.w	8006228 <Error_Handler>
	...
 8006630:	200194d0 	.word	0x200194d0
 8006634:	40003800 	.word	0x40003800

08006638 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8006638:	4813      	ldr	r0, [pc, #76]	; (8006688 <MX_SPI5_Init+0x50>)
 800663a:	4a14      	ldr	r2, [pc, #80]	; (800668c <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800663c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006680 <MX_SPI5_Init+0x48>
{
 8006640:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8006642:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8006644:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006646:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8006648:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800664a:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800664c:	ed80 7b08 	vstr	d7, [r0, #32]
 8006650:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8006654:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006658:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800665c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006660:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006664:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006668:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800666c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006670:	f006 fd16 	bl	800d0a0 <HAL_SPI_Init>
 8006674:	b900      	cbnz	r0, 8006678 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006676:	bd08      	pop	{r3, pc}
 8006678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800667c:	f7ff bdd4 	b.w	8006228 <Error_Handler>
	...
 8006688:	20019558 	.word	0x20019558
 800668c:	40015000 	.word	0x40015000

08006690 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006690:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006692:	2400      	movs	r4, #0
{
 8006694:	b0bc      	sub	sp, #240	; 0xf0
 8006696:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006698:	22c0      	movs	r2, #192	; 0xc0
 800669a:	4621      	mov	r1, r4
 800669c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669e:	940a      	str	r4, [sp, #40]	; 0x28
 80066a0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80066a4:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066a8:	f012 fe96 	bl	80193d8 <memset>
  if(spiHandle->Instance==SPI1)
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	4a93      	ldr	r2, [pc, #588]	; (80068fc <HAL_SPI_MspInit+0x26c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d008      	beq.n	80066c6 <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80066b4:	4a92      	ldr	r2, [pc, #584]	; (8006900 <HAL_SPI_MspInit+0x270>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d054      	beq.n	8006764 <HAL_SPI_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 80066ba:	4a92      	ldr	r2, [pc, #584]	; (8006904 <HAL_SPI_MspInit+0x274>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	f000 80ae 	beq.w	800681e <HAL_SPI_MspInit+0x18e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80066c2:	b03c      	add	sp, #240	; 0xf0
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066c6:	4b90      	ldr	r3, [pc, #576]	; (8006908 <HAL_SPI_MspInit+0x278>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c8:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80066ca:	4e90      	ldr	r6, [pc, #576]	; (800690c <HAL_SPI_MspInit+0x27c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80066d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80066d8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80066dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80066e0:	9200      	str	r2, [sp, #0]
 80066e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80066f0:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80066fc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066fe:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006700:	4883      	ldr	r0, [pc, #524]	; (8006910 <HAL_SPI_MspInit+0x280>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006702:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006706:	2203      	movs	r2, #3
 8006708:	2305      	movs	r3, #5
 800670a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800670e:	f001 fef5 	bl	80084fc <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8006712:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8006714:	4a7f      	ldr	r2, [pc, #508]	; (8006914 <HAL_SPI_MspInit+0x284>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006716:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8006718:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800671a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800671e:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006720:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006724:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006726:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006728:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800672a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800672c:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006730:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006732:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006736:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006738:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800673c:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800673e:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8006740:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006742:	f000 fc1d 	bl	8006f80 <HAL_DMA_Init>
 8006746:	2800      	cmp	r0, #0
 8006748:	f040 80cb 	bne.w	80068e2 <HAL_SPI_MspInit+0x252>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800674c:	2200      	movs	r2, #0
 800674e:	2102      	movs	r1, #2
 8006750:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8006752:	67ee      	str	r6, [r5, #124]	; 0x7c
 8006754:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8006756:	f000 fa7d 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800675a:	2023      	movs	r0, #35	; 0x23
 800675c:	f000 fab8 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
}
 8006760:	b03c      	add	sp, #240	; 0xf0
 8006762:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006764:	4b68      	ldr	r3, [pc, #416]	; (8006908 <HAL_SPI_MspInit+0x278>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006766:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006768:	486b      	ldr	r0, [pc, #428]	; (8006918 <HAL_SPI_MspInit+0x288>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800676a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800676e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006772:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8006776:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800677a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800677e:	9202      	str	r2, [sp, #8]
 8006780:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006782:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006786:	f042 0202 	orr.w	r2, r2, #2
 800678a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800678e:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800679c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800679e:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067a0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80067a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ac:	f001 fea6 	bl	80084fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80067b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067b4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067b6:	4858      	ldr	r0, [pc, #352]	; (8006918 <HAL_SPI_MspInit+0x288>)
 80067b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80067ba:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80067bc:	4e57      	ldr	r6, [pc, #348]	; (800691c <HAL_SPI_MspInit+0x28c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80067be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2302      	movs	r3, #2
 80067c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ca:	f001 fe97 	bl	80084fc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80067ce:	4a54      	ldr	r2, [pc, #336]	; (8006920 <HAL_SPI_MspInit+0x290>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80067d0:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80067d2:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80067d4:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80067dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067e0:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80067e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80067e6:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80067e8:	2304      	movs	r3, #4
 80067ea:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80067ee:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067f0:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067f4:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80067f8:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80067fc:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80067fe:	f000 fbbf 	bl	8006f80 <HAL_DMA_Init>
 8006802:	2800      	cmp	r0, #0
 8006804:	d170      	bne.n	80068e8 <HAL_SPI_MspInit+0x258>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8006806:	2200      	movs	r2, #0
 8006808:	2103      	movs	r1, #3
 800680a:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800680c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800680e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8006810:	f000 fa20 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006814:	2024      	movs	r0, #36	; 0x24
 8006816:	f000 fa5b 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
}
 800681a:	b03c      	add	sp, #240	; 0xf0
 800681c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800681e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006822:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006824:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8006826:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800682a:	f003 fd61 	bl	800a2f0 <HAL_RCCEx_PeriphCLKConfig>
 800682e:	2800      	cmp	r0, #0
 8006830:	d160      	bne.n	80068f4 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006832:	4b35      	ldr	r3, [pc, #212]	; (8006908 <HAL_SPI_MspInit+0x278>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006834:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006836:	483b      	ldr	r0, [pc, #236]	; (8006924 <HAL_SPI_MspInit+0x294>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006838:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800683c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006840:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006844:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006848:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800684c:	9204      	str	r2, [sp, #16]
 800684e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006850:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006854:	f042 0220 	orr.w	r2, r2, #32
 8006858:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800685c:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006864:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800686c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800686e:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006870:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8006872:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006876:	2200      	movs	r2, #0
 8006878:	2302      	movs	r3, #2
 800687a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800687e:	f001 fe3d 	bl	80084fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006886:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006888:	a906      	add	r1, sp, #24
 800688a:	4826      	ldr	r0, [pc, #152]	; (8006924 <HAL_SPI_MspInit+0x294>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800688c:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800688e:	4c26      	ldr	r4, [pc, #152]	; (8006928 <HAL_SPI_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006890:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800689c:	f001 fe2e 	bl	80084fc <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80068a0:	4922      	ldr	r1, [pc, #136]	; (800692c <HAL_SPI_MspInit+0x29c>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80068a2:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068a4:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80068a6:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068a8:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80068aa:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80068b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068b6:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068ba:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068be:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80068c0:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80068c4:	f000 fb5c 	bl	8006f80 <HAL_DMA_Init>
 80068c8:	b988      	cbnz	r0, 80068ee <HAL_SPI_MspInit+0x25e>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80068ca:	2200      	movs	r2, #0
 80068cc:	2104      	movs	r1, #4
 80068ce:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80068d0:	67ec      	str	r4, [r5, #124]	; 0x7c
 80068d2:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80068d4:	f000 f9be 	bl	8006c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80068d8:	2055      	movs	r0, #85	; 0x55
 80068da:	f000 f9f9 	bl	8006cd0 <HAL_NVIC_EnableIRQ>
}
 80068de:	b03c      	add	sp, #240	; 0xf0
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80068e2:	f7ff fca1 	bl	8006228 <Error_Handler>
 80068e6:	e731      	b.n	800674c <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 80068e8:	f7ff fc9e 	bl	8006228 <Error_Handler>
 80068ec:	e78b      	b.n	8006806 <HAL_SPI_MspInit+0x176>
      Error_Handler();
 80068ee:	f7ff fc9b 	bl	8006228 <Error_Handler>
 80068f2:	e7ea      	b.n	80068ca <HAL_SPI_MspInit+0x23a>
      Error_Handler();
 80068f4:	f7ff fc98 	bl	8006228 <Error_Handler>
 80068f8:	e79b      	b.n	8006832 <HAL_SPI_MspInit+0x1a2>
 80068fa:	bf00      	nop
 80068fc:	40013000 	.word	0x40013000
 8006900:	40003800 	.word	0x40003800
 8006904:	40015000 	.word	0x40015000
 8006908:	58024400 	.word	0x58024400
 800690c:	200192e0 	.word	0x200192e0
 8006910:	58020000 	.word	0x58020000
 8006914:	40020070 	.word	0x40020070
 8006918:	58020400 	.word	0x58020400
 800691c:	20019358 	.word	0x20019358
 8006920:	40020010 	.word	0x40020010
 8006924:	58021400 	.word	0x58021400
 8006928:	200193d0 	.word	0x200193d0
 800692c:	40020058 	.word	0x40020058

08006930 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <HAL_MspInit+0x20>)
{
 8006932:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006934:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8006938:	f042 0202 	orr.w	r2, r2, #2
 800693c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8006940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800694c:	b002      	add	sp, #8
 800694e:	4770      	bx	lr
 8006950:	58024400 	.word	0x58024400

08006954 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006954:	e7fe      	b.n	8006954 <NMI_Handler>
 8006956:	bf00      	nop

08006958 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006958:	e7fe      	b.n	8006958 <HardFault_Handler>
 800695a:	bf00      	nop

0800695c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800695c:	e7fe      	b.n	800695c <MemManage_Handler>
 800695e:	bf00      	nop

08006960 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006960:	e7fe      	b.n	8006960 <BusFault_Handler>
 8006962:	bf00      	nop

08006964 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006964:	e7fe      	b.n	8006964 <UsageFault_Handler>
 8006966:	bf00      	nop

08006968 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop

0800696c <DebugMon_Handler>:
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <PendSV_Handler>:
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006974:	f000 b928 	b.w	8006bc8 <HAL_IncTick>

08006978 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <DMA1_Stream0_IRQHandler+0x8>)
 800697a:	f001 b955 	b.w	8007c28 <HAL_DMA_IRQHandler>
 800697e:	bf00      	nop
 8006980:	20019358 	.word	0x20019358

08006984 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <DMA1_Stream1_IRQHandler+0x8>)
 8006986:	f001 b94f 	b.w	8007c28 <HAL_DMA_IRQHandler>
 800698a:	bf00      	nop
 800698c:	20019044 	.word	0x20019044

08006990 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <DMA1_Stream2_IRQHandler+0x8>)
 8006992:	f001 b949 	b.w	8007c28 <HAL_DMA_IRQHandler>
 8006996:	bf00      	nop
 8006998:	200190bc 	.word	0x200190bc

0800699c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <DMA1_Stream3_IRQHandler+0x8>)
 800699e:	f001 b943 	b.w	8007c28 <HAL_DMA_IRQHandler>
 80069a2:	bf00      	nop
 80069a4:	200193d0 	.word	0x200193d0

080069a8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <DMA1_Stream4_IRQHandler+0x8>)
 80069aa:	f001 b93d 	b.w	8007c28 <HAL_DMA_IRQHandler>
 80069ae:	bf00      	nop
 80069b0:	200192e0 	.word	0x200192e0

080069b4 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <I2C2_EV_IRQHandler+0x8>)
 80069b6:	f002 b9e7 	b.w	8008d88 <HAL_I2C_EV_IRQHandler>
 80069ba:	bf00      	nop
 80069bc:	20012f48 	.word	0x20012f48

080069c0 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80069c0:	4801      	ldr	r0, [pc, #4]	; (80069c8 <I2C2_ER_IRQHandler+0x8>)
 80069c2:	f002 bd03 	b.w	80093cc <HAL_I2C_ER_IRQHandler>
 80069c6:	bf00      	nop
 80069c8:	20012f48 	.word	0x20012f48

080069cc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <SPI1_IRQHandler+0x8>)
 80069ce:	f006 bdb7 	b.w	800d540 <HAL_SPI_IRQHandler>
 80069d2:	bf00      	nop
 80069d4:	20019448 	.word	0x20019448

080069d8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <SPI2_IRQHandler+0x8>)
 80069da:	f006 bdb1 	b.w	800d540 <HAL_SPI_IRQHandler>
 80069de:	bf00      	nop
 80069e0:	200194d0 	.word	0x200194d0

080069e4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80069e4:	4801      	ldr	r0, [pc, #4]	; (80069ec <SDMMC1_IRQHandler+0x8>)
 80069e6:	f006 b94d 	b.w	800cc84 <HAL_SD_IRQHandler>
 80069ea:	bf00      	nop
 80069ec:	20019264 	.word	0x20019264

080069f0 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <SPI5_IRQHandler+0x8>)
 80069f2:	f006 bda5 	b.w	800d540 <HAL_SPI_IRQHandler>
 80069f6:	bf00      	nop
 80069f8:	20019558 	.word	0x20019558

080069fc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80069fc:	4927      	ldr	r1, [pc, #156]	; (8006a9c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80069fe:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <SystemInit+0xa4>)
{
 8006a00:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006a02:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	d805      	bhi.n	8006a24 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	f023 030f 	bic.w	r3, r3, #15
 8006a1e:	f043 0307 	orr.w	r3, r3, #7
 8006a22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006a24:	4b1f      	ldr	r3, [pc, #124]	; (8006aa4 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006a26:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006a28:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8006a2a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a2c:	481c      	ldr	r0, [pc, #112]	; (8006aa0 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8006a2e:	f041 0101 	orr.w	r1, r1, #1
 8006a32:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006a34:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006a36:	6819      	ldr	r1, [r3, #0]
 8006a38:	400a      	ands	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006a3c:	6803      	ldr	r3, [r0, #0]
 8006a3e:	071b      	lsls	r3, r3, #28
 8006a40:	d505      	bpl.n	8006a4e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006a42:	6803      	ldr	r3, [r0, #0]
 8006a44:	f023 030f 	bic.w	r3, r3, #15
 8006a48:	f043 0307 	orr.w	r3, r3, #7
 8006a4c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <SystemInit+0xa8>)
 8006a50:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006a52:	4916      	ldr	r1, [pc, #88]	; (8006aac <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8006a54:	4c16      	ldr	r4, [pc, #88]	; (8006ab0 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8006a56:	4817      	ldr	r0, [pc, #92]	; (8006ab4 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8006a58:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006a5a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006a5c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006a5e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8006a60:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8006a62:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006a66:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006a68:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006a6a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006a6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006a6e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006a70:	4c11      	ldr	r4, [pc, #68]	; (8006ab8 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8006a72:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006a76:	4911      	ldr	r1, [pc, #68]	; (8006abc <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8006a78:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006a7a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	4019      	ands	r1, r3
 8006a80:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006a84:	d203      	bcs.n	8006a8e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <SystemInit+0xc4>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <SystemInit+0xc8>)
 8006a90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006a94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000ed00 	.word	0xe000ed00
 8006aa0:	52002000 	.word	0x52002000
 8006aa4:	58024400 	.word	0x58024400
 8006aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8006aac:	01010280 	.word	0x01010280
 8006ab0:	02020200 	.word	0x02020200
 8006ab4:	01ff0000 	.word	0x01ff0000
 8006ab8:	5c001000 	.word	0x5c001000
 8006abc:	ffff0000 	.word	0xffff0000
 8006ac0:	51008000 	.word	0x51008000
 8006ac4:	52004000 	.word	0x52004000

08006ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006ace:	e003      	b.n	8006ad8 <LoopCopyDataInit>

08006ad0 <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006ad6:	3104      	adds	r1, #4

08006ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ad8:	480b      	ldr	r0, [pc, #44]	; (8006b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006ae0:	d3f6      	bcc.n	8006ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006ae4:	e002      	b.n	8006aec <LoopFillZerobss>

08006ae6 <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006ae8:	f842 3b04 	str.w	r3, [r2], #4

08006aec <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006af0:	d3f9      	bcc.n	8006ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006af2:	f7ff ff83 	bl	80069fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006af6:	f012 fc23 	bl	8019340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006afa:	f7ff f955 	bl	8005da8 <main>
  bx  lr
 8006afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006b04:	08033ac0 	.word	0x08033ac0
  ldr  r0, =_sdata
 8006b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006b0c:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 8006b10:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 8006b14:	20019c84 	.word	0x20019c84

08006b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b18:	e7fe      	b.n	8006b18 <ADC3_IRQHandler>
	...

08006b1c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <HAL_InitTick+0x40>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b90b      	cbnz	r3, 8006b26 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8006b22:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8006b24:	4770      	bx	lr
{
 8006b26:	b510      	push	{r4, lr}
 8006b28:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b2e:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <HAL_InitTick+0x44>)
 8006b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b34:	6810      	ldr	r0, [r2, #0]
 8006b36:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b3a:	f000 f8d7 	bl	8006cec <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b3e:	2c0f      	cmp	r4, #15
 8006b40:	d800      	bhi.n	8006b44 <HAL_InitTick+0x28>
 8006b42:	b108      	cbz	r0, 8006b48 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8006b44:	2001      	movs	r0, #1
}
 8006b46:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b50:	f000 f880 	bl	8006c54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b54:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <HAL_InitTick+0x48>)
 8006b56:	2000      	movs	r0, #0
 8006b58:	601c      	str	r4, [r3, #0]
}
 8006b5a:	bd10      	pop	{r4, pc}
 8006b5c:	2000009c 	.word	0x2000009c
 8006b60:	20000094 	.word	0x20000094
 8006b64:	200000a0 	.word	0x200000a0

08006b68 <HAL_Init>:
{
 8006b68:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b6a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b6c:	4c12      	ldr	r4, [pc, #72]	; (8006bb8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b6e:	f000 f85f 	bl	8006c30 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b72:	f003 f86d 	bl	8009c50 <HAL_RCC_GetSysClockFreq>
 8006b76:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <HAL_Init+0x54>)
 8006b78:	4911      	ldr	r1, [pc, #68]	; (8006bc0 <HAL_Init+0x58>)
 8006b7a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b7c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b7e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b82:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b86:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b88:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b8a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8006b8e:	490d      	ldr	r1, [pc, #52]	; (8006bc4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b90:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b94:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b96:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8006b9a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b9c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b9e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ba0:	f7ff ffbc 	bl	8006b1c <HAL_InitTick>
 8006ba4:	b110      	cbz	r0, 8006bac <HAL_Init+0x44>
    return HAL_ERROR;
 8006ba6:	2401      	movs	r4, #1
}
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd10      	pop	{r4, pc}
 8006bac:	4604      	mov	r4, r0
  HAL_MspInit();
 8006bae:	f7ff febf 	bl	8006930 <HAL_MspInit>
}
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000098 	.word	0x20000098
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	0801b59c 	.word	0x0801b59c
 8006bc4:	20000094 	.word	0x20000094

08006bc8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006bc8:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <HAL_IncTick+0x10>)
 8006bca:	4b04      	ldr	r3, [pc, #16]	; (8006bdc <HAL_IncTick+0x14>)
 8006bcc:	6811      	ldr	r1, [r2, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	440b      	add	r3, r1
 8006bd2:	6013      	str	r3, [r2, #0]
}
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	200195e0 	.word	0x200195e0
 8006bdc:	2000009c 	.word	0x2000009c

08006be0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006be0:	4b01      	ldr	r3, [pc, #4]	; (8006be8 <HAL_GetTick+0x8>)
 8006be2:	6818      	ldr	r0, [r3, #0]
}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	200195e0 	.word	0x200195e0

08006bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006bf0:	f7ff fff6 	bl	8006be0 <HAL_GetTick>
 8006bf4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bf6:	1c63      	adds	r3, r4, #1
 8006bf8:	d002      	beq.n	8006c00 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <HAL_Delay+0x20>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c00:	f7ff ffee 	bl	8006be0 <HAL_GetTick>
 8006c04:	1b43      	subs	r3, r0, r5
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	d3fa      	bcc.n	8006c00 <HAL_Delay+0x14>
  {
  }
}
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	2000009c 	.word	0x2000009c

08006c10 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <HAL_GetREVID+0x8>)
 8006c12:	6818      	ldr	r0, [r3, #0]
}
 8006c14:	0c00      	lsrs	r0, r0, #16
 8006c16:	4770      	bx	lr
 8006c18:	5c001000 	.word	0x5c001000

08006c1c <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8006c1c:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <HAL_SetFMCMemorySwappingConfig+0x10>)
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8006c24:	4318      	orrs	r0, r3
 8006c26:	6010      	str	r0, [r2, #0]
}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	52004000 	.word	0x52004000

08006c30 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c30:	4906      	ldr	r1, [pc, #24]	; (8006c4c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c32:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c36:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8006c38:	4b05      	ldr	r3, [pc, #20]	; (8006c50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c3a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c3c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c40:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c44:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8006c46:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006c48:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006c4a:	4770      	bx	lr
 8006c4c:	e000ed00 	.word	0xe000ed00
 8006c50:	05fa0000 	.word	0x05fa0000

08006c54 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c54:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c56:	b500      	push	{lr}
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c5e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c62:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c66:	f1be 0f04 	cmp.w	lr, #4
 8006c6a:	bf28      	it	cs
 8006c6c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c70:	f1bc 0f06 	cmp.w	ip, #6
 8006c74:	d91a      	bls.n	8006cac <HAL_NVIC_SetPriority+0x58>
 8006c76:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006c7c:	fa0c fc03 	lsl.w	ip, ip, r3
 8006c80:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8006c88:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c8a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006c8e:	ea21 010c 	bic.w	r1, r1, ip
 8006c92:	fa01 f103 	lsl.w	r1, r1, r3
 8006c96:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006c9a:	db0a      	blt.n	8006cb2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c9c:	0109      	lsls	r1, r1, #4
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <HAL_NVIC_SetPriority+0x74>)
 8006ca0:	b2c9      	uxtb	r1, r1
 8006ca2:	4403      	add	r3, r0
 8006ca4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cae:	4613      	mov	r3, r2
 8006cb0:	e7e8      	b.n	8006c84 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb2:	f000 000f 	and.w	r0, r0, #15
 8006cb6:	0109      	lsls	r1, r1, #4
 8006cb8:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <HAL_NVIC_SetPriority+0x78>)
 8006cba:	b2c9      	uxtb	r1, r1
 8006cbc:	4403      	add	r3, r0
 8006cbe:	7619      	strb	r1, [r3, #24]
 8006cc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cc4:	e000ed00 	.word	0xe000ed00
 8006cc8:	e000e100 	.word	0xe000e100
 8006ccc:	e000ecfc 	.word	0xe000ecfc

08006cd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	db07      	blt.n	8006ce4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	f000 011f 	and.w	r1, r0, #31
 8006cda:	4a03      	ldr	r2, [pc, #12]	; (8006ce8 <HAL_NVIC_EnableIRQ+0x18>)
 8006cdc:	0940      	lsrs	r0, r0, #5
 8006cde:	408b      	lsls	r3, r1
 8006ce0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	e000e100 	.word	0xe000e100

08006cec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cec:	1e43      	subs	r3, r0, #1
 8006cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf2:	d20c      	bcs.n	8006d0e <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cf4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cf8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfa:	4906      	ldr	r1, [pc, #24]	; (8006d14 <HAL_SYSTICK_Config+0x28>)
 8006cfc:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d00:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d02:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d04:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d08:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d0a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d0c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8006d0e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006d18:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006d1e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d22:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8006d28:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	e000ed00 	.word	0xe000ed00

08006d34 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006d34:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_MPU_Enable+0x1c>)
 8006d36:	f040 0001 	orr.w	r0, r0, #1
 8006d3a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006d46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d4a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006d4e:	4770      	bx	lr
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006d54:	7843      	ldrb	r3, [r0, #1]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <HAL_MPU_ConfigRegion+0x5c>)
 8006d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006d5c:	7803      	ldrb	r3, [r0, #0]
 8006d5e:	b313      	cbz	r3, 8006da6 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006d60:	6843      	ldr	r3, [r0, #4]
 8006d62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d66:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d68:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d6c:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006d6e:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d70:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d74:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d78:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d7a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d7c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d80:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d84:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d88:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d8a:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d8e:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006d96:	7a01      	ldrb	r1, [r0, #8]
 8006d98:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006d9c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006da0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8006da4:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8006da6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006daa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8006dae:	4770      	bx	lr
 8006db0:	e000ed00 	.word	0xe000ed00

08006db4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006db4:	4b34      	ldr	r3, [pc, #208]	; (8006e88 <DMA_CalcBaseAndBitshift+0xd4>)
 8006db6:	4935      	ldr	r1, [pc, #212]	; (8006e8c <DMA_CalcBaseAndBitshift+0xd8>)
{
 8006db8:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dba:	4d35      	ldr	r5, [pc, #212]	; (8006e90 <DMA_CalcBaseAndBitshift+0xdc>)
 8006dbc:	6802      	ldr	r2, [r0, #0]
 8006dbe:	4c35      	ldr	r4, [pc, #212]	; (8006e94 <DMA_CalcBaseAndBitshift+0xe0>)
 8006dc0:	42aa      	cmp	r2, r5
 8006dc2:	bf18      	it	ne
 8006dc4:	429a      	cmpne	r2, r3
 8006dc6:	bf0c      	ite	eq
 8006dc8:	2301      	moveq	r3, #1
 8006dca:	2300      	movne	r3, #0
 8006dcc:	428a      	cmp	r2, r1
 8006dce:	bf08      	it	eq
 8006dd0:	f043 0301 	orreq.w	r3, r3, #1
 8006dd4:	3130      	adds	r1, #48	; 0x30
 8006dd6:	42a2      	cmp	r2, r4
 8006dd8:	bf08      	it	eq
 8006dda:	f043 0301 	orreq.w	r3, r3, #1
 8006dde:	3430      	adds	r4, #48	; 0x30
 8006de0:	428a      	cmp	r2, r1
 8006de2:	bf08      	it	eq
 8006de4:	f043 0301 	orreq.w	r3, r3, #1
 8006de8:	3130      	adds	r1, #48	; 0x30
 8006dea:	42a2      	cmp	r2, r4
 8006dec:	bf08      	it	eq
 8006dee:	f043 0301 	orreq.w	r3, r3, #1
 8006df2:	3430      	adds	r4, #48	; 0x30
 8006df4:	428a      	cmp	r2, r1
 8006df6:	bf08      	it	eq
 8006df8:	f043 0301 	orreq.w	r3, r3, #1
 8006dfc:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8006e00:	42a2      	cmp	r2, r4
 8006e02:	bf08      	it	eq
 8006e04:	f043 0301 	orreq.w	r3, r3, #1
 8006e08:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8006e0c:	428a      	cmp	r2, r1
 8006e0e:	bf08      	it	eq
 8006e10:	f043 0301 	orreq.w	r3, r3, #1
 8006e14:	3130      	adds	r1, #48	; 0x30
 8006e16:	42a2      	cmp	r2, r4
 8006e18:	bf08      	it	eq
 8006e1a:	f043 0301 	orreq.w	r3, r3, #1
 8006e1e:	3430      	adds	r4, #48	; 0x30
 8006e20:	428a      	cmp	r2, r1
 8006e22:	bf08      	it	eq
 8006e24:	f043 0301 	orreq.w	r3, r3, #1
 8006e28:	3130      	adds	r1, #48	; 0x30
 8006e2a:	42a2      	cmp	r2, r4
 8006e2c:	bf08      	it	eq
 8006e2e:	f043 0301 	orreq.w	r3, r3, #1
 8006e32:	3430      	adds	r4, #48	; 0x30
 8006e34:	428a      	cmp	r2, r1
 8006e36:	bf08      	it	eq
 8006e38:	f043 0301 	orreq.w	r3, r3, #1
 8006e3c:	3130      	adds	r1, #48	; 0x30
 8006e3e:	42a2      	cmp	r2, r4
 8006e40:	bf08      	it	eq
 8006e42:	f043 0301 	orreq.w	r3, r3, #1
 8006e46:	428a      	cmp	r2, r1
 8006e48:	bf08      	it	eq
 8006e4a:	f043 0301 	orreq.w	r3, r3, #1
 8006e4e:	b913      	cbnz	r3, 8006e56 <DMA_CalcBaseAndBitshift+0xa2>
 8006e50:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <DMA_CalcBaseAndBitshift+0xe4>)
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d113      	bne.n	8006e7e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e56:	b2d3      	uxtb	r3, r2
 8006e58:	4910      	ldr	r1, [pc, #64]	; (8006e9c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e5a:	4c11      	ldr	r4, [pc, #68]	; (8006ea0 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e5c:	3b10      	subs	r3, #16
 8006e5e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8006e62:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e66:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e6a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e6e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e70:	bf88      	it	hi
 8006e72:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e74:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e76:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	bc30      	pop	{r4, r5}
 8006e7c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e7e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8006e82:	6583      	str	r3, [r0, #88]	; 0x58
 8006e84:	e7f8      	b.n	8006e78 <DMA_CalcBaseAndBitshift+0xc4>
 8006e86:	bf00      	nop
 8006e88:	40020010 	.word	0x40020010
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020028 	.word	0x40020028
 8006e94:	40020058 	.word	0x40020058
 8006e98:	400204b8 	.word	0x400204b8
 8006e9c:	aaaaaaab 	.word	0xaaaaaaab
 8006ea0:	0801b5ac 	.word	0x0801b5ac
 8006ea4:	fffffc00 	.word	0xfffffc00

08006ea8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ea8:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eaa:	4a29      	ldr	r2, [pc, #164]	; (8006f50 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8006eac:	4929      	ldr	r1, [pc, #164]	; (8006f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8006eae:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006eb0:	4d29      	ldr	r5, [pc, #164]	; (8006f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8006eb2:	4c2a      	ldr	r4, [pc, #168]	; (8006f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	bf18      	it	ne
 8006eb8:	4293      	cmpne	r3, r2
 8006eba:	bf0c      	ite	eq
 8006ebc:	2201      	moveq	r2, #1
 8006ebe:	2200      	movne	r2, #0
 8006ec0:	428b      	cmp	r3, r1
 8006ec2:	bf08      	it	eq
 8006ec4:	f042 0201 	orreq.w	r2, r2, #1
 8006ec8:	3128      	adds	r1, #40	; 0x28
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	bf08      	it	eq
 8006ece:	f042 0201 	orreq.w	r2, r2, #1
 8006ed2:	3428      	adds	r4, #40	; 0x28
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf08      	it	eq
 8006ed8:	f042 0201 	orreq.w	r2, r2, #1
 8006edc:	3128      	adds	r1, #40	; 0x28
 8006ede:	42a3      	cmp	r3, r4
 8006ee0:	bf08      	it	eq
 8006ee2:	f042 0201 	orreq.w	r2, r2, #1
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	bf08      	it	eq
 8006eea:	f042 0201 	orreq.w	r2, r2, #1
 8006eee:	b912      	cbnz	r2, 8006ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d113      	bne.n	8006f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4c1a      	ldr	r4, [pc, #104]	; (8006f64 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006efa:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006efc:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006efe:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f00:	4d1a      	ldr	r5, [pc, #104]	; (8006f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006f02:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006f06:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f08:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f0c:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f10:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006f16:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f18:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006f1a:	bc30      	pop	{r4, r5}
 8006f1c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f1e:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f20:	4913      	ldr	r1, [pc, #76]	; (8006f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f22:	4c14      	ldr	r4, [pc, #80]	; (8006f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f24:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f26:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f28:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f2a:	fba4 2302 	umull	r2, r3, r4, r2
 8006f2e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006f32:	d800      	bhi.n	8006f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8006f34:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f36:	4a10      	ldr	r2, [pc, #64]	; (8006f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f38:	f003 051f 	and.w	r5, r3, #31
 8006f3c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f3e:	4c0f      	ldr	r4, [pc, #60]	; (8006f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f40:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f42:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f44:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f46:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006f48:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006f4a:	6602      	str	r2, [r0, #96]	; 0x60
}
 8006f4c:	e7e5      	b.n	8006f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8006f4e:	bf00      	nop
 8006f50:	58025408 	.word	0x58025408
 8006f54:	58025430 	.word	0x58025430
 8006f58:	5802541c 	.word	0x5802541c
 8006f5c:	58025444 	.word	0x58025444
 8006f60:	58025494 	.word	0x58025494
 8006f64:	cccccccd 	.word	0xcccccccd
 8006f68:	16009600 	.word	0x16009600
 8006f6c:	58025880 	.word	0x58025880
 8006f70:	bffdfbf0 	.word	0xbffdfbf0
 8006f74:	aaaaaaab 	.word	0xaaaaaaab
 8006f78:	10008200 	.word	0x10008200
 8006f7c:	40020880 	.word	0x40020880

08006f80 <HAL_DMA_Init>:
{
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006f84:	f7ff fe2c 	bl	8006be0 <HAL_GetTick>
  if(hdma == NULL)
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	f000 816b 	beq.w	8007264 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	4605      	mov	r5, r0
 8006f92:	4ba3      	ldr	r3, [pc, #652]	; (8007220 <HAL_DMA_Init+0x2a0>)
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d048      	beq.n	800702a <HAL_DMA_Init+0xaa>
 8006f98:	3318      	adds	r3, #24
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d045      	beq.n	800702a <HAL_DMA_Init+0xaa>
 8006f9e:	3330      	adds	r3, #48	; 0x30
 8006fa0:	49a0      	ldr	r1, [pc, #640]	; (8007224 <HAL_DMA_Init+0x2a4>)
 8006fa2:	428a      	cmp	r2, r1
 8006fa4:	bf18      	it	ne
 8006fa6:	429a      	cmpne	r2, r3
 8006fa8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	428a      	cmp	r2, r1
 8006fb4:	bf08      	it	eq
 8006fb6:	f043 0301 	orreq.w	r3, r3, #1
 8006fba:	3118      	adds	r1, #24
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	bf08      	it	eq
 8006fc0:	f043 0301 	orreq.w	r3, r3, #1
 8006fc4:	3118      	adds	r1, #24
 8006fc6:	428a      	cmp	r2, r1
 8006fc8:	bf08      	it	eq
 8006fca:	f043 0301 	orreq.w	r3, r3, #1
 8006fce:	3118      	adds	r1, #24
 8006fd0:	428a      	cmp	r2, r1
 8006fd2:	bf08      	it	eq
 8006fd4:	f043 0301 	orreq.w	r3, r3, #1
 8006fd8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8006fdc:	428a      	cmp	r2, r1
 8006fde:	bf08      	it	eq
 8006fe0:	f043 0301 	orreq.w	r3, r3, #1
 8006fe4:	3118      	adds	r1, #24
 8006fe6:	428a      	cmp	r2, r1
 8006fe8:	bf08      	it	eq
 8006fea:	f043 0301 	orreq.w	r3, r3, #1
 8006fee:	3118      	adds	r1, #24
 8006ff0:	428a      	cmp	r2, r1
 8006ff2:	bf08      	it	eq
 8006ff4:	f043 0301 	orreq.w	r3, r3, #1
 8006ff8:	3118      	adds	r1, #24
 8006ffa:	428a      	cmp	r2, r1
 8006ffc:	bf08      	it	eq
 8006ffe:	f043 0301 	orreq.w	r3, r3, #1
 8007002:	3118      	adds	r1, #24
 8007004:	428a      	cmp	r2, r1
 8007006:	bf08      	it	eq
 8007008:	f043 0301 	orreq.w	r3, r3, #1
 800700c:	3118      	adds	r1, #24
 800700e:	428a      	cmp	r2, r1
 8007010:	bf08      	it	eq
 8007012:	f043 0301 	orreq.w	r3, r3, #1
 8007016:	3118      	adds	r1, #24
 8007018:	428a      	cmp	r2, r1
 800701a:	bf08      	it	eq
 800701c:	f043 0301 	orreq.w	r3, r3, #1
 8007020:	b91b      	cbnz	r3, 800702a <HAL_DMA_Init+0xaa>
 8007022:	4b81      	ldr	r3, [pc, #516]	; (8007228 <HAL_DMA_Init+0x2a8>)
 8007024:	429a      	cmp	r2, r3
 8007026:	f040 8184 	bne.w	8007332 <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 800702a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800702c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 800702e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8007032:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	e005      	b.n	800704c <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007040:	f7ff fdce 	bl	8006be0 <HAL_GetTick>
 8007044:	1b43      	subs	r3, r0, r5
 8007046:	2b05      	cmp	r3, #5
 8007048:	f200 80fe 	bhi.w	8007248 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	07d0      	lsls	r0, r2, #31
 8007052:	d4f5      	bmi.n	8007040 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8007054:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007058:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800705a:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800705c:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800705e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007060:	430a      	orrs	r2, r1
 8007062:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007064:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007066:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800706a:	69a1      	ldr	r1, [r4, #24]
 800706c:	ea42 0201 	orr.w	r2, r2, r1
 8007070:	69e1      	ldr	r1, [r4, #28]
 8007072:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800707c:	496b      	ldr	r1, [pc, #428]	; (800722c <HAL_DMA_Init+0x2ac>)
 800707e:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8007082:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007086:	d103      	bne.n	8007090 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007088:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 800708c:	4301      	orrs	r1, r0
 800708e:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007090:	4867      	ldr	r0, [pc, #412]	; (8007230 <HAL_DMA_Init+0x2b0>)
 8007092:	4968      	ldr	r1, [pc, #416]	; (8007234 <HAL_DMA_Init+0x2b4>)
 8007094:	6800      	ldr	r0, [r0, #0]
 8007096:	4001      	ands	r1, r0
 8007098:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800709c:	d30a      	bcc.n	80070b4 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800709e:	6861      	ldr	r1, [r4, #4]
 80070a0:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 80070a4:	281f      	cmp	r0, #31
 80070a6:	f240 80d6 	bls.w	8007256 <HAL_DMA_Init+0x2d6>
 80070aa:	394f      	subs	r1, #79	; 0x4f
 80070ac:	2903      	cmp	r1, #3
 80070ae:	d801      	bhi.n	80070b4 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80070b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80070b4:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80070b6:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 80070b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80070ba:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070bc:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070be:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80070c2:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070c6:	d10e      	bne.n	80070e6 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070c8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80070cc:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070ce:	b150      	cbz	r0, 80070e6 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070d0:	69a5      	ldr	r5, [r4, #24]
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	f040 8108 	bne.w	80072e8 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 80070d8:	2a01      	cmp	r2, #1
 80070da:	f000 8125 	beq.w	8007328 <HAL_DMA_Init+0x3a8>
 80070de:	f032 0202 	bics.w	r2, r2, #2
 80070e2:	f000 8109 	beq.w	80072f8 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80070e6:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070e8:	4620      	mov	r0, r4
 80070ea:	f7ff fe63 	bl	8006db4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80070f0:	233f      	movs	r3, #63	; 0x3f
 80070f2:	f002 021f 	and.w	r2, r2, #31
 80070f6:	4093      	lsls	r3, r2
 80070f8:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	4b48      	ldr	r3, [pc, #288]	; (8007220 <HAL_DMA_Init+0x2a0>)
 80070fe:	484e      	ldr	r0, [pc, #312]	; (8007238 <HAL_DMA_Init+0x2b8>)
 8007100:	4948      	ldr	r1, [pc, #288]	; (8007224 <HAL_DMA_Init+0x2a4>)
 8007102:	4282      	cmp	r2, r0
 8007104:	bf18      	it	ne
 8007106:	429a      	cmpne	r2, r3
 8007108:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	428a      	cmp	r2, r1
 8007114:	bf08      	it	eq
 8007116:	f043 0301 	orreq.w	r3, r3, #1
 800711a:	3130      	adds	r1, #48	; 0x30
 800711c:	4282      	cmp	r2, r0
 800711e:	bf08      	it	eq
 8007120:	f043 0301 	orreq.w	r3, r3, #1
 8007124:	3030      	adds	r0, #48	; 0x30
 8007126:	428a      	cmp	r2, r1
 8007128:	bf08      	it	eq
 800712a:	f043 0301 	orreq.w	r3, r3, #1
 800712e:	3130      	adds	r1, #48	; 0x30
 8007130:	4282      	cmp	r2, r0
 8007132:	bf08      	it	eq
 8007134:	f043 0301 	orreq.w	r3, r3, #1
 8007138:	3030      	adds	r0, #48	; 0x30
 800713a:	428a      	cmp	r2, r1
 800713c:	bf08      	it	eq
 800713e:	f043 0301 	orreq.w	r3, r3, #1
 8007142:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007146:	4282      	cmp	r2, r0
 8007148:	bf08      	it	eq
 800714a:	f043 0301 	orreq.w	r3, r3, #1
 800714e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007152:	428a      	cmp	r2, r1
 8007154:	bf08      	it	eq
 8007156:	f043 0301 	orreq.w	r3, r3, #1
 800715a:	3130      	adds	r1, #48	; 0x30
 800715c:	4282      	cmp	r2, r0
 800715e:	bf08      	it	eq
 8007160:	f043 0301 	orreq.w	r3, r3, #1
 8007164:	3030      	adds	r0, #48	; 0x30
 8007166:	428a      	cmp	r2, r1
 8007168:	bf08      	it	eq
 800716a:	f043 0301 	orreq.w	r3, r3, #1
 800716e:	3130      	adds	r1, #48	; 0x30
 8007170:	4282      	cmp	r2, r0
 8007172:	bf08      	it	eq
 8007174:	f043 0301 	orreq.w	r3, r3, #1
 8007178:	3030      	adds	r0, #48	; 0x30
 800717a:	428a      	cmp	r2, r1
 800717c:	bf08      	it	eq
 800717e:	f043 0301 	orreq.w	r3, r3, #1
 8007182:	3130      	adds	r1, #48	; 0x30
 8007184:	4282      	cmp	r2, r0
 8007186:	bf08      	it	eq
 8007188:	f043 0301 	orreq.w	r3, r3, #1
 800718c:	3030      	adds	r0, #48	; 0x30
 800718e:	428a      	cmp	r2, r1
 8007190:	bf08      	it	eq
 8007192:	f043 0301 	orreq.w	r3, r3, #1
 8007196:	4929      	ldr	r1, [pc, #164]	; (800723c <HAL_DMA_Init+0x2bc>)
 8007198:	4282      	cmp	r2, r0
 800719a:	bf08      	it	eq
 800719c:	f043 0301 	orreq.w	r3, r3, #1
 80071a0:	4827      	ldr	r0, [pc, #156]	; (8007240 <HAL_DMA_Init+0x2c0>)
 80071a2:	428a      	cmp	r2, r1
 80071a4:	bf08      	it	eq
 80071a6:	f043 0301 	orreq.w	r3, r3, #1
 80071aa:	3128      	adds	r1, #40	; 0x28
 80071ac:	4282      	cmp	r2, r0
 80071ae:	bf08      	it	eq
 80071b0:	f043 0301 	orreq.w	r3, r3, #1
 80071b4:	3028      	adds	r0, #40	; 0x28
 80071b6:	428a      	cmp	r2, r1
 80071b8:	bf08      	it	eq
 80071ba:	f043 0301 	orreq.w	r3, r3, #1
 80071be:	3128      	adds	r1, #40	; 0x28
 80071c0:	4282      	cmp	r2, r0
 80071c2:	bf08      	it	eq
 80071c4:	f043 0301 	orreq.w	r3, r3, #1
 80071c8:	3028      	adds	r0, #40	; 0x28
 80071ca:	428a      	cmp	r2, r1
 80071cc:	bf08      	it	eq
 80071ce:	f043 0301 	orreq.w	r3, r3, #1
 80071d2:	3128      	adds	r1, #40	; 0x28
 80071d4:	4282      	cmp	r2, r0
 80071d6:	bf08      	it	eq
 80071d8:	f043 0301 	orreq.w	r3, r3, #1
 80071dc:	428a      	cmp	r2, r1
 80071de:	bf08      	it	eq
 80071e0:	f043 0301 	orreq.w	r3, r3, #1
 80071e4:	b913      	cbnz	r3, 80071ec <HAL_DMA_Init+0x26c>
 80071e6:	4b17      	ldr	r3, [pc, #92]	; (8007244 <HAL_DMA_Init+0x2c4>)
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d113      	bne.n	8007214 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80071ec:	4620      	mov	r0, r4
 80071ee:	f7ff fe5b 	bl	8006ea8 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	2b80      	cmp	r3, #128	; 0x80
 80071f6:	d037      	beq.n	8007268 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80071f8:	7922      	ldrb	r2, [r4, #4]
 80071fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80071fc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071fe:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8007202:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007204:	6861      	ldr	r1, [r4, #4]
 8007206:	1e4b      	subs	r3, r1, #1
 8007208:	2b07      	cmp	r3, #7
 800720a:	d931      	bls.n	8007270 <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 800720c:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800720e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007212:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007214:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007216:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007218:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800721a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800721e:	bd38      	pop	{r3, r4, r5, pc}
 8007220:	40020010 	.word	0x40020010
 8007224:	40020040 	.word	0x40020040
 8007228:	400204b8 	.word	0x400204b8
 800722c:	fe10803f 	.word	0xfe10803f
 8007230:	5c001000 	.word	0x5c001000
 8007234:	ffff0000 	.word	0xffff0000
 8007238:	40020028 	.word	0x40020028
 800723c:	58025408 	.word	0x58025408
 8007240:	5802541c 	.word	0x5802541c
 8007244:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007248:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800724a:	2303      	movs	r3, #3
        return HAL_ERROR;
 800724c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800724e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007250:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007254:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007256:	496a      	ldr	r1, [pc, #424]	; (8007400 <HAL_DMA_Init+0x480>)
 8007258:	fa21 f000 	lsr.w	r0, r1, r0
 800725c:	07c1      	lsls	r1, r0, #31
 800725e:	f57f af29 	bpl.w	80070b4 <HAL_DMA_Init+0x134>
 8007262:	e725      	b.n	80070b0 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8007264:	2001      	movs	r0, #1
}
 8007266:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007268:	2300      	movs	r3, #0
 800726a:	461a      	mov	r2, r3
 800726c:	6063      	str	r3, [r4, #4]
 800726e:	e7c4      	b.n	80071fa <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007270:	6820      	ldr	r0, [r4, #0]
 8007272:	4a64      	ldr	r2, [pc, #400]	; (8007404 <HAL_DMA_Init+0x484>)
 8007274:	4d64      	ldr	r5, [pc, #400]	; (8007408 <HAL_DMA_Init+0x488>)
 8007276:	42a8      	cmp	r0, r5
 8007278:	bf18      	it	ne
 800727a:	4290      	cmpne	r0, r2
 800727c:	f105 0514 	add.w	r5, r5, #20
 8007280:	bf0c      	ite	eq
 8007282:	2201      	moveq	r2, #1
 8007284:	2200      	movne	r2, #0
 8007286:	42a8      	cmp	r0, r5
 8007288:	bf08      	it	eq
 800728a:	f042 0201 	orreq.w	r2, r2, #1
 800728e:	3514      	adds	r5, #20
 8007290:	42a8      	cmp	r0, r5
 8007292:	bf08      	it	eq
 8007294:	f042 0201 	orreq.w	r2, r2, #1
 8007298:	3514      	adds	r5, #20
 800729a:	42a8      	cmp	r0, r5
 800729c:	bf08      	it	eq
 800729e:	f042 0201 	orreq.w	r2, r2, #1
 80072a2:	3514      	adds	r5, #20
 80072a4:	42a8      	cmp	r0, r5
 80072a6:	bf08      	it	eq
 80072a8:	f042 0201 	orreq.w	r2, r2, #1
 80072ac:	3514      	adds	r5, #20
 80072ae:	42a8      	cmp	r0, r5
 80072b0:	bf08      	it	eq
 80072b2:	f042 0201 	orreq.w	r2, r2, #1
 80072b6:	b93a      	cbnz	r2, 80072c8 <HAL_DMA_Init+0x348>
 80072b8:	4a54      	ldr	r2, [pc, #336]	; (800740c <HAL_DMA_Init+0x48c>)
 80072ba:	4290      	cmp	r0, r2
 80072bc:	d004      	beq.n	80072c8 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072be:	4a54      	ldr	r2, [pc, #336]	; (8007410 <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072c0:	4854      	ldr	r0, [pc, #336]	; (8007414 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072c2:	440a      	add	r2, r1
 80072c4:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072c6:	e003      	b.n	80072d0 <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072c8:	4a53      	ldr	r2, [pc, #332]	; (8007418 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072ca:	4854      	ldr	r0, [pc, #336]	; (800741c <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072cc:	440a      	add	r2, r1
 80072ce:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072d0:	2101      	movs	r1, #1
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80072d6:	2100      	movs	r1, #0
 80072d8:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072dc:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80072de:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072e0:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	e795      	b.n	8007214 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072e8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80072ec:	d00e      	beq.n	800730c <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 80072ee:	2a02      	cmp	r2, #2
 80072f0:	d905      	bls.n	80072fe <HAL_DMA_Init+0x37e>
 80072f2:	2a03      	cmp	r2, #3
 80072f4:	f47f aef7 	bne.w	80070e6 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072f8:	01c2      	lsls	r2, r0, #7
 80072fa:	f57f aef4 	bpl.w	80070e6 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 80072fe:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007300:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8007302:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007304:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007306:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 800730c:	2a03      	cmp	r2, #3
 800730e:	f63f aeea 	bhi.w	80070e6 <HAL_DMA_Init+0x166>
 8007312:	a501      	add	r5, pc, #4	; (adr r5, 8007318 <HAL_DMA_Init+0x398>)
 8007314:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8007318:	080072ff 	.word	0x080072ff
 800731c:	080072f9 	.word	0x080072f9
 8007320:	080072ff 	.word	0x080072ff
 8007324:	08007329 	.word	0x08007329
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007328:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800732c:	f47f aedb 	bne.w	80070e6 <HAL_DMA_Init+0x166>
 8007330:	e7e5      	b.n	80072fe <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007332:	4b34      	ldr	r3, [pc, #208]	; (8007404 <HAL_DMA_Init+0x484>)
 8007334:	4834      	ldr	r0, [pc, #208]	; (8007408 <HAL_DMA_Init+0x488>)
 8007336:	493a      	ldr	r1, [pc, #232]	; (8007420 <HAL_DMA_Init+0x4a0>)
 8007338:	4282      	cmp	r2, r0
 800733a:	bf18      	it	ne
 800733c:	429a      	cmpne	r2, r3
 800733e:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8007342:	bf0c      	ite	eq
 8007344:	2301      	moveq	r3, #1
 8007346:	2300      	movne	r3, #0
 8007348:	428a      	cmp	r2, r1
 800734a:	bf08      	it	eq
 800734c:	f043 0301 	orreq.w	r3, r3, #1
 8007350:	3128      	adds	r1, #40	; 0x28
 8007352:	4282      	cmp	r2, r0
 8007354:	bf08      	it	eq
 8007356:	f043 0301 	orreq.w	r3, r3, #1
 800735a:	3028      	adds	r0, #40	; 0x28
 800735c:	428a      	cmp	r2, r1
 800735e:	bf08      	it	eq
 8007360:	f043 0301 	orreq.w	r3, r3, #1
 8007364:	3128      	adds	r1, #40	; 0x28
 8007366:	4282      	cmp	r2, r0
 8007368:	bf08      	it	eq
 800736a:	f043 0301 	orreq.w	r3, r3, #1
 800736e:	428a      	cmp	r2, r1
 8007370:	bf08      	it	eq
 8007372:	f043 0301 	orreq.w	r3, r3, #1
 8007376:	b913      	cbnz	r3, 800737e <HAL_DMA_Init+0x3fe>
 8007378:	4b24      	ldr	r3, [pc, #144]	; (800740c <HAL_DMA_Init+0x48c>)
 800737a:	429a      	cmp	r2, r3
 800737c:	d139      	bne.n	80073f2 <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
 800737e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007380:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007382:	4928      	ldr	r1, [pc, #160]	; (8007424 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007384:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007388:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800738c:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800738e:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007390:	68a3      	ldr	r3, [r4, #8]
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d02b      	beq.n	80073ee <HAL_DMA_Init+0x46e>
 8007396:	2b80      	cmp	r3, #128	; 0x80
 8007398:	bf0c      	ite	eq
 800739a:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 800739e:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80073a0:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80073a4:	08db      	lsrs	r3, r3, #3
 80073a6:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80073aa:	6965      	ldr	r5, [r4, #20]
 80073ac:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80073b0:	69a5      	ldr	r5, [r4, #24]
 80073b2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80073b6:	69e5      	ldr	r5, [r4, #28]
 80073b8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80073bc:	6a25      	ldr	r5, [r4, #32]
 80073be:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80073c2:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80073c4:	4918      	ldr	r1, [pc, #96]	; (8007428 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073c6:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073c8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80073ca:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	4b17      	ldr	r3, [pc, #92]	; (800742c <HAL_DMA_Init+0x4ac>)
 80073d0:	4411      	add	r1, r2
 80073d2:	fba3 2301 	umull	r2, r3, r3, r1
 80073d6:	091b      	lsrs	r3, r3, #4
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073dc:	f7ff fcea 	bl	8006db4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80073e2:	2301      	movs	r3, #1
 80073e4:	f002 021f 	and.w	r2, r2, #31
 80073e8:	4093      	lsls	r3, r2
 80073ea:	6043      	str	r3, [r0, #4]
 80073ec:	e685      	b.n	80070fa <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80073ee:	2010      	movs	r0, #16
 80073f0:	e7d6      	b.n	80073a0 <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80073f4:	2303      	movs	r3, #3
    return HAL_ERROR;
 80073f6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073f8:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80073fa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	c3c0003f 	.word	0xc3c0003f
 8007404:	58025408 	.word	0x58025408
 8007408:	5802541c 	.word	0x5802541c
 800740c:	58025494 	.word	0x58025494
 8007410:	1000823f 	.word	0x1000823f
 8007414:	40020940 	.word	0x40020940
 8007418:	1600963f 	.word	0x1600963f
 800741c:	58025940 	.word	0x58025940
 8007420:	58025430 	.word	0x58025430
 8007424:	fffe000f 	.word	0xfffe000f
 8007428:	a7fdabf8 	.word	0xa7fdabf8
 800742c:	cccccccd 	.word	0xcccccccd

08007430 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8007430:	2800      	cmp	r0, #0
 8007432:	f000 8270 	beq.w	8007916 <HAL_DMA_Start_IT+0x4e6>
 8007436:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007438:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800743c:	2801      	cmp	r0, #1
 800743e:	f000 826c 	beq.w	800791a <HAL_DMA_Start_IT+0x4ea>
 8007442:	2001      	movs	r0, #1
{
 8007444:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007446:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800744a:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800744e:	4284      	cmp	r4, r0
 8007450:	d008      	beq.n	8007464 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007452:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007456:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007458:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800745c:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8007460:	bc70      	pop	{r4, r5, r6}
 8007462:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8007464:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8007466:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800746a:	4ea2      	ldr	r6, [pc, #648]	; (80076f4 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 800746c:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007470:	2000      	movs	r0, #0
 8007472:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8007476:	6820      	ldr	r0, [r4, #0]
 8007478:	f020 0001 	bic.w	r0, r0, #1
 800747c:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800747e:	489e      	ldr	r0, [pc, #632]	; (80076f8 <HAL_DMA_Start_IT+0x2c8>)
 8007480:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007484:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007488:	42b4      	cmp	r4, r6
 800748a:	bf18      	it	ne
 800748c:	4284      	cmpne	r4, r0
 800748e:	f106 0618 	add.w	r6, r6, #24
 8007492:	bf0c      	ite	eq
 8007494:	2001      	moveq	r0, #1
 8007496:	2000      	movne	r0, #0
 8007498:	42b4      	cmp	r4, r6
 800749a:	bf08      	it	eq
 800749c:	f040 0001 	orreq.w	r0, r0, #1
 80074a0:	3618      	adds	r6, #24
 80074a2:	42b4      	cmp	r4, r6
 80074a4:	bf08      	it	eq
 80074a6:	f040 0001 	orreq.w	r0, r0, #1
 80074aa:	3618      	adds	r6, #24
 80074ac:	42b4      	cmp	r4, r6
 80074ae:	bf08      	it	eq
 80074b0:	f040 0001 	orreq.w	r0, r0, #1
 80074b4:	3618      	adds	r6, #24
 80074b6:	42b4      	cmp	r4, r6
 80074b8:	bf08      	it	eq
 80074ba:	f040 0001 	orreq.w	r0, r0, #1
 80074be:	3618      	adds	r6, #24
 80074c0:	42b4      	cmp	r4, r6
 80074c2:	bf08      	it	eq
 80074c4:	f040 0001 	orreq.w	r0, r0, #1
 80074c8:	3618      	adds	r6, #24
 80074ca:	42b4      	cmp	r4, r6
 80074cc:	bf08      	it	eq
 80074ce:	f040 0001 	orreq.w	r0, r0, #1
 80074d2:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80074d6:	42b4      	cmp	r4, r6
 80074d8:	bf08      	it	eq
 80074da:	f040 0001 	orreq.w	r0, r0, #1
 80074de:	3618      	adds	r6, #24
 80074e0:	42b4      	cmp	r4, r6
 80074e2:	bf08      	it	eq
 80074e4:	f040 0001 	orreq.w	r0, r0, #1
 80074e8:	3618      	adds	r6, #24
 80074ea:	42b4      	cmp	r4, r6
 80074ec:	bf08      	it	eq
 80074ee:	f040 0001 	orreq.w	r0, r0, #1
 80074f2:	3618      	adds	r6, #24
 80074f4:	42b4      	cmp	r4, r6
 80074f6:	bf08      	it	eq
 80074f8:	f040 0001 	orreq.w	r0, r0, #1
 80074fc:	3618      	adds	r6, #24
 80074fe:	42b4      	cmp	r4, r6
 8007500:	bf08      	it	eq
 8007502:	f040 0001 	orreq.w	r0, r0, #1
 8007506:	3618      	adds	r6, #24
 8007508:	42b4      	cmp	r4, r6
 800750a:	bf08      	it	eq
 800750c:	f040 0001 	orreq.w	r0, r0, #1
 8007510:	3618      	adds	r6, #24
 8007512:	42b4      	cmp	r4, r6
 8007514:	bf08      	it	eq
 8007516:	f040 0001 	orreq.w	r0, r0, #1
 800751a:	3618      	adds	r6, #24
 800751c:	42b4      	cmp	r4, r6
 800751e:	bf08      	it	eq
 8007520:	f040 0001 	orreq.w	r0, r0, #1
 8007524:	4e75      	ldr	r6, [pc, #468]	; (80076fc <HAL_DMA_Start_IT+0x2cc>)
 8007526:	42b4      	cmp	r4, r6
 8007528:	bf08      	it	eq
 800752a:	f040 0001 	orreq.w	r0, r0, #1
 800752e:	3614      	adds	r6, #20
 8007530:	42b4      	cmp	r4, r6
 8007532:	bf08      	it	eq
 8007534:	f040 0001 	orreq.w	r0, r0, #1
 8007538:	3614      	adds	r6, #20
 800753a:	42b4      	cmp	r4, r6
 800753c:	bf08      	it	eq
 800753e:	f040 0001 	orreq.w	r0, r0, #1
 8007542:	3614      	adds	r6, #20
 8007544:	42b4      	cmp	r4, r6
 8007546:	bf08      	it	eq
 8007548:	f040 0001 	orreq.w	r0, r0, #1
 800754c:	3614      	adds	r6, #20
 800754e:	42b4      	cmp	r4, r6
 8007550:	bf08      	it	eq
 8007552:	f040 0001 	orreq.w	r0, r0, #1
 8007556:	3614      	adds	r6, #20
 8007558:	42b4      	cmp	r4, r6
 800755a:	bf08      	it	eq
 800755c:	f040 0001 	orreq.w	r0, r0, #1
 8007560:	3614      	adds	r6, #20
 8007562:	42b4      	cmp	r4, r6
 8007564:	bf08      	it	eq
 8007566:	f040 0001 	orreq.w	r0, r0, #1
 800756a:	b910      	cbnz	r0, 8007572 <HAL_DMA_Start_IT+0x142>
 800756c:	4864      	ldr	r0, [pc, #400]	; (8007700 <HAL_DMA_Start_IT+0x2d0>)
 800756e:	4284      	cmp	r4, r0
 8007570:	d10a      	bne.n	8007588 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007572:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8007576:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8007578:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 800757c:	b110      	cbz	r0, 8007584 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800757e:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8007582:	6044      	str	r4, [r0, #4]
 8007584:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007588:	485b      	ldr	r0, [pc, #364]	; (80076f8 <HAL_DMA_Start_IT+0x2c8>)
 800758a:	4e5a      	ldr	r6, [pc, #360]	; (80076f4 <HAL_DMA_Start_IT+0x2c4>)
 800758c:	42b4      	cmp	r4, r6
 800758e:	bf18      	it	ne
 8007590:	4284      	cmpne	r4, r0
 8007592:	f106 0618 	add.w	r6, r6, #24
 8007596:	bf0c      	ite	eq
 8007598:	2001      	moveq	r0, #1
 800759a:	2000      	movne	r0, #0
 800759c:	42b4      	cmp	r4, r6
 800759e:	bf08      	it	eq
 80075a0:	f040 0001 	orreq.w	r0, r0, #1
 80075a4:	3618      	adds	r6, #24
 80075a6:	42b4      	cmp	r4, r6
 80075a8:	bf08      	it	eq
 80075aa:	f040 0001 	orreq.w	r0, r0, #1
 80075ae:	3618      	adds	r6, #24
 80075b0:	42b4      	cmp	r4, r6
 80075b2:	bf08      	it	eq
 80075b4:	f040 0001 	orreq.w	r0, r0, #1
 80075b8:	3618      	adds	r6, #24
 80075ba:	42b4      	cmp	r4, r6
 80075bc:	bf08      	it	eq
 80075be:	f040 0001 	orreq.w	r0, r0, #1
 80075c2:	3618      	adds	r6, #24
 80075c4:	42b4      	cmp	r4, r6
 80075c6:	bf08      	it	eq
 80075c8:	f040 0001 	orreq.w	r0, r0, #1
 80075cc:	3618      	adds	r6, #24
 80075ce:	42b4      	cmp	r4, r6
 80075d0:	bf08      	it	eq
 80075d2:	f040 0001 	orreq.w	r0, r0, #1
 80075d6:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80075da:	42b4      	cmp	r4, r6
 80075dc:	bf08      	it	eq
 80075de:	f040 0001 	orreq.w	r0, r0, #1
 80075e2:	3618      	adds	r6, #24
 80075e4:	42b4      	cmp	r4, r6
 80075e6:	bf08      	it	eq
 80075e8:	f040 0001 	orreq.w	r0, r0, #1
 80075ec:	3618      	adds	r6, #24
 80075ee:	42b4      	cmp	r4, r6
 80075f0:	bf08      	it	eq
 80075f2:	f040 0001 	orreq.w	r0, r0, #1
 80075f6:	3618      	adds	r6, #24
 80075f8:	42b4      	cmp	r4, r6
 80075fa:	bf08      	it	eq
 80075fc:	f040 0001 	orreq.w	r0, r0, #1
 8007600:	3618      	adds	r6, #24
 8007602:	42b4      	cmp	r4, r6
 8007604:	bf08      	it	eq
 8007606:	f040 0001 	orreq.w	r0, r0, #1
 800760a:	3618      	adds	r6, #24
 800760c:	42b4      	cmp	r4, r6
 800760e:	bf08      	it	eq
 8007610:	f040 0001 	orreq.w	r0, r0, #1
 8007614:	3618      	adds	r6, #24
 8007616:	42b4      	cmp	r4, r6
 8007618:	bf08      	it	eq
 800761a:	f040 0001 	orreq.w	r0, r0, #1
 800761e:	b918      	cbnz	r0, 8007628 <HAL_DMA_Start_IT+0x1f8>
 8007620:	4838      	ldr	r0, [pc, #224]	; (8007704 <HAL_DMA_Start_IT+0x2d4>)
 8007622:	4284      	cmp	r4, r0
 8007624:	f040 817b 	bne.w	800791e <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007628:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800762c:	f000 041f 	and.w	r4, r0, #31
 8007630:	203f      	movs	r0, #63	; 0x3f
 8007632:	40a0      	lsls	r0, r4
 8007634:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007636:	f8dc 4000 	ldr.w	r4, [ip]
 800763a:	6820      	ldr	r0, [r4, #0]
 800763c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8007640:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007642:	f8dc 0000 	ldr.w	r0, [ip]
 8007646:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007648:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800764c:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800764e:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007652:	f000 815b 	beq.w	800790c <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007656:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007658:	f8dc 3000 	ldr.w	r3, [ip]
 800765c:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765e:	f8dc 4000 	ldr.w	r4, [ip]
 8007662:	4b25      	ldr	r3, [pc, #148]	; (80076f8 <HAL_DMA_Start_IT+0x2c8>)
 8007664:	4923      	ldr	r1, [pc, #140]	; (80076f4 <HAL_DMA_Start_IT+0x2c4>)
 8007666:	4a28      	ldr	r2, [pc, #160]	; (8007708 <HAL_DMA_Start_IT+0x2d8>)
 8007668:	428c      	cmp	r4, r1
 800766a:	bf18      	it	ne
 800766c:	429c      	cmpne	r4, r3
 800766e:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007672:	bf0c      	ite	eq
 8007674:	2301      	moveq	r3, #1
 8007676:	2300      	movne	r3, #0
 8007678:	4294      	cmp	r4, r2
 800767a:	bf08      	it	eq
 800767c:	f043 0301 	orreq.w	r3, r3, #1
 8007680:	3230      	adds	r2, #48	; 0x30
 8007682:	428c      	cmp	r4, r1
 8007684:	bf08      	it	eq
 8007686:	f043 0301 	orreq.w	r3, r3, #1
 800768a:	3130      	adds	r1, #48	; 0x30
 800768c:	4294      	cmp	r4, r2
 800768e:	bf08      	it	eq
 8007690:	f043 0301 	orreq.w	r3, r3, #1
 8007694:	3230      	adds	r2, #48	; 0x30
 8007696:	428c      	cmp	r4, r1
 8007698:	bf08      	it	eq
 800769a:	f043 0301 	orreq.w	r3, r3, #1
 800769e:	3130      	adds	r1, #48	; 0x30
 80076a0:	4294      	cmp	r4, r2
 80076a2:	bf08      	it	eq
 80076a4:	f043 0301 	orreq.w	r3, r3, #1
 80076a8:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80076ac:	428c      	cmp	r4, r1
 80076ae:	bf08      	it	eq
 80076b0:	f043 0301 	orreq.w	r3, r3, #1
 80076b4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80076b8:	4294      	cmp	r4, r2
 80076ba:	bf08      	it	eq
 80076bc:	f043 0301 	orreq.w	r3, r3, #1
 80076c0:	3230      	adds	r2, #48	; 0x30
 80076c2:	428c      	cmp	r4, r1
 80076c4:	bf08      	it	eq
 80076c6:	f043 0301 	orreq.w	r3, r3, #1
 80076ca:	3130      	adds	r1, #48	; 0x30
 80076cc:	4294      	cmp	r4, r2
 80076ce:	bf08      	it	eq
 80076d0:	f043 0301 	orreq.w	r3, r3, #1
 80076d4:	3230      	adds	r2, #48	; 0x30
 80076d6:	428c      	cmp	r4, r1
 80076d8:	bf08      	it	eq
 80076da:	f043 0301 	orreq.w	r3, r3, #1
 80076de:	3130      	adds	r1, #48	; 0x30
 80076e0:	4294      	cmp	r4, r2
 80076e2:	bf08      	it	eq
 80076e4:	f043 0301 	orreq.w	r3, r3, #1
 80076e8:	3230      	adds	r2, #48	; 0x30
 80076ea:	428c      	cmp	r4, r1
 80076ec:	bf08      	it	eq
 80076ee:	f043 0301 	orreq.w	r3, r3, #1
 80076f2:	e00b      	b.n	800770c <HAL_DMA_Start_IT+0x2dc>
 80076f4:	40020028 	.word	0x40020028
 80076f8:	40020010 	.word	0x40020010
 80076fc:	58025408 	.word	0x58025408
 8007700:	58025494 	.word	0x58025494
 8007704:	400204b8 	.word	0x400204b8
 8007708:	40020040 	.word	0x40020040
 800770c:	4294      	cmp	r4, r2
 800770e:	bf08      	it	eq
 8007710:	f043 0301 	orreq.w	r3, r3, #1
 8007714:	b91b      	cbnz	r3, 800771e <HAL_DMA_Start_IT+0x2ee>
 8007716:	4b9b      	ldr	r3, [pc, #620]	; (8007984 <HAL_DMA_Start_IT+0x554>)
 8007718:	429c      	cmp	r4, r3
 800771a:	f040 8143 	bne.w	80079a4 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	f023 031e 	bic.w	r3, r3, #30
 8007724:	f043 0316 	orr.w	r3, r3, #22
 8007728:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800772a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800772e:	b12b      	cbz	r3, 800773c <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007730:	f8dc 2000 	ldr.w	r2, [ip]
 8007734:	6813      	ldr	r3, [r2, #0]
 8007736:	f043 0308 	orr.w	r3, r3, #8
 800773a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800773c:	f8dc 4000 	ldr.w	r4, [ip]
 8007740:	4b91      	ldr	r3, [pc, #580]	; (8007988 <HAL_DMA_Start_IT+0x558>)
 8007742:	4992      	ldr	r1, [pc, #584]	; (800798c <HAL_DMA_Start_IT+0x55c>)
 8007744:	4a92      	ldr	r2, [pc, #584]	; (8007990 <HAL_DMA_Start_IT+0x560>)
 8007746:	428c      	cmp	r4, r1
 8007748:	bf18      	it	ne
 800774a:	429c      	cmpne	r4, r3
 800774c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	4294      	cmp	r4, r2
 8007758:	bf08      	it	eq
 800775a:	f043 0301 	orreq.w	r3, r3, #1
 800775e:	3230      	adds	r2, #48	; 0x30
 8007760:	428c      	cmp	r4, r1
 8007762:	bf08      	it	eq
 8007764:	f043 0301 	orreq.w	r3, r3, #1
 8007768:	3130      	adds	r1, #48	; 0x30
 800776a:	4294      	cmp	r4, r2
 800776c:	bf08      	it	eq
 800776e:	f043 0301 	orreq.w	r3, r3, #1
 8007772:	3230      	adds	r2, #48	; 0x30
 8007774:	428c      	cmp	r4, r1
 8007776:	bf08      	it	eq
 8007778:	f043 0301 	orreq.w	r3, r3, #1
 800777c:	3130      	adds	r1, #48	; 0x30
 800777e:	4294      	cmp	r4, r2
 8007780:	bf08      	it	eq
 8007782:	f043 0301 	orreq.w	r3, r3, #1
 8007786:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800778a:	428c      	cmp	r4, r1
 800778c:	bf08      	it	eq
 800778e:	f043 0301 	orreq.w	r3, r3, #1
 8007792:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007796:	4294      	cmp	r4, r2
 8007798:	bf08      	it	eq
 800779a:	f043 0301 	orreq.w	r3, r3, #1
 800779e:	3230      	adds	r2, #48	; 0x30
 80077a0:	428c      	cmp	r4, r1
 80077a2:	bf08      	it	eq
 80077a4:	f043 0301 	orreq.w	r3, r3, #1
 80077a8:	3130      	adds	r1, #48	; 0x30
 80077aa:	4294      	cmp	r4, r2
 80077ac:	bf08      	it	eq
 80077ae:	f043 0301 	orreq.w	r3, r3, #1
 80077b2:	3230      	adds	r2, #48	; 0x30
 80077b4:	428c      	cmp	r4, r1
 80077b6:	bf08      	it	eq
 80077b8:	f043 0301 	orreq.w	r3, r3, #1
 80077bc:	3130      	adds	r1, #48	; 0x30
 80077be:	4294      	cmp	r4, r2
 80077c0:	bf08      	it	eq
 80077c2:	f043 0301 	orreq.w	r3, r3, #1
 80077c6:	3230      	adds	r2, #48	; 0x30
 80077c8:	428c      	cmp	r4, r1
 80077ca:	bf08      	it	eq
 80077cc:	f043 0301 	orreq.w	r3, r3, #1
 80077d0:	3130      	adds	r1, #48	; 0x30
 80077d2:	4294      	cmp	r4, r2
 80077d4:	bf08      	it	eq
 80077d6:	f043 0301 	orreq.w	r3, r3, #1
 80077da:	4a6e      	ldr	r2, [pc, #440]	; (8007994 <HAL_DMA_Start_IT+0x564>)
 80077dc:	428c      	cmp	r4, r1
 80077de:	bf08      	it	eq
 80077e0:	f043 0301 	orreq.w	r3, r3, #1
 80077e4:	496c      	ldr	r1, [pc, #432]	; (8007998 <HAL_DMA_Start_IT+0x568>)
 80077e6:	4294      	cmp	r4, r2
 80077e8:	bf08      	it	eq
 80077ea:	f043 0301 	orreq.w	r3, r3, #1
 80077ee:	3228      	adds	r2, #40	; 0x28
 80077f0:	428c      	cmp	r4, r1
 80077f2:	bf08      	it	eq
 80077f4:	f043 0301 	orreq.w	r3, r3, #1
 80077f8:	3128      	adds	r1, #40	; 0x28
 80077fa:	4294      	cmp	r4, r2
 80077fc:	bf08      	it	eq
 80077fe:	f043 0301 	orreq.w	r3, r3, #1
 8007802:	3228      	adds	r2, #40	; 0x28
 8007804:	428c      	cmp	r4, r1
 8007806:	bf08      	it	eq
 8007808:	f043 0301 	orreq.w	r3, r3, #1
 800780c:	3128      	adds	r1, #40	; 0x28
 800780e:	4294      	cmp	r4, r2
 8007810:	bf08      	it	eq
 8007812:	f043 0301 	orreq.w	r3, r3, #1
 8007816:	3228      	adds	r2, #40	; 0x28
 8007818:	428c      	cmp	r4, r1
 800781a:	bf08      	it	eq
 800781c:	f043 0301 	orreq.w	r3, r3, #1
 8007820:	4294      	cmp	r4, r2
 8007822:	bf08      	it	eq
 8007824:	f043 0301 	orreq.w	r3, r3, #1
 8007828:	b913      	cbnz	r3, 8007830 <HAL_DMA_Start_IT+0x400>
 800782a:	4b5c      	ldr	r3, [pc, #368]	; (800799c <HAL_DMA_Start_IT+0x56c>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d111      	bne.n	8007854 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007830:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	03d2      	lsls	r2, r2, #15
 8007838:	d503      	bpl.n	8007842 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007840:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8007842:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8007846:	b11b      	cbz	r3, 8007850 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8007854:	4b4c      	ldr	r3, [pc, #304]	; (8007988 <HAL_DMA_Start_IT+0x558>)
 8007856:	494d      	ldr	r1, [pc, #308]	; (800798c <HAL_DMA_Start_IT+0x55c>)
 8007858:	4a4d      	ldr	r2, [pc, #308]	; (8007990 <HAL_DMA_Start_IT+0x560>)
 800785a:	428c      	cmp	r4, r1
 800785c:	bf18      	it	ne
 800785e:	429c      	cmpne	r4, r3
 8007860:	484f      	ldr	r0, [pc, #316]	; (80079a0 <HAL_DMA_Start_IT+0x570>)
 8007862:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	4294      	cmp	r4, r2
 800786e:	bf08      	it	eq
 8007870:	f043 0301 	orreq.w	r3, r3, #1
 8007874:	3230      	adds	r2, #48	; 0x30
 8007876:	4284      	cmp	r4, r0
 8007878:	bf08      	it	eq
 800787a:	f043 0301 	orreq.w	r3, r3, #1
 800787e:	3060      	adds	r0, #96	; 0x60
 8007880:	4294      	cmp	r4, r2
 8007882:	bf08      	it	eq
 8007884:	f043 0301 	orreq.w	r3, r3, #1
 8007888:	3230      	adds	r2, #48	; 0x30
 800788a:	428c      	cmp	r4, r1
 800788c:	bf08      	it	eq
 800788e:	f043 0301 	orreq.w	r3, r3, #1
 8007892:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8007896:	4294      	cmp	r4, r2
 8007898:	bf08      	it	eq
 800789a:	f043 0301 	orreq.w	r3, r3, #1
 800789e:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80078a2:	4284      	cmp	r4, r0
 80078a4:	bf08      	it	eq
 80078a6:	f043 0301 	orreq.w	r3, r3, #1
 80078aa:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80078ae:	4294      	cmp	r4, r2
 80078b0:	bf08      	it	eq
 80078b2:	f043 0301 	orreq.w	r3, r3, #1
 80078b6:	3230      	adds	r2, #48	; 0x30
 80078b8:	428c      	cmp	r4, r1
 80078ba:	bf08      	it	eq
 80078bc:	f043 0301 	orreq.w	r3, r3, #1
 80078c0:	3160      	adds	r1, #96	; 0x60
 80078c2:	4294      	cmp	r4, r2
 80078c4:	bf08      	it	eq
 80078c6:	f043 0301 	orreq.w	r3, r3, #1
 80078ca:	3230      	adds	r2, #48	; 0x30
 80078cc:	4284      	cmp	r4, r0
 80078ce:	bf08      	it	eq
 80078d0:	f043 0301 	orreq.w	r3, r3, #1
 80078d4:	4294      	cmp	r4, r2
 80078d6:	bf08      	it	eq
 80078d8:	f043 0301 	orreq.w	r3, r3, #1
 80078dc:	3230      	adds	r2, #48	; 0x30
 80078de:	428c      	cmp	r4, r1
 80078e0:	bf08      	it	eq
 80078e2:	f043 0301 	orreq.w	r3, r3, #1
 80078e6:	4294      	cmp	r4, r2
 80078e8:	bf08      	it	eq
 80078ea:	f043 0301 	orreq.w	r3, r3, #1
 80078ee:	b933      	cbnz	r3, 80078fe <HAL_DMA_Start_IT+0x4ce>
 80078f0:	3060      	adds	r0, #96	; 0x60
 80078f2:	1a20      	subs	r0, r4, r0
 80078f4:	fab0 f080 	clz	r0, r0
 80078f8:	0940      	lsrs	r0, r0, #5
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d03d      	beq.n	800797a <HAL_DMA_Start_IT+0x54a>
 80078fe:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007900:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	6023      	str	r3, [r4, #0]
}
 8007908:	bc70      	pop	{r4, r5, r6}
 800790a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800790c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800790e:	f8dc 3000 	ldr.w	r3, [ip]
 8007912:	60d9      	str	r1, [r3, #12]
 8007914:	e6a3      	b.n	800765e <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8007916:	2001      	movs	r0, #1
 8007918:	4770      	bx	lr
  __HAL_LOCK(hdma);
 800791a:	2002      	movs	r0, #2
}
 800791c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800791e:	481d      	ldr	r0, [pc, #116]	; (8007994 <HAL_DMA_Start_IT+0x564>)
 8007920:	4e1d      	ldr	r6, [pc, #116]	; (8007998 <HAL_DMA_Start_IT+0x568>)
 8007922:	42b4      	cmp	r4, r6
 8007924:	bf18      	it	ne
 8007926:	4284      	cmpne	r4, r0
 8007928:	f106 0614 	add.w	r6, r6, #20
 800792c:	bf0c      	ite	eq
 800792e:	2001      	moveq	r0, #1
 8007930:	2000      	movne	r0, #0
 8007932:	42b4      	cmp	r4, r6
 8007934:	bf08      	it	eq
 8007936:	f040 0001 	orreq.w	r0, r0, #1
 800793a:	3614      	adds	r6, #20
 800793c:	42b4      	cmp	r4, r6
 800793e:	bf08      	it	eq
 8007940:	f040 0001 	orreq.w	r0, r0, #1
 8007944:	3614      	adds	r6, #20
 8007946:	42b4      	cmp	r4, r6
 8007948:	bf08      	it	eq
 800794a:	f040 0001 	orreq.w	r0, r0, #1
 800794e:	3614      	adds	r6, #20
 8007950:	42b4      	cmp	r4, r6
 8007952:	bf08      	it	eq
 8007954:	f040 0001 	orreq.w	r0, r0, #1
 8007958:	3614      	adds	r6, #20
 800795a:	42b4      	cmp	r4, r6
 800795c:	bf08      	it	eq
 800795e:	f040 0001 	orreq.w	r0, r0, #1
 8007962:	b910      	cbnz	r0, 800796a <HAL_DMA_Start_IT+0x53a>
 8007964:	480d      	ldr	r0, [pc, #52]	; (800799c <HAL_DMA_Start_IT+0x56c>)
 8007966:	4284      	cmp	r4, r0
 8007968:	d11c      	bne.n	80079a4 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800796a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800796e:	f000 041f 	and.w	r4, r0, #31
 8007972:	2001      	movs	r0, #1
 8007974:	40a0      	lsls	r0, r4
 8007976:	6068      	str	r0, [r5, #4]
 8007978:	e663      	b.n	8007642 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	e56d      	b.n	8007460 <HAL_DMA_Start_IT+0x30>
 8007984:	400204b8 	.word	0x400204b8
 8007988:	40020010 	.word	0x40020010
 800798c:	40020028 	.word	0x40020028
 8007990:	40020040 	.word	0x40020040
 8007994:	58025408 	.word	0x58025408
 8007998:	5802541c 	.word	0x5802541c
 800799c:	58025494 	.word	0x58025494
 80079a0:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	f023 030e 	bic.w	r3, r3, #14
 80079aa:	f043 030a 	orr.w	r3, r3, #10
 80079ae:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80079b0:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f43f aec1 	beq.w	800773c <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80079ba:	f8dc 2000 	ldr.w	r2, [ip]
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	f043 0304 	orr.w	r3, r3, #4
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e6b9      	b.n	800773c <HAL_DMA_Start_IT+0x30c>

080079c8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d065      	beq.n	8007a98 <HAL_DMA_Abort_IT+0xd0>
{
 80079cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079d0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80079d4:	4603      	mov	r3, r0
 80079d6:	2a02      	cmp	r2, #2
 80079d8:	d159      	bne.n	8007a8e <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079da:	6801      	ldr	r1, [r0, #0]
 80079dc:	4883      	ldr	r0, [pc, #524]	; (8007bec <HAL_DMA_Abort_IT+0x224>)
 80079de:	4281      	cmp	r1, r0
 80079e0:	d04b      	beq.n	8007a7a <HAL_DMA_Abort_IT+0xb2>
 80079e2:	4c83      	ldr	r4, [pc, #524]	; (8007bf0 <HAL_DMA_Abort_IT+0x228>)
 80079e4:	42a1      	cmp	r1, r4
 80079e6:	d048      	beq.n	8007a7a <HAL_DMA_Abort_IT+0xb2>
 80079e8:	f8df a228 	ldr.w	sl, [pc, #552]	; 8007c14 <HAL_DMA_Abort_IT+0x24c>
 80079ec:	f8df b214 	ldr.w	fp, [pc, #532]	; 8007c04 <HAL_DMA_Abort_IT+0x23c>
 80079f0:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007c18 <HAL_DMA_Abort_IT+0x250>
 80079f4:	4559      	cmp	r1, fp
 80079f6:	bf18      	it	ne
 80079f8:	4551      	cmpne	r1, sl
 80079fa:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8007c1c <HAL_DMA_Abort_IT+0x254>
 80079fe:	f8df e220 	ldr.w	lr, [pc, #544]	; 8007c20 <HAL_DMA_Abort_IT+0x258>
 8007a02:	bf0c      	ite	eq
 8007a04:	2201      	moveq	r2, #1
 8007a06:	2200      	movne	r2, #0
 8007a08:	f8df c218 	ldr.w	ip, [pc, #536]	; 8007c24 <HAL_DMA_Abort_IT+0x25c>
 8007a0c:	4549      	cmp	r1, r9
 8007a0e:	bf08      	it	eq
 8007a10:	f042 0201 	orreq.w	r2, r2, #1
 8007a14:	4d77      	ldr	r5, [pc, #476]	; (8007bf4 <HAL_DMA_Abort_IT+0x22c>)
 8007a16:	4f78      	ldr	r7, [pc, #480]	; (8007bf8 <HAL_DMA_Abort_IT+0x230>)
 8007a18:	4541      	cmp	r1, r8
 8007a1a:	bf08      	it	eq
 8007a1c:	f042 0201 	orreq.w	r2, r2, #1
 8007a20:	4e76      	ldr	r6, [pc, #472]	; (8007bfc <HAL_DMA_Abort_IT+0x234>)
 8007a22:	4571      	cmp	r1, lr
 8007a24:	bf08      	it	eq
 8007a26:	f042 0201 	orreq.w	r2, r2, #1
 8007a2a:	4561      	cmp	r1, ip
 8007a2c:	bf08      	it	eq
 8007a2e:	f042 0201 	orreq.w	r2, r2, #1
 8007a32:	42a9      	cmp	r1, r5
 8007a34:	bf08      	it	eq
 8007a36:	f042 0201 	orreq.w	r2, r2, #1
 8007a3a:	3518      	adds	r5, #24
 8007a3c:	42a9      	cmp	r1, r5
 8007a3e:	bf08      	it	eq
 8007a40:	f042 0201 	orreq.w	r2, r2, #1
 8007a44:	3518      	adds	r5, #24
 8007a46:	42a9      	cmp	r1, r5
 8007a48:	bf08      	it	eq
 8007a4a:	f042 0201 	orreq.w	r2, r2, #1
 8007a4e:	3518      	adds	r5, #24
 8007a50:	42a9      	cmp	r1, r5
 8007a52:	bf08      	it	eq
 8007a54:	f042 0201 	orreq.w	r2, r2, #1
 8007a58:	3548      	adds	r5, #72	; 0x48
 8007a5a:	42b9      	cmp	r1, r7
 8007a5c:	bf08      	it	eq
 8007a5e:	f042 0201 	orreq.w	r2, r2, #1
 8007a62:	42b1      	cmp	r1, r6
 8007a64:	bf08      	it	eq
 8007a66:	f042 0201 	orreq.w	r2, r2, #1
 8007a6a:	42a9      	cmp	r1, r5
 8007a6c:	bf08      	it	eq
 8007a6e:	f042 0201 	orreq.w	r2, r2, #1
 8007a72:	b912      	cbnz	r2, 8007a7a <HAL_DMA_Abort_IT+0xb2>
 8007a74:	4a62      	ldr	r2, [pc, #392]	; (8007c00 <HAL_DMA_Abort_IT+0x238>)
 8007a76:	4291      	cmp	r1, r2
 8007a78:	d110      	bne.n	8007a9c <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a7a:	2204      	movs	r2, #4
  return HAL_OK;
 8007a7c:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8007a82:	680b      	ldr	r3, [r1, #0]
 8007a84:	f023 0301 	bic.w	r3, r3, #1
 8007a88:	600b      	str	r3, [r1, #0]
}
 8007a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a8e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007a90:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a92:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8007a98:	2001      	movs	r0, #1
}
 8007a9a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007a9c:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a9e:	4c54      	ldr	r4, [pc, #336]	; (8007bf0 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007aa0:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007aa4:	4857      	ldr	r0, [pc, #348]	; (8007c04 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007aa6:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8007aa8:	6819      	ldr	r1, [r3, #0]
 8007aaa:	680a      	ldr	r2, [r1, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ab2:	4a4e      	ldr	r2, [pc, #312]	; (8007bec <HAL_DMA_Abort_IT+0x224>)
 8007ab4:	6819      	ldr	r1, [r3, #0]
 8007ab6:	42a1      	cmp	r1, r4
 8007ab8:	bf18      	it	ne
 8007aba:	4291      	cmpne	r1, r2
 8007abc:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8007ac0:	bf0c      	ite	eq
 8007ac2:	2201      	moveq	r2, #1
 8007ac4:	2200      	movne	r2, #0
 8007ac6:	4281      	cmp	r1, r0
 8007ac8:	bf08      	it	eq
 8007aca:	f042 0201 	orreq.w	r2, r2, #1
 8007ace:	3030      	adds	r0, #48	; 0x30
 8007ad0:	42a1      	cmp	r1, r4
 8007ad2:	bf08      	it	eq
 8007ad4:	f042 0201 	orreq.w	r2, r2, #1
 8007ad8:	3430      	adds	r4, #48	; 0x30
 8007ada:	4281      	cmp	r1, r0
 8007adc:	bf08      	it	eq
 8007ade:	f042 0201 	orreq.w	r2, r2, #1
 8007ae2:	3030      	adds	r0, #48	; 0x30
 8007ae4:	42a1      	cmp	r1, r4
 8007ae6:	bf08      	it	eq
 8007ae8:	f042 0201 	orreq.w	r2, r2, #1
 8007aec:	3430      	adds	r4, #48	; 0x30
 8007aee:	4281      	cmp	r1, r0
 8007af0:	bf08      	it	eq
 8007af2:	f042 0201 	orreq.w	r2, r2, #1
 8007af6:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007afa:	42a1      	cmp	r1, r4
 8007afc:	bf08      	it	eq
 8007afe:	f042 0201 	orreq.w	r2, r2, #1
 8007b02:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007b06:	4281      	cmp	r1, r0
 8007b08:	bf08      	it	eq
 8007b0a:	f042 0201 	orreq.w	r2, r2, #1
 8007b0e:	3030      	adds	r0, #48	; 0x30
 8007b10:	42a1      	cmp	r1, r4
 8007b12:	bf08      	it	eq
 8007b14:	f042 0201 	orreq.w	r2, r2, #1
 8007b18:	3430      	adds	r4, #48	; 0x30
 8007b1a:	4281      	cmp	r1, r0
 8007b1c:	bf08      	it	eq
 8007b1e:	f042 0201 	orreq.w	r2, r2, #1
 8007b22:	3030      	adds	r0, #48	; 0x30
 8007b24:	42a1      	cmp	r1, r4
 8007b26:	bf08      	it	eq
 8007b28:	f042 0201 	orreq.w	r2, r2, #1
 8007b2c:	3430      	adds	r4, #48	; 0x30
 8007b2e:	4281      	cmp	r1, r0
 8007b30:	bf08      	it	eq
 8007b32:	f042 0201 	orreq.w	r2, r2, #1
 8007b36:	3030      	adds	r0, #48	; 0x30
 8007b38:	42a1      	cmp	r1, r4
 8007b3a:	bf08      	it	eq
 8007b3c:	f042 0201 	orreq.w	r2, r2, #1
 8007b40:	3430      	adds	r4, #48	; 0x30
 8007b42:	4281      	cmp	r1, r0
 8007b44:	bf08      	it	eq
 8007b46:	f042 0201 	orreq.w	r2, r2, #1
 8007b4a:	482f      	ldr	r0, [pc, #188]	; (8007c08 <HAL_DMA_Abort_IT+0x240>)
 8007b4c:	42a1      	cmp	r1, r4
 8007b4e:	bf08      	it	eq
 8007b50:	f042 0201 	orreq.w	r2, r2, #1
 8007b54:	4c2d      	ldr	r4, [pc, #180]	; (8007c0c <HAL_DMA_Abort_IT+0x244>)
 8007b56:	4281      	cmp	r1, r0
 8007b58:	bf08      	it	eq
 8007b5a:	f042 0201 	orreq.w	r2, r2, #1
 8007b5e:	3028      	adds	r0, #40	; 0x28
 8007b60:	42a1      	cmp	r1, r4
 8007b62:	bf08      	it	eq
 8007b64:	f042 0201 	orreq.w	r2, r2, #1
 8007b68:	3428      	adds	r4, #40	; 0x28
 8007b6a:	4281      	cmp	r1, r0
 8007b6c:	bf08      	it	eq
 8007b6e:	f042 0201 	orreq.w	r2, r2, #1
 8007b72:	3028      	adds	r0, #40	; 0x28
 8007b74:	42a1      	cmp	r1, r4
 8007b76:	bf08      	it	eq
 8007b78:	f042 0201 	orreq.w	r2, r2, #1
 8007b7c:	3428      	adds	r4, #40	; 0x28
 8007b7e:	4281      	cmp	r1, r0
 8007b80:	bf08      	it	eq
 8007b82:	f042 0201 	orreq.w	r2, r2, #1
 8007b86:	3028      	adds	r0, #40	; 0x28
 8007b88:	42a1      	cmp	r1, r4
 8007b8a:	bf08      	it	eq
 8007b8c:	f042 0201 	orreq.w	r2, r2, #1
 8007b90:	4281      	cmp	r1, r0
 8007b92:	bf08      	it	eq
 8007b94:	f042 0201 	orreq.w	r2, r2, #1
 8007b98:	b912      	cbnz	r2, 8007ba0 <HAL_DMA_Abort_IT+0x1d8>
 8007b9a:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <HAL_DMA_Abort_IT+0x248>)
 8007b9c:	4291      	cmp	r1, r2
 8007b9e:	d117      	bne.n	8007bd0 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ba0:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ba2:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ba4:	6801      	ldr	r1, [r0, #0]
 8007ba6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007baa:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bac:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bb0:	f001 011f 	and.w	r1, r1, #31
 8007bb4:	408a      	lsls	r2, r1
 8007bb6:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bb8:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8007bbc:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8007bbe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007bc0:	b132      	cbz	r2, 8007bd0 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bc2:	6811      	ldr	r1, [r2, #0]
 8007bc4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007bc8:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bca:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8007bce:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8007bd0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8007bd2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8007bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8007bd6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8007bda:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8007bde:	b11a      	cbz	r2, 8007be8 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8007be0:	4618      	mov	r0, r3
 8007be2:	4790      	blx	r2
  return HAL_OK;
 8007be4:	4620      	mov	r0, r4
 8007be6:	e755      	b.n	8007a94 <HAL_DMA_Abort_IT+0xcc>
 8007be8:	4610      	mov	r0, r2
 8007bea:	e753      	b.n	8007a94 <HAL_DMA_Abort_IT+0xcc>
 8007bec:	40020010 	.word	0x40020010
 8007bf0:	40020028 	.word	0x40020028
 8007bf4:	40020410 	.word	0x40020410
 8007bf8:	40020470 	.word	0x40020470
 8007bfc:	40020488 	.word	0x40020488
 8007c00:	400204b8 	.word	0x400204b8
 8007c04:	40020040 	.word	0x40020040
 8007c08:	58025408 	.word	0x58025408
 8007c0c:	5802541c 	.word	0x5802541c
 8007c10:	58025494 	.word	0x58025494
 8007c14:	40020058 	.word	0x40020058
 8007c18:	40020070 	.word	0x40020070
 8007c1c:	40020088 	.word	0x40020088
 8007c20:	400200a0 	.word	0x400200a0
 8007c24:	400200b8 	.word	0x400200b8

08007c28 <HAL_DMA_IRQHandler>:
{
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8007c2c:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c2e:	4b9e      	ldr	r3, [pc, #632]	; (8007ea8 <HAL_DMA_IRQHandler+0x280>)
{
 8007c30:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c32:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c34:	681e      	ldr	r6, [r3, #0]
{
 8007c36:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8007c38:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007c3a:	6803      	ldr	r3, [r0, #0]
 8007c3c:	4a9b      	ldr	r2, [pc, #620]	; (8007eac <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 8007c3e:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007c40:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8007c42:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007c44:	d048      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0xb0>
 8007c46:	3218      	adds	r2, #24
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d045      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0xb0>
 8007c4c:	3218      	adds	r2, #24
 8007c4e:	4f98      	ldr	r7, [pc, #608]	; (8007eb0 <HAL_DMA_IRQHandler+0x288>)
 8007c50:	42bb      	cmp	r3, r7
 8007c52:	bf18      	it	ne
 8007c54:	4293      	cmpne	r3, r2
 8007c56:	f107 0718 	add.w	r7, r7, #24
 8007c5a:	bf0c      	ite	eq
 8007c5c:	2201      	moveq	r2, #1
 8007c5e:	2200      	movne	r2, #0
 8007c60:	42bb      	cmp	r3, r7
 8007c62:	bf08      	it	eq
 8007c64:	f042 0201 	orreq.w	r2, r2, #1
 8007c68:	3718      	adds	r7, #24
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	bf08      	it	eq
 8007c6e:	f042 0201 	orreq.w	r2, r2, #1
 8007c72:	3718      	adds	r7, #24
 8007c74:	42bb      	cmp	r3, r7
 8007c76:	bf08      	it	eq
 8007c78:	f042 0201 	orreq.w	r2, r2, #1
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	42bb      	cmp	r3, r7
 8007c80:	bf08      	it	eq
 8007c82:	f042 0201 	orreq.w	r2, r2, #1
 8007c86:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	bf08      	it	eq
 8007c8e:	f042 0201 	orreq.w	r2, r2, #1
 8007c92:	3718      	adds	r7, #24
 8007c94:	42bb      	cmp	r3, r7
 8007c96:	bf08      	it	eq
 8007c98:	f042 0201 	orreq.w	r2, r2, #1
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	42bb      	cmp	r3, r7
 8007ca0:	bf08      	it	eq
 8007ca2:	f042 0201 	orreq.w	r2, r2, #1
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	42bb      	cmp	r3, r7
 8007caa:	bf08      	it	eq
 8007cac:	f042 0201 	orreq.w	r2, r2, #1
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	42bb      	cmp	r3, r7
 8007cb4:	bf08      	it	eq
 8007cb6:	f042 0201 	orreq.w	r2, r2, #1
 8007cba:	3718      	adds	r7, #24
 8007cbc:	42bb      	cmp	r3, r7
 8007cbe:	bf08      	it	eq
 8007cc0:	f042 0201 	orreq.w	r2, r2, #1
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	42bb      	cmp	r3, r7
 8007cc8:	bf08      	it	eq
 8007cca:	f042 0201 	orreq.w	r2, r2, #1
 8007cce:	b91a      	cbnz	r2, 8007cd8 <HAL_DMA_IRQHandler+0xb0>
 8007cd0:	4a78      	ldr	r2, [pc, #480]	; (8007eb4 <HAL_DMA_IRQHandler+0x28c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	f040 82b3 	bne.w	800823e <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cd8:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 8007cdc:	2208      	movs	r2, #8
 8007cde:	f000 011f 	and.w	r1, r0, #31
 8007ce2:	408a      	lsls	r2, r1
 8007ce4:	4222      	tst	r2, r4
 8007ce6:	f040 81a5 	bne.w	8008034 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cea:	fa24 f201 	lsr.w	r2, r4, r1
 8007cee:	07d2      	lsls	r2, r2, #31
 8007cf0:	d511      	bpl.n	8007d16 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007cf2:	695a      	ldr	r2, [r3, #20]
 8007cf4:	0612      	lsls	r2, r2, #24
 8007cf6:	f140 8269 	bpl.w	80081cc <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	fa03 f101 	lsl.w	r1, r3, r1
 8007d00:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d02:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d06:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d0a:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d0e:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d12:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d16:	f04f 0c04 	mov.w	ip, #4
 8007d1a:	fa0c fc01 	lsl.w	ip, ip, r1
 8007d1e:	ea1c 0f04 	tst.w	ip, r4
 8007d22:	d062      	beq.n	8007dea <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007d24:	f8d8 2000 	ldr.w	r2, [r8]
 8007d28:	4f60      	ldr	r7, [pc, #384]	; (8007eac <HAL_DMA_IRQHandler+0x284>)
 8007d2a:	4b63      	ldr	r3, [pc, #396]	; (8007eb8 <HAL_DMA_IRQHandler+0x290>)
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	bf18      	it	ne
 8007d30:	42ba      	cmpne	r2, r7
 8007d32:	f103 0318 	add.w	r3, r3, #24
 8007d36:	bf0c      	ite	eq
 8007d38:	2701      	moveq	r7, #1
 8007d3a:	2700      	movne	r7, #0
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	bf08      	it	eq
 8007d40:	f047 0701 	orreq.w	r7, r7, #1
 8007d44:	3318      	adds	r3, #24
 8007d46:	429a      	cmp	r2, r3
 8007d48:	bf08      	it	eq
 8007d4a:	f047 0701 	orreq.w	r7, r7, #1
 8007d4e:	3318      	adds	r3, #24
 8007d50:	429a      	cmp	r2, r3
 8007d52:	bf08      	it	eq
 8007d54:	f047 0701 	orreq.w	r7, r7, #1
 8007d58:	3318      	adds	r3, #24
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	bf08      	it	eq
 8007d5e:	f047 0701 	orreq.w	r7, r7, #1
 8007d62:	3318      	adds	r3, #24
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf08      	it	eq
 8007d68:	f047 0701 	orreq.w	r7, r7, #1
 8007d6c:	3318      	adds	r3, #24
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	bf08      	it	eq
 8007d72:	f047 0701 	orreq.w	r7, r7, #1
 8007d76:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	bf08      	it	eq
 8007d7e:	f047 0701 	orreq.w	r7, r7, #1
 8007d82:	3318      	adds	r3, #24
 8007d84:	429a      	cmp	r2, r3
 8007d86:	bf08      	it	eq
 8007d88:	f047 0701 	orreq.w	r7, r7, #1
 8007d8c:	3318      	adds	r3, #24
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf08      	it	eq
 8007d92:	f047 0701 	orreq.w	r7, r7, #1
 8007d96:	3318      	adds	r3, #24
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	bf08      	it	eq
 8007d9c:	f047 0701 	orreq.w	r7, r7, #1
 8007da0:	3318      	adds	r3, #24
 8007da2:	429a      	cmp	r2, r3
 8007da4:	bf08      	it	eq
 8007da6:	f047 0701 	orreq.w	r7, r7, #1
 8007daa:	3318      	adds	r3, #24
 8007dac:	429a      	cmp	r2, r3
 8007dae:	bf08      	it	eq
 8007db0:	f047 0701 	orreq.w	r7, r7, #1
 8007db4:	3318      	adds	r3, #24
 8007db6:	429a      	cmp	r2, r3
 8007db8:	bf08      	it	eq
 8007dba:	f047 0701 	orreq.w	r7, r7, #1
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	b91f      	cbnz	r7, 8007dca <HAL_DMA_IRQHandler+0x1a2>
 8007dc2:	4f3c      	ldr	r7, [pc, #240]	; (8007eb4 <HAL_DMA_IRQHandler+0x28c>)
 8007dc4:	42ba      	cmp	r2, r7
 8007dc6:	f040 8277 	bne.w	80082b8 <HAL_DMA_IRQHandler+0x690>
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	0797      	lsls	r7, r2, #30
 8007dce:	f140 8209 	bpl.w	80081e4 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dd2:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dd6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dda:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dde:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007de2:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007de6:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dea:	f04f 0c10 	mov.w	ip, #16
 8007dee:	fa0c fc01 	lsl.w	ip, ip, r1
 8007df2:	ea1c 0f04 	tst.w	ip, r4
 8007df6:	d079      	beq.n	8007eec <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007df8:	f8d8 2000 	ldr.w	r2, [r8]
 8007dfc:	4f2b      	ldr	r7, [pc, #172]	; (8007eac <HAL_DMA_IRQHandler+0x284>)
 8007dfe:	4b2e      	ldr	r3, [pc, #184]	; (8007eb8 <HAL_DMA_IRQHandler+0x290>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	bf18      	it	ne
 8007e04:	42ba      	cmpne	r2, r7
 8007e06:	f103 0318 	add.w	r3, r3, #24
 8007e0a:	bf0c      	ite	eq
 8007e0c:	2701      	moveq	r7, #1
 8007e0e:	2700      	movne	r7, #0
 8007e10:	429a      	cmp	r2, r3
 8007e12:	bf08      	it	eq
 8007e14:	f047 0701 	orreq.w	r7, r7, #1
 8007e18:	3318      	adds	r3, #24
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	bf08      	it	eq
 8007e1e:	f047 0701 	orreq.w	r7, r7, #1
 8007e22:	3318      	adds	r3, #24
 8007e24:	429a      	cmp	r2, r3
 8007e26:	bf08      	it	eq
 8007e28:	f047 0701 	orreq.w	r7, r7, #1
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	bf08      	it	eq
 8007e32:	f047 0701 	orreq.w	r7, r7, #1
 8007e36:	3318      	adds	r3, #24
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	bf08      	it	eq
 8007e3c:	f047 0701 	orreq.w	r7, r7, #1
 8007e40:	3318      	adds	r3, #24
 8007e42:	429a      	cmp	r2, r3
 8007e44:	bf08      	it	eq
 8007e46:	f047 0701 	orreq.w	r7, r7, #1
 8007e4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	bf08      	it	eq
 8007e52:	f047 0701 	orreq.w	r7, r7, #1
 8007e56:	3318      	adds	r3, #24
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bf08      	it	eq
 8007e5c:	f047 0701 	orreq.w	r7, r7, #1
 8007e60:	3318      	adds	r3, #24
 8007e62:	429a      	cmp	r2, r3
 8007e64:	bf08      	it	eq
 8007e66:	f047 0701 	orreq.w	r7, r7, #1
 8007e6a:	3318      	adds	r3, #24
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	bf08      	it	eq
 8007e70:	f047 0701 	orreq.w	r7, r7, #1
 8007e74:	3318      	adds	r3, #24
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bf08      	it	eq
 8007e7a:	f047 0701 	orreq.w	r7, r7, #1
 8007e7e:	3318      	adds	r3, #24
 8007e80:	429a      	cmp	r2, r3
 8007e82:	bf08      	it	eq
 8007e84:	f047 0701 	orreq.w	r7, r7, #1
 8007e88:	3318      	adds	r3, #24
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	bf08      	it	eq
 8007e8e:	f047 0701 	orreq.w	r7, r7, #1
 8007e92:	4613      	mov	r3, r2
 8007e94:	b91f      	cbnz	r7, 8007e9e <HAL_DMA_IRQHandler+0x276>
 8007e96:	4f07      	ldr	r7, [pc, #28]	; (8007eb4 <HAL_DMA_IRQHandler+0x28c>)
 8007e98:	42ba      	cmp	r2, r7
 8007e9a:	f040 814b 	bne.w	8008134 <HAL_DMA_IRQHandler+0x50c>
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	0710      	lsls	r0, r2, #28
 8007ea2:	f140 818c 	bpl.w	80081be <HAL_DMA_IRQHandler+0x596>
 8007ea6:	e009      	b.n	8007ebc <HAL_DMA_IRQHandler+0x294>
 8007ea8:	20000094 	.word	0x20000094
 8007eac:	40020010 	.word	0x40020010
 8007eb0:	40020058 	.word	0x40020058
 8007eb4:	400204b8 	.word	0x400204b8
 8007eb8:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ebc:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	0352      	lsls	r2, r2, #13
 8007ec8:	f100 8195 	bmi.w	80081f6 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	05d7      	lsls	r7, r2, #23
 8007ed0:	d403      	bmi.n	8007eda <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	f022 0208 	bic.w	r2, r2, #8
 8007ed8:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8007eda:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8007ede:	b10b      	cbz	r3, 8007ee4 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ee4:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8007ee8:	f001 011f 	and.w	r1, r1, #31
 8007eec:	2320      	movs	r3, #32
 8007eee:	fa03 f101 	lsl.w	r1, r3, r1
 8007ef2:	4221      	tst	r1, r4
 8007ef4:	d069      	beq.n	8007fca <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8007efa:	4a97      	ldr	r2, [pc, #604]	; (8008158 <HAL_DMA_IRQHandler+0x530>)
 8007efc:	4c97      	ldr	r4, [pc, #604]	; (800815c <HAL_DMA_IRQHandler+0x534>)
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	bf18      	it	ne
 8007f02:	4293      	cmpne	r3, r2
 8007f04:	f104 0418 	add.w	r4, r4, #24
 8007f08:	bf0c      	ite	eq
 8007f0a:	2201      	moveq	r2, #1
 8007f0c:	2200      	movne	r2, #0
 8007f0e:	42a3      	cmp	r3, r4
 8007f10:	bf08      	it	eq
 8007f12:	f042 0201 	orreq.w	r2, r2, #1
 8007f16:	3418      	adds	r4, #24
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	bf08      	it	eq
 8007f1c:	f042 0201 	orreq.w	r2, r2, #1
 8007f20:	3418      	adds	r4, #24
 8007f22:	42a3      	cmp	r3, r4
 8007f24:	bf08      	it	eq
 8007f26:	f042 0201 	orreq.w	r2, r2, #1
 8007f2a:	3418      	adds	r4, #24
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	bf08      	it	eq
 8007f30:	f042 0201 	orreq.w	r2, r2, #1
 8007f34:	3418      	adds	r4, #24
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	bf08      	it	eq
 8007f3a:	f042 0201 	orreq.w	r2, r2, #1
 8007f3e:	3418      	adds	r4, #24
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	bf08      	it	eq
 8007f44:	f042 0201 	orreq.w	r2, r2, #1
 8007f48:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	bf08      	it	eq
 8007f50:	f042 0201 	orreq.w	r2, r2, #1
 8007f54:	3418      	adds	r4, #24
 8007f56:	42a3      	cmp	r3, r4
 8007f58:	bf08      	it	eq
 8007f5a:	f042 0201 	orreq.w	r2, r2, #1
 8007f5e:	3418      	adds	r4, #24
 8007f60:	42a3      	cmp	r3, r4
 8007f62:	bf08      	it	eq
 8007f64:	f042 0201 	orreq.w	r2, r2, #1
 8007f68:	3418      	adds	r4, #24
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	bf08      	it	eq
 8007f6e:	f042 0201 	orreq.w	r2, r2, #1
 8007f72:	3418      	adds	r4, #24
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bf08      	it	eq
 8007f78:	f042 0201 	orreq.w	r2, r2, #1
 8007f7c:	3418      	adds	r4, #24
 8007f7e:	42a3      	cmp	r3, r4
 8007f80:	bf08      	it	eq
 8007f82:	f042 0201 	orreq.w	r2, r2, #1
 8007f86:	3418      	adds	r4, #24
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	bf08      	it	eq
 8007f8c:	f042 0201 	orreq.w	r2, r2, #1
 8007f90:	b91a      	cbnz	r2, 8007f9a <HAL_DMA_IRQHandler+0x372>
 8007f92:	4a73      	ldr	r2, [pc, #460]	; (8008160 <HAL_DMA_IRQHandler+0x538>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	f040 80da 	bne.w	800814e <HAL_DMA_IRQHandler+0x526>
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	06dc      	lsls	r4, r3, #27
 8007f9e:	d514      	bpl.n	8007fca <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fa0:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fa2:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	f000 80de 	beq.w	8008168 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007fac:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	0352      	lsls	r2, r2, #13
 8007fb4:	f140 8129 	bpl.w	800820a <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	031b      	lsls	r3, r3, #12
 8007fbc:	f140 8134 	bpl.w	8008228 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 8007fc0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8007fc4:	b10b      	cbz	r3, 8007fca <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007fca:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 80f2 	beq.w	80081b8 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007fd4:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8007fd8:	07df      	lsls	r7, r3, #31
 8007fda:	d521      	bpl.n	8008020 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 8007fdc:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 8007fe0:	2104      	movs	r1, #4
 8007fe2:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8007fe6:	6813      	ldr	r3, [r2, #0]
 8007fe8:	f023 0301 	bic.w	r3, r3, #1
 8007fec:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fee:	4b5d      	ldr	r3, [pc, #372]	; (8008164 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ff0:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ff4:	fba3 3606 	umull	r3, r6, r3, r6
 8007ff8:	0ab6      	lsrs	r6, r6, #10
 8007ffa:	e002      	b.n	8008002 <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ffc:	6813      	ldr	r3, [r2, #0]
 8007ffe:	07dd      	lsls	r5, r3, #31
 8008000:	d504      	bpl.n	800800c <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 8008002:	9b01      	ldr	r3, [sp, #4]
 8008004:	3301      	adds	r3, #1
 8008006:	42b3      	cmp	r3, r6
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	d9f7      	bls.n	8007ffc <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800800c:	6813      	ldr	r3, [r2, #0]
 800800e:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008010:	bf4c      	ite	mi
 8008012:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8008014:	2301      	movpl	r3, #1
 8008016:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800801a:	2300      	movs	r3, #0
 800801c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008020:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80c7 	beq.w	80081b8 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 800802a:	4640      	mov	r0, r8
}
 800802c:	b002      	add	sp, #8
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8008032:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	0752      	lsls	r2, r2, #29
 8008038:	d514      	bpl.n	8008064 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f022 0204 	bic.w	r2, r2, #4
 8008040:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008042:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008046:	f003 021f 	and.w	r2, r3, #31
 800804a:	2308      	movs	r3, #8
 800804c:	4093      	lsls	r3, r2
 800804e:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008050:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008054:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008058:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800805c:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008060:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008064:	fa24 f301 	lsr.w	r3, r4, r1
 8008068:	07df      	lsls	r7, r3, #31
 800806a:	f57f ae54 	bpl.w	8007d16 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800806e:	f8d8 2000 	ldr.w	r2, [r8]
 8008072:	4f39      	ldr	r7, [pc, #228]	; (8008158 <HAL_DMA_IRQHandler+0x530>)
 8008074:	4b39      	ldr	r3, [pc, #228]	; (800815c <HAL_DMA_IRQHandler+0x534>)
 8008076:	429a      	cmp	r2, r3
 8008078:	bf18      	it	ne
 800807a:	42ba      	cmpne	r2, r7
 800807c:	f103 0318 	add.w	r3, r3, #24
 8008080:	bf0c      	ite	eq
 8008082:	2701      	moveq	r7, #1
 8008084:	2700      	movne	r7, #0
 8008086:	429a      	cmp	r2, r3
 8008088:	bf08      	it	eq
 800808a:	f047 0701 	orreq.w	r7, r7, #1
 800808e:	3318      	adds	r3, #24
 8008090:	429a      	cmp	r2, r3
 8008092:	bf08      	it	eq
 8008094:	f047 0701 	orreq.w	r7, r7, #1
 8008098:	3318      	adds	r3, #24
 800809a:	429a      	cmp	r2, r3
 800809c:	bf08      	it	eq
 800809e:	f047 0701 	orreq.w	r7, r7, #1
 80080a2:	3318      	adds	r3, #24
 80080a4:	429a      	cmp	r2, r3
 80080a6:	bf08      	it	eq
 80080a8:	f047 0701 	orreq.w	r7, r7, #1
 80080ac:	3318      	adds	r3, #24
 80080ae:	429a      	cmp	r2, r3
 80080b0:	bf08      	it	eq
 80080b2:	f047 0701 	orreq.w	r7, r7, #1
 80080b6:	3318      	adds	r3, #24
 80080b8:	429a      	cmp	r2, r3
 80080ba:	bf08      	it	eq
 80080bc:	f047 0701 	orreq.w	r7, r7, #1
 80080c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bf08      	it	eq
 80080c8:	f047 0701 	orreq.w	r7, r7, #1
 80080cc:	3318      	adds	r3, #24
 80080ce:	429a      	cmp	r2, r3
 80080d0:	bf08      	it	eq
 80080d2:	f047 0701 	orreq.w	r7, r7, #1
 80080d6:	3318      	adds	r3, #24
 80080d8:	429a      	cmp	r2, r3
 80080da:	bf08      	it	eq
 80080dc:	f047 0701 	orreq.w	r7, r7, #1
 80080e0:	3318      	adds	r3, #24
 80080e2:	429a      	cmp	r2, r3
 80080e4:	bf08      	it	eq
 80080e6:	f047 0701 	orreq.w	r7, r7, #1
 80080ea:	3318      	adds	r3, #24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	bf08      	it	eq
 80080f0:	f047 0701 	orreq.w	r7, r7, #1
 80080f4:	3318      	adds	r3, #24
 80080f6:	429a      	cmp	r2, r3
 80080f8:	bf08      	it	eq
 80080fa:	f047 0701 	orreq.w	r7, r7, #1
 80080fe:	3318      	adds	r3, #24
 8008100:	429a      	cmp	r2, r3
 8008102:	bf08      	it	eq
 8008104:	f047 0701 	orreq.w	r7, r7, #1
 8008108:	4613      	mov	r3, r2
 800810a:	2f00      	cmp	r7, #0
 800810c:	f47f adf1 	bne.w	8007cf2 <HAL_DMA_IRQHandler+0xca>
 8008110:	4f13      	ldr	r7, [pc, #76]	; (8008160 <HAL_DMA_IRQHandler+0x538>)
 8008112:	42ba      	cmp	r2, r7
 8008114:	f43f aded 	beq.w	8007cf2 <HAL_DMA_IRQHandler+0xca>
 8008118:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800811a:	2304      	movs	r3, #4
 800811c:	408b      	lsls	r3, r1
 800811e:	4223      	tst	r3, r4
 8008120:	f040 80ca 	bne.w	80082b8 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008124:	f04f 0c10 	mov.w	ip, #16
 8008128:	fa0c fc01 	lsl.w	ip, ip, r1
 800812c:	ea14 0f0c 	tst.w	r4, ip
 8008130:	f43f aedc 	beq.w	8007eec <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	0759      	lsls	r1, r3, #29
 8008138:	f53f aec0 	bmi.w	8007ebc <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800813c:	f000 0e1f 	and.w	lr, r0, #31
 8008140:	2120      	movs	r1, #32
 8008142:	fa01 f10e 	lsl.w	r1, r1, lr
 8008146:	420c      	tst	r4, r1
 8008148:	f43f af3f 	beq.w	8007fca <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800814c:	4613      	mov	r3, r2
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	0798      	lsls	r0, r3, #30
 8008152:	f57f af3a 	bpl.w	8007fca <HAL_DMA_IRQHandler+0x3a2>
 8008156:	e723      	b.n	8007fa0 <HAL_DMA_IRQHandler+0x378>
 8008158:	40020010 	.word	0x40020010
 800815c:	40020028 	.word	0x40020028
 8008160:	400204b8 	.word	0x400204b8
 8008164:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008168:	f8d8 2000 	ldr.w	r2, [r8]
 800816c:	6813      	ldr	r3, [r2, #0]
 800816e:	f023 0316 	bic.w	r3, r3, #22
 8008172:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008174:	f8d8 2000 	ldr.w	r2, [r8]
 8008178:	6953      	ldr	r3, [r2, #20]
 800817a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817e:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008180:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8008184:	2b00      	cmp	r3, #0
 8008186:	d055      	beq.n	8008234 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008188:	f8d8 2000 	ldr.w	r2, [r8]
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	f023 0308 	bic.w	r3, r3, #8
 8008192:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008194:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8008198:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800819a:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800819c:	f002 021f 	and.w	r2, r2, #31
 80081a0:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 80081a2:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081a4:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 80081a6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80081aa:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80081ae:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f47f af39 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
}
 80081b8:	b002      	add	sp, #8
 80081ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081be:	2220      	movs	r2, #32
 80081c0:	fa02 f101 	lsl.w	r1, r2, r1
 80081c4:	420c      	tst	r4, r1
 80081c6:	f47f aee8 	bne.w	8007f9a <HAL_DMA_IRQHandler+0x372>
 80081ca:	e6fe      	b.n	8007fca <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081cc:	f04f 0c04 	mov.w	ip, #4
 80081d0:	fa0c fc01 	lsl.w	ip, ip, r1
 80081d4:	ea14 0f0c 	tst.w	r4, ip
 80081d8:	f43f ae07 	beq.w	8007dea <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	0797      	lsls	r7, r2, #30
 80081e0:	f53f adf7 	bmi.w	8007dd2 <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081e4:	f04f 0c10 	mov.w	ip, #16
 80081e8:	fa0c fc01 	lsl.w	ip, ip, r1
 80081ec:	ea14 0f0c 	tst.w	r4, ip
 80081f0:	f47f ae55 	bne.w	8007e9e <HAL_DMA_IRQHandler+0x276>
 80081f4:	e67a      	b.n	8007eec <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	031b      	lsls	r3, r3, #12
 80081fa:	f57f ae6e 	bpl.w	8007eda <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80081fe:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008202:	2b00      	cmp	r3, #0
 8008204:	f47f ae6c 	bne.w	8007ee0 <HAL_DMA_IRQHandler+0x2b8>
 8008208:	e66c      	b.n	8007ee4 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8008210:	f47f aed6 	bne.w	8007fc0 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008214:	6819      	ldr	r1, [r3, #0]
 8008216:	f021 0110 	bic.w	r1, r1, #16
 800821a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800821c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 800821e:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008222:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8008226:	e6cb      	b.n	8007fc0 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 8008228:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800822c:	2b00      	cmp	r3, #0
 800822e:	f47f aeca 	bne.w	8007fc6 <HAL_DMA_IRQHandler+0x39e>
 8008232:	e6ca      	b.n	8007fca <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008234:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1a5      	bne.n	8008188 <HAL_DMA_IRQHandler+0x560>
 800823c:	e7aa      	b.n	8008194 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800823e:	4aa0      	ldr	r2, [pc, #640]	; (80084c0 <HAL_DMA_IRQHandler+0x898>)
 8008240:	4ca0      	ldr	r4, [pc, #640]	; (80084c4 <HAL_DMA_IRQHandler+0x89c>)
 8008242:	42a3      	cmp	r3, r4
 8008244:	bf18      	it	ne
 8008246:	4293      	cmpne	r3, r2
 8008248:	f104 0414 	add.w	r4, r4, #20
 800824c:	bf0c      	ite	eq
 800824e:	2201      	moveq	r2, #1
 8008250:	2200      	movne	r2, #0
 8008252:	42a3      	cmp	r3, r4
 8008254:	bf08      	it	eq
 8008256:	f042 0201 	orreq.w	r2, r2, #1
 800825a:	3414      	adds	r4, #20
 800825c:	42a3      	cmp	r3, r4
 800825e:	bf08      	it	eq
 8008260:	f042 0201 	orreq.w	r2, r2, #1
 8008264:	3414      	adds	r4, #20
 8008266:	42a3      	cmp	r3, r4
 8008268:	bf08      	it	eq
 800826a:	f042 0201 	orreq.w	r2, r2, #1
 800826e:	3414      	adds	r4, #20
 8008270:	42a3      	cmp	r3, r4
 8008272:	bf08      	it	eq
 8008274:	f042 0201 	orreq.w	r2, r2, #1
 8008278:	3414      	adds	r4, #20
 800827a:	42a3      	cmp	r3, r4
 800827c:	bf08      	it	eq
 800827e:	f042 0201 	orreq.w	r2, r2, #1
 8008282:	b912      	cbnz	r2, 800828a <HAL_DMA_IRQHandler+0x662>
 8008284:	4a90      	ldr	r2, [pc, #576]	; (80084c8 <HAL_DMA_IRQHandler+0x8a0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d196      	bne.n	80081b8 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800828a:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 800828e:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008290:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008292:	f004 041f 	and.w	r4, r4, #31
 8008296:	40a6      	lsls	r6, r4
 8008298:	420e      	tst	r6, r1
 800829a:	d019      	beq.n	80082d0 <HAL_DMA_IRQHandler+0x6a8>
 800829c:	0750      	lsls	r0, r2, #29
 800829e:	d517      	bpl.n	80082d0 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a0:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80082a2:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a4:	d549      	bpl.n	800833a <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082a6:	03d2      	lsls	r2, r2, #15
 80082a8:	f100 809f 	bmi.w	80083ea <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082ac:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f47f aeba 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
 80082b6:	e77f      	b.n	80081b8 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082b8:	f000 011f 	and.w	r1, r0, #31
 80082bc:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80082c0:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082c2:	fa0c fc01 	lsl.w	ip, ip, r1
 80082c6:	ea14 0f0c 	tst.w	r4, ip
 80082ca:	f47f af33 	bne.w	8008134 <HAL_DMA_IRQHandler+0x50c>
 80082ce:	e60d      	b.n	8007eec <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80082d0:	2602      	movs	r6, #2
 80082d2:	40a6      	lsls	r6, r4
 80082d4:	420e      	tst	r6, r1
 80082d6:	d00e      	beq.n	80082f6 <HAL_DMA_IRQHandler+0x6ce>
 80082d8:	0797      	lsls	r7, r2, #30
 80082da:	d50c      	bpl.n	80082f6 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80082dc:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082de:	0415      	lsls	r5, r2, #16
 80082e0:	f140 8089 	bpl.w	80083f6 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082e4:	03d4      	lsls	r4, r2, #15
 80082e6:	f100 80e4 	bmi.w	80084b2 <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 80082ea:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f47f ae9b 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
 80082f4:	e760      	b.n	80081b8 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80082f6:	2608      	movs	r6, #8
 80082f8:	fa06 f404 	lsl.w	r4, r6, r4
 80082fc:	420c      	tst	r4, r1
 80082fe:	f43f af5b 	beq.w	80081b8 <HAL_DMA_IRQHandler+0x590>
 8008302:	0711      	lsls	r1, r2, #28
 8008304:	f57f af58 	bpl.w	80081b8 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008308:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800830a:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800830c:	f021 010e 	bic.w	r1, r1, #14
 8008310:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8008312:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008314:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8008322:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008326:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800832a:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800832e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8008332:	2b00      	cmp	r3, #0
 8008334:	f47f ae79 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
 8008338:	e73e      	b.n	80081b8 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800833a:	0693      	lsls	r3, r2, #26
 800833c:	d455      	bmi.n	80083ea <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800833e:	f8d8 2000 	ldr.w	r2, [r8]
 8008342:	4b62      	ldr	r3, [pc, #392]	; (80084cc <HAL_DMA_IRQHandler+0x8a4>)
 8008344:	4c62      	ldr	r4, [pc, #392]	; (80084d0 <HAL_DMA_IRQHandler+0x8a8>)
 8008346:	4963      	ldr	r1, [pc, #396]	; (80084d4 <HAL_DMA_IRQHandler+0x8ac>)
 8008348:	42a2      	cmp	r2, r4
 800834a:	bf18      	it	ne
 800834c:	429a      	cmpne	r2, r3
 800834e:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	428a      	cmp	r2, r1
 800835a:	bf08      	it	eq
 800835c:	f043 0301 	orreq.w	r3, r3, #1
 8008360:	3130      	adds	r1, #48	; 0x30
 8008362:	42a2      	cmp	r2, r4
 8008364:	bf08      	it	eq
 8008366:	f043 0301 	orreq.w	r3, r3, #1
 800836a:	3430      	adds	r4, #48	; 0x30
 800836c:	428a      	cmp	r2, r1
 800836e:	bf08      	it	eq
 8008370:	f043 0301 	orreq.w	r3, r3, #1
 8008374:	3130      	adds	r1, #48	; 0x30
 8008376:	42a2      	cmp	r2, r4
 8008378:	bf08      	it	eq
 800837a:	f043 0301 	orreq.w	r3, r3, #1
 800837e:	3430      	adds	r4, #48	; 0x30
 8008380:	428a      	cmp	r2, r1
 8008382:	bf08      	it	eq
 8008384:	f043 0301 	orreq.w	r3, r3, #1
 8008388:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800838c:	42a2      	cmp	r2, r4
 800838e:	bf08      	it	eq
 8008390:	f043 0301 	orreq.w	r3, r3, #1
 8008394:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008398:	428a      	cmp	r2, r1
 800839a:	bf08      	it	eq
 800839c:	f043 0301 	orreq.w	r3, r3, #1
 80083a0:	3130      	adds	r1, #48	; 0x30
 80083a2:	42a2      	cmp	r2, r4
 80083a4:	bf08      	it	eq
 80083a6:	f043 0301 	orreq.w	r3, r3, #1
 80083aa:	3430      	adds	r4, #48	; 0x30
 80083ac:	428a      	cmp	r2, r1
 80083ae:	bf08      	it	eq
 80083b0:	f043 0301 	orreq.w	r3, r3, #1
 80083b4:	3130      	adds	r1, #48	; 0x30
 80083b6:	42a2      	cmp	r2, r4
 80083b8:	bf08      	it	eq
 80083ba:	f043 0301 	orreq.w	r3, r3, #1
 80083be:	3430      	adds	r4, #48	; 0x30
 80083c0:	428a      	cmp	r2, r1
 80083c2:	bf08      	it	eq
 80083c4:	f043 0301 	orreq.w	r3, r3, #1
 80083c8:	3130      	adds	r1, #48	; 0x30
 80083ca:	42a2      	cmp	r2, r4
 80083cc:	bf08      	it	eq
 80083ce:	f043 0301 	orreq.w	r3, r3, #1
 80083d2:	428a      	cmp	r2, r1
 80083d4:	bf08      	it	eq
 80083d6:	f043 0301 	orreq.w	r3, r3, #1
 80083da:	b913      	cbnz	r3, 80083e2 <HAL_DMA_IRQHandler+0x7ba>
 80083dc:	4b3e      	ldr	r3, [pc, #248]	; (80084d8 <HAL_DMA_IRQHandler+0x8b0>)
 80083de:	429a      	cmp	r2, r3
 80083e0:	d17c      	bne.n	80084dc <HAL_DMA_IRQHandler+0x8b4>
 80083e2:	6813      	ldr	r3, [r2, #0]
 80083e4:	f023 0308 	bic.w	r3, r3, #8
 80083e8:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80083ea:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f47f ae1b 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
 80083f4:	e6e0      	b.n	80081b8 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083f6:	0690      	lsls	r0, r2, #26
 80083f8:	d45b      	bmi.n	80084b2 <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083fa:	f8d8 2000 	ldr.w	r2, [r8]
 80083fe:	4b33      	ldr	r3, [pc, #204]	; (80084cc <HAL_DMA_IRQHandler+0x8a4>)
 8008400:	4c33      	ldr	r4, [pc, #204]	; (80084d0 <HAL_DMA_IRQHandler+0x8a8>)
 8008402:	4934      	ldr	r1, [pc, #208]	; (80084d4 <HAL_DMA_IRQHandler+0x8ac>)
 8008404:	42a2      	cmp	r2, r4
 8008406:	bf18      	it	ne
 8008408:	429a      	cmpne	r2, r3
 800840a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	428a      	cmp	r2, r1
 8008416:	bf08      	it	eq
 8008418:	f043 0301 	orreq.w	r3, r3, #1
 800841c:	3130      	adds	r1, #48	; 0x30
 800841e:	42a2      	cmp	r2, r4
 8008420:	bf08      	it	eq
 8008422:	f043 0301 	orreq.w	r3, r3, #1
 8008426:	3430      	adds	r4, #48	; 0x30
 8008428:	428a      	cmp	r2, r1
 800842a:	bf08      	it	eq
 800842c:	f043 0301 	orreq.w	r3, r3, #1
 8008430:	3130      	adds	r1, #48	; 0x30
 8008432:	42a2      	cmp	r2, r4
 8008434:	bf08      	it	eq
 8008436:	f043 0301 	orreq.w	r3, r3, #1
 800843a:	3430      	adds	r4, #48	; 0x30
 800843c:	428a      	cmp	r2, r1
 800843e:	bf08      	it	eq
 8008440:	f043 0301 	orreq.w	r3, r3, #1
 8008444:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008448:	42a2      	cmp	r2, r4
 800844a:	bf08      	it	eq
 800844c:	f043 0301 	orreq.w	r3, r3, #1
 8008450:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008454:	428a      	cmp	r2, r1
 8008456:	bf08      	it	eq
 8008458:	f043 0301 	orreq.w	r3, r3, #1
 800845c:	3130      	adds	r1, #48	; 0x30
 800845e:	42a2      	cmp	r2, r4
 8008460:	bf08      	it	eq
 8008462:	f043 0301 	orreq.w	r3, r3, #1
 8008466:	3430      	adds	r4, #48	; 0x30
 8008468:	428a      	cmp	r2, r1
 800846a:	bf08      	it	eq
 800846c:	f043 0301 	orreq.w	r3, r3, #1
 8008470:	3130      	adds	r1, #48	; 0x30
 8008472:	42a2      	cmp	r2, r4
 8008474:	bf08      	it	eq
 8008476:	f043 0301 	orreq.w	r3, r3, #1
 800847a:	3430      	adds	r4, #48	; 0x30
 800847c:	428a      	cmp	r2, r1
 800847e:	bf08      	it	eq
 8008480:	f043 0301 	orreq.w	r3, r3, #1
 8008484:	3130      	adds	r1, #48	; 0x30
 8008486:	42a2      	cmp	r2, r4
 8008488:	bf08      	it	eq
 800848a:	f043 0301 	orreq.w	r3, r3, #1
 800848e:	428a      	cmp	r2, r1
 8008490:	bf08      	it	eq
 8008492:	f043 0301 	orreq.w	r3, r3, #1
 8008496:	b913      	cbnz	r3, 800849e <HAL_DMA_IRQHandler+0x876>
 8008498:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <HAL_DMA_IRQHandler+0x8b0>)
 800849a:	429a      	cmp	r2, r3
 800849c:	d123      	bne.n	80084e6 <HAL_DMA_IRQHandler+0x8be>
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	f023 0314 	bic.w	r3, r3, #20
 80084a4:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80084a6:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 80084a8:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 80084aa:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80084ae:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80084b2:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f47f adb7 	bne.w	800802a <HAL_DMA_IRQHandler+0x402>
 80084bc:	e67c      	b.n	80081b8 <HAL_DMA_IRQHandler+0x590>
 80084be:	bf00      	nop
 80084c0:	58025408 	.word	0x58025408
 80084c4:	5802541c 	.word	0x5802541c
 80084c8:	58025494 	.word	0x58025494
 80084cc:	40020010 	.word	0x40020010
 80084d0:	40020028 	.word	0x40020028
 80084d4:	40020040 	.word	0x40020040
 80084d8:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	f023 0304 	bic.w	r3, r3, #4
 80084e2:	6013      	str	r3, [r2, #0]
 80084e4:	e781      	b.n	80083ea <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	f023 030a 	bic.w	r3, r3, #10
 80084ec:	6013      	str	r3, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <HAL_DMA_IRQHandler+0x87e>

080084f0 <HAL_DMA_GetState>:
  return hdma->State;
 80084f0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop

080084f8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80084f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80084fa:	4770      	bx	lr

080084fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084fc:	680b      	ldr	r3, [r1, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 811a 	beq.w	8008738 <HAL_GPIO_Init+0x23c>
 8008504:	f04f 0c00 	mov.w	ip, #0
{
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800850c:	4662      	mov	r2, ip
{
 800850e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008510:	4d94      	ldr	r5, [pc, #592]	; (8008764 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008512:	4f95      	ldr	r7, [pc, #596]	; (8008768 <HAL_GPIO_Init+0x26c>)
 8008514:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8008780 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008518:	f04f 0901 	mov.w	r9, #1
 800851c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8008520:	ea19 0e03 	ands.w	lr, r9, r3
 8008524:	f000 80c2 	beq.w	80086ac <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008528:	684b      	ldr	r3, [r1, #4]
 800852a:	f003 0303 	and.w	r3, r3, #3
 800852e:	1e5c      	subs	r4, r3, #1
 8008530:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008532:	f04f 0403 	mov.w	r4, #3
 8008536:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800853a:	f240 80c1 	bls.w	80086c0 <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800853e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008540:	2b03      	cmp	r3, #3
 8008542:	d026      	beq.n	8008592 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8008544:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008546:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800854a:	688b      	ldr	r3, [r1, #8]
 800854c:	fa03 f30c 	lsl.w	r3, r3, ip
 8008550:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8008554:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008556:	684b      	ldr	r3, [r1, #4]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d118      	bne.n	8008592 <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008560:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8008564:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008568:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800856c:	230f      	movs	r3, #15
 800856e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8008572:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 8008576:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800857a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800857e:	690b      	ldr	r3, [r1, #16]
 8008580:	fa03 f30b 	lsl.w	r3, r3, fp
 8008584:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8008588:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800858c:	684b      	ldr	r3, [r1, #4]
 800858e:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8008592:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008596:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800859a:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800859e:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 80085a0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085a2:	684b      	ldr	r3, [r1, #4]
 80085a4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80085a8:	d07f      	beq.n	80086aa <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085aa:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80085ae:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085b2:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085b6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085b8:	f043 0302 	orr.w	r3, r3, #2
 80085bc:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085c0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085c4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80085c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80085cc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085d8:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80085dc:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80085e0:	fa03 f309 	lsl.w	r3, r3, r9
 80085e4:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80085e8:	d02b      	beq.n	8008642 <HAL_GPIO_Init+0x146>
 80085ea:	4540      	cmp	r0, r8
 80085ec:	f000 8088 	beq.w	8008700 <HAL_GPIO_Init+0x204>
 80085f0:	4e5e      	ldr	r6, [pc, #376]	; (800876c <HAL_GPIO_Init+0x270>)
 80085f2:	42b0      	cmp	r0, r6
 80085f4:	f000 808b 	beq.w	800870e <HAL_GPIO_Init+0x212>
 80085f8:	4e5d      	ldr	r6, [pc, #372]	; (8008770 <HAL_GPIO_Init+0x274>)
 80085fa:	42b0      	cmp	r0, r6
 80085fc:	d079      	beq.n	80086f2 <HAL_GPIO_Init+0x1f6>
 80085fe:	4e5d      	ldr	r6, [pc, #372]	; (8008774 <HAL_GPIO_Init+0x278>)
 8008600:	42b0      	cmp	r0, r6
 8008602:	f000 8092 	beq.w	800872a <HAL_GPIO_Init+0x22e>
 8008606:	4e5c      	ldr	r6, [pc, #368]	; (8008778 <HAL_GPIO_Init+0x27c>)
 8008608:	42b0      	cmp	r0, r6
 800860a:	f000 8096 	beq.w	800873a <HAL_GPIO_Init+0x23e>
 800860e:	4e5b      	ldr	r6, [pc, #364]	; (800877c <HAL_GPIO_Init+0x280>)
 8008610:	42b0      	cmp	r0, r6
 8008612:	f000 8083 	beq.w	800871c <HAL_GPIO_Init+0x220>
 8008616:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8008784 <HAL_GPIO_Init+0x288>
 800861a:	4550      	cmp	r0, sl
 800861c:	f000 8094 	beq.w	8008748 <HAL_GPIO_Init+0x24c>
 8008620:	f8df a164 	ldr.w	sl, [pc, #356]	; 8008788 <HAL_GPIO_Init+0x28c>
 8008624:	4550      	cmp	r0, sl
 8008626:	f000 8096 	beq.w	8008756 <HAL_GPIO_Init+0x25a>
 800862a:	f8df a160 	ldr.w	sl, [pc, #352]	; 800878c <HAL_GPIO_Init+0x290>
 800862e:	4550      	cmp	r0, sl
 8008630:	bf0c      	ite	eq
 8008632:	f04f 0a09 	moveq.w	sl, #9
 8008636:	f04f 0a0a 	movne.w	sl, #10
 800863a:	fa0a f909 	lsl.w	r9, sl, r9
 800863e:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008642:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008648:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 800864a:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800864e:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8008650:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008654:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8008656:	bf54      	ite	pl
 8008658:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800865a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800865e:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008662:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8008664:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008668:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800866c:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800866e:	bf54      	ite	pl
 8008670:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8008672:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8008676:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800867a:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800867c:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008680:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008684:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8008686:	bf54      	ite	pl
 8008688:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800868a:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800868e:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008692:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8008694:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008698:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800869a:	bf54      	ite	pl
 800869c:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800869e:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086a2:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80086a6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086aa:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80086ac:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80086ae:	f10c 0c02 	add.w	ip, ip, #2
 80086b2:	fa33 f402 	lsrs.w	r4, r3, r2
 80086b6:	f47f af2f 	bne.w	8008518 <HAL_GPIO_Init+0x1c>
  }
}
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80086c0:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086c2:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086c6:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80086c8:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086ca:	fa03 f30c 	lsl.w	r3, r3, ip
 80086ce:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80086d2:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086d4:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80086d6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086da:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086de:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086e2:	4093      	lsls	r3, r2
 80086e4:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 80086e8:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086ea:	684b      	ldr	r3, [r1, #4]
 80086ec:	f003 0303 	and.w	r3, r3, #3
 80086f0:	e726      	b.n	8008540 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80086f2:	f04f 0a03 	mov.w	sl, #3
 80086f6:	fa0a f909 	lsl.w	r9, sl, r9
 80086fa:	ea43 0309 	orr.w	r3, r3, r9
 80086fe:	e7a0      	b.n	8008642 <HAL_GPIO_Init+0x146>
 8008700:	f04f 0a01 	mov.w	sl, #1
 8008704:	fa0a f909 	lsl.w	r9, sl, r9
 8008708:	ea43 0309 	orr.w	r3, r3, r9
 800870c:	e799      	b.n	8008642 <HAL_GPIO_Init+0x146>
 800870e:	f04f 0a02 	mov.w	sl, #2
 8008712:	fa0a f909 	lsl.w	r9, sl, r9
 8008716:	ea43 0309 	orr.w	r3, r3, r9
 800871a:	e792      	b.n	8008642 <HAL_GPIO_Init+0x146>
 800871c:	f04f 0a06 	mov.w	sl, #6
 8008720:	fa0a f909 	lsl.w	r9, sl, r9
 8008724:	ea43 0309 	orr.w	r3, r3, r9
 8008728:	e78b      	b.n	8008642 <HAL_GPIO_Init+0x146>
 800872a:	f04f 0a04 	mov.w	sl, #4
 800872e:	fa0a f909 	lsl.w	r9, sl, r9
 8008732:	ea43 0309 	orr.w	r3, r3, r9
 8008736:	e784      	b.n	8008642 <HAL_GPIO_Init+0x146>
 8008738:	4770      	bx	lr
 800873a:	f04f 0a05 	mov.w	sl, #5
 800873e:	fa0a f909 	lsl.w	r9, sl, r9
 8008742:	ea43 0309 	orr.w	r3, r3, r9
 8008746:	e77c      	b.n	8008642 <HAL_GPIO_Init+0x146>
 8008748:	f04f 0a07 	mov.w	sl, #7
 800874c:	fa0a f909 	lsl.w	r9, sl, r9
 8008750:	ea43 0309 	orr.w	r3, r3, r9
 8008754:	e775      	b.n	8008642 <HAL_GPIO_Init+0x146>
 8008756:	f04f 0a08 	mov.w	sl, #8
 800875a:	fa0a f909 	lsl.w	r9, sl, r9
 800875e:	ea43 0309 	orr.w	r3, r3, r9
 8008762:	e76e      	b.n	8008642 <HAL_GPIO_Init+0x146>
 8008764:	58024400 	.word	0x58024400
 8008768:	58020000 	.word	0x58020000
 800876c:	58020800 	.word	0x58020800
 8008770:	58020c00 	.word	0x58020c00
 8008774:	58021000 	.word	0x58021000
 8008778:	58021400 	.word	0x58021400
 800877c:	58021800 	.word	0x58021800
 8008780:	58020400 	.word	0x58020400
 8008784:	58021c00 	.word	0x58021c00
 8008788:	58022000 	.word	0x58022000
 800878c:	58022400 	.word	0x58022400

08008790 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008790:	6903      	ldr	r3, [r0, #16]
 8008792:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008794:	bf14      	ite	ne
 8008796:	2001      	movne	r0, #1
 8008798:	2000      	moveq	r0, #0
 800879a:	4770      	bx	lr

0800879c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800879c:	b902      	cbnz	r2, 80087a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800879e:	0409      	lsls	r1, r1, #16
 80087a0:	6181      	str	r1, [r0, #24]
  }
}
 80087a2:	4770      	bx	lr

080087a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80087a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80087a6:	ea01 0203 	and.w	r2, r1, r3
 80087aa:	ea21 0103 	bic.w	r1, r1, r3
 80087ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087b2:	6181      	str	r1, [r0, #24]
}
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop

080087b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087bc:	6803      	ldr	r3, [r0, #0]
{
 80087be:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	0694      	lsls	r4, r2, #26
 80087c4:	d46d      	bmi.n	80088a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 80087c6:	4605      	mov	r5, r0
 80087c8:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087ca:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80087ce:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80087d0:	f014 0410 	ands.w	r4, r4, #16
 80087d4:	d068      	beq.n	80088a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 80087d6:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087d8:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 80087dc:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087de:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087e0:	46b2      	mov	sl, r6
 80087e2:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	d161      	bne.n	80088ac <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 80087e8:	0690      	lsls	r0, r2, #26
 80087ea:	f100 8085 	bmi.w	80088f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80087ee:	f1ba 0f00 	cmp.w	sl, #0
 80087f2:	d105      	bne.n	8008800 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 80087f4:	699c      	ldr	r4, [r3, #24]
 80087f6:	06a1      	lsls	r1, r4, #26
 80087f8:	d5fc      	bpl.n	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087fa:	2220      	movs	r2, #32
 80087fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80087fe:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 8008800:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8008804:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8008806:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008808:	05d0      	lsls	r0, r2, #23
 800880a:	d535      	bpl.n	8008878 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800880c:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008810:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8008812:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008816:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008818:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800881a:	d505      	bpl.n	8008828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800881c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008820:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008824:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008826:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008828:	0597      	lsls	r7, r2, #22
 800882a:	d505      	bpl.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800882c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008830:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008834:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008836:	682b      	ldr	r3, [r5, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	0790      	lsls	r0, r2, #30
 800883c:	d502      	bpl.n	8008844 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800883e:	2200      	movs	r2, #0
 8008840:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	07d1      	lsls	r1, r2, #31
 8008848:	d404      	bmi.n	8008854 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008856:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8008858:	4835      	ldr	r0, [pc, #212]	; (8008930 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 800885a:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 800885c:	4002      	ands	r2, r0
      return HAL_ERROR;
 800885e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008860:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8008862:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008864:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8008868:	431c      	orrs	r4, r3
 800886a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800886c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008870:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008878:	0550      	lsls	r0, r2, #21
 800887a:	d4cf      	bmi.n	800881c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800887c:	0596      	lsls	r6, r2, #22
 800887e:	d4d5      	bmi.n	800882c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 8008880:	2900      	cmp	r1, #0
 8008882:	d1d9      	bne.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008884:	f7fe f9ac 	bl	8006be0 <HAL_GetTick>
 8008888:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800888c:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888e:	42b8      	cmp	r0, r7
 8008890:	d800      	bhi.n	8008894 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 8008892:	b91f      	cbnz	r7, 800889c <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	f012 0220 	ands.w	r2, r2, #32
 800889a:	d032      	beq.n	8008902 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	0692      	lsls	r2, r2, #26
 80088a0:	d595      	bpl.n	80087ce <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80088a2:	2000      	movs	r0, #0
}
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80088a8:	4621      	mov	r1, r4
 80088aa:	e7ac      	b.n	8008806 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088ac:	0692      	lsls	r2, r2, #26
 80088ae:	d423      	bmi.n	80088f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80088b0:	f1ba 0f00 	cmp.w	sl, #0
 80088b4:	d1a4      	bne.n	8008800 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088b6:	f7fe f993 	bl	8006be0 <HAL_GetTick>
 80088ba:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088bc:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088be:	4287      	cmp	r7, r0
 80088c0:	d301      	bcc.n	80088c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	d18d      	bne.n	80087e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088c6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80088c8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088cc:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80088ce:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088d0:	0409      	lsls	r1, r1, #16
 80088d2:	d503      	bpl.n	80088dc <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 80088d4:	0441      	lsls	r1, r0, #17
 80088d6:	d401      	bmi.n	80088dc <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 80088d8:	2a20      	cmp	r2, #32
 80088da:	d11f      	bne.n	800891c <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088dc:	699a      	ldr	r2, [r3, #24]
 80088de:	0690      	lsls	r0, r2, #26
 80088e0:	f53f af7f 	bmi.w	80087e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80088e4:	f7fe f97c 	bl	8006be0 <HAL_GetTick>
 80088e8:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088ea:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80088ec:	2819      	cmp	r0, #25
 80088ee:	d9f5      	bls.n	80088dc <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80088f0:	2620      	movs	r6, #32
              status = HAL_ERROR;
 80088f2:	f04f 0a01 	mov.w	sl, #1
 80088f6:	e774      	b.n	80087e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 80088f8:	f1ba 0f00 	cmp.w	sl, #0
 80088fc:	f43f af7d 	beq.w	80087fa <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8008900:	e77e      	b.n	8008800 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008902:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008904:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8008906:	2001      	movs	r0, #1
 8008908:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800890c:	430b      	orrs	r3, r1
 800890e:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008910:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008914:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008922:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008924:	f7fe f95c 	bl	8006be0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008928:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800892a:	4604      	mov	r4, r0
 800892c:	e7d6      	b.n	80088dc <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800892e:	bf00      	nop
 8008930:	fe00e800 	.word	0xfe00e800

08008934 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8008934:	2800      	cmp	r0, #0
 8008936:	d056      	beq.n	80089e6 <HAL_I2C_Init+0xb2>
{
 8008938:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800893a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800893e:	4604      	mov	r4, r0
 8008940:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008944:	2b00      	cmp	r3, #0
 8008946:	d049      	beq.n	80089dc <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8008948:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800894a:	2324      	movs	r3, #36	; 0x24
 800894c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008950:	6813      	ldr	r3, [r2, #0]
 8008952:	f023 0301 	bic.w	r3, r3, #1
 8008956:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008958:	e9d4 2300 	ldrd	r2, r3, [r4]
 800895c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008960:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	6893      	ldr	r3, [r2, #8]
 8008966:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800896a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800896c:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800896e:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008970:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	bf0c      	ite	eq
 8008976:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800897a:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800897e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008980:	68e3      	ldr	r3, [r4, #12]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d103      	bne.n	800898e <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800898c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800898e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008990:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008994:	4b15      	ldr	r3, [pc, #84]	; (80089ec <HAL_I2C_Init+0xb8>)
 8008996:	6851      	ldr	r1, [r2, #4]
 8008998:	430b      	orrs	r3, r1
 800899a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	68d3      	ldr	r3, [r2, #12]
 80089a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089a4:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089a6:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80089ae:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089b0:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80089b6:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089b8:	6821      	ldr	r1, [r4, #0]
 80089ba:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80089be:	4303      	orrs	r3, r0
  return HAL_OK;
 80089c0:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089c2:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	680b      	ldr	r3, [r1, #0]
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089ce:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80089d4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80089da:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80089dc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80089e0:	f7fb fb66 	bl	80040b0 <HAL_I2C_MspInit>
 80089e4:	e7b0      	b.n	8008948 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 80089e6:	2001      	movs	r0, #1
}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	02008000 	.word	0x02008000

080089f0 <HAL_I2C_Master_Transmit>:
{
 80089f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80089fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d12c      	bne.n	8008a5a <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 8008a00:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008a04:	4683      	mov	fp, r0
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d027      	beq.n	8008a5a <HAL_I2C_Master_Transmit+0x6a>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	468a      	mov	sl, r1
 8008a0e:	4616      	mov	r6, r2
 8008a10:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008a14:	f7fe f8e4 	bl	8006be0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a18:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8008a1c:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	0417      	lsls	r7, r2, #16
 8008a22:	d51d      	bpl.n	8008a60 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a24:	f7fe f8dc 	bl	8006be0 <HAL_GetTick>
 8008a28:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a2c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a30:	2819      	cmp	r0, #25
 8008a32:	d9f4      	bls.n	8008a1e <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	0410      	lsls	r0, r2, #16
 8008a38:	d5f1      	bpl.n	8008a1e <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a3a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a3e:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a40:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008a42:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a44:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8008a46:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a4a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a4e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a52:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8008a56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8008a5a:	2002      	movs	r0, #2
}
 8008a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a60:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a62:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8008a64:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a68:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a6c:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 8008a6e:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a72:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a76:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 8008a7a:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a7e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8008a82:	b292      	uxth	r2, r2
 8008a84:	2aff      	cmp	r2, #255	; 0xff
 8008a86:	d87e      	bhi.n	8008b86 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 8008a88:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a8c:	48ad      	ldr	r0, [pc, #692]	; (8008d44 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 8008a8e:	b292      	uxth	r2, r2
 8008a90:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a94:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a96:	6859      	ldr	r1, [r3, #4]
 8008a98:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a9a:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8008a9e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aa2:	4301      	orrs	r1, r0
 8008aa4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008aa8:	49a7      	ldr	r1, [pc, #668]	; (8008d48 <HAL_I2C_Master_Transmit+0x358>)
 8008aaa:	4311      	orrs	r1, r2
 8008aac:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008aae:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 8008ab2:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8107 	beq.w	8008ccc <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008abe:	f8db 3000 	ldr.w	r3, [fp]
 8008ac2:	699c      	ldr	r4, [r3, #24]
 8008ac4:	f014 0402 	ands.w	r4, r4, #2
 8008ac8:	f040 80c5 	bne.w	8008c56 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 8008acc:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ace:	f012 0210 	ands.w	r2, r2, #16
 8008ad2:	f000 808d 	beq.w	8008bf0 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ad6:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8008ad8:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 8008ada:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008adc:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ade:	f8db 3000 	ldr.w	r3, [fp]
 8008ae2:	1c69      	adds	r1, r5, #1
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	f040 8085 	bne.w	8008bf4 <HAL_I2C_Master_Transmit+0x204>
 8008aea:	0690      	lsls	r0, r2, #26
 8008aec:	f100 8106 	bmi.w	8008cfc <HAL_I2C_Master_Transmit+0x30c>
 8008af0:	b937      	cbnz	r7, 8008b00 <HAL_I2C_Master_Transmit+0x110>
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	0691      	lsls	r1, r2, #26
 8008af6:	d5fc      	bpl.n	8008af2 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008af8:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8008afc:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 8008b00:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8008b04:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008b06:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b08:	05ce      	lsls	r6, r1, #23
 8008b0a:	d54b      	bpl.n	8008ba4 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b0c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b10:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8008b12:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b16:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b18:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b1c:	d506      	bpl.n	8008b2c <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b1e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008b22:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b26:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b28:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b2c:	0589      	lsls	r1, r1, #22
 8008b2e:	d506      	bpl.n	8008b3e <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b30:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b34:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b38:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b3a:	f8db 3000 	ldr.w	r3, [fp]
 8008b3e:	6999      	ldr	r1, [r3, #24]
 8008b40:	078e      	lsls	r6, r1, #30
 8008b42:	d503      	bpl.n	8008b4c <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8008b44:	2100      	movs	r1, #0
 8008b46:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b48:	f8db 3000 	ldr.w	r3, [fp]
 8008b4c:	6999      	ldr	r1, [r3, #24]
 8008b4e:	07cd      	lsls	r5, r1, #31
 8008b50:	d405      	bmi.n	8008b5e <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b52:	6999      	ldr	r1, [r3, #24]
 8008b54:	f041 0101 	orr.w	r1, r1, #1
 8008b58:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8008b5a:	f8db 3000 	ldr.w	r3, [fp]
 8008b5e:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b60:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 8008b62:	487a      	ldr	r0, [pc, #488]	; (8008d4c <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8008b64:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8008b66:	4001      	ands	r1, r0
        return HAL_ERROR;
 8008b68:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008b6a:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8008b6c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8008b70:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8008b74:	431a      	orrs	r2, r3
 8008b76:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008b7a:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b7e:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8008b82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b86:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b88:	496e      	ldr	r1, [pc, #440]	; (8008d44 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b8a:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b92:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8008b96:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b9a:	4311      	orrs	r1, r2
 8008b9c:	4a6c      	ldr	r2, [pc, #432]	; (8008d50 <HAL_I2C_Master_Transmit+0x360>)
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ba2:	e784      	b.n	8008aae <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ba4:	054c      	lsls	r4, r1, #21
 8008ba6:	d4ba      	bmi.n	8008b1e <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ba8:	058f      	lsls	r7, r1, #22
 8008baa:	d4c1      	bmi.n	8008b30 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d1c6      	bne.n	8008b3e <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 8008bb0:	1c6a      	adds	r2, r5, #1
 8008bb2:	d086      	beq.n	8008ac2 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb4:	f7fe f814 	bl	8006be0 <HAL_GetTick>
 8008bb8:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008bbc:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc0:	4285      	cmp	r5, r0
 8008bc2:	d302      	bcc.n	8008bca <HAL_I2C_Master_Transmit+0x1da>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	f47f af7c 	bne.w	8008ac2 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008bca:	699a      	ldr	r2, [r3, #24]
 8008bcc:	f012 0202 	ands.w	r2, r2, #2
 8008bd0:	f47f af77 	bne.w	8008ac2 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bd4:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bd8:	2120      	movs	r1, #32
        return HAL_ERROR;
 8008bda:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8008bdc:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008be0:	430b      	orrs	r3, r1
 8008be2:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008be6:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bea:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 8008bee:	e735      	b.n	8008a5c <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	e788      	b.n	8008b06 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bf4:	0692      	lsls	r2, r2, #26
 8008bf6:	f100 8081 	bmi.w	8008cfc <HAL_I2C_Master_Transmit+0x30c>
 8008bfa:	2f00      	cmp	r7, #0
 8008bfc:	d180      	bne.n	8008b00 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008bfe:	f7fd ffef 	bl	8006be0 <HAL_GetTick>
 8008c02:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c04:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c08:	4285      	cmp	r5, r0
 8008c0a:	d302      	bcc.n	8008c12 <HAL_I2C_Master_Transmit+0x222>
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	f47f af68 	bne.w	8008ae2 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c12:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8008c14:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c18:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8008c1a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c1c:	0409      	lsls	r1, r1, #16
 8008c1e:	d50c      	bpl.n	8008c3a <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 8008c20:	0441      	lsls	r1, r0, #17
 8008c22:	d40a      	bmi.n	8008c3a <HAL_I2C_Master_Transmit+0x24a>
 8008c24:	2a20      	cmp	r2, #32
 8008c26:	d008      	beq.n	8008c3a <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c2e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008c30:	f7fd ffd6 	bl	8006be0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c34:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8008c38:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c3a:	699a      	ldr	r2, [r3, #24]
 8008c3c:	0690      	lsls	r0, r2, #26
 8008c3e:	f53f af50 	bmi.w	8008ae2 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c42:	f7fd ffcd 	bl	8006be0 <HAL_GetTick>
 8008c46:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c48:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c4c:	2819      	cmp	r0, #25
 8008c4e:	d9f4      	bls.n	8008c3a <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c50:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8008c52:	2701      	movs	r7, #1
 8008c54:	e745      	b.n	8008ae2 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c56:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8008c5a:	7812      	ldrb	r2, [r2, #0]
 8008c5c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c5e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 8008c62:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8008c66:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008c68:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8008c6c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8008c6e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008c70:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8008c72:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8008c74:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c78:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008c7c:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c80:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8008c82:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	f43f af13 	beq.w	8008ab2 <HAL_I2C_Master_Transmit+0xc2>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f47f af10 	bne.w	8008ab2 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c92:	f8db 2000 	ldr.w	r2, [fp]
 8008c96:	1c6c      	adds	r4, r5, #1
 8008c98:	d134      	bne.n	8008d04 <HAL_I2C_Master_Transmit+0x314>
 8008c9a:	6993      	ldr	r3, [r2, #24]
 8008c9c:	0618      	lsls	r0, r3, #24
 8008c9e:	d5fc      	bpl.n	8008c9a <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ca0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2bff      	cmp	r3, #255	; 0xff
 8008ca8:	d958      	bls.n	8008d5c <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008caa:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cac:	4929      	ldr	r1, [pc, #164]	; (8008d54 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cae:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008cb2:	6853      	ldr	r3, [r2, #4]
 8008cb4:	400b      	ands	r3, r1
 8008cb6:	4928      	ldr	r1, [pc, #160]	; (8008d58 <HAL_I2C_Master_Transmit+0x368>)
 8008cb8:	ea4a 0303 	orr.w	r3, sl, r3
 8008cbc:	4319      	orrs	r1, r3
 8008cbe:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 8008cc0:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f47f aef9 	bne.w	8008abe <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ccc:	4642      	mov	r2, r8
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4658      	mov	r0, fp
 8008cd2:	f7ff fd71 	bl	80087b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d151      	bne.n	8008d7e <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cda:	f8db 3000 	ldr.w	r3, [fp]
 8008cde:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8008ce0:	4c1a      	ldr	r4, [pc, #104]	; (8008d4c <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ce2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008ce4:	f8db 1000 	ldr.w	r1, [fp]
 8008ce8:	684b      	ldr	r3, [r1, #4]
 8008cea:	4023      	ands	r3, r4
 8008cec:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008cee:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008cf2:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008cf6:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8008cfa:	e6af      	b.n	8008a5c <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8008cfc:	2f00      	cmp	r7, #0
 8008cfe:	f43f aefb 	beq.w	8008af8 <HAL_I2C_Master_Transmit+0x108>
 8008d02:	e6fd      	b.n	8008b00 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d04:	6993      	ldr	r3, [r2, #24]
 8008d06:	0619      	lsls	r1, r3, #24
 8008d08:	d4ca      	bmi.n	8008ca0 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d0a:	f7fd ff69 	bl	8006be0 <HAL_GetTick>
 8008d0e:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d12:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d16:	4285      	cmp	r5, r0
 8008d18:	d301      	bcc.n	8008d1e <HAL_I2C_Master_Transmit+0x32e>
 8008d1a:	2d00      	cmp	r5, #0
 8008d1c:	d1bb      	bne.n	8008c96 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d1e:	6993      	ldr	r3, [r2, #24]
 8008d20:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8008d24:	d1b7      	bne.n	8008c96 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d26:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d2a:	2120      	movs	r1, #32
          return HAL_ERROR;
 8008d2c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8008d2e:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d32:	430a      	orrs	r2, r1
 8008d34:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3c:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 8008d40:	e68c      	b.n	8008a5c <HAL_I2C_Master_Transmit+0x6c>
 8008d42:	bf00      	nop
 8008d44:	fc009800 	.word	0xfc009800
 8008d48:	02002000 	.word	0x02002000
 8008d4c:	fe00e800 	.word	0xfe00e800
 8008d50:	01ff2000 	.word	0x01ff2000
 8008d54:	fc009c00 	.word	0xfc009c00
 8008d58:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 8008d5c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d60:	4808      	ldr	r0, [pc, #32]	; (8008d84 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 8008d62:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d64:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8008d66:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d6a:	6853      	ldr	r3, [r2, #4]
 8008d6c:	4003      	ands	r3, r0
 8008d6e:	ea4a 0303 	orr.w	r3, sl, r3
 8008d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008d76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008d7a:	6053      	str	r3, [r2, #4]
}
 8008d7c:	e699      	b.n	8008ab2 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e66c      	b.n	8008a5c <HAL_I2C_Master_Transmit+0x6c>
 8008d82:	bf00      	nop
 8008d84:	fc009c00 	.word	0xfc009c00

08008d88 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d88:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8008d8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008d8c:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008d8e:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8008d90:	b103      	cbz	r3, 8008d94 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8008d92:	4718      	bx	r3
}
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop

08008d98 <HAL_I2C_SlaveTxCpltCallback>:
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop

08008d9c <HAL_I2C_SlaveRxCpltCallback>:
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop

08008da0 <I2C_ITSlaveSeqCplt>:
{
 8008da0:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008da2:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da4:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008da6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da8:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008dac:	0451      	lsls	r1, r2, #17
 8008dae:	d50c      	bpl.n	8008dca <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008db6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008db8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dbc:	2b29      	cmp	r3, #41	; 0x29
 8008dbe:	d00e      	beq.n	8008dde <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008dc0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008dc6:	d024      	beq.n	8008e12 <I2C_ITSlaveSeqCplt+0x72>
}
 8008dc8:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008dca:	0412      	lsls	r2, r2, #16
 8008dcc:	d5f4      	bpl.n	8008db8 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dd4:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008dd6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008dda:	2b29      	cmp	r3, #41	; 0x29
 8008ddc:	d1f0      	bne.n	8008dc0 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008dde:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008de0:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008de2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8008de4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008de8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008dec:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008df2:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008df4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008df8:	2a28      	cmp	r2, #40	; 0x28
 8008dfa:	bf0c      	ite	eq
 8008dfc:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8008e00:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e04:	4013      	ands	r3, r2
 8008e06:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8008e08:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e0c:	f7ff ffc4 	bl	8008d98 <HAL_I2C_SlaveTxCpltCallback>
}
 8008e10:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e12:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e14:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e16:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8008e18:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008e1c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e20:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e26:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e28:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8008e2c:	2a28      	cmp	r2, #40	; 0x28
 8008e2e:	bf0c      	ite	eq
 8008e30:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8008e34:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e38:	4013      	ands	r3, r2
 8008e3a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8008e3c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008e40:	f7ff ffac 	bl	8008d9c <HAL_I2C_SlaveRxCpltCallback>
}
 8008e44:	bd08      	pop	{r3, pc}
 8008e46:	bf00      	nop

08008e48 <HAL_I2C_AddrCallback>:
}
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop

08008e4c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8008e4c:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8008e4e:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8008e50:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e52:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8008e54:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e56:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e58:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e5a:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8008e5c:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e60:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008e64:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008e66:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e6a:	d10f      	bne.n	8008e8c <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008e6c:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008e70:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008e74:	f013 0306 	ands.w	r3, r3, #6
 8008e78:	d106      	bne.n	8008e88 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8008e7a:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008e80:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8008e82:	2d02      	cmp	r5, #2
 8008e84:	d00c      	beq.n	8008ea0 <I2C_ITAddrCplt.part.0+0x54>
}
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e88:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8008e92:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8008e94:	2300      	movs	r3, #0
 8008e96:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008e9a:	f7ff ffd5 	bl	8008e48 <HAL_I2C_AddrCallback>
}
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ea0:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8008ea2:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ea4:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8008ea6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008eaa:	f7ff ffcd 	bl	8008e48 <HAL_I2C_AddrCallback>
}
 8008eae:	bd70      	pop	{r4, r5, r6, pc}

08008eb0 <HAL_I2C_ListenCpltCallback>:
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop

08008eb4 <HAL_I2C_ErrorCallback>:
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop

08008eb8 <HAL_I2C_AbortCpltCallback>:
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop

08008ebc <I2C_DMAAbort>:
{
 8008ebc:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ebe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8008ec0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008ec2:	b10b      	cbz	r3, 8008ec8 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8008ec8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008eca:	b10b      	cbz	r3, 8008ed0 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008ecc:	2200      	movs	r2, #0
 8008ece:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ed0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008ed4:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ed6:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008eda:	d005      	beq.n	8008ee8 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008edc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008ede:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008ee2:	f7ff ffe7 	bl	8008eb4 <HAL_I2C_ErrorCallback>
}
 8008ee6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008ee8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8008eea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8008eee:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ef2:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ef4:	f7ff ffe0 	bl	8008eb8 <HAL_I2C_AbortCpltCallback>
}
 8008ef8:	bd08      	pop	{r3, pc}
 8008efa:	bf00      	nop

08008efc <I2C_ITError>:
{
 8008efc:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008efe:	4a5d      	ldr	r2, [pc, #372]	; (8009074 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f00:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008f02:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8008f06:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f08:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008f0c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f0e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008f10:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8008f12:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008f14:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8008f16:	ea41 0102 	orr.w	r1, r1, r2
 8008f1a:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008f1c:	d874      	bhi.n	8009008 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f1e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f22:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f26:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f2a:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f2c:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f30:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f32:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f34:	bf14      	ite	ne
 8008f36:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8008f3a:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f3e:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f40:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f44:	bf18      	it	ne
 8008f46:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008f50:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008f54:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008f56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8008f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8008f5a:	b118      	cbz	r0, 8008f64 <I2C_ITError+0x68>
 8008f5c:	2b11      	cmp	r3, #17
 8008f5e:	d01e      	beq.n	8008f9e <I2C_ITError+0xa2>
 8008f60:	2b21      	cmp	r3, #33	; 0x21
 8008f62:	d01c      	beq.n	8008f9e <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008f64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008f66:	b118      	cbz	r0, 8008f70 <I2C_ITError+0x74>
 8008f68:	2b12      	cmp	r3, #18
 8008f6a:	d030      	beq.n	8008fce <I2C_ITError+0xd2>
 8008f6c:	2b22      	cmp	r3, #34	; 0x22
 8008f6e:	d02e      	beq.n	8008fce <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008f74:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f76:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f7a:	d006      	beq.n	8008f8a <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8008f7c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f7e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008f80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008f84:	f7ff ff96 	bl	8008eb4 <HAL_I2C_ErrorCallback>
}
 8008f88:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8008f8a:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f8c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8008f8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8008f92:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f96:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f98:	f7ff ff8e 	bl	8008eb8 <HAL_I2C_AbortCpltCallback>
}
 8008f9c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	0451      	lsls	r1, r2, #17
 8008fa4:	d460      	bmi.n	8009068 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008fa6:	f7ff faa3 	bl	80084f0 <HAL_DMA_GetState>
 8008faa:	2801      	cmp	r0, #1
 8008fac:	d0e0      	beq.n	8008f70 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008fae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8008fb0:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008fb2:	4932      	ldr	r1, [pc, #200]	; (800907c <I2C_ITError+0x180>)
 8008fb4:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8008fb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008fba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008fbc:	f7fe fd04 	bl	80079c8 <HAL_DMA_Abort_IT>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	d0e1      	beq.n	8008f88 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8008fc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008fca:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008fcc:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	0412      	lsls	r2, r2, #16
 8008fd4:	d504      	bpl.n	8008fe0 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fdc:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008fde:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008fe0:	f7ff fa86 	bl	80084f0 <HAL_DMA_GetState>
 8008fe4:	2801      	cmp	r0, #1
 8008fe6:	d0c3      	beq.n	8008f70 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fe8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8008fea:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008fec:	4923      	ldr	r1, [pc, #140]	; (800907c <I2C_ITError+0x180>)
 8008fee:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8008ff0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008ff4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008ff6:	f7fe fce7 	bl	80079c8 <HAL_DMA_Abort_IT>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d0c4      	beq.n	8008f88 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008ffe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8009000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009004:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009006:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009008:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800900a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800900e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009018:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800901a:	6803      	ldr	r3, [r0, #0]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	0792      	lsls	r2, r2, #30
 8009020:	d501      	bpl.n	8009026 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8009022:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009024:	6803      	ldr	r3, [r0, #0]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	07d6      	lsls	r6, r2, #31
 800902a:	d403      	bmi.n	8009034 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800902c:	699a      	ldr	r2, [r3, #24]
 800902e:	f042 0201 	orr.w	r2, r2, #1
 8009032:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009034:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009038:	2b60      	cmp	r3, #96	; 0x60
 800903a:	d012      	beq.n	8009062 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 800903c:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800903e:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8009040:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009044:	699a      	ldr	r2, [r3, #24]
 8009046:	0695      	lsls	r5, r2, #26
 8009048:	d50b      	bpl.n	8009062 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	06d0      	lsls	r0, r2, #27
 800904e:	d506      	bpl.n	800905e <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009050:	2210      	movs	r2, #16
 8009052:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009054:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009056:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009058:	f042 0204 	orr.w	r2, r2, #4
 800905c:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800905e:	2220      	movs	r2, #32
 8009060:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	6363      	str	r3, [r4, #52]	; 0x34
 8009066:	e776      	b.n	8008f56 <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800906e:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009070:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009072:	e798      	b.n	8008fa6 <I2C_ITError+0xaa>
 8009074:	ffff0000 	.word	0xffff0000
 8009078:	08009229 	.word	0x08009229
 800907c:	08008ebd 	.word	0x08008ebd

08009080 <I2C_ITSlaveCplt>:
{
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009082:	6802      	ldr	r2, [r0, #0]
{
 8009084:	460d      	mov	r5, r1
 8009086:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009088:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800908a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800908e:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009090:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009094:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009096:	2b21      	cmp	r3, #33	; 0x21
 8009098:	d16f      	bne.n	800917a <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800909a:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800909c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 80090a6:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80090a8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80090aa:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 80090ac:	485c      	ldr	r0, [pc, #368]	; (8009220 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80090ae:	6853      	ldr	r3, [r2, #4]
 80090b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b4:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	6853      	ldr	r3, [r2, #4]
 80090ba:	4003      	ands	r3, r0
 80090bc:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090be:	6823      	ldr	r3, [r4, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	0797      	lsls	r7, r2, #30
 80090c4:	d502      	bpl.n	80090cc <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 80090c6:	2200      	movs	r2, #0
 80090c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	07d6      	lsls	r6, r2, #31
 80090d0:	d403      	bmi.n	80090da <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	f042 0201 	orr.w	r2, r2, #1
 80090d8:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090da:	0448      	lsls	r0, r1, #17
 80090dc:	d558      	bpl.n	8009190 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	6813      	ldr	r3, [r2, #0]
 80090e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090e6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80090e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090ea:	b11b      	cbz	r3, 80090f4 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	6853      	ldr	r3, [r2, #4]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80090f4:	076a      	lsls	r2, r5, #29
 80090f6:	d50a      	bpl.n	800910e <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090f8:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80090fa:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80090fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009102:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009104:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009106:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009108:	3301      	adds	r3, #1
 800910a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800910c:	bb72      	cbnz	r2, 800916c <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
 800910e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	b11b      	cbz	r3, 800911c <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009114:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009116:	f043 0304 	orr.w	r3, r3, #4
 800911a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800911c:	2700      	movs	r7, #0
 800911e:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009122:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8009124:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009126:	2e00      	cmp	r6, #0
 8009128:	d13d      	bne.n	80091a6 <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800912a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800912c:	4d3d      	ldr	r5, [pc, #244]	; (8009224 <I2C_ITSlaveCplt+0x1a4>)
 800912e:	42ab      	cmp	r3, r5
 8009130:	d10e      	bne.n	8009150 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009132:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009136:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8009138:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800913c:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800913e:	f04f 0320 	mov.w	r3, #32
 8009142:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009146:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009148:	d066      	beq.n	8009218 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800914a:	f7ff fe25 	bl	8008d98 <HAL_I2C_SlaveTxCpltCallback>
}
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8009150:	4620      	mov	r0, r4
 8009152:	f7ff fe25 	bl	8008da0 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8009156:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009158:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800915a:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800915c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009160:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8009164:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8009166:	f7ff fea3 	bl	8008eb0 <HAL_I2C_ListenCpltCallback>
}
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 800916c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800916e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009170:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009172:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009174:	b29b      	uxth	r3, r3
 8009176:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009178:	e7c9      	b.n	800910e <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800917a:	2b22      	cmp	r3, #34	; 0x22
 800917c:	d195      	bne.n	80090aa <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800917e:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009180:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009184:	6802      	ldr	r2, [r0, #0]
 8009186:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 800918a:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800918c:	6323      	str	r3, [r4, #48]	; 0x30
 800918e:	e78c      	b.n	80090aa <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009190:	0409      	lsls	r1, r1, #16
 8009192:	d5af      	bpl.n	80090f4 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009194:	6822      	ldr	r2, [r4, #0]
 8009196:	6813      	ldr	r3, [r2, #0]
 8009198:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800919c:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800919e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1a3      	bne.n	80090ec <I2C_ITSlaveCplt+0x6c>
 80091a4:	e7a6      	b.n	80090f4 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80091a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff fea7 	bl	8008efc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80091ae:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80091b2:	2b28      	cmp	r3, #40	; 0x28
 80091b4:	d1cb      	bne.n	800914e <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
 80091b6:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091b8:	4a1a      	ldr	r2, [pc, #104]	; (8009224 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
 80091ba:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091bc:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80091be:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80091c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80091c4:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c6:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80091ca:	d512      	bpl.n	80091f2 <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80091d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80091d6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80091d8:	3301      	adds	r3, #1
 80091da:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80091dc:	b14a      	cbz	r2, 80091f2 <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
 80091de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80091e0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80091e2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80091e4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091ec:	f043 0304 	orr.w	r3, r3, #4
 80091f0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80091f2:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091f4:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80091f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 80091fa:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80091fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009200:	6813      	ldr	r3, [r2, #0]
 8009202:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009206:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800920c:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800920e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8009212:	f7ff fe4d 	bl	8008eb0 <HAL_I2C_ListenCpltCallback>
}
 8009216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009218:	f7ff fdc0 	bl	8008d9c <HAL_I2C_SlaveRxCpltCallback>
}
 800921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800921e:	bf00      	nop
 8009220:	fe00e800 	.word	0xfe00e800
 8009224:	ffff0000 	.word	0xffff0000

08009228 <I2C_Slave_ISR_IT>:
{
 8009228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800922a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800922e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8009230:	2b01      	cmp	r3, #1
 8009232:	d07f      	beq.n	8009334 <I2C_Slave_ISR_IT+0x10c>
 8009234:	4617      	mov	r7, r2
 8009236:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009238:	068a      	lsls	r2, r1, #26
 800923a:	4604      	mov	r4, r0
 800923c:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800923e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009242:	d501      	bpl.n	8009248 <I2C_Slave_ISR_IT+0x20>
 8009244:	06bb      	lsls	r3, r7, #26
 8009246:	d461      	bmi.n	800930c <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009248:	06ea      	lsls	r2, r5, #27
 800924a:	d51b      	bpl.n	8009284 <I2C_Slave_ISR_IT+0x5c>
 800924c:	06fb      	lsls	r3, r7, #27
 800924e:	d519      	bpl.n	8009284 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 8009250:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009252:	b29b      	uxth	r3, r3
 8009254:	2b00      	cmp	r3, #0
 8009256:	d15e      	bne.n	8009316 <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009258:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800925c:	2a28      	cmp	r2, #40	; 0x28
 800925e:	d102      	bne.n	8009266 <I2C_Slave_ISR_IT+0x3e>
 8009260:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8009264:	d07f      	beq.n	8009366 <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009266:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800926a:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800926c:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009272:	d102      	bne.n	800927a <I2C_Slave_ISR_IT+0x52>
 8009274:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8009278:	d162      	bne.n	8009340 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 800927a:	2300      	movs	r3, #0
  return HAL_OK;
 800927c:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 800927e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009284:	076a      	lsls	r2, r5, #29
 8009286:	d40d      	bmi.n	80092a4 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009288:	0728      	lsls	r0, r5, #28
 800928a:	d529      	bpl.n	80092e0 <I2C_Slave_ISR_IT+0xb8>
 800928c:	0739      	lsls	r1, r7, #28
 800928e:	d527      	bpl.n	80092e0 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009290:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009294:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009298:	2b28      	cmp	r3, #40	; 0x28
 800929a:	d060      	beq.n	800935e <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	2208      	movs	r2, #8
 80092a0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80092a2:	e7ea      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80092a4:	077b      	lsls	r3, r7, #29
 80092a6:	d5ef      	bpl.n	8009288 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 80092a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	b16b      	cbz	r3, 80092ca <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092ae:	6822      	ldr	r2, [r4, #0]
 80092b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092b4:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80092b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80092b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80092ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80092bc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80092be:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80092c0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80092c2:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80092c4:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80092c6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80092c8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80092ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1d3      	bne.n	800927a <I2C_Slave_ISR_IT+0x52>
 80092d2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80092d6:	d0d0      	beq.n	800927a <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80092d8:	4620      	mov	r0, r4
 80092da:	f7ff fd61 	bl	8008da0 <I2C_ITSlaveSeqCplt>
 80092de:	e7cc      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80092e0:	07aa      	lsls	r2, r5, #30
 80092e2:	d5ca      	bpl.n	800927a <I2C_Slave_ISR_IT+0x52>
 80092e4:	07bb      	lsls	r3, r7, #30
 80092e6:	d5c8      	bpl.n	800927a <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80092e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	b323      	cbz	r3, 8009338 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80092f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80092fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80092fc:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 80092fe:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8009300:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009302:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8009304:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009306:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009308:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800930a:	e7b6      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800930c:	f7ff feb8 	bl	8009080 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009310:	06ea      	lsls	r2, r5, #27
 8009312:	d5b7      	bpl.n	8009284 <I2C_Slave_ISR_IT+0x5c>
 8009314:	e79a      	b.n	800924c <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	2210      	movs	r2, #16
 800931a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800931c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800931e:	f043 0304 	orr.w	r3, r3, #4
 8009322:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009324:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8009328:	d1a7      	bne.n	800927a <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800932a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800932c:	4620      	mov	r0, r4
 800932e:	f7ff fde5 	bl	8008efc <I2C_ITError>
 8009332:	e7a2      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8009334:	2002      	movs	r0, #2
}
 8009336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009338:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800933c:	d19d      	bne.n	800927a <I2C_Slave_ISR_IT+0x52>
 800933e:	e7cb      	b.n	80092d8 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	699a      	ldr	r2, [r3, #24]
 8009344:	0790      	lsls	r0, r2, #30
 8009346:	d502      	bpl.n	800934e <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 8009348:	2200      	movs	r2, #0
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	699a      	ldr	r2, [r3, #24]
 8009350:	07d1      	lsls	r1, r2, #31
 8009352:	d4c1      	bmi.n	80092d8 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	619a      	str	r2, [r3, #24]
 800935c:	e7bc      	b.n	80092d8 <I2C_Slave_ISR_IT+0xb0>
 800935e:	4620      	mov	r0, r4
 8009360:	f7ff fd74 	bl	8008e4c <I2C_ITAddrCplt.part.0>
 8009364:	e789      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009366:	4918      	ldr	r1, [pc, #96]	; (80093c8 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009368:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800936a:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 800936c:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800936e:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009370:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009372:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800937a:	d512      	bpl.n	80093a2 <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800937c:	6822      	ldr	r2, [r4, #0]
 800937e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009382:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009384:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009386:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009388:	3301      	adds	r3, #1
 800938a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800938c:	b14a      	cbz	r2, 80093a2 <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
 800938e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009390:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009392:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009394:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009396:	b29b      	uxth	r3, r3
 8009398:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800939a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800939c:	f043 0304 	orr.w	r3, r3, #4
 80093a0:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80093a2:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093a4:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 80093aa:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80093ac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80093b0:	6813      	ldr	r3, [r2, #0]
 80093b2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80093b6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 80093bc:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 80093be:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80093c2:	f7ff fd75 	bl	8008eb0 <HAL_I2C_ListenCpltCallback>
}
 80093c6:	e758      	b.n	800927a <I2C_Slave_ISR_IT+0x52>
 80093c8:	ffff0000 	.word	0xffff0000

080093cc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80093cc:	6803      	ldr	r3, [r0, #0]
{
 80093ce:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80093d4:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80093d6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80093da:	d032      	beq.n	8009442 <HAL_I2C_ER_IRQHandler+0x76>
 80093dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80093e0:	d021      	beq.n	8009426 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80093e2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093e4:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80093e8:	f041 0101 	orr.w	r1, r1, #1
 80093ec:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093ee:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80093f0:	0553      	lsls	r3, r2, #21
 80093f2:	d507      	bpl.n	8009404 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093f4:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80093f6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80093fc:	f041 0108 	orr.w	r1, r1, #8
 8009400:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009402:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009404:	0592      	lsls	r2, r2, #22
 8009406:	d507      	bpl.n	8009418 <HAL_I2C_ER_IRQHandler+0x4c>
 8009408:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800940a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800940c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009410:	f043 0302 	orr.w	r3, r3, #2
 8009414:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009416:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 8009418:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800941a:	f011 0f0b 	tst.w	r1, #11
 800941e:	d10c      	bne.n	800943a <HAL_I2C_ER_IRQHandler+0x6e>
}
 8009420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009424:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009426:	0553      	lsls	r3, r2, #21
 8009428:	d4f6      	bmi.n	8009418 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800942a:	0593      	lsls	r3, r2, #22
 800942c:	d5f4      	bpl.n	8009418 <HAL_I2C_ER_IRQHandler+0x4c>
 800942e:	060a      	lsls	r2, r1, #24
 8009430:	d4eb      	bmi.n	800940a <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 8009432:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009434:	f011 0f0b 	tst.w	r1, #11
 8009438:	d0f2      	beq.n	8009420 <HAL_I2C_ER_IRQHandler+0x54>
}
 800943a:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800943e:	f7ff bd5d 	b.w	8008efc <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009442:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009446:	d0f0      	beq.n	800942a <HAL_I2C_ER_IRQHandler+0x5e>
 8009448:	0609      	lsls	r1, r1, #24
 800944a:	d5e5      	bpl.n	8009418 <HAL_I2C_ER_IRQHandler+0x4c>
 800944c:	e7d3      	b.n	80093f6 <HAL_I2C_ER_IRQHandler+0x2a>
 800944e:	bf00      	nop

08009450 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009450:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8009454:	2a20      	cmp	r2, #32
 8009456:	d129      	bne.n	80094ac <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8009458:	4603      	mov	r3, r0
{
 800945a:	b500      	push	{lr}
 800945c:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009460:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8009464:	2a01      	cmp	r2, #1
 8009466:	d023      	beq.n	80094b0 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8009468:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800946a:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800946c:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8009470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009474:	2224      	movs	r2, #36	; 0x24
 8009476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800947a:	6802      	ldr	r2, [r0, #0]
 800947c:	f022 0201 	bic.w	r2, r2, #1
 8009480:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	6802      	ldr	r2, [r0, #0]
 8009486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800948a:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	6802      	ldr	r2, [r0, #0]
 8009490:	4311      	orrs	r1, r2
 8009492:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8009494:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8009496:	6819      	ldr	r1, [r3, #0]
 8009498:	680a      	ldr	r2, [r1, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80094a0:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80094a4:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80094a8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80094ac:	2002      	movs	r0, #2
}
 80094ae:	4770      	bx	lr
    return HAL_BUSY;
 80094b0:	2002      	movs	r0, #2
}
 80094b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80094b6:	bf00      	nop

080094b8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80094bc:	2a20      	cmp	r2, #32
 80094be:	d127      	bne.n	8009510 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80094c0:	4603      	mov	r3, r0
{
 80094c2:	b500      	push	{lr}
 80094c4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80094cc:	2a01      	cmp	r2, #1
 80094ce:	d021      	beq.n	8009514 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 80094d0:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094d2:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094d4:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 80094d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80094dc:	2224      	movs	r2, #36	; 0x24
 80094de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80094e2:	6802      	ldr	r2, [r0, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80094ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80094f2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80094f6:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80094f8:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 80094fa:	6819      	ldr	r1, [r3, #0]
 80094fc:	680a      	ldr	r2, [r1, #0]
 80094fe:	f042 0201 	orr.w	r2, r2, #1
 8009502:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009504:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009508:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800950c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8009510:	2002      	movs	r0, #2
}
 8009512:	4770      	bx	lr
    return HAL_BUSY;
 8009514:	2002      	movs	r0, #2
}
 8009516:	f85d fb04 	ldr.w	pc, [sp], #4
 800951a:	bf00      	nop

0800951c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800951c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800951e:	4c10      	ldr	r4, [pc, #64]	; (8009560 <HAL_PWREx_ConfigSupply+0x44>)
 8009520:	68e3      	ldr	r3, [r4, #12]
 8009522:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009526:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009528:	d105      	bne.n	8009536 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800952a:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800952e:	1a18      	subs	r0, r3, r0
 8009530:	bf18      	it	ne
 8009532:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009534:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009536:	f023 0307 	bic.w	r3, r3, #7
 800953a:	4318      	orrs	r0, r3
 800953c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800953e:	f7fd fb4f 	bl	8006be0 <HAL_GetTick>
 8009542:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009544:	e005      	b.n	8009552 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009546:	f7fd fb4b 	bl	8006be0 <HAL_GetTick>
 800954a:	1b40      	subs	r0, r0, r5
 800954c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8009550:	d804      	bhi.n	800955c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	049b      	lsls	r3, r3, #18
 8009556:	d5f6      	bpl.n	8009546 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8009558:	2000      	movs	r0, #0
}
 800955a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800955c:	2001      	movs	r0, #1
}
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	58024800 	.word	0x58024800

08009564 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009564:	4b3b      	ldr	r3, [pc, #236]	; (8009654 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8009566:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800956a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800956c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800956e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009572:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009574:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8009578:	d038      	beq.n	80095ec <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800957a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800957e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009582:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009586:	fb05 f101 	mul.w	r1, r5, r1
 800958a:	2a01      	cmp	r2, #1
 800958c:	ee07 1a90 	vmov	s15, r1
 8009590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8009594:	d002      	beq.n	800959c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8009596:	2a02      	cmp	r2, #2
 8009598:	d04e      	beq.n	8009638 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800959a:	b34a      	cbz	r2, 80095f0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800959c:	ee07 0a90 	vmov	s15, r0
 80095a0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8009658 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80095a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095aa:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80095ae:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800965c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80095b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b6:	ee06 3a90 	vmov	s13, r3
 80095ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80095be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80095c2:	ee76 6a85 	vadd.f32	s13, s13, s10
 80095c6:	eee7 6a25 	vfma.f32	s13, s14, s11
 80095ca:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80095ce:	4b21      	ldr	r3, [pc, #132]	; (8009654 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80095d6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80095d8:	ee07 3a90 	vmov	s15, r3
 80095dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095e8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80095ec:	bc30      	pop	{r4, r5}
 80095ee:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	0692      	lsls	r2, r2, #26
 80095f4:	d527      	bpl.n	8009646 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095f6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095f8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095fc:	4a18      	ldr	r2, [pc, #96]	; (8009660 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009604:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800960c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800965c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8009610:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009614:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009616:	ee06 3a90 	vmov	s13, r3
 800961a:	ee05 2a90 	vmov	s11, r2
 800961e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009622:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009626:	ee76 6a86 	vadd.f32	s13, s13, s12
 800962a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800962e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009632:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009636:	e7ca      	b.n	80095ce <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009638:	ee07 0a90 	vmov	s15, r0
 800963c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009664 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8009640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009644:	e7b0      	b.n	80095a8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009646:	ee07 0a90 	vmov	s15, r0
 800964a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8009668 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800964e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009652:	e7a9      	b.n	80095a8 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8009654:	58024400 	.word	0x58024400
 8009658:	4a742400 	.word	0x4a742400
 800965c:	39000000 	.word	0x39000000
 8009660:	03d09000 	.word	0x03d09000
 8009664:	4bbebc20 	.word	0x4bbebc20
 8009668:	4c742400 	.word	0x4c742400

0800966c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800966c:	2800      	cmp	r0, #0
 800966e:	f000 81ef 	beq.w	8009a50 <HAL_RCC_OscConfig+0x3e4>
{
 8009672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009674:	6803      	ldr	r3, [r0, #0]
 8009676:	4604      	mov	r4, r0
 8009678:	07d9      	lsls	r1, r3, #31
 800967a:	d52e      	bpl.n	80096da <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800967c:	49a4      	ldr	r1, [pc, #656]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 800967e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009680:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009682:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009686:	2a10      	cmp	r2, #16
 8009688:	f000 8107 	beq.w	800989a <HAL_RCC_OscConfig+0x22e>
 800968c:	2a18      	cmp	r2, #24
 800968e:	f000 80ff 	beq.w	8009890 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009698:	f000 812a 	beq.w	80098f0 <HAL_RCC_OscConfig+0x284>
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 8188 	bne.w	80099b2 <HAL_RCC_OscConfig+0x346>
 80096a2:	4b9b      	ldr	r3, [pc, #620]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096b2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 815c 	beq.w	8009974 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80096bc:	f7fd fa90 	bl	8006be0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096c0:	4e93      	ldr	r6, [pc, #588]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80096c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096c4:	e005      	b.n	80096d2 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096c6:	f7fd fa8b 	bl	8006be0 <HAL_GetTick>
 80096ca:	1b40      	subs	r0, r0, r5
 80096cc:	2864      	cmp	r0, #100	; 0x64
 80096ce:	f200 814f 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096d2:	6833      	ldr	r3, [r6, #0]
 80096d4:	039b      	lsls	r3, r3, #14
 80096d6:	d5f6      	bpl.n	80096c6 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	079d      	lsls	r5, r3, #30
 80096dc:	f100 808a 	bmi.w	80097f4 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80096e0:	06d9      	lsls	r1, r3, #27
 80096e2:	d533      	bpl.n	800974c <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096e4:	4a8a      	ldr	r2, [pc, #552]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80096e6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	f000 80e3 	beq.w	80098ba <HAL_RCC_OscConfig+0x24e>
 80096f4:	2b18      	cmp	r3, #24
 80096f6:	f000 80db 	beq.w	80098b0 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80096fa:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80096fc:	4d84      	ldr	r5, [pc, #528]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8176 	beq.w	80099f0 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800970c:	f7fd fa68 	bl	8006be0 <HAL_GetTick>
 8009710:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009712:	e005      	b.n	8009720 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009714:	f7fd fa64 	bl	8006be0 <HAL_GetTick>
 8009718:	1b80      	subs	r0, r0, r6
 800971a:	2802      	cmp	r0, #2
 800971c:	f200 8128 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	05db      	lsls	r3, r3, #23
 8009724:	d5f6      	bpl.n	8009714 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009726:	f7fd fa73 	bl	8006c10 <HAL_GetREVID>
 800972a:	f241 0303 	movw	r3, #4099	; 0x1003
 800972e:	4298      	cmp	r0, r3
 8009730:	f200 8266 	bhi.w	8009c00 <HAL_RCC_OscConfig+0x594>
 8009734:	6a22      	ldr	r2, [r4, #32]
 8009736:	686b      	ldr	r3, [r5, #4]
 8009738:	2a20      	cmp	r2, #32
 800973a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800973e:	bf0c      	ite	eq
 8009740:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8009744:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009748:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	071d      	lsls	r5, r3, #28
 800974e:	d516      	bpl.n	800977e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009750:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8009752:	4d6f      	ldr	r5, [pc, #444]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 811b 	beq.w	8009990 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800975a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800975c:	f043 0301 	orr.w	r3, r3, #1
 8009760:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009762:	f7fd fa3d 	bl	8006be0 <HAL_GetTick>
 8009766:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009768:	e005      	b.n	8009776 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800976a:	f7fd fa39 	bl	8006be0 <HAL_GetTick>
 800976e:	1b80      	subs	r0, r0, r6
 8009770:	2802      	cmp	r0, #2
 8009772:	f200 80fd 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009776:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009778:	0798      	lsls	r0, r3, #30
 800977a:	d5f6      	bpl.n	800976a <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	069a      	lsls	r2, r3, #26
 8009780:	d516      	bpl.n	80097b0 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009782:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8009784:	4d62      	ldr	r5, [pc, #392]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8121 	beq.w	80099ce <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009792:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009794:	f7fd fa24 	bl	8006be0 <HAL_GetTick>
 8009798:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800979a:	e005      	b.n	80097a8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800979c:	f7fd fa20 	bl	8006be0 <HAL_GetTick>
 80097a0:	1b80      	subs	r0, r0, r6
 80097a2:	2802      	cmp	r0, #2
 80097a4:	f200 80e4 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	049f      	lsls	r7, r3, #18
 80097ac:	d5f6      	bpl.n	800979c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	0759      	lsls	r1, r3, #29
 80097b2:	f100 80a3 	bmi.w	80098fc <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80097b8:	b1d0      	cbz	r0, 80097f0 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80097ba:	4d55      	ldr	r5, [pc, #340]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80097bc:	692b      	ldr	r3, [r5, #16]
 80097be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c2:	2b18      	cmp	r3, #24
 80097c4:	f000 81b6 	beq.w	8009b34 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 80097c8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097ca:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80097cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097d0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097d2:	f000 8149 	beq.w	8009a68 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 80097d6:	f7fd fa03 	bl	8006be0 <HAL_GetTick>
 80097da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097dc:	e005      	b.n	80097ea <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097de:	f7fd f9ff 	bl	8006be0 <HAL_GetTick>
 80097e2:	1b00      	subs	r0, r0, r4
 80097e4:	2802      	cmp	r0, #2
 80097e6:	f200 80c3 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	019b      	lsls	r3, r3, #6
 80097ee:	d4f6      	bmi.n	80097de <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80097f0:	2000      	movs	r0, #0
}
 80097f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097f4:	4a46      	ldr	r2, [pc, #280]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80097f6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097fa:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80097fe:	d12d      	bne.n	800985c <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009800:	4b43      	ldr	r3, [pc, #268]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 8009802:	68e2      	ldr	r2, [r4, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	0759      	lsls	r1, r3, #29
 8009808:	d501      	bpl.n	800980e <HAL_RCC_OscConfig+0x1a2>
 800980a:	2a00      	cmp	r2, #0
 800980c:	d04e      	beq.n	80098ac <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800980e:	4d40      	ldr	r5, [pc, #256]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	f023 0319 	bic.w	r3, r3, #25
 8009816:	4313      	orrs	r3, r2
 8009818:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800981a:	f7fd f9e1 	bl	8006be0 <HAL_GetTick>
 800981e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009820:	e005      	b.n	800982e <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009822:	f7fd f9dd 	bl	8006be0 <HAL_GetTick>
 8009826:	1b80      	subs	r0, r0, r6
 8009828:	2802      	cmp	r0, #2
 800982a:	f200 80a1 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	075b      	lsls	r3, r3, #29
 8009832:	d5f6      	bpl.n	8009822 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009834:	f7fd f9ec 	bl	8006c10 <HAL_GetREVID>
 8009838:	f241 0303 	movw	r3, #4099	; 0x1003
 800983c:	4298      	cmp	r0, r3
 800983e:	f200 80fe 	bhi.w	8009a3e <HAL_RCC_OscConfig+0x3d2>
 8009842:	6922      	ldr	r2, [r4, #16]
 8009844:	686b      	ldr	r3, [r5, #4]
 8009846:	2a40      	cmp	r2, #64	; 0x40
 8009848:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800984c:	bf0c      	ite	eq
 800984e:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8009852:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009856:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	e741      	b.n	80096e0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800985c:	2b18      	cmp	r3, #24
 800985e:	f000 80ea 	beq.w	8009a36 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009862:	4d2b      	ldr	r5, [pc, #172]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009864:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009866:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009868:	2a00      	cmp	r2, #0
 800986a:	f000 80d3 	beq.w	8009a14 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800986e:	f023 0319 	bic.w	r3, r3, #25
 8009872:	4313      	orrs	r3, r2
 8009874:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009876:	f7fd f9b3 	bl	8006be0 <HAL_GetTick>
 800987a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800987c:	e004      	b.n	8009888 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800987e:	f7fd f9af 	bl	8006be0 <HAL_GetTick>
 8009882:	1b80      	subs	r0, r0, r6
 8009884:	2802      	cmp	r0, #2
 8009886:	d873      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	075f      	lsls	r7, r3, #29
 800988c:	d5f7      	bpl.n	800987e <HAL_RCC_OscConfig+0x212>
 800988e:	e7d1      	b.n	8009834 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009890:	f001 0103 	and.w	r1, r1, #3
 8009894:	2902      	cmp	r1, #2
 8009896:	f47f aefc 	bne.w	8009692 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800989a:	4a1d      	ldr	r2, [pc, #116]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 800989c:	6812      	ldr	r2, [r2, #0]
 800989e:	0392      	lsls	r2, r2, #14
 80098a0:	f57f af1b 	bpl.w	80096da <HAL_RCC_OscConfig+0x6e>
 80098a4:	6862      	ldr	r2, [r4, #4]
 80098a6:	2a00      	cmp	r2, #0
 80098a8:	f47f af17 	bne.w	80096da <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80098ac:	2001      	movs	r0, #1
}
 80098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80098b0:	f002 0203 	and.w	r2, r2, #3
 80098b4:	2a01      	cmp	r2, #1
 80098b6:	f47f af20 	bne.w	80096fa <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80098ba:	4b15      	ldr	r3, [pc, #84]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	05da      	lsls	r2, r3, #23
 80098c0:	d502      	bpl.n	80098c8 <HAL_RCC_OscConfig+0x25c>
 80098c2:	69e3      	ldr	r3, [r4, #28]
 80098c4:	2b80      	cmp	r3, #128	; 0x80
 80098c6:	d1f1      	bne.n	80098ac <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80098c8:	f7fd f9a2 	bl	8006c10 <HAL_GetREVID>
 80098cc:	f241 0303 	movw	r3, #4099	; 0x1003
 80098d0:	4298      	cmp	r0, r3
 80098d2:	f200 80bf 	bhi.w	8009a54 <HAL_RCC_OscConfig+0x3e8>
 80098d6:	6a22      	ldr	r2, [r4, #32]
 80098d8:	2a20      	cmp	r2, #32
 80098da:	f000 81ad 	beq.w	8009c38 <HAL_RCC_OscConfig+0x5cc>
 80098de:	490c      	ldr	r1, [pc, #48]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80098e0:	684b      	ldr	r3, [r1, #4]
 80098e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80098e6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80098ea:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	e72d      	b.n	800974c <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098f0:	4a07      	ldr	r2, [pc, #28]	; (8009910 <HAL_RCC_OscConfig+0x2a4>)
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	e6db      	b.n	80096b4 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 80098fc:	4d05      	ldr	r5, [pc, #20]	; (8009914 <HAL_RCC_OscConfig+0x2a8>)
 80098fe:	682b      	ldr	r3, [r5, #0]
 8009900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009904:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8009906:	f7fd f96b 	bl	8006be0 <HAL_GetTick>
 800990a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800990c:	e009      	b.n	8009922 <HAL_RCC_OscConfig+0x2b6>
 800990e:	bf00      	nop
 8009910:	58024400 	.word	0x58024400
 8009914:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009918:	f7fd f962 	bl	8006be0 <HAL_GetTick>
 800991c:	1b80      	subs	r0, r0, r6
 800991e:	2864      	cmp	r0, #100	; 0x64
 8009920:	d826      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	05da      	lsls	r2, r3, #23
 8009926:	d5f7      	bpl.n	8009918 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	2b01      	cmp	r3, #1
 800992c:	f000 8171 	beq.w	8009c12 <HAL_RCC_OscConfig+0x5a6>
 8009930:	2b00      	cmp	r3, #0
 8009932:	f040 8174 	bne.w	8009c1e <HAL_RCC_OscConfig+0x5b2>
 8009936:	4baa      	ldr	r3, [pc, #680]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
 8009938:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800993a:	f022 0201 	bic.w	r2, r2, #1
 800993e:	671a      	str	r2, [r3, #112]	; 0x70
 8009940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009942:	f022 0204 	bic.w	r2, r2, #4
 8009946:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009948:	68a3      	ldr	r3, [r4, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8140 	beq.w	8009bd0 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 8009950:	f7fd f946 	bl	8006be0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009954:	4ea2      	ldr	r6, [pc, #648]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009956:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800995a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800995c:	e004      	b.n	8009968 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800995e:	f7fd f93f 	bl	8006be0 <HAL_GetTick>
 8009962:	1b40      	subs	r0, r0, r5
 8009964:	42b8      	cmp	r0, r7
 8009966:	d803      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009968:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800996a:	079b      	lsls	r3, r3, #30
 800996c:	d5f7      	bpl.n	800995e <HAL_RCC_OscConfig+0x2f2>
 800996e:	e722      	b.n	80097b6 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8009970:	2003      	movs	r0, #3
}
 8009972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8009974:	f7fd f934 	bl	8006be0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009978:	4e99      	ldr	r6, [pc, #612]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800997a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800997c:	e004      	b.n	8009988 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800997e:	f7fd f92f 	bl	8006be0 <HAL_GetTick>
 8009982:	1b40      	subs	r0, r0, r5
 8009984:	2864      	cmp	r0, #100	; 0x64
 8009986:	d8f3      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	039f      	lsls	r7, r3, #14
 800998c:	d4f7      	bmi.n	800997e <HAL_RCC_OscConfig+0x312>
 800998e:	e6a3      	b.n	80096d8 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8009990:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009998:	f7fd f922 	bl	8006be0 <HAL_GetTick>
 800999c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800999e:	e004      	b.n	80099aa <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80099a0:	f7fd f91e 	bl	8006be0 <HAL_GetTick>
 80099a4:	1b80      	subs	r0, r0, r6
 80099a6:	2802      	cmp	r0, #2
 80099a8:	d8e2      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80099aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80099ac:	0799      	lsls	r1, r3, #30
 80099ae:	d4f7      	bmi.n	80099a0 <HAL_RCC_OscConfig+0x334>
 80099b0:	e6e4      	b.n	800977c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099b6:	4b8a      	ldr	r3, [pc, #552]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	f47f ae74 	bne.w	80096a6 <HAL_RCC_OscConfig+0x3a>
 80099be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	e672      	b.n	80096b4 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80099d6:	f7fd f903 	bl	8006be0 <HAL_GetTick>
 80099da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099dc:	e004      	b.n	80099e8 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80099de:	f7fd f8ff 	bl	8006be0 <HAL_GetTick>
 80099e2:	1b80      	subs	r0, r0, r6
 80099e4:	2802      	cmp	r0, #2
 80099e6:	d8c3      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	0498      	lsls	r0, r3, #18
 80099ec:	d4f7      	bmi.n	80099de <HAL_RCC_OscConfig+0x372>
 80099ee:	e6de      	b.n	80097ae <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80099f8:	f7fd f8f2 	bl	8006be0 <HAL_GetTick>
 80099fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80099fe:	e004      	b.n	8009a0a <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a00:	f7fd f8ee 	bl	8006be0 <HAL_GetTick>
 8009a04:	1b80      	subs	r0, r0, r6
 8009a06:	2802      	cmp	r0, #2
 8009a08:	d8b2      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	05df      	lsls	r7, r3, #23
 8009a0e:	d4f7      	bmi.n	8009a00 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	e69b      	b.n	800974c <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009a1a:	f7fd f8e1 	bl	8006be0 <HAL_GetTick>
 8009a1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a20:	e004      	b.n	8009a2c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a22:	f7fd f8dd 	bl	8006be0 <HAL_GetTick>
 8009a26:	1b80      	subs	r0, r0, r6
 8009a28:	2802      	cmp	r0, #2
 8009a2a:	d8a1      	bhi.n	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	0758      	lsls	r0, r3, #29
 8009a30:	d4f7      	bmi.n	8009a22 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	e654      	b.n	80096e0 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a36:	0790      	lsls	r0, r2, #30
 8009a38:	f47f af13 	bne.w	8009862 <HAL_RCC_OscConfig+0x1f6>
 8009a3c:	e6e0      	b.n	8009800 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a3e:	686b      	ldr	r3, [r5, #4]
 8009a40:	6922      	ldr	r2, [r4, #16]
 8009a42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009a46:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009a4a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	e647      	b.n	80096e0 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8009a50:	2001      	movs	r0, #1
}
 8009a52:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a54:	4a62      	ldr	r2, [pc, #392]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
 8009a56:	6a21      	ldr	r1, [r4, #32]
 8009a58:	68d3      	ldr	r3, [r2, #12]
 8009a5a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009a5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009a62:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	e671      	b.n	800974c <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8009a68:	f7fd f8ba 	bl	8006be0 <HAL_GetTick>
 8009a6c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a6e:	e005      	b.n	8009a7c <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a70:	f7fd f8b6 	bl	8006be0 <HAL_GetTick>
 8009a74:	1b80      	subs	r0, r0, r6
 8009a76:	2802      	cmp	r0, #2
 8009a78:	f63f af7a 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	0199      	lsls	r1, r3, #6
 8009a80:	d4f6      	bmi.n	8009a70 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a82:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8009a84:	4b57      	ldr	r3, [pc, #348]	; (8009be4 <HAL_RCC_OscConfig+0x578>)
 8009a86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009a88:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a8a:	4957      	ldr	r1, [pc, #348]	; (8009be8 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a8c:	4e54      	ldr	r6, [pc, #336]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a92:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009a96:	62ab      	str	r3, [r5, #40]	; 0x28
 8009a98:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	025b      	lsls	r3, r3, #9
 8009aa2:	0412      	lsls	r2, r2, #16
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009aae:	3a01      	subs	r2, #1
 8009ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009ab8:	3a01      	subs	r2, #1
 8009aba:	0612      	lsls	r2, r2, #24
 8009abc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009ac4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009acc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009ace:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009ad0:	4011      	ands	r1, r2
 8009ad2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8009ad6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009ad8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009ada:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009adc:	f023 030c 	bic.w	r3, r3, #12
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ae4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009ae6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009ae8:	f023 0302 	bic.w	r3, r3, #2
 8009aec:	4313      	orrs	r3, r2
 8009aee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009af0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009af8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009afe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009b00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b06:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009b08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009b0a:	f043 0301 	orr.w	r3, r3, #1
 8009b0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009b18:	f7fd f862 	bl	8006be0 <HAL_GetTick>
 8009b1c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b1e:	e005      	b.n	8009b2c <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b20:	f7fd f85e 	bl	8006be0 <HAL_GetTick>
 8009b24:	1b00      	subs	r0, r0, r4
 8009b26:	2802      	cmp	r0, #2
 8009b28:	f63f af22 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b2c:	6833      	ldr	r3, [r6, #0]
 8009b2e:	019a      	lsls	r2, r3, #6
 8009b30:	d5f6      	bpl.n	8009b20 <HAL_RCC_OscConfig+0x4b4>
 8009b32:	e65d      	b.n	80097f0 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b34:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009b36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009b38:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b3a:	f43f ae5a 	beq.w	80097f2 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b3e:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009b44:	428b      	cmp	r3, r1
 8009b46:	f47f aeb1 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b4a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009b4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b50:	429a      	cmp	r2, r3
 8009b52:	f47f aeab 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b58:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8009b5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	f47f aea4 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b66:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8009b6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	f47f ae9d 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b74:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8009b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	f47f ae96 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b82:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8009b86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009b88:	429e      	cmp	r6, r3
 8009b8a:	f47f ae8f 	bne.w	80098ac <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009b8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009b90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009b92:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009b96:	429a      	cmp	r2, r3
 8009b98:	f43f ae2a 	beq.w	80097f0 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009b9c:	4a10      	ldr	r2, [pc, #64]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
 8009b9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ba0:	f023 0301 	bic.w	r3, r3, #1
 8009ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8009ba6:	f7fd f81b 	bl	8006be0 <HAL_GetTick>
 8009baa:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009bac:	f7fd f818 	bl	8006be0 <HAL_GetTick>
 8009bb0:	42a8      	cmp	r0, r5
 8009bb2:	d0fb      	beq.n	8009bac <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bb4:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 8009bb6:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009bb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bba:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <HAL_RCC_OscConfig+0x57c>)
 8009bbc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009bbe:	4023      	ands	r3, r4
 8009bc0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009bc4:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009bc6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bc8:	f043 0301 	orr.w	r3, r3, #1
 8009bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8009bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8009bd0:	f7fd f806 	bl	8006be0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bd4:	4e02      	ldr	r6, [pc, #8]	; (8009be0 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bd6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009bda:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bdc:	e00c      	b.n	8009bf8 <HAL_RCC_OscConfig+0x58c>
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
 8009be4:	fffffc0c 	.word	0xfffffc0c
 8009be8:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bec:	f7fc fff8 	bl	8006be0 <HAL_GetTick>
 8009bf0:	1b40      	subs	r0, r0, r5
 8009bf2:	42b8      	cmp	r0, r7
 8009bf4:	f63f aebc 	bhi.w	8009970 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009bf8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8009bfa:	0798      	lsls	r0, r3, #30
 8009bfc:	d4f6      	bmi.n	8009bec <HAL_RCC_OscConfig+0x580>
 8009bfe:	e5da      	b.n	80097b6 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c00:	68eb      	ldr	r3, [r5, #12]
 8009c02:	6a22      	ldr	r2, [r4, #32]
 8009c04:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009c08:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c0c:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	e59c      	b.n	800974c <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c12:	4a0e      	ldr	r2, [pc, #56]	; (8009c4c <HAL_RCC_OscConfig+0x5e0>)
 8009c14:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1c:	e694      	b.n	8009948 <HAL_RCC_OscConfig+0x2dc>
 8009c1e:	2b05      	cmp	r3, #5
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <HAL_RCC_OscConfig+0x5e0>)
 8009c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c24:	f47f ae89 	bne.w	800993a <HAL_RCC_OscConfig+0x2ce>
 8009c28:	f042 0204 	orr.w	r2, r2, #4
 8009c2c:	671a      	str	r2, [r3, #112]	; 0x70
 8009c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c30:	f042 0201 	orr.w	r2, r2, #1
 8009c34:	671a      	str	r2, [r3, #112]	; 0x70
 8009c36:	e687      	b.n	8009948 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c38:	4a04      	ldr	r2, [pc, #16]	; (8009c4c <HAL_RCC_OscConfig+0x5e0>)
 8009c3a:	6853      	ldr	r3, [r2, #4]
 8009c3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c44:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	e580      	b.n	800974c <HAL_RCC_OscConfig+0xe0>
 8009c4a:	bf00      	nop
 8009c4c:	58024400 	.word	0x58024400

08009c50 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c50:	4a47      	ldr	r2, [pc, #284]	; (8009d70 <HAL_RCC_GetSysClockFreq+0x120>)
 8009c52:	6913      	ldr	r3, [r2, #16]
 8009c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d004      	beq.n	8009c66 <HAL_RCC_GetSysClockFreq+0x16>
 8009c5c:	2b18      	cmp	r3, #24
 8009c5e:	d00d      	beq.n	8009c7c <HAL_RCC_GetSysClockFreq+0x2c>
 8009c60:	b11b      	cbz	r3, 8009c6a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8009c62:	4844      	ldr	r0, [pc, #272]	; (8009d74 <HAL_RCC_GetSysClockFreq+0x124>)
 8009c64:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c66:	4844      	ldr	r0, [pc, #272]	; (8009d78 <HAL_RCC_GetSysClockFreq+0x128>)
 8009c68:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	0699      	lsls	r1, r3, #26
 8009c6e:	d54a      	bpl.n	8009d06 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	4842      	ldr	r0, [pc, #264]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x12c>)
 8009c74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c78:	40d8      	lsrs	r0, r3
 8009c7a:	4770      	bx	lr
{
 8009c7c:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009c80:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009c82:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8009c84:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c88:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009c8a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8009c8e:	d038      	beq.n	8009d02 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c90:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009c94:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c98:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c9c:	fb05 f101 	mul.w	r1, r5, r1
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	ee07 1a90 	vmov	s15, r1
 8009ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 8009caa:	d002      	beq.n	8009cb2 <HAL_RCC_GetSysClockFreq+0x62>
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d02c      	beq.n	8009d0a <HAL_RCC_GetSysClockFreq+0xba>
 8009cb0:	b393      	cbz	r3, 8009d18 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cb2:	ee07 0a90 	vmov	s15, r0
 8009cb6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009d80 <HAL_RCC_GetSysClockFreq+0x130>
 8009cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009cc0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8009cc4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8009d84 <HAL_RCC_GetSysClockFreq+0x134>
 8009cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ccc:	ee06 3a90 	vmov	s13, r3
 8009cd0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8009cd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009cd8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8009cdc:	eee7 6a25 	vfma.f32	s13, s14, s11
 8009ce0:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009ce4:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <HAL_RCC_GetSysClockFreq+0x120>)
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009cec:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009cee:	ee07 3a90 	vmov	s15, r3
 8009cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cfe:	ee17 0a90 	vmov	r0, s15
}
 8009d02:	bc30      	pop	{r4, r5}
 8009d04:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d06:	481d      	ldr	r0, [pc, #116]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8009d08:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d0a:	ee07 0a90 	vmov	s15, r0
 8009d0e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8009d88 <HAL_RCC_GetSysClockFreq+0x138>
 8009d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d16:	e7d2      	b.n	8009cbe <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d18:	6813      	ldr	r3, [r2, #0]
 8009d1a:	069b      	lsls	r3, r3, #26
 8009d1c:	d520      	bpl.n	8009d60 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d1e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d20:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d24:	4915      	ldr	r1, [pc, #84]	; (8009d7c <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009d2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d2c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d34:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8009d84 <HAL_RCC_GetSysClockFreq+0x134>
 8009d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d3c:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d3e:	ee06 3a90 	vmov	s13, r3
 8009d42:	ee05 1a90 	vmov	s11, r1
 8009d46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8009d4a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009d4e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009d52:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8009d56:	eee7 6a05 	vfma.f32	s13, s14, s10
 8009d5a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8009d5e:	e7c1      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d60:	ee07 0a90 	vmov	s15, r0
 8009d64:	eddf 6a09 	vldr	s13, [pc, #36]	; 8009d8c <HAL_RCC_GetSysClockFreq+0x13c>
 8009d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d6c:	e7a7      	b.n	8009cbe <HAL_RCC_GetSysClockFreq+0x6e>
 8009d6e:	bf00      	nop
 8009d70:	58024400 	.word	0x58024400
 8009d74:	003d0900 	.word	0x003d0900
 8009d78:	017d7840 	.word	0x017d7840
 8009d7c:	03d09000 	.word	0x03d09000
 8009d80:	4a742400 	.word	0x4a742400
 8009d84:	39000000 	.word	0x39000000
 8009d88:	4bbebc20 	.word	0x4bbebc20
 8009d8c:	4c742400 	.word	0x4c742400

08009d90 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8009d90:	2800      	cmp	r0, #0
 8009d92:	f000 811a 	beq.w	8009fca <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d96:	4a92      	ldr	r2, [pc, #584]	; (8009fe0 <HAL_RCC_ClockConfig+0x250>)
{
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d9c:	6813      	ldr	r3, [r2, #0]
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	428b      	cmp	r3, r1
 8009da8:	d20c      	bcs.n	8009dc4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	f023 030f 	bic.w	r3, r3, #15
 8009db0:	430b      	orrs	r3, r1
 8009db2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009db4:	6813      	ldr	r3, [r2, #0]
 8009db6:	f003 030f 	and.w	r3, r3, #15
 8009dba:	428b      	cmp	r3, r1
 8009dbc:	d002      	beq.n	8009dc4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8009dbe:	2001      	movs	r0, #1
}
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	075f      	lsls	r7, r3, #29
 8009dc8:	d50c      	bpl.n	8009de4 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009dca:	4986      	ldr	r1, [pc, #536]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009dcc:	6920      	ldr	r0, [r4, #16]
 8009dce:	698a      	ldr	r2, [r1, #24]
 8009dd0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009dd4:	4290      	cmp	r0, r2
 8009dd6:	d905      	bls.n	8009de4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dd8:	698b      	ldr	r3, [r1, #24]
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	4303      	orrs	r3, r0
 8009de0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	071e      	lsls	r6, r3, #28
 8009de6:	d50c      	bpl.n	8009e02 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009de8:	497e      	ldr	r1, [pc, #504]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009dea:	6960      	ldr	r0, [r4, #20]
 8009dec:	69ca      	ldr	r2, [r1, #28]
 8009dee:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009df2:	4290      	cmp	r0, r2
 8009df4:	d905      	bls.n	8009e02 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009df6:	69cb      	ldr	r3, [r1, #28]
 8009df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dfc:	4303      	orrs	r3, r0
 8009dfe:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	06d8      	lsls	r0, r3, #27
 8009e04:	d50c      	bpl.n	8009e20 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009e06:	4977      	ldr	r1, [pc, #476]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009e08:	69a0      	ldr	r0, [r4, #24]
 8009e0a:	69ca      	ldr	r2, [r1, #28]
 8009e0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009e10:	4290      	cmp	r0, r2
 8009e12:	d905      	bls.n	8009e20 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009e14:	69cb      	ldr	r3, [r1, #28]
 8009e16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e1a:	4303      	orrs	r3, r0
 8009e1c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	0699      	lsls	r1, r3, #26
 8009e22:	d50c      	bpl.n	8009e3e <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009e24:	496f      	ldr	r1, [pc, #444]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009e26:	69e0      	ldr	r0, [r4, #28]
 8009e28:	6a0a      	ldr	r2, [r1, #32]
 8009e2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009e2e:	4290      	cmp	r0, r2
 8009e30:	d905      	bls.n	8009e3e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009e32:	6a0b      	ldr	r3, [r1, #32]
 8009e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e38:	4303      	orrs	r3, r0
 8009e3a:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	079a      	lsls	r2, r3, #30
 8009e40:	f140 8083 	bpl.w	8009f4a <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e44:	4867      	ldr	r0, [pc, #412]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009e46:	68e1      	ldr	r1, [r4, #12]
 8009e48:	6982      	ldr	r2, [r0, #24]
 8009e4a:	f002 020f 	and.w	r2, r2, #15
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	f240 80a9 	bls.w	8009fa6 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e54:	6983      	ldr	r3, [r0, #24]
 8009e56:	f023 030f 	bic.w	r3, r3, #15
 8009e5a:	4319      	orrs	r1, r3
 8009e5c:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	07df      	lsls	r7, r3, #31
 8009e62:	d474      	bmi.n	8009f4e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e64:	079f      	lsls	r7, r3, #30
 8009e66:	d507      	bpl.n	8009e78 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e68:	4a5e      	ldr	r2, [pc, #376]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009e6a:	68e1      	ldr	r1, [r4, #12]
 8009e6c:	6993      	ldr	r3, [r2, #24]
 8009e6e:	f003 030f 	and.w	r3, r3, #15
 8009e72:	428b      	cmp	r3, r1
 8009e74:	f200 80a0 	bhi.w	8009fb8 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e78:	4a59      	ldr	r2, [pc, #356]	; (8009fe0 <HAL_RCC_ClockConfig+0x250>)
 8009e7a:	6813      	ldr	r3, [r2, #0]
 8009e7c:	f003 030f 	and.w	r3, r3, #15
 8009e80:	42ab      	cmp	r3, r5
 8009e82:	d909      	bls.n	8009e98 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e84:	6813      	ldr	r3, [r2, #0]
 8009e86:	f023 030f 	bic.w	r3, r3, #15
 8009e8a:	432b      	orrs	r3, r5
 8009e8c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e8e:	6813      	ldr	r3, [r2, #0]
 8009e90:	f003 030f 	and.w	r3, r3, #15
 8009e94:	42ab      	cmp	r3, r5
 8009e96:	d192      	bne.n	8009dbe <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	075e      	lsls	r6, r3, #29
 8009e9c:	d50c      	bpl.n	8009eb8 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e9e:	4951      	ldr	r1, [pc, #324]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009ea0:	6920      	ldr	r0, [r4, #16]
 8009ea2:	698a      	ldr	r2, [r1, #24]
 8009ea4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009ea8:	4290      	cmp	r0, r2
 8009eaa:	d205      	bcs.n	8009eb8 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009eac:	698b      	ldr	r3, [r1, #24]
 8009eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb2:	4303      	orrs	r3, r0
 8009eb4:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	071d      	lsls	r5, r3, #28
 8009eba:	d50c      	bpl.n	8009ed6 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ebc:	4949      	ldr	r1, [pc, #292]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009ebe:	6960      	ldr	r0, [r4, #20]
 8009ec0:	69ca      	ldr	r2, [r1, #28]
 8009ec2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009ec6:	4290      	cmp	r0, r2
 8009ec8:	d205      	bcs.n	8009ed6 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009eca:	69cb      	ldr	r3, [r1, #28]
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	4303      	orrs	r3, r0
 8009ed2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	06d8      	lsls	r0, r3, #27
 8009ed8:	d50c      	bpl.n	8009ef4 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009eda:	4942      	ldr	r1, [pc, #264]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009edc:	69a0      	ldr	r0, [r4, #24]
 8009ede:	69ca      	ldr	r2, [r1, #28]
 8009ee0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009ee4:	4290      	cmp	r0, r2
 8009ee6:	d205      	bcs.n	8009ef4 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ee8:	69cb      	ldr	r3, [r1, #28]
 8009eea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009eee:	4303      	orrs	r3, r0
 8009ef0:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	0699      	lsls	r1, r3, #26
 8009ef6:	d50b      	bpl.n	8009f10 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009ef8:	4a3a      	ldr	r2, [pc, #232]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009efa:	69e1      	ldr	r1, [r4, #28]
 8009efc:	6a13      	ldr	r3, [r2, #32]
 8009efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f02:	4299      	cmp	r1, r3
 8009f04:	d204      	bcs.n	8009f10 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009f06:	6a13      	ldr	r3, [r2, #32]
 8009f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f10:	f7ff fe9e 	bl	8009c50 <HAL_RCC_GetSysClockFreq>
 8009f14:	4a33      	ldr	r2, [pc, #204]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009f16:	4603      	mov	r3, r0
 8009f18:	4833      	ldr	r0, [pc, #204]	; (8009fe8 <HAL_RCC_ClockConfig+0x258>)
 8009f1a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f1c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f1e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8009f22:	4d32      	ldr	r5, [pc, #200]	; (8009fec <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f24:	f002 020f 	and.w	r2, r2, #15
 8009f28:	4c31      	ldr	r4, [pc, #196]	; (8009ff0 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f2a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f2c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f2e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8009f32:	4830      	ldr	r0, [pc, #192]	; (8009ff4 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f34:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009f38:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8009f3a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8009f3c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009f3e:	40d3      	lsrs	r3, r2
 8009f40:	6023      	str	r3, [r4, #0]
}
 8009f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009f46:	f7fc bde9 	b.w	8006b1c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f4a:	07db      	lsls	r3, r3, #31
 8009f4c:	d594      	bpl.n	8009e78 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009f4e:	4a25      	ldr	r2, [pc, #148]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009f50:	68a1      	ldr	r1, [r4, #8]
 8009f52:	6993      	ldr	r3, [r2, #24]
 8009f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f5c:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f5e:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f60:	2902      	cmp	r1, #2
 8009f62:	d034      	beq.n	8009fce <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f64:	2903      	cmp	r1, #3
 8009f66:	d02d      	beq.n	8009fc4 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009f68:	2901      	cmp	r1, #1
 8009f6a:	d035      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f6c:	075b      	lsls	r3, r3, #29
 8009f6e:	f57f af26 	bpl.w	8009dbe <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f72:	4e1c      	ldr	r6, [pc, #112]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f74:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f78:	6933      	ldr	r3, [r6, #16]
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	430b      	orrs	r3, r1
 8009f80:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8009f82:	f7fc fe2d 	bl	8006be0 <HAL_GetTick>
 8009f86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f88:	e004      	b.n	8009f94 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f8a:	f7fc fe29 	bl	8006be0 <HAL_GetTick>
 8009f8e:	1bc0      	subs	r0, r0, r7
 8009f90:	4540      	cmp	r0, r8
 8009f92:	d81f      	bhi.n	8009fd4 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f94:	6933      	ldr	r3, [r6, #16]
 8009f96:	6862      	ldr	r2, [r4, #4]
 8009f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f9c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009fa0:	d1f3      	bne.n	8009f8a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	e75e      	b.n	8009e64 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fa6:	07da      	lsls	r2, r3, #31
 8009fa8:	d4d1      	bmi.n	8009f4e <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009faa:	4a0e      	ldr	r2, [pc, #56]	; (8009fe4 <HAL_RCC_ClockConfig+0x254>)
 8009fac:	6993      	ldr	r3, [r2, #24]
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	428b      	cmp	r3, r1
 8009fb4:	f67f af60 	bls.w	8009e78 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fb8:	6993      	ldr	r3, [r2, #24]
 8009fba:	f023 030f 	bic.w	r3, r3, #15
 8009fbe:	4319      	orrs	r1, r3
 8009fc0:	6191      	str	r1, [r2, #24]
 8009fc2:	e759      	b.n	8009e78 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fc4:	0198      	lsls	r0, r3, #6
 8009fc6:	d4d4      	bmi.n	8009f72 <HAL_RCC_ClockConfig+0x1e2>
 8009fc8:	e6f9      	b.n	8009dbe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8009fca:	2001      	movs	r0, #1
}
 8009fcc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009fce:	039e      	lsls	r6, r3, #14
 8009fd0:	d4cf      	bmi.n	8009f72 <HAL_RCC_ClockConfig+0x1e2>
 8009fd2:	e6f4      	b.n	8009dbe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8009fd4:	2003      	movs	r0, #3
 8009fd6:	e6f3      	b.n	8009dc0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fd8:	05da      	lsls	r2, r3, #23
 8009fda:	d4ca      	bmi.n	8009f72 <HAL_RCC_ClockConfig+0x1e2>
 8009fdc:	e6ef      	b.n	8009dbe <HAL_RCC_ClockConfig+0x2e>
 8009fde:	bf00      	nop
 8009fe0:	52002000 	.word	0x52002000
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	0801b59c 	.word	0x0801b59c
 8009fec:	20000094 	.word	0x20000094
 8009ff0:	20000098 	.word	0x20000098
 8009ff4:	200000a0 	.word	0x200000a0

08009ff8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ff8:	4a18      	ldr	r2, [pc, #96]	; (800a05c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ffa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ffc:	6913      	ldr	r3, [r2, #16]
 8009ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a002:	2b10      	cmp	r3, #16
 800a004:	d01a      	beq.n	800a03c <HAL_RCC_GetHCLKFreq+0x44>
 800a006:	2b18      	cmp	r3, #24
 800a008:	d023      	beq.n	800a052 <HAL_RCC_GetHCLKFreq+0x5a>
 800a00a:	b1cb      	cbz	r3, 800a040 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800a00c:	4814      	ldr	r0, [pc, #80]	; (800a060 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <HAL_RCC_GetHCLKFreq+0x64>)
 800a010:	4914      	ldr	r1, [pc, #80]	; (800a064 <HAL_RCC_GetHCLKFreq+0x6c>)
 800a012:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a014:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a016:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a01a:	4c13      	ldr	r4, [pc, #76]	; (800a068 <HAL_RCC_GetHCLKFreq+0x70>)
 800a01c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a020:	4d12      	ldr	r5, [pc, #72]	; (800a06c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a022:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a024:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a026:	f002 021f 	and.w	r2, r2, #31
 800a02a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a02e:	f003 001f 	and.w	r0, r3, #31
 800a032:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800a036:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a038:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a03c:	480c      	ldr	r0, [pc, #48]	; (800a070 <HAL_RCC_GetHCLKFreq+0x78>)
 800a03e:	e7e6      	b.n	800a00e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a040:	6813      	ldr	r3, [r2, #0]
 800a042:	069b      	lsls	r3, r3, #26
 800a044:	d508      	bpl.n	800a058 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a046:	6812      	ldr	r2, [r2, #0]
 800a048:	480a      	ldr	r0, [pc, #40]	; (800a074 <HAL_RCC_GetHCLKFreq+0x7c>)
 800a04a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800a04e:	40d0      	lsrs	r0, r2
 800a050:	e7dd      	b.n	800a00e <HAL_RCC_GetHCLKFreq+0x16>
 800a052:	f7ff fa87 	bl	8009564 <HAL_RCC_GetSysClockFreq.part.0>
 800a056:	e7da      	b.n	800a00e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a058:	4806      	ldr	r0, [pc, #24]	; (800a074 <HAL_RCC_GetHCLKFreq+0x7c>)
 800a05a:	e7d8      	b.n	800a00e <HAL_RCC_GetHCLKFreq+0x16>
 800a05c:	58024400 	.word	0x58024400
 800a060:	003d0900 	.word	0x003d0900
 800a064:	0801b59c 	.word	0x0801b59c
 800a068:	20000098 	.word	0x20000098
 800a06c:	20000094 	.word	0x20000094
 800a070:	017d7840 	.word	0x017d7840
 800a074:	03d09000 	.word	0x03d09000

0800a078 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a078:	4a1c      	ldr	r2, [pc, #112]	; (800a0ec <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a07a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a07c:	6913      	ldr	r3, [r2, #16]
 800a07e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a082:	2b10      	cmp	r3, #16
 800a084:	d021      	beq.n	800a0ca <HAL_RCC_GetPCLK1Freq+0x52>
 800a086:	2b18      	cmp	r3, #24
 800a088:	d02b      	beq.n	800a0e2 <HAL_RCC_GetPCLK1Freq+0x6a>
 800a08a:	b303      	cbz	r3, 800a0ce <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800a08c:	4818      	ldr	r0, [pc, #96]	; (800a0f0 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a08e:	4a17      	ldr	r2, [pc, #92]	; (800a0ec <HAL_RCC_GetPCLK1Freq+0x74>)
 800a090:	4918      	ldr	r1, [pc, #96]	; (800a0f4 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800a092:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800a094:	4d18      	ldr	r5, [pc, #96]	; (800a0f8 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a096:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a09a:	4c18      	ldr	r4, [pc, #96]	; (800a0fc <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a09c:	5ccb      	ldrb	r3, [r1, r3]
 800a09e:	f003 031f 	and.w	r3, r3, #31
 800a0a2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a0a6:	6990      	ldr	r0, [r2, #24]
 800a0a8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800a0ac:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a0ae:	5c08      	ldrb	r0, [r1, r0]
 800a0b0:	f000 001f 	and.w	r0, r0, #31
 800a0b4:	40c3      	lsrs	r3, r0
 800a0b6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a0b8:	69d2      	ldr	r2, [r2, #28]
 800a0ba:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800a0be:	5c88      	ldrb	r0, [r1, r2]
 800a0c0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a0c4:	fa23 f000 	lsr.w	r0, r3, r0
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0ca:	480d      	ldr	r0, [pc, #52]	; (800a100 <HAL_RCC_GetPCLK1Freq+0x88>)
 800a0cc:	e7df      	b.n	800a08e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	069b      	lsls	r3, r3, #26
 800a0d2:	d509      	bpl.n	800a0e8 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0d4:	6810      	ldr	r0, [r2, #0]
 800a0d6:	4b0b      	ldr	r3, [pc, #44]	; (800a104 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a0d8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800a0dc:	fa23 f000 	lsr.w	r0, r3, r0
 800a0e0:	e7d5      	b.n	800a08e <HAL_RCC_GetPCLK1Freq+0x16>
 800a0e2:	f7ff fa3f 	bl	8009564 <HAL_RCC_GetSysClockFreq.part.0>
 800a0e6:	e7d2      	b.n	800a08e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a0e8:	4806      	ldr	r0, [pc, #24]	; (800a104 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800a0ea:	e7d0      	b.n	800a08e <HAL_RCC_GetPCLK1Freq+0x16>
 800a0ec:	58024400 	.word	0x58024400
 800a0f0:	003d0900 	.word	0x003d0900
 800a0f4:	0801b59c 	.word	0x0801b59c
 800a0f8:	20000094 	.word	0x20000094
 800a0fc:	20000098 	.word	0x20000098
 800a100:	017d7840 	.word	0x017d7840
 800a104:	03d09000 	.word	0x03d09000

0800a108 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a10a:	4c3a      	ldr	r4, [pc, #232]	; (800a1f4 <RCCEx_PLL2_Config+0xec>)
 800a10c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b03      	cmp	r3, #3
 800a114:	d067      	beq.n	800a1e6 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	4606      	mov	r6, r0
 800a11a:	460f      	mov	r7, r1
 800a11c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a120:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a122:	f7fc fd5d 	bl	8006be0 <HAL_GetTick>
 800a126:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a128:	e004      	b.n	800a134 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a12a:	f7fc fd59 	bl	8006be0 <HAL_GetTick>
 800a12e:	1b43      	subs	r3, r0, r5
 800a130:	2b02      	cmp	r3, #2
 800a132:	d856      	bhi.n	800a1e2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	011a      	lsls	r2, r3, #4
 800a138:	d4f7      	bmi.n	800a12a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a13a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a13c:	6832      	ldr	r2, [r6, #0]
 800a13e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a142:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a146:	62a3      	str	r3, [r4, #40]	; 0x28
 800a148:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	3a01      	subs	r2, #1
 800a150:	025b      	lsls	r3, r3, #9
 800a152:	0412      	lsls	r2, r2, #16
 800a154:	b29b      	uxth	r3, r3
 800a156:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a15a:	4313      	orrs	r3, r2
 800a15c:	6872      	ldr	r2, [r6, #4]
 800a15e:	3a01      	subs	r2, #1
 800a160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a164:	4313      	orrs	r3, r2
 800a166:	6932      	ldr	r2, [r6, #16]
 800a168:	3a01      	subs	r2, #1
 800a16a:	0612      	lsls	r2, r2, #24
 800a16c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a170:	4313      	orrs	r3, r2
 800a172:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a174:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a176:	6972      	ldr	r2, [r6, #20]
 800a178:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a17c:	4313      	orrs	r3, r2
 800a17e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a180:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a182:	69b3      	ldr	r3, [r6, #24]
 800a184:	f022 0220 	bic.w	r2, r2, #32
 800a188:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a18a:	4b1b      	ldr	r3, [pc, #108]	; (800a1f8 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a18c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a18e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a190:	f022 0210 	bic.w	r2, r2, #16
 800a194:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a196:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a198:	69f2      	ldr	r2, [r6, #28]
 800a19a:	400b      	ands	r3, r1
 800a19c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a1a0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a1a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1a4:	f043 0310 	orr.w	r3, r3, #16
 800a1a8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a1ac:	b1ef      	cbz	r7, 800a1ea <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a1ae:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a1b0:	bf0c      	ite	eq
 800a1b2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1b6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800a1ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1bc:	4c0d      	ldr	r4, [pc, #52]	; (800a1f4 <RCCEx_PLL2_Config+0xec>)
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1c4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1c6:	f7fc fd0b 	bl	8006be0 <HAL_GetTick>
 800a1ca:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1cc:	e004      	b.n	800a1d8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1ce:	f7fc fd07 	bl	8006be0 <HAL_GetTick>
 800a1d2:	1b40      	subs	r0, r0, r5
 800a1d4:	2802      	cmp	r0, #2
 800a1d6:	d804      	bhi.n	800a1e2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	d5f7      	bpl.n	800a1ce <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800a1de:	2000      	movs	r0, #0
}
 800a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a1e2:	2003      	movs	r0, #3
}
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a1e6:	2001      	movs	r0, #1
}
 800a1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1f0:	e7e4      	b.n	800a1bc <RCCEx_PLL2_Config+0xb4>
 800a1f2:	bf00      	nop
 800a1f4:	58024400 	.word	0x58024400
 800a1f8:	ffff0007 	.word	0xffff0007

0800a1fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1fe:	4c3a      	ldr	r4, [pc, #232]	; (800a2e8 <RCCEx_PLL3_Config+0xec>)
 800a200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a202:	f003 0303 	and.w	r3, r3, #3
 800a206:	2b03      	cmp	r3, #3
 800a208:	d067      	beq.n	800a2da <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	4606      	mov	r6, r0
 800a20e:	460f      	mov	r7, r1
 800a210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a214:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a216:	f7fc fce3 	bl	8006be0 <HAL_GetTick>
 800a21a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a21c:	e004      	b.n	800a228 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a21e:	f7fc fcdf 	bl	8006be0 <HAL_GetTick>
 800a222:	1b43      	subs	r3, r0, r5
 800a224:	2b02      	cmp	r3, #2
 800a226:	d856      	bhi.n	800a2d6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	009a      	lsls	r2, r3, #2
 800a22c:	d4f7      	bmi.n	800a21e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a22e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a230:	6832      	ldr	r2, [r6, #0]
 800a232:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800a236:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a23a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a23c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800a240:	3b01      	subs	r3, #1
 800a242:	3a01      	subs	r2, #1
 800a244:	025b      	lsls	r3, r3, #9
 800a246:	0412      	lsls	r2, r2, #16
 800a248:	b29b      	uxth	r3, r3
 800a24a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a24e:	4313      	orrs	r3, r2
 800a250:	6872      	ldr	r2, [r6, #4]
 800a252:	3a01      	subs	r2, #1
 800a254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a258:	4313      	orrs	r3, r2
 800a25a:	6932      	ldr	r2, [r6, #16]
 800a25c:	3a01      	subs	r2, #1
 800a25e:	0612      	lsls	r2, r2, #24
 800a260:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a264:	4313      	orrs	r3, r2
 800a266:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a26a:	6972      	ldr	r2, [r6, #20]
 800a26c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a270:	4313      	orrs	r3, r2
 800a272:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a274:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a276:	69b3      	ldr	r3, [r6, #24]
 800a278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a27c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a27e:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a280:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a288:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a28a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a28c:	69f2      	ldr	r2, [r6, #28]
 800a28e:	400b      	ands	r3, r1
 800a290:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a294:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a29c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a29e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a2a0:	b1ef      	cbz	r7, 800a2de <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2a2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2a4:	bf0c      	ite	eq
 800a2a6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2aa:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800a2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2b0:	4c0d      	ldr	r4, [pc, #52]	; (800a2e8 <RCCEx_PLL3_Config+0xec>)
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2b8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2ba:	f7fc fc91 	bl	8006be0 <HAL_GetTick>
 800a2be:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2c0:	e004      	b.n	800a2cc <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2c2:	f7fc fc8d 	bl	8006be0 <HAL_GetTick>
 800a2c6:	1b40      	subs	r0, r0, r5
 800a2c8:	2802      	cmp	r0, #2
 800a2ca:	d804      	bhi.n	800a2d6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	d5f7      	bpl.n	800a2c2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800a2d2:	2000      	movs	r0, #0
}
 800a2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800a2d6:	2003      	movs	r0, #3
}
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800a2da:	2001      	movs	r0, #1
}
 800a2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2e4:	e7e4      	b.n	800a2b0 <RCCEx_PLL3_Config+0xb4>
 800a2e6:	bf00      	nop
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	ffff0007 	.word	0xffff0007

0800a2f0 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2f4:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800a2f8:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a2fa:	011d      	lsls	r5, r3, #4
 800a2fc:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800a300:	d521      	bpl.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a302:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800a304:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a308:	f000 8572 	beq.w	800adf0 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800a30c:	d80e      	bhi.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800a30e:	2900      	cmp	r1, #0
 800a310:	f000 85cd 	beq.w	800aeae <HAL_RCCEx_PeriphCLKConfig+0xbbe>
 800a314:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a318:	f040 85c6 	bne.w	800aea8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a31c:	2102      	movs	r1, #2
 800a31e:	3008      	adds	r0, #8
 800a320:	f7ff fef2 	bl	800a108 <RCCEx_PLL2_Config>
 800a324:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a326:	b966      	cbnz	r6, 800a342 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a328:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a32a:	e003      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a32c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800a330:	f040 85ba 	bne.w	800aea8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a334:	4aa3      	ldr	r2, [pc, #652]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a336:	2600      	movs	r6, #0
 800a338:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a33a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a33e:	4319      	orrs	r1, r3
 800a340:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a342:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a346:	05d8      	lsls	r0, r3, #23
 800a348:	d50a      	bpl.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a34a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a34c:	2904      	cmp	r1, #4
 800a34e:	d806      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a350:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a354:	055f0558 	.word	0x055f0558
 800a358:	030e0576 	.word	0x030e0576
 800a35c:	030e      	.short	0x030e
 800a35e:	2601      	movs	r6, #1
 800a360:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a362:	0599      	lsls	r1, r3, #22
 800a364:	d517      	bpl.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a366:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a368:	2980      	cmp	r1, #128	; 0x80
 800a36a:	f000 8570 	beq.w	800ae4e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 800a36e:	f200 80e1 	bhi.w	800a534 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a372:	2900      	cmp	r1, #0
 800a374:	f000 8442 	beq.w	800abfc <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a378:	2940      	cmp	r1, #64	; 0x40
 800a37a:	f040 80e2 	bne.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a37e:	2100      	movs	r1, #0
 800a380:	f104 0008 	add.w	r0, r4, #8
 800a384:	f7ff fec0 	bl	800a108 <RCCEx_PLL2_Config>
 800a388:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a38a:	2d00      	cmp	r5, #0
 800a38c:	f000 83f4 	beq.w	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a390:	462e      	mov	r6, r5
 800a392:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a396:	055f      	lsls	r7, r3, #21
 800a398:	d51a      	bpl.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a39a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800a39e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a3a2:	f000 851d 	beq.w	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800a3a6:	f200 80cf 	bhi.w	800a548 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	f000 842d 	beq.w	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800a3b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a3b4:	f040 80d0 	bne.w	800a558 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	f104 0008 	add.w	r0, r4, #8
 800a3be:	f7ff fea3 	bl	800a108 <RCCEx_PLL2_Config>
 800a3c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a3c4:	2d00      	cmp	r5, #0
 800a3c6:	f000 83f6 	beq.w	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a3ca:	462e      	mov	r6, r5
 800a3cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a3d0:	0518      	lsls	r0, r3, #20
 800a3d2:	d51a      	bpl.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a3d4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800a3d8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a3dc:	f000 8528 	beq.w	800ae30 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800a3e0:	f200 80bd 	bhi.w	800a55e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	f000 8403 	beq.w	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800a3ea:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a3ee:	f040 80be 	bne.w	800a56e <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	f104 0008 	add.w	r0, r4, #8
 800a3f8:	f7ff fe86 	bl	800a108 <RCCEx_PLL2_Config>
 800a3fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	f000 83af 	beq.w	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a404:	462e      	mov	r6, r5
 800a406:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a40a:	0199      	lsls	r1, r3, #6
 800a40c:	d51a      	bpl.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800a40e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a410:	2920      	cmp	r1, #32
 800a412:	f000 84b0 	beq.w	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a416:	f200 80ad 	bhi.w	800a574 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800a41a:	b139      	cbz	r1, 800a42c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a41c:	2910      	cmp	r1, #16
 800a41e:	f040 80ac 	bne.w	800a57a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a422:	4a68      	ldr	r2, [pc, #416]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a424:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a42a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	f040 8414 	bne.w	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a432:	4a64      	ldr	r2, [pc, #400]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a434:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a436:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a438:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a43c:	430b      	orrs	r3, r1
 800a43e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a440:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a444:	04df      	lsls	r7, r3, #19
 800a446:	d519      	bpl.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a448:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800a44a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a44e:	f000 84e7 	beq.w	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800a452:	f200 8095 	bhi.w	800a580 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800a456:	2900      	cmp	r1, #0
 800a458:	f000 83c4 	beq.w	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800a45c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800a460:	f040 8096 	bne.w	800a590 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a464:	2100      	movs	r1, #0
 800a466:	f104 0008 	add.w	r0, r4, #8
 800a46a:	f7ff fe4d 	bl	800a108 <RCCEx_PLL2_Config>
 800a46e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a470:	2d00      	cmp	r5, #0
 800a472:	f000 838b 	beq.w	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a476:	462e      	mov	r6, r5
 800a478:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a47c:	0498      	lsls	r0, r3, #18
 800a47e:	d51d      	bpl.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a480:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a482:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a486:	f000 8462 	beq.w	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a48a:	f200 8084 	bhi.w	800a596 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a48e:	b149      	cbz	r1, 800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a490:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a494:	f040 8088 	bne.w	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a498:	2101      	movs	r1, #1
 800a49a:	f104 0008 	add.w	r0, r4, #8
 800a49e:	f7ff fe33 	bl	800a108 <RCCEx_PLL2_Config>
 800a4a2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a4a4:	2d00      	cmp	r5, #0
 800a4a6:	f040 83e7 	bne.w	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4aa:	4a46      	ldr	r2, [pc, #280]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a4ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a4b0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a4b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a4bc:	0459      	lsls	r1, r3, #17
 800a4be:	d51d      	bpl.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a4c0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800a4c4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a4c8:	f000 844b 	beq.w	800ad62 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800a4cc:	d86f      	bhi.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800a4ce:	b141      	cbz	r1, 800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a4d0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a4d4:	d173      	bne.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	f104 0008 	add.w	r0, r4, #8
 800a4dc:	f7ff fe14 	bl	800a108 <RCCEx_PLL2_Config>
 800a4e0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	f040 83d0 	bne.w	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4e8:	4a36      	ldr	r2, [pc, #216]	; (800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a4ea:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800a4ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a4f0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a4fc:	041f      	lsls	r7, r3, #16
 800a4fe:	d50d      	bpl.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800a500:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a502:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a506:	f000 8419 	beq.w	800ad3c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800a50a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a50e:	f000 8237 	beq.w	800a980 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800a512:	2900      	cmp	r1, #0
 800a514:	f000 823a 	beq.w	800a98c <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800a518:	2601      	movs	r6, #1
 800a51a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a51c:	01d8      	lsls	r0, r3, #7
 800a51e:	d55f      	bpl.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
 800a520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a522:	2903      	cmp	r1, #3
 800a524:	f200 84ee 	bhi.w	800af04 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 800a528:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a52c:	04390054 	.word	0x04390054
 800a530:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800a534:	29c0      	cmp	r1, #192	; 0xc0
 800a536:	f43f af28 	beq.w	800a38a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800a53a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a53e:	f43f af24 	beq.w	800a38a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800a542:	2601      	movs	r6, #1
 800a544:	4635      	mov	r5, r6
 800a546:	e726      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a548:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800a54c:	f43f af3a 	beq.w	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a550:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a554:	f43f af36 	beq.w	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a558:	2601      	movs	r6, #1
 800a55a:	4635      	mov	r5, r6
 800a55c:	e738      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a55e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a562:	f43f af4c 	beq.w	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a566:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a56a:	f43f af48 	beq.w	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800a56e:	2601      	movs	r6, #1
 800a570:	4635      	mov	r5, r6
 800a572:	e74a      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800a574:	2930      	cmp	r1, #48	; 0x30
 800a576:	f43f af59 	beq.w	800a42c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a57a:	2601      	movs	r6, #1
 800a57c:	4635      	mov	r5, r6
 800a57e:	e761      	b.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a580:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800a584:	f43f af74 	beq.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a588:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a58c:	f43f af70 	beq.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a590:	2601      	movs	r6, #1
 800a592:	4635      	mov	r5, r6
 800a594:	e772      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a596:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800a59a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800a59e:	d081      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a5a0:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800a5a4:	f43f af7e 	beq.w	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800a5a8:	2601      	movs	r6, #1
 800a5aa:	4635      	mov	r5, r6
 800a5ac:	e786      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a5ae:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800a5b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a5b6:	d094      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a5b8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800a5bc:	d091      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800a5be:	2601      	movs	r6, #1
 800a5c0:	4635      	mov	r5, r6
 800a5c2:	e79b      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800a5c4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5c8:	2102      	movs	r1, #2
 800a5ca:	f104 0008 	add.w	r0, r4, #8
 800a5ce:	f7ff fd9b 	bl	800a108 <RCCEx_PLL2_Config>
 800a5d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	f000 8345 	beq.w	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5da:	462e      	mov	r6, r5
 800a5dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a5e0:	0259      	lsls	r1, r3, #9
 800a5e2:	f100 826c 	bmi.w	800aabe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a5e6:	07d8      	lsls	r0, r3, #31
 800a5e8:	d52f      	bpl.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5ea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a5ec:	2928      	cmp	r1, #40	; 0x28
 800a5ee:	d82a      	bhi.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a5f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a5f4:	0029020a 	.word	0x0029020a
 800a5f8:	00290029 	.word	0x00290029
 800a5fc:	00290029 	.word	0x00290029
 800a600:	00290029 	.word	0x00290029
 800a604:	0029044a 	.word	0x0029044a
 800a608:	00290029 	.word	0x00290029
 800a60c:	00290029 	.word	0x00290029
 800a610:	00290029 	.word	0x00290029
 800a614:	00290204 	.word	0x00290204
 800a618:	00290029 	.word	0x00290029
 800a61c:	00290029 	.word	0x00290029
 800a620:	00290029 	.word	0x00290029
 800a624:	0029020a 	.word	0x0029020a
 800a628:	00290029 	.word	0x00290029
 800a62c:	00290029 	.word	0x00290029
 800a630:	00290029 	.word	0x00290029
 800a634:	0029020a 	.word	0x0029020a
 800a638:	00290029 	.word	0x00290029
 800a63c:	00290029 	.word	0x00290029
 800a640:	00290029 	.word	0x00290029
 800a644:	020a      	.short	0x020a
 800a646:	2601      	movs	r6, #1
 800a648:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a64a:	0799      	lsls	r1, r3, #30
 800a64c:	d517      	bpl.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a64e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a650:	2905      	cmp	r1, #5
 800a652:	f200 845f 	bhi.w	800af14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a656:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a65a:	000c      	.short	0x000c
 800a65c:	0006040c 	.word	0x0006040c
 800a660:	000c000c 	.word	0x000c000c
 800a664:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a666:	2101      	movs	r1, #1
 800a668:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a66c:	f7ff fdc6 	bl	800a1fc <RCCEx_PLL3_Config>
 800a670:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a672:	2d00      	cmp	r5, #0
 800a674:	f000 82d8 	beq.w	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a678:	462e      	mov	r6, r5
 800a67a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a67e:	075f      	lsls	r7, r3, #29
 800a680:	d518      	bpl.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a682:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a686:	2905      	cmp	r1, #5
 800a688:	f200 8440 	bhi.w	800af0c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800a68c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a690:	03e7000c 	.word	0x03e7000c
 800a694:	000c0006 	.word	0x000c0006
 800a698:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a69c:	2101      	movs	r1, #1
 800a69e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a6a2:	f7ff fdab 	bl	800a1fc <RCCEx_PLL3_Config>
 800a6a6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a6a8:	2d00      	cmp	r5, #0
 800a6aa:	f000 82c7 	beq.w	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a6ae:	462e      	mov	r6, r5
 800a6b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a6b4:	0698      	lsls	r0, r3, #26
 800a6b6:	d51f      	bpl.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6b8:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a6bc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800a6c0:	f000 8363 	beq.w	800ad8a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800a6c4:	f200 811c 	bhi.w	800a900 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800a6c8:	b149      	cbz	r1, 800a6de <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800a6ca:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a6ce:	f040 8121 	bne.w	800a914 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	f104 0008 	add.w	r0, r4, #8
 800a6d8:	f7ff fd16 	bl	800a108 <RCCEx_PLL2_Config>
 800a6dc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a6de:	2d00      	cmp	r5, #0
 800a6e0:	f040 82b7 	bne.w	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6e4:	4ab0      	ldr	r2, [pc, #704]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a6e6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a6ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a6ec:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a6f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a6f8:	0659      	lsls	r1, r3, #25
 800a6fa:	d51f      	bpl.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a6fc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a700:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800a704:	f000 8306 	beq.w	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 800a708:	f200 8107 	bhi.w	800a91a <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800a70c:	b149      	cbz	r1, 800a722 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a70e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a712:	f040 810c 	bne.w	800a92e <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a716:	2100      	movs	r1, #0
 800a718:	f104 0008 	add.w	r0, r4, #8
 800a71c:	f7ff fcf4 	bl	800a108 <RCCEx_PLL2_Config>
 800a720:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a722:	2d00      	cmp	r5, #0
 800a724:	f040 82b4 	bne.w	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a728:	4a9f      	ldr	r2, [pc, #636]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a72a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800a72e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a730:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a734:	430b      	orrs	r3, r1
 800a736:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a738:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a73c:	061f      	lsls	r7, r3, #24
 800a73e:	d51f      	bpl.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a740:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a744:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a748:	f000 82ee 	beq.w	800ad28 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800a74c:	f200 80f2 	bhi.w	800a934 <HAL_RCCEx_PeriphCLKConfig+0x644>
 800a750:	b149      	cbz	r1, 800a766 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a752:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800a756:	f040 80f7 	bne.w	800a948 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a75a:	2100      	movs	r1, #0
 800a75c:	f104 0008 	add.w	r0, r4, #8
 800a760:	f7ff fcd2 	bl	800a108 <RCCEx_PLL2_Config>
 800a764:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a766:	2d00      	cmp	r5, #0
 800a768:	f040 828a 	bne.w	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a76c:	4a8e      	ldr	r2, [pc, #568]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a76e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800a772:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a774:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a778:	430b      	orrs	r3, r1
 800a77a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a77c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a780:	0718      	lsls	r0, r3, #28
 800a782:	d50d      	bpl.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a784:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a788:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a78c:	f000 8310 	beq.w	800adb0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a790:	4985      	ldr	r1, [pc, #532]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a792:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800a794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a798:	4313      	orrs	r3, r2
 800a79a:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a79c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7a0:	06d9      	lsls	r1, r3, #27
 800a7a2:	d50d      	bpl.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a7a4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800a7a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a7ac:	f000 830c 	beq.w	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a7b0:	497d      	ldr	r1, [pc, #500]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a7b2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800a7b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a7c0:	031f      	lsls	r7, r3, #12
 800a7c2:	d50e      	bpl.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
 800a7c4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a7c8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a7cc:	f000 8102 	beq.w	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800a7d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a7d4:	f000 8104 	beq.w	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	f000 8290 	beq.w	800acfe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a7de:	2601      	movs	r6, #1
 800a7e0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7e2:	0358      	lsls	r0, r3, #13
 800a7e4:	d50f      	bpl.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
 800a7e6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a7ea:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800a7ee:	f000 80dd 	beq.w	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a7f2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800a7f6:	f000 80df 	beq.w	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800a7fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a7fe:	f000 8275 	beq.w	800acec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800a802:	2601      	movs	r6, #1
 800a804:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a806:	03d9      	lsls	r1, r3, #15
 800a808:	d509      	bpl.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a80a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a80c:	2900      	cmp	r1, #0
 800a80e:	f000 8258 	beq.w	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a812:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a816:	f000 81d9 	beq.w	800abcc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a81a:	2601      	movs	r6, #1
 800a81c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a81e:	009f      	lsls	r7, r3, #2
 800a820:	f100 80ff 	bmi.w	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a824:	0398      	lsls	r0, r3, #14
 800a826:	d50e      	bpl.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800a828:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a82c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a830:	f000 823e 	beq.w	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800a834:	f240 808b 	bls.w	800a94e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800a838:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a83c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a840:	f000 8088 	beq.w	800a954 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a844:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a846:	02d9      	lsls	r1, r3, #11
 800a848:	d508      	bpl.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a84a:	4a57      	ldr	r2, [pc, #348]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a84c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a84e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a854:	430b      	orrs	r3, r1
 800a856:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a858:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a85c:	00df      	lsls	r7, r3, #3
 800a85e:	d509      	bpl.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a860:	4a51      	ldr	r2, [pc, #324]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a862:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800a866:	6913      	ldr	r3, [r2, #16]
 800a868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a86c:	430b      	orrs	r3, r1
 800a86e:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a870:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a874:	029d      	lsls	r5, r3, #10
 800a876:	d508      	bpl.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a878:	4a4b      	ldr	r2, [pc, #300]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a87a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a87c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a87e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a882:	430b      	orrs	r3, r1
 800a884:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a886:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a88a:	0058      	lsls	r0, r3, #1
 800a88c:	d50b      	bpl.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a88e:	4b46      	ldr	r3, [pc, #280]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a896:	611a      	str	r2, [r3, #16]
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	da08      	bge.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8aa:	4a3f      	ldr	r2, [pc, #252]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a8ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a8ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a8b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a8bc:	0219      	lsls	r1, r3, #8
 800a8be:	d508      	bpl.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8c0:	4a39      	ldr	r2, [pc, #228]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a8c2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a8c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a8c8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a8d0:	6862      	ldr	r2, [r4, #4]
 800a8d2:	07d3      	lsls	r3, r2, #31
 800a8d4:	f100 80b1 	bmi.w	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a8d8:	0797      	lsls	r7, r2, #30
 800a8da:	f100 80bb 	bmi.w	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a8de:	0755      	lsls	r5, r2, #29
 800a8e0:	f100 80c5 	bmi.w	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8e4:	0710      	lsls	r0, r2, #28
 800a8e6:	f100 80cf 	bmi.w	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8ea:	06d1      	lsls	r1, r2, #27
 800a8ec:	f100 80d9 	bmi.w	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8f0:	0692      	lsls	r2, r2, #26
 800a8f2:	f100 812a 	bmi.w	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
 800a8f6:	1e30      	subs	r0, r6, #0
 800a8f8:	bf18      	it	ne
 800a8fa:	2001      	movne	r0, #1
}
 800a8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a900:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800a904:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a908:	f43f aee9 	beq.w	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800a90c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800a910:	f43f aee5 	beq.w	800a6de <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800a914:	2601      	movs	r6, #1
 800a916:	4635      	mov	r5, r6
 800a918:	e6ee      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a91a:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800a91e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a922:	f43f aefe 	beq.w	800a722 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a926:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800a92a:	f43f aefa 	beq.w	800a722 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a92e:	2601      	movs	r6, #1
 800a930:	4635      	mov	r5, r6
 800a932:	e703      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a934:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800a938:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800a93c:	f43f af13 	beq.w	800a766 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a940:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800a944:	f43f af0f 	beq.w	800a766 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800a948:	2601      	movs	r6, #1
 800a94a:	4635      	mov	r5, r6
 800a94c:	e718      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
 800a94e:	2900      	cmp	r1, #0
 800a950:	f47f af78 	bne.w	800a844 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800a954:	2d00      	cmp	r5, #0
 800a956:	f040 81c5 	bne.w	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a95a:	4a13      	ldr	r2, [pc, #76]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a95c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a960:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a966:	430b      	orrs	r3, r1
 800a968:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a96a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a96e:	e76a      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a970:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800a972:	2d00      	cmp	r5, #0
 800a974:	f000 8114 	beq.w	800aba0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a978:	462e      	mov	r6, r5
 800a97a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a97e:	e4f0      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a980:	2101      	movs	r1, #1
 800a982:	f104 0008 	add.w	r0, r4, #8
 800a986:	f7ff fbbf 	bl	800a108 <RCCEx_PLL2_Config>
 800a98a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a98c:	2d00      	cmp	r5, #0
 800a98e:	f040 8147 	bne.w	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a992:	4a05      	ldr	r2, [pc, #20]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800a994:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a996:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a998:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a99c:	430b      	orrs	r3, r1
 800a99e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a9a0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a9a4:	e5ba      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a9b2:	f7ff fc23 	bl	800a1fc <RCCEx_PLL3_Config>
 800a9b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a9b8:	2d00      	cmp	r5, #0
 800a9ba:	f040 8171 	bne.w	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9be:	4aba      	ldr	r2, [pc, #744]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9c0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800a9c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a9c6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a9d2:	e718      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9d4:	2102      	movs	r1, #2
 800a9d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a9da:	f7ff fc0f 	bl	800a1fc <RCCEx_PLL3_Config>
 800a9de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	f040 8159 	bne.w	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9e6:	4ab0      	ldr	r2, [pc, #704]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800a9e8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800a9ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a9ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800a9fa:	e6f2      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800aa02:	f7ff fbfb 	bl	800a1fc <RCCEx_PLL3_Config>
 800aa06:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	f040 8105 	bne.w	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aa0e:	4aa6      	ldr	r2, [pc, #664]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aa10:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800aa12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800aa14:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aa1c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aa20:	e613      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa22:	2102      	movs	r1, #2
 800aa24:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800aa28:	f7ff fbe8 	bl	800a1fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aa30:	2800      	cmp	r0, #0
 800aa32:	f43f aef7 	beq.w	800a824 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
 800aa36:	2601      	movs	r6, #1
 800aa38:	e6f4      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	f104 0008 	add.w	r0, r4, #8
 800aa40:	f7ff fb62 	bl	800a108 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa44:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f af46 	beq.w	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa4c:	0797      	lsls	r7, r2, #30
 800aa4e:	4606      	mov	r6, r0
 800aa50:	f57f af45 	bpl.w	800a8de <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa54:	2101      	movs	r1, #1
 800aa56:	f104 0008 	add.w	r0, r4, #8
 800aa5a:	f7ff fb55 	bl	800a108 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa5e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800aa60:	2800      	cmp	r0, #0
 800aa62:	f43f af3c 	beq.w	800a8de <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa66:	0755      	lsls	r5, r2, #29
 800aa68:	4606      	mov	r6, r0
 800aa6a:	f57f af3b 	bpl.w	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa6e:	2102      	movs	r1, #2
 800aa70:	f104 0008 	add.w	r0, r4, #8
 800aa74:	f7ff fb48 	bl	800a108 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa78:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	f43f af32 	beq.w	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa80:	4606      	mov	r6, r0
 800aa82:	0710      	lsls	r0, r2, #28
 800aa84:	f57f af31 	bpl.w	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa88:	2100      	movs	r1, #0
 800aa8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800aa8e:	f7ff fbb5 	bl	800a1fc <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa92:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f43f af28 	beq.w	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa9a:	06d1      	lsls	r1, r2, #27
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	f57f af27 	bpl.w	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaa2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f7ff fba7 	bl	800a1fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f000 812e 	beq.w	800ad10 <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	069b      	lsls	r3, r3, #26
 800aab8:	d550      	bpl.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800aaba:	4606      	mov	r6, r0
 800aabc:	e047      	b.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aabe:	4f7b      	ldr	r7, [pc, #492]	; (800acac <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aac6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800aac8:	f7fc f88a 	bl	8006be0 <HAL_GetTick>
 800aacc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aace:	e006      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aad0:	f7fc f886 	bl	8006be0 <HAL_GetTick>
 800aad4:	eba0 0008 	sub.w	r0, r0, r8
 800aad8:	2864      	cmp	r0, #100	; 0x64
 800aada:	f200 81df 	bhi.w	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	05da      	lsls	r2, r3, #23
 800aae2:	d5f5      	bpl.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 800aae4:	2d00      	cmp	r5, #0
 800aae6:	f040 8208 	bne.w	800aefa <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aaea:	4b6f      	ldr	r3, [pc, #444]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aaec:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800aaf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aaf2:	4051      	eors	r1, r2
 800aaf4:	f411 7f40 	tst.w	r1, #768	; 0x300
 800aaf8:	d00d      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aafa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800aafc:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aafe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800ab02:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800ab06:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ab08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ab0a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800ab0e:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800ab10:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ab12:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800ab16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ab1a:	f000 81d0 	beq.w	800aebe <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab1e:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800ab22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab26:	f000 81de 	beq.w	800aee6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ab2a:	4a5f      	ldr	r2, [pc, #380]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab2c:	6913      	ldr	r3, [r2, #16]
 800ab2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ab32:	6113      	str	r3, [r2, #16]
 800ab34:	4a5c      	ldr	r2, [pc, #368]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab36:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800ab3a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ab3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab40:	430b      	orrs	r3, r1
 800ab42:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab44:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab48:	e54d      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab4a:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab4e:	2102      	movs	r1, #2
 800ab50:	4628      	mov	r0, r5
 800ab52:	f7ff fb53 	bl	800a1fc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f43f aecd 	beq.w	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
 800ab5c:	2001      	movs	r0, #1
}
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab62:	4a51      	ldr	r2, [pc, #324]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab64:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800ab68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ab6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab72:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab76:	e448      	b.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab78:	4a4b      	ldr	r2, [pc, #300]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab7c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ab7e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800ab82:	430b      	orrs	r3, r1
 800ab84:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab86:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab8a:	e404      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab8c:	4a46      	ldr	r2, [pc, #280]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ab8e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ab90:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ab92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab96:	430b      	orrs	r3, r1
 800ab98:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ab9e:	e46d      	b.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aba0:	4a41      	ldr	r2, [pc, #260]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800aba2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800aba4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	430b      	orrs	r3, r1
 800abac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800abae:	e9d4 3200 	ldrd	r3, r2, [r4]
 800abb2:	f7ff bbd6 	b.w	800a362 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800abb6:	4a3c      	ldr	r2, [pc, #240]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abb8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800abbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800abbe:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800abc2:	430b      	orrs	r3, r1
 800abc4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800abc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800abca:	e401      	b.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abcc:	2102      	movs	r1, #2
 800abce:	f104 0008 	add.w	r0, r4, #8
 800abd2:	f7ff fa99 	bl	800a108 <RCCEx_PLL2_Config>
 800abd6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800abd8:	2d00      	cmp	r5, #0
 800abda:	d079      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800abdc:	462e      	mov	r6, r5
 800abde:	e9d4 3200 	ldrd	r3, r2, [r4]
 800abe2:	e61c      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe4:	4a30      	ldr	r2, [pc, #192]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abe6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800abe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abec:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800abee:	e43f      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf0:	4a2d      	ldr	r2, [pc, #180]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abf2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800abf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abf8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800abfa:	e400      	b.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800abfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ac00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac04:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ac06:	f7ff bbc0 	b.w	800a38a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac0a:	4a27      	ldr	r2, [pc, #156]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ac0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ac0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac12:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ac14:	f7ff bbd6 	b.w	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ac18:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac1c:	462e      	mov	r6, r5
 800ac1e:	e514      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac20:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac24:	462e      	mov	r6, r5
 800ac26:	e479      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ac28:	4a1f      	ldr	r2, [pc, #124]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ac2a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ac2c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ac2e:	f023 0307 	bic.w	r3, r3, #7
 800ac32:	430b      	orrs	r3, r1
 800ac34:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac36:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac3a:	e520      	b.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac3c:	4a1a      	ldr	r2, [pc, #104]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ac3e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ac42:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ac44:	f023 0307 	bic.w	r3, r3, #7
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac50:	e530      	b.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ac52:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac56:	462e      	mov	r6, r5
 800ac58:	e54e      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac5a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac5e:	462e      	mov	r6, r5
 800ac60:	f7ff bbf0 	b.w	800a444 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac64:	4a10      	ldr	r2, [pc, #64]	; (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ac66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ac68:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	430b      	orrs	r3, r1
 800ac70:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac72:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac76:	e4b3      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac78:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac7c:	462e      	mov	r6, r5
 800ac7e:	e41d      	b.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac80:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac84:	462e      	mov	r6, r5
 800ac86:	e57b      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac88:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac8c:	462e      	mov	r6, r5
 800ac8e:	e435      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ac90:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac94:	462e      	mov	r6, r5
 800ac96:	e551      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac98:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ac9c:	462e      	mov	r6, r5
 800ac9e:	e5a0      	b.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aca0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aca4:	462e      	mov	r6, r5
 800aca6:	e5ae      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800aca8:	58024400 	.word	0x58024400
 800acac:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb0:	4a9a      	ldr	r2, [pc, #616]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800acb2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800acb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800acba:	2d00      	cmp	r5, #0
 800acbc:	f43f ae4d 	beq.w	800a95a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800acc0:	e010      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc2:	4a96      	ldr	r2, [pc, #600]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800acc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800acc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acca:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800accc:	2d00      	cmp	r5, #0
 800acce:	d185      	bne.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acd0:	4a92      	ldr	r2, [pc, #584]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800acd2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800acd4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800acd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acda:	430b      	orrs	r3, r1
 800acdc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acde:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ace2:	e59c      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ace4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ace8:	462e      	mov	r6, r5
 800acea:	e5ac      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acec:	4a8b      	ldr	r2, [pc, #556]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800acee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800acf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800acf6:	2d00      	cmp	r5, #0
 800acf8:	f43f ae61 	beq.w	800a9be <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800acfc:	e7d0      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acfe:	f104 0008 	add.w	r0, r4, #8
 800ad02:	f7ff fa01 	bl	800a108 <RCCEx_PLL2_Config>
 800ad06:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	f43f ae6c 	beq.w	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800ad0e:	e7c3      	b.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ad10:	6862      	ldr	r2, [r4, #4]
 800ad12:	e5ed      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad14:	2102      	movs	r1, #2
 800ad16:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad1a:	f7ff fa6f 	bl	800a1fc <RCCEx_PLL3_Config>
 800ad1e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	f43f ad01 	beq.w	800a728 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800ad26:	e7b3      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad28:	2102      	movs	r1, #2
 800ad2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad2e:	f7ff fa65 	bl	800a1fc <RCCEx_PLL3_Config>
 800ad32:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	f43f ad19 	beq.w	800a76c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ad3a:	e7a1      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	4a77      	ldr	r2, [pc, #476]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800ad3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ad40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad44:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	f43f ae23 	beq.w	800a992 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 800ad4c:	e768      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad4e:	2101      	movs	r1, #1
 800ad50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad54:	f7ff fa52 	bl	800a1fc <RCCEx_PLL3_Config>
 800ad58:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	f43f aba5 	beq.w	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800ad60:	e78a      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad62:	2101      	movs	r1, #1
 800ad64:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad68:	f7ff fa48 	bl	800a1fc <RCCEx_PLL3_Config>
 800ad6c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad6e:	2d00      	cmp	r5, #0
 800ad70:	f43f abba 	beq.w	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ad74:	e788      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad76:	2102      	movs	r1, #2
 800ad78:	f104 0008 	add.w	r0, r4, #8
 800ad7c:	f7ff f9c4 	bl	800a108 <RCCEx_PLL2_Config>
 800ad80:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	f43f ab55 	beq.w	800a432 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800ad88:	e767      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ad90:	f7ff fa34 	bl	800a1fc <RCCEx_PLL3_Config>
 800ad94:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ad96:	2d00      	cmp	r5, #0
 800ad98:	f43f aca4 	beq.w	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800ad9c:	e759      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9e:	4a5f      	ldr	r2, [pc, #380]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800ada0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ada2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	f43f af5b 	beq.w	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800adae:	e414      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800adb0:	2102      	movs	r1, #2
 800adb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800adb6:	f7ff fa21 	bl	800a1fc <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800adba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f ace6 	beq.w	800a790 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
 800adc4:	2601      	movs	r6, #1
 800adc6:	e4e3      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800adc8:	2102      	movs	r1, #2
 800adca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800adce:	f7ff fa15 	bl	800a1fc <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800add2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800add6:	2800      	cmp	r0, #0
 800add8:	f43f acea 	beq.w	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
 800addc:	2601      	movs	r6, #1
 800adde:	e4e7      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ade0:	2100      	movs	r1, #0
 800ade2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ade6:	f7ff fa09 	bl	800a1fc <RCCEx_PLL3_Config>
 800adea:	4605      	mov	r5, r0
        break;
 800adec:	f7ff baea 	b.w	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800adf0:	2102      	movs	r1, #2
 800adf2:	3028      	adds	r0, #40	; 0x28
 800adf4:	f7ff fa02 	bl	800a1fc <RCCEx_PLL3_Config>
 800adf8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800adfa:	2e00      	cmp	r6, #0
 800adfc:	f43f aa94 	beq.w	800a328 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800ae00:	f7ff ba9f 	b.w	800a342 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae04:	4a45      	ldr	r2, [pc, #276]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
 800ae06:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ae0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800ae10:	e5af      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae12:	2100      	movs	r1, #0
 800ae14:	f104 0008 	add.w	r0, r4, #8
 800ae18:	f7ff f976 	bl	800a108 <RCCEx_PLL2_Config>
 800ae1c:	4605      	mov	r5, r0
        break;
 800ae1e:	e5a8      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae20:	2100      	movs	r1, #0
 800ae22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae26:	f7ff f9e9 	bl	800a1fc <RCCEx_PLL3_Config>
 800ae2a:	4605      	mov	r5, r0
        break;
 800ae2c:	f7ff bb20 	b.w	800a470 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae30:	2100      	movs	r1, #0
 800ae32:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae36:	f7ff f9e1 	bl	800a1fc <RCCEx_PLL3_Config>
 800ae3a:	4605      	mov	r5, r0
        break;
 800ae3c:	f7ff badf 	b.w	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae40:	2100      	movs	r1, #0
 800ae42:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae46:	f7ff f9d9 	bl	800a1fc <RCCEx_PLL3_Config>
 800ae4a:	4605      	mov	r5, r0
        break;
 800ae4c:	e591      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ae54:	f7ff f9d2 	bl	800a1fc <RCCEx_PLL3_Config>
 800ae58:	4605      	mov	r5, r0
        break;
 800ae5a:	f7ff ba96 	b.w	800a38a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae5e:	2101      	movs	r1, #1
 800ae60:	f104 0008 	add.w	r0, r4, #8
 800ae64:	f7ff f950 	bl	800a108 <RCCEx_PLL2_Config>
 800ae68:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	f43f aee6 	beq.w	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800ae70:	e41d      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae72:	2101      	movs	r1, #1
 800ae74:	f104 0008 	add.w	r0, r4, #8
 800ae78:	f7ff f946 	bl	800a108 <RCCEx_PLL2_Config>
 800ae7c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	f43f aed2 	beq.w	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800ae84:	f7ff bbf8 	b.w	800a678 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae88:	2101      	movs	r1, #1
 800ae8a:	f104 0008 	add.w	r0, r4, #8
 800ae8e:	f7ff f93b 	bl	800a108 <RCCEx_PLL2_Config>
 800ae92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ae94:	2d00      	cmp	r5, #0
 800ae96:	f43f adba 	beq.w	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800ae9a:	e6bd      	b.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
 800ae9c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae9e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800aea2:	4635      	mov	r5, r6
 800aea4:	f7ff bb9f 	b.w	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aea8:	2601      	movs	r6, #1
 800aeaa:	f7ff ba4c 	b.w	800a346 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeae:	4a1b      	ldr	r2, [pc, #108]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aeb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800aeb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb6:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aeb8:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800aeba:	f7ff ba3b 	b.w	800a334 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800aebe:	f7fb fe8f 	bl	8006be0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aec2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
 800aec6:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aec8:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aecc:	e004      	b.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aece:	f7fb fe87 	bl	8006be0 <HAL_GetTick>
 800aed2:	1bc0      	subs	r0, r0, r7
 800aed4:	4548      	cmp	r0, r9
 800aed6:	d8e1      	bhi.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aed8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800aedc:	079b      	lsls	r3, r3, #30
 800aede:	d5f6      	bpl.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aee0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800aee4:	e61b      	b.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800aee6:	490d      	ldr	r1, [pc, #52]	; (800af1c <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800aeea:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800aeee:	690a      	ldr	r2, [r1, #16]
 800aef0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800aef4:	4313      	orrs	r3, r2
 800aef6:	610b      	str	r3, [r1, #16]
 800aef8:	e61c      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aefa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aefe:	462e      	mov	r6, r5
 800af00:	f7ff bb71 	b.w	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
 800af04:	2601      	movs	r6, #1
 800af06:	4635      	mov	r5, r6
 800af08:	f7ff bb6a 	b.w	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af0c:	2601      	movs	r6, #1
 800af0e:	4635      	mov	r5, r6
 800af10:	f7ff bbd0 	b.w	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af14:	2601      	movs	r6, #1
 800af16:	4635      	mov	r5, r6
 800af18:	f7ff bbb1 	b.w	800a67e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800af1c:	58024400 	.word	0x58024400
 800af20:	00ffffcf 	.word	0x00ffffcf

0800af24 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af24:	4b4f      	ldr	r3, [pc, #316]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800af26:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af28:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af2a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af2c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800af2e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800af32:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af36:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800af38:	d05c      	beq.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af3a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af3e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af42:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af46:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800af4a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af4c:	ee07 4a90 	vmov	s15, r4
 800af50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800af54:	d003      	beq.n	800af5e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800af56:	2902      	cmp	r1, #2
 800af58:	d075      	beq.n	800b046 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800af5a:	2900      	cmp	r1, #0
 800af5c:	d04f      	beq.n	800affe <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af5e:	ee07 2a90 	vmov	s15, r2
 800af62:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b068 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800af66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800af70:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	ee06 3a90 	vmov	s13, r3
 800af7c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800af80:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800af84:	ee76 6a85 	vadd.f32	s13, s13, s10
 800af88:	eee7 6a25 	vfma.f32	s13, s14, s11
 800af8c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800af90:	4a34      	ldr	r2, [pc, #208]	; (800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800af92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800af96:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800af98:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800af9c:	ee07 3a10 	vmov	s14, r3
 800afa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800afa4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800afa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 800afaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afb2:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800afb6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800afb8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800afbc:	ee07 3a10 	vmov	s14, r3
 800afc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800afc4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800afc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800afd4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800afd6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800afe2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800afe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800afee:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800aff2:	4770      	bx	lr
 800aff4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aff6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800affa:	6082      	str	r2, [r0, #8]
}
 800affc:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800affe:	6819      	ldr	r1, [r3, #0]
 800b000:	0689      	lsls	r1, r1, #26
 800b002:	d527      	bpl.n	800b054 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b004:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b006:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b00a:	4919      	ldr	r1, [pc, #100]	; (800b070 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b00c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b012:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b01a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b022:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b024:	ee06 3a90 	vmov	s13, r3
 800b028:	ee05 1a90 	vmov	s11, r1
 800b02c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b030:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b034:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b038:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b03c:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b040:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b044:	e7a4      	b.n	800af90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b046:	ee07 2a90 	vmov	s15, r2
 800b04a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b074 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b04e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b052:	e78a      	b.n	800af6a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b054:	ee07 2a90 	vmov	s15, r2
 800b058:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800b05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b060:	e783      	b.n	800af6a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800b062:	bf00      	nop
 800b064:	58024400 	.word	0x58024400
 800b068:	4a742400 	.word	0x4a742400
 800b06c:	39000000 	.word	0x39000000
 800b070:	03d09000 	.word	0x03d09000
 800b074:	4bbebc20 	.word	0x4bbebc20
 800b078:	4c742400 	.word	0x4c742400

0800b07c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b07c:	4b4f      	ldr	r3, [pc, #316]	; (800b1bc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b07e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b080:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b082:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b084:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800b086:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b08a:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b08e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800b090:	d05c      	beq.n	800b14c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b092:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b096:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b09a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b09e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b0a2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b0a4:	ee07 4a90 	vmov	s15, r4
 800b0a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b0ac:	d003      	beq.n	800b0b6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800b0ae:	2902      	cmp	r1, #2
 800b0b0:	d075      	beq.n	800b19e <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	d04f      	beq.n	800b156 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0b6:	ee07 2a90 	vmov	s15, r2
 800b0ba:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800b0be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b0c8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b0cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0d0:	ee06 3a90 	vmov	s13, r3
 800b0d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b0d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b0dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b0e0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b0e4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0e8:	4a34      	ldr	r2, [pc, #208]	; (800b1bc <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b0ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b0ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b0f0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b0f4:	ee07 3a10 	vmov	s14, r3
 800b0f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b0fc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0fe:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b10a:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b10e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b110:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b114:	ee07 3a10 	vmov	s14, r3
 800b118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b11c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b128:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b12c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b12e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b13a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b142:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b146:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b14a:	4770      	bx	lr
 800b14c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b14e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b152:	6082      	str	r2, [r0, #8]
}
 800b154:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b156:	6819      	ldr	r1, [r3, #0]
 800b158:	0689      	lsls	r1, r1, #26
 800b15a:	d527      	bpl.n	800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b15c:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b15e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b162:	4919      	ldr	r1, [pc, #100]	; (800b1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b164:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b16a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b172:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b176:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17a:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b17c:	ee06 3a90 	vmov	s13, r3
 800b180:	ee05 1a90 	vmov	s11, r1
 800b184:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b188:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b18c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b190:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b194:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b198:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b19c:	e7a4      	b.n	800b0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b19e:	ee07 2a90 	vmov	s15, r2
 800b1a2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1aa:	e78a      	b.n	800b0c2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1ac:	ee07 2a90 	vmov	s15, r2
 800b1b0:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800b1b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1b8:	e783      	b.n	800b0c2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800b1ba:	bf00      	nop
 800b1bc:	58024400 	.word	0x58024400
 800b1c0:	4a742400 	.word	0x4a742400
 800b1c4:	39000000 	.word	0x39000000
 800b1c8:	03d09000 	.word	0x03d09000
 800b1cc:	4bbebc20 	.word	0x4bbebc20
 800b1d0:	4c742400 	.word	0x4c742400

0800b1d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1d4:	4b4f      	ldr	r3, [pc, #316]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800b1d6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b1da:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b1dc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800b1de:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b1e2:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1e6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800b1e8:	d05c      	beq.n	800b2a4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1ea:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b1ee:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1f2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1f6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800b1fa:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1fc:	ee07 4a90 	vmov	s15, r4
 800b200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800b204:	d07e      	beq.n	800b304 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800b206:	2902      	cmp	r1, #2
 800b208:	d075      	beq.n	800b2f6 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800b20a:	2900      	cmp	r1, #0
 800b20c:	d04f      	beq.n	800b2ae <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b20e:	ee07 2a90 	vmov	s15, r2
 800b212:	eddf 6a41 	vldr	s13, [pc, #260]	; 800b318 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800b216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b220:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b228:	ee06 3a90 	vmov	s13, r3
 800b22c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b230:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b234:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b238:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b23c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b240:	4a34      	ldr	r2, [pc, #208]	; (800b314 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800b242:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b246:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b248:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b24c:	ee07 3a10 	vmov	s14, r3
 800b250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800b254:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b256:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b262:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b266:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b268:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b26c:	ee07 3a10 	vmov	s14, r3
 800b270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b274:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b27c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b280:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b284:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b286:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b28a:	ee07 3a90 	vmov	s15, r3
 800b28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b292:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800b29e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800b2a2:	4770      	bx	lr
 800b2a4:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b2a6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b2aa:	6082      	str	r2, [r0, #8]
}
 800b2ac:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	0689      	lsls	r1, r1, #26
 800b2b2:	d5ac      	bpl.n	800b20e <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2b4:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2b6:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ba:	4919      	ldr	r1, [pc, #100]	; (800b320 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2bc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2ca:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800b31c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800b2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2d4:	ee06 3a90 	vmov	s13, r3
 800b2d8:	ee05 1a90 	vmov	s11, r1
 800b2dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b2e0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b2e4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b2e8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b2ec:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b2f0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b2f4:	e7a4      	b.n	800b240 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2f6:	ee07 2a90 	vmov	s15, r2
 800b2fa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b324 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800b2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b302:	e78a      	b.n	800b21a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b304:	ee07 2a90 	vmov	s15, r2
 800b308:	eddf 6a07 	vldr	s13, [pc, #28]	; 800b328 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800b30c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b310:	e783      	b.n	800b21a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
 800b318:	4c742400 	.word	0x4c742400
 800b31c:	39000000 	.word	0x39000000
 800b320:	03d09000 	.word	0x03d09000
 800b324:	4bbebc20 	.word	0x4bbebc20
 800b328:	4a742400 	.word	0x4a742400

0800b32c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b32c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b330:	430b      	orrs	r3, r1
{
 800b332:	b500      	push	{lr}
 800b334:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b336:	f000 8084 	beq.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b33a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800b33e:	430b      	orrs	r3, r1
 800b340:	d039      	beq.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b342:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800b346:	430b      	orrs	r3, r1
 800b348:	f000 80e6 	beq.w	800b518 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b34c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800b350:	430b      	orrs	r3, r1
 800b352:	f000 8089 	beq.w	800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b356:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800b35a:	430b      	orrs	r3, r1
 800b35c:	d061      	beq.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b35e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800b362:	430b      	orrs	r3, r1
 800b364:	f000 8112 	beq.w	800b58c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b368:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800b36c:	430b      	orrs	r3, r1
 800b36e:	f000 80a3 	beq.w	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b372:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800b376:	430b      	orrs	r3, r1
 800b378:	f000 80fa 	beq.w	800b570 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b37c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800b380:	430b      	orrs	r3, r1
 800b382:	f000 8143 	beq.w	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b386:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800b38a:	ea50 0301 	orrs.w	r3, r0, r1
 800b38e:	d137      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b390:	4a99      	ldr	r2, [pc, #612]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b392:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800b398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b39c:	f000 8083 	beq.w	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a4:	f000 8156 	beq.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b3a8:	bb53      	cbnz	r3, 800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3aa:	6810      	ldr	r0, [r2, #0]
 800b3ac:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b3b0:	d044      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800b3b2:	4892      	ldr	r0, [pc, #584]	; (800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800b3b4:	e042      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b3b6:	4a90      	ldr	r2, [pc, #576]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b3ba:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800b3be:	2b80      	cmp	r3, #128	; 0x80
 800b3c0:	f000 80a5 	beq.w	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b3c4:	d920      	bls.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800b3c6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3c8:	d037      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ce:	d117      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3d2:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3d8:	0749      	lsls	r1, r1, #29
 800b3da:	d502      	bpl.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 80c1 	beq.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3e2:	4a85      	ldr	r2, [pc, #532]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3e4:	6812      	ldr	r2, [r2, #0]
 800b3e6:	05d0      	lsls	r0, r2, #23
 800b3e8:	d503      	bpl.n	800b3f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800b3ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ee:	f000 8101 	beq.w	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3f2:	4a81      	ldr	r2, [pc, #516]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b3f4:	6812      	ldr	r2, [r2, #0]
 800b3f6:	0391      	lsls	r1, r2, #14
 800b3f8:	d502      	bpl.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b3fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3fe:	d0d8      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800b400:	2000      	movs	r0, #0
}
 800b402:	b005      	add	sp, #20
 800b404:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d04c      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d1f7      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b410:	6810      	ldr	r0, [r2, #0]
 800b412:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b416:	d011      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b418:	a801      	add	r0, sp, #4
 800b41a:	f7ff fd83 	bl	800af24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b41e:	9801      	ldr	r0, [sp, #4]
 800b420:	e00c      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b422:	4a75      	ldr	r2, [pc, #468]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b424:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b426:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800b42a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b42e:	d06e      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b430:	d937      	bls.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b432:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b436:	f040 8087 	bne.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b43a:	4871      	ldr	r0, [pc, #452]	; (800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800b43c:	b005      	add	sp, #20
 800b43e:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b442:	4b6d      	ldr	r3, [pc, #436]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b446:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d8d8      	bhi.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b4f7 	.word	0x0800b4f7
 800b458:	0800b4d3 	.word	0x0800b4d3
 800b45c:	0800b4e3 	.word	0x0800b4e3
 800b460:	0800b43b 	.word	0x0800b43b
 800b464:	0800b4df 	.word	0x0800b4df
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b468:	4a63      	ldr	r2, [pc, #396]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b46a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b46c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800b470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b474:	d04b      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b476:	d944      	bls.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800b478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b47c:	d0dd      	beq.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b47e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b482:	d1bd      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b484:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b486:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b48c:	0752      	lsls	r2, r2, #29
 800b48e:	d5a8      	bpl.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1a6      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b494:	4b58      	ldr	r3, [pc, #352]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b496:	485b      	ldr	r0, [pc, #364]	; (800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b49e:	40d8      	lsrs	r0, r3
 800b4a0:	e7cc      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d154      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4a6:	6810      	ldr	r0, [r2, #0]
 800b4a8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b4ac:	d0c6      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4ae:	a801      	add	r0, sp, #4
 800b4b0:	f7ff fe90 	bl	800b1d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4b4:	9802      	ldr	r0, [sp, #8]
 800b4b6:	e7c1      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b4b8:	4a4f      	ldr	r2, [pc, #316]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b4ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b4bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800b4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4c4:	f000 80d0 	beq.w	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800b4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4cc:	d0da      	beq.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d196      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4d2:	4b49      	ldr	r3, [pc, #292]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b4d4:	6818      	ldr	r0, [r3, #0]
 800b4d6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b4da:	d0af      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b4dc:	e79c      	b.n	800b418 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4de:	4a46      	ldr	r2, [pc, #280]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b4e0:	e776      	b.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4e2:	4b45      	ldr	r3, [pc, #276]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b4ea:	d0a7      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ec:	a801      	add	r0, sp, #4
 800b4ee:	f7ff fdc5 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4f2:	9801      	ldr	r0, [sp, #4]
 800b4f4:	e7a2      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4f6:	4b40      	ldr	r3, [pc, #256]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800b4fe:	d09d      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b500:	e7d5      	b.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0cf      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b506:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b50a:	d081      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b50c:	e778      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b50e:	6810      	ldr	r0, [r2, #0]
 800b510:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b514:	d092      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b516:	e7e9      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b518:	4a37      	ldr	r2, [pc, #220]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b51a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b51c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800b520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b524:	d0f3      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800b526:	d806      	bhi.n	800b536 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0bc      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b52c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b530:	f43f af6e 	beq.w	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b534:	e764      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b536:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b53a:	f43f af7e 	beq.w	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800b53e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b542:	f43f af45 	beq.w	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800b546:	e75b      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800b548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b54c:	d09a      	beq.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800b54e:	e757      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800b550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b554:	f43f af5c 	beq.w	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b558:	e752      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b55a:	6810      	ldr	r0, [r2, #0]
 800b55c:	f010 0004 	ands.w	r0, r0, #4
 800b560:	f43f af6c 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b564:	6813      	ldr	r3, [r2, #0]
 800b566:	4827      	ldr	r0, [pc, #156]	; (800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800b568:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b56c:	40d8      	lsrs	r0, r3
 800b56e:	e765      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b570:	4b21      	ldr	r3, [pc, #132]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800b574:	03d2      	lsls	r2, r2, #15
 800b576:	d5bf      	bpl.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b578:	6818      	ldr	r0, [r3, #0]
 800b57a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b57e:	f43f af5d 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b582:	a801      	add	r0, sp, #4
 800b584:	f7ff fcce 	bl	800af24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b588:	9803      	ldr	r0, [sp, #12]
 800b58a:	e757      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b58c:	4a1a      	ldr	r2, [pc, #104]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b58e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b590:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800b594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b598:	d0df      	beq.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800b59a:	d810      	bhi.n	800b5be <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800b59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a0:	d058      	beq.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a6:	d118      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5a8:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b5b0:	f43f af44 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5b4:	a801      	add	r0, sp, #4
 800b5b6:	f7ff fd61 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5ba:	9802      	ldr	r0, [sp, #8]
 800b5bc:	e73e      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b5be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5c2:	d012      	beq.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800b5c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5c8:	f47f af1a 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	; (800b5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800b5d4:	f43f af32 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b5d8:	e6eb      	b.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f47f af10 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800b5e0:	b005      	add	sp, #20
 800b5e2:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800b5e6:	f7fe bd47 	b.w	800a078 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b5ea:	6810      	ldr	r0, [r2, #0]
 800b5ec:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b5f0:	f43f af24 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800b5f4:	4804      	ldr	r0, [pc, #16]	; (800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800b5f6:	e721      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	017d7840 	.word	0x017d7840
 800b600:	00bb8000 	.word	0x00bb8000
 800b604:	03d09000 	.word	0x03d09000
 800b608:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b60c:	4b28      	ldr	r3, [pc, #160]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b610:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800b614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b618:	d037      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800b61a:	d814      	bhi.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800b61c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b620:	d03f      	beq.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b626:	d0bf      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f47f aee9 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b62e:	f7fe fce3 	bl	8009ff8 <HAL_RCC_GetHCLKFreq>
 800b632:	4b1f      	ldr	r3, [pc, #124]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b634:	4a1f      	ldr	r2, [pc, #124]	; (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b63c:	5cd3      	ldrb	r3, [r2, r3]
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	40d8      	lsrs	r0, r3
        break;
 800b644:	e6fa      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800b646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64a:	d017      	beq.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800b64c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b650:	d0bc      	beq.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800b652:	e6d5      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b654:	6810      	ldr	r0, [r2, #0]
 800b656:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b65a:	f43f aeef 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b65e:	a801      	add	r0, sp, #4
 800b660:	f7ff fc60 	bl	800af24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b664:	9802      	ldr	r0, [sp, #8]
 800b666:	e6e9      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b668:	6810      	ldr	r0, [r2, #0]
 800b66a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800b66e:	f43f aee5 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b672:	a801      	add	r0, sp, #4
 800b674:	f7ff fd02 	bl	800b07c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b678:	9803      	ldr	r0, [sp, #12]
 800b67a:	e6df      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b67c:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800b684:	f43f aeda 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b688:	e7b4      	b.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b68a:	4b09      	ldr	r3, [pc, #36]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	f010 0004 	ands.w	r0, r0, #4
 800b692:	f43f aed3 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4807      	ldr	r0, [pc, #28]	; (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800b69a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b69e:	40d8      	lsrs	r0, r3
 800b6a0:	e6cc      	b.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6a2:	4b03      	ldr	r3, [pc, #12]	; (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800b6aa:	f43f aec7 	beq.w	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b6ae:	e7d6      	b.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	0801b59c 	.word	0x0801b59c
 800b6b8:	03d09000 	.word	0x03d09000

0800b6bc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d03c      	beq.n	800b73a <HAL_RNG_Init+0x7e>
{
 800b6c0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b6c2:	7a43      	ldrb	r3, [r0, #9]
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d031      	beq.n	800b732 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b6ce:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b6d0:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b6d2:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800b6d4:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	f023 0320 	bic.w	r3, r3, #32
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b6e0:	6822      	ldr	r2, [r4, #0]
 800b6e2:	6813      	ldr	r3, [r2, #0]
 800b6e4:	f043 0304 	orr.w	r3, r3, #4
 800b6e8:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	0658      	lsls	r0, r3, #25
 800b6f0:	d503      	bpl.n	800b6fa <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b6f2:	2304      	movs	r3, #4
    return HAL_ERROR;
 800b6f4:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800b6f6:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800b6f8:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800b6fa:	f7fb fa71 	bl	8006be0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b6fe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b700:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	0759      	lsls	r1, r3, #29
 800b706:	d50e      	bpl.n	800b726 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b708:	f7fb fa6a 	bl	8006be0 <HAL_GetTick>
 800b70c:	1b43      	subs	r3, r0, r5
 800b70e:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b710:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b712:	d9f6      	bls.n	800b702 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	0752      	lsls	r2, r2, #29
 800b718:	d5f3      	bpl.n	800b702 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800b71a:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b71c:	2302      	movs	r3, #2
        return HAL_ERROR;
 800b71e:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800b720:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b722:	60e3      	str	r3, [r4, #12]
}
 800b724:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b726:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800b728:	2201      	movs	r2, #1
  return HAL_OK;
 800b72a:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800b72c:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b72e:	60e3      	str	r3, [r4, #12]
}
 800b730:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800b732:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800b734:	f7fa fd8c 	bl	8006250 <HAL_RNG_MspInit>
 800b738:	e7c9      	b.n	800b6ce <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800b73a:	2001      	movs	r0, #1
}
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop

0800b740 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b742:	7a03      	ldrb	r3, [r0, #8]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d027      	beq.n	800b798 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b748:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800b74a:	2201      	movs	r2, #1
 800b74c:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800b74e:	4293      	cmp	r3, r2
 800b750:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800b752:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800b754:	d006      	beq.n	800b764 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b756:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800b758:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b75a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b75c:	2300      	movs	r3, #0
 800b75e:	7223      	strb	r3, [r4, #8]

  return status;
}
 800b760:	4630      	mov	r0, r6
 800b762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800b764:	2302      	movs	r3, #2
 800b766:	460d      	mov	r5, r1
 800b768:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800b76a:	f7fb fa39 	bl	8006be0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b76e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800b770:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	07d2      	lsls	r2, r2, #31
 800b776:	d412      	bmi.n	800b79e <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b778:	f7fb fa32 	bl	8006be0 <HAL_GetTick>
 800b77c:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b77e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b780:	2802      	cmp	r0, #2
 800b782:	d9f6      	bls.n	800b772 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	f012 0201 	ands.w	r2, r2, #1
 800b78a:	d1f2      	bne.n	800b772 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800b78c:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b78e:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800b790:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800b792:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b794:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800b796:	e7e3      	b.n	800b760 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800b798:	2602      	movs	r6, #2
}
 800b79a:	4630      	mov	r0, r6
 800b79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800b79e:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800b7a0:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800b7a2:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800b7a4:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800b7a6:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800b7a8:	7262      	strb	r2, [r4, #9]
 800b7aa:	e7d7      	b.n	800b75c <HAL_RNG_GenerateRandomNumber+0x1c>

0800b7ac <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b7ae:	4ba6      	ldr	r3, [pc, #664]	; (800ba48 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800b7b0:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b7b2:	6802      	ldr	r2, [r0, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d01c      	beq.n	800b7f2 <HAL_SAI_Init.part.0+0x46>
 800b7b8:	3320      	adds	r3, #32
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d019      	beq.n	800b7f2 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b7be:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d04d      	beq.n	800b862 <HAL_SAI_Init.part.0+0xb6>
 800b7c6:	3320      	adds	r3, #32
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d04a      	beq.n	800b862 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b7cc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	f000 8134 	beq.w	800ba3e <HAL_SAI_Init.part.0+0x292>
 800b7d6:	3320      	adds	r3, #32
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	f000 8130 	beq.w	800ba3e <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b7de:	4b9b      	ldr	r3, [pc, #620]	; (800ba4c <HAL_SAI_Init.part.0+0x2a0>)
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	f000 812e 	beq.w	800ba42 <HAL_SAI_Init.part.0+0x296>
 800b7e6:	3320      	adds	r3, #32
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	f000 812a 	beq.w	800ba42 <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b7ee:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800b7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800b7f2:	4e97      	ldr	r6, [pc, #604]	; (800ba50 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800b7f4:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b7f8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d037      	beq.n	800b870 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b800:	4b94      	ldr	r3, [pc, #592]	; (800ba54 <HAL_SAI_Init.part.0+0x2a8>)
 800b802:	4995      	ldr	r1, [pc, #596]	; (800ba58 <HAL_SAI_Init.part.0+0x2ac>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b80a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b80c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800b80e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b812:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800b814:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b816:	2b00      	cmp	r3, #0
 800b818:	d031      	beq.n	800b87e <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b81a:	6822      	ldr	r2, [r4, #0]
    count--;
 800b81c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b81e:	6815      	ldr	r5, [r2, #0]
 800b820:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 800b824:	d1f7      	bne.n	800b816 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800b826:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800b828:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800b82a:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800b82c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800b830:	f000 8156 	beq.w	800bae0 <HAL_SAI_Init.part.0+0x334>
 800b834:	4293      	cmp	r3, r2
 800b836:	bf19      	ittee	ne
 800b838:	4610      	movne	r0, r2
 800b83a:	2103      	movne	r1, #3
 800b83c:	2123      	moveq	r1, #35	; 0x23
 800b83e:	2022      	moveq	r0, #34	; 0x22
 800b840:	bf15      	itete	ne
 800b842:	2701      	movne	r7, #1
 800b844:	2721      	moveq	r7, #33	; 0x21
 800b846:	2200      	movne	r2, #0
 800b848:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	3b01      	subs	r3, #1
 800b84e:	2b04      	cmp	r3, #4
 800b850:	f200 8181 	bhi.w	800bb56 <HAL_SAI_Init.part.0+0x3aa>
 800b854:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b858:	001c00e8 	.word	0x001c00e8
 800b85c:	001b00ef 	.word	0x001b00ef
 800b860:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 800b862:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800b866:	4e7d      	ldr	r6, [pc, #500]	; (800ba5c <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800b868:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d1c7      	bne.n	800b800 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800b870:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 800b872:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800b876:	f7fa fd53 	bl	8006320 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800b87a:	6822      	ldr	r2, [r4, #0]
 800b87c:	e7c0      	b.n	800b800 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b87e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800b882:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b888:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800b88e:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b890:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b894:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b896:	6a23      	ldr	r3, [r4, #32]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d04a      	beq.n	800b932 <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	4a6a      	ldr	r2, [pc, #424]	; (800ba48 <HAL_SAI_Init.part.0+0x29c>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	f000 8131 	beq.w	800bb08 <HAL_SAI_Init.part.0+0x35c>
 800b8a6:	486e      	ldr	r0, [pc, #440]	; (800ba60 <HAL_SAI_Init.part.0+0x2b4>)
 800b8a8:	1a18      	subs	r0, r3, r0
 800b8aa:	fab0 f080 	clz	r0, r0
 800b8ae:	0940      	lsrs	r0, r0, #5
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	f040 8129 	bne.w	800bb08 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b8b6:	4a6b      	ldr	r2, [pc, #428]	; (800ba64 <HAL_SAI_Init.part.0+0x2b8>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	f000 8133 	beq.w	800bb24 <HAL_SAI_Init.part.0+0x378>
 800b8be:	3220      	adds	r2, #32
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	f000 812f 	beq.w	800bb24 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800b8c6:	4a68      	ldr	r2, [pc, #416]	; (800ba68 <HAL_SAI_Init.part.0+0x2bc>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	f000 8124 	beq.w	800bb16 <HAL_SAI_Init.part.0+0x36a>
 800b8ce:	3220      	adds	r2, #32
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	f000 8120 	beq.w	800bb16 <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
 800b8d6:	4a5d      	ldr	r2, [pc, #372]	; (800ba4c <HAL_SAI_Init.part.0+0x2a0>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	f000 8133 	beq.w	800bb44 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
 800b8de:	4a63      	ldr	r2, [pc, #396]	; (800ba6c <HAL_SAI_Init.part.0+0x2c0>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	f000 8129 	beq.w	800bb38 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b8e6:	69a3      	ldr	r3, [r4, #24]
 800b8e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b8ec:	f000 80fd 	beq.w	800baea <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b8f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b8f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b8f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b8f8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b8fc:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800b900:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b902:	bf0c      	ite	eq
 800b904:	2202      	moveq	r2, #2
 800b906:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b908:	fb00 f202 	mul.w	r2, r0, r2
 800b90c:	0212      	lsls	r2, r2, #8
 800b90e:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800b912:	4a57      	ldr	r2, [pc, #348]	; (800ba70 <HAL_SAI_Init.part.0+0x2c4>)
 800b914:	fba2 0203 	umull	r0, r2, r2, r3
 800b918:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800b91a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800b91e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800b922:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800b924:	bf08      	it	eq
 800b926:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b928:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800b92a:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b92c:	d101      	bne.n	800b932 <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b92e:	0852      	lsrs	r2, r2, #1
 800b930:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b932:	6863      	ldr	r3, [r4, #4]
 800b934:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b938:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b93a:	f040 80cc 	bne.w	800bad6 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b93e:	2b01      	cmp	r3, #1
 800b940:	bf14      	ite	ne
 800b942:	f44f 7500 	movne.w	r5, #512	; 0x200
 800b946:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b948:	f7fb f962 	bl	8006c10 <HAL_GetREVID>
 800b94c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b950:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800b952:	f0c0 80ac 	bcc.w	800baae <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b956:	6811      	ldr	r1, [r2, #0]
 800b958:	4b46      	ldr	r3, [pc, #280]	; (800ba74 <HAL_SAI_Init.part.0+0x2c8>)
 800b95a:	400b      	ands	r3, r1
 800b95c:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b95e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b960:	e9d4 1300 	ldrd	r1, r3, [r4]
 800b964:	431a      	orrs	r2, r3
 800b966:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b968:	431a      	orrs	r2, r3
 800b96a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b96c:	431a      	orrs	r2, r3
 800b96e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b970:	431a      	orrs	r2, r3
 800b972:	6963      	ldr	r3, [r4, #20]
 800b974:	431a      	orrs	r2, r3
 800b976:	69a3      	ldr	r3, [r4, #24]
 800b978:	431a      	orrs	r2, r3
 800b97a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b97c:	431a      	orrs	r2, r3
 800b97e:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b980:	431a      	orrs	r2, r3
 800b982:	680b      	ldr	r3, [r1, #0]
 800b984:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b986:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b988:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b98c:	4b3a      	ldr	r3, [pc, #232]	; (800ba78 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b98e:	433a      	orrs	r2, r7
 800b990:	432a      	orrs	r2, r5
 800b992:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b994:	6822      	ldr	r2, [r4, #0]
 800b996:	6851      	ldr	r1, [r2, #4]
 800b998:	400b      	ands	r3, r1
 800b99a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b99c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b99e:	69e3      	ldr	r3, [r4, #28]
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9a6:	430b      	orrs	r3, r1
 800b9a8:	6851      	ldr	r1, [r2, #4]
 800b9aa:	430b      	orrs	r3, r1
 800b9ac:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b9ae:	6822      	ldr	r2, [r4, #0]
 800b9b0:	4b32      	ldr	r3, [pc, #200]	; (800ba7c <HAL_SAI_Init.part.0+0x2d0>)
 800b9b2:	6891      	ldr	r1, [r2, #8]
 800b9b4:	400b      	ands	r3, r1
 800b9b6:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b9b8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b9ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9bc:	6821      	ldr	r1, [r4, #0]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b9c2:	6888      	ldr	r0, [r1, #8]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800b9c8:	4303      	orrs	r3, r0
 800b9ca:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b9cc:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b9d0:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b9d2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800b9d4:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b9d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b9da:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b9dc:	6822      	ldr	r2, [r4, #0]
 800b9de:	68d3      	ldr	r3, [r2, #12]
 800b9e0:	4003      	ands	r3, r0
 800b9e2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b9e4:	6821      	ldr	r1, [r4, #0]
 800b9e6:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 800b9ea:	68ca      	ldr	r2, [r1, #12]
 800b9ec:	4303      	orrs	r3, r0
 800b9ee:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b9f0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b9f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b9f6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b9f8:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b9fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b9fe:	4a12      	ldr	r2, [pc, #72]	; (800ba48 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ba00:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d03f      	beq.n	800ba88 <HAL_SAI_Init.part.0+0x2dc>
 800ba08:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800ba0c:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d039      	beq.n	800ba88 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ba14:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800ba16:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ba18:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800ba1c:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800ba1e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800ba22:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800ba28:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800ba2c:	e732      	b.n	800b894 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800ba2e:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ba30:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800ba34:	e72e      	b.n	800b894 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ba36:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ba38:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800ba3c:	e72a      	b.n	800b894 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800ba3e:	4e10      	ldr	r6, [pc, #64]	; (800ba80 <HAL_SAI_Init.part.0+0x2d4>)
 800ba40:	e6d8      	b.n	800b7f4 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800ba42:	4e10      	ldr	r6, [pc, #64]	; (800ba84 <HAL_SAI_Init.part.0+0x2d8>)
 800ba44:	e6d6      	b.n	800b7f4 <HAL_SAI_Init.part.0+0x48>
 800ba46:	bf00      	nop
 800ba48:	40015804 	.word	0x40015804
 800ba4c:	58005404 	.word	0x58005404
 800ba50:	40015800 	.word	0x40015800
 800ba54:	20000094 	.word	0x20000094
 800ba58:	95cbec1b 	.word	0x95cbec1b
 800ba5c:	40015c00 	.word	0x40015c00
 800ba60:	40015824 	.word	0x40015824
 800ba64:	40015c04 	.word	0x40015c04
 800ba68:	40016004 	.word	0x40016004
 800ba6c:	58005424 	.word	0x58005424
 800ba70:	cccccccd 	.word	0xcccccccd
 800ba74:	f005c010 	.word	0xf005c010
 800ba78:	ffff1ff0 	.word	0xffff1ff0
 800ba7c:	fff88000 	.word	0xfff88000
 800ba80:	40016000 	.word	0x40016000
 800ba84:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ba88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ba8a:	f023 0301 	bic.w	r3, r3, #1
 800ba8e:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ba90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d1bd      	bne.n	800ba14 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ba98:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ba9c:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ba9e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800baa2:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800baa4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	6473      	str	r3, [r6, #68]	; 0x44
 800baac:	e7b2      	b.n	800ba14 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800baae:	6811      	ldr	r1, [r2, #0]
 800bab0:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <HAL_SAI_Init.part.0+0x3b0>)
 800bab2:	400b      	ands	r3, r1
 800bab4:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bab6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bab8:	e9d4 1300 	ldrd	r1, r3, [r4]
 800babc:	431a      	orrs	r2, r3
 800babe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800bac0:	431a      	orrs	r2, r3
 800bac2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800bac4:	431a      	orrs	r2, r3
 800bac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bac8:	431a      	orrs	r2, r3
 800baca:	6963      	ldr	r3, [r4, #20]
 800bacc:	431a      	orrs	r2, r3
 800bace:	69a3      	ldr	r3, [r4, #24]
 800bad0:	431a      	orrs	r2, r3
 800bad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bad4:	e754      	b.n	800b980 <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	bf08      	it	eq
 800bada:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800bade:	e733      	b.n	800b948 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800bae0:	2113      	movs	r1, #19
 800bae2:	2012      	movs	r0, #18
 800bae4:	2711      	movs	r7, #17
 800bae6:	2210      	movs	r2, #16
 800bae8:	e6af      	b.n	800b84a <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800baea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800baec:	2904      	cmp	r1, #4
 800baee:	d030      	beq.n	800bb52 <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800baf0:	2908      	cmp	r1, #8
 800baf2:	d01e      	beq.n	800bb32 <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
 800baf4:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800baf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bafa:	0043      	lsls	r3, r0, #1
 800bafc:	6a20      	ldr	r0, [r4, #32]
 800bafe:	fb00 f202 	mul.w	r2, r0, r2
 800bb02:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb06:	e704      	b.n	800b912 <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bb08:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	f7ff fc0d 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	e6cf      	b.n	800b8b6 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800bb16:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	f7ff fc06 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800bb20:	6823      	ldr	r3, [r4, #0]
 800bb22:	e6d8      	b.n	800b8d6 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bb24:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb28:	2100      	movs	r1, #0
 800bb2a:	f7ff fbff 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	e6c9      	b.n	800b8c6 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800bb32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb36:	e7de      	b.n	800baf6 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800bb38:	2100      	movs	r1, #0
 800bb3a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bb3e:	f7ff fbf5 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
 800bb42:	e6d0      	b.n	800b8e6 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800bb44:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb48:	2100      	movs	r1, #0
 800bb4a:	f7ff fbef 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	e6c5      	b.n	800b8de <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800bb52:	2240      	movs	r2, #64	; 0x40
 800bb54:	e7cf      	b.n	800baf6 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 800bb56:	2700      	movs	r7, #0
 800bb58:	e69c      	b.n	800b894 <HAL_SAI_Init.part.0+0xe8>
 800bb5a:	bf00      	nop
 800bb5c:	f805c010 	.word	0xf805c010

0800bb60 <HAL_SAI_InitProtocol>:
  switch (protocol)
 800bb60:	2902      	cmp	r1, #2
{
 800bb62:	b538      	push	{r3, r4, r5, lr}
 800bb64:	4604      	mov	r4, r0
  switch (protocol)
 800bb66:	d935      	bls.n	800bbd4 <HAL_SAI_InitProtocol+0x74>
 800bb68:	1ec8      	subs	r0, r1, #3
 800bb6a:	2801      	cmp	r0, #1
 800bb6c:	d830      	bhi.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bb6e:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800bb70:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bb72:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bb74:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800bb76:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800bb78:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bb7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bb7e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bb80:	6860      	ldr	r0, [r4, #4]
 800bb82:	f030 0002 	bics.w	r0, r0, #2
 800bb86:	bf0c      	ite	eq
 800bb88:	2501      	moveq	r5, #1
 800bb8a:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800bb8c:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bb8e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800bb92:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800bb94:	bf0c      	ite	eq
 800bb96:	2001      	moveq	r0, #1
 800bb98:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800bb9a:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800bb9c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800bba0:	65a0      	str	r0, [r4, #88]	; 0x58
 800bba2:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800bba4:	2a03      	cmp	r2, #3
 800bba6:	d813      	bhi.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
 800bba8:	e8df f002 	tbb	[pc, r2]
 800bbac:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	4a47      	ldr	r2, [pc, #284]	; (800bcd0 <HAL_SAI_InitProtocol+0x170>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d005      	beq.n	800bbc4 <HAL_SAI_InitProtocol+0x64>
 800bbb8:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800bbbc:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d105      	bne.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
 800bbc4:	6863      	ldr	r3, [r4, #4]
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d102      	bne.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bbca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d037      	beq.n	800bc40 <HAL_SAI_InitProtocol+0xe0>
}
 800bbd0:	2001      	movs	r0, #1
 800bbd2:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bbd4:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800bbd6:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800bbd8:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800bbda:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800bbdc:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bbde:	6860      	ldr	r0, [r4, #4]
 800bbe0:	f030 0002 	bics.w	r0, r0, #2
 800bbe4:	bf14      	ite	ne
 800bbe6:	2001      	movne	r0, #1
 800bbe8:	2000      	moveq	r0, #0
 800bbea:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800bbec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bbf0:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800bbf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bbf6:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800bbf8:	f013 0001 	ands.w	r0, r3, #1
 800bbfc:	d1e8      	bne.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800bbfe:	b949      	cbnz	r1, 800bc14 <HAL_SAI_InitProtocol+0xb4>
 800bc00:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bc04:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800bc08:	2a03      	cmp	r2, #3
 800bc0a:	d8e1      	bhi.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
 800bc0c:	e8df f002 	tbb	[pc, r2]
 800bc10:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800bc14:	6660      	str	r0, [r4, #100]	; 0x64
 800bc16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bc1a:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800bc1c:	2a03      	cmp	r2, #3
 800bc1e:	d8d7      	bhi.n	800bbd0 <HAL_SAI_InitProtocol+0x70>
 800bc20:	e8df f002 	tbb	[pc, r2]
 800bc24:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc28:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bc2a:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bc2c:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc2e:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800bc30:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bc32:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bc34:	f7fa ffec 	bl	8006c10 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800bc38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d0b7      	beq.n	800bbb0 <HAL_SAI_InitProtocol+0x50>
 800bc40:	4620      	mov	r0, r4
}
 800bc42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc46:	f7ff bdb1 	b.w	800b7ac <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc4a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bc4c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc4e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bc50:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc52:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800bc54:	e7ee      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bc56:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bc58:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc5a:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bc5c:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800bc5e:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc60:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800bc62:	e7e7      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bc64:	21e0      	movs	r1, #224	; 0xe0
 800bc66:	e7f7      	b.n	800bc58 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc68:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bc6a:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc6c:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc6e:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800bc70:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc72:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc74:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc76:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bc7a:	e7db      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc7c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bc7e:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc80:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bc82:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc84:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800bc88:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc8a:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bc8e:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc90:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bc92:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bc94:	d1ce      	bne.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800bc96:	2308      	movs	r3, #8
 800bc98:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800bc9a:	e7cb      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bc9c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bc9e:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bca0:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800bca2:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bca6:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bca8:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800bcac:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800bcae:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bcb2:	d1bf      	bne.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800bcb8:	e7bc      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bcba:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bcbc:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bcbe:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800bcc0:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800bcc2:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bcc4:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800bcc6:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800bcc8:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800bccc:	e7b2      	b.n	800bc34 <HAL_SAI_InitProtocol+0xd4>
 800bcce:	bf00      	nop
 800bcd0:	40015804 	.word	0x40015804

0800bcd4 <HAL_SAI_Transmit_DMA>:
{
 800bcd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd8:	460f      	mov	r7, r1
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800bcde:	f7fa ff7f 	bl	8006be0 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800bce2:	2f00      	cmp	r7, #0
 800bce4:	d06b      	beq.n	800bdbe <HAL_SAI_Transmit_DMA+0xea>
 800bce6:	fab5 f885 	clz	r8, r5
 800bcea:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800bcee:	2d00      	cmp	r5, #0
 800bcf0:	d065      	beq.n	800bdbe <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 800bcf2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	fa5f f983 	uxtb.w	r9, r3
 800bcfc:	d15a      	bne.n	800bdb4 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800bcfe:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d056      	beq.n	800bdb4 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800bd06:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bd08:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bd0c:	4a3c      	ldr	r2, [pc, #240]	; (800be00 <HAL_SAI_Transmit_DMA+0x12c>)
 800bd0e:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 800bd10:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 800bd14:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 800bd16:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800bd1a:	f365 431f 	bfi	r3, r5, #16, #16
 800bd1e:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bd20:	2312      	movs	r3, #18
 800bd22:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bd26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bd2a:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800bd2c:	4a35      	ldr	r2, [pc, #212]	; (800be04 <HAL_SAI_Transmit_DMA+0x130>)
 800bd2e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bd32:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800bd34:	4a34      	ldr	r2, [pc, #208]	; (800be08 <HAL_SAI_Transmit_DMA+0x134>)
 800bd36:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bd3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800bd3c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800bd40:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800bd44:	6822      	ldr	r2, [r4, #0]
 800bd46:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800bd4a:	321c      	adds	r2, #28
 800bd4c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800bd4e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800bd52:	f7fb fb6d 	bl	8007430 <HAL_DMA_Start_IT>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d13f      	bne.n	800bdda <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bd5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bd5c:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bd5e:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bd60:	d032      	beq.n	800bdc8 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bd62:	2205      	movs	r2, #5
 800bd64:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bd66:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	bf98      	it	ls
 800bd6c:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bd6e:	6821      	ldr	r1, [r4, #0]
 800bd70:	690b      	ldr	r3, [r1, #16]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	6813      	ldr	r3, [r2, #0]
 800bd7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd7e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bd80:	e005      	b.n	800bd8e <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bd82:	f7fa ff2d 	bl	8006be0 <HAL_GetTick>
 800bd86:	1b83      	subs	r3, r0, r6
 800bd88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd8c:	d82a      	bhi.n	800bde4 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	6955      	ldr	r5, [r2, #20]
 800bd92:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800bd96:	d0f4      	beq.n	800bd82 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bd98:	6813      	ldr	r3, [r2, #0]
 800bd9a:	03db      	lsls	r3, r3, #15
 800bd9c:	d403      	bmi.n	800bda6 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800bd9e:	6813      	ldr	r3, [r2, #0]
 800bda0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bda4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800bda6:	2300      	movs	r3, #0
    return HAL_OK;
 800bda8:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 800bdaa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800bdae:	4648      	mov	r0, r9
 800bdb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800bdb4:	f04f 0902 	mov.w	r9, #2
}
 800bdb8:	4648      	mov	r0, r9
 800bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800bdbe:	f04f 0901 	mov.w	r9, #1
}
 800bdc2:	4648      	mov	r0, r9
 800bdc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bdc8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bdcc:	2a01      	cmp	r2, #1
 800bdce:	bf0b      	itete	eq
 800bdd0:	2215      	moveq	r2, #21
 800bdd2:	2205      	movne	r2, #5
 800bdd4:	2171      	moveq	r1, #113	; 0x71
 800bdd6:	2161      	movne	r1, #97	; 0x61
 800bdd8:	e7c5      	b.n	800bd66 <HAL_SAI_Transmit_DMA+0x92>
}
 800bdda:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 800bddc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 800bde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bde4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800bde8:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 800bdec:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bdf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800bdf4:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bdf6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800bdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdfe:	bf00      	nop
 800be00:	0800be71 	.word	0x0800be71
 800be04:	0800be0d 	.word	0x0800be0d
 800be08:	0800be7d 	.word	0x0800be7d

0800be0c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800be0c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be0e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be10:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be16:	d01b      	beq.n	800be50 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800be18:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800be1a:	2300      	movs	r3, #0
 800be1c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800be20:	6813      	ldr	r3, [r2, #0]
 800be22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be26:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800be28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800be2a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800be2c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800be2e:	d012      	beq.n	800be56 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800be30:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800be34:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800be38:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800be3a:	3b02      	subs	r3, #2
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	bf98      	it	ls
 800be40:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800be42:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800be44:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800be48:	4013      	ands	r3, r2
 800be4a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800be4c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800be50:	f7f7 fe50 	bl	8003af4 <HAL_SAI_TxCpltCallback>
#endif
}
 800be54:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800be56:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800be5a:	2a01      	cmp	r2, #1
 800be5c:	bf0b      	itete	eq
 800be5e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800be62:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800be66:	f06f 0215 	mvneq.w	r2, #21
 800be6a:	f06f 0205 	mvnne.w	r2, #5
 800be6e:	e7e3      	b.n	800be38 <SAI_DMATxCplt+0x2c>

0800be70 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be70:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800be72:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800be74:	f7f7 fe48 	bl	8003b08 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800be78:	bd08      	pop	{r3, pc}
 800be7a:	bf00      	nop

0800be7c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800be7c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be7e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800be80:	f7fc fb3a 	bl	80084f8 <HAL_DMA_GetError>
 800be84:	2802      	cmp	r0, #2
 800be86:	d025      	beq.n	800bed4 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800be88:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800be8c:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800be8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800be92:	4b14      	ldr	r3, [pc, #80]	; (800bee4 <SAI_DMAError+0x68>)
 800be94:	4814      	ldr	r0, [pc, #80]	; (800bee8 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800be96:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800be9a:	680a      	ldr	r2, [r1, #0]
 800be9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bea0:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bea2:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800bea4:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800bea6:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 800beaa:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800beac:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800beae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800beb2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800beb4:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800beb6:	b173      	cbz	r3, 800bed6 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800beb8:	6822      	ldr	r2, [r4, #0]
    count--;
 800beba:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800bebc:	6812      	ldr	r2, [r2, #0]
 800bebe:	03d2      	lsls	r2, r2, #15
 800bec0:	d4f9      	bmi.n	800beb6 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800bec2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800bec4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800bec6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800bec8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800becc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800bed0:	f7f7 fe22 	bl	8003b18 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800bed4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bed6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800beda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bede:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800bee2:	e7ee      	b.n	800bec2 <SAI_DMAError+0x46>
 800bee4:	20000094 	.word	0x20000094
 800bee8:	95cbec1b 	.word	0x95cbec1b

0800beec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800beec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	4605      	mov	r5, r0
 800bef2:	b086      	sub	sp, #24
 800bef4:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bef6:	f7fa fe73 	bl	8006be0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800befa:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800befc:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800befe:	6828      	ldr	r0, [r5, #0]
 800bf00:	f001 fd36 	bl	800d970 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf04:	4604      	mov	r4, r0
 800bf06:	b118      	cbz	r0, 800bf10 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800bf08:	4620      	mov	r0, r4
 800bf0a:	b006      	add	sp, #24
 800bf0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bf10:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800bf12:	6828      	ldr	r0, [r5, #0]
 800bf14:	0409      	lsls	r1, r1, #16
 800bf16:	f002 fa85 	bl	800e424 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d1f3      	bne.n	800bf08 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf24:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf26:	4669      	mov	r1, sp
 800bf28:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf2a:	e9cd 2300 	strd	r2, r3, [sp]
 800bf2e:	2230      	movs	r2, #48	; 0x30
 800bf30:	2302      	movs	r3, #2
 800bf32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf36:	2200      	movs	r2, #0
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800bf3e:	f001 fd01 	bl	800d944 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bf42:	6828      	ldr	r0, [r5, #0]
 800bf44:	f002 fbf4 	bl	800e730 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bf48:	4604      	mov	r4, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d1dc      	bne.n	800bf08 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800bf4e:	4682      	mov	sl, r0
 800bf50:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bf52:	f240 582a 	movw	r8, #1322	; 0x52a
 800bf56:	e004      	b.n	800bf62 <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bf58:	f7fa fe42 	bl	8006be0 <HAL_GetTick>
 800bf5c:	1b83      	subs	r3, r0, r6
 800bf5e:	3301      	adds	r3, #1
 800bf60:	d024      	beq.n	800bfac <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bf62:	6828      	ldr	r0, [r5, #0]
 800bf64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf66:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bf6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800bf6c:	d10c      	bne.n	800bf88 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800bf6e:	0319      	lsls	r1, r3, #12
 800bf70:	d4f2      	bmi.n	800bf58 <SD_FindSCR+0x6c>
 800bf72:	2c00      	cmp	r4, #0
 800bf74:	d1f0      	bne.n	800bf58 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800bf76:	f001 fccb 	bl	800d910 <SDMMC_ReadFIFO>
 800bf7a:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bf7c:	6828      	ldr	r0, [r5, #0]
      index++;
 800bf7e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800bf80:	f001 fcc6 	bl	800d910 <SDMMC_ReadFIFO>
 800bf84:	4682      	mov	sl, r0
      index++;
 800bf86:	e7e7      	b.n	800bf58 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800bf88:	071a      	lsls	r2, r3, #28
 800bf8a:	d416      	bmi.n	800bfba <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800bf8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bf8e:	079b      	lsls	r3, r3, #30
 800bf90:	d40f      	bmi.n	800bfb2 <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800bf92:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bf94:	f014 0420 	ands.w	r4, r4, #32
 800bf98:	d113      	bne.n	800bfc2 <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf9a:	fa9a f28a 	rev.w	r2, sl
 800bf9e:	fa99 f389 	rev.w	r3, r9
 800bfa2:	490a      	ldr	r1, [pc, #40]	; (800bfcc <SD_FindSCR+0xe0>)
 800bfa4:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800bfa6:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800bfaa:	e7ad      	b.n	800bf08 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800bfac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bfb0:	e7aa      	b.n	800bf08 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bfb2:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bfb4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800bfb6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bfb8:	e7a6      	b.n	800bf08 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bfba:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bfbc:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800bfbe:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bfc0:	e7a2      	b.n	800bf08 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bfc2:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800bfc4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800bfc6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800bfc8:	e79e      	b.n	800bf08 <SD_FindSCR+0x1c>
 800bfca:	bf00      	nop
 800bfcc:	18000f3a 	.word	0x18000f3a

0800bfd0 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	b096      	sub	sp, #88	; 0x58
 800bfd8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800bfda:	f7fa fe01 	bl	8006be0 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfde:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800bfe0:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bfe2:	6820      	ldr	r0, [r4, #0]
 800bfe4:	f001 fcaa 	bl	800d93c <SDMMC_GetResponse>
 800bfe8:	0182      	lsls	r2, r0, #6
 800bfea:	d45c      	bmi.n	800c0a6 <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800bfec:	2140      	movs	r1, #64	; 0x40
 800bfee:	6820      	ldr	r0, [r4, #0]
 800bff0:	f001 fcbe 	bl	800d970 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800bff4:	4603      	mov	r3, r0
 800bff6:	b1e8      	cbz	r0, 800c034 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800bff8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bffa:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bffc:	6820      	ldr	r0, [r4, #0]
 800bffe:	4956      	ldr	r1, [pc, #344]	; (800c158 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 800c000:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c002:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800c004:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800c006:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c008:	4303      	orrs	r3, r0
 800c00a:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c00c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c010:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	f001 fcab 	bl	800d970 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c01a:	b138      	cbz	r0, 800c02c <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800c01c:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c01e:	6822      	ldr	r2, [r4, #0]
 800c020:	494d      	ldr	r1, [pc, #308]	; (800c158 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
 800c022:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c024:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800c026:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c028:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800c02c:	4630      	mov	r0, r6
 800c02e:	b016      	add	sp, #88	; 0x58
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c034:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	0409      	lsls	r1, r1, #16
 800c03a:	f002 f9f3 	bl	800e424 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c03e:	4603      	mov	r3, r0
 800c040:	2800      	cmp	r0, #0
 800c042:	d1d9      	bne.n	800bff8 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c048:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c04a:	4669      	mov	r1, sp
 800c04c:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c04e:	e9cd 2300 	strd	r2, r3, [sp]
 800c052:	2260      	movs	r2, #96	; 0x60
 800c054:	2302      	movs	r3, #2
 800c056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c05a:	2301      	movs	r3, #1
 800c05c:	2200      	movs	r2, #0
 800c05e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c062:	f001 fc6f 	bl	800d944 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	f002 fd86 	bl	800eb78 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c06c:	4603      	mov	r3, r0
 800c06e:	2800      	cmp	r0, #0
 800c070:	d1c2      	bne.n	800bff8 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 800c072:	ae06      	add	r6, sp, #24
 800c074:	e004      	b.n	800c080 <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c076:	f7fa fdb3 	bl	8006be0 <HAL_GetTick>
 800c07a:	1bc0      	subs	r0, r0, r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	d016      	beq.n	800c0ae <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c080:	6820      	ldr	r0, [r4, #0]
 800c082:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c084:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c088:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c08a:	d113      	bne.n	800c0b4 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800c08c:	041b      	lsls	r3, r3, #16
 800c08e:	d5f2      	bpl.n	800c076 <HAL_SD_GetCardStatus.part.0+0xa6>
 800c090:	f106 0820 	add.w	r8, r6, #32
 800c094:	e000      	b.n	800c098 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	f001 fc3a 	bl	800d910 <SDMMC_ReadFIFO>
 800c09c:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800c0a0:	4546      	cmp	r6, r8
 800c0a2:	d1f8      	bne.n	800c096 <HAL_SD_GetCardStatus.part.0+0xc6>
 800c0a4:	e7e7      	b.n	800c076 <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0a6:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c0a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c0ac:	e7a7      	b.n	800bffe <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800c0ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0b2:	e7a3      	b.n	800bffc <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c0b4:	0719      	lsls	r1, r3, #28
 800c0b6:	d448      	bmi.n	800c14a <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c0b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0ba:	079a      	lsls	r2, r3, #30
 800c0bc:	d447      	bmi.n	800c14e <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c0be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0c0:	069b      	lsls	r3, r3, #26
 800c0c2:	d50a      	bpl.n	800c0da <HAL_SD_GetCardStatus.part.0+0x10a>
 800c0c4:	e045      	b.n	800c152 <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800c0c6:	f001 fc23 	bl	800d910 <SDMMC_ReadFIFO>
 800c0ca:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c0ce:	f7fa fd87 	bl	8006be0 <HAL_GetTick>
 800c0d2:	1bc0      	subs	r0, r0, r7
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d0ea      	beq.n	800c0ae <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800c0d8:	6820      	ldr	r0, [r4, #0]
 800c0da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c0dc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800c0e0:	d1f1      	bne.n	800c0c6 <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0e2:	4a1e      	ldr	r2, [pc, #120]	; (800c15c <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 800c0e4:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c0e6:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0e8:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800c0ea:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800c0ee:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800c0f0:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800c0f4:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800c0f6:	0a1a      	lsrs	r2, r3, #8
 800c0f8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c0fc:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800c100:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800c104:	b292      	uxth	r2, r2
 800c106:	ba09      	rev	r1, r1
 800c108:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c10a:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800c10c:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800c10e:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c110:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c114:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800c118:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c11a:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c11e:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800c120:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800c122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c124:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c128:	b2d0      	uxtb	r0, r2
 800c12a:	4303      	orrs	r3, r0
 800c12c:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800c12e:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800c132:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800c134:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800c138:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c13a:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c13e:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800c142:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800c144:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800c146:	74a9      	strb	r1, [r5, #18]
 800c148:	e762      	b.n	800c010 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c14a:	2308      	movs	r3, #8
 800c14c:	e757      	b.n	800bffe <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c14e:	2302      	movs	r3, #2
 800c150:	e755      	b.n	800bffe <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800c152:	2320      	movs	r3, #32
 800c154:	e753      	b.n	800bffe <HAL_SD_GetCardStatus.part.0+0x2e>
 800c156:	bf00      	nop
 800c158:	1fe00fff 	.word	0x1fe00fff
 800c15c:	18000f3a 	.word	0x18000f3a

0800c160 <HAL_SD_ReadBlocks>:
{
 800c160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c164:	460d      	mov	r5, r1
 800c166:	b087      	sub	sp, #28
 800c168:	4604      	mov	r4, r0
 800c16a:	4692      	mov	sl, r2
 800c16c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800c16e:	f7fa fd37 	bl	8006be0 <HAL_GetTick>
  if (NULL == pData)
 800c172:	2d00      	cmp	r5, #0
 800c174:	f000 8093 	beq.w	800c29e <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 800c178:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	fa5f f983 	uxtb.w	r9, r3
 800c182:	d17b      	bne.n	800c27c <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c184:	eb0a 0307 	add.w	r3, sl, r7
 800c188:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c18a:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c18c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c18e:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c190:	f200 808f 	bhi.w	800c2b2 <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 800c194:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c196:	f04f 0b02 	mov.w	fp, #2
 800c19a:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800c19c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1a4:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1a8:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1aa:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c1ac:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c1b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800c1b8:	bf18      	it	ne
 800c1ba:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c1be:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c1c0:	027b      	lsls	r3, r7, #9
 800c1c2:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c1c4:	2390      	movs	r3, #144	; 0x90
 800c1c6:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c1ca:	f001 fbbb 	bl	800d944 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c1ce:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800c1d0:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c1d2:	68d3      	ldr	r3, [r2, #12]
 800c1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d8:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800c1da:	d959      	bls.n	800c290 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c1dc:	4651      	mov	r1, sl
 800c1de:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c1e0:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c1e4:	f001 fd10 	bl	800dc08 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d16a      	bne.n	800c2c2 <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 800c1ec:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c1f0:	e005      	b.n	800c1fe <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c1f2:	f7fa fcf5 	bl	8006be0 <HAL_GetTick>
 800c1f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1f8:	1b80      	subs	r0, r0, r6
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	d22c      	bcs.n	800c258 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c1fe:	6820      	ldr	r0, [r4, #0]
 800c200:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c202:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800c206:	d168      	bne.n	800c2da <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800c208:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c20a:	041a      	lsls	r2, r3, #16
 800c20c:	d5f1      	bpl.n	800c1f2 <HAL_SD_ReadBlocks+0x92>
 800c20e:	f1bb 0f1f 	cmp.w	fp, #31
 800c212:	d9ee      	bls.n	800c1f2 <HAL_SD_ReadBlocks+0x92>
 800c214:	f105 0804 	add.w	r8, r5, #4
 800c218:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800c21c:	e000      	b.n	800c220 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c21e:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 800c220:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c224:	f001 fb74 	bl	800d910 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c228:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c22c:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 800c22e:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c230:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c234:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c238:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c23c:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c240:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 800c244:	d1eb      	bne.n	800c21e <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c246:	f7fa fccb 	bl	8006be0 <HAL_GetTick>
 800c24a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c24c:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800c24e:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800c250:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c254:	4298      	cmp	r0, r3
 800c256:	d3d2      	bcc.n	800c1fe <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c258:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800c25a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c25e:	4842      	ldr	r0, [pc, #264]	; (800c368 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 800c260:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 800c262:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c264:	6398      	str	r0, [r3, #56]	; 0x38
}
 800c266:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c26a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c26e:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c270:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c274:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c276:	b007      	add	sp, #28
 800c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c27c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c27e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c282:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c286:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c288:	4648      	mov	r0, r9
 800c28a:	b007      	add	sp, #28
 800c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c290:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c292:	4651      	mov	r1, sl
 800c294:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c296:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c298:	f001 fc10 	bl	800dabc <SDMMC_CmdReadSingleBlock>
 800c29c:	e7a4      	b.n	800c1e8 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c29e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c2a0:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800c2a8:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2aa:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c2ac:	b007      	add	sp, #28
 800c2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800c2b4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c2b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c2ba:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c2bc:	b007      	add	sp, #28
 800c2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2c2:	6823      	ldr	r3, [r4, #0]
 800c2c4:	4a28      	ldr	r2, [pc, #160]	; (800c368 <HAL_SD_ReadBlocks+0x208>)
 800c2c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c2c8:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800c2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2cc:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800c2ce:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800c2d0:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c2d2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800c2d8:	e7d6      	b.n	800c288 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c2da:	68c3      	ldr	r3, [r0, #12]
 800c2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2e0:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c2e2:	6820      	ldr	r0, [r4, #0]
 800c2e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c2e6:	05db      	lsls	r3, r3, #23
 800c2e8:	d509      	bpl.n	800c2fe <HAL_SD_ReadBlocks+0x19e>
 800c2ea:	2f01      	cmp	r7, #1
 800c2ec:	d907      	bls.n	800c2fe <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c2ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d004      	beq.n	800c2fe <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2f4:	f001 fe7a 	bl	800dfec <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d1e2      	bne.n	800c2c2 <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c2fc:	6820      	ldr	r0, [r4, #0]
 800c2fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c300:	f013 0308 	ands.w	r3, r3, #8
 800c304:	d112      	bne.n	800c32c <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c306:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c308:	f012 0202 	ands.w	r2, r2, #2
 800c30c:	d11a      	bne.n	800c344 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c30e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c310:	f013 0320 	ands.w	r3, r3, #32
 800c314:	d021      	beq.n	800c35a <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c318:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c31a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c31c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c31e:	f043 0320 	orr.w	r3, r3, #32
 800c322:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c324:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c328:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c32a:	e7ad      	b.n	800c288 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c32c:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c32e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c330:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c334:	f043 0308 	orr.w	r3, r3, #8
 800c338:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c33a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800c33c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c340:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c342:	e7a1      	b.n	800c288 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c344:	4a08      	ldr	r2, [pc, #32]	; (800c368 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800c346:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c348:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c34a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c34c:	f042 0202 	orr.w	r2, r2, #2
 800c350:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c352:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c356:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c358:	e796      	b.n	800c288 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c35a:	4904      	ldr	r1, [pc, #16]	; (800c36c <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 800c35c:	2201      	movs	r2, #1
    return HAL_OK;
 800c35e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c360:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c362:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800c366:	e78f      	b.n	800c288 <HAL_SD_ReadBlocks+0x128>
 800c368:	1fe00fff 	.word	0x1fe00fff
 800c36c:	18000f3a 	.word	0x18000f3a

0800c370 <HAL_SD_WriteBlocks>:
{
 800c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	460d      	mov	r5, r1
 800c376:	b089      	sub	sp, #36	; 0x24
 800c378:	4604      	mov	r4, r0
 800c37a:	4692      	mov	sl, r2
 800c37c:	461f      	mov	r7, r3
 800c37e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800c382:	f7fa fc2d 	bl	8006be0 <HAL_GetTick>
  if (NULL == pData)
 800c386:	2d00      	cmp	r5, #0
 800c388:	d07c      	beq.n	800c484 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 800c38a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800c38e:	2b01      	cmp	r3, #1
 800c390:	fa5f f983 	uxtb.w	r9, r3
 800c394:	d166      	bne.n	800c464 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c396:	eb0a 0307 	add.w	r3, sl, r7
 800c39a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c39c:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c39e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3a0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c3a2:	d879      	bhi.n	800c498 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3b0:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3b4:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3b6:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3b8:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3c0:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800c3c6:	bf18      	it	ne
 800c3c8:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3cc:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c3ce:	027b      	lsls	r3, r7, #9
 800c3d0:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c3d2:	2390      	movs	r3, #144	; 0x90
 800c3d4:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3d6:	f001 fab5 	bl	800d944 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3da:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800c3dc:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3de:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3e0:	68d3      	ldr	r3, [r2, #12]
 800c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3e6:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800c3e8:	d946      	bls.n	800c478 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c3ea:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3ec:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c3ee:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3f0:	f001 fd56 	bl	800dea0 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d157      	bne.n	800c4a8 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 800c3f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c3fc:	e004      	b.n	800c408 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c3fe:	f7fa fbef 	bl	8006be0 <HAL_GetTick>
 800c402:	1b80      	subs	r0, r0, r6
 800c404:	4540      	cmp	r0, r8
 800c406:	d21d      	bcs.n	800c444 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c40c:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800c410:	d156      	bne.n	800c4c0 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800c412:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c414:	045a      	lsls	r2, r3, #17
 800c416:	d5f2      	bpl.n	800c3fe <HAL_SD_WriteBlocks+0x8e>
 800c418:	f1bb 0f1f 	cmp.w	fp, #31
 800c41c:	d9ef      	bls.n	800c3fe <HAL_SD_WriteBlocks+0x8e>
 800c41e:	f105 0a20 	add.w	sl, r5, #32
 800c422:	e000      	b.n	800c426 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c424:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c426:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c42a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c42c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c42e:	f001 fa73 	bl	800d918 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800c432:	4555      	cmp	r5, sl
 800c434:	d1f6      	bne.n	800c424 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c436:	f7fa fbd3 	bl	8006be0 <HAL_GetTick>
 800c43a:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 800c43c:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800c440:	4540      	cmp	r0, r8
 800c442:	d3e1      	bcc.n	800c408 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c444:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800c446:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c44a:	4841      	ldr	r0, [pc, #260]	; (800c550 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 800c44c:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800c44e:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c450:	6388      	str	r0, [r1, #56]	; 0x38
}
 800c452:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800c454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c456:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800c458:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800c45c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800c45e:	b009      	add	sp, #36	; 0x24
 800c460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c464:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c466:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c46a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c46e:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c470:	4648      	mov	r0, r9
 800c472:	b009      	add	sp, #36	; 0x24
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c478:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c47a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c47c:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c47e:	f001 fc69 	bl	800dd54 <SDMMC_CmdWriteSingleBlock>
 800c482:	e7b7      	b.n	800c3f4 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c484:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800c486:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c48a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800c48e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c490:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c492:	b009      	add	sp, #36	; 0x24
 800c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c498:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800c49a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c49c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c4a0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c4a2:	b009      	add	sp, #36	; 0x24
 800c4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	4a29      	ldr	r2, [pc, #164]	; (800c550 <HAL_SD_WriteBlocks+0x1e0>)
 800c4ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c4ae:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800c4b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4b2:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800c4b4:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800c4b6:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800c4b8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800c4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800c4be:	e7d7      	b.n	800c470 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4c0:	68c3      	ldr	r3, [r0, #12]
 800c4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4c6:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4cc:	05db      	lsls	r3, r3, #23
 800c4ce:	d509      	bpl.n	800c4e4 <HAL_SD_WriteBlocks+0x174>
 800c4d0:	2f01      	cmp	r7, #1
 800c4d2:	d907      	bls.n	800c4e4 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800c4d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d004      	beq.n	800c4e4 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4da:	f001 fd87 	bl	800dfec <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d1e2      	bne.n	800c4a8 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c4e2:	6820      	ldr	r0, [r4, #0]
 800c4e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4e6:	f013 0308 	ands.w	r3, r3, #8
 800c4ea:	d112      	bne.n	800c512 <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c4ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800c4ee:	f012 0202 	ands.w	r2, r2, #2
 800c4f2:	d11a      	bne.n	800c52a <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c4f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c4f6:	f013 0310 	ands.w	r3, r3, #16
 800c4fa:	d021      	beq.n	800c540 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4fc:	4b14      	ldr	r3, [pc, #80]	; (800c550 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c4fe:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c500:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c504:	f043 0310 	orr.w	r3, r3, #16
 800c508:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c50a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c50e:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c510:	e7ae      	b.n	800c470 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c514:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c516:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c51a:	f043 0308 	orr.w	r3, r3, #8
 800c51e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c520:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800c522:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c526:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c528:	e7a2      	b.n	800c470 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c52a:	4a09      	ldr	r2, [pc, #36]	; (800c550 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800c52c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c52e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c530:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c532:	f042 0202 	orr.w	r2, r2, #2
 800c536:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c538:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c53c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800c53e:	e797      	b.n	800c470 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800c542:	2201      	movs	r2, #1
    return HAL_OK;
 800c544:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c546:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c548:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800c54c:	e790      	b.n	800c470 <HAL_SD_WriteBlocks+0x100>
 800c54e:	bf00      	nop
 800c550:	1fe00fff 	.word	0x1fe00fff
 800c554:	18000f3a 	.word	0x18000f3a

0800c558 <HAL_SD_ErrorCallback>:
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop

0800c55c <HAL_SD_GetCardCSD>:
{
 800c55c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c55e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c560:	f04f 0c00 	mov.w	ip, #0
{
 800c564:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c566:	0f92      	lsrs	r2, r2, #30
 800c568:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c56a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c56c:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800c570:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c572:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800c576:	f002 0203 	and.w	r2, r2, #3
 800c57a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c57c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800c580:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c582:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800c586:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c588:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800c58c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c58e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c590:	0d12      	lsrs	r2, r2, #20
 800c592:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c594:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800c598:	f002 020f 	and.w	r2, r2, #15
 800c59c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c59e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c5a0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c5a4:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c5a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c5a8:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c5ac:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c5ae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c5b0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c5b4:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c5b6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c5b8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c5bc:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c5be:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800c5c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	f040 808a 	bne.w	800c6de <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c5ca:	f640 72fc 	movw	r2, #4092	; 0xffc
 800c5ce:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
 800c5d2:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800c5d6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800c5da:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c5dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c5de:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800c5e2:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c5e4:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800c5e8:	f002 0207 	and.w	r2, r2, #7
 800c5ec:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c5ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c5f0:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800c5f4:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c5f6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c5f8:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800c5fc:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c5fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c600:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800c604:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c606:	690a      	ldr	r2, [r1, #16]
 800c608:	3201      	adds	r2, #1
 800c60a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c60c:	7e08      	ldrb	r0, [r1, #24]
 800c60e:	f000 0007 	and.w	r0, r0, #7
 800c612:	3002      	adds	r0, #2
 800c614:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c616:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c618:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c61a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c61e:	f00c 0c0f 	and.w	ip, ip, #15
 800c622:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c626:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c62a:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
 800c62c:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c630:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800c634:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c638:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
 800c63a:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800c63c:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c640:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c644:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c646:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c648:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800c64c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c64e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c654:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c656:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c658:	0fd2      	lsrs	r2, r2, #31
 800c65a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c65c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c65e:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800c662:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c664:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c666:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800c66a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c66c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c66e:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800c672:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c674:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c676:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800c67a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800c67e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c682:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c686:	ea02 020c 	and.w	r2, r2, ip
 800c68a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c68e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c690:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800c694:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c698:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c69a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800c69e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c6a2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6a4:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800c6a8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c6ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6ae:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800c6b2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c6b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6b8:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800c6bc:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c6c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c6c2:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800c6c6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800c6d0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800c6d4:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800c6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6dc:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c6de:	2a01      	cmp	r2, #1
 800c6e0:	d112      	bne.n	800c708 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c6e2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800c6e4:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800c6e8:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c6ec:	0412      	lsls	r2, r2, #16
 800c6ee:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800c6f2:	ea42 020c 	orr.w	r2, r2, ip
 800c6f6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c6f8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800c6fa:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c6fc:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c6fe:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c700:	0292      	lsls	r2, r2, #10
 800c702:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c704:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c706:	e797      	b.n	800c638 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c708:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800c70a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c70c:	4805      	ldr	r0, [pc, #20]	; (800c724 <HAL_SD_GetCardCSD+0x1c8>)
 800c70e:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800c710:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c714:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c718:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c71a:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800c71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	1fe00fff 	.word	0x1fe00fff

0800c728 <HAL_SD_InitCard>:
{
 800c728:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c72a:	2200      	movs	r2, #0
{
 800c72c:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c72e:	2300      	movs	r3, #0
{
 800c730:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c732:	2100      	movs	r1, #0
 800c734:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c738:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c73c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c740:	f7fe fdf4 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800c744:	b940      	cbnz	r0, 800c758 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800c746:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c748:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800c74c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c750:	6363      	str	r3, [r4, #52]	; 0x34
}
 800c752:	4630      	mov	r0, r6
 800c754:	b015      	add	sp, #84	; 0x54
 800c756:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c758:	0a06      	lsrs	r6, r0, #8
 800c75a:	4b8f      	ldr	r3, [pc, #572]	; (800c998 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800c75c:	aa07      	add	r2, sp, #28
 800c75e:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c760:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800c764:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c766:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800c768:	9608      	str	r6, [sp, #32]
 800c76a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c76e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c772:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c774:	6820      	ldr	r0, [r4, #0]
 800c776:	f001 f8af 	bl	800d8d8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c77a:	6820      	ldr	r0, [r4, #0]
 800c77c:	f001 f8d2 	bl	800d924 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800c780:	4b86      	ldr	r3, [pc, #536]	; (800c99c <HAL_SD_InitCard+0x274>)
 800c782:	429d      	cmp	r5, r3
 800c784:	d902      	bls.n	800c78c <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c786:	0076      	lsls	r6, r6, #1
 800c788:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c78c:	4884      	ldr	r0, [pc, #528]	; (800c9a0 <HAL_SD_InitCard+0x278>)
 800c78e:	fbb0 f0f5 	udiv	r0, r0, r5
 800c792:	3001      	adds	r0, #1
 800c794:	f7fa fa2a 	bl	8006bec <HAL_Delay>
  __IO uint32_t count = 0U;
 800c798:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c79a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800c79c:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c79e:	f001 fdd5 	bl	800e34c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	b140      	cbz	r0, 800c7b8 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800c7a6:	2601      	movs	r6, #1
 800c7a8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800c7ac:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800c7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7b0:	431d      	orrs	r5, r3
 800c7b2:	6365      	str	r5, [r4, #52]	; 0x34
}
 800c7b4:	b015      	add	sp, #84	; 0x54
 800c7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c7b8:	6820      	ldr	r0, [r4, #0]
 800c7ba:	f001 fdf3 	bl	800e3a4 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800c7be:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800c7c2:	d06c      	beq.n	800c89e <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	6820      	ldr	r0, [r4, #0]
 800c7cc:	f001 fe2a 	bl	800e424 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7d0:	bb08      	cbnz	r0, 800c816 <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800c7d8:	42b3      	cmp	r3, r6
 800c7da:	f200 80d6 	bhi.w	800c98a <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c7de:	4f71      	ldr	r7, [pc, #452]	; (800c9a4 <HAL_SD_InitCard+0x27c>)
 800c7e0:	e00b      	b.n	800c7fa <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c7e2:	6820      	ldr	r0, [r4, #0]
 800c7e4:	f001 f8aa 	bl	800d93c <SDMMC_GetResponse>
    count++;
 800c7e8:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c7ea:	2800      	cmp	r0, #0
    count++;
 800c7ec:	f103 0301 	add.w	r3, r3, #1
 800c7f0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	db12      	blt.n	800c81c <HAL_SD_InitCard+0xf4>
 800c7f6:	42b3      	cmp	r3, r6
 800c7f8:	d810      	bhi.n	800c81c <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	f001 fe11 	bl	800e424 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c802:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800c804:	4605      	mov	r5, r0
 800c806:	2800      	cmp	r0, #0
 800c808:	d1cd      	bne.n	800c7a6 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800c80a:	6820      	ldr	r0, [r4, #0]
 800c80c:	f001 feb0 	bl	800e570 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c810:	4601      	mov	r1, r0
 800c812:	2800      	cmp	r0, #0
 800c814:	d0e5      	beq.n	800c7e2 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c816:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c81a:	e7c4      	b.n	800c7a6 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c81c:	9a03      	ldr	r2, [sp, #12]
 800c81e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c822:	429a      	cmp	r2, r3
 800c824:	f200 80ab 	bhi.w	800c97e <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c828:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800c82c:	d043      	beq.n	800c8b6 <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c82e:	2301      	movs	r3, #1
 800c830:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800c832:	2300      	movs	r3, #0
 800c834:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800c838:	f7fa f9d2 	bl	8006be0 <HAL_GetTick>
 800c83c:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c83e:	6820      	ldr	r0, [r4, #0]
 800c840:	f001 f878 	bl	800d934 <SDMMC_GetPowerState>
 800c844:	2800      	cmp	r0, #0
 800c846:	d038      	beq.n	800c8ba <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c848:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d140      	bne.n	800c8d0 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c84e:	2104      	movs	r1, #4
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	f001 f873 	bl	800d93c <SDMMC_GetResponse>
 800c856:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c858:	a909      	add	r1, sp, #36	; 0x24
 800c85a:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c85c:	0d1b      	lsrs	r3, r3, #20
 800c85e:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c860:	f7ff fe7c 	bl	800c55c <HAL_SD_GetCardCSD>
 800c864:	4606      	mov	r6, r0
 800c866:	2800      	cmp	r0, #0
 800c868:	f040 808c 	bne.w	800c984 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c86c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c86e:	6820      	ldr	r0, [r4, #0]
 800c870:	0409      	lsls	r1, r1, #16
 800c872:	f001 fcc5 	bl	800e200 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c876:	bb10      	cbnz	r0, 800c8be <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c87c:	6820      	ldr	r0, [r4, #0]
 800c87e:	f001 f877 	bl	800d970 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800c882:	2800      	cmp	r0, #0
 800c884:	f43f af65 	beq.w	800c752 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c888:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800c88a:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c88c:	4946      	ldr	r1, [pc, #280]	; (800c9a8 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 800c88e:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c890:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c892:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c894:	4310      	orrs	r0, r2
 800c896:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c898:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800c89c:	e759      	b.n	800c752 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c89e:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	f001 fd53 	bl	800e34c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	2800      	cmp	r0, #0
 800c8aa:	f47f af7c 	bne.w	800c7a6 <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800c8ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d18e      	bne.n	800c7d2 <HAL_SD_InitCard+0xaa>
 800c8b4:	e788      	b.n	800c7c8 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800c8b6:	63a0      	str	r0, [r4, #56]	; 0x38
 800c8b8:	e7bb      	b.n	800c832 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c8ba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800c8be:	2601      	movs	r6, #1
 800c8c0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c8c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8c6:	4318      	orrs	r0, r3
 800c8c8:	6360      	str	r0, [r4, #52]	; 0x34
}
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	b015      	add	sp, #84	; 0x54
 800c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c8d0:	6820      	ldr	r0, [r4, #0]
 800c8d2:	f001 ffd5 	bl	800e880 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d1f1      	bne.n	800c8be <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8da:	4601      	mov	r1, r0
 800c8dc:	6820      	ldr	r0, [r4, #0]
 800c8de:	f001 f82d 	bl	800d93c <SDMMC_GetResponse>
 800c8e2:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c8e4:	2104      	movs	r1, #4
 800c8e6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c8e8:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c8ea:	f001 f827 	bl	800d93c <SDMMC_GetResponse>
 800c8ee:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c8f0:	2108      	movs	r1, #8
 800c8f2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c8f4:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c8f6:	f001 f821 	bl	800d93c <SDMMC_GetResponse>
 800c8fa:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c8fc:	210c      	movs	r1, #12
 800c8fe:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c900:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c902:	f001 f81b 	bl	800d93c <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c908:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d09f      	beq.n	800c84e <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c90e:	f241 3687 	movw	r6, #4999	; 0x1387
 800c912:	e009      	b.n	800c928 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	f002 f831 	bl	800e97c <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d1cf      	bne.n	800c8be <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800c91e:	f7fa f95f 	bl	8006be0 <HAL_GetTick>
 800c922:	1b43      	subs	r3, r0, r5
 800c924:	42b3      	cmp	r3, r6
 800c926:	d827      	bhi.n	800c978 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 800c928:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c92c:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800c930:	2b00      	cmp	r3, #0
 800c932:	d0ef      	beq.n	800c914 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c934:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c936:	2a03      	cmp	r2, #3
 800c938:	d089      	beq.n	800c84e <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c93a:	0419      	lsls	r1, r3, #16
 800c93c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800c93e:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c940:	f001 ffdc 	bl	800e8fc <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800c944:	2800      	cmp	r0, #0
 800c946:	d1ba      	bne.n	800c8be <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c948:	4601      	mov	r1, r0
 800c94a:	6820      	ldr	r0, [r4, #0]
 800c94c:	f000 fff6 	bl	800d93c <SDMMC_GetResponse>
 800c950:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c952:	2104      	movs	r1, #4
 800c954:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c956:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c958:	f000 fff0 	bl	800d93c <SDMMC_GetResponse>
 800c95c:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c95e:	2108      	movs	r1, #8
 800c960:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c962:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c964:	f000 ffea 	bl	800d93c <SDMMC_GetResponse>
 800c968:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c96a:	210c      	movs	r1, #12
 800c96c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c96e:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c970:	f000 ffe4 	bl	800d93c <SDMMC_GetResponse>
 800c974:	66a0      	str	r0, [r4, #104]	; 0x68
 800c976:	e76a      	b.n	800c84e <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800c978:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800c97c:	e79f      	b.n	800c8be <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c97e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800c982:	e710      	b.n	800c7a6 <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c984:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c988:	e799      	b.n	800c8be <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800c98a:	9b03      	ldr	r3, [sp, #12]
 800c98c:	42b3      	cmp	r3, r6
 800c98e:	d8f6      	bhi.n	800c97e <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 800c990:	2300      	movs	r3, #0
 800c992:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800c994:	e74d      	b.n	800c832 <HAL_SD_InitCard+0x10a>
 800c996:	bf00      	nop
 800c998:	014f8b59 	.word	0x014f8b59
 800c99c:	000c34ff 	.word	0x000c34ff
 800c9a0:	00012110 	.word	0x00012110
 800c9a4:	c1100000 	.word	0xc1100000
 800c9a8:	1fe00fff 	.word	0x1fe00fff

0800c9ac <HAL_SD_GetCardInfo>:
{
 800c9ac:	4603      	mov	r3, r0
}
 800c9ae:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c9b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9b2:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c9b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9b6:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c9b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9ba:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9be:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c9c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9c2:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c9c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9c6:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c9c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9ca:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ce:	61cb      	str	r3, [r1, #28]
}
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop

0800c9d4 <HAL_SD_ConfigWideBusOperation>:
{
 800c9d4:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800c9d6:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c9d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800c9da:	b089      	sub	sp, #36	; 0x24
 800c9dc:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c9de:	4293      	cmp	r3, r2
{
 800c9e0:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800c9e2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800c9e6:	d033      	beq.n	800ca50 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800c9e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c9ec:	d030      	beq.n	800ca50 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800c9ee:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c9f2:	f000 8084 	beq.w	800cafe <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d062      	beq.n	800cac0 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca00:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ca02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca04:	bb5b      	cbnz	r3, 800ca5e <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ca06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f7fe fc8e 	bl	800b32c <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d03b      	beq.n	800ca8c <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ca14:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ca16:	4b55      	ldr	r3, [pc, #340]	; (800cb6c <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ca18:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800ca1a:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ca1c:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ca1e:	fba3 5300 	umull	r5, r3, r3, r0
 800ca22:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ca24:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ca26:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ca2a:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ca2c:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ca30:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ca32:	d238      	bcs.n	800caa6 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ca34:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ca36:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ca3a:	d034      	beq.n	800caa6 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ca3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ca40:	d07f      	beq.n	800cb42 <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
 800ca42:	bb4a      	cbnz	r2, 800ca98 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ca44:	4b4a      	ldr	r3, [pc, #296]	; (800cb70 <HAL_SD_ConfigWideBusOperation+0x19c>)
 800ca46:	4298      	cmp	r0, r3
 800ca48:	f240 8085 	bls.w	800cb56 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ca4c:	9506      	str	r5, [sp, #24]
 800ca4e:	e02b      	b.n	800caa8 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca56:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ca58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d0d3      	beq.n	800ca06 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca5e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ca60:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca62:	4a44      	ldr	r2, [pc, #272]	; (800cb74 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800ca64:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca6a:	6820      	ldr	r0, [r4, #0]
 800ca6c:	f000 ff80 	bl	800d970 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca70:	b130      	cbz	r0, 800ca80 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca72:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ca74:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca76:	4a3f      	ldr	r2, [pc, #252]	; (800cb74 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca7c:	4318      	orrs	r0, r3
 800ca7e:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800ca80:	2301      	movs	r3, #1
}
 800ca82:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ca84:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800ca88:	b009      	add	sp, #36	; 0x24
 800ca8a:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ca8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800ca8e:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ca90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ca94:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800ca96:	e7e6      	b.n	800ca66 <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ca98:	0053      	lsls	r3, r2, #1
 800ca9a:	fbb0 f0f3 	udiv	r0, r0, r3
 800ca9e:	4b34      	ldr	r3, [pc, #208]	; (800cb70 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800caa0:	4298      	cmp	r0, r3
 800caa2:	bf88      	it	hi
 800caa4:	462a      	movhi	r2, r5
 800caa6:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800caa8:	aa05      	add	r2, sp, #20
 800caaa:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800caac:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800caae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cab2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cab8:	6820      	ldr	r0, [r4, #0]
 800caba:	f000 ff0d 	bl	800d8d8 <SDMMC_Init>
 800cabe:	e7d2      	b.n	800ca66 <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cac4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800cac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800caca:	f000 ff37 	bl	800d93c <SDMMC_GetResponse>
 800cace:	0182      	lsls	r2, r0, #6
 800cad0:	d434      	bmi.n	800cb3c <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800cad2:	a902      	add	r1, sp, #8
 800cad4:	4620      	mov	r0, r4
 800cad6:	f7ff fa09 	bl	800beec <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cada:	b960      	cbnz	r0, 800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cadc:	9b03      	ldr	r3, [sp, #12]
 800cade:	03db      	lsls	r3, r3, #15
 800cae0:	d536      	bpl.n	800cb50 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cae2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cae4:	6820      	ldr	r0, [r4, #0]
 800cae6:	0409      	lsls	r1, r1, #16
 800cae8:	f001 fc9c 	bl	800e424 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800caec:	b918      	cbnz	r0, 800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800caee:	4601      	mov	r1, r0
 800caf0:	6820      	ldr	r0, [r4, #0]
 800caf2:	f001 fd77 	bl	800e5e4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800caf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf8:	4318      	orrs	r0, r3
 800cafa:	6360      	str	r0, [r4, #52]	; 0x34
 800cafc:	e7ac      	b.n	800ca58 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800cafe:	2200      	movs	r2, #0
 800cb00:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb02:	2100      	movs	r1, #0
 800cb04:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800cb06:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb0a:	f000 ff17 	bl	800d93c <SDMMC_GetResponse>
 800cb0e:	0180      	lsls	r0, r0, #6
 800cb10:	d414      	bmi.n	800cb3c <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800cb12:	a902      	add	r1, sp, #8
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7ff f9e9 	bl	800beec <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d1eb      	bne.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	0359      	lsls	r1, r3, #13
 800cb22:	d515      	bpl.n	800cb50 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb24:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cb26:	6820      	ldr	r0, [r4, #0]
 800cb28:	0409      	lsls	r1, r1, #16
 800cb2a:	f001 fc7b 	bl	800e424 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	d1e1      	bne.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cb32:	2102      	movs	r1, #2
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	f001 fd55 	bl	800e5e4 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb3a:	e7dc      	b.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cb40:	e7d9      	b.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
 800cb42:	b95a      	cbnz	r2, 800cb5c <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cb44:	4a0c      	ldr	r2, [pc, #48]	; (800cb78 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800cb46:	4290      	cmp	r0, r2
 800cb48:	d905      	bls.n	800cb56 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cb4a:	0e5b      	lsrs	r3, r3, #25
 800cb4c:	9306      	str	r3, [sp, #24]
 800cb4e:	e7ab      	b.n	800caa8 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb50:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800cb54:	e7cf      	b.n	800caf6 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cb56:	2300      	movs	r3, #0
 800cb58:	9306      	str	r3, [sp, #24]
 800cb5a:	e7a5      	b.n	800caa8 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cb5c:	0051      	lsls	r1, r2, #1
 800cb5e:	fbb0 f0f1 	udiv	r0, r0, r1
 800cb62:	4905      	ldr	r1, [pc, #20]	; (800cb78 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800cb64:	4288      	cmp	r0, r1
 800cb66:	d99e      	bls.n	800caa6 <HAL_SD_ConfigWideBusOperation+0xd2>
 800cb68:	e7ef      	b.n	800cb4a <HAL_SD_ConfigWideBusOperation+0x176>
 800cb6a:	bf00      	nop
 800cb6c:	55e63b89 	.word	0x55e63b89
 800cb70:	017d7840 	.word	0x017d7840
 800cb74:	1fe00fff 	.word	0x1fe00fff
 800cb78:	02faf080 	.word	0x02faf080

0800cb7c <HAL_SD_Init>:
{
 800cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7e:	b087      	sub	sp, #28
  if (hsd == NULL)
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d044      	beq.n	800cc0e <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800cb84:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800cb88:	4604      	mov	r4, r0
 800cb8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d041      	beq.n	800cc16 <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cb92:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb94:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cb96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb9a:	f7ff fdc5 	bl	800c728 <HAL_SD_InitCard>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d135      	bne.n	800cc0e <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800cba2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	d031      	beq.n	800cc0e <HAL_SD_Init+0x92>
 800cbaa:	a901      	add	r1, sp, #4
 800cbac:	4620      	mov	r0, r4
 800cbae:	f7ff fa0f 	bl	800bfd0 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cbb2:	bb60      	cbnz	r0, 800cc0e <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cbb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800cbb6:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cbba:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cbbc:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800cbc0:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cbc2:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cbc4:	d02b      	beq.n	800cc1e <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cbc6:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cbc8:	68e1      	ldr	r1, [r4, #12]
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7ff ff02 	bl	800c9d4 <HAL_SD_ConfigWideBusOperation>
 800cbd0:	4606      	mov	r6, r0
 800cbd2:	b9e0      	cbnz	r0, 800cc0e <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800cbd4:	f7fa f804 	bl	8006be0 <HAL_GetTick>
 800cbd8:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cbda:	e00c      	b.n	800cbf6 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbdc:	6820      	ldr	r0, [r4, #0]
 800cbde:	4629      	mov	r1, r5
 800cbe0:	f000 feac 	bl	800d93c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cbe4:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cbe8:	2804      	cmp	r0, #4
 800cbea:	d020      	beq.n	800cc2e <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cbec:	f7f9 fff8 	bl	8006be0 <HAL_GetTick>
 800cbf0:	1bc3      	subs	r3, r0, r7
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	d021      	beq.n	800cc3a <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cbf8:	6820      	ldr	r0, [r4, #0]
 800cbfa:	0409      	lsls	r1, r1, #16
 800cbfc:	f001 ff16 	bl	800ea2c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc00:	4605      	mov	r5, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0ea      	beq.n	800cbdc <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800cc06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc08:	4303      	orrs	r3, r0
 800cc0a:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800cc0c:	e7ee      	b.n	800cbec <HAL_SD_Init+0x70>
    return HAL_ERROR;
 800cc0e:	2601      	movs	r6, #1
}
 800cc10:	4630      	mov	r0, r6
 800cc12:	b007      	add	sp, #28
 800cc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800cc16:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800cc18:	f7f9 fc54 	bl	80064c4 <HAL_SD_MspInit>
 800cc1c:	e7b9      	b.n	800cb92 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cc1e:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cc20:	bf14      	ite	ne
 800cc22:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cc26:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800cc2a:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc2c:	e7cc      	b.n	800cbc8 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800cc2e:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc30:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cc32:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800cc34:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800cc38:	e7ea      	b.n	800cc10 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800cc3e:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800cc40:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cc42:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800cc48:	e7e2      	b.n	800cc10 <HAL_SD_Init+0x94>
 800cc4a:	bf00      	nop

0800cc4c <HAL_SD_GetCardState>:
{
 800cc4c:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800cc50:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc52:	6800      	ldr	r0, [r0, #0]
 800cc54:	0409      	lsls	r1, r1, #16
 800cc56:	f001 fee9 	bl	800ea2c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	b120      	cbz	r0, 800cc68 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800cc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc60:	2000      	movs	r0, #0
 800cc62:	4319      	orrs	r1, r3
 800cc64:	6361      	str	r1, [r4, #52]	; 0x34
}
 800cc66:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc68:	6820      	ldr	r0, [r4, #0]
 800cc6a:	f000 fe67 	bl	800d93c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cc6e:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800cc72:	bd10      	pop	{r4, pc}

0800cc74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop

0800cc78 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop

0800cc7c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop

0800cc84 <HAL_SD_IRQHandler>:
{
 800cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc86:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc88:	6800      	ldr	r0, [r0, #0]
{
 800cc8a:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800cc8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cc90:	041b      	lsls	r3, r3, #16
 800cc92:	d502      	bpl.n	800cc9a <HAL_SD_IRQHandler+0x16>
 800cc94:	072f      	lsls	r7, r5, #28
 800cc96:	f100 80b7 	bmi.w	800ce08 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cc9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cc9c:	05de      	lsls	r6, r3, #23
 800cc9e:	d529      	bpl.n	800ccf4 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cca0:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cca4:	4b99      	ldr	r3, [pc, #612]	; (800cf0c <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cca6:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ccac:	400b      	ands	r3, r1
 800ccae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ccb0:	6822      	ldr	r2, [r4, #0]
 800ccb2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ccb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccb8:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ccba:	6822      	ldr	r2, [r4, #0]
 800ccbc:	68d3      	ldr	r3, [r2, #12]
 800ccbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc2:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800ccc4:	f015 0308 	ands.w	r3, r5, #8
 800ccc8:	d076      	beq.n	800cdb8 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccca:	f015 0f22 	tst.w	r5, #34	; 0x22
 800ccce:	f040 80e9 	bne.w	800cea4 <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccd2:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800ccd4:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccd6:	498e      	ldr	r1, [pc, #568]	; (800cf10 <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ccd8:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ccda:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800ccdc:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800cce0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cce4:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cce6:	f000 80b0 	beq.w	800ce4a <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 800ccea:	4620      	mov	r0, r4
 800ccec:	f002 f838 	bl	800ed60 <HAL_SD_RxCpltCallback>
}
 800ccf0:	b003      	add	sp, #12
 800ccf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ccf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ccf6:	045b      	lsls	r3, r3, #17
 800ccf8:	d502      	bpl.n	800cd00 <HAL_SD_IRQHandler+0x7c>
 800ccfa:	072f      	lsls	r7, r5, #28
 800ccfc:	f100 80aa 	bmi.w	800ce54 <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cd00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd02:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd06:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cd08:	d06e      	beq.n	800cde8 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd0a:	079e      	lsls	r6, r3, #30
 800cd0c:	d503      	bpl.n	800cd16 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd10:	f043 0302 	orr.w	r3, r3, #2
 800cd14:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cd16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd18:	0719      	lsls	r1, r3, #28
 800cd1a:	d503      	bpl.n	800cd24 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd1e:	f043 0308 	orr.w	r3, r3, #8
 800cd22:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd26:	069a      	lsls	r2, r3, #26
 800cd28:	d503      	bpl.n	800cd32 <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd2c:	f043 0320 	orr.w	r3, r3, #32
 800cd30:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cd32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd34:	06db      	lsls	r3, r3, #27
 800cd36:	d503      	bpl.n	800cd40 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd3a:	f043 0310 	orr.w	r3, r3, #16
 800cd3e:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd40:	4b73      	ldr	r3, [pc, #460]	; (800cf10 <HAL_SD_IRQHandler+0x28c>)
 800cd42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cd44:	6822      	ldr	r2, [r4, #0]
 800cd46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800cd48:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800cd4c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	68d3      	ldr	r3, [r2, #12]
 800cd52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd56:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cd5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cd60:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	68d3      	ldr	r3, [r2, #12]
 800cd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6a:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	f001 f93d 	bl	800dfec <SDMMC_CmdStopTransfer>
 800cd72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cd74:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cd76:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd7a:	4318      	orrs	r0, r3
 800cd7c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cd7e:	68d3      	ldr	r3, [r2, #12]
 800cd80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd84:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cd8a:	f015 0308 	ands.w	r3, r5, #8
 800cd8e:	f040 8097 	bne.w	800cec0 <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cd92:	062f      	lsls	r7, r5, #24
 800cd94:	d5ac      	bpl.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	d0a9      	beq.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cd9c:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800cd9e:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800cda0:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cda2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800cda4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cda8:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cdaa:	6822      	ldr	r2, [r4, #0]
 800cdac:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cdae:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800cdb2:	f7ff fbd1 	bl	800c558 <HAL_SD_ErrorCallback>
 800cdb6:	e79b      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cdb8:	0629      	lsls	r1, r5, #24
 800cdba:	d599      	bpl.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800cdbc:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdbe:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800cdc2:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cdc8:	6822      	ldr	r2, [r4, #0]
 800cdca:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdcc:	f040 8086 	bne.w	800cedc <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 800cdd0:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800cdd2:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdd4:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800cdd8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cddc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdde:	f040 808b 	bne.w	800cef8 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cde2:	07aa      	lsls	r2, r5, #30
 800cde4:	d084      	beq.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
 800cde6:	e780      	b.n	800ccea <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cde8:	00de      	lsls	r6, r3, #3
 800cdea:	d581      	bpl.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cdec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cdf0:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cdf2:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdf8:	0759      	lsls	r1, r3, #29
 800cdfa:	d46a      	bmi.n	800ced2 <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cdfc:	06aa      	lsls	r2, r5, #26
 800cdfe:	f140 8082 	bpl.w	800cf06 <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ce02:	f7ff ff3d 	bl	800cc80 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800ce06:	e773      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
 800ce08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce0a:	2b1f      	cmp	r3, #31
 800ce0c:	f67f af70 	bls.w	800ccf0 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800ce10:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800ce12:	1d3d      	adds	r5, r7, #4
 800ce14:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800ce18:	e000      	b.n	800ce1c <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ce1a:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 800ce1c:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ce1e:	f000 fd77 	bl	800d910 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ce22:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ce24:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 800ce26:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 800ce2a:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ce2c:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ce30:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ce34:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ce38:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 800ce3c:	d1ed      	bne.n	800ce1a <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 800ce3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 800ce40:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800ce42:	3b20      	subs	r3, #32
 800ce44:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 800ce48:	e752      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f001 ff82 	bl	800ed54 <HAL_SD_TxCpltCallback>
}
 800ce50:	b003      	add	sp, #12
 800ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800ce54:	6a23      	ldr	r3, [r4, #32]
 800ce56:	2b1f      	cmp	r3, #31
 800ce58:	f67f af4a 	bls.w	800ccf0 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800ce5c:	69e6      	ldr	r6, [r4, #28]
 800ce5e:	1d37      	adds	r7, r6, #4
 800ce60:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800ce64:	e000      	b.n	800ce68 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ce66:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800ce68:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800ce6c:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ce6e:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800ce70:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800ce72:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800ce76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ce7a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800ce7c:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800ce80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce84:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800ce86:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800ce8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ce8e:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ce90:	f000 fd42 	bl	800d918 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ce94:	42bd      	cmp	r5, r7
 800ce96:	d1e6      	bne.n	800ce66 <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 800ce98:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800ce9a:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800ce9c:	3b20      	subs	r3, #32
 800ce9e:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800cea2:	e725      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	f001 f8a1 	bl	800dfec <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2800      	cmp	r0, #0
 800ceae:	f43f af10 	beq.w	800ccd2 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800ceb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ceb4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ceba:	f7ff fb4d 	bl	800c558 <HAL_SD_ErrorCallback>
 800cebe:	e708      	b.n	800ccd2 <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800cec0:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800cec2:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800cec4:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800cec6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ceca:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cecc:	f7ff fb44 	bl	800c558 <HAL_SD_ErrorCallback>
 800ced0:	e70e      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ced2:	06ab      	lsls	r3, r5, #26
 800ced4:	d514      	bpl.n	800cf00 <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ced6:	f7ff fed1 	bl	800cc7c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800ceda:	e709      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cedc:	6820      	ldr	r0, [r4, #0]
 800cede:	f001 f885 	bl	800dfec <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800cee2:	4603      	mov	r3, r0
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f43f af73 	beq.w	800cdd0 <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 800ceea:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ceec:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800ceee:	4313      	orrs	r3, r2
 800cef0:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800cef2:	f7ff fb31 	bl	800c558 <HAL_SD_ErrorCallback>
 800cef6:	e76b      	b.n	800cdd0 <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 800cef8:	4620      	mov	r0, r4
 800cefa:	f001 ff2b 	bl	800ed54 <HAL_SD_TxCpltCallback>
 800cefe:	e770      	b.n	800cde2 <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cf00:	f7ff feb8 	bl	800cc74 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cf04:	e6f4      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cf06:	f7ff feb7 	bl	800cc78 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800cf0a:	e6f1      	b.n	800ccf0 <HAL_SD_IRQHandler+0x6c>
 800cf0c:	ffff3ec5 	.word	0xffff3ec5
 800cf10:	18000f3a 	.word	0x18000f3a

0800cf14 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cf14:	b318      	cbz	r0, 800cf5e <HAL_SDRAM_Init+0x4a>
{
 800cf16:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cf18:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf24:	b1b3      	cbz	r3, 800cf54 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cf26:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf28:	2302      	movs	r3, #2
 800cf2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cf2e:	f851 0b04 	ldr.w	r0, [r1], #4
 800cf32:	f000 fc1f 	bl	800d774 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cf36:	6862      	ldr	r2, [r4, #4]
 800cf38:	4629      	mov	r1, r5
 800cf3a:	6820      	ldr	r0, [r4, #0]
 800cf3c:	f000 fc58 	bl	800d7f0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800cf40:	4a08      	ldr	r2, [pc, #32]	; (800cf64 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cf42:	2101      	movs	r1, #1

  return HAL_OK;
 800cf44:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800cf46:	6813      	ldr	r3, [r2, #0]
 800cf48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf4c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cf4e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800cf54:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800cf58:	f7f6 feea 	bl	8003d30 <HAL_SDRAM_MspInit>
 800cf5c:	e7e3      	b.n	800cf26 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800cf5e:	2001      	movs	r0, #1
}
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	52004000 	.word	0x52004000

0800cf68 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800cf68:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800cf6a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800cf6e:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800cf70:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800cf72:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800cf74:	d004      	beq.n	800cf80 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800cf76:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800cf7a:	2e01      	cmp	r6, #1
 800cf7c:	d001      	beq.n	800cf82 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800cf7e:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800cf80:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf82:	2302      	movs	r3, #2
 800cf84:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cf86:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cf8c:	f000 fc7e 	bl	800d88c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d003      	beq.n	800cf9e <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800cf96:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800cf98:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800cf9c:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cf9e:	2305      	movs	r3, #5
  return HAL_OK;
 800cfa0:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cfa2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}

0800cfa8 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800cfa8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cfaa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800cfae:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	b2d8      	uxtb	r0, r3
 800cfb4:	d005      	beq.n	800cfc2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800cfb6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	b2dd      	uxtb	r5, r3
 800cfbe:	d001      	beq.n	800cfc4 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800cfc0:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cfc4:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800cfc6:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cfc8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800cfcc:	f000 fc76 	bl	800d8bc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800cfd0:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800cfd2:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800cfd6:	bd38      	pop	{r3, r4, r5, pc}

0800cfd8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800cfd8:	6802      	ldr	r2, [r0, #0]
{
 800cfda:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800cfdc:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cfde:	6991      	ldr	r1, [r2, #24]
 800cfe0:	f041 0108 	orr.w	r1, r1, #8
 800cfe4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cfe6:	6801      	ldr	r1, [r0, #0]
 800cfe8:	698a      	ldr	r2, [r1, #24]
 800cfea:	f042 0210 	orr.w	r2, r2, #16
 800cfee:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cff0:	6801      	ldr	r1, [r0, #0]
 800cff2:	680a      	ldr	r2, [r1, #0]
 800cff4:	f022 0201 	bic.w	r2, r2, #1
 800cff8:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cffa:	6801      	ldr	r1, [r0, #0]
 800cffc:	4a27      	ldr	r2, [pc, #156]	; (800d09c <SPI_CloseTransfer+0xc4>)
 800cffe:	690c      	ldr	r4, [r1, #16]
 800d000:	4022      	ands	r2, r4
 800d002:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d004:	6801      	ldr	r1, [r0, #0]
 800d006:	688a      	ldr	r2, [r1, #8]
 800d008:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d00c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d00e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800d012:	2a04      	cmp	r2, #4
 800d014:	d001      	beq.n	800d01a <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d016:	069c      	lsls	r4, r3, #26
 800d018:	d433      	bmi.n	800d082 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d01a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800d01e:	2a03      	cmp	r2, #3
 800d020:	d001      	beq.n	800d026 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d022:	0659      	lsls	r1, r3, #25
 800d024:	d421      	bmi.n	800d06a <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d026:	059a      	lsls	r2, r3, #22
 800d028:	d50a      	bpl.n	800d040 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d02a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d02e:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d030:	f042 0201 	orr.w	r2, r2, #1
 800d034:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d038:	698a      	ldr	r2, [r1, #24]
 800d03a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d03e:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d040:	05db      	lsls	r3, r3, #23
 800d042:	d50a      	bpl.n	800d05a <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d044:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d048:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d04a:	f043 0308 	orr.w	r3, r3, #8
 800d04e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d052:	6993      	ldr	r3, [r2, #24]
 800d054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d058:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d05a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800d05c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800d060:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d064:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800d068:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d06a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d06e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d070:	f042 0204 	orr.w	r2, r2, #4
 800d074:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d078:	698a      	ldr	r2, [r1, #24]
 800d07a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d07e:	618a      	str	r2, [r1, #24]
 800d080:	e7d1      	b.n	800d026 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d082:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d086:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d088:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d08c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d090:	698a      	ldr	r2, [r1, #24]
 800d092:	f042 0220 	orr.w	r2, r2, #32
 800d096:	618a      	str	r2, [r1, #24]
 800d098:	e7bf      	b.n	800d01a <SPI_CloseTransfer+0x42>
 800d09a:	bf00      	nop
 800d09c:	fffffc90 	.word	0xfffffc90

0800d0a0 <HAL_SPI_Init>:
  if (hspi == NULL)
 800d0a0:	2800      	cmp	r0, #0
 800d0a2:	f000 80be 	beq.w	800d222 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d0a6:	4a62      	ldr	r2, [pc, #392]	; (800d230 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0a8:	2100      	movs	r1, #0
{
 800d0aa:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d0ac:	6803      	ldr	r3, [r0, #0]
 800d0ae:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0b0:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d015      	beq.n	800d0e2 <HAL_SPI_Init+0x42>
 800d0b6:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d011      	beq.n	800d0e2 <HAL_SPI_Init+0x42>
 800d0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	68c2      	ldr	r2, [r0, #12]
 800d0c6:	f000 80a5 	beq.w	800d214 <HAL_SPI_Init+0x174>
 800d0ca:	2a0f      	cmp	r2, #15
 800d0cc:	d807      	bhi.n	800d0de <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0ce:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d0d0:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0d2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d0d4:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800d0d6:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d0da:	2a08      	cmp	r2, #8
 800d0dc:	d914      	bls.n	800d108 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800d0de:	2001      	movs	r0, #1
}
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800d0e2:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800d0e6:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d0e8:	4d51      	ldr	r5, [pc, #324]	; (800d230 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0ea:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 800d0ec:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d0ee:	4951      	ldr	r1, [pc, #324]	; (800d234 <HAL_SPI_Init+0x194>)
 800d0f0:	428b      	cmp	r3, r1
 800d0f2:	bf18      	it	ne
 800d0f4:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800d0f6:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d0fa:	d003      	beq.n	800d104 <HAL_SPI_Init+0x64>
 800d0fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d100:	428b      	cmp	r3, r1
 800d102:	d101      	bne.n	800d108 <HAL_SPI_Init+0x68>
 800d104:	2a10      	cmp	r2, #16
 800d106:	d8ea      	bhi.n	800d0de <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800d108:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d10c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800d110:	2a00      	cmp	r2, #0
 800d112:	d078      	beq.n	800d206 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800d114:	2202      	movs	r2, #2
 800d116:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	f022 0201 	bic.w	r2, r2, #1
 800d120:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d122:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d124:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d126:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d128:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800d12c:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d12e:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d132:	d058      	beq.n	800d1e6 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d134:	0258      	lsls	r0, r3, #9
 800d136:	d502      	bpl.n	800d13e <HAL_SPI_Init+0x9e>
 800d138:	68e3      	ldr	r3, [r4, #12]
 800d13a:	2b06      	cmp	r3, #6
 800d13c:	d84c      	bhi.n	800d1d8 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d13e:	6813      	ldr	r3, [r2, #0]
 800d140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d144:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d146:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d148:	69e3      	ldr	r3, [r4, #28]
 800d14a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d14c:	432b      	orrs	r3, r5
 800d14e:	6822      	ldr	r2, [r4, #0]
 800d150:	4303      	orrs	r3, r0
 800d152:	68e0      	ldr	r0, [r4, #12]
 800d154:	4303      	orrs	r3, r0
 800d156:	430b      	orrs	r3, r1
 800d158:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d15a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d15c:	69a0      	ldr	r0, [r4, #24]
 800d15e:	6822      	ldr	r2, [r4, #0]
 800d160:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800d164:	432b      	orrs	r3, r5
 800d166:	430b      	orrs	r3, r1
 800d168:	6921      	ldr	r1, [r4, #16]
 800d16a:	4303      	orrs	r3, r0
 800d16c:	6960      	ldr	r0, [r4, #20]
 800d16e:	430b      	orrs	r3, r1
 800d170:	6a21      	ldr	r1, [r4, #32]
 800d172:	4303      	orrs	r3, r0
 800d174:	6860      	ldr	r0, [r4, #4]
 800d176:	430b      	orrs	r3, r1
 800d178:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d17a:	4303      	orrs	r3, r0
 800d17c:	68a0      	ldr	r0, [r4, #8]
 800d17e:	430b      	orrs	r3, r1
 800d180:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d182:	4303      	orrs	r3, r0
 800d184:	430b      	orrs	r3, r1
 800d186:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d188:	430b      	orrs	r3, r1
 800d18a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d18c:	6863      	ldr	r3, [r4, #4]
 800d18e:	b96b      	cbnz	r3, 800d1ac <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d190:	6822      	ldr	r2, [r4, #0]
 800d192:	6893      	ldr	r3, [r2, #8]
 800d194:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800d198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d19c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d19e:	6822      	ldr	r2, [r4, #0]
 800d1a0:	6893      	ldr	r3, [r2, #8]
 800d1a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800d1a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d1aa:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1ac:	6822      	ldr	r2, [r4, #0]
 800d1ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d1b0:	f023 0301 	bic.w	r3, r3, #1
 800d1b4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d1b6:	6863      	ldr	r3, [r4, #4]
 800d1b8:	025b      	lsls	r3, r3, #9
 800d1ba:	d506      	bpl.n	800d1ca <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d1bc:	6822      	ldr	r2, [r4, #0]
 800d1be:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800d1c0:	68d3      	ldr	r3, [r2, #12]
 800d1c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d1c6:	430b      	orrs	r3, r1
 800d1c8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1ca:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800d1cc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1ce:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d1d2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d1d8:	6813      	ldr	r3, [r2, #0]
 800d1da:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d1dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1e0:	4303      	orrs	r3, r0
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	e7af      	b.n	800d146 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d1ea:	d01c      	beq.n	800d226 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1a1      	bne.n	800d134 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d1f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d1f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1f6:	d1a2      	bne.n	800d13e <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d1f8:	6813      	ldr	r3, [r2, #0]
 800d1fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d1fe:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d200:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d204:	e796      	b.n	800d134 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800d206:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d208:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800d20c:	f7f9 fa40 	bl	8006690 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800d210:	6823      	ldr	r3, [r4, #0]
 800d212:	e77f      	b.n	800d114 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d214:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800d216:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d218:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800d21a:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800d21c:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d220:	e770      	b.n	800d104 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800d222:	2001      	movs	r0, #1
}
 800d224:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d0e5      	beq.n	800d1f8 <HAL_SPI_Init+0x158>
 800d22c:	e784      	b.n	800d138 <HAL_SPI_Init+0x98>
 800d22e:	bf00      	nop
 800d230:	40013000 	.word	0x40013000
 800d234:	40003800 	.word	0x40003800

0800d238 <HAL_SPI_Receive_DMA>:
{
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800d23a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800d23e:	2b01      	cmp	r3, #1
 800d240:	f000 80a9 	beq.w	800d396 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d244:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d248:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800d24a:	2201      	movs	r2, #1
 800d24c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d24e:	b2de      	uxtb	r6, r3
 800d250:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800d252:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800d256:	f040 8093 	bne.w	800d380 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800d25a:	2900      	cmp	r1, #0
 800d25c:	f000 808b 	beq.w	800d376 <HAL_SPI_Receive_DMA+0x13e>
 800d260:	fab5 f385 	clz	r3, r5
 800d264:	095b      	lsrs	r3, r3, #5
 800d266:	2d00      	cmp	r5, #0
 800d268:	f000 8085 	beq.w	800d376 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d26c:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d26e:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d270:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d272:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800d276:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d27a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800d27e:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d280:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d284:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800d288:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d28c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800d290:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d294:	d07a      	beq.n	800d38c <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800d296:	68d3      	ldr	r3, [r2, #12]
 800d298:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800d29c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d2a0:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d2a2:	68e3      	ldr	r3, [r4, #12]
 800d2a4:	2b0f      	cmp	r3, #15
 800d2a6:	d861      	bhi.n	800d36c <HAL_SPI_Receive_DMA+0x134>
 800d2a8:	2b07      	cmp	r3, #7
 800d2aa:	f200 8092 	bhi.w	800d3d2 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	6893      	ldr	r3, [r2, #8]
 800d2b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2b6:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d2b8:	68e3      	ldr	r3, [r4, #12]
 800d2ba:	2b07      	cmp	r3, #7
 800d2bc:	d86e      	bhi.n	800d39c <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d2be:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d2c0:	699a      	ldr	r2, [r3, #24]
 800d2c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800d2c6:	d107      	bne.n	800d2d8 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d2c8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d2cc:	b292      	uxth	r2, r2
 800d2ce:	3201      	adds	r2, #1
 800d2d0:	0852      	lsrs	r2, r2, #1
 800d2d2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d2d6:	699a      	ldr	r2, [r3, #24]
 800d2d8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d2dc:	d106      	bne.n	800d2ec <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800d2de:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d2e2:	b292      	uxth	r2, r2
 800d2e4:	3203      	adds	r2, #3
 800d2e6:	0892      	lsrs	r2, r2, #2
 800d2e8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d2ec:	4a3e      	ldr	r2, [pc, #248]	; (800d3e8 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800d2ee:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d2f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800d2f2:	4a3e      	ldr	r2, [pc, #248]	; (800d3ec <HAL_SPI_Receive_DMA+0x1b4>)
 800d2f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d2f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d2f8:	4a3d      	ldr	r2, [pc, #244]	; (800d3f0 <HAL_SPI_Receive_DMA+0x1b8>)
 800d2fa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d2fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800d2fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d300:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800d302:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800d306:	6821      	ldr	r1, [r4, #0]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d30c:	3130      	adds	r1, #48	; 0x30
 800d30e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d310:	f7fa f88e 	bl	8007430 <HAL_DMA_Start_IT>
 800d314:	2800      	cmp	r0, #0
 800d316:	d150      	bne.n	800d3ba <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d318:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d31a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d31c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d31e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800d324:	4b33      	ldr	r3, [pc, #204]	; (800d3f4 <HAL_SPI_Receive_DMA+0x1bc>)
 800d326:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d32a:	bf18      	it	ne
 800d32c:	432b      	orrne	r3, r5
 800d32e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800d330:	6822      	ldr	r2, [r4, #0]
 800d332:	6893      	ldr	r3, [r2, #8]
 800d334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d338:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d33a:	6822      	ldr	r2, [r4, #0]
 800d33c:	6913      	ldr	r3, [r2, #16]
 800d33e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800d342:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800d344:	6822      	ldr	r2, [r4, #0]
 800d346:	6813      	ldr	r3, [r2, #0]
 800d348:	f043 0301 	orr.w	r3, r3, #1
 800d34c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d354:	d104      	bne.n	800d360 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d356:	6822      	ldr	r2, [r4, #0]
 800d358:	6813      	ldr	r3, [r2, #0]
 800d35a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d35e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800d360:	2300      	movs	r3, #0
  return errorcode;
 800d362:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800d364:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800d368:	4630      	mov	r0, r6
 800d36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800d36c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d374:	d09b      	beq.n	800d2ae <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800d376:	2300      	movs	r3, #0
 800d378:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800d37c:	4630      	mov	r0, r6
 800d37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800d380:	2300      	movs	r3, #0
    return errorcode;
 800d382:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800d384:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800d388:	4630      	mov	r0, r6
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800d38c:	6813      	ldr	r3, [r2, #0]
 800d38e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	e785      	b.n	800d2a2 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800d396:	2602      	movs	r6, #2
}
 800d398:	4630      	mov	r0, r6
 800d39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d39c:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d39e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800d3a0:	d8a4      	bhi.n	800d2ec <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800d3a2:	699a      	ldr	r2, [r3, #24]
 800d3a4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800d3a8:	d1a0      	bne.n	800d2ec <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800d3aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800d3ae:	b292      	uxth	r2, r2
 800d3b0:	3201      	adds	r2, #1
 800d3b2:	0852      	lsrs	r2, r2, #1
 800d3b4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800d3b8:	e798      	b.n	800d2ec <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d3be:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800d3c0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d3c4:	f043 0310 	orr.w	r3, r3, #16
 800d3c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d3cc:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800d3d0:	e7d4      	b.n	800d37c <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800d3d2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3da:	f43f af68 	beq.w	800d2ae <HAL_SPI_Receive_DMA+0x76>
 800d3de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3e2:	d1c8      	bne.n	800d376 <HAL_SPI_Receive_DMA+0x13e>
 800d3e4:	e763      	b.n	800d2ae <HAL_SPI_Receive_DMA+0x76>
 800d3e6:	bf00      	nop
 800d3e8:	0800d429 	.word	0x0800d429
 800d3ec:	0800d3fd 	.word	0x0800d3fd
 800d3f0:	0800d439 	.word	0x0800d439
 800d3f4:	ffff0000 	.word	0xffff0000

0800d3f8 <HAL_SPI_TxCpltCallback>:
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop

0800d3fc <SPI_DMAReceiveCplt>:
{
 800d3fc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800d400:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800d404:	2b07      	cmp	r3, #7
 800d406:	d009      	beq.n	800d41c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d408:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800d40a:	69db      	ldr	r3, [r3, #28]
 800d40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d410:	d005      	beq.n	800d41e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800d412:	6802      	ldr	r2, [r0, #0]
 800d414:	6913      	ldr	r3, [r2, #16]
 800d416:	f043 0308 	orr.w	r3, r3, #8
 800d41a:	6113      	str	r3, [r2, #16]
}
 800d41c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800d41e:	f7f6 f937 	bl	8003690 <HAL_SPI_RxCpltCallback>
}
 800d422:	bd08      	pop	{r3, pc}

0800d424 <HAL_SPI_TxRxCpltCallback>:
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop

0800d428 <SPI_DMAHalfReceiveCplt>:
{
 800d428:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d42a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d42c:	f7f6 fa4c 	bl	80038c8 <HAL_SPI_RxHalfCpltCallback>
}
 800d430:	bd08      	pop	{r3, pc}
 800d432:	bf00      	nop

0800d434 <HAL_SPI_ErrorCallback>:
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop

0800d438 <SPI_DMAError>:
{
 800d438:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d43a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d43c:	f7fb f85c 	bl	80084f8 <HAL_DMA_GetError>
 800d440:	2802      	cmp	r0, #2
 800d442:	d100      	bne.n	800d446 <SPI_DMAError+0xe>
}
 800d444:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800d446:	6822      	ldr	r2, [r4, #0]
 800d448:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d44a:	6991      	ldr	r1, [r2, #24]
 800d44c:	f041 0108 	orr.w	r1, r1, #8
 800d450:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d452:	6821      	ldr	r1, [r4, #0]
 800d454:	698a      	ldr	r2, [r1, #24]
 800d456:	f042 0210 	orr.w	r2, r2, #16
 800d45a:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800d45c:	6821      	ldr	r1, [r4, #0]
 800d45e:	680a      	ldr	r2, [r1, #0]
 800d460:	f022 0201 	bic.w	r2, r2, #1
 800d464:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d466:	6821      	ldr	r1, [r4, #0]
 800d468:	4a2c      	ldr	r2, [pc, #176]	; (800d51c <SPI_DMAError+0xe4>)
 800d46a:	6908      	ldr	r0, [r1, #16]
 800d46c:	4002      	ands	r2, r0
 800d46e:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d470:	6821      	ldr	r1, [r4, #0]
 800d472:	688a      	ldr	r2, [r1, #8]
 800d474:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d478:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d47a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d47e:	2a04      	cmp	r2, #4
 800d480:	d001      	beq.n	800d486 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d482:	0698      	lsls	r0, r3, #26
 800d484:	d43d      	bmi.n	800d502 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d486:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800d48a:	2a03      	cmp	r2, #3
 800d48c:	d001      	beq.n	800d492 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d48e:	0659      	lsls	r1, r3, #25
 800d490:	d42b      	bmi.n	800d4ea <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d492:	059a      	lsls	r2, r3, #22
 800d494:	d50a      	bpl.n	800d4ac <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d496:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d49a:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d49c:	f042 0201 	orr.w	r2, r2, #1
 800d4a0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d4a4:	698a      	ldr	r2, [r1, #24]
 800d4a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4aa:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d4ac:	05db      	lsls	r3, r3, #23
 800d4ae:	d50a      	bpl.n	800d4c6 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d4b0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d4b4:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d4b6:	f043 0308 	orr.w	r3, r3, #8
 800d4ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d4be:	6993      	ldr	r3, [r2, #24]
 800d4c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4c4:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800d4c6:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800d4c8:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800d4ca:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800d4cc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d4d0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d4d8:	f043 0310 	orr.w	r3, r3, #16
 800d4dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800d4e0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800d4e4:	f7ff ffa6 	bl	800d434 <HAL_SPI_ErrorCallback>
}
 800d4e8:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4ee:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d4f0:	f042 0204 	orr.w	r2, r2, #4
 800d4f4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d4f8:	698a      	ldr	r2, [r1, #24]
 800d4fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4fe:	618a      	str	r2, [r1, #24]
 800d500:	e7c7      	b.n	800d492 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d502:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d506:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d50c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d510:	698a      	ldr	r2, [r1, #24]
 800d512:	f042 0220 	orr.w	r2, r2, #32
 800d516:	618a      	str	r2, [r1, #24]
 800d518:	e7b5      	b.n	800d486 <SPI_DMAError+0x4e>
 800d51a:	bf00      	nop
 800d51c:	fffffc90 	.word	0xfffffc90

0800d520 <SPI_DMAAbortOnError>:
{
 800d520:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800d522:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d524:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800d526:	2300      	movs	r3, #0
 800d528:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d52c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800d530:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800d534:	f7ff ff7e 	bl	800d434 <HAL_SPI_ErrorCallback>
}
 800d538:	bd08      	pop	{r3, pc}
 800d53a:	bf00      	nop

0800d53c <HAL_SPI_SuspendCallback>:
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop

0800d540 <HAL_SPI_IRQHandler>:
{
 800d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800d544:	6802      	ldr	r2, [r0, #0]
{
 800d546:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800d548:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800d54a:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800d54c:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800d54e:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800d552:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d556:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800d558:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800d55a:	d502      	bpl.n	800d562 <HAL_SPI_IRQHandler+0x22>
 800d55c:	0709      	lsls	r1, r1, #28
 800d55e:	f100 80e2 	bmi.w	800d726 <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800d562:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800d566:	2b04      	cmp	r3, #4
 800d568:	d045      	beq.n	800d5f6 <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d56a:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d04b      	beq.n	800d60a <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d572:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800d576:	2b02      	cmp	r3, #2
 800d578:	f000 80ec 	beq.w	800d754 <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800d57c:	072b      	lsls	r3, r5, #28
 800d57e:	d564      	bpl.n	800d64a <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d580:	6993      	ldr	r3, [r2, #24]
 800d582:	f043 0308 	orr.w	r3, r3, #8
 800d586:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d588:	6821      	ldr	r1, [r4, #0]
 800d58a:	698b      	ldr	r3, [r1, #24]
 800d58c:	f043 0310 	orr.w	r3, r3, #16
 800d590:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d592:	6821      	ldr	r1, [r4, #0]
 800d594:	698b      	ldr	r3, [r1, #24]
 800d596:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d59a:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800d59c:	6821      	ldr	r1, [r4, #0]
 800d59e:	690b      	ldr	r3, [r1, #16]
 800d5a0:	f023 0308 	bic.w	r3, r3, #8
 800d5a4:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800d5ae:	d136      	bne.n	800d61e <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 800d5b0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d031      	beq.n	800d61e <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d5ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d5bc:	e00f      	b.n	800d5de <HAL_SPI_IRQHandler+0x9e>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c2:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d5c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d5c6:	3104      	adds	r1, #4
 800d5c8:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800d5ca:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800d5d6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	b1fb      	cbz	r3, 800d61e <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d5de:	68e3      	ldr	r3, [r4, #12]
 800d5e0:	2b0f      	cmp	r3, #15
 800d5e2:	d8ec      	bhi.n	800d5be <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d5e4:	2b07      	cmp	r3, #7
 800d5e6:	f240 80ad 	bls.w	800d744 <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d5ea:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800d5ec:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d5ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d5f0:	3102      	adds	r1, #2
 800d5f2:	6661      	str	r1, [r4, #100]	; 0x64
 800d5f4:	e7e9      	b.n	800d5ca <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d5fa:	4798      	blx	r3
    hspi->RxISR(hspi);
 800d5fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d5fe:	4620      	mov	r0, r4
 800d600:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800d602:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800d606:	2b01      	cmp	r3, #1
 800d608:	d102      	bne.n	800d610 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 800d60a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d60c:	4620      	mov	r0, r4
 800d60e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800d610:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800d614:	2d02      	cmp	r5, #2
 800d616:	f000 809d 	beq.w	800d754 <HAL_SPI_IRQHandler+0x214>
}
 800d61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800d61e:	4620      	mov	r0, r4
 800d620:	f7ff fcda 	bl	800cfd8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800d624:	2301      	movs	r3, #1
 800d626:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d62a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f040 8085 	bne.w	800d73e <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800d634:	2e05      	cmp	r6, #5
 800d636:	f000 8092 	beq.w	800d75e <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800d63a:	2e04      	cmp	r6, #4
 800d63c:	f000 8092 	beq.w	800d764 <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800d640:	2e03      	cmp	r6, #3
 800d642:	d1ea      	bne.n	800d61a <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 800d644:	f7ff fed8 	bl	800d3f8 <HAL_SPI_TxCpltCallback>
 800d648:	e7e7      	b.n	800d61a <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800d64a:	f415 7f58 	tst.w	r5, #864	; 0x360
 800d64e:	d0e4      	beq.n	800d61a <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800d650:	0668      	lsls	r0, r5, #25
 800d652:	d509      	bpl.n	800d668 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d654:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d658:	f043 0304 	orr.w	r3, r3, #4
 800d65c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d660:	6993      	ldr	r3, [r2, #24]
 800d662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d666:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800d668:	05a9      	lsls	r1, r5, #22
 800d66a:	d50a      	bpl.n	800d682 <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d66c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d670:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d672:	f043 0301 	orr.w	r3, r3, #1
 800d676:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d67a:	6993      	ldr	r3, [r2, #24]
 800d67c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d680:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800d682:	05ea      	lsls	r2, r5, #23
 800d684:	d50a      	bpl.n	800d69c <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d686:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d68a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d68c:	f043 0308 	orr.w	r3, r3, #8
 800d690:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d694:	6993      	ldr	r3, [r2, #24]
 800d696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d69a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800d69c:	06ab      	lsls	r3, r5, #26
 800d69e:	d50a      	bpl.n	800d6b6 <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6a4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6ae:	6993      	ldr	r3, [r2, #24]
 800d6b0:	f043 0320 	orr.w	r3, r3, #32
 800d6b4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0ad      	beq.n	800d61a <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 800d6be:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d6c0:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800d6c4:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d6c6:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800d6ca:	f023 0301 	bic.w	r3, r3, #1
 800d6ce:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800d6d0:	6822      	ldr	r2, [r4, #0]
 800d6d2:	4b26      	ldr	r3, [pc, #152]	; (800d76c <HAL_SPI_IRQHandler+0x22c>)
 800d6d4:	6911      	ldr	r1, [r2, #16]
 800d6d6:	ea03 0301 	and.w	r3, r3, r1
 800d6da:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800d6dc:	d12b      	bne.n	800d736 <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	6893      	ldr	r3, [r2, #8]
 800d6e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800d6e6:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800d6e8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d6ea:	b15b      	cbz	r3, 800d704 <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d6ec:	4a20      	ldr	r2, [pc, #128]	; (800d770 <HAL_SPI_IRQHandler+0x230>)
 800d6ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d6f0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d6f2:	f7fa f969 	bl	80079c8 <HAL_DMA_Abort_IT>
 800d6f6:	b128      	cbz	r0, 800d704 <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d6f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d700:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800d704:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d706:	2b00      	cmp	r3, #0
 800d708:	d087      	beq.n	800d61a <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d70a:	4a19      	ldr	r2, [pc, #100]	; (800d770 <HAL_SPI_IRQHandler+0x230>)
 800d70c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d70e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d710:	f7fa f95a 	bl	80079c8 <HAL_DMA_Abort_IT>
 800d714:	2800      	cmp	r0, #0
 800d716:	d080      	beq.n	800d61a <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d718:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d720:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800d724:	e779      	b.n	800d61a <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800d726:	6993      	ldr	r3, [r2, #24]
 800d728:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d72c:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800d72e:	f7ff ff05 	bl	800d53c <HAL_SPI_SuspendCallback>
}
 800d732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800d736:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800d738:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800d73a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800d73e:	f7ff fe79 	bl	800d434 <HAL_SPI_ErrorCallback>
 800d742:	e76a      	b.n	800d61a <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d74a:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d74c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d74e:	3101      	adds	r1, #1
 800d750:	6661      	str	r1, [r4, #100]	; 0x64
 800d752:	e73a      	b.n	800d5ca <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800d754:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d756:	4620      	mov	r0, r4
}
 800d758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800d75c:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800d75e:	f7ff fe61 	bl	800d424 <HAL_SPI_TxRxCpltCallback>
 800d762:	e75a      	b.n	800d61a <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 800d764:	f7f5 ff94 	bl	8003690 <HAL_SPI_RxCpltCallback>
 800d768:	e757      	b.n	800d61a <HAL_SPI_IRQHandler+0xda>
 800d76a:	bf00      	nop
 800d76c:	fffffc94 	.word	0xfffffc94
 800d770:	0800d521 	.word	0x0800d521

0800d774 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d774:	680b      	ldr	r3, [r1, #0]
{
 800d776:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d778:	b9d3      	cbnz	r3, 800d7b0 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d77a:	6804      	ldr	r4, [r0, #0]
 800d77c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800d780:	684a      	ldr	r2, [r1, #4]
 800d782:	4023      	ands	r3, r4
 800d784:	4313      	orrs	r3, r2
 800d786:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800d78a:	4323      	orrs	r3, r4
 800d78c:	4313      	orrs	r3, r2
 800d78e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800d792:	4323      	orrs	r3, r4
 800d794:	4313      	orrs	r3, r2
 800d796:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800d79a:	4323      	orrs	r3, r4
 800d79c:	4313      	orrs	r3, r2
 800d79e:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800d7a2:	4323      	orrs	r3, r4
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ae:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d7b0:	6802      	ldr	r2, [r0, #0]
 800d7b2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800d7b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800d7ba:	4322      	orrs	r2, r4
 800d7bc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800d7be:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d7c2:	4322      	orrs	r2, r4
 800d7c4:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d7c6:	6842      	ldr	r2, [r0, #4]
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800d7ce:	4323      	orrs	r3, r4
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800d7d6:	4323      	orrs	r3, r4
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800d7de:	4323      	orrs	r3, r4
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	6043      	str	r3, [r0, #4]
}
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	ffff8000 	.word	0xffff8000

0800d7f0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d7f0:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d7f2:	bb02      	cbnz	r2, 800d836 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d7f4:	6883      	ldr	r3, [r0, #8]
 800d7f6:	e9d1 2400 	ldrd	r2, r4, [r1]
 800d7fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d7fe:	3c01      	subs	r4, #1
 800d800:	3a01      	subs	r2, #1
 800d802:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800d806:	4313      	orrs	r3, r2
 800d808:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800d80c:	3a01      	subs	r2, #1
 800d80e:	3c01      	subs	r4, #1
 800d810:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d814:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 800d818:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 800d81c:	6989      	ldr	r1, [r1, #24]
 800d81e:	3b01      	subs	r3, #1
 800d820:	3c01      	subs	r4, #1
 800d822:	3901      	subs	r1, #1
 800d824:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800d828:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800d82c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d830:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800d832:	2000      	movs	r0, #0
 800d834:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d836:	6885      	ldr	r5, [r0, #8]
 800d838:	68ca      	ldr	r2, [r1, #12]
 800d83a:	4b13      	ldr	r3, [pc, #76]	; (800d888 <FMC_SDRAM_Timing_Init+0x98>)
 800d83c:	1e54      	subs	r4, r2, #1
 800d83e:	694a      	ldr	r2, [r1, #20]
 800d840:	402b      	ands	r3, r5
 800d842:	3a01      	subs	r2, #1
 800d844:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800d848:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800d84c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d84e:	68c3      	ldr	r3, [r0, #12]
 800d850:	e9d1 4200 	ldrd	r4, r2, [r1]
 800d854:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d858:	3a01      	subs	r2, #1
 800d85a:	3c01      	subs	r4, #1
 800d85c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d860:	ea43 0204 	orr.w	r2, r3, r4
 800d864:	688c      	ldr	r4, [r1, #8]
 800d866:	690b      	ldr	r3, [r1, #16]
 800d868:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800d86c:	6989      	ldr	r1, [r1, #24]
 800d86e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800d872:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 800d876:	3901      	subs	r1, #1
 800d878:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d87c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800d880:	60c3      	str	r3, [r0, #12]
}
 800d882:	2000      	movs	r0, #0
 800d884:	bd30      	pop	{r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	ff0f0fff 	.word	0xff0f0fff

0800d88c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d88c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d88e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800d892:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d894:	6900      	ldr	r0, [r0, #16]
 800d896:	4323      	orrs	r3, r4
 800d898:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800d89c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800d8a0:	4c05      	ldr	r4, [pc, #20]	; (800d8b8 <FMC_SDRAM_SendCommand+0x2c>)
 800d8a2:	3901      	subs	r1, #1
 800d8a4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800d8a6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d8a8:	4323      	orrs	r3, r4
 800d8aa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800d8ae:	6113      	str	r3, [r2, #16]
}
 800d8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	ffc00000 	.word	0xffc00000

0800d8bc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d8bc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d8be:	4b05      	ldr	r3, [pc, #20]	; (800d8d4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800d8c0:	2000      	movs	r0, #0
{
 800d8c2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d8c4:	6954      	ldr	r4, [r2, #20]
 800d8c6:	4023      	ands	r3, r4
 800d8c8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800d8cc:	6151      	str	r1, [r2, #20]
}
 800d8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8d2:	4770      	bx	lr
 800d8d4:	ffffc001 	.word	0xffffc001

0800d8d8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d8d8:	b084      	sub	sp, #16
 800d8da:	b410      	push	{r4}
 800d8dc:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d8e0:	4614      	mov	r4, r2
{
 800d8e2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800d8e6:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800d8e8:	9904      	ldr	r1, [sp, #16]
{
 800d8ea:	4602      	mov	r2, r0
             Init.BusWide             | \
 800d8ec:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800d8ee:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d8f0:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800d8f2:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800d8f4:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800d8f6:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800d8f8:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800d8fa:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d8fc:	4903      	ldr	r1, [pc, #12]	; (800d90c <SDMMC_Init+0x34>)
 800d8fe:	4021      	ands	r1, r4
 800d900:	430b      	orrs	r3, r1
 800d902:	6053      	str	r3, [r2, #4]
}
 800d904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d908:	b004      	add	sp, #16
 800d90a:	4770      	bx	lr
 800d90c:	ffc02c00 	.word	0xffc02c00

0800d910 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d910:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop

0800d918 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d918:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d91a:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800d91c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800d91e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d922:	4770      	bx	lr

0800d924 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d924:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800d926:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	f042 0203 	orr.w	r2, r2, #3
 800d92e:	601a      	str	r2, [r3, #0]
}
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop

0800d934 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d934:	6800      	ldr	r0, [r0, #0]
}
 800d936:	f000 0003 	and.w	r0, r0, #3
 800d93a:	4770      	bx	lr

0800d93c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d93c:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800d93e:	5840      	ldr	r0, [r0, r1]
}
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop

0800d944 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d944:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d946:	680b      	ldr	r3, [r1, #0]
{
 800d948:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d94a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d94c:	684b      	ldr	r3, [r1, #4]
 800d94e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800d950:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d952:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d954:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800d958:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800d95a:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d95c:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800d960:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800d962:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800d964:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d966:	430b      	orrs	r3, r1
 800d968:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800d96a:	bc30      	pop	{r4, r5}
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop

0800d970 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d970:	4a4c      	ldr	r2, [pc, #304]	; (800daa4 <SDMMC_CmdBlockLength+0x134>)
 800d972:	4b4d      	ldr	r3, [pc, #308]	; (800daa8 <SDMMC_CmdBlockLength+0x138>)
{
 800d974:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d976:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800d978:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d97a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d97e:	68c1      	ldr	r1, [r0, #12]
 800d980:	4c4a      	ldr	r4, [pc, #296]	; (800daac <SDMMC_CmdBlockLength+0x13c>)
 800d982:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d986:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d988:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d98a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d98e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d990:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d994:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800d996:	b14a      	cbz	r2, 800d9ac <SDMMC_CmdBlockLength+0x3c>
 800d998:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d99a:	4945      	ldr	r1, [pc, #276]	; (800dab0 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 800d99c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800d99e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d9a0:	420a      	tst	r2, r1
 800d9a2:	d001      	beq.n	800d9a8 <SDMMC_CmdBlockLength+0x38>
 800d9a4:	0492      	lsls	r2, r2, #18
 800d9a6:	d507      	bpl.n	800d9b8 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 800d9a8:	1c5c      	adds	r4, r3, #1
 800d9aa:	d1f7      	bne.n	800d99c <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800d9ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b6:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9ba:	075c      	lsls	r4, r3, #29
 800d9bc:	d43d      	bmi.n	800da3a <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9c0:	f013 0301 	ands.w	r3, r3, #1
 800d9c4:	d134      	bne.n	800da30 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9c6:	4b3b      	ldr	r3, [pc, #236]	; (800dab4 <SDMMC_CmdBlockLength+0x144>)
 800d9c8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800d9ca:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b10      	cmp	r3, #16
 800d9d0:	d131      	bne.n	800da36 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 800d9d2:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d9d4:	4b38      	ldr	r3, [pc, #224]	; (800dab8 <SDMMC_CmdBlockLength+0x148>)
 800d9d6:	4013      	ands	r3, r2
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d0e9      	beq.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	db30      	blt.n	800da42 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9e0:	0051      	lsls	r1, r2, #1
 800d9e2:	d431      	bmi.n	800da48 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9e4:	0094      	lsls	r4, r2, #2
 800d9e6:	d431      	bmi.n	800da4c <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d9e8:	00d0      	lsls	r0, r2, #3
 800d9ea:	d431      	bmi.n	800da50 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d9ec:	0111      	lsls	r1, r2, #4
 800d9ee:	d432      	bmi.n	800da56 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d9f0:	0154      	lsls	r4, r2, #5
 800d9f2:	d433      	bmi.n	800da5c <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d9f4:	01d0      	lsls	r0, r2, #7
 800d9f6:	d434      	bmi.n	800da62 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d9f8:	0211      	lsls	r1, r2, #8
 800d9fa:	d435      	bmi.n	800da68 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d9fc:	0254      	lsls	r4, r2, #9
 800d9fe:	d436      	bmi.n	800da6e <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da00:	0290      	lsls	r0, r2, #10
 800da02:	d440      	bmi.n	800da86 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da04:	02d1      	lsls	r1, r2, #11
 800da06:	d43b      	bmi.n	800da80 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da08:	0354      	lsls	r4, r2, #13
 800da0a:	d436      	bmi.n	800da7a <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da0c:	0390      	lsls	r0, r2, #14
 800da0e:	d431      	bmi.n	800da74 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da10:	03d1      	lsls	r1, r2, #15
 800da12:	d444      	bmi.n	800da9e <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da14:	0414      	lsls	r4, r2, #16
 800da16:	d43f      	bmi.n	800da98 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da18:	0450      	lsls	r0, r2, #17
 800da1a:	d43a      	bmi.n	800da92 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800da1c:	0491      	lsls	r1, r2, #18
 800da1e:	d435      	bmi.n	800da8c <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800da20:	f012 0f08 	tst.w	r2, #8
 800da24:	bf14      	ite	ne
 800da26:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800da2a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800da2e:	e7bf      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da30:	2201      	movs	r2, #1
 800da32:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da34:	e7bc      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da36:	2301      	movs	r3, #1
 800da38:	e7ba      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da3a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da3c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da3e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da40:	e7b6      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da46:	e7b3      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da48:	2340      	movs	r3, #64	; 0x40
 800da4a:	e7b1      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da4c:	2380      	movs	r3, #128	; 0x80
 800da4e:	e7af      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da54:	e7ac      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800da56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da5a:	e7a9      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800da5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da60:	e7a6      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da66:	e7a3      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da6c:	e7a0      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da72:	e79d      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800da78:	e79a      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da7e:	e797      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 800da80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da84:	e794      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800da8a:	e791      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800da8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800da90:	e78e      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800da96:	e78b      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800da9c:	e788      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800daa2:	e785      	b.n	800d9b0 <SDMMC_CmdBlockLength+0x40>
 800daa4:	20000094 	.word	0x20000094
 800daa8:	10624dd3 	.word	0x10624dd3
 800daac:	fffee0c0 	.word	0xfffee0c0
 800dab0:	00200045 	.word	0x00200045
 800dab4:	002000c5 	.word	0x002000c5
 800dab8:	fdffe008 	.word	0xfdffe008

0800dabc <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dabc:	4a4c      	ldr	r2, [pc, #304]	; (800dbf0 <SDMMC_CmdReadSingleBlock+0x134>)
 800dabe:	4b4d      	ldr	r3, [pc, #308]	; (800dbf4 <SDMMC_CmdReadSingleBlock+0x138>)
{
 800dac0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dac2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800dac4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dac6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800daca:	68c1      	ldr	r1, [r0, #12]
 800dacc:	4c4a      	ldr	r4, [pc, #296]	; (800dbf8 <SDMMC_CmdReadSingleBlock+0x13c>)
 800dace:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dad2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dad4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dad6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dada:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dadc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dae0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dae2:	b14a      	cbz	r2, 800daf8 <SDMMC_CmdReadSingleBlock+0x3c>
 800dae4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dae6:	4945      	ldr	r1, [pc, #276]	; (800dbfc <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800dae8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800daea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800daec:	420a      	tst	r2, r1
 800daee:	d001      	beq.n	800daf4 <SDMMC_CmdReadSingleBlock+0x38>
 800daf0:	0492      	lsls	r2, r2, #18
 800daf2:	d507      	bpl.n	800db04 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 800daf4:	1c5c      	adds	r4, r3, #1
 800daf6:	d1f7      	bne.n	800dae8 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800daf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db02:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800db06:	075c      	lsls	r4, r3, #29
 800db08:	d43d      	bmi.n	800db86 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800db0c:	f013 0301 	ands.w	r3, r3, #1
 800db10:	d134      	bne.n	800db7c <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db12:	4b3b      	ldr	r3, [pc, #236]	; (800dc00 <SDMMC_CmdReadSingleBlock+0x144>)
 800db14:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800db16:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b11      	cmp	r3, #17
 800db1c:	d131      	bne.n	800db82 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800db1e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800db20:	4b38      	ldr	r3, [pc, #224]	; (800dc04 <SDMMC_CmdReadSingleBlock+0x148>)
 800db22:	4013      	ands	r3, r2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0e9      	beq.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800db28:	2a00      	cmp	r2, #0
 800db2a:	db30      	blt.n	800db8e <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800db2c:	0051      	lsls	r1, r2, #1
 800db2e:	d431      	bmi.n	800db94 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800db30:	0094      	lsls	r4, r2, #2
 800db32:	d431      	bmi.n	800db98 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800db34:	00d0      	lsls	r0, r2, #3
 800db36:	d431      	bmi.n	800db9c <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800db38:	0111      	lsls	r1, r2, #4
 800db3a:	d432      	bmi.n	800dba2 <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800db3c:	0154      	lsls	r4, r2, #5
 800db3e:	d433      	bmi.n	800dba8 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800db40:	01d0      	lsls	r0, r2, #7
 800db42:	d434      	bmi.n	800dbae <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800db44:	0211      	lsls	r1, r2, #8
 800db46:	d435      	bmi.n	800dbb4 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db48:	0254      	lsls	r4, r2, #9
 800db4a:	d436      	bmi.n	800dbba <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db4c:	0290      	lsls	r0, r2, #10
 800db4e:	d440      	bmi.n	800dbd2 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db50:	02d1      	lsls	r1, r2, #11
 800db52:	d43b      	bmi.n	800dbcc <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db54:	0354      	lsls	r4, r2, #13
 800db56:	d436      	bmi.n	800dbc6 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db58:	0390      	lsls	r0, r2, #14
 800db5a:	d431      	bmi.n	800dbc0 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db5c:	03d1      	lsls	r1, r2, #15
 800db5e:	d444      	bmi.n	800dbea <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db60:	0414      	lsls	r4, r2, #16
 800db62:	d43f      	bmi.n	800dbe4 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db64:	0450      	lsls	r0, r2, #17
 800db66:	d43a      	bmi.n	800dbde <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db68:	0491      	lsls	r1, r2, #18
 800db6a:	d435      	bmi.n	800dbd8 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db6c:	f012 0f08 	tst.w	r2, #8
 800db70:	bf14      	ite	ne
 800db72:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800db76:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800db7a:	e7bf      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db7c:	2201      	movs	r2, #1
 800db7e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db80:	e7bc      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db82:	2301      	movs	r3, #1
 800db84:	e7ba      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db86:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db88:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db8a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db8c:	e7b6      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800db8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db92:	e7b3      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800db94:	2340      	movs	r3, #64	; 0x40
 800db96:	e7b1      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800db98:	2380      	movs	r3, #128	; 0x80
 800db9a:	e7af      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800db9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dba0:	e7ac      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dba6:	e7a9      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbac:	e7a6      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dbae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbb2:	e7a3      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dbb8:	e7a0      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dbbe:	e79d      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dbc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dbc4:	e79a      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dbc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dbca:	e797      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800dbcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbd0:	e794      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dbd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dbd6:	e791      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800dbd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dbdc:	e78e      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dbde:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dbe2:	e78b      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dbe4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dbe8:	e788      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dbea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dbee:	e785      	b.n	800dafc <SDMMC_CmdReadSingleBlock+0x40>
 800dbf0:	20000094 	.word	0x20000094
 800dbf4:	10624dd3 	.word	0x10624dd3
 800dbf8:	fffee0c0 	.word	0xfffee0c0
 800dbfc:	00200045 	.word	0x00200045
 800dc00:	002000c5 	.word	0x002000c5
 800dc04:	fdffe008 	.word	0xfdffe008

0800dc08 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc08:	4a4c      	ldr	r2, [pc, #304]	; (800dd3c <SDMMC_CmdReadMultiBlock+0x134>)
 800dc0a:	4b4d      	ldr	r3, [pc, #308]	; (800dd40 <SDMMC_CmdReadMultiBlock+0x138>)
{
 800dc0c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc0e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800dc10:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc12:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc16:	68c1      	ldr	r1, [r0, #12]
 800dc18:	4c4a      	ldr	r4, [pc, #296]	; (800dd44 <SDMMC_CmdReadMultiBlock+0x13c>)
 800dc1a:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc1e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc20:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc22:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc26:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dc28:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dc2c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dc2e:	b14a      	cbz	r2, 800dc44 <SDMMC_CmdReadMultiBlock+0x3c>
 800dc30:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dc32:	4945      	ldr	r1, [pc, #276]	; (800dd48 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800dc34:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800dc36:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dc38:	420a      	tst	r2, r1
 800dc3a:	d001      	beq.n	800dc40 <SDMMC_CmdReadMultiBlock+0x38>
 800dc3c:	0492      	lsls	r2, r2, #18
 800dc3e:	d507      	bpl.n	800dc50 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 800dc40:	1c5c      	adds	r4, r3, #1
 800dc42:	d1f7      	bne.n	800dc34 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800dc44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc4e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc52:	075c      	lsls	r4, r3, #29
 800dc54:	d43d      	bmi.n	800dcd2 <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc58:	f013 0301 	ands.w	r3, r3, #1
 800dc5c:	d134      	bne.n	800dcc8 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc5e:	4b3b      	ldr	r3, [pc, #236]	; (800dd4c <SDMMC_CmdReadMultiBlock+0x144>)
 800dc60:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800dc62:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b12      	cmp	r3, #18
 800dc68:	d131      	bne.n	800dcce <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800dc6a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dc6c:	4b38      	ldr	r3, [pc, #224]	; (800dd50 <SDMMC_CmdReadMultiBlock+0x148>)
 800dc6e:	4013      	ands	r3, r2
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d0e9      	beq.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dc74:	2a00      	cmp	r2, #0
 800dc76:	db30      	blt.n	800dcda <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dc78:	0051      	lsls	r1, r2, #1
 800dc7a:	d431      	bmi.n	800dce0 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dc7c:	0094      	lsls	r4, r2, #2
 800dc7e:	d431      	bmi.n	800dce4 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800dc80:	00d0      	lsls	r0, r2, #3
 800dc82:	d431      	bmi.n	800dce8 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dc84:	0111      	lsls	r1, r2, #4
 800dc86:	d432      	bmi.n	800dcee <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dc88:	0154      	lsls	r4, r2, #5
 800dc8a:	d433      	bmi.n	800dcf4 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dc8c:	01d0      	lsls	r0, r2, #7
 800dc8e:	d434      	bmi.n	800dcfa <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dc90:	0211      	lsls	r1, r2, #8
 800dc92:	d435      	bmi.n	800dd00 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dc94:	0254      	lsls	r4, r2, #9
 800dc96:	d436      	bmi.n	800dd06 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dc98:	0290      	lsls	r0, r2, #10
 800dc9a:	d440      	bmi.n	800dd1e <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dc9c:	02d1      	lsls	r1, r2, #11
 800dc9e:	d43b      	bmi.n	800dd18 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800dca0:	0354      	lsls	r4, r2, #13
 800dca2:	d436      	bmi.n	800dd12 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800dca4:	0390      	lsls	r0, r2, #14
 800dca6:	d431      	bmi.n	800dd0c <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800dca8:	03d1      	lsls	r1, r2, #15
 800dcaa:	d444      	bmi.n	800dd36 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800dcac:	0414      	lsls	r4, r2, #16
 800dcae:	d43f      	bmi.n	800dd30 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dcb0:	0450      	lsls	r0, r2, #17
 800dcb2:	d43a      	bmi.n	800dd2a <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dcb4:	0491      	lsls	r1, r2, #18
 800dcb6:	d435      	bmi.n	800dd24 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcb8:	f012 0f08 	tst.w	r2, #8
 800dcbc:	bf14      	ite	ne
 800dcbe:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800dcc2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800dcc6:	e7bf      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dcc8:	2201      	movs	r2, #1
 800dcca:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dccc:	e7bc      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e7ba      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcd2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcd6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd8:	e7b6      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dcda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dcde:	e7b3      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dce0:	2340      	movs	r3, #64	; 0x40
 800dce2:	e7b1      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dce4:	2380      	movs	r3, #128	; 0x80
 800dce6:	e7af      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dcec:	e7ac      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dcee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcf2:	e7a9      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dcf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcf8:	e7a6      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dcfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcfe:	e7a3      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd04:	e7a0      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd0a:	e79d      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dd0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dd10:	e79a      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dd12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dd16:	e797      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800dd18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd1c:	e794      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dd1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dd22:	e791      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800dd24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd28:	e78e      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dd2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dd2e:	e78b      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dd30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dd34:	e788      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dd36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dd3a:	e785      	b.n	800dc48 <SDMMC_CmdReadMultiBlock+0x40>
 800dd3c:	20000094 	.word	0x20000094
 800dd40:	10624dd3 	.word	0x10624dd3
 800dd44:	fffee0c0 	.word	0xfffee0c0
 800dd48:	00200045 	.word	0x00200045
 800dd4c:	002000c5 	.word	0x002000c5
 800dd50:	fdffe008 	.word	0xfdffe008

0800dd54 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd54:	4a4c      	ldr	r2, [pc, #304]	; (800de88 <SDMMC_CmdWriteSingleBlock+0x134>)
 800dd56:	4b4d      	ldr	r3, [pc, #308]	; (800de8c <SDMMC_CmdWriteSingleBlock+0x138>)
{
 800dd58:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd5a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800dd5c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd5e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd62:	68c1      	ldr	r1, [r0, #12]
 800dd64:	4c4a      	ldr	r4, [pc, #296]	; (800de90 <SDMMC_CmdWriteSingleBlock+0x13c>)
 800dd66:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd6a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd6c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd6e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd72:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dd74:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dd78:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dd7a:	b14a      	cbz	r2, 800dd90 <SDMMC_CmdWriteSingleBlock+0x3c>
 800dd7c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800dd7e:	4945      	ldr	r1, [pc, #276]	; (800de94 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800dd80:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800dd82:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dd84:	420a      	tst	r2, r1
 800dd86:	d001      	beq.n	800dd8c <SDMMC_CmdWriteSingleBlock+0x38>
 800dd88:	0492      	lsls	r2, r2, #18
 800dd8a:	d507      	bpl.n	800dd9c <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 800dd8c:	1c5c      	adds	r4, r3, #1
 800dd8e:	d1f7      	bne.n	800dd80 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800dd90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dd9e:	075c      	lsls	r4, r3, #29
 800dda0:	d43d      	bmi.n	800de1e <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dda2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dda4:	f013 0301 	ands.w	r3, r3, #1
 800dda8:	d134      	bne.n	800de14 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddaa:	4b3b      	ldr	r3, [pc, #236]	; (800de98 <SDMMC_CmdWriteSingleBlock+0x144>)
 800ddac:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ddae:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b18      	cmp	r3, #24
 800ddb4:	d131      	bne.n	800de1a <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800ddb6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ddb8:	4b38      	ldr	r3, [pc, #224]	; (800de9c <SDMMC_CmdWriteSingleBlock+0x148>)
 800ddba:	4013      	ands	r3, r2
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0e9      	beq.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	db30      	blt.n	800de26 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ddc4:	0051      	lsls	r1, r2, #1
 800ddc6:	d431      	bmi.n	800de2c <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ddc8:	0094      	lsls	r4, r2, #2
 800ddca:	d431      	bmi.n	800de30 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ddcc:	00d0      	lsls	r0, r2, #3
 800ddce:	d431      	bmi.n	800de34 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ddd0:	0111      	lsls	r1, r2, #4
 800ddd2:	d432      	bmi.n	800de3a <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ddd4:	0154      	lsls	r4, r2, #5
 800ddd6:	d433      	bmi.n	800de40 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ddd8:	01d0      	lsls	r0, r2, #7
 800ddda:	d434      	bmi.n	800de46 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dddc:	0211      	lsls	r1, r2, #8
 800ddde:	d435      	bmi.n	800de4c <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dde0:	0254      	lsls	r4, r2, #9
 800dde2:	d436      	bmi.n	800de52 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dde4:	0290      	lsls	r0, r2, #10
 800dde6:	d440      	bmi.n	800de6a <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800dde8:	02d1      	lsls	r1, r2, #11
 800ddea:	d43b      	bmi.n	800de64 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ddec:	0354      	lsls	r4, r2, #13
 800ddee:	d436      	bmi.n	800de5e <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ddf0:	0390      	lsls	r0, r2, #14
 800ddf2:	d431      	bmi.n	800de58 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ddf4:	03d1      	lsls	r1, r2, #15
 800ddf6:	d444      	bmi.n	800de82 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ddf8:	0414      	lsls	r4, r2, #16
 800ddfa:	d43f      	bmi.n	800de7c <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ddfc:	0450      	lsls	r0, r2, #17
 800ddfe:	d43a      	bmi.n	800de76 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800de00:	0491      	lsls	r1, r2, #18
 800de02:	d435      	bmi.n	800de70 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800de04:	f012 0f08 	tst.w	r2, #8
 800de08:	bf14      	ite	ne
 800de0a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800de0e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800de12:	e7bf      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de14:	2201      	movs	r2, #1
 800de16:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de18:	e7bc      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de1a:	2301      	movs	r3, #1
 800de1c:	e7ba      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de1e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de20:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de22:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de24:	e7b6      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800de26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de2a:	e7b3      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800de2c:	2340      	movs	r3, #64	; 0x40
 800de2e:	e7b1      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800de30:	2380      	movs	r3, #128	; 0x80
 800de32:	e7af      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800de34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de38:	e7ac      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800de3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de3e:	e7a9      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800de40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de44:	e7a6      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800de46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de4a:	e7a3      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800de4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800de50:	e7a0      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800de52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800de56:	e79d      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800de58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800de5c:	e79a      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800de5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800de62:	e797      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800de64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de68:	e794      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800de6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800de6e:	e791      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800de70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de74:	e78e      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800de76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800de7a:	e78b      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800de7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800de80:	e788      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800de82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800de86:	e785      	b.n	800dd94 <SDMMC_CmdWriteSingleBlock+0x40>
 800de88:	20000094 	.word	0x20000094
 800de8c:	10624dd3 	.word	0x10624dd3
 800de90:	fffee0c0 	.word	0xfffee0c0
 800de94:	00200045 	.word	0x00200045
 800de98:	002000c5 	.word	0x002000c5
 800de9c:	fdffe008 	.word	0xfdffe008

0800dea0 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dea0:	4a4c      	ldr	r2, [pc, #304]	; (800dfd4 <SDMMC_CmdWriteMultiBlock+0x134>)
 800dea2:	4b4d      	ldr	r3, [pc, #308]	; (800dfd8 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 800dea4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dea6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800dea8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800deaa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800deae:	68c1      	ldr	r1, [r0, #12]
 800deb0:	4c4a      	ldr	r4, [pc, #296]	; (800dfdc <SDMMC_CmdWriteMultiBlock+0x13c>)
 800deb2:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800deb6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800deb8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800deba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800debe:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dec0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dec4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800dec6:	b14a      	cbz	r2, 800dedc <SDMMC_CmdWriteMultiBlock+0x3c>
 800dec8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800deca:	4945      	ldr	r1, [pc, #276]	; (800dfe0 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800decc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800dece:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ded0:	420a      	tst	r2, r1
 800ded2:	d001      	beq.n	800ded8 <SDMMC_CmdWriteMultiBlock+0x38>
 800ded4:	0492      	lsls	r2, r2, #18
 800ded6:	d507      	bpl.n	800dee8 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 800ded8:	1c5c      	adds	r4, r3, #1
 800deda:	d1f7      	bne.n	800decc <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800dedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dee6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dee8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800deea:	075c      	lsls	r4, r3, #29
 800deec:	d43d      	bmi.n	800df6a <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800deee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800def0:	f013 0301 	ands.w	r3, r3, #1
 800def4:	d134      	bne.n	800df60 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800def6:	4b3b      	ldr	r3, [pc, #236]	; (800dfe4 <SDMMC_CmdWriteMultiBlock+0x144>)
 800def8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800defa:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b19      	cmp	r3, #25
 800df00:	d131      	bne.n	800df66 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800df02:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800df04:	4b38      	ldr	r3, [pc, #224]	; (800dfe8 <SDMMC_CmdWriteMultiBlock+0x148>)
 800df06:	4013      	ands	r3, r2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0e9      	beq.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800df0c:	2a00      	cmp	r2, #0
 800df0e:	db30      	blt.n	800df72 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800df10:	0051      	lsls	r1, r2, #1
 800df12:	d431      	bmi.n	800df78 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800df14:	0094      	lsls	r4, r2, #2
 800df16:	d431      	bmi.n	800df7c <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800df18:	00d0      	lsls	r0, r2, #3
 800df1a:	d431      	bmi.n	800df80 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800df1c:	0111      	lsls	r1, r2, #4
 800df1e:	d432      	bmi.n	800df86 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800df20:	0154      	lsls	r4, r2, #5
 800df22:	d433      	bmi.n	800df8c <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800df24:	01d0      	lsls	r0, r2, #7
 800df26:	d434      	bmi.n	800df92 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800df28:	0211      	lsls	r1, r2, #8
 800df2a:	d435      	bmi.n	800df98 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800df2c:	0254      	lsls	r4, r2, #9
 800df2e:	d436      	bmi.n	800df9e <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800df30:	0290      	lsls	r0, r2, #10
 800df32:	d440      	bmi.n	800dfb6 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800df34:	02d1      	lsls	r1, r2, #11
 800df36:	d43b      	bmi.n	800dfb0 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800df38:	0354      	lsls	r4, r2, #13
 800df3a:	d436      	bmi.n	800dfaa <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800df3c:	0390      	lsls	r0, r2, #14
 800df3e:	d431      	bmi.n	800dfa4 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800df40:	03d1      	lsls	r1, r2, #15
 800df42:	d444      	bmi.n	800dfce <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800df44:	0414      	lsls	r4, r2, #16
 800df46:	d43f      	bmi.n	800dfc8 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800df48:	0450      	lsls	r0, r2, #17
 800df4a:	d43a      	bmi.n	800dfc2 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800df4c:	0491      	lsls	r1, r2, #18
 800df4e:	d435      	bmi.n	800dfbc <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800df50:	f012 0f08 	tst.w	r2, #8
 800df54:	bf14      	ite	ne
 800df56:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800df5a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800df5e:	e7bf      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800df60:	2201      	movs	r2, #1
 800df62:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df64:	e7bc      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800df66:	2301      	movs	r3, #1
 800df68:	e7ba      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df6a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df6c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800df6e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800df70:	e7b6      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800df72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df76:	e7b3      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800df78:	2340      	movs	r3, #64	; 0x40
 800df7a:	e7b1      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800df7c:	2380      	movs	r3, #128	; 0x80
 800df7e:	e7af      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800df80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df84:	e7ac      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800df86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df8a:	e7a9      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800df8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df90:	e7a6      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800df92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df96:	e7a3      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800df98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df9c:	e7a0      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800df9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dfa2:	e79d      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800dfa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dfa8:	e79a      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800dfaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dfae:	e797      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800dfb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb4:	e794      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800dfb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dfba:	e791      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800dfbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dfc0:	e78e      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dfc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dfc6:	e78b      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dfc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dfcc:	e788      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800dfce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800dfd2:	e785      	b.n	800dee0 <SDMMC_CmdWriteMultiBlock+0x40>
 800dfd4:	20000094 	.word	0x20000094
 800dfd8:	10624dd3 	.word	0x10624dd3
 800dfdc:	fffee0c0 	.word	0xfffee0c0
 800dfe0:	00200045 	.word	0x00200045
 800dfe4:	002000c5 	.word	0x002000c5
 800dfe8:	fdffe008 	.word	0xfdffe008

0800dfec <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dfec:	4b7d      	ldr	r3, [pc, #500]	; (800e1e4 <SDMMC_CmdStopTransfer+0x1f8>)
 800dfee:	497e      	ldr	r1, [pc, #504]	; (800e1e8 <SDMMC_CmdStopTransfer+0x1fc>)
{
 800dff0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dff2:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800dff4:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800dff6:	4b7d      	ldr	r3, [pc, #500]	; (800e1ec <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dff8:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800dffc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800dffe:	4d7c      	ldr	r5, [pc, #496]	; (800e1f0 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e000:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e004:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800e006:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e008:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e00a:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800e00e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800e012:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e014:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800e018:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e01a:	68c4      	ldr	r4, [r0, #12]
 800e01c:	4023      	ands	r3, r4
 800e01e:	4319      	orrs	r1, r3
 800e020:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800e022:	b14a      	cbz	r2, 800e038 <SDMMC_CmdStopTransfer+0x4c>
 800e024:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e026:	4973      	ldr	r1, [pc, #460]	; (800e1f4 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 800e028:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e02a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e02c:	420a      	tst	r2, r1
 800e02e:	d001      	beq.n	800e034 <SDMMC_CmdStopTransfer+0x48>
 800e030:	0492      	lsls	r2, r2, #18
 800e032:	d50a      	bpl.n	800e04a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800e034:	1c5c      	adds	r4, r3, #1
 800e036:	d1f7      	bne.n	800e028 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e038:	68c2      	ldr	r2, [r0, #12]
 800e03a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e03e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e042:	60c2      	str	r2, [r0, #12]
}
 800e044:	4618      	mov	r0, r3
 800e046:	bc30      	pop	{r4, r5}
 800e048:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e04a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e04c:	075b      	lsls	r3, r3, #29
 800e04e:	d454      	bmi.n	800e0fa <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e050:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e052:	f013 0301 	ands.w	r3, r3, #1
 800e056:	d13c      	bne.n	800e0d2 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e058:	4a67      	ldr	r2, [pc, #412]	; (800e1f8 <SDMMC_CmdStopTransfer+0x20c>)
 800e05a:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e05c:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e05e:	b2d2      	uxtb	r2, r2
 800e060:	2a0c      	cmp	r2, #12
 800e062:	d144      	bne.n	800e0ee <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 800e064:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e066:	4965      	ldr	r1, [pc, #404]	; (800e1fc <SDMMC_CmdStopTransfer+0x210>)
 800e068:	4011      	ands	r1, r2
 800e06a:	2900      	cmp	r1, #0
 800e06c:	d038      	beq.n	800e0e0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e06e:	2a00      	cmp	r2, #0
 800e070:	db36      	blt.n	800e0e0 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e072:	0055      	lsls	r5, r2, #1
 800e074:	d448      	bmi.n	800e108 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e076:	0094      	lsls	r4, r2, #2
 800e078:	d44c      	bmi.n	800e114 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e07a:	00d1      	lsls	r1, r2, #3
 800e07c:	d450      	bmi.n	800e120 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e07e:	0113      	lsls	r3, r2, #4
 800e080:	d455      	bmi.n	800e12e <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e082:	0155      	lsls	r5, r2, #5
 800e084:	d45a      	bmi.n	800e13c <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e086:	01d4      	lsls	r4, r2, #7
 800e088:	d466      	bmi.n	800e158 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e08a:	0211      	lsls	r1, r2, #8
 800e08c:	d45d      	bmi.n	800e14a <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e08e:	0253      	lsls	r3, r2, #9
 800e090:	d470      	bmi.n	800e174 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e092:	0295      	lsls	r5, r2, #10
 800e094:	d467      	bmi.n	800e166 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e096:	02d4      	lsls	r4, r2, #11
 800e098:	f100 8081 	bmi.w	800e19e <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e09c:	0351      	lsls	r1, r2, #13
 800e09e:	d477      	bmi.n	800e190 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e0a0:	0393      	lsls	r3, r2, #14
 800e0a2:	d46e      	bmi.n	800e182 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e0a4:	03d5      	lsls	r5, r2, #15
 800e0a6:	f100 8096 	bmi.w	800e1d6 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e0aa:	0414      	lsls	r4, r2, #16
 800e0ac:	f100 8085 	bmi.w	800e1ba <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e0b0:	0451      	lsls	r1, r2, #17
 800e0b2:	d47b      	bmi.n	800e1ac <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e0b4:	0493      	lsls	r3, r2, #18
 800e0b6:	f100 8087 	bmi.w	800e1c8 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e0ba:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0be:	68c2      	ldr	r2, [r0, #12]
 800e0c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e0c4:	bf14      	ite	ne
 800e0c6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e0ca:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0ce:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e0d0:	e7b8      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0d6:	68c2      	ldr	r2, [r0, #12]
 800e0d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e0dc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e0de:	e7b1      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0e0:	68c2      	ldr	r2, [r0, #12]
 800e0e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e0e6:	60c2      	str	r2, [r0, #12]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	bc30      	pop	{r4, r5}
 800e0ec:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0ee:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e0f0:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e0f6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e0f8:	e7a4      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e0fa:	2304      	movs	r3, #4
 800e0fc:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e0fe:	68c2      	ldr	r2, [r0, #12]
 800e100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e104:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e106:	e79d      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e108:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e10a:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e10c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e110:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e112:	e797      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e114:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e116:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e11c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e11e:	e791      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e120:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e122:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e126:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e12a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e12c:	e78a      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e12e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e130:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e138:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e13a:	e783      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e13c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e146:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e148:	e77c      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e14a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e154:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e156:	e775      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e158:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e15a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e15e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e162:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e164:	e76e      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e166:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e16c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e170:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e172:	e767      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e174:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e17a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e17e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e180:	e760      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e182:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e184:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e188:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e18c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e18e:	e759      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e190:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e19a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e19c:	e752      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e19e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 800e1a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1a8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e1aa:	e74b      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1ac:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e1ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1b6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e1b8:	e744      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1ba:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e1bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1c4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e1c6:	e73d      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1c8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800e1ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1d2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e1d4:	e736      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1d6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e1d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800e1dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e1e0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800e1e2:	e72f      	b.n	800e044 <SDMMC_CmdStopTransfer+0x58>
 800e1e4:	20000094 	.word	0x20000094
 800e1e8:	10624dd3 	.word	0x10624dd3
 800e1ec:	fffee0c0 	.word	0xfffee0c0
 800e1f0:	05f5e100 	.word	0x05f5e100
 800e1f4:	00200045 	.word	0x00200045
 800e1f8:	002000c5 	.word	0x002000c5
 800e1fc:	fdffe008 	.word	0xfdffe008

0800e200 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e200:	4a4c      	ldr	r2, [pc, #304]	; (800e334 <SDMMC_CmdSelDesel+0x134>)
 800e202:	4b4d      	ldr	r3, [pc, #308]	; (800e338 <SDMMC_CmdSelDesel+0x138>)
{
 800e204:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e206:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e208:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e20a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e20e:	68c1      	ldr	r1, [r0, #12]
 800e210:	4c4a      	ldr	r4, [pc, #296]	; (800e33c <SDMMC_CmdSelDesel+0x13c>)
 800e212:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e216:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e218:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e21a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e21e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e220:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e224:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e226:	b14a      	cbz	r2, 800e23c <SDMMC_CmdSelDesel+0x3c>
 800e228:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e22a:	4945      	ldr	r1, [pc, #276]	; (800e340 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 800e22c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e22e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e230:	420a      	tst	r2, r1
 800e232:	d001      	beq.n	800e238 <SDMMC_CmdSelDesel+0x38>
 800e234:	0492      	lsls	r2, r2, #18
 800e236:	d507      	bpl.n	800e248 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 800e238:	1c5c      	adds	r4, r3, #1
 800e23a:	d1f7      	bne.n	800e22c <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e23c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e240:	4618      	mov	r0, r3
 800e242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e246:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e248:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e24a:	075c      	lsls	r4, r3, #29
 800e24c:	d43d      	bmi.n	800e2ca <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e24e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e250:	f013 0301 	ands.w	r3, r3, #1
 800e254:	d134      	bne.n	800e2c0 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e256:	4b3b      	ldr	r3, [pc, #236]	; (800e344 <SDMMC_CmdSelDesel+0x144>)
 800e258:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e25a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b07      	cmp	r3, #7
 800e260:	d131      	bne.n	800e2c6 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e262:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e264:	4b38      	ldr	r3, [pc, #224]	; (800e348 <SDMMC_CmdSelDesel+0x148>)
 800e266:	4013      	ands	r3, r2
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d0e9      	beq.n	800e240 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e26c:	2a00      	cmp	r2, #0
 800e26e:	db30      	blt.n	800e2d2 <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e270:	0051      	lsls	r1, r2, #1
 800e272:	d431      	bmi.n	800e2d8 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e274:	0094      	lsls	r4, r2, #2
 800e276:	d431      	bmi.n	800e2dc <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e278:	00d0      	lsls	r0, r2, #3
 800e27a:	d431      	bmi.n	800e2e0 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e27c:	0111      	lsls	r1, r2, #4
 800e27e:	d432      	bmi.n	800e2e6 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e280:	0154      	lsls	r4, r2, #5
 800e282:	d433      	bmi.n	800e2ec <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e284:	01d0      	lsls	r0, r2, #7
 800e286:	d434      	bmi.n	800e2f2 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e288:	0211      	lsls	r1, r2, #8
 800e28a:	d435      	bmi.n	800e2f8 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e28c:	0254      	lsls	r4, r2, #9
 800e28e:	d436      	bmi.n	800e2fe <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e290:	0290      	lsls	r0, r2, #10
 800e292:	d440      	bmi.n	800e316 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e294:	02d1      	lsls	r1, r2, #11
 800e296:	d43b      	bmi.n	800e310 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e298:	0354      	lsls	r4, r2, #13
 800e29a:	d436      	bmi.n	800e30a <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e29c:	0390      	lsls	r0, r2, #14
 800e29e:	d431      	bmi.n	800e304 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e2a0:	03d1      	lsls	r1, r2, #15
 800e2a2:	d444      	bmi.n	800e32e <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e2a4:	0414      	lsls	r4, r2, #16
 800e2a6:	d43f      	bmi.n	800e328 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e2a8:	0450      	lsls	r0, r2, #17
 800e2aa:	d43a      	bmi.n	800e322 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e2ac:	0491      	lsls	r1, r2, #18
 800e2ae:	d435      	bmi.n	800e31c <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e2b0:	f012 0f08 	tst.w	r2, #8
 800e2b4:	bf14      	ite	ne
 800e2b6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e2ba:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e2be:	e7bf      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2c4:	e7bc      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e7ba      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2ca:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2cc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2d0:	e7b6      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e2d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e2d6:	e7b3      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e2d8:	2340      	movs	r3, #64	; 0x40
 800e2da:	e7b1      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e2dc:	2380      	movs	r3, #128	; 0x80
 800e2de:	e7af      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e2e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e2e4:	e7ac      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e2e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2ea:	e7a9      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f0:	e7a6      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e2f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2f6:	e7a3      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e2f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2fc:	e7a0      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e2fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e302:	e79d      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e308:	e79a      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e30a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e30e:	e797      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e314:	e794      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e31a:	e791      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e31c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e320:	e78e      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e322:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e326:	e78b      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e32c:	e788      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e32e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e332:	e785      	b.n	800e240 <SDMMC_CmdSelDesel+0x40>
 800e334:	20000094 	.word	0x20000094
 800e338:	10624dd3 	.word	0x10624dd3
 800e33c:	fffee0c0 	.word	0xfffee0c0
 800e340:	00200045 	.word	0x00200045
 800e344:	002000c5 	.word	0x002000c5
 800e348:	fdffe008 	.word	0xfdffe008

0800e34c <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e34c:	4b11      	ldr	r3, [pc, #68]	; (800e394 <SDMMC_CmdGoIdleState+0x48>)
{
 800e34e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e350:	4a11      	ldr	r2, [pc, #68]	; (800e398 <SDMMC_CmdGoIdleState+0x4c>)
{
 800e352:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e354:	4c11      	ldr	r4, [pc, #68]	; (800e39c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800e356:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e358:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800e35a:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e35c:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e360:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e362:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e366:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e368:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e36a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e36e:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e372:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e374:	e002      	b.n	800e37c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800e376:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800e378:	0612      	lsls	r2, r2, #24
 800e37a:	d405      	bmi.n	800e388 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800e37c:	3b01      	subs	r3, #1
 800e37e:	d2fa      	bcs.n	800e376 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e380:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e384:	bc30      	pop	{r4, r5}
 800e386:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e388:	4b05      	ldr	r3, [pc, #20]	; (800e3a0 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800e38a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e38c:	638b      	str	r3, [r1, #56]	; 0x38
}
 800e38e:	bc30      	pop	{r4, r5}
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	20000094 	.word	0x20000094
 800e398:	fffee0c0 	.word	0xfffee0c0
 800e39c:	10624dd3 	.word	0x10624dd3
 800e3a0:	002000c5 	.word	0x002000c5

0800e3a4 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3a4:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <SDMMC_CmdOperCond+0x74>)
{
 800e3a6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800e3a8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3ac:	481b      	ldr	r0, [pc, #108]	; (800e41c <SDMMC_CmdOperCond+0x78>)
{
 800e3ae:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3b0:	4c1b      	ldr	r4, [pc, #108]	; (800e420 <SDMMC_CmdOperCond+0x7c>)
 800e3b2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e3b4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3b6:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3ba:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3be:	68cc      	ldr	r4, [r1, #12]
 800e3c0:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3c4:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e3c6:	f241 3088 	movw	r0, #5000	; 0x1388
 800e3ca:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e3ce:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e3d0:	b14a      	cbz	r2, 800e3e6 <SDMMC_CmdOperCond+0x42>
 800e3d2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e3d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800e3d6:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e3d8:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e3dc:	d001      	beq.n	800e3e2 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e3de:	0490      	lsls	r0, r2, #18
 800e3e0:	d506      	bpl.n	800e3f0 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800e3e2:	1c5c      	adds	r4, r3, #1
 800e3e4:	d1f6      	bne.n	800e3d4 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e3e6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ee:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e3f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e3f2:	075a      	lsls	r2, r3, #29
 800e3f4:	d40c      	bmi.n	800e410 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e3f6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e3f8:	f010 0001 	ands.w	r0, r0, #1
 800e3fc:	d105      	bne.n	800e40a <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e3fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e400:	065b      	lsls	r3, r3, #25
 800e402:	d5f2      	bpl.n	800e3ea <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	638b      	str	r3, [r1, #56]	; 0x38
 800e408:	e7ef      	b.n	800e3ea <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e40a:	2301      	movs	r3, #1
 800e40c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e40e:	e7ec      	b.n	800e3ea <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e410:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e412:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e414:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e416:	e7e8      	b.n	800e3ea <SDMMC_CmdOperCond+0x46>
 800e418:	20000094 	.word	0x20000094
 800e41c:	fffee0c0 	.word	0xfffee0c0
 800e420:	10624dd3 	.word	0x10624dd3

0800e424 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e424:	4a4c      	ldr	r2, [pc, #304]	; (800e558 <SDMMC_CmdAppCommand+0x134>)
 800e426:	4b4d      	ldr	r3, [pc, #308]	; (800e55c <SDMMC_CmdAppCommand+0x138>)
{
 800e428:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e42a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e42c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e42e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e432:	68c1      	ldr	r1, [r0, #12]
 800e434:	4c4a      	ldr	r4, [pc, #296]	; (800e560 <SDMMC_CmdAppCommand+0x13c>)
 800e436:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e43a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e43c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e43e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e442:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e444:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e448:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e44a:	b14a      	cbz	r2, 800e460 <SDMMC_CmdAppCommand+0x3c>
 800e44c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e44e:	4945      	ldr	r1, [pc, #276]	; (800e564 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 800e450:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e452:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e454:	420a      	tst	r2, r1
 800e456:	d001      	beq.n	800e45c <SDMMC_CmdAppCommand+0x38>
 800e458:	0492      	lsls	r2, r2, #18
 800e45a:	d507      	bpl.n	800e46c <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 800e45c:	1c5c      	adds	r4, r3, #1
 800e45e:	d1f7      	bne.n	800e450 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e460:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e464:	4618      	mov	r0, r3
 800e466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e46a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e46c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e46e:	075c      	lsls	r4, r3, #29
 800e470:	d43d      	bmi.n	800e4ee <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e472:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e474:	f013 0301 	ands.w	r3, r3, #1
 800e478:	d134      	bne.n	800e4e4 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e47a:	4b3b      	ldr	r3, [pc, #236]	; (800e568 <SDMMC_CmdAppCommand+0x144>)
 800e47c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e47e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b37      	cmp	r3, #55	; 0x37
 800e484:	d131      	bne.n	800e4ea <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e486:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e488:	4b38      	ldr	r3, [pc, #224]	; (800e56c <SDMMC_CmdAppCommand+0x148>)
 800e48a:	4013      	ands	r3, r2
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d0e9      	beq.n	800e464 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e490:	2a00      	cmp	r2, #0
 800e492:	db30      	blt.n	800e4f6 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e494:	0051      	lsls	r1, r2, #1
 800e496:	d431      	bmi.n	800e4fc <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e498:	0094      	lsls	r4, r2, #2
 800e49a:	d431      	bmi.n	800e500 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e49c:	00d0      	lsls	r0, r2, #3
 800e49e:	d431      	bmi.n	800e504 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e4a0:	0111      	lsls	r1, r2, #4
 800e4a2:	d432      	bmi.n	800e50a <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e4a4:	0154      	lsls	r4, r2, #5
 800e4a6:	d433      	bmi.n	800e510 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e4a8:	01d0      	lsls	r0, r2, #7
 800e4aa:	d434      	bmi.n	800e516 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e4ac:	0211      	lsls	r1, r2, #8
 800e4ae:	d435      	bmi.n	800e51c <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e4b0:	0254      	lsls	r4, r2, #9
 800e4b2:	d436      	bmi.n	800e522 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e4b4:	0290      	lsls	r0, r2, #10
 800e4b6:	d440      	bmi.n	800e53a <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4b8:	02d1      	lsls	r1, r2, #11
 800e4ba:	d43b      	bmi.n	800e534 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e4bc:	0354      	lsls	r4, r2, #13
 800e4be:	d436      	bmi.n	800e52e <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e4c0:	0390      	lsls	r0, r2, #14
 800e4c2:	d431      	bmi.n	800e528 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e4c4:	03d1      	lsls	r1, r2, #15
 800e4c6:	d444      	bmi.n	800e552 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e4c8:	0414      	lsls	r4, r2, #16
 800e4ca:	d43f      	bmi.n	800e54c <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e4cc:	0450      	lsls	r0, r2, #17
 800e4ce:	d43a      	bmi.n	800e546 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e4d0:	0491      	lsls	r1, r2, #18
 800e4d2:	d435      	bmi.n	800e540 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e4d4:	f012 0f08 	tst.w	r2, #8
 800e4d8:	bf14      	ite	ne
 800e4da:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e4de:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e4e2:	e7bf      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4e8:	e7bc      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e7ba      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4ee:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4f0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e4f2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4f4:	e7b6      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e4f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4fa:	e7b3      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e4fc:	2340      	movs	r3, #64	; 0x40
 800e4fe:	e7b1      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e500:	2380      	movs	r3, #128	; 0x80
 800e502:	e7af      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e504:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e508:	e7ac      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e50a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e50e:	e7a9      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e514:	e7a6      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e51a:	e7a3      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e51c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e520:	e7a0      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e526:	e79d      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e52c:	e79a      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e52e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e532:	e797      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e538:	e794      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e53a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e53e:	e791      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e544:	e78e      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e546:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e54a:	e78b      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e54c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e550:	e788      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e552:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e556:	e785      	b.n	800e464 <SDMMC_CmdAppCommand+0x40>
 800e558:	20000094 	.word	0x20000094
 800e55c:	10624dd3 	.word	0x10624dd3
 800e560:	fffee0c0 	.word	0xfffee0c0
 800e564:	00200045 	.word	0x00200045
 800e568:	002000c5 	.word	0x002000c5
 800e56c:	fdffe008 	.word	0xfdffe008

0800e570 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e570:	4a18      	ldr	r2, [pc, #96]	; (800e5d4 <SDMMC_CmdAppOperCommand+0x64>)
 800e572:	4b19      	ldr	r3, [pc, #100]	; (800e5d8 <SDMMC_CmdAppOperCommand+0x68>)
{
 800e574:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e576:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e578:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e57a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e57e:	68c1      	ldr	r1, [r0, #12]
 800e580:	4c16      	ldr	r4, [pc, #88]	; (800e5dc <SDMMC_CmdAppOperCommand+0x6c>)
 800e582:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e586:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e588:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e58a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e58e:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e590:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e594:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e596:	b14a      	cbz	r2, 800e5ac <SDMMC_CmdAppOperCommand+0x3c>
 800e598:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e59a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e59c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e59e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e5a2:	d001      	beq.n	800e5a8 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e5a4:	0492      	lsls	r2, r2, #18
 800e5a6:	d507      	bpl.n	800e5b8 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 800e5a8:	1c59      	adds	r1, r3, #1
 800e5aa:	d1f6      	bne.n	800e59a <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800e5ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5b6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e5b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5ba:	f013 0304 	ands.w	r3, r3, #4
 800e5be:	d105      	bne.n	800e5cc <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e5c0:	4a07      	ldr	r2, [pc, #28]	; (800e5e0 <SDMMC_CmdAppOperCommand+0x70>)
 800e5c2:	6382      	str	r2, [r0, #56]	; 0x38
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5cc:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5ce:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e5d0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5d2:	e7ed      	b.n	800e5b0 <SDMMC_CmdAppOperCommand+0x40>
 800e5d4:	20000094 	.word	0x20000094
 800e5d8:	10624dd3 	.word	0x10624dd3
 800e5dc:	fffee0c0 	.word	0xfffee0c0
 800e5e0:	002000c5 	.word	0x002000c5

0800e5e4 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e5e4:	4a4c      	ldr	r2, [pc, #304]	; (800e718 <SDMMC_CmdBusWidth+0x134>)
 800e5e6:	4b4d      	ldr	r3, [pc, #308]	; (800e71c <SDMMC_CmdBusWidth+0x138>)
{
 800e5e8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e5ea:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e5ec:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e5ee:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5f2:	68c1      	ldr	r1, [r0, #12]
 800e5f4:	4c4a      	ldr	r4, [pc, #296]	; (800e720 <SDMMC_CmdBusWidth+0x13c>)
 800e5f6:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e5fa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e5fc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e5fe:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e602:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e604:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e608:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e60a:	b14a      	cbz	r2, 800e620 <SDMMC_CmdBusWidth+0x3c>
 800e60c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e60e:	4945      	ldr	r1, [pc, #276]	; (800e724 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 800e610:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e612:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e614:	420a      	tst	r2, r1
 800e616:	d001      	beq.n	800e61c <SDMMC_CmdBusWidth+0x38>
 800e618:	0492      	lsls	r2, r2, #18
 800e61a:	d507      	bpl.n	800e62c <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 800e61c:	1c5c      	adds	r4, r3, #1
 800e61e:	d1f7      	bne.n	800e610 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e624:	4618      	mov	r0, r3
 800e626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e62c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e62e:	075c      	lsls	r4, r3, #29
 800e630:	d43d      	bmi.n	800e6ae <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e632:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e634:	f013 0301 	ands.w	r3, r3, #1
 800e638:	d134      	bne.n	800e6a4 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e63a:	4b3b      	ldr	r3, [pc, #236]	; (800e728 <SDMMC_CmdBusWidth+0x144>)
 800e63c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e63e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b06      	cmp	r3, #6
 800e644:	d131      	bne.n	800e6aa <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e646:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e648:	4b38      	ldr	r3, [pc, #224]	; (800e72c <SDMMC_CmdBusWidth+0x148>)
 800e64a:	4013      	ands	r3, r2
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d0e9      	beq.n	800e624 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e650:	2a00      	cmp	r2, #0
 800e652:	db30      	blt.n	800e6b6 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e654:	0051      	lsls	r1, r2, #1
 800e656:	d431      	bmi.n	800e6bc <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e658:	0094      	lsls	r4, r2, #2
 800e65a:	d431      	bmi.n	800e6c0 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e65c:	00d0      	lsls	r0, r2, #3
 800e65e:	d431      	bmi.n	800e6c4 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e660:	0111      	lsls	r1, r2, #4
 800e662:	d432      	bmi.n	800e6ca <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e664:	0154      	lsls	r4, r2, #5
 800e666:	d433      	bmi.n	800e6d0 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e668:	01d0      	lsls	r0, r2, #7
 800e66a:	d434      	bmi.n	800e6d6 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e66c:	0211      	lsls	r1, r2, #8
 800e66e:	d435      	bmi.n	800e6dc <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e670:	0254      	lsls	r4, r2, #9
 800e672:	d436      	bmi.n	800e6e2 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e674:	0290      	lsls	r0, r2, #10
 800e676:	d440      	bmi.n	800e6fa <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e678:	02d1      	lsls	r1, r2, #11
 800e67a:	d43b      	bmi.n	800e6f4 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e67c:	0354      	lsls	r4, r2, #13
 800e67e:	d436      	bmi.n	800e6ee <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e680:	0390      	lsls	r0, r2, #14
 800e682:	d431      	bmi.n	800e6e8 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e684:	03d1      	lsls	r1, r2, #15
 800e686:	d444      	bmi.n	800e712 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e688:	0414      	lsls	r4, r2, #16
 800e68a:	d43f      	bmi.n	800e70c <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e68c:	0450      	lsls	r0, r2, #17
 800e68e:	d43a      	bmi.n	800e706 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e690:	0491      	lsls	r1, r2, #18
 800e692:	d435      	bmi.n	800e700 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e694:	f012 0f08 	tst.w	r2, #8
 800e698:	bf14      	ite	ne
 800e69a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e69e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e6a2:	e7bf      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6a8:	e7bc      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e7ba      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6ae:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6b0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e6b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6b4:	e7b6      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e6b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e6ba:	e7b3      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e6bc:	2340      	movs	r3, #64	; 0x40
 800e6be:	e7b1      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e6c0:	2380      	movs	r3, #128	; 0x80
 800e6c2:	e7af      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6c8:	e7ac      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e6ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6ce:	e7a9      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d4:	e7a6      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e6d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e6da:	e7a3      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e6dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e6e0:	e7a0      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e6e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e6e6:	e79d      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e6e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e6ec:	e79a      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e6ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e6f2:	e797      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e6f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6f8:	e794      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e6fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e6fe:	e791      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e700:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e704:	e78e      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e706:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e70a:	e78b      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e70c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e710:	e788      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e712:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e716:	e785      	b.n	800e624 <SDMMC_CmdBusWidth+0x40>
 800e718:	20000094 	.word	0x20000094
 800e71c:	10624dd3 	.word	0x10624dd3
 800e720:	fffee0c0 	.word	0xfffee0c0
 800e724:	00200045 	.word	0x00200045
 800e728:	002000c5 	.word	0x002000c5
 800e72c:	fdffe008 	.word	0xfdffe008

0800e730 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e730:	4a4d      	ldr	r2, [pc, #308]	; (800e868 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 800e732:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e734:	494d      	ldr	r1, [pc, #308]	; (800e86c <SDMMC_CmdSendSCR+0x13c>)
{
 800e736:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e738:	4c4d      	ldr	r4, [pc, #308]	; (800e870 <SDMMC_CmdSendSCR+0x140>)
 800e73a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e73c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e73e:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e742:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e746:	68c4      	ldr	r4, [r0, #12]
 800e748:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e74a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e74c:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e74e:	f241 3188 	movw	r1, #5000	; 0x1388
 800e752:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e756:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e758:	b14a      	cbz	r2, 800e76e <SDMMC_CmdSendSCR+0x3e>
 800e75a:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e75c:	4945      	ldr	r1, [pc, #276]	; (800e874 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800e75e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e760:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e762:	420a      	tst	r2, r1
 800e764:	d001      	beq.n	800e76a <SDMMC_CmdSendSCR+0x3a>
 800e766:	0492      	lsls	r2, r2, #18
 800e768:	d507      	bpl.n	800e77a <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800e76a:	1c5c      	adds	r4, r3, #1
 800e76c:	d1f7      	bne.n	800e75e <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e76e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e772:	4618      	mov	r0, r3
 800e774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e778:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e77a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e77c:	075c      	lsls	r4, r3, #29
 800e77e:	d43d      	bmi.n	800e7fc <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e780:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e782:	f013 0301 	ands.w	r3, r3, #1
 800e786:	d134      	bne.n	800e7f2 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e788:	4b3b      	ldr	r3, [pc, #236]	; (800e878 <SDMMC_CmdSendSCR+0x148>)
 800e78a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e78c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b33      	cmp	r3, #51	; 0x33
 800e792:	d131      	bne.n	800e7f8 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800e794:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e796:	4b39      	ldr	r3, [pc, #228]	; (800e87c <SDMMC_CmdSendSCR+0x14c>)
 800e798:	4013      	ands	r3, r2
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d0e9      	beq.n	800e772 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e79e:	2a00      	cmp	r2, #0
 800e7a0:	db30      	blt.n	800e804 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e7a2:	0051      	lsls	r1, r2, #1
 800e7a4:	d431      	bmi.n	800e80a <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e7a6:	0094      	lsls	r4, r2, #2
 800e7a8:	d431      	bmi.n	800e80e <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e7aa:	00d0      	lsls	r0, r2, #3
 800e7ac:	d431      	bmi.n	800e812 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e7ae:	0111      	lsls	r1, r2, #4
 800e7b0:	d432      	bmi.n	800e818 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e7b2:	0154      	lsls	r4, r2, #5
 800e7b4:	d433      	bmi.n	800e81e <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e7b6:	01d0      	lsls	r0, r2, #7
 800e7b8:	d434      	bmi.n	800e824 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e7ba:	0211      	lsls	r1, r2, #8
 800e7bc:	d435      	bmi.n	800e82a <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e7be:	0254      	lsls	r4, r2, #9
 800e7c0:	d436      	bmi.n	800e830 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e7c2:	0290      	lsls	r0, r2, #10
 800e7c4:	d440      	bmi.n	800e848 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e7c6:	02d1      	lsls	r1, r2, #11
 800e7c8:	d43b      	bmi.n	800e842 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e7ca:	0354      	lsls	r4, r2, #13
 800e7cc:	d436      	bmi.n	800e83c <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e7ce:	0390      	lsls	r0, r2, #14
 800e7d0:	d431      	bmi.n	800e836 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e7d2:	03d1      	lsls	r1, r2, #15
 800e7d4:	d444      	bmi.n	800e860 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e7d6:	0414      	lsls	r4, r2, #16
 800e7d8:	d43f      	bmi.n	800e85a <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e7da:	0450      	lsls	r0, r2, #17
 800e7dc:	d43a      	bmi.n	800e854 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e7de:	0491      	lsls	r1, r2, #18
 800e7e0:	d435      	bmi.n	800e84e <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7e2:	f012 0f08 	tst.w	r2, #8
 800e7e6:	bf14      	ite	ne
 800e7e8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e7ec:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e7f0:	e7bf      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7f6:	e7bc      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e7ba      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7fc:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7fe:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e800:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e802:	e7b6      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e808:	e7b3      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e80a:	2340      	movs	r3, #64	; 0x40
 800e80c:	e7b1      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e80e:	2380      	movs	r3, #128	; 0x80
 800e810:	e7af      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e812:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e816:	e7ac      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e81c:	e7a9      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e822:	e7a6      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e828:	e7a3      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e82a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e82e:	e7a0      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e834:	e79d      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e836:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e83a:	e79a      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e83c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e840:	e797      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800e842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e846:	e794      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e84c:	e791      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800e84e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e852:	e78e      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e858:	e78b      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e85a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e85e:	e788      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e864:	e785      	b.n	800e772 <SDMMC_CmdSendSCR+0x42>
 800e866:	bf00      	nop
 800e868:	20000094 	.word	0x20000094
 800e86c:	fffee0c0 	.word	0xfffee0c0
 800e870:	10624dd3 	.word	0x10624dd3
 800e874:	00200045 	.word	0x00200045
 800e878:	002000c5 	.word	0x002000c5
 800e87c:	fdffe008 	.word	0xfdffe008

0800e880 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e880:	4a1a      	ldr	r2, [pc, #104]	; (800e8ec <SDMMC_CmdSendCID+0x6c>)
{
 800e882:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800e884:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e886:	481a      	ldr	r0, [pc, #104]	; (800e8f0 <SDMMC_CmdSendCID+0x70>)
{
 800e888:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e88a:	4c1a      	ldr	r4, [pc, #104]	; (800e8f4 <SDMMC_CmdSendCID+0x74>)
 800e88c:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e88e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e890:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e894:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e898:	68cc      	ldr	r4, [r1, #12]
 800e89a:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e89c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e89e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e8a0:	f241 3088 	movw	r0, #5000	; 0x1388
 800e8a4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e8a8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800e8aa:	b14a      	cbz	r2, 800e8c0 <SDMMC_CmdSendCID+0x40>
 800e8ac:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e8ae:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800e8b0:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e8b2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e8b6:	d001      	beq.n	800e8bc <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e8b8:	0492      	lsls	r2, r2, #18
 800e8ba:	d506      	bpl.n	800e8ca <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800e8bc:	1c58      	adds	r0, r3, #1
 800e8be:	d1f6      	bne.n	800e8ae <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800e8c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e8c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8c8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e8ca:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e8cc:	075b      	lsls	r3, r3, #29
 800e8ce:	d409      	bmi.n	800e8e4 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e8d0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800e8d2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e8d6:	bf14      	ite	ne
 800e8d8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e8da:	4b07      	ldreq	r3, [pc, #28]	; (800e8f8 <SDMMC_CmdSendCID+0x78>)
 800e8dc:	638b      	str	r3, [r1, #56]	; 0x38
}
 800e8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8e4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8e6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e8e8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8ea:	e7eb      	b.n	800e8c4 <SDMMC_CmdSendCID+0x44>
 800e8ec:	20000094 	.word	0x20000094
 800e8f0:	fffee0c0 	.word	0xfffee0c0
 800e8f4:	10624dd3 	.word	0x10624dd3
 800e8f8:	002000c5 	.word	0x002000c5

0800e8fc <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e8fc:	4a1b      	ldr	r2, [pc, #108]	; (800e96c <SDMMC_CmdSendCSD+0x70>)
{
 800e8fe:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e900:	4b1b      	ldr	r3, [pc, #108]	; (800e970 <SDMMC_CmdSendCSD+0x74>)
 800e902:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e904:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e908:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e90c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800e910:	4818      	ldr	r0, [pc, #96]	; (800e974 <SDMMC_CmdSendCSD+0x78>)
 800e912:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e916:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e918:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e91a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e91e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e920:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e924:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800e928:	1e53      	subs	r3, r2, #1
 800e92a:	b14a      	cbz	r2, 800e940 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800e92c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800e930:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e932:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e936:	d001      	beq.n	800e93c <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e938:	0492      	lsls	r2, r2, #18
 800e93a:	d504      	bpl.n	800e946 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800e93c:	1c59      	adds	r1, r3, #1
 800e93e:	d1f5      	bne.n	800e92c <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800e940:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800e944:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e946:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800e94a:	075b      	lsls	r3, r3, #29
 800e94c:	d409      	bmi.n	800e962 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e94e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800e952:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e956:	bf14      	ite	ne
 800e958:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e95a:	4b07      	ldreq	r3, [pc, #28]	; (800e978 <SDMMC_CmdSendCSD+0x7c>)
 800e95c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800e960:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e962:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e964:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e966:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e96a:	4770      	bx	lr
 800e96c:	20000094 	.word	0x20000094
 800e970:	10624dd3 	.word	0x10624dd3
 800e974:	fffee0c0 	.word	0xfffee0c0
 800e978:	002000c5 	.word	0x002000c5

0800e97c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800e97c:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e97e:	4a27      	ldr	r2, [pc, #156]	; (800ea1c <SDMMC_CmdSetRelAdd+0xa0>)
{
 800e980:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800e982:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e984:	4c26      	ldr	r4, [pc, #152]	; (800ea20 <SDMMC_CmdSetRelAdd+0xa4>)
 800e986:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e988:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e98a:	401c      	ands	r4, r3
 800e98c:	f241 1303 	movw	r3, #4355	; 0x1103
 800e990:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e992:	4c24      	ldr	r4, [pc, #144]	; (800ea24 <SDMMC_CmdSetRelAdd+0xa8>)
 800e994:	fba4 4202 	umull	r4, r2, r4, r2
 800e998:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e99c:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800e99e:	0a52      	lsrs	r2, r2, #9
 800e9a0:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 800e9a4:	b14a      	cbz	r2, 800e9ba <SDMMC_CmdSetRelAdd+0x3e>
 800e9a6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800e9a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e9aa:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e9ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 800e9b0:	d001      	beq.n	800e9b6 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e9b2:	0492      	lsls	r2, r2, #18
 800e9b4:	d507      	bpl.n	800e9c6 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 800e9b6:	1c5c      	adds	r4, r3, #1
 800e9b8:	d1f6      	bne.n	800e9a8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e9ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9c4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e9c8:	075c      	lsls	r4, r3, #29
 800e9ca:	d41c      	bmi.n	800ea06 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e9ce:	f013 0301 	ands.w	r3, r3, #1
 800e9d2:	d113      	bne.n	800e9fc <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 800e9d4:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d112      	bne.n	800ea02 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9dc:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <SDMMC_CmdSetRelAdd+0xac>)
 800e9de:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800e9e0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800e9e2:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800e9e6:	d015      	beq.n	800ea14 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e9e8:	0451      	lsls	r1, r2, #17
 800e9ea:	d410      	bmi.n	800ea0e <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e9ec:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800e9f0:	bf14      	ite	ne
 800e9f2:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800e9f6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e9fa:	e7e0      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea00:	e7dd      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e7db      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea06:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea08:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea0a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea0c:	e7d7      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea12:	e7d4      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ea14:	0c12      	lsrs	r2, r2, #16
 800ea16:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800ea18:	e7d1      	b.n	800e9be <SDMMC_CmdSetRelAdd+0x42>
 800ea1a:	bf00      	nop
 800ea1c:	20000094 	.word	0x20000094
 800ea20:	fffee0c0 	.word	0xfffee0c0
 800ea24:	10624dd3 	.word	0x10624dd3
 800ea28:	002000c5 	.word	0x002000c5

0800ea2c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea2c:	4a4c      	ldr	r2, [pc, #304]	; (800eb60 <SDMMC_CmdSendStatus+0x134>)
 800ea2e:	4b4d      	ldr	r3, [pc, #308]	; (800eb64 <SDMMC_CmdSendStatus+0x138>)
{
 800ea30:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea32:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ea34:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea36:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea3a:	68c1      	ldr	r1, [r0, #12]
 800ea3c:	4c4a      	ldr	r4, [pc, #296]	; (800eb68 <SDMMC_CmdSendStatus+0x13c>)
 800ea3e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea42:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea44:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea46:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea4a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ea4c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ea50:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ea52:	b14a      	cbz	r2, 800ea68 <SDMMC_CmdSendStatus+0x3c>
 800ea54:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ea56:	4945      	ldr	r1, [pc, #276]	; (800eb6c <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 800ea58:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ea5a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ea5c:	420a      	tst	r2, r1
 800ea5e:	d001      	beq.n	800ea64 <SDMMC_CmdSendStatus+0x38>
 800ea60:	0492      	lsls	r2, r2, #18
 800ea62:	d507      	bpl.n	800ea74 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 800ea64:	1c5c      	adds	r4, r3, #1
 800ea66:	d1f7      	bne.n	800ea58 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ea68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea72:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea76:	075c      	lsls	r4, r3, #29
 800ea78:	d43d      	bmi.n	800eaf6 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ea7a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ea7c:	f013 0301 	ands.w	r3, r3, #1
 800ea80:	d134      	bne.n	800eaec <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea82:	4b3b      	ldr	r3, [pc, #236]	; (800eb70 <SDMMC_CmdSendStatus+0x144>)
 800ea84:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ea86:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	2b0d      	cmp	r3, #13
 800ea8c:	d131      	bne.n	800eaf2 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 800ea8e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ea90:	4b38      	ldr	r3, [pc, #224]	; (800eb74 <SDMMC_CmdSendStatus+0x148>)
 800ea92:	4013      	ands	r3, r2
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d0e9      	beq.n	800ea6c <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	db30      	blt.n	800eafe <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea9c:	0051      	lsls	r1, r2, #1
 800ea9e:	d431      	bmi.n	800eb04 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eaa0:	0094      	lsls	r4, r2, #2
 800eaa2:	d431      	bmi.n	800eb08 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eaa4:	00d0      	lsls	r0, r2, #3
 800eaa6:	d431      	bmi.n	800eb0c <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eaa8:	0111      	lsls	r1, r2, #4
 800eaaa:	d432      	bmi.n	800eb12 <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eaac:	0154      	lsls	r4, r2, #5
 800eaae:	d433      	bmi.n	800eb18 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eab0:	01d0      	lsls	r0, r2, #7
 800eab2:	d434      	bmi.n	800eb1e <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800eab4:	0211      	lsls	r1, r2, #8
 800eab6:	d435      	bmi.n	800eb24 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eab8:	0254      	lsls	r4, r2, #9
 800eaba:	d436      	bmi.n	800eb2a <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eabc:	0290      	lsls	r0, r2, #10
 800eabe:	d440      	bmi.n	800eb42 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eac0:	02d1      	lsls	r1, r2, #11
 800eac2:	d43b      	bmi.n	800eb3c <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eac4:	0354      	lsls	r4, r2, #13
 800eac6:	d436      	bmi.n	800eb36 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eac8:	0390      	lsls	r0, r2, #14
 800eaca:	d431      	bmi.n	800eb30 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eacc:	03d1      	lsls	r1, r2, #15
 800eace:	d444      	bmi.n	800eb5a <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ead0:	0414      	lsls	r4, r2, #16
 800ead2:	d43f      	bmi.n	800eb54 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ead4:	0450      	lsls	r0, r2, #17
 800ead6:	d43a      	bmi.n	800eb4e <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ead8:	0491      	lsls	r1, r2, #18
 800eada:	d435      	bmi.n	800eb48 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eadc:	f012 0f08 	tst.w	r2, #8
 800eae0:	bf14      	ite	ne
 800eae2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800eae6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800eaea:	e7bf      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eaec:	2201      	movs	r2, #1
 800eaee:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaf0:	e7bc      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e7ba      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eaf6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eaf8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eafa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eafc:	e7b6      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eafe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eb02:	e7b3      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800eb04:	2340      	movs	r3, #64	; 0x40
 800eb06:	e7b1      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800eb08:	2380      	movs	r3, #128	; 0x80
 800eb0a:	e7af      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eb0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb10:	e7ac      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eb12:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb16:	e7a9      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eb18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb1c:	e7a6      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800eb1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb22:	e7a3      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb28:	e7a0      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb2e:	e79d      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800eb30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eb34:	e79a      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800eb36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800eb3a:	e797      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800eb3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb40:	e794      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eb42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eb46:	e791      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800eb48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eb4c:	e78e      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eb4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eb52:	e78b      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eb54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eb58:	e788      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eb5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb5e:	e785      	b.n	800ea6c <SDMMC_CmdSendStatus+0x40>
 800eb60:	20000094 	.word	0x20000094
 800eb64:	10624dd3 	.word	0x10624dd3
 800eb68:	fffee0c0 	.word	0xfffee0c0
 800eb6c:	00200045 	.word	0x00200045
 800eb70:	002000c5 	.word	0x002000c5
 800eb74:	fdffe008 	.word	0xfdffe008

0800eb78 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb78:	4a4d      	ldr	r2, [pc, #308]	; (800ecb0 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 800eb7a:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb7c:	494d      	ldr	r1, [pc, #308]	; (800ecb4 <SDMMC_CmdStatusRegister+0x13c>)
{
 800eb7e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb80:	4c4d      	ldr	r4, [pc, #308]	; (800ecb8 <SDMMC_CmdStatusRegister+0x140>)
 800eb82:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800eb84:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb86:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb8a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb8e:	68c4      	ldr	r4, [r0, #12]
 800eb90:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb92:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb94:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eb96:	f241 3188 	movw	r1, #5000	; 0x1388
 800eb9a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb9e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800eba0:	b14a      	cbz	r2, 800ebb6 <SDMMC_CmdStatusRegister+0x3e>
 800eba2:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800eba4:	4945      	ldr	r1, [pc, #276]	; (800ecbc <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800eba6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800eba8:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ebaa:	420a      	tst	r2, r1
 800ebac:	d001      	beq.n	800ebb2 <SDMMC_CmdStatusRegister+0x3a>
 800ebae:	0492      	lsls	r2, r2, #18
 800ebb0:	d507      	bpl.n	800ebc2 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800ebb2:	1c5c      	adds	r4, r3, #1
 800ebb4:	d1f7      	bne.n	800eba6 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800ebb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebc0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ebc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebc4:	075c      	lsls	r4, r3, #29
 800ebc6:	d43d      	bmi.n	800ec44 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ebc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ebca:	f013 0301 	ands.w	r3, r3, #1
 800ebce:	d134      	bne.n	800ec3a <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ebd0:	4b3b      	ldr	r3, [pc, #236]	; (800ecc0 <SDMMC_CmdStatusRegister+0x148>)
 800ebd2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ebd4:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	2b0d      	cmp	r3, #13
 800ebda:	d131      	bne.n	800ec40 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800ebdc:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ebde:	4b39      	ldr	r3, [pc, #228]	; (800ecc4 <SDMMC_CmdStatusRegister+0x14c>)
 800ebe0:	4013      	ands	r3, r2
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d0e9      	beq.n	800ebba <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	db30      	blt.n	800ec4c <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ebea:	0051      	lsls	r1, r2, #1
 800ebec:	d431      	bmi.n	800ec52 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ebee:	0094      	lsls	r4, r2, #2
 800ebf0:	d431      	bmi.n	800ec56 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ebf2:	00d0      	lsls	r0, r2, #3
 800ebf4:	d431      	bmi.n	800ec5a <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ebf6:	0111      	lsls	r1, r2, #4
 800ebf8:	d432      	bmi.n	800ec60 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ebfa:	0154      	lsls	r4, r2, #5
 800ebfc:	d433      	bmi.n	800ec66 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ebfe:	01d0      	lsls	r0, r2, #7
 800ec00:	d434      	bmi.n	800ec6c <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ec02:	0211      	lsls	r1, r2, #8
 800ec04:	d435      	bmi.n	800ec72 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ec06:	0254      	lsls	r4, r2, #9
 800ec08:	d436      	bmi.n	800ec78 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ec0a:	0290      	lsls	r0, r2, #10
 800ec0c:	d440      	bmi.n	800ec90 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ec0e:	02d1      	lsls	r1, r2, #11
 800ec10:	d43b      	bmi.n	800ec8a <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ec12:	0354      	lsls	r4, r2, #13
 800ec14:	d436      	bmi.n	800ec84 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ec16:	0390      	lsls	r0, r2, #14
 800ec18:	d431      	bmi.n	800ec7e <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ec1a:	03d1      	lsls	r1, r2, #15
 800ec1c:	d444      	bmi.n	800eca8 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ec1e:	0414      	lsls	r4, r2, #16
 800ec20:	d43f      	bmi.n	800eca2 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ec22:	0450      	lsls	r0, r2, #17
 800ec24:	d43a      	bmi.n	800ec9c <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ec26:	0491      	lsls	r1, r2, #18
 800ec28:	d435      	bmi.n	800ec96 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ec2a:	f012 0f08 	tst.w	r2, #8
 800ec2e:	bf14      	ite	ne
 800ec30:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ec34:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ec38:	e7bf      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec3e:	e7bc      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec40:	2301      	movs	r3, #1
 800ec42:	e7ba      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec44:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec46:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ec48:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec4a:	e7b6      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ec4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ec50:	e7b3      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ec52:	2340      	movs	r3, #64	; 0x40
 800ec54:	e7b1      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ec56:	2380      	movs	r3, #128	; 0x80
 800ec58:	e7af      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ec5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec5e:	e7ac      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ec60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec64:	e7a9      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ec66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec6a:	e7a6      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ec6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ec70:	e7a3      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec76:	e7a0      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec7c:	e79d      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ec7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ec82:	e79a      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ec84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ec88:	e797      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 800ec8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec8e:	e794      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ec90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ec94:	e791      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800ec96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ec9a:	e78e      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ec9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eca0:	e78b      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eca2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eca6:	e788      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eca8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ecac:	e785      	b.n	800ebba <SDMMC_CmdStatusRegister+0x42>
 800ecae:	bf00      	nop
 800ecb0:	20000094 	.word	0x20000094
 800ecb4:	fffee0c0 	.word	0xfffee0c0
 800ecb8:	10624dd3 	.word	0x10624dd3
 800ecbc:	00200045 	.word	0x00200045
 800ecc0:	002000c5 	.word	0x002000c5
 800ecc4:	fdffe008 	.word	0xfdffe008

0800ecc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ecc8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ecca:	4903      	ldr	r1, [pc, #12]	; (800ecd8 <MX_FATFS_Init+0x10>)
 800eccc:	4803      	ldr	r0, [pc, #12]	; (800ecdc <MX_FATFS_Init+0x14>)
 800ecce:	f003 f94f 	bl	8011f70 <FATFS_LinkDriver>
 800ecd2:	4b03      	ldr	r3, [pc, #12]	; (800ece0 <MX_FATFS_Init+0x18>)
 800ecd4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ecd6:	bd08      	pop	{r3, pc}
 800ecd8:	20019a48 	.word	0x20019a48
 800ecdc:	0801b5b4 	.word	0x0801b5b4
 800ece0:	20019a4c 	.word	0x20019a4c

0800ece4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800ece4:	2000      	movs	r0, #0
 800ece6:	4770      	bx	lr

0800ece8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ece8:	b510      	push	{r4, lr}
 800ecea:	4694      	mov	ip, r2
 800ecec:	b082      	sub	sp, #8
 800ecee:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ecf0:	460a      	mov	r2, r1
 800ecf2:	4663      	mov	r3, ip
 800ecf4:	4601      	mov	r1, r0
 800ecf6:	9400      	str	r4, [sp, #0]
 800ecf8:	4803      	ldr	r0, [pc, #12]	; (800ed08 <BSP_SD_ReadBlocks+0x20>)
 800ecfa:	f7fd fa31 	bl	800c160 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ecfe:	3800      	subs	r0, #0
 800ed00:	bf18      	it	ne
 800ed02:	2001      	movne	r0, #1
 800ed04:	b002      	add	sp, #8
 800ed06:	bd10      	pop	{r4, pc}
 800ed08:	20019264 	.word	0x20019264

0800ed0c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ed0c:	b510      	push	{r4, lr}
 800ed0e:	4694      	mov	ip, r2
 800ed10:	b082      	sub	sp, #8
 800ed12:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ed14:	460a      	mov	r2, r1
 800ed16:	4663      	mov	r3, ip
 800ed18:	4601      	mov	r1, r0
 800ed1a:	9400      	str	r4, [sp, #0]
 800ed1c:	4803      	ldr	r0, [pc, #12]	; (800ed2c <BSP_SD_WriteBlocks+0x20>)
 800ed1e:	f7fd fb27 	bl	800c370 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800ed22:	3800      	subs	r0, #0
 800ed24:	bf18      	it	ne
 800ed26:	2001      	movne	r0, #1
 800ed28:	b002      	add	sp, #8
 800ed2a:	bd10      	pop	{r4, pc}
 800ed2c:	20019264 	.word	0x20019264

0800ed30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ed30:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ed32:	4803      	ldr	r0, [pc, #12]	; (800ed40 <BSP_SD_GetCardState+0x10>)
 800ed34:	f7fd ff8a 	bl	800cc4c <HAL_SD_GetCardState>
}
 800ed38:	3804      	subs	r0, #4
 800ed3a:	bf18      	it	ne
 800ed3c:	2001      	movne	r0, #1
 800ed3e:	bd08      	pop	{r3, pc}
 800ed40:	20019264 	.word	0x20019264

0800ed44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ed44:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ed46:	4801      	ldr	r0, [pc, #4]	; (800ed4c <BSP_SD_GetCardInfo+0x8>)
 800ed48:	f7fd be30 	b.w	800c9ac <HAL_SD_GetCardInfo>
 800ed4c:	20019264 	.word	0x20019264

0800ed50 <BSP_SD_WriteCpltCallback>:
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop

0800ed54 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed54:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800ed56:	f7ff fffb 	bl	800ed50 <BSP_SD_WriteCpltCallback>
}
 800ed5a:	bd08      	pop	{r3, pc}

0800ed5c <BSP_SD_ReadCpltCallback>:
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop

0800ed60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed60:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800ed62:	f7ff fffb 	bl	800ed5c <BSP_SD_ReadCpltCallback>
}
 800ed66:	bd08      	pop	{r3, pc}

0800ed68 <BSP_SD_Init>:
{
 800ed68:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ed6a:	f7f5 fcc3 	bl	80046f4 <BSP_SD_IsDetected>
 800ed6e:	2801      	cmp	r0, #1
 800ed70:	d001      	beq.n	800ed76 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ed72:	2002      	movs	r0, #2
}
 800ed74:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800ed76:	4807      	ldr	r0, [pc, #28]	; (800ed94 <BSP_SD_Init+0x2c>)
 800ed78:	f7fd ff00 	bl	800cb7c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	d1f9      	bne.n	800ed74 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ed80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ed84:	4803      	ldr	r0, [pc, #12]	; (800ed94 <BSP_SD_Init+0x2c>)
 800ed86:	f7fd fe25 	bl	800c9d4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800ed8a:	3800      	subs	r0, #0
 800ed8c:	bf18      	it	ne
 800ed8e:	2001      	movne	r0, #1
}
 800ed90:	bd08      	pop	{r3, pc}
 800ed92:	bf00      	nop
 800ed94:	20019264 	.word	0x20019264

0800ed98 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ed98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ed9c:	4803      	ldr	r0, [pc, #12]	; (800edac <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800ed9e:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800eda0:	f7f9 fcf6 	bl	8008790 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800eda4:	fab0 f080 	clz	r0, r0
 800eda8:	0940      	lsrs	r0, r0, #5
 800edaa:	bd08      	pop	{r3, pc}
 800edac:	58020800 	.word	0x58020800

0800edb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800edb0:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800edb2:	4c0a      	ldr	r4, [pc, #40]	; (800eddc <SD_initialize+0x2c>)
 800edb4:	2501      	movs	r5, #1
 800edb6:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800edb8:	f7ff ffd6 	bl	800ed68 <BSP_SD_Init>
 800edbc:	b108      	cbz	r0, 800edc2 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800edbe:	7820      	ldrb	r0, [r4, #0]
}
 800edc0:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800edc2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800edc4:	f7ff ffb4 	bl	800ed30 <BSP_SD_GetCardState>
 800edc8:	b918      	cbnz	r0, 800edd2 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800edca:	7823      	ldrb	r3, [r4, #0]
 800edcc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800edd0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800edd2:	7823      	ldrb	r3, [r4, #0]
 800edd4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800edd6:	7023      	strb	r3, [r4, #0]
  return Stat;
 800edd8:	7820      	ldrb	r0, [r4, #0]
}
 800edda:	bd38      	pop	{r3, r4, r5, pc}
 800eddc:	200000a4 	.word	0x200000a4

0800ede0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ede0:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ede2:	2301      	movs	r3, #1
 800ede4:	4c05      	ldr	r4, [pc, #20]	; (800edfc <SD_status+0x1c>)
 800ede6:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ede8:	f7ff ffa2 	bl	800ed30 <BSP_SD_GetCardState>
 800edec:	b918      	cbnz	r0, 800edf6 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800edee:	7823      	ldrb	r3, [r4, #0]
 800edf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800edf4:	7023      	strb	r3, [r4, #0]
  return Stat;
 800edf6:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800edf8:	bd10      	pop	{r4, pc}
 800edfa:	bf00      	nop
 800edfc:	200000a4 	.word	0x200000a4

0800ee00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ee00:	b508      	push	{r3, lr}
 800ee02:	4608      	mov	r0, r1
 800ee04:	4611      	mov	r1, r2
 800ee06:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ee08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee0c:	f7ff ff6c 	bl	800ece8 <BSP_SD_ReadBlocks>
 800ee10:	b108      	cbz	r0, 800ee16 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ee12:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800ee14:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ee16:	f7ff ff8b 	bl	800ed30 <BSP_SD_GetCardState>
 800ee1a:	2800      	cmp	r0, #0
 800ee1c:	d0fa      	beq.n	800ee14 <SD_read+0x14>
 800ee1e:	f7ff ff87 	bl	800ed30 <BSP_SD_GetCardState>
 800ee22:	2800      	cmp	r0, #0
 800ee24:	d1f7      	bne.n	800ee16 <SD_read+0x16>
 800ee26:	e7f5      	b.n	800ee14 <SD_read+0x14>

0800ee28 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee28:	4b18      	ldr	r3, [pc, #96]	; (800ee8c <SD_ioctl+0x64>)
{
 800ee2a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee2c:	7818      	ldrb	r0, [r3, #0]
{
 800ee2e:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee30:	f010 0401 	ands.w	r4, r0, #1
 800ee34:	d106      	bne.n	800ee44 <SD_ioctl+0x1c>
 800ee36:	4615      	mov	r5, r2

  switch (cmd)
 800ee38:	2903      	cmp	r1, #3
 800ee3a:	d824      	bhi.n	800ee86 <SD_ioctl+0x5e>
 800ee3c:	e8df f001 	tbb	[pc, r1]
 800ee40:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee44:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ee46:	4620      	mov	r0, r4
 800ee48:	b00b      	add	sp, #44	; 0x2c
 800ee4a:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800ee4c:	460c      	mov	r4, r1
}
 800ee4e:	4620      	mov	r0, r4
 800ee50:	b00b      	add	sp, #44	; 0x2c
 800ee52:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ee54:	a801      	add	r0, sp, #4
 800ee56:	f7ff ff75 	bl	800ed44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ee5a:	9b07      	ldr	r3, [sp, #28]
}
 800ee5c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ee5e:	602b      	str	r3, [r5, #0]
}
 800ee60:	b00b      	add	sp, #44	; 0x2c
 800ee62:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ee64:	a801      	add	r0, sp, #4
 800ee66:	f7ff ff6d 	bl	800ed44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ee6a:	9b08      	ldr	r3, [sp, #32]
}
 800ee6c:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ee6e:	802b      	strh	r3, [r5, #0]
}
 800ee70:	b00b      	add	sp, #44	; 0x2c
 800ee72:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ee74:	a801      	add	r0, sp, #4
 800ee76:	f7ff ff65 	bl	800ed44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee7a:	9b08      	ldr	r3, [sp, #32]
}
 800ee7c:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ee7e:	0a5b      	lsrs	r3, r3, #9
 800ee80:	602b      	str	r3, [r5, #0]
}
 800ee82:	b00b      	add	sp, #44	; 0x2c
 800ee84:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800ee86:	2404      	movs	r4, #4
 800ee88:	e7dd      	b.n	800ee46 <SD_ioctl+0x1e>
 800ee8a:	bf00      	nop
 800ee8c:	200000a4 	.word	0x200000a4

0800ee90 <SD_write>:
{
 800ee90:	b508      	push	{r3, lr}
 800ee92:	4608      	mov	r0, r1
 800ee94:	4611      	mov	r1, r2
 800ee96:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ee98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee9c:	f7ff ff36 	bl	800ed0c <BSP_SD_WriteBlocks>
 800eea0:	b108      	cbz	r0, 800eea6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800eea2:	2001      	movs	r0, #1
}
 800eea4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800eea6:	f7ff ff43 	bl	800ed30 <BSP_SD_GetCardState>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d0fa      	beq.n	800eea4 <SD_write+0x14>
 800eeae:	f7ff ff3f 	bl	800ed30 <BSP_SD_GetCardState>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1f7      	bne.n	800eea6 <SD_write+0x16>
 800eeb6:	e7f5      	b.n	800eea4 <SD_write+0x14>

0800eeb8 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800eeb8:	4b03      	ldr	r3, [pc, #12]	; (800eec8 <disk_status+0x10>)
 800eeba:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800eebe:	4403      	add	r3, r0
 800eec0:	6852      	ldr	r2, [r2, #4]
 800eec2:	7a18      	ldrb	r0, [r3, #8]
 800eec4:	6853      	ldr	r3, [r2, #4]
 800eec6:	4718      	bx	r3
 800eec8:	20019c78 	.word	0x20019c78

0800eecc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800eecc:	4b07      	ldr	r3, [pc, #28]	; (800eeec <disk_initialize+0x20>)
 800eece:	5c1a      	ldrb	r2, [r3, r0]
 800eed0:	b952      	cbnz	r2, 800eee8 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eed2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800eed6:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800eed8:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eedc:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800eede:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eee2:	7a08      	ldrb	r0, [r1, #8]
 800eee4:	6813      	ldr	r3, [r2, #0]
 800eee6:	4718      	bx	r3
  }
  return stat;
}
 800eee8:	2000      	movs	r0, #0
 800eeea:	4770      	bx	lr
 800eeec:	20019c78 	.word	0x20019c78

0800eef0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eef0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eef2:	4c05      	ldr	r4, [pc, #20]	; (800ef08 <disk_read+0x18>)
 800eef4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800eef8:	4404      	add	r4, r0
 800eefa:	686d      	ldr	r5, [r5, #4]
 800eefc:	7a20      	ldrb	r0, [r4, #8]
 800eefe:	68ac      	ldr	r4, [r5, #8]
 800ef00:	46a4      	mov	ip, r4
  return res;
}
 800ef02:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ef04:	4760      	bx	ip
 800ef06:	bf00      	nop
 800ef08:	20019c78 	.word	0x20019c78

0800ef0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ef0c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ef0e:	4c05      	ldr	r4, [pc, #20]	; (800ef24 <disk_write+0x18>)
 800ef10:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ef14:	4404      	add	r4, r0
 800ef16:	686d      	ldr	r5, [r5, #4]
 800ef18:	7a20      	ldrb	r0, [r4, #8]
 800ef1a:	68ec      	ldr	r4, [r5, #12]
 800ef1c:	46a4      	mov	ip, r4
  return res;
}
 800ef1e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ef20:	4760      	bx	ip
 800ef22:	bf00      	nop
 800ef24:	20019c78 	.word	0x20019c78

0800ef28 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ef28:	4b04      	ldr	r3, [pc, #16]	; (800ef3c <disk_ioctl+0x14>)
 800ef2a:	eb03 0c00 	add.w	ip, r3, r0
 800ef2e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800ef38:	691b      	ldr	r3, [r3, #16]
 800ef3a:	4718      	bx	r3
 800ef3c:	20019c78 	.word	0x20019c78

0800ef40 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800ef40:	4b26      	ldr	r3, [pc, #152]	; (800efdc <inc_lock+0x9c>)
{
 800ef42:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	6805      	ldr	r5, [r0, #0]
 800ef48:	4295      	cmp	r5, r2
 800ef4a:	d01b      	beq.n	800ef84 <inc_lock+0x44>
 800ef4c:	691c      	ldr	r4, [r3, #16]
 800ef4e:	42ac      	cmp	r4, r5
 800ef50:	d006      	beq.n	800ef60 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef52:	b30a      	cbz	r2, 800ef98 <inc_lock+0x58>
 800ef54:	2c00      	cmp	r4, #0
 800ef56:	d036      	beq.n	800efc6 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ef58:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	bcf0      	pop	{r4, r5, r6, r7}
 800ef5e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800ef60:	695e      	ldr	r6, [r3, #20]
 800ef62:	6887      	ldr	r7, [r0, #8]
 800ef64:	42be      	cmp	r6, r7
 800ef66:	d1f4      	bne.n	800ef52 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800ef68:	699e      	ldr	r6, [r3, #24]
 800ef6a:	6947      	ldr	r7, [r0, #20]
 800ef6c:	42be      	cmp	r6, r7
 800ef6e:	d1f0      	bne.n	800ef52 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef70:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ef72:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ef76:	bb49      	cbnz	r1, 800efcc <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ef78:	0111      	lsls	r1, r2, #4
	return i + 1;
 800ef7a:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ef7c:	8982      	ldrh	r2, [r0, #12]
 800ef7e:	3201      	adds	r2, #1
 800ef80:	b292      	uxth	r2, r2
 800ef82:	e01b      	b.n	800efbc <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
 800ef84:	6884      	ldr	r4, [r0, #8]
 800ef86:	685e      	ldr	r6, [r3, #4]
 800ef88:	42a6      	cmp	r6, r4
 800ef8a:	d1df      	bne.n	800ef4c <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800ef8c:	689c      	ldr	r4, [r3, #8]
 800ef8e:	6946      	ldr	r6, [r0, #20]
 800ef90:	42a6      	cmp	r6, r4
 800ef92:	d1db      	bne.n	800ef4c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef94:	2200      	movs	r2, #0
 800ef96:	e7ec      	b.n	800ef72 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef98:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ef9a:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800ef9c:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800efa0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800efa4:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800efa6:	6945      	ldr	r5, [r0, #20]
 800efa8:	6880      	ldr	r0, [r0, #8]
 800efaa:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
 800efae:	f04f 0000 	mov.w	r0, #0
 800efb2:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800efb4:	bf14      	ite	ne
 800efb6:	f44f 7280 	movne.w	r2, #256	; 0x100
 800efba:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800efbc:	440b      	add	r3, r1
}
 800efbe:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800efc0:	819a      	strh	r2, [r3, #12]
}
 800efc2:	bcf0      	pop	{r4, r5, r6, r7}
 800efc4:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efc6:	2402      	movs	r4, #2
 800efc8:	2201      	movs	r2, #1
 800efca:	e7e6      	b.n	800ef9a <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800efcc:	8980      	ldrh	r0, [r0, #12]
 800efce:	0111      	lsls	r1, r2, #4
 800efd0:	2800      	cmp	r0, #0
 800efd2:	d1c1      	bne.n	800ef58 <inc_lock+0x18>
	return i + 1;
 800efd4:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800efd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efda:	e7ef      	b.n	800efbc <inc_lock+0x7c>
 800efdc:	20019a54 	.word	0x20019a54

0800efe0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	440a      	add	r2, r1
 800efe6:	460d      	mov	r5, r1
 800efe8:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800efea:	4f37      	ldr	r7, [pc, #220]	; (800f0c8 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800efec:	42aa      	cmp	r2, r5
 800efee:	d012      	beq.n	800f016 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800eff0:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800eff4:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800eff8:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800effc:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f000:	2919      	cmp	r1, #25
 800f002:	d9f3      	bls.n	800efec <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f004:	2c7f      	cmp	r4, #127	; 0x7f
 800f006:	bf88      	it	hi
 800f008:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800f00c:	2c00      	cmp	r4, #0
 800f00e:	d1ed      	bne.n	800efec <pattern_matching+0xc>
 800f010:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800f012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f016:	1e1f      	subs	r7, r3, #0
 800f018:	f896 8000 	ldrb.w	r8, [r6]
 800f01c:	bf18      	it	ne
 800f01e:	2701      	movne	r7, #1
 800f020:	f1b8 0f00 	cmp.w	r8, #0
 800f024:	d100      	bne.n	800f028 <pattern_matching+0x48>
 800f026:	bb8f      	cbnz	r7, 800f08c <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f028:	4c27      	ldr	r4, [pc, #156]	; (800f0c8 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800f02a:	4630      	mov	r0, r6
{
 800f02c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800f02e:	46a9      	mov	r9, r5
 800f030:	e010      	b.n	800f054 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f032:	3a20      	subs	r2, #32
 800f034:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f036:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f03a:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f03e:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f040:	f1bc 0f19 	cmp.w	ip, #25
 800f044:	d815      	bhi.n	800f072 <pattern_matching+0x92>
 800f046:	3b20      	subs	r3, #32
 800f048:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d118      	bne.n	800f080 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800f04e:	b1eb      	cbz	r3, 800f08c <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800f050:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f054:	2b3f      	cmp	r3, #63	; 0x3f
 800f056:	d01c      	beq.n	800f092 <pattern_matching+0xb2>
 800f058:	2b2a      	cmp	r3, #42	; 0x2a
 800f05a:	d01a      	beq.n	800f092 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f05c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f060:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f062:	2919      	cmp	r1, #25
 800f064:	d9e5      	bls.n	800f032 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f066:	2a7f      	cmp	r2, #127	; 0x7f
 800f068:	d9e5      	bls.n	800f036 <pattern_matching+0x56>
 800f06a:	4423      	add	r3, r4
 800f06c:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800f070:	e7e1      	b.n	800f036 <pattern_matching+0x56>
 800f072:	2b7f      	cmp	r3, #127	; 0x7f
 800f074:	d9e9      	bls.n	800f04a <pattern_matching+0x6a>
 800f076:	4421      	add	r1, r4
 800f078:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d0e6      	beq.n	800f04e <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f080:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0c4      	beq.n	800f010 <pattern_matching+0x30>
 800f086:	2f00      	cmp	r7, #0
 800f088:	d1cf      	bne.n	800f02a <pattern_matching+0x4a>
 800f08a:	e7c1      	b.n	800f010 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f08c:	2001      	movs	r0, #1
}
 800f08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f092:	4601      	mov	r1, r0
				nm = nx = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	f811 cb01 	ldrb.w	ip, [r1], #1
 800f09a:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800f09c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800f0a0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800f0a2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800f0a6:	bf0c      	ite	eq
 800f0a8:	3201      	addeq	r2, #1
 800f0aa:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800f0ac:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800f0b0:	d0f4      	beq.n	800f09c <pattern_matching+0xbc>
 800f0b2:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800f0b6:	d0f1      	beq.n	800f09c <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	f7ff ff91 	bl	800efe0 <pattern_matching>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d1e4      	bne.n	800f08c <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800f0c2:	f899 3000 	ldrb.w	r3, [r9]
 800f0c6:	e7db      	b.n	800f080 <pattern_matching+0xa0>
 800f0c8:	0801b5dc 	.word	0x0801b5dc

0800f0cc <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800f0cc:	2300      	movs	r3, #0
{
 800f0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800f0d2:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800f0d6:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f0d8:	69c2      	ldr	r2, [r0, #28]
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	d063      	beq.n	800f1a6 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f0de:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	460d      	mov	r5, r1
 800f0e4:	3201      	adds	r2, #1
 800f0e6:	d01f      	beq.n	800f128 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f0e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0ec:	8818      	ldrh	r0, [r3, #0]
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	d063      	beq.n	800f1ba <get_fileinfo+0xee>
 800f0f2:	f101 0715 	add.w	r7, r1, #21
 800f0f6:	2601      	movs	r6, #1
 800f0f8:	e000      	b.n	800f0fc <get_fileinfo+0x30>
 800f0fa:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f0fc:	2100      	movs	r1, #0
 800f0fe:	f002 ff5b 	bl	8011fb8 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f102:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f104:	2800      	cmp	r0, #0
 800f106:	d058      	beq.n	800f1ba <get_fileinfo+0xee>
 800f108:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800f10c:	d055      	beq.n	800f1ba <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800f10e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f112:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800f116:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d1ed      	bne.n	800f0fa <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f11e:	442e      	add	r6, r5
 800f120:	2300      	movs	r3, #0
 800f122:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f124:	7da8      	ldrb	r0, [r5, #22]
 800f126:	e000      	b.n	800f12a <get_fileinfo+0x5e>
 800f128:	4618      	mov	r0, r3
	i = j = 0;
 800f12a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800f12e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800f130:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800f132:	6a21      	ldr	r1, [r4, #32]
 800f134:	5c8b      	ldrb	r3, [r1, r2]
 800f136:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800f138:	2b20      	cmp	r3, #32
 800f13a:	d01b      	beq.n	800f174 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f13c:	2b05      	cmp	r3, #5
 800f13e:	bf08      	it	eq
 800f140:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800f142:	2a09      	cmp	r2, #9
 800f144:	d031      	beq.n	800f1aa <get_fileinfo+0xde>
		fno->altname[j] = c;
 800f146:	eb05 010c 	add.w	r1, r5, ip
 800f14a:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800f14c:	b980      	cbnz	r0, 800f170 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f14e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800f152:	2e19      	cmp	r6, #25
 800f154:	d80b      	bhi.n	800f16e <get_fileinfo+0xa2>
 800f156:	6a26      	ldr	r6, [r4, #32]
 800f158:	2a08      	cmp	r2, #8
 800f15a:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800f15e:	bf8c      	ite	hi
 800f160:	2610      	movhi	r6, #16
 800f162:	2608      	movls	r6, #8
 800f164:	ea1e 0f06 	tst.w	lr, r6
 800f168:	d001      	beq.n	800f16e <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800f16a:	3320      	adds	r3, #32
 800f16c:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800f16e:	758b      	strb	r3, [r1, #22]
		j++;
 800f170:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800f174:	2a0b      	cmp	r2, #11
 800f176:	d1dc      	bne.n	800f132 <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800f178:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800f17c:	b928      	cbnz	r0, 800f18a <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800f17e:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800f180:	6a23      	ldr	r3, [r4, #32]
 800f182:	7b1b      	ldrb	r3, [r3, #12]
 800f184:	2b00      	cmp	r3, #0
 800f186:	bf08      	it	eq
 800f188:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800f18a:	2300      	movs	r3, #0
 800f18c:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f18e:	6a23      	ldr	r3, [r4, #32]
 800f190:	7adb      	ldrb	r3, [r3, #11]
 800f192:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800f194:	6a23      	ldr	r3, [r4, #32]
 800f196:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f198:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800f19a:	6a23      	ldr	r3, [r4, #32]
 800f19c:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f1a0:	0c1a      	lsrs	r2, r3, #16
 800f1a2:	80eb      	strh	r3, [r5, #6]
 800f1a4:	80aa      	strh	r2, [r5, #4]
}
 800f1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800f1aa:	eb05 010c 	add.w	r1, r5, ip
 800f1ae:	b900      	cbnz	r0, 800f1b2 <get_fileinfo+0xe6>
 800f1b0:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800f1b2:	f10c 0c01 	add.w	ip, ip, #1
 800f1b6:	724f      	strb	r7, [r1, #9]
 800f1b8:	e7c5      	b.n	800f146 <get_fileinfo+0x7a>
			i = j = 0;
 800f1ba:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f1bc:	2300      	movs	r3, #0
 800f1be:	442e      	add	r6, r5
 800f1c0:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f1c2:	7da8      	ldrb	r0, [r5, #22]
 800f1c4:	e7b1      	b.n	800f12a <get_fileinfo+0x5e>
 800f1c6:	bf00      	nop

0800f1c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f1c8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f1ce:	2300      	movs	r3, #0
{
 800f1d0:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1d2:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1d4:	70c3      	strb	r3, [r0, #3]
 800f1d6:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f1d8:	d00c      	beq.n	800f1f4 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f1da:	460d      	mov	r5, r1
 800f1dc:	460a      	mov	r2, r1
 800f1de:	2301      	movs	r3, #1
 800f1e0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800f1e4:	7840      	ldrb	r0, [r0, #1]
 800f1e6:	f7ff fe83 	bl	800eef0 <disk_read>
 800f1ea:	b110      	cbz	r0, 800f1f2 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f1ec:	2004      	movs	r0, #4
			fs->winsect = sector;
 800f1ee:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800f1f0:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800f1f2:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f1f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1f8:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d11a      	bne.n	800f236 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f200:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800f204:	2be9      	cmp	r3, #233	; 0xe9
 800f206:	d007      	beq.n	800f218 <check_fs+0x50>
 800f208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f20a:	4a0d      	ldr	r2, [pc, #52]	; (800f240 <check_fs+0x78>)
 800f20c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800f210:	4293      	cmp	r3, r2
 800f212:	d001      	beq.n	800f218 <check_fs+0x50>
	return 2;
 800f214:	2002      	movs	r0, #2
}
 800f216:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800f218:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f21c:	4a09      	ldr	r2, [pc, #36]	; (800f244 <check_fs+0x7c>)
 800f21e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f222:	4293      	cmp	r3, r2
 800f224:	d009      	beq.n	800f23a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800f226:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f22a:	4b07      	ldr	r3, [pc, #28]	; (800f248 <check_fs+0x80>)
 800f22c:	4298      	cmp	r0, r3
 800f22e:	bf14      	ite	ne
 800f230:	2002      	movne	r0, #2
 800f232:	2000      	moveq	r0, #0
}
 800f234:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f236:	2003      	movs	r0, #3
}
 800f238:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f23a:	2000      	movs	r0, #0
}
 800f23c:	bd70      	pop	{r4, r5, r6, pc}
 800f23e:	bf00      	nop
 800f240:	009000eb 	.word	0x009000eb
 800f244:	00544146 	.word	0x00544146
 800f248:	33544146 	.word	0x33544146

0800f24c <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f24e:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800f250:	b083      	sub	sp, #12
 800f252:	4604      	mov	r4, r0
 800f254:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f256:	b973      	cbnz	r3, 800f276 <move_window.part.0+0x2a>
 800f258:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f25c:	2301      	movs	r3, #1
 800f25e:	462a      	mov	r2, r5
 800f260:	7860      	ldrb	r0, [r4, #1]
 800f262:	f7ff fe45 	bl	800eef0 <disk_read>
 800f266:	b910      	cbnz	r0, 800f26e <move_window.part.0+0x22>
			fs->winsect = sector;
 800f268:	6325      	str	r5, [r4, #48]	; 0x30
}
 800f26a:	b003      	add	sp, #12
 800f26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800f26e:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f270:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f274:	e7f8      	b.n	800f268 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 800f276:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f278:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800f27c:	2301      	movs	r3, #1
 800f27e:	7840      	ldrb	r0, [r0, #1]
 800f280:	4632      	mov	r2, r6
 800f282:	9101      	str	r1, [sp, #4]
 800f284:	f7ff fe42 	bl	800ef0c <disk_write>
 800f288:	b9b8      	cbnz	r0, 800f2ba <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f28a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f28c:	69e3      	ldr	r3, [r4, #28]
 800f28e:	1ab2      	subs	r2, r6, r2
 800f290:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800f292:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f294:	429a      	cmp	r2, r3
 800f296:	d2e1      	bcs.n	800f25c <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f298:	78a7      	ldrb	r7, [r4, #2]
 800f29a:	2f01      	cmp	r7, #1
 800f29c:	d801      	bhi.n	800f2a2 <move_window.part.0+0x56>
 800f29e:	e7dd      	b.n	800f25c <move_window.part.0+0x10>
					wsect += fs->fsize;
 800f2a0:	69e3      	ldr	r3, [r4, #28]
 800f2a2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f2a4:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	7860      	ldrb	r0, [r4, #1]
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	9101      	str	r1, [sp, #4]
 800f2ae:	f7ff fe2d 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f2b2:	2f01      	cmp	r7, #1
 800f2b4:	9901      	ldr	r1, [sp, #4]
 800f2b6:	d1f3      	bne.n	800f2a0 <move_window.part.0+0x54>
 800f2b8:	e7d0      	b.n	800f25c <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 800f2ba:	2001      	movs	r0, #1
}
 800f2bc:	b003      	add	sp, #12
 800f2be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2c0 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f2c0:	2300      	movs	r3, #0
{
 800f2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800f2c6:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800f2c8:	6804      	ldr	r4, [r0, #0]
 800f2ca:	b18c      	cbz	r4, 800f2f0 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f2cc:	7825      	ldrb	r5, [r4, #0]
 800f2ce:	2d1f      	cmp	r5, #31
 800f2d0:	d912      	bls.n	800f2f8 <find_volume+0x38>
 800f2d2:	2d3a      	cmp	r5, #58	; 0x3a
 800f2d4:	d010      	beq.n	800f2f8 <find_volume+0x38>
 800f2d6:	46a4      	mov	ip, r4
 800f2d8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f2dc:	2b1f      	cmp	r3, #31
 800f2de:	d90d      	bls.n	800f2fc <find_volume+0x3c>
 800f2e0:	2b3a      	cmp	r3, #58	; 0x3a
 800f2e2:	d1f9      	bne.n	800f2d8 <find_volume+0x18>
			i = *tp++ - '0';
 800f2e4:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f2e6:	45a4      	cmp	ip, r4
 800f2e8:	d102      	bne.n	800f2f0 <find_volume+0x30>
 800f2ea:	2d30      	cmp	r5, #48	; 0x30
 800f2ec:	f000 80da 	beq.w	800f4a4 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f2f0:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f2f8:	462b      	mov	r3, r5
 800f2fa:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f2fc:	2b3a      	cmp	r3, #58	; 0x3a
 800f2fe:	d0f1      	beq.n	800f2e4 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f300:	4ba6      	ldr	r3, [pc, #664]	; (800f59c <find_volume+0x2dc>)
 800f302:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f304:	2d00      	cmp	r5, #0
 800f306:	f000 80c9 	beq.w	800f49c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800f30a:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f30c:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f310:	782b      	ldrb	r3, [r5, #0]
 800f312:	b17b      	cbz	r3, 800f334 <find_volume+0x74>
		stat = disk_status(fs->drv);
 800f314:	7868      	ldrb	r0, [r5, #1]
 800f316:	f7ff fdcf 	bl	800eeb8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f31a:	07c1      	lsls	r1, r0, #31
 800f31c:	d40a      	bmi.n	800f334 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f31e:	2c00      	cmp	r4, #0
 800f320:	f000 80ab 	beq.w	800f47a <find_volume+0x1ba>
 800f324:	f010 0404 	ands.w	r4, r0, #4
 800f328:	f000 80a7 	beq.w	800f47a <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800f32c:	240a      	movs	r4, #10
}
 800f32e:	4620      	mov	r0, r4
 800f330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800f334:	2000      	movs	r0, #0
 800f336:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f338:	f7ff fdc8 	bl	800eecc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f33c:	07c2      	lsls	r2, r0, #31
 800f33e:	f100 809f 	bmi.w	800f480 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f342:	b10c      	cbz	r4, 800f348 <find_volume+0x88>
 800f344:	0743      	lsls	r3, r0, #29
 800f346:	d4f1      	bmi.n	800f32c <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f348:	2100      	movs	r1, #0
 800f34a:	4628      	mov	r0, r5
 800f34c:	f7ff ff3c 	bl	800f1c8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f350:	2802      	cmp	r0, #2
 800f352:	d077      	beq.n	800f444 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f354:	2804      	cmp	r0, #4
 800f356:	f000 809f 	beq.w	800f498 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f35a:	2801      	cmp	r0, #1
 800f35c:	f200 808c 	bhi.w	800f478 <find_volume+0x1b8>
	bsect = 0;
 800f360:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f362:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800f366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f36a:	f040 8085 	bne.w	800f478 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f36e:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f372:	b902      	cbnz	r2, 800f376 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800f374:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f376:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800f37a:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f37c:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f37e:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f380:	2901      	cmp	r1, #1
 800f382:	d879      	bhi.n	800f478 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f384:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800f388:	b288      	uxth	r0, r1
 800f38a:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d073      	beq.n	800f478 <find_volume+0x1b8>
 800f390:	1e48      	subs	r0, r1, #1
 800f392:	4208      	tst	r0, r1
 800f394:	d170      	bne.n	800f478 <find_volume+0x1b8>
	rv = ptr[1];
 800f396:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f39a:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f39e:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3a2:	d169      	bne.n	800f478 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3a4:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f3a8:	b900      	cbnz	r0, 800f3ac <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800f3aa:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 800f3ac:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f3b0:	2f00      	cmp	r7, #0
 800f3b2:	d061      	beq.n	800f478 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f3b4:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f3b8:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800f3bc:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f3be:	42b0      	cmp	r0, r6
 800f3c0:	d35a      	bcc.n	800f478 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f3c2:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f3c6:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f3c8:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f3cc:	d354      	bcc.n	800f478 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f3ce:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800f3d2:	4288      	cmp	r0, r1
 800f3d4:	f200 8084 	bhi.w	800f4e0 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f3d8:	f640 71f5 	movw	r1, #4085	; 0xff5
 800f3dc:	4288      	cmp	r0, r1
 800f3de:	f200 80a3 	bhi.w	800f528 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f3e2:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f3e4:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f3e6:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800f3e8:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f3ea:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800f3ec:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f3ee:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f3f0:	f1bc 0f00 	cmp.w	ip, #0
 800f3f4:	d040      	beq.n	800f478 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f3f6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800f3fa:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f3fe:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f400:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800f404:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f406:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f408:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800f40c:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800f410:	d332      	bcc.n	800f478 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800f416:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f418:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800f41c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800f41e:	4960      	ldr	r1, [pc, #384]	; (800f5a0 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800f420:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f422:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f424:	485f      	ldr	r0, [pc, #380]	; (800f5a4 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f426:	4a60      	ldr	r2, [pc, #384]	; (800f5a8 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 800f428:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f42a:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f42c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f42e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f430:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800f432:	800b      	strh	r3, [r1, #0]
 800f434:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f436:	f000 8086 	beq.w	800f546 <find_volume+0x286>
 800f43a:	6913      	ldr	r3, [r2, #16]
 800f43c:	429d      	cmp	r5, r3
 800f43e:	d06f      	beq.n	800f520 <find_volume+0x260>
	return FR_OK;
 800f440:	2400      	movs	r4, #0
 800f442:	e01a      	b.n	800f47a <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f444:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800f448:	b10e      	cbz	r6, 800f44e <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800f44a:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f44e:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800f452:	b10c      	cbz	r4, 800f458 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800f454:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f458:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800f45c:	b303      	cbz	r3, 800f4a0 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800f45e:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f462:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800f466:	b10f      	cbz	r7, 800f46c <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800f468:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f46c:	b9f6      	cbnz	r6, 800f4ac <find_volume+0x1ec>
 800f46e:	bb2c      	cbnz	r4, 800f4bc <find_volume+0x1fc>
 800f470:	f1b8 0f00 	cmp.w	r8, #0
 800f474:	d12c      	bne.n	800f4d0 <find_volume+0x210>
 800f476:	b93f      	cbnz	r7, 800f488 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f478:	240d      	movs	r4, #13
}
 800f47a:	4620      	mov	r0, r4
 800f47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f480:	2403      	movs	r4, #3
}
 800f482:	4620      	mov	r0, r4
 800f484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f488:	4639      	mov	r1, r7
 800f48a:	4628      	mov	r0, r5
 800f48c:	f7ff fe9c 	bl	800f1c8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f490:	2801      	cmp	r0, #1
 800f492:	d95b      	bls.n	800f54c <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f494:	2804      	cmp	r0, #4
 800f496:	d1ef      	bne.n	800f478 <find_volume+0x1b8>
 800f498:	2401      	movs	r4, #1
 800f49a:	e7ee      	b.n	800f47a <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f49c:	240c      	movs	r4, #12
 800f49e:	e7ec      	b.n	800f47a <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f4a0:	4698      	mov	r8, r3
 800f4a2:	e7de      	b.n	800f462 <find_volume+0x1a2>
					*path = ++tt;
 800f4a4:	f10c 0301 	add.w	r3, ip, #1
 800f4a8:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f4aa:	e729      	b.n	800f300 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7ff fe8a 	bl	800f1c8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4b4:	2801      	cmp	r0, #1
 800f4b6:	d8da      	bhi.n	800f46e <find_volume+0x1ae>
 800f4b8:	4634      	mov	r4, r6
 800f4ba:	e752      	b.n	800f362 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4bc:	4621      	mov	r1, r4
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f7ff fe82 	bl	800f1c8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4c4:	2801      	cmp	r0, #1
 800f4c6:	f67f af4c 	bls.w	800f362 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4ca:	f1b8 0f00 	cmp.w	r8, #0
 800f4ce:	d0d2      	beq.n	800f476 <find_volume+0x1b6>
 800f4d0:	4641      	mov	r1, r8
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f7ff fe78 	bl	800f1c8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f4d8:	2801      	cmp	r0, #1
 800f4da:	d8cc      	bhi.n	800f476 <find_volume+0x1b6>
 800f4dc:	4644      	mov	r4, r8
 800f4de:	e740      	b.n	800f362 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 800f4e0:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f4e4:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f4e6:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f4e8:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4ea:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f4ee:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f4f0:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f4f2:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800f4f4:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4f6:	d1bf      	bne.n	800f478 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4f8:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800f4fa:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f4fc:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f500:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f502:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800f506:	d3b7      	bcc.n	800f478 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f508:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800f510:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f512:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800f514:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f516:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f51a:	d019      	beq.n	800f550 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f51c:	2003      	movs	r0, #3
 800f51e:	e77e      	b.n	800f41e <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f520:	2300      	movs	r3, #0
	return FR_OK;
 800f522:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f524:	6113      	str	r3, [r2, #16]
 800f526:	e7a8      	b.n	800f47a <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f528:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f52a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800f52c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800f52e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f530:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800f532:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f534:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f536:	f1bc 0f00 	cmp.w	ip, #0
 800f53a:	d09d      	beq.n	800f478 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f53c:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f53e:	0049      	lsls	r1, r1, #1
 800f540:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f542:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f544:	e760      	b.n	800f408 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	6013      	str	r3, [r2, #0]
 800f54a:	e776      	b.n	800f43a <find_volume+0x17a>
 800f54c:	463c      	mov	r4, r7
 800f54e:	e708      	b.n	800f362 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f550:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f552:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f554:	4299      	cmp	r1, r3
 800f556:	d004      	beq.n	800f562 <find_volume+0x2a2>
 800f558:	4628      	mov	r0, r5
 800f55a:	f7ff fe77 	bl	800f24c <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f55e:	2800      	cmp	r0, #0
 800f560:	d1dc      	bne.n	800f51c <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f562:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f566:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800f56a:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f56c:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 800f56e:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f570:	d1d4      	bne.n	800f51c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800f572:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f574:	4b0d      	ldr	r3, [pc, #52]	; (800f5ac <find_volume+0x2ec>)
 800f576:	429a      	cmp	r2, r3
 800f578:	d1d0      	bne.n	800f51c <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f57a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800f57e:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f582:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f586:	3320      	adds	r3, #32
 800f588:	429a      	cmp	r2, r3
 800f58a:	d1c7      	bne.n	800f51c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800f58c:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f590:	2003      	movs	r0, #3
 800f592:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800f596:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800f59a:	e740      	b.n	800f41e <find_volume+0x15e>
 800f59c:	20019a50 	.word	0x20019a50
 800f5a0:	20019a74 	.word	0x20019a74
 800f5a4:	20019a78 	.word	0x20019a78
 800f5a8:	20019a54 	.word	0x20019a54
 800f5ac:	41615252 	.word	0x41615252

0800f5b0 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800f5b4:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	460d      	mov	r5, r1
 800f5ba:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800f5bc:	2b02      	cmp	r3, #2
 800f5be:	d006      	beq.n	800f5ce <put_fat.part.0+0x1e>
 800f5c0:	2b03      	cmp	r3, #3
 800f5c2:	d052      	beq.n	800f66a <put_fat.part.0+0xba>
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d01b      	beq.n	800f600 <put_fat.part.0+0x50>
 800f5c8:	2002      	movs	r0, #2
}
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f5ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f5d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f5d2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f5d6:	4299      	cmp	r1, r3
 800f5d8:	d003      	beq.n	800f5e2 <put_fat.part.0+0x32>
 800f5da:	f7ff fe37 	bl	800f24c <move_window.part.0>
			if (res != FR_OK) break;
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d1f3      	bne.n	800f5ca <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5e2:	006d      	lsls	r5, r5, #1
 800f5e4:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800f5e8:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 800f5ec:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5ee:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800f5f2:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f5f4:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 800f5f6:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800f5f8:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800f5fa:	70e3      	strb	r3, [r4, #3]
}
 800f5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 800f600:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f604:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f606:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f608:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f60c:	4299      	cmp	r1, r3
 800f60e:	d003      	beq.n	800f618 <put_fat.part.0+0x68>
 800f610:	f7ff fe1c 	bl	800f24c <move_window.part.0>
			if (res != FR_OK) break;
 800f614:	2800      	cmp	r0, #0
 800f616:	d1d8      	bne.n	800f5ca <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f618:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800f61a:	f107 0801 	add.w	r8, r7, #1
 800f61e:	f104 0934 	add.w	r9, r4, #52	; 0x34
 800f622:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f626:	d542      	bpl.n	800f6ae <put_fat.part.0+0xfe>
 800f628:	f819 3007 	ldrb.w	r3, [r9, r7]
 800f62c:	f003 030f 	and.w	r3, r3, #15
 800f630:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800f634:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 800f638:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f63a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800f63c:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f63e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f644:	4299      	cmp	r1, r3
 800f646:	d004      	beq.n	800f652 <put_fat.part.0+0xa2>
 800f648:	4620      	mov	r0, r4
 800f64a:	f7ff fdff 	bl	800f24c <move_window.part.0>
			if (res != FR_OK) break;
 800f64e:	2800      	cmp	r0, #0
 800f650:	d1bb      	bne.n	800f5ca <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f652:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f656:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 800f65a:	44c8      	add	r8, r9
			fs->wflag = 1;
 800f65c:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f65e:	f888 2000 	strb.w	r2, [r8]
			break;
 800f662:	2000      	movs	r0, #0
			fs->wflag = 1;
 800f664:	70e3      	strb	r3, [r4, #3]
}
 800f666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f66a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f66c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f66e:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f672:	4299      	cmp	r1, r3
 800f674:	d003      	beq.n	800f67e <put_fat.part.0+0xce>
 800f676:	f7ff fde9 	bl	800f24c <move_window.part.0>
			if (res != FR_OK) break;
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d1a5      	bne.n	800f5ca <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f67e:	00ad      	lsls	r5, r5, #2
 800f680:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f684:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 800f688:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800f68c:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f68e:	1941      	adds	r1, r0, r5
 800f690:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f694:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800f696:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f698:	5542      	strb	r2, [r0, r5]
 800f69a:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800f69c:	708b      	strb	r3, [r1, #2]
 800f69e:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 800f6a0:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f6a2:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 800f6a4:	70ca      	strb	r2, [r1, #3]
			break;
 800f6a6:	2000      	movs	r0, #0
			fs->wflag = 1;
 800f6a8:	70e3      	strb	r3, [r4, #3]
}
 800f6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f6ae:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 800f6b2:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f6b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800f6b6:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f6b8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f6bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6be:	4299      	cmp	r1, r3
 800f6c0:	d005      	beq.n	800f6ce <put_fat.part.0+0x11e>
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f7ff fdc2 	bl	800f24c <move_window.part.0>
			if (res != FR_OK) break;
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f47f af7e 	bne.w	800f5ca <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800f6ce:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f6d2:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 800f6d6:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f6d8:	f898 3000 	ldrb.w	r3, [r8]
 800f6dc:	f023 060f 	bic.w	r6, r3, #15
 800f6e0:	4332      	orrs	r2, r6
 800f6e2:	e7bb      	b.n	800f65c <put_fat.part.0+0xac>

0800f6e4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f6e4:	2901      	cmp	r1, #1
 800f6e6:	d90e      	bls.n	800f706 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800f6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f6ea:	6983      	ldr	r3, [r0, #24]
 800f6ec:	460c      	mov	r4, r1
 800f6ee:	4605      	mov	r5, r0
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	d206      	bcs.n	800f702 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800f6f4:	7803      	ldrb	r3, [r0, #0]
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d03e      	beq.n	800f778 <get_fat.isra.0+0x94>
 800f6fa:	2b03      	cmp	r3, #3
 800f6fc:	d02b      	beq.n	800f756 <get_fat.isra.0+0x72>
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d003      	beq.n	800f70a <get_fat.isra.0+0x26>
 800f702:	2001      	movs	r0, #1
}
 800f704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800f706:	2001      	movs	r0, #1
}
 800f708:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 800f70a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f70e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f710:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f712:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f716:	4291      	cmp	r1, r2
 800f718:	d004      	beq.n	800f724 <get_fat.isra.0+0x40>
 800f71a:	f7ff fd97 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f71e:	bba0      	cbnz	r0, 800f78a <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f720:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f722:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800f724:	1c77      	adds	r7, r6, #1
 800f726:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f72a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800f72e:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f730:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800f732:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f736:	d003      	beq.n	800f740 <get_fat.isra.0+0x5c>
 800f738:	4628      	mov	r0, r5
 800f73a:	f7ff fd87 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f73e:	bb20      	cbnz	r0, 800f78a <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f740:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f744:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800f746:	443d      	add	r5, r7
 800f748:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800f74c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f750:	d524      	bpl.n	800f79c <get_fat.isra.0+0xb8>
 800f752:	0900      	lsrs	r0, r0, #4
}
 800f754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f756:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f758:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f75a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f75e:	4299      	cmp	r1, r3
 800f760:	d002      	beq.n	800f768 <get_fat.isra.0+0x84>
 800f762:	f7ff fd73 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f766:	b980      	cbnz	r0, 800f78a <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f768:	00a4      	lsls	r4, r4, #2
 800f76a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800f76e:	4425      	add	r5, r4
 800f770:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f772:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800f776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f778:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f77a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f77c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f780:	4299      	cmp	r1, r3
 800f782:	d005      	beq.n	800f790 <get_fat.isra.0+0xac>
 800f784:	f7ff fd62 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f788:	b110      	cbz	r0, 800f790 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800f78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f790:	0064      	lsls	r4, r4, #1
 800f792:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800f796:	4425      	add	r5, r4
 800f798:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 800f79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f79c:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800f7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7a2:	bf00      	nop

0800f7a4 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7a8:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7aa:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7ac:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7ae:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800f7b2:	d22d      	bcs.n	800f810 <dir_next.constprop.0+0x6c>
 800f7b4:	b363      	cbz	r3, 800f810 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7b6:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800f7ba:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f7bc:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7be:	b137      	cbz	r7, 800f7ce <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f7c0:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 800f7c2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800f7c4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f7c6:	443e      	add	r6, r7
 800f7c8:	6226      	str	r6, [r4, #32]
}
 800f7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 800f7ce:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800f7d0:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800f7d2:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800f7d4:	b1f9      	cbz	r1, 800f816 <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f7d6:	8973      	ldrh	r3, [r6, #10]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800f7de:	d1ef      	bne.n	800f7c0 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f7ff ff7f 	bl	800f6e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f7e6:	2801      	cmp	r0, #1
 800f7e8:	d91d      	bls.n	800f826 <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f7ea:	1c43      	adds	r3, r0, #1
 800f7ec:	d01d      	beq.n	800f82a <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f7ee:	69b3      	ldr	r3, [r6, #24]
 800f7f0:	4298      	cmp	r0, r3
 800f7f2:	d214      	bcs.n	800f81e <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800f7f4:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800f7f6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f7f8:	69b3      	ldr	r3, [r6, #24]
 800f7fa:	3b02      	subs	r3, #2
 800f7fc:	4298      	cmp	r0, r3
 800f7fe:	d204      	bcs.n	800f80a <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
 800f800:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800f804:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f806:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 800f80a:	f8c4 801c 	str.w	r8, [r4, #28]
 800f80e:	e7d7      	b.n	800f7c0 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f810:	2004      	movs	r0, #4
}
 800f812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f816:	8933      	ldrh	r3, [r6, #8]
 800f818:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800f81c:	d8d0      	bhi.n	800f7c0 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 800f81e:	2300      	movs	r3, #0
 800f820:	2004      	movs	r0, #4
 800f822:	61e3      	str	r3, [r4, #28]
 800f824:	e7d1      	b.n	800f7ca <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f826:	2002      	movs	r0, #2
 800f828:	e7cf      	b.n	800f7ca <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f82a:	2001      	movs	r0, #1
 800f82c:	e7cd      	b.n	800f7ca <dir_next.constprop.0+0x26>
 800f82e:	bf00      	nop

0800f830 <dir_read>:
{
 800f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800f834:	69c6      	ldr	r6, [r0, #28]
{
 800f836:	b083      	sub	sp, #12
 800f838:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800f83a:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800f83c:	2e00      	cmp	r6, #0
 800f83e:	d064      	beq.n	800f90a <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800f840:	23ff      	movs	r3, #255	; 0xff
 800f842:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f844:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800f848:	4698      	mov	r8, r3
 800f84a:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800f84c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f84e:	42b5      	cmp	r5, r6
 800f850:	d014      	beq.n	800f87c <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f852:	78fb      	ldrb	r3, [r7, #3]
 800f854:	2b00      	cmp	r3, #0
 800f856:	f040 80d2 	bne.w	800f9fe <dir_read+0x1ce>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f85a:	2301      	movs	r3, #1
 800f85c:	4632      	mov	r2, r6
 800f85e:	4649      	mov	r1, r9
 800f860:	7878      	ldrb	r0, [r7, #1]
 800f862:	f7ff fb45 	bl	800eef0 <disk_read>
 800f866:	b140      	cbz	r0, 800f87a <dir_read+0x4a>
			fs->winsect = sector;
 800f868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800f86c:	2001      	movs	r0, #1
			fs->winsect = sector;
 800f86e:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f870:	2300      	movs	r3, #0
 800f872:	61e3      	str	r3, [r4, #28]
}
 800f874:	b003      	add	sp, #12
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800f87a:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f87c:	6a21      	ldr	r1, [r4, #32]
 800f87e:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800f880:	2a00      	cmp	r2, #0
 800f882:	d042      	beq.n	800f90a <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f884:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f886:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f88c:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f88e:	d00a      	beq.n	800f8a6 <dir_read+0x76>
 800f890:	2a2e      	cmp	r2, #46	; 0x2e
 800f892:	d008      	beq.n	800f8a6 <dir_read+0x76>
 800f894:	f023 0020 	bic.w	r0, r3, #32
 800f898:	f1a0 0008 	sub.w	r0, r0, #8
 800f89c:	fab0 f080 	clz	r0, r0
 800f8a0:	0940      	lsrs	r0, r0, #5
 800f8a2:	4550      	cmp	r0, sl
 800f8a4:	d038      	beq.n	800f918 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f8a6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f8aa:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f8ac:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f8ae:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f8b0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800f8b4:	d229      	bcs.n	800f90a <dir_read+0xda>
 800f8b6:	b346      	cbz	r6, 800f90a <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f8b8:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800f8bc:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f8be:	bb32      	cbnz	r2, 800f90e <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800f8c0:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800f8c2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800f8c4:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800f8c6:	b961      	cbnz	r1, 800f8e2 <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f8c8:	891a      	ldrh	r2, [r3, #8]
 800f8ca:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800f8ce:	d91c      	bls.n	800f90a <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8d0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800f8d2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f8d4:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800f8d6:	2e00      	cmp	r6, #0
 800f8d8:	d1b8      	bne.n	800f84c <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f8da:	2000      	movs	r0, #0
}
 800f8dc:	b003      	add	sp, #12
 800f8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f8e2:	895a      	ldrh	r2, [r3, #10]
 800f8e4:	3a01      	subs	r2, #1
 800f8e6:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800f8ea:	d1f1      	bne.n	800f8d0 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	f7ff fef8 	bl	800f6e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f8f4:	2801      	cmp	r0, #1
 800f8f6:	f240 80b6 	bls.w	800fa66 <dir_read+0x236>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	f000 8086 	beq.w	800fa0c <dir_read+0x1dc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f900:	9b01      	ldr	r3, [sp, #4]
 800f902:	699a      	ldr	r2, [r3, #24]
 800f904:	4290      	cmp	r0, r2
 800f906:	f0c0 80a2 	bcc.w	800fa4e <dir_read+0x21e>
	FRESULT res = FR_NO_FILE;
 800f90a:	2004      	movs	r0, #4
 800f90c:	e7b0      	b.n	800f870 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f90e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800f910:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f912:	441a      	add	r2, r3
 800f914:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 800f916:	e799      	b.n	800f84c <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f918:	2b0f      	cmp	r3, #15
 800f91a:	f040 80ac 	bne.w	800fa76 <dir_read+0x246>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f91e:	0650      	lsls	r0, r2, #25
 800f920:	d576      	bpl.n	800fa10 <dir_read+0x1e0>
						sum = dp->dir[LDIR_Chksum];
 800f922:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800f924:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800f928:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800f92a:	6963      	ldr	r3, [r4, #20]
 800f92c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f92e:	7b4b      	ldrb	r3, [r1, #13]
 800f930:	9800      	ldr	r0, [sp, #0]
 800f932:	4283      	cmp	r3, r0
 800f934:	d1b7      	bne.n	800f8a6 <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f936:	8b4b      	ldrh	r3, [r1, #26]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d1b4      	bne.n	800f8a6 <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f93c:	780b      	ldrb	r3, [r1, #0]
 800f93e:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800f942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f946:	3b01      	subs	r3, #1
 800f948:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 800f94c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f950:	2bfe      	cmp	r3, #254	; 0xfe
 800f952:	d8a8      	bhi.n	800f8a6 <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f954:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f956:	f103 0801 	add.w	r8, r3, #1
 800f95a:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800f95e:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800f962:	2800      	cmp	r0, #0
 800f964:	f040 8090 	bne.w	800fa88 <dir_read+0x258>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f96c:	429e      	cmp	r6, r3
 800f96e:	d19a      	bne.n	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f970:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f978:	459e      	cmp	lr, r3
 800f97a:	d194      	bne.n	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f97c:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f984:	459c      	cmp	ip, r3
 800f986:	d18e      	bne.n	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f988:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f98c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f990:	429e      	cmp	r6, r3
 800f992:	d188      	bne.n	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f994:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f99c:	459c      	cmp	ip, r3
 800f99e:	d182      	bne.n	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9a0:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9a8:	459e      	cmp	lr, r3
 800f9aa:	f47f af7c 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9ae:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9b4:	429e      	cmp	r6, r3
 800f9b6:	f47f af76 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9ba:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9c2:	459c      	cmp	ip, r3
 800f9c4:	f47f af6f 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9c8:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9ce:	429e      	cmp	r6, r3
 800f9d0:	f47f af69 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9d4:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9dc:	459c      	cmp	ip, r3
 800f9de:	f47f af62 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9e2:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9e8:	429e      	cmp	r6, r3
 800f9ea:	f47f af5c 	bne.w	800f8a6 <dir_read+0x76>
	rv = ptr[1];
 800f9ee:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9f6:	459c      	cmp	ip, r3
 800f9f8:	f000 80df 	beq.w	800fbba <dir_read+0x38a>
 800f9fc:	e753      	b.n	800f8a6 <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f9fe:	2301      	movs	r3, #1
 800fa00:	462a      	mov	r2, r5
 800fa02:	4649      	mov	r1, r9
 800fa04:	7878      	ldrb	r0, [r7, #1]
 800fa06:	f7ff fa81 	bl	800ef0c <disk_write>
 800fa0a:	b128      	cbz	r0, 800fa18 <dir_read+0x1e8>
	FRESULT res = FR_NO_FILE;
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	e72f      	b.n	800f870 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa10:	4590      	cmp	r8, r2
 800fa12:	f47f af48 	bne.w	800f8a6 <dir_read+0x76>
 800fa16:	e78a      	b.n	800f92e <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800fa1a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa1c:	1aea      	subs	r2, r5, r3
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	f4bf af1a 	bcs.w	800f85a <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa26:	f897 b002 	ldrb.w	fp, [r7, #2]
 800fa2a:	f1bb 0f01 	cmp.w	fp, #1
 800fa2e:	d801      	bhi.n	800fa34 <dir_read+0x204>
 800fa30:	e713      	b.n	800f85a <dir_read+0x2a>
					wsect += fs->fsize;
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa36:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	4649      	mov	r1, r9
 800fa3e:	462a      	mov	r2, r5
 800fa40:	7878      	ldrb	r0, [r7, #1]
 800fa42:	f7ff fa63 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa46:	f1bb 0f01 	cmp.w	fp, #1
 800fa4a:	d1f2      	bne.n	800fa32 <dir_read+0x202>
 800fa4c:	e705      	b.n	800f85a <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800fa4e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800fa50:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fa52:	699a      	ldr	r2, [r3, #24]
 800fa54:	3a02      	subs	r2, #2
 800fa56:	4290      	cmp	r0, r2
 800fa58:	d207      	bcs.n	800fa6a <dir_read+0x23a>
	return clst * fs->csize + fs->database;
 800fa5a:	895a      	ldrh	r2, [r3, #10]
 800fa5c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800fa5e:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800fa62:	61e6      	str	r6, [r4, #28]
 800fa64:	e734      	b.n	800f8d0 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fa66:	2002      	movs	r0, #2
 800fa68:	e702      	b.n	800f870 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fa6a:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800fa6c:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800fa70:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fa72:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800fa74:	e731      	b.n	800f8da <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fa76:	f1b8 0f00 	cmp.w	r8, #0
 800fa7a:	f000 80ac 	beq.w	800fbd6 <dir_read+0x3a6>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800fa7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa82:	2000      	movs	r0, #0
 800fa84:	6323      	str	r3, [r4, #48]	; 0x30
 800fa86:	e6f5      	b.n	800f874 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fa88:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fa8c:	f43f af0d 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fa90:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 800fa94:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800fa98:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800fa9c:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 800faa0:	2e00      	cmp	r6, #0
 800faa2:	f43f af67 	beq.w	800f974 <dir_read+0x144>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800faa6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800faaa:	f43f aefe 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800faae:	4428      	add	r0, r5
 800fab0:	f103 0803 	add.w	r8, r3, #3
 800fab4:	f8a0 e002 	strh.w	lr, [r0, #2]
 800fab8:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800fabc:	f1be 0f00 	cmp.w	lr, #0
 800fac0:	f43f af5e 	beq.w	800f980 <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fac4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fac8:	f43f aeef 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800facc:	f8a0 c004 	strh.w	ip, [r0, #4]
 800fad0:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 800fad4:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800fad8:	f1bc 0f00 	cmp.w	ip, #0
 800fadc:	f43f af56 	beq.w	800f98c <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fae0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fae4:	f43f aee1 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fae8:	80c6      	strh	r6, [r0, #6]
 800faea:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 800faee:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	f43f af50 	beq.w	800f998 <dir_read+0x168>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800faf8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fafc:	f43f aed5 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb00:	f8a0 c008 	strh.w	ip, [r0, #8]
 800fb04:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 800fb08:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800fb0c:	f1bc 0f00 	cmp.w	ip, #0
 800fb10:	f43f af48 	beq.w	800f9a4 <dir_read+0x174>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb18:	f43f aec7 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb1c:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800fb20:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 800fb24:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800fb26:	f1be 0f00 	cmp.w	lr, #0
 800fb2a:	f43f af41 	beq.w	800f9b0 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb32:	f43f aeba 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb36:	8186      	strh	r6, [r0, #12]
 800fb38:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 800fb3c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800fb40:	2e00      	cmp	r6, #0
 800fb42:	f43f af3c 	beq.w	800f9be <dir_read+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb46:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb4a:	f43f aeae 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb4e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800fb52:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 800fb56:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800fb58:	f1bc 0f00 	cmp.w	ip, #0
 800fb5c:	f43f af35 	beq.w	800f9ca <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb60:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb64:	f43f aea1 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb68:	8206      	strh	r6, [r0, #16]
 800fb6a:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 800fb6e:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800fb72:	2e00      	cmp	r6, #0
 800fb74:	f43f af30 	beq.w	800f9d8 <dir_read+0x1a8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb78:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb7c:	f43f ae95 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb80:	f8a0 c012 	strh.w	ip, [r0, #18]
 800fb84:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 800fb88:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800fb8a:	f1bc 0f00 	cmp.w	ip, #0
 800fb8e:	f43f af29 	beq.w	800f9e4 <dir_read+0x1b4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb92:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fb96:	f43f ae88 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb9a:	8286      	strh	r6, [r0, #20]
 800fb9c:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 800fba0:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800fba4:	2e00      	cmp	r6, #0
 800fba6:	f43f af24 	beq.w	800f9f2 <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fbaa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fbae:	f43f ae7c 	beq.w	800f8aa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fbb2:	f103 080d 	add.w	r8, r3, #13
 800fbb6:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fbba:	780b      	ldrb	r3, [r1, #0]
 800fbbc:	0659      	lsls	r1, r3, #25
 800fbbe:	d506      	bpl.n	800fbce <dir_read+0x39e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fbc0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800fbc4:	f43f ae71 	beq.w	800f8aa <dir_read+0x7a>
		lfnbuf[i] = 0;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fbce:	3a01      	subs	r2, #1
 800fbd0:	fa5f f882 	uxtb.w	r8, r2
 800fbd4:	e669      	b.n	800f8aa <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fbd6:	780a      	ldrb	r2, [r1, #0]
 800fbd8:	01d3      	lsls	r3, r2, #7
 800fbda:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800fbde:	784a      	ldrb	r2, [r1, #1]
 800fbe0:	441a      	add	r2, r3
 800fbe2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fbe6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fbea:	788a      	ldrb	r2, [r1, #2]
 800fbec:	fa52 f283 	uxtab	r2, r2, r3
 800fbf0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fbf4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fbf8:	78ca      	ldrb	r2, [r1, #3]
 800fbfa:	fa52 f283 	uxtab	r2, r2, r3
 800fbfe:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc02:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc06:	790a      	ldrb	r2, [r1, #4]
 800fc08:	fa52 f283 	uxtab	r2, r2, r3
 800fc0c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc10:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc14:	794a      	ldrb	r2, [r1, #5]
 800fc16:	fa52 f283 	uxtab	r2, r2, r3
 800fc1a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc1e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc22:	798a      	ldrb	r2, [r1, #6]
 800fc24:	fa52 f283 	uxtab	r2, r2, r3
 800fc28:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc2c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc30:	79ca      	ldrb	r2, [r1, #7]
 800fc32:	fa52 f283 	uxtab	r2, r2, r3
 800fc36:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc3a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc3e:	7a0a      	ldrb	r2, [r1, #8]
 800fc40:	fa52 f283 	uxtab	r2, r2, r3
 800fc44:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc48:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800fc4c:	7a4a      	ldrb	r2, [r1, #9]
 800fc4e:	7a89      	ldrb	r1, [r1, #10]
 800fc50:	fa52 f283 	uxtab	r2, r2, r3
 800fc54:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800fc58:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fc5c:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fc5e:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	429a      	cmp	r2, r3
 800fc66:	f47f af0a 	bne.w	800fa7e <dir_read+0x24e>
 800fc6a:	e636      	b.n	800f8da <dir_read+0xaa>

0800fc6c <sync_fs>:
{
 800fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fc6e:	78c3      	ldrb	r3, [r0, #3]
{
 800fc70:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fc72:	b95b      	cbnz	r3, 800fc8c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fc74:	7823      	ldrb	r3, [r4, #0]
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d029      	beq.n	800fcce <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	7860      	ldrb	r0, [r4, #1]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	f7ff f952 	bl	800ef28 <disk_ioctl>
			res = FR_DISK_ERR;
 800fc84:	3800      	subs	r0, #0
 800fc86:	bf18      	it	ne
 800fc88:	2001      	movne	r0, #1
}
 800fc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800fc8c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fc8e:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800fc92:	2301      	movs	r3, #1
 800fc94:	7840      	ldrb	r0, [r0, #1]
 800fc96:	462a      	mov	r2, r5
 800fc98:	4639      	mov	r1, r7
 800fc9a:	f7ff f937 	bl	800ef0c <disk_write>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d150      	bne.n	800fd44 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fca2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fca4:	69e3      	ldr	r3, [r4, #28]
 800fca6:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800fca8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d2e2      	bcs.n	800fc74 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcae:	78a6      	ldrb	r6, [r4, #2]
 800fcb0:	2e01      	cmp	r6, #1
 800fcb2:	d801      	bhi.n	800fcb8 <sync_fs+0x4c>
 800fcb4:	e7de      	b.n	800fc74 <sync_fs+0x8>
					wsect += fs->fsize;
 800fcb6:	69e3      	ldr	r3, [r4, #28]
 800fcb8:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcba:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	462a      	mov	r2, r5
 800fcc2:	7860      	ldrb	r0, [r4, #1]
 800fcc4:	f7ff f922 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcc8:	2e01      	cmp	r6, #1
 800fcca:	d1f4      	bne.n	800fcb6 <sync_fs+0x4a>
 800fccc:	e7d2      	b.n	800fc74 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fcce:	7925      	ldrb	r5, [r4, #4]
 800fcd0:	2d01      	cmp	r5, #1
 800fcd2:	d1d2      	bne.n	800fc7a <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800fcd4:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800fcd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fcdc:	2100      	movs	r1, #0
 800fcde:	4630      	mov	r0, r6
 800fce0:	f009 fb7a 	bl	80193d8 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800fce4:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fce8:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fcea:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800fcec:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fcf0:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800fcf2:	4815      	ldr	r0, [pc, #84]	; (800fd48 <sync_fs+0xdc>)
 800fcf4:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 800fcf8:	6360      	str	r0, [r4, #52]	; 0x34
 800fcfa:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 800fcfe:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800fd02:	3020      	adds	r0, #32
 800fd04:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 800fd08:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800fd0a:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 800fd0e:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800fd10:	0e12      	lsrs	r2, r2, #24
 800fd12:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fd16:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 800fd18:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800fd1c:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 800fd1e:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800fd20:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 800fd24:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800fd26:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 800fd2a:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800fd2c:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800fd2e:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800fd30:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800fd34:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fd38:	7860      	ldrb	r0, [r4, #1]
 800fd3a:	f7ff f8e7 	bl	800ef0c <disk_write>
			fs->fsi_flag = 0;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	7123      	strb	r3, [r4, #4]
 800fd42:	e79a      	b.n	800fc7a <sync_fs+0xe>
			res = FR_DISK_ERR;
 800fd44:	2001      	movs	r0, #1
}
 800fd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd48:	41615252 	.word	0x41615252

0800fd4c <create_chain>:
{
 800fd4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd50:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 800fd52:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 800fd54:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 800fd58:	2900      	cmp	r1, #0
 800fd5a:	f040 80b4 	bne.w	800fec6 <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fd5e:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fd62:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fd66:	b9ce      	cbnz	r6, 800fd9c <create_chain+0x50>
 800fd68:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800fd6a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800fd6c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fd6e:	429c      	cmp	r4, r3
 800fd70:	d318      	bcc.n	800fda4 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 800fd72:	2e01      	cmp	r6, #1
 800fd74:	f000 80a3 	beq.w	800febe <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fd78:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 800fd7c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fd7e:	69ab      	ldr	r3, [r5, #24]
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	d907      	bls.n	800fd94 <create_chain+0x48>
		switch (fs->fs_type) {
 800fd84:	782b      	ldrb	r3, [r5, #0]
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	f000 8088 	beq.w	800fe9c <create_chain+0x150>
 800fd8c:	2b03      	cmp	r3, #3
 800fd8e:	d044      	beq.n	800fe1a <create_chain+0xce>
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d00c      	beq.n	800fdae <create_chain+0x62>
 800fd94:	2401      	movs	r4, #1
}
 800fd96:	4620      	mov	r0, r4
 800fd98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fd9c:	42b3      	cmp	r3, r6
 800fd9e:	bf98      	it	ls
 800fda0:	2601      	movls	r6, #1
 800fda2:	e7e2      	b.n	800fd6a <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fda4:	2c01      	cmp	r4, #1
 800fda6:	f8da 5000 	ldr.w	r5, [sl]
 800fdaa:	d9f3      	bls.n	800fd94 <create_chain+0x48>
 800fdac:	e7e7      	b.n	800fd7e <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 800fdae:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdb4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdb6:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdba:	4291      	cmp	r1, r2
 800fdbc:	d005      	beq.n	800fdca <create_chain+0x7e>
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f7ff fa44 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdc4:	bb20      	cbnz	r0, 800fe10 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdc8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800fdca:	f107 0b01 	add.w	fp, r7, #1
 800fdce:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fdd2:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800fdd6:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdd8:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800fdda:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdde:	d003      	beq.n	800fde8 <create_chain+0x9c>
 800fde0:	4628      	mov	r0, r5
 800fde2:	f7ff fa33 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fde6:	b998      	cbnz	r0, 800fe10 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fde8:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fdec:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800fdee:	445d      	add	r5, fp
 800fdf0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800fdf4:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fdf8:	d575      	bpl.n	800fee6 <create_chain+0x19a>
 800fdfa:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 800fdfc:	b30b      	cbz	r3, 800fe42 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d0c8      	beq.n	800fd94 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 800fe02:	42a6      	cmp	r6, r4
 800fe04:	d05b      	beq.n	800febe <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fe06:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fe0a:	e7af      	b.n	800fd6c <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fe0c:	2801      	cmp	r0, #1
 800fe0e:	d1c1      	bne.n	800fd94 <create_chain+0x48>
 800fe10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800fe14:	4620      	mov	r0, r4
 800fe16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe1a:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe1c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe1e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe22:	4299      	cmp	r1, r3
 800fe24:	d004      	beq.n	800fe30 <create_chain+0xe4>
 800fe26:	4628      	mov	r0, r5
 800fe28:	f7ff fa10 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1ef      	bne.n	800fe10 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fe30:	00a3      	lsls	r3, r4, #2
 800fe32:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800fe36:	441d      	add	r5, r3
 800fe38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fe3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1dd      	bne.n	800fdfe <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fe42:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fe46:	42a3      	cmp	r3, r4
 800fe48:	d9a4      	bls.n	800fd94 <create_chain+0x48>
 800fe4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe4e:	4621      	mov	r1, r4
 800fe50:	4648      	mov	r0, r9
 800fe52:	f7ff fbad 	bl	800f5b0 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800fe56:	b970      	cbnz	r0, 800fe76 <create_chain+0x12a>
 800fe58:	f1b8 0f00 	cmp.w	r8, #0
 800fe5c:	d00b      	beq.n	800fe76 <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fe5e:	f1b8 0f01 	cmp.w	r8, #1
 800fe62:	d097      	beq.n	800fd94 <create_chain+0x48>
 800fe64:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fe68:	4598      	cmp	r8, r3
 800fe6a:	d293      	bcs.n	800fd94 <create_chain+0x48>
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	4641      	mov	r1, r8
 800fe70:	4648      	mov	r0, r9
 800fe72:	f7ff fb9d 	bl	800f5b0 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d1c8      	bne.n	800fe0c <create_chain+0xc0>
		fs->last_clst = ncl;
 800fe7a:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fe7e:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 800fe82:	3b02      	subs	r3, #2
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d802      	bhi.n	800fe8e <create_chain+0x142>
 800fe88:	3a01      	subs	r2, #1
 800fe8a:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 800fe8e:	f899 3004 	ldrb.w	r3, [r9, #4]
 800fe92:	f043 0301 	orr.w	r3, r3, #1
 800fe96:	f889 3004 	strb.w	r3, [r9, #4]
 800fe9a:	e77c      	b.n	800fd96 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fe9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fe9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fea0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fea4:	4299      	cmp	r1, r3
 800fea6:	d004      	beq.n	800feb2 <create_chain+0x166>
 800fea8:	4628      	mov	r0, r5
 800feaa:	f7ff f9cf 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800feae:	2800      	cmp	r0, #0
 800feb0:	d1ae      	bne.n	800fe10 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800feb2:	0063      	lsls	r3, r4, #1
 800feb4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800feb8:	441d      	add	r5, r3
 800feba:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 800febc:	e79e      	b.n	800fdfc <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 800febe:	2400      	movs	r4, #0
}
 800fec0:	4620      	mov	r0, r4
 800fec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fec6:	4648      	mov	r0, r9
 800fec8:	f7ff fc0c 	bl	800f6e4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fecc:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fece:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fed0:	f67f af60 	bls.w	800fd94 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fed4:	1c41      	adds	r1, r0, #1
 800fed6:	d09b      	beq.n	800fe10 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fed8:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800fedc:	4283      	cmp	r3, r0
 800fede:	f63f af5a 	bhi.w	800fd96 <create_chain+0x4a>
 800fee2:	4646      	mov	r6, r8
 800fee4:	e741      	b.n	800fd6a <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800feea:	e787      	b.n	800fdfc <create_chain+0xb0>

0800feec <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800feec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800fef0:	d274      	bcs.n	800ffdc <dir_sdi+0xf0>
 800fef2:	06ca      	lsls	r2, r1, #27
{
 800fef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef8:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fefa:	d151      	bne.n	800ffa0 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fefc:	6885      	ldr	r5, [r0, #8]
 800fefe:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800ff00:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800ff04:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	d04d      	beq.n	800ffa6 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff0a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff0e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff12:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff16:	f0c0 808e 	bcc.w	8010036 <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff1a:	2d01      	cmp	r5, #1
 800ff1c:	d040      	beq.n	800ffa0 <dir_sdi+0xb4>
 800ff1e:	4647      	mov	r7, r8
 800ff20:	e03b      	b.n	800ff9a <dir_sdi+0xae>
		switch (fs->fs_type) {
 800ff22:	783b      	ldrb	r3, [r7, #0]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d073      	beq.n	8010010 <dir_sdi+0x124>
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d05f      	beq.n	800ffec <dir_sdi+0x100>
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d137      	bne.n	800ffa0 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 800ff30:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff38:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff3c:	4291      	cmp	r1, r2
 800ff3e:	d006      	beq.n	800ff4e <dir_sdi+0x62>
 800ff40:	4638      	mov	r0, r7
 800ff42:	f7ff f983 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d172      	bne.n	8010030 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800ff4e:	f10a 0b01 	add.w	fp, sl, #1
 800ff52:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff56:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800ff5a:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff5c:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800ff5e:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff62:	d004      	beq.n	800ff6e <dir_sdi+0x82>
 800ff64:	4638      	mov	r0, r7
 800ff66:	f7ff f971 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d160      	bne.n	8010030 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ff6e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800ff72:	445f      	add	r7, fp
 800ff74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ff78:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ff7c:	07eb      	lsls	r3, r5, #31
 800ff7e:	d568      	bpl.n	8010052 <dir_sdi+0x166>
 800ff80:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ff84:	2d01      	cmp	r5, #1
 800ff86:	d90b      	bls.n	800ffa0 <dir_sdi+0xb4>
 800ff88:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ff8c:	42ab      	cmp	r3, r5
 800ff8e:	d907      	bls.n	800ffa0 <dir_sdi+0xb4>
			ofs -= csz;
 800ff90:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff94:	45a1      	cmp	r9, r4
 800ff96:	d850      	bhi.n	801003a <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ff98:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff9a:	69bb      	ldr	r3, [r7, #24]
 800ff9c:	42ab      	cmp	r3, r5
 800ff9e:	d8c0      	bhi.n	800ff22 <dir_sdi+0x36>
		switch (fs->fs_type) {
 800ffa0:	2002      	movs	r0, #2
}
 800ffa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ffa6:	f898 3000 	ldrb.w	r3, [r8]
 800ffaa:	2b02      	cmp	r3, #2
 800ffac:	d818      	bhi.n	800ffe0 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ffae:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ffb2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800ffb6:	d9f3      	bls.n	800ffa0 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 800ffb8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800ffbc:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800ffbe:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ffc0:	2a00      	cmp	r2, #0
 800ffc2:	d0ed      	beq.n	800ffa0 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ffc4:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800ffc8:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ffcc:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 800ffd0:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ffd2:	4443      	add	r3, r8
 800ffd4:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800ffd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 800ffdc:	2002      	movs	r0, #2
}
 800ffde:	4770      	bx	lr
		clst = fs->dirbase;
 800ffe0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d0e2      	beq.n	800ffae <dir_sdi+0xc2>
 800ffe8:	461d      	mov	r5, r3
 800ffea:	e78e      	b.n	800ff0a <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ffec:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ffee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fff0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800fff4:	4299      	cmp	r1, r3
 800fff6:	d003      	beq.n	8010000 <dir_sdi+0x114>
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7ff f927 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fffe:	b9b8      	cbnz	r0, 8010030 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010000:	00ad      	lsls	r5, r5, #2
 8010002:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8010006:	442f      	add	r7, r5
 8010008:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801000a:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 801000e:	e7b9      	b.n	800ff84 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010010:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010014:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010018:	4299      	cmp	r1, r3
 801001a:	d003      	beq.n	8010024 <dir_sdi+0x138>
 801001c:	4638      	mov	r0, r7
 801001e:	f7ff f915 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010022:	b928      	cbnz	r0, 8010030 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010024:	006d      	lsls	r5, r5, #1
 8010026:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801002a:	442f      	add	r7, r5
 801002c:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 801002e:	e7a9      	b.n	800ff84 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010030:	2001      	movs	r0, #1
}
 8010032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010036:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801003a:	3b02      	subs	r3, #2
	clst -= 2;
 801003c:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801003e:	4299      	cmp	r1, r3
 8010040:	d20a      	bcs.n	8010058 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8010042:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010046:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801004a:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 801004e:	61f2      	str	r2, [r6, #28]
 8010050:	e7b5      	b.n	800ffbe <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010052:	f3ca 050b 	ubfx	r5, sl, #0, #12
 8010056:	e795      	b.n	800ff84 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8010058:	2300      	movs	r3, #0
 801005a:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 801005e:	e79f      	b.n	800ffa0 <dir_sdi+0xb4>

08010060 <dir_find>:
{
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010064:	2100      	movs	r1, #0
{
 8010066:	b085      	sub	sp, #20
 8010068:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 801006a:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801006e:	f7ff ff3d 	bl	800feec <dir_sdi>
	if (res != FR_OK) return res;
 8010072:	4607      	mov	r7, r0
 8010074:	b9e8      	cbnz	r0, 80100b2 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010076:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801007a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 801007e:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010080:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010082:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010084:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8010088:	42b5      	cmp	r5, r6
 801008a:	d018      	beq.n	80100be <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801008c:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010090:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010094:	2b00      	cmp	r3, #0
 8010096:	f040 8088 	bne.w	80101aa <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801009a:	2301      	movs	r3, #1
 801009c:	4632      	mov	r2, r6
 801009e:	f898 0001 	ldrb.w	r0, [r8, #1]
 80100a2:	f7fe ff25 	bl	800eef0 <disk_read>
 80100a6:	b140      	cbz	r0, 80100ba <dir_find+0x5a>
			fs->winsect = sector;
 80100a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80100ac:	2701      	movs	r7, #1
			fs->winsect = sector;
 80100ae:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 80100b2:	4638      	mov	r0, r7
 80100b4:	b005      	add	sp, #20
 80100b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80100ba:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80100be:	6a26      	ldr	r6, [r4, #32]
 80100c0:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80100c2:	b34d      	cbz	r5, 8010118 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80100c4:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80100c6:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80100c8:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80100cc:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80100ce:	d004      	beq.n	80100da <dir_find+0x7a>
 80100d0:	0717      	lsls	r7, r2, #28
 80100d2:	d526      	bpl.n	8010122 <dir_find+0xc2>
 80100d4:	2b0f      	cmp	r3, #15
 80100d6:	f000 8094 	beq.w	8010202 <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80100da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100de:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80100e2:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100e4:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100e6:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80100e8:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80100ea:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80100ee:	d213      	bcs.n	8010118 <dir_find+0xb8>
 80100f0:	b196      	cbz	r6, 8010118 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80100f2:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80100f6:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80100f8:	b94b      	cbnz	r3, 801010e <dir_find+0xae>
		dp->sect++;				/* Next sector */
 80100fa:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 80100fc:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80100fe:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8010100:	2900      	cmp	r1, #0
 8010102:	d15e      	bne.n	80101c2 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010104:	893a      	ldrh	r2, [r7, #8]
 8010106:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 801010a:	f240 8134 	bls.w	8010376 <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801010e:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8010110:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010112:	443b      	add	r3, r7
 8010114:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8010116:	e7b5      	b.n	8010084 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010118:	2704      	movs	r7, #4
}
 801011a:	4638      	mov	r0, r7
 801011c:	b005      	add	sp, #20
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010122:	2b0f      	cmp	r3, #15
 8010124:	d06d      	beq.n	8010202 <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010126:	f1ba 0f00 	cmp.w	sl, #0
 801012a:	f000 80d6 	beq.w	80102da <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801012e:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 8010132:	f01a 0a01 	ands.w	sl, sl, #1
 8010136:	d1d0      	bne.n	80100da <dir_find+0x7a>
	} while (--cnt && r == 0);
 8010138:	7832      	ldrb	r2, [r6, #0]
 801013a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801013e:	429a      	cmp	r2, r3
 8010140:	d1cb      	bne.n	80100da <dir_find+0x7a>
 8010142:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8010146:	7873      	ldrb	r3, [r6, #1]
 8010148:	429a      	cmp	r2, r3
 801014a:	d1c6      	bne.n	80100da <dir_find+0x7a>
 801014c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010150:	78b3      	ldrb	r3, [r6, #2]
 8010152:	429a      	cmp	r2, r3
 8010154:	d1c1      	bne.n	80100da <dir_find+0x7a>
 8010156:	78f2      	ldrb	r2, [r6, #3]
 8010158:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801015c:	429a      	cmp	r2, r3
 801015e:	d1bc      	bne.n	80100da <dir_find+0x7a>
 8010160:	7932      	ldrb	r2, [r6, #4]
 8010162:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010166:	429a      	cmp	r2, r3
 8010168:	d1b7      	bne.n	80100da <dir_find+0x7a>
 801016a:	7972      	ldrb	r2, [r6, #5]
 801016c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8010170:	429a      	cmp	r2, r3
 8010172:	d1b2      	bne.n	80100da <dir_find+0x7a>
 8010174:	79b2      	ldrb	r2, [r6, #6]
 8010176:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801017a:	429a      	cmp	r2, r3
 801017c:	d1ad      	bne.n	80100da <dir_find+0x7a>
 801017e:	79f2      	ldrb	r2, [r6, #7]
 8010180:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8010184:	429a      	cmp	r2, r3
 8010186:	d1a8      	bne.n	80100da <dir_find+0x7a>
 8010188:	7a32      	ldrb	r2, [r6, #8]
 801018a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801018e:	429a      	cmp	r2, r3
 8010190:	d1a3      	bne.n	80100da <dir_find+0x7a>
 8010192:	7a72      	ldrb	r2, [r6, #9]
 8010194:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010198:	429a      	cmp	r2, r3
 801019a:	d19e      	bne.n	80100da <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801019c:	7ab2      	ldrb	r2, [r6, #10]
 801019e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d199      	bne.n	80100da <dir_find+0x7a>
 80101a6:	4657      	mov	r7, sl
 80101a8:	e783      	b.n	80100b2 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80101aa:	2301      	movs	r3, #1
 80101ac:	462a      	mov	r2, r5
 80101ae:	f898 0001 	ldrb.w	r0, [r8, #1]
 80101b2:	9100      	str	r1, [sp, #0]
 80101b4:	f7fe feaa 	bl	800ef0c <disk_write>
 80101b8:	9900      	ldr	r1, [sp, #0]
 80101ba:	2800      	cmp	r0, #0
 80101bc:	d06d      	beq.n	801029a <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80101be:	2701      	movs	r7, #1
 80101c0:	e777      	b.n	80100b2 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80101c2:	897a      	ldrh	r2, [r7, #10]
 80101c4:	3a01      	subs	r2, #1
 80101c6:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 80101ca:	d1a0      	bne.n	801010e <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80101cc:	4638      	mov	r0, r7
 80101ce:	9300      	str	r3, [sp, #0]
 80101d0:	f7ff fa88 	bl	800f6e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80101d4:	2801      	cmp	r0, #1
 80101d6:	f240 80d2 	bls.w	801037e <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d0ef      	beq.n	80101be <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80101de:	69ba      	ldr	r2, [r7, #24]
 80101e0:	4290      	cmp	r0, r2
 80101e2:	f080 80c8 	bcs.w	8010376 <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
 80101e6:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80101e8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80101ea:	69ba      	ldr	r2, [r7, #24]
 80101ec:	9b00      	ldr	r3, [sp, #0]
 80101ee:	3a02      	subs	r2, #2
 80101f0:	4290      	cmp	r0, r2
 80101f2:	f080 80c6 	bcs.w	8010382 <dir_find+0x322>
	return clst * fs->csize + fs->database;
 80101f6:	897a      	ldrh	r2, [r7, #10]
 80101f8:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80101fa:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 80101fe:	61e6      	str	r6, [r4, #28]
 8010200:	e785      	b.n	801010e <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010202:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010206:	0658      	lsls	r0, r3, #25
 8010208:	f53f af6c 	bmi.w	80100e4 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801020c:	0669      	lsls	r1, r5, #25
 801020e:	d53f      	bpl.n	8010290 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010210:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010212:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8010216:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801021a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801021c:	7b73      	ldrb	r3, [r6, #13]
 801021e:	454b      	cmp	r3, r9
 8010220:	d138      	bne.n	8010294 <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010222:	8b73      	ldrh	r3, [r6, #26]
 8010224:	bbb3      	cbnz	r3, 8010294 <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010226:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010228:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801022a:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801022e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8010232:	f8df a178 	ldr.w	sl, [pc, #376]	; 80103ac <dir_find+0x34c>
 8010236:	9502      	str	r5, [sp, #8]
 8010238:	4615      	mov	r5, r2
 801023a:	3f01      	subs	r7, #1
 801023c:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010240:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010242:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8010246:	f8cd 8000 	str.w	r8, [sp]
 801024a:	9401      	str	r4, [sp, #4]
 801024c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010250:	e010      	b.n	8010274 <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010252:	2ffe      	cmp	r7, #254	; 0xfe
 8010254:	4620      	mov	r0, r4
 8010256:	d816      	bhi.n	8010286 <dir_find+0x226>
 8010258:	f001 fecc 	bl	8011ff4 <ff_wtoupper>
 801025c:	4680      	mov	r8, r0
 801025e:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8010262:	3701      	adds	r7, #1
 8010264:	f001 fec6 	bl	8011ff4 <ff_wtoupper>
 8010268:	4580      	cmp	r8, r0
 801026a:	4621      	mov	r1, r4
 801026c:	d10b      	bne.n	8010286 <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801026e:	45d3      	cmp	fp, sl
 8010270:	f000 8089 	beq.w	8010386 <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010274:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8010278:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 801027a:	2900      	cmp	r1, #0
 801027c:	d1e9      	bne.n	8010252 <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801027e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010282:	429c      	cmp	r4, r3
 8010284:	d0f3      	beq.n	801026e <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010286:	e9dd 8400 	ldrd	r8, r4, [sp]
 801028a:	f04f 0aff 	mov.w	sl, #255	; 0xff
 801028e:	e729      	b.n	80100e4 <dir_find+0x84>
 8010290:	45aa      	cmp	sl, r5
 8010292:	d0c3      	beq.n	801021c <dir_find+0x1bc>
 8010294:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8010298:	e724      	b.n	80100e4 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801029a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 801029e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80102a2:	1aea      	subs	r2, r5, r3
 80102a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	f4bf aef6 	bcs.w	801009a <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80102ae:	f898 7002 	ldrb.w	r7, [r8, #2]
 80102b2:	2f01      	cmp	r7, #1
 80102b4:	f67f aef1 	bls.w	801009a <dir_find+0x3a>
 80102b8:	468b      	mov	fp, r1
 80102ba:	e001      	b.n	80102c0 <dir_find+0x260>
					wsect += fs->fsize;
 80102bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80102c0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80102c2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80102c4:	2301      	movs	r3, #1
 80102c6:	4659      	mov	r1, fp
 80102c8:	462a      	mov	r2, r5
 80102ca:	f898 0001 	ldrb.w	r0, [r8, #1]
 80102ce:	f7fe fe1d 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80102d2:	2f01      	cmp	r7, #1
 80102d4:	d1f2      	bne.n	80102bc <dir_find+0x25c>
 80102d6:	4659      	mov	r1, fp
 80102d8:	e6df      	b.n	801009a <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80102da:	7830      	ldrb	r0, [r6, #0]
 80102dc:	7872      	ldrb	r2, [r6, #1]
 80102de:	01c1      	lsls	r1, r0, #7
 80102e0:	78b3      	ldrb	r3, [r6, #2]
 80102e2:	f896 b003 	ldrb.w	fp, [r6, #3]
 80102e6:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 80102ea:	7937      	ldrb	r7, [r6, #4]
 80102ec:	f896 e005 	ldrb.w	lr, [r6, #5]
 80102f0:	4411      	add	r1, r2
 80102f2:	f896 c006 	ldrb.w	ip, [r6, #6]
 80102f6:	7a32      	ldrb	r2, [r6, #8]
 80102f8:	f3c1 0046 	ubfx	r0, r1, #1, #7
 80102fc:	7a75      	ldrb	r5, [r6, #9]
 80102fe:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8010302:	fa53 f180 	uxtab	r1, r3, r0
 8010306:	79f3      	ldrb	r3, [r6, #7]
 8010308:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801030c:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8010310:	7ab1      	ldrb	r1, [r6, #10]
 8010312:	fa5b fb80 	uxtab	fp, fp, r0
 8010316:	f3cb 0046 	ubfx	r0, fp, #1, #7
 801031a:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 801031e:	fa57 f780 	uxtab	r7, r7, r0
 8010322:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8010326:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 801032a:	fa5e f080 	uxtab	r0, lr, r0
 801032e:	f3c0 0746 	ubfx	r7, r0, #1, #7
 8010332:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 8010336:	fa5c f780 	uxtab	r7, ip, r0
 801033a:	f3c7 0046 	ubfx	r0, r7, #1, #7
 801033e:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 8010342:	fa53 f080 	uxtab	r0, r3, r0
 8010346:	f3c0 0346 	ubfx	r3, r0, #1, #7
 801034a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801034e:	fa52 f383 	uxtab	r3, r2, r3
 8010352:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8010356:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 801035a:	fa55 f283 	uxtab	r2, r5, r3
 801035e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010362:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010366:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801036a:	b2db      	uxtb	r3, r3
 801036c:	4599      	cmp	r9, r3
 801036e:	f47f aede 	bne.w	801012e <dir_find+0xce>
 8010372:	4657      	mov	r7, sl
 8010374:	e69d      	b.n	80100b2 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 8010376:	2300      	movs	r3, #0
 8010378:	2704      	movs	r7, #4
 801037a:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 801037c:	e699      	b.n	80100b2 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801037e:	2702      	movs	r7, #2
 8010380:	e697      	b.n	80100b2 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010382:	461e      	mov	r6, r3
 8010384:	e73b      	b.n	80101fe <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010386:	7833      	ldrb	r3, [r6, #0]
 8010388:	f8dd 8000 	ldr.w	r8, [sp]
 801038c:	065a      	lsls	r2, r3, #25
 801038e:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 8010392:	d500      	bpl.n	8010396 <dir_find+0x336>
 8010394:	b919      	cbnz	r1, 801039e <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010396:	3d01      	subs	r5, #1
 8010398:	fa5f fa85 	uxtb.w	sl, r5
 801039c:	e6a2      	b.n	80100e4 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801039e:	9b03      	ldr	r3, [sp, #12]
 80103a0:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0f6      	beq.n	8010396 <dir_find+0x336>
 80103a8:	e774      	b.n	8010294 <dir_find+0x234>
 80103aa:	bf00      	nop
 80103ac:	0801b65c 	.word	0x0801b65c

080103b0 <follow_path>:
{
 80103b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80103b4:	780b      	ldrb	r3, [r1, #0]
{
 80103b6:	b083      	sub	sp, #12
 80103b8:	4688      	mov	r8, r1
 80103ba:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80103bc:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 80103be:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80103c2:	d103      	bne.n	80103cc <follow_path+0x1c>
 80103c4:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80103c8:	2b2f      	cmp	r3, #47	; 0x2f
 80103ca:	d0fb      	beq.n	80103c4 <follow_path+0x14>
 80103cc:	2b5c      	cmp	r3, #92	; 0x5c
 80103ce:	d0f9      	beq.n	80103c4 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 80103d0:	2100      	movs	r1, #0
 80103d2:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80103d4:	f898 3000 	ldrb.w	r3, [r8]
 80103d8:	2b1f      	cmp	r3, #31
 80103da:	f240 8148 	bls.w	801066e <follow_path+0x2be>
 80103de:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 80103e0:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80103e2:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 80103e4:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 80103e6:	d929      	bls.n	801043c <follow_path+0x8c>
 80103e8:	f1a5 0902 	sub.w	r9, r5, #2
 80103ec:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 80103ee:	2401      	movs	r4, #1
 80103f0:	e008      	b.n	8010404 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 80103f2:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 80103f6:	1c63      	adds	r3, r4, #1
 80103f8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80103fc:	281f      	cmp	r0, #31
 80103fe:	f240 80f7 	bls.w	80105f0 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 8010402:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010404:	282f      	cmp	r0, #47	; 0x2f
 8010406:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801040a:	d01d      	beq.n	8010448 <follow_path+0x98>
 801040c:	285c      	cmp	r0, #92	; 0x5c
 801040e:	d01b      	beq.n	8010448 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010410:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8010414:	d00e      	beq.n	8010434 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010416:	2101      	movs	r1, #1
 8010418:	f001 fdce 	bl	8011fb8 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801041c:	b150      	cbz	r0, 8010434 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801041e:	287f      	cmp	r0, #127	; 0x7f
 8010420:	d8e7      	bhi.n	80103f2 <follow_path+0x42>
	while (*str && *str != chr) str++;
 8010422:	2322      	movs	r3, #34	; 0x22
 8010424:	4aa5      	ldr	r2, [pc, #660]	; (80106bc <follow_path+0x30c>)
 8010426:	e003      	b.n	8010430 <follow_path+0x80>
 8010428:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801042c:	2b00      	cmp	r3, #0
 801042e:	d0e0      	beq.n	80103f2 <follow_path+0x42>
 8010430:	4298      	cmp	r0, r3
 8010432:	d1f9      	bne.n	8010428 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010434:	2006      	movs	r0, #6
}
 8010436:	b003      	add	sp, #12
 8010438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 801043c:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801043e:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8010440:	802b      	strh	r3, [r5, #0]
}
 8010442:	b003      	add	sp, #12
 8010444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010448:	f818 3004 	ldrb.w	r3, [r8, r4]
 801044c:	eb08 0204 	add.w	r2, r8, r4
 8010450:	2b5c      	cmp	r3, #92	; 0x5c
 8010452:	d002      	beq.n	801045a <follow_path+0xaa>
 8010454:	2b2f      	cmp	r3, #47	; 0x2f
 8010456:	f040 811f 	bne.w	8010698 <follow_path+0x2e8>
 801045a:	1c63      	adds	r3, r4, #1
 801045c:	4443      	add	r3, r8
 801045e:	4698      	mov	r8, r3
 8010460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010464:	2a2f      	cmp	r2, #47	; 0x2f
 8010466:	d0fa      	beq.n	801045e <follow_path+0xae>
 8010468:	2a5c      	cmp	r2, #92	; 0x5c
 801046a:	d0f8      	beq.n	801045e <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801046c:	f1ba 0f00 	cmp.w	sl, #0
 8010470:	d0e4      	beq.n	801043c <follow_path+0x8c>
 8010472:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010474:	2400      	movs	r4, #0
 8010476:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 801047a:	e002      	b.n	8010482 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801047c:	f1ba 0a01 	subs.w	sl, sl, #1
 8010480:	d0dc      	beq.n	801043c <follow_path+0x8c>
		w = lfn[di - 1];
 8010482:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8010486:	2b20      	cmp	r3, #32
 8010488:	d0f8      	beq.n	801047c <follow_path+0xcc>
 801048a:	2b2e      	cmp	r3, #46	; 0x2e
 801048c:	d0f6      	beq.n	801047c <follow_path+0xcc>
		*d++ = (BYTE)val;
 801048e:	2320      	movs	r3, #32
 8010490:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8010494:	2100      	movs	r1, #0
 8010496:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 801049a:	627a      	str	r2, [r7, #36]	; 0x24
 801049c:	62ba      	str	r2, [r7, #40]	; 0x28
 801049e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80104a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80104a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80104aa:	8828      	ldrh	r0, [r5, #0]
 80104ac:	282e      	cmp	r0, #46	; 0x2e
 80104ae:	d002      	beq.n	80104b6 <follow_path+0x106>
 80104b0:	4298      	cmp	r0, r3
 80104b2:	f040 80e5 	bne.w	8010680 <follow_path+0x2d0>
 80104b6:	462a      	mov	r2, r5
 80104b8:	2300      	movs	r3, #0
 80104ba:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80104be:	461c      	mov	r4, r3
 80104c0:	3301      	adds	r3, #1
 80104c2:	2820      	cmp	r0, #32
 80104c4:	d0f9      	beq.n	80104ba <follow_path+0x10a>
 80104c6:	282e      	cmp	r0, #46	; 0x2e
 80104c8:	d0f7      	beq.n	80104ba <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 80104ca:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80104cc:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 80104d0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80104d4:	2a2e      	cmp	r2, #46	; 0x2e
 80104d6:	d002      	beq.n	80104de <follow_path+0x12e>
 80104d8:	f1ba 0a01 	subs.w	sl, sl, #1
 80104dc:	d1f8      	bne.n	80104d0 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 80104de:	b3b0      	cbz	r0, 801054e <follow_path+0x19e>
 80104e0:	2208      	movs	r2, #8
 80104e2:	4641      	mov	r1, r8
 80104e4:	2300      	movs	r3, #0
 80104e6:	46b8      	mov	r8, r7
 80104e8:	462f      	mov	r7, r5
 80104ea:	4615      	mov	r5, r2
 80104ec:	4699      	mov	r9, r3
 80104ee:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80104f0:	2820      	cmp	r0, #32
 80104f2:	d003      	beq.n	80104fc <follow_path+0x14c>
 80104f4:	282e      	cmp	r0, #46	; 0x2e
 80104f6:	d14d      	bne.n	8010594 <follow_path+0x1e4>
 80104f8:	45a2      	cmp	sl, r4
 80104fa:	d04b      	beq.n	8010594 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 80104fc:	f046 0603 	orr.w	r6, r6, #3
 8010500:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8010502:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8010506:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8010508:	2800      	cmp	r0, #0
 801050a:	d1f1      	bne.n	80104f0 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801050c:	4647      	mov	r7, r8
 801050e:	4690      	mov	r8, r2
 8010510:	462a      	mov	r2, r5
 8010512:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8010516:	29e5      	cmp	r1, #229	; 0xe5
 8010518:	d102      	bne.n	8010520 <follow_path+0x170>
 801051a:	2105      	movs	r1, #5
 801051c:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8010520:	2a08      	cmp	r2, #8
 8010522:	f000 8093 	beq.w	801064c <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010526:	f003 020c 	and.w	r2, r3, #12
 801052a:	2a0c      	cmp	r2, #12
 801052c:	d065      	beq.n	80105fa <follow_path+0x24a>
 801052e:	f003 0303 	and.w	r3, r3, #3
 8010532:	2b03      	cmp	r3, #3
 8010534:	d061      	beq.n	80105fa <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010536:	07b1      	lsls	r1, r6, #30
 8010538:	d409      	bmi.n	801054e <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801053a:	2b01      	cmp	r3, #1
 801053c:	d102      	bne.n	8010544 <follow_path+0x194>
 801053e:	f046 0610 	orr.w	r6, r6, #16
 8010542:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010544:	2a04      	cmp	r2, #4
 8010546:	d102      	bne.n	801054e <follow_path+0x19e>
 8010548:	f046 0608 	orr.w	r6, r6, #8
 801054c:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 801054e:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010550:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8010554:	f7ff fd84 	bl	8010060 <dir_find>
			ns = dp->fn[NSFLAG];
 8010558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801055c:	2800      	cmp	r0, #0
 801055e:	d158      	bne.n	8010612 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010560:	075a      	lsls	r2, r3, #29
 8010562:	f53f af68 	bmi.w	8010436 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010566:	79bb      	ldrb	r3, [r7, #6]
 8010568:	06db      	lsls	r3, r3, #27
 801056a:	f140 8097 	bpl.w	801069c <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8010574:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010578:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 801057c:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801057e:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8010580:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8010582:	d102      	bne.n	801058a <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010584:	8a9b      	ldrh	r3, [r3, #20]
 8010586:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801058a:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801058c:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 801058e:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010592:	e725      	b.n	80103e0 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010594:	454d      	cmp	r5, r9
 8010596:	d91c      	bls.n	80105d2 <follow_path+0x222>
 8010598:	ebaa 0104 	sub.w	r1, sl, r4
 801059c:	fab1 f181 	clz	r1, r1
 80105a0:	0949      	lsrs	r1, r1, #5
 80105a2:	b9b1      	cbnz	r1, 80105d2 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 80105a4:	287f      	cmp	r0, #127	; 0x7f
 80105a6:	d83c      	bhi.n	8010622 <follow_path+0x272>
	while (*str && *str != chr) str++;
 80105a8:	212b      	movs	r1, #43	; 0x2b
 80105aa:	f8df c118 	ldr.w	ip, [pc, #280]	; 80106c4 <follow_path+0x314>
 80105ae:	e003      	b.n	80105b8 <follow_path+0x208>
 80105b0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 80105b4:	2900      	cmp	r1, #0
 80105b6:	d052      	beq.n	801065e <follow_path+0x2ae>
 80105b8:	4281      	cmp	r1, r0
 80105ba:	d1f9      	bne.n	80105b0 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80105bc:	f046 0603 	orr.w	r6, r6, #3
 80105c0:	205f      	movs	r0, #95	; 0x5f
 80105c2:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 80105c4:	eb08 0109 	add.w	r1, r8, r9
 80105c8:	f109 0901 	add.w	r9, r9, #1
 80105cc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80105d0:	e797      	b.n	8010502 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 80105d2:	2d0b      	cmp	r5, #11
 80105d4:	d064      	beq.n	80106a0 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80105d6:	45a2      	cmp	sl, r4
 80105d8:	d003      	beq.n	80105e2 <follow_path+0x232>
 80105da:	f046 0603 	orr.w	r6, r6, #3
 80105de:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 80105e0:	d394      	bcc.n	801050c <follow_path+0x15c>
			b <<= 2; continue;
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80105e6:	250b      	movs	r5, #11
 80105e8:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	e788      	b.n	8010502 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 80105f0:	46a2      	mov	sl, r4
 80105f2:	4498      	add	r8, r3
 80105f4:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80105f6:	2404      	movs	r4, #4
 80105f8:	e73d      	b.n	8010476 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80105fa:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 80105fe:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010600:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010602:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8010606:	f7ff fd2b 	bl	8010060 <dir_find>
			ns = dp->fn[NSFLAG];
 801060a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 801060e:	2800      	cmp	r0, #0
 8010610:	d0a6      	beq.n	8010560 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010612:	2804      	cmp	r0, #4
 8010614:	f47f af0f 	bne.w	8010436 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010618:	f013 0f04 	tst.w	r3, #4
 801061c:	bf08      	it	eq
 801061e:	2005      	moveq	r0, #5
 8010620:	e709      	b.n	8010436 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010622:	e9cd 3200 	strd	r3, r2, [sp]
 8010626:	f001 fcc7 	bl	8011fb8 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801062a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801062e:	b918      	cbnz	r0, 8010638 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 8010630:	f046 0602 	orr.w	r6, r6, #2
 8010634:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010636:	e7c1      	b.n	80105bc <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010638:	4921      	ldr	r1, [pc, #132]	; (80106c0 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 801063a:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801063e:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8010640:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010642:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010646:	2800      	cmp	r0, #0
 8010648:	d0b8      	beq.n	80105bc <follow_path+0x20c>
 801064a:	e7ad      	b.n	80105a8 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 801064c:	009b      	lsls	r3, r3, #2
 801064e:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010652:	2a0c      	cmp	r2, #12
 8010654:	d0d1      	beq.n	80105fa <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010656:	07b0      	lsls	r0, r6, #30
 8010658:	f57f af74 	bpl.w	8010544 <follow_path+0x194>
 801065c:	e777      	b.n	801054e <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 801065e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8010662:	2919      	cmp	r1, #25
 8010664:	d80f      	bhi.n	8010686 <follow_path+0x2d6>
					b |= 2;
 8010666:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 801066a:	b2c0      	uxtb	r0, r0
 801066c:	e7aa      	b.n	80105c4 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 801066e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8010670:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8010672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8010676:	b003      	add	sp, #12
 8010678:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 801067c:	f7ff bc36 	b.w	800feec <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010680:	4626      	mov	r6, r4
 8010682:	2401      	movs	r4, #1
 8010684:	e722      	b.n	80104cc <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 8010686:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 801068a:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 801068c:	bf9c      	itt	ls
 801068e:	3820      	subls	r0, #32
 8010690:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8010694:	b2c0      	uxtb	r0, r0
 8010696:	e795      	b.n	80105c4 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010698:	4690      	mov	r8, r2
 801069a:	e6e7      	b.n	801046c <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801069c:	2005      	movs	r0, #5
 801069e:	e6ca      	b.n	8010436 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 80106a0:	4647      	mov	r7, r8
 80106a2:	4690      	mov	r8, r2
 80106a4:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80106a8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 80106ac:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80106ae:	2ae5      	cmp	r2, #229	; 0xe5
 80106b0:	f47f af39 	bne.w	8010526 <follow_path+0x176>
 80106b4:	2205      	movs	r2, #5
 80106b6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80106ba:	e734      	b.n	8010526 <follow_path+0x176>
 80106bc:	0801b5c8 	.word	0x0801b5c8
 80106c0:	0801b5dc 	.word	0x0801b5dc
 80106c4:	0801b5d4 	.word	0x0801b5d4

080106c8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106c8:	2901      	cmp	r1, #1
{
 80106ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106ce:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 80106d0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106d2:	d90f      	bls.n	80106f4 <remove_chain+0x2c>
 80106d4:	69ab      	ldr	r3, [r5, #24]
 80106d6:	428b      	cmp	r3, r1
 80106d8:	d90c      	bls.n	80106f4 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80106da:	4606      	mov	r6, r0
 80106dc:	4611      	mov	r1, r2
 80106de:	b962      	cbnz	r2, 80106fa <remove_chain+0x32>
 80106e0:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80106e2:	429c      	cmp	r4, r3
 80106e4:	d206      	bcs.n	80106f4 <remove_chain+0x2c>
		switch (fs->fs_type) {
 80106e6:	783b      	ldrb	r3, [r7, #0]
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	d072      	beq.n	80107d2 <remove_chain+0x10a>
 80106ec:	2b03      	cmp	r3, #3
 80106ee:	d05d      	beq.n	80107ac <remove_chain+0xe4>
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d010      	beq.n	8010716 <remove_chain+0x4e>
 80106f4:	2002      	movs	r0, #2
}
 80106f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d9fa      	bls.n	80106f4 <remove_chain+0x2c>
 80106fe:	2a01      	cmp	r2, #1
 8010700:	d0f8      	beq.n	80106f4 <remove_chain+0x2c>
 8010702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010706:	4628      	mov	r0, r5
 8010708:	f7fe ff52 	bl	800f5b0 <put_fat.part.0>
		if (res != FR_OK) return res;
 801070c:	2800      	cmp	r0, #0
 801070e:	d1f2      	bne.n	80106f6 <remove_chain+0x2e>
 8010710:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	e7e5      	b.n	80106e2 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 8010716:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801071c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801071e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010722:	4291      	cmp	r1, r2
 8010724:	d006      	beq.n	8010734 <remove_chain+0x6c>
 8010726:	4638      	mov	r0, r7
 8010728:	f7fe fd90 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801072c:	2800      	cmp	r0, #0
 801072e:	d161      	bne.n	80107f4 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8010734:	f108 0901 	add.w	r9, r8, #1
 8010738:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801073c:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8010740:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010742:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8010744:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010748:	d004      	beq.n	8010754 <remove_chain+0x8c>
 801074a:	4638      	mov	r0, r7
 801074c:	f7fe fd7e 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010750:	2800      	cmp	r0, #0
 8010752:	d14f      	bne.n	80107f4 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010754:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8010758:	444f      	add	r7, r9
 801075a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801075e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010762:	07e3      	lsls	r3, r4, #31
 8010764:	d548      	bpl.n	80107f8 <remove_chain+0x130>
 8010766:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 801076a:	f1b8 0f00 	cmp.w	r8, #0
 801076e:	d046      	beq.n	80107fe <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010770:	f1b8 0f01 	cmp.w	r8, #1
 8010774:	d0be      	beq.n	80106f4 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010776:	69ab      	ldr	r3, [r5, #24]
 8010778:	42a3      	cmp	r3, r4
 801077a:	d9bb      	bls.n	80106f4 <remove_chain+0x2c>
 801077c:	2200      	movs	r2, #0
 801077e:	4621      	mov	r1, r4
 8010780:	4628      	mov	r0, r5
 8010782:	f7fe ff15 	bl	800f5b0 <put_fat.part.0>
			if (res != FR_OK) return res;
 8010786:	2800      	cmp	r0, #0
 8010788:	d1b5      	bne.n	80106f6 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801078a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 801078e:	1e91      	subs	r1, r2, #2
 8010790:	428b      	cmp	r3, r1
 8010792:	d205      	bcs.n	80107a0 <remove_chain+0xd8>
			fs->free_clst++;
 8010794:	3301      	adds	r3, #1
 8010796:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8010798:	792b      	ldrb	r3, [r5, #4]
 801079a:	f043 0301 	orr.w	r3, r3, #1
 801079e:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80107a0:	4542      	cmp	r2, r8
 80107a2:	d92c      	bls.n	80107fe <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80107a4:	6837      	ldr	r7, [r6, #0]
 80107a6:	4644      	mov	r4, r8
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	e79a      	b.n	80106e2 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107b0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107b4:	4299      	cmp	r1, r3
 80107b6:	d003      	beq.n	80107c0 <remove_chain+0xf8>
 80107b8:	4638      	mov	r0, r7
 80107ba:	f7fe fd47 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107be:	b9c8      	cbnz	r0, 80107f4 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107c0:	00a3      	lsls	r3, r4, #2
 80107c2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80107c6:	441f      	add	r7, r3
 80107c8:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107cc:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 80107d0:	e7cb      	b.n	801076a <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107d6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80107da:	4299      	cmp	r1, r3
 80107dc:	d003      	beq.n	80107e6 <remove_chain+0x11e>
 80107de:	4638      	mov	r0, r7
 80107e0:	f7fe fd34 	bl	800f24c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107e4:	b930      	cbnz	r0, 80107f4 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80107e6:	0063      	lsls	r3, r4, #1
 80107e8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80107ec:	441f      	add	r7, r3
 80107ee:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 80107f2:	e7ba      	b.n	801076a <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80107f4:	2001      	movs	r0, #1
 80107f6:	e77e      	b.n	80106f6 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80107f8:	f3c8 080b 	ubfx	r8, r8, #0, #12
 80107fc:	e7b5      	b.n	801076a <remove_chain+0xa2>
	return FR_OK;
 80107fe:	2000      	movs	r0, #0
 8010800:	e779      	b.n	80106f6 <remove_chain+0x2e>
 8010802:	bf00      	nop

08010804 <dir_alloc>:
{
 8010804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010808:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 801080a:	2100      	movs	r1, #0
{
 801080c:	4681      	mov	r9, r0
 801080e:	ed2d 8b02 	vpush	{d8}
 8010812:	b089      	sub	sp, #36	; 0x24
	FATFS *fs = dp->obj.fs;
 8010814:	f8d0 8000 	ldr.w	r8, [r0]
{
 8010818:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 801081a:	f7ff fb67 	bl	800feec <dir_sdi>
	if (res == FR_OK) {
 801081e:	9002      	str	r0, [sp, #8]
 8010820:	b150      	cbz	r0, 8010838 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010822:	9b02      	ldr	r3, [sp, #8]
 8010824:	2b04      	cmp	r3, #4
 8010826:	d101      	bne.n	801082c <dir_alloc+0x28>
 8010828:	2307      	movs	r3, #7
 801082a:	9302      	str	r3, [sp, #8]
}
 801082c:	9802      	ldr	r0, [sp, #8]
 801082e:	b009      	add	sp, #36	; 0x24
 8010830:	ecbd 8b02 	vpop	{d8}
 8010834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8010838:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 801083c:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801083e:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8010842:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010844:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 8010848:	42ac      	cmp	r4, r5
 801084a:	d019      	beq.n	8010880 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801084c:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d148      	bne.n	80108e6 <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010854:	2301      	movs	r3, #1
 8010856:	462a      	mov	r2, r5
 8010858:	4651      	mov	r1, sl
 801085a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801085e:	f7fe fb47 	bl	800eef0 <disk_read>
 8010862:	b158      	cbz	r0, 801087c <dir_alloc+0x78>
				res = FR_DISK_ERR;
 8010864:	2201      	movs	r2, #1
			fs->winsect = sector;
 8010866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 801086a:	9202      	str	r2, [sp, #8]
}
 801086c:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 801086e:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8010872:	b009      	add	sp, #36	; 0x24
 8010874:	ecbd 8b02 	vpop	{d8}
 8010878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801087c:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010880:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	2be5      	cmp	r3, #229	; 0xe5
 8010888:	d028      	beq.n	80108dc <dir_alloc+0xd8>
 801088a:	fab3 f283 	clz	r2, r3
 801088e:	0952      	lsrs	r2, r2, #5
 8010890:	b323      	cbz	r3, 80108dc <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 8010892:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010894:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010898:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801089c:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801089e:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80108a2:	d2c1      	bcs.n	8010828 <dir_alloc+0x24>
 80108a4:	2d00      	cmp	r5, #0
 80108a6:	d0bf      	beq.n	8010828 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80108a8:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 80108ac:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80108b0:	f1bb 0f00 	cmp.w	fp, #0
 80108b4:	d109      	bne.n	80108ca <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 80108b6:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 80108b8:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 80108bc:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 80108c0:	bba9      	cbnz	r1, 801092e <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80108c2:	8933      	ldrh	r3, [r6, #8]
 80108c4:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80108c8:	d95b      	bls.n	8010982 <dir_alloc+0x17e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80108ca:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80108ce:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80108d0:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 80108d2:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80108d6:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80108da:	e7b3      	b.n	8010844 <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80108dc:	3701      	adds	r7, #1
 80108de:	9b03      	ldr	r3, [sp, #12]
 80108e0:	429f      	cmp	r7, r3
 80108e2:	d1d7      	bne.n	8010894 <dir_alloc+0x90>
 80108e4:	e7a2      	b.n	801082c <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80108e6:	2301      	movs	r3, #1
 80108e8:	4622      	mov	r2, r4
 80108ea:	4651      	mov	r1, sl
 80108ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 80108f0:	f7fe fb0c 	bl	800ef0c <disk_write>
 80108f4:	bb48      	cbnz	r0, 801094a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80108f6:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 80108fa:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80108fe:	1ae2      	subs	r2, r4, r3
 8010900:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010904:	429a      	cmp	r2, r3
 8010906:	d2a5      	bcs.n	8010854 <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010908:	f898 6002 	ldrb.w	r6, [r8, #2]
 801090c:	2e01      	cmp	r6, #1
 801090e:	d802      	bhi.n	8010916 <dir_alloc+0x112>
 8010910:	e7a0      	b.n	8010854 <dir_alloc+0x50>
					wsect += fs->fsize;
 8010912:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8010916:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010918:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801091a:	2301      	movs	r3, #1
 801091c:	4651      	mov	r1, sl
 801091e:	4622      	mov	r2, r4
 8010920:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010924:	f7fe faf2 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010928:	2e01      	cmp	r6, #1
 801092a:	d1f2      	bne.n	8010912 <dir_alloc+0x10e>
 801092c:	e792      	b.n	8010854 <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801092e:	8973      	ldrh	r3, [r6, #10]
 8010930:	3b01      	subs	r3, #1
 8010932:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 8010936:	d1c8      	bne.n	80108ca <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010938:	4630      	mov	r0, r6
 801093a:	f7fe fed3 	bl	800f6e4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801093e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010940:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010942:	f240 8082 	bls.w	8010a4a <dir_alloc+0x246>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010946:	1c43      	adds	r3, r0, #1
 8010948:	d102      	bne.n	8010950 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801094a:	2301      	movs	r3, #1
 801094c:	9302      	str	r3, [sp, #8]
 801094e:	e76d      	b.n	801082c <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010950:	69b3      	ldr	r3, [r6, #24]
 8010952:	4298      	cmp	r0, r3
 8010954:	d21a      	bcs.n	801098c <dir_alloc+0x188>
	clst -= 2;
 8010956:	1e83      	subs	r3, r0, #2
 8010958:	9305      	str	r3, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801095a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 8010962:	f8c9 3018 	str.w	r3, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010966:	69b3      	ldr	r3, [r6, #24]
 8010968:	9a05      	ldr	r2, [sp, #20]
 801096a:	3b02      	subs	r3, #2
 801096c:	4293      	cmp	r3, r2
 801096e:	f240 809e 	bls.w	8010aae <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 8010972:	8973      	ldrh	r3, [r6, #10]
 8010974:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8010976:	fb02 5503 	mla	r5, r2, r3, r5
 801097a:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 801097c:	f8c9 501c 	str.w	r5, [r9, #28]
 8010980:	e7a6      	b.n	80108d0 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010982:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 8010984:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010988:	9302      	str	r3, [sp, #8]
 801098a:	e74f      	b.n	801082c <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801098c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8010990:	4648      	mov	r0, r9
 8010992:	f7ff f9db 	bl	800fd4c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010996:	4603      	mov	r3, r0
 8010998:	9004      	str	r0, [sp, #16]
 801099a:	2800      	cmp	r0, #0
 801099c:	f43f af44 	beq.w	8010828 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80109a0:	2801      	cmp	r0, #1
 80109a2:	d052      	beq.n	8010a4a <dir_alloc+0x246>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80109a4:	3301      	adds	r3, #1
 80109a6:	d0d0      	beq.n	801094a <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109a8:	78f3      	ldrb	r3, [r6, #3]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d150      	bne.n	8010a50 <dir_alloc+0x24c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109ae:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80109b2:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 80109b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109b8:	2100      	movs	r1, #0
 80109ba:	9801      	ldr	r0, [sp, #4]
 80109bc:	f008 fd0c 	bl	80193d8 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109c0:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 80109c2:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109c4:	3b02      	subs	r3, #2
	clst -= 2;
 80109c6:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109c8:	429a      	cmp	r2, r3
	clst -= 2;
 80109ca:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109cc:	d27c      	bcs.n	8010ac8 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 80109ce:	4611      	mov	r1, r2
 80109d0:	8973      	ldrh	r3, [r6, #10]
 80109d2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80109d4:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80109d8:	6332      	str	r2, [r6, #48]	; 0x30
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d071      	beq.n	8010ac2 <dir_alloc+0x2be>
 80109de:	2300      	movs	r3, #0
 80109e0:	ee08 aa10 	vmov	s16, sl
 80109e4:	9706      	str	r7, [sp, #24]
 80109e6:	4692      	mov	sl, r2
 80109e8:	f8cd 901c 	str.w	r9, [sp, #28]
 80109ec:	46a1      	mov	r9, r4
 80109ee:	9f01      	ldr	r7, [sp, #4]
 80109f0:	461c      	mov	r4, r3
						fs->wflag = 1;
 80109f2:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109f6:	4652      	mov	r2, sl
 80109f8:	4639      	mov	r1, r7
 80109fa:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 80109fc:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109fe:	2301      	movs	r3, #1
 8010a00:	f7fe fa84 	bl	800ef0c <disk_write>
 8010a04:	2800      	cmp	r0, #0
 8010a06:	d1a0      	bne.n	801094a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a08:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8010a0a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a0c:	ebaa 0203 	sub.w	r2, sl, r3
 8010a10:	69f3      	ldr	r3, [r6, #28]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d20e      	bcs.n	8010a34 <dir_alloc+0x230>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a16:	78b5      	ldrb	r5, [r6, #2]
 8010a18:	2d01      	cmp	r5, #1
 8010a1a:	d801      	bhi.n	8010a20 <dir_alloc+0x21c>
 8010a1c:	e00a      	b.n	8010a34 <dir_alloc+0x230>
					wsect += fs->fsize;
 8010a1e:	69f3      	ldr	r3, [r6, #28]
 8010a20:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a22:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a24:	2301      	movs	r3, #1
 8010a26:	4639      	mov	r1, r7
 8010a28:	4652      	mov	r2, sl
 8010a2a:	7870      	ldrb	r0, [r6, #1]
 8010a2c:	f7fe fa6e 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a30:	2d01      	cmp	r5, #1
 8010a32:	d1f4      	bne.n	8010a1e <dir_alloc+0x21a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010a34:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8010a36:	1c63      	adds	r3, r4, #1
 8010a38:	8972      	ldrh	r2, [r6, #10]
 8010a3a:	f101 0a01 	add.w	sl, r1, #1
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 8010a44:	d235      	bcs.n	8010ab2 <dir_alloc+0x2ae>
 8010a46:	461c      	mov	r4, r3
 8010a48:	e7d3      	b.n	80109f2 <dir_alloc+0x1ee>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a4a:	2302      	movs	r3, #2
 8010a4c:	9302      	str	r3, [sp, #8]
 8010a4e:	e6ed      	b.n	801082c <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 8010a50:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a52:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8010a56:	2301      	movs	r3, #1
 8010a58:	7870      	ldrb	r0, [r6, #1]
 8010a5a:	9205      	str	r2, [sp, #20]
 8010a5c:	9101      	str	r1, [sp, #4]
 8010a5e:	f7fe fa55 	bl	800ef0c <disk_write>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	f47f af71 	bne.w	801094a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a6a:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 8010a6c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a6e:	1ad1      	subs	r1, r2, r3
 8010a70:	69f3      	ldr	r3, [r6, #28]
 8010a72:	4299      	cmp	r1, r3
 8010a74:	d29e      	bcs.n	80109b4 <dir_alloc+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a76:	78b5      	ldrb	r5, [r6, #2]
 8010a78:	2d01      	cmp	r5, #1
 8010a7a:	d99b      	bls.n	80109b4 <dir_alloc+0x1b0>
 8010a7c:	ee08 aa10 	vmov	s16, sl
 8010a80:	f8cd 9014 	str.w	r9, [sp, #20]
 8010a84:	4692      	mov	sl, r2
 8010a86:	46a1      	mov	r9, r4
 8010a88:	9c01      	ldr	r4, [sp, #4]
 8010a8a:	e000      	b.n	8010a8e <dir_alloc+0x28a>
					wsect += fs->fsize;
 8010a8c:	69f3      	ldr	r3, [r6, #28]
 8010a8e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a90:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a92:	2301      	movs	r3, #1
 8010a94:	4621      	mov	r1, r4
 8010a96:	4652      	mov	r2, sl
 8010a98:	7870      	ldrb	r0, [r6, #1]
 8010a9a:	f7fe fa37 	bl	800ef0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a9e:	2d01      	cmp	r5, #1
 8010aa0:	d1f4      	bne.n	8010a8c <dir_alloc+0x288>
 8010aa2:	464c      	mov	r4, r9
 8010aa4:	ee18 aa10 	vmov	sl, s16
 8010aa8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010aac:	e782      	b.n	80109b4 <dir_alloc+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010aae:	2500      	movs	r5, #0
 8010ab0:	e763      	b.n	801097a <dir_alloc+0x176>
					fs->winsect -= n;							/* Restore window offset */
 8010ab2:	4623      	mov	r3, r4
 8010ab4:	9f06      	ldr	r7, [sp, #24]
 8010ab6:	464c      	mov	r4, r9
 8010ab8:	ee18 aa10 	vmov	sl, s16
 8010abc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8010ac0:	1aca      	subs	r2, r1, r3
 8010ac2:	9b04      	ldr	r3, [sp, #16]
 8010ac4:	6332      	str	r2, [r6, #48]	; 0x30
 8010ac6:	e74c      	b.n	8010962 <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 8010ac8:	8973      	ldrh	r3, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010aca:	2200      	movs	r2, #0
 8010acc:	e784      	b.n	80109d8 <dir_alloc+0x1d4>
 8010ace:	bf00      	nop

08010ad0 <dir_register>:
{
 8010ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010ad4:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8010ad8:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010ada:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 8010ade:	930a      	str	r3, [sp, #40]	; 0x28
 8010ae0:	f040 8450 	bne.w	8011384 <dir_register+0x8b4>
	FATFS *fs = dp->obj.fs;
 8010ae4:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010ae8:	4604      	mov	r4, r0
 8010aea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8010aee:	881a      	ldrh	r2, [r3, #0]
 8010af0:	2a00      	cmp	r2, #0
 8010af2:	f000 844b 	beq.w	801138c <dir_register+0x8bc>
 8010af6:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8010afa:	f10b 0b01 	add.w	fp, fp, #1
 8010afe:	2a00      	cmp	r2, #0
 8010b00:	d1f9      	bne.n	8010af6 <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 8010b02:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 8010b06:	ab12      	add	r3, sp, #72	; 0x48
 8010b08:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010b0c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b12:	07d8      	lsls	r0, r3, #31
 8010b14:	f140 818b 	bpl.w	8010e2e <dir_register+0x35e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010b18:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010b1a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
			*d++ = *s++;
 8010b1e:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
		for (n = 1; n < 100; n++) {
 8010b22:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010b24:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010b28:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 8010b2c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 8010b30:	4dba      	ldr	r5, [pc, #744]	; (8010e1c <dir_register+0x34c>)
			*d++ = *s++;
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8010b38:	9302      	str	r3, [sp, #8]
 8010b3a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8010b3e:	9305      	str	r3, [sp, #20]
 8010b40:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8010b44:	9304      	str	r3, [sp, #16]
 8010b46:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010b4a:	9303      	str	r3, [sp, #12]
 8010b4c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8010b50:	9308      	str	r3, [sp, #32]
 8010b52:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8010b56:	9307      	str	r3, [sp, #28]
 8010b58:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8010b5c:	9306      	str	r3, [sp, #24]
 8010b5e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010b62:	9309      	str	r3, [sp, #36]	; 0x24
 8010b64:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010b68:	469b      	mov	fp, r3
			*d++ = *s++;
 8010b6a:	9b01      	ldr	r3, [sp, #4]
 8010b6c:	2100      	movs	r1, #0
 8010b6e:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010b70:	2f05      	cmp	r7, #5
			*d++ = *s++;
 8010b72:	f363 0107 	bfi	r1, r3, #0, #8
 8010b76:	9b02      	ldr	r3, [sp, #8]
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010b78:	f8d9 000c 	ldr.w	r0, [r9, #12]
			*d++ = *s++;
 8010b7c:	f363 210f 	bfi	r1, r3, #8, #8
 8010b80:	9b05      	ldr	r3, [sp, #20]
 8010b82:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
 8010b86:	f363 4117 	bfi	r1, r3, #16, #8
 8010b8a:	9b04      	ldr	r3, [sp, #16]
 8010b8c:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 8010b90:	f363 611f 	bfi	r1, r3, #24, #8
 8010b94:	9b03      	ldr	r3, [sp, #12]
 8010b96:	f363 0207 	bfi	r2, r3, #0, #8
 8010b9a:	9b08      	ldr	r3, [sp, #32]
 8010b9c:	f363 220f 	bfi	r2, r3, #8, #8
 8010ba0:	9b07      	ldr	r3, [sp, #28]
 8010ba2:	f363 4217 	bfi	r2, r3, #16, #8
 8010ba6:	9b06      	ldr	r3, [sp, #24]
 8010ba8:	f363 621f 	bfi	r2, r3, #24, #8
 8010bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bae:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 8010bb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010bb6:	f240 8304 	bls.w	80111c2 <dir_register+0x6f2>
		while (*lfn) {	/* Create a CRC */
 8010bba:	8802      	ldrh	r2, [r0, #0]
 8010bbc:	2a00      	cmp	r2, #0
 8010bbe:	f000 8300 	beq.w	80111c2 <dir_register+0x6f2>
				sr = (sr << 1) + (wc & 1);
 8010bc2:	f002 0101 	and.w	r1, r2, #1
 8010bc6:	4684      	mov	ip, r0
				wc >>= 1;
 8010bc8:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8010bca:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010bce:	e009      	b.n	8010be4 <dir_register+0x114>
				sr = (sr << 1) + (wc & 1);
 8010bd0:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010bd4:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8010bd8:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8010bdc:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010be0:	bf18      	it	ne
 8010be2:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010be4:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8010be8:	0893      	lsrs	r3, r2, #2
 8010bea:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8010bec:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010bf0:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010bfa:	bf48      	it	mi
 8010bfc:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8010c00:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8010c02:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c06:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8010c0a:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c0e:	bf18      	it	ne
 8010c10:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010c12:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c16:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010c18:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8010c1c:	bf48      	it	mi
 8010c1e:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010c20:	f003 0301 	and.w	r3, r3, #1
 8010c24:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c28:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010c2a:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8010c2e:	bf48      	it	mi
 8010c30:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010c32:	f000 0001 	and.w	r0, r0, #1
 8010c36:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c3a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010c3c:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8010c40:	bf48      	it	mi
 8010c42:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010c44:	f001 0101 	and.w	r1, r1, #1
 8010c48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c4c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010c4e:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 8010c52:	bf48      	it	mi
 8010c54:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c5e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010c60:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8010c64:	bf48      	it	mi
 8010c66:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010c68:	f000 0001 	and.w	r0, r0, #1
 8010c6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c70:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010c72:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8010c76:	bf48      	it	mi
 8010c78:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010c7a:	f001 0101 	and.w	r1, r1, #1
 8010c7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c82:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010c84:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8010c88:	bf48      	it	mi
 8010c8a:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8010c8c:	f003 0301 	and.w	r3, r3, #1
 8010c90:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010c94:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8010c96:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8010c9a:	bf48      	it	mi
 8010c9c:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010c9e:	f000 0001 	and.w	r0, r0, #1
 8010ca2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ca6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8010ca8:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8010cac:	bf48      	it	mi
 8010cae:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010cb0:	f001 0101 	and.w	r1, r1, #1
 8010cb4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010cb8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8010cba:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8010cbe:	bf48      	it	mi
 8010cc0:	4068      	eormi	r0, r5
				wc >>= 1;
 8010cc2:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 8010cc4:	f003 0301 	and.w	r3, r3, #1
 8010cc8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ccc:	0400      	lsls	r0, r0, #16
 8010cce:	bf48      	it	mi
 8010cd0:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8010cd2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010cd6:	0409      	lsls	r1, r1, #16
 8010cd8:	bf48      	it	mi
 8010cda:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8010cdc:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8010ce0:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 8010ce2:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8010ce6:	bf48      	it	mi
 8010ce8:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 8010cec:	2a00      	cmp	r2, #0
 8010cee:	f47f af6f 	bne.w	8010bd0 <dir_register+0x100>
		c = (BYTE)((seq % 16) + '0');
 8010cf2:	f00e 010f 	and.w	r1, lr, #15
 8010cf6:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010cfa:	2a39      	cmp	r2, #57	; 0x39
 8010cfc:	bf88      	it	hi
 8010cfe:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010d02:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8010d06:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8010d0a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 8010d0e:	f240 830c 	bls.w	801132a <dir_register+0x85a>
		c = (BYTE)((seq % 16) + '0');
 8010d12:	f001 000f 	and.w	r0, r1, #15
 8010d16:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010d1a:	2a39      	cmp	r2, #57	; 0x39
 8010d1c:	bf88      	it	hi
 8010d1e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010d22:	290f      	cmp	r1, #15
		seq /= 16;
 8010d24:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8010d28:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8010d2c:	f240 8303 	bls.w	8011336 <dir_register+0x866>
		c = (BYTE)((seq % 16) + '0');
 8010d30:	f000 010f 	and.w	r1, r0, #15
 8010d34:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010d38:	2a39      	cmp	r2, #57	; 0x39
 8010d3a:	bf88      	it	hi
 8010d3c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010d40:	280f      	cmp	r0, #15
		seq /= 16;
 8010d42:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8010d46:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8010d4a:	f240 82fa 	bls.w	8011342 <dir_register+0x872>
		c = (BYTE)((seq % 16) + '0');
 8010d4e:	f001 000f 	and.w	r0, r1, #15
 8010d52:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010d56:	2a39      	cmp	r2, #57	; 0x39
 8010d58:	bf88      	it	hi
 8010d5a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010d5e:	290f      	cmp	r1, #15
		seq /= 16;
 8010d60:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8010d64:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 8010d68:	f240 82fa 	bls.w	8011360 <dir_register+0x890>
		c = (BYTE)((seq % 16) + '0');
 8010d6c:	f000 010f 	and.w	r1, r0, #15
 8010d70:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010d74:	2a39      	cmp	r2, #57	; 0x39
 8010d76:	bf88      	it	hi
 8010d78:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010d7c:	280f      	cmp	r0, #15
		seq /= 16;
 8010d7e:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 8010d82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 8010d86:	f240 82f1 	bls.w	801136c <dir_register+0x89c>
		c = (BYTE)((seq % 16) + '0');
 8010d8a:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8010d8e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 8010d92:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8010d96:	2a39      	cmp	r2, #57	; 0x39
 8010d98:	bf88      	it	hi
 8010d9a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8010d9e:	290f      	cmp	r1, #15
		ns[i--] = c;
 8010da0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 8010da4:	f240 82e8 	bls.w	8011378 <dir_register+0x8a8>
		c = (BYTE)((seq % 16) + '0');
 8010da8:	f00e 010f 	and.w	r1, lr, #15
 8010dac:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8010db0:	2a39      	cmp	r2, #57	; 0x39
 8010db2:	bf88      	it	hi
 8010db4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8010db8:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8010dbc:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8010dc0:	f240 82c5 	bls.w	801134e <dir_register+0x87e>
		ns[i--] = c;
 8010dc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8010dc8:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010dcc:	2200      	movs	r2, #0
 8010dce:	e002      	b.n	8010dd6 <dir_register+0x306>
 8010dd0:	3201      	adds	r2, #1
 8010dd2:	4562      	cmp	r2, ip
 8010dd4:	d003      	beq.n	8010dde <dir_register+0x30e>
 8010dd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010dda:	2b20      	cmp	r3, #32
 8010ddc:	d1f8      	bne.n	8010dd0 <dir_register+0x300>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010dde:	f1bc 0f07 	cmp.w	ip, #7
 8010de2:	f240 81f3 	bls.w	80111cc <dir_register+0x6fc>
 8010de6:	1c50      	adds	r0, r2, #1
 8010de8:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8010dec:	2807      	cmp	r0, #7
 8010dee:	d809      	bhi.n	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010df0:	1c42      	adds	r2, r0, #1
 8010df2:	2120      	movs	r1, #32
 8010df4:	2a08      	cmp	r2, #8
 8010df6:	f1c0 0208 	rsb	r2, r0, #8
 8010dfa:	4430      	add	r0, r6
 8010dfc:	bf88      	it	hi
 8010dfe:	2201      	movhi	r2, #1
 8010e00:	f008 faea 	bl	80193d8 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010e04:	4620      	mov	r0, r4
 8010e06:	f7ff f92b 	bl	8010060 <dir_find>
			if (res != FR_OK) break;
 8010e0a:	b948      	cbnz	r0, 8010e20 <dir_register+0x350>
		for (n = 1; n < 100; n++) {
 8010e0c:	3701      	adds	r7, #1
 8010e0e:	2f64      	cmp	r7, #100	; 0x64
 8010e10:	f47f aeab 	bne.w	8010b6a <dir_register+0x9a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010e14:	2007      	movs	r0, #7
}
 8010e16:	b013      	add	sp, #76	; 0x4c
 8010e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1c:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010e20:	2804      	cmp	r0, #4
 8010e22:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8010e26:	d1f6      	bne.n	8010e16 <dir_register+0x346>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e2a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e30:	079b      	lsls	r3, r3, #30
 8010e32:	f140 818e 	bpl.w	8011152 <dir_register+0x682>
 8010e36:	f10b 0b0c 	add.w	fp, fp, #12
 8010e3a:	4de3      	ldr	r5, [pc, #908]	; (80111c8 <dir_register+0x6f8>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010e3c:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010e3e:	fba5 350b 	umull	r3, r5, r5, fp
 8010e42:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010e44:	1c69      	adds	r1, r5, #1
 8010e46:	f7ff fcdd 	bl	8010804 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d1e3      	bne.n	8010e16 <dir_register+0x346>
 8010e4e:	f1bb 0f0c 	cmp.w	fp, #12
 8010e52:	f000 8185 	beq.w	8011160 <dir_register+0x690>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010e56:	6961      	ldr	r1, [r4, #20]
 8010e58:	4620      	mov	r0, r4
 8010e5a:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8010e5e:	f7ff f845 	bl	800feec <dir_sdi>
		if (res == FR_OK) {
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d1d7      	bne.n	8010e16 <dir_register+0x346>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010e66:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8010e6a:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010e6c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8010e70:	01fb      	lsls	r3, r7, #7
 8010e72:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8010e76:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8010e7a:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 8010e7e:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 8010e82:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 8010e86:	189f      	adds	r7, r3, r2
 8010e88:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8010e8c:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 8010e90:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8010e94:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 8010e98:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8010e9c:	fa50 f783 	uxtab	r7, r0, r3
 8010ea0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8010ea4:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8010ea8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8010eac:	fa51 f783 	uxtab	r7, r1, r3
 8010eb0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8010eb4:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8010eb8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010ebc:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010ec0:	fa5a fa83 	uxtab	sl, sl, r3
 8010ec4:	f3ca 0346 	ubfx	r3, sl, #1, #7
 8010ec8:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 8010ecc:	fa52 f283 	uxtab	r2, r2, r3
 8010ed0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010ed4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010ed8:	fa5e f283 	uxtab	r2, lr, r3
 8010edc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010ee0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010ee4:	fa5c f283 	uxtab	r2, ip, r3
 8010ee8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010eec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010ef0:	fa56 f283 	uxtab	r2, r6, r3
 8010ef4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010ef8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010efc:	fa50 f383 	uxtab	r3, r0, r3
 8010f00:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8010f04:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8010f08:	fa51 f183 	uxtab	r1, r1, r3
 8010f0c:	b2ce      	uxtb	r6, r1
	} while (--n);
 8010f0e:	e036      	b.n	8010f7e <dir_register+0x4ae>
	*ptr++ = (BYTE)val; val >>= 8;
 8010f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f14:	f8a3 2003 	strh.w	r2, [r3, #3]
 8010f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f1c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8010f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f24:	f8a3 2007 	strh.w	r2, [r3, #7]
 8010f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f2c:	f8a3 2009 	strh.w	r2, [r3, #9]
 8010f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f34:	81da      	strh	r2, [r3, #14]
 8010f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f3a:	821a      	strh	r2, [r3, #16]
 8010f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f40:	825a      	strh	r2, [r3, #18]
 8010f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f46:	829a      	strh	r2, [r3, #20]
 8010f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f4c:	82da      	strh	r2, [r3, #22]
 8010f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f52:	831a      	strh	r2, [r3, #24]
 8010f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f58:	839a      	strh	r2, [r3, #28]
 8010f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f5e:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010f60:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010f64:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8010f66:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8010f68:	4620      	mov	r0, r4
				fs->wflag = 1;
 8010f6a:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010f6e:	f7fe fc19 	bl	800f7a4 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8010f72:	2800      	cmp	r0, #0
 8010f74:	f47f af4f 	bne.w	8010e16 <dir_register+0x346>
 8010f78:	3d01      	subs	r5, #1
 8010f7a:	f000 80f1 	beq.w	8011160 <dir_register+0x690>
				res = move_window(fs, dp->sect);
 8010f7e:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010f80:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8010f84:	4299      	cmp	r1, r3
 8010f86:	d005      	beq.n	8010f94 <dir_register+0x4c4>
 8010f88:	4648      	mov	r0, r9
 8010f8a:	f7fe f95f 	bl	800f24c <move_window.part.0>
				if (res != FR_OK) break;
 8010f8e:	2800      	cmp	r0, #0
 8010f90:	f47f af41 	bne.w	8010e16 <dir_register+0x346>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010f94:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010f96:	f04f 020f 	mov.w	r2, #15
 8010f9a:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010f9c:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010fa0:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010fa2:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010fa4:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 8010fa6:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010faa:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 8010fae:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 8010fb2:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010fb6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010fba:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8010fbe:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8010fc2:	f883 c001 	strb.w	ip, [r3, #1]
 8010fc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010fca:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8010fce:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010fd2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8010fd6:	45be      	cmp	lr, r7
 8010fd8:	d89a      	bhi.n	8010f10 <dir_register+0x440>
 8010fda:	3201      	adds	r2, #1
 8010fdc:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 8010fe0:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8010fe2:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8010fe6:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 8010fea:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010fee:	f1ba 0f00 	cmp.w	sl, #0
 8010ff2:	d091      	beq.n	8010f18 <dir_register+0x448>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010ff4:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8010ff8:	45f2      	cmp	sl, lr
 8010ffa:	d08d      	beq.n	8010f18 <dir_register+0x448>
 8010ffc:	440a      	add	r2, r1
 8010ffe:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011002:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011006:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 801100a:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801100e:	f1ba 0f00 	cmp.w	sl, #0
 8011012:	f000 81be 	beq.w	8011392 <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011016:	45f2      	cmp	sl, lr
 8011018:	d082      	beq.n	8010f20 <dir_register+0x450>
 801101a:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801101e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011022:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 8011026:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801102a:	f1ba 0f00 	cmp.w	sl, #0
 801102e:	f000 81c5 	beq.w	80113bc <dir_register+0x8ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011032:	45f2      	cmp	sl, lr
 8011034:	f43f af78 	beq.w	8010f28 <dir_register+0x458>
 8011038:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 801103c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011040:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 8011044:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011048:	f1ba 0f00 	cmp.w	sl, #0
 801104c:	f000 81b3 	beq.w	80113b6 <dir_register+0x8e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011050:	45f2      	cmp	sl, lr
 8011052:	f43f af6d 	beq.w	8010f30 <dir_register+0x460>
 8011056:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801105a:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 801105e:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 8011062:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011066:	f1ba 0f00 	cmp.w	sl, #0
 801106a:	f43f af64 	beq.w	8010f36 <dir_register+0x466>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801106e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8011072:	45f2      	cmp	sl, lr
 8011074:	f43f af5f 	beq.w	8010f36 <dir_register+0x466>
 8011078:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 801107c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011080:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 8011084:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011088:	f1ba 0f00 	cmp.w	sl, #0
 801108c:	f000 8190 	beq.w	80113b0 <dir_register+0x8e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011090:	45f2      	cmp	sl, lr
 8011092:	f43f af53 	beq.w	8010f3c <dir_register+0x46c>
 8011096:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801109a:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 801109e:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 80110a2:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110a6:	f1ba 0f00 	cmp.w	sl, #0
 80110aa:	f000 817e 	beq.w	80113aa <dir_register+0x8da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110ae:	45f2      	cmp	sl, lr
 80110b0:	f43f af47 	beq.w	8010f42 <dir_register+0x472>
 80110b4:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80110b8:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80110bc:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 80110c0:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110c4:	f1ba 0f00 	cmp.w	sl, #0
 80110c8:	f000 816c 	beq.w	80113a4 <dir_register+0x8d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110cc:	45f2      	cmp	sl, lr
 80110ce:	f43f af3b 	beq.w	8010f48 <dir_register+0x478>
 80110d2:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80110d6:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80110da:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 80110de:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80110e2:	f1ba 0f00 	cmp.w	sl, #0
 80110e6:	f000 815a 	beq.w	801139e <dir_register+0x8ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80110ea:	45f2      	cmp	sl, lr
 80110ec:	f43f af2f 	beq.w	8010f4e <dir_register+0x47e>
 80110f0:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80110f4:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 80110f8:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 80110fc:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011100:	f1be 0f00 	cmp.w	lr, #0
 8011104:	f43f af26 	beq.w	8010f54 <dir_register+0x484>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011108:	f64f 7aff 	movw	sl, #65535	; 0xffff
 801110c:	45d6      	cmp	lr, sl
 801110e:	f43f af21 	beq.w	8010f54 <dir_register+0x484>
 8011112:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8011116:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 801111a:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 801111e:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011122:	f1be 0f00 	cmp.w	lr, #0
 8011126:	f000 8137 	beq.w	8011398 <dir_register+0x8c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801112a:	45d6      	cmp	lr, sl
 801112c:	f43f af15 	beq.w	8010f5a <dir_register+0x48a>
 8011130:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011132:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8011136:	779a      	strb	r2, [r3, #30]
 8011138:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 801113a:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801113c:	fa1f f28e 	uxth.w	r2, lr
 8011140:	42ba      	cmp	r2, r7
 8011142:	f63f af0d 	bhi.w	8010f60 <dir_register+0x490>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011146:	4461      	add	r1, ip
 8011148:	8b4a      	ldrh	r2, [r1, #26]
 801114a:	2a00      	cmp	r2, #0
 801114c:	f47f af0a 	bne.w	8010f64 <dir_register+0x494>
 8011150:	e706      	b.n	8010f60 <dir_register+0x490>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011152:	2101      	movs	r1, #1
 8011154:	4620      	mov	r0, r4
 8011156:	f7ff fb55 	bl	8010804 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801115a:	2800      	cmp	r0, #0
 801115c:	f47f ae5b 	bne.w	8010e16 <dir_register+0x346>
		res = move_window(fs, dp->sect);
 8011160:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011162:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8011166:	4299      	cmp	r1, r3
 8011168:	d005      	beq.n	8011176 <dir_register+0x6a6>
 801116a:	4648      	mov	r0, r9
 801116c:	f7fe f86e 	bl	800f24c <move_window.part.0>
		if (res == FR_OK) {
 8011170:	2800      	cmp	r0, #0
 8011172:	f47f ae50 	bne.w	8010e16 <dir_register+0x346>
		*d++ = (BYTE)val;
 8011176:	2220      	movs	r2, #32
 8011178:	2100      	movs	r1, #0
 801117a:	6a20      	ldr	r0, [r4, #32]
 801117c:	f008 f92c 	bl	80193d8 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011180:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011182:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8011186:	1a9a      	subs	r2, r3, r2
 8011188:	2a02      	cmp	r2, #2
 801118a:	f240 811a 	bls.w	80113c2 <dir_register+0x8f2>
			*d++ = *s++;
 801118e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011190:	601a      	str	r2, [r3, #0]
 8011192:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011194:	605a      	str	r2, [r3, #4]
 8011196:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 801119a:	2000      	movs	r0, #0
			*d++ = *s++;
 801119c:	721a      	strb	r2, [r3, #8]
 801119e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80111a2:	725a      	strb	r2, [r3, #9]
 80111a4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80111a8:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80111aa:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80111ac:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80111b0:	6a21      	ldr	r1, [r4, #32]
 80111b2:	f003 0318 	and.w	r3, r3, #24
 80111b6:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 80111b8:	f889 2003 	strb.w	r2, [r9, #3]
}
 80111bc:	b013      	add	sp, #76	; 0x4c
 80111be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c2:	46be      	mov	lr, r7
 80111c4:	e595      	b.n	8010cf2 <dir_register+0x222>
 80111c6:	bf00      	nop
 80111c8:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80111cc:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 80111d0:	f10c 0c01 	add.w	ip, ip, #1
 80111d4:	eb0d 0103 	add.w	r1, sp, r3
 80111d8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80111dc:	54b1      	strb	r1, [r6, r2]
 80111de:	3201      	adds	r2, #1
	} while (j < 8);
 80111e0:	2a07      	cmp	r2, #7
 80111e2:	f63f ae0f 	bhi.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80111e6:	f1bc 0f08 	cmp.w	ip, #8
 80111ea:	d067      	beq.n	80112bc <dir_register+0x7ec>
 80111ec:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 80111f0:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80111f2:	f102 0001 	add.w	r0, r2, #1
 80111f6:	eb0d 0103 	add.w	r1, sp, r3
 80111fa:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80111fe:	54b1      	strb	r1, [r6, r2]
 8011200:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8011204:	f43f adfe 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011208:	2908      	cmp	r1, #8
 801120a:	d05f      	beq.n	80112cc <dir_register+0x7fc>
 801120c:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8011210:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011212:	eb0d 0103 	add.w	r1, sp, r3
 8011216:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801121a:	5431      	strb	r1, [r6, r0]
 801121c:	f10c 0102 	add.w	r1, ip, #2
 8011220:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8011224:	f43f adee 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011228:	2908      	cmp	r1, #8
 801122a:	d057      	beq.n	80112dc <dir_register+0x80c>
 801122c:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8011230:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011232:	eb0d 0103 	add.w	r1, sp, r3
 8011236:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801123a:	5431      	strb	r1, [r6, r0]
 801123c:	f10c 0103 	add.w	r1, ip, #3
 8011240:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8011244:	f43f adde 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011248:	2908      	cmp	r1, #8
 801124a:	d04f      	beq.n	80112ec <dir_register+0x81c>
 801124c:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8011250:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011252:	eb0d 0103 	add.w	r1, sp, r3
 8011256:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801125a:	5431      	strb	r1, [r6, r0]
 801125c:	f10c 0104 	add.w	r1, ip, #4
 8011260:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8011264:	f43f adce 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011268:	2908      	cmp	r1, #8
 801126a:	d047      	beq.n	80112fc <dir_register+0x82c>
 801126c:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8011270:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011272:	eb0d 0103 	add.w	r1, sp, r3
 8011276:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801127a:	5431      	strb	r1, [r6, r0]
 801127c:	f10c 0105 	add.w	r1, ip, #5
 8011280:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8011284:	f43f adbe 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011288:	2908      	cmp	r1, #8
 801128a:	d03f      	beq.n	801130c <dir_register+0x83c>
 801128c:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8011290:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011292:	eb0d 0103 	add.w	r1, sp, r3
 8011296:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801129a:	5431      	strb	r1, [r6, r0]
 801129c:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 80112a0:	f43f adb0 	beq.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112a4:	f1bc 0f01 	cmp.w	ip, #1
 80112a8:	d138      	bne.n	801131c <dir_register+0x84c>
 80112aa:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 80112ae:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112b0:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 80112b2:	f47f ada7 	bne.w	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112b6:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 80112ba:	e5a3      	b.n	8010e04 <dir_register+0x334>
 80112bc:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112be:	f102 0001 	add.w	r0, r2, #1
 80112c2:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 80112c6:	f47f ad93 	bne.w	8010df0 <dir_register+0x320>
 80112ca:	e59b      	b.n	8010e04 <dir_register+0x334>
 80112cc:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112ce:	f806 8000 	strb.w	r8, [r6, r0]
 80112d2:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 80112d6:	f47f ad8b 	bne.w	8010df0 <dir_register+0x320>
 80112da:	e593      	b.n	8010e04 <dir_register+0x334>
 80112dc:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112de:	f806 8000 	strb.w	r8, [r6, r0]
 80112e2:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 80112e6:	f47f ad83 	bne.w	8010df0 <dir_register+0x320>
 80112ea:	e58b      	b.n	8010e04 <dir_register+0x334>
 80112ec:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112ee:	f806 8000 	strb.w	r8, [r6, r0]
 80112f2:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 80112f6:	f47f ad7b 	bne.w	8010df0 <dir_register+0x320>
 80112fa:	e583      	b.n	8010e04 <dir_register+0x334>
 80112fc:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80112fe:	f806 8000 	strb.w	r8, [r6, r0]
 8011302:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8011306:	f47f ad73 	bne.w	8010df0 <dir_register+0x320>
 801130a:	e57b      	b.n	8010e04 <dir_register+0x334>
 801130c:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801130e:	f806 8000 	strb.w	r8, [r6, r0]
 8011312:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8011316:	f47f ad6b 	bne.w	8010df0 <dir_register+0x320>
 801131a:	e573      	b.n	8010e04 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801131c:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 8011320:	2a00      	cmp	r2, #0
 8011322:	f47f ad6f 	bne.w	8010e04 <dir_register+0x334>
 8011326:	2007      	movs	r0, #7
 8011328:	e562      	b.n	8010df0 <dir_register+0x320>
	ns[i] = '~';
 801132a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801132c:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8011330:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011334:	e548      	b.n	8010dc8 <dir_register+0x2f8>
	ns[i] = '~';
 8011336:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011338:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 801133c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011340:	e542      	b.n	8010dc8 <dir_register+0x2f8>
	ns[i] = '~';
 8011342:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011344:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8011348:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801134c:	e53c      	b.n	8010dc8 <dir_register+0x2f8>
	ns[i] = '~';
 801134e:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011350:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8011354:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011358:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801135c:	4662      	mov	r2, ip
 801135e:	e745      	b.n	80111ec <dir_register+0x71c>
	ns[i] = '~';
 8011360:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8011362:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8011366:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801136a:	e52d      	b.n	8010dc8 <dir_register+0x2f8>
	ns[i] = '~';
 801136c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801136e:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8011372:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011376:	e527      	b.n	8010dc8 <dir_register+0x2f8>
	ns[i] = '~';
 8011378:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801137a:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 801137e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011382:	e521      	b.n	8010dc8 <dir_register+0x2f8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011384:	2006      	movs	r0, #6
}
 8011386:	b013      	add	sp, #76	; 0x4c
 8011388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801138c:	4693      	mov	fp, r2
 801138e:	f7ff bbb8 	b.w	8010b02 <dir_register+0x32>
	*ptr++ = (BYTE)val; val >>= 8;
 8011392:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011396:	e5c7      	b.n	8010f28 <dir_register+0x458>
	*ptr++ = (BYTE)val; val >>= 8;
 8011398:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801139c:	e5e0      	b.n	8010f60 <dir_register+0x490>
	*ptr++ = (BYTE)val; val >>= 8;
 801139e:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113a2:	e5d7      	b.n	8010f54 <dir_register+0x484>
	*ptr++ = (BYTE)val; val >>= 8;
 80113a4:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113a8:	e5d1      	b.n	8010f4e <dir_register+0x47e>
	*ptr++ = (BYTE)val; val >>= 8;
 80113aa:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113ae:	e5cb      	b.n	8010f48 <dir_register+0x478>
	*ptr++ = (BYTE)val; val >>= 8;
 80113b0:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113b4:	e5c5      	b.n	8010f42 <dir_register+0x472>
	*ptr++ = (BYTE)val; val >>= 8;
 80113b6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113ba:	e5bc      	b.n	8010f36 <dir_register+0x466>
	*ptr++ = (BYTE)val; val >>= 8;
 80113bc:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80113c0:	e5b6      	b.n	8010f30 <dir_register+0x460>
			*d++ = *s++;
 80113c2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80113c6:	701a      	strb	r2, [r3, #0]
 80113c8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80113cc:	705a      	strb	r2, [r3, #1]
 80113ce:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80113d2:	709a      	strb	r2, [r3, #2]
 80113d4:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80113d8:	70da      	strb	r2, [r3, #3]
 80113da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80113de:	711a      	strb	r2, [r3, #4]
 80113e0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80113e4:	715a      	strb	r2, [r3, #5]
 80113e6:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80113ea:	719a      	strb	r2, [r3, #6]
 80113ec:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80113f0:	71da      	strb	r2, [r3, #7]
 80113f2:	e6d0      	b.n	8011196 <dir_register+0x6c6>

080113f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80113f4:	b510      	push	{r4, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 80113fc:	b1a1      	cbz	r1, 8011428 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80113fe:	f891 c000 	ldrb.w	ip, [r1]
 8011402:	f1bc 0f1f 	cmp.w	ip, #31
 8011406:	d912      	bls.n	801142e <f_mount+0x3a>
 8011408:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 801140c:	d00f      	beq.n	801142e <f_mount+0x3a>
 801140e:	4608      	mov	r0, r1
 8011410:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011414:	2b1f      	cmp	r3, #31
 8011416:	d90c      	bls.n	8011432 <f_mount+0x3e>
 8011418:	2b3a      	cmp	r3, #58	; 0x3a
 801141a:	d1f9      	bne.n	8011410 <f_mount+0x1c>
			i = *tp++ - '0';
 801141c:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801141e:	4288      	cmp	r0, r1
 8011420:	d102      	bne.n	8011428 <f_mount+0x34>
 8011422:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011426:	d006      	beq.n	8011436 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011428:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 801142a:	b002      	add	sp, #8
 801142c:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801142e:	4663      	mov	r3, ip
 8011430:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011432:	2b3a      	cmp	r3, #58	; 0x3a
 8011434:	d0f2      	beq.n	801141c <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011436:	4916      	ldr	r1, [pc, #88]	; (8011490 <f_mount+0x9c>)
 8011438:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 801143a:	b143      	cbz	r3, 801144e <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801143c:	4815      	ldr	r0, [pc, #84]	; (8011494 <f_mount+0xa0>)
 801143e:	6804      	ldr	r4, [r0, #0]
 8011440:	42a3      	cmp	r3, r4
 8011442:	d01c      	beq.n	801147e <f_mount+0x8a>
 8011444:	6904      	ldr	r4, [r0, #16]
 8011446:	429c      	cmp	r4, r3
 8011448:	d016      	beq.n	8011478 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
 801144a:	2000      	movs	r0, #0
 801144c:	7018      	strb	r0, [r3, #0]
	if (fs) {
 801144e:	9b01      	ldr	r3, [sp, #4]
 8011450:	b173      	cbz	r3, 8011470 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
 8011452:	2000      	movs	r0, #0
 8011454:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8011456:	9b01      	ldr	r3, [sp, #4]
 8011458:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801145a:	b1b3      	cbz	r3, 801148a <f_mount+0x96>
 801145c:	3a01      	subs	r2, #1
 801145e:	bf18      	it	ne
 8011460:	2201      	movne	r2, #1
 8011462:	b992      	cbnz	r2, 801148a <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011464:	a901      	add	r1, sp, #4
 8011466:	4668      	mov	r0, sp
 8011468:	f7fd ff2a 	bl	800f2c0 <find_volume>
}
 801146c:	b002      	add	sp, #8
 801146e:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011470:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8011472:	600b      	str	r3, [r1, #0]
}
 8011474:	b002      	add	sp, #8
 8011476:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011478:	2400      	movs	r4, #0
 801147a:	6104      	str	r4, [r0, #16]
 801147c:	e7e5      	b.n	801144a <f_mount+0x56>
 801147e:	2400      	movs	r4, #0
 8011480:	6004      	str	r4, [r0, #0]
 8011482:	6904      	ldr	r4, [r0, #16]
 8011484:	429c      	cmp	r4, r3
 8011486:	d1e0      	bne.n	801144a <f_mount+0x56>
 8011488:	e7f6      	b.n	8011478 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801148a:	2000      	movs	r0, #0
}
 801148c:	b002      	add	sp, #8
 801148e:	bd10      	pop	{r4, pc}
 8011490:	20019a50 	.word	0x20019a50
 8011494:	20019a54 	.word	0x20019a54

08011498 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801149c:	b092      	sub	sp, #72	; 0x48
 801149e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80114a0:	2800      	cmp	r0, #0
 80114a2:	f000 80a1 	beq.w	80115e8 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80114a6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80114aa:	4616      	mov	r6, r2
 80114ac:	4604      	mov	r4, r0
 80114ae:	a903      	add	r1, sp, #12
 80114b0:	a801      	add	r0, sp, #4
 80114b2:	463a      	mov	r2, r7
 80114b4:	f7fd ff04 	bl	800f2c0 <find_volume>
	if (res == FR_OK) {
 80114b8:	4605      	mov	r5, r0
 80114ba:	b128      	cbz	r0, 80114c8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80114bc:	2300      	movs	r3, #0
 80114be:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80114c0:	4628      	mov	r0, r5
 80114c2:	b012      	add	sp, #72	; 0x48
 80114c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 80114c8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80114ca:	a804      	add	r0, sp, #16
 80114cc:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 80114ce:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80114d0:	f7fe ff6e 	bl	80103b0 <follow_path>
		if (res == FR_OK) {
 80114d4:	bb00      	cbnz	r0, 8011518 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80114d6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f2c0 808b 	blt.w	80115f6 <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
 80114e0:	4ba7      	ldr	r3, [pc, #668]	; (8011780 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114e2:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114e6:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 80114e8:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114ec:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 80114ee:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 80114f2:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 80114f6:	f1b8 0f00 	cmp.w	r8, #0
 80114fa:	f000 80fe 	beq.w	80116fa <f_open+0x262>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80114fe:	4580      	cmp	r8, r0
 8011500:	d07b      	beq.n	80115fa <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 8011502:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011506:	f1b8 0f00 	cmp.w	r8, #0
 801150a:	f000 808e 	beq.w	801162a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801150e:	4580      	cmp	r8, r0
 8011510:	f000 8103 	beq.w	801171a <f_open+0x282>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011514:	2512      	movs	r5, #18
 8011516:	e7d1      	b.n	80114bc <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011518:	f016 0f1c 	tst.w	r6, #28
 801151c:	d069      	beq.n	80115f2 <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801151e:	2804      	cmp	r0, #4
 8011520:	d167      	bne.n	80115f2 <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011522:	4b97      	ldr	r3, [pc, #604]	; (8011780 <f_open+0x2e8>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	b112      	cbz	r2, 801152e <f_open+0x96>
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1f2      	bne.n	8011514 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801152e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011530:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011534:	f7ff facc 	bl	8010ad0 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011538:	2800      	cmp	r0, #0
 801153a:	d15a      	bne.n	80115f2 <f_open+0x15a>
				dw = GET_FATTIME();
 801153c:	f7fd fbd2 	bl	800ece4 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8011542:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011546:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801154a:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801154e:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 8011552:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8011554:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8011556:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 801155a:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 801155c:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801155e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011560:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011562:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8011564:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8011568:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 801156a:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801156c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801156e:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8011572:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011574:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8011576:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8011578:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801157a:	d102      	bne.n	8011582 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801157c:	8a9a      	ldrh	r2, [r3, #20]
 801157e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011582:	2200      	movs	r2, #0
 8011584:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8011586:	7808      	ldrb	r0, [r1, #0]
 8011588:	2803      	cmp	r0, #3
 801158a:	d100      	bne.n	801158e <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 801158c:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 801158e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8011590:	2200      	movs	r2, #0
 8011592:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 8011594:	2301      	movs	r3, #1
 8011596:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
 8011598:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
 801159a:	b19e      	cbz	r6, 80115c4 <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
 801159c:	4631      	mov	r1, r6
 801159e:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 80115a0:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80115a4:	f7ff f890 	bl	80106c8 <remove_chain>
						if (res == FR_OK) {
 80115a8:	bb18      	cbnz	r0, 80115f2 <f_open+0x15a>
							res = move_window(fs, dw);
 80115aa:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80115ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115ae:	4590      	cmp	r8, r2
 80115b0:	f000 80e3 	beq.w	801177a <f_open+0x2e2>
 80115b4:	4618      	mov	r0, r3
 80115b6:	4641      	mov	r1, r8
 80115b8:	f7fd fe48 	bl	800f24c <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80115bc:	3e01      	subs	r6, #1
 80115be:	9b03      	ldr	r3, [sp, #12]
 80115c0:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80115c2:	b9b0      	cbnz	r0, 80115f2 <f_open+0x15a>
				mode |= FA_MODIFIED;
 80115c4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115c8:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80115cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115ce:	3900      	subs	r1, #0
 80115d0:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80115d2:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115d4:	bf18      	it	ne
 80115d6:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 80115d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115da:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115dc:	f7fd fcb0 	bl	800ef40 <inc_lock>
 80115e0:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80115e2:	bb70      	cbnz	r0, 8011642 <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80115e4:	2502      	movs	r5, #2
 80115e6:	e769      	b.n	80114bc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80115e8:	2509      	movs	r5, #9
}
 80115ea:	4628      	mov	r0, r5
 80115ec:	b012      	add	sp, #72	; 0x48
 80115ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f2:	4605      	mov	r5, r0
 80115f4:	e762      	b.n	80114bc <f_open+0x24>
				res = FR_INVALID_NAME;
 80115f6:	2506      	movs	r5, #6
 80115f8:	e760      	b.n	80114bc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80115fa:	6858      	ldr	r0, [r3, #4]
 80115fc:	4560      	cmp	r0, ip
 80115fe:	f000 8095 	beq.w	801172c <f_open+0x294>
		if (Files[i].fs) {	/* Existing entry */
 8011602:	6918      	ldr	r0, [r3, #16]
 8011604:	b188      	cbz	r0, 801162a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011606:	4540      	cmp	r0, r8
 8011608:	d184      	bne.n	8011514 <f_open+0x7c>
 801160a:	6958      	ldr	r0, [r3, #20]
 801160c:	4560      	cmp	r0, ip
 801160e:	d181      	bne.n	8011514 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8011610:	6998      	ldr	r0, [r3, #24]
 8011612:	4570      	cmp	r0, lr
 8011614:	f47f af7e 	bne.w	8011514 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011618:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801161a:	2a00      	cmp	r2, #0
 801161c:	d164      	bne.n	80116e8 <f_open+0x250>
 801161e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8011622:	899b      	ldrh	r3, [r3, #12]
 8011624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011628:	d05e      	beq.n	80116e8 <f_open+0x250>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801162a:	f016 0f1c 	tst.w	r6, #28
 801162e:	d04b      	beq.n	80116c8 <f_open+0x230>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011630:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8011634:	f013 0f11 	tst.w	r3, #17
 8011638:	d15d      	bne.n	80116f6 <f_open+0x25e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801163a:	0773      	lsls	r3, r6, #29
 801163c:	d556      	bpl.n	80116ec <f_open+0x254>
 801163e:	2508      	movs	r5, #8
 8011640:	e73c      	b.n	80114bc <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011642:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8011648:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 801164c:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801164e:	2a03      	cmp	r2, #3
 8011650:	d102      	bne.n	8011658 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011652:	8a9a      	ldrh	r2, [r3, #20]
 8011654:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011658:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801165a:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 801165c:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011660:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011664:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 8011666:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 801166a:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
 801166e:	4650      	mov	r0, sl
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011670:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 8011674:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
 8011678:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801167a:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801167c:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
 801167e:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8011680:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 8011682:	f007 fea9 	bl	80193d8 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011686:	06b9      	lsls	r1, r7, #26
 8011688:	f57f af1a 	bpl.w	80114c0 <f_open+0x28>
 801168c:	f1b8 0f00 	cmp.w	r8, #0
 8011690:	f43f af16 	beq.w	80114c0 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011694:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011698:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801169c:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80116a0:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116a4:	d804      	bhi.n	80116b0 <f_open+0x218>
 80116a6:	e047      	b.n	8011738 <f_open+0x2a0>
 80116a8:	1c42      	adds	r2, r0, #1
 80116aa:	d06b      	beq.n	8011784 <f_open+0x2ec>
 80116ac:	4547      	cmp	r7, r8
 80116ae:	d269      	bcs.n	8011784 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80116b0:	4631      	mov	r1, r6
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	f7fe f816 	bl	800f6e4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80116b8:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80116ba:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 80116be:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80116c0:	d8f2      	bhi.n	80116a8 <f_open+0x210>
 80116c2:	2502      	movs	r5, #2
				fp->clust = clst;
 80116c4:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116c6:	e6f9      	b.n	80114bc <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116c8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80116cc:	06d9      	lsls	r1, r3, #27
 80116ce:	d422      	bmi.n	8011716 <f_open+0x27e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116d0:	07b1      	lsls	r1, r6, #30
 80116d2:	d501      	bpl.n	80116d8 <f_open+0x240>
 80116d4:	07d8      	lsls	r0, r3, #31
 80116d6:	d40e      	bmi.n	80116f6 <f_open+0x25e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116d8:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116dc:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116de:	2e00      	cmp	r6, #0
 80116e0:	f47f af70 	bne.w	80115c4 <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80116e4:	4611      	mov	r1, r2
 80116e6:	e771      	b.n	80115cc <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80116e8:	2510      	movs	r5, #16
 80116ea:	e6e7      	b.n	80114bc <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80116ec:	0730      	lsls	r0, r6, #28
 80116ee:	f53f af25 	bmi.w	801153c <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80116f2:	9b03      	ldr	r3, [sp, #12]
 80116f4:	e76a      	b.n	80115cc <f_open+0x134>
						res = FR_DENIED;
 80116f6:	2507      	movs	r5, #7
 80116f8:	e6e0      	b.n	80114bc <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 80116fa:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80116fe:	f1b8 0f00 	cmp.w	r8, #0
 8011702:	d092      	beq.n	801162a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011704:	4540      	cmp	r0, r8
 8011706:	d190      	bne.n	801162a <f_open+0x192>
 8011708:	6958      	ldr	r0, [r3, #20]
 801170a:	4560      	cmp	r0, ip
 801170c:	d18d      	bne.n	801162a <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
 801170e:	6998      	ldr	r0, [r3, #24]
 8011710:	4586      	cmp	lr, r0
 8011712:	d18a      	bne.n	801162a <f_open+0x192>
 8011714:	e780      	b.n	8011618 <f_open+0x180>
					res = FR_NO_FILE;
 8011716:	2504      	movs	r5, #4
 8011718:	e6d0      	b.n	80114bc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801171a:	6958      	ldr	r0, [r3, #20]
 801171c:	4560      	cmp	r0, ip
 801171e:	f47f aef9 	bne.w	8011514 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8011722:	6998      	ldr	r0, [r3, #24]
 8011724:	4586      	cmp	lr, r0
 8011726:	f47f aef5 	bne.w	8011514 <f_open+0x7c>
 801172a:	e775      	b.n	8011618 <f_open+0x180>
 801172c:	6898      	ldr	r0, [r3, #8]
 801172e:	4570      	cmp	r0, lr
 8011730:	f47f af67 	bne.w	8011602 <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011734:	4628      	mov	r0, r5
 8011736:	e770      	b.n	801161a <f_open+0x182>
				fp->clust = clst;
 8011738:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801173a:	f3c8 0308 	ubfx	r3, r8, #0, #9
 801173e:	2b00      	cmp	r3, #0
 8011740:	f43f aebe 	beq.w	80114c0 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011744:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 8011746:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011748:	6983      	ldr	r3, [r0, #24]
 801174a:	3b02      	subs	r3, #2
 801174c:	429e      	cmp	r6, r3
 801174e:	f4bf af49 	bcs.w	80115e4 <f_open+0x14c>
	return clst * fs->csize + fs->database;
 8011752:	8942      	ldrh	r2, [r0, #10]
 8011754:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011756:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 801175a:	2a00      	cmp	r2, #0
 801175c:	f43f af42 	beq.w	80115e4 <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011760:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011764:	4651      	mov	r1, sl
 8011766:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011768:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801176a:	7840      	ldrb	r0, [r0, #1]
 801176c:	f7fd fbc0 	bl	800eef0 <disk_read>
 8011770:	2800      	cmp	r0, #0
 8011772:	f43f aea5 	beq.w	80114c0 <f_open+0x28>
 8011776:	2501      	movs	r5, #1
 8011778:	e6a0      	b.n	80114bc <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801177a:	3e01      	subs	r6, #1
 801177c:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 801177e:	e721      	b.n	80115c4 <f_open+0x12c>
 8011780:	20019a54 	.word	0x20019a54
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011784:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 8011786:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011788:	bf0c      	ite	eq
 801178a:	2301      	moveq	r3, #1
 801178c:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801178e:	d1d4      	bne.n	801173a <f_open+0x2a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011790:	461d      	mov	r5, r3
 8011792:	e693      	b.n	80114bc <f_open+0x24>

08011794 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011798:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801179a:	2300      	movs	r3, #0
{
 801179c:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 801179e:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80117a0:	b150      	cbz	r0, 80117b8 <f_read+0x24>
 80117a2:	6803      	ldr	r3, [r0, #0]
 80117a4:	4604      	mov	r4, r0
 80117a6:	b13b      	cbz	r3, 80117b8 <f_read+0x24>
 80117a8:	4617      	mov	r7, r2
 80117aa:	781a      	ldrb	r2, [r3, #0]
 80117ac:	b122      	cbz	r2, 80117b8 <f_read+0x24>
 80117ae:	460d      	mov	r5, r1
 80117b0:	88da      	ldrh	r2, [r3, #6]
 80117b2:	8881      	ldrh	r1, [r0, #4]
 80117b4:	4291      	cmp	r1, r2
 80117b6:	d005      	beq.n	80117c4 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80117b8:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80117bc:	4640      	mov	r0, r8
 80117be:	b005      	add	sp, #20
 80117c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117c4:	7858      	ldrb	r0, [r3, #1]
 80117c6:	f7fd fb77 	bl	800eeb8 <disk_status>
 80117ca:	07c2      	lsls	r2, r0, #31
 80117cc:	d4f4      	bmi.n	80117b8 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80117ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117d2:	f1b8 0f00 	cmp.w	r8, #0
 80117d6:	d1f1      	bne.n	80117bc <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80117d8:	7d23      	ldrb	r3, [r4, #20]
 80117da:	f013 0301 	ands.w	r3, r3, #1
 80117de:	9300      	str	r3, [sp, #0]
 80117e0:	f000 80d8 	beq.w	8011994 <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 80117e4:	69a1      	ldr	r1, [r4, #24]
 80117e6:	68e3      	ldr	r3, [r4, #12]
 80117e8:	1a5b      	subs	r3, r3, r1
 80117ea:	429f      	cmp	r7, r3
 80117ec:	bf28      	it	cs
 80117ee:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 80117f0:	2f00      	cmp	r7, #0
 80117f2:	d0e3      	beq.n	80117bc <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117f4:	f104 0331 	add.w	r3, r4, #49	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117f8:	46a2      	mov	sl, r4
 80117fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80117fe:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011800:	f3c1 0308 	ubfx	r3, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011804:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011808:	2b00      	cmp	r3, #0
 801180a:	d142      	bne.n	8011892 <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801180c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8011810:	0a4b      	lsrs	r3, r1, #9
 8011812:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8011814:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8011818:	d06d      	beq.n	80118f6 <f_read+0x162>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801181a:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801181c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8011820:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011822:	3b02      	subs	r3, #2
 8011824:	4298      	cmp	r0, r3
 8011826:	d273      	bcs.n	8011910 <f_read+0x17c>
	return clst * fs->csize + fs->database;
 8011828:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801182c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8011830:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011834:	2800      	cmp	r0, #0
 8011836:	d06b      	beq.n	8011910 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011838:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 801183c:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011840:	d36d      	bcc.n	801191e <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011842:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011846:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801184a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801184c:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8011850:	bf88      	it	hi
 8011852:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011856:	465a      	mov	r2, fp
 8011858:	4629      	mov	r1, r5
 801185a:	4643      	mov	r3, r8
 801185c:	f7fd fb48 	bl	800eef0 <disk_read>
 8011860:	2800      	cmp	r0, #0
 8011862:	f040 8085 	bne.w	8011970 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011866:	f994 2014 	ldrsb.w	r2, [r4, #20]
 801186a:	2a00      	cmp	r2, #0
 801186c:	f2c0 80a9 	blt.w	80119c2 <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011870:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011874:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8011876:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011878:	440d      	add	r5, r1
 801187a:	440b      	add	r3, r1
 801187c:	61a3      	str	r3, [r4, #24]
 801187e:	6833      	ldr	r3, [r6, #0]
 8011880:	440b      	add	r3, r1
 8011882:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8011884:	f000 80b3 	beq.w	80119ee <f_read+0x25a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011888:	69a1      	ldr	r1, [r4, #24]
 801188a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 801188e:	2b00      	cmp	r3, #0
 8011890:	d0bc      	beq.n	801180c <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011892:	1c58      	adds	r0, r3, #1
 8011894:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011898:	4453      	add	r3, sl
 801189a:	4450      	add	r0, sl
 801189c:	42b9      	cmp	r1, r7
 801189e:	eba5 0000 	sub.w	r0, r5, r0
 80118a2:	bf28      	it	cs
 80118a4:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80118a6:	2802      	cmp	r0, #2
 80118a8:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80118ac:	d968      	bls.n	8011980 <f_read+0x1ec>
 80118ae:	f1bb 0f07 	cmp.w	fp, #7
 80118b2:	d965      	bls.n	8011980 <f_read+0x1ec>
 80118b4:	f021 0e03 	bic.w	lr, r1, #3
 80118b8:	461a      	mov	r2, r3
 80118ba:	4628      	mov	r0, r5
 80118bc:	449e      	add	lr, r3
			*d++ = *s++;
 80118be:	f852 cb04 	ldr.w	ip, [r2], #4
 80118c2:	4596      	cmp	lr, r2
 80118c4:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 80118c8:	d1f9      	bne.n	80118be <f_read+0x12a>
 80118ca:	f021 0203 	bic.w	r2, r1, #3
 80118ce:	4291      	cmp	r1, r2
 80118d0:	eb05 0002 	add.w	r0, r5, r2
 80118d4:	eb03 0c02 	add.w	ip, r3, r2
 80118d8:	d0cc      	beq.n	8011874 <f_read+0xe0>
			*d++ = *s++;
 80118da:	5c9b      	ldrb	r3, [r3, r2]
 80118dc:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 80118de:	ebbb 0202 	subs.w	r2, fp, r2
 80118e2:	d0c7      	beq.n	8011874 <f_read+0xe0>
			*d++ = *s++;
 80118e4:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 80118e8:	2a01      	cmp	r2, #1
			*d++ = *s++;
 80118ea:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 80118ec:	d0c2      	beq.n	8011874 <f_read+0xe0>
			*d++ = *s++;
 80118ee:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80118f2:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 80118f4:	e7be      	b.n	8011874 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80118f6:	bb39      	cbnz	r1, 8011948 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80118f8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80118fa:	2801      	cmp	r0, #1
 80118fc:	d908      	bls.n	8011910 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	d036      	beq.n	8011970 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
 8011902:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8011904:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011906:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801190a:	3b02      	subs	r3, #2
 801190c:	4298      	cmp	r0, r3
 801190e:	d38b      	bcc.n	8011828 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011910:	2302      	movs	r3, #2
 8011912:	4698      	mov	r8, r3
 8011914:	7563      	strb	r3, [r4, #21]
}
 8011916:	4640      	mov	r0, r8
 8011918:	b005      	add	sp, #20
 801191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801191e:	6a22      	ldr	r2, [r4, #32]
 8011920:	455a      	cmp	r2, fp
 8011922:	d00b      	beq.n	801193c <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011924:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011928:	2b00      	cmp	r3, #0
 801192a:	db3d      	blt.n	80119a8 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801192c:	2301      	movs	r3, #1
 801192e:	465a      	mov	r2, fp
 8011930:	4651      	mov	r1, sl
 8011932:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011936:	f7fd fadb 	bl	800eef0 <disk_read>
 801193a:	b9c8      	cbnz	r0, 8011970 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801193c:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 801193e:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011946:	e7a4      	b.n	8011892 <f_read+0xfe>
					if (fp->cltbl) {
 8011948:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801194a:	b330      	cbz	r0, 801199a <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801194c:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801194e:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011950:	8949      	ldrh	r1, [r1, #10]
 8011952:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011956:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011958:	b929      	cbnz	r1, 8011966 <f_read+0x1d2>
 801195a:	e7d9      	b.n	8011910 <f_read+0x17c>
		cl -= ncl; tbl++;		/* Next fragment */
 801195c:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801195e:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011962:	2900      	cmp	r1, #0
 8011964:	d0d4      	beq.n	8011910 <f_read+0x17c>
		if (cl < ncl) break;	/* In this fragment? */
 8011966:	4299      	cmp	r1, r3
 8011968:	d9f8      	bls.n	801195c <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 801196a:	6840      	ldr	r0, [r0, #4]
 801196c:	4418      	add	r0, r3
 801196e:	e7c4      	b.n	80118fa <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011970:	f8dd 8000 	ldr.w	r8, [sp]
 8011974:	2301      	movs	r3, #1
}
 8011976:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011978:	7563      	strb	r3, [r4, #21]
}
 801197a:	b005      	add	sp, #20
 801197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011980:	1e6a      	subs	r2, r5, #1
 8011982:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 8011986:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 801198a:	4563      	cmp	r3, ip
			*d++ = *s++;
 801198c:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8011990:	d1f9      	bne.n	8011986 <f_read+0x1f2>
 8011992:	e76f      	b.n	8011874 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011994:	f04f 0807 	mov.w	r8, #7
 8011998:	e710      	b.n	80117bc <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801199a:	69e1      	ldr	r1, [r4, #28]
 801199c:	6820      	ldr	r0, [r4, #0]
 801199e:	9203      	str	r2, [sp, #12]
 80119a0:	f7fd fea0 	bl	800f6e4 <get_fat.isra.0>
 80119a4:	9a03      	ldr	r2, [sp, #12]
 80119a6:	e7a8      	b.n	80118fa <f_read+0x166>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119a8:	2301      	movs	r3, #1
 80119aa:	4651      	mov	r1, sl
 80119ac:	f899 0001 	ldrb.w	r0, [r9, #1]
 80119b0:	f7fd faac 	bl	800ef0c <disk_write>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d1db      	bne.n	8011970 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 80119b8:	7d23      	ldrb	r3, [r4, #20]
 80119ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119be:	7523      	strb	r3, [r4, #20]
 80119c0:	e7b4      	b.n	801192c <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80119c2:	6a22      	ldr	r2, [r4, #32]
 80119c4:	eba2 0b0b 	sub.w	fp, r2, fp
 80119c8:	45c3      	cmp	fp, r8
 80119ca:	f4bf af51 	bcs.w	8011870 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80119ce:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 80119d2:	9b01      	ldr	r3, [sp, #4]
 80119d4:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80119d6:	1ad0      	subs	r0, r2, r3
 80119d8:	2802      	cmp	r0, #2
 80119da:	d90b      	bls.n	80119f4 <f_read+0x260>
 80119dc:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 80119e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80119e4:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 80119e8:	4562      	cmp	r2, ip
 80119ea:	d1f9      	bne.n	80119e0 <f_read+0x24c>
 80119ec:	e740      	b.n	8011870 <f_read+0xdc>
 80119ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80119f2:	e6e3      	b.n	80117bc <f_read+0x28>
 80119f4:	3a01      	subs	r2, #1
 80119f6:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 80119fa:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 80119fe:	458c      	cmp	ip, r1
			*d++ = *s++;
 8011a00:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 8011a04:	d1f9      	bne.n	80119fa <f_read+0x266>
 8011a06:	e733      	b.n	8011870 <f_read+0xdc>

08011a08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a0c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8011a0e:	2300      	movs	r3, #0
{
 8011a10:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8011a12:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011a14:	b150      	cbz	r0, 8011a2c <f_write+0x24>
 8011a16:	6803      	ldr	r3, [r0, #0]
 8011a18:	4604      	mov	r4, r0
 8011a1a:	b13b      	cbz	r3, 8011a2c <f_write+0x24>
 8011a1c:	4616      	mov	r6, r2
 8011a1e:	781a      	ldrb	r2, [r3, #0]
 8011a20:	b122      	cbz	r2, 8011a2c <f_write+0x24>
 8011a22:	460d      	mov	r5, r1
 8011a24:	88da      	ldrh	r2, [r3, #6]
 8011a26:	8881      	ldrh	r1, [r0, #4]
 8011a28:	4291      	cmp	r1, r2
 8011a2a:	d005      	beq.n	8011a38 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8011a2c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8011a30:	4640      	mov	r0, r8
 8011a32:	b005      	add	sp, #20
 8011a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011a38:	7858      	ldrb	r0, [r3, #1]
 8011a3a:	f7fd fa3d 	bl	800eeb8 <disk_status>
 8011a3e:	07c1      	lsls	r1, r0, #31
 8011a40:	d4f4      	bmi.n	8011a2c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a42:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a46:	f1b8 0f00 	cmp.w	r8, #0
 8011a4a:	d1f1      	bne.n	8011a30 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a4c:	7d23      	ldrb	r3, [r4, #20]
 8011a4e:	079a      	lsls	r2, r3, #30
 8011a50:	f140 80f4 	bpl.w	8011c3c <f_write+0x234>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011a54:	69a2      	ldr	r2, [r4, #24]
 8011a56:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a58:	bf28      	it	cs
 8011a5a:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8011a5c:	2e00      	cmp	r6, #0
 8011a5e:	f000 80cb 	beq.w	8011bf8 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a62:	f504 730c 	add.w	r3, r4, #560	; 0x230
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011a66:	46a2      	mov	sl, r4
 8011a68:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a6a:	f3c2 0308 	ubfx	r3, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011a6e:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d160      	bne.n	8011b38 <f_write+0x130>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a76:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8011a7a:	0a53      	lsrs	r3, r2, #9
 8011a7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8011a80:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 8011a84:	d110      	bne.n	8011aa8 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a86:	2a00      	cmp	r2, #0
 8011a88:	f040 809f 	bne.w	8011bca <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a8c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f000 80df 	beq.w	8011c52 <f_write+0x24a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a94:	2801      	cmp	r0, #1
 8011a96:	f000 8086 	beq.w	8011ba6 <f_write+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a9a:	1c43      	adds	r3, r0, #1
 8011a9c:	f000 80bd 	beq.w	8011c1a <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011aa0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8011aa2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011aa4:	b903      	cbnz	r3, 8011aa8 <f_write+0xa0>
 8011aa6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011aa8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	f2c0 80a7 	blt.w	8011c00 <f_write+0x1f8>
	clst -= 2;
 8011ab2:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011ab4:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8011ab8:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011aba:	3b02      	subs	r3, #2
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d272      	bcs.n	8011ba6 <f_write+0x19e>
	return clst * fs->csize + fs->database;
 8011ac0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8011ac4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8011ac8:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011acc:	2a00      	cmp	r2, #0
 8011ace:	d06a      	beq.n	8011ba6 <f_write+0x19e>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011ad0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8011ad4:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011ad6:	d36d      	bcc.n	8011bb4 <f_write+0x1ac>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011ad8:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011adc:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011ade:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ae0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8011ae4:	bf88      	it	hi
 8011ae6:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011aea:	4629      	mov	r1, r5
 8011aec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011af0:	f7fd fa0c 	bl	800ef0c <disk_write>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	f040 8090 	bne.w	8011c1a <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011afa:	6a21      	ldr	r1, [r4, #32]
 8011afc:	9a02      	ldr	r2, [sp, #8]
 8011afe:	9b03      	ldr	r3, [sp, #12]
 8011b00:	1a8a      	subs	r2, r1, r2
 8011b02:	429a      	cmp	r2, r3
 8011b04:	f0c0 80b9 	bcc.w	8011c7a <f_write+0x272>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011b08:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8011b0c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b10:	69a3      	ldr	r3, [r4, #24]
 8011b12:	4615      	mov	r5, r2
 8011b14:	68e2      	ldr	r2, [r4, #12]
 8011b16:	4463      	add	r3, ip
 8011b18:	4293      	cmp	r3, r2
 8011b1a:	61a3      	str	r3, [r4, #24]
 8011b1c:	bf38      	it	cc
 8011b1e:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 8011b20:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b24:	60e3      	str	r3, [r4, #12]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	4463      	add	r3, ip
 8011b2a:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8011b2c:	d063      	beq.n	8011bf6 <f_write+0x1ee>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011b2e:	69a2      	ldr	r2, [r4, #24]
 8011b30:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d09e      	beq.n	8011a76 <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b38:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b3c:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b3e:	4453      	add	r3, sl
 8011b40:	45b4      	cmp	ip, r6
 8011b42:	eba3 0202 	sub.w	r2, r3, r2
 8011b46:	bf28      	it	cs
 8011b48:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011b4a:	2a02      	cmp	r2, #2
 8011b4c:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8011b50:	d96a      	bls.n	8011c28 <f_write+0x220>
 8011b52:	f1bb 0f07 	cmp.w	fp, #7
 8011b56:	d967      	bls.n	8011c28 <f_write+0x220>
 8011b58:	f02c 0e03 	bic.w	lr, ip, #3
 8011b5c:	461a      	mov	r2, r3
 8011b5e:	4629      	mov	r1, r5
 8011b60:	449e      	add	lr, r3
			*d++ = *s++;
 8011b62:	f851 0b04 	ldr.w	r0, [r1], #4
 8011b66:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8011b6a:	4596      	cmp	lr, r2
 8011b6c:	d1f9      	bne.n	8011b62 <f_write+0x15a>
 8011b6e:	f02c 0103 	bic.w	r1, ip, #3
 8011b72:	458c      	cmp	ip, r1
 8011b74:	eb03 0001 	add.w	r0, r3, r1
 8011b78:	eb05 0201 	add.w	r2, r5, r1
 8011b7c:	d00e      	beq.n	8011b9c <f_write+0x194>
			*d++ = *s++;
 8011b7e:	f815 e001 	ldrb.w	lr, [r5, r1]
 8011b82:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 8011b86:	ebbb 0101 	subs.w	r1, fp, r1
 8011b8a:	d005      	beq.n	8011b98 <f_write+0x190>
			*d++ = *s++;
 8011b8c:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 8011b8e:	2901      	cmp	r1, #1
			*d++ = *s++;
 8011b90:	7043      	strb	r3, [r0, #1]
 8011b92:	bf1c      	itt	ne
 8011b94:	7893      	ldrbne	r3, [r2, #2]
 8011b96:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8011b98:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8011b9c:	7d23      	ldrb	r3, [r4, #20]
 8011b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ba2:	7523      	strb	r3, [r4, #20]
 8011ba4:	e7b4      	b.n	8011b10 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011ba6:	2302      	movs	r3, #2
 8011ba8:	4698      	mov	r8, r3
 8011baa:	7563      	strb	r3, [r4, #21]
}
 8011bac:	4640      	mov	r0, r8
 8011bae:	b005      	add	sp, #20
 8011bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bb4:	6a23      	ldr	r3, [r4, #32]
 8011bb6:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8011bb8:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bba:	d002      	beq.n	8011bc2 <f_write+0x1ba>
 8011bbc:	68e1      	ldr	r1, [r4, #12]
 8011bbe:	428b      	cmp	r3, r1
 8011bc0:	d34f      	bcc.n	8011c62 <f_write+0x25a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8011bc6:	6222      	str	r2, [r4, #32]
 8011bc8:	e7b6      	b.n	8011b38 <f_write+0x130>
					if (fp->cltbl) {
 8011bca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011bcc:	2900      	cmp	r1, #0
 8011bce:	d038      	beq.n	8011c42 <f_write+0x23a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011bd0:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011bd2:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011bd4:	8952      	ldrh	r2, [r2, #10]
 8011bd6:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011bda:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011bdc:	b922      	cbnz	r2, 8011be8 <f_write+0x1e0>
 8011bde:	e00a      	b.n	8011bf6 <f_write+0x1ee>
		cl -= ncl; tbl++;		/* Next fragment */
 8011be0:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011be2:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011be6:	b132      	cbz	r2, 8011bf6 <f_write+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d2f9      	bcs.n	8011be0 <f_write+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 8011bec:	6848      	ldr	r0, [r1, #4]
 8011bee:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	f47f af4f 	bne.w	8011a94 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011bf6:	7d23      	ldrb	r3, [r4, #20]
 8011bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bfc:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8011bfe:	e717      	b.n	8011a30 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c00:	2301      	movs	r3, #1
 8011c02:	6a22      	ldr	r2, [r4, #32]
 8011c04:	4651      	mov	r1, sl
 8011c06:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011c0a:	f7fd f97f 	bl	800ef0c <disk_write>
 8011c0e:	b920      	cbnz	r0, 8011c1a <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c10:	7d23      	ldrb	r3, [r4, #20]
 8011c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c16:	7523      	strb	r3, [r4, #20]
 8011c18:	e74b      	b.n	8011ab2 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	4698      	mov	r8, r3
 8011c1e:	7563      	strb	r3, [r4, #21]
}
 8011c20:	4640      	mov	r0, r8
 8011c22:	b005      	add	sp, #20
 8011c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c28:	3b01      	subs	r3, #1
 8011c2a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 8011c2e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 8011c32:	4295      	cmp	r5, r2
			*d++ = *s++;
 8011c34:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8011c38:	d1f9      	bne.n	8011c2e <f_write+0x226>
 8011c3a:	e7af      	b.n	8011b9c <f_write+0x194>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c3c:	f04f 0807 	mov.w	r8, #7
 8011c40:	e6f6      	b.n	8011a30 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011c42:	69e1      	ldr	r1, [r4, #28]
 8011c44:	4620      	mov	r0, r4
 8011c46:	f7fe f881 	bl	800fd4c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	f47f af22 	bne.w	8011a94 <f_write+0x8c>
 8011c50:	e7d1      	b.n	8011bf6 <f_write+0x1ee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c52:	4659      	mov	r1, fp
 8011c54:	4620      	mov	r0, r4
 8011c56:	f7fe f879 	bl	800fd4c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	f47f af1a 	bne.w	8011a94 <f_write+0x8c>
 8011c60:	e7c9      	b.n	8011bf6 <f_write+0x1ee>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011c62:	2301      	movs	r3, #1
 8011c64:	4651      	mov	r1, sl
 8011c66:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011c6a:	9202      	str	r2, [sp, #8]
 8011c6c:	f7fd f940 	bl	800eef0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d1d2      	bne.n	8011c1a <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c74:	69a3      	ldr	r3, [r4, #24]
 8011c76:	9a02      	ldr	r2, [sp, #8]
 8011c78:	e7a3      	b.n	8011bc2 <f_write+0x1ba>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011c7a:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8011c7e:	1c42      	adds	r2, r0, #1
 8011c80:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011c82:	ebaa 0202 	sub.w	r2, sl, r2
 8011c86:	2a02      	cmp	r2, #2
 8011c88:	d90d      	bls.n	8011ca6 <f_write+0x29e>
 8011c8a:	4652      	mov	r2, sl
 8011c8c:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8011c90:	f851 0b04 	ldr.w	r0, [r1], #4
 8011c94:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8011c98:	4562      	cmp	r2, ip
 8011c9a:	d1f9      	bne.n	8011c90 <f_write+0x288>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c9c:	7d22      	ldrb	r2, [r4, #20]
 8011c9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011ca2:	7522      	strb	r2, [r4, #20]
 8011ca4:	e730      	b.n	8011b08 <f_write+0x100>
 8011ca6:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 8011caa:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 8011cae:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8011cb2:	458c      	cmp	ip, r1
			*d++ = *s++;
 8011cb4:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8011cb8:	d1f9      	bne.n	8011cae <f_write+0x2a6>
 8011cba:	e7ef      	b.n	8011c9c <f_write+0x294>

08011cbc <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011cbc:	b158      	cbz	r0, 8011cd6 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011cbe:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011cc0:	6803      	ldr	r3, [r0, #0]
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	b12b      	cbz	r3, 8011cd2 <f_close+0x16>
 8011cc6:	781a      	ldrb	r2, [r3, #0]
 8011cc8:	b11a      	cbz	r2, 8011cd2 <f_close+0x16>
 8011cca:	8881      	ldrh	r1, [r0, #4]
 8011ccc:	88da      	ldrh	r2, [r3, #6]
 8011cce:	4291      	cmp	r1, r2
 8011cd0:	d003      	beq.n	8011cda <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8011cd2:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8011cd4:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8011cd6:	2009      	movs	r0, #9
}
 8011cd8:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011cda:	7858      	ldrb	r0, [r3, #1]
 8011cdc:	f7fd f8ec 	bl	800eeb8 <disk_status>
 8011ce0:	07c1      	lsls	r1, r0, #31
 8011ce2:	d4f6      	bmi.n	8011cd2 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce4:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011ce6:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ce8:	065a      	lsls	r2, r3, #25
 8011cea:	d53c      	bpl.n	8011d66 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011cec:	061b      	lsls	r3, r3, #24
 8011cee:	d45d      	bmi.n	8011dac <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8011cf0:	f7fc fff8 	bl	800ece4 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8011cf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cf6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8011cf8:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cfa:	4299      	cmp	r1, r3
 8011cfc:	d004      	beq.n	8011d08 <f_close+0x4c>
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f7fd faa4 	bl	800f24c <move_window.part.0>
				if (res == FR_OK) {
 8011d04:	2800      	cmp	r0, #0
 8011d06:	d1e5      	bne.n	8011cd4 <f_close+0x18>
					dir = fp->dir_ptr;
 8011d08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d0a:	7ad3      	ldrb	r3, [r2, #11]
 8011d0c:	f043 0320 	orr.w	r3, r3, #32
 8011d10:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011d12:	68a3      	ldr	r3, [r4, #8]
 8011d14:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d16:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8011d1a:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8011d1c:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8011d1e:	7809      	ldrb	r1, [r1, #0]
 8011d20:	2903      	cmp	r1, #3
 8011d22:	d103      	bne.n	8011d2c <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011d24:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011d26:	7513      	strb	r3, [r2, #20]
 8011d28:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8011d2a:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011d2c:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d2e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8011d30:	7596      	strb	r6, [r2, #22]
 8011d32:	0a19      	lsrs	r1, r3, #8
 8011d34:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d36:	7751      	strb	r1, [r2, #29]
 8011d38:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011d3a:	0e1b      	lsrs	r3, r3, #24
 8011d3c:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8011d3e:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d40:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011d42:	75d3      	strb	r3, [r2, #23]
 8011d44:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011d46:	0e36      	lsrs	r6, r6, #24
 8011d48:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d4a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8011d4c:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d4e:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 8011d50:	2301      	movs	r3, #1
 8011d52:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011d54:	f7fd ff8a 	bl	800fc6c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011d58:	7d23      	ldrb	r3, [r4, #20]
 8011d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d5e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1b7      	bne.n	8011cd4 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011d64:	6825      	ldr	r5, [r4, #0]
 8011d66:	2d00      	cmp	r5, #0
 8011d68:	d0b3      	beq.n	8011cd2 <f_close+0x16>
 8011d6a:	782b      	ldrb	r3, [r5, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d0b0      	beq.n	8011cd2 <f_close+0x16>
 8011d70:	88a2      	ldrh	r2, [r4, #4]
 8011d72:	88eb      	ldrh	r3, [r5, #6]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d1ac      	bne.n	8011cd2 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011d78:	7868      	ldrb	r0, [r5, #1]
 8011d7a:	f7fd f89d 	bl	800eeb8 <disk_status>
 8011d7e:	f010 0001 	ands.w	r0, r0, #1
 8011d82:	d1a6      	bne.n	8011cd2 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011d84:	6923      	ldr	r3, [r4, #16]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d81c      	bhi.n	8011dc6 <f_close+0x10a>
		n = Files[i].ctr;
 8011d8c:	4912      	ldr	r1, [pc, #72]	; (8011dd8 <f_close+0x11c>)
 8011d8e:	011d      	lsls	r5, r3, #4
 8011d90:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8011d94:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011d96:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8011d9a:	d016      	beq.n	8011dca <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8011d9c:	b1b2      	cbz	r2, 8011dcc <f_close+0x110>
 8011d9e:	3a01      	subs	r2, #1
 8011da0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8011da2:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011da4:	b192      	cbz	r2, 8011dcc <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 8011da6:	2300      	movs	r3, #0
 8011da8:	6023      	str	r3, [r4, #0]
}
 8011daa:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011dac:	2301      	movs	r3, #1
 8011dae:	6a22      	ldr	r2, [r4, #32]
 8011db0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011db4:	7868      	ldrb	r0, [r5, #1]
 8011db6:	f7fd f8a9 	bl	800ef0c <disk_write>
 8011dba:	b950      	cbnz	r0, 8011dd2 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011dbc:	7d23      	ldrb	r3, [r4, #20]
 8011dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dc2:	7523      	strb	r3, [r4, #20]
 8011dc4:	e794      	b.n	8011cf0 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011dc6:	2002      	movs	r0, #2
}
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8011dca:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011dcc:	2300      	movs	r3, #0
 8011dce:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8011dd0:	e7e9      	b.n	8011da6 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011dd2:	2001      	movs	r0, #1
}
 8011dd4:	bd70      	pop	{r4, r5, r6, pc}
 8011dd6:	bf00      	nop
 8011dd8:	20019a54 	.word	0x20019a54

08011ddc <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8011ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011dde:	b150      	cbz	r0, 8011df6 <f_findnext+0x1a>
 8011de0:	4605      	mov	r5, r0
 8011de2:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011de4:	4c3a      	ldr	r4, [pc, #232]	; (8011ed0 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011de6:	682b      	ldr	r3, [r5, #0]
 8011de8:	b12b      	cbz	r3, 8011df6 <f_findnext+0x1a>
 8011dea:	781a      	ldrb	r2, [r3, #0]
 8011dec:	b11a      	cbz	r2, 8011df6 <f_findnext+0x1a>
 8011dee:	88a9      	ldrh	r1, [r5, #4]
 8011df0:	88da      	ldrh	r2, [r3, #6]
 8011df2:	4291      	cmp	r1, r2
 8011df4:	d002      	beq.n	8011dfc <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8011df6:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8011df8:	4638      	mov	r0, r7
 8011dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011dfc:	7858      	ldrb	r0, [r3, #1]
 8011dfe:	f7fd f85b 	bl	800eeb8 <disk_status>
 8011e02:	f010 0101 	ands.w	r1, r0, #1
 8011e06:	d1f6      	bne.n	8011df6 <f_findnext+0x1a>
		if (!fno) {
 8011e08:	2e00      	cmp	r6, #0
 8011e0a:	d058      	beq.n	8011ebe <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f7fd fd0f 	bl	800f830 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 8011e12:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8011e16:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8011e18:	d1ee      	bne.n	8011df8 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011e1a:	4631      	mov	r1, r6
 8011e1c:	4628      	mov	r0, r5
 8011e1e:	f7fd f955 	bl	800f0cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011e22:	4628      	mov	r0, r5
 8011e24:	f7fd fcbe 	bl	800f7a4 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8011e28:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 8011e2c:	d14d      	bne.n	8011eca <f_findnext+0xee>
 8011e2e:	7db3      	ldrb	r3, [r6, #22]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d0e1      	beq.n	8011df8 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8011e34:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011e38:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 8011e3c:	e00f      	b.n	8011e5e <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011e3e:	3a20      	subs	r2, #32
 8011e40:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011e42:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011e46:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011e4a:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011e4c:	f1be 0f19 	cmp.w	lr, #25
 8011e50:	d817      	bhi.n	8011e82 <f_findnext+0xa6>
 8011e52:	3b20      	subs	r3, #32
 8011e54:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d1c5      	bne.n	8011de6 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d0cc      	beq.n	8011df8 <f_findnext+0x1c>
 8011e5e:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8011e60:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8011e64:	2b3f      	cmp	r3, #63	; 0x3f
 8011e66:	d012      	beq.n	8011e8e <f_findnext+0xb2>
 8011e68:	2b2a      	cmp	r3, #42	; 0x2a
 8011e6a:	d010      	beq.n	8011e8e <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011e6c:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011e70:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011e72:	2819      	cmp	r0, #25
 8011e74:	d9e3      	bls.n	8011e3e <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011e76:	2a7f      	cmp	r2, #127	; 0x7f
 8011e78:	d9e3      	bls.n	8011e42 <f_findnext+0x66>
 8011e7a:	4423      	add	r3, r4
 8011e7c:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 8011e80:	e7df      	b.n	8011e42 <f_findnext+0x66>
 8011e82:	2b7f      	cmp	r3, #127	; 0x7f
 8011e84:	d9e7      	bls.n	8011e56 <f_findnext+0x7a>
 8011e86:	4420      	add	r0, r4
 8011e88:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 8011e8c:	e7e3      	b.n	8011e56 <f_findnext+0x7a>
 8011e8e:	4694      	mov	ip, r2
				nm = nx = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	f81c eb01 	ldrb.w	lr, [ip], #1
 8011e96:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8011e98:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8011e9c:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 8011e9e:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8011ea2:	bf0c      	ite	eq
 8011ea4:	3201      	addeq	r2, #1
 8011ea6:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8011ea8:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8011eac:	d0f4      	beq.n	8011e98 <f_findnext+0xbc>
 8011eae:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8011eb2:	d0f1      	beq.n	8011e98 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8011eb4:	f7fd f894 	bl	800efe0 <pattern_matching>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d094      	beq.n	8011de6 <f_findnext+0xa>
 8011ebc:	e79c      	b.n	8011df8 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011ebe:	4631      	mov	r1, r6
 8011ec0:	4628      	mov	r0, r5
}
 8011ec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011ec6:	f7fe b811 	b.w	800feec <dir_sdi>
 8011eca:	4607      	mov	r7, r0
 8011ecc:	e794      	b.n	8011df8 <f_findnext+0x1c>
 8011ece:	bf00      	nop
 8011ed0:	0801b5dc 	.word	0x0801b5dc

08011ed4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	4615      	mov	r5, r2
 8011eda:	4604      	mov	r4, r0
 8011edc:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8011ede:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	a901      	add	r1, sp, #4
 8011ee4:	4668      	mov	r0, sp
 8011ee6:	9500      	str	r5, [sp, #0]
 8011ee8:	f7fd f9ea 	bl	800f2c0 <find_volume>
	if (res == FR_OK) {
 8011eec:	b118      	cbz	r0, 8011ef6 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011eee:	2300      	movs	r3, #0
 8011ef0:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8011ef2:	b002      	add	sp, #8
 8011ef4:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011ef6:	e9dd 1300 	ldrd	r1, r3, [sp]
 8011efa:	4620      	mov	r0, r4
		obj->fs = fs;
 8011efc:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011efe:	f7fe fa57 	bl	80103b0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8011f02:	bb08      	cbnz	r0, 8011f48 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011f04:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	db25      	blt.n	8011f58 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011f0c:	79a3      	ldrb	r3, [r4, #6]
 8011f0e:	06db      	lsls	r3, r3, #27
 8011f10:	d520      	bpl.n	8011f54 <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011f12:	9b01      	ldr	r3, [sp, #4]
 8011f14:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 8011f16:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8011f18:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8011f1a:	2803      	cmp	r0, #3
 8011f1c:	d102      	bne.n	8011f24 <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011f1e:	8a89      	ldrh	r1, [r1, #20]
 8011f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011f24:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 8011f26:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011f28:	2100      	movs	r1, #0
 8011f2a:	4620      	mov	r0, r4
				obj->id = fs->id;
 8011f2c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011f2e:	f7fd ffdd 	bl	800feec <dir_sdi>
				if (res == FR_OK) {
 8011f32:	b948      	cbnz	r0, 8011f48 <f_findfirst+0x74>
					if (obj->sclust) {
 8011f34:	68a3      	ldr	r3, [r4, #8]
 8011f36:	b98b      	cbnz	r3, 8011f5c <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011f38:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 8011f3a:	4631      	mov	r1, r6
 8011f3c:	4620      	mov	r0, r4
}
 8011f3e:	b002      	add	sp, #8
 8011f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 8011f44:	f7ff bf4a 	b.w	8011ddc <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011f48:	2804      	cmp	r0, #4
 8011f4a:	d1d0      	bne.n	8011eee <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011f4c:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011f4e:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011f50:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 8011f52:	e7ce      	b.n	8011ef2 <f_findfirst+0x1e>
					res = FR_NO_PATH;
 8011f54:	2005      	movs	r0, #5
 8011f56:	e7ca      	b.n	8011eee <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011f58:	9b01      	ldr	r3, [sp, #4]
 8011f5a:	e7e4      	b.n	8011f26 <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011f5c:	4601      	mov	r1, r0
 8011f5e:	4620      	mov	r0, r4
 8011f60:	f7fc ffee 	bl	800ef40 <inc_lock>
 8011f64:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011f66:	2800      	cmp	r0, #0
 8011f68:	d1e7      	bne.n	8011f3a <f_findfirst+0x66>
 8011f6a:	2012      	movs	r0, #18
 8011f6c:	e7bf      	b.n	8011eee <f_findfirst+0x1a>
 8011f6e:	bf00      	nop

08011f70 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8011f70:	4b10      	ldr	r3, [pc, #64]	; (8011fb4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f72:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8011f74:	7a5c      	ldrb	r4, [r3, #9]
 8011f76:	b9cc      	cbnz	r4, 8011fac <FATFS_LinkDriver+0x3c>
 8011f78:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8011f7a:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8011f7e:	7a5c      	ldrb	r4, [r3, #9]
 8011f80:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8011f82:	7a5c      	ldrb	r4, [r3, #9]
 8011f84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f88:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8011f8a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8011f8c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8011f8e:	441c      	add	r4, r3
 8011f90:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8011f92:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8011f94:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8011f96:	b2e4      	uxtb	r4, r4
 8011f98:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8011f9a:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8011f9c:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8011f9e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8011fa0:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8011fa2:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8011fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8011fa8:	708b      	strb	r3, [r1, #2]
}
 8011faa:	4770      	bx	lr
  uint8_t ret = 1;
 8011fac:	2001      	movs	r0, #1
}
 8011fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fb2:	4770      	bx	lr
 8011fb4:	20019c78 	.word	0x20019c78

08011fb8 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011fb8:	287f      	cmp	r0, #127	; 0x7f
 8011fba:	d912      	bls.n	8011fe2 <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011fbc:	b971      	cbnz	r1, 8011fdc <ff_convert+0x24>
 8011fbe:	4b0c      	ldr	r3, [pc, #48]	; (8011ff0 <ff_convert+0x38>)
 8011fc0:	e001      	b.n	8011fc6 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011fc2:	2980      	cmp	r1, #128	; 0x80
 8011fc4:	d00c      	beq.n	8011fe0 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 8011fc6:	f833 2b02 	ldrh.w	r2, [r3], #2
 8011fca:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8011fce:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8011fd0:	4282      	cmp	r2, r0
 8011fd2:	d1f6      	bne.n	8011fc2 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8011fd4:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8011fd8:	b280      	uxth	r0, r0
 8011fda:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011fdc:	28ff      	cmp	r0, #255	; 0xff
 8011fde:	d901      	bls.n	8011fe4 <ff_convert+0x2c>
 8011fe0:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8011fe2:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011fe4:	4b02      	ldr	r3, [pc, #8]	; (8011ff0 <ff_convert+0x38>)
 8011fe6:	3880      	subs	r0, #128	; 0x80
 8011fe8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop
 8011ff0:	0801b66c 	.word	0x0801b66c

08011ff4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011ff4:	4b22      	ldr	r3, [pc, #136]	; (8012080 <ff_wtoupper+0x8c>)
 8011ff6:	4a23      	ldr	r2, [pc, #140]	; (8012084 <ff_wtoupper+0x90>)
 8011ff8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8011ffc:	bf28      	it	cs
 8011ffe:	4613      	movcs	r3, r2
{
 8012000:	b510      	push	{r4, lr}
 8012002:	3304      	adds	r3, #4
 8012004:	e001      	b.n	801200a <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8012006:	3304      	adds	r3, #4
 8012008:	b1da      	cbz	r2, 8012042 <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 801200a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 801200e:	461c      	mov	r4, r3
 8012010:	b1b1      	cbz	r1, 8012040 <ff_wtoupper+0x4c>
 8012012:	4288      	cmp	r0, r1
 8012014:	d314      	bcc.n	8012040 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012016:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801201a:	fa5f fc82 	uxtb.w	ip, r2
 801201e:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8012020:	eb0c 0e01 	add.w	lr, ip, r1
 8012024:	4570      	cmp	r0, lr
 8012026:	daee      	bge.n	8012006 <ff_wtoupper+0x12>
			switch (cmd) {
 8012028:	2a08      	cmp	r2, #8
 801202a:	d809      	bhi.n	8012040 <ff_wtoupper+0x4c>
 801202c:	e8df f002 	tbb	[pc, r2]
 8012030:	19161005 	.word	0x19161005
 8012034:	25221f1c 	.word	0x25221f1c
 8012038:	0c          	.byte	0x0c
 8012039:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801203a:	1a41      	subs	r1, r0, r1
 801203c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8012040:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8012042:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8012046:	e7dc      	b.n	8012002 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012048:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801204c:	b280      	uxth	r0, r0
}
 801204e:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012050:	1a43      	subs	r3, r0, r1
 8012052:	f003 0301 	and.w	r3, r3, #1
 8012056:	1ac0      	subs	r0, r0, r3
 8012058:	b280      	uxth	r0, r0
}
 801205a:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 801205c:	3810      	subs	r0, #16
 801205e:	b280      	uxth	r0, r0
}
 8012060:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012062:	3820      	subs	r0, #32
 8012064:	b280      	uxth	r0, r0
}
 8012066:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012068:	3830      	subs	r0, #48	; 0x30
 801206a:	b280      	uxth	r0, r0
}
 801206c:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 801206e:	381a      	subs	r0, #26
 8012070:	b280      	uxth	r0, r0
}
 8012072:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8012074:	3008      	adds	r0, #8
 8012076:	b280      	uxth	r0, r0
}
 8012078:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 801207a:	3850      	subs	r0, #80	; 0x50
 801207c:	b280      	uxth	r0, r0
}
 801207e:	bd10      	pop	{r4, pc}
 8012080:	0801b76c 	.word	0x0801b76c
 8012084:	0801b960 	.word	0x0801b960

08012088 <tLinearDelay_tick>:
    }
}

float   tLinearDelay_tick (tLinearDelay* const dl, float input)
{
    _tLinearDelay* d = *dl;
 8012088:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 801208a:	edd3 7a01 	vldr	s15, [r3, #4]
 801208e:	6959      	ldr	r1, [r3, #20]
 8012090:	689a      	ldr	r2, [r3, #8]
 8012092:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012096:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801209a:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801209e:	695a      	ldr	r2, [r3, #20]
 80120a0:	69d9      	ldr	r1, [r3, #28]
 80120a2:	3201      	adds	r2, #1
 80120a4:	428a      	cmp	r2, r1
 80120a6:	615a      	str	r2, [r3, #20]
 80120a8:	d101      	bne.n	80120ae <tLinearDelay_tick+0x26>
 80120aa:	2200      	movs	r2, #0
 80120ac:	615a      	str	r2, [r3, #20]

    uint32_t idx = (uint32_t) d->outPoint;
 80120ae:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 80120b0:	6898      	ldr	r0, [r3, #8]
 80120b2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80120b6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 80120ba:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 80120bc:	ed9c 0a00 	vldr	s0, [ip]
    if ((idx + 1) < d->maxDelay)
 80120c0:	4291      	cmp	r1, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
 80120c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80120c6:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 80120ca:	d909      	bls.n	80120e0 <tLinearDelay_tick+0x58>
        d->lastOut += d->buff[idx+1] * d->alpha;
 80120cc:	ed9c 7a01 	vldr	s14, [ip, #4]
 80120d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80120d4:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 80120d6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80120da:	ed83 0a03 	vstr	s0, [r3, #12]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80120de:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 80120e0:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80120e4:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 80120e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80120ea:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 80120ec:	eea7 0a27 	vfma.f32	s0, s14, s15
 80120f0:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 80120f4:	4770      	bx	lr
 80120f6:	bf00      	nop

080120f8 <tLinearDelay_setDelay>:

    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
 80120f8:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 80120fa:	6804      	ldr	r4, [r0, #0]
{
 80120fc:	eef0 0a40 	vmov.f32	s1, s0

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012100:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012178 <tLinearDelay_setDelay+0x80>
 8012104:	edd4 7a07 	vldr	s15, [r4, #28]
 8012108:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 801210c:	f002 f89c 	bl	8014248 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 8012110:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012114:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 8012118:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 801211c:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 801211e:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8012122:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212a:	d50a      	bpl.n	8012142 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 801212c:	ee07 2a90 	vmov	s15, r2
 8012130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012134:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8012138:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012140:	d4f8      	bmi.n	8012134 <tLinearDelay_setDelay+0x3c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 8012142:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012146:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 801214a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 801214e:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012152:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8012154:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8012158:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801215a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801215e:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8012162:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8012166:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801216a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801216e:	d000      	beq.n	8012172 <tLinearDelay_setDelay+0x7a>
}
 8012170:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012172:	2300      	movs	r3, #0
 8012174:	61a3      	str	r3, [r4, #24]
}
 8012176:	bd10      	pop	{r4, pc}
 8012178:	00000000 	.word	0x00000000

0801217c <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 801217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012180:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 8012182:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 8012184:	6999      	ldr	r1, [r3, #24]
{
 8012186:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8012188:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 801218c:	bf0c      	ite	eq
 801218e:	2700      	moveq	r7, #0
 8012190:	2706      	movne	r7, #6
{
 8012192:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8012194:	2b1e      	cmp	r3, #30
 8012196:	d93a      	bls.n	801220e <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 8012198:	2d40      	cmp	r5, #64	; 0x40
 801219a:	d135      	bne.n	8012208 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 801219c:	2028      	movs	r0, #40	; 0x28
 801219e:	9101      	str	r1, [sp, #4]
 80121a0:	f002 f9d6 	bl	8014550 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80121a4:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 80121a8:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 80121aa:	4604      	mov	r4, r0
 80121ac:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80121b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 80121b4:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 80121b6:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 80121b8:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 80121ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80121be:	f007 fad9 	bl	8019774 <log2f>
 80121c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80121c6:	4a16      	ldr	r2, [pc, #88]	; (8012220 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121c8:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 80121ca:	ee17 3a90 	vmov	r3, s15
 80121ce:	3b01      	subs	r3, #1
 80121d0:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80121d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80121d6:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 80121da:	4a12      	ldr	r2, [pc, #72]	; (8012224 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 80121dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80121e0:	ee17 0a90 	vmov	r0, s15
 80121e4:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
 80121e8:	fb90 f5f5 	sdiv	r5, r0, r5
 80121ec:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121ee:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 80121f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121f4:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121f6:	f002 f9ab 	bl	8014550 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121fa:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121fc:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 80121fe:	9901      	ldr	r1, [sp, #4]
 8012200:	00d8      	lsls	r0, r3, #3
 8012202:	f002 f9a5 	bl	8014550 <mpool_alloc>
 8012206:	61e0      	str	r0, [r4, #28]
}
 8012208:	b002      	add	sp, #8
 801220a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 801220e:	4a06      	ldr	r2, [pc, #24]	; (8012228 <tOversampler_init+0xac>)
 8012210:	fa22 f303 	lsr.w	r3, r2, r3
 8012214:	07db      	lsls	r3, r3, #31
 8012216:	d4c1      	bmi.n	801219c <tOversampler_init+0x20>
}
 8012218:	b002      	add	sp, #8
 801221a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801221e:	bf00      	nop
 8012220:	0802509c 	.word	0x0802509c
 8012224:	200000a8 	.word	0x200000a8
 8012228:	40004045 	.word	0x40004045

0801222c <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 801222c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 8012230:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	2b01      	cmp	r3, #1
 8012236:	d05b      	beq.n	80122f0 <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 8012238:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 801223a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 801223c:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 8012240:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8012244:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8012248:	68fc      	ldr	r4, [r7, #12]
 801224a:	46a1      	mov	r9, r4
    
    while (i > 0U)
 801224c:	b3ac      	cbz	r4, 80122ba <tOversampler_upsample+0x8e>
    j = 1U;
 801224e:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 8012252:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80122f8 <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 8012256:	eba4 030e 	sub.w	r3, r4, lr
 801225a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 801225e:	b325      	cbz	r5, 80122aa <tOversampler_upsample+0x7e>
 8012260:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 8012262:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012266:	d135      	bne.n	80122d4 <tOversampler_upsample+0xa8>
 8012268:	462a      	mov	r2, r5
        ptr1 = pState;
 801226a:	4630      	mov	r0, r6
        sum0 = 0.0f;
 801226c:	eddf 7a22 	vldr	s15, [pc, #136]	; 80122f8 <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 8012270:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 8012274:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8012276:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 801227a:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 801227c:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8012280:	d1f6      	bne.n	8012270 <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 8012282:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 8012286:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8012288:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 801228c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012294:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8012298:	d00f      	beq.n	80122ba <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 801229a:	68fc      	ldr	r4, [r7, #12]
 801229c:	469e      	mov	lr, r3
 801229e:	eba4 030e 	sub.w	r3, r4, lr
 80122a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 80122a6:	2d00      	cmp	r5, #0
 80122a8:	d1da      	bne.n	8012260 <tOversampler_upsample+0x34>
 80122aa:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 80122ae:	45f1      	cmp	r9, lr
        j++;
 80122b0:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 80122b4:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 80122b8:	d1ef      	bne.n	801229a <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80122ba:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 80122bc:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 80122c0:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 80122c2:	d005      	beq.n	80122d0 <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 80122c4:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 80122c8:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80122ca:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 80122ce:	d1f9      	bne.n	80122c4 <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 80122d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 80122d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80122f8 <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 80122d8:	462a      	mov	r2, r5
        ptr1 = pState;
 80122da:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 80122dc:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 80122e0:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80122e2:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 80122e6:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 80122e8:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80122ec:	d1f6      	bne.n	80122dc <tOversampler_upsample+0xb0>
 80122ee:	e7c8      	b.n	8012282 <tOversampler_upsample+0x56>
        output[0] = input;
 80122f0:	ed81 0a00 	vstr	s0, [r1]
}
 80122f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122f8:	00000000 	.word	0x00000000

080122fc <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 80122fc:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 80122fe:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 8012300:	68f3      	ldr	r3, [r6, #12]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d029      	beq.n	801235a <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 8012306:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8012308:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 801230c:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 801230e:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8012310:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 8012312:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 8012316:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 801231a:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 801231c:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 8012320:	d1f9      	bne.n	8012316 <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 8012322:	b1f2      	cbz	r2, 8012362 <tOversampler_downsample+0x66>
 8012324:	4613      	mov	r3, r2
    acc0 = 0.0f;
 8012326:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012374 <tOversampler_downsample+0x78>
    px0 = pState;
 801232a:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 801232c:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 8012330:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 8012332:	ecf1 7a01 	vldmia	r1!, {s15}
 8012336:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 801233a:	d1f7      	bne.n	801232c <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 801233c:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801233e:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 8012340:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 8012342:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8012346:	d006      	beq.n	8012356 <tOversampler_downsample+0x5a>
 8012348:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 801234a:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 801234e:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8012350:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 8012354:	d1f9      	bne.n	801234a <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8012356:	bc70      	pop	{r4, r5, r6}
 8012358:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 801235a:	ed91 0a00 	vldr	s0, [r1]
}
 801235e:	bc70      	pop	{r4, r5, r6}
 8012360:	4770      	bx	lr
    pState = pState + os->ratio;
 8012362:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 8012364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 8012368:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 801236a:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8012374 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 801236e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8012372:	e7e9      	b.n	8012348 <tOversampler_downsample+0x4c>
 8012374:	00000000 	.word	0x00000000

08012378 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8012378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 801237a:	698f      	ldr	r7, [r1, #24]
{
 801237c:	4606      	mov	r6, r0
 801237e:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8012380:	2020      	movs	r0, #32
 8012382:	4639      	mov	r1, r7
 8012384:	f002 f8e4 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8012388:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 801238c:	4a10      	ldr	r2, [pc, #64]	; (80123d0 <tCrusher_init+0x58>)
    c->op = 4;
 801238e:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8012390:	6030      	str	r0, [r6, #0]
 8012392:	4604      	mov	r4, r0
    c->op = 4;
 8012394:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 8012396:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8012398:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 801239a:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 801239c:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801239e:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 80123a0:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80123a2:	4629      	mov	r1, r5
 80123a4:	f002 f8d4 	bl	8014550 <mpool_alloc>
    s->invRatio = 1.0f;
 80123a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 80123ac:	2200      	movs	r2, #0
    s->count = 0;
 80123ae:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 80123b0:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80123b2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80123d4 <tCrusher_init+0x5c>
    s->mempool = m;
 80123b6:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 80123b8:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 80123ba:	6082      	str	r2, [r0, #8]
    s->count = 0;
 80123bc:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80123be:	eddf 7a06 	vldr	s15, [pc, #24]	; 80123d8 <tCrusher_init+0x60>
 80123c2:	edd4 6a03 	vldr	s13, [r4, #12]
 80123c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80123ca:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80123ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d0:	3951b717 	.word	0x3951b717
 80123d4:	3912ccf6 	.word	0x3912ccf6
 80123d8:	3e99999a 	.word	0x3e99999a

080123dc <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 80123dc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012458 <tCrusher_tick+0x7c>
 80123e0:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80123e4:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 80123e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 80123ea:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 80123ec:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 80123f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80123f4:	6960      	ldr	r0, [r4, #20]
 80123f6:	05c0      	lsls	r0, r0, #23
 80123f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80123fc:	f001 ff1e 	bl	801423c <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 8012400:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8012404:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8012408:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801240c:	f001 ff1c 	bl	8014248 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 8012410:	edd4 0a04 	vldr	s1, [r4, #16]
 8012414:	f001 ff00 	bl	8014218 <LEAF_round>
    _tSampleReducer* s = *sr;
 8012418:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 801241a:	68da      	ldr	r2, [r3, #12]
 801241c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012420:	ee07 2a10 	vmov	s14, r2
 8012424:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012430:	dc08      	bgt.n	8012444 <tCrusher_tick+0x68>
    s->count++;
 8012432:	3201      	adds	r2, #1
    return s->hold;
 8012434:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 8012438:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 801243a:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 801243e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012442:	bd10      	pop	{r4, pc}
        s->hold = input;
 8012444:	2201      	movs	r2, #1
 8012446:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 801244a:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 801244c:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8012450:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012454:	bd10      	pop	{r4, pc}
 8012456:	bf00      	nop
 8012458:	459c4000 	.word	0x459c4000

0801245c <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 801245c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 8012460:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 8012462:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8012466:	eeb4 0a67 	vcmp.f32	s0, s15
 801246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801246e:	d809      	bhi.n	8012484 <tCrusher_setSamplingRatio+0x28>
 8012470:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012478:	db04      	blt.n	8012484 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 801247a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 801247e:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8012480:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 801248e:	698d      	ldr	r5, [r1, #24]
{
 8012490:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 8012492:	206c      	movs	r0, #108	; 0x6c
 8012494:	4629      	mov	r1, r5
 8012496:	f002 f85b 	bl	8014550 <mpool_alloc>
 801249a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801249c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 801249e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 80124a2:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80124a4:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 80124a6:	ed93 8a00 	vldr	s16, [r3]
 80124aa:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80124ae:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80124b2:	f007 f87d 	bl	80195b0 <expf>
 80124b6:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80124ba:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80124be:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80124c2:	f007 f875 	bl	80195b0 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 80124c6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80124ca:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 80124cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 80124d0:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 80124d2:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80124d4:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 80124d6:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 80124d8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80124dc:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
 80124de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124e0:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
 80124e2:	6363      	str	r3, [r4, #52]	; 0x34
 80124e4:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
 80124e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80124e8:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 80124ea:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 80124ec:	4905      	ldr	r1, [pc, #20]	; (8012504 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80124ee:	4b06      	ldr	r3, [pc, #24]	; (8012508 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80124f0:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 80124f4:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 80124f6:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 80124f8:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80124fa:	6223      	str	r3, [r4, #32]
}
 80124fc:	ecbd 8b02 	vpop	{d8}
 8012500:	bd70      	pop	{r4, r5, r6, pc}
 8012502:	bf00      	nop
 8012504:	40400000 	.word	0x40400000
 8012508:	3e2aaaab 	.word	0x3e2aaaab

0801250c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 801250c:	b510      	push	{r4, lr}
 801250e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 8012512:	6804      	ldr	r4, [r0, #0]
{
 8012514:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8012518:	f001 fdfa 	bl	8014110 <fastabsf>
 801251c:	f001 ffac 	bl	8014478 <fasteratodb>
 8012520:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80125d4 <tCompressor_tick+0xc8>
 8012524:	eef0 0a40 	vmov.f32	s1, s0
 8012528:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80125d8 <tCompressor_tick+0xcc>
 801252c:	f001 fe8c 	bl	8014248 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 8012530:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 8012534:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8012538:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 801253c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 8012540:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 8012544:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8012548:	eef4 7ac7 	vcmpe.f32	s15, s14
 801254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012550:	db23      	blt.n	801259a <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80125d4 <tCompressor_tick+0xc8>
 8012558:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 801255a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 801255e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8012562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 8012566:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 801256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801256e:	bf4c      	ite	mi
 8012570:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 8012574:	ed94 6a02 	vldrpl	s12, [r4, #8]
 8012578:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801257c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012580:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8012584:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012588:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 801258c:	f001 ffa8 	bl	80144e0 <fasterdbtoa>
    return attenuation * in;
}
 8012590:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012594:	ecbd 8b02 	vpop	{d8}
 8012598:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801259a:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 801259e:	edd4 5a07 	vldr	s11, [r4, #28]
 80125a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 80125a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 80125aa:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 80125ae:	dd0c      	ble.n	80125ca <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80125b0:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 80125b4:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 80125b8:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80125ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 80125be:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80125c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125c4:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 80125c8:	e7c7      	b.n	801255a <tCompressor_tick+0x4e>
        c->isActive = 1;
 80125ca:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 80125cc:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 80125d0:	6463      	str	r3, [r4, #68]	; 0x44
 80125d2:	e7c2      	b.n	801255a <tCompressor_tick+0x4e>
 80125d4:	00000000 	.word	0x00000000
 80125d8:	c2b40000 	.word	0xc2b40000

080125dc <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 80125dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125de:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 80125e2:	699e      	ldr	r6, [r3, #24]
{
 80125e4:	4614      	mov	r4, r2
 80125e6:	4607      	mov	r7, r0
 80125e8:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80125ea:	2068      	movs	r0, #104	; 0x68
 80125ec:	4631      	mov	r1, r6
{
 80125ee:	eef0 9a40 	vmov.f32	s19, s0
 80125f2:	eeb0 9a60 	vmov.f32	s18, s1
 80125f6:	eeb0 8a41 	vmov.f32	s16, s2
 80125fa:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80125fe:	f001 ffa7 	bl	8014550 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012602:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8012606:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8012608:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 801260a:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801260c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8012610:	eddf 7a22 	vldr	s15, [pc, #136]	; 801269c <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8012614:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 8012616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 801261a:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 801261c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012620:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 8012624:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 8012626:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 8012628:	fe88 8a66 	vminnm.f32	s16, s16, s13
 801262c:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 8012630:	2200      	movs	r2, #0
 8012632:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80126a0 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012636:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 801263a:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801263e:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 8012642:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 8012646:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 801264a:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 801264e:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 8012652:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 8012656:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 801265a:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 801265c:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 8012660:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 8012664:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 8012668:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801266c:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8012670:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8012674:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012678:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 801267c:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8012680:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8012684:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8012688:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801268c:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8012690:	685b      	ldr	r3, [r3, #4]
 8012692:	6643      	str	r3, [r0, #100]	; 0x64
}
 8012694:	ecbd 8b04 	vpop	{d8-d9}
 8012698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801269a:	bf00      	nop
 801269c:	4479ffff 	.word	0x4479ffff
 80126a0:	00000000 	.word	0x00000000

080126a4 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 80126a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80126a8:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80126aa:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 80126ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 80126b2:	bf48      	it	mi
 80126b4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80126c8 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80126b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 80126bc:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80126c0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80126c4:	4770      	bx	lr
 80126c6:	bf00      	nop
 80126c8:	3c23d70a 	.word	0x3c23d70a

080126cc <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 80126cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80126d0:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80126d2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 80126d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 80126da:	bf48      	it	mi
 80126dc:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80126f0 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80126e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 80126e4:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80126e8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	3c23d70a 	.word	0x3c23d70a

080126f4 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 80126f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 80126f8:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 80126fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80126fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012702:	dd02      	ble.n	801270a <tADSRT_setSustain+0x16>
 8012704:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8012708:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 801270a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801270e:	2200      	movs	r2, #0
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	bf4c      	ite	mi
 8012716:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 8012718:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop

08012720 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8012720:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8012724:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012726:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 801272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 801272e:	bf48      	it	mi
 8012730:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8012744 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8012734:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8012738:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801273c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	3c23d70a 	.word	0x3c23d70a

08012748 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 8012748:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 801274a:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 801274c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8012768 <tADSRT_setLeakFactor+0x20>
 8012750:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 8012754:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8012758:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801275c:	f007 f8c8 	bl	80198f0 <powf>
 8012760:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8012764:	bd10      	pop	{r4, pc}
 8012766:	bf00      	nop
 8012768:	472c4400 	.word	0x472c4400

0801276c <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 801276c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 801276e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012770:	b162      	cbz	r2, 801278c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 8012772:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 8012774:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 8012776:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8012778:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 801277a:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 801277c:	2200      	movs	r2, #0
 801277e:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8012780:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 8012784:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 8012786:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 8012788:	655a      	str	r2, [r3, #84]	; 0x54
}
 801278a:	4770      	bx	lr
        adsr->whichStage = env_attack;
 801278c:	2101      	movs	r1, #1
 801278e:	e7f5      	b.n	801277c <tADSRT_on+0x10>

08012790 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8012790:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8012792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012794:	b11a      	cbz	r2, 801279e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8012796:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8012798:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 801279a:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 801279c:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 801279e:	4770      	bx	lr

080127a0 <tADSRT_tickNoInterp>:
    return adsr->next;
}

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 80127a0:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 80127a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127a4:	3a01      	subs	r2, #1
 80127a6:	2a04      	cmp	r2, #4
 80127a8:	f200 80ba 	bhi.w	8012920 <tADSRT_tickNoInterp+0x180>
 80127ac:	e8df f002 	tbb	[pc, r2]
 80127b0:	58333c1b 	.word	0x58333c1b
 80127b4:	03          	.byte	0x03
 80127b5:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80127b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80127ba:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80127be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80127c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80127c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ca:	dd61      	ble.n	8012890 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 80127cc:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 80127ce:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8012928 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 80127d2:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 80127d4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80127d8:	ed83 0a06 	vstr	s0, [r3, #24]
 80127dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127e0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 80127e4:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 80127e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80127ea:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80127ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80127f2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80127f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fa:	dd57      	ble.n	80128ac <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 80127fc:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 80127fe:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 8012802:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8012804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012808:	ed83 0a06 	vstr	s0, [r3, #24]
 801280c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012810:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 8012814:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 8012816:	ed93 0a06 	vldr	s0, [r3, #24]
 801281a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801281e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012822:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8012826:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8012828:	edd3 7a03 	vldr	s15, [r3, #12]
 801282c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8012830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012834:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283c:	dd48      	ble.n	80128d0 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 801283e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8012842:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 8012844:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8012848:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 801284a:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 801284e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8012852:	ed83 0a06 	vstr	s0, [r3, #24]
 8012856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801285a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 801285e:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8012860:	edd3 7a03 	vldr	s15, [r3, #12]
 8012864:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8012868:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801286c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012874:	dd46      	ble.n	8012904 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 8012876:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 8012878:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8012928 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 801287c:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 801287e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8012882:	ed83 0a06 	vstr	s0, [r3, #24]
 8012886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801288a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 801288e:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8012890:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8012894:	685a      	ldr	r2, [r3, #4]
 8012896:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 801289a:	ee17 1a10 	vmov	r1, s14
 801289e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80128a2:	ed92 0a00 	vldr	s0, [r2]
 80128a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128aa:	e793      	b.n	80127d4 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 80128ac:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 80128b0:	685a      	ldr	r2, [r3, #4]
 80128b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128b6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80128ba:	ee17 1a10 	vmov	r1, s14
 80128be:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80128c2:	ed92 7a00 	vldr	s14, [r2]
 80128c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80128ca:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128ce:	e799      	b.n	8012804 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 80128d0:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 80128d4:	685a      	ldr	r2, [r3, #4]
 80128d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128da:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80128de:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 80128e2:	ee15 1a90 	vmov	r1, s11
 80128e6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80128ea:	ee37 7a40 	vsub.f32	s14, s14, s0
 80128ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80128f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80128f6:	ed92 6a00 	vldr	s12, [r2]
 80128fa:	eea6 0a07 	vfma.f32	s0, s12, s14
 80128fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012902:	e7a4      	b.n	801284e <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8012904:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801290e:	ee17 1a10 	vmov	r1, s14
 8012912:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012916:	ed92 0a00 	vldr	s0, [r2]
 801291a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801291e:	e7ae      	b.n	801287e <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 8012920:	ed93 0a06 	vldr	s0, [r3, #24]
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop
 8012928:	00000000 	.word	0x00000000

0801292c <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012932:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012934:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8012936:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8012938:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801293c:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 801293e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8012942:	f001 fe05 	bl	8014550 <mpool_alloc>
 8012946:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801294a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8012980 <tExpSmooth_init+0x54>
 801294e:	6028      	str	r0, [r5, #0]
 8012950:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8012954:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8012958:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 801295c:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 801295e:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8012962:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8012966:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 801296a:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 801296e:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8012972:	6863      	ldr	r3, [r4, #4]
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	6183      	str	r3, [r0, #24]
}
 8012978:	ecbd 8b02 	vpop	{d8}
 801297c:	bd38      	pop	{r3, r4, r5, pc}
 801297e:	bf00      	nop
 8012980:	00000000 	.word	0x00000000

08012984 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8012984:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8012986:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801298a:	4770      	bx	lr

0801298c <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 801298c:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 801298e:	edd3 6a04 	vldr	s13, [r3, #16]
 8012992:	ed93 0a03 	vldr	s0, [r3, #12]
 8012996:	ed93 7a02 	vldr	s14, [r3, #8]
 801299a:	ee20 0a26 	vmul.f32	s0, s0, s13
 801299e:	edd3 7a05 	vldr	s15, [r3, #20]
 80129a2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80129a6:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 80129aa:	4770      	bx	lr

080129ac <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 80129ac:	b538      	push	{r3, r4, r5, lr}
 80129ae:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 80129b2:	698d      	ldr	r5, [r1, #24]
{
 80129b4:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80129b6:	201c      	movs	r0, #28
{
 80129b8:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80129bc:	4629      	mov	r1, r5
{
 80129be:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80129c2:	f001 fdc5 	bl	8014550 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 80129c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 80129ca:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80129cc:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 80129ce:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 80129d0:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 80129d4:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 80129d8:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 80129dc:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 80129de:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 80129e0:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 80129e2:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 80129e4:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 80129e8:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 80129ec:	ed80 7a05 	vstr	s14, [r0, #20]
}
 80129f0:	ecbd 8b02 	vpop	{d8}
 80129f4:	bd38      	pop	{r3, r4, r5, pc}
 80129f6:	bf00      	nop

080129f8 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 80129f8:	6803      	ldr	r3, [r0, #0]
{
 80129fa:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 80129fe:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8012a02:	ed83 7a03 	vstr	s14, [r3, #12]
    if (in >= s->prevOut)
 8012a06:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8012a0a:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8012a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8012a12:	bf94      	ite	ls
 8012a14:	edd3 6a04 	vldrls	s13, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8012a18:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8012a1c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012a20:	eeb0 0a67 	vmov.f32	s0, s15
 8012a24:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8012a28:	edc3 7a01 	vstr	s15, [r3, #4]
    return s->currentOut;
}
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop

08012a30 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012a36:	6996      	ldr	r6, [r2, #24]
{
 8012a38:	4607      	mov	r7, r0
 8012a3a:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8012a3c:	2044      	movs	r0, #68	; 0x44
 8012a3e:	4631      	mov	r1, r6
{
 8012a40:	eef0 8a40 	vmov.f32	s17, s0
 8012a44:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8012a48:	f001 fd82 	bl	8014550 <mpool_alloc>
 8012a4c:	6038      	str	r0, [r7, #0]
 8012a4e:	4604      	mov	r4, r0
    svf->mempool = m;
 8012a50:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 8012a52:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 8012a54:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012a56:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012b08 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
 8012a5a:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012a5c:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8012a60:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 8012a62:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 8012a66:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012a68:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8012a6c:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 8012a70:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 8012a72:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 8012a74:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 8012a78:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012a7c:	f007 f898 	bl	8019bb0 <tanf>
    svf->k = 1.0f/Q;
 8012a80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8012a84:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 8012a88:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 8012a8a:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8012a8c:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 8012a90:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 8012a92:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 8012a94:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012a98:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 8012a9c:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012aa0:	eeb0 7a67 	vmov.f32	s14, s15
 8012aa4:	eea0 7a26 	vfma.f32	s14, s0, s13
 8012aa8:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8012aac:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012ab0:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8012ab4:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8012ab8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8012abc:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8012ac0:	d007      	beq.n	8012ad2 <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8012ac2:	2d02      	cmp	r5, #2
 8012ac4:	d008      	beq.n	8012ad8 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 8012ac6:	b96d      	cbnz	r5, 8012ae4 <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8012ac8:	4b10      	ldr	r3, [pc, #64]	; (8012b0c <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8012aca:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8012ace:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8012ad0:	6363      	str	r3, [r4, #52]	; 0x34
}
 8012ad2:	ecbd 8b02 	vpop	{d8}
 8012ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 8012ad8:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 8012adc:	6366      	str	r6, [r4, #52]	; 0x34
}
 8012ade:	ecbd 8b02 	vpop	{d8}
 8012ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 8012ae4:	2d03      	cmp	r5, #3
 8012ae6:	d009      	beq.n	8012afc <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 8012ae8:	2d04      	cmp	r5, #4
 8012aea:	d1f2      	bne.n	8012ad2 <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8012aec:	4a07      	ldr	r2, [pc, #28]	; (8012b0c <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 8012aee:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8012af2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8012af6:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8012af8:	6363      	str	r3, [r4, #52]	; 0x34
}
 8012afa:	e7ea      	b.n	8012ad2 <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 8012afc:	4b03      	ldr	r3, [pc, #12]	; (8012b0c <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8012afe:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 8012b02:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 8012b04:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8012b06:	e7e4      	b.n	8012ad2 <tSVF_init+0xa2>
 8012b08:	40490fdb 	.word	0x40490fdb
 8012b0c:	bf800000 	.word	0xbf800000

08012b10 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8012b10:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012b12:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8012b16:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012b1a:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012b1e:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012b22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8012b26:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012b2a:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 8012b2e:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 8012b32:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012b36:	edd3 2a08 	vldr	s5, [r3, #32]
 8012b3a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b3e:	ed93 2a07 	vldr	s4, [r3, #28]
 8012b42:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8012b46:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8012b4a:	eea2 5a23 	vfma.f32	s10, s4, s7
 8012b4e:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8012b52:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8012b56:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012b5a:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8012b5e:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8012b62:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8012b66:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8012b6a:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8012b6e:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8012b72:	eea3 7a80 	vfma.f32	s14, s7, s0
 8012b76:	eeb0 0a47 	vmov.f32	s0, s14
 8012b7a:	4770      	bx	lr

08012b7c <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 8012b7c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012b80:	4a18      	ldr	r2, [pc, #96]	; (8012be4 <tSVF_setFreqFast+0x68>)
 8012b82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 8012b86:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8012b88:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012b8c:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012b90:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8012b94:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012b98:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 8012b9c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012ba0:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8012ba4:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012ba8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012bac:	ed90 6a00 	vldr	s12, [r0]
 8012bb0:	ee20 0a25 	vmul.f32	s0, s0, s11
 8012bb4:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012bb8:	eef0 6a67 	vmov.f32	s13, s15
 8012bbc:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8012bc0:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012bc4:	eee0 6a07 	vfma.f32	s13, s0, s14
 8012bc8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 8012bcc:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012bd0:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8012bd4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8012bd8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8012bdc:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop
 8012be4:	0801ba1c 	.word	0x0801ba1c

08012be8 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8012be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8012bec:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012bee:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8012bf2:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8012bf6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012bfa:	eeb0 6a47 	vmov.f32	s12, s14
 8012bfe:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8012c02:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012c06:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8012c0a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8012c0e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8012c12:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8012c16:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8012c1a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8012c1e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8012c22:	4770      	bx	lr

08012c24 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8012c24:	b538      	push	{r3, r4, r5, lr}
 8012c26:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012c2a:	698c      	ldr	r4, [r1, #24]
{
 8012c2c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8012c2e:	2018      	movs	r0, #24
{
 8012c30:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8012c34:	4621      	mov	r1, r4
 8012c36:	f001 fcef 	bl	8014618 <mpool_calloc>
 8012c3a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8012c3c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012c3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012c42:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8012c44:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012c46:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8012c4a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012c4c:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8012c50:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8012c52:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8012c56:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8012c5a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8012c5e:	ecbd 8b02 	vpop	{d8}
 8012c62:	bd38      	pop	{r3, r4, r5, pc}

08012c64 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8012c64:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8012c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8012c6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8012c6e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8012c72:	ed83 0a01 	vstr	s0, [r3, #4]
 8012c76:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8012c7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012c7e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8012c82:	4770      	bx	lr

08012c84 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8012c84:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012c86:	edd3 6a03 	vldr	s13, [r3, #12]
 8012c8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8012c8e:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012c92:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8012c96:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8012c9a:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012c9e:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8012ca2:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8012ca6:	edd3 4a08 	vldr	s9, [r3, #32]
 8012caa:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012cae:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012cb2:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8012cb6:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8012cba:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012cbe:	eeb0 5a47 	vmov.f32	s10, s14
 8012cc2:	eea4 0a87 	vfma.f32	s0, s9, s14
 8012cc6:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012cca:	eef0 7a66 	vmov.f32	s15, s13
}
 8012cce:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012cd2:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012cd6:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012cda:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8012cde:	4770      	bx	lr

08012ce0 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8012ce0:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8012ce2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012ce4:	eddf 7a98 	vldr	s15, [pc, #608]	; 8012f48 <tVZFilter_calcCoeffs+0x268>
{
 8012ce8:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012cec:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8012cf0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8012cf4:	ee68 8a87 	vmul.f32	s17, s17, s14
 8012cf8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012cfc:	eeb0 0a68 	vmov.f32	s0, s17
 8012d00:	f006 ff56 	bl	8019bb0 <tanf>
    
    switch( f->type )
 8012d04:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012d06:	eeb0 8a40 	vmov.f32	s16, s0
 8012d0a:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8012d0e:	2b0a      	cmp	r3, #10
 8012d10:	f200 8117 	bhi.w	8012f42 <tVZFilter_calcCoeffs+0x262>
 8012d14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012d18:	002f0026 	.word	0x002f0026
 8012d1c:	00410038 	.word	0x00410038
 8012d20:	0056004d 	.word	0x0056004d
 8012d24:	00a1008b 	.word	0x00a1008b
 8012d28:	010a00b7 	.word	0x010a00b7
 8012d2c:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8012d2e:	edd4 7a05 	vldr	s15, [r4, #20]
 8012d32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012d36:	eeb1 7a67 	vneg.f32	s14, s15
 8012d3a:	61e3      	str	r3, [r4, #28]
 8012d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8012d3e:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8012d46:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012d4a:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8012d4e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012d52:	eee7 6a88 	vfma.f32	s13, s15, s16
 8012d56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012d5a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8012d5e:	ecbd 8b02 	vpop	{d8}
 8012d62:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012d64:	2300      	movs	r3, #0
 8012d66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012d6a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012d6e:	61e3      	str	r3, [r4, #28]
 8012d70:	6223      	str	r3, [r4, #32]
 8012d72:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8012d74:	e7e5      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8012d76:	2300      	movs	r3, #0
 8012d78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012d7c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8012d80:	6223      	str	r3, [r4, #32]
 8012d82:	6263      	str	r3, [r4, #36]	; 0x24
 8012d84:	61e2      	str	r2, [r4, #28]
            break;
 8012d86:	e7dc      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8012d88:	2300      	movs	r3, #0
 8012d8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8012d8e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8012d92:	61e3      	str	r3, [r4, #28]
 8012d94:	6263      	str	r3, [r4, #36]	; 0x24
 8012d96:	6222      	str	r2, [r4, #32]
            break;
 8012d98:	e7d3      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8012d9a:	edd4 7a05 	vldr	s15, [r4, #20]
 8012d9e:	2300      	movs	r3, #0
 8012da0:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012da4:	61e3      	str	r3, [r4, #28]
 8012da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012daa:	6263      	str	r3, [r4, #36]	; 0x24
 8012dac:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8012db0:	e7c7      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012db2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012db6:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8012db8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012dbc:	6222      	str	r2, [r4, #32]
 8012dbe:	61e3      	str	r3, [r4, #28]
 8012dc0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8012dc2:	e7be      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012dc4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8012dc8:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8012dcc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012dd0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012dd4:	f006 fd8c 	bl	80198f0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012dd8:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012ddc:	f006 fee8 	bl	8019bb0 <tanf>
            float r  = f->g/wl;
 8012de0:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012de4:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8012de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012dec:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8012df0:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012df4:	ed84 7a07 	vstr	s14, [r4, #28]
 8012df8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e00:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8012e04:	eef0 6a47 	vmov.f32	s13, s14
 8012e08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012e0c:	ee77 7a45 	vsub.f32	s15, s14, s10
 8012e10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012e14:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012e18:	eef1 7ac7 	vsqrt.f32	s15, s14
 8012e1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012e20:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e24:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012e28:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8012e2c:	e789      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8012e2e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012e32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012e36:	edd4 7a05 	vldr	s15, [r4, #20]
 8012e3a:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012e3e:	ed84 7a07 	vstr	s14, [r4, #28]
 8012e42:	6263      	str	r3, [r4, #36]	; 0x24
 8012e44:	ee27 6a27 	vmul.f32	s12, s14, s15
 8012e48:	ed84 6a08 	vstr	s12, [r4, #32]
 8012e4c:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012e50:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8012e54:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8012e58:	e773      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8012e5a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8012e5e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012e62:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012e66:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8012e6a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8012e6e:	61e3      	str	r3, [r4, #28]
 8012e70:	ee27 6a27 	vmul.f32	s12, s14, s15
 8012e74:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012e78:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8012e7c:	ee20 8a07 	vmul.f32	s16, s0, s14
 8012e80:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8012e84:	e75d      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8012e86:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012e8a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012e8e:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8012e92:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8012f4c <tVZFilter_calcCoeffs+0x26c>
 8012e96:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8012e9a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8012e9e:	eeb0 0a48 	vmov.f32	s0, s16
 8012ea2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012ea6:	f001 fb35 	bl	8014514 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012eaa:	eddf 0a28 	vldr	s1, [pc, #160]	; 8012f4c <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8012eae:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012eb2:	eeb0 0a68 	vmov.f32	s0, s17
 8012eb6:	f001 fb31 	bl	801451c <minimum>
            f->cB = 1.0f-x*x;
 8012eba:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012ebe:	edd4 7a05 	vldr	s15, [r4, #20]
 8012ec2:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8012ec6:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012eca:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8012ece:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012ed2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012ed6:	ee76 5a06 	vadd.f32	s11, s12, s12
 8012eda:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8012ede:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012ee2:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012ee6:	eee0 7a00 	vfma.f32	s15, s0, s0
 8012eea:	eee0 7a65 	vfms.f32	s15, s0, s11
 8012eee:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8012ef2:	f001 f8eb 	bl	80140cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8012ef6:	edd4 5a07 	vldr	s11, [r4, #28]
 8012efa:	ed94 6a08 	vldr	s12, [r4, #32]
 8012efe:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8012f02:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012f06:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8012f0a:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012f0e:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8012f12:	ee65 5a80 	vmul.f32	s11, s11, s0
 8012f16:	ee26 6a00 	vmul.f32	s12, s12, s0
 8012f1a:	ee26 0a80 	vmul.f32	s0, s13, s0
 8012f1e:	edc4 5a07 	vstr	s11, [r4, #28]
 8012f22:	ed84 6a08 	vstr	s12, [r4, #32]
 8012f26:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8012f2a:	e70a      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8012f2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8012f30:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8012f34:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8012f36:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8012f3a:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8012f3e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8012f40:	e6ff      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8012f42:	edd4 7a05 	vldr	s15, [r4, #20]
 8012f46:	e6fc      	b.n	8012d42 <tVZFilter_calcCoeffs+0x62>
 8012f48:	40490fdb 	.word	0x40490fdb
 8012f4c:	00000000 	.word	0x00000000

08012f50 <tVZFilter_initToPool>:
{
 8012f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8012f52:	6817      	ldr	r7, [r2, #0]
{
 8012f54:	4605      	mov	r5, r0
 8012f56:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8012f58:	204c      	movs	r0, #76	; 0x4c
 8012f5a:	4639      	mov	r1, r7
{
 8012f5c:	ed2d 8b04 	vpush	{d8-d9}
 8012f60:	b083      	sub	sp, #12
 8012f62:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012f66:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8012f6a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8013074 <tVZFilter_initToPool+0x124>
{
 8012f6e:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8012f72:	f001 faed 	bl	8014550 <mpool_alloc>
 8012f76:	6028      	str	r0, [r5, #0]
 8012f78:	4604      	mov	r4, r0
    f->mempool = m;
 8012f7a:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012f7c:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8012f80:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012f82:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 8012f86:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012f8a:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8013078 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 8012f8e:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012f92:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8012f96:	685b      	ldr	r3, [r3, #4]
 8012f98:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012f9a:	f001 f955 	bl	8014248 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8012f9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801307c <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 8012fa2:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012fa6:	ee20 6a09 	vmul.f32	s12, s0, s18
 8012faa:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8012fae:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 8012fb2:	4b33      	ldr	r3, [pc, #204]	; (8013080 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8012fb4:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 8012fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 8012fba:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8012fbe:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012fc2:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012fc6:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 8012fca:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 8012fcc:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8012fd0:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8012fd4:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8012fd8:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8012fdc:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012fe0:	f006 fde6 	bl	8019bb0 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012fe4:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8013084 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8012fe8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012fec:	eef0 0a68 	vmov.f32	s1, s17
 8012ff0:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8012ff4:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012ff6:	f001 f927 	bl	8014248 <LEAF_clip>
 8012ffa:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8012ffe:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013002:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8013006:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 801300a:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 801300c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013010:	f006 fc6e 	bl	80198f0 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8013014:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8013018:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 801301c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013020:	ee67 7a89 	vmul.f32	s15, s15, s18
 8013024:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013028:	f006 fdc2 	bl	8019bb0 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 801302c:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8013030:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8013034:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8013036:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 801303a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801303e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013046:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801304a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801304e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013052:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8013056:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801305a:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 801305e:	f7ff fe3f 	bl	8012ce0 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8013062:	4628      	mov	r0, r5
}
 8013064:	b003      	add	sp, #12
 8013066:	ecbd 8b04 	vpop	{d8-d9}
 801306a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 801306e:	f7ff be37 	b.w	8012ce0 <tVZFilter_calcCoeffs>
 8013072:	bf00      	nop
 8013074:	00000000 	.word	0x00000000
 8013078:	40490fdb 	.word	0x40490fdb
 801307c:	3fb504f3 	.word	0x3fb504f3
 8013080:	3f3504f3 	.word	0x3f3504f3
 8013084:	42c80000 	.word	0x42c80000

08013088 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8013088:	3218      	adds	r2, #24
 801308a:	f7ff bf61 	b.w	8012f50 <tVZFilter_initToPool>
 801308e:	bf00      	nop

08013090 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8013090:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013094:	4baa      	ldr	r3, [pc, #680]	; (8013340 <tVZFilter_setFreqFast+0x2b0>)
 8013096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 801309a:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801309e:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 80130a2:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80130a6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 80130aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80130ae:	ed91 6a01 	vldr	s12, [r1, #4]
{
 80130b2:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 80130b4:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 80130b8:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80130ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80130be:	edd1 6a00 	vldr	s13, [r1]
 80130c2:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 80130c6:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80130ca:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 80130ce:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80130d0:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 80130d4:	2a0a      	cmp	r2, #10
 80130d6:	f200 812f 	bhi.w	8013338 <tVZFilter_setFreqFast+0x2a8>
 80130da:	e8df f012 	tbh	[pc, r2, lsl #1]
 80130de:	0026      	.short	0x0026
 80130e0:	0038002f 	.word	0x0038002f
 80130e4:	004d0041 	.word	0x004d0041
 80130e8:	009b0056 	.word	0x009b0056
 80130ec:	00cf00b5 	.word	0x00cf00b5
 80130f0:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80130f4:	ed94 7a05 	vldr	s14, [r4, #20]
 80130f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80130fc:	eef1 6a47 	vneg.f32	s13, s14
 8013100:	61e3      	str	r3, [r4, #28]
 8013102:	6263      	str	r3, [r4, #36]	; 0x24
 8013104:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8013108:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801310c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8013110:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013114:	eef0 6a47 	vmov.f32	s13, s14
 8013118:	eee0 6a27 	vfma.f32	s13, s0, s15
 801311c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013120:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8013124:	ecbd 8b02 	vpop	{d8}
 8013128:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801312a:	2300      	movs	r3, #0
 801312c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013130:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013134:	61e3      	str	r3, [r4, #28]
 8013136:	6223      	str	r3, [r4, #32]
 8013138:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 801313a:	e7e5      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801313c:	2300      	movs	r3, #0
 801313e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013142:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013146:	6223      	str	r3, [r4, #32]
 8013148:	6263      	str	r3, [r4, #36]	; 0x24
 801314a:	61e2      	str	r2, [r4, #28]
            break;
 801314c:	e7dc      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 801314e:	2300      	movs	r3, #0
 8013150:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013154:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013158:	61e3      	str	r3, [r4, #28]
 801315a:	6263      	str	r3, [r4, #36]	; 0x24
 801315c:	6222      	str	r2, [r4, #32]
            break;
 801315e:	e7d3      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013160:	ed94 7a05 	vldr	s14, [r4, #20]
 8013164:	2300      	movs	r3, #0
 8013166:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801316a:	61e3      	str	r3, [r4, #28]
 801316c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013170:	6263      	str	r3, [r4, #36]	; 0x24
 8013172:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8013176:	e7c7      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013178:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801317c:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 801317e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013182:	6222      	str	r2, [r4, #32]
 8013184:	61e3      	str	r3, [r4, #28]
 8013186:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013188:	e7be      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801318a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801318e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8013192:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8013196:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801319a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801319e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80131a2:	f000 ffd7 	bl	8014154 <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80131a6:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80131aa:	eddf 7a66 	vldr	s15, [pc, #408]	; 8013344 <tVZFilter_setFreqFast+0x2b4>
 80131ae:	ee28 8a07 	vmul.f32	s16, s16, s14
 80131b2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80131b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80131ba:	f000 ff73 	bl	80140a4 <fastertanf>
            float r  = f->g/wl;
 80131be:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80131c2:	eeb0 5a68 	vmov.f32	s10, s17
 80131c6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 80131ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80131ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80131d2:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80131d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80131da:	eea7 5aa7 	vfma.f32	s10, s15, s15
 80131de:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80131e2:	ee77 7a65 	vsub.f32	s15, s14, s11
 80131e6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80131ea:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80131ee:	f000 ff6d 	bl	80140cc <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80131f2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 80131f6:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80131fa:	edc4 8a07 	vstr	s17, [r4, #28]
 80131fe:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013202:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013206:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801320a:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801320e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8013212:	e779      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8013214:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8013218:	f000 ff58 	bl	80140cc <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801321c:	f000 ff56 	bl	80140cc <fastsqrtf>
 8013220:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013224:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013228:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801322c:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013230:	ed94 7a05 	vldr	s14, [r4, #20]
 8013234:	edc4 6a07 	vstr	s13, [r4, #28]
 8013238:	6263      	str	r3, [r4, #36]	; 0x24
 801323a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801323e:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013242:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 8013246:	e75f      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8013248:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801324c:	f000 ff3e 	bl	80140cc <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013250:	f000 ff3c 	bl	80140cc <fastsqrtf>
 8013254:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013258:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801325c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013260:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013264:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013268:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 801326c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013270:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013272:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013276:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801327a:	e745      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 801327c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013280:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013284:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013288:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8013348 <tVZFilter_setFreqFast+0x2b8>
 801328c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013290:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013294:	eeb0 0a48 	vmov.f32	s0, s16
 8013298:	eea7 0a67 	vfms.f32	s0, s14, s15
 801329c:	f001 f93a 	bl	8014514 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80132a0:	eddf 0a29 	vldr	s1, [pc, #164]	; 8013348 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80132a4:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80132a8:	eeb0 0a68 	vmov.f32	s0, s17
 80132ac:	f001 f936 	bl	801451c <minimum>
            f->cB = 1.0f-x*x;
 80132b0:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80132b4:	edd4 7a05 	vldr	s15, [r4, #20]
 80132b8:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80132bc:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80132c0:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80132c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80132c8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80132cc:	ee76 5a06 	vadd.f32	s11, s12, s12
 80132d0:	ee38 8a08 	vadd.f32	s16, s16, s16
 80132d4:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80132d8:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80132dc:	eee6 7a06 	vfma.f32	s15, s12, s12
 80132e0:	eee0 7a00 	vfma.f32	s15, s0, s0
 80132e4:	eee0 7a65 	vfms.f32	s15, s0, s11
 80132e8:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80132ec:	f000 feee 	bl	80140cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80132f0:	edd4 5a07 	vldr	s11, [r4, #28]
 80132f4:	ed94 6a08 	vldr	s12, [r4, #32]
 80132f8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80132fc:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013300:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 8013304:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8013308:	ee65 5a80 	vmul.f32	s11, s11, s0
 801330c:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013310:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013314:	edc4 5a07 	vstr	s11, [r4, #28]
 8013318:	ed84 6a08 	vstr	s12, [r4, #32]
 801331c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013320:	e6f2      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 8013322:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8013326:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801332a:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801332c:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8013330:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 8013334:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013336:	e6e7      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 8013338:	ed94 7a05 	vldr	s14, [r4, #20]
 801333c:	e6e4      	b.n	8013108 <tVZFilter_setFreqFast+0x78>
 801333e:	bf00      	nop
 8013340:	0801ba1c 	.word	0x0801ba1c
 8013344:	40490fdb 	.word	0x40490fdb
 8013348:	00000000 	.word	0x00000000

0801334c <tVZFilter_setGain>:
{
 801334c:	b538      	push	{r3, r4, r5, lr}
 801334e:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013352:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801337c <tVZFilter_setGain+0x30>
 8013356:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8013380 <tVZFilter_setGain+0x34>
{
 801335a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 801335c:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801335e:	f000 ff73 	bl	8014248 <LEAF_clip>
    f->invG = 1.0f/f->G;
 8013362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8013366:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8013368:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 801336c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013370:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 8013374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8013378:	f7ff bcb2 	b.w	8012ce0 <tVZFilter_calcCoeffs>
 801337c:	457a0000 	.word	0x457a0000
 8013380:	358637bd 	.word	0x358637bd

08013384 <tVZFilter_setResonance>:
{
 8013384:	b538      	push	{r3, r4, r5, lr}
 8013386:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801338a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80133b4 <tVZFilter_setResonance+0x30>
 801338e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80133b8 <tVZFilter_setResonance+0x34>
{
 8013392:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8013394:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8013396:	f000 ff57 	bl	8014248 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 801339a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 801339e:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 80133a0:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 80133a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133a8:	edc5 7a05 	vstr	s15, [r5, #20]
}
 80133ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80133b0:	f7ff bc96 	b.w	8012ce0 <tVZFilter_calcCoeffs>
 80133b4:	42c80000 	.word	0x42c80000
 80133b8:	3c23d70a 	.word	0x3c23d70a

080133bc <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 80133bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 80133c0:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80133c2:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8013638 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 80133c6:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 80133ca:	b510      	push	{r4, lr}
 80133cc:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 80133d0:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 80133d4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 80133d8:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80133da:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80133de:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 80133e2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80133e6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80133ea:	eeb0 0a68 	vmov.f32	s0, s17
 80133ee:	f006 fbdf 	bl	8019bb0 <tanf>
    switch( f->type )
 80133f2:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80133f4:	eeb0 8a40 	vmov.f32	s16, s0
 80133f8:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 80133fc:	2b0a      	cmp	r3, #10
 80133fe:	f200 8117 	bhi.w	8013630 <tVZFilter_setSampleRate+0x274>
 8013402:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013406:	0026      	.short	0x0026
 8013408:	0038002f 	.word	0x0038002f
 801340c:	004d0041 	.word	0x004d0041
 8013410:	008b0056 	.word	0x008b0056
 8013414:	00b700a1 	.word	0x00b700a1
 8013418:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 801341c:	edd4 7a05 	vldr	s15, [r4, #20]
 8013420:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013424:	eeb1 7a67 	vneg.f32	s14, s15
 8013428:	61e3      	str	r3, [r4, #28]
 801342a:	6263      	str	r3, [r4, #36]	; 0x24
 801342c:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8013434:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013438:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 801343c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013440:	eee7 6a88 	vfma.f32	s13, s15, s16
 8013444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013448:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 801344c:	ecbd 8b02 	vpop	{d8}
 8013450:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013452:	2300      	movs	r3, #0
 8013454:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013458:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801345c:	61e3      	str	r3, [r4, #28]
 801345e:	6223      	str	r3, [r4, #32]
 8013460:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8013462:	e7e5      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013464:	2300      	movs	r3, #0
 8013466:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801346a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801346e:	6223      	str	r3, [r4, #32]
 8013470:	6263      	str	r3, [r4, #36]	; 0x24
 8013472:	61e2      	str	r2, [r4, #28]
            break;
 8013474:	e7dc      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013476:	2300      	movs	r3, #0
 8013478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801347c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013480:	61e3      	str	r3, [r4, #28]
 8013482:	6263      	str	r3, [r4, #36]	; 0x24
 8013484:	6222      	str	r2, [r4, #32]
            break;
 8013486:	e7d3      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013488:	edd4 7a05 	vldr	s15, [r4, #20]
 801348c:	2300      	movs	r3, #0
 801348e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8013492:	61e3      	str	r3, [r4, #28]
 8013494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013498:	6263      	str	r3, [r4, #36]	; 0x24
 801349a:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 801349e:	e7c7      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80134a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80134a4:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 80134a6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80134aa:	6222      	str	r2, [r4, #32]
 80134ac:	61e3      	str	r3, [r4, #28]
 80134ae:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80134b0:	e7be      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80134b2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80134b6:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80134ba:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80134be:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80134c2:	f006 fa15 	bl	80198f0 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80134c6:	ee28 0a80 	vmul.f32	s0, s17, s0
 80134ca:	f006 fb71 	bl	8019bb0 <tanf>
            float r  = f->g/wl;
 80134ce:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80134d2:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80134d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80134da:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80134de:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80134e2:	ed84 7a07 	vstr	s14, [r4, #28]
 80134e6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80134ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80134ee:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80134f2:	eef0 6a47 	vmov.f32	s13, s14
 80134f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80134fa:	ee77 7a45 	vsub.f32	s15, s14, s10
 80134fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013502:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8013506:	eef1 7ac7 	vsqrt.f32	s15, s14
 801350a:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801350e:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013512:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013516:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 801351a:	e789      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 801351c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013520:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013524:	edd4 7a05 	vldr	s15, [r4, #20]
 8013528:	eef1 6ac7 	vsqrt.f32	s13, s14
 801352c:	ed84 7a07 	vstr	s14, [r4, #28]
 8013530:	6263      	str	r3, [r4, #36]	; 0x24
 8013532:	ee27 6a27 	vmul.f32	s12, s14, s15
 8013536:	ed84 6a08 	vstr	s12, [r4, #32]
 801353a:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801353e:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8013542:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8013546:	e773      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8013548:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 801354c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013550:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013554:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013558:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 801355c:	61e3      	str	r3, [r4, #28]
 801355e:	ee27 6a27 	vmul.f32	s12, s14, s15
 8013562:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013566:	eeb1 7ae6 	vsqrt.f32	s14, s13
 801356a:	ee20 8a07 	vmul.f32	s16, s0, s14
 801356e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8013572:	e75d      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 8013574:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013578:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801357c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013580:	eddf 0a2e 	vldr	s1, [pc, #184]	; 801363c <tVZFilter_setSampleRate+0x280>
 8013584:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013588:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801358c:	eeb0 0a48 	vmov.f32	s0, s16
 8013590:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013594:	f000 ffbe 	bl	8014514 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013598:	eddf 0a28 	vldr	s1, [pc, #160]	; 801363c <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801359c:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80135a0:	eeb0 0a68 	vmov.f32	s0, s17
 80135a4:	f000 ffba 	bl	801451c <minimum>
            f->cB = 1.0f-x*x;
 80135a8:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135ac:	edd4 7a05 	vldr	s15, [r4, #20]
 80135b0:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80135b4:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135b8:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80135bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80135c0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135c4:	ee76 5a06 	vadd.f32	s11, s12, s12
 80135c8:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80135cc:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135d0:	eee6 7a06 	vfma.f32	s15, s12, s12
 80135d4:	eee0 7a00 	vfma.f32	s15, s0, s0
 80135d8:	eee0 7a65 	vfms.f32	s15, s0, s11
 80135dc:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80135e0:	f000 fd74 	bl	80140cc <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80135e4:	edd4 5a07 	vldr	s11, [r4, #28]
 80135e8:	ed94 6a08 	vldr	s12, [r4, #32]
 80135ec:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80135f0:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135f4:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 80135f8:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80135fc:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8013600:	ee65 5a80 	vmul.f32	s11, s11, s0
 8013604:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013608:	ee26 0a80 	vmul.f32	s0, s13, s0
 801360c:	edc4 5a07 	vstr	s11, [r4, #28]
 8013610:	ed84 6a08 	vstr	s12, [r4, #32]
 8013614:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013618:	e70a      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 801361a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801361e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8013622:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8013624:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8013628:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 801362c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801362e:	e6ff      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
 8013630:	edd4 7a05 	vldr	s15, [r4, #20]
 8013634:	e6fc      	b.n	8013430 <tVZFilter_setSampleRate+0x74>
 8013636:	bf00      	nop
 8013638:	40490fdb 	.word	0x40490fdb
 801363c:	00000000 	.word	0x00000000

08013640 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013646:	698d      	ldr	r5, [r1, #24]
{
 8013648:	eeb0 8a40 	vmov.f32	s16, s0
 801364c:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801364e:	2040      	movs	r0, #64	; 0x40
 8013650:	4629      	mov	r1, r5
{
 8013652:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8013656:	f000 ff7b 	bl	8014550 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801365a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80136d4 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801365e:	6030      	str	r0, [r6, #0]
 8013660:	4604      	mov	r4, r0
    f->mempool = m;
 8013662:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8013664:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 8013668:	686b      	ldr	r3, [r5, #4]
 801366a:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 801366e:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8013672:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 8013676:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801367a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801367e:	f005 ff63 	bl	8019548 <tan>
    f->r = (7.f * resonance + 0.5f);
 8013682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013686:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 801368a:	4913      	ldr	r1, [pc, #76]	; (80136d8 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 801368c:	4b13      	ldr	r3, [pc, #76]	; (80136dc <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 801368e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 8013692:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 8013696:	2000      	movs	r0, #0
    f->n = 1.836f;
 8013698:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801369a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 801369e:	4910      	ldr	r1, [pc, #64]	; (80136e0 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 80136a0:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 80136a4:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 80136a6:	4b0f      	ldr	r3, [pc, #60]	; (80136e4 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 80136a8:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 80136aa:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 80136ac:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 80136ae:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 80136b0:	480d      	ldr	r0, [pc, #52]	; (80136e8 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 80136b2:	490e      	ldr	r1, [pc, #56]	; (80136ec <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 80136b4:	4a0e      	ldr	r2, [pc, #56]	; (80136f0 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 80136b6:	4b0f      	ldr	r3, [pc, #60]	; (80136f4 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80136b8:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 80136bc:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 80136c0:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 80136c4:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 80136c6:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 80136c8:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 80136ca:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80136cc:	ecbd 8b02 	vpop	{d8}
 80136d0:	bd70      	pop	{r4, r5, r6, pc}
 80136d2:	bf00      	nop
 80136d4:	40490fdb 	.word	0x40490fdb
 80136d8:	3feb020c 	.word	0x3feb020c
 80136dc:	3f6b020c 	.word	0x3f6b020c
 80136e0:	3c23d70a 	.word	0x3c23d70a
 80136e4:	3ca3d70a 	.word	0x3ca3d70a
 80136e8:	3cf5c28f 	.word	0x3cf5c28f
 80136ec:	3f0b6efd 	.word	0x3f0b6efd
 80136f0:	3e39e952 	.word	0x3e39e952
 80136f4:	3d23d70a 	.word	0x3d23d70a

080136f8 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 80136f8:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80136fa:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80136fe:	ed9f 2aba 	vldr	s4, [pc, #744]	; 80139e8 <tDiodeFilter_tick+0x2f0>
 8013702:	eddf 7aba 	vldr	s15, [pc, #744]	; 80139ec <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013706:	eddf 0aba 	vldr	s1, [pc, #744]	; 80139f0 <tDiodeFilter_tick+0x2f8>
 801370a:	eeb0 1a67 	vmov.f32	s2, s15
{
 801370e:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013712:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013716:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801371a:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801371e:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8013722:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013726:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801372a:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 801372e:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8013732:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013736:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 801373a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801373e:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013742:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013746:	eea4 7a84 	vfma.f32	s14, s9, s8
 801374a:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801374e:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013752:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8013756:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801375a:	ee27 7a22 	vmul.f32	s14, s14, s5
 801375e:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8013762:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013766:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801376a:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801376e:	ee77 4a20 	vadd.f32	s9, s14, s1
 8013772:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013776:	eef0 4a67 	vmov.f32	s9, s15
 801377a:	eee7 4a04 	vfma.f32	s9, s14, s8
 801377e:	eeb0 7a42 	vmov.f32	s14, s4
 8013782:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013786:	ee81 4a24 	vdiv.f32	s8, s2, s9
 801378a:	ee75 4aa0 	vadd.f32	s9, s11, s1
 801378e:	eeb0 1a67 	vmov.f32	s2, s15
 8013792:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013796:	eef0 4a67 	vmov.f32	s9, s15
 801379a:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801379e:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80137a2:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80137a6:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80137aa:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 80137ae:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80137b2:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80137b6:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80137ba:	ee24 4a06 	vmul.f32	s8, s8, s12
 80137be:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 80137c2:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80137c6:	ee25 5a25 	vmul.f32	s10, s10, s11
 80137ca:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 80137ce:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80137d2:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 80137d6:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80137da:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80137de:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80137e2:	eee5 9a88 	vfma.f32	s19, s11, s16
 80137e6:	eeb0 8a67 	vmov.f32	s16, s15
 80137ea:	eee1 8a09 	vfma.f32	s17, s2, s18
 80137ee:	eeb0 9a67 	vmov.f32	s18, s15
 80137f2:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80137f6:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80137fa:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80137fe:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8013802:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013806:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801380a:	eec2 5a09 	vdiv.f32	s11, s4, s18
 801380e:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013812:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013816:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801381a:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801381e:	eea1 9a25 	vfma.f32	s18, s2, s11
 8013822:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013826:	eee1 aaa2 	vfma.f32	s21, s3, s5
 801382a:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801382e:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013832:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013836:	ee89 2a28 	vdiv.f32	s4, s18, s17
 801383a:	eec7 5a88 	vdiv.f32	s11, s15, s16
 801383e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013842:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013846:	ee31 1a20 	vadd.f32	s2, s2, s1
 801384a:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801384e:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013852:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013856:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801385a:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801385e:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013862:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013866:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801386a:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801386e:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013872:	eeaa aa87 	vfma.f32	s20, s21, s14
 8013876:	ee68 aa07 	vmul.f32	s21, s16, s14
 801387a:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801387e:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013882:	eeea 5a82 	vfma.f32	s11, s21, s4
 8013886:	eeb0 1a65 	vmov.f32	s2, s11
 801388a:	eef0 5a45 	vmov.f32	s11, s10
 801388e:	eeea 5a89 	vfma.f32	s11, s21, s18
 8013892:	eee1 5a27 	vfma.f32	s11, s2, s15
 8013896:	ee35 1a09 	vadd.f32	s2, s10, s18
 801389a:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801389e:	ee66 9a87 	vmul.f32	s19, s13, s14
 80138a2:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80138a6:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80138aa:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80138ae:	eee1 5a06 	vfma.f32	s11, s2, s12
 80138b2:	eeb0 1a66 	vmov.f32	s2, s13
 80138b6:	eea9 1a89 	vfma.f32	s2, s19, s18
 80138ba:	eea2 1a27 	vfma.f32	s2, s4, s15
 80138be:	ee34 2a04 	vadd.f32	s4, s8, s8
 80138c2:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80138c6:	eeb0 2a41 	vmov.f32	s4, s2
 80138ca:	eea0 4aa7 	vfma.f32	s8, s1, s15
 80138ce:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 80138d2:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 80138d6:	eef4 5a44 	vcmp.f32	s11, s8
 80138da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 80138de:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80138e2:	bf14      	ite	ne
 80138e4:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 80138e8:	eddf 5a42 	vldreq	s11, [pc, #264]	; 80139f4 <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 80138f0:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 80138f4:	d069      	beq.n	80139ca <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 80138f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80138fa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80138fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013902:	ee37 2a02 	vadd.f32	s4, s14, s4
 8013906:	d069      	beq.n	80139dc <tDiodeFilter_tick+0x2e4>
 8013908:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801390c:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8013910:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 8013914:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013918:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 801391c:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8013920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013924:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8013928:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 801392c:	bf08      	it	eq
 801392e:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 80139f4 <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
 8013932:	eeb0 0a61 	vmov.f32	s0, s3
 8013936:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801393a:	ee38 4a06 	vadd.f32	s8, s16, s12
 801393e:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013942:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013946:	eed4 8a20 	vfnms.f32	s17, s8, s1
 801394a:	eea6 8a20 	vfma.f32	s16, s12, s1
 801394e:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013952:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8013956:	eee7 1a84 	vfma.f32	s3, s15, s8
 801395a:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801395e:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013962:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8013966:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801396a:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 801396e:	ee74 1a60 	vsub.f32	s3, s8, s1
 8013972:	ee61 1a86 	vmul.f32	s3, s3, s12
 8013976:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801397a:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801397e:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013982:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013986:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801398a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 801398e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013992:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013996:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 801399a:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801399e:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80139a2:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80139a6:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80139aa:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80139ae:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80139b2:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80139b6:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80139ba:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80139be:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 80139c2:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
 80139c6:	f006 b91f 	b.w	8019c08 <tanhf>
    if (t2 == 0.0f)
 80139ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139ce:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80139f8 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
 80139d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80139f4 <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
 80139d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139da:	d195      	bne.n	8013908 <tDiodeFilter_tick+0x210>
 80139dc:	eddf 5a06 	vldr	s11, [pc, #24]	; 80139f8 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
 80139e0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80139f4 <tDiodeFilter_tick+0x2fc>
 80139e4:	e794      	b.n	8013910 <tDiodeFilter_tick+0x218>
 80139e6:	bf00      	nop
 80139e8:	43d20000 	.word	0x43d20000
 80139ec:	446c4000 	.word	0x446c4000
 80139f0:	42d20000 	.word	0x42d20000
 80139f4:	358637bd 	.word	0x358637bd
 80139f8:	3f800008 	.word	0x3f800008

080139fc <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 80139fc:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80139fe:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a02:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8013cec <tDiodeFilter_tickEfficient+0x2f0>
 8013a06:	eddf 7aba 	vldr	s15, [pc, #744]	; 8013cf0 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a0a:	eddf 0aba 	vldr	s1, [pc, #744]	; 8013cf4 <tDiodeFilter_tickEfficient+0x2f8>
 8013a0e:	eeb0 1a67 	vmov.f32	s2, s15
{
 8013a12:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013a16:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a1a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013a1e:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a22:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8013a26:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a2a:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013a2e:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8013a32:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8013a36:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013a3a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8013a3e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a42:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013a46:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013a4a:	eea4 7a84 	vfma.f32	s14, s9, s8
 8013a4e:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a52:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013a56:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8013a5a:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013a5e:	ee27 7a22 	vmul.f32	s14, s14, s5
 8013a62:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8013a66:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013a6a:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a6e:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a72:	ee77 4a20 	vadd.f32	s9, s14, s1
 8013a76:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a7a:	eef0 4a67 	vmov.f32	s9, s15
 8013a7e:	eee7 4a04 	vfma.f32	s9, s14, s8
 8013a82:	eeb0 7a42 	vmov.f32	s14, s4
 8013a86:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013a8a:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8013a8e:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8013a92:	eeb0 1a67 	vmov.f32	s2, s15
 8013a96:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013a9a:	eef0 4a67 	vmov.f32	s9, s15
 8013a9e:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013aa2:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013aa6:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013aaa:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013aae:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8013ab2:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013ab6:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013aba:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013abe:	ee24 4a06 	vmul.f32	s8, s8, s12
 8013ac2:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 8013ac6:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013aca:	ee25 5a25 	vmul.f32	s10, s10, s11
 8013ace:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8013ad2:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013ad6:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8013ada:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013ade:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013ae2:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013ae6:	eee5 9a88 	vfma.f32	s19, s11, s16
 8013aea:	eeb0 8a67 	vmov.f32	s16, s15
 8013aee:	eee1 8a09 	vfma.f32	s17, s2, s18
 8013af2:	eeb0 9a67 	vmov.f32	s18, s15
 8013af6:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013afa:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013afe:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b02:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8013b06:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b0a:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b0e:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8013b12:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013b16:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b1a:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b1e:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b22:	eea1 9a25 	vfma.f32	s18, s2, s11
 8013b26:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b2a:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8013b2e:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b32:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b36:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8013b3a:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8013b3e:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8013b42:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b4a:	ee31 1a20 	vadd.f32	s2, s2, s1
 8013b4e:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b52:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b56:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013b5a:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b5e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b62:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b66:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b6a:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013b6e:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b72:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b76:	eeaa aa87 	vfma.f32	s20, s21, s14
 8013b7a:	ee68 aa07 	vmul.f32	s21, s16, s14
 8013b7e:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013b82:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013b86:	eeea 5a82 	vfma.f32	s11, s21, s4
 8013b8a:	eeb0 1a65 	vmov.f32	s2, s11
 8013b8e:	eef0 5a45 	vmov.f32	s11, s10
 8013b92:	eeea 5a89 	vfma.f32	s11, s21, s18
 8013b96:	eee1 5a27 	vfma.f32	s11, s2, s15
 8013b9a:	ee35 1a09 	vadd.f32	s2, s10, s18
 8013b9e:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013ba2:	ee66 9a87 	vmul.f32	s19, s13, s14
 8013ba6:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013baa:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013bae:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013bb2:	eee1 5a06 	vfma.f32	s11, s2, s12
 8013bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8013bba:	eea9 1a89 	vfma.f32	s2, s19, s18
 8013bbe:	eea2 1a27 	vfma.f32	s2, s4, s15
 8013bc2:	ee34 2a04 	vadd.f32	s4, s8, s8
 8013bc6:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013bca:	eeb0 2a41 	vmov.f32	s4, s2
 8013bce:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8013bd2:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8013bd6:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8013bda:	eef4 5a44 	vcmp.f32	s11, s8
 8013bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013be2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013be6:	bf14      	ite	ne
 8013be8:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8013bec:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8013cf8 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
 8013bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013bf4:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8013bf8:	d069      	beq.n	8013cce <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013bfa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013bfe:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c06:	ee37 2a02 	vadd.f32	s4, s14, s4
 8013c0a:	d069      	beq.n	8013ce0 <tDiodeFilter_tickEfficient+0x2e4>
 8013c0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013c10:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8013c14:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 8013c18:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013c1c:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8013c20:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013c28:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8013c2c:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8013c30:	bf08      	it	eq
 8013c32:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8013cf8 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
 8013c36:	eeb0 0a61 	vmov.f32	s0, s3
 8013c3a:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013c3e:	ee38 4a06 	vadd.f32	s8, s16, s12
 8013c42:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013c46:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013c4a:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8013c4e:	eea6 8a20 	vfma.f32	s16, s12, s1
 8013c52:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013c56:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8013c5a:	eee7 1a84 	vfma.f32	s3, s15, s8
 8013c5e:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013c62:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013c66:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8013c6a:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013c6e:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013c72:	ee74 1a60 	vsub.f32	s3, s8, s1
 8013c76:	ee61 1a86 	vmul.f32	s3, s3, s12
 8013c7a:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013c7e:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013c82:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013c86:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013c8a:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013c8e:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8013c92:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013c96:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013c9a:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013c9e:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013ca2:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013ca6:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013caa:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013cae:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013cb2:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013cb6:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013cba:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013cbe:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013cc2:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8013cc6:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
 8013cca:	f000 bad1 	b.w	8014270 <LEAF_tanh>
    if (t2 == 0.0f)
 8013cce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013cd2:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8013cfc <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
 8013cd6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013cf8 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
 8013cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cde:	d195      	bne.n	8013c0c <tDiodeFilter_tickEfficient+0x210>
 8013ce0:	eddf 5a06 	vldr	s11, [pc, #24]	; 8013cfc <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
 8013ce4:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013cf8 <tDiodeFilter_tickEfficient+0x2fc>
 8013ce8:	e794      	b.n	8013c14 <tDiodeFilter_tickEfficient+0x218>
 8013cea:	bf00      	nop
 8013cec:	43d20000 	.word	0x43d20000
 8013cf0:	446c4000 	.word	0x446c4000
 8013cf4:	42d20000 	.word	0x42d20000
 8013cf8:	358637bd 	.word	0x358637bd
 8013cfc:	3f800008 	.word	0x3f800008

08013d00 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8013d00:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013d04:	4b0d      	ldr	r3, [pc, #52]	; (8013d3c <tDiodeFilter_setFreqFast+0x3c>)
 8013d06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 8013d0a:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8013d0c:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8013d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013d14:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d18:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8013d1c:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013d20:	edd0 6a01 	vldr	s13, [r0, #4]
 8013d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d28:	ed90 7a00 	vldr	s14, [r0]
 8013d2c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013d30:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013d34:	ed81 0a02 	vstr	s0, [r1, #8]
}
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop
 8013d3c:	0801ba1c 	.word	0x0801ba1c

08013d40 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013d40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d44:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8013d48:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8013d4c:	eef0 0a67 	vmov.f32	s1, s15
{
 8013d50:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8013d52:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013d54:	eee0 0a07 	vfma.f32	s1, s0, s14
 8013d58:	eeb0 0a67 	vmov.f32	s0, s15
 8013d5c:	f000 fa74 	bl	8014248 <LEAF_clip>
 8013d60:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8013d64:	bd10      	pop	{r4, pc}
 8013d66:	bf00      	nop

08013d68 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8013d68:	b570      	push	{r4, r5, r6, lr}
 8013d6a:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013d6e:	698d      	ldr	r5, [r1, #24]
{
 8013d70:	eef0 8a40 	vmov.f32	s17, s0
 8013d74:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013d76:	2038      	movs	r0, #56	; 0x38
 8013d78:	4629      	mov	r1, r5
{
 8013d7a:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013d7e:	f000 fbe7 	bl	8014550 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013d82:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013de4 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013d86:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 8013d88:	2301      	movs	r3, #1
    f->mempool = m;
 8013d8a:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013d8c:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 8013d90:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013d92:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8013d94:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 8013d98:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013d9c:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 8013da0:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 8013da2:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013da6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013daa:	f005 fbcd 	bl	8019548 <tan>
 8013dae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8013db2:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 8013db6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8013dba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8013dbe:	490a      	ldr	r1, [pc, #40]	; (8013de8 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 8013dc0:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8013dc4:	4b09      	ldr	r3, [pc, #36]	; (8013dec <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 8013dc6:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8013dca:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8013dce:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8013dd0:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8013dd2:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8013dd4:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 8013dd8:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8013ddc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8013dde:	ecbd 8b02 	vpop	{d8}
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	40490fdb 	.word	0x40490fdb
 8013de8:	3dcccccd 	.word	0x3dcccccd
 8013dec:	3d23d70a 	.word	0x3d23d70a

08013df0 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8013df0:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8013df2:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8014030 <tLadderFilter_tick+0x240>
{
 8013df6:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8013dfa:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8013dfc:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8013e00:	2900      	cmp	r1, #0
 8013e02:	f340 8110 	ble.w	8014026 <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013e06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 8013e0a:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013e0e:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 8013e12:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 8013e16:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013e1a:	ed92 7a08 	vldr	s14, [r2, #32]
 8013e1e:	ee72 2a27 	vadd.f32	s5, s4, s15
 8013e22:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8013e26:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013e2a:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013e2e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013e32:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8013e36:	ee25 9a28 	vmul.f32	s18, s10, s17
 8013e3a:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013e3e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8013e42:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013e46:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8013e4a:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8013e4c:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013e50:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8014034 <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013e54:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8013e58:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8013e5a:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8013e5e:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 8013e62:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013e64:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013e68:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013e6c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8013e70:	ee22 baa5 	vmul.f32	s22, s5, s11
 8013e74:	ee26 ca22 	vmul.f32	s24, s12, s5
 8013e78:	ee72 5a25 	vadd.f32	s11, s4, s11
 8013e7c:	ee32 6a06 	vadd.f32	s12, s4, s12
 8013e80:	ee66 baa2 	vmul.f32	s23, s13, s5
 8013e84:	eecb ea25 	vdiv.f32	s29, s22, s11
 8013e88:	ee8c ba06 	vdiv.f32	s22, s24, s12
 8013e8c:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8013e90:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013e94:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 8013e98:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013e9c:	ee77 eaee 	vsub.f32	s29, s15, s29
 8013ea0:	ee77 6acb 	vsub.f32	s13, s15, s22
 8013ea4:	ee62 5a87 	vmul.f32	s11, s5, s14
 8013ea8:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 8013eac:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013eb0:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 8013eb4:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013eb8:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 8013ebc:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 8013ec0:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 8013ec4:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 8013ec8:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 8013ecc:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 8013ed0:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013ed4:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 8013ed8:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 8013edc:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 8013ee0:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013ee4:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 8013ee8:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 8013eec:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013ef0:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 8013ef4:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013ef8:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 8013efc:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 8013f00:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 8013f04:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8013f08:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013f0c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013f10:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013f14:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013f18:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8013f1c:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013f20:	ee2d 7a07 	vmul.f32	s14, s26, s14
 8013f24:	ee65 5a8f 	vmul.f32	s11, s11, s30
 8013f28:	ee60 ea8e 	vmul.f32	s29, s1, s28
 8013f2c:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013f30:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013f34:	eeb0 ea67 	vmov.f32	s28, s15
 8013f38:	eeab eaad 	vfma.f32	s28, s23, s27
 8013f3c:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 8013f40:	eeb0 ba67 	vmov.f32	s22, s15
 8013f44:	eeec 5a84 	vfma.f32	s11, s25, s8
 8013f48:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013f4c:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 8013f50:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 8013f54:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013f58:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 8013f5c:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 8013f60:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013f64:	eef0 ca48 	vmov.f32	s25, s16
 8013f68:	eeab da0b 	vfma.f32	s26, s22, s22
 8013f6c:	eee5 caa5 	vfma.f32	s25, s11, s11
 8013f70:	eef1 5acd 	vsqrt.f32	s11, s26
 8013f74:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013f78:	ee3b ba65 	vsub.f32	s22, s22, s11
 8013f7c:	eef0 5a40 	vmov.f32	s11, s0
 8013f80:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013f84:	eeb0 ba43 	vmov.f32	s22, s6
 8013f88:	eea5 ba25 	vfma.f32	s22, s10, s11
 8013f8c:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013f90:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8013f94:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013f98:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8013f9c:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013fa0:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013fa4:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013fa8:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8013fac:	ee36 6a66 	vsub.f32	s12, s12, s13
 8013fb0:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013fb4:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013fb8:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013fbc:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8013fc0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013fc4:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013fc8:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8013fcc:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8013fd0:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8013fd4:	f47f af3e 	bne.w	8013e54 <tLadderFilter_tick+0x64>
 8013fd8:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8013fdc:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8013fe0:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8013fe4:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013fe8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8014034 <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 8013fec:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013ff0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013ff4:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013ff8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013ffc:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 8014000:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014004:	eea0 7aa0 	vfma.f32	s14, s1, s1
 8014008:	eef1 7ae5 	vsqrt.f32	s15, s11
 801400c:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 8014010:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014014:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014018:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 801401c:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8014020:	ecbd 8b10 	vpop	{d8-d15}
 8014024:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014026:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 801402a:	ed9f ca03 	vldr	s24, [pc, #12]	; 8014038 <tLadderFilter_tick+0x248>
 801402e:	e7db      	b.n	8013fe8 <tLadderFilter_tick+0x1f8>
 8014030:	3c75c28f 	.word	0x3c75c28f
 8014034:	3c23d70a 	.word	0x3c23d70a
 8014038:	00000000 	.word	0x00000000

0801403c <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 801403c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014040:	4b0f      	ldr	r3, [pc, #60]	; (8014080 <tLadderFilter_setFreqFast+0x44>)
 8014042:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 8014046:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8014048:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 801404c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014050:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014054:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8014058:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801405c:	edd0 6a01 	vldr	s13, [r0, #4]
 8014060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014064:	ed90 7a00 	vldr	s14, [r0]
 8014068:	ee20 0a26 	vmul.f32	s0, s0, s13
 801406c:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 8014070:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014074:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 8014078:	edc1 7a06 	vstr	s15, [r1, #24]
}
 801407c:	4770      	bx	lr
 801407e:	bf00      	nop
 8014080:	0801ba1c 	.word	0x0801ba1c

08014084 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 8014084:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8014086:	6804      	ldr	r4, [r0, #0]
{
 8014088:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 801408c:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8014090:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80140a0 <tLadderFilter_setQ+0x1c>
 8014094:	f000 f8d8 	bl	8014248 <LEAF_clip>
 8014098:	ed84 0a05 	vstr	s0, [r4, #20]
}
 801409c:	bd10      	pop	{r4, pc}
 801409e:	bf00      	nop
 80140a0:	3e4ccccd 	.word	0x3e4ccccd

080140a4 <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 80140a4:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 80140a8:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80140c4 <fastertanf+0x20>
 80140ac:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80140c8 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 80140b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 80140b4:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 80140b8:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 80140bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop
 80140c4:	3e502de0 	.word	0x3e502de0
 80140c8:	3ea295ea 	.word	0x3ea295ea

080140cc <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80140cc:	ee10 2a10 	vmov	r2, s0
 80140d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80140d4:	4b0d      	ldr	r3, [pc, #52]	; (801410c <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80140d6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80140da:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80140de:	ee60 7a27 	vmul.f32	s15, s0, s15
 80140e2:	ee00 3a10 	vmov	s0, r3
 80140e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80140ea:	eea0 7a67 	vfms.f32	s14, s0, s15
 80140ee:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80140f2:	ee10 3a10 	vmov	r3, s0
 80140f6:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 80140fa:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 80140fe:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8014102:	336e      	adds	r3, #110	; 0x6e
}
 8014104:	ee00 3a10 	vmov	s0, r3
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	5f3759df 	.word	0x5f3759df

08014110 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8014110:	ee10 3a10 	vmov	r3, s0
 8014114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014118:	ee00 3a10 	vmov	s0, r3
}
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop

08014120 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8014120:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014124:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014150 <fasterexpf+0x30>
 8014128:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 801412c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8014130:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014134:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014138:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 801413c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014140:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014144:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8014148:	ee20 0a00 	vmul.f32	s0, s0, s0
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	3b800000 	.word	0x3b800000

08014154 <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8014154:	ee10 3a10 	vmov	r3, s0
 8014158:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801417c <fastPowf+0x28>
 801415c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8014160:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8014164:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014168:	330b      	adds	r3, #11
 801416a:	ee07 3a90 	vmov	s15, r3
 801416e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014172:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8014176:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 801417a:	4770      	bx	lr
 801417c:	4e7de250 	.word	0x4e7de250

08014180 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 8014180:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014200 <LEAF_shaper+0x80>
 8014184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801418c:	d406      	bmi.n	801419c <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 801418e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8014204 <LEAF_shaper+0x84>
 8014192:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801419a:	dd02      	ble.n	80141a2 <LEAF_shaper+0x22>
 801419c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8014208 <LEAF_shaper+0x88>
}
 80141a0:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 80141a2:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80141a6:	ed9f 5a19 	vldr	s10, [pc, #100]	; 801420c <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 80141aa:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 80141ae:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8014210 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80141b2:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 80141b6:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80141ba:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 80141be:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80141c2:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80141c6:	eddf 5a13 	vldr	s11, [pc, #76]	; 8014214 <LEAF_shaper+0x94>
 80141ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 80141ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80141d2:	ee66 4aa6 	vmul.f32	s9, s13, s13
 80141d6:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 80141da:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80141de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80141e2:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80141e6:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 80141ea:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80141ee:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80141f2:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 80141f6:	ee20 0a80 	vmul.f32	s0, s1, s0
 80141fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 80141fe:	4770      	bx	lr
 8014200:	bfb504f3 	.word	0xbfb504f3
 8014204:	3fb504f3 	.word	0x3fb504f3
 8014208:	00000000 	.word	0x00000000
 801420c:	3c800000 	.word	0x3c800000
 8014210:	3f272f05 	.word	0x3f272f05
 8014214:	3d4ccccd 	.word	0x3d4ccccd

08014218 <LEAF_round>:
    rnd = fabsf(rnd);
 8014218:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 801421c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014238 <LEAF_round+0x20>
 8014220:	eef4 0ae7 	vcmpe.f32	s1, s15
 8014224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014228:	d905      	bls.n	8014236 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 801422a:	eec0 7a20 	vdiv.f32	s15, s0, s1
 801422e:	feb8 0a67 	vrinta.f32	s0, s15
 8014232:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 8014236:	4770      	bx	lr
 8014238:	33d6bf95 	.word	0x33d6bf95

0801423c <LEAF_bitwise_xor>:
    return unholy.f;
 801423c:	ee10 3a10 	vmov	r3, s0
 8014240:	4043      	eors	r3, r0
 8014242:	ee00 3a10 	vmov	s0, r3
}
 8014246:	4770      	bx	lr

08014248 <LEAF_clip>:
    if (min > max)
 8014248:	eeb4 0ac1 	vcmpe.f32	s0, s2
 801424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014250:	dd05      	ble.n	801425e <LEAF_clip+0x16>
 8014252:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 8014256:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 801425a:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 801425e:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8014262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014266:	dc01      	bgt.n	801426c <LEAF_clip+0x24>
    else if (val > tempmax)
 8014268:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop

08014270 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8014270:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8014274:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427c:	d418      	bmi.n	80142b0 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 801427e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014282:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801428a:	dd02      	ble.n	8014292 <LEAF_tanh+0x22>
        return 1.0f;
 801428c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8014290:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8014292:	ee60 6a00 	vmul.f32	s13, s0, s0
 8014296:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 801429a:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 801429e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80142a2:	eee6 7a86 	vfma.f32	s15, s13, s12
 80142a6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80142aa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80142ae:	4770      	bx	lr
        return -1.0f;
 80142b0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80142b4:	4770      	bx	lr
 80142b6:	bf00      	nop

080142b8 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 80142b8:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 80142ba:	1e4b      	subs	r3, r1, #1
 80142bc:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 80142c0:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 80142c2:	ee07 3a90 	vmov	s15, r3
 80142c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80142ca:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 80142ce:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 80142d2:	dd16      	ble.n	8014302 <LEAF_generate_exp+0x4a>
 80142d4:	4604      	mov	r4, r0
 80142d6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80142da:	eeb0 8a60 	vmov.f32	s16, s1
 80142de:	eef0 8a40 	vmov.f32	s17, s0
 80142e2:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 80142e6:	eef0 0a48 	vmov.f32	s1, s16
 80142ea:	eeb0 0a68 	vmov.f32	s0, s17
 80142ee:	f005 faff 	bl	80198f0 <powf>
 80142f2:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 80142f6:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 80142fa:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80142fe:	42a5      	cmp	r5, r4
 8014300:	d1f1      	bne.n	80142e6 <LEAF_generate_exp+0x2e>
    }
}
 8014302:	ecbd 8b04 	vpop	{d8-d9}
 8014306:	bd38      	pop	{r3, r4, r5, pc}

08014308 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 8014308:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801430a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 801430e:	460d      	mov	r5, r1
 8014310:	4604      	mov	r4, r0
 8014312:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8014316:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 801431a:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801431e:	ee81 0a29 	vdiv.f32	s0, s2, s19
 8014322:	f005 f9c1 	bl	80196a8 <logf>
    float increment = 1.0 / (float)(size-1);
 8014326:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 8014328:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 801432a:	ee07 3a90 	vmov	s15, r3
 801432e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014336:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 801433a:	dd19      	ble.n	8014370 <LEAF_generate_table_skew_non_sym+0x68>
 801433c:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 8014378 <LEAF_generate_table_skew_non_sym+0x70>
 8014340:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 8014344:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 801437c <LEAF_generate_table_skew_non_sym+0x74>
 8014348:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 801434c:	eeb0 0a48 	vmov.f32	s0, s16
 8014350:	f005 f9aa 	bl	80196a8 <logf>
 8014354:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014358:	f005 f92a 	bl	80195b0 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 801435c:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8014360:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 8014364:	eee9 7a80 	vfma.f32	s15, s19, s0
 8014368:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 801436c:	42a5      	cmp	r5, r4
 801436e:	d1ed      	bne.n	801434c <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 8014370:	ecbd 8b06 	vpop	{d8-d10}
 8014374:	bd38      	pop	{r3, r4, r5, pc}
 8014376:	bf00      	nop
 8014378:	bfb8aa3b 	.word	0xbfb8aa3b
 801437c:	00000000 	.word	0x00000000

08014380 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 8014380:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 8014382:	1e4b      	subs	r3, r1, #1
 8014384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 8014388:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 801438a:	ee07 3a90 	vmov	s15, r3
 801438e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014392:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 8014396:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 801439a:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 801439e:	dd29      	ble.n	80143f4 <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 80143a0:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8014408 <LEAF_generate_mtof+0x88>
 80143a4:	eef0 9a40 	vmov.f32	s19, s0
 80143a8:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 80143aa:	eddf 8a18 	vldr	s17, [pc, #96]	; 801440c <LEAF_generate_mtof+0x8c>
 80143ae:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 80143b2:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8014410 <LEAF_generate_mtof+0x90>
 80143b6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 80143ba:	ed9f ca16 	vldr	s24, [pc, #88]	; 8014414 <LEAF_generate_mtof+0x94>
 80143be:	eddf ba16 	vldr	s23, [pc, #88]	; 8014418 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 80143c2:	eeb0 0a69 	vmov.f32	s0, s19
 80143c6:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 80143ca:	e006      	b.n	80143da <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 80143cc:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80143d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d4:	dd11      	ble.n	80143fa <LEAF_generate_mtof+0x7a>
 80143d6:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 80143da:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80143de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e2:	d8f3      	bhi.n	80143cc <LEAF_generate_mtof+0x4c>
 80143e4:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 80143e8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80143ec:	42a5      	cmp	r5, r4
        x += increment;
 80143ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 80143f2:	d1e6      	bne.n	80143c2 <LEAF_generate_mtof+0x42>
}
 80143f4:	ecbd 8b0a 	vpop	{d8-d12}
 80143f8:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 80143fa:	ee20 0a0c 	vmul.f32	s0, s0, s24
 80143fe:	f005 f8d7 	bl	80195b0 <expf>
 8014402:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8014406:	e7ef      	b.n	80143e8 <LEAF_generate_mtof+0x68>
 8014408:	00000000 	.word	0x00000000
 801440c:	c4bb8000 	.word	0xc4bb8000
 8014410:	44bb6000 	.word	0x44bb6000
 8014414:	3d6c9820 	.word	0x3d6c9820
 8014418:	4102d013 	.word	0x4102d013

0801441c <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 801441c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 8014420:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014440 <LEAF_interpolation_linear+0x24>
 8014424:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8014428:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 801442c:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8014430:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8014434:	eee7 0a80 	vfma.f32	s1, s15, s0
 8014438:	eeb0 0a60 	vmov.f32	s0, s1
 801443c:	4770      	bx	lr
 801443e:	bf00      	nop
 8014440:	00000000 	.word	0x00000000

08014444 <ftom>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
}

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014444:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444c:	dd0b      	ble.n	8014466 <ftom+0x22>
 801444e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801446c <ftom+0x28>
{
 8014452:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014454:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014458:	f005 f926 	bl	80196a8 <logf>
 801445c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014470 <ftom+0x2c>
 8014460:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8014464:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014466:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014474 <ftom+0x30>
}
 801446a:	4770      	bx	lr
 801446c:	3dfa7ed2 	.word	0x3dfa7ed2
 8014470:	418a7fac 	.word	0x418a7fac
 8014474:	c4bb8000 	.word	0xc4bb8000

08014478 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 8014478:	b500      	push	{lr}
 801447a:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 801447c:	eeb0 0ac0 	vabs.f32	s0, s0
 8014480:	a801      	add	r0, sp, #4
 8014482:	f004 ffb1 	bl	80193e8 <frexpf>
    Y += -4.11852516267426f;
 8014486:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80144bc <fasteratodb+0x44>
 801448a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80144c0 <fasteratodb+0x48>
    Y += 6.02197014179219f;
 801448e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80144c4 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 8014492:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 8014496:	eddd 7a01 	vldr	s15, [sp, #4]
 801449a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 80144c8 <fasteratodb+0x50>
 801449e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 80144a2:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80144cc <fasteratodb+0x54>
    Y += E;
 80144a6:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 80144aa:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 80144ae:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 80144b2:	ee27 0a86 	vmul.f32	s0, s15, s12
 80144b6:	b003      	add	sp, #12
 80144b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80144bc:	3f9da1a8 	.word	0x3f9da1a8
 80144c0:	c083caf5 	.word	0xc083caf5
 80144c4:	40c0b3fb 	.word	0x40c0b3fb
 80144c8:	404892e0 	.word	0x404892e0
 80144cc:	40c0a8c2 	.word	0x40c0a8c2

080144d0 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 80144d0:	eddf 7a02 	vldr	s15, [pc, #8]	; 80144dc <fastdbtoa+0xc>
 80144d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80144d8:	f005 b86a 	b.w	80195b0 <expf>
 80144dc:	3debc8e3 	.word	0x3debc8e3

080144e0 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 80144e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144e4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014510 <fasterdbtoa+0x30>
 80144e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80144ec:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80144f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144f8:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80144fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014500:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014504:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8014508:	ee20 0a00 	vmul.f32	s0, s0, s0
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	39ebc8e3 	.word	0x39ebc8e3

08014514 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8014514:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop

0801451c <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 801451c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8014520:	4770      	bx	lr
 8014522:	bf00      	nop

08014524 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014524:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8014526:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014528:	2510      	movs	r5, #16
    pool->usize  = 0;
 801452a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801452c:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801452e:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8014530:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8014532:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014538:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 801453a:	440b      	add	r3, r1
 801453c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 801453e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8014542:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8014544:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8014548:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801454a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 801454c:	6183      	str	r3, [r0, #24]
}
 801454e:	4770      	bx	lr

08014550 <mpool_alloc>:
{
 8014550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8014552:	684a      	ldr	r2, [r1, #4]
{
 8014554:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8014556:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014558:	3301      	adds	r3, #1
 801455a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 801455c:	694b      	ldr	r3, [r1, #20]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d04a      	beq.n	80145f8 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8014562:	1dc4      	adds	r4, r0, #7
 8014564:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014568:	e002      	b.n	8014570 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 801456a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 801456c:	2b00      	cmp	r3, #0
 801456e:	d043      	beq.n	80145f8 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8014570:	68da      	ldr	r2, [r3, #12]
 8014572:	42a2      	cmp	r2, r4
 8014574:	d3f9      	bcc.n	801456a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8014576:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014578:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801457a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801457e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014580:	4281      	cmp	r1, r0
 8014582:	d246      	bcs.n	8014612 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014584:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014588:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801458a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801458c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801458e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014590:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 8014592:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8014596:	4429      	add	r1, r5
 8014598:	5111      	str	r1, [r2, r4]
    node->size = size;
 801459a:	60e8      	str	r0, [r5, #12]
    node->next = next;
 801459c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80145a0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80145a4:	429a      	cmp	r2, r3
        pool->head = new_node;
 80145a6:	bf08      	it	eq
 80145a8:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 80145ac:	685a      	ldr	r2, [r3, #4]
 80145ae:	b10a      	cbz	r2, 80145b4 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 80145b0:	6899      	ldr	r1, [r3, #8]
 80145b2:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 80145b4:	689a      	ldr	r2, [r3, #8]
 80145b6:	b10a      	cbz	r2, 80145bc <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 80145b8:	6859      	ldr	r1, [r3, #4]
 80145ba:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 80145bc:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80145be:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80145c0:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80145c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80145c8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80145cc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80145ce:	4422      	add	r2, r4
 80145d0:	4402      	add	r2, r0
 80145d2:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80145d6:	694a      	ldr	r2, [r1, #20]
 80145d8:	42aa      	cmp	r2, r5
 80145da:	dd0b      	ble.n	80145f4 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80145dc:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80145de:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80145e0:	b14a      	cbz	r2, 80145f6 <mpool_alloc+0xa6>
 80145e2:	1e41      	subs	r1, r0, #1
 80145e4:	460a      	mov	r2, r1
 80145e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80145ea:	68dc      	ldr	r4, [r3, #12]
 80145ec:	3202      	adds	r2, #2
 80145ee:	1a12      	subs	r2, r2, r0
 80145f0:	4294      	cmp	r4, r2
 80145f2:	d8f7      	bhi.n	80145e4 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 80145f4:	6818      	ldr	r0, [r3, #0]
}
 80145f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80145f8:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80145fc:	1a9b      	subs	r3, r3, r2
 80145fe:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014600:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8014604:	bf8c      	ite	hi
 8014606:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014608:	2100      	movls	r1, #0
 801460a:	f004 fe49 	bl	80192a0 <LEAF_internalErrorCallback>
        return NULL;
 801460e:	2000      	movs	r0, #0
}
 8014610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8014612:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8014614:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8014616:	e7c3      	b.n	80145a0 <mpool_alloc+0x50>

08014618 <mpool_calloc>:
{
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 801461a:	684a      	ldr	r2, [r1, #4]
{
 801461c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801461e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014620:	3301      	adds	r3, #1
 8014622:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8014624:	694b      	ldr	r3, [r1, #20]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d044      	beq.n	80146b4 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801462a:	1dc4      	adds	r4, r0, #7
 801462c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014630:	e002      	b.n	8014638 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8014632:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8014634:	2b00      	cmp	r3, #0
 8014636:	d03d      	beq.n	80146b4 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8014638:	68da      	ldr	r2, [r3, #12]
 801463a:	42a2      	cmp	r2, r4
 801463c:	d3f9      	bcc.n	8014632 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801463e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014640:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8014642:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014646:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014648:	4281      	cmp	r1, r0
 801464a:	d240      	bcs.n	80146ce <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801464c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014650:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8014652:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014654:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014656:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014658:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 801465a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801465e:	4429      	add	r1, r5
 8014660:	5111      	str	r1, [r2, r4]
    node->size = size;
 8014662:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8014664:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8014668:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801466c:	429a      	cmp	r2, r3
        pool->head = new_node;
 801466e:	bf08      	it	eq
 8014670:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8014674:	685a      	ldr	r2, [r3, #4]
 8014676:	b10a      	cbz	r2, 801467c <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8014678:	6899      	ldr	r1, [r3, #8]
 801467a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 801467c:	689a      	ldr	r2, [r3, #8]
 801467e:	b10a      	cbz	r2, 8014684 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8014680:	6859      	ldr	r1, [r3, #4]
 8014682:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8014684:	2200      	movs	r2, #0
    node->prev = NULL;
 8014686:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801468a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801468e:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8014692:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014694:	4401      	add	r1, r0
 8014696:	68d8      	ldr	r0, [r3, #12]
 8014698:	4401      	add	r1, r0
 801469a:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801469e:	68d9      	ldr	r1, [r3, #12]
 80146a0:	b131      	cbz	r1, 80146b0 <mpool_calloc+0x98>
 80146a2:	4610      	mov	r0, r2
 80146a4:	6819      	ldr	r1, [r3, #0]
 80146a6:	5488      	strb	r0, [r1, r2]
 80146a8:	3201      	adds	r2, #1
 80146aa:	68d9      	ldr	r1, [r3, #12]
 80146ac:	4291      	cmp	r1, r2
 80146ae:	d8f9      	bhi.n	80146a4 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 80146b0:	6818      	ldr	r0, [r3, #0]
}
 80146b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80146b4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80146b8:	1a9b      	subs	r3, r3, r2
 80146ba:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80146bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80146c0:	bf8c      	ite	hi
 80146c2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80146c4:	2100      	movls	r1, #0
 80146c6:	f004 fdeb 	bl	80192a0 <LEAF_internalErrorCallback>
        return NULL;
 80146ca:	2000      	movs	r0, #0
}
 80146cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80146ce:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80146d0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80146d2:	e7c9      	b.n	8014668 <mpool_calloc+0x50>

080146d4 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80146d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80146d8:	699d      	ldr	r5, [r3, #24]
{
 80146da:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 80146dc:	6868      	ldr	r0, [r5, #4]
 80146de:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80146e0:	3301      	adds	r3, #1
 80146e2:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 80146e4:	696b      	ldr	r3, [r5, #20]
 80146e6:	b91b      	cbnz	r3, 80146f0 <tMempool_init+0x1c>
 80146e8:	e063      	b.n	80147b2 <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 80146ea:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d060      	beq.n	80147b2 <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 80146f0:	68dc      	ldr	r4, [r3, #12]
 80146f2:	2c17      	cmp	r4, #23
 80146f4:	d9f9      	bls.n	80146ea <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 80146f6:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80146f8:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 80146fc:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 80146fe:	6868      	ldr	r0, [r5, #4]
 8014700:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014702:	4287      	cmp	r7, r0
 8014704:	d952      	bls.n	80147ac <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014706:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 801470a:	f100 0c18 	add.w	ip, r0, #24
 801470e:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8014712:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014714:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 8014718:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 801471c:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 801471e:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 8014722:	4420      	add	r0, r4
 8014724:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 8014728:	60e7      	str	r7, [r4, #12]
    node->next = next;
 801472a:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 801472e:	6968      	ldr	r0, [r5, #20]
 8014730:	4283      	cmp	r3, r0
        pool->head = new_node;
 8014732:	bf08      	it	eq
 8014734:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 8014736:	6858      	ldr	r0, [r3, #4]
 8014738:	b108      	cbz	r0, 801473e <tMempool_init+0x6a>
        node->next->prev = node->prev;
 801473a:	689c      	ldr	r4, [r3, #8]
 801473c:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 801473e:	6898      	ldr	r0, [r3, #8]
 8014740:	b108      	cbz	r0, 8014746 <tMempool_init+0x72>
        node->prev->next = node->next;
 8014742:	685c      	ldr	r4, [r3, #4]
 8014744:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 8014746:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014748:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 801474a:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801474e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014752:	68e8      	ldr	r0, [r5, #12]
 8014754:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 8014758:	4430      	add	r0, r6
 801475a:	4404      	add	r4, r0
 801475c:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 801475e:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8014762:	42b8      	cmp	r0, r7
 8014764:	dd0c      	ble.n	8014780 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8014766:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8014768:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801476a:	b154      	cbz	r4, 8014782 <tMempool_init+0xae>
 801476c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8014770:	4664      	mov	r4, ip
 8014772:	f80c 7f01 	strb.w	r7, [ip, #1]!
 8014776:	68de      	ldr	r6, [r3, #12]
 8014778:	3402      	adds	r4, #2
 801477a:	1a24      	subs	r4, r4, r0
 801477c:	42a6      	cmp	r6, r4
 801477e:	d8f7      	bhi.n	8014770 <tMempool_init+0x9c>
    return node_to_alloc->pool;
 8014780:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014782:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014786:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 8014788:	686b      	ldr	r3, [r5, #4]
 801478a:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801478c:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 801478e:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014790:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 8014792:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 8014794:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801479a:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 801479c:	440b      	add	r3, r1
    node->prev = prev;
 801479e:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 80147a2:	600b      	str	r3, [r1, #0]
    node->size = size;
 80147a4:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80147a6:	6141      	str	r1, [r0, #20]
}
 80147a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 80147ac:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 80147ae:	685c      	ldr	r4, [r3, #4]
 80147b0:	e7bd      	b.n	801472e <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 80147b2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147b6:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 80147b8:	1a52      	subs	r2, r2, r1
 80147ba:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147bc:	bf94      	ite	ls
 80147be:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80147c0:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80147c2:	f004 fd6d 	bl	80192a0 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80147c6:	2300      	movs	r3, #0
 80147c8:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 80147cc:	686a      	ldr	r2, [r5, #4]
 80147ce:	605a      	str	r2, [r3, #4]
 80147d0:	deff      	udf	#255	; 0xff
 80147d2:	bf00      	nop

080147d4 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80147d4:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80147d6:	698c      	ldr	r4, [r1, #24]
{
 80147d8:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147da:	2018      	movs	r0, #24
 80147dc:	4621      	mov	r1, r4
 80147de:	f7ff feb7 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80147e2:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147e4:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80147e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80147ea:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80147ec:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014808 <tCycle_init+0x34>
    c->phase    =  0;
 80147f2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147f6:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80147fa:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014800:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014804:	bd38      	pop	{r3, r4, r5, pc}
 8014806:	bf00      	nop
 8014808:	4f800000 	.word	0x4f800000

0801480c <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 801480c:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 801480e:	4910      	ldr	r1, [pc, #64]	; (8014850 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014810:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014854 <tCycle_tick+0x48>
    c->phase += c->inc;
 8014814:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014818:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 801481a:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 801481c:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801481e:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8014822:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014824:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8014828:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 801482c:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801482e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8014832:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 8014836:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8014838:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801483c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014840:	ed92 7a00 	vldr	s14, [r2]
 8014844:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8014848:	eea7 0a27 	vfma.f32	s0, s14, s15
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop
 8014850:	0802309c 	.word	0x0802309c
 8014854:	35000004 	.word	0x35000004

08014858 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 8014858:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801485a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801485e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014862:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014866:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801486a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801486e:	4770      	bx	lr

08014870 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8014870:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014874:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014890 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 8014878:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801487a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801487e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014882:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014886:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801488a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801488e:	4770      	bx	lr
 8014890:	4f800000 	.word	0x4f800000

08014894 <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 8014894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8014896:	698e      	ldr	r6, [r1, #24]
{
 8014898:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 801489a:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801489e:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80148a0:	4631      	mov	r1, r6
 80148a2:	f7ff fe55 	bl	8014550 <mpool_alloc>
 80148a6:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 80148a8:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 80148aa:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80148ac:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 80148ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 80148b2:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8014918 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80148b6:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 80148b8:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80148bc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 80148c0:	eddf 7a16 	vldr	s15, [pc, #88]	; 801491c <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 80148c4:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 80148c8:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 80148ca:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 80148ce:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 80148d0:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80148d2:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 80148d4:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80148d8:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80148dc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80148e0:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 80148e2:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80148e4:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80148e6:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80148ea:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 80148ee:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 80148f0:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 80148f2:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 80148f4:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 80148f6:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80148f8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80148fc:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 80148fe:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8014900:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8014904:	f004 fd68 	bl	80193d8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8014908:	4629      	mov	r1, r5
 801490a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801490e:	2220      	movs	r2, #32
}
 8014910:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8014914:	f004 bd60 	b.w	80193d8 <memset>
 8014918:	3b14f209 	.word	0x3b14f209
 801491c:	43dc0000 	.word	0x43dc0000

08014920 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8014920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014924:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 8014928:	6804      	ldr	r4, [r0, #0]
{
 801492a:	b083      	sub	sp, #12
 801492c:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 801492e:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 8014932:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014936:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 801493a:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 801493e:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8014942:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 801494a:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801494e:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014952:	f340 80f9 	ble.w	8014b48 <tMBPulse_tick+0x228>
 8014956:	f8d4 901c 	ldr.w	r9, [r4, #28]
 801495a:	f1b9 0f00 	cmp.w	r9, #0
 801495e:	f340 80bd 	ble.w	8014adc <tMBPulse_tick+0x1bc>
 8014962:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8014966:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801496a:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 801496e:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8014972:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014976:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 801497a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014982:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014986:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 801498a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 801498e:	2f00      	cmp	r7, #0
 8014990:	f040 80ef 	bne.w	8014b72 <tMBPulse_tick+0x252>
        if (sw > 0)
 8014994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014998:	f340 81a4 	ble.w	8014ce4 <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 801499c:	eef4 aac8 	vcmpe.f32	s21, s16
 80149a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a4:	f240 8162 	bls.w	8014c6c <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80149a8:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 80149aa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80149ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80149b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b6:	f280 8276 	bge.w	8014ea6 <tMBPulse_tick+0x586>
 80149ba:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80149bc:	1d33      	adds	r3, r6, #4
 80149be:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 80149c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80149c6:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80149ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80149ce:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80149d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f000 8229 	beq.w	8014e2e <tMBPulse_tick+0x50e>
 80149dc:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80149e0:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80149e4:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80149e8:	f04f 0c00 	mov.w	ip, #0
 80149ec:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 80149f0:	4db9      	ldr	r5, [pc, #740]	; (8014cd8 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80149f2:	eba8 030c 	sub.w	r3, r8, ip
 80149f6:	b29b      	uxth	r3, r3
 80149f8:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 80149fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a04:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a08:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8014a0c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014a10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014a14:	b289      	uxth	r1, r1
 8014a16:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8014a1a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014a1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a20:	b280      	uxth	r0, r0
 8014a22:	fa1f fa8a 	uxth.w	sl, sl
 8014a26:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8014a2a:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 8014a2e:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014a32:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a34:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 8014a38:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8014a3c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014a40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a44:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8014a48:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 8014a4c:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014a50:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a54:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014a58:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a5a:	edda 6a01 	vldr	s13, [sl, #4]
 8014a5e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014a62:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014a64:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a68:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014a6c:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8014a70:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014a74:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8014a78:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8014a7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8014a7e:	f0c0 80e8 	bcc.w	8014c52 <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 8014a82:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014a86:	f10c 0c01 	add.w	ip, ip, #1
 8014a8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8014a8e:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014a90:	4594      	cmp	ip, r2
			c->numBLEPs--;
 8014a92:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014a96:	dbac      	blt.n	80149f2 <tMBPulse_tick+0xd2>
 8014a98:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8014a9c:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8014aa0:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 8014aa2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8014aa6:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8014aaa:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8014aae:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 8014ab2:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 8014ab6:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8014aba:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8014abe:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 8014ac2:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 8014ac6:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8014aca:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8014ace:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8014ad2:	b003      	add	sp, #12
 8014ad4:	ecbd 8b0c 	vpop	{d8-d13}
 8014ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
 8014adc:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014ae0:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8014ae4:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8014ae8:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8014aec:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8014af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014af4:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8014af8:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8014afc:	f040 8457 	bne.w	80153ae <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
 8014b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b04:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8014b06:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8014b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8014b0e:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 8014b12:	f340 80a6 	ble.w	8014c62 <tMBPulse_tick+0x342>
        if (!k) {
 8014b16:	2f00      	cmp	r7, #0
 8014b18:	f040 818e 	bne.w	8014e38 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 8014b1c:	eef4 aacb 	vcmpe.f32	s21, s22
 8014b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b24:	f240 8310 	bls.w	8015148 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
 8014b28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014b2c:	eeb4 bae7 	vcmpe.f32	s22, s15
 8014b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b34:	f280 81f1 	bge.w	8014f1a <tMBPulse_tick+0x5fa>
            if (p >= b) {
 8014b38:	eef4 aac8 	vcmpe.f32	s21, s16
 8014b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b40:	f240 81e1 	bls.w	8014f06 <tMBPulse_tick+0x5e6>
 8014b44:	464f      	mov	r7, r9
 8014b46:	e739      	b.n	80149bc <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 8014b48:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8014b4c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8014b50:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8014b54:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8014b58:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8014b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 8014b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8014b64:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8014b68:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8014b6c:	2f00      	cmp	r7, #0
 8014b6e:	f43f af11 	beq.w	8014994 <tMBPulse_tick+0x74>
        if (sw > 0)
 8014b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b76:	f340 8129 	ble.w	8014dcc <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 8014b7a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014b7e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b86:	f6ff af19 	blt.w	80149bc <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014b8a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8014b8e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8014ce0 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 8014b92:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 8014b96:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014b98:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8014b9c:	eeb0 0a4b 	vmov.f32	s0, s22
 8014ba0:	eea8 0a09 	vfma.f32	s0, s16, s18
 8014ba4:	f004 fe4c 	bl	8019840 <lrintf>
	r -= (float)i;
 8014ba8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014bac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014bb8:	3301      	adds	r3, #1
            if (!k && p >= b) {
 8014bba:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014bc2:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
 8014bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014bca:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014bce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014bd2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014bd6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8014bda:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014bde:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014be2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8014be6:	f103 0301 	add.w	r3, r3, #1
 8014bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014bee:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 8014bf2:	f200 8306 	bhi.w	8015202 <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8014bf6:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8014bfa:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 8014bfc:	eeb0 0a4b 	vmov.f32	s0, s22
 8014c00:	eea8 0a89 	vfma.f32	s0, s17, s18
 8014c04:	f004 fe1c 	bl	8019840 <lrintf>
	r -= (float)i;
 8014c08:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014c0c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 8014c10:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 8014c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014c18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014c1c:	3301      	adds	r3, #1
	r -= (float)i;
 8014c1e:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c26:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014c2a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014c2e:	4a2b      	ldr	r2, [pc, #172]	; (8014cdc <tMBPulse_tick+0x3bc>)
                k = 1;
 8014c30:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014c32:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014c36:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8014c3a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014c3e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014c42:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8014c46:	443b      	add	r3, r7
 8014c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014c4c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8014c50:	e6b4      	b.n	80149bc <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8014c52:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014c56:	f10c 0c01 	add.w	ip, ip, #1
 8014c5a:	4563      	cmp	r3, ip
 8014c5c:	f73f aec9 	bgt.w	80149f2 <tMBPulse_tick+0xd2>
 8014c60:	e71a      	b.n	8014a98 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 8014c62:	f100 81be 	bmi.w	8014fe2 <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
 8014c66:	eeb0 8a68 	vmov.f32	s16, s17
 8014c6a:	e6a7      	b.n	80149bc <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014c6c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8014c70:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8014ce0 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8014c74:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8014c78:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8014c7c:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8014c80:	eeb0 0a6b 	vmov.f32	s0, s23
 8014c84:	eeab 0a28 	vfma.f32	s0, s22, s17
 8014c88:	f004 fdda 	bl	8019840 <lrintf>
	r -= (float)i;
 8014c8c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014c90:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014c94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014c9c:	4a0f      	ldr	r2, [pc, #60]	; (8014cdc <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014c9e:	3301      	adds	r3, #1
                x = -0.5f;
 8014ca0:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014ca8:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014cac:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014cb0:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014cb4:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014cb8:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8014cbc:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014cc0:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014cc4:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014cc8:	3301      	adds	r3, #1
 8014cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cce:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 8014cd2:	2301      	movs	r3, #1
}
 8014cd4:	e669      	b.n	80149aa <tMBPulse_tick+0x8a>
 8014cd6:	bf00      	nop
 8014cd8:	08029820 	.word	0x08029820
 8014cdc:	bf800000 	.word	0xbf800000
 8014ce0:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 8014ce4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cec:	f57f ae66 	bpl.w	80149bc <tMBPulse_tick+0x9c>
 8014cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cf8:	f57f ae60 	bpl.w	80149bc <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014cfc:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8014d00:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8014ce0 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 8014d04:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
 8014d08:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 8014d0c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8014d10:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 8014d14:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8014d18:	eeac 0a28 	vfma.f32	s0, s24, s17
 8014d1c:	f004 fd90 	bl	8019840 <lrintf>
	r -= (float)i;
 8014d20:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d24:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014d28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014d30:	4ad0      	ldr	r2, [pc, #832]	; (8015074 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d32:	3301      	adds	r3, #1
            if (k && p < b) {
 8014d34:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014d3c:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 8014d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014d44:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d48:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014d4c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014d50:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8014d54:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014d58:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014d5c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014d60:	f103 0301 	add.w	r3, r3, #1
 8014d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d68:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8014d6c:	f340 8323 	ble.w	80153b6 <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
 8014d70:	ee38 ca6a 	vsub.f32	s24, s16, s21
 8014d74:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014d76:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8014d7a:	eeb0 0a6b 	vmov.f32	s0, s23
 8014d7e:	eea8 0a8c 	vfma.f32	s0, s17, s24
 8014d82:	f004 fd5d 	bl	8019840 <lrintf>
	r -= (float)i;
 8014d86:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d8a:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014d8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d96:	3301      	adds	r3, #1
                x = 0.5f;
 8014d98:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014da0:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014da4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014da8:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014dac:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014db0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8014db4:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014db8:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014dbc:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014dc6:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8014dca:	e5f7      	b.n	80149bc <tMBPulse_tick+0x9c>
        else if (sw < 0)
 8014dcc:	f57f adf6 	bpl.w	80149bc <tMBPulse_tick+0x9c>
            if (p < b) {
 8014dd0:	eef4 aac8 	vcmpe.f32	s21, s16
 8014dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd8:	f300 80d0 	bgt.w	8014f7c <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
 8014ddc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014de4:	f57f adea 	bpl.w	80149bc <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8014de8:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8014dec:	eddf 8aa2 	vldr	s17, [pc, #648]	; 8015078 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
 8014df0:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
 8014df4:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 8014df6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8014dfa:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 8014dfe:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 8014e02:	eea9 0a28 	vfma.f32	s0, s18, s17
 8014e06:	f004 fd1b 	bl	8019840 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e0a:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 8014e0e:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8014e12:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e16:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014e18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014e24:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e28:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 8014e2c:	e6fd      	b.n	8014c2a <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
 8014e2e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014e32:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8014e36:	e631      	b.n	8014a9c <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 8014e38:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014e3c:	eeb4 bae8 	vcmpe.f32	s22, s17
 8014e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e44:	f280 811a 	bge.w	801507c <tMBPulse_tick+0x75c>
 8014e48:	eddf ba8b 	vldr	s23, [pc, #556]	; 8015078 <tMBPulse_tick+0x758>
 8014e4c:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8014e50:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014e54:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8014e58:	f004 fcf2 	bl	8019840 <lrintf>
	r -= (float)i;
 8014e5c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e60:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014e64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014e6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e70:	3301      	adds	r3, #1
                x = 0.5f;
 8014e72:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014e7a:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014e7e:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014e82:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014e86:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014e8a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8014e8e:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014e92:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014e96:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014e9a:	3301      	adds	r3, #1
 8014e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014ea0:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 8014ea4:	e648      	b.n	8014b38 <tMBPulse_tick+0x218>
                p -= 1.0f;
 8014ea6:	eddf 7a74 	vldr	s15, [pc, #464]	; 8015078 <tMBPulse_tick+0x758>
 8014eaa:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 8014eae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8014eb2:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014eb4:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8014eb8:	eea9 0a08 	vfma.f32	s0, s18, s16
 8014ebc:	f004 fcc0 	bl	8019840 <lrintf>
	r -= (float)i;
 8014ec0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ec4:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014ec8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ed0:	3301      	adds	r3, #1
                x = 0.5f;
 8014ed2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014eda:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014ede:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014ee2:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014ee6:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014eea:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8014eee:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014ef2:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014ef6:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8014efa:	3301      	adds	r3, #1
 8014efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f00:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8014f04:	e55a      	b.n	80149bc <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8014f06:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015078 <tMBPulse_tick+0x758>
 8014f0a:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 8014f0e:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8014f12:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014f14:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8014f18:	e670      	b.n	8014bfc <tMBPulse_tick+0x2dc>
 8014f1a:	eddf ba57 	vldr	s23, [pc, #348]	; 8015078 <tMBPulse_tick+0x758>
 8014f1e:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8014f22:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8014f26:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8014f2a:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8014f2e:	eea8 0aab 	vfma.f32	s0, s17, s23
 8014f32:	f004 fc85 	bl	8019840 <lrintf>
	r -= (float)i;
 8014f36:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f3a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014f3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f46:	3301      	adds	r3, #1
                    x = 0.5f;
 8014f48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014f50:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014f54:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f58:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014f5c:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014f60:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8014f64:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014f68:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014f6c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8014f70:	3301      	adds	r3, #1
 8014f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f76:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 8014f7a:	e5dd      	b.n	8014b38 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 8014f7c:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8015078 <tMBPulse_tick+0x758>
 8014f80:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 8014f84:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8014f88:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8014f8a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8014f8e:	eeab 0a28 	vfma.f32	s0, s22, s17
 8014f92:	f004 fc55 	bl	8019840 <lrintf>
	r -= (float)i;
 8014f96:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014f9a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014f9e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8014fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014fa6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014faa:	3301      	adds	r3, #1
                x = 0.5f;
 8014fac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8014fb4:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014fb8:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8014fbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8014fc0:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014fc4:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8014fc8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014fcc:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8014fd0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8014fd4:	3301      	adds	r3, #1
 8014fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fda:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 8014fde:	2700      	movs	r7, #0
}
 8014fe0:	e6fc      	b.n	8014ddc <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 8014fe2:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8014fe6:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 8014fea:	2f00      	cmp	r7, #0
 8014fec:	f040 80e5 	bne.w	80151ba <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
 8014ff0:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8014ff4:	eddf ba20 	vldr	s23, [pc, #128]	; 8015078 <tMBPulse_tick+0x758>
 8014ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffc:	f100 813c 	bmi.w	8015278 <tMBPulse_tick+0x958>
 8015000:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8015004:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8015008:	2701      	movs	r7, #1
 801500a:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 801500e:	eeb0 0a68 	vmov.f32	s0, s17
 8015012:	eea8 0a6b 	vfms.f32	s0, s16, s23
 8015016:	f004 fc13 	bl	8019840 <lrintf>
	r -= (float)i;
 801501a:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 801501e:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015022:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801502a:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801502e:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015032:	4a10      	ldr	r2, [pc, #64]	; (8015074 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015034:	443b      	add	r3, r7
 8015036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801503a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801503e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015042:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015046:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 801504a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801504e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015052:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015056:	443b      	add	r3, r7
 8015058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801505c:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 8015060:	eef4 aacd 	vcmpe.f32	s21, s26
 8015064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015068:	f300 80d0 	bgt.w	801520c <tMBPulse_tick+0x8ec>
 801506c:	eeb0 8a4d 	vmov.f32	s16, s26
 8015070:	e4a4      	b.n	80149bc <tMBPulse_tick+0x9c>
 8015072:	bf00      	nop
 8015074:	bf800000 	.word	0xbf800000
 8015078:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 801507c:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015080:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8015078 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
 8015084:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8015088:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801508c:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 8015090:	eeb0 0a6c 	vmov.f32	s0, s25
 8015094:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8015098:	f004 fbd2 	bl	8019840 <lrintf>
	r -= (float)i;
 801509c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150a0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80150a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80150a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150ac:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 80150ae:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80150b6:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
 80150ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80150be:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80150c2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80150c6:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80150ca:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80150ce:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80150d2:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80150d6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80150da:	f103 0301 	add.w	r3, r3, #1
 80150de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80150e2:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 80150e6:	f200 815e 	bhi.w	80153a6 <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80150ea:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 80150ee:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80150f0:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80150f4:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 80150f8:	eea8 0aab 	vfma.f32	s0, s17, s23
 80150fc:	f004 fba0 	bl	8019840 <lrintf>
	r -= (float)i;
 8015100:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015104:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015108:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801510c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015110:	4aad      	ldr	r2, [pc, #692]	; (80153c8 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015112:	3301      	adds	r3, #1
	r -= (float)i;
 8015114:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801511c:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015120:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015124:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015128:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 801512c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015130:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015134:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015138:	3301      	adds	r3, #1
 801513a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801513e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 8015142:	f8d5 8000 	ldr.w	r8, [r5]
 8015146:	e683      	b.n	8014e50 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8015148:	eddf baa0 	vldr	s23, [pc, #640]	; 80153cc <tMBPulse_tick+0xaac>
 801514c:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 8015150:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015154:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8015158:	eeac 0a2b 	vfma.f32	s0, s24, s23
 801515c:	f004 fb70 	bl	8019840 <lrintf>
	r -= (float)i;
 8015160:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015164:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015168:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801516c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015170:	4a95      	ldr	r2, [pc, #596]	; (80153c8 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015172:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 8015174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801517c:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 8015180:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015184:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015188:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801518c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015190:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 8015194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015198:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801519c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80151a0:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80151a4:	f103 0301 	add.w	r3, r3, #1
 80151a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80151ac:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 80151b0:	f8d5 8000 	ldr.w	r8, [r5]
 80151b4:	f6ff ae4c 	blt.w	8014e50 <tMBPulse_tick+0x530>
 80151b8:	e6b3      	b.n	8014f22 <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
 80151ba:	eef4 aacb 	vcmpe.f32	s21, s22
 80151be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c2:	f300 80ba 	bgt.w	801533a <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
 80151c6:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80151ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ce:	f57f af47 	bpl.w	8015060 <tMBPulse_tick+0x740>
 80151d2:	eddf ba7e 	vldr	s23, [pc, #504]	; 80153cc <tMBPulse_tick+0xaac>
 80151d6:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 80151da:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 80151de:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 80151e0:	eeb0 0a48 	vmov.f32	s0, s16
 80151e4:	eea8 0aab 	vfma.f32	s0, s17, s23
 80151e8:	f004 fb2a 	bl	8019840 <lrintf>
	r -= (float)i;
 80151ec:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 80151f0:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80151f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80151f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151fc:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015200:	e715      	b.n	801502e <tMBPulse_tick+0x70e>
                x = 0.5f;
 8015202:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 8015206:	2700      	movs	r7, #0
 8015208:	f7ff bbd8 	b.w	80149bc <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 801520c:	eddf 7a6f 	vldr	s15, [pc, #444]	; 80153cc <tMBPulse_tick+0xaac>
 8015210:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
 8015214:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015218:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801521a:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
 801521e:	464f      	mov	r7, r9
}
 8015220:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 8015224:	eea9 0a28 	vfma.f32	s0, s18, s17
 8015228:	f004 fb0a 	bl	8019840 <lrintf>
	r -= (float)i;
 801522c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015230:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015234:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801523c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015240:	3301      	adds	r3, #1
                x = 0.5f;
 8015242:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801524a:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 801524e:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015252:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015256:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801525a:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801525e:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015262:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015266:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801526a:	3301      	adds	r3, #1
 801526c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015270:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8015274:	f7ff bba2 	b.w	80149bc <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015278:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 801527c:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 8015280:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 8015284:	eeb0 0a6c 	vmov.f32	s0, s25
 8015288:	eea8 0aab 	vfma.f32	s0, s17, s23
 801528c:	f004 fad8 	bl	8019840 <lrintf>
	r -= (float)i;
 8015290:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015294:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015298:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801529c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80152a0:	4a49      	ldr	r2, [pc, #292]	; (80153c8 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152a2:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 80152a4:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80152ac:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 80152b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80152b4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152b8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80152bc:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80152c0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80152c4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80152c8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80152cc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80152d0:	f103 0301 	add.w	r3, r3, #1
 80152d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80152d8:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 80152dc:	dd70      	ble.n	80153c0 <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
 80152de:	ee78 8a6a 	vsub.f32	s17, s16, s21
 80152e2:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80152e4:	eeb0 0a6c 	vmov.f32	s0, s25
 80152e8:	ee78 8a8b 	vadd.f32	s17, s17, s22
 80152ec:	eea8 0aab 	vfma.f32	s0, s17, s23
 80152f0:	f004 faa6 	bl	8019840 <lrintf>
	r -= (float)i;
 80152f4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80152f8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80152fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015304:	3301      	adds	r3, #1
	r -= (float)i;
 8015306:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801530a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801530e:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015312:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015316:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801531a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 801531e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015322:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015326:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 801532a:	3301      	adds	r3, #1
 801532c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015330:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 8015334:	f8d5 8000 	ldr.w	r8, [r5]
 8015338:	e664      	b.n	8015004 <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
 801533a:	eddf ba24 	vldr	s23, [pc, #144]	; 80153cc <tMBPulse_tick+0xaac>
 801533e:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 8015342:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015346:	ee69 ba2b 	vmul.f32	s23, s18, s23
 801534a:	eeac 0aab 	vfma.f32	s0, s25, s23
 801534e:	f004 fa77 	bl	8019840 <lrintf>
	r -= (float)i;
 8015352:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015356:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801535a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801535e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015362:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8015364:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801536c:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 8015370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015374:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015378:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801537c:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015380:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8015384:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015388:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801538c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8015390:	f103 0301 	add.w	r3, r3, #1
 8015394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015398:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 801539c:	f8d5 8000 	ldr.w	r8, [r5]
 80153a0:	f57f ae30 	bpl.w	8015004 <tMBPulse_tick+0x6e4>
 80153a4:	e719      	b.n	80151da <tMBPulse_tick+0x8ba>
                    x = 0.5f;
 80153a6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80153aa:	f7ff bbc5 	b.w	8014b38 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 80153ae:	eeb0 8a68 	vmov.f32	s16, s17
 80153b2:	f7ff baea 	b.w	801498a <tMBPulse_tick+0x6a>
                x = -0.5f;
 80153b6:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 80153ba:	2701      	movs	r7, #1
 80153bc:	f7ff bafe 	b.w	80149bc <tMBPulse_tick+0x9c>
                    x = -0.5f;
 80153c0:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 80153c4:	2701      	movs	r7, #1
 80153c6:	e64b      	b.n	8015060 <tMBPulse_tick+0x740>
 80153c8:	bf800000 	.word	0xbf800000
 80153cc:	42800000 	.word	0x42800000

080153d0 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 80153d0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80153d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80153d6:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 80153da:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80153de:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80153e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80153e6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80153ea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80153ee:	4770      	bx	lr

080153f0 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 80153f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 80153f4:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 80153f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 80153fa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 80153fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015406:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801540a:	4770      	bx	lr

0801540c <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 801540c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801540e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8015412:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8015416:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 801541a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801541e:	eef1 7a67 	vneg.f32	s15, s15
 8015422:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8015426:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015432:	bfcc      	ite	gt
 8015434:	2201      	movgt	r2, #1
 8015436:	2200      	movle	r2, #0
 8015438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801543c:	f002 0201 	and.w	r2, r2, #1
 8015440:	bf88      	it	hi
 8015442:	2200      	movhi	r2, #0
 8015444:	b122      	cbz	r2, 8015450 <tMBPulse_sync+0x44>
 8015446:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801544a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544e:	da04      	bge.n	801545a <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8015450:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8015468 <tMBPulse_sync+0x5c>
 8015454:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8015458:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801545a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801545e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015462:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8015466:	4770      	bx	lr
 8015468:	00000000 	.word	0x00000000

0801546c <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 801546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801546e:	698e      	ldr	r6, [r1, #24]
{
 8015470:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8015472:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8015476:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8015478:	4631      	mov	r1, r6
 801547a:	f7ff f869 	bl	8014550 <mpool_alloc>
 801547e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8015480:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8015482:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8015484:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8015486:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801548a:	ed9f 6a18 	vldr	s12, [pc, #96]	; 80154ec <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 801548e:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8015490:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8015494:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8015498:	eddf 7a15 	vldr	s15, [pc, #84]	; 80154f0 <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 801549c:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 80154a0:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 80154a2:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 80154a6:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 80154a8:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80154aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 80154ae:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80154b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 80154b4:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80154b6:	4b0f      	ldr	r3, [pc, #60]	; (80154f4 <tMBTriangle_init+0x88>)
    c->softsync = 0;
 80154b8:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 80154ba:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 80154bc:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80154be:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80154c0:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80154c2:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80154c4:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 80154c6:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80154ca:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80154ce:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 80154d2:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80154d6:	306c      	adds	r0, #108	; 0x6c
 80154d8:	f003 ff7e 	bl	80193d8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80154dc:	4629      	mov	r1, r5
 80154de:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80154e2:	2220      	movs	r2, #32
}
 80154e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80154e8:	f003 bf76 	b.w	80193d8 <memset>
 80154ec:	3b14f209 	.word	0x3b14f209
 80154f0:	43dc0000 	.word	0x43dc0000
 80154f4:	11c01200 	.word	0x11c01200

080154f8 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 80154f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154fc:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 8015500:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 8015502:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 8015506:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 801550a:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
 801550c:	ed94 7a03 	vldr	s14, [r4, #12]
{
 8015510:	4607      	mov	r7, r0
    sync = c->sync;
 8015512:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 8015516:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 801551a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801551e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 8015522:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 8015526:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 801552a:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 801552e:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 8015532:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8015534:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 8015536:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 801553e:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 8015542:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8015546:	f340 8181 	ble.w	801584c <tMBTriangle_tick+0x354>
 801554a:	f8d4 901c 	ldr.w	r9, [r4, #28]
 801554e:	f1b9 0f00 	cmp.w	r9, #0
 8015552:	f340 8138 	ble.w	80157c6 <tMBTriangle_tick+0x2ce>
 8015556:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801555a:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801555e:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 8015562:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8015566:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801556a:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 801556e:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8015572:	ee76 6aab 	vadd.f32	s13, s13, s23
 8015576:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801557a:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 801557e:	2e00      	cmp	r6, #0
 8015580:	f040 8177 	bne.w	8015872 <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 8015584:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8015588:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 801558c:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8015590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8015594:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8015598:	f340 8252 	ble.w	8015a40 <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 801559c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80155a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a4:	f280 820c 	bge.w	80159c0 <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80155a8:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 80155aa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80155ae:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80155b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b6:	f280 837b 	bge.w	8015cb0 <tMBTriangle_tick+0x7b8>
 80155ba:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80155bc:	1d2b      	adds	r3, r5, #4
 80155be:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 80155c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80155c6:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80155ca:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80155ce:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80155d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	f000 80d3 	beq.w	8015782 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80155dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80155e0:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80155e4:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80155e6:	48ea      	ldr	r0, [pc, #936]	; (8015990 <tMBTriangle_tick+0x498>)
 80155e8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80155ec:	4fe9      	ldr	r7, [pc, #932]	; (8015994 <tMBTriangle_tick+0x49c>)
 80155ee:	e053      	b.n	8015698 <tMBTriangle_tick+0x1a0>
 80155f0:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 80155f4:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80155f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80155fc:	fa1f fe8e 	uxth.w	lr, lr
 8015600:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8015604:	fa1f f989 	uxth.w	r9, r9
 8015608:	b29b      	uxth	r3, r3
 801560a:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 801560e:	fa1f f888 	uxth.w	r8, r8
 8015612:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8015616:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 801561a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801561e:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8015622:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8015626:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801562a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801562e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8015632:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8015636:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 801563a:	ed99 7a00 	vldr	s14, [r9]
 801563e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8015642:	edd3 5a01 	vldr	s11, [r3, #4]
 8015646:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 801564a:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801564e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8015652:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015656:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8015658:	fa1f fe8e 	uxth.w	lr, lr
 801565c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015660:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8015664:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015668:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801566c:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8015670:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8015674:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8015678:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801567c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8015680:	459e      	cmp	lr, r3
 8015682:	d304      	bcc.n	801568e <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8015684:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8015688:	3b01      	subs	r3, #1
 801568a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801568e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8015692:	3201      	adds	r2, #1
 8015694:	4293      	cmp	r3, r2
 8015696:	dd74      	ble.n	8015782 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8015698:	ebac 0302 	sub.w	r3, ip, r2
 801569c:	b29b      	uxth	r3, r3
 801569e:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 80156a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80156a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80156aa:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80156ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80156b2:	b29b      	uxth	r3, r3
 80156b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80156b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80156bc:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80156c0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80156c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156c8:	d492      	bmi.n	80155f0 <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80156ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80156ce:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80156d8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80156dc:	fa1f fe8e 	uxth.w	lr, lr
 80156e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80156e4:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80156e8:	fa1f f989 	uxth.w	r9, r9
 80156ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80156f0:	fa1f f888 	uxth.w	r8, r8
 80156f4:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 80156f8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80156fc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015700:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015704:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8015708:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 801570c:	b29b      	uxth	r3, r3
 801570e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8015712:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8015716:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801571a:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 801571e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8015722:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8015726:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 801572a:	edd8 6a01 	vldr	s13, [r8, #4]
 801572e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015732:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015736:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801573a:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801573e:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8015742:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8015746:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801574a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801574e:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8015752:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8015756:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801575a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801575e:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015762:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8015766:	3340      	adds	r3, #64	; 0x40
 8015768:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801576c:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8015770:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8015774:	459e      	cmp	lr, r3
 8015776:	d285      	bcs.n	8015684 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015778:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801577c:	3201      	adds	r2, #1
 801577e:	4293      	cmp	r3, r2
 8015780:	dc8a      	bgt.n	8015698 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8015782:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015786:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801578a:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 801578e:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8015790:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8015794:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8015798:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 801579c:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 80157a0:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 80157a4:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 80157a8:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 80157ac:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 80157b0:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 80157b4:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 80157b8:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 80157bc:	b005      	add	sp, #20
 80157be:	ecbd 8b10 	vpop	{d8-d15}
 80157c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 80157c6:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80157ca:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80157ce:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 80157d2:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 80157d6:	eefd caeb 	vcvt.s32.f32	s25, s23
 80157da:	ee36 9aab 	vadd.f32	s18, s13, s23
 80157de:	eef8 caec 	vcvt.f32.s32	s25, s25
 80157e2:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80157e6:	f040 863f 	bne.w	8016468 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
 80157ea:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80157ee:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 80157f0:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 80157f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80157f8:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 80157fc:	f340 80ce 	ble.w	801599c <tMBTriangle_tick+0x4a4>
        if (!k) {
 8015800:	2e00      	cmp	r6, #0
 8015802:	f040 81e1 	bne.w	8015bc8 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 8015806:	eef4 9aee 	vcmpe.f32	s19, s29
 801580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801580e:	f240 8449 	bls.w	80160a4 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 8015812:	eef4 eae8 	vcmpe.f32	s29, s17
 8015816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801581a:	f280 82bf 	bge.w	8015d9c <tMBTriangle_tick+0x8a4>
 801581e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8015998 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 8015822:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015826:	ee2c ca27 	vmul.f32	s24, s24, s15
 801582a:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
 801582e:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015832:	f004 f805 	bl	8019840 <lrintf>
	r -= (float)i;
 8015836:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 801583a:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 801583e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8015842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015846:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 801584a:	e203      	b.n	8015c54 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 801584c:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8015850:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8015854:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 8015858:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 801585c:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8015860:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8015864:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8015868:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 801586c:	2e00      	cmp	r6, #0
 801586e:	f43f ae89 	beq.w	8015584 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 8015872:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 8015876:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 801587a:	ee79 7ac8 	vsub.f32	s15, s19, s16
 801587e:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8015882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8015886:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 801588a:	f340 815a 	ble.w	8015b42 <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 801588e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8015892:	eeb4 8acb 	vcmpe.f32	s16, s22
 8015896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801589a:	f6ff ae8f 	blt.w	80155bc <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 801589e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 80158a2:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8015998 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 80158a6:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 80158aa:	683e      	ldr	r6, [r7, #0]
 80158ac:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 80158b0:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80158b4:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 80158b8:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 80158bc:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 80158c0:	f003 ffbe 	bl	8019840 <lrintf>
	r -= (float)i;
 80158c4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80158c8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80158cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 80158d0:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 80158d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80158d8:	3301      	adds	r3, #1
 80158da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 80158de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 80158e2:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80158e6:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80158ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80158ee:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80158f2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80158f6:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80158fa:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80158fe:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015902:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015906:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801590a:	f103 0301 	add.w	r3, r3, #1
 801590e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015912:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8015916:	f200 843e 	bhi.w	8016196 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 801591a:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 801591e:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8015920:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 8015924:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8015928:	ee77 7ac8 	vsub.f32	s15, s15, s16
 801592c:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8015930:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015934:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 8015938:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 801593c:	f003 ff80 	bl	8019840 <lrintf>
	r -= (float)i;
 8015940:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015944:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015948:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 801594c:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 8015950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015954:	3301      	adds	r3, #1
 8015956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801595a:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801595e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015962:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015966:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801596a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801596e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015972:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015976:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801597a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801597e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8015982:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015984:	4433      	add	r3, r6
 8015986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801598a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801598e:	e615      	b.n	80155bc <tMBTriangle_tick+0xc4>
 8015990:	0802511c 	.word	0x0802511c
 8015994:	08029820 	.word	0x08029820
 8015998:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 801599c:	f100 828a 	bmi.w	8015eb4 <tMBTriangle_tick+0x9bc>
        if (!k) {
 80159a0:	2e00      	cmp	r6, #0
 80159a2:	f000 81f4 	beq.w	8015d8e <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 80159a6:	ee79 7a88 	vadd.f32	s15, s19, s16
 80159aa:	ee7c 6ac9 	vsub.f32	s13, s25, s18
 80159ae:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 80159b2:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 80159b6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80159ba:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
 80159be:	e5fd      	b.n	80155bc <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 80159c0:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8015998 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80159c4:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 80159c8:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 80159cc:	f8d7 8000 	ldr.w	r8, [r7]
 80159d0:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 80159d4:	ee79 7ac8 	vsub.f32	s15, s19, s16
 80159d8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80159dc:	eeae 0a2c 	vfma.f32	s0, s28, s25
 80159e0:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 80159e4:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80159e8:	f003 ff2a 	bl	8019840 <lrintf>
	r -= (float)i;
 80159ec:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80159f0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80159f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80159f8:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 80159fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a00:	3301      	adds	r3, #1
 8015a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015a06:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a0a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015a0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015a12:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015a16:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015a1a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015a1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015a22:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015a26:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015a2a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015a2e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015a32:	3301      	adds	r3, #1
 8015a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a38:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8015a3c:	2301      	movs	r3, #1
}
 8015a3e:	e5b4      	b.n	80155aa <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 8015a40:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a48:	f57f adb8 	bpl.w	80155bc <tMBTriangle_tick+0xc4>
 8015a4c:	eef5 ba40 	vcmp.f32	s23, #0.0
 8015a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a54:	f57f adb2 	bpl.w	80155bc <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 8015a58:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
 8015a5c:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8015998 <tMBTriangle_tick+0x4a0>
 8015a60:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8015a64:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8015a68:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8015a6c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015a70:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8015a74:	ee67 baab 	vmul.f32	s23, s15, s23
 8015a78:	f003 fee2 	bl	8019840 <lrintf>
	r -= (float)i;
 8015a7c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a80:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015a84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8015a88:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
 8015a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a90:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015a92:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8015a9a:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 8015a9e:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015aa2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015aa6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015aaa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8015aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ab2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ab6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8015aba:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015abe:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015ac2:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015ac6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015aca:	f103 0301 	add.w	r3, r3, #1
 8015ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ad2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8015ad6:	f340 84cb 	ble.w	8016470 <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
 8015ada:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 8015ade:	683f      	ldr	r7, [r7, #0]
 8015ae0:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
 8015ae4:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 8015ae8:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8015aec:	eeac 0a8c 	vfma.f32	s0, s25, s24
 8015af0:	f003 fea6 	bl	8019840 <lrintf>
	r -= (float)i;
 8015af4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015af8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015afc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b04:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8015b06:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015b0e:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b12:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b16:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015b1a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015b1e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b22:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015b26:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b2a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015b2e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015b32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015b36:	3301      	adds	r3, #1
 8015b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8015b40:	e53c      	b.n	80155bc <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 8015b42:	f57f ad3b 	bpl.w	80155bc <tMBTriangle_tick+0xc4>
            if (p < b) {
 8015b46:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8015b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b4e:	f100 8174 	bmi.w	8015e3a <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 8015b52:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b5a:	f57f ad2f 	bpl.w	80155bc <tMBTriangle_tick+0xc4>
                p += 1.0f;
 8015b5e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015b62:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8015998 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 8015b66:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 8015b6a:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8015b6c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8015b70:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 8015b74:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8015b78:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 8015b7c:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8015b80:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8015b84:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8015b88:	f003 fe5a 	bl	8019840 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 8015b90:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015b94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b98:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b9c:	3301      	adds	r3, #1
	r -= (float)i;
 8015b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015ba6:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015baa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015bae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015bb2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015bb6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015bba:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015bbe:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015bc2:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 8015bc6:	e6d8      	b.n	801597a <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 8015bc8:	ee3c 9ac9 	vsub.f32	s18, s25, s18
 8015bcc:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 8015bd0:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8015bd4:	eef0 ca4b 	vmov.f32	s25, s22
 8015bd8:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
 8015bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8015be0:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
 8015be4:	f280 81e1 	bge.w	8015faa <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8015be8:	ee3d ea2d 	vadd.f32	s28, s26, s27
 8015bec:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8015998 <tMBTriangle_tick+0x4a0>
 8015bf0:	ee2c ca27 	vmul.f32	s24, s24, s15
 8015bf4:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8015bf8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015bfc:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015c00:	f003 fe1e 	bl	8019840 <lrintf>
	r -= (float)i;
 8015c04:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c08:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c0c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8015c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c14:	3301      	adds	r3, #1
	r -= (float)i;
 8015c16:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c1e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c26:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015c2a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c2e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c36:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015c3a:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c3e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015c42:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015c46:	3301      	adds	r3, #1
 8015c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c4c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8015c50:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c54:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8015c58:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8015c5c:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c60:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8015c62:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8015c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c6e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c76:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8015c7a:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c7e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c82:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c86:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c8a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015c8e:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015c92:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015c96:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015c9a:	f103 0301 	add.w	r3, r3, #1
 8015c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ca2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8015ca6:	d93d      	bls.n	8015d24 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 8015ca8:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 8015cac:	464e      	mov	r6, r9
 8015cae:	e485      	b.n	80155bc <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 8015cb0:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 8015998 <tMBTriangle_tick+0x4a0>
 8015cb4:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 8015cb8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8015cbc:	683f      	ldr	r7, [r7, #0]
 8015cbe:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8015cc2:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8015cc6:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8015cca:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8015cce:	f003 fdb7 	bl	8019840 <lrintf>
	r -= (float)i;
 8015cd2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cd6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015cda:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ce2:	3301      	adds	r3, #1
	scale *= w;
 8015ce4:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 8015ce8:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015cf0:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cf4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015cf8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015cfc:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015d00:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d04:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015d08:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d0c:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015d10:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015d14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8015d18:	3301      	adds	r3, #1
 8015d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8015d22:	e44b      	b.n	80155bc <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 8015d24:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 8015d28:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 8015d2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8015d2e:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 8015d32:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8015d36:	eee7 7a2d 	vfma.f32	s15, s14, s27
 8015d3a:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8015d3e:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d42:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8015d46:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8015d4a:	f003 fd79 	bl	8019840 <lrintf>
	r -= (float)i;
 8015d4e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015d56:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015d5a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 8015d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d62:	3301      	adds	r3, #1
 8015d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015d68:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015d74:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015d78:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d7c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8015d80:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d84:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015d88:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015d8c:	e5f7      	b.n	801597e <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 8015d8e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 8015d92:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8015d96:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 8015d9a:	e40f      	b.n	80155bc <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8015d9c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8015da0:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 801613c <tMBTriangle_tick+0xc44>
 8015da4:	ee2c ca07 	vmul.f32	s24, s24, s14
 8015da8:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 8015dac:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8015db0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8015db4:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
 8015db8:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8015dbc:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8015dc0:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
 8015dc4:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8015dc8:	eeab 0a0c 	vfma.f32	s0, s22, s24
 8015dcc:	f003 fd38 	bl	8019840 <lrintf>
	r -= (float)i;
 8015dd0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015dd4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015dd8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015de0:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8015de2:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8015de6:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8015dee:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015df2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015df6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015dfa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015dfe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e02:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8015e06:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e0a:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e0e:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015e12:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015e16:	3301      	adds	r3, #1
 8015e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e1c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8015e20:	f003 fd0e 	bl	8019840 <lrintf>
	r -= (float)i;
 8015e24:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e28:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8015e2c:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8015e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e34:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8015e38:	e70c      	b.n	8015c54 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 8015e3a:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 801613c <tMBTriangle_tick+0xc44>
 8015e3e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015e42:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 8015e46:	683e      	ldr	r6, [r7, #0]
 8015e48:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8015e4c:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8015e50:	eeab 0a09 	vfma.f32	s0, s22, s18
 8015e54:	f003 fcf4 	bl	8019840 <lrintf>
	r -= (float)i;
 8015e58:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e5c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8015e60:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8015e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015e68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e6c:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8015e6e:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 8015e72:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015e7a:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e7e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e82:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e86:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8015e8a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e8e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e96:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e9a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015e9e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015ea2:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015eac:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8015eb0:	2600      	movs	r6, #0
}
 8015eb2:	e64e      	b.n	8015b52 <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 8015eb4:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 8015eb8:	2e00      	cmp	r6, #0
 8015eba:	f040 8141 	bne.w	8016140 <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 8015ebe:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8015ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ec6:	f100 81ac 	bmi.w	8016222 <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8015eca:	ee3d 9a2d 	vadd.f32	s18, s26, s27
 8015ece:	eddf 7a9b 	vldr	s15, [pc, #620]	; 801613c <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 8015ed2:	ee6d ea2e 	vmul.f32	s29, s26, s29
 8015ed6:	ee2c ca27 	vmul.f32	s24, s24, s15
 8015eda:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
 8015ede:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015ee2:	eef1 8a48 	vneg.f32	s17, s16
 8015ee6:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8015eea:	f003 fca9 	bl	8019840 <lrintf>
	r -= (float)i;
 8015eee:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ef2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ef6:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8015efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015efe:	3301      	adds	r3, #1
	r -= (float)i;
 8015f00:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f08:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f0c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f10:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015f14:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f18:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f20:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f24:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f28:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015f2c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015f30:	3301      	adds	r3, #1
 8015f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f36:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8015f3a:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f3e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 8015f42:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
 8015f46:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8015f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f54:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f58:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f5c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8015f60:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f64:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f68:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f6c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f70:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8015f74:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015f78:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8015f7c:	f103 0301 	add.w	r3, r3, #1
 8015f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f84:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8015f88:	f300 810c 	bgt.w	80161a4 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 8015f8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8015f90:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8015f92:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8015f96:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015f9a:	eeb0 8a4f 	vmov.f32	s16, s30
 8015f9e:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8015fa2:	eee7 8aad 	vfma.f32	s17, s15, s27
 8015fa6:	f7ff bb09 	b.w	80155bc <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 8015faa:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8015fae:	eddf 7a63 	vldr	s15, [pc, #396]	; 801613c <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8015fb2:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8015fb6:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8015fba:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 8015fbe:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8015fc2:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 8015fc6:	eeac 0a0f 	vfma.f32	s0, s24, s30
 8015fca:	f003 fc39 	bl	8019840 <lrintf>
	r -= (float)i;
 8015fce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fd2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015fd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fde:	3301      	adds	r3, #1
	scale *= w;
 8015fe0:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 8015fe4:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015fec:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ff0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ff4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ff8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8015ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016000:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016004:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016008:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801600c:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016010:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016014:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016018:	f103 0301 	add.w	r3, r3, #1
 801601c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016020:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8016024:	f200 81b5 	bhi.w	8016392 <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016028:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
 801602c:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
 801602e:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
 8016032:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016036:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801603a:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 801603e:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016042:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
 8016046:	f003 fbfb 	bl	8019840 <lrintf>
	r -= (float)i;
 801604a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801604e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016052:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016056:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 801605a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801605e:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016060:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016068:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801606c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016070:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016074:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016078:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801607c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016080:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016084:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016088:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801608c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016090:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016094:	3301      	adds	r3, #1
 8016096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801609a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 801609e:	f8d7 8000 	ldr.w	r8, [r7]
 80160a2:	e5a9      	b.n	8015bf8 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80160a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801613c <tMBTriangle_tick+0xc44>
 80160a8:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 80160ac:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80160b0:	ee2c ca07 	vmul.f32	s24, s24, s14
 80160b4:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 80160b8:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 80160bc:	ee27 eaab 	vmul.f32	s28, s15, s23
 80160c0:	f003 fbbe 	bl	8019840 <lrintf>
	r -= (float)i;
 80160c4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160c8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80160cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80160d0:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 80160d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160d8:	3301      	adds	r3, #1
 80160da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80160de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 80160e2:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160e6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80160ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80160ee:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80160f2:	eeb0 fa4e 	vmov.f32	s30, s28
 80160f6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80160fa:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80160fe:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016102:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016106:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801610a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801610e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016112:	f103 0301 	add.w	r3, r3, #1
 8016116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801611a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 801611e:	da7d      	bge.n	801621c <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016120:	ee79 6a88 	vadd.f32	s13, s19, s16
 8016124:	f8d7 8000 	ldr.w	r8, [r7]
 8016128:	ee76 6aac 	vadd.f32	s13, s13, s25
 801612c:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8016130:	eea6 baad 	vfma.f32	s22, s13, s27
 8016134:	eef0 ca4b 	vmov.f32	s25, s22
 8016138:	e55e      	b.n	8015bf8 <tMBTriangle_tick+0x700>
 801613a:	bf00      	nop
 801613c:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 8016140:	ee39 7a88 	vadd.f32	s14, s19, s16
 8016144:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
 8016148:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 801614c:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
 8016150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8016154:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
 8016158:	f300 80da 	bgt.w	8016310 <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
 801615c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8016160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016164:	f100 8128 	bmi.w	80163b8 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
 8016168:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 801613c <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 801616c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016170:	ee77 eaa8 	vadd.f32	s29, s15, s17
 8016174:	ee2c ca07 	vmul.f32	s24, s24, s14
 8016178:	eef1 8a48 	vneg.f32	s17, s16
 801617c:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8016180:	f003 fb5e 	bl	8019840 <lrintf>
	r -= (float)i;
 8016184:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016188:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801618c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016190:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8016194:	e6d3      	b.n	8015f3e <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 8016196:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 801619a:	2600      	movs	r6, #0
                p -= 1.0f;
 801619c:	eeb0 8a6c 	vmov.f32	s16, s25
 80161a0:	f7ff ba0c 	b.w	80155bc <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 80161a4:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 80161a8:	683f      	ldr	r7, [r7, #0]
 80161aa:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
 80161ae:	464e      	mov	r6, r9
}
 80161b0:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 80161b4:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 80161b8:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
 80161bc:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 80161c0:	eea9 0a0c 	vfma.f32	s0, s18, s24
 80161c4:	f003 fb3c 	bl	8019840 <lrintf>
	r -= (float)i;
 80161c8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161cc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80161d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80161d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161d8:	3301      	adds	r3, #1
	scale *= w;
 80161da:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80161e2:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80161ee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80161f2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161f6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80161fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161fe:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016202:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016206:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801620a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801620e:	3301      	adds	r3, #1
 8016210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016214:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016218:	f7ff b9d0 	b.w	80155bc <tMBTriangle_tick+0xc4>
 801621c:	f8d7 8000 	ldr.w	r8, [r7]
 8016220:	e5c4      	b.n	8015dac <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 8016222:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8016226:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 801613c <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801622a:	ee3d ba2d 	vadd.f32	s22, s26, s27
 801622e:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
 8016232:	eeb0 0a67 	vmov.f32	s0, s15
 8016236:	edcd 7a01 	vstr	s15, [sp, #4]
 801623a:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
 801623e:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
 8016242:	eeac 0a0e 	vfma.f32	s0, s24, s28
 8016246:	f003 fafb 	bl	8019840 <lrintf>
	r -= (float)i;
 801624a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801624e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016252:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
 801625a:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801625e:	3301      	adds	r3, #1
 8016260:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
 8016264:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801626c:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016270:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016274:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016278:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 801627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016280:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016284:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016288:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801628c:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016290:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016294:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016298:	f103 0301 	add.w	r3, r3, #1
 801629c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80162a0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 80162a4:	f340 80ed 	ble.w	8016482 <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
 80162a8:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
 80162ac:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 80162ae:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
 80162b2:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
 80162b6:	eeec 7a2c 	vfma.f32	s15, s24, s25
 80162ba:	eeb0 0a67 	vmov.f32	s0, s15
 80162be:	f003 fabf 	bl	8019840 <lrintf>
	r -= (float)i;
 80162c2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162c6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80162ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80162ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162d2:	3301      	adds	r3, #1
	r -= (float)i;
 80162d4:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80162d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80162dc:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80162e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80162e4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80162e8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80162ec:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80162f0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80162f4:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80162f8:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80162fc:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016300:	3301      	adds	r3, #1
 8016302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016306:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 801630a:	f8d7 8000 	ldr.w	r8, [r7]
 801630e:	e5e6      	b.n	8015ede <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 8016310:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 801613c <tMBTriangle_tick+0xc44>
 8016314:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
 8016318:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801631c:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
 8016320:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 8016324:	eeac 0a2c 	vfma.f32	s0, s24, s25
 8016328:	f003 fa8a 	bl	8019840 <lrintf>
	r -= (float)i;
 801632c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016330:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016334:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801633c:	3301      	adds	r3, #1
	scale *= w;
 801633e:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 8016342:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016346:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801634a:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801634e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016352:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016356:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 801635a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801635e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016362:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016366:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801636a:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801636e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016372:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016376:	f103 0301 	add.w	r3, r3, #1
 801637a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801637e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 8016382:	d46e      	bmi.n	8016462 <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
 8016384:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
 8016388:	f8d7 8000 	ldr.w	r8, [r7]
 801638c:	eeb1 9a4b 	vneg.f32	s18, s22
 8016390:	e5a5      	b.n	8015ede <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 8016392:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
 8016396:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 801639a:	eeac 0a08 	vfma.f32	s0, s24, s16
 801639e:	f003 fa4f 	bl	8019840 <lrintf>
	r -= (float)i;
 80163a2:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80163a6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80163aa:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80163ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163b2:	eedc 7a08 	vfnms.f32	s15, s24, s16
 80163b6:	e44d      	b.n	8015c54 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80163b8:	ee3d ba2d 	vadd.f32	s22, s26, s27
 80163bc:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 801613c <tMBTriangle_tick+0xc44>
 80163c0:	ee2c ca27 	vmul.f32	s24, s24, s15
 80163c4:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 80163c8:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80163cc:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 80163d0:	ee39 9a08 	vadd.f32	s18, s18, s16
 80163d4:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
 80163d8:	eeb0 0a6c 	vmov.f32	s0, s25
 80163dc:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 80163e0:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
 80163e4:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80163e8:	eeb1 9a4b 	vneg.f32	s18, s22
 80163ec:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
 80163f0:	f003 fa26 	bl	8019840 <lrintf>
	r -= (float)i;
 80163f4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80163f8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80163fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8016400:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
 8016404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016408:	3301      	adds	r3, #1
 801640a:	eef1 8a48 	vneg.f32	s17, s16
 801640e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8016412:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
 8016416:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801641a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801641e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016422:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016426:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801642a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801642e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016432:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016436:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801643a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801643e:	3301      	adds	r3, #1
 8016440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016444:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8016448:	f003 f9fa 	bl	8019840 <lrintf>
	r -= (float)i;
 801644c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016450:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8016454:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8016458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801645c:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8016460:	e56d      	b.n	8015f3e <tMBTriangle_tick+0xa46>
 8016462:	f8d7 8000 	ldr.w	r8, [r7]
 8016466:	e7af      	b.n	80163c8 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
 8016468:	eeb0 8a4e 	vmov.f32	s16, s28
 801646c:	f7ff b887 	b.w	801557e <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 8016470:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 8016474:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 8016476:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801647a:	eee7 8aad 	vfma.f32	s17, s15, s27
 801647e:	f7ff b89d 	b.w	80155bc <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8016482:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8016486:	ee79 caef 	vsub.f32	s25, s19, s31
 801648a:	eeb1 9a48 	vneg.f32	s18, s16
 801648e:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
 8016492:	eeb0 0a67 	vmov.f32	s0, s15
 8016496:	f003 f9d3 	bl	8019840 <lrintf>
	r -= (float)i;
 801649a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801649e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80164a2:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80164a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164aa:	eef0 ea68 	vmov.f32	s29, s17
 80164ae:	eedc 7a09 	vfnms.f32	s15, s24, s18
 80164b2:	e544      	b.n	8015f3e <tMBTriangle_tick+0xa46>

080164b4 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 80164b4:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80164b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80164ba:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 80164be:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80164c2:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80164c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80164ca:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80164ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 80164d2:	4770      	bx	lr

080164d4 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 80164d4:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 80164d6:	6804      	ldr	r4, [r0, #0]
{
 80164d8:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 80164dc:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80164f0 <tMBTriangle_setWidth+0x1c>
 80164e0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80164f4 <tMBTriangle_setWidth+0x20>
 80164e4:	f7fd feb0 	bl	8014248 <LEAF_clip>
    c->waveform = w;
 80164e8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80164ec:	bd10      	pop	{r4, pc}
 80164ee:	bf00      	nop
 80164f0:	3f7d70a4 	.word	0x3f7d70a4
 80164f4:	00000000 	.word	0x00000000

080164f8 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 80164f8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80164fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80164fe:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8016502:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8016506:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801650a:	eef1 7a67 	vneg.f32	s15, s15
 801650e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8016512:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8016516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801651a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801651e:	bfcc      	ite	gt
 8016520:	2201      	movgt	r2, #1
 8016522:	2200      	movle	r2, #0
 8016524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016528:	f002 0201 	and.w	r2, r2, #1
 801652c:	bf88      	it	hi
 801652e:	2200      	movhi	r2, #0
 8016530:	b122      	cbz	r2, 801653c <tMBTriangle_sync+0x44>
 8016532:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8016536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801653a:	da04      	bge.n	8016546 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801653c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8016554 <tMBTriangle_sync+0x5c>
 8016540:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8016544:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8016546:	ee37 7a66 	vsub.f32	s14, s14, s13
 801654a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801654e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8016552:	4770      	bx	lr
 8016554:	00000000 	.word	0x00000000

08016558 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 8016558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801655a:	698e      	ldr	r6, [r1, #24]
{
 801655c:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 801655e:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8016562:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8016564:	4631      	mov	r1, r6
 8016566:	f7fd fff3 	bl	8014550 <mpool_alloc>
 801656a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 801656c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801656e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8016570:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 8016572:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8016576:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80165e4 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 801657a:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 801657c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8016580:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8016584:	eddf 7a18 	vldr	s15, [pc, #96]	; 80165e8 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8016588:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801658c:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 801658e:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8016592:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8016594:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8016596:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 801659a:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801659c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 80165a0:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 80165a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 80165a4:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 80165a6:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 80165aa:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80165ac:	490f      	ldr	r1, [pc, #60]	; (80165ec <tMBSineTri_init+0x94>)
    c->softsync = 0;
 80165ae:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 80165b0:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80165b2:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80165b4:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80165b6:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 80165b8:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 80165bc:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80165c0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80165c4:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80165c8:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80165cc:	4629      	mov	r1, r5
 80165ce:	306c      	adds	r0, #108	; 0x6c
 80165d0:	f002 ff02 	bl	80193d8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80165d4:	4629      	mov	r1, r5
 80165d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80165da:	2220      	movs	r2, #32
}
 80165dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80165e0:	f002 befa 	b.w	80193d8 <memset>
 80165e4:	3b14f209 	.word	0x3b14f209
 80165e8:	43dc0000 	.word	0x43dc0000
 80165ec:	11c01200 	.word	0x11c01200

080165f0 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 80165f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165f4:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 80165f8:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80165fa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 80165fe:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 8016602:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 8016604:	ed94 9a03 	vldr	s18, [r4, #12]
{
 8016608:	4607      	mov	r7, r0
    sync = c->sync;
 801660a:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 801660e:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 8016612:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016616:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 801661a:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
 801661e:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 8016622:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 8016626:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 801662a:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 801662e:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 8016636:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 801663a:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 801663e:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016642:	f340 81d8 	ble.w	80169f6 <tMBSineTri_tick+0x406>
 8016646:	f8d4 901c 	ldr.w	r9, [r4, #28]
 801664a:	f1b9 0f00 	cmp.w	r9, #0
 801664e:	f340 8189 	ble.w	8016964 <tMBSineTri_tick+0x374>
 8016652:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8016656:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801665a:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 801665e:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016662:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016666:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
 801666a:	eefd 7acc 	vcvt.s32.f32	s15, s24
 801666e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016672:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8016676:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 801667a:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 801667e:	2e00      	cmp	r6, #0
 8016680:	f040 81cc 	bne.w	8016a1c <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 8016684:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8016688:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 801668c:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8016690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8016694:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 8016698:	f340 82a1 	ble.w	8016bde <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 801669c:	eeb4 aac9 	vcmpe.f32	s20, s18
 80166a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a4:	f280 825b 	bge.w	8016b5e <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80166a8:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 80166aa:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80166ae:	eeb4 aacb 	vcmpe.f32	s20, s22
 80166b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166b6:	f280 83c8 	bge.w	8016e4a <tMBSineTri_tick+0x85a>
 80166ba:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 80166bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80166c0:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 80166c2:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80166c6:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 80166ca:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 80166ce:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 80166d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d6:	db0a      	blt.n	80166ee <tMBSineTri_tick+0xfe>
 80166d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 80166dc:	eef0 7a48 	vmov.f32	s15, s16
 80166e0:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 80166e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80166e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ec:	daf6      	bge.n	80166dc <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 80166ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80166f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f6:	d50c      	bpl.n	8016712 <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 80166f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 80166fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 8016700:	eef0 7a48 	vmov.f32	s15, s16
 8016704:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 8016708:	eef4 7ac7 	vcmpe.f32	s15, s14
 801670c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016710:	d4f6      	bmi.n	8016700 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 8016712:	eddf 7abd 	vldr	s15, [pc, #756]	; 8016a08 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 801671a:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801671e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 8016722:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016726:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801672a:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 801672e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016732:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 8016736:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 801673a:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 801673e:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 8016740:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 8016744:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 8016746:	49b1      	ldr	r1, [pc, #708]	; (8016a0c <tMBSineTri_tick+0x41c>)
 8016748:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 801674c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 8016750:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 8016754:	ed91 6a00 	vldr	s12, [r1]
 8016758:	ee36 6a66 	vsub.f32	s12, s12, s13
 801675c:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8016760:	eee7 8a26 	vfma.f32	s17, s14, s13
 8016764:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8016768:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 801676c:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016770:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016774:	2b00      	cmp	r3, #0
 8016776:	f000 80d3 	beq.w	8016920 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801677a:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801677e:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016780:	48a3      	ldr	r0, [pc, #652]	; (8016a10 <tMBSineTri_tick+0x420>)
 8016782:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8016786:	4fa3      	ldr	r7, [pc, #652]	; (8016a14 <tMBSineTri_tick+0x424>)
 8016788:	e053      	b.n	8016832 <tMBSineTri_tick+0x242>
 801678a:	f8bd e006 	ldrh.w	lr, [sp, #6]
 801678e:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8016792:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016796:	fa1f fe8e 	uxth.w	lr, lr
 801679a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801679e:	fa1f f989 	uxth.w	r9, r9
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80167a8:	fa1f f888 	uxth.w	r8, r8
 80167ac:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80167b0:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80167b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80167b8:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80167bc:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 80167c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80167c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80167c8:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 80167cc:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 80167d0:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 80167d4:	ed99 7a00 	vldr	s14, [r9]
 80167d8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80167dc:	ed93 6a01 	vldr	s12, [r3, #4]
 80167e0:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 80167e4:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80167e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80167ec:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80167f0:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80167f2:	fa1f fe8e 	uxth.w	lr, lr
 80167f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80167fa:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80167fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016802:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8016806:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 801680a:	f108 0840 	add.w	r8, r8, #64	; 0x40
 801680e:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8016812:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8016816:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801681a:	459e      	cmp	lr, r3
 801681c:	d304      	bcc.n	8016828 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 801681e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8016822:	3b01      	subs	r3, #1
 8016824:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016828:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801682c:	3201      	adds	r2, #1
 801682e:	4293      	cmp	r3, r2
 8016830:	dd76      	ble.n	8016920 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016832:	ebac 0302 	sub.w	r3, ip, r2
 8016836:	b29b      	uxth	r3, r3
 8016838:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801683c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016844:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8016848:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801684c:	b29b      	uxth	r3, r3
 801684e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016852:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016856:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 801685a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016862:	d492      	bmi.n	801678a <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8016864:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016868:	f8bd e006 	ldrh.w	lr, [sp, #6]
 801686c:	b29b      	uxth	r3, r3
 801686e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8016872:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8016876:	fa1f fe8e 	uxth.w	lr, lr
 801687a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801687e:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8016882:	fa1f f989 	uxth.w	r9, r9
 8016886:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801688a:	fa1f f888 	uxth.w	r8, r8
 801688e:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8016892:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8016896:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801689a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801689e:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80168a2:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80168a6:	b29b      	uxth	r3, r3
 80168a8:	ee24 7a07 	vmul.f32	s14, s8, s14
 80168ac:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80168b0:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80168b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80168b8:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 80168bc:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80168c0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80168c4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80168c8:	ed98 6a01 	vldr	s12, [r8, #4]
 80168cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80168d0:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80168d4:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80168d8:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80168dc:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80168e0:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80168e4:	ee36 6a64 	vsub.f32	s12, s12, s9
 80168e8:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80168ec:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80168f0:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80168f4:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80168f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80168fc:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8016900:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8016904:	3340      	adds	r3, #64	; 0x40
 8016906:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801690a:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 801690e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8016912:	459e      	cmp	lr, r3
 8016914:	d283      	bcs.n	801681e <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016916:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801691a:	3201      	adds	r2, #1
 801691c:	4293      	cmp	r3, r2
 801691e:	dc88      	bgt.n	8016832 <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8016920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016924:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8016928:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 801692a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 801692e:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 8016932:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8016936:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 801693a:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 801693e:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 8016942:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 8016946:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 801694a:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 801694e:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 8016952:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 8016956:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 801695a:	b003      	add	sp, #12
 801695c:	ecbd 8b10 	vpop	{d8-d15}
 8016960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8016964:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016968:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 801696c:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8016970:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 8016974:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8016978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801697c:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8016980:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
 8016984:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8016988:	f040 8644 	bne.w	8017614 <tMBSineTri_tick+0x1024>
        if (sw > 0)
 801698c:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8016990:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8016992:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 8016996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801699a:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 801699e:	f340 80cc 	ble.w	8016b3a <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 80169a2:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 80169a6:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 80169aa:	2e00      	cmp	r6, #0
 80169ac:	f040 81dd 	bne.w	8016d6a <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 80169b0:	eeb4 9ace 	vcmpe.f32	s18, s28
 80169b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169b8:	f240 844d 	bls.w	8017256 <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 80169bc:	eeb4 eae8 	vcmpe.f32	s28, s17
 80169c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c4:	f280 82b9 	bge.w	8016f3a <tMBSineTri_tick+0x94a>
 80169c8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016a18 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 80169cc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80169d0:	ee6c caa7 	vmul.f32	s25, s25, s15
 80169d4:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 80169d8:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 80169dc:	f002 ff30 	bl	8019840 <lrintf>
	r -= (float)i;
 80169e0:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 80169e4:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 80169e8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80169ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80169f0:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 80169f4:	e1fd      	b.n	8016df2 <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 80169f6:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80169fa:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 80169fe:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8016a02:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016a06:	e630      	b.n	801666a <tMBSineTri_tick+0x7a>
 8016a08:	45000000 	.word	0x45000000
 8016a0c:	0802309c 	.word	0x0802309c
 8016a10:	0802511c 	.word	0x0802511c
 8016a14:	08029820 	.word	0x08029820
 8016a18:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 8016a1c:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 8016a20:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 8016a24:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8016a28:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8016a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8016a30:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8016a34:	f340 8154 	ble.w	8016ce0 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 8016a38:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8016a3c:	eeb4 aaeb 	vcmpe.f32	s20, s23
 8016a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a44:	f6ff ae3a 	blt.w	80166bc <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 8016a48:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8016a4c:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8016a18 <tMBSineTri_tick+0x428>
                p -= 1.0f;
 8016a50:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 8016a54:	683e      	ldr	r6, [r7, #0]
 8016a56:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 8016a5a:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8016a5e:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8016a62:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 8016a66:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8016a6a:	f002 fee9 	bl	8019840 <lrintf>
	r -= (float)i;
 8016a6e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a72:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016a76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8016a7a:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 8016a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a82:	3301      	adds	r3, #1
 8016a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8016a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8016a8c:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a90:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016a94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016a98:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016a9c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016aa0:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8016aa4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016aa8:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016aac:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016ab0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016ab4:	f103 0301 	add.w	r3, r3, #1
 8016ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016abc:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8016ac0:	f200 843b 	bhi.w	801733a <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 8016ac4:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 8016ac8:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016aca:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 8016ace:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8016ad2:	ee77 7aca 	vsub.f32	s15, s15, s20
 8016ad6:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8016ada:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 8016ade:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 8016ae2:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016ae6:	f002 feab 	bl	8019840 <lrintf>
	r -= (float)i;
 8016aea:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016aee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016af2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016af6:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 8016afa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016afe:	3301      	adds	r3, #1
 8016b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016b04:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016b10:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016b14:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b18:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016b1c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016b20:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b24:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016b28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8016b2c:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016b2e:	4433      	add	r3, r6
 8016b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016b38:	e5c0      	b.n	80166bc <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8016b3a:	f100 828a 	bmi.w	8017052 <tMBSineTri_tick+0xa62>
        if (!k) {
 8016b3e:	2e00      	cmp	r6, #0
 8016b40:	f000 81f1 	beq.w	8016f26 <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 8016b44:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
 8016b48:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 8016b4c:	eef0 8a6b 	vmov.f32	s17, s23
 8016b50:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
 8016b54:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 8016b58:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
 8016b5c:	e5ae      	b.n	80166bc <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 8016b5e:	ed1f ea52 	vldr	s28, [pc, #-328]	; 8016a18 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016b62:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 8016b66:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8016b6a:	f8d7 8000 	ldr.w	r8, [r7]
 8016b6e:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 8016b72:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8016b76:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016b7a:	eeae 0a8e 	vfma.f32	s0, s29, s28
 8016b7e:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8016b82:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016b86:	f002 fe5b 	bl	8019840 <lrintf>
	r -= (float)i;
 8016b8a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b8e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016b92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016b96:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 8016b9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016ba4:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ba8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016bac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016bb0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016bb4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016bb8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016bbc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016bc0:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016bc4:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016bc8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016bcc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016bd6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8016bda:	2301      	movs	r3, #1
}
 8016bdc:	e565      	b.n	80166aa <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 8016bde:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8016be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be6:	f57f ad69 	bpl.w	80166bc <tMBSineTri_tick+0xcc>
 8016bea:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8016bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bf2:	f57f ad63 	bpl.w	80166bc <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 8016bf6:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
 8016bfa:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 8016a18 <tMBSineTri_tick+0x428>
 8016bfe:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8016c02:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8016c06:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8016c0a:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8016c0e:	eeae 0a28 	vfma.f32	s0, s28, s17
 8016c12:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016c16:	f002 fe13 	bl	8019840 <lrintf>
	r -= (float)i;
 8016c1a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c1e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016c22:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8016c26:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
 8016c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c2e:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016c30:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8016c38:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 8016c3c:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c40:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c44:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016c48:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8016c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016c50:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c54:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016c58:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016c5c:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016c60:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016c64:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016c68:	f103 0301 	add.w	r3, r3, #1
 8016c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c70:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8016c74:	f340 84d4 	ble.w	8017620 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 8016c78:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8016c7c:	683f      	ldr	r7, [r7, #0]
 8016c7e:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 8016c82:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 8016c86:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8016c8a:	eeac 0aad 	vfma.f32	s0, s25, s27
 8016c8e:	f002 fdd7 	bl	8019840 <lrintf>
	r -= (float)i;
 8016c92:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016c9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ca2:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8016ca4:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016cac:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016cb0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016cb4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016cb8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016cbc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016cc0:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016cc4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016cc8:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ccc:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016cd0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016cde:	e4ed      	b.n	80166bc <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8016ce0:	f57f acec 	bpl.w	80166bc <tMBSineTri_tick+0xcc>
            if (p < b) {
 8016ce4:	eeb4 aac9 	vcmpe.f32	s20, s18
 8016ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cec:	f100 8174 	bmi.w	8016fd8 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 8016cf0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8016cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf8:	f57f ace0 	bpl.w	80166bc <tMBSineTri_tick+0xcc>
                p += 1.0f;
 8016cfc:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8016d00:	ed5f babb 	vldr	s23, [pc, #-748]	; 8016a18 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 8016d04:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 8016d08:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8016d0a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8016d0e:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 8016d12:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016d16:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 8016d1a:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8016d1e:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8016d22:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016d26:	f002 fd8b 	bl	8019840 <lrintf>
	r -= (float)i;
 8016d2a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016d32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d36:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8016d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d3e:	3301      	adds	r3, #1
 8016d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016d44:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d48:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016d50:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016d54:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d58:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d5c:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016d60:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d64:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8016d68:	e6de      	b.n	8016b28 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d6a:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8016d6e:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d72:	eef0 fa6b 	vmov.f32	s31, s23
 8016d76:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 8016d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8016d7e:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 8016d82:	f280 81eb 	bge.w	801715c <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016d86:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8016d8a:	ed5f 7add 	vldr	s15, [pc, #-884]	; 8016a18 <tMBSineTri_tick+0x428>
 8016d8e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016d92:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 8016d96:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016d9a:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8016d9e:	f002 fd4f 	bl	8019840 <lrintf>
	r -= (float)i;
 8016da2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016da6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016daa:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8016dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016db2:	3301      	adds	r3, #1
	r -= (float)i;
 8016db4:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016dbc:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016dc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016dc4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016dc8:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016dcc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016dd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016dd4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016dd8:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ddc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016de0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016de4:	3301      	adds	r3, #1
 8016de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016dea:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8016dee:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016df2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016df6:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 8016dfa:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016dfe:	3301      	adds	r3, #1
 8016e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8016e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e08:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e10:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016e14:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e18:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016e1c:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e20:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016e24:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016e28:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016e2c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016e30:	f103 0301 	add.w	r3, r3, #1
 8016e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016e38:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8016e3c:	d940      	bls.n	8016ec0 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 8016e3e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 8016e42:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 8016e44:	eeed 8a0a 	vfma.f32	s17, s26, s20
 8016e48:	e438      	b.n	80166bc <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 8016e4a:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8017158 <tMBSineTri_tick+0xb68>
 8016e4e:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 8016e52:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8016e56:	683f      	ldr	r7, [r7, #0]
 8016e58:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8016e5c:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8016e60:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8016e64:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8016e68:	f002 fcea 	bl	8019840 <lrintf>
	r -= (float)i;
 8016e6c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e70:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016e74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e7c:	3301      	adds	r3, #1
	scale *= w;
 8016e7e:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 8016e82:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016e8a:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e8e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e92:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e96:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016e9a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e9e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016ea2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016ea6:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016eaa:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016eae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8016eb2:	3301      	adds	r3, #1
 8016eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016eb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016ebc:	f7ff bbfe 	b.w	80166bc <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016ec0:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8016ec4:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8016ec6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 8016eca:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8016ece:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016ed2:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8016ed6:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8016eda:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016ede:	f002 fcaf 	bl	8019840 <lrintf>
	r -= (float)i;
 8016ee2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ee6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016eea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016eee:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8016ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ef6:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ef8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016f00:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f08:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016f0c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016f10:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f14:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016f18:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f1c:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016f20:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016f24:	e600      	b.n	8016b28 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 8016f26:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 8016f2a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8016f2e:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 8016f32:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 8016f36:	f7ff bbc1 	b.w	80166bc <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016f3a:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8016f3e:	eddf 7a86 	vldr	s15, [pc, #536]	; 8017158 <tMBSineTri_tick+0xb68>
 8016f42:	ee6c caa7 	vmul.f32	s25, s25, s15
 8016f46:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
 8016f4a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8016f4e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8016f52:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 8016f56:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8016f5a:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8016f5e:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 8016f62:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 8016f66:	eeab 0aac 	vfma.f32	s0, s23, s25
 8016f6a:	f002 fc69 	bl	8019840 <lrintf>
	r -= (float)i;
 8016f6e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f72:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016f76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f7e:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8016f80:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8016f84:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8016f8c:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f90:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016f98:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016f9c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016fa0:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016fa4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016fa8:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016fac:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016fb0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016fb4:	3301      	adds	r3, #1
 8016fb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fba:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8016fbe:	f002 fc3f 	bl	8019840 <lrintf>
	r -= (float)i;
 8016fc2:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016fc6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8016fca:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8016fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fd2:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8016fd6:	e70c      	b.n	8016df2 <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 8016fd8:	eddf ba5f 	vldr	s23, [pc, #380]	; 8017158 <tMBSineTri_tick+0xb68>
 8016fdc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016fe0:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8016fe4:	683e      	ldr	r6, [r7, #0]
 8016fe6:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 8016fea:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8016fee:	eeab 0a8b 	vfma.f32	s0, s23, s22
 8016ff2:	f002 fc25 	bl	8019840 <lrintf>
	r -= (float)i;
 8016ff6:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ffa:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8016ffe:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8017002:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017006:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801700a:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 801700c:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 8017010:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017018:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801701c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017020:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017024:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017028:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801702c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017030:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017034:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017038:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801703c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017040:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017044:	3301      	adds	r3, #1
 8017046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801704a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 801704e:	2600      	movs	r6, #0
}
 8017050:	e64e      	b.n	8016cf0 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 8017052:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 8017056:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 801705a:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 801705e:	2e00      	cmp	r6, #0
 8017060:	f040 8142 	bne.w	80172e8 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 8017064:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8017068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801706c:	f100 81ab 	bmi.w	80173c6 <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 8017070:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8017074:	eddf 7a38 	vldr	s15, [pc, #224]	; 8017158 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017078:	ee3d ba2d 	vadd.f32	s22, s26, s27
 801707c:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 8017080:	eeed ba0e 	vfma.f32	s23, s26, s28
 8017084:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 8017088:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 801708c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017090:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8017094:	eea8 0aac 	vfma.f32	s0, s17, s25
 8017098:	f002 fbd2 	bl	8019840 <lrintf>
	r -= (float)i;
 801709c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170a0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80170a4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 80170a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170ac:	3301      	adds	r3, #1
	r -= (float)i;
 80170ae:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80170b6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80170ba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80170be:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80170c2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80170c6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80170ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80170ce:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80170d2:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80170d6:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80170da:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80170de:	3301      	adds	r3, #1
 80170e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80170e4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80170e8:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170ec:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 80170f0:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 80170f4:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170f8:	3301      	adds	r3, #1
 80170fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 80170fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017102:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017106:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801710a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801710e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017112:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017116:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801711a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801711e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017122:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017126:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801712a:	f103 0301 	add.w	r3, r3, #1
 801712e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017132:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8017136:	f300 8107 	bgt.w	8017348 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 801713a:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 801713e:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8017140:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017144:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017148:	eeb0 8a6e 	vmov.f32	s16, s29
 801714c:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017150:	eee7 8aad 	vfma.f32	s17, s15, s27
 8017154:	f7ff bab2 	b.w	80166bc <tMBSineTri_tick+0xcc>
 8017158:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 801715c:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017160:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8017158 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8017164:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8017168:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801716c:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 8017170:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017174:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 8017178:	eeac 0aaf 	vfma.f32	s0, s25, s31
 801717c:	f002 fb60 	bl	8019840 <lrintf>
	r -= (float)i;
 8017180:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017184:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017188:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801718c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017190:	3301      	adds	r3, #1
	scale *= w;
 8017192:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 8017196:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801719a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801719e:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171a2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171aa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 80171ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171b2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171b6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80171ba:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80171be:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171c2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80171c6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80171ca:	f103 0301 	add.w	r3, r3, #1
 80171ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171d2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 80171d6:	f200 81ae 	bhi.w	8017536 <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80171da:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 80171de:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 80171e0:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 80171e4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80171e8:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80171ec:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 80171f0:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80171f4:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 80171f8:	eeac 0a8e 	vfma.f32	s0, s25, s28
 80171fc:	f002 fb20 	bl	8019840 <lrintf>
	r -= (float)i;
 8017200:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017204:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017208:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801720c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017210:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017212:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017216:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801721a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801721e:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017222:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017226:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801722a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801722e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017232:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8017236:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801723a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801723e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017242:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017246:	3301      	adds	r3, #1
 8017248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801724c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8017250:	f8d7 8000 	ldr.w	r8, [r7]
 8017254:	e59f      	b.n	8016d96 <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8017256:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8017158 <tMBSineTri_tick+0xb68>
 801725a:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 801725e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017262:	ee6c caa7 	vmul.f32	s25, s25, s15
 8017266:	ee7d ea2d 	vadd.f32	s29, s26, s27
 801726a:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 801726e:	f002 fae7 	bl	8019840 <lrintf>
	r -= (float)i;
 8017272:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017276:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801727a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801727e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017282:	3301      	adds	r3, #1
 8017284:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
 8017288:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 801728c:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017294:	eeb0 fa6e 	vmov.f32	s30, s29
 8017298:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801729c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172a0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
 80172a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172ac:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80172b0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172b4:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80172b8:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172bc:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80172c0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80172c4:	f103 0301 	add.w	r3, r3, #1
 80172c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172cc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 80172d0:	da76      	bge.n	80173c0 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80172d2:	ee79 7a08 	vadd.f32	s15, s18, s16
 80172d6:	f8d7 8000 	ldr.w	r8, [r7]
 80172da:	ee37 bacb 	vsub.f32	s22, s15, s22
 80172de:	eeeb ba2d 	vfma.f32	s23, s22, s27
 80172e2:	eef0 fa6b 	vmov.f32	s31, s23
 80172e6:	e556      	b.n	8016d96 <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 80172e8:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 80172ec:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 80172f0:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 80172f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 80172f8:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 80172fc:	f300 80d8 	bgt.w	80174b0 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 8017300:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8017304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017308:	f100 812a 	bmi.w	8017560 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 801730c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 8017310:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8017158 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8017314:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017318:	ee6c caa7 	vmul.f32	s25, s25, s15
 801731c:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8017320:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8017324:	f002 fa8c 	bl	8019840 <lrintf>
	r -= (float)i;
 8017328:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801732c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8017330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017334:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8017338:	e6d8      	b.n	80170ec <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 801733a:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 801733e:	2600      	movs	r6, #0
                p -= 1.0f;
 8017340:	eeb0 aa4e 	vmov.f32	s20, s28
 8017344:	f7ff b9ba 	b.w	80166bc <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 8017348:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 801734c:	683f      	ldr	r7, [r7, #0]
 801734e:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 8017352:	464e      	mov	r6, r9
}
 8017354:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8017358:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 801735c:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
 8017360:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8017364:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8017368:	f002 fa6a 	bl	8019840 <lrintf>
	r -= (float)i;
 801736c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017370:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017374:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801737c:	3301      	adds	r3, #1
	scale *= w;
 801737e:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017386:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801738a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801738e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017392:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017396:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801739a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801739e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80173a2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80173a6:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80173aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80173ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80173b2:	3301      	adds	r3, #1
 80173b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80173b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80173bc:	f7ff b97e 	b.w	80166bc <tMBSineTri_tick+0xcc>
 80173c0:	f8d7 8000 	ldr.w	r8, [r7]
 80173c4:	e5c1      	b.n	8016f4a <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 80173c6:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 80173ca:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8017158 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80173ce:	ee3d fa2d 	vadd.f32	s30, s26, s27
 80173d2:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 80173d6:	eeb0 0a6f 	vmov.f32	s0, s31
 80173da:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 80173de:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 80173e2:	eeac 0a8b 	vfma.f32	s0, s25, s22
 80173e6:	f002 fa2b 	bl	8019840 <lrintf>
	r -= (float)i;
 80173ea:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173ee:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80173f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80173f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173fa:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 80173fc:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017404:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 8017408:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801740c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017410:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017414:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8017418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801741c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017420:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017424:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017428:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801742c:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017430:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017434:	f103 0301 	add.w	r3, r3, #1
 8017438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801743c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8017440:	f340 80f7 	ble.w	8017632 <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 8017444:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 8017448:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 801744a:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 801744e:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 8017452:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 8017456:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 801745a:	eeac 0a8e 	vfma.f32	s0, s25, s28
 801745e:	f002 f9ef 	bl	8019840 <lrintf>
	r -= (float)i;
 8017462:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017466:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801746a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801746e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017472:	3301      	adds	r3, #1
	r -= (float)i;
 8017474:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801747c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017480:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017484:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017488:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801748c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8017490:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017494:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017498:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801749c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80174a0:	3301      	adds	r3, #1
 80174a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174a6:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 80174aa:	f8d7 8000 	ldr.w	r8, [r7]
 80174ae:	e5eb      	b.n	8017088 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 80174b0:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 80174b4:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 8017158 <tMBSineTri_tick+0xb68>
 80174b8:	ee3b fa49 	vsub.f32	s30, s22, s18
 80174bc:	ee6c caa7 	vmul.f32	s25, s25, s15
 80174c0:	eeb0 0a6b 	vmov.f32	s0, s23
 80174c4:	eeac 0a8f 	vfma.f32	s0, s25, s30
 80174c8:	f002 f9ba 	bl	8019840 <lrintf>
	r -= (float)i;
 80174cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174d0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80174d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80174d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174dc:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 80174de:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80174e6:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 80174ea:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174ee:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80174f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80174f6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 80174fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 80174fe:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017502:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017506:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801750a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801750e:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017512:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017516:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801751a:	f103 0301 	add.w	r3, r3, #1
 801751e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017522:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 8017526:	d472      	bmi.n	801760e <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 8017528:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 801752c:	f8d7 8000 	ldr.w	r8, [r7]
 8017530:	eeb1 ba4f 	vneg.f32	s22, s30
 8017534:	e5a8      	b.n	8017088 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 8017536:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 801753a:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 801753e:	eeac 0a8a 	vfma.f32	s0, s25, s20
 8017542:	f002 f97d 	bl	8019840 <lrintf>
	r -= (float)i;
 8017546:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801754a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801754e:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8017552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 8017556:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 801755a:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 801755e:	e448      	b.n	8016df2 <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017560:	ee3d fa2d 	vadd.f32	s30, s26, s27
 8017564:	eddf 7a39 	vldr	s15, [pc, #228]	; 801764c <tMBSineTri_tick+0x105c>
 8017568:	ee6c caa7 	vmul.f32	s25, s25, s15
 801756c:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017570:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017574:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017578:	ee78 7a4b 	vsub.f32	s15, s16, s22
 801757c:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 8017580:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017584:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8017588:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 801758c:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8017590:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017594:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 8017598:	f002 f952 	bl	8019840 <lrintf>
	r -= (float)i;
 801759c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175a0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80175a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80175a8:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 80175ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175b0:	3301      	adds	r3, #1
 80175b2:	ee78 8ac8 	vsub.f32	s17, s17, s16
 80175b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80175ba:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 80175be:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175c2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80175c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80175ca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 80175ce:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80175d2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80175d6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80175da:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80175de:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80175e2:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80175e6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80175ea:	3301      	adds	r3, #1
 80175ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175f0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80175f4:	f002 f924 	bl	8019840 <lrintf>
	r -= (float)i;
 80175f8:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80175fc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8017600:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8017604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017608:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 801760c:	e56e      	b.n	80170ec <tMBSineTri_tick+0xafc>
 801760e:	f8d7 8000 	ldr.w	r8, [r7]
 8017612:	e7ad      	b.n	8017570 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 8017614:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8017618:	eeb0 aa4b 	vmov.f32	s20, s22
 801761c:	f7ff b82f 	b.w	801667e <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 8017620:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 8017624:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 8017626:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801762a:	eee7 8aad 	vfma.f32	s17, s15, s27
 801762e:	f7ff b845 	b.w	80166bc <tMBSineTri_tick+0xcc>
 8017632:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8017636:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 801763a:	eeb0 0a6f 	vmov.f32	s0, s31
 801763e:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8017642:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 8017646:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801764a:	e7d3      	b.n	80175f4 <tMBSineTri_tick+0x1004>
 801764c:	42800000 	.word	0x42800000

08017650 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 8017650:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8017652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017656:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 801765a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801765e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8017662:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017666:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801766a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 801766e:	4770      	bx	lr

08017670 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 8017670:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017676:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801767a:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 801767e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017682:	eef1 7a67 	vneg.f32	s15, s15
 8017686:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801768a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017692:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017696:	bfcc      	ite	gt
 8017698:	2201      	movgt	r2, #1
 801769a:	2200      	movle	r2, #0
 801769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176a0:	f002 0201 	and.w	r2, r2, #1
 80176a4:	bf88      	it	hi
 80176a6:	2200      	movhi	r2, #0
 80176a8:	b122      	cbz	r2, 80176b4 <tMBSineTri_sync+0x44>
 80176aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80176ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176b2:	da04      	bge.n	80176be <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80176b4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80176cc <tMBSineTri_sync+0x5c>
 80176b8:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 80176bc:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80176be:	ee37 7a66 	vsub.f32	s14, s14, s13
 80176c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80176c6:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80176ca:	4770      	bx	lr
 80176cc:	00000000 	.word	0x00000000

080176d0 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 80176d0:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 80176d2:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 80176d6:	4770      	bx	lr

080176d8 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 80176d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80176da:	698e      	ldr	r6, [r1, #24]
{
 80176dc:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80176de:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80176e2:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80176e4:	4631      	mov	r1, r6
 80176e6:	f7fc ff33 	bl	8014550 <mpool_alloc>
 80176ea:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 80176ec:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 80176ee:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80176f0:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80176f2:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80176f4:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8017750 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 80176f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 80176fc:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017700:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 8017704:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017754 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 8017708:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801770c:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 801770e:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8017712:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 8017714:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017716:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 8017718:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801771a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 801771e:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 8017720:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 8017722:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 8017724:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017726:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801772a:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801772c:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017730:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017734:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 8017736:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801773a:	f001 fe4d 	bl	80193d8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801773e:	4629      	mov	r1, r5
 8017740:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8017744:	2220      	movs	r2, #32
}
 8017746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801774a:	f001 be45 	b.w	80193d8 <memset>
 801774e:	bf00      	nop
 8017750:	3b14f209 	.word	0x3b14f209
 8017754:	43dc0000 	.word	0x43dc0000

08017758 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 8017758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801775c:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 8017760:	6804      	ldr	r4, [r0, #0]
{
 8017762:	b082      	sub	sp, #8
 8017764:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 8017766:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 801776a:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801776e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 8017772:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 8017776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801777c:	f340 813d 	ble.w	80179fa <tMBSaw_tick+0x2a2>
 8017780:	69a3      	ldr	r3, [r4, #24]
 8017782:	2b00      	cmp	r3, #0
 8017784:	f340 80b1 	ble.w	80178ea <tMBSaw_tick+0x192>
 8017788:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 801778c:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017790:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 8017794:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8017798:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801779c:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 80177a0:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 80177a4:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 80177a8:	ee37 8a27 	vadd.f32	s16, s14, s15
 80177ac:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 80177b0:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 80177b4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80177b8:	eeb4 8ac9 	vcmpe.f32	s16, s18
 80177bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177c0:	f280 8135 	bge.w	8017a2e <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 80177c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80177c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177cc:	f100 8193 	bmi.w	8017af6 <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 80177d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80177d4:	1d33      	adds	r3, r6, #4
 80177d6:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 80177da:	ee37 7a48 	vsub.f32	s14, s14, s16
 80177de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80177e2:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80177e6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80177ea:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80177ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	f000 817a 	beq.w	8017aec <tMBSaw_tick+0x394>
 80177f8:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80177fc:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017800:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017804:	2000      	movs	r0, #0
 8017806:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801780a:	4deb      	ldr	r5, [pc, #940]	; (8017bb8 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801780c:	ebae 0300 	sub.w	r3, lr, r0
 8017810:	b29b      	uxth	r3, r3
 8017812:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8017816:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801781a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801781e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017822:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017826:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801782a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801782e:	b289      	uxth	r1, r1
 8017830:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8017834:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017836:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801783a:	fa1f f888 	uxth.w	r8, r8
 801783e:	fa1f f989 	uxth.w	r9, r9
 8017842:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8017846:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801784a:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 801784e:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8017852:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017856:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017858:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 801785c:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8017860:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017864:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017868:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801786c:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017870:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017872:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017876:	edd9 6a01 	vldr	s13, [r9, #4]
 801787a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801787e:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017882:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017886:	eee6 7a26 	vfma.f32	s15, s12, s13
 801788a:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801788e:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017892:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 8017896:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017898:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801789c:	f0c0 80a6 	bcc.w	80179ec <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 80178a0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80178a4:	3001      	adds	r0, #1
 80178a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 80178aa:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80178ac:	4290      	cmp	r0, r2
			c->numBLEPs--;
 80178ae:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80178b2:	dbab      	blt.n	801780c <tMBSaw_tick+0xb4>
 80178b4:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 80178b8:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 80178bc:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 80178be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 80178c2:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 80178c6:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 80178ca:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 80178ce:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 80178d0:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 80178d4:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 80178d8:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 80178dc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 80178e0:	b002      	add	sp, #8
 80178e2:	ecbd 8b08 	vpop	{d8-d11}
 80178e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 80178ea:	edd4 8a05 	vldr	s17, [r4, #20]
 80178ee:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 80178f2:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 80178f6:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 80178fa:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 80178fe:	eebd 9aca 	vcvt.s32.f32	s18, s20
 8017902:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8017906:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801790a:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 801790e:	f040 815e 	bne.w	8017bce <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 8017912:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 8017916:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 801791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801791e:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 8017922:	f340 80b2 	ble.w	8017a8a <tMBSaw_tick+0x332>
 8017926:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 801792a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801792e:	eef4 aacb 	vcmpe.f32	s21, s22
 8017932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017936:	db2d      	blt.n	8017994 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 8017938:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801793c:	eddf ba9f 	vldr	s23, [pc, #636]	; 8017bbc <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017940:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017944:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017948:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 801794c:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8017950:	f001 ff76 	bl	8019840 <lrintf>
	r -= (float)i;
 8017954:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017958:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801795c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017964:	3301      	adds	r3, #1
	r -= (float)i;
 8017966:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801796a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801796e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017972:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017976:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801797a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801797e:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017982:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017986:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 801798a:	3301      	adds	r3, #1
 801798c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017990:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 8017994:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8017998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801799c:	f100 80da 	bmi.w	8017b54 <tMBSaw_tick+0x3fc>
        if (sw > 0)
 80179a0:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 80179a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a8:	dc74      	bgt.n	8017a94 <tMBSaw_tick+0x33c>
        else if (sw < 0)
 80179aa:	f57f af11 	bpl.w	80177d0 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 80179ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80179b2:	ed9f 9a82 	vldr	s18, [pc, #520]	; 8017bbc <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 80179b6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 80179ba:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80179bc:	ee28 9a89 	vmul.f32	s18, s17, s18
 80179c0:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 80179c4:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 80179c8:	eea9 0a28 	vfma.f32	s0, s18, s17
 80179cc:	f001 ff38 	bl	8019840 <lrintf>
	r -= (float)i;
 80179d0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179d4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80179d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80179dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179e0:	3301      	adds	r3, #1
	r -= (float)i;
 80179e2:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80179e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179ea:	e06b      	b.n	8017ac4 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80179ec:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80179f0:	3001      	adds	r0, #1
 80179f2:	4283      	cmp	r3, r0
 80179f4:	f73f af0a 	bgt.w	801780c <tMBSaw_tick+0xb4>
 80179f8:	e75c      	b.n	80178b4 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 80179fa:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 80179fe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 8017a02:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 8017a06:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8017a0a:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 8017a0e:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 8017a12:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 8017a16:	ee77 7a88 	vadd.f32	s15, s15, s16
 8017a1a:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8017a1e:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 8017a22:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8017a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a2a:	f6ff aecb 	blt.w	80177c4 <tMBSaw_tick+0x6c>
        p -= 1.0f;
 8017a2e:	eddf 7a63 	vldr	s15, [pc, #396]	; 8017bbc <tMBSaw_tick+0x464>
 8017a32:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 8017a36:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017a3a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017a3c:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 8017a40:	eea8 0a88 	vfma.f32	s0, s17, s16
 8017a44:	f001 fefc 	bl	8019840 <lrintf>
	r -= (float)i;
 8017a48:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a4c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017a50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a58:	3301      	adds	r3, #1
	r -= (float)i;
 8017a5a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a62:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a66:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a6a:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017a6e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017a72:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017a76:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017a7a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017a7e:	3301      	adds	r3, #1
 8017a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a84:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017a88:	e6a2      	b.n	80177d0 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 8017a8a:	f100 809b 	bmi.w	8017bc4 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 8017a8e:	eeb0 8a49 	vmov.f32	s16, s18
 8017a92:	e74a      	b.n	801792a <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 8017a94:	eddf 7a49 	vldr	s15, [pc, #292]	; 8017bbc <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017a98:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017a9c:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017a9e:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 8017aa2:	eea8 0a88 	vfma.f32	s0, s17, s16
 8017aa6:	f001 fecb 	bl	8019840 <lrintf>
	r -= (float)i;
 8017aaa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017aae:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017ab2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017aba:	3301      	adds	r3, #1
	r -= (float)i;
 8017abc:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ac4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ac8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017acc:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ad0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017ad4:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ad8:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017adc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ae6:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017aea:	e671      	b.n	80177d0 <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8017aec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017af0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8017af4:	e6e0      	b.n	80178b8 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 8017af6:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 8017afa:	ed9f aa30 	vldr	s20, [pc, #192]	; 8017bbc <tMBSaw_tick+0x464>
 8017afe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8017b02:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 8017b04:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 8017b08:	eea8 0a8a 	vfma.f32	s0, s17, s20
 8017b0c:	f001 fe98 	bl	8019840 <lrintf>
	r -= (float)i;
 8017b10:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b14:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017b18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b20:	4a27      	ldr	r2, [pc, #156]	; (8017bc0 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b22:	3301      	adds	r3, #1
	r -= (float)i;
 8017b24:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b2c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b30:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b34:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b38:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8017b3c:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b40:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017b44:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8017b48:	3301      	adds	r3, #1
 8017b4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b4e:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8017b52:	e63d      	b.n	80177d0 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 8017b54:	ed9f ba19 	vldr	s22, [pc, #100]	; 8017bbc <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8017b58:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 8017b5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 8017b60:	682f      	ldr	r7, [r5, #0]
 8017b62:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
 8017b66:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 8017b6a:	eeab 0a09 	vfma.f32	s0, s22, s18
 8017b6e:	f001 fe67 	bl	8019840 <lrintf>
	r -= (float)i;
 8017b72:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017b7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b82:	4a0f      	ldr	r2, [pc, #60]	; (8017bc0 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b84:	3301      	adds	r3, #1
	r -= (float)i;
 8017b86:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b8e:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b92:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b96:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b9a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8017b9e:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ba2:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017ba6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017baa:	3301      	adds	r3, #1
 8017bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017bb0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 8017bb4:	e6f4      	b.n	80179a0 <tMBSaw_tick+0x248>
 8017bb6:	bf00      	nop
 8017bb8:	08029820 	.word	0x08029820
 8017bbc:	42800000 	.word	0x42800000
 8017bc0:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8017bc4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8017bc8:	ee38 8a47 	vsub.f32	s16, s16, s14
 8017bcc:	e6ad      	b.n	801792a <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 8017bce:	eeb0 8a49 	vmov.f32	s16, s18
 8017bd2:	e5ef      	b.n	80177b4 <tMBSaw_tick+0x5c>

08017bd4 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 8017bd4:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 8017bd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 8017bda:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 8017bde:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 8017be2:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8017be6:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 8017bea:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 8017bee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8017bf2:	4770      	bx	lr

08017bf4 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 8017bf4:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017bfa:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8017bfe:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8017c02:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017c06:	eef1 7a67 	vneg.f32	s15, s15
 8017c0a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017c0e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c16:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017c1a:	bfcc      	ite	gt
 8017c1c:	2201      	movgt	r2, #1
 8017c1e:	2200      	movle	r2, #0
 8017c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c24:	f002 0201 	and.w	r2, r2, #1
 8017c28:	bf88      	it	hi
 8017c2a:	2200      	movhi	r2, #0
 8017c2c:	b122      	cbz	r2, 8017c38 <tMBSaw_sync+0x44>
 8017c2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c36:	da04      	bge.n	8017c42 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8017c38:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8017c50 <tMBSaw_sync+0x5c>
 8017c3c:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 8017c40:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8017c42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017c46:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017c4a:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8017c4e:	4770      	bx	lr
 8017c50:	00000000 	.word	0x00000000

08017c54 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 8017c54:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8017c56:	698d      	ldr	r5, [r1, #24]
{
 8017c58:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017c5a:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8017c5e:	4629      	mov	r1, r5
 8017c60:	f7fc fc76 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 8017c64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017c68:	6030      	str	r0, [r6, #0]
    c->active = 1;
 8017c6a:	2201      	movs	r2, #1
    c->mempool = m;
 8017c6c:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8017c6e:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 8017c70:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8017c72:	2500      	movs	r5, #0
    c->gain = 1.0f;
 8017c74:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 8017c78:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017c7c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 8017c80:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 8017c84:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8017c86:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8017ce0 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 8017c8a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017ce4 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8017c8e:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 8017c92:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 8017c94:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017c98:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 8017c9c:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 8017c9e:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017ca0:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 8017ca6:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 8017ca8:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017caa:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017cac:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017cb0:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8017cb2:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 8017cb6:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 8017cb8:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 8017cba:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 8017cbc:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 8017cbe:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017cc0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017cc4:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017cc6:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 8017cc8:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ccc:	f001 fb84 	bl	80193d8 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8017cd0:	4629      	mov	r1, r5
 8017cd2:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8017cd6:	2220      	movs	r2, #32
}
 8017cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017cdc:	f001 bb7c 	b.w	80193d8 <memset>
 8017ce0:	3b14f209 	.word	0x3b14f209
 8017ce4:	43dc0000 	.word	0x43dc0000

08017ce8 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 8017ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cec:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 8017cf0:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 8017cf2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	4607      	mov	r7, r0
    sync = c->sync;
 8017cfa:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 8017cfe:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017d02:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017d06:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 8017d0a:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 8017d0e:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017d12:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 8017d16:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 8017d1e:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8017d22:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 8017d26:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 8017d2a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017d2c:	f340 80d8 	ble.w	8017ee0 <tMBSawPulse_tick+0x1f8>
 8017d30:	69a3      	ldr	r3, [r4, #24]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	dd65      	ble.n	8017e02 <tMBSawPulse_tick+0x11a>
 8017d36:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8017d3a:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017d3e:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8017d42:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017d46:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8017d4a:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8017d4e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017d52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017d56:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017d5a:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 8017d5e:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 8017d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	f040 80d1 	bne.w	8017f0e <tMBSawPulse_tick+0x226>
		if (sw > 0)
 8017d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d70:	f340 8210 	ble.w	8018194 <tMBSawPulse_tick+0x4ac>
		{
			if (p >= b) {
 8017d74:	eeb4 8acb 	vcmpe.f32	s16, s22
 8017d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d7c:	f280 81cc 	bge.w	8018118 <tMBSawPulse_tick+0x430>
 8017d80:	eddf 5ae3 	vldr	s11, [pc, #908]	; 8018110 <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 8017d84:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017d88:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d90:	f2c0 80cb 	blt.w	8017f2a <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
 8017d94:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8017d96:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 8017d9a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	f000 81f3 	beq.w	801818a <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 8017da4:	eddf 7adb 	vldr	s15, [pc, #876]	; 8018114 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 8017da8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 8017dac:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8017db0:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 8017db4:	eea9 0a08 	vfma.f32	s0, s18, s16
 8017db8:	f001 fd42 	bl	8019840 <lrintf>
		r -= (float)i;
 8017dbc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dc0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017dc4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8017dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017dcc:	eddf 5ad0 	vldr	s11, [pc, #832]	; 8018110 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dd0:	3301      	adds	r3, #1
		r -= (float)i;
 8017dd2:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017dda:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dde:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017de2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017de6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017dea:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017dee:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017df2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8017df6:	3301      	adds	r3, #1
 8017df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dfc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8017e00:	e093      	b.n	8017f2a <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 8017e02:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8017e06:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8017e0a:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8017e0e:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017e12:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8017e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017e1a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8017e1e:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
 8017e22:	f040 8639 	bne.w	8018a98 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
 8017e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017e2a:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 8017e2c:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 8017e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8017e34:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 8017e38:	f340 8117 	ble.w	801806a <tMBSawPulse_tick+0x382>
		 if (!k)
 8017e3c:	ee1c 2a90 	vmov	r2, s25
 8017e40:	2a00      	cmp	r2, #0
 8017e42:	f040 8274 	bne.w	801832e <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
 8017e46:	eeb4 baed 	vcmpe.f32	s22, s27
 8017e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4e:	f240 83c0 	bls.w	80185d2 <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
 8017e52:	46a0      	mov	r8, r4
    if (c->active)
 8017e54:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017e58:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
 8017e5c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017e60:	eef4 dae8 	vcmpe.f32	s27, s17
 8017e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e68:	f280 82ad 	bge.w	80183c6 <tMBSawPulse_tick+0x6de>
    if (c->active)
 8017e6c:	b35a      	cbz	r2, 8017ec6 <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 8017e6e:	eddf 8aa9 	vldr	s17, [pc, #676]	; 8018114 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 8017e72:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 8017e76:	ee6d da8d 	vmul.f32	s27, s27, s26
 8017e7a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8017e7e:	eea8 0a28 	vfma.f32	s0, s16, s17
 8017e82:	f001 fcdd 	bl	8019840 <lrintf>
		r -= (float)i;
 8017e86:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e8a:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017e8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8017e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e96:	3301      	adds	r3, #1
		r -= (float)i;
 8017e98:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017ea0:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ea4:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8017ea8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017eac:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017eb0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017eb4:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017eb8:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ec2:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
 8017ec6:	f1b9 0f00 	cmp.w	r9, #0
 8017eca:	f040 8419 	bne.w	8018700 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
 8017ece:	eeb4 bac8 	vcmpe.f32	s22, s16
 8017ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ed6:	f240 80df 	bls.w	8018098 <tMBSawPulse_tick+0x3b0>
		 if (!k)
 8017eda:	eddf 5a8d 	vldr	s11, [pc, #564]	; 8018110 <tMBSawPulse_tick+0x428>
 8017ede:	e024      	b.n	8017f2a <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 8017ee0:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 8017ee4:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8017ee8:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8017eec:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8017ef0:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017ef4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 8017efc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8017f00:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017f04:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	f43f af2f 	beq.w	8017d6c <tMBSawPulse_tick+0x84>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 8017f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f12:	f340 81bd 	ble.w	8018290 <tMBSawPulse_tick+0x5a8>
		{
			if (p >= 1.0f) {
 8017f16:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017f1a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f22:	f280 80ac 	bge.w	801807e <tMBSawPulse_tick+0x396>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8017f26:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8017f2a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017f2e:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 8017f30:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017f34:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8017f38:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 8017f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017f40:	eea6 7a8d 	vfma.f32	s14, s13, s26
 8017f44:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8017f48:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8017f4c:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017f50:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	f000 81e5 	beq.w	8018324 <tMBSawPulse_tick+0x63c>
 8017f5a:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017f5e:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017f62:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017f66:	2000      	movs	r0, #0
 8017f68:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8017f6c:	4d67      	ldr	r5, [pc, #412]	; (801810c <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017f6e:	ebae 0300 	sub.w	r3, lr, r0
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 8017f78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f80:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017f84:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8017f88:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8017f8c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8017f90:	b289      	uxth	r1, r1
 8017f92:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8017f96:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017f98:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017f9c:	fa1f f888 	uxth.w	r8, r8
 8017fa0:	fa1f f989 	uxth.w	r9, r9
 8017fa4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8017fa8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8017fac:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 8017fb0:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8017fb4:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017fb8:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017fba:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 8017fbe:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8017fc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017fc6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017fca:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8017fce:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017fd2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017fd4:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017fd8:	edd9 6a01 	vldr	s13, [r9, #4]
 8017fdc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017fe0:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017fe4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017fe8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017fec:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017ff0:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017ff4:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 8017ff8:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017ffa:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017ffe:	d32e      	bcc.n	801805e <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
 8018000:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018004:	3001      	adds	r0, #1
 8018006:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
 801800a:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801800c:	4282      	cmp	r2, r0
			c->numBLEPs--;
 801800e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018012:	dcac      	bgt.n	8017f6e <tMBSawPulse_tick+0x286>
 8018014:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018018:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 801801c:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018020:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8018024:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018026:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 801802a:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 801802e:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 8018032:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 8018036:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801803a:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 801803e:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 8018042:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 8018044:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 8018048:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 801804c:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018050:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8018054:	b004      	add	sp, #16
 8018056:	ecbd 8b0e 	vpop	{d8-d14}
 801805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801805e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018062:	3001      	adds	r0, #1
 8018064:	4283      	cmp	r3, r0
 8018066:	dc82      	bgt.n	8017f6e <tMBSawPulse_tick+0x286>
 8018068:	e7d4      	b.n	8018014 <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
 801806a:	f100 8229 	bmi.w	80184c0 <tMBSawPulse_tick+0x7d8>
		 if (!k)
 801806e:	ee1c 2a90 	vmov	r2, s25
 8018072:	2a00      	cmp	r2, #0
 8018074:	f040 8197 	bne.w	80183a6 <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
 8018078:	eeb0 8a68 	vmov.f32	s16, s17
 801807c:	e72d      	b.n	8017eda <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 801807e:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8018080:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 8018084:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018088:	2b00      	cmp	r3, #0
 801808a:	f040 8161 	bne.w	8018350 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
 801808e:	eeb4 bac8 	vcmpe.f32	s22, s16
 8018092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018096:	d878      	bhi.n	801818a <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 8018098:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801809a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801809e:	2b00      	cmp	r3, #0
 80180a0:	f000 8151 	beq.w	8018346 <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
 80180a4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8018114 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 80180a8:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 80180ac:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80180b0:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
 80180b4:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 80180b8:	eea8 0a89 	vfma.f32	s0, s17, s18
 80180bc:	f001 fbc0 	bl	8019840 <lrintf>
		r -= (float)i;
 80180c0:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180c4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80180c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80180cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180d0:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 80180d2:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80180d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80180de:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 80180e2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180e6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80180ea:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80180ee:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80180f2:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80180f6:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80180fa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80180fe:	3301      	adds	r3, #1
 8018100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018104:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018108:	e70f      	b.n	8017f2a <tMBSawPulse_tick+0x242>
 801810a:	bf00      	nop
 801810c:	08029820 	.word	0x08029820
 8018110:	00000000 	.word	0x00000000
 8018114:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 8018118:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801811a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801811e:	2b00      	cmp	r3, #0
 8018120:	f000 814c 	beq.w	80183bc <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
 8018124:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 8018114 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018128:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801812c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018130:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 8018134:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018138:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801813c:	f001 fb80 	bl	8019840 <lrintf>
		r -= (float)i;
 8018140:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018144:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018148:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801814c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018150:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018152:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018156:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801815a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801815e:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018162:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018166:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801816a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801816e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018172:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018176:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801817a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801817e:	3301      	adds	r3, #1
 8018180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018184:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018188:	e5fc      	b.n	8017d84 <tMBSawPulse_tick+0x9c>
				x = 0.5f;
 801818a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 801818e:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 8018110 <tMBSawPulse_tick+0x428>
 8018192:	e6ca      	b.n	8017f2a <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
 8018194:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801819c:	f57f ae9d 	bpl.w	8017eda <tMBSawPulse_tick+0x1f2>
 80181a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80181a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a8:	f57f ae97 	bpl.w	8017eda <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 80181ac:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 80181ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 80181b2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 80181b6:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 80181ba:	b353      	cbz	r3, 8018212 <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
 80181bc:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 80181c0:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 8018114 <tMBSawPulse_tick+0x42c>
 80181c4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80181c8:	eea8 0a29 	vfma.f32	s0, s16, s19
 80181cc:	f001 fb38 	bl	8019840 <lrintf>
		r -= (float)i;
 80181d0:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181d4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80181d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80181dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80181e0:	4ab2      	ldr	r2, [pc, #712]	; (80184ac <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181e2:	3301      	adds	r3, #1
		r -= (float)i;
 80181e4:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80181ec:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181f0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80181f4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80181f8:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80181fc:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018200:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018204:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018208:	3301      	adds	r3, #1
 801820a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801820e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 8018212:	eeb4 bae8 	vcmpe.f32	s22, s17
 8018216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821a:	f340 8446 	ble.w	8018aaa <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
 801821e:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018220:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018224:	2b00      	cmp	r3, #0
 8018226:	f000 8327 	beq.w	8018878 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
 801822a:	eddf 7aa4 	vldr	s15, [pc, #656]	; 80184bc <tMBSawPulse_tick+0x7d4>
 801822e:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 8018232:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018236:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801823a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801823e:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 8018242:	eea9 0a29 	vfma.f32	s0, s18, s19
 8018246:	f001 fafb 	bl	8019840 <lrintf>
		r -= (float)i;
 801824a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801824e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018252:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801825a:	eddf 5a97 	vldr	s11, [pc, #604]	; 80184b8 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801825e:	3301      	adds	r3, #1
		r -= (float)i;
 8018260:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018268:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801826c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018270:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018274:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018278:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801827c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018280:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018284:	3301      	adds	r3, #1
 8018286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801828a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801828e:	e64c      	b.n	8017f2a <tMBSawPulse_tick+0x242>
		else if (sw < 0)
 8018290:	f57f ae49 	bpl.w	8017f26 <tMBSawPulse_tick+0x23e>
			if (p < b) {
 8018294:	eeb4 8acb 	vcmpe.f32	s16, s22
 8018298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801829c:	f100 80cd 	bmi.w	801843a <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
 80182a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80182a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a8:	f57f ae3d 	bpl.w	8017f26 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 80182ac:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 80182ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 80182b2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 80182b6:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	f000 8302 	beq.w	80188c4 <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
 80182c0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80182c4:	eddf 9a7d 	vldr	s19, [pc, #500]	; 80184bc <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
 80182c8:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 80182cc:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 80182d0:	eeb0 0a6a 	vmov.f32	s0, s21
 80182d4:	eea9 0a29 	vfma.f32	s0, s18, s19
 80182d8:	f001 fab2 	bl	8019840 <lrintf>
		r -= (float)i;
 80182dc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182e0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80182e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80182e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80182ec:	4a6f      	ldr	r2, [pc, #444]	; (80184ac <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182ee:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182f0:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80182f8:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 80182fc:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018300:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018304:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018308:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801830c:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018310:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018314:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018318:	3301      	adds	r3, #1
 801831a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801831e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018322:	e602      	b.n	8017f2a <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018324:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018328:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801832c:	e674      	b.n	8018018 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
 801832e:	eef4 dae9 	vcmpe.f32	s27, s19
 8018332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018336:	f280 8159 	bge.w	80185ec <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
 801833a:	46a0      	mov	r8, r4
    if (c->active)
 801833c:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 8018340:	ee1c 9a90 	vmov	r9, s25
 8018344:	e592      	b.n	8017e6c <tMBSawPulse_tick+0x184>
 8018346:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801834a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801834e:	e5ec      	b.n	8017f2a <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
 8018350:	eddf 9a5a 	vldr	s19, [pc, #360]	; 80184bc <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8018354:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018358:	ee69 9a29 	vmul.f32	s19, s18, s19
 801835c:	eea9 0a88 	vfma.f32	s0, s19, s16
 8018360:	f001 fa6e 	bl	8019840 <lrintf>
		r -= (float)i;
 8018364:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018368:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801836c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018374:	3301      	adds	r3, #1
		r -= (float)i;
 8018376:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801837a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801837e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018382:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018386:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801838a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801838e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018392:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018396:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801839a:	3301      	adds	r3, #1
 801839c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80183a0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80183a4:	e673      	b.n	801808e <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
 80183a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80183aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183ae:	f100 815b 	bmi.w	8018668 <tMBSawPulse_tick+0x980>
    c->_k = k;
 80183b2:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 80183b6:	eeb0 8a68 	vmov.f32	s16, s17
 80183ba:	e5b6      	b.n	8017f2a <tMBSawPulse_tick+0x242>
 80183bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 80183c0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80183c4:	e4de      	b.n	8017d84 <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
 80183c6:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 80183ca:	2a00      	cmp	r2, #0
 80183cc:	f000 810b 	beq.w	80185e6 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 80183d0:	eddf 9a3a 	vldr	s19, [pc, #232]	; 80184bc <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80183d4:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
 80183d8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 80183dc:	f04f 0900 	mov.w	r9, #0
 80183e0:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
 80183e4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 80183e8:	eeac 0aa9 	vfma.f32	s0, s25, s19
 80183ec:	f001 fa28 	bl	8019840 <lrintf>
		r -= (float)i;
 80183f0:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183f4:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80183f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80183fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018400:	3301      	adds	r3, #1
		r -= (float)i;
 8018402:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801840a:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801840e:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018412:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018416:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801841a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801841e:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018422:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 8018426:	3301      	adds	r3, #1
 8018428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801842c:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018430:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 8018434:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 8018438:	e518      	b.n	8017e6c <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
 801843a:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801843c:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 8018440:	ee1c 3a90 	vmov	r3, s25
 8018444:	2b00      	cmp	r3, #0
 8018446:	f000 820d 	beq.w	8018864 <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
 801844a:	eddf 9a1c 	vldr	s19, [pc, #112]	; 80184bc <tMBSawPulse_tick+0x7d4>
 801844e:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 8018452:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 8018456:	eddf ca16 	vldr	s25, [pc, #88]	; 80184b0 <tMBSawPulse_tick+0x7c8>
 801845a:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 801845e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8018462:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018466:	f001 f9eb 	bl	8019840 <lrintf>
		r -= (float)i;
 801846a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801846e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018472:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801847a:	3301      	adds	r3, #1
		r -= (float)i;
 801847c:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018484:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018488:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801848c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018490:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018494:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018498:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801849c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80184a0:	3301      	adds	r3, #1
 80184a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184a6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80184aa:	e6f9      	b.n	80182a0 <tMBSawPulse_tick+0x5b8>
 80184ac:	bf800000 	.word	0xbf800000
 80184b0:	00000000 	.word	0x00000000
 80184b4:	00000001 	.word	0x00000001
 80184b8:	00000000 	.word	0x00000000
 80184bc:	42800000 	.word	0x42800000
		 if (!k)
 80184c0:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 80184c4:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 80184c8:	2a00      	cmp	r2, #0
 80184ca:	f040 80cf 	bne.w	801866c <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
 80184ce:	eef5 da40 	vcmp.f32	s27, #0.0
 80184d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d6:	d571      	bpl.n	80185bc <tMBSawPulse_tick+0x8d4>
    if (c->active)
 80184d8:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 80184dc:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	f040 8231 	bne.w	8018948 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
 80184e6:	eeb4 baed 	vcmpe.f32	s22, s27
 80184ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184ee:	f340 82d7 	ble.w	8018aa0 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
 80184f2:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 80184f6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	f000 81d6 	beq.w	80188ac <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
 8018500:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018504:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 80184bc <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8018508:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 801850c:	ed5f ca17 	vldr	s25, [pc, #-92]	; 80184b4 <tMBSawPulse_tick+0x7cc>
 8018510:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018514:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 8018518:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801851c:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018520:	f001 f98e 	bl	8019840 <lrintf>
		r -= (float)i;
 8018524:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018528:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801852c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018534:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 8018536:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801853a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801853e:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018542:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018546:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801854a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801854e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018552:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018556:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801855a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801855e:	3301      	adds	r3, #1
 8018560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018564:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 8018568:	eeb4 bace 	vcmpe.f32	s22, s28
 801856c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018570:	f77f acd9 	ble.w	8017f26 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 8018574:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018576:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801857a:	2b00      	cmp	r3, #0
 801857c:	f43f ae05 	beq.w	801818a <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 8018580:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 80184bc <tMBSawPulse_tick+0x7d4>
 8018584:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 8018588:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801858c:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 8018590:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8018594:	eea9 0a0e 	vfma.f32	s0, s18, s28
 8018598:	f001 f952 	bl	8019840 <lrintf>
		r -= (float)i;
 801859c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185a0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80185a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80185a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80185ac:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 80184b8 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185b0:	3301      	adds	r3, #1
		r -= (float)i;
 80185b2:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80185ba:	e655      	b.n	8018268 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
 80185bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80185c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c4:	f100 814b 	bmi.w	801885e <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
 80185c8:	eeb0 8a4e 	vmov.f32	s16, s28
 80185cc:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 80184b8 <tMBSawPulse_tick+0x7d0>
 80185d0:	e4ab      	b.n	8017f2a <tMBSawPulse_tick+0x242>
    if (c->active)
 80185d2:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	f040 8109 	bne.w	80187ee <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
 80185dc:	eef4 dae9 	vcmpe.f32	s27, s19
 80185e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e4:	db0f      	blt.n	8018606 <tMBSawPulse_tick+0x91e>
				x = 0.5f;
 80185e6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80185ea:	e470      	b.n	8017ece <tMBSawPulse_tick+0x1e6>
    if (c->active)
 80185ec:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 80185f0:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 80185f4:	f1b9 0f00 	cmp.w	r9, #0
 80185f8:	f040 8084 	bne.w	8018704 <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
 80185fc:	eeb4 baed 	vcmpe.f32	s22, s27
 8018600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018604:	d8ef      	bhi.n	80185e6 <tMBSawPulse_tick+0x8fe>
    if (c->active)
 8018606:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801860a:	2b00      	cmp	r3, #0
 801860c:	d0eb      	beq.n	80185e6 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 801860e:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 80184bc <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8018612:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 8018616:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801861a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801861e:	eea8 0a28 	vfma.f32	s0, s16, s17
 8018622:	f001 f90d 	bl	8019840 <lrintf>
		r -= (float)i;
 8018626:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801862a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801862e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018636:	3301      	adds	r3, #1
		r -= (float)i;
 8018638:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801863c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018640:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018644:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018648:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801864c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018650:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018654:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018658:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801865c:	3301      	adds	r3, #1
 801865e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018662:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018666:	e432      	b.n	8017ece <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 8018668:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 801866c:	eeb4 baed 	vcmpe.f32	s22, s27
 8018670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018674:	f300 8108 	bgt.w	8018888 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
 8018678:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 801867c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 8018680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018684:	f100 8126 	bmi.w	80188d4 <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018688:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801868c:	b38b      	cbz	r3, 80186f2 <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
 801868e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018692:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 80184bc <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8018696:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801869a:	ee69 9a29 	vmul.f32	s19, s18, s19
 801869e:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 80186a2:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
 80186a6:	eea9 0aae 	vfma.f32	s0, s19, s29
 80186aa:	f001 f8c9 	bl	8019840 <lrintf>
		r -= (float)i;
 80186ae:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186b2:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80186b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80186ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186be:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 80186c0:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80186c8:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 80186cc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186d0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80186d4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80186d8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80186dc:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80186e0:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80186e4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80186e8:	3301      	adds	r3, #1
 80186ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186ee:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 80186f2:	ee1c 3a90 	vmov	r3, s25
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	f47f af36 	bne.w	8018568 <tMBSawPulse_tick+0x880>
 80186fc:	683d      	ldr	r5, [r7, #0]
 80186fe:	e6fa      	b.n	80184f6 <tMBSawPulse_tick+0x80e>
 8018700:	683d      	ldr	r5, [r7, #0]
 8018702:	e780      	b.n	8018606 <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
 8018704:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8018708:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 80184bc <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801870c:	ee78 aa2d 	vadd.f32	s21, s16, s27
 8018710:	9301      	str	r3, [sp, #4]
 8018712:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8018716:	eeb0 0a6c 	vmov.f32	s0, s25
 801871a:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 801871e:	f001 f88f 	bl	8019840 <lrintf>
		r -= (float)i;
 8018722:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018726:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801872a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801872e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
 8018732:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018734:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 8018736:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801873a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
 801873e:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 8018742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018746:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801874a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801874e:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018752:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 8018756:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801875a:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801875e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8018762:	f102 0201 	add.w	r2, r2, #1
 8018766:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801876a:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801876e:	f8d7 8000 	ldr.w	r8, [r7]
 8018772:	4645      	mov	r5, r8
    if (c->active)
 8018774:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 8018778:	f200 8175 	bhi.w	8018a66 <tMBSawPulse_tick+0xd7e>
    if (c->active)
 801877c:	2a00      	cmp	r2, #0
 801877e:	f43f af42 	beq.w	8018606 <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8018782:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
 8018786:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
 801878a:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
 801878e:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8018792:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 8018796:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801879a:	f001 f851 	bl	8019840 <lrintf>
		r -= (float)i;
 801879e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187a2:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80187a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80187aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187ae:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80187b0:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80187b8:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 80187bc:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187c0:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80187c4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187c8:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80187cc:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80187d0:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80187d4:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 80187d8:	444b      	add	r3, r9
 80187da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80187de:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80187e2:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 80187e6:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 80187ea:	f7ff bb3f 	b.w	8017e6c <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
 80187ee:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 80184bc <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80187f2:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 80187f6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 80187fa:	f04f 0901 	mov.w	r9, #1
 80187fe:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 8018802:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018806:	eea8 0aa9 	vfma.f32	s0, s17, s19
 801880a:	f001 f819 	bl	8019840 <lrintf>
		r -= (float)i;
 801880e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018812:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018816:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801881a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801881e:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8018820:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018828:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801882c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018830:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018834:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018838:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801883c:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018840:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018844:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8018848:	444b      	add	r3, r9
 801884a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801884e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018852:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 8018856:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801885a:	f7ff baff 	b.w	8017e5c <tMBSawPulse_tick+0x174>
 801885e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018862:	e711      	b.n	8018688 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
 8018864:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801886c:	f100 8100 	bmi.w	8018a70 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
 8018870:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018874:	f7ff bb57 	b.w	8017f26 <tMBSawPulse_tick+0x23e>
				x = 0.5f;
 8018878:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801887c:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8018abc <tMBSawPulse_tick+0xdd4>
 8018880:	eeb0 8a68 	vmov.f32	s16, s17
 8018884:	f7ff bb51 	b.w	8017f2a <tMBSawPulse_tick+0x242>
    if (c->active)
 8018888:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801888c:	ee1c 2a90 	vmov	r2, s25
 8018890:	2a00      	cmp	r2, #0
 8018892:	f040 80b6 	bne.w	8018a02 <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
 8018896:	eef5 dac0 	vcmpe.f32	s27, #0.0
 801889a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801889e:	f100 80ef 	bmi.w	8018a80 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 80188a2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 80188a6:	eeb0 8a4e 	vmov.f32	s16, s28
 80188aa:	e722      	b.n	80186f2 <tMBSawPulse_tick+0xa0a>
			if (p < b) {
 80188ac:	eeb4 bace 	vcmpe.f32	s22, s28
 80188b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b4:	f73f ac69 	bgt.w	801818a <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 80188b8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 80188bc:	eddf ca80 	vldr	s25, [pc, #512]	; 8018ac0 <tMBSawPulse_tick+0xdd8>
 80188c0:	f7ff bb31 	b.w	8017f26 <tMBSawPulse_tick+0x23e>
				x = -0.5f;
 80188c4:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 80188c8:	eeb0 8a67 	vmov.f32	s16, s15
 80188cc:	eef0 5a68 	vmov.f32	s11, s17
 80188d0:	f7ff bb2b 	b.w	8017f2a <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
 80188d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80188d8:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 80188dc:	2b00      	cmp	r3, #0
 80188de:	f000 80cf 	beq.w	8018a80 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 80188e2:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8018ac4 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 80188e6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 80188ea:	eddf ca75 	vldr	s25, [pc, #468]	; 8018ac0 <tMBSawPulse_tick+0xdd8>
 80188ee:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 80188f2:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 80188f6:	eea8 0a28 	vfma.f32	s0, s16, s17
 80188fa:	f000 ffa1 	bl	8019840 <lrintf>
		r -= (float)i;
 80188fe:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018902:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018906:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801890a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801890e:	4a6e      	ldr	r2, [pc, #440]	; (8018ac8 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018910:	3301      	adds	r3, #1
		r -= (float)i;
 8018912:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801891a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801891e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018922:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018926:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801892a:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801892e:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018932:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018936:	3301      	adds	r3, #1
 8018938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801893c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018940:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018942:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018946:	e69f      	b.n	8018688 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
 8018948:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8018ac4 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801894c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018950:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018954:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018958:	f000 ff72 	bl	8019840 <lrintf>
		r -= (float)i;
 801895c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018960:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018964:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801896c:	4a56      	ldr	r2, [pc, #344]	; (8018ac8 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801896e:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 8018970:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018978:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 801897c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018980:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018984:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018988:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801898c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8018990:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018994:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018998:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801899c:	f103 0301 	add.w	r3, r3, #1
 80189a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189a4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80189a8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 80189aa:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 80189ae:	dd6e      	ble.n	8018a8e <tMBSawPulse_tick+0xda6>
    if (c->active)
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f43f ad9e 	beq.w	80184f2 <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
 80189b6:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 80189ba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 80189be:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80189c2:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 80189c6:	eea8 0a29 	vfma.f32	s0, s16, s19
 80189ca:	f000 ff39 	bl	8019840 <lrintf>
		r -= (float)i;
 80189ce:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189d2:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80189d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80189da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189de:	3301      	adds	r3, #1
		r -= (float)i;
 80189e0:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80189e8:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189ec:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80189f0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80189f4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80189f8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189fc:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a00:	e797      	b.n	8018932 <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
 8018a02:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8018ac4 <tMBSawPulse_tick+0xddc>
 8018a06:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 8018a0a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 8018a0e:	ee0c 3a90 	vmov	s25, r3
 8018a12:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 8018a16:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8018a1a:	eea9 0a88 	vfma.f32	s0, s19, s16
 8018a1e:	f000 ff0f 	bl	8019840 <lrintf>
		r -= (float)i;
 8018a22:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a26:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018a2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a32:	3301      	adds	r3, #1
		r -= (float)i;
 8018a34:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018a3c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a40:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018a44:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a48:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018a4c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a50:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a54:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018a58:	3301      	adds	r3, #1
 8018a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a5e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8018a62:	683d      	ldr	r5, [r7, #0]
 8018a64:	e608      	b.n	8018678 <tMBSawPulse_tick+0x990>
 8018a66:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018a6a:	4699      	mov	r9, r3
 8018a6c:	f7ff b9fe 	b.w	8017e6c <tMBSawPulse_tick+0x184>
				p += 1.0f;
 8018a70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 8018a74:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 8018a78:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 8018a7c:	f7ff ba55 	b.w	8017f2a <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018a80:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018a84:	eddf ca0e 	vldr	s25, [pc, #56]	; 8018ac0 <tMBSawPulse_tick+0xdd8>
 8018a88:	eeb0 8a4e 	vmov.f32	s16, s28
 8018a8c:	e56c      	b.n	8018568 <tMBSawPulse_tick+0x880>
 8018a8e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018a92:	eddf ca0b 	vldr	s25, [pc, #44]	; 8018ac0 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
 8018a96:	e5f7      	b.n	8018688 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
 8018a98:	eeb0 8a68 	vmov.f32	s16, s17
 8018a9c:	f7ff b95f 	b.w	8017d5e <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
 8018aa0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018aa4:	eddf ca06 	vldr	s25, [pc, #24]	; 8018ac0 <tMBSawPulse_tick+0xdd8>
 8018aa8:	e6fd      	b.n	80188a6 <tMBSawPulse_tick+0xbbe>
 8018aaa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018aae:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 8018ab2:	eeb0 8a68 	vmov.f32	s16, s17
 8018ab6:	f7ff ba38 	b.w	8017f2a <tMBSawPulse_tick+0x242>
 8018aba:	bf00      	nop
 8018abc:	00000000 	.word	0x00000000
 8018ac0:	00000001 	.word	0x00000001
 8018ac4:	42800000 	.word	0x42800000
 8018ac8:	bf800000 	.word	0xbf800000

08018acc <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 8018acc:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8018ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 8018ad2:	eddf 6a14 	vldr	s13, [pc, #80]	; 8018b24 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ad6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 8018ada:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 8018ade:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ae2:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 8018ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 8018aea:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018aee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8018af2:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 8018af6:	dc0c      	bgt.n	8018b12 <tMBSawPulse_setFreq+0x46>
 8018af8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018b28 <tMBSawPulse_setFreq+0x5c>
 8018afc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b04:	d405      	bmi.n	8018b12 <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 8018b06:	2201      	movs	r2, #1
 8018b08:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8018b0c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 8018b10:	4770      	bx	lr
    	c->gain = 0.0f;
 8018b12:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8018b2c <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 8018b16:	2200      	movs	r2, #0
 8018b18:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8018b1c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 8018b20:	4770      	bx	lr
 8018b22:	bf00      	nop
 8018b24:	45bb8000 	.word	0x45bb8000
 8018b28:	c5bb8000 	.word	0xc5bb8000
 8018b2c:	00000000 	.word	0x00000000

08018b30 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 8018b30:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8018b36:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8018b3a:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8018b3e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8018b42:	eef1 7a67 	vneg.f32	s15, s15
 8018b46:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018b4a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b52:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018b56:	bfcc      	ite	gt
 8018b58:	2201      	movgt	r2, #1
 8018b5a:	2200      	movle	r2, #0
 8018b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b60:	f002 0201 	and.w	r2, r2, #1
 8018b64:	bf88      	it	hi
 8018b66:	2200      	movhi	r2, #0
 8018b68:	b122      	cbz	r2, 8018b74 <tMBSawPulse_sync+0x44>
 8018b6a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b72:	da04      	bge.n	8018b7e <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8018b74:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018b8c <tMBSawPulse_sync+0x5c>
 8018b78:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 8018b7c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018b7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018b82:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b86:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8018b8a:	4770      	bx	lr
 8018b8c:	00000000 	.word	0x00000000

08018b90 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 8018b90:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8018b92:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8018b96:	4770      	bx	lr

08018b98 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8018b98:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018b9a:	698c      	ldr	r4, [r1, #24]
{
 8018b9c:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018b9e:	201c      	movs	r0, #28
 8018ba0:	4621      	mov	r1, r4
 8018ba2:	f7fb fcd5 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 8018ba6:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018ba8:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8018baa:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018bac:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018bae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018bc4 <tIntPhasor_init+0x2c>
    c->phase    =  0;
 8018bb2:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8018bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018bbc:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8018bc0:	bd38      	pop	{r3, r4, r5, pc}
 8018bc2:	bf00      	nop
 8018bc4:	4f800000 	.word	0x4f800000

08018bc8 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8018bc8:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8018bca:	eddf 7a06 	vldr	s15, [pc, #24]	; 8018be4 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8018bce:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8018bd2:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8018bd4:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8018bd8:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8018bda:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8018bde:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018be2:	4770      	bx	lr
 8018be4:	2f80000d 	.word	0x2f80000d

08018be8 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 8018be8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018bea:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018bee:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018bf6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018bfa:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8018bfe:	4770      	bx	lr

08018c00 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8018c00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8018c04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8018c20 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8018c08:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8018c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c0e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8018c12:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018c16:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018c1a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018c1e:	4770      	bx	lr
 8018c20:	4f800000 	.word	0x4f800000

08018c24 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8018c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c26:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018c2a:	698f      	ldr	r7, [r1, #24]
{
 8018c2c:	4606      	mov	r6, r0
 8018c2e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018c30:	2010      	movs	r0, #16
 8018c32:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018c34:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018cbc <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018c38:	f7fb fc8a 	bl	8014550 <mpool_alloc>
 8018c3c:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8018c3e:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018c40:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8018c42:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018c44:	201c      	movs	r0, #28
 8018c46:	4639      	mov	r1, r7
 8018c48:	f7fb fc82 	bl	8014550 <mpool_alloc>
 8018c4c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8018c4e:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018c50:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8018c52:	2700      	movs	r7, #0
 8018c54:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018c56:	edd3 7a01 	vldr	s15, [r3, #4]
 8018c5a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018c5e:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018c62:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8018c64:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018c66:	4629      	mov	r1, r5
 8018c68:	f7fb fc72 	bl	8014550 <mpool_alloc>
 8018c6c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8018c6e:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8018c70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8018c74:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8018c76:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018c78:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018c7c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8018cc0 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018c80:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018c84:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8018c88:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018c8a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018c8c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018c90:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8018c94:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018c96:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018c9a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8018c9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018caa:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018cb2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8018cb6:	ecbd 8b02 	vpop	{d8}
 8018cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cbc:	4f800000 	.word	0x4f800000
 8018cc0:	2f80000d 	.word	0x2f80000d

08018cc4 <tSquareLFO_initToPool>:
{
 8018cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cc6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8018cca:	680f      	ldr	r7, [r1, #0]
{
 8018ccc:	4606      	mov	r6, r0
 8018cce:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018cd0:	2010      	movs	r0, #16
 8018cd2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018cd4:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8018d5c <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018cd8:	f7fb fc3a 	bl	8014550 <mpool_alloc>
 8018cdc:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8018cde:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8018ce0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8018ce2:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018ce4:	201c      	movs	r0, #28
 8018ce6:	4639      	mov	r1, r7
 8018ce8:	f7fb fc32 	bl	8014550 <mpool_alloc>
 8018cec:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8018cee:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018cf0:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8018cf2:	2700      	movs	r7, #0
 8018cf4:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018cf6:	edd3 7a01 	vldr	s15, [r3, #4]
 8018cfa:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018cfe:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018d02:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8018d04:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018d06:	4629      	mov	r1, r5
 8018d08:	f7fb fc22 	bl	8014550 <mpool_alloc>
 8018d0c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8018d0e:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 8018d10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8018d14:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8018d16:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018d18:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018d1c:	eddf 6a10 	vldr	s13, [pc, #64]	; 8018d60 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018d20:	ee27 7a08 	vmul.f32	s14, s14, s16
 8018d24:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8018d28:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018d2a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018d2c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018d30:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8018d34:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018d36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018d3a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8018d3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018d42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d46:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018d4a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8018d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018d52:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8018d56:	ecbd 8b02 	vpop	{d8}
 8018d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d5c:	4f800000 	.word	0x4f800000
 8018d60:	2f80000d 	.word	0x2f80000d

08018d64 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8018d64:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018d66:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8018d6a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8018da8 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8018d6e:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8018d70:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8018d74:	4403      	add	r3, r0
 8018d76:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8018d78:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8018d7c:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8018d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8018d82:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8018d86:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8018d88:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8018d8c:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018d8e:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8018d92:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018d96:	ee30 0a66 	vsub.f32	s0, s0, s13
 8018d9a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018d9e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8018da2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018da6:	4770      	bx	lr
 8018da8:	2f80000d 	.word	0x2f80000d

08018dac <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8018dac:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8018dae:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018db0:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018db4:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018db8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018dc0:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8018dc4:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018dc6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018dca:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018dce:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018dd2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018dd6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8018dda:	4770      	bx	lr

08018ddc <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8018ddc:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018dde:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8018e14 <tSquareLFO_setPulseWidth+0x38>
 8018de2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8018de4:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018de8:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8018dec:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8018e18 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8018df4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018df6:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8018dfa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8018dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e02:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8018e06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018e0a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018e0e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018e12:	4770      	bx	lr
 8018e14:	2f80000d 	.word	0x2f80000d
 8018e18:	4f800000 	.word	0x4f800000

08018e1c <tSquareLFO_setPhase>:
    int i = phase;
 8018e1c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8018e20:	eddf 6a13 	vldr	s13, [pc, #76]	; 8018e70 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 8018e24:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e26:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8018e74 <tSquareLFO_setPhase+0x58>
    phase -= i;
 8018e2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
 8018e2e:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8018e30:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 8018e34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018e38:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018e3c:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e40:	689a      	ldr	r2, [r3, #8]
 8018e42:	edd3 7a01 	vldr	s15, [r3, #4]
 8018e46:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8018e4a:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018e4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018e50:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8018e54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018e58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018e60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018e68:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8018e6c:	4770      	bx	lr
 8018e6e:	bf00      	nop
 8018e70:	4f800000 	.word	0x4f800000
 8018e74:	2f80000d 	.word	0x2f80000d

08018e78 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8018e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018e7a:	460c      	mov	r4, r1
{
 8018e7c:	4606      	mov	r6, r0
 8018e7e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8018e80:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8018e82:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8018e86:	4639      	mov	r1, r7
 8018e88:	f7fb fb62 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8018e8c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8018e8e:	6030      	str	r0, [r6, #0]
 8018e90:	4604      	mov	r4, r0
    c->mempool = m;
 8018e92:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8018e96:	f7ff ff15 	bl	8018cc4 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8018e9a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018e9c:	201c      	movs	r0, #28
 8018e9e:	4629      	mov	r1, r5
 8018ea0:	f7fb fb56 	bl	8014550 <mpool_alloc>
    c->phase    =  0;
 8018ea4:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8018ea6:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8018ea8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8018eaa:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018eac:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8018ec0 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 8018eb0:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8018eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8018eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018eba:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8018ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ec0:	4f800000 	.word	0x4f800000

08018ec4 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8018ec4:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 8018ec6:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8018ec8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8018ecc:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8018f44 <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018ed0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 8018ed4:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 8018ed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 8018eda:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8018ede:	4403      	add	r3, r0
 8018ee0:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8018ee2:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 8018ee6:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8018ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8018eec:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 8018eee:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8018ef0:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8018ef4:	6884      	ldr	r4, [r0, #8]
 8018ef6:	4423      	add	r3, r4
 8018ef8:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 8018efa:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8018efe:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 8018f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8018f04:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018f08:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 8018f0a:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 8018f0e:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8018f10:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8018f14:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f18:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8018f1c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8018f20:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f24:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8018f28:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 8018f2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018f30:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8018f34:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8018f38:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8018f3c:	eea6 0a07 	vfma.f32	s0, s12, s14
 8018f40:	4770      	bx	lr
 8018f42:	bf00      	nop
 8018f44:	2f80000d 	.word	0x2f80000d

08018f48 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 8018f48:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 8018f4a:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 8018f4c:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f4e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018f52:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f56:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f5e:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8018f62:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f64:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018f68:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f6c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f74:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8018f78:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f7a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8018f7e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8018f82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018f86:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8018f8a:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8018f8e:	4770      	bx	lr

08018f90 <tSawSquareLFO_setPhase>:
    int i = phase;
 8018f90:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8018f94:	eddf 6a15 	vldr	s13, [pc, #84]	; 8018fec <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 8018f98:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018f9a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8018ff0 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8018f9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
 8018fa2:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 8018fa4:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 8018fa6:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 8018faa:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018fae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8018fb2:	edc0 7a01 	vstr	s15, [r0, #4]
 8018fb6:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fba:	6890      	ldr	r0, [r2, #8]
 8018fbc:	edd2 7a01 	vldr	s15, [r2, #4]
 8018fc0:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8018fc4:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8018fc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8018fca:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8018fce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8018fd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8018fda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018fe2:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 8018fe6:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 8018fe8:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 8018fea:	4770      	bx	lr
 8018fec:	4f800000 	.word	0x4f800000
 8018ff0:	2f80000d 	.word	0x2f80000d

08018ff4 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 8018ff4:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8018ff6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018ffa:	4770      	bx	lr

08018ffc <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8018ffc:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8018ffe:	698d      	ldr	r5, [r1, #24]
{
 8019000:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019002:	2018      	movs	r0, #24
 8019004:	4629      	mov	r1, r5
 8019006:	f7fb faa3 	bl	8014550 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801900a:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801900c:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 801900e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019010:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019012:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019048 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8019016:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801904c <tTriLFO_init+0x50>
    c->phase    =  0;
 801901a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801901e:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019022:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
 8019026:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801902a:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
 801902e:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019030:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019034:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019038:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801903c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019040:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8019044:	bd38      	pop	{r3, r4, r5, pc}
 8019046:	bf00      	nop
 8019048:	4f800000 	.word	0x4f800000
 801904c:	435c0000 	.word	0x435c0000

08019050 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8019050:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019052:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019056:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019080 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 801905a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 801905e:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8019060:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 8019064:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8019066:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801906a:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801906e:	ee07 3a90 	vmov	s15, r3
 8019072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019076:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801907a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801907e:	4770      	bx	lr
 8019080:	2ffffff6 	.word	0x2ffffff6

08019084 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8019084:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019086:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801908a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801908e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019092:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019096:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801909a:	4770      	bx	lr

0801909c <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 801909c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 80190a0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80190a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190a6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80190aa:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 80190ae:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80190b2:	4770      	bx	lr

080190b4 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 80190b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b6:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80190ba:	698f      	ldr	r7, [r1, #24]
{
 80190bc:	4606      	mov	r6, r0
 80190be:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80190c0:	2010      	movs	r0, #16
 80190c2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80190c4:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8019140 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80190c8:	f7fb fa42 	bl	8014550 <mpool_alloc>
 80190cc:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80190ce:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80190d0:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 80190d2:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 80190d4:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80190d6:	4631      	mov	r1, r6
 80190d8:	f7fb fa3a 	bl	8014550 <mpool_alloc>
 80190dc:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80190de:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80190e0:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 80190e2:	2600      	movs	r6, #0
    c->freq  = freq;
 80190e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8019144 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 80190e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80190ec:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80190f0:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 80190f4:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80190f8:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80190fc:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 80190fe:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019100:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019104:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019108:	ee67 7a87 	vmul.f32	s15, s15, s14
 801910c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019110:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 8019114:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8019116:	4629      	mov	r1, r5
 8019118:	f7fb fa1a 	bl	8014550 <mpool_alloc>
 801911c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801911e:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8019120:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 8019124:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8019126:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801912a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801912e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019130:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019134:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8019138:	ecbd 8b02 	vpop	{d8}
 801913c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801913e:	bf00      	nop
 8019140:	4f800000 	.word	0x4f800000
 8019144:	435c0000 	.word	0x435c0000

08019148 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8019148:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801914a:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 801914c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8019150:	4a20      	ldr	r2, [pc, #128]	; (80191d4 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019152:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 8019156:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019158:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80191d8 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
 801915c:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801915e:	eddf 4a1f 	vldr	s9, [pc, #124]	; 80191dc <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
 8019162:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8019166:	4403      	add	r3, r0
 8019168:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
 801916a:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
 801916c:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801916e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8019172:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 8019176:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801917a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 801917e:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 8019180:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 8019182:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
 8019186:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
 8019188:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801918a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801918e:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
 8019192:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 8019196:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801919a:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 801919e:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
 80191a2:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80191a6:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 80191aa:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 80191ae:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80191b2:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 80191b6:	ee07 3a10 	vmov	s14, r3
 80191ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80191be:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 80191c2:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 80191c6:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
 80191c8:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 80191cc:	eea5 0aa6 	vfma.f32	s0, s11, s13
 80191d0:	4770      	bx	lr
 80191d2:	bf00      	nop
 80191d4:	0802309c 	.word	0x0802309c
 80191d8:	35000004 	.word	0x35000004
 80191dc:	2ffffff6 	.word	0x2ffffff6

080191e0 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 80191e0:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 80191e2:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80191e4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80191e8:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80191ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80191f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80191f4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 80191f8:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80191fa:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80191fe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019202:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019206:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801920a:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 801920e:	4770      	bx	lr

08019210 <tSineTriLFO_setPhase>:
    int i = phase;
 8019210:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 8019214:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801923c <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 8019218:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801921a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 801921e:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8019220:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8019224:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019228:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801922c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8019230:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 8019234:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 8019236:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801923a:	4770      	bx	lr
 801923c:	4f800000 	.word	0x4f800000

08019240 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 8019240:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8019242:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 8019246:	4770      	bx	lr

08019248 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8019248:	4770      	bx	lr
 801924a:	bf00      	nop

0801924c <LEAF_init>:
{
 801924c:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 801924e:	6200      	str	r0, [r0, #32]
{
 8019250:	4604      	mov	r4, r0
 8019252:	461d      	mov	r5, r3
 8019254:	ed2d 8b02 	vpush	{d8}
 8019258:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 801925c:	f7fb f962 	bl	8014524 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8019260:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019264:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8019298 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8019268:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801926a:	4b0c      	ldr	r3, [pc, #48]	; (801929c <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 801926c:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8019270:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8019274:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8019276:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8019278:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801927c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8019280:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8019284:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8019288:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801928c:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8019290:	ecbd 8b02 	vpop	{d8}
 8019294:	bd38      	pop	{r3, r4, r5, pc}
 8019296:	bf00      	nop
 8019298:	40c90fdb 	.word	0x40c90fdb
 801929c:	08019249 	.word	0x08019249

080192a0 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80192a0:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 80192a2:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80192a6:	2401      	movs	r4, #1
 80192a8:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 80192aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 80192ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80192b0:	4718      	bx	r3
 80192b2:	bf00      	nop

080192b4 <arm_sin_f32>:
 80192b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019334 <arm_sin_f32+0x80>
 80192b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80192bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80192c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80192c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192c8:	d504      	bpl.n	80192d4 <arm_sin_f32+0x20>
 80192ca:	ee17 3a90 	vmov	r3, s15
 80192ce:	3b01      	subs	r3, #1
 80192d0:	ee07 3a90 	vmov	s15, r3
 80192d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192d8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8019338 <arm_sin_f32+0x84>
 80192dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80192e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80192e4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80192e8:	ee17 3a10 	vmov	r3, s14
 80192ec:	b29b      	uxth	r3, r3
 80192ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192f2:	d21a      	bcs.n	801932a <arm_sin_f32+0x76>
 80192f4:	ee07 3a10 	vmov	s14, r3
 80192f8:	1c59      	adds	r1, r3, #1
 80192fa:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80192fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019302:	4a0e      	ldr	r2, [pc, #56]	; (801933c <arm_sin_f32+0x88>)
 8019304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801930c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8019310:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019314:	edd3 6a00 	vldr	s13, [r3]
 8019318:	ed92 7a00 	vldr	s14, [r2]
 801931c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019324:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019328:	4770      	bx	lr
 801932a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801932e:	2101      	movs	r1, #1
 8019330:	2300      	movs	r3, #0
 8019332:	e7e6      	b.n	8019302 <arm_sin_f32+0x4e>
 8019334:	3e22f983 	.word	0x3e22f983
 8019338:	44000000 	.word	0x44000000
 801933c:	08032828 	.word	0x08032828

08019340 <__libc_init_array>:
 8019340:	b570      	push	{r4, r5, r6, lr}
 8019342:	4d0d      	ldr	r5, [pc, #52]	; (8019378 <__libc_init_array+0x38>)
 8019344:	4c0d      	ldr	r4, [pc, #52]	; (801937c <__libc_init_array+0x3c>)
 8019346:	1b64      	subs	r4, r4, r5
 8019348:	10a4      	asrs	r4, r4, #2
 801934a:	2600      	movs	r6, #0
 801934c:	42a6      	cmp	r6, r4
 801934e:	d109      	bne.n	8019364 <__libc_init_array+0x24>
 8019350:	4d0b      	ldr	r5, [pc, #44]	; (8019380 <__libc_init_array+0x40>)
 8019352:	4c0c      	ldr	r4, [pc, #48]	; (8019384 <__libc_init_array+0x44>)
 8019354:	f002 f90c 	bl	801b570 <_init>
 8019358:	1b64      	subs	r4, r4, r5
 801935a:	10a4      	asrs	r4, r4, #2
 801935c:	2600      	movs	r6, #0
 801935e:	42a6      	cmp	r6, r4
 8019360:	d105      	bne.n	801936e <__libc_init_array+0x2e>
 8019362:	bd70      	pop	{r4, r5, r6, pc}
 8019364:	f855 3b04 	ldr.w	r3, [r5], #4
 8019368:	4798      	blx	r3
 801936a:	3601      	adds	r6, #1
 801936c:	e7ee      	b.n	801934c <__libc_init_array+0xc>
 801936e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019372:	4798      	blx	r3
 8019374:	3601      	adds	r6, #1
 8019376:	e7f2      	b.n	801935e <__libc_init_array+0x1e>
 8019378:	08033ab8 	.word	0x08033ab8
 801937c:	08033ab8 	.word	0x08033ab8
 8019380:	08033ab8 	.word	0x08033ab8
 8019384:	08033abc 	.word	0x08033abc

08019388 <__itoa>:
 8019388:	1e93      	subs	r3, r2, #2
 801938a:	2b22      	cmp	r3, #34	; 0x22
 801938c:	b510      	push	{r4, lr}
 801938e:	460c      	mov	r4, r1
 8019390:	d904      	bls.n	801939c <__itoa+0x14>
 8019392:	2300      	movs	r3, #0
 8019394:	700b      	strb	r3, [r1, #0]
 8019396:	461c      	mov	r4, r3
 8019398:	4620      	mov	r0, r4
 801939a:	bd10      	pop	{r4, pc}
 801939c:	2a0a      	cmp	r2, #10
 801939e:	d109      	bne.n	80193b4 <__itoa+0x2c>
 80193a0:	2800      	cmp	r0, #0
 80193a2:	da07      	bge.n	80193b4 <__itoa+0x2c>
 80193a4:	232d      	movs	r3, #45	; 0x2d
 80193a6:	700b      	strb	r3, [r1, #0]
 80193a8:	4240      	negs	r0, r0
 80193aa:	2101      	movs	r1, #1
 80193ac:	4421      	add	r1, r4
 80193ae:	f000 f841 	bl	8019434 <__utoa>
 80193b2:	e7f1      	b.n	8019398 <__itoa+0x10>
 80193b4:	2100      	movs	r1, #0
 80193b6:	e7f9      	b.n	80193ac <__itoa+0x24>

080193b8 <itoa>:
 80193b8:	f7ff bfe6 	b.w	8019388 <__itoa>

080193bc <memcpy>:
 80193bc:	440a      	add	r2, r1
 80193be:	4291      	cmp	r1, r2
 80193c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80193c4:	d100      	bne.n	80193c8 <memcpy+0xc>
 80193c6:	4770      	bx	lr
 80193c8:	b510      	push	{r4, lr}
 80193ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193d2:	4291      	cmp	r1, r2
 80193d4:	d1f9      	bne.n	80193ca <memcpy+0xe>
 80193d6:	bd10      	pop	{r4, pc}

080193d8 <memset>:
 80193d8:	4402      	add	r2, r0
 80193da:	4603      	mov	r3, r0
 80193dc:	4293      	cmp	r3, r2
 80193de:	d100      	bne.n	80193e2 <memset+0xa>
 80193e0:	4770      	bx	lr
 80193e2:	f803 1b01 	strb.w	r1, [r3], #1
 80193e6:	e7f9      	b.n	80193dc <memset+0x4>

080193e8 <frexpf>:
 80193e8:	ee10 3a10 	vmov	r3, s0
 80193ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80193f0:	2100      	movs	r1, #0
 80193f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80193f6:	6001      	str	r1, [r0, #0]
 80193f8:	da19      	bge.n	801942e <frexpf+0x46>
 80193fa:	b1c2      	cbz	r2, 801942e <frexpf+0x46>
 80193fc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019400:	d10a      	bne.n	8019418 <frexpf+0x30>
 8019402:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019430 <frexpf+0x48>
 8019406:	ee60 7a27 	vmul.f32	s15, s0, s15
 801940a:	f06f 0118 	mvn.w	r1, #24
 801940e:	ee17 3a90 	vmov	r3, s15
 8019412:	6001      	str	r1, [r0, #0]
 8019414:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019418:	6801      	ldr	r1, [r0, #0]
 801941a:	15d2      	asrs	r2, r2, #23
 801941c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019420:	3a7e      	subs	r2, #126	; 0x7e
 8019422:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8019426:	440a      	add	r2, r1
 8019428:	ee00 3a10 	vmov	s0, r3
 801942c:	6002      	str	r2, [r0, #0]
 801942e:	4770      	bx	lr
 8019430:	4c000000 	.word	0x4c000000

08019434 <__utoa>:
 8019434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019436:	4c1f      	ldr	r4, [pc, #124]	; (80194b4 <__utoa+0x80>)
 8019438:	b08b      	sub	sp, #44	; 0x2c
 801943a:	4605      	mov	r5, r0
 801943c:	460b      	mov	r3, r1
 801943e:	466e      	mov	r6, sp
 8019440:	f104 0c20 	add.w	ip, r4, #32
 8019444:	6820      	ldr	r0, [r4, #0]
 8019446:	6861      	ldr	r1, [r4, #4]
 8019448:	4637      	mov	r7, r6
 801944a:	c703      	stmia	r7!, {r0, r1}
 801944c:	3408      	adds	r4, #8
 801944e:	4564      	cmp	r4, ip
 8019450:	463e      	mov	r6, r7
 8019452:	d1f7      	bne.n	8019444 <__utoa+0x10>
 8019454:	7921      	ldrb	r1, [r4, #4]
 8019456:	7139      	strb	r1, [r7, #4]
 8019458:	1e91      	subs	r1, r2, #2
 801945a:	6820      	ldr	r0, [r4, #0]
 801945c:	6038      	str	r0, [r7, #0]
 801945e:	2922      	cmp	r1, #34	; 0x22
 8019460:	f04f 0100 	mov.w	r1, #0
 8019464:	d904      	bls.n	8019470 <__utoa+0x3c>
 8019466:	7019      	strb	r1, [r3, #0]
 8019468:	460b      	mov	r3, r1
 801946a:	4618      	mov	r0, r3
 801946c:	b00b      	add	sp, #44	; 0x2c
 801946e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019470:	1e58      	subs	r0, r3, #1
 8019472:	4684      	mov	ip, r0
 8019474:	fbb5 f7f2 	udiv	r7, r5, r2
 8019478:	fb02 5617 	mls	r6, r2, r7, r5
 801947c:	3628      	adds	r6, #40	; 0x28
 801947e:	446e      	add	r6, sp
 8019480:	460c      	mov	r4, r1
 8019482:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8019486:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801948a:	462e      	mov	r6, r5
 801948c:	42b2      	cmp	r2, r6
 801948e:	f101 0101 	add.w	r1, r1, #1
 8019492:	463d      	mov	r5, r7
 8019494:	d9ee      	bls.n	8019474 <__utoa+0x40>
 8019496:	2200      	movs	r2, #0
 8019498:	545a      	strb	r2, [r3, r1]
 801949a:	1919      	adds	r1, r3, r4
 801949c:	1aa5      	subs	r5, r4, r2
 801949e:	42aa      	cmp	r2, r5
 80194a0:	dae3      	bge.n	801946a <__utoa+0x36>
 80194a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80194a6:	780e      	ldrb	r6, [r1, #0]
 80194a8:	7006      	strb	r6, [r0, #0]
 80194aa:	3201      	adds	r2, #1
 80194ac:	f801 5901 	strb.w	r5, [r1], #-1
 80194b0:	e7f4      	b.n	801949c <__utoa+0x68>
 80194b2:	bf00      	nop
 80194b4:	0803302c 	.word	0x0803302c

080194b8 <with_errnof>:
 80194b8:	b513      	push	{r0, r1, r4, lr}
 80194ba:	4604      	mov	r4, r0
 80194bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80194c0:	f002 f850 	bl	801b564 <__errno>
 80194c4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80194c8:	6004      	str	r4, [r0, #0]
 80194ca:	b002      	add	sp, #8
 80194cc:	bd10      	pop	{r4, pc}

080194ce <xflowf>:
 80194ce:	b130      	cbz	r0, 80194de <xflowf+0x10>
 80194d0:	eef1 7a40 	vneg.f32	s15, s0
 80194d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80194d8:	2022      	movs	r0, #34	; 0x22
 80194da:	f7ff bfed 	b.w	80194b8 <with_errnof>
 80194de:	eef0 7a40 	vmov.f32	s15, s0
 80194e2:	e7f7      	b.n	80194d4 <xflowf+0x6>

080194e4 <__math_uflowf>:
 80194e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194ec <__math_uflowf+0x8>
 80194e8:	f7ff bff1 	b.w	80194ce <xflowf>
 80194ec:	10000000 	.word	0x10000000

080194f0 <__math_may_uflowf>:
 80194f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194f8 <__math_may_uflowf+0x8>
 80194f4:	f7ff bfeb 	b.w	80194ce <xflowf>
 80194f8:	1a200000 	.word	0x1a200000

080194fc <__math_oflowf>:
 80194fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019504 <__math_oflowf+0x8>
 8019500:	f7ff bfe5 	b.w	80194ce <xflowf>
 8019504:	70000000 	.word	0x70000000

08019508 <__math_divzerof>:
 8019508:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801950c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019510:	2800      	cmp	r0, #0
 8019512:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8019516:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019524 <__math_divzerof+0x1c>
 801951a:	2022      	movs	r0, #34	; 0x22
 801951c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019520:	f7ff bfca 	b.w	80194b8 <with_errnof>
 8019524:	00000000 	.word	0x00000000

08019528 <__math_invalidf>:
 8019528:	eef0 7a40 	vmov.f32	s15, s0
 801952c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019530:	eef4 7a67 	vcmp.f32	s15, s15
 8019534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019538:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801953c:	d602      	bvs.n	8019544 <__math_invalidf+0x1c>
 801953e:	2021      	movs	r0, #33	; 0x21
 8019540:	f7ff bfba 	b.w	80194b8 <with_errnof>
 8019544:	4770      	bx	lr
	...

08019548 <tan>:
 8019548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801954a:	eeb0 7b40 	vmov.f64	d7, d0
 801954e:	ee17 3a90 	vmov	r3, s15
 8019552:	4a15      	ldr	r2, [pc, #84]	; (80195a8 <tan+0x60>)
 8019554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019558:	4293      	cmp	r3, r2
 801955a:	dc07      	bgt.n	801956c <tan+0x24>
 801955c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80195a0 <tan+0x58>
 8019560:	2001      	movs	r0, #1
 8019562:	b005      	add	sp, #20
 8019564:	f85d eb04 	ldr.w	lr, [sp], #4
 8019568:	f001 b8ba 	b.w	801a6e0 <__kernel_tan>
 801956c:	4a0f      	ldr	r2, [pc, #60]	; (80195ac <tan+0x64>)
 801956e:	4293      	cmp	r3, r2
 8019570:	dd04      	ble.n	801957c <tan+0x34>
 8019572:	ee30 0b40 	vsub.f64	d0, d0, d0
 8019576:	b005      	add	sp, #20
 8019578:	f85d fb04 	ldr.w	pc, [sp], #4
 801957c:	4668      	mov	r0, sp
 801957e:	f000 fb97 	bl	8019cb0 <__ieee754_rem_pio2>
 8019582:	0040      	lsls	r0, r0, #1
 8019584:	f000 0002 	and.w	r0, r0, #2
 8019588:	ed9d 1b02 	vldr	d1, [sp, #8]
 801958c:	ed9d 0b00 	vldr	d0, [sp]
 8019590:	f1c0 0001 	rsb	r0, r0, #1
 8019594:	f001 f8a4 	bl	801a6e0 <__kernel_tan>
 8019598:	e7ed      	b.n	8019576 <tan+0x2e>
 801959a:	bf00      	nop
 801959c:	f3af 8000 	nop.w
	...
 80195a8:	3fe921fb 	.word	0x3fe921fb
 80195ac:	7fefffff 	.word	0x7fefffff

080195b0 <expf>:
 80195b0:	ee10 2a10 	vmov	r2, s0
 80195b4:	f240 412a 	movw	r1, #1066	; 0x42a
 80195b8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80195bc:	428b      	cmp	r3, r1
 80195be:	b430      	push	{r4, r5}
 80195c0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80195c4:	d92a      	bls.n	801961c <expf+0x6c>
 80195c6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80195ca:	d058      	beq.n	801967e <expf+0xce>
 80195cc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80195d0:	d303      	bcc.n	80195da <expf+0x2a>
 80195d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80195d6:	bc30      	pop	{r4, r5}
 80195d8:	4770      	bx	lr
 80195da:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8019684 <expf+0xd4>
 80195de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80195e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195e6:	dd03      	ble.n	80195f0 <expf+0x40>
 80195e8:	bc30      	pop	{r4, r5}
 80195ea:	2000      	movs	r0, #0
 80195ec:	f7ff bf86 	b.w	80194fc <__math_oflowf>
 80195f0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019688 <expf+0xd8>
 80195f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80195f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195fc:	d503      	bpl.n	8019606 <expf+0x56>
 80195fe:	bc30      	pop	{r4, r5}
 8019600:	2000      	movs	r0, #0
 8019602:	f7ff bf6f 	b.w	80194e4 <__math_uflowf>
 8019606:	eddf 7a21 	vldr	s15, [pc, #132]	; 801968c <expf+0xdc>
 801960a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019612:	d503      	bpl.n	801961c <expf+0x6c>
 8019614:	bc30      	pop	{r4, r5}
 8019616:	2000      	movs	r0, #0
 8019618:	f7ff bf6a 	b.w	80194f0 <__math_may_uflowf>
 801961c:	4b1c      	ldr	r3, [pc, #112]	; (8019690 <expf+0xe0>)
 801961e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019622:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8019626:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801962a:	eeb0 7b44 	vmov.f64	d7, d4
 801962e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019632:	ee17 0a10 	vmov	r0, s14
 8019636:	ee37 7b44 	vsub.f64	d7, d7, d4
 801963a:	f000 021f 	and.w	r2, r0, #31
 801963e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8019642:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8019646:	ee27 4b07 	vmul.f64	d4, d7, d7
 801964a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801964e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8019652:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019656:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801965a:	684d      	ldr	r5, [r1, #4]
 801965c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8019660:	2100      	movs	r1, #0
 8019662:	190a      	adds	r2, r1, r4
 8019664:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8019668:	eea5 0b07 	vfma.f64	d0, d5, d7
 801966c:	ec43 2b17 	vmov	d7, r2, r3
 8019670:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019674:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019678:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801967c:	e7ab      	b.n	80195d6 <expf+0x26>
 801967e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8019694 <expf+0xe4>
 8019682:	e7a8      	b.n	80195d6 <expf+0x26>
 8019684:	42b17217 	.word	0x42b17217
 8019688:	c2cff1b4 	.word	0xc2cff1b4
 801968c:	c2ce8ecf 	.word	0xc2ce8ecf
 8019690:	08033058 	.word	0x08033058
 8019694:	00000000 	.word	0x00000000

08019698 <fabsf>:
 8019698:	ee10 3a10 	vmov	r3, s0
 801969c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196a0:	ee00 3a10 	vmov	s0, r3
 80196a4:	4770      	bx	lr
	...

080196a8 <logf>:
 80196a8:	ee10 3a10 	vmov	r3, s0
 80196ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80196b0:	b410      	push	{r4}
 80196b2:	d055      	beq.n	8019760 <logf+0xb8>
 80196b4:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80196b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80196bc:	d31a      	bcc.n	80196f4 <logf+0x4c>
 80196be:	005a      	lsls	r2, r3, #1
 80196c0:	d104      	bne.n	80196cc <logf+0x24>
 80196c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196c6:	2001      	movs	r0, #1
 80196c8:	f7ff bf1e 	b.w	8019508 <__math_divzerof>
 80196cc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80196d0:	d043      	beq.n	801975a <logf+0xb2>
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	db02      	blt.n	80196dc <logf+0x34>
 80196d6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80196da:	d303      	bcc.n	80196e4 <logf+0x3c>
 80196dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196e0:	f7ff bf22 	b.w	8019528 <__math_invalidf>
 80196e4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8019768 <logf+0xc0>
 80196e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80196ec:	ee10 3a10 	vmov	r3, s0
 80196f0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80196f4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80196f8:	491c      	ldr	r1, [pc, #112]	; (801976c <logf+0xc4>)
 80196fa:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80196fe:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8019702:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8019706:	0dd4      	lsrs	r4, r2, #23
 8019708:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801970c:	05e4      	lsls	r4, r4, #23
 801970e:	ed90 6b00 	vldr	d6, [r0]
 8019712:	1b1b      	subs	r3, r3, r4
 8019714:	ee07 3a90 	vmov	s15, r3
 8019718:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801971c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019720:	15d2      	asrs	r2, r2, #23
 8019722:	eea6 0b07 	vfma.f64	d0, d6, d7
 8019726:	ed90 6b02 	vldr	d6, [r0, #8]
 801972a:	ee20 4b00 	vmul.f64	d4, d0, d0
 801972e:	ee07 2a90 	vmov	s15, r2
 8019732:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019736:	eea7 6b05 	vfma.f64	d6, d7, d5
 801973a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801973e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8019742:	eea5 7b00 	vfma.f64	d7, d5, d0
 8019746:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801974a:	ee30 0b06 	vadd.f64	d0, d0, d6
 801974e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019752:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019756:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801975a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801975e:	4770      	bx	lr
 8019760:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8019770 <logf+0xc8>
 8019764:	e7f9      	b.n	801975a <logf+0xb2>
 8019766:	bf00      	nop
 8019768:	4b000000 	.word	0x4b000000
 801976c:	080332c0 	.word	0x080332c0
 8019770:	00000000 	.word	0x00000000

08019774 <log2f>:
 8019774:	ee10 2a10 	vmov	r2, s0
 8019778:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801977c:	b410      	push	{r4}
 801977e:	d055      	beq.n	801982c <log2f+0xb8>
 8019780:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8019784:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019788:	d31a      	bcc.n	80197c0 <log2f+0x4c>
 801978a:	0053      	lsls	r3, r2, #1
 801978c:	d104      	bne.n	8019798 <log2f+0x24>
 801978e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019792:	2001      	movs	r0, #1
 8019794:	f7ff beb8 	b.w	8019508 <__math_divzerof>
 8019798:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801979c:	d043      	beq.n	8019826 <log2f+0xb2>
 801979e:	2a00      	cmp	r2, #0
 80197a0:	db02      	blt.n	80197a8 <log2f+0x34>
 80197a2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80197a6:	d303      	bcc.n	80197b0 <log2f+0x3c>
 80197a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197ac:	f7ff bebc 	b.w	8019528 <__math_invalidf>
 80197b0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8019834 <log2f+0xc0>
 80197b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80197b8:	ee10 3a10 	vmov	r3, s0
 80197bc:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 80197c0:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 80197c4:	491c      	ldr	r1, [pc, #112]	; (8019838 <log2f+0xc4>)
 80197c6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80197ca:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80197ce:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 80197d2:	0ddc      	lsrs	r4, r3, #23
 80197d4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80197d8:	05e4      	lsls	r4, r4, #23
 80197da:	ed90 5b00 	vldr	d5, [r0]
 80197de:	1b12      	subs	r2, r2, r4
 80197e0:	ee07 2a90 	vmov	s15, r2
 80197e4:	15db      	asrs	r3, r3, #23
 80197e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80197ea:	eea5 6b07 	vfma.f64	d6, d5, d7
 80197ee:	ed90 7b02 	vldr	d7, [r0, #8]
 80197f2:	ee26 4b06 	vmul.f64	d4, d6, d6
 80197f6:	ee00 3a10 	vmov	s0, r3
 80197fa:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80197fe:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8019802:	ee30 0b07 	vadd.f64	d0, d0, d7
 8019806:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801980a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801980e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8019812:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019816:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801981a:	eea5 0b06 	vfma.f64	d0, d5, d6
 801981e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019822:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019826:	f85d 4b04 	ldr.w	r4, [sp], #4
 801982a:	4770      	bx	lr
 801982c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801983c <log2f+0xc8>
 8019830:	e7f9      	b.n	8019826 <log2f+0xb2>
 8019832:	bf00      	nop
 8019834:	4b000000 	.word	0x4b000000
 8019838:	080331a0 	.word	0x080331a0
 801983c:	00000000 	.word	0x00000000

08019840 <lrintf>:
 8019840:	ee10 3a10 	vmov	r3, s0
 8019844:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019848:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 801984c:	281e      	cmp	r0, #30
 801984e:	b082      	sub	sp, #8
 8019850:	dc2e      	bgt.n	80198b0 <lrintf+0x70>
 8019852:	1c41      	adds	r1, r0, #1
 8019854:	da02      	bge.n	801985c <lrintf+0x1c>
 8019856:	2000      	movs	r0, #0
 8019858:	b002      	add	sp, #8
 801985a:	4770      	bx	lr
 801985c:	2816      	cmp	r0, #22
 801985e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8019862:	dd09      	ble.n	8019878 <lrintf+0x38>
 8019864:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019868:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801986c:	3a96      	subs	r2, #150	; 0x96
 801986e:	4090      	lsls	r0, r2
 8019870:	2900      	cmp	r1, #0
 8019872:	d0f1      	beq.n	8019858 <lrintf+0x18>
 8019874:	4240      	negs	r0, r0
 8019876:	e7ef      	b.n	8019858 <lrintf+0x18>
 8019878:	4b10      	ldr	r3, [pc, #64]	; (80198bc <lrintf+0x7c>)
 801987a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801987e:	ed93 7a00 	vldr	s14, [r3]
 8019882:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019886:	ed8d 0a01 	vstr	s0, [sp, #4]
 801988a:	eddd 7a01 	vldr	s15, [sp, #4]
 801988e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019892:	ee17 3a90 	vmov	r3, s15
 8019896:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801989a:	d0dc      	beq.n	8019856 <lrintf+0x16>
 801989c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80198a0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80198a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80198a8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80198ac:	40d8      	lsrs	r0, r3
 80198ae:	e7df      	b.n	8019870 <lrintf+0x30>
 80198b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80198b4:	ee17 0a90 	vmov	r0, s15
 80198b8:	e7ce      	b.n	8019858 <lrintf+0x18>
 80198ba:	bf00      	nop
 80198bc:	080333e0 	.word	0x080333e0

080198c0 <checkint>:
 80198c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80198c4:	2b7e      	cmp	r3, #126	; 0x7e
 80198c6:	dd10      	ble.n	80198ea <checkint+0x2a>
 80198c8:	2b96      	cmp	r3, #150	; 0x96
 80198ca:	dc0c      	bgt.n	80198e6 <checkint+0x26>
 80198cc:	2201      	movs	r2, #1
 80198ce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80198d2:	fa02 f303 	lsl.w	r3, r2, r3
 80198d6:	1e5a      	subs	r2, r3, #1
 80198d8:	4202      	tst	r2, r0
 80198da:	d106      	bne.n	80198ea <checkint+0x2a>
 80198dc:	4203      	tst	r3, r0
 80198de:	bf0c      	ite	eq
 80198e0:	2002      	moveq	r0, #2
 80198e2:	2001      	movne	r0, #1
 80198e4:	4770      	bx	lr
 80198e6:	2002      	movs	r0, #2
 80198e8:	4770      	bx	lr
 80198ea:	2000      	movs	r0, #0
 80198ec:	4770      	bx	lr
	...

080198f0 <powf>:
 80198f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198f2:	ee10 1a10 	vmov	r1, s0
 80198f6:	ee10 4a90 	vmov	r4, s1
 80198fa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80198fe:	0062      	lsls	r2, r4, #1
 8019900:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019904:	eef0 7a40 	vmov.f32	s15, s0
 8019908:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801990c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019910:	d252      	bcs.n	80199b8 <powf+0xc8>
 8019912:	4298      	cmp	r0, r3
 8019914:	d252      	bcs.n	80199bc <powf+0xcc>
 8019916:	2000      	movs	r0, #0
 8019918:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801991c:	4ca0      	ldr	r4, [pc, #640]	; (8019ba0 <powf+0x2b0>)
 801991e:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 8019922:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8019926:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801992a:	0dd2      	lsrs	r2, r2, #23
 801992c:	05d2      	lsls	r2, r2, #23
 801992e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8019932:	1a8b      	subs	r3, r1, r2
 8019934:	ed95 6b00 	vldr	d6, [r5]
 8019938:	ee07 3a90 	vmov	s15, r3
 801993c:	15d2      	asrs	r2, r2, #23
 801993e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019942:	eea6 5b07 	vfma.f64	d5, d6, d7
 8019946:	ed95 6b02 	vldr	d6, [r5, #8]
 801994a:	ee25 2b05 	vmul.f64	d2, d5, d5
 801994e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8019952:	ee07 2a90 	vmov	s15, r2
 8019956:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801995a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801995e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019962:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8019966:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801996a:	eea5 3b06 	vfma.f64	d3, d5, d6
 801996e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8019972:	eea5 6b04 	vfma.f64	d6, d5, d4
 8019976:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801997a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801997e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8019982:	eea2 7b06 	vfma.f64	d7, d2, d6
 8019986:	eea3 7b01 	vfma.f64	d7, d3, d1
 801998a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801998e:	ee10 3a90 	vmov	r3, s1
 8019992:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8019996:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801999a:	429a      	cmp	r2, r3
 801999c:	f0c0 80b1 	bcc.w	8019b02 <powf+0x212>
 80199a0:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8019b80 <powf+0x290>
 80199a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80199a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ac:	dd79      	ble.n	8019aa2 <powf+0x1b2>
 80199ae:	b003      	add	sp, #12
 80199b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199b4:	f7ff bda2 	b.w	80194fc <__math_oflowf>
 80199b8:	4298      	cmp	r0, r3
 80199ba:	d32d      	bcc.n	8019a18 <powf+0x128>
 80199bc:	b952      	cbnz	r2, 80199d4 <powf+0xe4>
 80199be:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80199c8:	f240 80c9 	bls.w	8019b5e <powf+0x26e>
 80199cc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80199d0:	b003      	add	sp, #12
 80199d2:	bd30      	pop	{r4, r5, pc}
 80199d4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80199d8:	d105      	bne.n	80199e6 <powf+0xf6>
 80199da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80199de:	0064      	lsls	r4, r4, #1
 80199e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80199e4:	e7f0      	b.n	80199c8 <powf+0xd8>
 80199e6:	004b      	lsls	r3, r1, #1
 80199e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80199ec:	d8ee      	bhi.n	80199cc <powf+0xdc>
 80199ee:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80199f2:	d1eb      	bne.n	80199cc <powf+0xdc>
 80199f4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80199f8:	f000 80b1 	beq.w	8019b5e <powf+0x26e>
 80199fc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019a00:	ea6f 0404 	mvn.w	r4, r4
 8019a04:	bf34      	ite	cc
 8019a06:	2300      	movcc	r3, #0
 8019a08:	2301      	movcs	r3, #1
 8019a0a:	0fe4      	lsrs	r4, r4, #31
 8019a0c:	42a3      	cmp	r3, r4
 8019a0e:	f040 80a9 	bne.w	8019b64 <powf+0x274>
 8019a12:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8019a16:	e7db      	b.n	80199d0 <powf+0xe0>
 8019a18:	004d      	lsls	r5, r1, #1
 8019a1a:	1e6a      	subs	r2, r5, #1
 8019a1c:	429a      	cmp	r2, r3
 8019a1e:	d31c      	bcc.n	8019a5a <powf+0x16a>
 8019a20:	2900      	cmp	r1, #0
 8019a22:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019a26:	da0f      	bge.n	8019a48 <powf+0x158>
 8019a28:	ee10 0a90 	vmov	r0, s1
 8019a2c:	f7ff ff48 	bl	80198c0 <checkint>
 8019a30:	2801      	cmp	r0, #1
 8019a32:	d109      	bne.n	8019a48 <powf+0x158>
 8019a34:	eeb1 0a40 	vneg.f32	s0, s0
 8019a38:	b945      	cbnz	r5, 8019a4c <powf+0x15c>
 8019a3a:	2c00      	cmp	r4, #0
 8019a3c:	dac8      	bge.n	80199d0 <powf+0xe0>
 8019a3e:	b003      	add	sp, #12
 8019a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a44:	f7ff bd60 	b.w	8019508 <__math_divzerof>
 8019a48:	2000      	movs	r0, #0
 8019a4a:	e7f5      	b.n	8019a38 <powf+0x148>
 8019a4c:	2c00      	cmp	r4, #0
 8019a4e:	dabf      	bge.n	80199d0 <powf+0xe0>
 8019a50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a54:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019a58:	e7ba      	b.n	80199d0 <powf+0xe0>
 8019a5a:	2900      	cmp	r1, #0
 8019a5c:	da1f      	bge.n	8019a9e <powf+0x1ae>
 8019a5e:	ee10 0a90 	vmov	r0, s1
 8019a62:	f7ff ff2d 	bl	80198c0 <checkint>
 8019a66:	b920      	cbnz	r0, 8019a72 <powf+0x182>
 8019a68:	b003      	add	sp, #12
 8019a6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a6e:	f7ff bd5b 	b.w	8019528 <__math_invalidf>
 8019a72:	2801      	cmp	r0, #1
 8019a74:	bf14      	ite	ne
 8019a76:	2000      	movne	r0, #0
 8019a78:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8019a7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019a80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8019a84:	f4bf af48 	bcs.w	8019918 <powf+0x28>
 8019a88:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8019ba4 <powf+0x2b4>
 8019a8c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019a90:	ee10 3a10 	vmov	r3, s0
 8019a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a98:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8019a9c:	e73c      	b.n	8019918 <powf+0x28>
 8019a9e:	2000      	movs	r0, #0
 8019aa0:	e7ee      	b.n	8019a80 <powf+0x190>
 8019aa2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8019b88 <powf+0x298>
 8019aa6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019aae:	dd10      	ble.n	8019ad2 <powf+0x1e2>
 8019ab0:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8019ab4:	2800      	cmp	r0, #0
 8019ab6:	d158      	bne.n	8019b6a <powf+0x27a>
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	eddd 7a00 	vldr	s15, [sp]
 8019abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ac2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019ac6:	eef4 7a47 	vcmp.f32	s15, s14
 8019aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ace:	f47f af6e 	bne.w	80199ae <powf+0xbe>
 8019ad2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8019b90 <powf+0x2a0>
 8019ad6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ade:	d804      	bhi.n	8019aea <powf+0x1fa>
 8019ae0:	b003      	add	sp, #12
 8019ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ae6:	f7ff bcfd 	b.w	80194e4 <__math_uflowf>
 8019aea:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8019b98 <powf+0x2a8>
 8019aee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8019af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019af6:	d504      	bpl.n	8019b02 <powf+0x212>
 8019af8:	b003      	add	sp, #12
 8019afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019afe:	f7ff bcf7 	b.w	80194f0 <__math_may_uflowf>
 8019b02:	4b29      	ldr	r3, [pc, #164]	; (8019ba8 <powf+0x2b8>)
 8019b04:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 8019b08:	ee30 6b07 	vadd.f64	d6, d0, d7
 8019b0c:	ee16 2a10 	vmov	r2, s12
 8019b10:	ee36 7b47 	vsub.f64	d7, d6, d7
 8019b14:	f002 011f 	and.w	r1, r2, #31
 8019b18:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019b1c:	ee30 7b47 	vsub.f64	d7, d0, d7
 8019b20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019b24:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8019b28:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019b2c:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8019b30:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8019b34:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019b38:	686d      	ldr	r5, [r5, #4]
 8019b3a:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8019b3e:	1882      	adds	r2, r0, r2
 8019b40:	2300      	movs	r3, #0
 8019b42:	1918      	adds	r0, r3, r4
 8019b44:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019b48:	eea7 0b05 	vfma.f64	d0, d7, d5
 8019b4c:	ec41 0b17 	vmov	d7, r0, r1
 8019b50:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019b54:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019b58:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019b5c:	e738      	b.n	80199d0 <powf+0xe0>
 8019b5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019b62:	e735      	b.n	80199d0 <powf+0xe0>
 8019b64:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8019bac <powf+0x2bc>
 8019b68:	e732      	b.n	80199d0 <powf+0xe0>
 8019b6a:	9301      	str	r3, [sp, #4]
 8019b6c:	eddd 7a01 	vldr	s15, [sp, #4]
 8019b70:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b78:	e7a5      	b.n	8019ac6 <powf+0x1d6>
 8019b7a:	bf00      	nop
 8019b7c:	f3af 8000 	nop.w
 8019b80:	ffd1d571 	.word	0xffd1d571
 8019b84:	405fffff 	.word	0x405fffff
 8019b88:	ffa3aae2 	.word	0xffa3aae2
 8019b8c:	405fffff 	.word	0x405fffff
 8019b90:	00000000 	.word	0x00000000
 8019b94:	c062c000 	.word	0xc062c000
 8019b98:	00000000 	.word	0x00000000
 8019b9c:	c062a000 	.word	0xc062a000
 8019ba0:	080333e8 	.word	0x080333e8
 8019ba4:	4b000000 	.word	0x4b000000
 8019ba8:	08033058 	.word	0x08033058
 8019bac:	00000000 	.word	0x00000000

08019bb0 <tanf>:
 8019bb0:	ee10 3a10 	vmov	r3, s0
 8019bb4:	b507      	push	{r0, r1, r2, lr}
 8019bb6:	4a12      	ldr	r2, [pc, #72]	; (8019c00 <tanf+0x50>)
 8019bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019bbc:	4293      	cmp	r3, r2
 8019bbe:	dc07      	bgt.n	8019bd0 <tanf+0x20>
 8019bc0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019c04 <tanf+0x54>
 8019bc4:	2001      	movs	r0, #1
 8019bc6:	b003      	add	sp, #12
 8019bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019bcc:	f001 b916 	b.w	801adfc <__kernel_tanf>
 8019bd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019bd4:	db04      	blt.n	8019be0 <tanf+0x30>
 8019bd6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019bda:	b003      	add	sp, #12
 8019bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019be0:	4668      	mov	r0, sp
 8019be2:	f000 f9a9 	bl	8019f38 <__ieee754_rem_pio2f>
 8019be6:	0040      	lsls	r0, r0, #1
 8019be8:	f000 0002 	and.w	r0, r0, #2
 8019bec:	eddd 0a01 	vldr	s1, [sp, #4]
 8019bf0:	ed9d 0a00 	vldr	s0, [sp]
 8019bf4:	f1c0 0001 	rsb	r0, r0, #1
 8019bf8:	f001 f900 	bl	801adfc <__kernel_tanf>
 8019bfc:	e7ed      	b.n	8019bda <tanf+0x2a>
 8019bfe:	bf00      	nop
 8019c00:	3f490fda 	.word	0x3f490fda
 8019c04:	00000000 	.word	0x00000000

08019c08 <tanhf>:
 8019c08:	b510      	push	{r4, lr}
 8019c0a:	ee10 4a10 	vmov	r4, s0
 8019c0e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019c12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019c16:	ed2d 8b02 	vpush	{d8}
 8019c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8019c1e:	db0c      	blt.n	8019c3a <tanhf+0x32>
 8019c20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019c24:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8019c28:	2c00      	cmp	r4, #0
 8019c2a:	bfac      	ite	ge
 8019c2c:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8019c30:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8019c34:	ecbd 8b02 	vpop	{d8}
 8019c38:	bd10      	pop	{r4, pc}
 8019c3a:	4a1b      	ldr	r2, [pc, #108]	; (8019ca8 <tanhf+0xa0>)
 8019c3c:	4293      	cmp	r3, r2
 8019c3e:	dc30      	bgt.n	8019ca2 <tanhf+0x9a>
 8019c40:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8019c44:	da06      	bge.n	8019c54 <tanhf+0x4c>
 8019c46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019c4a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019c4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019c52:	e7ef      	b.n	8019c34 <tanhf+0x2c>
 8019c54:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019c58:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8019c5c:	db12      	blt.n	8019c84 <tanhf+0x7c>
 8019c5e:	f7ff fd1b 	bl	8019698 <fabsf>
 8019c62:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c66:	f001 fab1 	bl	801b1cc <expm1f>
 8019c6a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8019c6e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8019c72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019c76:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019c7a:	2c00      	cmp	r4, #0
 8019c7c:	bfb8      	it	lt
 8019c7e:	eeb1 0a40 	vneglt.f32	s0, s0
 8019c82:	e7d7      	b.n	8019c34 <tanhf+0x2c>
 8019c84:	f7ff fd08 	bl	8019698 <fabsf>
 8019c88:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8019c8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019c90:	f001 fa9c 	bl	801b1cc <expm1f>
 8019c94:	ee70 7a08 	vadd.f32	s15, s0, s16
 8019c98:	eeb1 7a40 	vneg.f32	s14, s0
 8019c9c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019ca0:	e7eb      	b.n	8019c7a <tanhf+0x72>
 8019ca2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019ca6:	e7e8      	b.n	8019c7a <tanhf+0x72>
 8019ca8:	41afffff 	.word	0x41afffff
 8019cac:	00000000 	.word	0x00000000

08019cb0 <__ieee754_rem_pio2>:
 8019cb0:	b570      	push	{r4, r5, r6, lr}
 8019cb2:	eeb0 7b40 	vmov.f64	d7, d0
 8019cb6:	ee17 5a90 	vmov	r5, s15
 8019cba:	4b99      	ldr	r3, [pc, #612]	; (8019f20 <__ieee754_rem_pio2+0x270>)
 8019cbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019cc0:	429e      	cmp	r6, r3
 8019cc2:	b088      	sub	sp, #32
 8019cc4:	4604      	mov	r4, r0
 8019cc6:	dc07      	bgt.n	8019cd8 <__ieee754_rem_pio2+0x28>
 8019cc8:	2200      	movs	r2, #0
 8019cca:	2300      	movs	r3, #0
 8019ccc:	ed84 0b00 	vstr	d0, [r4]
 8019cd0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	e01b      	b.n	8019d10 <__ieee754_rem_pio2+0x60>
 8019cd8:	4b92      	ldr	r3, [pc, #584]	; (8019f24 <__ieee754_rem_pio2+0x274>)
 8019cda:	429e      	cmp	r6, r3
 8019cdc:	dc3b      	bgt.n	8019d56 <__ieee754_rem_pio2+0xa6>
 8019cde:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8019ce2:	2d00      	cmp	r5, #0
 8019ce4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8019ee0 <__ieee754_rem_pio2+0x230>
 8019ce8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8019cec:	dd19      	ble.n	8019d22 <__ieee754_rem_pio2+0x72>
 8019cee:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019cf2:	429e      	cmp	r6, r3
 8019cf4:	d00e      	beq.n	8019d14 <__ieee754_rem_pio2+0x64>
 8019cf6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8019ee8 <__ieee754_rem_pio2+0x238>
 8019cfa:	ee37 5b46 	vsub.f64	d5, d7, d6
 8019cfe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019d02:	ed84 5b00 	vstr	d5, [r4]
 8019d06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019d0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8019d0e:	2001      	movs	r0, #1
 8019d10:	b008      	add	sp, #32
 8019d12:	bd70      	pop	{r4, r5, r6, pc}
 8019d14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019ef0 <__ieee754_rem_pio2+0x240>
 8019d18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019d1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019ef8 <__ieee754_rem_pio2+0x248>
 8019d20:	e7eb      	b.n	8019cfa <__ieee754_rem_pio2+0x4a>
 8019d22:	429e      	cmp	r6, r3
 8019d24:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019d28:	d00e      	beq.n	8019d48 <__ieee754_rem_pio2+0x98>
 8019d2a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8019ee8 <__ieee754_rem_pio2+0x238>
 8019d2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019d32:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019d36:	ed84 5b00 	vstr	d5, [r4]
 8019d3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d42:	ed84 7b02 	vstr	d7, [r4, #8]
 8019d46:	e7e3      	b.n	8019d10 <__ieee754_rem_pio2+0x60>
 8019d48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019ef0 <__ieee754_rem_pio2+0x240>
 8019d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019d50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019ef8 <__ieee754_rem_pio2+0x248>
 8019d54:	e7eb      	b.n	8019d2e <__ieee754_rem_pio2+0x7e>
 8019d56:	4b74      	ldr	r3, [pc, #464]	; (8019f28 <__ieee754_rem_pio2+0x278>)
 8019d58:	429e      	cmp	r6, r3
 8019d5a:	dc70      	bgt.n	8019e3e <__ieee754_rem_pio2+0x18e>
 8019d5c:	f001 f92e 	bl	801afbc <fabs>
 8019d60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019d64:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019f00 <__ieee754_rem_pio2+0x250>
 8019d68:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019d6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019d70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019d74:	ee17 0a90 	vmov	r0, s15
 8019d78:	eeb1 4b45 	vneg.f64	d4, d5
 8019d7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019ee0 <__ieee754_rem_pio2+0x230>
 8019d80:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019d84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019ee8 <__ieee754_rem_pio2+0x238>
 8019d88:	281f      	cmp	r0, #31
 8019d8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019d8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019d92:	dc08      	bgt.n	8019da6 <__ieee754_rem_pio2+0xf6>
 8019d94:	4b65      	ldr	r3, [pc, #404]	; (8019f2c <__ieee754_rem_pio2+0x27c>)
 8019d96:	1e42      	subs	r2, r0, #1
 8019d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d9c:	42b3      	cmp	r3, r6
 8019d9e:	d002      	beq.n	8019da6 <__ieee754_rem_pio2+0xf6>
 8019da0:	ed84 6b00 	vstr	d6, [r4]
 8019da4:	e026      	b.n	8019df4 <__ieee754_rem_pio2+0x144>
 8019da6:	ee16 3a90 	vmov	r3, s13
 8019daa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019dae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019db2:	2b10      	cmp	r3, #16
 8019db4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019db8:	ddf2      	ble.n	8019da0 <__ieee754_rem_pio2+0xf0>
 8019dba:	eeb0 6b40 	vmov.f64	d6, d0
 8019dbe:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8019ef0 <__ieee754_rem_pio2+0x240>
 8019dc2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8019ef8 <__ieee754_rem_pio2+0x248>
 8019dc6:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019dca:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019dce:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019dd2:	eeb0 7b40 	vmov.f64	d7, d0
 8019dd6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019dda:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019dde:	ee13 3a90 	vmov	r3, s7
 8019de2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019de6:	1ad3      	subs	r3, r2, r3
 8019de8:	2b31      	cmp	r3, #49	; 0x31
 8019dea:	dc17      	bgt.n	8019e1c <__ieee754_rem_pio2+0x16c>
 8019dec:	eeb0 0b46 	vmov.f64	d0, d6
 8019df0:	ed84 3b00 	vstr	d3, [r4]
 8019df4:	ed94 6b00 	vldr	d6, [r4]
 8019df8:	2d00      	cmp	r5, #0
 8019dfa:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019dfe:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019e02:	ed84 0b02 	vstr	d0, [r4, #8]
 8019e06:	da83      	bge.n	8019d10 <__ieee754_rem_pio2+0x60>
 8019e08:	eeb1 6b46 	vneg.f64	d6, d6
 8019e0c:	eeb1 0b40 	vneg.f64	d0, d0
 8019e10:	ed84 6b00 	vstr	d6, [r4]
 8019e14:	ed84 0b02 	vstr	d0, [r4, #8]
 8019e18:	4240      	negs	r0, r0
 8019e1a:	e779      	b.n	8019d10 <__ieee754_rem_pio2+0x60>
 8019e1c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8019f08 <__ieee754_rem_pio2+0x258>
 8019e20:	eeb0 0b46 	vmov.f64	d0, d6
 8019e24:	eea4 0b03 	vfma.f64	d0, d4, d3
 8019e28:	ee36 7b40 	vsub.f64	d7, d6, d0
 8019e2c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8019f10 <__ieee754_rem_pio2+0x260>
 8019e30:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019e34:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8019e38:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019e3c:	e7b0      	b.n	8019da0 <__ieee754_rem_pio2+0xf0>
 8019e3e:	4b3c      	ldr	r3, [pc, #240]	; (8019f30 <__ieee754_rem_pio2+0x280>)
 8019e40:	429e      	cmp	r6, r3
 8019e42:	dd06      	ble.n	8019e52 <__ieee754_rem_pio2+0x1a2>
 8019e44:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019e48:	ed80 7b02 	vstr	d7, [r0, #8]
 8019e4c:	ed80 7b00 	vstr	d7, [r0]
 8019e50:	e740      	b.n	8019cd4 <__ieee754_rem_pio2+0x24>
 8019e52:	1532      	asrs	r2, r6, #20
 8019e54:	ee10 0a10 	vmov	r0, s0
 8019e58:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8019e5c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019e60:	ec41 0b17 	vmov	d7, r0, r1
 8019e64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019e68:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8019f18 <__ieee754_rem_pio2+0x268>
 8019e6c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019e70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019e74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019e78:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019e7c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019e80:	a902      	add	r1, sp, #8
 8019e82:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019e86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019e8a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019e8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019e92:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019e96:	2603      	movs	r6, #3
 8019e98:	4608      	mov	r0, r1
 8019e9a:	ed91 7b04 	vldr	d7, [r1, #16]
 8019e9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea6:	4633      	mov	r3, r6
 8019ea8:	f1a1 0108 	sub.w	r1, r1, #8
 8019eac:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8019eb0:	d0f3      	beq.n	8019e9a <__ieee754_rem_pio2+0x1ea>
 8019eb2:	4920      	ldr	r1, [pc, #128]	; (8019f34 <__ieee754_rem_pio2+0x284>)
 8019eb4:	9101      	str	r1, [sp, #4]
 8019eb6:	2102      	movs	r1, #2
 8019eb8:	9100      	str	r1, [sp, #0]
 8019eba:	4621      	mov	r1, r4
 8019ebc:	f000 f978 	bl	801a1b0 <__kernel_rem_pio2>
 8019ec0:	2d00      	cmp	r5, #0
 8019ec2:	f6bf af25 	bge.w	8019d10 <__ieee754_rem_pio2+0x60>
 8019ec6:	ed94 7b00 	vldr	d7, [r4]
 8019eca:	eeb1 7b47 	vneg.f64	d7, d7
 8019ece:	ed84 7b00 	vstr	d7, [r4]
 8019ed2:	ed94 7b02 	vldr	d7, [r4, #8]
 8019ed6:	eeb1 7b47 	vneg.f64	d7, d7
 8019eda:	ed84 7b02 	vstr	d7, [r4, #8]
 8019ede:	e79b      	b.n	8019e18 <__ieee754_rem_pio2+0x168>
 8019ee0:	54400000 	.word	0x54400000
 8019ee4:	3ff921fb 	.word	0x3ff921fb
 8019ee8:	1a626331 	.word	0x1a626331
 8019eec:	3dd0b461 	.word	0x3dd0b461
 8019ef0:	1a600000 	.word	0x1a600000
 8019ef4:	3dd0b461 	.word	0x3dd0b461
 8019ef8:	2e037073 	.word	0x2e037073
 8019efc:	3ba3198a 	.word	0x3ba3198a
 8019f00:	6dc9c883 	.word	0x6dc9c883
 8019f04:	3fe45f30 	.word	0x3fe45f30
 8019f08:	2e000000 	.word	0x2e000000
 8019f0c:	3ba3198a 	.word	0x3ba3198a
 8019f10:	252049c1 	.word	0x252049c1
 8019f14:	397b839a 	.word	0x397b839a
 8019f18:	00000000 	.word	0x00000000
 8019f1c:	41700000 	.word	0x41700000
 8019f20:	3fe921fb 	.word	0x3fe921fb
 8019f24:	4002d97b 	.word	0x4002d97b
 8019f28:	413921fb 	.word	0x413921fb
 8019f2c:	08033510 	.word	0x08033510
 8019f30:	7fefffff 	.word	0x7fefffff
 8019f34:	08033590 	.word	0x08033590

08019f38 <__ieee754_rem_pio2f>:
 8019f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f3a:	ee10 6a10 	vmov	r6, s0
 8019f3e:	4b8e      	ldr	r3, [pc, #568]	; (801a178 <__ieee754_rem_pio2f+0x240>)
 8019f40:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019f44:	429d      	cmp	r5, r3
 8019f46:	b087      	sub	sp, #28
 8019f48:	eef0 7a40 	vmov.f32	s15, s0
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	dc05      	bgt.n	8019f5c <__ieee754_rem_pio2f+0x24>
 8019f50:	2300      	movs	r3, #0
 8019f52:	ed80 0a00 	vstr	s0, [r0]
 8019f56:	6043      	str	r3, [r0, #4]
 8019f58:	2000      	movs	r0, #0
 8019f5a:	e01a      	b.n	8019f92 <__ieee754_rem_pio2f+0x5a>
 8019f5c:	4b87      	ldr	r3, [pc, #540]	; (801a17c <__ieee754_rem_pio2f+0x244>)
 8019f5e:	429d      	cmp	r5, r3
 8019f60:	dc46      	bgt.n	8019ff0 <__ieee754_rem_pio2f+0xb8>
 8019f62:	2e00      	cmp	r6, #0
 8019f64:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801a180 <__ieee754_rem_pio2f+0x248>
 8019f68:	4b86      	ldr	r3, [pc, #536]	; (801a184 <__ieee754_rem_pio2f+0x24c>)
 8019f6a:	f025 050f 	bic.w	r5, r5, #15
 8019f6e:	dd1f      	ble.n	8019fb0 <__ieee754_rem_pio2f+0x78>
 8019f70:	429d      	cmp	r5, r3
 8019f72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019f76:	d00e      	beq.n	8019f96 <__ieee754_rem_pio2f+0x5e>
 8019f78:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801a188 <__ieee754_rem_pio2f+0x250>
 8019f7c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019f80:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019f84:	ed80 0a00 	vstr	s0, [r0]
 8019f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f8c:	2001      	movs	r0, #1
 8019f8e:	edc4 7a01 	vstr	s15, [r4, #4]
 8019f92:	b007      	add	sp, #28
 8019f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f96:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801a18c <__ieee754_rem_pio2f+0x254>
 8019f9a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801a190 <__ieee754_rem_pio2f+0x258>
 8019f9e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fa2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019fa6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019faa:	edc0 6a00 	vstr	s13, [r0]
 8019fae:	e7eb      	b.n	8019f88 <__ieee754_rem_pio2f+0x50>
 8019fb0:	429d      	cmp	r5, r3
 8019fb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019fb6:	d00e      	beq.n	8019fd6 <__ieee754_rem_pio2f+0x9e>
 8019fb8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801a188 <__ieee754_rem_pio2f+0x250>
 8019fbc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019fc0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fc4:	ed80 0a00 	vstr	s0, [r0]
 8019fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019fd0:	edc4 7a01 	vstr	s15, [r4, #4]
 8019fd4:	e7dd      	b.n	8019f92 <__ieee754_rem_pio2f+0x5a>
 8019fd6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801a18c <__ieee754_rem_pio2f+0x254>
 8019fda:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801a190 <__ieee754_rem_pio2f+0x258>
 8019fde:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019fe2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019fe6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019fea:	edc0 6a00 	vstr	s13, [r0]
 8019fee:	e7eb      	b.n	8019fc8 <__ieee754_rem_pio2f+0x90>
 8019ff0:	4b68      	ldr	r3, [pc, #416]	; (801a194 <__ieee754_rem_pio2f+0x25c>)
 8019ff2:	429d      	cmp	r5, r3
 8019ff4:	dc72      	bgt.n	801a0dc <__ieee754_rem_pio2f+0x1a4>
 8019ff6:	f7ff fb4f 	bl	8019698 <fabsf>
 8019ffa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a198 <__ieee754_rem_pio2f+0x260>
 8019ffe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a002:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a00a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a00e:	ee17 0a90 	vmov	r0, s15
 801a012:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a180 <__ieee754_rem_pio2f+0x248>
 801a016:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a01a:	281f      	cmp	r0, #31
 801a01c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a188 <__ieee754_rem_pio2f+0x250>
 801a020:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a024:	eeb1 6a47 	vneg.f32	s12, s14
 801a028:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a02c:	ee16 2a90 	vmov	r2, s13
 801a030:	dc1c      	bgt.n	801a06c <__ieee754_rem_pio2f+0x134>
 801a032:	495a      	ldr	r1, [pc, #360]	; (801a19c <__ieee754_rem_pio2f+0x264>)
 801a034:	1e47      	subs	r7, r0, #1
 801a036:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a03a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a03e:	428b      	cmp	r3, r1
 801a040:	d014      	beq.n	801a06c <__ieee754_rem_pio2f+0x134>
 801a042:	6022      	str	r2, [r4, #0]
 801a044:	ed94 7a00 	vldr	s14, [r4]
 801a048:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a04c:	2e00      	cmp	r6, #0
 801a04e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a052:	ed84 0a01 	vstr	s0, [r4, #4]
 801a056:	da9c      	bge.n	8019f92 <__ieee754_rem_pio2f+0x5a>
 801a058:	eeb1 7a47 	vneg.f32	s14, s14
 801a05c:	eeb1 0a40 	vneg.f32	s0, s0
 801a060:	ed84 7a00 	vstr	s14, [r4]
 801a064:	ed84 0a01 	vstr	s0, [r4, #4]
 801a068:	4240      	negs	r0, r0
 801a06a:	e792      	b.n	8019f92 <__ieee754_rem_pio2f+0x5a>
 801a06c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a070:	15eb      	asrs	r3, r5, #23
 801a072:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801a076:	2d08      	cmp	r5, #8
 801a078:	dde3      	ble.n	801a042 <__ieee754_rem_pio2f+0x10a>
 801a07a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801a18c <__ieee754_rem_pio2f+0x254>
 801a07e:	eddf 5a44 	vldr	s11, [pc, #272]	; 801a190 <__ieee754_rem_pio2f+0x258>
 801a082:	eef0 6a40 	vmov.f32	s13, s0
 801a086:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a08a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a08e:	eea6 0a27 	vfma.f32	s0, s12, s15
 801a092:	eef0 7a40 	vmov.f32	s15, s0
 801a096:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a09a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a09e:	ee15 2a90 	vmov	r2, s11
 801a0a2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a0a6:	1a5b      	subs	r3, r3, r1
 801a0a8:	2b19      	cmp	r3, #25
 801a0aa:	dc04      	bgt.n	801a0b6 <__ieee754_rem_pio2f+0x17e>
 801a0ac:	edc4 5a00 	vstr	s11, [r4]
 801a0b0:	eeb0 0a66 	vmov.f32	s0, s13
 801a0b4:	e7c6      	b.n	801a044 <__ieee754_rem_pio2f+0x10c>
 801a0b6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a1a0 <__ieee754_rem_pio2f+0x268>
 801a0ba:	eeb0 0a66 	vmov.f32	s0, s13
 801a0be:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a0c2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a0c6:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a1a4 <__ieee754_rem_pio2f+0x26c>
 801a0ca:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a0ce:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a0d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a0d6:	ed84 7a00 	vstr	s14, [r4]
 801a0da:	e7b3      	b.n	801a044 <__ieee754_rem_pio2f+0x10c>
 801a0dc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a0e0:	db06      	blt.n	801a0f0 <__ieee754_rem_pio2f+0x1b8>
 801a0e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a0e6:	edc0 7a01 	vstr	s15, [r0, #4]
 801a0ea:	edc0 7a00 	vstr	s15, [r0]
 801a0ee:	e733      	b.n	8019f58 <__ieee754_rem_pio2f+0x20>
 801a0f0:	15ea      	asrs	r2, r5, #23
 801a0f2:	3a86      	subs	r2, #134	; 0x86
 801a0f4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a0f8:	ee07 3a90 	vmov	s15, r3
 801a0fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a100:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a1a8 <__ieee754_rem_pio2f+0x270>
 801a104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a10c:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a114:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a118:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a11c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a120:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a124:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a128:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a130:	edcd 7a05 	vstr	s15, [sp, #20]
 801a134:	d11e      	bne.n	801a174 <__ieee754_rem_pio2f+0x23c>
 801a136:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a13e:	bf14      	ite	ne
 801a140:	2302      	movne	r3, #2
 801a142:	2301      	moveq	r3, #1
 801a144:	4919      	ldr	r1, [pc, #100]	; (801a1ac <__ieee754_rem_pio2f+0x274>)
 801a146:	9101      	str	r1, [sp, #4]
 801a148:	2102      	movs	r1, #2
 801a14a:	9100      	str	r1, [sp, #0]
 801a14c:	a803      	add	r0, sp, #12
 801a14e:	4621      	mov	r1, r4
 801a150:	f000 fbde 	bl	801a910 <__kernel_rem_pio2f>
 801a154:	2e00      	cmp	r6, #0
 801a156:	f6bf af1c 	bge.w	8019f92 <__ieee754_rem_pio2f+0x5a>
 801a15a:	edd4 7a00 	vldr	s15, [r4]
 801a15e:	eef1 7a67 	vneg.f32	s15, s15
 801a162:	edc4 7a00 	vstr	s15, [r4]
 801a166:	edd4 7a01 	vldr	s15, [r4, #4]
 801a16a:	eef1 7a67 	vneg.f32	s15, s15
 801a16e:	edc4 7a01 	vstr	s15, [r4, #4]
 801a172:	e779      	b.n	801a068 <__ieee754_rem_pio2f+0x130>
 801a174:	2303      	movs	r3, #3
 801a176:	e7e5      	b.n	801a144 <__ieee754_rem_pio2f+0x20c>
 801a178:	3f490fd8 	.word	0x3f490fd8
 801a17c:	4016cbe3 	.word	0x4016cbe3
 801a180:	3fc90f80 	.word	0x3fc90f80
 801a184:	3fc90fd0 	.word	0x3fc90fd0
 801a188:	37354443 	.word	0x37354443
 801a18c:	37354400 	.word	0x37354400
 801a190:	2e85a308 	.word	0x2e85a308
 801a194:	43490f80 	.word	0x43490f80
 801a198:	3f22f984 	.word	0x3f22f984
 801a19c:	08033698 	.word	0x08033698
 801a1a0:	2e85a300 	.word	0x2e85a300
 801a1a4:	248d3132 	.word	0x248d3132
 801a1a8:	43800000 	.word	0x43800000
 801a1ac:	08033718 	.word	0x08033718

0801a1b0 <__kernel_rem_pio2>:
 801a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1b4:	ed2d 8b06 	vpush	{d8-d10}
 801a1b8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801a1bc:	460f      	mov	r7, r1
 801a1be:	9002      	str	r0, [sp, #8]
 801a1c0:	49c5      	ldr	r1, [pc, #788]	; (801a4d8 <__kernel_rem_pio2+0x328>)
 801a1c2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801a1c4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801a1c8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801a1cc:	9301      	str	r3, [sp, #4]
 801a1ce:	f112 0f14 	cmn.w	r2, #20
 801a1d2:	bfa8      	it	ge
 801a1d4:	2018      	movge	r0, #24
 801a1d6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801a1da:	bfb8      	it	lt
 801a1dc:	2000      	movlt	r0, #0
 801a1de:	f06f 0417 	mvn.w	r4, #23
 801a1e2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801a4c0 <__kernel_rem_pio2+0x310>
 801a1e6:	bfa4      	itt	ge
 801a1e8:	f1a2 0a03 	subge.w	sl, r2, #3
 801a1ec:	fb9a f0f0 	sdivge	r0, sl, r0
 801a1f0:	fb00 4404 	mla	r4, r0, r4, r4
 801a1f4:	1a46      	subs	r6, r0, r1
 801a1f6:	4414      	add	r4, r2
 801a1f8:	eb09 0c01 	add.w	ip, r9, r1
 801a1fc:	ad1a      	add	r5, sp, #104	; 0x68
 801a1fe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801a202:	2200      	movs	r2, #0
 801a204:	4562      	cmp	r2, ip
 801a206:	dd10      	ble.n	801a22a <__kernel_rem_pio2+0x7a>
 801a208:	9a01      	ldr	r2, [sp, #4]
 801a20a:	ab1a      	add	r3, sp, #104	; 0x68
 801a20c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a210:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801a214:	f04f 0c00 	mov.w	ip, #0
 801a218:	45cc      	cmp	ip, r9
 801a21a:	dc26      	bgt.n	801a26a <__kernel_rem_pio2+0xba>
 801a21c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801a4c0 <__kernel_rem_pio2+0x310>
 801a220:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801a224:	4616      	mov	r6, r2
 801a226:	2500      	movs	r5, #0
 801a228:	e015      	b.n	801a256 <__kernel_rem_pio2+0xa6>
 801a22a:	42d6      	cmn	r6, r2
 801a22c:	d409      	bmi.n	801a242 <__kernel_rem_pio2+0x92>
 801a22e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801a232:	ee07 3a90 	vmov	s15, r3
 801a236:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a23a:	eca5 7b02 	vstmia	r5!, {d7}
 801a23e:	3201      	adds	r2, #1
 801a240:	e7e0      	b.n	801a204 <__kernel_rem_pio2+0x54>
 801a242:	eeb0 7b46 	vmov.f64	d7, d6
 801a246:	e7f8      	b.n	801a23a <__kernel_rem_pio2+0x8a>
 801a248:	ecb8 5b02 	vldmia	r8!, {d5}
 801a24c:	ed96 6b00 	vldr	d6, [r6]
 801a250:	3501      	adds	r5, #1
 801a252:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a256:	428d      	cmp	r5, r1
 801a258:	f1a6 0608 	sub.w	r6, r6, #8
 801a25c:	ddf4      	ble.n	801a248 <__kernel_rem_pio2+0x98>
 801a25e:	ecaa 7b02 	vstmia	sl!, {d7}
 801a262:	f10c 0c01 	add.w	ip, ip, #1
 801a266:	3208      	adds	r2, #8
 801a268:	e7d6      	b.n	801a218 <__kernel_rem_pio2+0x68>
 801a26a:	ab06      	add	r3, sp, #24
 801a26c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801a4c8 <__kernel_rem_pio2+0x318>
 801a270:	ed9f ab97 	vldr	d10, [pc, #604]	; 801a4d0 <__kernel_rem_pio2+0x320>
 801a274:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801a278:	9303      	str	r3, [sp, #12]
 801a27a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801a27e:	464d      	mov	r5, r9
 801a280:	00eb      	lsls	r3, r5, #3
 801a282:	9304      	str	r3, [sp, #16]
 801a284:	ab92      	add	r3, sp, #584	; 0x248
 801a286:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a28a:	f10d 0b18 	add.w	fp, sp, #24
 801a28e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801a290:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801a294:	465e      	mov	r6, fp
 801a296:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a29a:	4628      	mov	r0, r5
 801a29c:	2800      	cmp	r0, #0
 801a29e:	f1a2 0208 	sub.w	r2, r2, #8
 801a2a2:	dc4c      	bgt.n	801a33e <__kernel_rem_pio2+0x18e>
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	9105      	str	r1, [sp, #20]
 801a2a8:	f000 ff06 	bl	801b0b8 <scalbn>
 801a2ac:	eeb0 8b40 	vmov.f64	d8, d0
 801a2b0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801a2b4:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a2b8:	f000 fe8a 	bl	801afd0 <floor>
 801a2bc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801a2c0:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a2c4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a2c8:	2c00      	cmp	r4, #0
 801a2ca:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801a2ce:	ee17 8a90 	vmov	r8, s15
 801a2d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a2d6:	9905      	ldr	r1, [sp, #20]
 801a2d8:	dd43      	ble.n	801a362 <__kernel_rem_pio2+0x1b2>
 801a2da:	1e68      	subs	r0, r5, #1
 801a2dc:	ab06      	add	r3, sp, #24
 801a2de:	f1c4 0c18 	rsb	ip, r4, #24
 801a2e2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801a2e6:	fa46 f20c 	asr.w	r2, r6, ip
 801a2ea:	4490      	add	r8, r2
 801a2ec:	fa02 f20c 	lsl.w	r2, r2, ip
 801a2f0:	1ab6      	subs	r6, r6, r2
 801a2f2:	f1c4 0217 	rsb	r2, r4, #23
 801a2f6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801a2fa:	4116      	asrs	r6, r2
 801a2fc:	2e00      	cmp	r6, #0
 801a2fe:	dd3f      	ble.n	801a380 <__kernel_rem_pio2+0x1d0>
 801a300:	f04f 0c00 	mov.w	ip, #0
 801a304:	f108 0801 	add.w	r8, r8, #1
 801a308:	4660      	mov	r0, ip
 801a30a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801a30e:	4565      	cmp	r5, ip
 801a310:	dc6e      	bgt.n	801a3f0 <__kernel_rem_pio2+0x240>
 801a312:	2c00      	cmp	r4, #0
 801a314:	dd04      	ble.n	801a320 <__kernel_rem_pio2+0x170>
 801a316:	2c01      	cmp	r4, #1
 801a318:	d07f      	beq.n	801a41a <__kernel_rem_pio2+0x26a>
 801a31a:	2c02      	cmp	r4, #2
 801a31c:	f000 8087 	beq.w	801a42e <__kernel_rem_pio2+0x27e>
 801a320:	2e02      	cmp	r6, #2
 801a322:	d12d      	bne.n	801a380 <__kernel_rem_pio2+0x1d0>
 801a324:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a328:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a32c:	b340      	cbz	r0, 801a380 <__kernel_rem_pio2+0x1d0>
 801a32e:	4620      	mov	r0, r4
 801a330:	9105      	str	r1, [sp, #20]
 801a332:	f000 fec1 	bl	801b0b8 <scalbn>
 801a336:	9905      	ldr	r1, [sp, #20]
 801a338:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a33c:	e020      	b.n	801a380 <__kernel_rem_pio2+0x1d0>
 801a33e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a342:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a346:	3801      	subs	r0, #1
 801a348:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a34c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a350:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a354:	eca6 0a01 	vstmia	r6!, {s0}
 801a358:	ed92 0b00 	vldr	d0, [r2]
 801a35c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a360:	e79c      	b.n	801a29c <__kernel_rem_pio2+0xec>
 801a362:	d105      	bne.n	801a370 <__kernel_rem_pio2+0x1c0>
 801a364:	1e6a      	subs	r2, r5, #1
 801a366:	ab06      	add	r3, sp, #24
 801a368:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a36c:	15f6      	asrs	r6, r6, #23
 801a36e:	e7c5      	b.n	801a2fc <__kernel_rem_pio2+0x14c>
 801a370:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a374:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37c:	da36      	bge.n	801a3ec <__kernel_rem_pio2+0x23c>
 801a37e:	2600      	movs	r6, #0
 801a380:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a388:	f040 80aa 	bne.w	801a4e0 <__kernel_rem_pio2+0x330>
 801a38c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801a390:	4658      	mov	r0, fp
 801a392:	2200      	movs	r2, #0
 801a394:	4548      	cmp	r0, r9
 801a396:	da52      	bge.n	801a43e <__kernel_rem_pio2+0x28e>
 801a398:	2a00      	cmp	r2, #0
 801a39a:	f000 8081 	beq.w	801a4a0 <__kernel_rem_pio2+0x2f0>
 801a39e:	ab06      	add	r3, sp, #24
 801a3a0:	3c18      	subs	r4, #24
 801a3a2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a3a6:	2b00      	cmp	r3, #0
 801a3a8:	f000 8087 	beq.w	801a4ba <__kernel_rem_pio2+0x30a>
 801a3ac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	f000 fe81 	bl	801b0b8 <scalbn>
 801a3b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801a3ba:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801a4c8 <__kernel_rem_pio2+0x318>
 801a3be:	a96a      	add	r1, sp, #424	; 0x1a8
 801a3c0:	f103 0208 	add.w	r2, r3, #8
 801a3c4:	1888      	adds	r0, r1, r2
 801a3c6:	4659      	mov	r1, fp
 801a3c8:	2900      	cmp	r1, #0
 801a3ca:	f280 80b7 	bge.w	801a53c <__kernel_rem_pio2+0x38c>
 801a3ce:	4659      	mov	r1, fp
 801a3d0:	2900      	cmp	r1, #0
 801a3d2:	f2c0 80d5 	blt.w	801a580 <__kernel_rem_pio2+0x3d0>
 801a3d6:	a86a      	add	r0, sp, #424	; 0x1a8
 801a3d8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801a3dc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801a4c0 <__kernel_rem_pio2+0x310>
 801a3e0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801a4dc <__kernel_rem_pio2+0x32c>
 801a3e4:	2400      	movs	r4, #0
 801a3e6:	ebab 0001 	sub.w	r0, fp, r1
 801a3ea:	e0be      	b.n	801a56a <__kernel_rem_pio2+0x3ba>
 801a3ec:	2602      	movs	r6, #2
 801a3ee:	e787      	b.n	801a300 <__kernel_rem_pio2+0x150>
 801a3f0:	f8db 2000 	ldr.w	r2, [fp]
 801a3f4:	b958      	cbnz	r0, 801a40e <__kernel_rem_pio2+0x25e>
 801a3f6:	b122      	cbz	r2, 801a402 <__kernel_rem_pio2+0x252>
 801a3f8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a3fc:	f8cb 2000 	str.w	r2, [fp]
 801a400:	2201      	movs	r2, #1
 801a402:	f10c 0c01 	add.w	ip, ip, #1
 801a406:	f10b 0b04 	add.w	fp, fp, #4
 801a40a:	4610      	mov	r0, r2
 801a40c:	e77f      	b.n	801a30e <__kernel_rem_pio2+0x15e>
 801a40e:	ebae 0202 	sub.w	r2, lr, r2
 801a412:	f8cb 2000 	str.w	r2, [fp]
 801a416:	4602      	mov	r2, r0
 801a418:	e7f3      	b.n	801a402 <__kernel_rem_pio2+0x252>
 801a41a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a41e:	ab06      	add	r3, sp, #24
 801a420:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a424:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a428:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a42c:	e778      	b.n	801a320 <__kernel_rem_pio2+0x170>
 801a42e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a432:	ab06      	add	r3, sp, #24
 801a434:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a438:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a43c:	e7f4      	b.n	801a428 <__kernel_rem_pio2+0x278>
 801a43e:	ab06      	add	r3, sp, #24
 801a440:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a444:	3801      	subs	r0, #1
 801a446:	431a      	orrs	r2, r3
 801a448:	e7a4      	b.n	801a394 <__kernel_rem_pio2+0x1e4>
 801a44a:	f10c 0c01 	add.w	ip, ip, #1
 801a44e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801a452:	2800      	cmp	r0, #0
 801a454:	d0f9      	beq.n	801a44a <__kernel_rem_pio2+0x29a>
 801a456:	9b04      	ldr	r3, [sp, #16]
 801a458:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a45c:	eb0d 0203 	add.w	r2, sp, r3
 801a460:	9b01      	ldr	r3, [sp, #4]
 801a462:	18e8      	adds	r0, r5, r3
 801a464:	ab1a      	add	r3, sp, #104	; 0x68
 801a466:	1c6e      	adds	r6, r5, #1
 801a468:	3a98      	subs	r2, #152	; 0x98
 801a46a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801a46e:	4465      	add	r5, ip
 801a470:	42b5      	cmp	r5, r6
 801a472:	f6ff af05 	blt.w	801a280 <__kernel_rem_pio2+0xd0>
 801a476:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801a47a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a47e:	ee07 3a90 	vmov	s15, r3
 801a482:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a486:	f04f 0c00 	mov.w	ip, #0
 801a48a:	eca0 7b02 	vstmia	r0!, {d7}
 801a48e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801a4c0 <__kernel_rem_pio2+0x310>
 801a492:	4680      	mov	r8, r0
 801a494:	458c      	cmp	ip, r1
 801a496:	dd07      	ble.n	801a4a8 <__kernel_rem_pio2+0x2f8>
 801a498:	eca2 7b02 	vstmia	r2!, {d7}
 801a49c:	3601      	adds	r6, #1
 801a49e:	e7e7      	b.n	801a470 <__kernel_rem_pio2+0x2c0>
 801a4a0:	9a03      	ldr	r2, [sp, #12]
 801a4a2:	f04f 0c01 	mov.w	ip, #1
 801a4a6:	e7d2      	b.n	801a44e <__kernel_rem_pio2+0x29e>
 801a4a8:	ecbe 5b02 	vldmia	lr!, {d5}
 801a4ac:	ed38 6b02 	vldmdb	r8!, {d6}
 801a4b0:	f10c 0c01 	add.w	ip, ip, #1
 801a4b4:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a4b8:	e7ec      	b.n	801a494 <__kernel_rem_pio2+0x2e4>
 801a4ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a4be:	e76e      	b.n	801a39e <__kernel_rem_pio2+0x1ee>
	...
 801a4cc:	3e700000 	.word	0x3e700000
 801a4d0:	00000000 	.word	0x00000000
 801a4d4:	41700000 	.word	0x41700000
 801a4d8:	08033a70 	.word	0x08033a70
 801a4dc:	08033a30 	.word	0x08033a30
 801a4e0:	4260      	negs	r0, r4
 801a4e2:	eeb0 0b48 	vmov.f64	d0, d8
 801a4e6:	f000 fde7 	bl	801b0b8 <scalbn>
 801a4ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801a6c8 <__kernel_rem_pio2+0x518>
 801a4ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4f6:	db18      	blt.n	801a52a <__kernel_rem_pio2+0x37a>
 801a4f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801a6d0 <__kernel_rem_pio2+0x520>
 801a4fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a500:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a504:	aa06      	add	r2, sp, #24
 801a506:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a50a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a50e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a512:	f105 0b01 	add.w	fp, r5, #1
 801a516:	ee10 3a10 	vmov	r3, s0
 801a51a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a51e:	ee17 3a10 	vmov	r3, s14
 801a522:	3418      	adds	r4, #24
 801a524:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a528:	e740      	b.n	801a3ac <__kernel_rem_pio2+0x1fc>
 801a52a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a52e:	aa06      	add	r2, sp, #24
 801a530:	ee10 3a10 	vmov	r3, s0
 801a534:	46ab      	mov	fp, r5
 801a536:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a53a:	e737      	b.n	801a3ac <__kernel_rem_pio2+0x1fc>
 801a53c:	ac06      	add	r4, sp, #24
 801a53e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801a542:	9401      	str	r4, [sp, #4]
 801a544:	ee07 4a90 	vmov	s15, r4
 801a548:	3901      	subs	r1, #1
 801a54a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a54e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a552:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a556:	ed20 7b02 	vstmdb	r0!, {d7}
 801a55a:	e735      	b.n	801a3c8 <__kernel_rem_pio2+0x218>
 801a55c:	ecbc 5b02 	vldmia	ip!, {d5}
 801a560:	ecb5 6b02 	vldmia	r5!, {d6}
 801a564:	3401      	adds	r4, #1
 801a566:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a56a:	454c      	cmp	r4, r9
 801a56c:	dc01      	bgt.n	801a572 <__kernel_rem_pio2+0x3c2>
 801a56e:	4284      	cmp	r4, r0
 801a570:	ddf4      	ble.n	801a55c <__kernel_rem_pio2+0x3ac>
 801a572:	ac42      	add	r4, sp, #264	; 0x108
 801a574:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801a578:	ed80 7b00 	vstr	d7, [r0]
 801a57c:	3901      	subs	r1, #1
 801a57e:	e727      	b.n	801a3d0 <__kernel_rem_pio2+0x220>
 801a580:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801a582:	2902      	cmp	r1, #2
 801a584:	dc0a      	bgt.n	801a59c <__kernel_rem_pio2+0x3ec>
 801a586:	2900      	cmp	r1, #0
 801a588:	dc2c      	bgt.n	801a5e4 <__kernel_rem_pio2+0x434>
 801a58a:	d045      	beq.n	801a618 <__kernel_rem_pio2+0x468>
 801a58c:	f008 0007 	and.w	r0, r8, #7
 801a590:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a594:	ecbd 8b06 	vpop	{d8-d10}
 801a598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a59c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a59e:	2a03      	cmp	r2, #3
 801a5a0:	d1f4      	bne.n	801a58c <__kernel_rem_pio2+0x3dc>
 801a5a2:	aa42      	add	r2, sp, #264	; 0x108
 801a5a4:	4413      	add	r3, r2
 801a5a6:	461a      	mov	r2, r3
 801a5a8:	4619      	mov	r1, r3
 801a5aa:	4658      	mov	r0, fp
 801a5ac:	2800      	cmp	r0, #0
 801a5ae:	f1a1 0108 	sub.w	r1, r1, #8
 801a5b2:	dc54      	bgt.n	801a65e <__kernel_rem_pio2+0x4ae>
 801a5b4:	4659      	mov	r1, fp
 801a5b6:	2901      	cmp	r1, #1
 801a5b8:	f1a2 0208 	sub.w	r2, r2, #8
 801a5bc:	dc5f      	bgt.n	801a67e <__kernel_rem_pio2+0x4ce>
 801a5be:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801a6d8 <__kernel_rem_pio2+0x528>
 801a5c2:	3308      	adds	r3, #8
 801a5c4:	f1bb 0f01 	cmp.w	fp, #1
 801a5c8:	dc69      	bgt.n	801a69e <__kernel_rem_pio2+0x4ee>
 801a5ca:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a5ce:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a5d2:	2e00      	cmp	r6, #0
 801a5d4:	d16a      	bne.n	801a6ac <__kernel_rem_pio2+0x4fc>
 801a5d6:	ed87 5b00 	vstr	d5, [r7]
 801a5da:	ed87 6b02 	vstr	d6, [r7, #8]
 801a5de:	ed87 7b04 	vstr	d7, [r7, #16]
 801a5e2:	e7d3      	b.n	801a58c <__kernel_rem_pio2+0x3dc>
 801a5e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801a6d8 <__kernel_rem_pio2+0x528>
 801a5e8:	ab42      	add	r3, sp, #264	; 0x108
 801a5ea:	441a      	add	r2, r3
 801a5ec:	465b      	mov	r3, fp
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	da26      	bge.n	801a640 <__kernel_rem_pio2+0x490>
 801a5f2:	b35e      	cbz	r6, 801a64c <__kernel_rem_pio2+0x49c>
 801a5f4:	eeb1 7b46 	vneg.f64	d7, d6
 801a5f8:	ed87 7b00 	vstr	d7, [r7]
 801a5fc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a600:	aa44      	add	r2, sp, #272	; 0x110
 801a602:	2301      	movs	r3, #1
 801a604:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a608:	459b      	cmp	fp, r3
 801a60a:	da22      	bge.n	801a652 <__kernel_rem_pio2+0x4a2>
 801a60c:	b10e      	cbz	r6, 801a612 <__kernel_rem_pio2+0x462>
 801a60e:	eeb1 7b47 	vneg.f64	d7, d7
 801a612:	ed87 7b02 	vstr	d7, [r7, #8]
 801a616:	e7b9      	b.n	801a58c <__kernel_rem_pio2+0x3dc>
 801a618:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801a6d8 <__kernel_rem_pio2+0x528>
 801a61c:	ab42      	add	r3, sp, #264	; 0x108
 801a61e:	441a      	add	r2, r3
 801a620:	f1bb 0f00 	cmp.w	fp, #0
 801a624:	da05      	bge.n	801a632 <__kernel_rem_pio2+0x482>
 801a626:	b10e      	cbz	r6, 801a62c <__kernel_rem_pio2+0x47c>
 801a628:	eeb1 7b47 	vneg.f64	d7, d7
 801a62c:	ed87 7b00 	vstr	d7, [r7]
 801a630:	e7ac      	b.n	801a58c <__kernel_rem_pio2+0x3dc>
 801a632:	ed32 6b02 	vldmdb	r2!, {d6}
 801a636:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a63a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a63e:	e7ef      	b.n	801a620 <__kernel_rem_pio2+0x470>
 801a640:	ed32 7b02 	vldmdb	r2!, {d7}
 801a644:	3b01      	subs	r3, #1
 801a646:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a64a:	e7d0      	b.n	801a5ee <__kernel_rem_pio2+0x43e>
 801a64c:	eeb0 7b46 	vmov.f64	d7, d6
 801a650:	e7d2      	b.n	801a5f8 <__kernel_rem_pio2+0x448>
 801a652:	ecb2 6b02 	vldmia	r2!, {d6}
 801a656:	3301      	adds	r3, #1
 801a658:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a65c:	e7d4      	b.n	801a608 <__kernel_rem_pio2+0x458>
 801a65e:	ed91 7b00 	vldr	d7, [r1]
 801a662:	ed91 5b02 	vldr	d5, [r1, #8]
 801a666:	3801      	subs	r0, #1
 801a668:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a66c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a670:	ed81 6b00 	vstr	d6, [r1]
 801a674:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a678:	ed81 7b02 	vstr	d7, [r1, #8]
 801a67c:	e796      	b.n	801a5ac <__kernel_rem_pio2+0x3fc>
 801a67e:	ed92 7b00 	vldr	d7, [r2]
 801a682:	ed92 5b02 	vldr	d5, [r2, #8]
 801a686:	3901      	subs	r1, #1
 801a688:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a68c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a690:	ed82 6b00 	vstr	d6, [r2]
 801a694:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a698:	ed82 7b02 	vstr	d7, [r2, #8]
 801a69c:	e78b      	b.n	801a5b6 <__kernel_rem_pio2+0x406>
 801a69e:	ed33 6b02 	vldmdb	r3!, {d6}
 801a6a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a6a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a6aa:	e78b      	b.n	801a5c4 <__kernel_rem_pio2+0x414>
 801a6ac:	eeb1 5b45 	vneg.f64	d5, d5
 801a6b0:	eeb1 6b46 	vneg.f64	d6, d6
 801a6b4:	ed87 5b00 	vstr	d5, [r7]
 801a6b8:	eeb1 7b47 	vneg.f64	d7, d7
 801a6bc:	ed87 6b02 	vstr	d6, [r7, #8]
 801a6c0:	e78d      	b.n	801a5de <__kernel_rem_pio2+0x42e>
 801a6c2:	bf00      	nop
 801a6c4:	f3af 8000 	nop.w
 801a6c8:	00000000 	.word	0x00000000
 801a6cc:	41700000 	.word	0x41700000
 801a6d0:	00000000 	.word	0x00000000
 801a6d4:	3e700000 	.word	0x3e700000
	...

0801a6e0 <__kernel_tan>:
 801a6e0:	eeb0 7b40 	vmov.f64	d7, d0
 801a6e4:	ee17 3a90 	vmov	r3, s15
 801a6e8:	4987      	ldr	r1, [pc, #540]	; (801a908 <__kernel_tan+0x228>)
 801a6ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a6ee:	428a      	cmp	r2, r1
 801a6f0:	b510      	push	{r4, lr}
 801a6f2:	dc33      	bgt.n	801a75c <__kernel_tan+0x7c>
 801a6f4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801a6f8:	ee16 1a90 	vmov	r1, s13
 801a6fc:	2900      	cmp	r1, #0
 801a6fe:	d143      	bne.n	801a788 <__kernel_tan+0xa8>
 801a700:	ee10 4a10 	vmov	r4, s0
 801a704:	1c43      	adds	r3, r0, #1
 801a706:	4323      	orrs	r3, r4
 801a708:	4313      	orrs	r3, r2
 801a70a:	d108      	bne.n	801a71e <__kernel_tan+0x3e>
 801a70c:	f000 fc56 	bl	801afbc <fabs>
 801a710:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a714:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a718:	eeb0 0b47 	vmov.f64	d0, d7
 801a71c:	bd10      	pop	{r4, pc}
 801a71e:	2801      	cmp	r0, #1
 801a720:	d0fa      	beq.n	801a718 <__kernel_tan+0x38>
 801a722:	ee30 6b01 	vadd.f64	d6, d0, d1
 801a726:	ec53 2b16 	vmov	r2, r3, d6
 801a72a:	460a      	mov	r2, r1
 801a72c:	ec43 2b15 	vmov	d5, r2, r3
 801a730:	ee35 7b40 	vsub.f64	d7, d5, d0
 801a734:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a738:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a73c:	ee87 4b06 	vdiv.f64	d4, d7, d6
 801a740:	ec53 2b14 	vmov	r2, r3, d4
 801a744:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a748:	460a      	mov	r2, r1
 801a74a:	ec43 2b17 	vmov	d7, r2, r3
 801a74e:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a752:	eea1 6b07 	vfma.f64	d6, d1, d7
 801a756:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a75a:	e7dd      	b.n	801a718 <__kernel_tan+0x38>
 801a75c:	496b      	ldr	r1, [pc, #428]	; (801a90c <__kernel_tan+0x22c>)
 801a75e:	428a      	cmp	r2, r1
 801a760:	dd12      	ble.n	801a788 <__kernel_tan+0xa8>
 801a762:	ed9f 6b49 	vldr	d6, [pc, #292]	; 801a888 <__kernel_tan+0x1a8>
 801a766:	2b00      	cmp	r3, #0
 801a768:	bfb8      	it	lt
 801a76a:	eeb1 7b40 	vneglt.f64	d7, d0
 801a76e:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a772:	ed9f 6b47 	vldr	d6, [pc, #284]	; 801a890 <__kernel_tan+0x1b0>
 801a776:	bfb8      	it	lt
 801a778:	eeb1 1b41 	vneglt.f64	d1, d1
 801a77c:	ee36 1b41 	vsub.f64	d1, d6, d1
 801a780:	ee31 7b07 	vadd.f64	d7, d1, d7
 801a784:	ed9f 1b44 	vldr	d1, [pc, #272]	; 801a898 <__kernel_tan+0x1b8>
 801a788:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a78c:	ee25 6b05 	vmul.f64	d6, d5, d5
 801a790:	ed9f 3b43 	vldr	d3, [pc, #268]	; 801a8a0 <__kernel_tan+0x1c0>
 801a794:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801a8a8 <__kernel_tan+0x1c8>
 801a798:	eea6 4b03 	vfma.f64	d4, d6, d3
 801a79c:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801a8b0 <__kernel_tan+0x1d0>
 801a7a0:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a7a4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801a8b8 <__kernel_tan+0x1d8>
 801a7a8:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a7ac:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801a8c0 <__kernel_tan+0x1e0>
 801a7b0:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a7b4:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801a8c8 <__kernel_tan+0x1e8>
 801a7b8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801a8d0 <__kernel_tan+0x1f0>
 801a7bc:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a7c0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801a8d8 <__kernel_tan+0x1f8>
 801a7c4:	eea6 3b02 	vfma.f64	d3, d6, d2
 801a7c8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801a8e0 <__kernel_tan+0x200>
 801a7cc:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a7d0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801a8e8 <__kernel_tan+0x208>
 801a7d4:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a7d8:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801a8f0 <__kernel_tan+0x210>
 801a7dc:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a7e0:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801a8f8 <__kernel_tan+0x218>
 801a7e4:	4949      	ldr	r1, [pc, #292]	; (801a90c <__kernel_tan+0x22c>)
 801a7e6:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a7ea:	ee27 2b05 	vmul.f64	d2, d7, d5
 801a7ee:	eeb0 6b44 	vmov.f64	d6, d4
 801a7f2:	eeb0 4b41 	vmov.f64	d4, d1
 801a7f6:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a7fa:	eea6 4b02 	vfma.f64	d4, d6, d2
 801a7fe:	ed9f 6b40 	vldr	d6, [pc, #256]	; 801a900 <__kernel_tan+0x220>
 801a802:	eea4 1b05 	vfma.f64	d1, d4, d5
 801a806:	428a      	cmp	r2, r1
 801a808:	eea2 1b06 	vfma.f64	d1, d2, d6
 801a80c:	ee37 5b01 	vadd.f64	d5, d7, d1
 801a810:	dd1d      	ble.n	801a84e <__kernel_tan+0x16e>
 801a812:	ee25 3b05 	vmul.f64	d3, d5, d5
 801a816:	179b      	asrs	r3, r3, #30
 801a818:	ee06 0a90 	vmov	s13, r0
 801a81c:	f003 0302 	and.w	r3, r3, #2
 801a820:	f1c3 0301 	rsb	r3, r3, #1
 801a824:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a828:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a82c:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801a830:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a834:	ee34 1b41 	vsub.f64	d1, d4, d1
 801a838:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a83c:	eea7 6b45 	vfms.f64	d6, d7, d5
 801a840:	ee07 3a10 	vmov	s14, r3
 801a844:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a848:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a84c:	e764      	b.n	801a718 <__kernel_tan+0x38>
 801a84e:	2801      	cmp	r0, #1
 801a850:	d016      	beq.n	801a880 <__kernel_tan+0x1a0>
 801a852:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a856:	ec51 0b15 	vmov	r0, r1, d5
 801a85a:	2000      	movs	r0, #0
 801a85c:	ec41 0b13 	vmov	d3, r0, r1
 801a860:	ee33 7b47 	vsub.f64	d7, d3, d7
 801a864:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a868:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a86c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801a870:	ec53 2b14 	vmov	r2, r3, d4
 801a874:	4602      	mov	r2, r0
 801a876:	ec43 2b17 	vmov	d7, r2, r3
 801a87a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801a87e:	e768      	b.n	801a752 <__kernel_tan+0x72>
 801a880:	eeb0 7b45 	vmov.f64	d7, d5
 801a884:	e748      	b.n	801a718 <__kernel_tan+0x38>
 801a886:	bf00      	nop
 801a888:	54442d18 	.word	0x54442d18
 801a88c:	3fe921fb 	.word	0x3fe921fb
 801a890:	33145c07 	.word	0x33145c07
 801a894:	3c81a626 	.word	0x3c81a626
	...
 801a8a0:	db605373 	.word	0xdb605373
 801a8a4:	bef375cb 	.word	0xbef375cb
 801a8a8:	a03792a6 	.word	0xa03792a6
 801a8ac:	3f147e88 	.word	0x3f147e88
 801a8b0:	f2f26501 	.word	0xf2f26501
 801a8b4:	3f4344d8 	.word	0x3f4344d8
 801a8b8:	c9560328 	.word	0xc9560328
 801a8bc:	3f6d6d22 	.word	0x3f6d6d22
 801a8c0:	8406d637 	.word	0x8406d637
 801a8c4:	3f9664f4 	.word	0x3f9664f4
 801a8c8:	1110fe7a 	.word	0x1110fe7a
 801a8cc:	3fc11111 	.word	0x3fc11111
 801a8d0:	74bf7ad4 	.word	0x74bf7ad4
 801a8d4:	3efb2a70 	.word	0x3efb2a70
 801a8d8:	32f0a7e9 	.word	0x32f0a7e9
 801a8dc:	3f12b80f 	.word	0x3f12b80f
 801a8e0:	1a8d1068 	.word	0x1a8d1068
 801a8e4:	3f3026f7 	.word	0x3f3026f7
 801a8e8:	fee08315 	.word	0xfee08315
 801a8ec:	3f57dbc8 	.word	0x3f57dbc8
 801a8f0:	e96e8493 	.word	0xe96e8493
 801a8f4:	3f8226e3 	.word	0x3f8226e3
 801a8f8:	1bb341fe 	.word	0x1bb341fe
 801a8fc:	3faba1ba 	.word	0x3faba1ba
 801a900:	55555563 	.word	0x55555563
 801a904:	3fd55555 	.word	0x3fd55555
 801a908:	3e2fffff 	.word	0x3e2fffff
 801a90c:	3fe59427 	.word	0x3fe59427

0801a910 <__kernel_rem_pio2f>:
 801a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a914:	ed2d 8b04 	vpush	{d8-d9}
 801a918:	b0d9      	sub	sp, #356	; 0x164
 801a91a:	4688      	mov	r8, r1
 801a91c:	9002      	str	r0, [sp, #8]
 801a91e:	49bb      	ldr	r1, [pc, #748]	; (801ac0c <__kernel_rem_pio2f+0x2fc>)
 801a920:	9866      	ldr	r0, [sp, #408]	; 0x198
 801a922:	9301      	str	r3, [sp, #4]
 801a924:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801a928:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801a92c:	1e59      	subs	r1, r3, #1
 801a92e:	1d13      	adds	r3, r2, #4
 801a930:	db27      	blt.n	801a982 <__kernel_rem_pio2f+0x72>
 801a932:	f1b2 0b03 	subs.w	fp, r2, #3
 801a936:	bf48      	it	mi
 801a938:	f102 0b04 	addmi.w	fp, r2, #4
 801a93c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801a940:	1c45      	adds	r5, r0, #1
 801a942:	00ec      	lsls	r4, r5, #3
 801a944:	1a47      	subs	r7, r0, r1
 801a946:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801a94a:	9403      	str	r4, [sp, #12]
 801a94c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a950:	eb0a 0c01 	add.w	ip, sl, r1
 801a954:	ae1c      	add	r6, sp, #112	; 0x70
 801a956:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801a95a:	2400      	movs	r4, #0
 801a95c:	4564      	cmp	r4, ip
 801a95e:	dd12      	ble.n	801a986 <__kernel_rem_pio2f+0x76>
 801a960:	9b01      	ldr	r3, [sp, #4]
 801a962:	ac1c      	add	r4, sp, #112	; 0x70
 801a964:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801a968:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801a96c:	f04f 0c00 	mov.w	ip, #0
 801a970:	45d4      	cmp	ip, sl
 801a972:	dc27      	bgt.n	801a9c4 <__kernel_rem_pio2f+0xb4>
 801a974:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801a978:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801a97c:	4627      	mov	r7, r4
 801a97e:	2600      	movs	r6, #0
 801a980:	e016      	b.n	801a9b0 <__kernel_rem_pio2f+0xa0>
 801a982:	2000      	movs	r0, #0
 801a984:	e7dc      	b.n	801a940 <__kernel_rem_pio2f+0x30>
 801a986:	42e7      	cmn	r7, r4
 801a988:	bf5d      	ittte	pl
 801a98a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801a98e:	ee07 3a90 	vmovpl	s15, r3
 801a992:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a996:	eef0 7a47 	vmovmi.f32	s15, s14
 801a99a:	ece6 7a01 	vstmia	r6!, {s15}
 801a99e:	3401      	adds	r4, #1
 801a9a0:	e7dc      	b.n	801a95c <__kernel_rem_pio2f+0x4c>
 801a9a2:	ecf9 6a01 	vldmia	r9!, {s13}
 801a9a6:	ed97 7a00 	vldr	s14, [r7]
 801a9aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9ae:	3601      	adds	r6, #1
 801a9b0:	428e      	cmp	r6, r1
 801a9b2:	f1a7 0704 	sub.w	r7, r7, #4
 801a9b6:	ddf4      	ble.n	801a9a2 <__kernel_rem_pio2f+0x92>
 801a9b8:	eceb 7a01 	vstmia	fp!, {s15}
 801a9bc:	f10c 0c01 	add.w	ip, ip, #1
 801a9c0:	3404      	adds	r4, #4
 801a9c2:	e7d5      	b.n	801a970 <__kernel_rem_pio2f+0x60>
 801a9c4:	ab08      	add	r3, sp, #32
 801a9c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a9ca:	eddf 8a93 	vldr	s17, [pc, #588]	; 801ac18 <__kernel_rem_pio2f+0x308>
 801a9ce:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801ac14 <__kernel_rem_pio2f+0x304>
 801a9d2:	9304      	str	r3, [sp, #16]
 801a9d4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801a9d8:	4656      	mov	r6, sl
 801a9da:	00b3      	lsls	r3, r6, #2
 801a9dc:	9305      	str	r3, [sp, #20]
 801a9de:	ab58      	add	r3, sp, #352	; 0x160
 801a9e0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a9e4:	ac08      	add	r4, sp, #32
 801a9e6:	ab44      	add	r3, sp, #272	; 0x110
 801a9e8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801a9ec:	46a4      	mov	ip, r4
 801a9ee:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a9f2:	4637      	mov	r7, r6
 801a9f4:	2f00      	cmp	r7, #0
 801a9f6:	f1a0 0004 	sub.w	r0, r0, #4
 801a9fa:	dc4f      	bgt.n	801aa9c <__kernel_rem_pio2f+0x18c>
 801a9fc:	4628      	mov	r0, r5
 801a9fe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801aa02:	f000 fd3f 	bl	801b484 <scalbnf>
 801aa06:	eeb0 8a40 	vmov.f32	s16, s0
 801aa0a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801aa0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801aa12:	f000 fcf5 	bl	801b400 <floorf>
 801aa16:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801aa1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801aa1e:	2d00      	cmp	r5, #0
 801aa20:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801aa24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801aa28:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801aa2c:	ee17 9a90 	vmov	r9, s15
 801aa30:	ee38 8a40 	vsub.f32	s16, s16, s0
 801aa34:	dd44      	ble.n	801aac0 <__kernel_rem_pio2f+0x1b0>
 801aa36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801aa3a:	ab08      	add	r3, sp, #32
 801aa3c:	f1c5 0e08 	rsb	lr, r5, #8
 801aa40:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801aa44:	fa47 f00e 	asr.w	r0, r7, lr
 801aa48:	4481      	add	r9, r0
 801aa4a:	fa00 f00e 	lsl.w	r0, r0, lr
 801aa4e:	1a3f      	subs	r7, r7, r0
 801aa50:	f1c5 0007 	rsb	r0, r5, #7
 801aa54:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801aa58:	4107      	asrs	r7, r0
 801aa5a:	2f00      	cmp	r7, #0
 801aa5c:	dd3f      	ble.n	801aade <__kernel_rem_pio2f+0x1ce>
 801aa5e:	f04f 0e00 	mov.w	lr, #0
 801aa62:	f109 0901 	add.w	r9, r9, #1
 801aa66:	4673      	mov	r3, lr
 801aa68:	4576      	cmp	r6, lr
 801aa6a:	dc6b      	bgt.n	801ab44 <__kernel_rem_pio2f+0x234>
 801aa6c:	2d00      	cmp	r5, #0
 801aa6e:	dd04      	ble.n	801aa7a <__kernel_rem_pio2f+0x16a>
 801aa70:	2d01      	cmp	r5, #1
 801aa72:	d078      	beq.n	801ab66 <__kernel_rem_pio2f+0x256>
 801aa74:	2d02      	cmp	r5, #2
 801aa76:	f000 8081 	beq.w	801ab7c <__kernel_rem_pio2f+0x26c>
 801aa7a:	2f02      	cmp	r7, #2
 801aa7c:	d12f      	bne.n	801aade <__kernel_rem_pio2f+0x1ce>
 801aa7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aa82:	ee30 8a48 	vsub.f32	s16, s0, s16
 801aa86:	b353      	cbz	r3, 801aade <__kernel_rem_pio2f+0x1ce>
 801aa88:	4628      	mov	r0, r5
 801aa8a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801aa8e:	f000 fcf9 	bl	801b484 <scalbnf>
 801aa92:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801aa96:	ee38 8a40 	vsub.f32	s16, s16, s0
 801aa9a:	e020      	b.n	801aade <__kernel_rem_pio2f+0x1ce>
 801aa9c:	ee60 7a28 	vmul.f32	s15, s0, s17
 801aaa0:	3f01      	subs	r7, #1
 801aaa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aaa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aaaa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801aaae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aab2:	ecac 0a01 	vstmia	ip!, {s0}
 801aab6:	ed90 0a00 	vldr	s0, [r0]
 801aaba:	ee37 0a80 	vadd.f32	s0, s15, s0
 801aabe:	e799      	b.n	801a9f4 <__kernel_rem_pio2f+0xe4>
 801aac0:	d105      	bne.n	801aace <__kernel_rem_pio2f+0x1be>
 801aac2:	1e70      	subs	r0, r6, #1
 801aac4:	ab08      	add	r3, sp, #32
 801aac6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801aaca:	11ff      	asrs	r7, r7, #7
 801aacc:	e7c5      	b.n	801aa5a <__kernel_rem_pio2f+0x14a>
 801aace:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aad2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801aad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aada:	da31      	bge.n	801ab40 <__kernel_rem_pio2f+0x230>
 801aadc:	2700      	movs	r7, #0
 801aade:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801aae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae6:	f040 809b 	bne.w	801ac20 <__kernel_rem_pio2f+0x310>
 801aaea:	1e74      	subs	r4, r6, #1
 801aaec:	46a4      	mov	ip, r4
 801aaee:	2000      	movs	r0, #0
 801aaf0:	45d4      	cmp	ip, sl
 801aaf2:	da4a      	bge.n	801ab8a <__kernel_rem_pio2f+0x27a>
 801aaf4:	2800      	cmp	r0, #0
 801aaf6:	d07a      	beq.n	801abee <__kernel_rem_pio2f+0x2de>
 801aaf8:	ab08      	add	r3, sp, #32
 801aafa:	3d08      	subs	r5, #8
 801aafc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	f000 8081 	beq.w	801ac08 <__kernel_rem_pio2f+0x2f8>
 801ab06:	4628      	mov	r0, r5
 801ab08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ab0c:	00a5      	lsls	r5, r4, #2
 801ab0e:	f000 fcb9 	bl	801b484 <scalbnf>
 801ab12:	aa44      	add	r2, sp, #272	; 0x110
 801ab14:	1d2b      	adds	r3, r5, #4
 801ab16:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801ac18 <__kernel_rem_pio2f+0x308>
 801ab1a:	18d1      	adds	r1, r2, r3
 801ab1c:	4622      	mov	r2, r4
 801ab1e:	2a00      	cmp	r2, #0
 801ab20:	f280 80ae 	bge.w	801ac80 <__kernel_rem_pio2f+0x370>
 801ab24:	4622      	mov	r2, r4
 801ab26:	2a00      	cmp	r2, #0
 801ab28:	f2c0 80cc 	blt.w	801acc4 <__kernel_rem_pio2f+0x3b4>
 801ab2c:	a944      	add	r1, sp, #272	; 0x110
 801ab2e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801ab32:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801ac10 <__kernel_rem_pio2f+0x300>
 801ab36:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801ab3a:	2000      	movs	r0, #0
 801ab3c:	1aa1      	subs	r1, r4, r2
 801ab3e:	e0b6      	b.n	801acae <__kernel_rem_pio2f+0x39e>
 801ab40:	2702      	movs	r7, #2
 801ab42:	e78c      	b.n	801aa5e <__kernel_rem_pio2f+0x14e>
 801ab44:	6820      	ldr	r0, [r4, #0]
 801ab46:	b94b      	cbnz	r3, 801ab5c <__kernel_rem_pio2f+0x24c>
 801ab48:	b118      	cbz	r0, 801ab52 <__kernel_rem_pio2f+0x242>
 801ab4a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ab4e:	6020      	str	r0, [r4, #0]
 801ab50:	2001      	movs	r0, #1
 801ab52:	f10e 0e01 	add.w	lr, lr, #1
 801ab56:	3404      	adds	r4, #4
 801ab58:	4603      	mov	r3, r0
 801ab5a:	e785      	b.n	801aa68 <__kernel_rem_pio2f+0x158>
 801ab5c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ab60:	6020      	str	r0, [r4, #0]
 801ab62:	4618      	mov	r0, r3
 801ab64:	e7f5      	b.n	801ab52 <__kernel_rem_pio2f+0x242>
 801ab66:	1e74      	subs	r4, r6, #1
 801ab68:	a808      	add	r0, sp, #32
 801ab6a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ab6e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ab72:	f10d 0c20 	add.w	ip, sp, #32
 801ab76:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801ab7a:	e77e      	b.n	801aa7a <__kernel_rem_pio2f+0x16a>
 801ab7c:	1e74      	subs	r4, r6, #1
 801ab7e:	a808      	add	r0, sp, #32
 801ab80:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ab84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ab88:	e7f3      	b.n	801ab72 <__kernel_rem_pio2f+0x262>
 801ab8a:	ab08      	add	r3, sp, #32
 801ab8c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ab90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ab94:	4318      	orrs	r0, r3
 801ab96:	e7ab      	b.n	801aaf0 <__kernel_rem_pio2f+0x1e0>
 801ab98:	f10c 0c01 	add.w	ip, ip, #1
 801ab9c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801aba0:	2c00      	cmp	r4, #0
 801aba2:	d0f9      	beq.n	801ab98 <__kernel_rem_pio2f+0x288>
 801aba4:	9b05      	ldr	r3, [sp, #20]
 801aba6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801abaa:	eb0d 0003 	add.w	r0, sp, r3
 801abae:	9b01      	ldr	r3, [sp, #4]
 801abb0:	18f4      	adds	r4, r6, r3
 801abb2:	ab1c      	add	r3, sp, #112	; 0x70
 801abb4:	1c77      	adds	r7, r6, #1
 801abb6:	384c      	subs	r0, #76	; 0x4c
 801abb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801abbc:	4466      	add	r6, ip
 801abbe:	42be      	cmp	r6, r7
 801abc0:	f6ff af0b 	blt.w	801a9da <__kernel_rem_pio2f+0xca>
 801abc4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801abc8:	f8dd e008 	ldr.w	lr, [sp, #8]
 801abcc:	ee07 3a90 	vmov	s15, r3
 801abd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abd4:	f04f 0c00 	mov.w	ip, #0
 801abd8:	ece4 7a01 	vstmia	r4!, {s15}
 801abdc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801abe0:	46a1      	mov	r9, r4
 801abe2:	458c      	cmp	ip, r1
 801abe4:	dd07      	ble.n	801abf6 <__kernel_rem_pio2f+0x2e6>
 801abe6:	ece0 7a01 	vstmia	r0!, {s15}
 801abea:	3701      	adds	r7, #1
 801abec:	e7e7      	b.n	801abbe <__kernel_rem_pio2f+0x2ae>
 801abee:	9804      	ldr	r0, [sp, #16]
 801abf0:	f04f 0c01 	mov.w	ip, #1
 801abf4:	e7d2      	b.n	801ab9c <__kernel_rem_pio2f+0x28c>
 801abf6:	ecfe 6a01 	vldmia	lr!, {s13}
 801abfa:	ed39 7a01 	vldmdb	r9!, {s14}
 801abfe:	f10c 0c01 	add.w	ip, ip, #1
 801ac02:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac06:	e7ec      	b.n	801abe2 <__kernel_rem_pio2f+0x2d2>
 801ac08:	3c01      	subs	r4, #1
 801ac0a:	e775      	b.n	801aaf8 <__kernel_rem_pio2f+0x1e8>
 801ac0c:	08033aac 	.word	0x08033aac
 801ac10:	08033a80 	.word	0x08033a80
 801ac14:	43800000 	.word	0x43800000
 801ac18:	3b800000 	.word	0x3b800000
 801ac1c:	00000000 	.word	0x00000000
 801ac20:	9b03      	ldr	r3, [sp, #12]
 801ac22:	eeb0 0a48 	vmov.f32	s0, s16
 801ac26:	1a98      	subs	r0, r3, r2
 801ac28:	f000 fc2c 	bl	801b484 <scalbnf>
 801ac2c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801ac14 <__kernel_rem_pio2f+0x304>
 801ac30:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ac34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac38:	db19      	blt.n	801ac6e <__kernel_rem_pio2f+0x35e>
 801ac3a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801ac18 <__kernel_rem_pio2f+0x308>
 801ac3e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801ac42:	aa08      	add	r2, sp, #32
 801ac44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac48:	1c74      	adds	r4, r6, #1
 801ac4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac4e:	3508      	adds	r5, #8
 801ac50:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801ac54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ac5c:	ee10 3a10 	vmov	r3, s0
 801ac60:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ac64:	ee17 3a90 	vmov	r3, s15
 801ac68:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801ac6c:	e74b      	b.n	801ab06 <__kernel_rem_pio2f+0x1f6>
 801ac6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ac72:	aa08      	add	r2, sp, #32
 801ac74:	ee10 3a10 	vmov	r3, s0
 801ac78:	4634      	mov	r4, r6
 801ac7a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801ac7e:	e742      	b.n	801ab06 <__kernel_rem_pio2f+0x1f6>
 801ac80:	a808      	add	r0, sp, #32
 801ac82:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801ac86:	9001      	str	r0, [sp, #4]
 801ac88:	ee07 0a90 	vmov	s15, r0
 801ac8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac90:	3a01      	subs	r2, #1
 801ac92:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ac96:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ac9a:	ed61 7a01 	vstmdb	r1!, {s15}
 801ac9e:	e73e      	b.n	801ab1e <__kernel_rem_pio2f+0x20e>
 801aca0:	ecfc 6a01 	vldmia	ip!, {s13}
 801aca4:	ecb6 7a01 	vldmia	r6!, {s14}
 801aca8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801acac:	3001      	adds	r0, #1
 801acae:	4550      	cmp	r0, sl
 801acb0:	dc01      	bgt.n	801acb6 <__kernel_rem_pio2f+0x3a6>
 801acb2:	4288      	cmp	r0, r1
 801acb4:	ddf4      	ble.n	801aca0 <__kernel_rem_pio2f+0x390>
 801acb6:	a858      	add	r0, sp, #352	; 0x160
 801acb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801acbc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801acc0:	3a01      	subs	r2, #1
 801acc2:	e730      	b.n	801ab26 <__kernel_rem_pio2f+0x216>
 801acc4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801acc6:	2a02      	cmp	r2, #2
 801acc8:	dc09      	bgt.n	801acde <__kernel_rem_pio2f+0x3ce>
 801acca:	2a00      	cmp	r2, #0
 801accc:	dc2a      	bgt.n	801ad24 <__kernel_rem_pio2f+0x414>
 801acce:	d043      	beq.n	801ad58 <__kernel_rem_pio2f+0x448>
 801acd0:	f009 0007 	and.w	r0, r9, #7
 801acd4:	b059      	add	sp, #356	; 0x164
 801acd6:	ecbd 8b04 	vpop	{d8-d9}
 801acda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acde:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ace0:	2b03      	cmp	r3, #3
 801ace2:	d1f5      	bne.n	801acd0 <__kernel_rem_pio2f+0x3c0>
 801ace4:	ab30      	add	r3, sp, #192	; 0xc0
 801ace6:	442b      	add	r3, r5
 801ace8:	461a      	mov	r2, r3
 801acea:	4619      	mov	r1, r3
 801acec:	4620      	mov	r0, r4
 801acee:	2800      	cmp	r0, #0
 801acf0:	f1a1 0104 	sub.w	r1, r1, #4
 801acf4:	dc51      	bgt.n	801ad9a <__kernel_rem_pio2f+0x48a>
 801acf6:	4621      	mov	r1, r4
 801acf8:	2901      	cmp	r1, #1
 801acfa:	f1a2 0204 	sub.w	r2, r2, #4
 801acfe:	dc5c      	bgt.n	801adba <__kernel_rem_pio2f+0x4aa>
 801ad00:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801ad04:	3304      	adds	r3, #4
 801ad06:	2c01      	cmp	r4, #1
 801ad08:	dc67      	bgt.n	801adda <__kernel_rem_pio2f+0x4ca>
 801ad0a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ad0e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ad12:	2f00      	cmp	r7, #0
 801ad14:	d167      	bne.n	801ade6 <__kernel_rem_pio2f+0x4d6>
 801ad16:	edc8 6a00 	vstr	s13, [r8]
 801ad1a:	ed88 7a01 	vstr	s14, [r8, #4]
 801ad1e:	edc8 7a02 	vstr	s15, [r8, #8]
 801ad22:	e7d5      	b.n	801acd0 <__kernel_rem_pio2f+0x3c0>
 801ad24:	aa30      	add	r2, sp, #192	; 0xc0
 801ad26:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801ad2a:	4413      	add	r3, r2
 801ad2c:	4622      	mov	r2, r4
 801ad2e:	2a00      	cmp	r2, #0
 801ad30:	da24      	bge.n	801ad7c <__kernel_rem_pio2f+0x46c>
 801ad32:	b34f      	cbz	r7, 801ad88 <__kernel_rem_pio2f+0x478>
 801ad34:	eef1 7a47 	vneg.f32	s15, s14
 801ad38:	edc8 7a00 	vstr	s15, [r8]
 801ad3c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801ad40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad44:	aa31      	add	r2, sp, #196	; 0xc4
 801ad46:	2301      	movs	r3, #1
 801ad48:	429c      	cmp	r4, r3
 801ad4a:	da20      	bge.n	801ad8e <__kernel_rem_pio2f+0x47e>
 801ad4c:	b10f      	cbz	r7, 801ad52 <__kernel_rem_pio2f+0x442>
 801ad4e:	eef1 7a67 	vneg.f32	s15, s15
 801ad52:	edc8 7a01 	vstr	s15, [r8, #4]
 801ad56:	e7bb      	b.n	801acd0 <__kernel_rem_pio2f+0x3c0>
 801ad58:	aa30      	add	r2, sp, #192	; 0xc0
 801ad5a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801ac1c <__kernel_rem_pio2f+0x30c>
 801ad5e:	4413      	add	r3, r2
 801ad60:	2c00      	cmp	r4, #0
 801ad62:	da05      	bge.n	801ad70 <__kernel_rem_pio2f+0x460>
 801ad64:	b10f      	cbz	r7, 801ad6a <__kernel_rem_pio2f+0x45a>
 801ad66:	eef1 7a67 	vneg.f32	s15, s15
 801ad6a:	edc8 7a00 	vstr	s15, [r8]
 801ad6e:	e7af      	b.n	801acd0 <__kernel_rem_pio2f+0x3c0>
 801ad70:	ed33 7a01 	vldmdb	r3!, {s14}
 801ad74:	3c01      	subs	r4, #1
 801ad76:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad7a:	e7f1      	b.n	801ad60 <__kernel_rem_pio2f+0x450>
 801ad7c:	ed73 7a01 	vldmdb	r3!, {s15}
 801ad80:	3a01      	subs	r2, #1
 801ad82:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ad86:	e7d2      	b.n	801ad2e <__kernel_rem_pio2f+0x41e>
 801ad88:	eef0 7a47 	vmov.f32	s15, s14
 801ad8c:	e7d4      	b.n	801ad38 <__kernel_rem_pio2f+0x428>
 801ad8e:	ecb2 7a01 	vldmia	r2!, {s14}
 801ad92:	3301      	adds	r3, #1
 801ad94:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad98:	e7d6      	b.n	801ad48 <__kernel_rem_pio2f+0x438>
 801ad9a:	edd1 7a00 	vldr	s15, [r1]
 801ad9e:	edd1 6a01 	vldr	s13, [r1, #4]
 801ada2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ada6:	3801      	subs	r0, #1
 801ada8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801adac:	ed81 7a00 	vstr	s14, [r1]
 801adb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801adb4:	edc1 7a01 	vstr	s15, [r1, #4]
 801adb8:	e799      	b.n	801acee <__kernel_rem_pio2f+0x3de>
 801adba:	edd2 7a00 	vldr	s15, [r2]
 801adbe:	edd2 6a01 	vldr	s13, [r2, #4]
 801adc2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801adc6:	3901      	subs	r1, #1
 801adc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801adcc:	ed82 7a00 	vstr	s14, [r2]
 801add0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801add4:	edc2 7a01 	vstr	s15, [r2, #4]
 801add8:	e78e      	b.n	801acf8 <__kernel_rem_pio2f+0x3e8>
 801adda:	ed33 7a01 	vldmdb	r3!, {s14}
 801adde:	3c01      	subs	r4, #1
 801ade0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ade4:	e78f      	b.n	801ad06 <__kernel_rem_pio2f+0x3f6>
 801ade6:	eef1 6a66 	vneg.f32	s13, s13
 801adea:	eeb1 7a47 	vneg.f32	s14, s14
 801adee:	edc8 6a00 	vstr	s13, [r8]
 801adf2:	ed88 7a01 	vstr	s14, [r8, #4]
 801adf6:	eef1 7a67 	vneg.f32	s15, s15
 801adfa:	e790      	b.n	801ad1e <__kernel_rem_pio2f+0x40e>

0801adfc <__kernel_tanf>:
 801adfc:	b508      	push	{r3, lr}
 801adfe:	ee10 3a10 	vmov	r3, s0
 801ae02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ae06:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801ae0a:	eef0 7a40 	vmov.f32	s15, s0
 801ae0e:	da17      	bge.n	801ae40 <__kernel_tanf+0x44>
 801ae10:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801ae14:	ee17 1a10 	vmov	r1, s14
 801ae18:	bb41      	cbnz	r1, 801ae6c <__kernel_tanf+0x70>
 801ae1a:	1c43      	adds	r3, r0, #1
 801ae1c:	4313      	orrs	r3, r2
 801ae1e:	d108      	bne.n	801ae32 <__kernel_tanf+0x36>
 801ae20:	f7fe fc3a 	bl	8019698 <fabsf>
 801ae24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ae28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ae2c:	eeb0 0a67 	vmov.f32	s0, s15
 801ae30:	bd08      	pop	{r3, pc}
 801ae32:	2801      	cmp	r0, #1
 801ae34:	d0fa      	beq.n	801ae2c <__kernel_tanf+0x30>
 801ae36:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ae3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ae3e:	e7f5      	b.n	801ae2c <__kernel_tanf+0x30>
 801ae40:	494c      	ldr	r1, [pc, #304]	; (801af74 <__kernel_tanf+0x178>)
 801ae42:	428a      	cmp	r2, r1
 801ae44:	db12      	blt.n	801ae6c <__kernel_tanf+0x70>
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	bfb8      	it	lt
 801ae4a:	eef1 7a40 	vneglt.f32	s15, s0
 801ae4e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801af78 <__kernel_tanf+0x17c>
 801ae52:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ae56:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801af7c <__kernel_tanf+0x180>
 801ae5a:	bfb8      	it	lt
 801ae5c:	eef1 0a60 	vneglt.f32	s1, s1
 801ae60:	ee70 0a60 	vsub.f32	s1, s0, s1
 801ae64:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801ae68:	eddf 0a45 	vldr	s1, [pc, #276]	; 801af80 <__kernel_tanf+0x184>
 801ae6c:	eddf 5a45 	vldr	s11, [pc, #276]	; 801af84 <__kernel_tanf+0x188>
 801ae70:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801af88 <__kernel_tanf+0x18c>
 801ae74:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801af8c <__kernel_tanf+0x190>
 801ae78:	493e      	ldr	r1, [pc, #248]	; (801af74 <__kernel_tanf+0x178>)
 801ae7a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801ae7e:	428a      	cmp	r2, r1
 801ae80:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801ae84:	eea7 6a25 	vfma.f32	s12, s14, s11
 801ae88:	eddf 5a41 	vldr	s11, [pc, #260]	; 801af90 <__kernel_tanf+0x194>
 801ae8c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801ae90:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801af94 <__kernel_tanf+0x198>
 801ae94:	eea5 6a87 	vfma.f32	s12, s11, s14
 801ae98:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801af98 <__kernel_tanf+0x19c>
 801ae9c:	eee6 5a07 	vfma.f32	s11, s12, s14
 801aea0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801af9c <__kernel_tanf+0x1a0>
 801aea4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aea8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801afa0 <__kernel_tanf+0x1a4>
 801aeac:	eee7 5a05 	vfma.f32	s11, s14, s10
 801aeb0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801afa4 <__kernel_tanf+0x1a8>
 801aeb4:	eea5 5a87 	vfma.f32	s10, s11, s14
 801aeb8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801afa8 <__kernel_tanf+0x1ac>
 801aebc:	eee5 5a07 	vfma.f32	s11, s10, s14
 801aec0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801afac <__kernel_tanf+0x1b0>
 801aec4:	eea5 5a87 	vfma.f32	s10, s11, s14
 801aec8:	eddf 5a39 	vldr	s11, [pc, #228]	; 801afb0 <__kernel_tanf+0x1b4>
 801aecc:	eee5 5a07 	vfma.f32	s11, s10, s14
 801aed0:	eeb0 7a46 	vmov.f32	s14, s12
 801aed4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801aed8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801aedc:	eeb0 6a60 	vmov.f32	s12, s1
 801aee0:	eea7 6a05 	vfma.f32	s12, s14, s10
 801aee4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801afb4 <__kernel_tanf+0x1b8>
 801aee8:	eee6 0a26 	vfma.f32	s1, s12, s13
 801aeec:	eee5 0a07 	vfma.f32	s1, s10, s14
 801aef0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801aef4:	db1d      	blt.n	801af32 <__kernel_tanf+0x136>
 801aef6:	ee06 0a90 	vmov	s13, r0
 801aefa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801aefe:	ee27 6a07 	vmul.f32	s12, s14, s14
 801af02:	ee37 7a00 	vadd.f32	s14, s14, s0
 801af06:	179b      	asrs	r3, r3, #30
 801af08:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801af0c:	f003 0302 	and.w	r3, r3, #2
 801af10:	f1c3 0301 	rsb	r3, r3, #1
 801af14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801af18:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801af1c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801af20:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801af24:	ee07 3a90 	vmov	s15, r3
 801af28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801af30:	e77c      	b.n	801ae2c <__kernel_tanf+0x30>
 801af32:	2801      	cmp	r0, #1
 801af34:	d01b      	beq.n	801af6e <__kernel_tanf+0x172>
 801af36:	4b20      	ldr	r3, [pc, #128]	; (801afb8 <__kernel_tanf+0x1bc>)
 801af38:	ee17 2a10 	vmov	r2, s14
 801af3c:	401a      	ands	r2, r3
 801af3e:	ee06 2a10 	vmov	s12, r2
 801af42:	ee76 7a67 	vsub.f32	s15, s12, s15
 801af46:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801af4a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801af4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801af52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801af56:	ee16 2a90 	vmov	r2, s13
 801af5a:	4013      	ands	r3, r2
 801af5c:	ee07 3a90 	vmov	s15, r3
 801af60:	eea6 7a27 	vfma.f32	s14, s12, s15
 801af64:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801af68:	eee7 7a26 	vfma.f32	s15, s14, s13
 801af6c:	e75e      	b.n	801ae2c <__kernel_tanf+0x30>
 801af6e:	eef0 7a47 	vmov.f32	s15, s14
 801af72:	e75b      	b.n	801ae2c <__kernel_tanf+0x30>
 801af74:	3f2ca140 	.word	0x3f2ca140
 801af78:	3f490fda 	.word	0x3f490fda
 801af7c:	33222168 	.word	0x33222168
 801af80:	00000000 	.word	0x00000000
 801af84:	b79bae5f 	.word	0xb79bae5f
 801af88:	38a3f445 	.word	0x38a3f445
 801af8c:	37d95384 	.word	0x37d95384
 801af90:	3a1a26c8 	.word	0x3a1a26c8
 801af94:	3b6b6916 	.word	0x3b6b6916
 801af98:	3cb327a4 	.word	0x3cb327a4
 801af9c:	3e088889 	.word	0x3e088889
 801afa0:	3895c07a 	.word	0x3895c07a
 801afa4:	398137b9 	.word	0x398137b9
 801afa8:	3abede48 	.word	0x3abede48
 801afac:	3c11371f 	.word	0x3c11371f
 801afb0:	3d5d0dd1 	.word	0x3d5d0dd1
 801afb4:	3eaaaaab 	.word	0x3eaaaaab
 801afb8:	fffff000 	.word	0xfffff000

0801afbc <fabs>:
 801afbc:	ec51 0b10 	vmov	r0, r1, d0
 801afc0:	ee10 2a10 	vmov	r2, s0
 801afc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801afc8:	ec43 2b10 	vmov	d0, r2, r3
 801afcc:	4770      	bx	lr
	...

0801afd0 <floor>:
 801afd0:	ee10 1a90 	vmov	r1, s1
 801afd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801afd8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801afdc:	2b13      	cmp	r3, #19
 801afde:	b530      	push	{r4, r5, lr}
 801afe0:	ee10 0a10 	vmov	r0, s0
 801afe4:	ee10 5a10 	vmov	r5, s0
 801afe8:	dc31      	bgt.n	801b04e <floor+0x7e>
 801afea:	2b00      	cmp	r3, #0
 801afec:	da15      	bge.n	801b01a <floor+0x4a>
 801afee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b0a8 <floor+0xd8>
 801aff2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801aff6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801affa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801affe:	dd07      	ble.n	801b010 <floor+0x40>
 801b000:	2900      	cmp	r1, #0
 801b002:	da4e      	bge.n	801b0a2 <floor+0xd2>
 801b004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b008:	4318      	orrs	r0, r3
 801b00a:	d001      	beq.n	801b010 <floor+0x40>
 801b00c:	4928      	ldr	r1, [pc, #160]	; (801b0b0 <floor+0xe0>)
 801b00e:	2000      	movs	r0, #0
 801b010:	460b      	mov	r3, r1
 801b012:	4602      	mov	r2, r0
 801b014:	ec43 2b10 	vmov	d0, r2, r3
 801b018:	e020      	b.n	801b05c <floor+0x8c>
 801b01a:	4a26      	ldr	r2, [pc, #152]	; (801b0b4 <floor+0xe4>)
 801b01c:	411a      	asrs	r2, r3
 801b01e:	ea01 0402 	and.w	r4, r1, r2
 801b022:	4304      	orrs	r4, r0
 801b024:	d01a      	beq.n	801b05c <floor+0x8c>
 801b026:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801b0a8 <floor+0xd8>
 801b02a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b02e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b036:	ddeb      	ble.n	801b010 <floor+0x40>
 801b038:	2900      	cmp	r1, #0
 801b03a:	bfbe      	ittt	lt
 801b03c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801b040:	fa40 f303 	asrlt.w	r3, r0, r3
 801b044:	18c9      	addlt	r1, r1, r3
 801b046:	ea21 0102 	bic.w	r1, r1, r2
 801b04a:	2000      	movs	r0, #0
 801b04c:	e7e0      	b.n	801b010 <floor+0x40>
 801b04e:	2b33      	cmp	r3, #51	; 0x33
 801b050:	dd05      	ble.n	801b05e <floor+0x8e>
 801b052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b056:	d101      	bne.n	801b05c <floor+0x8c>
 801b058:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b05c:	bd30      	pop	{r4, r5, pc}
 801b05e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801b062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b066:	40e2      	lsrs	r2, r4
 801b068:	4202      	tst	r2, r0
 801b06a:	d0f7      	beq.n	801b05c <floor+0x8c>
 801b06c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801b0a8 <floor+0xd8>
 801b070:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b074:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b07c:	ddc8      	ble.n	801b010 <floor+0x40>
 801b07e:	2900      	cmp	r1, #0
 801b080:	da02      	bge.n	801b088 <floor+0xb8>
 801b082:	2b14      	cmp	r3, #20
 801b084:	d103      	bne.n	801b08e <floor+0xbe>
 801b086:	3101      	adds	r1, #1
 801b088:	ea20 0002 	bic.w	r0, r0, r2
 801b08c:	e7c0      	b.n	801b010 <floor+0x40>
 801b08e:	2401      	movs	r4, #1
 801b090:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b094:	fa04 f303 	lsl.w	r3, r4, r3
 801b098:	4418      	add	r0, r3
 801b09a:	42a8      	cmp	r0, r5
 801b09c:	bf38      	it	cc
 801b09e:	1909      	addcc	r1, r1, r4
 801b0a0:	e7f2      	b.n	801b088 <floor+0xb8>
 801b0a2:	2000      	movs	r0, #0
 801b0a4:	4601      	mov	r1, r0
 801b0a6:	e7b3      	b.n	801b010 <floor+0x40>
 801b0a8:	8800759c 	.word	0x8800759c
 801b0ac:	7e37e43c 	.word	0x7e37e43c
 801b0b0:	bff00000 	.word	0xbff00000
 801b0b4:	000fffff 	.word	0x000fffff

0801b0b8 <scalbn>:
 801b0b8:	ee10 1a90 	vmov	r1, s1
 801b0bc:	b510      	push	{r4, lr}
 801b0be:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b0c2:	b98c      	cbnz	r4, 801b0e8 <scalbn+0x30>
 801b0c4:	ee10 3a10 	vmov	r3, s0
 801b0c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b0cc:	430b      	orrs	r3, r1
 801b0ce:	d011      	beq.n	801b0f4 <scalbn+0x3c>
 801b0d0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801b198 <scalbn+0xe0>
 801b0d4:	4b3c      	ldr	r3, [pc, #240]	; (801b1c8 <scalbn+0x110>)
 801b0d6:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b0da:	4298      	cmp	r0, r3
 801b0dc:	da0b      	bge.n	801b0f6 <scalbn+0x3e>
 801b0de:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801b1a0 <scalbn+0xe8>
 801b0e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801b0e6:	e005      	b.n	801b0f4 <scalbn+0x3c>
 801b0e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801b0ec:	429c      	cmp	r4, r3
 801b0ee:	d107      	bne.n	801b100 <scalbn+0x48>
 801b0f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b0f4:	bd10      	pop	{r4, pc}
 801b0f6:	ee10 1a90 	vmov	r1, s1
 801b0fa:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801b0fe:	3c36      	subs	r4, #54	; 0x36
 801b100:	4404      	add	r4, r0
 801b102:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801b106:	429c      	cmp	r4, r3
 801b108:	dd0d      	ble.n	801b126 <scalbn+0x6e>
 801b10a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801b1a8 <scalbn+0xf0>
 801b10e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801b1b0 <scalbn+0xf8>
 801b112:	eeb0 6b47 	vmov.f64	d6, d7
 801b116:	ee10 3a90 	vmov	r3, s1
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	fe27 7b05 	vselge.f64	d7, d7, d5
 801b120:	ee27 0b06 	vmul.f64	d0, d7, d6
 801b124:	e7e6      	b.n	801b0f4 <scalbn+0x3c>
 801b126:	2c00      	cmp	r4, #0
 801b128:	dd0a      	ble.n	801b140 <scalbn+0x88>
 801b12a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b12e:	ec53 2b10 	vmov	r2, r3, d0
 801b132:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b136:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801b13a:	ec43 2b10 	vmov	d0, r2, r3
 801b13e:	e7d9      	b.n	801b0f4 <scalbn+0x3c>
 801b140:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801b144:	da19      	bge.n	801b17a <scalbn+0xc2>
 801b146:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b14a:	4298      	cmp	r0, r3
 801b14c:	ee10 3a90 	vmov	r3, s1
 801b150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b154:	dd09      	ble.n	801b16a <scalbn+0xb2>
 801b156:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801b1a8 <scalbn+0xf0>
 801b15a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801b1b0 <scalbn+0xf8>
 801b15e:	eeb0 7b40 	vmov.f64	d7, d0
 801b162:	2b00      	cmp	r3, #0
 801b164:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801b168:	e7bb      	b.n	801b0e2 <scalbn+0x2a>
 801b16a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801b1a0 <scalbn+0xe8>
 801b16e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801b1b8 <scalbn+0x100>
 801b172:	eeb0 7b40 	vmov.f64	d7, d0
 801b176:	2b00      	cmp	r3, #0
 801b178:	e7f4      	b.n	801b164 <scalbn+0xac>
 801b17a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801b17e:	ec53 2b10 	vmov	r2, r3, d0
 801b182:	3436      	adds	r4, #54	; 0x36
 801b184:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801b188:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801b18c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801b1c0 <scalbn+0x108>
 801b190:	ec43 2b10 	vmov	d0, r2, r3
 801b194:	e7a5      	b.n	801b0e2 <scalbn+0x2a>
 801b196:	bf00      	nop
 801b198:	00000000 	.word	0x00000000
 801b19c:	43500000 	.word	0x43500000
 801b1a0:	c2f8f359 	.word	0xc2f8f359
 801b1a4:	01a56e1f 	.word	0x01a56e1f
 801b1a8:	8800759c 	.word	0x8800759c
 801b1ac:	7e37e43c 	.word	0x7e37e43c
 801b1b0:	8800759c 	.word	0x8800759c
 801b1b4:	fe37e43c 	.word	0xfe37e43c
 801b1b8:	c2f8f359 	.word	0xc2f8f359
 801b1bc:	81a56e1f 	.word	0x81a56e1f
 801b1c0:	00000000 	.word	0x00000000
 801b1c4:	3c900000 	.word	0x3c900000
 801b1c8:	ffff3cb0 	.word	0xffff3cb0

0801b1cc <expm1f>:
 801b1cc:	ee10 2a10 	vmov	r2, s0
 801b1d0:	497c      	ldr	r1, [pc, #496]	; (801b3c4 <expm1f+0x1f8>)
 801b1d2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801b1d6:	428b      	cmp	r3, r1
 801b1d8:	d920      	bls.n	801b21c <expm1f+0x50>
 801b1da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b1de:	d902      	bls.n	801b1e6 <expm1f+0x1a>
 801b1e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b1e4:	4770      	bx	lr
 801b1e6:	d105      	bne.n	801b1f4 <expm1f+0x28>
 801b1e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801b1ec:	2a00      	cmp	r2, #0
 801b1ee:	fe20 0a27 	vselge.f32	s0, s0, s15
 801b1f2:	4770      	bx	lr
 801b1f4:	2a00      	cmp	r2, #0
 801b1f6:	db05      	blt.n	801b204 <expm1f+0x38>
 801b1f8:	4973      	ldr	r1, [pc, #460]	; (801b3c8 <expm1f+0x1fc>)
 801b1fa:	428b      	cmp	r3, r1
 801b1fc:	d95c      	bls.n	801b2b8 <expm1f+0xec>
 801b1fe:	2000      	movs	r0, #0
 801b200:	f7fe b97c 	b.w	80194fc <__math_oflowf>
 801b204:	eddf 7a71 	vldr	s15, [pc, #452]	; 801b3cc <expm1f+0x200>
 801b208:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b20c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b214:	d550      	bpl.n	801b2b8 <expm1f+0xec>
 801b216:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b21a:	4770      	bx	lr
 801b21c:	496c      	ldr	r1, [pc, #432]	; (801b3d0 <expm1f+0x204>)
 801b21e:	428b      	cmp	r3, r1
 801b220:	d966      	bls.n	801b2f0 <expm1f+0x124>
 801b222:	496c      	ldr	r1, [pc, #432]	; (801b3d4 <expm1f+0x208>)
 801b224:	428b      	cmp	r3, r1
 801b226:	d847      	bhi.n	801b2b8 <expm1f+0xec>
 801b228:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801b3d8 <expm1f+0x20c>
 801b22c:	2a00      	cmp	r2, #0
 801b22e:	bfa7      	ittee	ge
 801b230:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801b234:	eddf 7a69 	vldrge	s15, [pc, #420]	; 801b3dc <expm1f+0x210>
 801b238:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 801b3e0 <expm1f+0x214>
 801b23c:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801b240:	bfac      	ite	ge
 801b242:	2301      	movge	r3, #1
 801b244:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b248:	ee37 0a67 	vsub.f32	s0, s14, s15
 801b24c:	ee37 7a40 	vsub.f32	s14, s14, s0
 801b250:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b254:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801b258:	ee20 4a25 	vmul.f32	s8, s0, s11
 801b25c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 801b3e4 <expm1f+0x218>
 801b260:	eddf 6a61 	vldr	s13, [pc, #388]	; 801b3e8 <expm1f+0x21c>
 801b264:	ed9f 5a61 	vldr	s10, [pc, #388]	; 801b3ec <expm1f+0x220>
 801b268:	ee20 7a04 	vmul.f32	s14, s0, s8
 801b26c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801b270:	eee7 6a06 	vfma.f32	s13, s14, s12
 801b274:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 801b3f0 <expm1f+0x224>
 801b278:	eea6 6a87 	vfma.f32	s12, s13, s14
 801b27c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801b3f4 <expm1f+0x228>
 801b280:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b284:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b288:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b28c:	eef0 6a46 	vmov.f32	s13, s12
 801b290:	eee5 6a07 	vfma.f32	s13, s10, s14
 801b294:	eee4 4a66 	vfms.f32	s9, s8, s13
 801b298:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801b29c:	eea0 4a64 	vfms.f32	s8, s0, s9
 801b2a0:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801b2a4:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801b2a8:	ee66 6a87 	vmul.f32	s13, s13, s14
 801b2ac:	bb73      	cbnz	r3, 801b30c <expm1f+0x140>
 801b2ae:	eef0 7a47 	vmov.f32	s15, s14
 801b2b2:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801b2b6:	e024      	b.n	801b302 <expm1f+0x136>
 801b2b8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801b2bc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b2c0:	2a00      	cmp	r2, #0
 801b2c2:	fe67 7a87 	vselge.f32	s15, s15, s14
 801b2c6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801b3f8 <expm1f+0x22c>
 801b2ca:	eddf 6a43 	vldr	s13, [pc, #268]	; 801b3d8 <expm1f+0x20c>
 801b2ce:	ee40 7a07 	vmla.f32	s15, s0, s14
 801b2d2:	eeb0 7a40 	vmov.f32	s14, s0
 801b2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b2da:	ee17 3a90 	vmov	r3, s15
 801b2de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b2e2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b2e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b3dc <expm1f+0x210>
 801b2ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b2ee:	e7ab      	b.n	801b248 <expm1f+0x7c>
 801b2f0:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801b2f4:	d208      	bcs.n	801b308 <expm1f+0x13c>
 801b2f6:	eddf 7a41 	vldr	s15, [pc, #260]	; 801b3fc <expm1f+0x230>
 801b2fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 801b2fe:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801b302:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b306:	4770      	bx	lr
 801b308:	2300      	movs	r3, #0
 801b30a:	e7a3      	b.n	801b254 <expm1f+0x88>
 801b30c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801b310:	1c5a      	adds	r2, r3, #1
 801b312:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801b316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b31a:	d106      	bne.n	801b32a <expm1f+0x15e>
 801b31c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b320:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b324:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801b328:	4770      	bx	lr
 801b32a:	2b01      	cmp	r3, #1
 801b32c:	d118      	bne.n	801b360 <expm1f+0x194>
 801b32e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801b332:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b33a:	bf5b      	ittet	pl
 801b33c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801b340:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801b344:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801b348:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801b34c:	bf43      	ittte	mi
 801b34e:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801b352:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801b356:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801b35a:	eeb0 0a46 	vmovpl.f32	s0, s12
 801b35e:	4770      	bx	lr
 801b360:	1c5a      	adds	r2, r3, #1
 801b362:	2a39      	cmp	r2, #57	; 0x39
 801b364:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801b368:	d90b      	bls.n	801b382 <expm1f+0x1b6>
 801b36a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b36e:	ee36 0a40 	vsub.f32	s0, s12, s0
 801b372:	ee10 3a10 	vmov	r3, s0
 801b376:	440b      	add	r3, r1
 801b378:	ee00 3a10 	vmov	s0, r3
 801b37c:	ee30 0a46 	vsub.f32	s0, s0, s12
 801b380:	4770      	bx	lr
 801b382:	2b16      	cmp	r3, #22
 801b384:	dc11      	bgt.n	801b3aa <expm1f+0x1de>
 801b386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b38a:	fa42 f303 	asr.w	r3, r2, r3
 801b38e:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801b392:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b396:	ee07 3a90 	vmov	s15, r3
 801b39a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b39e:	ee10 3a10 	vmov	r3, s0
 801b3a2:	440b      	add	r3, r1
 801b3a4:	ee00 3a10 	vmov	s0, r3
 801b3a8:	4770      	bx	lr
 801b3aa:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801b3ae:	05db      	lsls	r3, r3, #23
 801b3b0:	ee07 3a10 	vmov	s14, r3
 801b3b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b3b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b3bc:	ee37 0a86 	vadd.f32	s0, s15, s12
 801b3c0:	e7ed      	b.n	801b39e <expm1f+0x1d2>
 801b3c2:	bf00      	nop
 801b3c4:	4195b843 	.word	0x4195b843
 801b3c8:	42b17217 	.word	0x42b17217
 801b3cc:	0da24260 	.word	0x0da24260
 801b3d0:	3eb17218 	.word	0x3eb17218
 801b3d4:	3f851591 	.word	0x3f851591
 801b3d8:	3f317180 	.word	0x3f317180
 801b3dc:	3717f7d1 	.word	0x3717f7d1
 801b3e0:	b717f7d1 	.word	0xb717f7d1
 801b3e4:	b457edbb 	.word	0xb457edbb
 801b3e8:	36867e54 	.word	0x36867e54
 801b3ec:	bd088889 	.word	0xbd088889
 801b3f0:	b8a670cd 	.word	0xb8a670cd
 801b3f4:	3ad00d01 	.word	0x3ad00d01
 801b3f8:	3fb8aa3b 	.word	0x3fb8aa3b
 801b3fc:	7149f2ca 	.word	0x7149f2ca

0801b400 <floorf>:
 801b400:	ee10 3a10 	vmov	r3, s0
 801b404:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b408:	3a7f      	subs	r2, #127	; 0x7f
 801b40a:	2a16      	cmp	r2, #22
 801b40c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b410:	dc2a      	bgt.n	801b468 <floorf+0x68>
 801b412:	2a00      	cmp	r2, #0
 801b414:	da11      	bge.n	801b43a <floorf+0x3a>
 801b416:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b478 <floorf+0x78>
 801b41a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b41e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b426:	dd05      	ble.n	801b434 <floorf+0x34>
 801b428:	2b00      	cmp	r3, #0
 801b42a:	da23      	bge.n	801b474 <floorf+0x74>
 801b42c:	4a13      	ldr	r2, [pc, #76]	; (801b47c <floorf+0x7c>)
 801b42e:	2900      	cmp	r1, #0
 801b430:	bf18      	it	ne
 801b432:	4613      	movne	r3, r2
 801b434:	ee00 3a10 	vmov	s0, r3
 801b438:	4770      	bx	lr
 801b43a:	4911      	ldr	r1, [pc, #68]	; (801b480 <floorf+0x80>)
 801b43c:	4111      	asrs	r1, r2
 801b43e:	420b      	tst	r3, r1
 801b440:	d0fa      	beq.n	801b438 <floorf+0x38>
 801b442:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b478 <floorf+0x78>
 801b446:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b44a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b452:	ddef      	ble.n	801b434 <floorf+0x34>
 801b454:	2b00      	cmp	r3, #0
 801b456:	bfbe      	ittt	lt
 801b458:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b45c:	fa40 f202 	asrlt.w	r2, r0, r2
 801b460:	189b      	addlt	r3, r3, r2
 801b462:	ea23 0301 	bic.w	r3, r3, r1
 801b466:	e7e5      	b.n	801b434 <floorf+0x34>
 801b468:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b46c:	d3e4      	bcc.n	801b438 <floorf+0x38>
 801b46e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b472:	4770      	bx	lr
 801b474:	2300      	movs	r3, #0
 801b476:	e7dd      	b.n	801b434 <floorf+0x34>
 801b478:	7149f2ca 	.word	0x7149f2ca
 801b47c:	bf800000 	.word	0xbf800000
 801b480:	007fffff 	.word	0x007fffff

0801b484 <scalbnf>:
 801b484:	ee10 3a10 	vmov	r3, s0
 801b488:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b48c:	d024      	beq.n	801b4d8 <scalbnf+0x54>
 801b48e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b492:	d302      	bcc.n	801b49a <scalbnf+0x16>
 801b494:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b498:	4770      	bx	lr
 801b49a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b49e:	d121      	bne.n	801b4e4 <scalbnf+0x60>
 801b4a0:	4b29      	ldr	r3, [pc, #164]	; (801b548 <scalbnf+0xc4>)
 801b4a2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801b54c <scalbnf+0xc8>
 801b4a6:	4298      	cmp	r0, r3
 801b4a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b4ac:	db15      	blt.n	801b4da <scalbnf+0x56>
 801b4ae:	ee10 3a10 	vmov	r3, s0
 801b4b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b4b6:	3a19      	subs	r2, #25
 801b4b8:	4402      	add	r2, r0
 801b4ba:	2afe      	cmp	r2, #254	; 0xfe
 801b4bc:	dd14      	ble.n	801b4e8 <scalbnf+0x64>
 801b4be:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b550 <scalbnf+0xcc>
 801b4c2:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b554 <scalbnf+0xd0>
 801b4c6:	ee10 3a10 	vmov	r3, s0
 801b4ca:	eeb0 7a67 	vmov.f32	s14, s15
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801b4d4:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b4d8:	4770      	bx	lr
 801b4da:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b558 <scalbnf+0xd4>
 801b4de:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b4e2:	4770      	bx	lr
 801b4e4:	0dd2      	lsrs	r2, r2, #23
 801b4e6:	e7e7      	b.n	801b4b8 <scalbnf+0x34>
 801b4e8:	2a00      	cmp	r2, #0
 801b4ea:	dd06      	ble.n	801b4fa <scalbnf+0x76>
 801b4ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b4f0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b4f4:	ee00 3a10 	vmov	s0, r3
 801b4f8:	4770      	bx	lr
 801b4fa:	f112 0f16 	cmn.w	r2, #22
 801b4fe:	da19      	bge.n	801b534 <scalbnf+0xb0>
 801b500:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b504:	4298      	cmp	r0, r3
 801b506:	ee10 3a10 	vmov	r3, s0
 801b50a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b50e:	dd09      	ble.n	801b524 <scalbnf+0xa0>
 801b510:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801b550 <scalbnf+0xcc>
 801b514:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801b554 <scalbnf+0xd0>
 801b518:	eef0 7a40 	vmov.f32	s15, s0
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801b522:	e7dc      	b.n	801b4de <scalbnf+0x5a>
 801b524:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b558 <scalbnf+0xd4>
 801b528:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b55c <scalbnf+0xd8>
 801b52c:	eef0 7a40 	vmov.f32	s15, s0
 801b530:	2b00      	cmp	r3, #0
 801b532:	e7f4      	b.n	801b51e <scalbnf+0x9a>
 801b534:	3219      	adds	r2, #25
 801b536:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b53a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b53e:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b560 <scalbnf+0xdc>
 801b542:	ee07 3a10 	vmov	s14, r3
 801b546:	e7c5      	b.n	801b4d4 <scalbnf+0x50>
 801b548:	ffff3cb0 	.word	0xffff3cb0
 801b54c:	4c000000 	.word	0x4c000000
 801b550:	7149f2ca 	.word	0x7149f2ca
 801b554:	f149f2ca 	.word	0xf149f2ca
 801b558:	0da24260 	.word	0x0da24260
 801b55c:	8da24260 	.word	0x8da24260
 801b560:	33000000 	.word	0x33000000

0801b564 <__errno>:
 801b564:	4b01      	ldr	r3, [pc, #4]	; (801b56c <__errno+0x8>)
 801b566:	6818      	ldr	r0, [r3, #0]
 801b568:	4770      	bx	lr
 801b56a:	bf00      	nop
 801b56c:	20000128 	.word	0x20000128

0801b570 <_init>:
 801b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b572:	bf00      	nop
 801b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b576:	bc08      	pop	{r3}
 801b578:	469e      	mov	lr, r3
 801b57a:	4770      	bx	lr

0801b57c <_fini>:
 801b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b57e:	bf00      	nop
 801b580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b582:	bc08      	pop	{r3}
 801b584:	469e      	mov	lr, r3
 801b586:	4770      	bx	lr
