
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00018100  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2b0  08018398  08018398  00028398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024648  08024648  00058178  2**0
                  CONTENTS
  4 .ARM          00000000  08024648  08024648  00058178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08024648  08024648  00058178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024648  08024648  00034648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802464c  0802464c  0003464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c8  20000000  08024650  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d158  200007c8  08024e18  000607c8  2**2
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00043180  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00007d78  00000400  08024e18  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001d920  2001d920  00058178  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001d920  2001d920  00058178  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00058178  2**0
                  CONTENTS, READONLY
 20 .comment      000000b8  00000000  00000000  000581a6  2**0
                  CONTENTS, READONLY
 21 DISCARD       000000ca  2001d920  2001d920  00058260  2**2
                  CONTENTS, READONLY
 22 .debug_info   00085830  00000000  00000000  0005832a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 00009dc4  00000000  00000000  000ddb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 00035ac9  00000000  00000000  000e791e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00004600  00000000  00000000  0011d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 00003edc  00000000  00000000  001219e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   0004da7a  00000000  00000000  001258c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00014975  00000000  00000000  0017333d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000e2d4  00000000  00000000  00187cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loc    00001c3a  00000000  00000000  00195f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_ranges 00000050  00000000  00000000  00197bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200007c8 	.word	0x200007c8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018310 	.word	0x08018310

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200007cc 	.word	0x200007cc
 80002d4:	08018310 	.word	0x08018310

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000660:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <dbToATableLookup+0x6c>)
 8000664:	edd3 7a00 	vldr	s15, [r3]
 8000668:	ee20 0a27 	vmul.f32	s0, s0, s15
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <dbToATableLookup+0x70>)
 800066e:	edd3 0a00 	vldr	s1, [r3]
 8000672:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80006d4 <dbToATableLookup+0x74>
 8000676:	ee70 0a60 	vsub.f32	s1, s0, s1
 800067a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80006d8 <dbToATableLookup+0x78>
 800067e:	f011 f801 	bl	8011684 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000682:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000686:	ee17 3a90 	vmov	r3, s15
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 800068a:	1c59      	adds	r1, r3, #1
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
 800068c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8000690:	d301      	bcc.n	8000696 <dbToATableLookup+0x36>
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
 8000692:	f643 71ff 	movw	r1, #16383	; 0x3fff
    }
    float alpha = floatIndex - (float)inDBIndex;
 8000696:	ee07 3a90 	vmov	s15, r3
 800069a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800069e:	ee70 7a67 	vsub.f32	s15, s0, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <dbToATableLookup+0x7c>)
 80006a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80006a8:	ed93 0a00 	vldr	s0, [r3]
 80006ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006b4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80006b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80006bc:	ed92 7a00 	vldr	s14, [r2]
 80006c0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80006c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80006c8:	bd08      	pop	{r3, pc}
 80006ca:	bf00      	nop
 80006cc:	20000dc4 	.word	0x20000dc4
 80006d0:	20000dc0 	.word	0x20000dc0
 80006d4:	467ffc00 	.word	0x467ffc00
 80006d8:	00000000 	.word	0x00000000
 80006dc:	30002000 	.word	0x30002000

080006e0 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 80006e0:	b508      	push	{r3, lr}
 80006e2:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80006e6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000744 <mtofTableLookup+0x64>
 80006ea:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000748 <mtofTableLookup+0x68>
 80006ee:	f010 ffc9 	bl	8011684 <LEAF_clip>
 80006f2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800074c <mtofTableLookup+0x6c>
 80006f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80006fa:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000750 <mtofTableLookup+0x70>
 80006fe:	ee77 7a87 	vadd.f32	s15, s15, s14
	int tempIndexI = (int)tempIndexF;
 8000702:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000706:	ee17 3a10 	vmov	r3, s14
	tempIndexF = tempIndexF -tempIndexI;
 800070a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800070e:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000712:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <mtofTableLookup+0x74>)
 8000718:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800071c:	edd1 6a00 	vldr	s13, [r1]
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000720:	3301      	adds	r3, #1
 8000722:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000726:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800072a:	ed92 7a00 	vldr	s14, [r2]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 800072e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000732:	ee30 0a67 	vsub.f32	s0, s0, s15
 8000736:	ee20 0a26 	vmul.f32	s0, s0, s13
 800073a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800073e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000742:	bd08      	pop	{r3, pc}
 8000744:	43230000 	.word	0x43230000
 8000748:	c3230000 	.word	0xc3230000
 800074c:	42c80000 	.word	0x42c80000
 8000750:	46800000 	.word	0x46800000
 8000754:	30022000 	.word	0x30022000

08000758 <audioInit>:


void audioInit()
{
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 800075a:	4c9c      	ldr	r4, [pc, #624]	; (80009cc <audioInit+0x274>)
 800075c:	4b9c      	ldr	r3, [pc, #624]	; (80009d0 <audioInit+0x278>)
 800075e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000762:	499c      	ldr	r1, [pc, #624]	; (80009d4 <audioInit+0x27c>)
 8000764:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 80009d8 <audioInit+0x280>
 8000768:	4620      	mov	r0, r4
 800076a:	f014 fddb 	bl	8015324 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800076e:	4623      	mov	r3, r4
 8000770:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000774:	4999      	ldr	r1, [pc, #612]	; (80009dc <audioInit+0x284>)
 8000776:	489a      	ldr	r0, [pc, #616]	; (80009e0 <audioInit+0x288>)
 8000778:	f011 fc74 	bl	8012064 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800077c:	4623      	mov	r3, r4
 800077e:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000782:	4998      	ldr	r1, [pc, #608]	; (80009e4 <audioInit+0x28c>)
 8000784:	4898      	ldr	r0, [pc, #608]	; (80009e8 <audioInit+0x290>)
 8000786:	f011 fc6d 	bl	8012064 <tMempool_init>

	leaf.clearOnAllocation = 1;
 800078a:	2301      	movs	r3, #1
 800078c:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800078e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000792:	eddf 1a96 	vldr	s3, [pc, #600]	; 80009ec <audioInit+0x294>
 8000796:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800079a:	eddf 0a95 	vldr	s1, [pc, #596]	; 80009f0 <audioInit+0x298>
 800079e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 80009f4 <audioInit+0x29c>
 80007a2:	4895      	ldr	r0, [pc, #596]	; (80009f8 <audioInit+0x2a0>)
 80007a4:	f011 f876 	bl	8011894 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80007a8:	4b94      	ldr	r3, [pc, #592]	; (80009fc <audioInit+0x2a4>)
 80007aa:	4a95      	ldr	r2, [pc, #596]	; (8000a00 <audioInit+0x2a8>)
 80007ac:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 12; i++)
 80007ae:	2300      	movs	r3, #0
 80007b0:	e004      	b.n	80007bc <audioInit+0x64>
	{
		previousStringInputs[i]	= 0;
 80007b2:	4a94      	ldr	r2, [pc, #592]	; (8000a04 <audioInit+0x2ac>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 12; i++)
 80007ba:	3301      	adds	r3, #1
 80007bc:	2b0b      	cmp	r3, #11
 80007be:	ddf8      	ble.n	80007b2 <audioInit+0x5a>





	for (int i = 0; i < 256; i++)
 80007c0:	2400      	movs	r4, #0
 80007c2:	e00f      	b.n	80007e4 <audioInit+0x8c>
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 80007c4:	f017 fdcc 	bl	8018360 <__randomNumber_veneer>
 80007c8:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8000a08 <audioInit+0x2b0>
 80007cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80007d0:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8000a0c <audioInit+0x2b4>
 80007d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80007d8:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <audioInit+0x2b8>)
 80007da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80007de:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 256; i++)
 80007e2:	3401      	adds	r4, #1
 80007e4:	2cff      	cmp	r4, #255	; 0xff
 80007e6:	dded      	ble.n	80007c4 <audioInit+0x6c>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 80007e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80007ec:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8000a14 <audioInit+0x2bc>
 80007f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f4:	4888      	ldr	r0, [pc, #544]	; (8000a18 <audioInit+0x2c0>)
 80007f6:	f011 fa07 	bl	8011c08 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 80007fa:	eddf 0a88 	vldr	s1, [pc, #544]	; 8000a1c <audioInit+0x2c4>
 80007fe:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8000a20 <audioInit+0x2c8>
 8000802:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000806:	4887      	ldr	r0, [pc, #540]	; (8000a24 <audioInit+0x2cc>)
 8000808:	f011 fa3a 	bl	8011c80 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 800080c:	4b86      	ldr	r3, [pc, #536]	; (8000a28 <audioInit+0x2d0>)
 800080e:	4a87      	ldr	r2, [pc, #540]	; (8000a2c <audioInit+0x2d4>)
 8000810:	601a      	str	r2, [r3, #0]
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000812:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <audioInit+0x2d8>)
 8000814:	4a87      	ldr	r2, [pc, #540]	; (8000a34 <audioInit+0x2dc>)
 8000816:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000818:	4b87      	ldr	r3, [pc, #540]	; (8000a38 <audioInit+0x2e0>)
 800081a:	4a88      	ldr	r2, [pc, #544]	; (8000a3c <audioInit+0x2e4>)
 800081c:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 800081e:	4b88      	ldr	r3, [pc, #544]	; (8000a40 <audioInit+0x2e8>)
 8000820:	4a88      	ldr	r2, [pc, #544]	; (8000a44 <audioInit+0x2ec>)
 8000822:	601a      	str	r2, [r3, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000824:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000828:	eddf 0a87 	vldr	s1, [pc, #540]	; 8000a48 <audioInit+0x2f0>
 800082c:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8000a4c <audioInit+0x2f4>
 8000830:	4887      	ldr	r0, [pc, #540]	; (8000a50 <audioInit+0x2f8>)
 8000832:	f011 f975 	bl	8011b20 <LEAF_generate_mtof>





	if (numStrings == 6)
 8000836:	4b87      	ldr	r3, [pc, #540]	; (8000a54 <audioInit+0x2fc>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b06      	cmp	r3, #6
 800083c:	d013      	beq.n	8000866 <audioInit+0x10e>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 800083e:	2b0a      	cmp	r3, #10
 8000840:	d019      	beq.n	8000876 <audioInit+0x11e>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000842:	4b85      	ldr	r3, [pc, #532]	; (8000a58 <audioInit+0x300>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4a84      	ldr	r2, [pc, #528]	; (8000a5c <audioInit+0x304>)
 800084a:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
 800084c:	4b84      	ldr	r3, [pc, #528]	; (8000a60 <audioInit+0x308>)
 800084e:	2202      	movs	r2, #2
 8000850:	701a      	strb	r2, [r3, #0]
	}




	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000852:	495e      	ldr	r1, [pc, #376]	; (80009cc <audioInit+0x274>)
 8000854:	eddf 0a83 	vldr	s1, [pc, #524]	; 8000a64 <audioInit+0x30c>
 8000858:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80009f0 <audioInit+0x298>
 800085c:	4882      	ldr	r0, [pc, #520]	; (8000a68 <audioInit+0x310>)
 800085e:	f00e f8e9 	bl	800ea34 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 8000862:	2400      	movs	r4, #0
 8000864:	e02b      	b.n	80008be <audioInit+0x166>
		firstString = boardNumber;
 8000866:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <audioInit+0x300>)
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	4b7c      	ldr	r3, [pc, #496]	; (8000a5c <audioInit+0x304>)
 800086c:	601a      	str	r2, [r3, #0]
		numStringsThisBoard = 1;
 800086e:	4b7c      	ldr	r3, [pc, #496]	; (8000a60 <audioInit+0x308>)
 8000870:	2201      	movs	r2, #1
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e7ed      	b.n	8000852 <audioInit+0xfa>
		if (boardNumber == 0)
 8000876:	4b78      	ldr	r3, [pc, #480]	; (8000a58 <audioInit+0x300>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b933      	cbnz	r3, 800088a <audioInit+0x132>
			firstString = 0;
 800087c:	4b77      	ldr	r3, [pc, #476]	; (8000a5c <audioInit+0x304>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			numStringsThisBoard = 1;
 8000882:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <audioInit+0x308>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
 8000888:	e7e3      	b.n	8000852 <audioInit+0xfa>
		else if (boardNumber == 1)
 800088a:	2b01      	cmp	r3, #1
 800088c:	d007      	beq.n	800089e <audioInit+0x146>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 800088e:	3b01      	subs	r3, #1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4a72      	ldr	r2, [pc, #456]	; (8000a5c <audioInit+0x304>)
 8000894:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <audioInit+0x308>)
 8000898:	2202      	movs	r2, #2
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e7d9      	b.n	8000852 <audioInit+0xfa>
			firstString = 1;
 800089e:	4a6f      	ldr	r2, [pc, #444]	; (8000a5c <audioInit+0x304>)
 80008a0:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
 80008a2:	4a6f      	ldr	r2, [pc, #444]	; (8000a60 <audioInit+0x308>)
 80008a4:	7013      	strb	r3, [r2, #0]
 80008a6:	e7d4      	b.n	8000852 <audioInit+0xfa>
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80008a8:	4948      	ldr	r1, [pc, #288]	; (80009cc <audioInit+0x274>)
 80008aa:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8000a64 <audioInit+0x30c>
 80008ae:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80009f0 <audioInit+0x298>
 80008b2:	486e      	ldr	r0, [pc, #440]	; (8000a6c <audioInit+0x314>)
 80008b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008b8:	f00e f8bc 	bl	800ea34 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 80008bc:	3401      	adds	r4, #1
 80008be:	2c0b      	cmp	r4, #11
 80008c0:	ddf2      	ble.n	80008a8 <audioInit+0x150>
	}
	for (int i = 0; i < 10; i++)
 80008c2:	2400      	movs	r4, #0
 80008c4:	e00a      	b.n	80008dc <audioInit+0x184>
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 80008c6:	4941      	ldr	r1, [pc, #260]	; (80009cc <audioInit+0x274>)
 80008c8:	eddf 0a66 	vldr	s1, [pc, #408]	; 8000a64 <audioInit+0x30c>
 80008cc:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80009f0 <audioInit+0x298>
 80008d0:	4867      	ldr	r0, [pc, #412]	; (8000a70 <audioInit+0x318>)
 80008d2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008d6:	f00e f8ad 	bl	800ea34 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 80008da:	3401      	adds	r4, #1
 80008dc:	2c09      	cmp	r4, #9
 80008de:	ddf2      	ble.n	80008c6 <audioInit+0x16e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80008e0:	2400      	movs	r4, #0
 80008e2:	e015      	b.n	8000910 <audioInit+0x1b8>
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008e4:	4d39      	ldr	r5, [pc, #228]	; (80009cc <audioInit+0x274>)
 80008e6:	00a6      	lsls	r6, r4, #2
 80008e8:	4629      	mov	r1, r5
 80008ea:	eddf 0a62 	vldr	s1, [pc, #392]	; 8000a74 <audioInit+0x31c>
 80008ee:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80009f0 <audioInit+0x298>
 80008f2:	4861      	ldr	r0, [pc, #388]	; (8000a78 <audioInit+0x320>)
 80008f4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80008f8:	f00e f89c 	bl	800ea34 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80008fc:	4629      	mov	r1, r5
 80008fe:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8000a7c <audioInit+0x324>
 8000902:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8000a80 <audioInit+0x328>
 8000906:	485f      	ldr	r0, [pc, #380]	; (8000a84 <audioInit+0x32c>)
 8000908:	4430      	add	r0, r6
 800090a:	f00c ff0d 	bl	800d728 <tEnvelopeFollower_init>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800090e:	3401      	adds	r4, #1
 8000910:	2c01      	cmp	r4, #1
 8000912:	dde7      	ble.n	80008e4 <audioInit+0x18c>
	}

	audioInitAdditive();
 8000914:	f017 fd28 	bl	8018368 <__audioInitAdditive_veneer>
	audioInitString1();
 8000918:	f017 fd16 	bl	8018348 <__audioInitString1_veneer>
	audioInitVocal();
 800091c:	f017 fd1c 	bl	8018358 <__audioInitVocal_veneer>
	audioInitSynth();
 8000920:	f002 f9a8 	bl	8002c74 <audioInitSynth>

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000924:	2400      	movs	r4, #0
 8000926:	e03e      	b.n	80009a6 <audioInit+0x24e>
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000928:	4d28      	ldr	r5, [pc, #160]	; (80009cc <audioInit+0x274>)
 800092a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80009f0 <audioInit+0x298>
 800092e:	462b      	mov	r3, r5
 8000930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000934:	4930      	ldr	r1, [pc, #192]	; (80009f8 <audioInit+0x2a0>)
 8000936:	eddf 1a54 	vldr	s3, [pc, #336]	; 8000a88 <audioInit+0x330>
 800093a:	eeb0 1a40 	vmov.f32	s2, s0
 800093e:	eddf 0a37 	vldr	s1, [pc, #220]	; 8000a1c <audioInit+0x2c4>
 8000942:	4852      	ldr	r0, [pc, #328]	; (8000a8c <audioInit+0x334>)
 8000944:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000948:	f00d fd94 	bl	800e474 <tADSRT_init>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 800094c:	4f50      	ldr	r7, [pc, #320]	; (8000a90 <audioInit+0x338>)
 800094e:	462a      	mov	r2, r5
 8000950:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000954:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8000a94 <audioInit+0x33c>
 8000958:	2103      	movs	r1, #3
 800095a:	4638      	mov	r0, r7
 800095c:	f00f f98a 	bl	800fc74 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000960:	4e4d      	ldr	r6, [pc, #308]	; (8000a98 <audioInit+0x340>)
 8000962:	462a      	mov	r2, r5
 8000964:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8000a9c <audioInit+0x344>
 8000968:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8000aa0 <audioInit+0x348>
 800096c:	2101      	movs	r1, #1
 800096e:	4630      	mov	r0, r6
 8000970:	f00f f980 	bl	800fc74 <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
 8000974:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000aa4 <audioInit+0x34c>
 8000978:	4630      	mov	r0, r6
 800097a:	f00e feff 	bl	800f77c <tVZFilter_setFreq>


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 800097e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000aa8 <audioInit+0x350>
 8000982:	f011 f8f7 	bl	8011b74 <faster_mtof>
 8000986:	4638      	mov	r0, r7
 8000988:	f00e fef8 	bl	800f77c <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 800098c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000aac <audioInit+0x354>
 8000990:	f011 f8f0 	bl	8011b74 <faster_mtof>
 8000994:	4630      	mov	r0, r6
 8000996:	f00e fef1 	bl	800f77c <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 800099a:	462a      	mov	r2, r5
 800099c:	2100      	movs	r1, #0
 800099e:	4844      	ldr	r0, [pc, #272]	; (8000ab0 <audioInit+0x358>)
 80009a0:	f011 ff17 	bl	80127d2 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80009a4:	3401      	adds	r4, #1
 80009a6:	2c01      	cmp	r4, #1
 80009a8:	ddbe      	ble.n	8000928 <audioInit+0x1d0>

	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	e004      	b.n	80009b8 <audioInit+0x260>
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 80009ae:	4a41      	ldr	r2, [pc, #260]	; (8000ab4 <audioInit+0x35c>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80009b6:	3301      	adds	r3, #1
 80009b8:	2bff      	cmp	r3, #255	; 0xff
 80009ba:	ddf8      	ble.n	80009ae <audioInit+0x256>
	}

	audioFrameFunction = audioFrameSynth;
 80009bc:	4b3e      	ldr	r3, [pc, #248]	; (8000ab8 <audioInit+0x360>)
 80009be:	4a3f      	ldr	r2, [pc, #252]	; (8000abc <audioInit+0x364>)
 80009c0:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f002 fefc 	bl	80037c0 <HAL_Delay>

}
 80009c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20004e5c 	.word	0x20004e5c
 80009d0:	00001841 	.word	0x00001841
 80009d4:	20005344 	.word	0x20005344
 80009d8:	473b8000 	.word	0x473b8000
 80009dc:	24040000 	.word	0x24040000
 80009e0:	20004eb0 	.word	0x20004eb0
 80009e4:	60000000 	.word	0x60000000
 80009e8:	20004e58 	.word	0x20004e58
 80009ec:	ba51b717 	.word	0xba51b717
 80009f0:	00000000 	.word	0x00000000
 80009f4:	3a83126f 	.word	0x3a83126f
 80009f8:	20000dc8 	.word	0x20000dc8
 80009fc:	20004dc8 	.word	0x20004dc8
 8000a00:	457ff000 	.word	0x457ff000
 8000a04:	20004f28 	.word	0x20004f28
 8000a08:	3ecccccd 	.word	0x3ecccccd
 8000a0c:	3f4ccccd 	.word	0x3f4ccccd
 8000a10:	20004f40 	.word	0x20004f40
 8000a14:	3727c5ac 	.word	0x3727c5ac
 8000a18:	30012000 	.word	0x30012000
 8000a1c:	42480000 	.word	0x42480000
 8000a20:	c2b40000 	.word	0xc2b40000
 8000a24:	30002000 	.word	0x30002000
 8000a28:	20000d9c 	.word	0x20000d9c
 8000a2c:	467ffca8 	.word	0x467ffca8
 8000a30:	20000d98 	.word	0x20000d98
 8000a34:	3e27c37b 	.word	0x3e27c37b
 8000a38:	20000dc4 	.word	0x20000dc4
 8000a3c:	42ea0af9 	.word	0x42ea0af9
 8000a40:	20000dc0 	.word	0x20000dc0
 8000a44:	c6248fb7 	.word	0xc6248fb7
 8000a48:	4323d666 	.word	0x4323d666
 8000a4c:	c323d666 	.word	0xc323d666
 8000a50:	30022000 	.word	0x30022000
 8000a54:	200004b0 	.word	0x200004b0
 8000a58:	20013ebd 	.word	0x20013ebd
 8000a5c:	20004ddc 	.word	0x20004ddc
 8000a60:	200004b1 	.word	0x200004b1
 8000a64:	3a03126f 	.word	0x3a03126f
 8000a68:	20013e24 	.word	0x20013e24
 8000a6c:	20004e28 	.word	0x20004e28
 8000a70:	20004ef4 	.word	0x20004ef4
 8000a74:	3c23d70a 	.word	0x3c23d70a
 8000a78:	20000db4 	.word	0x20000db4
 8000a7c:	3f7fd220 	.word	0x3f7fd220
 8000a80:	38d1b717 	.word	0x38d1b717
 8000a84:	20000dac 	.word	0x20000dac
 8000a88:	43480000 	.word	0x43480000
 8000a8c:	20004dd4 	.word	0x20004dd4
 8000a90:	20004ebc 	.word	0x20004ebc
 8000a94:	44bb8000 	.word	0x44bb8000
 8000a98:	20004ec0 	.word	0x20004ec0
 8000a9c:	3f666666 	.word	0x3f666666
 8000aa0:	44480000 	.word	0x44480000
 8000aa4:	45504000 	.word	0x45504000
 8000aa8:	42e66666 	.word	0x42e66666
 8000aac:	42cccccd 	.word	0x42cccccd
 8000ab0:	20004eb4 	.word	0x20004eb4
 8000ab4:	30000000 	.word	0x30000000
 8000ab8:	20000da0 	.word	0x20000da0
 8000abc:	000075e1 	.word	0x000075e1

08000ac0 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f002 fe7b 	bl	80037c0 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ace:	4903      	ldr	r1, [pc, #12]	; (8000adc <audioStart+0x1c>)
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f008 f8f9 	bl	8008cc8 <HAL_SAI_Transmit_DMA>
 8000ad6:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <audioStart+0x20>)
 8000ad8:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000ada:	bd10      	pop	{r4, pc}
 8000adc:	30000000 	.word	0x30000000
 8000ae0:	20013e14 	.word	0x20013e14

08000ae4 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af2:	4843      	ldr	r0, [pc, #268]	; (8000c00 <AudioCodec_init+0x11c>)
 8000af4:	f004 fc01 	bl	80052fa <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f002 fe61 	bl	80037c0 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000afe:	4c41      	ldr	r4, [pc, #260]	; (8000c04 <AudioCodec_init+0x120>)
 8000b00:	f04f 0a07 	mov.w	sl, #7
 8000b04:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8000b08:	f04f 0b03 	mov.w	fp, #3
 8000b0c:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b10:	4e3d      	ldr	r6, [pc, #244]	; (8000c08 <AudioCodec_init+0x124>)
 8000b12:	4f3e      	ldr	r7, [pc, #248]	; (8000c0c <AudioCodec_init+0x128>)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	8833      	ldrh	r3, [r6, #0]
 8000b1a:	4622      	mov	r2, r4
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f004 fdd6 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000b24:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000c14 <AudioCodec_init+0x130>
 8000b28:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8000b2c:	f04f 0901 	mov.w	r9, #1
 8000b30:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41;
 8000b34:	2341      	movs	r3, #65	; 0x41
 8000b36:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	8833      	ldrh	r3, [r6, #0]
 8000b3e:	4622      	mov	r2, r4
 8000b40:	2120      	movs	r1, #32
 8000b42:	4628      	mov	r0, r5
 8000b44:	f004 fdc4 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000b48:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8000b4c:	f04f 0302 	mov.w	r3, #2
 8000b50:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x00;
 8000b52:	2300      	movs	r3, #0
 8000b54:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	8833      	ldrh	r3, [r6, #0]
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	2120      	movs	r1, #32
 8000b60:	4628      	mov	r0, r5
 8000b62:	f004 fdb5 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000b66:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8000b6a:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8000b6e:	2379      	movs	r3, #121	; 0x79
 8000b70:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	8833      	ldrh	r3, [r6, #0]
 8000b78:	4622      	mov	r2, r4
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	f004 fda7 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000b82:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8000b86:	2304      	movs	r3, #4
 8000b88:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000b8a:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	8833      	ldrh	r3, [r6, #0]
 8000b94:	4622      	mov	r2, r4
 8000b96:	2120      	movs	r1, #32
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f004 fd99 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000b9e:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000ba6:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	8833      	ldrh	r3, [r6, #0]
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	f004 fd8b 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000bba:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8000bc2:	2310      	movs	r3, #16
 8000bc4:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	8833      	ldrh	r3, [r6, #0]
 8000bcc:	4622      	mov	r2, r4
 8000bce:	2120      	movs	r1, #32
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f004 fd7d 	bl	80056d0 <HAL_I2C_Master_Transmit>
 8000bd6:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8000bda:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8000bde:	f04f 0302 	mov.w	r3, #2
 8000be2:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	8833      	ldrh	r3, [r6, #0]
 8000bea:	4622      	mov	r2, r4
 8000bec:	2120      	movs	r1, #32
 8000bee:	4628      	mov	r0, r5
 8000bf0:	f004 fd6e 	bl	80056d0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <AudioCodec_init+0x12c>)
 8000bf6:	f8c3 9000 	str.w	r9, [r3]

}
 8000bfa:	b003      	add	sp, #12
 8000bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c00:	58020800 	.word	0x58020800
 8000c04:	20013e2c 	.word	0x20013e2c
 8000c08:	20000720 	.word	0x20000720
 8000c0c:	2000071c 	.word	0x2000071c
 8000c10:	20000dbc 	.word	0x20000dbc
 8000c14:	20013e2e 	.word	0x20013e2e

08000c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c18:	b500      	push	{lr}
 8000c1a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_DMA_Init+0x74>)
 8000c1e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000c2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	9301      	str	r3, [sp, #4]
 8000c34:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	210a      	movs	r1, #10
 8000c3a:	200c      	movs	r0, #12
 8000c3c:	f002 fdf6 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f002 fe29 	bl	8003898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2109      	movs	r1, #9
 8000c4a:	200d      	movs	r0, #13
 8000c4c:	f002 fdee 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c50:	200d      	movs	r0, #13
 8000c52:	f002 fe21 	bl	8003898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	200e      	movs	r0, #14
 8000c5c:	f002 fde6 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c60:	200e      	movs	r0, #14
 8000c62:	f002 fe19 	bl	8003898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2107      	movs	r1, #7
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f002 fdde 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c70:	200f      	movs	r0, #15
 8000c72:	f002 fe11 	bl	8003898 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	4611      	mov	r1, r2
 8000c7a:	2010      	movs	r0, #16
 8000c7c:	f002 fdd6 	bl	800382c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c80:	2010      	movs	r0, #16
 8000c82:	f002 fe09 	bl	8003898 <HAL_NVIC_EnableIRQ>

}
 8000c86:	b003      	add	sp, #12
 8000c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c8c:	58024400 	.word	0x58024400

08000c90 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c92:	b0b9      	sub	sp, #228	; 0xe4
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2300      	movs	r3, #0
 8000c96:	9333      	str	r3, [sp, #204]	; 0xcc
 8000c98:	9334      	str	r3, [sp, #208]	; 0xd0
 8000c9a:	9335      	str	r3, [sp, #212]	; 0xd4
 8000c9c:	9336      	str	r3, [sp, #216]	; 0xd8
 8000c9e:	9337      	str	r3, [sp, #220]	; 0xdc
  if (FMC_Initialized) {
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_FMC_MspInit+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	b10b      	cbz	r3, 8000caa <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ca6:	b039      	add	sp, #228	; 0xe4
 8000ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <HAL_FMC_MspInit+0xd4>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	22c0      	movs	r2, #192	; 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	a802      	add	r0, sp, #8
 8000cb6:	f015 f827 	bl	8015d08 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000cba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc4:	a802      	add	r0, sp, #8
 8000cc6:	f006 f8af 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d147      	bne.n	8000d5e <HAL_FMC_MspInit+0xce>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <HAL_FMC_MspInit+0xd8>)
 8000cd0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000cdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ce8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cec:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2702      	movs	r7, #2
 8000cf0:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2503      	movs	r5, #3
 8000cf8:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cfa:	240c      	movs	r4, #12
 8000cfc:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfe:	a933      	add	r1, sp, #204	; 0xcc
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <HAL_FMC_MspInit+0xdc>)
 8000d02:	f004 f9e3 	bl	80050cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000d06:	2319      	movs	r3, #25
 8000d08:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d10:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	a933      	add	r1, sp, #204	; 0xcc
 8000d14:	4816      	ldr	r0, [pc, #88]	; (8000d70 <HAL_FMC_MspInit+0xe0>)
 8000d16:	f004 f9d9 	bl	80050cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d1a:	f248 1337 	movw	r3, #33079	; 0x8137
 8000d1e:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d26:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d28:	a933      	add	r1, sp, #204	; 0xcc
 8000d2a:	4812      	ldr	r0, [pc, #72]	; (8000d74 <HAL_FMC_MspInit+0xe4>)
 8000d2c:	f004 f9ce 	bl	80050cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d30:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d34:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3c:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3e:	a933      	add	r1, sp, #204	; 0xcc
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <HAL_FMC_MspInit+0xe8>)
 8000d42:	f004 f9c3 	bl	80050cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d46:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d4a:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d52:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	a933      	add	r1, sp, #204	; 0xcc
 8000d56:	4809      	ldr	r0, [pc, #36]	; (8000d7c <HAL_FMC_MspInit+0xec>)
 8000d58:	f004 f9b8 	bl	80050cc <HAL_GPIO_Init>
 8000d5c:	e7a3      	b.n	8000ca6 <HAL_FMC_MspInit+0x16>
      Error_Handler();
 8000d5e:	f001 fbf5 	bl	800254c <Error_Handler>
 8000d62:	e7b4      	b.n	8000cce <HAL_FMC_MspInit+0x3e>
 8000d64:	20013e30 	.word	0x20013e30
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58021400 	.word	0x58021400
 8000d70:	58020800 	.word	0x58020800
 8000d74:	58021800 	.word	0x58021800
 8000d78:	58021000 	.word	0x58021000
 8000d7c:	58020c00 	.word	0x58020c00

08000d80 <MX_FMC_Init>:
{
 8000d80:	b500      	push	{lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d84:	2300      	movs	r3, #0
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	9303      	str	r3, [sp, #12]
 8000d8c:	9304      	str	r3, [sp, #16]
 8000d8e:	9305      	str	r3, [sp, #20]
 8000d90:	9306      	str	r3, [sp, #24]
 8000d92:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d94:	4817      	ldr	r0, [pc, #92]	; (8000df4 <MX_FMC_Init+0x74>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <MX_FMC_Init+0x78>)
 8000d98:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000d9a:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000da0:	2208      	movs	r2, #8
 8000da2:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000da4:	2210      	movs	r2, #16
 8000da6:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000db2:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000db4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000db8:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dbe:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dc0:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000dca:	2104      	movs	r1, #4
 8000dcc:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000dce:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000dd0:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000dd2:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000dd4:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dd6:	4469      	add	r1, sp
 8000dd8:	f009 f8c8 	bl	8009f6c <HAL_SDRAM_Init>
 8000ddc:	b930      	cbnz	r0, 8000dec <MX_FMC_Init+0x6c>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000dde:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000de2:	f002 fd07 	bl	80037f4 <HAL_SetFMCMemorySwappingConfig>
}
 8000de6:	b009      	add	sp, #36	; 0x24
 8000de8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000dec:	f001 fbae 	bl	800254c <Error_Handler>
 8000df0:	e7f5      	b.n	8000dde <MX_FMC_Init+0x5e>
 8000df2:	bf00      	nop
 8000df4:	20013e34 	.word	0x20013e34
 8000df8:	52004140 	.word	0x52004140

08000dfc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dfe:	f7ff ff47 	bl	8000c90 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e02:	bd08      	pop	{r3, pc}

08000e04 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e08:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	9409      	str	r4, [sp, #36]	; 0x24
 8000e0e:	940a      	str	r4, [sp, #40]	; 0x28
 8000e10:	940b      	str	r4, [sp, #44]	; 0x2c
 8000e12:	940c      	str	r4, [sp, #48]	; 0x30
 8000e14:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e16:	4b73      	ldr	r3, [pc, #460]	; (8000fe4 <MX_GPIO_Init+0x1e0>)
 8000e18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e1c:	f042 0210 	orr.w	r2, r2, #16
 8000e20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e28:	f002 0210 	and.w	r2, r2, #16
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e34:	f042 0204 	orr.w	r2, r2, #4
 8000e38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e40:	f002 0204 	and.w	r2, r2, #4
 8000e44:	9202      	str	r2, [sp, #8]
 8000e46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e4c:	f042 0220 	orr.w	r2, r2, #32
 8000e50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e58:	f002 0220 	and.w	r2, r2, #32
 8000e5c:	9203      	str	r2, [sp, #12]
 8000e5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e70:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e74:	9204      	str	r2, [sp, #16]
 8000e76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e88:	f002 0201 	and.w	r2, r2, #1
 8000e8c:	9205      	str	r2, [sp, #20]
 8000e8e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e94:	f042 0202 	orr.w	r2, r2, #2
 8000e98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ea0:	f002 0202 	and.w	r2, r2, #2
 8000ea4:	9206      	str	r2, [sp, #24]
 8000ea6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ebc:	9207      	str	r2, [sp, #28]
 8000ebe:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec4:	f042 0208 	orr.w	r2, r2, #8
 8000ec8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	9308      	str	r3, [sp, #32]
 8000ed6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ed8:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8000ff8 <MX_GPIO_Init+0x1f4>
 8000edc:	4622      	mov	r2, r4
 8000ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee2:	4648      	mov	r0, r9
 8000ee4:	f004 fa09 	bl	80052fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ee8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8000ffc <MX_GPIO_Init+0x1f8>
 8000eec:	4622      	mov	r2, r4
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	f004 fa02 	bl	80052fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ef6:	4f3c      	ldr	r7, [pc, #240]	; (8000fe8 <MX_GPIO_Init+0x1e4>)
 8000ef8:	4622      	mov	r2, r4
 8000efa:	2110      	movs	r1, #16
 8000efc:	4638      	mov	r0, r7
 8000efe:	f004 f9fc 	bl	80052fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000f02:	f242 0320 	movw	r3, #8224	; 0x2020
 8000f06:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	2501      	movs	r5, #1
 8000f0c:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	a909      	add	r1, sp, #36	; 0x24
 8000f10:	4648      	mov	r0, r9
 8000f12:	f004 f8db 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f1a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	a909      	add	r1, sp, #36	; 0x24
 8000f24:	4648      	mov	r0, r9
 8000f26:	f004 f8d1 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000f2a:	f248 03c6 	movw	r3, #32966	; 0x80c6
 8000f2e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f30:	2603      	movs	r6, #3
 8000f32:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	a909      	add	r1, sp, #36	; 0x24
 8000f38:	4648      	mov	r0, r9
 8000f3a:	f004 f8c7 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f42:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f44:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f48:	a909      	add	r1, sp, #36	; 0x24
 8000f4a:	4828      	ldr	r0, [pc, #160]	; (8000fec <MX_GPIO_Init+0x1e8>)
 8000f4c:	f004 f8be 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f50:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	a909      	add	r1, sp, #36	; 0x24
 8000f58:	4640      	mov	r0, r8
 8000f5a:	f004 f8b7 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f5e:	f04f 0902 	mov.w	r9, #2
 8000f62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	a909      	add	r1, sp, #36	; 0x24
 8000f6e:	4640      	mov	r0, r8
 8000f70:	f004 f8ac 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000f74:	f649 730c 	movw	r3, #40716	; 0x9f0c
 8000f78:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	a909      	add	r1, sp, #36	; 0x24
 8000f80:	4640      	mov	r0, r8
 8000f82:	f004 f8a3 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f86:	f24f 33e5 	movw	r3, #62437	; 0xf3e5
 8000f8a:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	a909      	add	r1, sp, #36	; 0x24
 8000f92:	4638      	mov	r0, r7
 8000f94:	f004 f89a 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9e:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa0:	a909      	add	r1, sp, #36	; 0x24
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f004 f892 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8000fa8:	f643 03f8 	movw	r3, #14584	; 0x38f8
 8000fac:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	a909      	add	r1, sp, #36	; 0x24
 8000fb4:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <MX_GPIO_Init+0x1ec>)
 8000fb6:	f004 f889 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000fba:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 8000fbe:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fc0:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc4:	a909      	add	r1, sp, #36	; 0x24
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <MX_GPIO_Init+0x1f0>)
 8000fc8:	f004 f880 	bl	80050cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	a909      	add	r1, sp, #36	; 0x24
 8000fd8:	4638      	mov	r0, r7
 8000fda:	f004 f877 	bl	80050cc <HAL_GPIO_Init>

}
 8000fde:	b00f      	add	sp, #60	; 0x3c
 8000fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	58020400 	.word	0x58020400
 8000fec:	58021400 	.word	0x58021400
 8000ff0:	58020c00 	.word	0x58020c00
 8000ff4:	58021800 	.word	0x58021800
 8000ff8:	58020800 	.word	0x58020800
 8000ffc:	58020000 	.word	0x58020000

08001000 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001000:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001002:	4812      	ldr	r0, [pc, #72]	; (800104c <MX_I2C2_Init+0x4c>)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_I2C2_Init+0x50>)
 8001006:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C2_Init+0x54>)
 800100a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001010:	2201      	movs	r2, #1
 8001012:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001016:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800101e:	f004 faf9 	bl	8005614 <HAL_I2C_Init>
 8001022:	b950      	cbnz	r0, 800103a <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <MX_I2C2_Init+0x4c>)
 8001028:	f004 ff9c 	bl	8005f64 <HAL_I2CEx_ConfigAnalogFilter>
 800102c:	b940      	cbnz	r0, 8001040 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_I2C2_Init+0x4c>)
 8001032:	f004 ffc5 	bl	8005fc0 <HAL_I2CEx_ConfigDigitalFilter>
 8001036:	b930      	cbnz	r0, 8001046 <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001038:	bd08      	pop	{r3, pc}
    Error_Handler();
 800103a:	f001 fa87 	bl	800254c <Error_Handler>
 800103e:	e7f1      	b.n	8001024 <MX_I2C2_Init+0x24>
    Error_Handler();
 8001040:	f001 fa84 	bl	800254c <Error_Handler>
 8001044:	e7f3      	b.n	800102e <MX_I2C2_Init+0x2e>
    Error_Handler();
 8001046:	f001 fa81 	bl	800254c <Error_Handler>
}
 800104a:	e7f5      	b.n	8001038 <MX_I2C2_Init+0x38>
 800104c:	20013e68 	.word	0x20013e68
 8001050:	40005800 	.word	0x40005800
 8001054:	00b03fdb 	.word	0x00b03fdb

08001058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001058:	b530      	push	{r4, r5, lr}
 800105a:	b0b9      	sub	sp, #228	; 0xe4
 800105c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	2100      	movs	r1, #0
 8001060:	9133      	str	r1, [sp, #204]	; 0xcc
 8001062:	9134      	str	r1, [sp, #208]	; 0xd0
 8001064:	9135      	str	r1, [sp, #212]	; 0xd4
 8001066:	9136      	str	r1, [sp, #216]	; 0xd8
 8001068:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106a:	22c0      	movs	r2, #192	; 0xc0
 800106c:	a802      	add	r0, sp, #8
 800106e:	f014 fe4b 	bl	8015d08 <memset>
  if(i2cHandle->Instance==I2C2)
 8001072:	6822      	ldr	r2, [r4, #0]
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_I2C_MspInit+0xb0>)
 8001076:	429a      	cmp	r2, r3
 8001078:	d001      	beq.n	800107e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800107a:	b039      	add	sp, #228	; 0xe4
 800107c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800107e:	2208      	movs	r2, #8
 8001080:	2300      	movs	r3, #0
 8001082:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	a802      	add	r0, sp, #8
 8001088:	f005 fece 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 800108c:	2800      	cmp	r0, #0
 800108e:	d138      	bne.n	8001102 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4c1e      	ldr	r4, [pc, #120]	; (800110c <HAL_I2C_MspInit+0xb4>)
 8001092:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800109e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ae:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b4:	2501      	movs	r5, #1
 80010b6:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010bc:	2304      	movs	r3, #4
 80010be:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	a933      	add	r1, sp, #204	; 0xcc
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HAL_I2C_MspInit+0xb8>)
 80010c4:	f004 f802 	bl	80050cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80010cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80010d4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80010d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	4629      	mov	r1, r5
 80010e4:	2021      	movs	r0, #33	; 0x21
 80010e6:	f002 fba1 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010ea:	2021      	movs	r0, #33	; 0x21
 80010ec:	f002 fbd4 	bl	8003898 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	4629      	mov	r1, r5
 80010f4:	2022      	movs	r0, #34	; 0x22
 80010f6:	f002 fb99 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80010fa:	2022      	movs	r0, #34	; 0x22
 80010fc:	f002 fbcc 	bl	8003898 <HAL_NVIC_EnableIRQ>
}
 8001100:	e7bb      	b.n	800107a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001102:	f001 fa23 	bl	800254c <Error_Handler>
 8001106:	e7c3      	b.n	8001090 <HAL_I2C_MspInit+0x38>
 8001108:	40005800 	.word	0x40005800
 800110c:	58024400 	.word	0x58024400
 8001110:	58020400 	.word	0x58020400

08001114 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001118:	2400      	movs	r4, #0
 800111a:	9400      	str	r4, [sp, #0]
 800111c:	9401      	str	r4, [sp, #4]
 800111e:	9402      	str	r4, [sp, #8]
 8001120:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001122:	f002 fbdb 	bl	80038dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001126:	2501      	movs	r5, #1
 8001128:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800112c:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001130:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001132:	231f      	movs	r3, #31
 8001134:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001138:	2387      	movs	r3, #135	; 0x87
 800113a:	f88d 3009 	strb.w	r3, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800113e:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001142:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001146:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800114a:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800114e:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001152:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001156:	4668      	mov	r0, sp
 8001158:	f002 fbde 	bl	8003918 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800115c:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001160:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001164:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001166:	2311      	movs	r3, #17
 8001168:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800116c:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001170:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001174:	2603      	movs	r6, #3
 8001176:	f88d 600b 	strb.w	r6, [sp, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800117a:	4668      	mov	r0, sp
 800117c:	f002 fbcc 	bl	8003918 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001180:	2302      	movs	r3, #2
 8001182:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8001186:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800118a:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800118c:	230f      	movs	r3, #15
 800118e:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001192:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001196:	f88d 400d 	strb.w	r4, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800119a:	4668      	mov	r0, sp
 800119c:	f002 fbbc 	bl	8003918 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80011a0:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 80011a4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80011a8:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80011aa:	2318      	movs	r3, #24
 80011ac:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011b0:	f88d 500d 	strb.w	r5, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011b4:	4668      	mov	r0, sp
 80011b6:	f002 fbaf 	bl	8003918 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ba:	2004      	movs	r0, #4
 80011bc:	f002 fb9c 	bl	80038f8 <HAL_MPU_Enable>

}
 80011c0:	b004      	add	sp, #16
 80011c2:	bd70      	pop	{r4, r5, r6, pc}

080011c4 <SystemClock_Config>:
{
 80011c4:	b530      	push	{r4, r5, lr}
 80011c6:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c8:	224c      	movs	r2, #76	; 0x4c
 80011ca:	2100      	movs	r1, #0
 80011cc:	a80b      	add	r0, sp, #44	; 0x2c
 80011ce:	f014 fd9b 	bl	8015d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d2:	2220      	movs	r2, #32
 80011d4:	2100      	movs	r1, #0
 80011d6:	a803      	add	r0, sp, #12
 80011d8:	f014 fd96 	bl	8015d08 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011dc:	2002      	movs	r0, #2
 80011de:	f004 ff1b 	bl	8006018 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <SystemClock_Config+0xf8>)
 80011e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ea:	f022 0201 	bic.w	r2, r2, #1
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <SystemClock_Config+0xfc>)
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800120c:	4b2c      	ldr	r3, [pc, #176]	; (80012c0 <SystemClock_Config+0xfc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001214:	d0fa      	beq.n	800120c <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <SystemClock_Config+0x100>)
 8001218:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800121c:	f042 0202 	orr.w	r2, r2, #2
 8001220:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001230:	2300      	movs	r3, #0
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <SystemClock_Config+0xfc>)
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800123c:	619a      	str	r2, [r3, #24]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <SystemClock_Config+0xf8>)
 8001248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <SystemClock_Config+0xfc>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001262:	d0fa      	beq.n	800125a <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001264:	2321      	movs	r3, #33	; 0x21
 8001266:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800126e:	2301      	movs	r3, #1
 8001270:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	2302      	movs	r3, #2
 8001274:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001276:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001278:	2205      	movs	r2, #5
 800127a:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 800127c:	22c0      	movs	r2, #192	; 0xc0
 800127e:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001280:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001282:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001284:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001286:	2508      	movs	r5, #8
 8001288:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800128a:	2400      	movs	r4, #0
 800128c:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800128e:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	a80b      	add	r0, sp, #44	; 0x2c
 8001292:	f004 feeb 	bl	800606c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	233f      	movs	r3, #63	; 0x3f
 8001298:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129a:	2303      	movs	r3, #3
 800129c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012a0:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012a6:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ac:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012ae:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b0:	2104      	movs	r1, #4
 80012b2:	a803      	add	r0, sp, #12
 80012b4:	f005 fb2e 	bl	8006914 <HAL_RCC_ClockConfig>
}
 80012b8:	b01f      	add	sp, #124	; 0x7c
 80012ba:	bd30      	pop	{r4, r5, pc}
 80012bc:	58000400 	.word	0x58000400
 80012c0:	58024800 	.word	0x58024800
 80012c4:	58024400 	.word	0x58024400

080012c8 <PeriphCommonClock_Config>:
{
 80012c8:	b500      	push	{lr}
 80012ca:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	22c0      	movs	r2, #192	; 0xc0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4668      	mov	r0, sp
 80012d2:	f014 fd19 	bl	8015d08 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <PeriphCommonClock_Config+0x48>)
 80012d8:	2300      	movs	r3, #0
 80012da:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80012de:	2319      	movs	r3, #25
 80012e0:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 80012e2:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80012e6:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 80012e8:	2307      	movs	r3, #7
 80012ea:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012f0:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80012f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012f6:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80012f8:	2301      	movs	r3, #1
 80012fa:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	4668      	mov	r0, sp
 8001304:	f005 fd90 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
}
 8001308:	b031      	add	sp, #196	; 0xc4
 800130a:	f85d fb04 	ldr.w	pc, [sp], #4
 800130e:	bf00      	nop
 8001310:	00011100 	.word	0x00011100

08001314 <BSP_SD_IsDetected>:
{
 8001314:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8001316:	2301      	movs	r3, #1
 8001318:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 800131c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001320:	b002      	add	sp, #8
 8001322:	4770      	bx	lr

08001324 <checkForSDCardPreset>:
{
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	4604      	mov	r4, r0
	prevVoice = numberToLoad;
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <checkForSDCardPreset+0x10c>)
 800132c:	6018      	str	r0, [r3, #0]
	voice = numberToLoad;
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <checkForSDCardPreset+0x110>)
 8001330:	6018      	str	r0, [r3, #0]
	if(BSP_SD_IsDetected())
 8001332:	f7ff ffef 	bl	8001314 <BSP_SD_IsDetected>
 8001336:	2800      	cmp	r0, #0
 8001338:	d161      	bne.n	80013fe <checkForSDCardPreset+0xda>
		loadFailed = 1;
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <checkForSDCardPreset+0x114>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	2000      	movs	r0, #0
	diskBusy = 0;
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <checkForSDCardPreset+0x118>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
}
 8001348:	b008      	add	sp, #32
 800134a:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 800134c:	4a3c      	ldr	r2, [pc, #240]	; (8001440 <checkForSDCardPreset+0x11c>)
 800134e:	2100      	movs	r1, #0
 8001350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 8001354:	f103 0c01 	add.w	ip, r3, #1
 8001358:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800135c:	3302      	adds	r3, #2
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	ddf4      	ble.n	800134c <checkForSDCardPreset+0x28>
		diskBusy = 1;
 8001362:	2601      	movs	r6, #1
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <checkForSDCardPreset+0x118>)
 8001366:	701e      	strb	r6, [r3, #0]
		loadFailed = 0;
 8001368:	2500      	movs	r5, #0
 800136a:	4b33      	ldr	r3, [pc, #204]	; (8001438 <checkForSDCardPreset+0x114>)
 800136c:	701d      	strb	r5, [r3, #0]
		presetWaitingToLoad = 0;
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <checkForSDCardPreset+0x120>)
 8001370:	601d      	str	r5, [r3, #0]
		disk_initialize(0);
 8001372:	4628      	mov	r0, r5
 8001374:	f00a f95c 	bl	800b630 <disk_initialize>
	    disk_status(0);
 8001378:	4628      	mov	r0, r5
 800137a:	f00a f94d 	bl	800b618 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800137e:	4632      	mov	r2, r6
 8001380:	4931      	ldr	r1, [pc, #196]	; (8001448 <checkForSDCardPreset+0x124>)
 8001382:	4832      	ldr	r0, [pc, #200]	; (800144c <checkForSDCardPreset+0x128>)
 8001384:	f00b fd02 	bl	800cd8c <f_mount>
 8001388:	2800      	cmp	r0, #0
 800138a:	d1d6      	bne.n	800133a <checkForSDCardPreset+0x16>
			itoa(numberToLoad, charBuf, 10);
 800138c:	220a      	movs	r2, #10
 800138e:	a902      	add	r1, sp, #8
 8001390:	4620      	mov	r0, r4
 8001392:	f014 fc75 	bl	8015c80 <itoa>
			int len = ((strlen(charBuf)));
 8001396:	a802      	add	r0, sp, #8
 8001398:	f7fe ff9e 	bl	80002d8 <strlen>
 800139c:	4603      	mov	r3, r0
			if (len == 1)
 800139e:	42b0      	cmp	r0, r6
 80013a0:	d02f      	beq.n	8001402 <checkForSDCardPreset+0xde>
				strcat(charBuf, "*.ebp");
 80013a2:	a902      	add	r1, sp, #8
 80013a4:	180c      	adds	r4, r1, r0
 80013a6:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <checkForSDCardPreset+0x12c>)
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	50c8      	str	r0, [r1, r3]
 80013ac:	8893      	ldrh	r3, [r2, #4]
 80013ae:	80a3      	strh	r3, [r4, #4]
				strcpy(finalString, charBuf);
 80013b0:	a805      	add	r0, sp, #20
 80013b2:	f014 fcd5 	bl	8015d60 <strcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 80013b6:	ab05      	add	r3, sp, #20
 80013b8:	4a23      	ldr	r2, [pc, #140]	; (8001448 <checkForSDCardPreset+0x124>)
 80013ba:	4926      	ldr	r1, [pc, #152]	; (8001454 <checkForSDCardPreset+0x130>)
 80013bc:	4826      	ldr	r0, [pc, #152]	; (8001458 <checkForSDCardPreset+0x134>)
 80013be:	f00c f8f4 	bl	800d5aa <f_findfirst>
			if(res == FR_OK)
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d1b9      	bne.n	800133a <checkForSDCardPreset+0x16>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80013c6:	2211      	movs	r2, #17
 80013c8:	4924      	ldr	r1, [pc, #144]	; (800145c <checkForSDCardPreset+0x138>)
 80013ca:	4825      	ldr	r0, [pc, #148]	; (8001460 <checkForSDCardPreset+0x13c>)
 80013cc:	f00b fd0e 	bl	800cdec <f_open>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d1b2      	bne.n	800133a <checkForSDCardPreset+0x16>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80013d4:	4c22      	ldr	r4, [pc, #136]	; (8001460 <checkForSDCardPreset+0x13c>)
 80013d6:	ab01      	add	r3, sp, #4
 80013d8:	68e2      	ldr	r2, [r4, #12]
 80013da:	4922      	ldr	r1, [pc, #136]	; (8001464 <checkForSDCardPreset+0x140>)
 80013dc:	4620      	mov	r0, r4
 80013de:	f00b fe1b 	bl	800d018 <f_read>
					presetWaitingToParse = bytesRead;
 80013e2:	9a01      	ldr	r2, [sp, #4]
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <checkForSDCardPreset+0x144>)
 80013e6:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 80013e8:	4620      	mov	r0, r4
 80013ea:	f00c f840 	bl	800d46e <f_close>
	  	  i2cSending = 1;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <checkForSDCardPreset+0x148>)
 80013f0:	2001      	movs	r0, #1
 80013f2:	7018      	strb	r0, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 80013f6:	b662      	cpsie	i
	  	i2cSending = 0;
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e7a1      	b.n	8001342 <checkForSDCardPreset+0x1e>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80013fe:	2300      	movs	r3, #0
 8001400:	e7ad      	b.n	800135e <checkForSDCardPreset+0x3a>
				finalString[2] = charBuf[1];
 8001402:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001406:	f88d 3016 	strb.w	r3, [sp, #22]
				finalString[1] = charBuf[0];
 800140a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800140e:	f88d 3015 	strb.w	r3, [sp, #21]
				finalString[0] = '0';
 8001412:	2330      	movs	r3, #48	; 0x30
 8001414:	f88d 3014 	strb.w	r3, [sp, #20]
				strcat(finalString, "*.ebp");
 8001418:	ac05      	add	r4, sp, #20
 800141a:	4620      	mov	r0, r4
 800141c:	f7fe ff5c 	bl	80002d8 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	1821      	adds	r1, r4, r0
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <checkForSDCardPreset+0x12c>)
 8001426:	6810      	ldr	r0, [r2, #0]
 8001428:	50e0      	str	r0, [r4, r3]
 800142a:	8893      	ldrh	r3, [r2, #4]
 800142c:	808b      	strh	r3, [r1, #4]
 800142e:	e7c2      	b.n	80013b6 <checkForSDCardPreset+0x92>
 8001430:	200004b8 	.word	0x200004b8
 8001434:	20013e18 	.word	0x20013e18
 8001438:	200180c4 	.word	0x200180c4
 800143c:	20013f10 	.word	0x20013f10
 8001440:	30000000 	.word	0x30000000
 8001444:	20019b90 	.word	0x20019b90
 8001448:	2001d5ac 	.word	0x2001d5ac
 800144c:	2001d148 	.word	0x2001d148
 8001450:	08018398 	.word	0x08018398
 8001454:	20015f78 	.word	0x20015f78
 8001458:	20013ed8 	.word	0x20013ed8
 800145c:	20015f8e 	.word	0x20015f8e
 8001460:	2001d37c 	.word	0x2001d37c
 8001464:	30042380 	.word	0x30042380
 8001468:	20019b94 	.word	0x20019b94
 800146c:	20016092 	.word	0x20016092

08001470 <writePresetToSDCard>:
{
 8001470:	b530      	push	{r4, r5, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	4605      	mov	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001476:	b672      	cpsid	i
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001478:	2300      	movs	r3, #0
 800147a:	e004      	b.n	8001486 <writePresetToSDCard+0x16>
		 audioOutBuffer[i] = 0;
 800147c:	4a35      	ldr	r2, [pc, #212]	; (8001554 <writePresetToSDCard+0xe4>)
 800147e:	2100      	movs	r1, #0
 8001480:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8001484:	3301      	adds	r3, #1
 8001486:	2bff      	cmp	r3, #255	; 0xff
 8001488:	ddf8      	ble.n	800147c <writePresetToSDCard+0xc>
	if(BSP_SD_IsDetected())
 800148a:	f7ff ff43 	bl	8001314 <BSP_SD_IsDetected>
 800148e:	b938      	cbnz	r0, 80014a0 <writePresetToSDCard+0x30>
	presetWaitingToWrite = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <writePresetToSDCard+0xe8>)
 8001494:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8001496:	4a31      	ldr	r2, [pc, #196]	; (800155c <writePresetToSDCard+0xec>)
 8001498:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800149a:	b662      	cpsie	i
}
 800149c:	b009      	add	sp, #36	; 0x24
 800149e:	bd30      	pop	{r4, r5, pc}
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80014a0:	2300      	movs	r3, #0
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	dc09      	bgt.n	80014ba <writePresetToSDCard+0x4a>
					audioOutBuffer[i] = 0;
 80014a6:	4a2b      	ldr	r2, [pc, #172]	; (8001554 <writePresetToSDCard+0xe4>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					audioOutBuffer[i + 1] = 0;
 80014ae:	f103 0c01 	add.w	ip, r3, #1
 80014b2:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80014b6:	3302      	adds	r3, #2
 80014b8:	e7f3      	b.n	80014a2 <writePresetToSDCard+0x32>
				diskBusy = 1;
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <writePresetToSDCard+0xec>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
			    if (presetNumberToSave > 99)
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <writePresetToSDCard+0xf0>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b63      	cmp	r3, #99	; 0x63
 80014c8:	d902      	bls.n	80014d0 <writePresetToSDCard+0x60>
			        presetNumberToSave = 99;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <writePresetToSDCard+0xf0>)
 80014cc:	2263      	movs	r2, #99	; 0x63
 80014ce:	701a      	strb	r2, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <writePresetToSDCard+0xf0>)
 80014d2:	7818      	ldrb	r0, [r3, #0]
 80014d4:	220a      	movs	r2, #10
 80014d6:	a902      	add	r1, sp, #8
 80014d8:	f014 fbd2 	bl	8015c80 <itoa>
				int len = ((strlen(charBuf)));
 80014dc:	a802      	add	r0, sp, #8
 80014de:	f7fe fefb 	bl	80002d8 <strlen>
 80014e2:	4603      	mov	r3, r0
				if (len == 1)
 80014e4:	2801      	cmp	r0, #1
 80014e6:	d01d      	beq.n	8001524 <writePresetToSDCard+0xb4>
					strcat(charBuf, ".ebp");
 80014e8:	a902      	add	r1, sp, #8
 80014ea:	eb01 0c00 	add.w	ip, r1, r0
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <writePresetToSDCard+0xf4>)
 80014f0:	6810      	ldr	r0, [r2, #0]
 80014f2:	50c8      	str	r0, [r1, r3]
 80014f4:	7913      	ldrb	r3, [r2, #4]
 80014f6:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
 80014fa:	a805      	add	r0, sp, #20
 80014fc:	f014 fc30 	bl	8015d60 <strcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8001500:	220a      	movs	r2, #10
 8001502:	a905      	add	r1, sp, #20
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <writePresetToSDCard+0xf8>)
 8001506:	f00b fc71 	bl	800cdec <f_open>
 800150a:	2800      	cmp	r0, #0
 800150c:	d1c0      	bne.n	8001490 <writePresetToSDCard+0x20>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 800150e:	4c16      	ldr	r4, [pc, #88]	; (8001568 <writePresetToSDCard+0xf8>)
 8001510:	ab01      	add	r3, sp, #4
 8001512:	462a      	mov	r2, r5
 8001514:	4915      	ldr	r1, [pc, #84]	; (800156c <writePresetToSDCard+0xfc>)
 8001516:	4620      	mov	r0, r4
 8001518:	f00b fe5f 	bl	800d1da <f_write>
					f_close(&SDFile);
 800151c:	4620      	mov	r0, r4
 800151e:	f00b ffa6 	bl	800d46e <f_close>
 8001522:	e7b5      	b.n	8001490 <writePresetToSDCard+0x20>
					finalString[2] = charBuf[1];
 8001524:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001528:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 800152c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001530:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 8001534:	2330      	movs	r3, #48	; 0x30
 8001536:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 800153a:	ac05      	add	r4, sp, #20
 800153c:	4620      	mov	r0, r4
 800153e:	f7fe fecb 	bl	80002d8 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	1821      	adds	r1, r4, r0
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <writePresetToSDCard+0xf4>)
 8001548:	6810      	ldr	r0, [r2, #0]
 800154a:	50e0      	str	r0, [r4, r3]
 800154c:	7913      	ldrb	r3, [r2, #4]
 800154e:	710b      	strb	r3, [r1, #4]
 8001550:	e7d6      	b.n	8001500 <writePresetToSDCard+0x90>
 8001552:	bf00      	nop
 8001554:	30000000 	.word	0x30000000
 8001558:	20019b98 	.word	0x20019b98
 800155c:	20013f10 	.word	0x20013f10
 8001560:	20019b8f 	.word	0x20019b8f
 8001564:	080183a0 	.word	0x080183a0
 8001568:	2001d37c 	.word	0x2001d37c
 800156c:	30042380 	.word	0x30042380

08001570 <getPresetNamesFromSDCard>:
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	b088      	sub	sp, #32
	if(BSP_SD_IsDetected())
 8001574:	f7ff fece 	bl	8001314 <BSP_SD_IsDetected>
 8001578:	bb18      	cbnz	r0, 80015c2 <getPresetNamesFromSDCard+0x52>
	diskBusy = 0;
 800157a:	4b60      	ldr	r3, [pc, #384]	; (80016fc <getPresetNamesFromSDCard+0x18c>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	b008      	add	sp, #32
 8001582:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 8001584:	4a5e      	ldr	r2, [pc, #376]	; (8001700 <getPresetNamesFromSDCard+0x190>)
 8001586:	2100      	movs	r1, #0
 8001588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 800158c:	1c58      	adds	r0, r3, #1
 800158e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001592:	3302      	adds	r3, #2
 8001594:	2bff      	cmp	r3, #255	; 0xff
 8001596:	ddf5      	ble.n	8001584 <getPresetNamesFromSDCard+0x14>
		diskBusy = 1;
 8001598:	2501      	movs	r5, #1
 800159a:	4b58      	ldr	r3, [pc, #352]	; (80016fc <getPresetNamesFromSDCard+0x18c>)
 800159c:	701d      	strb	r5, [r3, #0]
		loadFailed = 0;
 800159e:	2400      	movs	r4, #0
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <getPresetNamesFromSDCard+0x194>)
 80015a2:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
 80015a4:	4620      	mov	r0, r4
 80015a6:	f00a f843 	bl	800b630 <disk_initialize>
	    disk_status(0);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f00a f834 	bl	800b618 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80015b0:	462a      	mov	r2, r5
 80015b2:	4955      	ldr	r1, [pc, #340]	; (8001708 <getPresetNamesFromSDCard+0x198>)
 80015b4:	4855      	ldr	r0, [pc, #340]	; (800170c <getPresetNamesFromSDCard+0x19c>)
 80015b6:	f00b fbe9 	bl	800cd8c <f_mount>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d1dd      	bne.n	800157a <getPresetNamesFromSDCard+0xa>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 80015be:	2400      	movs	r4, #0
 80015c0:	e01f      	b.n	8001602 <getPresetNamesFromSDCard+0x92>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80015c2:	2300      	movs	r3, #0
 80015c4:	e7e6      	b.n	8001594 <getPresetNamesFromSDCard+0x24>
					finalString[2] = charBuf[1];
 80015c6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80015ca:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 80015ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80015d2:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 80015d6:	2330      	movs	r3, #48	; 0x30
 80015d8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 80015dc:	ad05      	add	r5, sp, #20
 80015de:	4628      	mov	r0, r5
 80015e0:	f7fe fe7a 	bl	80002d8 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	1829      	adds	r1, r5, r0
 80015e8:	4a49      	ldr	r2, [pc, #292]	; (8001710 <getPresetNamesFromSDCard+0x1a0>)
 80015ea:	6810      	ldr	r0, [r2, #0]
 80015ec:	50e8      	str	r0, [r5, r3]
 80015ee:	8893      	ldrh	r3, [r2, #4]
 80015f0:	808b      	strh	r3, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80015f2:	ab05      	add	r3, sp, #20
 80015f4:	4a44      	ldr	r2, [pc, #272]	; (8001708 <getPresetNamesFromSDCard+0x198>)
 80015f6:	4947      	ldr	r1, [pc, #284]	; (8001714 <getPresetNamesFromSDCard+0x1a4>)
 80015f8:	4847      	ldr	r0, [pc, #284]	; (8001718 <getPresetNamesFromSDCard+0x1a8>)
 80015fa:	f00b ffd6 	bl	800d5aa <f_findfirst>
				if(res == FR_OK)
 80015fe:	b1c0      	cbz	r0, 8001632 <getPresetNamesFromSDCard+0xc2>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001600:	3401      	adds	r4, #1
 8001602:	2c3f      	cmp	r4, #63	; 0x3f
 8001604:	dcb9      	bgt.n	800157a <getPresetNamesFromSDCard+0xa>
				itoa(i, charBuf, 10);
 8001606:	220a      	movs	r2, #10
 8001608:	a902      	add	r1, sp, #8
 800160a:	4620      	mov	r0, r4
 800160c:	f014 fb38 	bl	8015c80 <itoa>
				int len = ((strlen(charBuf)));
 8001610:	a802      	add	r0, sp, #8
 8001612:	f7fe fe61 	bl	80002d8 <strlen>
 8001616:	4603      	mov	r3, r0
				if (len == 1)
 8001618:	2801      	cmp	r0, #1
 800161a:	d0d4      	beq.n	80015c6 <getPresetNamesFromSDCard+0x56>
					strcat(charBuf, "*.ebp");
 800161c:	a902      	add	r1, sp, #8
 800161e:	180d      	adds	r5, r1, r0
 8001620:	4a3b      	ldr	r2, [pc, #236]	; (8001710 <getPresetNamesFromSDCard+0x1a0>)
 8001622:	6810      	ldr	r0, [r2, #0]
 8001624:	50c8      	str	r0, [r1, r3]
 8001626:	8893      	ldrh	r3, [r2, #4]
 8001628:	80ab      	strh	r3, [r5, #4]
					strcpy(finalString, charBuf);
 800162a:	a805      	add	r0, sp, #20
 800162c:	f014 fb98 	bl	8015d60 <strcpy>
 8001630:	e7df      	b.n	80015f2 <getPresetNamesFromSDCard+0x82>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8001632:	2211      	movs	r2, #17
 8001634:	4939      	ldr	r1, [pc, #228]	; (800171c <getPresetNamesFromSDCard+0x1ac>)
 8001636:	483a      	ldr	r0, [pc, #232]	; (8001720 <getPresetNamesFromSDCard+0x1b0>)
 8001638:	f00b fbd8 	bl	800cdec <f_open>
 800163c:	2800      	cmp	r0, #0
 800163e:	d1df      	bne.n	8001600 <getPresetNamesFromSDCard+0x90>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001640:	4d37      	ldr	r5, [pc, #220]	; (8001720 <getPresetNamesFromSDCard+0x1b0>)
 8001642:	4e38      	ldr	r6, [pc, #224]	; (8001724 <getPresetNamesFromSDCard+0x1b4>)
 8001644:	ab01      	add	r3, sp, #4
 8001646:	68ea      	ldr	r2, [r5, #12]
 8001648:	4631      	mov	r1, r6
 800164a:	4628      	mov	r0, r5
 800164c:	f00b fce4 	bl	800d018 <f_read>
						f_close(&SDFile);
 8001650:	4628      	mov	r0, r5
 8001652:	f00b ff0c 	bl	800d46e <f_close>
						if (buffer[bufferIndex] == 17)
 8001656:	7833      	ldrb	r3, [r6, #0]
 8001658:	2b11      	cmp	r3, #17
 800165a:	d014      	beq.n	8001686 <getPresetNamesFromSDCard+0x116>
						uint16_t bufferIndex = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	e00c      	b.n	800167c <getPresetNamesFromSDCard+0x10c>
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001662:	4930      	ldr	r1, [pc, #192]	; (8001724 <getPresetNamesFromSDCard+0x1b4>)
 8001664:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001668:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800166c:	492e      	ldr	r1, [pc, #184]	; (8001728 <getPresetNamesFromSDCard+0x1b8>)
 800166e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001672:	f801 c002 	strb.w	ip, [r1, r2]
							bufferIndex++;
 8001676:	3301      	adds	r3, #1
 8001678:	b29b      	uxth	r3, r3
						for (int j = 0; j < 14; j++)
 800167a:	3201      	adds	r2, #1
 800167c:	2a0d      	cmp	r2, #13
 800167e:	ddf0      	ble.n	8001662 <getPresetNamesFromSDCard+0xf2>
						for (int j = 0; j < 8; j++)
 8001680:	f04f 0c00 	mov.w	ip, #0
 8001684:	e016      	b.n	80016b4 <getPresetNamesFromSDCard+0x144>
							bufferIndex = 4;
 8001686:	2304      	movs	r3, #4
 8001688:	e7e9      	b.n	800165e <getPresetNamesFromSDCard+0xee>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <getPresetNamesFromSDCard+0x1b4>)
 800168c:	f812 e003 	ldrb.w	lr, [r2, r3]
 8001690:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8001694:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8001698:	00d2      	lsls	r2, r2, #3
 800169a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800169e:	4823      	ldr	r0, [pc, #140]	; (800172c <getPresetNamesFromSDCard+0x1bc>)
 80016a0:	4402      	add	r2, r0
 80016a2:	f802 e001 	strb.w	lr, [r2, r1]
								bufferIndex++;
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29b      	uxth	r3, r3
							for (int k = 0; k < 9; k++)
 80016aa:	3101      	adds	r1, #1
 80016ac:	2908      	cmp	r1, #8
 80016ae:	ddec      	ble.n	800168a <getPresetNamesFromSDCard+0x11a>
						for (int j = 0; j < 8; j++)
 80016b0:	f10c 0c01 	add.w	ip, ip, #1
 80016b4:	f1bc 0f07 	cmp.w	ip, #7
 80016b8:	dc01      	bgt.n	80016be <getPresetNamesFromSDCard+0x14e>
							for (int k = 0; k < 9; k++)
 80016ba:	2100      	movs	r1, #0
 80016bc:	e7f6      	b.n	80016ac <getPresetNamesFromSDCard+0x13c>
						for (int j = 0; j < 4; j++)
 80016be:	f04f 0e00 	mov.w	lr, #0
 80016c2:	e016      	b.n	80016f2 <getPresetNamesFromSDCard+0x182>
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 80016c4:	f10e 0208 	add.w	r2, lr, #8
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <getPresetNamesFromSDCard+0x1b4>)
 80016ca:	f811 c003 	ldrb.w	ip, [r1, r3]
 80016ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80016d2:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
 80016d6:	00c9      	lsls	r1, r1, #3
 80016d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80016dc:	4913      	ldr	r1, [pc, #76]	; (800172c <getPresetNamesFromSDCard+0x1bc>)
 80016de:	440a      	add	r2, r1
 80016e0:	f802 c000 	strb.w	ip, [r2, r0]
								bufferIndex++;
 80016e4:	3301      	adds	r3, #1
 80016e6:	b29b      	uxth	r3, r3
							for (int k = 0; k < 10; k++)
 80016e8:	3001      	adds	r0, #1
 80016ea:	2809      	cmp	r0, #9
 80016ec:	ddea      	ble.n	80016c4 <getPresetNamesFromSDCard+0x154>
						for (int j = 0; j < 4; j++)
 80016ee:	f10e 0e01 	add.w	lr, lr, #1
 80016f2:	f1be 0f03 	cmp.w	lr, #3
 80016f6:	dc83      	bgt.n	8001600 <getPresetNamesFromSDCard+0x90>
							for (int k = 0; k < 10; k++)
 80016f8:	2000      	movs	r0, #0
 80016fa:	e7f6      	b.n	80016ea <getPresetNamesFromSDCard+0x17a>
 80016fc:	20013f10 	.word	0x20013f10
 8001700:	30000000 	.word	0x30000000
 8001704:	200180c4 	.word	0x200180c4
 8001708:	2001d5ac 	.word	0x2001d5ac
 800170c:	2001d148 	.word	0x2001d148
 8001710:	08018398 	.word	0x08018398
 8001714:	20015f78 	.word	0x20015f78
 8001718:	20013ed8 	.word	0x20013ed8
 800171c:	20015f8e 	.word	0x20015f8e
 8001720:	2001d37c 	.word	0x2001d37c
 8001724:	30042380 	.word	0x30042380
 8001728:	30042000 	.word	0x30042000
 800172c:	30043380 	.word	0x30043380

08001730 <SDRAM_init>:
{
 8001730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001734:	b086      	sub	sp, #24
	        __IO uint32_t tmpmrd = 0;
 8001736:	2700      	movs	r7, #0
 8001738:	9701      	str	r7, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800173a:	2501      	movs	r5, #1
 800173c:	9502      	str	r5, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800173e:	2610      	movs	r6, #16
 8001740:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001742:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 8001744:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001746:	4c1d      	ldr	r4, [pc, #116]	; (80017bc <SDRAM_init+0x8c>)
 8001748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174c:	a902      	add	r1, sp, #8
 800174e:	4620      	mov	r0, r4
 8001750:	f008 fc34 	bl	8009fbc <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 8001754:	4628      	mov	r0, r5
 8001756:	f002 f833 	bl	80037c0 <HAL_Delay>
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800175a:	f04f 0802 	mov.w	r8, #2
 800175e:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001762:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001764:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 8001766:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176c:	a902      	add	r1, sp, #8
 800176e:	4620      	mov	r0, r4
 8001770:	f008 fc24 	bl	8009fbc <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001774:	2303      	movs	r3, #3
 8001776:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001778:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 2;
 800177a:	f8cd 8010 	str.w	r8, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 800177e:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001784:	a902      	add	r1, sp, #8
 8001786:	4620      	mov	r0, r4
 8001788:	f008 fc18 	bl	8009fbc <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 800178c:	f240 2322 	movw	r3, #546	; 0x222
 8001790:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001792:	2304      	movs	r3, #4
 8001794:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001796:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001798:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	9305      	str	r3, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800179e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a2:	a902      	add	r1, sp, #8
 80017a4:	4620      	mov	r0, r4
 80017a6:	f008 fc09 	bl	8009fbc <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 80017aa:	f240 21fa 	movw	r1, #762	; 0x2fa
 80017ae:	4620      	mov	r0, r4
 80017b0:	f008 fc25 	bl	8009ffe <HAL_SDRAM_ProgramRefreshRate>
}
 80017b4:	b006      	add	sp, #24
 80017b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017ba:	bf00      	nop
 80017bc:	20013e34 	.word	0x20013e34

080017c0 <setEffectsFunctions>:
{
 80017c0:	b410      	push	{r4}
	effectsActive[i] = 1;
 80017c2:	4b96      	ldr	r3, [pc, #600]	; (8001a1c <setEffectsFunctions+0x25c>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 80017c8:	2815      	cmp	r0, #21
 80017ca:	d82a      	bhi.n	8001822 <setEffectsFunctions+0x62>
 80017cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80017d0:	002c0016 	.word	0x002c0016
 80017d4:	00540040 	.word	0x00540040
 80017d8:	007b0068 	.word	0x007b0068
 80017dc:	00a2008e 	.word	0x00a2008e
 80017e0:	00ce00b8 	.word	0x00ce00b8
 80017e4:	00fa00e4 	.word	0x00fa00e4
 80017e8:	01840110 	.word	0x01840110
 80017ec:	01aa0197 	.word	0x01aa0197
 80017f0:	01d001bd 	.word	0x01d001bd
 80017f4:	01f801e4 	.word	0x01f801e4
 80017f8:	0220020c 	.word	0x0220020c
			  effectTick[i] = &blankTick;
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <setEffectsFunctions+0x260>)
 80017fe:	4a89      	ldr	r2, [pc, #548]	; (8001a24 <setEffectsFunctions+0x264>)
 8001800:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &blankFunction;
 8001804:	4888      	ldr	r0, [pc, #544]	; (8001a28 <setEffectsFunctions+0x268>)
 8001806:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800180a:	eb00 028c 	add.w	r2, r0, ip, lsl #2
 800180e:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <setEffectsFunctions+0x26c>)
 8001810:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001814:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001816:	6093      	str	r3, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001818:	60d3      	str	r3, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 800181a:	6113      	str	r3, [r2, #16]
			  effectsActive[i] = 0;
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <setEffectsFunctions+0x25c>)
 800181e:	2200      	movs	r2, #0
 8001820:	545a      	strb	r2, [r3, r1]
}
 8001822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001826:	4770      	bx	lr
			  effectTick[i] = &softClipTick;
 8001828:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <setEffectsFunctions+0x260>)
 800182a:	4a81      	ldr	r2, [pc, #516]	; (8001a30 <setEffectsFunctions+0x270>)
 800182c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001830:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <setEffectsFunctions+0x268>)
 8001832:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001836:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800183a:	4c7e      	ldr	r4, [pc, #504]	; (8001a34 <setEffectsFunctions+0x274>)
 800183c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001840:	487d      	ldr	r0, [pc, #500]	; (8001a38 <setEffectsFunctions+0x278>)
 8001842:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Soft;
 8001844:	487d      	ldr	r0, [pc, #500]	; (8001a3c <setEffectsFunctions+0x27c>)
 8001846:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001848:	4878      	ldr	r0, [pc, #480]	; (8001a2c <setEffectsFunctions+0x26c>)
 800184a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 800184c:	6110      	str	r0, [r2, #16]
			  break;
 800184e:	e7e8      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &hardClipTick;
 8001850:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <setEffectsFunctions+0x260>)
 8001852:	4a7b      	ldr	r2, [pc, #492]	; (8001a40 <setEffectsFunctions+0x280>)
 8001854:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001858:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <setEffectsFunctions+0x268>)
 800185a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800185e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001862:	4c74      	ldr	r4, [pc, #464]	; (8001a34 <setEffectsFunctions+0x274>)
 8001864:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001868:	4873      	ldr	r0, [pc, #460]	; (8001a38 <setEffectsFunctions+0x278>)
 800186a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Hard;
 800186c:	4875      	ldr	r0, [pc, #468]	; (8001a44 <setEffectsFunctions+0x284>)
 800186e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001870:	486e      	ldr	r0, [pc, #440]	; (8001a2c <setEffectsFunctions+0x26c>)
 8001872:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001874:	6110      	str	r0, [r2, #16]
			  break;
 8001876:	e7d4      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &polynomialShaperTick;
 8001878:	4b69      	ldr	r3, [pc, #420]	; (8001a20 <setEffectsFunctions+0x260>)
 800187a:	4a73      	ldr	r2, [pc, #460]	; (8001a48 <setEffectsFunctions+0x288>)
 800187c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <setEffectsFunctions+0x268>)
 8001882:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001886:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800188a:	4c6a      	ldr	r4, [pc, #424]	; (8001a34 <setEffectsFunctions+0x274>)
 800188c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001890:	4869      	ldr	r0, [pc, #420]	; (8001a38 <setEffectsFunctions+0x278>)
 8001892:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Poly;
 8001894:	486d      	ldr	r0, [pc, #436]	; (8001a4c <setEffectsFunctions+0x28c>)
 8001896:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001898:	4864      	ldr	r0, [pc, #400]	; (8001a2c <setEffectsFunctions+0x26c>)
 800189a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 800189c:	6110      	str	r0, [r2, #16]
			  break;
 800189e:	e7c0      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &satTick;
 80018a0:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <setEffectsFunctions+0x260>)
 80018a2:	4a6b      	ldr	r2, [pc, #428]	; (8001a50 <setEffectsFunctions+0x290>)
 80018a4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80018a8:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <setEffectsFunctions+0x268>)
 80018aa:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80018ae:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80018b2:	4c60      	ldr	r4, [pc, #384]	; (8001a34 <setEffectsFunctions+0x274>)
 80018b4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80018b8:	4a5f      	ldr	r2, [pc, #380]	; (8001a38 <setEffectsFunctions+0x278>)
 80018ba:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 80018bc:	4a5b      	ldr	r2, [pc, #364]	; (8001a2c <setEffectsFunctions+0x26c>)
 80018be:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 80018c0:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80018c2:	6102      	str	r2, [r0, #16]
			  break;
 80018c4:	e7ad      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &tanhTick;
 80018c6:	4b56      	ldr	r3, [pc, #344]	; (8001a20 <setEffectsFunctions+0x260>)
 80018c8:	4a62      	ldr	r2, [pc, #392]	; (8001a54 <setEffectsFunctions+0x294>)
 80018ca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80018ce:	4b56      	ldr	r3, [pc, #344]	; (8001a28 <setEffectsFunctions+0x268>)
 80018d0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80018d4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80018d8:	4c56      	ldr	r4, [pc, #344]	; (8001a34 <setEffectsFunctions+0x274>)
 80018da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <setEffectsFunctions+0x278>)
 80018e0:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 80018e2:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <setEffectsFunctions+0x26c>)
 80018e4:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 80018e6:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80018e8:	6102      	str	r2, [r0, #16]
			  break;
 80018ea:	e79a      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &shaperTick;
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <setEffectsFunctions+0x260>)
 80018ee:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <setEffectsFunctions+0x298>)
 80018f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80018f4:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <setEffectsFunctions+0x268>)
 80018f6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80018fa:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80018fe:	4c4d      	ldr	r4, [pc, #308]	; (8001a34 <setEffectsFunctions+0x274>)
 8001900:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001904:	484c      	ldr	r0, [pc, #304]	; (8001a38 <setEffectsFunctions+0x278>)
 8001906:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
 8001908:	4854      	ldr	r0, [pc, #336]	; (8001a5c <setEffectsFunctions+0x29c>)
 800190a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 800190c:	4847      	ldr	r0, [pc, #284]	; (8001a2c <setEffectsFunctions+0x26c>)
 800190e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001910:	6110      	str	r0, [r2, #16]
			  break;
 8001912:	e786      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &compressorTick;
 8001914:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <setEffectsFunctions+0x260>)
 8001916:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <setEffectsFunctions+0x2a0>)
 8001918:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 800191c:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <setEffectsFunctions+0x268>)
 800191e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001922:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001926:	4c4f      	ldr	r4, [pc, #316]	; (8001a64 <setEffectsFunctions+0x2a4>)
 8001928:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &compressorParam2;
 800192c:	484e      	ldr	r0, [pc, #312]	; (8001a68 <setEffectsFunctions+0x2a8>)
 800192e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001930:	484e      	ldr	r0, [pc, #312]	; (8001a6c <setEffectsFunctions+0x2ac>)
 8001932:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &compressorParam4;
 8001934:	484e      	ldr	r0, [pc, #312]	; (8001a70 <setEffectsFunctions+0x2b0>)
 8001936:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001938:	4613      	mov	r3, r2
 800193a:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <setEffectsFunctions+0x2b4>)
 800193c:	611a      	str	r2, [r3, #16]
			  break;
 800193e:	e770      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &chorusTick;
 8001940:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <setEffectsFunctions+0x260>)
 8001942:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <setEffectsFunctions+0x2b8>)
 8001944:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <setEffectsFunctions+0x268>)
 800194a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800194e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001952:	4c4a      	ldr	r4, [pc, #296]	; (8001a7c <setEffectsFunctions+0x2bc>)
 8001954:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &chorusParam2;
 8001958:	4849      	ldr	r0, [pc, #292]	; (8001a80 <setEffectsFunctions+0x2c0>)
 800195a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &chorusParam3;
 800195c:	4849      	ldr	r0, [pc, #292]	; (8001a84 <setEffectsFunctions+0x2c4>)
 800195e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &chorusParam4;
 8001960:	4849      	ldr	r0, [pc, #292]	; (8001a88 <setEffectsFunctions+0x2c8>)
 8001962:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001964:	4613      	mov	r3, r2
 8001966:	4a31      	ldr	r2, [pc, #196]	; (8001a2c <setEffectsFunctions+0x26c>)
 8001968:	611a      	str	r2, [r3, #16]
			  break;
 800196a:	e75a      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &bcTick;
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <setEffectsFunctions+0x260>)
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <setEffectsFunctions+0x2cc>)
 8001970:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <setEffectsFunctions+0x268>)
 8001976:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800197a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800197e:	4c2d      	ldr	r4, [pc, #180]	; (8001a34 <setEffectsFunctions+0x274>)
 8001980:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &param2Linear;
 8001984:	4842      	ldr	r0, [pc, #264]	; (8001a90 <setEffectsFunctions+0x2d0>)
 8001986:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3BC;
 8001988:	4842      	ldr	r0, [pc, #264]	; (8001a94 <setEffectsFunctions+0x2d4>)
 800198a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
 800198c:	4842      	ldr	r0, [pc, #264]	; (8001a98 <setEffectsFunctions+0x2d8>)
 800198e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001990:	4613      	mov	r3, r2
 8001992:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <setEffectsFunctions+0x2dc>)
 8001994:	611a      	str	r2, [r3, #16]
			  break;
 8001996:	e744      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &tiltFilterTick;
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <setEffectsFunctions+0x260>)
 800199a:	4a41      	ldr	r2, [pc, #260]	; (8001aa0 <setEffectsFunctions+0x2e0>)
 800199c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <setEffectsFunctions+0x268>)
 80019a2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80019a6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80019aa:	4c3e      	ldr	r4, [pc, #248]	; (8001aa4 <setEffectsFunctions+0x2e4>)
 80019ac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &tiltParam2;
 80019b0:	483d      	ldr	r0, [pc, #244]	; (8001aa8 <setEffectsFunctions+0x2e8>)
 80019b2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &tiltParam3;
 80019b4:	483d      	ldr	r0, [pc, #244]	; (8001aac <setEffectsFunctions+0x2ec>)
 80019b6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &tiltParam4;
 80019b8:	483d      	ldr	r0, [pc, #244]	; (8001ab0 <setEffectsFunctions+0x2f0>)
 80019ba:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 80019bc:	4613      	mov	r3, r2
 80019be:	4a37      	ldr	r2, [pc, #220]	; (8001a9c <setEffectsFunctions+0x2dc>)
 80019c0:	611a      	str	r2, [r3, #16]
			  break;
 80019c2:	e72e      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &wavefolderTick;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <setEffectsFunctions+0x260>)
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <setEffectsFunctions+0x2f4>)
 80019c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <setEffectsFunctions+0x268>)
 80019ce:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80019d2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80019d6:	4c38      	ldr	r4, [pc, #224]	; (8001ab8 <setEffectsFunctions+0x2f8>)
 80019d8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80019dc:	4816      	ldr	r0, [pc, #88]	; (8001a38 <setEffectsFunctions+0x278>)
 80019de:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 80019e0:	4836      	ldr	r0, [pc, #216]	; (8001abc <setEffectsFunctions+0x2fc>)
 80019e2:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
 80019e4:	482c      	ldr	r0, [pc, #176]	; (8001a98 <setEffectsFunctions+0x2d8>)
 80019e6:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 80019e8:	4613      	mov	r3, r2
 80019ea:	4a2c      	ldr	r2, [pc, #176]	; (8001a9c <setEffectsFunctions+0x2dc>)
 80019ec:	611a      	str	r2, [r3, #16]
			  break;
 80019ee:	e718      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &delayTick;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <setEffectsFunctions+0x260>)
 80019f2:	4a33      	ldr	r2, [pc, #204]	; (8001ac0 <setEffectsFunctions+0x300>)
 80019f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <setEffectsFunctions+0x268>)
 80019fa:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80019fe:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001a02:	4c30      	ldr	r4, [pc, #192]	; (8001ac4 <setEffectsFunctions+0x304>)
 8001a04:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &delayParam2;
 8001a08:	482f      	ldr	r0, [pc, #188]	; (8001ac8 <setEffectsFunctions+0x308>)
 8001a0a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &delayParam3;
 8001a0c:	482f      	ldr	r0, [pc, #188]	; (8001acc <setEffectsFunctions+0x30c>)
 8001a0e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &delayParam4;
 8001a10:	482f      	ldr	r0, [pc, #188]	; (8001ad0 <setEffectsFunctions+0x310>)
 8001a12:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &delayParam5;
 8001a14:	4613      	mov	r3, r2
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <setEffectsFunctions+0x314>)
 8001a18:	611a      	str	r2, [r3, #16]
			  break;
 8001a1a:	e702      	b.n	8001822 <setEffectsFunctions+0x62>
 8001a1c:	20013f64 	.word	0x20013f64
 8001a20:	2001c934 	.word	0x2001c934
 8001a24:	00006561 	.word	0x00006561
 8001a28:	20013f14 	.word	0x20013f14
 8001a2c:	00001621 	.word	0x00001621
 8001a30:	00006621 	.word	0x00006621
 8001a34:	00005a81 	.word	0x00005a81
 8001a38:	00005d81 	.word	0x00005d81
 8001a3c:	00005de1 	.word	0x00005de1
 8001a40:	000066a1 	.word	0x000066a1
 8001a44:	00005e41 	.word	0x00005e41
 8001a48:	00006741 	.word	0x00006741
 8001a4c:	00005ec1 	.word	0x00005ec1
 8001a50:	000067e1 	.word	0x000067e1
 8001a54:	000065c1 	.word	0x000065c1
 8001a58:	00006501 	.word	0x00006501
 8001a5c:	00005dc1 	.word	0x00005dc1
 8001a60:	000068a1 	.word	0x000068a1
 8001a64:	00005c81 	.word	0x00005c81
 8001a68:	00005ca1 	.word	0x00005ca1
 8001a6c:	00005ce1 	.word	0x00005ce1
 8001a70:	00005d01 	.word	0x00005d01
 8001a74:	00005d41 	.word	0x00005d41
 8001a78:	00006421 	.word	0x00006421
 8001a7c:	00006201 	.word	0x00006201
 8001a80:	00006241 	.word	0x00006241
 8001a84:	00006261 	.word	0x00006261
 8001a88:	000062a1 	.word	0x000062a1
 8001a8c:	00006861 	.word	0x00006861
 8001a90:	00005da1 	.word	0x00005da1
 8001a94:	00005fa1 	.word	0x00005fa1
 8001a98:	00005f41 	.word	0x00005f41
 8001a9c:	00005f61 	.word	0x00005f61
 8001aa0:	00006581 	.word	0x00006581
 8001aa4:	00005b41 	.word	0x00005b41
 8001aa8:	00005ba1 	.word	0x00005ba1
 8001aac:	00005c01 	.word	0x00005c01
 8001ab0:	00005c41 	.word	0x00005c41
 8001ab4:	00006081 	.word	0x00006081
 8001ab8:	00005ac1 	.word	0x00005ac1
 8001abc:	00005b01 	.word	0x00005b01
 8001ac0:	080035a1 	.word	0x080035a1
 8001ac4:	000062e1 	.word	0x000062e1
 8001ac8:	00006321 	.word	0x00006321
 8001acc:	00006361 	.word	0x00006361
 8001ad0:	000063a1 	.word	0x000063a1
 8001ad4:	000063e1 	.word	0x000063e1
			  effectTick[i] = &FXlowpassTick;
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <setEffectsFunctions+0x478>)
 8001ada:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <setEffectsFunctions+0x47c>)
 8001adc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <setEffectsFunctions+0x480>)
 8001ae2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001ae6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001aea:	4c56      	ldr	r4, [pc, #344]	; (8001c44 <setEffectsFunctions+0x484>)
 8001aec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001af0:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <setEffectsFunctions+0x488>)
 8001af2:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001af4:	4c55      	ldr	r4, [pc, #340]	; (8001c4c <setEffectsFunctions+0x48c>)
 8001af6:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001af8:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001afa:	6102      	str	r2, [r0, #16]
			  break;
 8001afc:	e691      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXhighpassTick;
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <setEffectsFunctions+0x478>)
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <setEffectsFunctions+0x490>)
 8001b02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001b06:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <setEffectsFunctions+0x480>)
 8001b08:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001b0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001b10:	4c50      	ldr	r4, [pc, #320]	; (8001c54 <setEffectsFunctions+0x494>)
 8001b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001b16:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <setEffectsFunctions+0x488>)
 8001b18:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001b1a:	4c4f      	ldr	r4, [pc, #316]	; (8001c58 <setEffectsFunctions+0x498>)
 8001b1c:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001b1e:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b20:	6102      	str	r2, [r0, #16]
			  break;
 8001b22:	e67e      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXbandpassTick;
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <setEffectsFunctions+0x478>)
 8001b26:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <setEffectsFunctions+0x49c>)
 8001b28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001b2c:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <setEffectsFunctions+0x480>)
 8001b2e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001b32:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001b36:	4c4a      	ldr	r4, [pc, #296]	; (8001c60 <setEffectsFunctions+0x4a0>)
 8001b38:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001b3c:	4a42      	ldr	r2, [pc, #264]	; (8001c48 <setEffectsFunctions+0x488>)
 8001b3e:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001b40:	4c48      	ldr	r4, [pc, #288]	; (8001c64 <setEffectsFunctions+0x4a4>)
 8001b42:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001b44:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b46:	6102      	str	r2, [r0, #16]
			  break;
 8001b48:	e66b      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <setEffectsFunctions+0x478>)
 8001b4c:	4a46      	ldr	r2, [pc, #280]	; (8001c68 <setEffectsFunctions+0x4a8>)
 8001b4e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <setEffectsFunctions+0x480>)
 8001b54:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001b58:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001b5c:	4c43      	ldr	r4, [pc, #268]	; (8001c6c <setEffectsFunctions+0x4ac>)
 8001b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001b62:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <setEffectsFunctions+0x488>)
 8001b64:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001b66:	4c42      	ldr	r4, [pc, #264]	; (8001c70 <setEffectsFunctions+0x4b0>)
 8001b68:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001b6a:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b6c:	6102      	str	r2, [r0, #16]
			  break;
 8001b6e:	e658      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZpeakTick;
 8001b70:	4b31      	ldr	r3, [pc, #196]	; (8001c38 <setEffectsFunctions+0x478>)
 8001b72:	4a40      	ldr	r2, [pc, #256]	; (8001c74 <setEffectsFunctions+0x4b4>)
 8001b74:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001b78:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <setEffectsFunctions+0x480>)
 8001b7a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001b7e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001b82:	4c3d      	ldr	r4, [pc, #244]	; (8001c78 <setEffectsFunctions+0x4b8>)
 8001b84:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001b88:	483c      	ldr	r0, [pc, #240]	; (8001c7c <setEffectsFunctions+0x4bc>)
 8001b8a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001b8c:	483c      	ldr	r0, [pc, #240]	; (8001c80 <setEffectsFunctions+0x4c0>)
 8001b8e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001b90:	482d      	ldr	r0, [pc, #180]	; (8001c48 <setEffectsFunctions+0x488>)
 8001b92:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b94:	6110      	str	r0, [r2, #16]
			  break;
 8001b96:	e644      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZlowshelfTick;
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <setEffectsFunctions+0x478>)
 8001b9a:	4a3a      	ldr	r2, [pc, #232]	; (8001c84 <setEffectsFunctions+0x4c4>)
 8001b9c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <setEffectsFunctions+0x480>)
 8001ba2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001ba6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001baa:	4c37      	ldr	r4, [pc, #220]	; (8001c88 <setEffectsFunctions+0x4c8>)
 8001bac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001bb0:	4836      	ldr	r0, [pc, #216]	; (8001c8c <setEffectsFunctions+0x4cc>)
 8001bb2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001bb4:	4836      	ldr	r0, [pc, #216]	; (8001c90 <setEffectsFunctions+0x4d0>)
 8001bb6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001bb8:	4823      	ldr	r0, [pc, #140]	; (8001c48 <setEffectsFunctions+0x488>)
 8001bba:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001bbc:	6110      	str	r0, [r2, #16]
			  break;
 8001bbe:	e630      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZhighshelfTick;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <setEffectsFunctions+0x478>)
 8001bc2:	4a34      	ldr	r2, [pc, #208]	; (8001c94 <setEffectsFunctions+0x4d4>)
 8001bc4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <setEffectsFunctions+0x480>)
 8001bca:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001bce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001bd2:	4c31      	ldr	r4, [pc, #196]	; (8001c98 <setEffectsFunctions+0x4d8>)
 8001bd4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001bd8:	4830      	ldr	r0, [pc, #192]	; (8001c9c <setEffectsFunctions+0x4dc>)
 8001bda:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001bdc:	4830      	ldr	r0, [pc, #192]	; (8001ca0 <setEffectsFunctions+0x4e0>)
 8001bde:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <setEffectsFunctions+0x488>)
 8001be2:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001be4:	6110      	str	r0, [r2, #16]
			  break;
 8001be6:	e61c      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZbandrejectTick;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <setEffectsFunctions+0x478>)
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <setEffectsFunctions+0x4e4>)
 8001bec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <setEffectsFunctions+0x480>)
 8001bf2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001bf6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001bfa:	4c2b      	ldr	r4, [pc, #172]	; (8001ca8 <setEffectsFunctions+0x4e8>)
 8001bfc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 8001c00:	482a      	ldr	r0, [pc, #168]	; (8001cac <setEffectsFunctions+0x4ec>)
 8001c02:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001c04:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <setEffectsFunctions+0x4f0>)
 8001c06:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001c08:	480f      	ldr	r0, [pc, #60]	; (8001c48 <setEffectsFunctions+0x488>)
 8001c0a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001c0c:	6110      	str	r0, [r2, #16]
			  break;
 8001c0e:	e608      	b.n	8001822 <setEffectsFunctions+0x62>
			  effectTick[i] = &FXLadderLowpassTick;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <setEffectsFunctions+0x478>)
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <setEffectsFunctions+0x4f4>)
 8001c14:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <setEffectsFunctions+0x480>)
 8001c1a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c1e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c22:	4c25      	ldr	r4, [pc, #148]	; (8001cb8 <setEffectsFunctions+0x4f8>)
 8001c24:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <setEffectsFunctions+0x488>)
 8001c2a:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001c2c:	4c23      	ldr	r4, [pc, #140]	; (8001cbc <setEffectsFunctions+0x4fc>)
 8001c2e:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001c30:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001c32:	6102      	str	r2, [r0, #16]
}
 8001c34:	e5f5      	b.n	8001822 <setEffectsFunctions+0x62>
 8001c36:	bf00      	nop
 8001c38:	2001c934 	.word	0x2001c934
 8001c3c:	000068c1 	.word	0x000068c1
 8001c40:	20013f14 	.word	0x20013f14
 8001c44:	000069e1 	.word	0x000069e1
 8001c48:	00001621 	.word	0x00001621
 8001c4c:	00006d21 	.word	0x00006d21
 8001c50:	000068e1 	.word	0x000068e1
 8001c54:	00006a21 	.word	0x00006a21
 8001c58:	00006d41 	.word	0x00006d41
 8001c5c:	00006901 	.word	0x00006901
 8001c60:	00006a61 	.word	0x00006a61
 8001c64:	00006d61 	.word	0x00006d61
 8001c68:	00006921 	.word	0x00006921
 8001c6c:	00006aa1 	.word	0x00006aa1
 8001c70:	00006d81 	.word	0x00006d81
 8001c74:	00006941 	.word	0x00006941
 8001c78:	00006ae1 	.word	0x00006ae1
 8001c7c:	00006c21 	.word	0x00006c21
 8001c80:	00006da1 	.word	0x00006da1
 8001c84:	00006961 	.word	0x00006961
 8001c88:	00006b21 	.word	0x00006b21
 8001c8c:	00006c61 	.word	0x00006c61
 8001c90:	00006dc1 	.word	0x00006dc1
 8001c94:	00006981 	.word	0x00006981
 8001c98:	00006b61 	.word	0x00006b61
 8001c9c:	00006ca1 	.word	0x00006ca1
 8001ca0:	00006de1 	.word	0x00006de1
 8001ca4:	000069a1 	.word	0x000069a1
 8001ca8:	00006ba1 	.word	0x00006ba1
 8001cac:	00006ce1 	.word	0x00006ce1
 8001cb0:	00006e01 	.word	0x00006e01
 8001cb4:	000069c1 	.word	0x000069c1
 8001cb8:	00006be1 	.word	0x00006be1
 8001cbc:	00006e21 	.word	0x00006e21

08001cc0 <setOscilllatorShapes>:
	switch (oscshape)
 8001cc0:	2805      	cmp	r0, #5
 8001cc2:	d821      	bhi.n	8001d08 <setOscilllatorShapes+0x48>
 8001cc4:	e8df f000 	tbb	[pc, r0]
 8001cc8:	120d0803 	.word	0x120d0803
 8001ccc:	1c17      	.short	0x1c17
			  shapeTick[i] = &sawSquareTick;
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <setOscilllatorShapes+0x50>)
 8001cd2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001cd6:	4770      	bx	lr
			  shapeTick[i] = &sineTriTick;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <setOscilllatorShapes+0x54>)
 8001cdc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001ce0:	4770      	bx	lr
			  shapeTick[i] = &sawTick;
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <setOscilllatorShapes+0x58>)
 8001ce6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001cea:	4770      	bx	lr
			  shapeTick[i] = &pulseTick;
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <setOscilllatorShapes+0x5c>)
 8001cf0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001cf4:	4770      	bx	lr
			  shapeTick[i] = &sineTick;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001cf8:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <setOscilllatorShapes+0x60>)
 8001cfa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001cfe:	4770      	bx	lr
			  shapeTick[i] = &triTick;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <setOscilllatorShapes+0x4c>)
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <setOscilllatorShapes+0x64>)
 8001d04:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	2001cf04 	.word	0x2001cf04
 8001d10:	000049e1 	.word	0x000049e1
 8001d14:	00004a41 	.word	0x00004a41
 8001d18:	00004aa1 	.word	0x00004aa1
 8001d1c:	00004ae1 	.word	0x00004ae1
 8001d20:	00004b41 	.word	0x00004b41
 8001d24:	00004b81 	.word	0x00004b81

08001d28 <setFilterTypes>:
	switch (filterType)
 8001d28:	2808      	cmp	r0, #8
 8001d2a:	d87a      	bhi.n	8001e22 <setFilterTypes+0xfa>
 8001d2c:	e8df f000 	tbb	[pc, r0]
 8001d30:	2c1f1205 	.word	0x2c1f1205
 8001d34:	60534639 	.word	0x60534639
 8001d38:	6d          	.byte	0x6d
 8001d39:	00          	.byte	0x00
				  filterTick[i] = &lowpassTick;
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <setFilterTypes+0xfc>)
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <setFilterTypes+0x100>)
 8001d3e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &lowpassSetQ;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <setFilterTypes+0x104>)
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <setFilterTypes+0x108>)
 8001d46:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001d4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001d4e:	4a39      	ldr	r2, [pc, #228]	; (8001e34 <setFilterTypes+0x10c>)
 8001d50:	605a      	str	r2, [r3, #4]
				  break;
 8001d52:	4770      	bx	lr
				  filterTick[i] = &highpassTick;
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <setFilterTypes+0xfc>)
 8001d56:	4a38      	ldr	r2, [pc, #224]	; (8001e38 <setFilterTypes+0x110>)
 8001d58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &highpassSetQ;
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <setFilterTypes+0x104>)
 8001d5e:	4a37      	ldr	r2, [pc, #220]	; (8001e3c <setFilterTypes+0x114>)
 8001d60:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8001d64:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001d68:	4a35      	ldr	r2, [pc, #212]	; (8001e40 <setFilterTypes+0x118>)
 8001d6a:	605a      	str	r2, [r3, #4]
				  break;
 8001d6c:	4770      	bx	lr
				  filterTick[i] = &bandpassTick;
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <setFilterTypes+0xfc>)
 8001d70:	4a34      	ldr	r2, [pc, #208]	; (8001e44 <setFilterTypes+0x11c>)
 8001d72:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &bandpassSetQ;
 8001d76:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <setFilterTypes+0x104>)
 8001d78:	4a33      	ldr	r2, [pc, #204]	; (8001e48 <setFilterTypes+0x120>)
 8001d7a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001d7e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001d82:	4a32      	ldr	r2, [pc, #200]	; (8001e4c <setFilterTypes+0x124>)
 8001d84:	605a      	str	r2, [r3, #4]
				  break;
 8001d86:	4770      	bx	lr
				  filterTick[i] = &diodeLowpassTick;
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <setFilterTypes+0xfc>)
 8001d8a:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <setFilterTypes+0x128>)
 8001d8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <setFilterTypes+0x104>)
 8001d92:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <setFilterTypes+0x12c>)
 8001d94:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001d98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001d9c:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <setFilterTypes+0x130>)
 8001d9e:	605a      	str	r2, [r3, #4]
				  break;
 8001da0:	4770      	bx	lr
				  filterTick[i] = &VZpeakTick;
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <setFilterTypes+0xfc>)
 8001da4:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <setFilterTypes+0x134>)
 8001da6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <setFilterTypes+0x104>)
 8001dac:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <setFilterTypes+0x138>)
 8001dae:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001db2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001db6:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <setFilterTypes+0x13c>)
 8001db8:	605a      	str	r2, [r3, #4]
				  break;
 8001dba:	4770      	bx	lr
				  filterTick[i] = &VZlowshelfTick;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <setFilterTypes+0xfc>)
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	; (8001e68 <setFilterTypes+0x140>)
 8001dc0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <setFilterTypes+0x104>)
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <setFilterTypes+0x144>)
 8001dc8:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001dcc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <setFilterTypes+0x148>)
 8001dd2:	605a      	str	r2, [r3, #4]
				  break;
 8001dd4:	4770      	bx	lr
				  filterTick[i] = &VZhighshelfTick;
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <setFilterTypes+0xfc>)
 8001dd8:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <setFilterTypes+0x14c>)
 8001dda:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <setFilterTypes+0x104>)
 8001de0:	4a25      	ldr	r2, [pc, #148]	; (8001e78 <setFilterTypes+0x150>)
 8001de2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001de6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <setFilterTypes+0x154>)
 8001dec:	605a      	str	r2, [r3, #4]
				  break;
 8001dee:	4770      	bx	lr
				  filterTick[i] = &VZbandrejectTick;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <setFilterTypes+0xfc>)
 8001df2:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <setFilterTypes+0x158>)
 8001df4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <setFilterTypes+0x104>)
 8001dfa:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <setFilterTypes+0x15c>)
 8001dfc:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001e00:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e04:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <setFilterTypes+0x160>)
 8001e06:	605a      	str	r2, [r3, #4]
				  break;
 8001e08:	4770      	bx	lr
				  filterTick[i] = &LadderLowpassTick;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <setFilterTypes+0xfc>)
 8001e0c:	4a1f      	ldr	r2, [pc, #124]	; (8001e8c <setFilterTypes+0x164>)
 8001e0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <setFilterTypes+0x104>)
 8001e14:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <setFilterTypes+0x168>)
 8001e16:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001e1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <setFilterTypes+0x16c>)
 8001e20:	605a      	str	r2, [r3, #4]
}
 8001e22:	4770      	bx	lr
 8001e24:	2001c9a8 	.word	0x2001c9a8
 8001e28:	00004d21 	.word	0x00004d21
 8001e2c:	20015f68 	.word	0x20015f68
 8001e30:	00005041 	.word	0x00005041
 8001e34:	00005161 	.word	0x00005161
 8001e38:	00004d61 	.word	0x00004d61
 8001e3c:	00005061 	.word	0x00005061
 8001e40:	000051a1 	.word	0x000051a1
 8001e44:	00004da1 	.word	0x00004da1
 8001e48:	00005081 	.word	0x00005081
 8001e4c:	000051e1 	.word	0x000051e1
 8001e50:	00004de1 	.word	0x00004de1
 8001e54:	000050a1 	.word	0x000050a1
 8001e58:	00005221 	.word	0x00005221
 8001e5c:	00004e21 	.word	0x00004e21
 8001e60:	000050c1 	.word	0x000050c1
 8001e64:	00005261 	.word	0x00005261
 8001e68:	00004e61 	.word	0x00004e61
 8001e6c:	000050e1 	.word	0x000050e1
 8001e70:	000052a1 	.word	0x000052a1
 8001e74:	00004ea1 	.word	0x00004ea1
 8001e78:	00005101 	.word	0x00005101
 8001e7c:	000052e1 	.word	0x000052e1
 8001e80:	00004ee1 	.word	0x00004ee1
 8001e84:	00005121 	.word	0x00005121
 8001e88:	00005321 	.word	0x00005321
 8001e8c:	00004f21 	.word	0x00004f21
 8001e90:	00005141 	.word	0x00005141
 8001e94:	00005361 	.word	0x00005361

08001e98 <setLFOShapes>:
{
 8001e98:	b410      	push	{r4}
	switch(LFOShape)
 8001e9a:	2805      	cmp	r0, #5
 8001e9c:	d814      	bhi.n	8001ec8 <setLFOShapes+0x30>
 8001e9e:	e8df f000 	tbb	[pc, r0]
 8001ea2:	1603      	.short	0x1603
 8001ea4:	5a493827 	.word	0x5a493827
			lfoShapeTick[i] = &lfoSineTriTick;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <setLFOShapes+0xe0>)
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <setLFOShapes+0xe4>)
 8001eac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <setLFOShapes+0xe8>)
 8001eb2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001eb6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001eba:	4c32      	ldr	r4, [pc, #200]	; (8001f84 <setLFOShapes+0xec>)
 8001ebc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 8001ec0:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <setLFOShapes+0xf0>)
 8001ec2:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8001ec4:	4a31      	ldr	r2, [pc, #196]	; (8001f8c <setLFOShapes+0xf4>)
 8001ec6:	6082      	str	r2, [r0, #8]
}
 8001ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ecc:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <setLFOShapes+0xe0>)
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <setLFOShapes+0xf8>)
 8001ed2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <setLFOShapes+0xe8>)
 8001ed8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001edc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001ee0:	4c2c      	ldr	r4, [pc, #176]	; (8001f94 <setLFOShapes+0xfc>)
 8001ee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8001ee6:	4a2c      	ldr	r2, [pc, #176]	; (8001f98 <setLFOShapes+0x100>)
 8001ee8:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <setLFOShapes+0x104>)
 8001eec:	6082      	str	r2, [r0, #8]
			break;
 8001eee:	e7eb      	b.n	8001ec8 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSineTick;
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <setLFOShapes+0xe0>)
 8001ef2:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <setLFOShapes+0x108>)
 8001ef4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <setLFOShapes+0xe8>)
 8001efa:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001efe:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f02:	4c28      	ldr	r4, [pc, #160]	; (8001fa4 <setLFOShapes+0x10c>)
 8001f04:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineSetShape;
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <setLFOShapes+0x110>)
 8001f0a:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <setLFOShapes+0x114>)
 8001f0e:	6082      	str	r2, [r0, #8]
			break;
 8001f10:	e7da      	b.n	8001ec8 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoTriTick;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <setLFOShapes+0xe0>)
 8001f14:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <setLFOShapes+0x118>)
 8001f16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <setLFOShapes+0xe8>)
 8001f1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001f20:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f24:	4c23      	ldr	r4, [pc, #140]	; (8001fb4 <setLFOShapes+0x11c>)
 8001f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoTriSetShape;
 8001f2a:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <setLFOShapes+0x120>)
 8001f2c:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <setLFOShapes+0x124>)
 8001f30:	6082      	str	r2, [r0, #8]
			break;
 8001f32:	e7c9      	b.n	8001ec8 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSawTick;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <setLFOShapes+0xe0>)
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <setLFOShapes+0x128>)
 8001f38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001f3c:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <setLFOShapes+0xe8>)
 8001f3e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001f42:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f46:	4c1f      	ldr	r4, [pc, #124]	; (8001fc4 <setLFOShapes+0x12c>)
 8001f48:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSetShape;
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <setLFOShapes+0x130>)
 8001f4e:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8001f50:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <setLFOShapes+0x134>)
 8001f52:	6082      	str	r2, [r0, #8]
			break;
 8001f54:	e7b8      	b.n	8001ec8 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoPulseTick;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <setLFOShapes+0xe0>)
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <setLFOShapes+0x138>)
 8001f5a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <setLFOShapes+0xe8>)
 8001f60:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001f64:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f68:	4c1a      	ldr	r4, [pc, #104]	; (8001fd4 <setLFOShapes+0x13c>)
 8001f6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoPulseSetShape;
 8001f6e:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <setLFOShapes+0x140>)
 8001f70:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8001f72:	4a1a      	ldr	r2, [pc, #104]	; (8001fdc <setLFOShapes+0x144>)
 8001f74:	6082      	str	r2, [r0, #8]
}
 8001f76:	e7a7      	b.n	8001ec8 <setLFOShapes+0x30>
 8001f78:	2001cb2c 	.word	0x2001cb2c
 8001f7c:	00005781 	.word	0x00005781
 8001f80:	20018094 	.word	0x20018094
 8001f84:	00005861 	.word	0x00005861
 8001f88:	000059e1 	.word	0x000059e1
 8001f8c:	00005921 	.word	0x00005921
 8001f90:	00005761 	.word	0x00005761
 8001f94:	00005841 	.word	0x00005841
 8001f98:	000059c1 	.word	0x000059c1
 8001f9c:	00005901 	.word	0x00005901
 8001fa0:	000057a1 	.word	0x000057a1
 8001fa4:	00005881 	.word	0x00005881
 8001fa8:	00005a01 	.word	0x00005a01
 8001fac:	00005941 	.word	0x00005941
 8001fb0:	000057c1 	.word	0x000057c1
 8001fb4:	000058a1 	.word	0x000058a1
 8001fb8:	00005a21 	.word	0x00005a21
 8001fbc:	00005961 	.word	0x00005961
 8001fc0:	000057e1 	.word	0x000057e1
 8001fc4:	000058c1 	.word	0x000058c1
 8001fc8:	00005a41 	.word	0x00005a41
 8001fcc:	00005981 	.word	0x00005981
 8001fd0:	00005821 	.word	0x00005821
 8001fd4:	000058e1 	.word	0x000058e1
 8001fd8:	00005a61 	.word	0x00005a61
 8001fdc:	000059a1 	.word	0x000059a1

08001fe0 <fromHex>:
{
 8001fe0:	4603      	mov	r3, r0
	if (('0' <= value) && (value <= '9'))
 8001fe2:	3830      	subs	r0, #48	; 0x30
 8001fe4:	b2c0      	uxtb	r0, r0
 8001fe6:	2809      	cmp	r0, #9
 8001fe8:	d90a      	bls.n	8002000 <fromHex+0x20>
	if (('a' <= value) && (value <= 'f'))
 8001fea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	2a05      	cmp	r2, #5
 8001ff2:	d906      	bls.n	8002002 <fromHex+0x22>
	if (('A' <= value) && (value <= 'F'))
 8001ff4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	2a05      	cmp	r2, #5
 8001ffc:	d904      	bls.n	8002008 <fromHex+0x28>
	return 0;
 8001ffe:	2000      	movs	r0, #0
}
 8002000:	4770      	bx	lr
		return (uint8_t) (10 + value - 'a');
 8002002:	3b57      	subs	r3, #87	; 0x57
 8002004:	b2d8      	uxtb	r0, r3
 8002006:	4770      	bx	lr
		return (uint8_t) (10 + value - 'A');
 8002008:	3b37      	subs	r3, #55	; 0x37
 800200a:	b2d8      	uxtb	r0, r3
 800200c:	4770      	bx	lr

0800200e <fromAscii>:
{
 800200e:	b538      	push	{r3, r4, r5, lr}
 8002010:	460d      	mov	r5, r1
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8002012:	f7ff ffe5 	bl	8001fe0 <fromHex>
 8002016:	0104      	lsls	r4, r0, #4
 8002018:	4628      	mov	r0, r5
 800201a:	f7ff ffe1 	bl	8001fe0 <fromHex>
 800201e:	4320      	orrs	r0, r4
}
 8002020:	b2c0      	uxtb	r0, r0
 8002022:	bd38      	pop	{r3, r4, r5, pc}

08002024 <CycleCounterInit>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002024:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <CycleCounterInit+0x30>)
 8002026:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <CycleCounterInit+0x34>)
 8002034:	f8d3 3fb4 	ldr.w	r3, [r3, #4020]	; 0xfb4
 8002038:	f013 0f01 	tst.w	r3, #1
 800203c:	d003      	beq.n	8002046 <CycleCounterInit+0x22>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <CycleCounterInit+0x34>)
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <CycleCounterInit+0x38>)
 8002042:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <CycleCounterInit+0x34>)
 8002048:	2200      	movs	r2, #0
 800204a:	605a      	str	r2, [r3, #4]
  DWT->CTRL = 0x40000001;
 800204c:	4a04      	ldr	r2, [pc, #16]	; (8002060 <CycleCounterInit+0x3c>)
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	e0001000 	.word	0xe0001000
 800205c:	c5acce55 	.word	0xc5acce55
 8002060:	40000001 	.word	0x40000001

08002064 <main>:
{
 8002064:	b530      	push	{r4, r5, lr}
 8002066:	ed2d 8b02 	vpush	{d8}
 800206a:	b083      	sub	sp, #12
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800206c:	4bb3      	ldr	r3, [pc, #716]	; (800233c <main+0x2d8>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002074:	d113      	bne.n	800209e <main+0x3a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800207a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800207e:	4baf      	ldr	r3, [pc, #700]	; (800233c <main+0x2d8>)
 8002080:	2200      	movs	r2, #0
 8002082:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002086:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800208a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002094:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002096:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800209a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800209e:	4ba7      	ldr	r3, [pc, #668]	; (800233c <main+0x2d8>)
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80020a6:	d127      	bne.n	80020f8 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80020a8:	4ba4      	ldr	r3, [pc, #656]	; (800233c <main+0x2d8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80020b0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80020b4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80020b8:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80020bc:	e000      	b.n	80020c0 <main+0x5c>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80020be:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80020c0:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80020c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80020c8:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80020cc:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80020d0:	499a      	ldr	r1, [pc, #616]	; (800233c <main+0x2d8>)
 80020d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80020d6:	4613      	mov	r3, r2
 80020d8:	3a01      	subs	r2, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f2      	bne.n	80020c4 <main+0x60>
    } while(sets-- != 0U);
 80020de:	1e43      	subs	r3, r0, #1
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1ec      	bne.n	80020be <main+0x5a>
 80020e4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80020e8:	694b      	ldr	r3, [r1, #20]
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	614b      	str	r3, [r1, #20]
 80020f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80020f4:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80020f8:	f001 fb22 	bl	8003740 <HAL_Init>
  MPU_Config();
 80020fc:	f7ff f80a 	bl	8001114 <MPU_Config>
  __ASM volatile ("cpsie i" : : : "memory");
 8002100:	b662      	cpsie	i
  SystemClock_Config();
 8002102:	f7ff f85f 	bl	80011c4 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002106:	f7ff f8df 	bl	80012c8 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800210a:	f7fe fe7b 	bl	8000e04 <MX_GPIO_Init>
  MX_DMA_Init();
 800210e:	f7fe fd83 	bl	8000c18 <MX_DMA_Init>
  MX_FMC_Init();
 8002112:	f7fe fe35 	bl	8000d80 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002116:	f000 fb45 	bl	80027a4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800211a:	f009 f99d 	bl	800b458 <MX_FATFS_Init>
  MX_SAI1_Init();
 800211e:	f000 fa55 	bl	80025cc <MX_SAI1_Init>
  MX_RNG_Init();
 8002122:	f000 fa15 	bl	8002550 <MX_RNG_Init>
  MX_I2C2_Init();
 8002126:	f7fe ff6b 	bl	8001000 <MX_I2C2_Init>
  MX_SPI1_Init();
 800212a:	f000 fbab 	bl	8002884 <MX_SPI1_Init>
  MX_SPI5_Init();
 800212e:	f000 fbcf 	bl	80028d0 <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002132:	4d83      	ldr	r5, [pc, #524]	; (8002340 <main+0x2dc>)
 8002134:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002138:	4628      	mov	r0, r5
 800213a:	f003 f8d7 	bl	80052ec <HAL_GPIO_ReadPin>
 800213e:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002140:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002144:	4628      	mov	r0, r5
 8002146:	f003 f8d1 	bl	80052ec <HAL_GPIO_ReadPin>
 800214a:	4605      	mov	r5, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800214c:	2104      	movs	r1, #4
 800214e:	487d      	ldr	r0, [pc, #500]	; (8002344 <main+0x2e0>)
 8002150:	f003 f8cc 	bl	80052ec <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002154:	0063      	lsls	r3, r4, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	00aa      	lsls	r2, r5, #2
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	4413      	add	r3, r2
 800215e:	b2db      	uxtb	r3, r3
 8002160:	4403      	add	r3, r0
 8002162:	4a79      	ldr	r2, [pc, #484]	; (8002348 <main+0x2e4>)
 8002164:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 8002166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800216a:	f001 fb29 	bl	80037c0 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 800216e:	4a77      	ldr	r2, [pc, #476]	; (800234c <main+0x2e8>)
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002178:	4b74      	ldr	r3, [pc, #464]	; (800234c <main+0x2e8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002180:	d0fa      	beq.n	8002178 <main+0x114>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 8002182:	4b73      	ldr	r3, [pc, #460]	; (8002350 <main+0x2ec>)
 8002184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002188:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800218c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	9b00      	ldr	r3, [sp, #0]
  return __builtin_arm_get_fpscr();
 800219c:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80021a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 80021a4:	eee1 3a10 	vmsr	fpscr, r3
  CycleCounterInit();
 80021a8:	f7ff ff3c 	bl	8002024 <CycleCounterInit>
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 80021ac:	2300      	movs	r3, #0
 80021ae:	e003      	b.n	80021b8 <main+0x154>
	  SPI_PLUCK_TX[i] = 0;
 80021b0:	4a68      	ldr	r2, [pc, #416]	; (8002354 <main+0x2f0>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 80021b6:	3301      	adds	r3, #1
 80021b8:	2b3f      	cmp	r3, #63	; 0x3f
 80021ba:	ddf9      	ble.n	80021b0 <main+0x14c>
  for (int i = 0; i < 4096; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	e003      	b.n	80021c8 <main+0x164>
	  buffer[i] = 0;
 80021c0:	4a65      	ldr	r2, [pc, #404]	; (8002358 <main+0x2f4>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 4096; i++)
 80021c6:	3301      	adds	r3, #1
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	dbf8      	blt.n	80021c0 <main+0x15c>
  buffer[15+112] = NUM_PARAMS;
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <main+0x2f4>)
 80021d0:	229c      	movs	r2, #156	; 0x9c
 80021d2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80021d6:	22ef      	movs	r2, #239	; 0xef
 80021d8:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+17+112] = 0xef;
 80021dc:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+19+112] = 1;
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80021e6:	22fe      	movs	r2, #254	; 0xfe
 80021e8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  buffer[NUM_PARAMS*2+26+112] = 0xfe;
 80021ec:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80021f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80021f8:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80021fc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800235c <main+0x2f8>
 8002200:	4857      	ldr	r0, [pc, #348]	; (8002360 <main+0x2fc>)
 8002202:	f00f fb71 	bl	80118e8 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8002206:	ed9f 8a57 	vldr	s16, [pc, #348]	; 8002364 <main+0x300>
 800220a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8002368 <main+0x304>
 8002212:	eddf 0a56 	vldr	s1, [pc, #344]	; 800236c <main+0x308>
 8002216:	eeb0 0a48 	vmov.f32	s0, s16
 800221a:	4855      	ldr	r0, [pc, #340]	; (8002370 <main+0x30c>)
 800221c:	f00f fb64 	bl	80118e8 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8002220:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002224:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002228:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 800222c:	eeb0 0a48 	vmov.f32	s0, s16
 8002230:	4850      	ldr	r0, [pc, #320]	; (8002374 <main+0x310>)
 8002232:	f00f fb59 	bl	80118e8 <LEAF_generate_table_skew_non_sym>
  for (int i = 0; i < 3; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <main+0x1d8>
 800223a:	3301      	adds	r3, #1
 800223c:	2b02      	cmp	r3, #2
 800223e:	ddfc      	ble.n	800223a <main+0x1d6>
  if (boardNumber == 0)
 8002240:	4b41      	ldr	r3, [pc, #260]	; (8002348 <main+0x2e4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d053      	beq.n	80022f0 <main+0x28c>
	  diskBusy = 1;
 8002248:	4b4b      	ldr	r3, [pc, #300]	; (8002378 <main+0x314>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
  SDRAM_init();
 800224e:	f7ff fa6f 	bl	8001730 <SDRAM_init>
  audioInit();
 8002252:	f7fe fa81 	bl	8000758 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 8002256:	4849      	ldr	r0, [pc, #292]	; (800237c <main+0x318>)
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <main+0x31c>)
 800225a:	6003      	str	r3, [r0, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
 800225c:	4b49      	ldr	r3, [pc, #292]	; (8002384 <main+0x320>)
 800225e:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <main+0x324>)
 8002260:	601a      	str	r2, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
 8002262:	4a4a      	ldr	r2, [pc, #296]	; (800238c <main+0x328>)
 8002264:	605a      	str	r2, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <main+0x32c>)
 8002268:	609a      	str	r2, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 800226a:	4a4a      	ldr	r2, [pc, #296]	; (8002394 <main+0x330>)
 800226c:	60da      	str	r2, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
 800226e:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <main+0x334>)
 8002270:	611a      	str	r2, [r3, #16]
  specialModeMacroNames[0][5] = "          ";
 8002272:	4a4a      	ldr	r2, [pc, #296]	; (800239c <main+0x338>)
 8002274:	615a      	str	r2, [r3, #20]
  specialModeMacroNames[0][6] = "          ";
 8002276:	619a      	str	r2, [r3, #24]
  specialModeMacroNames[0][7] = "          ";
 8002278:	61da      	str	r2, [r3, #28]
  specialModeMacroNames[0][8] = "          ";
 800227a:	621a      	str	r2, [r3, #32]
  specialModeMacroNames[0][9] = "          ";
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][10] = "         ";
 800227e:	4948      	ldr	r1, [pc, #288]	; (80023a0 <main+0x33c>)
 8002280:	6299      	str	r1, [r3, #40]	; 0x28
  specialModeMacroNames[0][11] = "         ";
 8002282:	62d9      	str	r1, [r3, #44]	; 0x2c
  specialModeNames[1] = "PHYS STR2     ";
 8002284:	4c47      	ldr	r4, [pc, #284]	; (80023a4 <main+0x340>)
 8002286:	6044      	str	r4, [r0, #4]
  specialModeMacroNames[1][0] = "PrepIndex ";
 8002288:	4c47      	ldr	r4, [pc, #284]	; (80023a8 <main+0x344>)
 800228a:	631c      	str	r4, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "SlideNoise";
 800228c:	4c47      	ldr	r4, [pc, #284]	; (80023ac <main+0x348>)
 800228e:	635c      	str	r4, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002290:	4c47      	ldr	r4, [pc, #284]	; (80023b0 <main+0x34c>)
 8002292:	639c      	str	r4, [r3, #56]	; 0x38
  specialModeMacroNames[1][3] = "Decay     ";
 8002294:	4c47      	ldr	r4, [pc, #284]	; (80023b4 <main+0x350>)
 8002296:	63dc      	str	r4, [r3, #60]	; 0x3c
  specialModeMacroNames[1][4] = "Touch     ";
 8002298:	4d47      	ldr	r5, [pc, #284]	; (80023b8 <main+0x354>)
 800229a:	641d      	str	r5, [r3, #64]	; 0x40
  specialModeMacroNames[1][5] = "PickupPos ";
 800229c:	4d47      	ldr	r5, [pc, #284]	; (80023bc <main+0x358>)
 800229e:	645d      	str	r5, [r3, #68]	; 0x44
  specialModeMacroNames[1][6] = "DampFreq  ";
 80022a0:	4d47      	ldr	r5, [pc, #284]	; (80023c0 <main+0x35c>)
 80022a2:	649d      	str	r5, [r3, #72]	; 0x48
  specialModeMacroNames[1][7] = "FFAmount  ";
 80022a4:	4d47      	ldr	r5, [pc, #284]	; (80023c4 <main+0x360>)
 80022a6:	64dd      	str	r5, [r3, #76]	; 0x4c
  specialModeMacroNames[1][8] = "FBAmount  ";
 80022a8:	4d47      	ldr	r5, [pc, #284]	; (80023c8 <main+0x364>)
 80022aa:	651d      	str	r5, [r3, #80]	; 0x50
  specialModeMacroNames[1][9] = "foldDepth ";
 80022ac:	4d47      	ldr	r5, [pc, #284]	; (80023cc <main+0x368>)
 80022ae:	655d      	str	r5, [r3, #84]	; 0x54
  specialModeMacroNames[1][10] = "prepPosX ";
 80022b0:	4d47      	ldr	r5, [pc, #284]	; (80023d0 <main+0x36c>)
 80022b2:	659d      	str	r5, [r3, #88]	; 0x58
  specialModeMacroNames[1][11] = "prepPosY ";
 80022b4:	4d47      	ldr	r5, [pc, #284]	; (80023d4 <main+0x370>)
 80022b6:	65dd      	str	r5, [r3, #92]	; 0x5c
  specialModeNames[2] = "ADDITIVE      ";
 80022b8:	4d47      	ldr	r5, [pc, #284]	; (80023d8 <main+0x374>)
 80022ba:	6085      	str	r5, [r0, #8]
  specialModeMacroNames[2][0] = "Noise1    ";
 80022bc:	4847      	ldr	r0, [pc, #284]	; (80023dc <main+0x378>)
 80022be:	6618      	str	r0, [r3, #96]	; 0x60
  specialModeMacroNames[2][1] = "Noise2    ";
 80022c0:	4847      	ldr	r0, [pc, #284]	; (80023e0 <main+0x37c>)
 80022c2:	6658      	str	r0, [r3, #100]	; 0x64
  specialModeMacroNames[2][2] = "Tone      ";
 80022c4:	4847      	ldr	r0, [pc, #284]	; (80023e4 <main+0x380>)
 80022c6:	6698      	str	r0, [r3, #104]	; 0x68
  specialModeMacroNames[2][3] = "Decay     ";
 80022c8:	66dc      	str	r4, [r3, #108]	; 0x6c
  specialModeMacroNames[2][4] = "Stretch   ";
 80022ca:	4847      	ldr	r0, [pc, #284]	; (80023e8 <main+0x384>)
 80022cc:	6718      	str	r0, [r3, #112]	; 0x70
  specialModeMacroNames[2][5] = "RandDecy  ";
 80022ce:	4847      	ldr	r0, [pc, #284]	; (80023ec <main+0x388>)
 80022d0:	6758      	str	r0, [r3, #116]	; 0x74
  specialModeMacroNames[2][6] = "RandGain  ";
 80022d2:	4847      	ldr	r0, [pc, #284]	; (80023f0 <main+0x38c>)
 80022d4:	6798      	str	r0, [r3, #120]	; 0x78
  specialModeMacroNames[2][7] = "NoiseVol  ";
 80022d6:	4847      	ldr	r0, [pc, #284]	; (80023f4 <main+0x390>)
 80022d8:	67d8      	str	r0, [r3, #124]	; 0x7c
  specialModeMacroNames[2][8] = "          ";
 80022da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  specialModeMacroNames[2][9] = "          ";
 80022de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  specialModeMacroNames[2][10] = "         ";
 80022e2:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
  specialModeMacroNames[2][11] = "         ";
 80022e6:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  for (int i = 0; i < 3; i++)
 80022ea:	f04f 0c00 	mov.w	ip, #0
 80022ee:	e087      	b.n	8002400 <main+0x39c>
	  getPresetNamesFromSDCard();
 80022f0:	f7ff f93e 	bl	8001570 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <main+0x314>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e7a8      	b.n	800224e <main+0x1ea>
	  for (int k = 0; k < 12; k++)
 80022fc:	2000      	movs	r0, #0
 80022fe:	e019      	b.n	8002334 <main+0x2d0>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002300:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8002304:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002308:	491e      	ldr	r1, [pc, #120]	; (8002384 <main+0x320>)
 800230a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800230e:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 8002312:	f811 e002 	ldrb.w	lr, [r1, r2]
 8002316:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 800231a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8002324:	4934      	ldr	r1, [pc, #208]	; (80023f8 <main+0x394>)
 8002326:	440b      	add	r3, r1
 8002328:	f803 e002 	strb.w	lr, [r3, r2]
		  for (int j = 0; j < 10; j++)
 800232c:	3201      	adds	r2, #1
 800232e:	2a09      	cmp	r2, #9
 8002330:	dde6      	ble.n	8002300 <main+0x29c>
	  for (int k = 0; k < 12; k++)
 8002332:	3001      	adds	r0, #1
 8002334:	280b      	cmp	r0, #11
 8002336:	dc61      	bgt.n	80023fc <main+0x398>
		  for (int j = 0; j < 10; j++)
 8002338:	2200      	movs	r2, #0
 800233a:	e7f8      	b.n	800232e <main+0x2ca>
 800233c:	e000ed00 	.word	0xe000ed00
 8002340:	58020400 	.word	0x58020400
 8002344:	58020000 	.word	0x58020000
 8002348:	20013ebd 	.word	0x20013ebd
 800234c:	58024800 	.word	0x58024800
 8002350:	58024400 	.word	0x58024400
 8002354:	38000000 	.word	0x38000000
 8002358:	30042380 	.word	0x30042380
 800235c:	3c23d70a 	.word	0x3c23d70a
 8002360:	20019fac 	.word	0x20019fac
 8002364:	00000000 	.word	0x00000000
 8002368:	457a0000 	.word	0x457a0000
 800236c:	469c4000 	.word	0x469c4000
 8002370:	20013f68 	.word	0x20013f68
 8002374:	20016094 	.word	0x20016094
 8002378:	20013f10 	.word	0x20013f10
 800237c:	2001c03c 	.word	0x2001c03c
 8002380:	080183a8 	.word	0x080183a8
 8002384:	2001bfac 	.word	0x2001bfac
 8002388:	080183b8 	.word	0x080183b8
 800238c:	080183c4 	.word	0x080183c4
 8002390:	080183d0 	.word	0x080183d0
 8002394:	080183dc 	.word	0x080183dc
 8002398:	080183e8 	.word	0x080183e8
 800239c:	080183f4 	.word	0x080183f4
 80023a0:	08018400 	.word	0x08018400
 80023a4:	0801840c 	.word	0x0801840c
 80023a8:	0801841c 	.word	0x0801841c
 80023ac:	08018428 	.word	0x08018428
 80023b0:	08018434 	.word	0x08018434
 80023b4:	08018440 	.word	0x08018440
 80023b8:	0801844c 	.word	0x0801844c
 80023bc:	08018458 	.word	0x08018458
 80023c0:	08018464 	.word	0x08018464
 80023c4:	08018470 	.word	0x08018470
 80023c8:	0801847c 	.word	0x0801847c
 80023cc:	08018488 	.word	0x08018488
 80023d0:	08018494 	.word	0x08018494
 80023d4:	080184a0 	.word	0x080184a0
 80023d8:	080184ac 	.word	0x080184ac
 80023dc:	080184bc 	.word	0x080184bc
 80023e0:	080184c8 	.word	0x080184c8
 80023e4:	080184d4 	.word	0x080184d4
 80023e8:	080184e0 	.word	0x080184e0
 80023ec:	080184ec 	.word	0x080184ec
 80023f0:	080184f8 	.word	0x080184f8
 80023f4:	08018504 	.word	0x08018504
 80023f8:	30043380 	.word	0x30043380
  for (int i = 0; i < 3; i++)
 80023fc:	f10c 0c01 	add.w	ip, ip, #1
 8002400:	f1bc 0f02 	cmp.w	ip, #2
 8002404:	dc11      	bgt.n	800242a <main+0x3c6>
	  for (int j = 0; j < 14; j++)
 8002406:	2200      	movs	r2, #0
 8002408:	2a0d      	cmp	r2, #13
 800240a:	f73f af77 	bgt.w	80022fc <main+0x298>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <main+0x490>)
 8002410:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 8002414:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 8002418:	5c88      	ldrb	r0, [r1, r2]
 800241a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800241e:	4936      	ldr	r1, [pc, #216]	; (80024f8 <main+0x494>)
 8002420:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002424:	5498      	strb	r0, [r3, r2]
	  for (int j = 0; j < 14; j++)
 8002426:	3201      	adds	r2, #1
 8002428:	e7ee      	b.n	8002408 <main+0x3a4>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	4933      	ldr	r1, [pc, #204]	; (80024fc <main+0x498>)
 800242e:	4834      	ldr	r0, [pc, #208]	; (8002500 <main+0x49c>)
 8002430:	f007 ff70 	bl	800a314 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002434:	4933      	ldr	r1, [pc, #204]	; (8002504 <main+0x4a0>)
 8002436:	2340      	movs	r3, #64	; 0x40
 8002438:	18ca      	adds	r2, r1, r3
 800243a:	4833      	ldr	r0, [pc, #204]	; (8002508 <main+0x4a4>)
 800243c:	f008 f84e 	bl	800a4dc <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002440:	4932      	ldr	r1, [pc, #200]	; (800250c <main+0x4a8>)
 8002442:	4833      	ldr	r0, [pc, #204]	; (8002510 <main+0x4ac>)
 8002444:	f7fe fb3c 	bl	8000ac0 <audioStart>
	AudioCodec_init(&hi2c2);
 8002448:	4832      	ldr	r0, [pc, #200]	; (8002514 <main+0x4b0>)
 800244a:	f7fe fb4b 	bl	8000ae4 <AudioCodec_init>
 800244e:	e033      	b.n	80024b8 <main+0x454>
		  else if (presetWaitingToWrite > 0)
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <main+0x4b4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d140      	bne.n	80024da <main+0x476>
	  if (presetWaitingToParse > 0)
 8002458:	4b30      	ldr	r3, [pc, #192]	; (800251c <main+0x4b8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d141      	bne.n	80024e4 <main+0x480>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 8002460:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <main+0x4bc>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	b90b      	cbnz	r3, 800246c <main+0x408>
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <main+0x4bc>)
 800246a:	885b      	ldrh	r3, [r3, #2]
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800246c:	a901      	add	r1, sp, #4
 800246e:	482d      	ldr	r0, [pc, #180]	; (8002524 <main+0x4c0>)
 8002470:	f006 f8d4 	bl	800861c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8002474:	eddd 7a01 	vldr	s15, [sp, #4]
 8002478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002528 <main+0x4c4>
 8002480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	dd03      	ble.n	8002492 <main+0x42e>
		  myTestInt++;
 800248a:	4a28      	ldr	r2, [pc, #160]	; (800252c <main+0x4c8>)
 800248c:	6813      	ldr	r3, [r2, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	6013      	str	r3, [r2, #0]
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 8002492:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002530 <main+0x4cc>
 8002496:	ee67 7a87 	vmul.f32	s15, s15, s14
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 800249a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <main+0x4d0>)
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	1c51      	adds	r1, r2, #1
 80024a4:	7019      	strb	r1, [r3, #0]
 80024a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <main+0x4d4>)
 80024b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80024b4:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <main+0x4d8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1cb      	bne.n	8002458 <main+0x3f4>
		  if (presetWaitingToLoad > 0)
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <main+0x4dc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0c3      	beq.n	8002450 <main+0x3ec>
			  if (!i2cSending)
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <main+0x4e0>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1c3      	bne.n	8002458 <main+0x3f4>
				  checkForSDCardPreset(presetNumberToLoad);
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <main+0x4e4>)
 80024d2:	7818      	ldrb	r0, [r3, #0]
 80024d4:	f7fe ff26 	bl	8001324 <checkForSDCardPreset>
 80024d8:	e7be      	b.n	8002458 <main+0x3f4>
				  writePresetToSDCard(presetWaitingToWrite);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <main+0x4b4>)
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f7fe ffc7 	bl	8001470 <writePresetToSDCard>
 80024e2:	e7b9      	b.n	8002458 <main+0x3f4>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <main+0x4b8>)
 80024e6:	6818      	ldr	r0, [r3, #0]
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <main+0x4e4>)
 80024ea:	7819      	ldrb	r1, [r3, #0]
 80024ec:	f015 ff20 	bl	8018330 <__parsePreset_veneer>
 80024f0:	e7b6      	b.n	8002460 <main+0x3fc>
 80024f2:	bf00      	nop
 80024f4:	2001c03c 	.word	0x2001c03c
 80024f8:	30042000 	.word	0x30042000
 80024fc:	38000040 	.word	0x38000040
 8002500:	2001c4f0 	.word	0x2001c4f0
 8002504:	30000800 	.word	0x30000800
 8002508:	2001c468 	.word	0x2001c468
 800250c:	2001c1ec 	.word	0x2001c1ec
 8002510:	2001c154 	.word	0x2001c154
 8002514:	20013e68 	.word	0x20013e68
 8002518:	20019b98 	.word	0x20019b98
 800251c:	20019b94 	.word	0x20019b94
 8002520:	20013dd4 	.word	0x20013dd4
 8002524:	2001c04c 	.word	0x2001c04c
 8002528:	4f000000 	.word	0x4f000000
 800252c:	20018a50 	.word	0x20018a50
 8002530:	2f80000d 	.word	0x2f80000d
 8002534:	20013ed6 	.word	0x20013ed6
 8002538:	20019ba8 	.word	0x20019ba8
 800253c:	20013ebd 	.word	0x20013ebd
 8002540:	20019b90 	.word	0x20019b90
 8002544:	20016092 	.word	0x20016092
 8002548:	20019b8e 	.word	0x20019b8e

0800254c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800254c:	4770      	bx	lr
	...

08002550 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002550:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <MX_RNG_Init+0x1c>)
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <MX_RNG_Init+0x20>)
 8002556:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800255c:	f006 f81e 	bl	800859c <HAL_RNG_Init>
 8002560:	b900      	cbnz	r0, 8002564 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002562:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002564:	f7ff fff2 	bl	800254c <Error_Handler>
}
 8002568:	e7fb      	b.n	8002562 <MX_RNG_Init+0x12>
 800256a:	bf00      	nop
 800256c:	2001c04c 	.word	0x2001c04c
 8002570:	48021800 	.word	0x48021800

08002574 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002574:	b510      	push	{r4, lr}
 8002576:	b0b2      	sub	sp, #200	; 0xc8
 8002578:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800257a:	22c0      	movs	r2, #192	; 0xc0
 800257c:	2100      	movs	r1, #0
 800257e:	a802      	add	r0, sp, #8
 8002580:	f013 fbc2 	bl	8015d08 <memset>
  if(rngHandle->Instance==RNG)
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_RNG_MspInit+0x50>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800258c:	b032      	add	sp, #200	; 0xc8
 800258e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002594:	2300      	movs	r3, #0
 8002596:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259a:	a802      	add	r0, sp, #8
 800259c:	f004 fc44 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 80025a0:	b968      	cbnz	r0, 80025be <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RNG_MspInit+0x54>)
 80025a4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80025a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80025b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9b01      	ldr	r3, [sp, #4]
}
 80025bc:	e7e6      	b.n	800258c <HAL_RNG_MspInit+0x18>
      Error_Handler();
 80025be:	f7ff ffc5 	bl	800254c <Error_Handler>
 80025c2:	e7ee      	b.n	80025a2 <HAL_RNG_MspInit+0x2e>
 80025c4:	48021800 	.word	0x48021800
 80025c8:	58024400 	.word	0x58024400

080025cc <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80025cc:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80025ce:	4818      	ldr	r0, [pc, #96]	; (8002630 <MX_SAI1_Init+0x64>)
 80025d0:	4b18      	ldr	r3, [pc, #96]	; (8002634 <MX_SAI1_Init+0x68>)
 80025d2:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80025d4:	2100      	movs	r1, #0
 80025d6:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80025d8:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80025da:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80025dc:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80025de:	2301      	movs	r3, #1
 80025e0:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80025e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80025e6:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80025e8:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80025ea:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80025ec:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80025ee:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 80025f0:	2302      	movs	r3, #2
 80025f2:	461a      	mov	r2, r3
 80025f4:	f006 fb52 	bl	8008c9c <HAL_SAI_InitProtocol>
 80025f8:	b998      	cbnz	r0, 8002622 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80025fa:	480f      	ldr	r0, [pc, #60]	; (8002638 <MX_SAI1_Init+0x6c>)
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_SAI1_Init+0x70>)
 80025fe:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002600:	2303      	movs	r3, #3
 8002602:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002604:	2301      	movs	r3, #1
 8002606:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002608:	2100      	movs	r1, #0
 800260a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800260c:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800260e:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002610:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002612:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002614:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002616:	2302      	movs	r3, #2
 8002618:	461a      	mov	r2, r3
 800261a:	f006 fb3f 	bl	8008c9c <HAL_SAI_InitProtocol>
 800261e:	b918      	cbnz	r0, 8002628 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002620:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002622:	f7ff ff93 	bl	800254c <Error_Handler>
 8002626:	e7e8      	b.n	80025fa <MX_SAI1_Init+0x2e>
    Error_Handler();
 8002628:	f7ff ff90 	bl	800254c <Error_Handler>
}
 800262c:	e7f8      	b.n	8002620 <MX_SAI1_Init+0x54>
 800262e:	bf00      	nop
 8002630:	2001c154 	.word	0x2001c154
 8002634:	40015804 	.word	0x40015804
 8002638:	2001c1ec 	.word	0x2001c1ec
 800263c:	40015824 	.word	0x40015824

08002640 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002640:	b530      	push	{r4, r5, lr}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002646:	6802      	ldr	r2, [r0, #0]
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_SAI_MspInit+0x140>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d005      	beq.n	800265a <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_SAI_MspInit+0x144>)
 8002652:	429a      	cmp	r2, r3
 8002654:	d04b      	beq.n	80026ee <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002656:	b009      	add	sp, #36	; 0x24
 8002658:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 800265a:	4b4b      	ldr	r3, [pc, #300]	; (8002788 <HAL_SAI_MspInit+0x148>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b963      	cbnz	r3, 800267a <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002660:	4a4a      	ldr	r2, [pc, #296]	; (800278c <HAL_SAI_MspInit+0x14c>)
 8002662:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8002666:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800266a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800266e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8002672:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 800267a:	3301      	adds	r3, #1
 800267c:	4a42      	ldr	r2, [pc, #264]	; (8002788 <HAL_SAI_MspInit+0x148>)
 800267e:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002680:	2374      	movs	r3, #116	; 0x74
 8002682:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2500      	movs	r5, #0
 800268a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002690:	2306      	movs	r3, #6
 8002692:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002694:	a903      	add	r1, sp, #12
 8002696:	483e      	ldr	r0, [pc, #248]	; (8002790 <HAL_SAI_MspInit+0x150>)
 8002698:	f002 fd18 	bl	80050cc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800269c:	483d      	ldr	r0, [pc, #244]	; (8002794 <HAL_SAI_MspInit+0x154>)
 800269e:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <HAL_SAI_MspInit+0x158>)
 80026a0:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80026a2:	2357      	movs	r3, #87	; 0x57
 80026a4:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a6:	2340      	movs	r3, #64	; 0x40
 80026a8:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80026aa:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80026ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b0:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026bc:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80026c8:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026ca:	2304      	movs	r3, #4
 80026cc:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80026ce:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 80026d0:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026d2:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80026d4:	f001 fb62 	bl	8003d9c <HAL_DMA_Init>
 80026d8:	b930      	cbnz	r0, 80026e8 <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_SAI_MspInit+0x154>)
 80026dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80026e0:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80026e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80026e6:	e7b2      	b.n	800264e <HAL_SAI_MspInit+0xe>
      Error_Handler();
 80026e8:	f7ff ff30 	bl	800254c <Error_Handler>
 80026ec:	e7f5      	b.n	80026da <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_SAI_MspInit+0x148>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	b963      	cbnz	r3, 800270e <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <HAL_SAI_MspInit+0x14c>)
 80026f6:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80026fa:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80026fe:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 8002702:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8002706:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800270a:	9202      	str	r2, [sp, #8]
 800270c:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 800270e:	3301      	adds	r3, #1
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_SAI_MspInit+0x148>)
 8002712:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002714:	2308      	movs	r3, #8
 8002716:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2500      	movs	r5, #0
 800271e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002724:	2306      	movs	r3, #6
 8002726:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002728:	a903      	add	r1, sp, #12
 800272a:	4819      	ldr	r0, [pc, #100]	; (8002790 <HAL_SAI_MspInit+0x150>)
 800272c:	f002 fcce 	bl	80050cc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002730:	481a      	ldr	r0, [pc, #104]	; (800279c <HAL_SAI_MspInit+0x15c>)
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_SAI_MspInit+0x160>)
 8002734:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002736:	2358      	movs	r3, #88	; 0x58
 8002738:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800273a:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800273c:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002742:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002748:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002750:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002754:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002756:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800275a:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800275c:	2304      	movs	r3, #4
 800275e:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002760:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002762:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002764:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002766:	f001 fb19 	bl	8003d9c <HAL_DMA_Init>
 800276a:	b930      	cbnz	r0, 800277a <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_SAI_MspInit+0x15c>)
 800276e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002772:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002774:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8002778:	e76d      	b.n	8002656 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 800277a:	f7ff fee7 	bl	800254c <Error_Handler>
 800277e:	e7f5      	b.n	800276c <HAL_SAI_MspInit+0x12c>
 8002780:	40015804 	.word	0x40015804
 8002784:	40015824 	.word	0x40015824
 8002788:	2001c060 	.word	0x2001c060
 800278c:	58024400 	.word	0x58024400
 8002790:	58021000 	.word	0x58021000
 8002794:	2001c064 	.word	0x2001c064
 8002798:	40020028 	.word	0x40020028
 800279c:	2001c0dc 	.word	0x2001c0dc
 80027a0:	40020040 	.word	0x40020040

080027a4 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_SDMMC1_SD_Init+0x1c>)
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <MX_SDMMC1_SD_Init+0x20>)
 80027a8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80027aa:	2200      	movs	r2, #0
 80027ac:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80027ae:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80027b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027b4:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80027b6:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 80027b8:	2219      	movs	r2, #25
 80027ba:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	2001c284 	.word	0x2001c284
 80027c4:	52007000 	.word	0x52007000

080027c8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	2300      	movs	r3, #0
 80027ce:	9303      	str	r3, [sp, #12]
 80027d0:	9304      	str	r3, [sp, #16]
 80027d2:	9305      	str	r3, [sp, #20]
 80027d4:	9306      	str	r3, [sp, #24]
 80027d6:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 80027d8:	6802      	ldr	r2, [r0, #0]
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_SD_MspInit+0xac>)
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80027e0:	b008      	add	sp, #32
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_SD_MspInit+0xb0>)
 80027e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80027ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80027f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80027f6:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80027fa:	9200      	str	r2, [sp, #0]
 80027fc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800280a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800280e:	f002 0204 	and.w	r2, r2, #4
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800281a:	f042 0208 	orr.w	r2, r2, #8
 800281e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800282e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002832:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2402      	movs	r4, #2
 8002836:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002838:	2601      	movs	r6, #1
 800283a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800283e:	250c      	movs	r5, #12
 8002840:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002842:	eb0d 0105 	add.w	r1, sp, r5
 8002846:	480d      	ldr	r0, [pc, #52]	; (800287c <HAL_SD_MspInit+0xb4>)
 8002848:	f002 fc40 	bl	80050cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800284c:	2304      	movs	r3, #4
 800284e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002852:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002854:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002856:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002858:	eb0d 0105 	add.w	r1, sp, r5
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <HAL_SD_MspInit+0xb8>)
 800285e:	f002 fc35 	bl	80050cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	4611      	mov	r1, r2
 8002866:	2031      	movs	r0, #49	; 0x31
 8002868:	f000 ffe0 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800286c:	2031      	movs	r0, #49	; 0x31
 800286e:	f001 f813 	bl	8003898 <HAL_NVIC_EnableIRQ>
}
 8002872:	e7b5      	b.n	80027e0 <HAL_SD_MspInit+0x18>
 8002874:	52007000 	.word	0x52007000
 8002878:	58024400 	.word	0x58024400
 800287c:	58020800 	.word	0x58020800
 8002880:	58020c00 	.word	0x58020c00

08002884 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi5_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002884:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002886:	4810      	ldr	r0, [pc, #64]	; (80028c8 <MX_SPI1_Init+0x44>)
 8002888:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_SPI1_Init+0x48>)
 800288a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800288c:	2300      	movs	r3, #0
 800288e:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002890:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002892:	2207      	movs	r2, #7
 8002894:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002896:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002898:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800289a:	6183      	str	r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800289c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800289e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80028a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028a4:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80028a6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80028a8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028aa:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028ac:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80028ae:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028b0:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028b2:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80028b4:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80028b6:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028b8:	f007 fc64 	bl	800a184 <HAL_SPI_Init>
 80028bc:	b900      	cbnz	r0, 80028c0 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80028c0:	f7ff fe44 	bl	800254c <Error_Handler>
}
 80028c4:	e7fb      	b.n	80028be <MX_SPI1_Init+0x3a>
 80028c6:	bf00      	nop
 80028c8:	2001c468 	.word	0x2001c468
 80028cc:	40013000 	.word	0x40013000

080028d0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80028d0:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80028d2:	4810      	ldr	r0, [pc, #64]	; (8002914 <MX_SPI5_Init+0x44>)
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MX_SPI5_Init+0x48>)
 80028d6:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80028d8:	2300      	movs	r3, #0
 80028da:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80028dc:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80028de:	2207      	movs	r2, #7
 80028e0:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028e2:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028e4:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 80028e6:	6183      	str	r3, [r0, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028e8:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80028ea:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ec:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 80028ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80028f0:	6343      	str	r3, [r0, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80028f2:	6383      	str	r3, [r0, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80028f4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028f6:	6403      	str	r3, [r0, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028f8:	6443      	str	r3, [r0, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80028fa:	6483      	str	r3, [r0, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028fc:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028fe:	6503      	str	r3, [r0, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002900:	6543      	str	r3, [r0, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002902:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002904:	f007 fc3e 	bl	800a184 <HAL_SPI_Init>
 8002908:	b900      	cbnz	r0, 800290c <MX_SPI5_Init+0x3c>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800290a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800290c:	f7ff fe1e 	bl	800254c <Error_Handler>
}
 8002910:	e7fb      	b.n	800290a <MX_SPI5_Init+0x3a>
 8002912:	bf00      	nop
 8002914:	2001c4f0 	.word	0x2001c4f0
 8002918:	40015000 	.word	0x40015000

0800291c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800291c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002920:	b0ba      	sub	sp, #232	; 0xe8
 8002922:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	2100      	movs	r1, #0
 8002926:	9135      	str	r1, [sp, #212]	; 0xd4
 8002928:	9136      	str	r1, [sp, #216]	; 0xd8
 800292a:	9137      	str	r1, [sp, #220]	; 0xdc
 800292c:	9138      	str	r1, [sp, #224]	; 0xe0
 800292e:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002930:	22c0      	movs	r2, #192	; 0xc0
 8002932:	a804      	add	r0, sp, #16
 8002934:	f013 f9e8 	bl	8015d08 <memset>
  if(spiHandle->Instance==SPI1)
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_SPI_MspInit+0x1e4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d005      	beq.n	800294c <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8002940:	4a70      	ldr	r2, [pc, #448]	; (8002b04 <HAL_SPI_MspInit+0x1e8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d076      	beq.n	8002a34 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002946:	b03a      	add	sp, #232	; 0xe8
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294c:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_SPI_MspInit+0x1ec>)
 800294e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002956:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800295a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800295e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800297e:	23f0      	movs	r3, #240	; 0xf0
 8002980:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002986:	2303      	movs	r3, #3
 8002988:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800298a:	2305      	movs	r3, #5
 800298c:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	a935      	add	r1, sp, #212	; 0xd4
 8002990:	485e      	ldr	r0, [pc, #376]	; (8002b0c <HAL_SPI_MspInit+0x1f0>)
 8002992:	f002 fb9b 	bl	80050cc <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002996:	485e      	ldr	r0, [pc, #376]	; (8002b10 <HAL_SPI_MspInit+0x1f4>)
 8002998:	4b5e      	ldr	r3, [pc, #376]	; (8002b14 <HAL_SPI_MspInit+0x1f8>)
 800299a:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800299c:	2325      	movs	r3, #37	; 0x25
 800299e:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a0:	2300      	movs	r3, #0
 80029a2:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a4:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029aa:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ac:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ae:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80029b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b4:	61c2      	str	r2, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029ba:	6202      	str	r2, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029bc:	2204      	movs	r2, #4
 80029be:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80029c0:	2201      	movs	r2, #1
 80029c2:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80029c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029c6:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80029c8:	f001 f9e8 	bl	8003d9c <HAL_DMA_Init>
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d12b      	bne.n	8002a28 <HAL_SPI_MspInit+0x10c>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80029d0:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <HAL_SPI_MspInit+0x1f4>)
 80029d2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80029d4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA1_Stream5;
 80029d6:	4850      	ldr	r0, [pc, #320]	; (8002b18 <HAL_SPI_MspInit+0x1fc>)
 80029d8:	4b50      	ldr	r3, [pc, #320]	; (8002b1c <HAL_SPI_MspInit+0x200>)
 80029da:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80029dc:	2326      	movs	r3, #38	; 0x26
 80029de:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ec:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ee:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f0:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	61c2      	str	r2, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029fc:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029fe:	2204      	movs	r2, #4
 8002a00:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002a02:	2201      	movs	r2, #1
 8002a04:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a06:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a08:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a0a:	f001 f9c7 	bl	8003d9c <HAL_DMA_Init>
 8002a0e:	b970      	cbnz	r0, 8002a2e <HAL_SPI_MspInit+0x112>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_SPI_MspInit+0x1fc>)
 8002a12:	67a3      	str	r3, [r4, #120]	; 0x78
 8002a14:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2102      	movs	r1, #2
 8002a1a:	2023      	movs	r0, #35	; 0x23
 8002a1c:	f000 ff06 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a20:	2023      	movs	r0, #35	; 0x23
 8002a22:	f000 ff39 	bl	8003898 <HAL_NVIC_EnableIRQ>
 8002a26:	e78e      	b.n	8002946 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 8002a28:	f7ff fd90 	bl	800254c <Error_Handler>
 8002a2c:	e7d0      	b.n	80029d0 <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 8002a2e:	f7ff fd8d 	bl	800254c <Error_Handler>
 8002a32:	e7ed      	b.n	8002a10 <HAL_SPI_MspInit+0xf4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3e:	a804      	add	r0, sp, #16
 8002a40:	f004 f9f2 	bl	8006e28 <HAL_RCCEx_PeriphCLKConfig>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d155      	bne.n	8002af4 <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002a48:	4b2f      	ldr	r3, [pc, #188]	; (8002b08 <HAL_SPI_MspInit+0x1ec>)
 8002a4a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002a56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002a5a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a5e:	9202      	str	r2, [sp, #8]
 8002a60:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	9303      	str	r3, [sp, #12]
 8002a78:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8002a7a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002a7e:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2602      	movs	r6, #2
 8002a82:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2500      	movs	r5, #0
 8002a86:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a88:	9638      	str	r6, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a8a:	f04f 0805 	mov.w	r8, #5
 8002a8e:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a92:	4f23      	ldr	r7, [pc, #140]	; (8002b20 <HAL_SPI_MspInit+0x204>)
 8002a94:	a935      	add	r1, sp, #212	; 0xd4
 8002a96:	4638      	mov	r0, r7
 8002a98:	f002 fb18 	bl	80050cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa0:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002aa8:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002aac:	a935      	add	r1, sp, #212	; 0xd4
 8002aae:	4638      	mov	r0, r7
 8002ab0:	f002 fb0c 	bl	80050cc <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8002ab4:	481b      	ldr	r0, [pc, #108]	; (8002b24 <HAL_SPI_MspInit+0x208>)
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_SPI_MspInit+0x20c>)
 8002ab8:	6003      	str	r3, [r0, #0]
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8002aba:	2355      	movs	r3, #85	; 0x55
 8002abc:	6043      	str	r3, [r0, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abe:	6085      	str	r5, [r0, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac0:	60c5      	str	r5, [r0, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac6:	6103      	str	r3, [r0, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac8:	6145      	str	r5, [r0, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aca:	6185      	str	r5, [r0, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8002acc:	61c5      	str	r5, [r0, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ace:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ad2:	6203      	str	r3, [r0, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad4:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002ad6:	f001 f961 	bl	8003d9c <HAL_DMA_Init>
 8002ada:	b970      	cbnz	r0, 8002afa <HAL_SPI_MspInit+0x1de>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_SPI_MspInit+0x208>)
 8002ade:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002ae0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2104      	movs	r1, #4
 8002ae6:	2055      	movs	r0, #85	; 0x55
 8002ae8:	f000 fea0 	bl	800382c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8002aec:	2055      	movs	r0, #85	; 0x55
 8002aee:	f000 fed3 	bl	8003898 <HAL_NVIC_EnableIRQ>
}
 8002af2:	e728      	b.n	8002946 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 8002af4:	f7ff fd2a 	bl	800254c <Error_Handler>
 8002af8:	e7a6      	b.n	8002a48 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8002afa:	f7ff fd27 	bl	800254c <Error_Handler>
 8002afe:	e7ed      	b.n	8002adc <HAL_SPI_MspInit+0x1c0>
 8002b00:	40013000 	.word	0x40013000
 8002b04:	40015000 	.word	0x40015000
 8002b08:	58024400 	.word	0x58024400
 8002b0c:	58020000 	.word	0x58020000
 8002b10:	2001c300 	.word	0x2001c300
 8002b14:	40020070 	.word	0x40020070
 8002b18:	2001c378 	.word	0x2001c378
 8002b1c:	40020088 	.word	0x40020088
 8002b20:	58021400 	.word	0x58021400
 8002b24:	2001c3f0 	.word	0x2001c3f0
 8002b28:	40020058 	.word	0x40020058

08002b2c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8002b2c:	e7fe      	b.n	8002b2c <Default_Handler>
	...

08002b30 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <Reset_Handler+0x48>)
 8002b32:	4912      	ldr	r1, [pc, #72]	; (8002b7c <Reset_Handler+0x4c>)
 8002b34:	e003      	b.n	8002b3e <Reset_Handler+0xe>
		*pDest = *pSource;
 8002b36:	f851 2b04 	ldr.w	r2, [r1], #4
 8002b3a:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <Reset_Handler+0x50>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d1f8      	bne.n	8002b36 <Reset_Handler+0x6>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <Reset_Handler+0x54>)
 8002b46:	e002      	b.n	8002b4e <Reset_Handler+0x1e>
		*pDest = 0;
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <Reset_Handler+0x58>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d1f9      	bne.n	8002b48 <Reset_Handler+0x18>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <Reset_Handler+0x5c>)
 8002b56:	490e      	ldr	r1, [pc, #56]	; (8002b90 <Reset_Handler+0x60>)
 8002b58:	e003      	b.n	8002b62 <Reset_Handler+0x32>
		*pDest = *pSource;
 8002b5a:	f851 2b04 	ldr.w	r2, [r1], #4
 8002b5e:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <Reset_Handler+0x64>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d1f8      	bne.n	8002b5a <Reset_Handler+0x2a>
	SystemInit();
 8002b68:	f000 fd5c 	bl	8003624 <SystemInit>
	__libc_init_array();
 8002b6c:	f013 f8d4 	bl	8015d18 <__libc_init_array>
	(void)main();
 8002b70:	f7ff fa78 	bl	8002064 <main>
	for (;;) ;
 8002b74:	e7fe      	b.n	8002b74 <Reset_Handler+0x44>
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	08024650 	.word	0x08024650
 8002b80:	200007c8 	.word	0x200007c8
 8002b84:	200007c8 	.word	0x200007c8
 8002b88:	2001d920 	.word	0x2001d920
 8002b8c:	00000400 	.word	0x00000400
 8002b90:	08024e18 	.word	0x08024e18
 8002b94:	00008178 	.word	0x00008178

08002b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_MspInit+0x20>)
 8002b9c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002ba0:	f042 0202 	orr.w	r2, r2, #2
 8002ba4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb4:	b002      	add	sp, #8
 8002bb6:	4770      	bx	lr
 8002bb8:	58024400 	.word	0x58024400

08002bbc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <NMI_Handler>

08002bbe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <HardFault_Handler>

08002bc0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <MemManage_Handler>

08002bc2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <BusFault_Handler>

08002bc4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <UsageFault_Handler>

08002bc6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bc6:	4770      	bx	lr

08002bc8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	4770      	bx	lr

08002bca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bca:	4770      	bx	lr

08002bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bce:	f000 fde5 	bl	800379c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd2:	bd08      	pop	{r3, pc}

08002bd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002bd6:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA1_Stream1_IRQHandler+0xc>)
 8002bd8:	f001 fed6 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bdc:	bd08      	pop	{r3, pc}
 8002bde:	bf00      	nop
 8002be0:	2001c064 	.word	0x2001c064

08002be4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002be4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002be6:	4802      	ldr	r0, [pc, #8]	; (8002bf0 <DMA1_Stream2_IRQHandler+0xc>)
 8002be8:	f001 fece 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bec:	bd08      	pop	{r3, pc}
 8002bee:	bf00      	nop
 8002bf0:	2001c0dc 	.word	0x2001c0dc

08002bf4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002bf4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8002bf6:	4802      	ldr	r0, [pc, #8]	; (8002c00 <DMA1_Stream3_IRQHandler+0xc>)
 8002bf8:	f001 fec6 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002bfc:	bd08      	pop	{r3, pc}
 8002bfe:	bf00      	nop
 8002c00:	2001c3f0 	.word	0x2001c3f0

08002c04 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002c04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Stream4_IRQHandler+0xc>)
 8002c08:	f001 febe 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002c0c:	bd08      	pop	{r3, pc}
 8002c0e:	bf00      	nop
 8002c10:	2001c300 	.word	0x2001c300

08002c14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c16:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Stream5_IRQHandler+0xc>)
 8002c18:	f001 feb6 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c1c:	bd08      	pop	{r3, pc}
 8002c1e:	bf00      	nop
 8002c20:	2001c378 	.word	0x2001c378

08002c24 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002c24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002c26:	4802      	ldr	r0, [pc, #8]	; (8002c30 <I2C2_EV_IRQHandler+0xc>)
 8002c28:	f002 fe10 	bl	800584c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002c2c:	bd08      	pop	{r3, pc}
 8002c2e:	bf00      	nop
 8002c30:	20013e68 	.word	0x20013e68

08002c34 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002c36:	4802      	ldr	r0, [pc, #8]	; (8002c40 <I2C2_ER_IRQHandler+0xc>)
 8002c38:	f003 f952 	bl	8005ee0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002c3c:	bd08      	pop	{r3, pc}
 8002c3e:	bf00      	nop
 8002c40:	20013e68 	.word	0x20013e68

08002c44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c46:	4802      	ldr	r0, [pc, #8]	; (8002c50 <SPI1_IRQHandler+0xc>)
 8002c48:	f007 fe70 	bl	800a92c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c4c:	bd08      	pop	{r3, pc}
 8002c4e:	bf00      	nop
 8002c50:	2001c468 	.word	0x2001c468

08002c54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002c54:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002c56:	4802      	ldr	r0, [pc, #8]	; (8002c60 <SDMMC1_IRQHandler+0xc>)
 8002c58:	f007 f872 	bl	8009d40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002c5c:	bd08      	pop	{r3, pc}
 8002c5e:	bf00      	nop
 8002c60:	2001c284 	.word	0x2001c284

08002c64 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002c64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <SPI5_IRQHandler+0xc>)
 8002c68:	f007 fe60 	bl	800a92c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002c6c:	bd08      	pop	{r3, pc}
 8002c6e:	bf00      	nop
 8002c70:	2001c4f0 	.word	0x2001c4f0

08002c74 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 8002c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c78:	ed2d 8b04 	vpush	{d8-d9}
 8002c7c:	b083      	sub	sp, #12
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8002c7e:	2600      	movs	r6, #0
 8002c80:	e2ee      	b.n	8003260 <audioInitSynth+0x5ec>
	{

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v], &leaf);
 8002c82:	4d8c      	ldr	r5, [pc, #560]	; (8002eb4 <audioInitSynth+0x240>)
 8002c84:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8002c88:	009c      	lsls	r4, r3, #2
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	488a      	ldr	r0, [pc, #552]	; (8002eb8 <audioInitSynth+0x244>)
 8002c8e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002c92:	f00f fcc5 	bl	8012620 <tPBSaw_init>

			tPBPulse_init(&pulse[i][v], &leaf);
 8002c96:	4629      	mov	r1, r5
 8002c98:	4888      	ldr	r0, [pc, #544]	; (8002ebc <audioInitSynth+0x248>)
 8002c9a:	4420      	add	r0, r4
 8002c9c:	f00f fc24 	bl	80124e8 <tPBPulse_init>

			tCycle_init(&sine[i][v],  &leaf);
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	4887      	ldr	r0, [pc, #540]	; (8002ec0 <audioInitSynth+0x24c>)
 8002ca4:	4420      	add	r0, r4
 8002ca6:	f00f f9ff 	bl	80120a8 <tCycle_init>

			tPBTriangle_init(&tri[i][v],  &leaf);
 8002caa:	4629      	mov	r1, r5
 8002cac:	4885      	ldr	r0, [pc, #532]	; (8002ec4 <audioInitSynth+0x250>)
 8002cae:	4420      	add	r0, r4
 8002cb0:	f00f fa77 	bl	80121a2 <tPBTriangle_init>

			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4884      	ldr	r0, [pc, #528]	; (8002ec8 <audioInitSynth+0x254>)
 8002cb8:	4420      	add	r0, r4
 8002cba:	f00f fd0b 	bl	80126d4 <tPBSawSquare_init>

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4882      	ldr	r0, [pc, #520]	; (8002ecc <audioInitSynth+0x258>)
 8002cc2:	4420      	add	r0, r4
 8002cc4:	f00f fb4e 	bl	8012364 <tPBSineTriangle_init>

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 8002cc8:	4629      	mov	r1, r5
 8002cca:	eddf 0a81 	vldr	s1, [pc, #516]	; 8002ed0 <audioInitSynth+0x25c>
 8002cce:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8002ed4 <audioInitSynth+0x260>
 8002cd2:	4881      	ldr	r0, [pc, #516]	; (8002ed8 <audioInitSynth+0x264>)
 8002cd4:	4420      	add	r0, r4
 8002cd6:	f00b fead 	bl	800ea34 <tExpSmooth_init>

			freqMult[i][v] = 1.0f;
 8002cda:	4b80      	ldr	r3, [pc, #512]	; (8002edc <audioInitSynth+0x268>)
 8002cdc:	4423      	add	r3, r4
 8002cde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ce2:	601a      	str	r2, [r3, #0]
			midiAdd[i][v] = 0.0f;
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <audioInitSynth+0x26c>)
 8002ce6:	4423      	add	r3, r4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < NUM_OSC; i++)
 8002cec:	3701      	adds	r7, #1
 8002cee:	2f02      	cmp	r7, #2
 8002cf0:	ddc7      	ble.n	8002c82 <audioInitSynth+0xe>

		}
		for (int i = 0; i < NUM_FILT; i++)
 8002cf2:	2700      	movs	r7, #0
 8002cf4:	e06f      	b.n	8002dd6 <audioInitSynth+0x162>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8002cf6:	4c6f      	ldr	r4, [pc, #444]	; (8002eb4 <audioInitSynth+0x240>)
 8002cf8:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8002ee4 <audioInitSynth+0x270>
 8002cfc:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8002ee8 <audioInitSynth+0x274>
 8002d00:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8002d04:	009d      	lsls	r5, r3, #2
 8002d06:	4622      	mov	r2, r4
 8002d08:	eef0 0a68 	vmov.f32	s1, s17
 8002d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d10:	2101      	movs	r1, #1
 8002d12:	4876      	ldr	r0, [pc, #472]	; (8002eec <audioInitSynth+0x278>)
 8002d14:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002d18:	f00c fa6c 	bl	800f1f4 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	eef0 0a68 	vmov.f32	s1, s17
 8002d22:	eeb0 0a48 	vmov.f32	s0, s16
 8002d26:	2100      	movs	r1, #0
 8002d28:	4871      	ldr	r0, [pc, #452]	; (8002ef0 <audioInitSynth+0x27c>)
 8002d2a:	4428      	add	r0, r5
 8002d2c:	f00c fa62 	bl	800f1f4 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8002d30:	4622      	mov	r2, r4
 8002d32:	eef0 0a68 	vmov.f32	s1, s17
 8002d36:	eeb0 0a48 	vmov.f32	s0, s16
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	486d      	ldr	r0, [pc, #436]	; (8002ef4 <audioInitSynth+0x280>)
 8002d3e:	4428      	add	r0, r5
 8002d40:	f00c fa58 	bl	800f1f4 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8002d44:	4621      	mov	r1, r4
 8002d46:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002d4a:	eeb0 0a48 	vmov.f32	s0, s16
 8002d4e:	486a      	ldr	r0, [pc, #424]	; (8002ef8 <audioInitSynth+0x284>)
 8002d50:	4428      	add	r0, r5
 8002d52:	f00d fde1 	bl	8010918 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8002d56:	4621      	mov	r1, r4
 8002d58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002d5c:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002efc <audioInitSynth+0x288>
 8002d60:	eeb0 0a48 	vmov.f32	s0, s16
 8002d64:	4866      	ldr	r0, [pc, #408]	; (8002f00 <audioInitSynth+0x28c>)
 8002d66:	4428      	add	r0, r5
 8002d68:	f00d fb7c 	bl	8010464 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8002d6c:	eddf 8a65 	vldr	s17, [pc, #404]	; 8002f04 <audioInitSynth+0x290>
 8002d70:	4621      	mov	r1, r4
 8002d72:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002d76:	eef0 0a68 	vmov.f32	s1, s17
 8002d7a:	eeb0 0a48 	vmov.f32	s0, s16
 8002d7e:	4862      	ldr	r0, [pc, #392]	; (8002f08 <audioInitSynth+0x294>)
 8002d80:	4428      	add	r0, r5
 8002d82:	f00d f82f 	bl	800fde4 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8002d86:	4621      	mov	r1, r4
 8002d88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002d8c:	eef0 0a68 	vmov.f32	s1, s17
 8002d90:	eeb0 0a48 	vmov.f32	s0, s16
 8002d94:	485d      	ldr	r0, [pc, #372]	; (8002f0c <audioInitSynth+0x298>)
 8002d96:	4428      	add	r0, r5
 8002d98:	f00d f9b4 	bl	8010104 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8002d9c:	4622      	mov	r2, r4
 8002d9e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002da2:	eeb0 0a48 	vmov.f32	s0, s16
 8002da6:	2104      	movs	r1, #4
 8002da8:	4859      	ldr	r0, [pc, #356]	; (8002f10 <audioInitSynth+0x29c>)
 8002daa:	4428      	add	r0, r5
 8002dac:	f00c ff62 	bl	800fc74 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8002db0:	4621      	mov	r1, r4
 8002db2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002db6:	eeb0 0a48 	vmov.f32	s0, s16
 8002dba:	4856      	ldr	r0, [pc, #344]	; (8002f14 <audioInitSynth+0x2a0>)
 8002dbc:	4428      	add	r0, r5
 8002dbe:	f00e f96f 	bl	80110a0 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002f18 <audioInitSynth+0x2a4>
 8002dc8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002ed4 <audioInitSynth+0x260>
 8002dcc:	4853      	ldr	r0, [pc, #332]	; (8002f1c <audioInitSynth+0x2a8>)
 8002dce:	4428      	add	r0, r5
 8002dd0:	f00b fe30 	bl	800ea34 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8002dd4:	3701      	adds	r7, #1
 8002dd6:	2f01      	cmp	r7, #1
 8002dd8:	dd8d      	ble.n	8002cf6 <audioInitSynth+0x82>
		}

		for (int i = 0; i < NUM_LFOS; i++)
 8002dda:	2700      	movs	r7, #0
 8002ddc:	e023      	b.n	8002e26 <audioInitSynth+0x1b2>
		{
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8002dde:	4c35      	ldr	r4, [pc, #212]	; (8002eb4 <audioInitSynth+0x240>)
 8002de0:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8002de4:	009d      	lsls	r5, r3, #2
 8002de6:	4621      	mov	r1, r4
 8002de8:	484d      	ldr	r0, [pc, #308]	; (8002f20 <audioInitSynth+0x2ac>)
 8002dea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002dee:	f00f fd6b 	bl	80128c8 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8002df2:	4621      	mov	r1, r4
 8002df4:	484b      	ldr	r0, [pc, #300]	; (8002f24 <audioInitSynth+0x2b0>)
 8002df6:	4428      	add	r0, r5
 8002df8:	f00f fdfa 	bl	80129f0 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	484a      	ldr	r0, [pc, #296]	; (8002f28 <audioInitSynth+0x2b4>)
 8002e00:	4428      	add	r0, r5
 8002e02:	f00f f951 	bl	80120a8 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8002e06:	4621      	mov	r1, r4
 8002e08:	4848      	ldr	r0, [pc, #288]	; (8002f2c <audioInitSynth+0x2b8>)
 8002e0a:	4428      	add	r0, r5
 8002e0c:	f00f fec0 	bl	8012b90 <tTriLFO_init>

			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8002e10:	4621      	mov	r1, r4
 8002e12:	4847      	ldr	r0, [pc, #284]	; (8002f30 <audioInitSynth+0x2bc>)
 8002e14:	4428      	add	r0, r5
 8002e16:	f00f fee1 	bl	8012bdc <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4845      	ldr	r0, [pc, #276]	; (8002f34 <audioInitSynth+0x2c0>)
 8002e1e:	4428      	add	r0, r5
 8002e20:	f00f fe1b 	bl	8012a5a <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8002e24:	3701      	adds	r7, #1
 8002e26:	2f03      	cmp	r7, #3
 8002e28:	ddd9      	ble.n	8002dde <audioInitSynth+0x16a>
		}


		for (int i = 0; i < NUM_ENV; i++)
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	e019      	b.n	8002e62 <audioInitSynth+0x1ee>
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8002e2e:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 8002e32:	4c41      	ldr	r4, [pc, #260]	; (8002f38 <audioInitSynth+0x2c4>)
 8002e34:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <audioInitSynth+0x240>)
 8002e3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e3e:	493f      	ldr	r1, [pc, #252]	; (8002f3c <audioInitSynth+0x2c8>)
 8002e40:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8002e44:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e48:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8002f40 <audioInitSynth+0x2cc>
 8002e4c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002f44 <audioInitSynth+0x2d0>
 8002e50:	4620      	mov	r0, r4
 8002e52:	f00b fb0f 	bl	800e474 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8002e56:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002f48 <audioInitSynth+0x2d4>
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f00b fb62 	bl	800e524 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 8002e60:	3501      	adds	r5, #1
 8002e62:	2d03      	cmp	r5, #3
 8002e64:	dde3      	ble.n	8002e2e <audioInitSynth+0x1ba>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 8002e66:	4d13      	ldr	r5, [pc, #76]	; (8002eb4 <audioInitSynth+0x240>)
 8002e68:	00b4      	lsls	r4, r6, #2
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e70:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002e74:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002f4c <audioInitSynth+0x2d8>
 8002e78:	4835      	ldr	r0, [pc, #212]	; (8002f50 <audioInitSynth+0x2dc>)
 8002e7a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8002e7e:	f00c ffb1 	bl	800fde4 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8002e82:	4629      	mov	r1, r5
 8002e84:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e88:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002e8c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002f54 <audioInitSynth+0x2e0>
 8002e90:	4831      	ldr	r0, [pc, #196]	; (8002f58 <audioInitSynth+0x2e4>)
 8002e92:	4420      	add	r0, r4
 8002e94:	f00d f936 	bl	8010104 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8002e98:	4629      	mov	r1, r5
 8002e9a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8002f5c <audioInitSynth+0x2e8>
 8002e9e:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002efc <audioInitSynth+0x288>
 8002ea2:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8002f40 <audioInitSynth+0x2cc>
 8002ea6:	482e      	ldr	r0, [pc, #184]	; (8002f60 <audioInitSynth+0x2ec>)
 8002ea8:	4420      	add	r0, r4
 8002eaa:	f00d fadb 	bl	8010464 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
 8002eae:	f04f 0900 	mov.w	r9, #0
 8002eb2:	e191      	b.n	80031d8 <audioInitSynth+0x564>
 8002eb4:	20004e5c 	.word	0x20004e5c
 8002eb8:	2001ce94 	.word	0x2001ce94
 8002ebc:	2001ce78 	.word	0x2001ce78
 8002ec0:	2001cf50 	.word	0x2001cf50
 8002ec4:	2001d100 	.word	0x2001d100
 8002ec8:	2001ceac 	.word	0x2001ceac
 8002ecc:	2001cf68 	.word	0x2001cf68
 8002ed0:	3ba3d70a 	.word	0x3ba3d70a
 8002ed4:	42800000 	.word	0x42800000
 8002ed8:	2001ce3c 	.word	0x2001ce3c
 8002edc:	2001c9c0 	.word	0x2001c9c0
 8002ee0:	2001ccac 	.word	0x2001ccac
 8002ee4:	3f333333 	.word	0x3f333333
 8002ee8:	44fa0000 	.word	0x44fa0000
 8002eec:	2001cb9c 	.word	0x2001cb9c
 8002ef0:	2001ca18 	.word	0x2001ca18
 8002ef4:	2001c70c 	.word	0x2001c70c
 8002ef8:	2001c924 	.word	0x2001c924
 8002efc:	3ff33333 	.word	0x3ff33333
 8002f00:	2001c6f4 	.word	0x2001c6f4
 8002f04:	3f19999a 	.word	0x3f19999a
 8002f08:	2001c6e4 	.word	0x2001c6e4
 8002f0c:	2001c6d4 	.word	0x2001c6d4
 8002f10:	2001c6c4 	.word	0x2001c6c4
 8002f14:	2001c6b4 	.word	0x2001c6b4
 8002f18:	3c23d70a 	.word	0x3c23d70a
 8002f1c:	2001c988 	.word	0x2001c988
 8002f20:	2001caec 	.word	0x2001caec
 8002f24:	2001cacc 	.word	0x2001cacc
 8002f28:	2001cb3c 	.word	0x2001cb3c
 8002f2c:	2001cb7c 	.word	0x2001cb7c
 8002f30:	2001cb5c 	.word	0x2001cb5c
 8002f34:	2001cb0c 	.word	0x2001cb0c
 8002f38:	2001c948 	.word	0x2001c948
 8002f3c:	20000dc8 	.word	0x20000dc8
 8002f40:	447a0000 	.word	0x447a0000
 8002f44:	3dcccccd 	.word	0x3dcccccd
 8002f48:	3f7fffac 	.word	0x3f7fffac
 8002f4c:	42a00000 	.word	0x42a00000
 8002f50:	2001cd20 	.word	0x2001cd20
 8002f54:	463b8000 	.word	0x463b8000
 8002f58:	2001cd28 	.word	0x2001cd28
 8002f5c:	3f8b851f 	.word	0x3f8b851f
 8002f60:	2001cd04 	.word	0x2001cd04
		{
			tCrusher_init(&bc[i][v],&leaf);
 8002f64:	4cc3      	ldr	r4, [pc, #780]	; (8003274 <audioInitSynth+0x600>)
 8002f66:	eb06 0349 	add.w	r3, r6, r9, lsl #1
 8002f6a:	009d      	lsls	r5, r3, #2
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	48c2      	ldr	r0, [pc, #776]	; (8003278 <audioInitSynth+0x604>)
 8002f70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f74:	f00b f818 	bl	800dfa8 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8002f78:	4fc0      	ldr	r7, [pc, #768]	; (800327c <audioInitSynth+0x608>)
 8002f7a:	442f      	add	r7, r5
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002f82:	4638      	mov	r0, r7
 8002f84:	f00c fa4e 	bl	800f424 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8002f88:	ed9f 8abd 	vldr	s16, [pc, #756]	; 8003280 <audioInitSynth+0x60c>
 8002f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8002f90:	4638      	mov	r0, r7
 8002f92:	f00c fa75 	bl	800f480 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8002f96:	4fbb      	ldr	r7, [pc, #748]	; (8003284 <audioInitSynth+0x610>)
 8002f98:	442f      	add	r7, r5
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002fa0:	4638      	mov	r0, r7
 8002fa2:	f00c fa3f 	bl	800f424 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8002fa6:	eeb0 0a48 	vmov.f32	s0, s16
 8002faa:	4638      	mov	r0, r7
 8002fac:	f00c fa68 	bl	800f480 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 8002fb0:	4fb5      	ldr	r7, [pc, #724]	; (8003288 <audioInitSynth+0x614>)
 8002fb2:	442f      	add	r7, r5
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fba:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002fbe:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 800328c <audioInitSynth+0x618>
 8002fc2:	4638      	mov	r0, r7
 8002fc4:	f00c ff0e 	bl	800fde4 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8002fc8:	eeb0 0a48 	vmov.f32	s0, s16
 8002fcc:	4638      	mov	r0, r7
 8002fce:	f00c ff0f 	bl	800fdf0 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 8002fd2:	4faf      	ldr	r7, [pc, #700]	; (8003290 <audioInitSynth+0x61c>)
 8002fd4:	442f      	add	r7, r5
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fdc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002fe0:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8003294 <audioInitSynth+0x620>
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f00d f88d 	bl	8010104 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8002fea:	eeb0 0a48 	vmov.f32	s0, s16
 8002fee:	4638      	mov	r0, r7
 8002ff0:	f00d f88e 	bl	8010110 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 8002ff4:	4fa8      	ldr	r7, [pc, #672]	; (8003298 <audioInitSynth+0x624>)
 8002ff6:	442f      	add	r7, r5
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ffe:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800329c <audioInitSynth+0x628>
 8003002:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80032a0 <audioInitSynth+0x62c>
 8003006:	4638      	mov	r0, r7
 8003008:	f00d fa2c 	bl	8010464 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800300c:	eeb0 0a48 	vmov.f32	s0, s16
 8003010:	4638      	mov	r0, r7
 8003012:	f00d fa2d 	bl	8010470 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8003016:	4fa3      	ldr	r7, [pc, #652]	; (80032a4 <audioInitSynth+0x630>)
 8003018:	442f      	add	r7, r5
 800301a:	4621      	mov	r1, r4
 800301c:	4638      	mov	r0, r7
 800301e:	f00b f885 	bl	800e12c <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 8003022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 800302c:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 80032a8 <audioInitSynth+0x634>
 8003030:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003034:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80032ac <audioInitSynth+0x638>
 8003038:	4a9d      	ldr	r2, [pc, #628]	; (80032b0 <audioInitSynth+0x63c>)
 800303a:	499e      	ldr	r1, [pc, #632]	; (80032b4 <audioInitSynth+0x640>)
 800303c:	4638      	mov	r0, r7
 800303e:	f00b f8ff 	bl	800e240 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003042:	eeb0 0a48 	vmov.f32	s0, s16
 8003046:	4638      	mov	r0, r7
 8003048:	f00b f91f 	bl	800e28a <tCompressor_setSampleRate>
			//tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
			//tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
			tCycle_init(&mod1[i][v], &leaf);
 800304c:	4b9a      	ldr	r3, [pc, #616]	; (80032b8 <audioInitSynth+0x644>)
 800304e:	eb03 0805 	add.w	r8, r3, r5
 8003052:	4621      	mov	r1, r4
 8003054:	4640      	mov	r0, r8
 8003056:	f00f f827 	bl	80120a8 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800305a:	eeb0 0a48 	vmov.f32	s0, s16
 800305e:	4640      	mov	r0, r8
 8003060:	f00f f874 	bl	801214c <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 8003064:	4f95      	ldr	r7, [pc, #596]	; (80032bc <audioInitSynth+0x648>)
 8003066:	442f      	add	r7, r5
 8003068:	4621      	mov	r1, r4
 800306a:	4638      	mov	r0, r7
 800306c:	f00f f81c 	bl	80120a8 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003070:	eeb0 0a48 	vmov.f32	s0, s16
 8003074:	4638      	mov	r0, r7
 8003076:	f00f f869 	bl	801214c <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 800307a:	ed9f 0a91 	vldr	s0, [pc, #580]	; 80032c0 <audioInitSynth+0x64c>
 800307e:	4640      	mov	r0, r8
 8003080:	f00f f846 	bl	8012110 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 8003084:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80032c4 <audioInitSynth+0x650>
 8003088:	4638      	mov	r0, r7
 800308a:	f00f f841 	bl	8012110 <tCycle_setFreq>

	        //tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 800308e:	4622      	mov	r2, r4
 8003090:	2100      	movs	r1, #0
 8003092:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8003096:	eddf 0a8c 	vldr	s1, [pc, #560]	; 80032c8 <audioInitSynth+0x654>
 800309a:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80032cc <audioInitSynth+0x658>
 800309e:	488c      	ldr	r0, [pc, #560]	; (80032d0 <audioInitSynth+0x65c>)
 80030a0:	4428      	add	r0, r5
 80030a2:	f00b f91e 	bl	800e2e2 <tFeedbackLeveler_init>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80030a6:	4f8b      	ldr	r7, [pc, #556]	; (80032d4 <audioInitSynth+0x660>)
 80030a8:	442f      	add	r7, r5
 80030aa:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 80032d8 <audioInitSynth+0x664>
 80030ae:	eddf 8a8b 	vldr	s17, [pc, #556]	; 80032dc <audioInitSynth+0x668>
 80030b2:	4622      	mov	r2, r4
 80030b4:	eef0 0a49 	vmov.f32	s1, s18
 80030b8:	eeb0 0a68 	vmov.f32	s0, s17
 80030bc:	2101      	movs	r1, #1
 80030be:	4638      	mov	r0, r7
 80030c0:	f00c f898 	bl	800f1f4 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80030c4:	eeb0 0a48 	vmov.f32	s0, s16
 80030c8:	4638      	mov	r0, r7
 80030ca:	f00c f97f 	bl	800f3cc <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80030ce:	4f84      	ldr	r7, [pc, #528]	; (80032e0 <audioInitSynth+0x66c>)
 80030d0:	442f      	add	r7, r5
 80030d2:	4622      	mov	r2, r4
 80030d4:	eef0 0a49 	vmov.f32	s1, s18
 80030d8:	eeb0 0a68 	vmov.f32	s0, s17
 80030dc:	2100      	movs	r1, #0
 80030de:	4638      	mov	r0, r7
 80030e0:	f00c f888 	bl	800f1f4 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80030e4:	eeb0 0a48 	vmov.f32	s0, s16
 80030e8:	4638      	mov	r0, r7
 80030ea:	f00c f96f 	bl	800f3cc <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80030ee:	4f7d      	ldr	r7, [pc, #500]	; (80032e4 <audioInitSynth+0x670>)
 80030f0:	442f      	add	r7, r5
 80030f2:	4622      	mov	r2, r4
 80030f4:	eef0 0a49 	vmov.f32	s1, s18
 80030f8:	eeb0 0a68 	vmov.f32	s0, s17
 80030fc:	2102      	movs	r1, #2
 80030fe:	4638      	mov	r0, r7
 8003100:	f00c f878 	bl	800f1f4 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003104:	eeb0 0a48 	vmov.f32	s0, s16
 8003108:	4638      	mov	r0, r7
 800310a:	f00c f95f 	bl	800f3cc <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 800310e:	4f76      	ldr	r7, [pc, #472]	; (80032e8 <audioInitSynth+0x674>)
 8003110:	442f      	add	r7, r5
 8003112:	4621      	mov	r1, r4
 8003114:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003118:	eeb0 0a68 	vmov.f32	s0, s17
 800311c:	4638      	mov	r0, r7
 800311e:	f00d fbfb 	bl	8010918 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003122:	eeb0 0a48 	vmov.f32	s0, s16
 8003126:	4638      	mov	r0, r7
 8003128:	f00d ff36 	bl	8010f98 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 800312c:	4f6f      	ldr	r7, [pc, #444]	; (80032ec <audioInitSynth+0x678>)
 800312e:	442f      	add	r7, r5
 8003130:	4621      	mov	r1, r4
 8003132:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003136:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80032f0 <audioInitSynth+0x67c>
 800313a:	eeb0 0a68 	vmov.f32	s0, s17
 800313e:	4638      	mov	r0, r7
 8003140:	f00d f990 	bl	8010464 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003144:	eeb0 0a48 	vmov.f32	s0, s16
 8003148:	4638      	mov	r0, r7
 800314a:	f00d f991 	bl	8010470 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800314e:	4f69      	ldr	r7, [pc, #420]	; (80032f4 <audioInitSynth+0x680>)
 8003150:	442f      	add	r7, r5
 8003152:	ed9f 9a69 	vldr	s18, [pc, #420]	; 80032f8 <audioInitSynth+0x684>
 8003156:	4621      	mov	r1, r4
 8003158:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800315c:	eef0 0a49 	vmov.f32	s1, s18
 8003160:	eeb0 0a68 	vmov.f32	s0, s17
 8003164:	4638      	mov	r0, r7
 8003166:	f00c fe3d 	bl	800fde4 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 800316a:	eeb0 0a48 	vmov.f32	s0, s16
 800316e:	4638      	mov	r0, r7
 8003170:	f00c fe3e 	bl	800fdf0 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003174:	4f61      	ldr	r7, [pc, #388]	; (80032fc <audioInitSynth+0x688>)
 8003176:	442f      	add	r7, r5
 8003178:	4621      	mov	r1, r4
 800317a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800317e:	eef0 0a49 	vmov.f32	s1, s18
 8003182:	eeb0 0a68 	vmov.f32	s0, s17
 8003186:	4638      	mov	r0, r7
 8003188:	f00c ffbc 	bl	8010104 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 800318c:	eeb0 0a48 	vmov.f32	s0, s16
 8003190:	4638      	mov	r0, r7
 8003192:	f00c ffbd 	bl	8010110 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003196:	4f5a      	ldr	r7, [pc, #360]	; (8003300 <audioInitSynth+0x68c>)
 8003198:	442f      	add	r7, r5
 800319a:	4622      	mov	r2, r4
 800319c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80031a0:	eeb0 0a68 	vmov.f32	s0, s17
 80031a4:	2104      	movs	r1, #4
 80031a6:	4638      	mov	r0, r7
 80031a8:	f00c fd64 	bl	800fc74 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 80031ac:	eeb0 0a48 	vmov.f32	s0, s16
 80031b0:	4638      	mov	r0, r7
 80031b2:	f00c fd65 	bl	800fc80 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 80031b6:	4b53      	ldr	r3, [pc, #332]	; (8003304 <audioInitSynth+0x690>)
 80031b8:	441d      	add	r5, r3
 80031ba:	4621      	mov	r1, r4
 80031bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80031c0:	eeb0 0a68 	vmov.f32	s0, s17
 80031c4:	4628      	mov	r0, r5
 80031c6:	f00d ff6b 	bl	80110a0 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 80031ca:	eeb0 0a48 	vmov.f32	s0, s16
 80031ce:	4628      	mov	r0, r5
 80031d0:	f00e f92c 	bl	801142c <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 80031d4:	f109 0901 	add.w	r9, r9, #1
 80031d8:	f1b9 0f03 	cmp.w	r9, #3
 80031dc:	f77f aec2 	ble.w	8002f64 <audioInitSynth+0x2f0>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80031e0:	2400      	movs	r4, #0
 80031e2:	e00c      	b.n	80031fe <audioInitSynth+0x58a>
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 80031e4:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80031e8:	4922      	ldr	r1, [pc, #136]	; (8003274 <audioInitSynth+0x600>)
 80031ea:	eddf 0a47 	vldr	s1, [pc, #284]	; 8003308 <audioInitSynth+0x694>
 80031ee:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800330c <audioInitSynth+0x698>
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <audioInitSynth+0x69c>)
 80031f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80031f8:	f00b fc1c 	bl	800ea34 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80031fc:	3401      	adds	r4, #1
 80031fe:	2c1f      	cmp	r4, #31
 8003200:	ddf0      	ble.n	80031e4 <audioInitSynth+0x570>
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003202:	4b44      	ldr	r3, [pc, #272]	; (8003314 <audioInitSynth+0x6a0>)
 8003204:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 8003208:	4f43      	ldr	r7, [pc, #268]	; (8003318 <audioInitSynth+0x6a4>)
 800320a:	0074      	lsls	r4, r6, #1
 800320c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003210:	0090      	lsls	r0, r2, #2
 8003212:	2501      	movs	r5, #1
 8003214:	9501      	str	r5, [sp, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	463b      	mov	r3, r7
 800321a:	2220      	movs	r2, #32
 800321c:	2102      	movs	r1, #2
 800321e:	f8df c110 	ldr.w	ip, [pc, #272]	; 8003330 <audioInitSynth+0x6bc>
 8003222:	4460      	add	r0, ip
 8003224:	f012 f8ba 	bl	801539c <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 8003228:	eb06 1246 	add.w	r2, r6, r6, lsl #5
 800322c:	0093      	lsls	r3, r2, #2
 800322e:	493b      	ldr	r1, [pc, #236]	; (800331c <audioInitSynth+0x6a8>)
 8003230:	4419      	add	r1, r3
 8003232:	19a3      	adds	r3, r4, r6
 8003234:	0098      	lsls	r0, r3, #2
 8003236:	2202      	movs	r2, #2
 8003238:	9201      	str	r2, [sp, #4]
 800323a:	9100      	str	r1, [sp, #0]
 800323c:	463b      	mov	r3, r7
 800323e:	2120      	movs	r1, #32
 8003240:	4c37      	ldr	r4, [pc, #220]	; (8003320 <audioInitSynth+0x6ac>)
 8003242:	4420      	add	r0, r4
 8003244:	f012 fae6 	bl	8015814 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <audioInitSynth+0x600>)
 800324a:	eddf 0a36 	vldr	s1, [pc, #216]	; 8003324 <audioInitSynth+0x6b0>
 800324e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003328 <audioInitSynth+0x6b4>
 8003252:	4629      	mov	r1, r5
 8003254:	4835      	ldr	r0, [pc, #212]	; (800332c <audioInitSynth+0x6b8>)
 8003256:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 800325a:	f00b ffcb 	bl	800f1f4 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800325e:	442e      	add	r6, r5
 8003260:	2e01      	cmp	r6, #1
 8003262:	dc01      	bgt.n	8003268 <audioInitSynth+0x5f4>
		for(int i = 0; i < NUM_OSC; i++)
 8003264:	2700      	movs	r7, #0
 8003266:	e542      	b.n	8002cee <audioInitSynth+0x7a>
	}

}
 8003268:	b003      	add	sp, #12
 800326a:	ecbd 8b04 	vpop	{d8-d9}
 800326e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003272:	bf00      	nop
 8003274:	20004e5c 	.word	0x20004e5c
 8003278:	2001c71c 	.word	0x2001c71c
 800327c:	2001c77c 	.word	0x2001c77c
 8003280:	47bb8000 	.word	0x47bb8000
 8003284:	2001c79c 	.word	0x2001c79c
 8003288:	2001cf10 	.word	0x2001cf10
 800328c:	42a00000 	.word	0x42a00000
 8003290:	2001cf30 	.word	0x2001cf30
 8003294:	463b8000 	.word	0x463b8000
 8003298:	2001c73c 	.word	0x2001c73c
 800329c:	3ff33333 	.word	0x3ff33333
 80032a0:	447a0000 	.word	0x447a0000
 80032a4:	2001c75c 	.word	0x2001c75c
 80032a8:	c2b40000 	.word	0xc2b40000
 80032ac:	3727c5ac 	.word	0x3727c5ac
 80032b0:	30002000 	.word	0x30002000
 80032b4:	30012000 	.word	0x30012000
 80032b8:	2001ccc4 	.word	0x2001ccc4
 80032bc:	2001cce4 	.word	0x2001cce4
 80032c0:	3e4ccccd 	.word	0x3e4ccccd
 80032c4:	3e638e39 	.word	0x3e638e39
 80032c8:	3c23d70a 	.word	0x3c23d70a
 80032cc:	3f7d70a4 	.word	0x3f7d70a4
 80032d0:	2001c968 	.word	0x2001c968
 80032d4:	2001c694 	.word	0x2001c694
 80032d8:	3f333333 	.word	0x3f333333
 80032dc:	44fa0000 	.word	0x44fa0000
 80032e0:	2001c674 	.word	0x2001c674
 80032e4:	2001c634 	.word	0x2001c634
 80032e8:	2001c654 	.word	0x2001c654
 80032ec:	2001c614 	.word	0x2001c614
 80032f0:	3fcccccd 	.word	0x3fcccccd
 80032f4:	2001c5f4 	.word	0x2001c5f4
 80032f8:	3f19999a 	.word	0x3f19999a
 80032fc:	2001c5d4 	.word	0x2001c5d4
 8003300:	2001c5b4 	.word	0x2001c5b4
 8003304:	2001c594 	.word	0x2001c594
 8003308:	3ba3d70a 	.word	0x3ba3d70a
 800330c:	00000000 	.word	0x00000000
 8003310:	2001cbac 	.word	0x2001cbac
 8003314:	2001ca28 	.word	0x2001ca28
 8003318:	08020990 	.word	0x08020990
 800331c:	2001c7bc 	.word	0x2001c7bc
 8003320:	2001cd30 	.word	0x2001cd30
 8003324:	3e99999a 	.word	0x3e99999a
 8003328:	46947000 	.word	0x46947000
 800332c:	2001c9b0 	.word	0x2001c9b0
 8003330:	2001cd48 	.word	0x2001cd48

08003334 <changeOversampling>:
}



void changeOversampling(uint32_t newOS)
{
 8003334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	ed2d 8b02 	vpush	{d8}
 800333c:	4681      	mov	r9, r0
	if (newOS != prevOversample)
 800333e:	4b84      	ldr	r3, [pc, #528]	; (8003550 <changeOversampling+0x21c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4283      	cmp	r3, r0
 8003344:	f000 80fc 	beq.w	8003540 <changeOversampling+0x20c>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	ee08 3a90 	vmov	s17, r3
 800334e:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8003352:	eddf 7a80 	vldr	s15, [pc, #512]	; 8003554 <changeOversampling+0x220>
 8003356:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800335a:	eefc 8ae8 	vcvt.u32.f32	s17, s17
		for (int v = 0; v < numStringsThisBoard; v++)
 800335e:	f04f 0800 	mov.w	r8, #0
 8003362:	e0e7      	b.n	8003534 <changeOversampling+0x200>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003364:	eeb8 8a68 	vcvt.f32.u32	s16, s17
 8003368:	eb08 0546 	add.w	r5, r8, r6, lsl #1
 800336c:	00ac      	lsls	r4, r5, #2
 800336e:	eeb0 0a48 	vmov.f32	s0, s16
 8003372:	4879      	ldr	r0, [pc, #484]	; (8003558 <changeOversampling+0x224>)
 8003374:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003378:	f00c f882 	bl	800f480 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 800337c:	eeb0 0a48 	vmov.f32	s0, s16
 8003380:	4876      	ldr	r0, [pc, #472]	; (800355c <changeOversampling+0x228>)
 8003382:	4420      	add	r0, r4
 8003384:	f00c f87c 	bl	800f480 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 8003388:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8003574 <changeOversampling+0x240>
 800338c:	eb0a 0704 	add.w	r7, sl, r4
 8003390:	eeb0 0a48 	vmov.f32	s0, s16
 8003394:	4638      	mov	r0, r7
 8003396:	f00c fd2b 	bl	800fdf0 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 800339a:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800339e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80033a2:	4638      	mov	r0, r7
 80033a4:	f00c fd7a 	bl	800fe9c <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 80033a8:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8003578 <changeOversampling+0x244>
 80033ac:	eb0a 0704 	add.w	r7, sl, r4
 80033b0:	eeb0 0a48 	vmov.f32	s0, s16
 80033b4:	4638      	mov	r0, r7
 80033b6:	f00c feab 	bl	8010110 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 80033ba:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80033be:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80033c2:	4638      	mov	r0, r7
 80033c4:	f00c fefa 	bl	80101bc <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 80033c8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800357c <changeOversampling+0x248>
 80033cc:	eb0a 0704 	add.w	r7, sl, r4
 80033d0:	eeb0 0a48 	vmov.f32	s0, s16
 80033d4:	4638      	mov	r0, r7
 80033d6:	f00d f84b 	bl	8010470 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 80033da:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80033de:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80033e2:	4638      	mov	r0, r7
 80033e4:	f00d f93e 	bl	8010664 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 80033e8:	eeb0 0a48 	vmov.f32	s0, s16
 80033ec:	485c      	ldr	r0, [pc, #368]	; (8003560 <changeOversampling+0x22c>)
 80033ee:	4420      	add	r0, r4
 80033f0:	f00a ff4b 	bl	800e28a <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 80033f4:	eeb0 0a48 	vmov.f32	s0, s16
 80033f8:	485a      	ldr	r0, [pc, #360]	; (8003564 <changeOversampling+0x230>)
 80033fa:	4420      	add	r0, r4
 80033fc:	f00e fea6 	bl	801214c <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003400:	eeb0 0a48 	vmov.f32	s0, s16
 8003404:	4858      	ldr	r0, [pc, #352]	; (8003568 <changeOversampling+0x234>)
 8003406:	4420      	add	r0, r4
 8003408:	f00e fea0 	bl	801214c <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 800340c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003580 <changeOversampling+0x24c>
 8003410:	eb0a 0704 	add.w	r7, sl, r4
 8003414:	eeb0 0a48 	vmov.f32	s0, s16
 8003418:	4638      	mov	r0, r7
 800341a:	f00b ffd7 	bl	800f3cc <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 800341e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003422:	ed93 0a04 	vldr	s0, [r3, #16]
 8003426:	4638      	mov	r0, r7
 8003428:	f00b ff6a 	bl	800f300 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 800342c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8003584 <changeOversampling+0x250>
 8003430:	eb0a 0704 	add.w	r7, sl, r4
 8003434:	eeb0 0a48 	vmov.f32	s0, s16
 8003438:	4638      	mov	r0, r7
 800343a:	f00b ffc7 	bl	800f3cc <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 800343e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003442:	ed93 0a04 	vldr	s0, [r3, #16]
 8003446:	4638      	mov	r0, r7
 8003448:	f00b ff5a 	bl	800f300 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 800344c:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003588 <changeOversampling+0x254>
 8003450:	eb0a 0704 	add.w	r7, sl, r4
 8003454:	eeb0 0a48 	vmov.f32	s0, s16
 8003458:	4638      	mov	r0, r7
 800345a:	f00b ffb7 	bl	800f3cc <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 800345e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003462:	ed93 0a04 	vldr	s0, [r3, #16]
 8003466:	4638      	mov	r0, r7
 8003468:	f00b ff4a 	bl	800f300 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 800346c:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800358c <changeOversampling+0x258>
 8003470:	eb0a 0704 	add.w	r7, sl, r4
 8003474:	eeb0 0a48 	vmov.f32	s0, s16
 8003478:	4638      	mov	r0, r7
 800347a:	f00d fd8d 	bl	8010f98 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 800347e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003482:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003486:	4638      	mov	r0, r7
 8003488:	f00d fd86 	bl	8010f98 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 800348c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8003590 <changeOversampling+0x25c>
 8003490:	eb0a 0704 	add.w	r7, sl, r4
 8003494:	eeb0 0a48 	vmov.f32	s0, s16
 8003498:	4638      	mov	r0, r7
 800349a:	f00c ffe9 	bl	8010470 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 800349e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80034a2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80034a6:	4638      	mov	r0, r7
 80034a8:	f00d f8dc 	bl	8010664 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 80034ac:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003594 <changeOversampling+0x260>
 80034b0:	eb0a 0704 	add.w	r7, sl, r4
 80034b4:	eeb0 0a48 	vmov.f32	s0, s16
 80034b8:	4638      	mov	r0, r7
 80034ba:	f00c fc99 	bl	800fdf0 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 80034be:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80034c2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80034c6:	4638      	mov	r0, r7
 80034c8:	f00c fce8 	bl	800fe9c <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 80034cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003598 <changeOversampling+0x264>
 80034d0:	eb0a 0704 	add.w	r7, sl, r4
 80034d4:	eeb0 0a48 	vmov.f32	s0, s16
 80034d8:	4638      	mov	r0, r7
 80034da:	f00c fe19 	bl	8010110 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 80034de:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80034e2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80034e6:	4638      	mov	r0, r7
 80034e8:	f00c fe68 	bl	80101bc <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 80034ec:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800359c <changeOversampling+0x268>
 80034f0:	eb0a 0704 	add.w	r7, sl, r4
 80034f4:	eeb0 0a48 	vmov.f32	s0, s16
 80034f8:	4638      	mov	r0, r7
 80034fa:	f00c fbc1 	bl	800fc80 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 80034fe:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003502:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 8003506:	4638      	mov	r0, r7
 8003508:	f00c f938 	bl	800f77c <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 800350c:	4f17      	ldr	r7, [pc, #92]	; (800356c <changeOversampling+0x238>)
 800350e:	443c      	add	r4, r7
 8003510:	eeb0 0a48 	vmov.f32	s0, s16
 8003514:	4620      	mov	r0, r4
 8003516:	f00d ff89 	bl	801142c <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 800351a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800351e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003522:	4620      	mov	r0, r4
 8003524:	f00d ff3a 	bl	801139c <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003528:	3601      	adds	r6, #1
 800352a:	2e03      	cmp	r6, #3
 800352c:	f77f af1a 	ble.w	8003364 <changeOversampling+0x30>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003530:	f108 0801 	add.w	r8, r8, #1
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <changeOversampling+0x23c>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4543      	cmp	r3, r8
 800353a:	dd01      	ble.n	8003540 <changeOversampling+0x20c>
			for (int i = 0; i < NUM_EFFECT; i++)
 800353c:	2600      	movs	r6, #0
 800353e:	e7f4      	b.n	800352a <changeOversampling+0x1f6>
			}
		}
	}
	prevOversample = newOS;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <changeOversampling+0x21c>)
 8003542:	f8c3 9000 	str.w	r9, [r3]
}
 8003546:	ecbd 8b02 	vpop	{d8}
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	bf00      	nop
 8003550:	2001ce74 	.word	0x2001ce74
 8003554:	473b8000 	.word	0x473b8000
 8003558:	2001c77c 	.word	0x2001c77c
 800355c:	2001c79c 	.word	0x2001c79c
 8003560:	2001c75c 	.word	0x2001c75c
 8003564:	2001ccc4 	.word	0x2001ccc4
 8003568:	2001cce4 	.word	0x2001cce4
 800356c:	2001c594 	.word	0x2001c594
 8003570:	200004b1 	.word	0x200004b1
 8003574:	2001cf10 	.word	0x2001cf10
 8003578:	2001cf30 	.word	0x2001cf30
 800357c:	2001c73c 	.word	0x2001c73c
 8003580:	2001c694 	.word	0x2001c694
 8003584:	2001c674 	.word	0x2001c674
 8003588:	2001c634 	.word	0x2001c634
 800358c:	2001c654 	.word	0x2001c654
 8003590:	2001c614 	.word	0x2001c614
 8003594:	2001c5f4 	.word	0x2001c5f4
 8003598:	2001c5d4 	.word	0x2001c5d4
 800359c:	2001c5b4 	.word	0x2001c5b4

080035a0 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 80035a0:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 80035a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80035a6:	008d      	lsls	r5, r1, #2
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <delayTick+0x68>)
 80035aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee67 7a80 	vmul.f32	s15, s15, s0

    sample = sample + (delayFB[v][string] * param2[v][string]);
 80035b6:	4c15      	ldr	r4, [pc, #84]	; (800360c <delayTick+0x6c>)
 80035b8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80035bc:	ed94 0a00 	vldr	s0, [r4]
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <delayTick+0x70>)
 80035c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80035c6:	ed93 7a00 	vldr	s14, [r3]
 80035ca:	ee20 0a07 	vmul.f32	s0, s0, s14

    sample = fast_tanh5(sample);
 80035ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80035d2:	f00e f913 	bl	80117fc <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 80035d6:	480f      	ldr	r0, [pc, #60]	; (8003614 <delayTick+0x74>)
 80035d8:	4428      	add	r0, r5
 80035da:	f00a fe9f 	bl	800e31c <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 80035de:	480e      	ldr	r0, [pc, #56]	; (8003618 <delayTick+0x78>)
 80035e0:	4428      	add	r0, r5
 80035e2:	f00a fbe3 	bl	800ddac <tTapeDelay_tick>
 80035e6:	ed84 0a00 	vstr	s0, [r4]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 80035ea:	480c      	ldr	r0, [pc, #48]	; (800361c <delayTick+0x7c>)
 80035ec:	4428      	add	r0, r5
 80035ee:	f00b fe0c 	bl	800f20a <tSVF_tick>
 80035f2:	ed84 0a00 	vstr	s0, [r4]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 80035f6:	480a      	ldr	r0, [pc, #40]	; (8003620 <delayTick+0x80>)
 80035f8:	4428      	add	r0, r5
 80035fa:	f00b fe06 	bl	800f20a <tSVF_tick>
    sample = fast_tanh5(sample);
 80035fe:	f00e f8fd 	bl	80117fc <fast_tanh5>
    delayFB[v][string] = sample;
 8003602:	ed84 0a00 	vstr	s0, [r4]
    return sample;
}
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	2001ce1c 	.word	0x2001ce1c
 800360c:	2001c904 	.word	0x2001c904
 8003610:	2001cdbc 	.word	0x2001cdbc
 8003614:	2001c968 	.word	0x2001c968
 8003618:	2001d0b0 	.word	0x2001d0b0
 800361c:	2001c694 	.word	0x2001c694
 8003620:	2001c674 	.word	0x2001c674

08003624 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <SystemInit+0xa0>)
 8003626:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800362a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800362e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <SystemInit+0xa4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	2b06      	cmp	r3, #6
 800363c:	d806      	bhi.n	800364c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800363e:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <SystemInit+0xa4>)
 8003640:	6813      	ldr	r3, [r2, #0]
 8003642:	f023 030f 	bic.w	r3, r3, #15
 8003646:	f043 0307 	orr.w	r3, r3, #7
 800364a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800364c:	4b1f      	ldr	r3, [pc, #124]	; (80036cc <SystemInit+0xa8>)
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003656:	2200      	movs	r2, #0
 8003658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <SystemInit+0xac>)
 800365e:	400a      	ands	r2, r1
 8003660:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <SystemInit+0xa4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f013 0f08 	tst.w	r3, #8
 800366a:	d006      	beq.n	800367a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <SystemInit+0xa4>)
 800366e:	6813      	ldr	r3, [r2, #0]
 8003670:	f023 030f 	bic.w	r3, r3, #15
 8003674:	f043 0307 	orr.w	r3, r3, #7
 8003678:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <SystemInit+0xa8>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003680:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003682:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003684:	4913      	ldr	r1, [pc, #76]	; (80036d4 <SystemInit+0xb0>)
 8003686:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003688:	4913      	ldr	r1, [pc, #76]	; (80036d8 <SystemInit+0xb4>)
 800368a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800368c:	4913      	ldr	r1, [pc, #76]	; (80036dc <SystemInit+0xb8>)
 800368e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003692:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003694:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003696:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003698:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80036a0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <SystemInit+0xbc>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <SystemInit+0xc0>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b0:	d203      	bcs.n	80036ba <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <SystemInit+0xc4>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <SystemInit+0xc8>)
 80036bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00
 80036c8:	52002000 	.word	0x52002000
 80036cc:	58024400 	.word	0x58024400
 80036d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80036d4:	02020200 	.word	0x02020200
 80036d8:	01ff0000 	.word	0x01ff0000
 80036dc:	01010280 	.word	0x01010280
 80036e0:	5c001000 	.word	0x5c001000
 80036e4:	ffff0000 	.word	0xffff0000
 80036e8:	51008000 	.word	0x51008000
 80036ec:	52004000 	.word	0x52004000

080036f0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_InitTick+0x44>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b90b      	cbnz	r3, 80036fa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80036f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80036f8:	4770      	bx	lr
{
 80036fa:	b510      	push	{r4, lr}
 80036fc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80036fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_InitTick+0x48>)
 8003708:	6810      	ldr	r0, [r2, #0]
 800370a:	fbb0 f0f3 	udiv	r0, r0, r3
 800370e:	f000 f8d1 	bl	80038b4 <HAL_SYSTICK_Config>
 8003712:	b968      	cbnz	r0, 8003730 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003714:	2c0f      	cmp	r4, #15
 8003716:	d901      	bls.n	800371c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003718:	2001      	movs	r0, #1
 800371a:	e00a      	b.n	8003732 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800371c:	2200      	movs	r2, #0
 800371e:	4621      	mov	r1, r4
 8003720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003724:	f000 f882 	bl	800382c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <HAL_InitTick+0x4c>)
 800372a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800372c:	2000      	movs	r0, #0
 800372e:	e000      	b.n	8003732 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8003730:	2001      	movs	r0, #1
}
 8003732:	bd10      	pop	{r4, pc}
 8003734:	20000760 	.word	0x20000760
 8003738:	20000754 	.word	0x20000754
 800373c:	20000764 	.word	0x20000764

08003740 <HAL_Init>:
{
 8003740:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003742:	2003      	movs	r0, #3
 8003744:	f000 f860 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003748:	f002 ffea 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 800374c:	490f      	ldr	r1, [pc, #60]	; (800378c <HAL_Init+0x4c>)
 800374e:	698b      	ldr	r3, [r1, #24]
 8003750:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003754:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_Init+0x50>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800375e:	698b      	ldr	r3, [r1, #24]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	5cd3      	ldrb	r3, [r2, r3]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	fa20 f303 	lsr.w	r3, r0, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <HAL_Init+0x54>)
 8003770:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003772:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_Init+0x58>)
 8003774:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003776:	2000      	movs	r0, #0
 8003778:	f7ff ffba 	bl	80036f0 <HAL_InitTick>
 800377c:	b110      	cbz	r0, 8003784 <HAL_Init+0x44>
    return HAL_ERROR;
 800377e:	2401      	movs	r4, #1
}
 8003780:	4620      	mov	r0, r4
 8003782:	bd10      	pop	{r4, pc}
 8003784:	4604      	mov	r4, r0
  HAL_MspInit();
 8003786:	f7ff fa07 	bl	8002b98 <HAL_MspInit>
  return HAL_OK;
 800378a:	e7f9      	b.n	8003780 <HAL_Init+0x40>
 800378c:	58024400 	.word	0x58024400
 8003790:	08018510 	.word	0x08018510
 8003794:	20000758 	.word	0x20000758
 8003798:	20000754 	.word	0x20000754

0800379c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_IncTick+0x10>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4a03      	ldr	r2, [pc, #12]	; (80037b0 <HAL_IncTick+0x14>)
 80037a2:	6811      	ldr	r1, [r2, #0]
 80037a4:	440b      	add	r3, r1
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000760 	.word	0x20000760
 80037b0:	2001d144 	.word	0x2001d144

080037b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <HAL_GetTick+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2001d144 	.word	0x2001d144

080037c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80037c4:	f7ff fff6 	bl	80037b4 <HAL_GetTick>
 80037c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80037ce:	d002      	beq.n	80037d6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_Delay+0x24>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d6:	f7ff ffed 	bl	80037b4 <HAL_GetTick>
 80037da:	1b40      	subs	r0, r0, r5
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d3fa      	bcc.n	80037d6 <HAL_Delay+0x16>
  {
  }
}
 80037e0:	bd38      	pop	{r3, r4, r5, pc}
 80037e2:	bf00      	nop
 80037e4:	20000760 	.word	0x20000760

080037e8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <HAL_GetREVID+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
}
 80037ec:	0c00      	lsrs	r0, r0, #16
 80037ee:	4770      	bx	lr
 80037f0:	5c001000 	.word	0x5c001000

080037f4 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80037f4:	4a03      	ldr	r2, [pc, #12]	; (8003804 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80037f6:	6813      	ldr	r3, [r2, #0]
 80037f8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80037fc:	4303      	orrs	r3, r0
 80037fe:	6013      	str	r3, [r2, #0]
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	52004000 	.word	0x52004000

08003808 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003808:	4906      	ldr	r1, [pc, #24]	; (8003824 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800380a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	0200      	lsls	r0, r0, #8
 8003816:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800381a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800381c:	4a02      	ldr	r2, [pc, #8]	; (8003828 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800381e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003820:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003822:	4770      	bx	lr
 8003824:	e000ed00 	.word	0xe000ed00
 8003828:	05fa0000 	.word	0x05fa0000

0800382c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_NVIC_SetPriority+0x60>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003836:	f1c3 0c07 	rsb	ip, r3, #7
 800383a:	f1bc 0f04 	cmp.w	ip, #4
 800383e:	bf28      	it	cs
 8003840:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003844:	f103 0e04 	add.w	lr, r3, #4
 8003848:	f1be 0f06 	cmp.w	lr, #6
 800384c:	d914      	bls.n	8003878 <HAL_NVIC_SetPriority+0x4c>
 800384e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003854:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003858:	ea21 010c 	bic.w	r1, r1, ip
 800385c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003862:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003866:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003868:	2800      	cmp	r0, #0
 800386a:	db07      	blt.n	800387c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_NVIC_SetPriority+0x64>)
 8003872:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003874:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003878:	2300      	movs	r3, #0
 800387a:	e7e9      	b.n	8003850 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387c:	f000 000f 	and.w	r0, r0, #15
 8003880:	0112      	lsls	r2, r2, #4
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <HAL_NVIC_SetPriority+0x68>)
 8003886:	541a      	strb	r2, [r3, r0]
 8003888:	e7f4      	b.n	8003874 <HAL_NVIC_SetPriority+0x48>
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00
 8003890:	e000e400 	.word	0xe000e400
 8003894:	e000ed14 	.word	0xe000ed14

08003898 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003898:	2800      	cmp	r0, #0
 800389a:	db07      	blt.n	80038ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389c:	f000 021f 	and.w	r2, r0, #31
 80038a0:	0940      	lsrs	r0, r0, #5
 80038a2:	2301      	movs	r3, #1
 80038a4:	4093      	lsls	r3, r2
 80038a6:	4a02      	ldr	r2, [pc, #8]	; (80038b0 <HAL_NVIC_EnableIRQ+0x18>)
 80038a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	3801      	subs	r0, #1
 80038b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80038ba:	d20b      	bcs.n	80038d4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038c0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_SYSTICK_Config+0x24>)
 80038c4:	21f0      	movs	r1, #240	; 0xf0
 80038c6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ca:	2000      	movs	r0, #0
 80038cc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	2207      	movs	r2, #7
 80038d0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80038d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80038dc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_MPU_Disable+0x18>)
 80038e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80038f8:	f040 0001 	orr.w	r0, r0, #1
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_MPU_Enable+0x1c>)
 80038fe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003904:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800390a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800390e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003918:	7842      	ldrb	r2, [r0, #1]
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_MPU_ConfigRegion+0x5c>)
 800391c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003920:	7803      	ldrb	r3, [r0, #0]
 8003922:	b1fb      	cbz	r3, 8003964 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003924:	6843      	ldr	r3, [r0, #4]
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <HAL_MPU_ConfigRegion+0x5c>)
 8003928:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800392c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800392e:	7ac3      	ldrb	r3, [r0, #11]
 8003930:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003932:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003936:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003938:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800393c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800393e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003942:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003944:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003948:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800394a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800394e:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003950:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003954:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003956:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800395a:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800395c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800395e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003962:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_MPU_ConfigRegion+0x5c>)
 8003966:	2200      	movs	r2, #0
 8003968:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 800396c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800397a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800397c:	6804      	ldr	r4, [r0, #0]
 800397e:	4e66      	ldr	r6, [pc, #408]	; (8003b18 <DMA_SetConfig+0x1a0>)
 8003980:	4d66      	ldr	r5, [pc, #408]	; (8003b1c <DMA_SetConfig+0x1a4>)
 8003982:	42ac      	cmp	r4, r5
 8003984:	bf18      	it	ne
 8003986:	42b4      	cmpne	r4, r6
 8003988:	d042      	beq.n	8003a10 <DMA_SetConfig+0x98>
 800398a:	3518      	adds	r5, #24
 800398c:	42ac      	cmp	r4, r5
 800398e:	d03f      	beq.n	8003a10 <DMA_SetConfig+0x98>
 8003990:	3518      	adds	r5, #24
 8003992:	42ac      	cmp	r4, r5
 8003994:	d03c      	beq.n	8003a10 <DMA_SetConfig+0x98>
 8003996:	3518      	adds	r5, #24
 8003998:	42ac      	cmp	r4, r5
 800399a:	d039      	beq.n	8003a10 <DMA_SetConfig+0x98>
 800399c:	3518      	adds	r5, #24
 800399e:	42ac      	cmp	r4, r5
 80039a0:	d036      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039a2:	3518      	adds	r5, #24
 80039a4:	42ac      	cmp	r4, r5
 80039a6:	d033      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039a8:	3518      	adds	r5, #24
 80039aa:	42ac      	cmp	r4, r5
 80039ac:	d030      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039ae:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80039b2:	42ac      	cmp	r4, r5
 80039b4:	d02c      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039b6:	3518      	adds	r5, #24
 80039b8:	42ac      	cmp	r4, r5
 80039ba:	d029      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039bc:	3518      	adds	r5, #24
 80039be:	42ac      	cmp	r4, r5
 80039c0:	d026      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039c2:	3518      	adds	r5, #24
 80039c4:	42ac      	cmp	r4, r5
 80039c6:	d023      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039c8:	3518      	adds	r5, #24
 80039ca:	42ac      	cmp	r4, r5
 80039cc:	d020      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039ce:	3518      	adds	r5, #24
 80039d0:	42ac      	cmp	r4, r5
 80039d2:	d01d      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039d4:	3518      	adds	r5, #24
 80039d6:	42ac      	cmp	r4, r5
 80039d8:	d01a      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039da:	3518      	adds	r5, #24
 80039dc:	42ac      	cmp	r4, r5
 80039de:	d017      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039e0:	4d4f      	ldr	r5, [pc, #316]	; (8003b20 <DMA_SetConfig+0x1a8>)
 80039e2:	42ac      	cmp	r4, r5
 80039e4:	d014      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039e6:	3514      	adds	r5, #20
 80039e8:	42ac      	cmp	r4, r5
 80039ea:	d011      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039ec:	3514      	adds	r5, #20
 80039ee:	42ac      	cmp	r4, r5
 80039f0:	d00e      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039f2:	3514      	adds	r5, #20
 80039f4:	42ac      	cmp	r4, r5
 80039f6:	d00b      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039f8:	3514      	adds	r5, #20
 80039fa:	42ac      	cmp	r4, r5
 80039fc:	d008      	beq.n	8003a10 <DMA_SetConfig+0x98>
 80039fe:	3514      	adds	r5, #20
 8003a00:	42ac      	cmp	r4, r5
 8003a02:	d005      	beq.n	8003a10 <DMA_SetConfig+0x98>
 8003a04:	3514      	adds	r5, #20
 8003a06:	42ac      	cmp	r4, r5
 8003a08:	d002      	beq.n	8003a10 <DMA_SetConfig+0x98>
 8003a0a:	3514      	adds	r5, #20
 8003a0c:	42ac      	cmp	r4, r5
 8003a0e:	d107      	bne.n	8003a20 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a10:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8003a12:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8003a14:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a16:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8003a18:	b114      	cbz	r4, 8003a20 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1a:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8003a1c:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8003a1e:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a20:	6804      	ldr	r4, [r0, #0]
 8003a22:	4e3d      	ldr	r6, [pc, #244]	; (8003b18 <DMA_SetConfig+0x1a0>)
 8003a24:	4d3d      	ldr	r5, [pc, #244]	; (8003b1c <DMA_SetConfig+0x1a4>)
 8003a26:	42ac      	cmp	r4, r5
 8003a28:	bf18      	it	ne
 8003a2a:	42b4      	cmpne	r4, r6
 8003a2c:	d052      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a2e:	3518      	adds	r5, #24
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	d04f      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a34:	3518      	adds	r5, #24
 8003a36:	42ac      	cmp	r4, r5
 8003a38:	d04c      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a3a:	3518      	adds	r5, #24
 8003a3c:	42ac      	cmp	r4, r5
 8003a3e:	d049      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a40:	3518      	adds	r5, #24
 8003a42:	42ac      	cmp	r4, r5
 8003a44:	d046      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a46:	3518      	adds	r5, #24
 8003a48:	42ac      	cmp	r4, r5
 8003a4a:	d043      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a4c:	3518      	adds	r5, #24
 8003a4e:	42ac      	cmp	r4, r5
 8003a50:	d040      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a52:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003a56:	42ac      	cmp	r4, r5
 8003a58:	d03c      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a5a:	3518      	adds	r5, #24
 8003a5c:	42ac      	cmp	r4, r5
 8003a5e:	d039      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a60:	3518      	adds	r5, #24
 8003a62:	42ac      	cmp	r4, r5
 8003a64:	d036      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a66:	3518      	adds	r5, #24
 8003a68:	42ac      	cmp	r4, r5
 8003a6a:	d033      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a6c:	3518      	adds	r5, #24
 8003a6e:	42ac      	cmp	r4, r5
 8003a70:	d030      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a72:	3518      	adds	r5, #24
 8003a74:	42ac      	cmp	r4, r5
 8003a76:	d02d      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a78:	3518      	adds	r5, #24
 8003a7a:	42ac      	cmp	r4, r5
 8003a7c:	d02a      	beq.n	8003ad4 <DMA_SetConfig+0x15c>
 8003a7e:	3518      	adds	r5, #24
 8003a80:	42ac      	cmp	r4, r5
 8003a82:	d027      	beq.n	8003ad4 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a84:	4e26      	ldr	r6, [pc, #152]	; (8003b20 <DMA_SetConfig+0x1a8>)
 8003a86:	4d27      	ldr	r5, [pc, #156]	; (8003b24 <DMA_SetConfig+0x1ac>)
 8003a88:	42ac      	cmp	r4, r5
 8003a8a:	bf18      	it	ne
 8003a8c:	42b4      	cmpne	r4, r6
 8003a8e:	d011      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003a90:	4d25      	ldr	r5, [pc, #148]	; (8003b28 <DMA_SetConfig+0x1b0>)
 8003a92:	42ac      	cmp	r4, r5
 8003a94:	d00e      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003a96:	3514      	adds	r5, #20
 8003a98:	42ac      	cmp	r4, r5
 8003a9a:	d00b      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003a9c:	3514      	adds	r5, #20
 8003a9e:	42ac      	cmp	r4, r5
 8003aa0:	d008      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003aa2:	3514      	adds	r5, #20
 8003aa4:	42ac      	cmp	r4, r5
 8003aa6:	d005      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003aa8:	3514      	adds	r5, #20
 8003aaa:	42ac      	cmp	r4, r5
 8003aac:	d002      	beq.n	8003ab4 <DMA_SetConfig+0x13c>
 8003aae:	3514      	adds	r5, #20
 8003ab0:	42ac      	cmp	r4, r5
 8003ab2:	d124      	bne.n	8003afe <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ab4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003ab6:	f004 051f 	and.w	r5, r4, #31
 8003aba:	2401      	movs	r4, #1
 8003abc:	40ac      	lsls	r4, r5
 8003abe:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ac0:	6804      	ldr	r4, [r0, #0]
 8003ac2:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac4:	6883      	ldr	r3, [r0, #8]
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	d020      	beq.n	8003b0c <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003aca:	6803      	ldr	r3, [r0, #0]
 8003acc:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ace:	6803      	ldr	r3, [r0, #0]
 8003ad0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ad2:	e014      	b.n	8003afe <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ad4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003ad6:	f004 0c1f 	and.w	ip, r4, #31
 8003ada:	243f      	movs	r4, #63	; 0x3f
 8003adc:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ae0:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ae2:	6805      	ldr	r5, [r0, #0]
 8003ae4:	682c      	ldr	r4, [r5, #0]
 8003ae6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003aea:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003aec:	6804      	ldr	r4, [r0, #0]
 8003aee:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003af0:	6883      	ldr	r3, [r0, #8]
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d005      	beq.n	8003b02 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003af6:	6803      	ldr	r3, [r0, #0]
 8003af8:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003afa:	6803      	ldr	r3, [r0, #0]
 8003afc:	60da      	str	r2, [r3, #12]
}
 8003afe:	bcf0      	pop	{r4, r5, r6, r7}
 8003b00:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b06:	6803      	ldr	r3, [r0, #0]
 8003b08:	60d9      	str	r1, [r3, #12]
 8003b0a:	e7f8      	b.n	8003afe <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b0c:	6803      	ldr	r3, [r0, #0]
 8003b0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b10:	6803      	ldr	r3, [r0, #0]
 8003b12:	60d9      	str	r1, [r3, #12]
 8003b14:	e7f3      	b.n	8003afe <DMA_SetConfig+0x186>
 8003b16:	bf00      	nop
 8003b18:	40020010 	.word	0x40020010
 8003b1c:	40020028 	.word	0x40020028
 8003b20:	58025408 	.word	0x58025408
 8003b24:	5802541c 	.word	0x5802541c
 8003b28:	58025430 	.word	0x58025430

08003b2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	4927      	ldr	r1, [pc, #156]	; (8003bcc <DMA_CalcBaseAndBitshift+0xa0>)
 8003b30:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <DMA_CalcBaseAndBitshift+0xa4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	bf18      	it	ne
 8003b36:	428b      	cmpne	r3, r1
 8003b38:	d02f      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b3a:	3218      	adds	r2, #24
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b40:	3218      	adds	r2, #24
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d029      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b46:	3218      	adds	r2, #24
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d026      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b4c:	3218      	adds	r2, #24
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d023      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b52:	3218      	adds	r2, #24
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d020      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b58:	3218      	adds	r2, #24
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b5e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b66:	3218      	adds	r2, #24
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d016      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b6c:	3218      	adds	r2, #24
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b72:	3218      	adds	r2, #24
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d010      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b78:	3218      	adds	r2, #24
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b7e:	3218      	adds	r2, #24
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00a      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b84:	3218      	adds	r2, #24
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
 8003b8a:	3218      	adds	r2, #24
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b94:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8003b96:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003b98:	4770      	bx	lr
{
 8003b9a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003b9c:	b2d9      	uxtb	r1, r3
 8003b9e:	3910      	subs	r1, #16
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <DMA_CalcBaseAndBitshift+0xa8>)
 8003ba2:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ba6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003baa:	4c0b      	ldr	r4, [pc, #44]	; (8003bd8 <DMA_CalcBaseAndBitshift+0xac>)
 8003bac:	5ca2      	ldrb	r2, [r4, r2]
 8003bae:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8003bb0:	295f      	cmp	r1, #95	; 0x5f
 8003bb2:	d907      	bls.n	8003bc4 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003bb4:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <DMA_CalcBaseAndBitshift+0xb0>)
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	3204      	adds	r2, #4
 8003bba:	6582      	str	r2, [r0, #88]	; 0x58
}
 8003bbc:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bc2:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003bc4:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <DMA_CalcBaseAndBitshift+0xb0>)
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	6582      	str	r2, [r0, #88]	; 0x58
 8003bca:	e7f7      	b.n	8003bbc <DMA_CalcBaseAndBitshift+0x90>
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020028 	.word	0x40020028
 8003bd4:	aaaaaaab 	.word	0xaaaaaaab
 8003bd8:	08018520 	.word	0x08018520
 8003bdc:	fffffc00 	.word	0xfffffc00

08003be0 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003be0:	6983      	ldr	r3, [r0, #24]
 8003be2:	b99b      	cbnz	r3, 8003c0c <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8003be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d00a      	beq.n	8003c00 <DMA_CheckFifoParam+0x20>
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d002      	beq.n	8003bf4 <DMA_CheckFifoParam+0x14>
 8003bee:	b10b      	cbz	r3, 8003bf4 <DMA_CheckFifoParam+0x14>
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003bf6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003bfa:	d12a      	bne.n	8003c52 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c06:	d026      	beq.n	8003c56 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2000      	movs	r0, #0
 8003c0a:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c10:	d00a      	beq.n	8003c28 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d926      	bls.n	8003c66 <DMA_CheckFifoParam+0x86>
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d126      	bne.n	8003c6a <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c22:	d124      	bne.n	8003c6e <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8003c24:	2000      	movs	r0, #0
 8003c26:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003c28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d803      	bhi.n	8003c36 <DMA_CheckFifoParam+0x56>
 8003c2e:	e8df f003 	tbb	[pc, r3]
 8003c32:	0414      	.short	0x0414
 8003c34:	0a14      	.short	0x0a14
 8003c36:	2000      	movs	r0, #0
 8003c38:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c40:	d10d      	bne.n	8003c5e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2000      	movs	r0, #0
 8003c44:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c4c:	d009      	beq.n	8003c62 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2000      	movs	r0, #0
 8003c50:	4770      	bx	lr
          status = HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
 8003c54:	4770      	bx	lr
          status = HAL_ERROR;
 8003c56:	2001      	movs	r0, #1
 8003c58:	4770      	bx	lr
        status = HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	4770      	bx	lr
          status = HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
 8003c60:	4770      	bx	lr
          status = HAL_ERROR;
 8003c62:	2001      	movs	r0, #1
 8003c64:	4770      	bx	lr
        status = HAL_ERROR;
 8003c66:	2001      	movs	r0, #1
 8003c68:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8003c70:	4770      	bx	lr
	...

08003c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c74:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c76:	4921      	ldr	r1, [pc, #132]	; (8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003c78:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	bf18      	it	ne
 8003c7e:	428b      	cmpne	r3, r1
 8003c80:	d027      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c82:	3214      	adds	r2, #20
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d024      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c88:	3214      	adds	r2, #20
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d021      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c8e:	3214      	adds	r2, #20
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d01e      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c94:	3214      	adds	r2, #20
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01b      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c9a:	3214      	adds	r2, #20
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca0:	3214      	adds	r2, #20
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d015      	beq.n	8003cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	3a10      	subs	r2, #16
 8003caa:	4916      	ldr	r1, [pc, #88]	; (8003d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003cac:	fba1 1202 	umull	r1, r2, r1, r2
 8003cb0:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003cb2:	4915      	ldr	r1, [pc, #84]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8003cb4:	4419      	add	r1, r3
 8003cb6:	29a8      	cmp	r1, #168	; 0xa8
 8003cb8:	d91e      	bls.n	8003cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8003cc4:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cc6:	f002 021f 	and.w	r2, r2, #31
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8003cd0:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3b08      	subs	r3, #8
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8003cde:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ce6:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8003ce8:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003cea:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003cee:	2201      	movs	r2, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	6683      	str	r3, [r0, #104]	; 0x68
 8003cf6:	4770      	bx	lr
      stream_number += 8U;
 8003cf8:	3208      	adds	r2, #8
 8003cfa:	e7de      	b.n	8003cba <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8003cfc:	58025408 	.word	0x58025408
 8003d00:	5802541c 	.word	0x5802541c
 8003d04:	aaaaaaab 	.word	0xaaaaaaab
 8003d08:	bffdfbf0 	.word	0xbffdfbf0
 8003d0c:	10008200 	.word	0x10008200
 8003d10:	40020880 	.word	0x40020880
 8003d14:	cccccccd 	.word	0xcccccccd
 8003d18:	16009600 	.word	0x16009600
 8003d1c:	58025880 	.word	0x58025880

08003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d20:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003d22:	1e4a      	subs	r2, r1, #1
 8003d24:	2a07      	cmp	r2, #7
 8003d26:	d82b      	bhi.n	8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8003d28:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d2a:	6803      	ldr	r3, [r0, #0]
 8003d2c:	4d15      	ldr	r5, [pc, #84]	; (8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8003d2e:	4c16      	ldr	r4, [pc, #88]	; (8003d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8003d30:	42a3      	cmp	r3, r4
 8003d32:	bf18      	it	ne
 8003d34:	42ab      	cmpne	r3, r5
 8003d36:	d018      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d38:	3414      	adds	r4, #20
 8003d3a:	42a3      	cmp	r3, r4
 8003d3c:	d015      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d3e:	3414      	adds	r4, #20
 8003d40:	42a3      	cmp	r3, r4
 8003d42:	d012      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d44:	3414      	adds	r4, #20
 8003d46:	42a3      	cmp	r3, r4
 8003d48:	d00f      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d4a:	3414      	adds	r4, #20
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d00c      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d50:	3414      	adds	r4, #20
 8003d52:	42a3      	cmp	r3, r4
 8003d54:	d009      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8003d56:	3414      	adds	r4, #20
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	d006      	beq.n	8003d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8003d5e:	440b      	add	r3, r1
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8003d66:	6703      	str	r3, [r0, #112]	; 0x70
 8003d68:	e005      	b.n	8003d76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8003d6c:	440b      	add	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8003d74:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003d76:	2301      	movs	r3, #1
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 8003d7c:	bc30      	pop	{r4, r5}
 8003d7e:	4770      	bx	lr
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	58025408 	.word	0x58025408
 8003d88:	5802541c 	.word	0x5802541c
 8003d8c:	1000823f 	.word	0x1000823f
 8003d90:	40020940 	.word	0x40020940
 8003d94:	1600963f 	.word	0x1600963f
 8003d98:	58025940 	.word	0x58025940

08003d9c <HAL_DMA_Init>:
{
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff fd08 	bl	80037b4 <HAL_GetTick>
  if(hdma == NULL)
 8003da4:	2c00      	cmp	r4, #0
 8003da6:	f000 81b6 	beq.w	8004116 <HAL_DMA_Init+0x37a>
 8003daa:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	4953      	ldr	r1, [pc, #332]	; (8003efc <HAL_DMA_Init+0x160>)
 8003db0:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <HAL_DMA_Init+0x164>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	bf18      	it	ne
 8003db6:	428b      	cmpne	r3, r1
 8003db8:	bf0c      	ite	eq
 8003dba:	2101      	moveq	r1, #1
 8003dbc:	2100      	movne	r1, #0
 8003dbe:	d050      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dc0:	3218      	adds	r2, #24
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d04d      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dc6:	3218      	adds	r2, #24
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dcc:	3218      	adds	r2, #24
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d047      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dd2:	3218      	adds	r2, #24
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d044      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dd8:	3218      	adds	r2, #24
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d041      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dde:	3218      	adds	r2, #24
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d03e      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003de4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d03a      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dec:	3218      	adds	r2, #24
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d037      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003df2:	3218      	adds	r2, #24
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d034      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003df8:	3218      	adds	r2, #24
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003dfe:	3218      	adds	r2, #24
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d02e      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003e04:	3218      	adds	r2, #24
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02b      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003e0a:	3218      	adds	r2, #24
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d028      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
 8003e10:	3218      	adds	r2, #24
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d025      	beq.n	8003e62 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e16:	493b      	ldr	r1, [pc, #236]	; (8003f04 <HAL_DMA_Init+0x168>)
 8003e18:	4a3b      	ldr	r2, [pc, #236]	; (8003f08 <HAL_DMA_Init+0x16c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	bf18      	it	ne
 8003e1e:	428b      	cmpne	r3, r1
 8003e20:	f000 8131 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e24:	4a39      	ldr	r2, [pc, #228]	; (8003f0c <HAL_DMA_Init+0x170>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 812d 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e2c:	3214      	adds	r2, #20
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f000 8129 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e34:	3214      	adds	r2, #20
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 8125 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e3c:	3214      	adds	r2, #20
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f000 8121 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e44:	3214      	adds	r2, #20
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f000 811d 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
 8003e4c:	3214      	adds	r2, #20
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f000 8119 	beq.w	8004086 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e54:	2340      	movs	r3, #64	; 0x40
 8003e56:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
 8003e60:	e04a      	b.n	8003ef8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e62:	2202      	movs	r2, #2
 8003e64:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	bb79      	cbnz	r1, 8003ed0 <HAL_DMA_Init+0x134>
 8003e70:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <HAL_DMA_Init+0x174>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d02c      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e76:	3218      	adds	r2, #24
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d029      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e7c:	3218      	adds	r2, #24
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d026      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e82:	3218      	adds	r2, #24
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d023      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e88:	3218      	adds	r2, #24
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d020      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e8e:	3218      	adds	r2, #24
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d01d      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e94:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d019      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003e9c:	3218      	adds	r2, #24
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d016      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003ea2:	3218      	adds	r2, #24
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003ea8:	3218      	adds	r2, #24
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d010      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003eae:	3218      	adds	r2, #24
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003eb4:	3218      	adds	r2, #24
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003eba:	3218      	adds	r2, #24
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003ec0:	3218      	adds	r2, #24
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_DMA_Init+0x134>
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f022 0201 	bic.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e003      	b.n	8003ed8 <HAL_DMA_Init+0x13c>
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f012 0f01 	tst.w	r2, #1
 8003ee0:	d018      	beq.n	8003f14 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ee2:	f7ff fc67 	bl	80037b4 <HAL_GetTick>
 8003ee6:	1b43      	subs	r3, r0, r5
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d9f5      	bls.n	8003ed8 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eec:	2320      	movs	r3, #32
 8003eee:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8003ef6:	2001      	movs	r0, #1
}
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	bf00      	nop
 8003efc:	40020010 	.word	0x40020010
 8003f00:	40020028 	.word	0x40020028
 8003f04:	58025408 	.word	0x58025408
 8003f08:	5802541c 	.word	0x5802541c
 8003f0c:	58025430 	.word	0x58025430
 8003f10:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f14:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f16:	4981      	ldr	r1, [pc, #516]	; (800411c <HAL_DMA_Init+0x380>)
 8003f18:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 8003f1a:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1c:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f1e:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f20:	6920      	ldr	r0, [r4, #16]
 8003f22:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f24:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f26:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f28:	69a0      	ldr	r0, [r4, #24]
 8003f2a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f2c:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8003f30:	6a20      	ldr	r0, [r4, #32]
 8003f32:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8003f34:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f38:	2904      	cmp	r1, #4
 8003f3a:	f000 8099 	beq.w	8004070 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003f3e:	4978      	ldr	r1, [pc, #480]	; (8004120 <HAL_DMA_Init+0x384>)
 8003f40:	6808      	ldr	r0, [r1, #0]
 8003f42:	4978      	ldr	r1, [pc, #480]	; (8004124 <HAL_DMA_Init+0x388>)
 8003f44:	4001      	ands	r1, r0
 8003f46:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003f4a:	d311      	bcc.n	8003f70 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f4c:	6861      	ldr	r1, [r4, #4]
 8003f4e:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8003f52:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8003f56:	2803      	cmp	r0, #3
 8003f58:	bf88      	it	hi
 8003f5a:	2d05      	cmphi	r5, #5
 8003f5c:	d906      	bls.n	8003f6c <HAL_DMA_Init+0x1d0>
 8003f5e:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8003f62:	2801      	cmp	r0, #1
 8003f64:	d902      	bls.n	8003f6c <HAL_DMA_Init+0x1d0>
 8003f66:	394f      	subs	r1, #79	; 0x4f
 8003f68:	2903      	cmp	r1, #3
 8003f6a:	d801      	bhi.n	8003f70 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 8003f6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f70:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f72:	6826      	ldr	r6, [r4, #0]
 8003f74:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f76:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8003f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f7c:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d108      	bne.n	8003f94 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8003f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003f84:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f88:	b123      	cbz	r3, 8003f94 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f7ff fe28 	bl	8003be0 <DMA_CheckFifoParam>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d172      	bne.n	800407a <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f94:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff fdc8 	bl	8003b2c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f9c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f9e:	f003 021f 	and.w	r2, r3, #31
 8003fa2:	233f      	movs	r3, #63	; 0x3f
 8003fa4:	4093      	lsls	r3, r2
 8003fa6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	495f      	ldr	r1, [pc, #380]	; (8004128 <HAL_DMA_Init+0x38c>)
 8003fac:	4a5f      	ldr	r2, [pc, #380]	; (800412c <HAL_DMA_Init+0x390>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	bf18      	it	ne
 8003fb2:	428b      	cmpne	r3, r1
 8003fb4:	d042      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fb6:	3218      	adds	r2, #24
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d03f      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fbc:	3218      	adds	r2, #24
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d03c      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fc2:	3218      	adds	r2, #24
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d039      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fc8:	3218      	adds	r2, #24
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d036      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fce:	3218      	adds	r2, #24
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d033      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fd4:	3218      	adds	r2, #24
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d030      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fda:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02c      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fe2:	3218      	adds	r2, #24
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d029      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fe8:	3218      	adds	r2, #24
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d026      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003fee:	3218      	adds	r2, #24
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d023      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003ff4:	3218      	adds	r2, #24
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d020      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8003ffa:	3218      	adds	r2, #24
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01d      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004000:	3218      	adds	r2, #24
 8004002:	4293      	cmp	r3, r2
 8004004:	d01a      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004006:	3218      	adds	r2, #24
 8004008:	4293      	cmp	r3, r2
 800400a:	d017      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 800400c:	4a48      	ldr	r2, [pc, #288]	; (8004130 <HAL_DMA_Init+0x394>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d014      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004012:	3214      	adds	r2, #20
 8004014:	4293      	cmp	r3, r2
 8004016:	d011      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004018:	3214      	adds	r2, #20
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 800401e:	3214      	adds	r2, #20
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004024:	3214      	adds	r2, #20
 8004026:	4293      	cmp	r3, r2
 8004028:	d008      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 800402a:	3214      	adds	r2, #20
 800402c:	4293      	cmp	r3, r2
 800402e:	d005      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004030:	3214      	adds	r2, #20
 8004032:	4293      	cmp	r3, r2
 8004034:	d002      	beq.n	800403c <HAL_DMA_Init+0x2a0>
 8004036:	3214      	adds	r2, #20
 8004038:	4293      	cmp	r3, r2
 800403a:	d113      	bne.n	8004064 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800403c:	4620      	mov	r0, r4
 800403e:	f7ff fe19 	bl	8003c74 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004042:	68a3      	ldr	r3, [r4, #8]
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d059      	beq.n	80040fc <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004048:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800404a:	7922      	ldrb	r2, [r4, #4]
 800404c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800404e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004050:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004052:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	3b01      	subs	r3, #1
 8004058:	2b07      	cmp	r3, #7
 800405a:	d952      	bls.n	8004102 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004060:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004062:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004064:	2000      	movs	r0, #0
 8004066:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004068:	2301      	movs	r3, #1
 800406a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800406e:	e743      	b.n	8003ef8 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004070:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004072:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004074:	4301      	orrs	r1, r0
 8004076:	430a      	orrs	r2, r1
 8004078:	e761      	b.n	8003f3e <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800407e:	2001      	movs	r0, #1
 8004080:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004084:	e738      	b.n	8003ef8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004086:	2202      	movs	r2, #2
 8004088:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800408c:	2200      	movs	r2, #0
 800408e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004092:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004094:	4927      	ldr	r1, [pc, #156]	; (8004134 <HAL_DMA_Init+0x398>)
 8004096:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004098:	68a2      	ldr	r2, [r4, #8]
 800409a:	2a40      	cmp	r2, #64	; 0x40
 800409c:	d02c      	beq.n	80040f8 <HAL_DMA_Init+0x35c>
 800409e:	2a80      	cmp	r2, #128	; 0x80
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_Init+0x356>
 80040a2:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040a4:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040a6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040aa:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040ac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040b0:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040b2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040b6:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040b8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040bc:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040be:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040c2:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040c4:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040c8:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040ca:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_DMA_Init+0x39c>)
 80040d0:	4413      	add	r3, r2
 80040d2:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_DMA_Init+0x3a0>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff fd24 	bl	8003b2c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80040e6:	f002 011f 	and.w	r1, r2, #31
 80040ea:	2201      	movs	r2, #1
 80040ec:	408a      	lsls	r2, r1
 80040ee:	6042      	str	r2, [r0, #4]
 80040f0:	e75a      	b.n	8003fa8 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040f6:	e7d5      	b.n	80040a4 <HAL_DMA_Init+0x308>
 80040f8:	2210      	movs	r2, #16
 80040fa:	e7d3      	b.n	80040a4 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040fc:	2300      	movs	r3, #0
 80040fe:	6063      	str	r3, [r4, #4]
 8004100:	e7a2      	b.n	8004048 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fe0c 	bl	8003d20 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004108:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004110:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	e7a6      	b.n	8004064 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004116:	2001      	movs	r0, #1
 8004118:	e6ee      	b.n	8003ef8 <HAL_DMA_Init+0x15c>
 800411a:	bf00      	nop
 800411c:	fe10803f 	.word	0xfe10803f
 8004120:	5c001000 	.word	0x5c001000
 8004124:	ffff0000 	.word	0xffff0000
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	58025408 	.word	0x58025408
 8004134:	fffe000f 	.word	0xfffe000f
 8004138:	a7fdabf8 	.word	0xa7fdabf8
 800413c:	cccccccd 	.word	0xcccccccd

08004140 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004140:	2800      	cmp	r0, #0
 8004142:	f000 813e 	beq.w	80043c2 <HAL_DMA_Start_IT+0x282>
{
 8004146:	b570      	push	{r4, r5, r6, lr}
 8004148:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800414a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800414e:	2801      	cmp	r0, #1
 8004150:	f000 8139 	beq.w	80043c6 <HAL_DMA_Start_IT+0x286>
 8004154:	2001      	movs	r0, #1
 8004156:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800415a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800415e:	b2c0      	uxtb	r0, r0
 8004160:	2801      	cmp	r0, #1
 8004162:	d007      	beq.n	8004174 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004168:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800416a:	2300      	movs	r3, #0
 800416c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8004170:	2001      	movs	r0, #1
}
 8004172:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004174:	2002      	movs	r0, #2
 8004176:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800417a:	2000      	movs	r0, #0
 800417c:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	4e92      	ldr	r6, [pc, #584]	; (80043cc <HAL_DMA_Start_IT+0x28c>)
 8004182:	4d93      	ldr	r5, [pc, #588]	; (80043d0 <HAL_DMA_Start_IT+0x290>)
 8004184:	42a8      	cmp	r0, r5
 8004186:	bf18      	it	ne
 8004188:	42b0      	cmpne	r0, r6
 800418a:	d02f      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 800418c:	3518      	adds	r5, #24
 800418e:	42a8      	cmp	r0, r5
 8004190:	d02c      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 8004192:	3518      	adds	r5, #24
 8004194:	42a8      	cmp	r0, r5
 8004196:	d029      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 8004198:	3518      	adds	r5, #24
 800419a:	42a8      	cmp	r0, r5
 800419c:	d026      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 800419e:	3518      	adds	r5, #24
 80041a0:	42a8      	cmp	r0, r5
 80041a2:	d023      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041a4:	3518      	adds	r5, #24
 80041a6:	42a8      	cmp	r0, r5
 80041a8:	d020      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041aa:	3518      	adds	r5, #24
 80041ac:	42a8      	cmp	r0, r5
 80041ae:	d01d      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041b0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80041b4:	42a8      	cmp	r0, r5
 80041b6:	d019      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041b8:	3518      	adds	r5, #24
 80041ba:	42a8      	cmp	r0, r5
 80041bc:	d016      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041be:	3518      	adds	r5, #24
 80041c0:	42a8      	cmp	r0, r5
 80041c2:	d013      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041c4:	3518      	adds	r5, #24
 80041c6:	42a8      	cmp	r0, r5
 80041c8:	d010      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041ca:	3518      	adds	r5, #24
 80041cc:	42a8      	cmp	r0, r5
 80041ce:	d00d      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041d0:	3518      	adds	r5, #24
 80041d2:	42a8      	cmp	r0, r5
 80041d4:	d00a      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041d6:	3518      	adds	r5, #24
 80041d8:	42a8      	cmp	r0, r5
 80041da:	d007      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041dc:	3518      	adds	r5, #24
 80041de:	42a8      	cmp	r0, r5
 80041e0:	d004      	beq.n	80041ec <HAL_DMA_Start_IT+0xac>
 80041e2:	6805      	ldr	r5, [r0, #0]
 80041e4:	f025 0501 	bic.w	r5, r5, #1
 80041e8:	6005      	str	r5, [r0, #0]
 80041ea:	e003      	b.n	80041f4 <HAL_DMA_Start_IT+0xb4>
 80041ec:	6805      	ldr	r5, [r0, #0]
 80041ee:	f025 0501 	bic.w	r5, r5, #1
 80041f2:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff fbbf 	bl	8003978 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	4973      	ldr	r1, [pc, #460]	; (80043cc <HAL_DMA_Start_IT+0x28c>)
 80041fe:	4a74      	ldr	r2, [pc, #464]	; (80043d0 <HAL_DMA_Start_IT+0x290>)
 8004200:	4293      	cmp	r3, r2
 8004202:	bf18      	it	ne
 8004204:	428b      	cmpne	r3, r1
 8004206:	d038      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004208:	3218      	adds	r2, #24
 800420a:	4293      	cmp	r3, r2
 800420c:	d035      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 800420e:	3218      	adds	r2, #24
 8004210:	4293      	cmp	r3, r2
 8004212:	d032      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004214:	3218      	adds	r2, #24
 8004216:	4293      	cmp	r3, r2
 8004218:	d02f      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 800421a:	3218      	adds	r2, #24
 800421c:	4293      	cmp	r3, r2
 800421e:	d02c      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004220:	3218      	adds	r2, #24
 8004222:	4293      	cmp	r3, r2
 8004224:	d029      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004226:	3218      	adds	r2, #24
 8004228:	4293      	cmp	r3, r2
 800422a:	d026      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 800422c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004230:	4293      	cmp	r3, r2
 8004232:	d022      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004234:	3218      	adds	r2, #24
 8004236:	4293      	cmp	r3, r2
 8004238:	d01f      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 800423a:	3218      	adds	r2, #24
 800423c:	4293      	cmp	r3, r2
 800423e:	d01c      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004240:	3218      	adds	r2, #24
 8004242:	4293      	cmp	r3, r2
 8004244:	d019      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004246:	3218      	adds	r2, #24
 8004248:	4293      	cmp	r3, r2
 800424a:	d016      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 800424c:	3218      	adds	r2, #24
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004252:	3218      	adds	r2, #24
 8004254:	4293      	cmp	r3, r2
 8004256:	d010      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
 8004258:	3218      	adds	r2, #24
 800425a:	4293      	cmp	r3, r2
 800425c:	d00d      	beq.n	800427a <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f022 020e 	bic.w	r2, r2, #14
 8004264:	f042 020a 	orr.w	r2, r2, #10
 8004268:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800426a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800426c:	b193      	cbz	r3, 8004294 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	6813      	ldr	r3, [r2, #0]
 8004272:	f043 0304 	orr.w	r3, r3, #4
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e00c      	b.n	8004294 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	f022 021e 	bic.w	r2, r2, #30
 8004280:	f042 0216 	orr.w	r2, r2, #22
 8004284:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004288:	b123      	cbz	r3, 8004294 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	6813      	ldr	r3, [r2, #0]
 800428e:	f043 0308 	orr.w	r3, r3, #8
 8004292:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	494d      	ldr	r1, [pc, #308]	; (80043cc <HAL_DMA_Start_IT+0x28c>)
 8004298:	4a4d      	ldr	r2, [pc, #308]	; (80043d0 <HAL_DMA_Start_IT+0x290>)
 800429a:	4293      	cmp	r3, r2
 800429c:	bf18      	it	ne
 800429e:	428b      	cmpne	r3, r1
 80042a0:	d042      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042a2:	3218      	adds	r2, #24
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d03f      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042a8:	3218      	adds	r2, #24
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d03c      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042ae:	3218      	adds	r2, #24
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d039      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042b4:	3218      	adds	r2, #24
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d036      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042ba:	3218      	adds	r2, #24
 80042bc:	4293      	cmp	r3, r2
 80042be:	d033      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042c0:	3218      	adds	r2, #24
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d030      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042c6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d02c      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042ce:	3218      	adds	r2, #24
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d029      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042d4:	3218      	adds	r2, #24
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d026      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042da:	3218      	adds	r2, #24
 80042dc:	4293      	cmp	r3, r2
 80042de:	d023      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042e0:	3218      	adds	r2, #24
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d020      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042e6:	3218      	adds	r2, #24
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01d      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042ec:	3218      	adds	r2, #24
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01a      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042f2:	3218      	adds	r2, #24
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d017      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042f8:	4a36      	ldr	r2, [pc, #216]	; (80043d4 <HAL_DMA_Start_IT+0x294>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d014      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 80042fe:	3214      	adds	r2, #20
 8004300:	4293      	cmp	r3, r2
 8004302:	d011      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 8004304:	3214      	adds	r2, #20
 8004306:	4293      	cmp	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 800430a:	3214      	adds	r2, #20
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 8004310:	3214      	adds	r2, #20
 8004312:	4293      	cmp	r3, r2
 8004314:	d008      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 8004316:	3214      	adds	r2, #20
 8004318:	4293      	cmp	r3, r2
 800431a:	d005      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 800431c:	3214      	adds	r2, #20
 800431e:	4293      	cmp	r3, r2
 8004320:	d002      	beq.n	8004328 <HAL_DMA_Start_IT+0x1e8>
 8004322:	3214      	adds	r2, #20
 8004324:	4293      	cmp	r3, r2
 8004326:	d10e      	bne.n	8004346 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004328:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004330:	d003      	beq.n	800433a <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004338:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800433a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800433c:	b11b      	cbz	r3, 8004346 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	4920      	ldr	r1, [pc, #128]	; (80043cc <HAL_DMA_Start_IT+0x28c>)
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <HAL_DMA_Start_IT+0x290>)
 800434c:	4293      	cmp	r3, r2
 800434e:	bf18      	it	ne
 8004350:	428b      	cmpne	r3, r1
 8004352:	d030      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004354:	3218      	adds	r2, #24
 8004356:	4293      	cmp	r3, r2
 8004358:	d02d      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 800435a:	3218      	adds	r2, #24
 800435c:	4293      	cmp	r3, r2
 800435e:	d02a      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004360:	3218      	adds	r2, #24
 8004362:	4293      	cmp	r3, r2
 8004364:	d027      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004366:	3218      	adds	r2, #24
 8004368:	4293      	cmp	r3, r2
 800436a:	d024      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 800436c:	3218      	adds	r2, #24
 800436e:	4293      	cmp	r3, r2
 8004370:	d021      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004372:	3218      	adds	r2, #24
 8004374:	4293      	cmp	r3, r2
 8004376:	d01e      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004378:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800437c:	4293      	cmp	r3, r2
 800437e:	d01a      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004380:	3218      	adds	r2, #24
 8004382:	4293      	cmp	r3, r2
 8004384:	d017      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004386:	3218      	adds	r2, #24
 8004388:	4293      	cmp	r3, r2
 800438a:	d014      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 800438c:	3218      	adds	r2, #24
 800438e:	4293      	cmp	r3, r2
 8004390:	d011      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004392:	3218      	adds	r2, #24
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 8004398:	3218      	adds	r2, #24
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 800439e:	3218      	adds	r2, #24
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d008      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 80043a4:	3218      	adds	r2, #24
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d005      	beq.n	80043b6 <HAL_DMA_Start_IT+0x276>
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2000      	movs	r0, #0
 80043b4:	e6dd      	b.n	8004172 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80043c0:	e6d7      	b.n	8004172 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 80043c2:	2001      	movs	r0, #1
}
 80043c4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80043c6:	2002      	movs	r0, #2
 80043c8:	e6d3      	b.n	8004172 <HAL_DMA_Start_IT+0x32>
 80043ca:	bf00      	nop
 80043cc:	40020010 	.word	0x40020010
 80043d0:	40020028 	.word	0x40020028
 80043d4:	58025408 	.word	0x58025408

080043d8 <HAL_DMA_Abort>:
{
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80043dc:	f7ff f9ea 	bl	80037b4 <HAL_GetTick>
  if(hdma == NULL)
 80043e0:	2c00      	cmp	r4, #0
 80043e2:	f000 8191 	beq.w	8004708 <HAL_DMA_Abort+0x330>
 80043e6:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d006      	beq.n	8004400 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80043f6:	2300      	movs	r3, #0
 80043f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80043fc:	2001      	movs	r0, #1
}
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	498c      	ldr	r1, [pc, #560]	; (8004634 <HAL_DMA_Abort+0x25c>)
 8004404:	4a8c      	ldr	r2, [pc, #560]	; (8004638 <HAL_DMA_Abort+0x260>)
 8004406:	4293      	cmp	r3, r2
 8004408:	bf18      	it	ne
 800440a:	428b      	cmpne	r3, r1
 800440c:	d030      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800440e:	3218      	adds	r2, #24
 8004410:	4293      	cmp	r3, r2
 8004412:	d02d      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004414:	3218      	adds	r2, #24
 8004416:	4293      	cmp	r3, r2
 8004418:	d02a      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800441a:	3218      	adds	r2, #24
 800441c:	4293      	cmp	r3, r2
 800441e:	d027      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004420:	3218      	adds	r2, #24
 8004422:	4293      	cmp	r3, r2
 8004424:	d024      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004426:	3218      	adds	r2, #24
 8004428:	4293      	cmp	r3, r2
 800442a:	d021      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800442c:	3218      	adds	r2, #24
 800442e:	4293      	cmp	r3, r2
 8004430:	d01e      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004432:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004436:	4293      	cmp	r3, r2
 8004438:	d01a      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800443a:	3218      	adds	r2, #24
 800443c:	4293      	cmp	r3, r2
 800443e:	d017      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004440:	3218      	adds	r2, #24
 8004442:	4293      	cmp	r3, r2
 8004444:	d014      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004446:	3218      	adds	r2, #24
 8004448:	4293      	cmp	r3, r2
 800444a:	d011      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800444c:	3218      	adds	r2, #24
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004452:	3218      	adds	r2, #24
 8004454:	4293      	cmp	r3, r2
 8004456:	d00b      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 8004458:	3218      	adds	r2, #24
 800445a:	4293      	cmp	r3, r2
 800445c:	d008      	beq.n	8004470 <HAL_DMA_Abort+0x98>
 800445e:	3218      	adds	r2, #24
 8004460:	4293      	cmp	r3, r2
 8004462:	d005      	beq.n	8004470 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f022 020e 	bic.w	r2, r2, #14
 800446a:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800446c:	6826      	ldr	r6, [r4, #0]
 800446e:	e009      	b.n	8004484 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	f022 021e 	bic.w	r2, r2, #30
 8004476:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	6953      	ldr	r3, [r2, #20]
 800447c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004480:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004482:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	496b      	ldr	r1, [pc, #428]	; (8004634 <HAL_DMA_Abort+0x25c>)
 8004488:	4a6b      	ldr	r2, [pc, #428]	; (8004638 <HAL_DMA_Abort+0x260>)
 800448a:	4293      	cmp	r3, r2
 800448c:	bf18      	it	ne
 800448e:	428b      	cmpne	r3, r1
 8004490:	d042      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 8004492:	3218      	adds	r2, #24
 8004494:	4293      	cmp	r3, r2
 8004496:	d03f      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 8004498:	3218      	adds	r2, #24
 800449a:	4293      	cmp	r3, r2
 800449c:	d03c      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 800449e:	3218      	adds	r2, #24
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d039      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044a4:	3218      	adds	r2, #24
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d036      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044aa:	3218      	adds	r2, #24
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d033      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044b0:	3218      	adds	r2, #24
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d030      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044b6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044be:	3218      	adds	r2, #24
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d029      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044c4:	3218      	adds	r2, #24
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d026      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044ca:	3218      	adds	r2, #24
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d023      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044d0:	3218      	adds	r2, #24
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d020      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044d6:	3218      	adds	r2, #24
 80044d8:	4293      	cmp	r3, r2
 80044da:	d01d      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044dc:	3218      	adds	r2, #24
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01a      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044e2:	3218      	adds	r2, #24
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d017      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044e8:	4a54      	ldr	r2, [pc, #336]	; (800463c <HAL_DMA_Abort+0x264>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d014      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044ee:	3214      	adds	r2, #20
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d011      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044f4:	3214      	adds	r2, #20
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 80044fa:	3214      	adds	r2, #20
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 8004500:	3214      	adds	r2, #20
 8004502:	4293      	cmp	r3, r2
 8004504:	d008      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 8004506:	3214      	adds	r2, #20
 8004508:	4293      	cmp	r3, r2
 800450a:	d005      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 800450c:	3214      	adds	r2, #20
 800450e:	4293      	cmp	r3, r2
 8004510:	d002      	beq.n	8004518 <HAL_DMA_Abort+0x140>
 8004512:	3214      	adds	r2, #20
 8004514:	4293      	cmp	r3, r2
 8004516:	d104      	bne.n	8004522 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004518:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	4943      	ldr	r1, [pc, #268]	; (8004634 <HAL_DMA_Abort+0x25c>)
 8004526:	4a44      	ldr	r2, [pc, #272]	; (8004638 <HAL_DMA_Abort+0x260>)
 8004528:	4293      	cmp	r3, r2
 800452a:	bf18      	it	ne
 800452c:	428b      	cmpne	r3, r1
 800452e:	d02f      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004530:	3218      	adds	r2, #24
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004536:	3218      	adds	r2, #24
 8004538:	4293      	cmp	r3, r2
 800453a:	d029      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 800453c:	3218      	adds	r2, #24
 800453e:	4293      	cmp	r3, r2
 8004540:	d026      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004542:	3218      	adds	r2, #24
 8004544:	4293      	cmp	r3, r2
 8004546:	d023      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004548:	3218      	adds	r2, #24
 800454a:	4293      	cmp	r3, r2
 800454c:	d020      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 800454e:	3218      	adds	r2, #24
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004554:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004558:	4293      	cmp	r3, r2
 800455a:	d019      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 800455c:	3218      	adds	r2, #24
 800455e:	4293      	cmp	r3, r2
 8004560:	d016      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004562:	3218      	adds	r2, #24
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004568:	3218      	adds	r2, #24
 800456a:	4293      	cmp	r3, r2
 800456c:	d010      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 800456e:	3218      	adds	r2, #24
 8004570:	4293      	cmp	r3, r2
 8004572:	d00d      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004574:	3218      	adds	r2, #24
 8004576:	4293      	cmp	r3, r2
 8004578:	d00a      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 800457a:	3218      	adds	r2, #24
 800457c:	4293      	cmp	r3, r2
 800457e:	d007      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004580:	3218      	adds	r2, #24
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_Abort+0x1b8>
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e003      	b.n	8004598 <HAL_DMA_Abort+0x1c0>
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	f013 0f01 	tst.w	r3, #1
 800459e:	d00e      	beq.n	80045be <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045a0:	f7ff f908 	bl	80037b4 <HAL_GetTick>
 80045a4:	1b43      	subs	r3, r0, r5
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d9f6      	bls.n	8004598 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045aa:	2320      	movs	r3, #32
 80045ac:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80045ae:	2303      	movs	r3, #3
 80045b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 80045ba:	2001      	movs	r0, #1
 80045bc:	e71f      	b.n	80043fe <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	491c      	ldr	r1, [pc, #112]	; (8004634 <HAL_DMA_Abort+0x25c>)
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_DMA_Abort+0x260>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	bf18      	it	ne
 80045c8:	428b      	cmpne	r3, r1
 80045ca:	d039      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045cc:	3218      	adds	r2, #24
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d036      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045d2:	3218      	adds	r2, #24
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d033      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045d8:	3218      	adds	r2, #24
 80045da:	4293      	cmp	r3, r2
 80045dc:	d030      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045de:	3218      	adds	r2, #24
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02d      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045e4:	3218      	adds	r2, #24
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02a      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045ea:	3218      	adds	r2, #24
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d027      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045f0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d023      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045f8:	3218      	adds	r2, #24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d020      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 80045fe:	3218      	adds	r2, #24
 8004600:	4293      	cmp	r3, r2
 8004602:	d01d      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 8004604:	3218      	adds	r2, #24
 8004606:	4293      	cmp	r3, r2
 8004608:	d01a      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 800460a:	3218      	adds	r2, #24
 800460c:	4293      	cmp	r3, r2
 800460e:	d017      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 8004610:	3218      	adds	r2, #24
 8004612:	4293      	cmp	r3, r2
 8004614:	d014      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 8004616:	3218      	adds	r2, #24
 8004618:	4293      	cmp	r3, r2
 800461a:	d011      	beq.n	8004640 <HAL_DMA_Abort+0x268>
 800461c:	3218      	adds	r2, #24
 800461e:	4293      	cmp	r3, r2
 8004620:	d00e      	beq.n	8004640 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004622:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004624:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	2301      	movs	r3, #1
 800462c:	4093      	lsls	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
 8004630:	e00d      	b.n	800464e <HAL_DMA_Abort+0x276>
 8004632:	bf00      	nop
 8004634:	40020010 	.word	0x40020010
 8004638:	40020028 	.word	0x40020028
 800463c:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004640:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004642:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004644:	f003 021f 	and.w	r2, r3, #31
 8004648:	233f      	movs	r3, #63	; 0x3f
 800464a:	4093      	lsls	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	492e      	ldr	r1, [pc, #184]	; (800470c <HAL_DMA_Abort+0x334>)
 8004652:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <HAL_DMA_Abort+0x338>)
 8004654:	4293      	cmp	r3, r2
 8004656:	bf18      	it	ne
 8004658:	428b      	cmpne	r3, r1
 800465a:	d042      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 800465c:	3218      	adds	r2, #24
 800465e:	4293      	cmp	r3, r2
 8004660:	d03f      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004662:	3218      	adds	r2, #24
 8004664:	4293      	cmp	r3, r2
 8004666:	d03c      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004668:	3218      	adds	r2, #24
 800466a:	4293      	cmp	r3, r2
 800466c:	d039      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 800466e:	3218      	adds	r2, #24
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004674:	3218      	adds	r2, #24
 8004676:	4293      	cmp	r3, r2
 8004678:	d033      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 800467a:	3218      	adds	r2, #24
 800467c:	4293      	cmp	r3, r2
 800467e:	d030      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004680:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004688:	3218      	adds	r2, #24
 800468a:	4293      	cmp	r3, r2
 800468c:	d029      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 800468e:	3218      	adds	r2, #24
 8004690:	4293      	cmp	r3, r2
 8004692:	d026      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 8004694:	3218      	adds	r2, #24
 8004696:	4293      	cmp	r3, r2
 8004698:	d023      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 800469a:	3218      	adds	r2, #24
 800469c:	4293      	cmp	r3, r2
 800469e:	d020      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046a0:	3218      	adds	r2, #24
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046a6:	3218      	adds	r2, #24
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d01a      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046ac:	3218      	adds	r2, #24
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d017      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046b2:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_DMA_Abort+0x33c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d014      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046b8:	3214      	adds	r2, #20
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d011      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046be:	3214      	adds	r2, #20
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046c4:	3214      	adds	r2, #20
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046ca:	3214      	adds	r2, #20
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d008      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046d0:	3214      	adds	r2, #20
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d005      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046d6:	3214      	adds	r2, #20
 80046d8:	4293      	cmp	r3, r2
 80046da:	d002      	beq.n	80046e2 <HAL_DMA_Abort+0x30a>
 80046dc:	3214      	adds	r2, #20
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10b      	bne.n	80046fa <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80046e6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80046e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80046ea:	b133      	cbz	r3, 80046fa <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046f2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80046f6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80046f8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80046fa:	2301      	movs	r3, #1
 80046fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004700:	2000      	movs	r0, #0
 8004702:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004706:	e67a      	b.n	80043fe <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004708:	2001      	movs	r0, #1
 800470a:	e678      	b.n	80043fe <HAL_DMA_Abort+0x26>
 800470c:	40020010 	.word	0x40020010
 8004710:	40020028 	.word	0x40020028
 8004714:	58025408 	.word	0x58025408

08004718 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004718:	2800      	cmp	r0, #0
 800471a:	f000 8128 	beq.w	800496e <HAL_DMA_Abort_IT+0x256>
{
 800471e:	b508      	push	{r3, lr}
 8004720:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004722:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d003      	beq.n	8004734 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004730:	2001      	movs	r0, #1
}
 8004732:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004734:	6803      	ldr	r3, [r0, #0]
 8004736:	4890      	ldr	r0, [pc, #576]	; (8004978 <HAL_DMA_Abort_IT+0x260>)
 8004738:	4990      	ldr	r1, [pc, #576]	; (800497c <HAL_DMA_Abort_IT+0x264>)
 800473a:	428b      	cmp	r3, r1
 800473c:	bf18      	it	ne
 800473e:	4283      	cmpne	r3, r0
 8004740:	bf0c      	ite	eq
 8004742:	2001      	moveq	r0, #1
 8004744:	2000      	movne	r0, #0
 8004746:	d065      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004748:	3118      	adds	r1, #24
 800474a:	428b      	cmp	r3, r1
 800474c:	d062      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 800474e:	3118      	adds	r1, #24
 8004750:	428b      	cmp	r3, r1
 8004752:	d05f      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004754:	3118      	adds	r1, #24
 8004756:	428b      	cmp	r3, r1
 8004758:	d05c      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 800475a:	3118      	adds	r1, #24
 800475c:	428b      	cmp	r3, r1
 800475e:	d059      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004760:	3118      	adds	r1, #24
 8004762:	428b      	cmp	r3, r1
 8004764:	d056      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004766:	3118      	adds	r1, #24
 8004768:	428b      	cmp	r3, r1
 800476a:	d053      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 800476c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004770:	428b      	cmp	r3, r1
 8004772:	d04f      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004774:	3118      	adds	r1, #24
 8004776:	428b      	cmp	r3, r1
 8004778:	d04c      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 800477a:	3118      	adds	r1, #24
 800477c:	428b      	cmp	r3, r1
 800477e:	d049      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004780:	3118      	adds	r1, #24
 8004782:	428b      	cmp	r3, r1
 8004784:	d046      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004786:	3118      	adds	r1, #24
 8004788:	428b      	cmp	r3, r1
 800478a:	d043      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 800478c:	3118      	adds	r1, #24
 800478e:	428b      	cmp	r3, r1
 8004790:	d040      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004792:	3118      	adds	r1, #24
 8004794:	428b      	cmp	r3, r1
 8004796:	d03d      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
 8004798:	3118      	adds	r1, #24
 800479a:	428b      	cmp	r3, r1
 800479c:	d03a      	beq.n	8004814 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	f021 010e 	bic.w	r1, r1, #14
 80047a4:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	4873      	ldr	r0, [pc, #460]	; (8004978 <HAL_DMA_Abort_IT+0x260>)
 80047aa:	4974      	ldr	r1, [pc, #464]	; (800497c <HAL_DMA_Abort_IT+0x264>)
 80047ac:	428b      	cmp	r3, r1
 80047ae:	bf18      	it	ne
 80047b0:	4283      	cmpne	r3, r0
 80047b2:	d06a      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047b4:	4972      	ldr	r1, [pc, #456]	; (8004980 <HAL_DMA_Abort_IT+0x268>)
 80047b6:	428b      	cmp	r3, r1
 80047b8:	d067      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047ba:	3118      	adds	r1, #24
 80047bc:	428b      	cmp	r3, r1
 80047be:	d064      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047c0:	3118      	adds	r1, #24
 80047c2:	428b      	cmp	r3, r1
 80047c4:	d061      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047c6:	3118      	adds	r1, #24
 80047c8:	428b      	cmp	r3, r1
 80047ca:	d05e      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047cc:	3118      	adds	r1, #24
 80047ce:	428b      	cmp	r3, r1
 80047d0:	d05b      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047d2:	3118      	adds	r1, #24
 80047d4:	428b      	cmp	r3, r1
 80047d6:	d058      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047d8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80047dc:	428b      	cmp	r3, r1
 80047de:	d054      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047e0:	3118      	adds	r1, #24
 80047e2:	428b      	cmp	r3, r1
 80047e4:	d051      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047e6:	3118      	adds	r1, #24
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d04e      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047ec:	3118      	adds	r1, #24
 80047ee:	428b      	cmp	r3, r1
 80047f0:	d04b      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047f2:	3118      	adds	r1, #24
 80047f4:	428b      	cmp	r3, r1
 80047f6:	d048      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047f8:	3118      	adds	r1, #24
 80047fa:	428b      	cmp	r3, r1
 80047fc:	d045      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 80047fe:	3118      	adds	r1, #24
 8004800:	428b      	cmp	r3, r1
 8004802:	d042      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 8004804:	3118      	adds	r1, #24
 8004806:	428b      	cmp	r3, r1
 8004808:	d03f      	beq.n	800488a <HAL_DMA_Abort_IT+0x172>
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	f021 0101 	bic.w	r1, r1, #1
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	e03e      	b.n	8004892 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004814:	2104      	movs	r1, #4
 8004816:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800481a:	bb80      	cbnz	r0, 800487e <HAL_DMA_Abort_IT+0x166>
 800481c:	4a58      	ldr	r2, [pc, #352]	; (8004980 <HAL_DMA_Abort_IT+0x268>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02d      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004822:	3218      	adds	r2, #24
 8004824:	4293      	cmp	r3, r2
 8004826:	d02a      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004828:	3218      	adds	r2, #24
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 800482e:	3218      	adds	r2, #24
 8004830:	4293      	cmp	r3, r2
 8004832:	d024      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004834:	3218      	adds	r2, #24
 8004836:	4293      	cmp	r3, r2
 8004838:	d021      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 800483a:	3218      	adds	r2, #24
 800483c:	4293      	cmp	r3, r2
 800483e:	d01e      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004840:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004844:	4293      	cmp	r3, r2
 8004846:	d01a      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004848:	3218      	adds	r2, #24
 800484a:	4293      	cmp	r3, r2
 800484c:	d017      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 800484e:	3218      	adds	r2, #24
 8004850:	4293      	cmp	r3, r2
 8004852:	d014      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004854:	3218      	adds	r2, #24
 8004856:	4293      	cmp	r3, r2
 8004858:	d011      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 800485a:	3218      	adds	r2, #24
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004860:	3218      	adds	r2, #24
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004866:	3218      	adds	r2, #24
 8004868:	4293      	cmp	r3, r2
 800486a:	d008      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 800486c:	3218      	adds	r2, #24
 800486e:	4293      	cmp	r3, r2
 8004870:	d005      	beq.n	800487e <HAL_DMA_Abort_IT+0x166>
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800487a:	2000      	movs	r0, #0
 800487c:	e759      	b.n	8004732 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004886:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004888:	e753      	b.n	8004732 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	f021 0101 	bic.w	r1, r1, #1
 8004890:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	4838      	ldr	r0, [pc, #224]	; (8004978 <HAL_DMA_Abort_IT+0x260>)
 8004896:	4939      	ldr	r1, [pc, #228]	; (800497c <HAL_DMA_Abort_IT+0x264>)
 8004898:	428b      	cmp	r3, r1
 800489a:	bf18      	it	ne
 800489c:	4283      	cmpne	r3, r0
 800489e:	d042      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048a0:	3118      	adds	r1, #24
 80048a2:	428b      	cmp	r3, r1
 80048a4:	d03f      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048a6:	3118      	adds	r1, #24
 80048a8:	428b      	cmp	r3, r1
 80048aa:	d03c      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048ac:	3118      	adds	r1, #24
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d039      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048b2:	3118      	adds	r1, #24
 80048b4:	428b      	cmp	r3, r1
 80048b6:	d036      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048b8:	3118      	adds	r1, #24
 80048ba:	428b      	cmp	r3, r1
 80048bc:	d033      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048be:	3118      	adds	r1, #24
 80048c0:	428b      	cmp	r3, r1
 80048c2:	d030      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048c4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80048c8:	428b      	cmp	r3, r1
 80048ca:	d02c      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048cc:	3118      	adds	r1, #24
 80048ce:	428b      	cmp	r3, r1
 80048d0:	d029      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048d2:	3118      	adds	r1, #24
 80048d4:	428b      	cmp	r3, r1
 80048d6:	d026      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048d8:	3118      	adds	r1, #24
 80048da:	428b      	cmp	r3, r1
 80048dc:	d023      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048de:	3118      	adds	r1, #24
 80048e0:	428b      	cmp	r3, r1
 80048e2:	d020      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048e4:	3118      	adds	r1, #24
 80048e6:	428b      	cmp	r3, r1
 80048e8:	d01d      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048ea:	3118      	adds	r1, #24
 80048ec:	428b      	cmp	r3, r1
 80048ee:	d01a      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048f0:	3118      	adds	r1, #24
 80048f2:	428b      	cmp	r3, r1
 80048f4:	d017      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048f6:	4923      	ldr	r1, [pc, #140]	; (8004984 <HAL_DMA_Abort_IT+0x26c>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d014      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 80048fc:	3114      	adds	r1, #20
 80048fe:	428b      	cmp	r3, r1
 8004900:	d011      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 8004902:	3114      	adds	r1, #20
 8004904:	428b      	cmp	r3, r1
 8004906:	d00e      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 8004908:	3114      	adds	r1, #20
 800490a:	428b      	cmp	r3, r1
 800490c:	d00b      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 800490e:	3114      	adds	r1, #20
 8004910:	428b      	cmp	r3, r1
 8004912:	d008      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 8004914:	3114      	adds	r1, #20
 8004916:	428b      	cmp	r3, r1
 8004918:	d005      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 800491a:	3114      	adds	r1, #20
 800491c:	428b      	cmp	r3, r1
 800491e:	d002      	beq.n	8004926 <HAL_DMA_Abort_IT+0x20e>
 8004920:	3114      	adds	r1, #20
 8004922:	428b      	cmp	r3, r1
 8004924:	d117      	bne.n	8004956 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004926:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004928:	680b      	ldr	r3, [r1, #0]
 800492a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492e:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004930:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004932:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004934:	f003 011f 	and.w	r1, r3, #31
 8004938:	2301      	movs	r3, #1
 800493a:	408b      	lsls	r3, r1
 800493c:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800493e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004940:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8004942:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004944:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8004946:	b133      	cbz	r3, 8004956 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004948:	6819      	ldr	r1, [r3, #0]
 800494a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800494e:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004950:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004952:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8004954:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004956:	2301      	movs	r3, #1
 8004958:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800495c:	2300      	movs	r3, #0
 800495e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8004962:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004964:	b12b      	cbz	r3, 8004972 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8004966:	4610      	mov	r0, r2
 8004968:	4798      	blx	r3
  return HAL_OK;
 800496a:	2000      	movs	r0, #0
 800496c:	e6e1      	b.n	8004732 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 800496e:	2001      	movs	r0, #1
}
 8004970:	4770      	bx	lr
  return HAL_OK;
 8004972:	2000      	movs	r0, #0
 8004974:	e6dd      	b.n	8004732 <HAL_DMA_Abort_IT+0x1a>
 8004976:	bf00      	nop
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	58025408 	.word	0x58025408

08004988 <HAL_DMA_IRQHandler>:
{
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b083      	sub	sp, #12
 800498c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004992:	4b7d      	ldr	r3, [pc, #500]	; (8004b88 <HAL_DMA_IRQHandler+0x200>)
 8004994:	681d      	ldr	r5, [r3, #0]
 8004996:	4b7d      	ldr	r3, [pc, #500]	; (8004b8c <HAL_DMA_IRQHandler+0x204>)
 8004998:	fba3 3505 	umull	r3, r5, r3, r5
 800499c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800499e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 80049a0:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 80049a2:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049a6:	6803      	ldr	r3, [r0, #0]
 80049a8:	4979      	ldr	r1, [pc, #484]	; (8004b90 <HAL_DMA_IRQHandler+0x208>)
 80049aa:	487a      	ldr	r0, [pc, #488]	; (8004b94 <HAL_DMA_IRQHandler+0x20c>)
 80049ac:	4283      	cmp	r3, r0
 80049ae:	bf18      	it	ne
 80049b0:	428b      	cmpne	r3, r1
 80049b2:	bf0c      	ite	eq
 80049b4:	2001      	moveq	r0, #1
 80049b6:	2000      	movne	r0, #0
 80049b8:	d061      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049ba:	4a77      	ldr	r2, [pc, #476]	; (8004b98 <HAL_DMA_IRQHandler+0x210>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d05e      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049c0:	3218      	adds	r2, #24
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d05b      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049c6:	3218      	adds	r2, #24
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d058      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049cc:	3218      	adds	r2, #24
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d055      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049d2:	3218      	adds	r2, #24
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d052      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049d8:	3218      	adds	r2, #24
 80049da:	4293      	cmp	r3, r2
 80049dc:	d04f      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049de:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d04b      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049e6:	3218      	adds	r2, #24
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d048      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049ec:	3218      	adds	r2, #24
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d045      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049f2:	3218      	adds	r2, #24
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d042      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049f8:	3218      	adds	r2, #24
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d03f      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 80049fe:	3218      	adds	r2, #24
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d03c      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 8004a04:	3218      	adds	r2, #24
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d039      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 8004a0a:	3218      	adds	r2, #24
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d036      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a10:	4962      	ldr	r1, [pc, #392]	; (8004b9c <HAL_DMA_IRQHandler+0x214>)
 8004a12:	4a63      	ldr	r2, [pc, #396]	; (8004ba0 <HAL_DMA_IRQHandler+0x218>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bf18      	it	ne
 8004a18:	428b      	cmpne	r3, r1
 8004a1a:	d012      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a1c:	4a61      	ldr	r2, [pc, #388]	; (8004ba4 <HAL_DMA_IRQHandler+0x21c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00f      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a22:	3214      	adds	r2, #20
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a28:	3214      	adds	r2, #20
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a2e:	3214      	adds	r2, #20
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d006      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a34:	3214      	adds	r2, #20
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xba>
 8004a3a:	3214      	adds	r2, #20
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	f040 8261 	bne.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a42:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004a46:	f001 011f 	and.w	r1, r1, #31
 8004a4a:	2004      	movs	r0, #4
 8004a4c:	4088      	lsls	r0, r1
 8004a4e:	ea10 0f0c 	tst.w	r0, ip
 8004a52:	f000 82a7 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0x61c>
 8004a56:	f012 0f04 	tst.w	r2, #4
 8004a5a:	f000 82a3 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a5e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a60:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004a64:	f000 825a 	beq.w	8004f1c <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a68:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004a6c:	f040 8250 	bne.w	8004f10 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8246 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4798      	blx	r3
 8004a7c:	e242      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a80:	f002 011f 	and.w	r1, r2, #31
 8004a84:	2208      	movs	r2, #8
 8004a86:	408a      	lsls	r2, r1
 8004a88:	4232      	tst	r2, r6
 8004a8a:	d041      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a8c:	bb70      	cbnz	r0, 8004aec <HAL_DMA_IRQHandler+0x164>
 8004a8e:	4a42      	ldr	r2, [pc, #264]	; (8004b98 <HAL_DMA_IRQHandler+0x210>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d02b      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004a94:	3218      	adds	r2, #24
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d028      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004a9a:	3218      	adds	r2, #24
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d025      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004aa0:	3218      	adds	r2, #24
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004aa6:	3218      	adds	r2, #24
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d01f      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004aac:	3218      	adds	r2, #24
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01c      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ab2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004aba:	3218      	adds	r2, #24
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d015      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ac0:	3218      	adds	r2, #24
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d012      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ac6:	3218      	adds	r2, #24
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004acc:	3218      	adds	r2, #24
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00c      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ad2:	3218      	adds	r2, #24
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ad8:	3218      	adds	r2, #24
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d006      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ade:	3218      	adds	r2, #24
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <HAL_DMA_IRQHandler+0x164>
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004aea:	e002      	b.n	8004af2 <HAL_DMA_IRQHandler+0x16a>
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004af2:	b16a      	cbz	r2, 8004b10 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004afc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004afe:	f003 021f 	and.w	r2, r3, #31
 8004b02:	2308      	movs	r3, #8
 8004b04:	4093      	lsls	r3, r2
 8004b06:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b0a:	f043 0301 	orr.w	r3, r3, #1
 8004b0e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b12:	f002 021f 	and.w	r2, r2, #31
 8004b16:	fa26 f302 	lsr.w	r3, r6, r2
 8004b1a:	f013 0f01 	tst.w	r3, #1
 8004b1e:	d047      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	481b      	ldr	r0, [pc, #108]	; (8004b90 <HAL_DMA_IRQHandler+0x208>)
 8004b24:	491b      	ldr	r1, [pc, #108]	; (8004b94 <HAL_DMA_IRQHandler+0x20c>)
 8004b26:	428b      	cmp	r3, r1
 8004b28:	bf18      	it	ne
 8004b2a:	4283      	cmpne	r3, r0
 8004b2c:	d03c      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b2e:	3118      	adds	r1, #24
 8004b30:	428b      	cmp	r3, r1
 8004b32:	d039      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b34:	3118      	adds	r1, #24
 8004b36:	428b      	cmp	r3, r1
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b3a:	3118      	adds	r1, #24
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	d033      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b40:	3118      	adds	r1, #24
 8004b42:	428b      	cmp	r3, r1
 8004b44:	d030      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b46:	3118      	adds	r1, #24
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d02d      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b4c:	3118      	adds	r1, #24
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	d02a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b52:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004b56:	428b      	cmp	r3, r1
 8004b58:	d026      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b5a:	3118      	adds	r1, #24
 8004b5c:	428b      	cmp	r3, r1
 8004b5e:	d023      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b60:	3118      	adds	r1, #24
 8004b62:	428b      	cmp	r3, r1
 8004b64:	d020      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b66:	3118      	adds	r1, #24
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b6c:	3118      	adds	r1, #24
 8004b6e:	428b      	cmp	r3, r1
 8004b70:	d01a      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b72:	3118      	adds	r1, #24
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d017      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b78:	3118      	adds	r1, #24
 8004b7a:	428b      	cmp	r3, r1
 8004b7c:	d014      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b7e:	3118      	adds	r1, #24
 8004b80:	428b      	cmp	r3, r1
 8004b82:	d011      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x220>
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	e013      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x228>
 8004b88:	20000754 	.word	0x20000754
 8004b8c:	1b4e81b5 	.word	0x1b4e81b5
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	58025408 	.word	0x58025408
 8004ba0:	5802541c 	.word	0x5802541c
 8004ba4:	58025430 	.word	0x58025430
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004bae:	d13b      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	4233      	tst	r3, r6
 8004bbe:	d03f      	beq.n	8004c40 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	4896      	ldr	r0, [pc, #600]	; (8004e1c <HAL_DMA_IRQHandler+0x494>)
 8004bc4:	4996      	ldr	r1, [pc, #600]	; (8004e20 <HAL_DMA_IRQHandler+0x498>)
 8004bc6:	428a      	cmp	r2, r1
 8004bc8:	bf18      	it	ne
 8004bca:	4282      	cmpne	r2, r0
 8004bcc:	d034      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bce:	3118      	adds	r1, #24
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d031      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bd4:	3118      	adds	r1, #24
 8004bd6:	428a      	cmp	r2, r1
 8004bd8:	d02e      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bda:	3118      	adds	r1, #24
 8004bdc:	428a      	cmp	r2, r1
 8004bde:	d02b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004be0:	3118      	adds	r1, #24
 8004be2:	428a      	cmp	r2, r1
 8004be4:	d028      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004be6:	3118      	adds	r1, #24
 8004be8:	428a      	cmp	r2, r1
 8004bea:	d025      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bec:	3118      	adds	r1, #24
 8004bee:	428a      	cmp	r2, r1
 8004bf0:	d022      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bf2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004bf6:	428a      	cmp	r2, r1
 8004bf8:	d01e      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004bfa:	3118      	adds	r1, #24
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d01b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c00:	3118      	adds	r1, #24
 8004c02:	428a      	cmp	r2, r1
 8004c04:	d018      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c06:	3118      	adds	r1, #24
 8004c08:	428a      	cmp	r2, r1
 8004c0a:	d015      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c0c:	3118      	adds	r1, #24
 8004c0e:	428a      	cmp	r2, r1
 8004c10:	d012      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c12:	3118      	adds	r1, #24
 8004c14:	428a      	cmp	r2, r1
 8004c16:	d00f      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c18:	3118      	adds	r1, #24
 8004c1a:	428a      	cmp	r2, r1
 8004c1c:	d00c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c1e:	3118      	adds	r1, #24
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d009      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2b0>
 8004c24:	6813      	ldr	r3, [r2, #0]
 8004c26:	e00b      	b.n	8004c40 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4093      	lsls	r3, r2
 8004c2c:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	6563      	str	r3, [r4, #84]	; 0x54
 8004c36:	e7bb      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	f012 0f02 	tst.w	r2, #2
 8004c3e:	d13d      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004c42:	f003 031f 	and.w	r3, r3, #31
 8004c46:	2210      	movs	r2, #16
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	4233      	tst	r3, r6
 8004c4e:	d05f      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c50:	6822      	ldr	r2, [r4, #0]
 8004c52:	4872      	ldr	r0, [pc, #456]	; (8004e1c <HAL_DMA_IRQHandler+0x494>)
 8004c54:	4972      	ldr	r1, [pc, #456]	; (8004e20 <HAL_DMA_IRQHandler+0x498>)
 8004c56:	428a      	cmp	r2, r1
 8004c58:	bf18      	it	ne
 8004c5a:	4282      	cmpne	r2, r0
 8004c5c:	d034      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c5e:	3118      	adds	r1, #24
 8004c60:	428a      	cmp	r2, r1
 8004c62:	d031      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c64:	3118      	adds	r1, #24
 8004c66:	428a      	cmp	r2, r1
 8004c68:	d02e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c6a:	3118      	adds	r1, #24
 8004c6c:	428a      	cmp	r2, r1
 8004c6e:	d02b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c70:	3118      	adds	r1, #24
 8004c72:	428a      	cmp	r2, r1
 8004c74:	d028      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c76:	3118      	adds	r1, #24
 8004c78:	428a      	cmp	r2, r1
 8004c7a:	d025      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c7c:	3118      	adds	r1, #24
 8004c7e:	428a      	cmp	r2, r1
 8004c80:	d022      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c82:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004c86:	428a      	cmp	r2, r1
 8004c88:	d01e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c8a:	3118      	adds	r1, #24
 8004c8c:	428a      	cmp	r2, r1
 8004c8e:	d01b      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c90:	3118      	adds	r1, #24
 8004c92:	428a      	cmp	r2, r1
 8004c94:	d018      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c96:	3118      	adds	r1, #24
 8004c98:	428a      	cmp	r2, r1
 8004c9a:	d015      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004c9c:	3118      	adds	r1, #24
 8004c9e:	428a      	cmp	r2, r1
 8004ca0:	d012      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004ca2:	3118      	adds	r1, #24
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	d00f      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004ca8:	3118      	adds	r1, #24
 8004caa:	428a      	cmp	r2, r1
 8004cac:	d00c      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004cae:	3118      	adds	r1, #24
 8004cb0:	428a      	cmp	r2, r1
 8004cb2:	d009      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x340>
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004cba:	e008      	b.n	8004cce <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cbc:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6563      	str	r3, [r4, #84]	; 0x54
 8004cc6:	e7bb      	b.n	8004c40 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004cce:	b1fa      	cbz	r2, 8004d10 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cd0:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004cda:	d00d      	beq.n	8004cf8 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004ce2:	d104      	bne.n	8004cee <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8004ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ce6:	b19b      	cbz	r3, 8004d10 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4798      	blx	r3
 8004cec:	e010      	b.n	8004d10 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004cee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004cf0:	b173      	cbz	r3, 8004d10 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4798      	blx	r3
 8004cf6:	e00b      	b.n	8004d10 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004cfe:	d103      	bne.n	8004d08 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	f022 0208 	bic.w	r2, r2, #8
 8004d06:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d0a:	b10b      	cbz	r3, 8004d10 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2220      	movs	r2, #32
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	4233      	tst	r3, r6
 8004d1e:	f000 8093 	beq.w	8004e48 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	483d      	ldr	r0, [pc, #244]	; (8004e1c <HAL_DMA_IRQHandler+0x494>)
 8004d26:	493e      	ldr	r1, [pc, #248]	; (8004e20 <HAL_DMA_IRQHandler+0x498>)
 8004d28:	428a      	cmp	r2, r1
 8004d2a:	bf18      	it	ne
 8004d2c:	4282      	cmpne	r2, r0
 8004d2e:	d02e      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d30:	3118      	adds	r1, #24
 8004d32:	428a      	cmp	r2, r1
 8004d34:	d02b      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d36:	3118      	adds	r1, #24
 8004d38:	428a      	cmp	r2, r1
 8004d3a:	d028      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d3c:	3118      	adds	r1, #24
 8004d3e:	428a      	cmp	r2, r1
 8004d40:	d025      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d42:	3118      	adds	r1, #24
 8004d44:	428a      	cmp	r2, r1
 8004d46:	d022      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d48:	3118      	adds	r1, #24
 8004d4a:	428a      	cmp	r2, r1
 8004d4c:	d01f      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d4e:	3118      	adds	r1, #24
 8004d50:	428a      	cmp	r2, r1
 8004d52:	d01c      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d54:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004d58:	428a      	cmp	r2, r1
 8004d5a:	d018      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d5c:	3118      	adds	r1, #24
 8004d5e:	428a      	cmp	r2, r1
 8004d60:	d015      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d62:	3118      	adds	r1, #24
 8004d64:	428a      	cmp	r2, r1
 8004d66:	d012      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d68:	3118      	adds	r1, #24
 8004d6a:	428a      	cmp	r2, r1
 8004d6c:	d00f      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d6e:	3118      	adds	r1, #24
 8004d70:	428a      	cmp	r2, r1
 8004d72:	d00c      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d74:	3118      	adds	r1, #24
 8004d76:	428a      	cmp	r2, r1
 8004d78:	d009      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d7a:	3118      	adds	r1, #24
 8004d7c:	428a      	cmp	r2, r1
 8004d7e:	d006      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d80:	3118      	adds	r1, #24
 8004d82:	428a      	cmp	r2, r1
 8004d84:	d003      	beq.n	8004d8e <HAL_DMA_IRQHandler+0x406>
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8004d8c:	e002      	b.n	8004d94 <HAL_DMA_IRQHandler+0x40c>
 8004d8e:	6812      	ldr	r2, [r2, #0]
 8004d90:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004d94:	2a00      	cmp	r2, #0
 8004d96:	d057      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d98:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d9a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d00e      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004dac:	d03a      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004db4:	d12d      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 8004db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d045      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4798      	blx	r3
 8004dc0:	e042      	b.n	8004e48 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	6813      	ldr	r3, [r2, #0]
 8004dc6:	f023 0316 	bic.w	r3, r3, #22
 8004dca:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	6953      	ldr	r3, [r2, #20]
 8004dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dd8:	b1bb      	cbz	r3, 8004e0a <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	6813      	ldr	r3, [r2, #0]
 8004dde:	f023 0308 	bic.w	r3, r3, #8
 8004de2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004de4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004de6:	f003 021f 	and.w	r2, r3, #31
 8004dea:	233f      	movs	r3, #63	; 0x3f
 8004dec:	4093      	lsls	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004df6:	2300      	movs	r3, #0
 8004df8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8004dfc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8080 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8004e04:	4620      	mov	r0, r4
 8004e06:	4798      	blx	r3
          return;
 8004e08:	e07c      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e4      	bne.n	8004dda <HAL_DMA_IRQHandler+0x452>
 8004e10:	e7e8      	b.n	8004de4 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 8004e12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e14:	b1c3      	cbz	r3, 8004e48 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8004e16:	4620      	mov	r0, r4
 8004e18:	4798      	blx	r3
 8004e1a:	e015      	b.n	8004e48 <HAL_DMA_IRQHandler+0x4c0>
 8004e1c:	40020010 	.word	0x40020010
 8004e20:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004e2a:	d109      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	f022 0210 	bic.w	r2, r2, #16
 8004e32:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004e34:	2301      	movs	r3, #1
 8004e36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8004e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e42:	b10b      	cbz	r3, 8004e48 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8004e44:	4620      	mov	r0, r4
 8004e46:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d05a      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e4e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e50:	f013 0f01 	tst.w	r3, #1
 8004e54:	d052      	beq.n	8004efc <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e56:	2304      	movs	r3, #4
 8004e58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	4996      	ldr	r1, [pc, #600]	; (80050b8 <HAL_DMA_IRQHandler+0x730>)
 8004e60:	4a96      	ldr	r2, [pc, #600]	; (80050bc <HAL_DMA_IRQHandler+0x734>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bf18      	it	ne
 8004e66:	428b      	cmpne	r3, r1
 8004e68:	d02f      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e6a:	3218      	adds	r2, #24
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e70:	3218      	adds	r2, #24
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d029      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e76:	3218      	adds	r2, #24
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d026      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e7c:	3218      	adds	r2, #24
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d023      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e82:	3218      	adds	r2, #24
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d020      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e88:	3218      	adds	r2, #24
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e8e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d019      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e96:	3218      	adds	r2, #24
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d016      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004e9c:	3218      	adds	r2, #24
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004ea2:	3218      	adds	r2, #24
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d010      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004ea8:	3218      	adds	r2, #24
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00d      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004eae:	3218      	adds	r2, #24
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00a      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004eb4:	3218      	adds	r2, #24
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004eba:	3218      	adds	r2, #24
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_IRQHandler+0x542>
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e003      	b.n	8004ed2 <HAL_DMA_IRQHandler+0x54a>
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8004ed2:	9b01      	ldr	r3, [sp, #4]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	42ab      	cmp	r3, r5
 8004eda:	d804      	bhi.n	8004ee6 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f013 0f01 	tst.w	r3, #1
 8004ee4:	d1f5      	bne.n	8004ed2 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f013 0f01 	tst.w	r3, #1
 8004eee:	d00b      	beq.n	8004f08 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8004efc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004efe:	b10b      	cbz	r3, 8004f04 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8004f00:	4620      	mov	r0, r4
 8004f02:	4798      	blx	r3
}
 8004f04:	b003      	add	sp, #12
 8004f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8004f0e:	e7f2      	b.n	8004ef6 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8004f10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0f6      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8004f16:	4620      	mov	r0, r4
 8004f18:	4798      	blx	r3
 8004f1a:	e7f3      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f1c:	f012 0f20 	tst.w	r2, #32
 8004f20:	d13a      	bne.n	8004f98 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	4964      	ldr	r1, [pc, #400]	; (80050b8 <HAL_DMA_IRQHandler+0x730>)
 8004f26:	4a65      	ldr	r2, [pc, #404]	; (80050bc <HAL_DMA_IRQHandler+0x734>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bf18      	it	ne
 8004f2c:	428b      	cmpne	r3, r1
 8004f2e:	d02f      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f30:	3218      	adds	r2, #24
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02c      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f36:	3218      	adds	r2, #24
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d029      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f3c:	3218      	adds	r2, #24
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d026      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f42:	3218      	adds	r2, #24
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d023      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f48:	3218      	adds	r2, #24
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d020      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f4e:	3218      	adds	r2, #24
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d01d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f54:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d019      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f5c:	3218      	adds	r2, #24
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d016      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f62:	3218      	adds	r2, #24
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f68:	3218      	adds	r2, #24
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d010      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f6e:	3218      	adds	r2, #24
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00d      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f74:	3218      	adds	r2, #24
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00a      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f7a:	3218      	adds	r2, #24
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f80:	3218      	adds	r2, #24
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_DMA_IRQHandler+0x608>
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f022 0204 	bic.w	r2, r2, #4
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e003      	b.n	8004f98 <HAL_DMA_IRQHandler+0x610>
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	f022 0208 	bic.w	r2, r2, #8
 8004f96:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0b2      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4798      	blx	r3
 8004fa2:	e7af      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fa4:	2002      	movs	r0, #2
 8004fa6:	4088      	lsls	r0, r1
 8004fa8:	ea10 0f0c 	tst.w	r0, ip
 8004fac:	d060      	beq.n	8005070 <HAL_DMA_IRQHandler+0x6e8>
 8004fae:	f012 0f02 	tst.w	r2, #2
 8004fb2:	d05d      	beq.n	8005070 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fb4:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fb6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004fba:	d00e      	beq.n	8004fda <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fbc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004fc0:	d105      	bne.n	8004fce <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 8004fc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d09d      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4798      	blx	r3
 8004fcc:	e79a      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 8004fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d097      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4798      	blx	r3
 8004fd8:	e794      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fda:	f012 0f20 	tst.w	r2, #32
 8004fde:	d140      	bne.n	8005062 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	4935      	ldr	r1, [pc, #212]	; (80050b8 <HAL_DMA_IRQHandler+0x730>)
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_DMA_IRQHandler+0x734>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bf18      	it	ne
 8004fea:	428b      	cmpne	r3, r1
 8004fec:	d02f      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8004fee:	3218      	adds	r2, #24
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d02c      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8004ff4:	3218      	adds	r2, #24
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d029      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8004ffa:	3218      	adds	r2, #24
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d026      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005000:	3218      	adds	r2, #24
 8005002:	4293      	cmp	r3, r2
 8005004:	d023      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005006:	3218      	adds	r2, #24
 8005008:	4293      	cmp	r3, r2
 800500a:	d020      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 800500c:	3218      	adds	r2, #24
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005012:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005016:	4293      	cmp	r3, r2
 8005018:	d019      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 800501a:	3218      	adds	r2, #24
 800501c:	4293      	cmp	r3, r2
 800501e:	d016      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005020:	3218      	adds	r2, #24
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005026:	3218      	adds	r2, #24
 8005028:	4293      	cmp	r3, r2
 800502a:	d010      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 800502c:	3218      	adds	r2, #24
 800502e:	4293      	cmp	r3, r2
 8005030:	d00d      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005032:	3218      	adds	r2, #24
 8005034:	4293      	cmp	r3, r2
 8005036:	d00a      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005038:	3218      	adds	r2, #24
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 800503e:	3218      	adds	r2, #24
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_DMA_IRQHandler+0x6c6>
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	f022 020a 	bic.w	r2, r2, #10
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e003      	b.n	8005056 <HAL_DMA_IRQHandler+0x6ce>
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	f022 0214 	bic.w	r2, r2, #20
 8005054:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005056:	2301      	movs	r3, #1
 8005058:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800505c:	2300      	movs	r3, #0
 800505e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005064:	2b00      	cmp	r3, #0
 8005066:	f43f af4d 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800506a:	4620      	mov	r0, r4
 800506c:	4798      	blx	r3
 800506e:	e749      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005070:	2008      	movs	r0, #8
 8005072:	fa00 f101 	lsl.w	r1, r0, r1
 8005076:	ea11 0f0c 	tst.w	r1, ip
 800507a:	f43f af43 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
 800507e:	f012 0f08 	tst.w	r2, #8
 8005082:	f43f af3f 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	f022 020e 	bic.w	r2, r2, #14
 800508c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800508e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2201      	movs	r2, #1
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800509c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 800509e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80050a2:	2300      	movs	r3, #0
 80050a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 80050a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f43f af2a 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80050b0:	4620      	mov	r0, r4
 80050b2:	4798      	blx	r3
  }
 80050b4:	e726      	b.n	8004f04 <HAL_DMA_IRQHandler+0x57c>
 80050b6:	bf00      	nop
 80050b8:	40020010 	.word	0x40020010
 80050bc:	40020028 	.word	0x40020028

080050c0 <HAL_DMA_GetState>:
  return hdma->State;
 80050c0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80050c4:	4770      	bx	lr

080050c6 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80050c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ce:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80050d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050d2:	e06b      	b.n	80051ac <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050d4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050d6:	005e      	lsls	r6, r3, #1
 80050d8:	2403      	movs	r4, #3
 80050da:	40b4      	lsls	r4, r6
 80050dc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050e0:	68cc      	ldr	r4, [r1, #12]
 80050e2:	40b4      	lsls	r4, r6
 80050e4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80050e6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050e8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050ea:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ee:	684c      	ldr	r4, [r1, #4]
 80050f0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80050f4:	409c      	lsls	r4, r3
 80050f6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80050f8:	6044      	str	r4, [r0, #4]
 80050fa:	e069      	b.n	80051d0 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050fc:	08dd      	lsrs	r5, r3, #3
 80050fe:	3508      	adds	r5, #8
 8005100:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005104:	f003 0c07 	and.w	ip, r3, #7
 8005108:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800510c:	f04f 0e0f 	mov.w	lr, #15
 8005110:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005114:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005118:	690c      	ldr	r4, [r1, #16]
 800511a:	fa04 f40c 	lsl.w	r4, r4, ip
 800511e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005122:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005126:	e06b      	b.n	8005200 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005128:	2409      	movs	r4, #9
 800512a:	e000      	b.n	800512e <HAL_GPIO_Init+0x62>
 800512c:	2400      	movs	r4, #0
 800512e:	fa04 f40e 	lsl.w	r4, r4, lr
 8005132:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005134:	f10c 0c02 	add.w	ip, ip, #2
 8005138:	4d69      	ldr	r5, [pc, #420]	; (80052e0 <HAL_GPIO_Init+0x214>)
 800513a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800513e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005142:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005144:	43d4      	mvns	r4, r2
 8005146:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800514a:	684f      	ldr	r7, [r1, #4]
 800514c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005150:	d001      	beq.n	8005156 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8005152:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005156:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800515a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800515c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800515e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005162:	684f      	ldr	r7, [r1, #4]
 8005164:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005168:	d001      	beq.n	800516e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800516a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800516e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005172:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005174:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005178:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800517c:	684f      	ldr	r7, [r1, #4]
 800517e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005182:	d001      	beq.n	8005188 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8005184:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005188:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800518c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005190:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8005194:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005196:	684e      	ldr	r6, [r1, #4]
 8005198:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800519c:	d001      	beq.n	80051a2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800519e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80051aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ac:	680a      	ldr	r2, [r1, #0]
 80051ae:	fa32 f403 	lsrs.w	r4, r2, r3
 80051b2:	f000 8092 	beq.w	80052da <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051b6:	f04f 0c01 	mov.w	ip, #1
 80051ba:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80051be:	ea1c 0202 	ands.w	r2, ip, r2
 80051c2:	d0f2      	beq.n	80051aa <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051c4:	684c      	ldr	r4, [r1, #4]
 80051c6:	f004 0403 	and.w	r4, r4, #3
 80051ca:	3c01      	subs	r4, #1
 80051cc:	2c01      	cmp	r4, #1
 80051ce:	d981      	bls.n	80050d4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051d0:	684c      	ldr	r4, [r1, #4]
 80051d2:	f004 0403 	and.w	r4, r4, #3
 80051d6:	2c03      	cmp	r4, #3
 80051d8:	d00c      	beq.n	80051f4 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80051da:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051dc:	005d      	lsls	r5, r3, #1
 80051de:	f04f 0c03 	mov.w	ip, #3
 80051e2:	fa0c fc05 	lsl.w	ip, ip, r5
 80051e6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ea:	688c      	ldr	r4, [r1, #8]
 80051ec:	40ac      	lsls	r4, r5
 80051ee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80051f2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051f4:	684c      	ldr	r4, [r1, #4]
 80051f6:	f004 0403 	and.w	r4, r4, #3
 80051fa:	2c02      	cmp	r4, #2
 80051fc:	f43f af7e 	beq.w	80050fc <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005200:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005202:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005206:	f04f 0c03 	mov.w	ip, #3
 800520a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800520e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005212:	684c      	ldr	r4, [r1, #4]
 8005214:	f004 0403 	and.w	r4, r4, #3
 8005218:	fa04 f40e 	lsl.w	r4, r4, lr
 800521c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005220:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005222:	684c      	ldr	r4, [r1, #4]
 8005224:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005228:	d0bf      	beq.n	80051aa <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800522a:	4c2e      	ldr	r4, [pc, #184]	; (80052e4 <HAL_GPIO_Init+0x218>)
 800522c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8005230:	f045 0502 	orr.w	r5, r5, #2
 8005234:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8005238:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 800523c:	f004 0402 	and.w	r4, r4, #2
 8005240:	9401      	str	r4, [sp, #4]
 8005242:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005244:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005248:	f10c 0502 	add.w	r5, ip, #2
 800524c:	4c24      	ldr	r4, [pc, #144]	; (80052e0 <HAL_GPIO_Init+0x214>)
 800524e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005252:	f003 0e03 	and.w	lr, r3, #3
 8005256:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800525a:	240f      	movs	r4, #15
 800525c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005260:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005264:	4c20      	ldr	r4, [pc, #128]	; (80052e8 <HAL_GPIO_Init+0x21c>)
 8005266:	42a0      	cmp	r0, r4
 8005268:	f43f af60 	beq.w	800512c <HAL_GPIO_Init+0x60>
 800526c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005270:	42a0      	cmp	r0, r4
 8005272:	d022      	beq.n	80052ba <HAL_GPIO_Init+0x1ee>
 8005274:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005278:	42a0      	cmp	r0, r4
 800527a:	d020      	beq.n	80052be <HAL_GPIO_Init+0x1f2>
 800527c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005280:	42a0      	cmp	r0, r4
 8005282:	d01e      	beq.n	80052c2 <HAL_GPIO_Init+0x1f6>
 8005284:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005288:	42a0      	cmp	r0, r4
 800528a:	d01c      	beq.n	80052c6 <HAL_GPIO_Init+0x1fa>
 800528c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005290:	42a0      	cmp	r0, r4
 8005292:	d01a      	beq.n	80052ca <HAL_GPIO_Init+0x1fe>
 8005294:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005298:	42a0      	cmp	r0, r4
 800529a:	d018      	beq.n	80052ce <HAL_GPIO_Init+0x202>
 800529c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d016      	beq.n	80052d2 <HAL_GPIO_Init+0x206>
 80052a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80052a8:	42a0      	cmp	r0, r4
 80052aa:	d014      	beq.n	80052d6 <HAL_GPIO_Init+0x20a>
 80052ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	f43f af39 	beq.w	8005128 <HAL_GPIO_Init+0x5c>
 80052b6:	240a      	movs	r4, #10
 80052b8:	e739      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052ba:	2401      	movs	r4, #1
 80052bc:	e737      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052be:	2402      	movs	r4, #2
 80052c0:	e735      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052c2:	2403      	movs	r4, #3
 80052c4:	e733      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052c6:	2404      	movs	r4, #4
 80052c8:	e731      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052ca:	2405      	movs	r4, #5
 80052cc:	e72f      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052ce:	2406      	movs	r4, #6
 80052d0:	e72d      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052d2:	2407      	movs	r4, #7
 80052d4:	e72b      	b.n	800512e <HAL_GPIO_Init+0x62>
 80052d6:	2408      	movs	r4, #8
 80052d8:	e729      	b.n	800512e <HAL_GPIO_Init+0x62>
  }
}
 80052da:	b003      	add	sp, #12
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052de:	bf00      	nop
 80052e0:	58000400 	.word	0x58000400
 80052e4:	58024400 	.word	0x58024400
 80052e8:	58020000 	.word	0x58020000

080052ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052ec:	6903      	ldr	r3, [r0, #16]
 80052ee:	4219      	tst	r1, r3
 80052f0:	d001      	beq.n	80052f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80052f2:	2001      	movs	r0, #1
 80052f4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052f6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80052f8:	4770      	bx	lr

080052fa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052fa:	b10a      	cbz	r2, 8005300 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fc:	6181      	str	r1, [r0, #24]
 80052fe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005300:	0409      	lsls	r1, r1, #16
 8005302:	6181      	str	r1, [r0, #24]
  }
}
 8005304:	4770      	bx	lr

08005306 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005306:	6803      	ldr	r3, [r0, #0]
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	f012 0f02 	tst.w	r2, #2
 800530e:	d001      	beq.n	8005314 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005310:	2200      	movs	r2, #0
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005314:	6803      	ldr	r3, [r0, #0]
 8005316:	699a      	ldr	r2, [r3, #24]
 8005318:	f012 0f01 	tst.w	r2, #1
 800531c:	d103      	bne.n	8005326 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	619a      	str	r2, [r3, #24]
  }
}
 8005326:	4770      	bx	lr

08005328 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005328:	b410      	push	{r4}
 800532a:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800532c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005334:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005336:	4321      	orrs	r1, r4
 8005338:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800533c:	6802      	ldr	r2, [r0, #0]
 800533e:	6853      	ldr	r3, [r2, #4]
 8005340:	0d64      	lsrs	r4, r4, #21
 8005342:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005346:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800534a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800534e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005352:	f044 0403 	orr.w	r4, r4, #3
 8005356:	ea23 0304 	bic.w	r3, r3, r4
 800535a:	430b      	orrs	r3, r1
 800535c:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800535e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005362:	4770      	bx	lr

08005364 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005364:	f011 0f01 	tst.w	r1, #1
 8005368:	d009      	beq.n	800537e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800536a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800536e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005372:	2b28      	cmp	r3, #40	; 0x28
 8005374:	d001      	beq.n	800537a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005376:	23f2      	movs	r3, #242	; 0xf2
 8005378:	e002      	b.n	8005380 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800537a:	2342      	movs	r3, #66	; 0x42
 800537c:	e000      	b.n	8005380 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800537e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005380:	f011 0f02 	tst.w	r1, #2
 8005384:	d009      	beq.n	800539a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005386:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800538a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800538e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005392:	2a28      	cmp	r2, #40	; 0x28
 8005394:	d010      	beq.n	80053b8 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005396:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800539a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800539e:	d10d      	bne.n	80053bc <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053a0:	2910      	cmp	r1, #16
 80053a2:	d00e      	beq.n	80053c2 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053a4:	2920      	cmp	r1, #32
 80053a6:	d00f      	beq.n	80053c8 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053a8:	2940      	cmp	r1, #64	; 0x40
 80053aa:	d010      	beq.n	80053ce <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053ac:	6801      	ldr	r1, [r0, #0]
 80053ae:	680a      	ldr	r2, [r1, #0]
 80053b0:	ea22 0303 	bic.w	r3, r2, r3
 80053b4:	600b      	str	r3, [r1, #0]
}
 80053b6:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80053b8:	4663      	mov	r3, ip
 80053ba:	e7ee      	b.n	800539a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053bc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80053c0:	e7ee      	b.n	80053a0 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80053c6:	e7ed      	b.n	80053a4 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 80053c8:	f043 0320 	orr.w	r3, r3, #32
 80053cc:	e7ec      	b.n	80053a8 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 80053ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d2:	e7eb      	b.n	80053ac <I2C_Disable_IRQ+0x48>

080053d4 <I2C_IsErrorOccurred>:
{
 80053d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80053da:	6803      	ldr	r3, [r0, #0]
 80053dc:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053de:	f016 0610 	ands.w	r6, r6, #16
 80053e2:	d07e      	beq.n	80054e2 <I2C_IsErrorOccurred+0x10e>
 80053e4:	460d      	mov	r5, r1
 80053e6:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e8:	2210      	movs	r2, #16
 80053ea:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80053ec:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	6998      	ldr	r0, [r3, #24]
 80053f4:	f010 0f20 	tst.w	r0, #32
 80053f8:	d132      	bne.n	8005460 <I2C_IsErrorOccurred+0x8c>
 80053fa:	bb8f      	cbnz	r7, 8005460 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 80053fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005400:	d0f6      	beq.n	80053f0 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fe f9d7 	bl	80037b4 <HAL_GetTick>
 8005406:	eba0 0008 	sub.w	r0, r0, r8
 800540a:	42a8      	cmp	r0, r5
 800540c:	d801      	bhi.n	8005412 <I2C_IsErrorOccurred+0x3e>
 800540e:	2d00      	cmp	r5, #0
 8005410:	d1ee      	bne.n	80053f0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005412:	6821      	ldr	r1, [r4, #0]
 8005414:	684a      	ldr	r2, [r1, #4]
 8005416:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800541a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800541e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005420:	6988      	ldr	r0, [r1, #24]
 8005422:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005426:	d004      	beq.n	8005432 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005428:	3b20      	subs	r3, #32
 800542a:	bf18      	it	ne
 800542c:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800542e:	b902      	cbnz	r2, 8005432 <I2C_IsErrorOccurred+0x5e>
 8005430:	b973      	cbnz	r3, 8005450 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f013 0f20 	tst.w	r3, #32
 800543a:	d1d9      	bne.n	80053f0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800543c:	f7fe f9ba 	bl	80037b4 <HAL_GetTick>
 8005440:	eba0 0008 	sub.w	r0, r0, r8
 8005444:	2819      	cmp	r0, #25
 8005446:	d9f4      	bls.n	8005432 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800544c:	2701      	movs	r7, #1
              break;
 800544e:	e7cf      	b.n	80053f0 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005450:	684b      	ldr	r3, [r1, #4]
 8005452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005456:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005458:	f7fe f9ac 	bl	80037b4 <HAL_GetTick>
 800545c:	4680      	mov	r8, r0
 800545e:	e7e8      	b.n	8005432 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005460:	b90f      	cbnz	r7, 8005466 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005462:	2220      	movs	r2, #32
 8005464:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005466:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800546a:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005470:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005474:	d005      	beq.n	8005482 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8005476:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800547a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800547e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005480:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005482:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005486:	d006      	beq.n	8005496 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8005488:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005492:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005494:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005496:	f413 7f00 	tst.w	r3, #512	; 0x200
 800549a:	d024      	beq.n	80054e6 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 800549c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80054a8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff ff2b 	bl	8005306 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80054b0:	6822      	ldr	r2, [r4, #0]
 80054b2:	6853      	ldr	r3, [r2, #4]
 80054b4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80054b8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80054bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80054c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80054c8:	4333      	orrs	r3, r6
 80054ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	2320      	movs	r3, #32
 80054ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80054d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054dc:	4628      	mov	r0, r5
 80054de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2500      	movs	r5, #0
 80054e4:	e7c2      	b.n	800546c <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	d0f8      	beq.n	80054dc <I2C_IsErrorOccurred+0x108>
 80054ea:	e7de      	b.n	80054aa <I2C_IsErrorOccurred+0xd6>

080054ec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	460d      	mov	r5, r1
 80054f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	f013 0f02 	tst.w	r3, #2
 80054fc:	d122      	bne.n	8005544 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	4632      	mov	r2, r6
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f7ff ff66 	bl	80053d4 <I2C_IsErrorOccurred>
 8005508:	b9f0      	cbnz	r0, 8005548 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800550a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800550e:	d0f1      	beq.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005510:	f7fe f950 	bl	80037b4 <HAL_GetTick>
 8005514:	1b80      	subs	r0, r0, r6
 8005516:	42a8      	cmp	r0, r5
 8005518:	d801      	bhi.n	800551e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800551a:	2d00      	cmp	r5, #0
 800551c:	d1ea      	bne.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f013 0f02 	tst.w	r3, #2
 8005526:	d1e5      	bne.n	80054f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800552a:	f043 0320 	orr.w	r3, r3, #32
 800552e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005530:	2320      	movs	r3, #32
 8005532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005536:	2300      	movs	r3, #0
 8005538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800553c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8005540:	2001      	movs	r0, #1
 8005542:	e000      	b.n	8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8005544:	2000      	movs	r0, #0
}
 8005546:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005548:	2001      	movs	r0, #1
 800554a:	e7fc      	b.n	8005546 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800554c <I2C_WaitOnFlagUntilTimeout>:
{
 800554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	4605      	mov	r5, r0
 8005552:	460f      	mov	r7, r1
 8005554:	4616      	mov	r6, r2
 8005556:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005558:	682c      	ldr	r4, [r5, #0]
 800555a:	69a4      	ldr	r4, [r4, #24]
 800555c:	ea37 0404 	bics.w	r4, r7, r4
 8005560:	bf0c      	ite	eq
 8005562:	2401      	moveq	r4, #1
 8005564:	2400      	movne	r4, #0
 8005566:	42b4      	cmp	r4, r6
 8005568:	d122      	bne.n	80055b0 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800556a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800556e:	d0f3      	beq.n	8005558 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005570:	f7fe f920 	bl	80037b4 <HAL_GetTick>
 8005574:	9b06      	ldr	r3, [sp, #24]
 8005576:	1ac0      	subs	r0, r0, r3
 8005578:	4540      	cmp	r0, r8
 800557a:	d802      	bhi.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x36>
 800557c:	f1b8 0f00 	cmp.w	r8, #0
 8005580:	d1ea      	bne.n	8005558 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	ea37 0303 	bics.w	r3, r7, r3
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	42b3      	cmp	r3, r6
 8005592:	d1e1      	bne.n	8005558 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005594:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005596:	f043 0320 	orr.w	r3, r3, #32
 800559a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800559c:	2320      	movs	r3, #32
 800559e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80055a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80055ac:	2001      	movs	r0, #1
 80055ae:	e000      	b.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 80055b0:	2000      	movs	r0, #0
}
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80055b6:	b570      	push	{r4, r5, r6, lr}
 80055b8:	4604      	mov	r4, r0
 80055ba:	460d      	mov	r5, r1
 80055bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055be:	e004      	b.n	80055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f013 0f20 	tst.w	r3, #32
 80055c8:	d012      	beq.n	80055f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f013 0f20 	tst.w	r3, #32
 80055d2:	d11b      	bne.n	800560c <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d4:	4632      	mov	r2, r6
 80055d6:	4629      	mov	r1, r5
 80055d8:	4620      	mov	r0, r4
 80055da:	f7ff fefb 	bl	80053d4 <I2C_IsErrorOccurred>
 80055de:	b9b8      	cbnz	r0, 8005610 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e0:	f7fe f8e8 	bl	80037b4 <HAL_GetTick>
 80055e4:	1b80      	subs	r0, r0, r6
 80055e6:	42a8      	cmp	r0, r5
 80055e8:	d8ea      	bhi.n	80055c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	d1ed      	bne.n	80055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 80055ee:	e7e7      	b.n	80055c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055f2:	f043 0320 	orr.w	r3, r3, #32
 80055f6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	2320      	movs	r3, #32
 80055fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	2300      	movs	r3, #0
 8005600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005604:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005608:	2001      	movs	r0, #1
 800560a:	e000      	b.n	800560e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800560c:	2000      	movs	r0, #0
}
 800560e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005610:	2001      	movs	r0, #1
 8005612:	e7fc      	b.n	800560e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08005614 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005614:	2800      	cmp	r0, #0
 8005616:	d057      	beq.n	80056c8 <HAL_I2C_Init+0xb4>
{
 8005618:	b510      	push	{r4, lr}
 800561a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800561c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005620:	2b00      	cmp	r3, #0
 8005622:	d041      	beq.n	80056a8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005624:	2324      	movs	r3, #36	; 0x24
 8005626:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	6813      	ldr	r3, [r2, #0]
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800563c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	6893      	ldr	r3, [r2, #8]
 8005642:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005646:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005648:	68e3      	ldr	r3, [r4, #12]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d031      	beq.n	80056b2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800564e:	68a3      	ldr	r3, [r4, #8]
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005656:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005658:	68e3      	ldr	r3, [r4, #12]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d02f      	beq.n	80056be <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	6851      	ldr	r1, [r2, #4]
 8005662:	4b1a      	ldr	r3, [pc, #104]	; (80056cc <HAL_I2C_Init+0xb8>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005668:	6822      	ldr	r2, [r4, #0]
 800566a:	68d3      	ldr	r3, [r2, #12]
 800566c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005670:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6962      	ldr	r2, [r4, #20]
 8005676:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005678:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005680:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005682:	69e3      	ldr	r3, [r4, #28]
 8005684:	6a21      	ldr	r1, [r4, #32]
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	430b      	orrs	r3, r1
 800568a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005696:	2000      	movs	r0, #0
 8005698:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800569a:	2320      	movs	r3, #32
 800569c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80056a6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80056a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80056ac:	f7fb fcd4 	bl	8001058 <HAL_I2C_MspInit>
 80056b0:	e7b8      	b.n	8005624 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056b2:	68a3      	ldr	r3, [r4, #8]
 80056b4:	6822      	ldr	r2, [r4, #0]
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	6093      	str	r3, [r2, #8]
 80056bc:	e7cc      	b.n	8005658 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e7ca      	b.n	800565e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80056c8:	2001      	movs	r0, #1
}
 80056ca:	4770      	bx	lr
 80056cc:	02008000 	.word	0x02008000

080056d0 <HAL_I2C_Master_Transmit>:
{
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	460f      	mov	r7, r1
 80056d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80056da:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80056de:	b2c9      	uxtb	r1, r1
 80056e0:	2920      	cmp	r1, #32
 80056e2:	f040 80a3 	bne.w	800582c <HAL_I2C_Master_Transmit+0x15c>
 80056e6:	4604      	mov	r4, r0
 80056e8:	4690      	mov	r8, r2
 80056ea:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80056ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f000 809f 	beq.w	8005834 <HAL_I2C_Master_Transmit+0x164>
 80056f6:	f04f 0a01 	mov.w	sl, #1
 80056fa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80056fe:	f7fe f859 	bl	80037b4 <HAL_GetTick>
 8005702:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005704:	9000      	str	r0, [sp, #0]
 8005706:	2319      	movs	r3, #25
 8005708:	4652      	mov	r2, sl
 800570a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800570e:	4620      	mov	r0, r4
 8005710:	f7ff ff1c 	bl	800554c <I2C_WaitOnFlagUntilTimeout>
 8005714:	2800      	cmp	r0, #0
 8005716:	f040 808f 	bne.w	8005838 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800571a:	2321      	movs	r3, #33	; 0x21
 800571c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005720:	2310      	movs	r3, #16
 8005722:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005726:	2300      	movs	r3, #0
 8005728:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800572a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800572e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005732:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005734:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	2bff      	cmp	r3, #255	; 0xff
 800573a:	d90a      	bls.n	8005752 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800573c:	22ff      	movs	r2, #255	; 0xff
 800573e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005740:	4b41      	ldr	r3, [pc, #260]	; (8005848 <HAL_I2C_Master_Transmit+0x178>)
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005748:	4639      	mov	r1, r7
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff fdec 	bl	8005328 <I2C_TransferConfig>
 8005750:	e018      	b.n	8005784 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005752:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005754:	b292      	uxth	r2, r2
 8005756:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005758:	4b3b      	ldr	r3, [pc, #236]	; (8005848 <HAL_I2C_Master_Transmit+0x178>)
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	4639      	mov	r1, r7
 8005764:	4620      	mov	r0, r4
 8005766:	f7ff fddf 	bl	8005328 <I2C_TransferConfig>
 800576a:	e00b      	b.n	8005784 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800576c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800576e:	b292      	uxth	r2, r2
 8005770:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005772:	2300      	movs	r3, #0
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	4639      	mov	r1, r7
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff fdd2 	bl	8005328 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d033      	beq.n	80057f4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578c:	462a      	mov	r2, r5
 800578e:	4631      	mov	r1, r6
 8005790:	4620      	mov	r0, r4
 8005792:	f7ff feab 	bl	80054ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005796:	2800      	cmp	r0, #0
 8005798:	d150      	bne.n	800583c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800579a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80057a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a4:	3301      	adds	r3, #1
 80057a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80057a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80057b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80057bc:	b292      	uxth	r2, r2
 80057be:	2a00      	cmp	r2, #0
 80057c0:	d0e0      	beq.n	8005784 <HAL_I2C_Master_Transmit+0xb4>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1de      	bne.n	8005784 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057c6:	9500      	str	r5, [sp, #0]
 80057c8:	4633      	mov	r3, r6
 80057ca:	2200      	movs	r2, #0
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	4620      	mov	r0, r4
 80057d0:	f7ff febc 	bl	800554c <I2C_WaitOnFlagUntilTimeout>
 80057d4:	bba0      	cbnz	r0, 8005840 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2bff      	cmp	r3, #255	; 0xff
 80057dc:	d9c6      	bls.n	800576c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057de:	22ff      	movs	r2, #255	; 0xff
 80057e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057e2:	2300      	movs	r3, #0
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057ea:	4639      	mov	r1, r7
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7ff fd9b 	bl	8005328 <I2C_TransferConfig>
 80057f2:	e7c7      	b.n	8005784 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f4:	462a      	mov	r2, r5
 80057f6:	4631      	mov	r1, r6
 80057f8:	4620      	mov	r0, r4
 80057fa:	f7ff fedc 	bl	80055b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80057fe:	bb08      	cbnz	r0, 8005844 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	2220      	movs	r2, #32
 8005804:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	684b      	ldr	r3, [r1, #4]
 800580a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800580e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005812:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800581c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005820:	2300      	movs	r3, #0
 8005822:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005826:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 800582a:	e000      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 800582c:	2002      	movs	r0, #2
}
 800582e:	b002      	add	sp, #8
 8005830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005834:	2002      	movs	r0, #2
 8005836:	e7fa      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005838:	2001      	movs	r0, #1
 800583a:	e7f8      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 800583c:	2001      	movs	r0, #1
 800583e:	e7f6      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005840:	2001      	movs	r0, #1
 8005842:	e7f4      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005844:	2001      	movs	r0, #1
 8005846:	e7f2      	b.n	800582e <HAL_I2C_Master_Transmit+0x15e>
 8005848:	80002000 	.word	0x80002000

0800584c <HAL_I2C_EV_IRQHandler>:
{
 800584c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005852:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005854:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005856:	b103      	cbz	r3, 800585a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005858:	4798      	blx	r3
}
 800585a:	bd08      	pop	{r3, pc}

0800585c <HAL_I2C_SlaveTxCpltCallback>:
}
 800585c:	4770      	bx	lr

0800585e <I2C_ITSlaveSeqCplt>:
{
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005862:	6803      	ldr	r3, [r0, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005866:	2100      	movs	r1, #0
 8005868:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800586c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005870:	d00e      	beq.n	8005890 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005878:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800587a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b29      	cmp	r3, #41	; 0x29
 8005882:	d00d      	beq.n	80058a0 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005884:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b2a      	cmp	r3, #42	; 0x2a
 800588c:	d018      	beq.n	80058c0 <I2C_ITSlaveSeqCplt+0x62>
}
 800588e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005890:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005894:	d0f1      	beq.n	800587a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e7ec      	b.n	800587a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058a0:	2328      	movs	r3, #40	; 0x28
 80058a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058a6:	2321      	movs	r3, #33	; 0x21
 80058a8:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80058aa:	2101      	movs	r1, #1
 80058ac:	4620      	mov	r0, r4
 80058ae:	f7ff fd59 	bl	8005364 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058b2:	2300      	movs	r3, #0
 80058b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7ff ffcf 	bl	800585c <HAL_I2C_SlaveTxCpltCallback>
 80058be:	e7e6      	b.n	800588e <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058c0:	2328      	movs	r3, #40	; 0x28
 80058c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058c6:	2322      	movs	r3, #34	; 0x22
 80058c8:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058ca:	2102      	movs	r1, #2
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff fd49 	bl	8005364 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058d2:	2300      	movs	r3, #0
 80058d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058d8:	4620      	mov	r0, r4
 80058da:	f012 fd55 	bl	8018388 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 80058de:	e7d6      	b.n	800588e <I2C_ITSlaveSeqCplt+0x30>

080058e0 <HAL_I2C_AddrCallback>:
}
 80058e0:	4770      	bx	lr

080058e2 <I2C_ITAddrCplt>:
{
 80058e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e4:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058ee:	2b28      	cmp	r3, #40	; 0x28
 80058f0:	d006      	beq.n	8005900 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f2:	6803      	ldr	r3, [r0, #0]
 80058f4:	2208      	movs	r2, #8
 80058f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 80058fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	699e      	ldr	r6, [r3, #24]
 8005904:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	0c12      	lsrs	r2, r2, #16
 800590c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005916:	68df      	ldr	r7, [r3, #12]
 8005918:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800591c:	68c1      	ldr	r1, [r0, #12]
 800591e:	2902      	cmp	r1, #2
 8005920:	d122      	bne.n	8005968 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005922:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8005926:	f015 0f06 	tst.w	r5, #6
 800592a:	d110      	bne.n	800594e <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 800592c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800592e:	3101      	adds	r1, #1
 8005930:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005932:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005934:	2902      	cmp	r1, #2
 8005936:	d1e2      	bne.n	80058fe <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8005938:	2100      	movs	r1, #0
 800593a:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800593c:	2008      	movs	r0, #8
 800593e:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005940:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005944:	4631      	mov	r1, r6
 8005946:	4620      	mov	r0, r4
 8005948:	f7ff ffca 	bl	80058e0 <HAL_I2C_AddrCallback>
 800594c:	e7d7      	b.n	80058fe <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800594e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005952:	f7ff fd07 	bl	8005364 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800595c:	463a      	mov	r2, r7
 800595e:	4631      	mov	r1, r6
 8005960:	4620      	mov	r0, r4
 8005962:	f7ff ffbd 	bl	80058e0 <HAL_I2C_AddrCallback>
 8005966:	e7ca      	b.n	80058fe <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800596c:	f7ff fcfa 	bl	8005364 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005976:	462a      	mov	r2, r5
 8005978:	4631      	mov	r1, r6
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff ffb0 	bl	80058e0 <HAL_I2C_AddrCallback>
 8005980:	e7bd      	b.n	80058fe <I2C_ITAddrCplt+0x1c>

08005982 <HAL_I2C_ListenCpltCallback>:
}
 8005982:	4770      	bx	lr

08005984 <I2C_ITListenCplt>:
{
 8005984:	b510      	push	{r4, lr}
 8005986:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005988:	4b17      	ldr	r3, [pc, #92]	; (80059e8 <I2C_ITListenCplt+0x64>)
 800598a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	2300      	movs	r3, #0
 800598e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005990:	2220      	movs	r2, #32
 8005992:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005996:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 800599a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800599c:	f011 0f04 	tst.w	r1, #4
 80059a0:	d013      	beq.n	80059ca <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059a2:	6803      	ldr	r3, [r0, #0]
 80059a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059ac:	3301      	adds	r3, #1
 80059ae:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80059b0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80059b2:	b153      	cbz	r3, 80059ca <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 80059b4:	3b01      	subs	r3, #1
 80059b6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80059b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80059c4:	f043 0304 	orr.w	r3, r3, #4
 80059c8:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80059ca:	f248 0103 	movw	r1, #32771	; 0x8003
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7ff fcc8 	bl	8005364 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80059da:	2300      	movs	r3, #0
 80059dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ffce 	bl	8005982 <HAL_I2C_ListenCpltCallback>
}
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	ffff0000 	.word	0xffff0000

080059ec <HAL_I2C_AbortCpltCallback>:
}
 80059ec:	4770      	bx	lr

080059ee <I2C_TreatErrorCallback>:
{
 80059ee:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059f0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b60      	cmp	r3, #96	; 0x60
 80059f8:	d006      	beq.n	8005a08 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80059fe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a02:	f012 fc9d 	bl	8018340 <__HAL_I2C_ErrorCallback_veneer>
}
 8005a06:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005a08:	2320      	movs	r3, #32
 8005a0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a16:	f7ff ffe9 	bl	80059ec <HAL_I2C_AbortCpltCallback>
 8005a1a:	e7f4      	b.n	8005a06 <I2C_TreatErrorCallback+0x18>

08005a1c <I2C_ITError>:
{
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a24:	2200      	movs	r2, #0
 8005a26:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a2a:	4845      	ldr	r0, [pc, #276]	; (8005b40 <I2C_ITError+0x124>)
 8005a2c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a2e:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005a30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005a32:	430a      	orrs	r2, r1
 8005a34:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a36:	3b28      	subs	r3, #40	; 0x28
 8005a38:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d82d      	bhi.n	8005a9a <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a3e:	2103      	movs	r1, #3
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff fc8f 	bl	8005364 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005a46:	2328      	movs	r3, #40	; 0x28
 8005a48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005a4c:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <I2C_ITError+0x128>)
 8005a4e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8005a50:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005a52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a54:	2a00      	cmp	r2, #0
 8005a56:	d049      	beq.n	8005aec <I2C_ITError+0xd0>
 8005a58:	2b21      	cmp	r3, #33	; 0x21
 8005a5a:	bf18      	it	ne
 8005a5c:	2b11      	cmpne	r3, #17
 8005a5e:	d145      	bne.n	8005aec <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005a68:	d003      	beq.n	8005a72 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a70:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005a74:	f7ff fb24 	bl	80050c0 <HAL_DMA_GetState>
 8005a78:	2801      	cmp	r0, #1
 8005a7a:	d033      	beq.n	8005ae4 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a7e:	4a32      	ldr	r2, [pc, #200]	; (8005b48 <I2C_ITError+0x12c>)
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8005a82:	2300      	movs	r3, #0
 8005a84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005a8a:	f7fe fe45 	bl	8004718 <HAL_DMA_Abort_IT>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d055      	beq.n	8005b3e <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005a94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005a96:	4798      	blx	r3
 8005a98:	e051      	b.n	8005b3e <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a9a:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fc60 	bl	8005364 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7ff fc2e 	bl	8005306 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005aaa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b60      	cmp	r3, #96	; 0x60
 8005ab2:	d014      	beq.n	8005ade <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	699a      	ldr	r2, [r3, #24]
 8005abe:	f012 0f20 	tst.w	r2, #32
 8005ac2:	d00c      	beq.n	8005ade <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	f012 0f10 	tst.w	r2, #16
 8005aca:	d005      	beq.n	8005ad8 <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005acc:	2210      	movs	r2, #16
 8005ace:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ad0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ad2:	f043 0304 	orr.w	r3, r3, #4
 8005ad6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	2220      	movs	r2, #32
 8005adc:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ae2:	e7b5      	b.n	8005a50 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff ff82 	bl	80059ee <I2C_TreatErrorCallback>
 8005aea:	e028      	b.n	8005b3e <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005aec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005aee:	b31a      	cbz	r2, 8005b38 <I2C_ITError+0x11c>
 8005af0:	2b22      	cmp	r3, #34	; 0x22
 8005af2:	bf18      	it	ne
 8005af4:	2b12      	cmpne	r3, #18
 8005af6:	d11f      	bne.n	8005b38 <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005b00:	d003      	beq.n	8005b0a <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b08:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b0c:	f7ff fad8 	bl	80050c0 <HAL_DMA_GetState>
 8005b10:	2801      	cmp	r0, #1
 8005b12:	d00d      	beq.n	8005b30 <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <I2C_ITError+0x12c>)
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b22:	f7fe fdf9 	bl	8004718 <HAL_DMA_Abort_IT>
 8005b26:	b150      	cbz	r0, 8005b3e <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b28:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005b2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005b2c:	4798      	blx	r3
 8005b2e:	e006      	b.n	8005b3e <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7ff ff5c 	bl	80059ee <I2C_TreatErrorCallback>
 8005b36:	e002      	b.n	8005b3e <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f7ff ff58 	bl	80059ee <I2C_TreatErrorCallback>
}
 8005b3e:	bd10      	pop	{r4, pc}
 8005b40:	ffff0000 	.word	0xffff0000
 8005b44:	08005d91 	.word	0x08005d91
 8005b48:	08005f4b 	.word	0x08005f4b

08005b4c <I2C_ITSlaveCplt>:
{
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b52:	6802      	ldr	r2, [r0, #0]
 8005b54:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005b5a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b60:	2b29      	cmp	r3, #41	; 0x29
 8005b62:	bf18      	it	ne
 8005b64:	2b21      	cmpne	r3, #33	; 0x21
 8005b66:	d057      	beq.n	8005c18 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b68:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6a:	bf18      	it	ne
 8005b6c:	2b22      	cmpne	r3, #34	; 0x22
 8005b6e:	d05a      	beq.n	8005c26 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	6853      	ldr	r3, [r2, #4]
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b78:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	6853      	ldr	r3, [r2, #4]
 8005b7e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005b82:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005b86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005b90:	4620      	mov	r0, r4
 8005b92:	f7ff fbb8 	bl	8005306 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b96:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005b9a:	f000 8085 	beq.w	8005ca8 <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b9e:	6822      	ldr	r2, [r4, #0]
 8005ba0:	6813      	ldr	r3, [r2, #0]
 8005ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8005ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d045      	beq.n	8005c3a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4974      	ldr	r1, [pc, #464]	; (8005d84 <I2C_ITSlaveCplt+0x238>)
 8005bb2:	4a75      	ldr	r2, [pc, #468]	; (8005d88 <I2C_ITSlaveCplt+0x23c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	bf18      	it	ne
 8005bb8:	428b      	cmpne	r3, r1
 8005bba:	d03b      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bbc:	3218      	adds	r2, #24
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d038      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bc2:	3218      	adds	r2, #24
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d035      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bc8:	3218      	adds	r2, #24
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d032      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bce:	3218      	adds	r2, #24
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d02f      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bd4:	3218      	adds	r2, #24
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d02c      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bda:	3218      	adds	r2, #24
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d029      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005be0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d025      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005be8:	3218      	adds	r2, #24
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d022      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bee:	3218      	adds	r2, #24
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d01f      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bf4:	3218      	adds	r2, #24
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01c      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005bfa:	3218      	adds	r2, #24
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d019      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005c00:	3218      	adds	r2, #24
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d016      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005c06:	3218      	adds	r2, #24
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005c0c:	3218      	adds	r2, #24
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d010      	beq.n	8005c34 <I2C_ITSlaveCplt+0xe8>
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	e00f      	b.n	8005c38 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c18:	f248 0101 	movw	r1, #32769	; 0x8001
 8005c1c:	f7ff fba2 	bl	8005364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c20:	2321      	movs	r3, #33	; 0x21
 8005c22:	6323      	str	r3, [r4, #48]	; 0x30
 8005c24:	e7a4      	b.n	8005b70 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c26:	f248 0102 	movw	r1, #32770	; 0x8002
 8005c2a:	f7ff fb9b 	bl	8005364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c2e:	2322      	movs	r3, #34	; 0x22
 8005c30:	6323      	str	r3, [r4, #48]	; 0x30
 8005c32:	e79d      	b.n	8005b70 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c3a:	f015 0f04 	tst.w	r5, #4
 8005c3e:	d011      	beq.n	8005c64 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c40:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4e:	3301      	adds	r3, #1
 8005c50:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005c52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005c54:	b133      	cbz	r3, 8005c64 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
 8005c56:	3b01      	subs	r3, #1
 8005c58:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005c5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8005c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	b11b      	cbz	r3, 8005c72 <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005c78:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d157      	bne.n	8005d30 <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c86:	d161      	bne.n	8005d4c <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b22      	cmp	r3, #34	; 0x22
 8005c90:	d06c      	beq.n	8005d6c <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	2320      	movs	r3, #32
 8005c94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7ff fddb 	bl	800585c <HAL_I2C_SlaveTxCpltCallback>
}
 8005ca6:	e060      	b.n	8005d6a <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ca8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005cac:	d0c5      	beq.n	8005c3a <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005cae:	6822      	ldr	r2, [r4, #0]
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cb6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8005cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0bd      	beq.n	8005c3a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4930      	ldr	r1, [pc, #192]	; (8005d84 <I2C_ITSlaveCplt+0x238>)
 8005cc2:	4a31      	ldr	r2, [pc, #196]	; (8005d88 <I2C_ITSlaveCplt+0x23c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	bf18      	it	ne
 8005cc8:	428b      	cmpne	r3, r1
 8005cca:	d02d      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005ccc:	3218      	adds	r2, #24
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02a      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cd2:	3218      	adds	r2, #24
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d027      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cd8:	3218      	adds	r2, #24
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d024      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cde:	3218      	adds	r2, #24
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d021      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005ce4:	3218      	adds	r2, #24
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01e      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cea:	3218      	adds	r2, #24
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01b      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cf0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d017      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cf8:	3218      	adds	r2, #24
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d014      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005cfe:	3218      	adds	r2, #24
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d011      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d04:	3218      	adds	r2, #24
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00e      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d0a:	3218      	adds	r2, #24
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d10:	3218      	adds	r2, #24
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d008      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d16:	3218      	adds	r2, #24
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d005      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d1c:	3218      	adds	r2, #24
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d002      	beq.n	8005d28 <I2C_ITSlaveCplt+0x1dc>
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	e001      	b.n	8005d2c <I2C_ITSlaveCplt+0x1e0>
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005d2e:	e784      	b.n	8005c3a <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d30:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005d32:	4620      	mov	r0, r4
 8005d34:	f7ff fe72 	bl	8005a1c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d38:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b28      	cmp	r3, #40	; 0x28
 8005d40:	d113      	bne.n	8005d6a <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d42:	4629      	mov	r1, r5
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff fe1d 	bl	8005984 <I2C_ITListenCplt>
 8005d4a:	e00e      	b.n	8005d6a <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f7ff fd86 	bl	800585e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <I2C_ITSlaveCplt+0x240>)
 8005d54:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	2320      	movs	r3, #32
 8005d58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d60:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7ff fe0c 	bl	8005982 <HAL_I2C_ListenCpltCallback>
}
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d72:	2300      	movs	r3, #0
 8005d74:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f012 fb04 	bl	8018388 <__HAL_I2C_SlaveRxCpltCallback_veneer>
 8005d80:	e7f3      	b.n	8005d6a <I2C_ITSlaveCplt+0x21e>
 8005d82:	bf00      	nop
 8005d84:	40020010 	.word	0x40020010
 8005d88:	40020028 	.word	0x40020028
 8005d8c:	ffff0000 	.word	0xffff0000

08005d90 <I2C_Slave_ISR_IT>:
{
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005d92:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8005d94:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f000 809f 	beq.w	8005edc <I2C_Slave_ISR_IT+0x14c>
 8005d9e:	4604      	mov	r4, r0
 8005da0:	460d      	mov	r5, r1
 8005da2:	4616      	mov	r6, r2
 8005da4:	2301      	movs	r3, #1
 8005da6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005daa:	f011 0f20 	tst.w	r1, #32
 8005dae:	d002      	beq.n	8005db6 <I2C_Slave_ISR_IT+0x26>
 8005db0:	f012 0f20 	tst.w	r2, #32
 8005db4:	d119      	bne.n	8005dea <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005db6:	f015 0f10 	tst.w	r5, #16
 8005dba:	d03f      	beq.n	8005e3c <I2C_Slave_ISR_IT+0xac>
 8005dbc:	f016 0f10 	tst.w	r6, #16
 8005dc0:	d03c      	beq.n	8005e3c <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
 8005dc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	bb43      	cbnz	r3, 8005e1a <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005dc8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b28      	cmp	r3, #40	; 0x28
 8005dd0:	d00e      	beq.n	8005df0 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005dd2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b29      	cmp	r3, #41	; 0x29
 8005dda:	d011      	beq.n	8005e00 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	2210      	movs	r2, #16
 8005de0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005dea:	f7ff feaf 	bl	8005b4c <I2C_ITSlaveCplt>
 8005dee:	e7e2      	b.n	8005db6 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005df0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8005df4:	d1ed      	bne.n	8005dd2 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005df6:	4629      	mov	r1, r5
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7ff fdc3 	bl	8005984 <I2C_ITListenCplt>
 8005dfe:	e7f0      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e00:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005e04:	d0ea      	beq.n	8005ddc <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7ff fa7a 	bl	8005306 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005e12:	4620      	mov	r0, r4
 8005e14:	f7ff fd23 	bl	800585e <I2C_ITSlaveSeqCplt>
 8005e18:	e7e3      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e22:	f043 0304 	orr.w	r3, r3, #4
 8005e26:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e28:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005e2c:	bf18      	it	ne
 8005e2e:	2f00      	cmpne	r7, #0
 8005e30:	d1d7      	bne.n	8005de2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e34:	4620      	mov	r0, r4
 8005e36:	f7ff fdf1 	bl	8005a1c <I2C_ITError>
 8005e3a:	e7d2      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e3c:	f015 0f04 	tst.w	r5, #4
 8005e40:	d01f      	beq.n	8005e82 <I2C_Slave_ISR_IT+0xf2>
 8005e42:	f016 0f04 	tst.w	r6, #4
 8005e46:	d01c      	beq.n	8005e82 <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
 8005e48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	b173      	cbz	r3, 8005e6c <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e54:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e58:	3301      	adds	r3, #1
 8005e5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005e5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005e62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005e6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1b6      	bne.n	8005de2 <I2C_Slave_ISR_IT+0x52>
 8005e74:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8005e78:	d0b3      	beq.n	8005de2 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff fcef 	bl	800585e <I2C_ITSlaveSeqCplt>
 8005e80:	e7af      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e82:	f015 0f08 	tst.w	r5, #8
 8005e86:	d002      	beq.n	8005e8e <I2C_Slave_ISR_IT+0xfe>
 8005e88:	f016 0f08 	tst.w	r6, #8
 8005e8c:	d118      	bne.n	8005ec0 <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e8e:	f015 0f02 	tst.w	r5, #2
 8005e92:	d0a6      	beq.n	8005de2 <I2C_Slave_ISR_IT+0x52>
 8005e94:	f016 0f02 	tst.w	r6, #2
 8005e98:	d0a3      	beq.n	8005de2 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8005e9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	b1a3      	cbz	r3, 8005eca <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005eae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005eb8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	8523      	strh	r3, [r4, #40]	; 0x28
 8005ebe:	e790      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7ff fd0d 	bl	80058e2 <I2C_ITAddrCplt>
 8005ec8:	e78b      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	bf18      	it	ne
 8005ece:	f1b7 7f80 	cmpne.w	r7, #16777216	; 0x1000000
 8005ed2:	d186      	bne.n	8005de2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f7ff fcc2 	bl	800585e <I2C_ITSlaveSeqCplt>
 8005eda:	e782      	b.n	8005de2 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005edc:	2002      	movs	r0, #2
 8005ede:	e783      	b.n	8005de8 <I2C_Slave_ISR_IT+0x58>

08005ee0 <HAL_I2C_ER_IRQHandler>:
{
 8005ee0:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ee2:	6802      	ldr	r2, [r0, #0]
 8005ee4:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ee6:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005eec:	d009      	beq.n	8005f02 <HAL_I2C_ER_IRQHandler+0x22>
 8005eee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005ef2:	d006      	beq.n	8005f02 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005ef4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005ef6:	f044 0401 	orr.w	r4, r4, #1
 8005efa:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005efc:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005f00:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005f02:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005f06:	d00a      	beq.n	8005f1e <HAL_I2C_ER_IRQHandler+0x3e>
 8005f08:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f0c:	d007      	beq.n	8005f1e <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005f0e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f10:	f042 0208 	orr.w	r2, r2, #8
 8005f14:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f16:	6802      	ldr	r2, [r0, #0]
 8005f18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005f1c:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005f1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005f22:	d00a      	beq.n	8005f3a <HAL_I2C_ER_IRQHandler+0x5a>
 8005f24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f28:	d007      	beq.n	8005f3a <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005f2a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005f2c:	f043 0302 	orr.w	r3, r3, #2
 8005f30:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f32:	6803      	ldr	r3, [r0, #0]
 8005f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f38:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8005f3a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005f3c:	f011 0f0b 	tst.w	r1, #11
 8005f40:	d100      	bne.n	8005f44 <HAL_I2C_ER_IRQHandler+0x64>
}
 8005f42:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8005f44:	f7ff fd6a 	bl	8005a1c <I2C_ITError>
}
 8005f48:	e7fb      	b.n	8005f42 <HAL_I2C_ER_IRQHandler+0x62>

08005f4a <I2C_DMAAbort>:
{
 8005f4a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8005f4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f50:	b10b      	cbz	r3, 8005f56 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f52:	2200      	movs	r2, #0
 8005f54:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8005f56:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005f58:	b10b      	cbz	r3, 8005f5e <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 8005f5e:	f7ff fd46 	bl	80059ee <I2C_TreatErrorCallback>
}
 8005f62:	bd08      	pop	{r3, pc}

08005f64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f64:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f66:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	2a20      	cmp	r2, #32
 8005f6e:	d123      	bne.n	8005fb8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f70:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005f74:	2a01      	cmp	r2, #1
 8005f76:	d021      	beq.n	8005fbc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f84:	6800      	ldr	r0, [r0, #0]
 8005f86:	6802      	ldr	r2, [r0, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	6802      	ldr	r2, [r0, #0]
 8005f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f96:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	6802      	ldr	r2, [r0, #0]
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	680a      	ldr	r2, [r1, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2002      	movs	r0, #2
 8005fba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005fbc:	2002      	movs	r0, #2
  }
}
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fc0:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fc2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	2a20      	cmp	r2, #32
 8005fca:	d121      	bne.n	8006010 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fcc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8005fd0:	2a01      	cmp	r2, #1
 8005fd2:	d01f      	beq.n	8006014 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe0:	6800      	ldr	r0, [r0, #0]
 8005fe2:	6802      	ldr	r2, [r0, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005fee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ff2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ff6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	680a      	ldr	r2, [r1, #0]
 8005ffc:	f042 0201 	orr.w	r2, r2, #1
 8006000:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006008:	2000      	movs	r0, #0
 800600a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800600e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006010:	2002      	movs	r0, #2
 8006012:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006014:	2002      	movs	r0, #2
  }
}
 8006016:	4770      	bx	lr

08006018 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006018:	4b13      	ldr	r3, [pc, #76]	; (8006068 <HAL_PWREx_ConfigSupply+0x50>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f013 0f04 	tst.w	r3, #4
 8006020:	d107      	bne.n	8006032 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <HAL_PWREx_ConfigSupply+0x50>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	4283      	cmp	r3, r0
 800602c:	d01a      	beq.n	8006064 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800602e:	2001      	movs	r0, #1
 8006030:	4770      	bx	lr
{
 8006032:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006034:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <HAL_PWREx_ConfigSupply+0x50>)
 8006036:	68d3      	ldr	r3, [r2, #12]
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	4303      	orrs	r3, r0
 800603e:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006040:	f7fd fbb8 	bl	80037b4 <HAL_GetTick>
 8006044:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <HAL_PWREx_ConfigSupply+0x50>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800604e:	d107      	bne.n	8006060 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006050:	f7fd fbb0 	bl	80037b4 <HAL_GetTick>
 8006054:	1b00      	subs	r0, r0, r4
 8006056:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800605a:	d9f4      	bls.n	8006046 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800605c:	2001      	movs	r0, #1
 800605e:	e000      	b.n	8006062 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006060:	2000      	movs	r0, #0
}
 8006062:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006064:	2000      	movs	r0, #0
}
 8006066:	4770      	bx	lr
 8006068:	58024800 	.word	0x58024800

0800606c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800606c:	2800      	cmp	r0, #0
 800606e:	f000 8339 	beq.w	80066e4 <HAL_RCC_OscConfig+0x678>
{
 8006072:	b538      	push	{r3, r4, r5, lr}
 8006074:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006076:	6803      	ldr	r3, [r0, #0]
 8006078:	f013 0f01 	tst.w	r3, #1
 800607c:	d025      	beq.n	80060ca <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800607e:	4a94      	ldr	r2, [pc, #592]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006080:	6913      	ldr	r3, [r2, #16]
 8006082:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006086:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006088:	2b10      	cmp	r3, #16
 800608a:	d015      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4c>
 800608c:	2b18      	cmp	r3, #24
 800608e:	d00f      	beq.n	80060b0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006090:	6863      	ldr	r3, [r4, #4]
 8006092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006096:	d03f      	beq.n	8006118 <HAL_RCC_OscConfig+0xac>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d153      	bne.n	8006144 <HAL_RCC_OscConfig+0xd8>
 800609c:	4b8c      	ldr	r3, [pc, #560]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e038      	b.n	8006122 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060b0:	f002 0203 	and.w	r2, r2, #3
 80060b4:	2a02      	cmp	r2, #2
 80060b6:	d1eb      	bne.n	8006090 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	4b85      	ldr	r3, [pc, #532]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80060c0:	d003      	beq.n	80060ca <HAL_RCC_OscConfig+0x5e>
 80060c2:	6863      	ldr	r3, [r4, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 830f 	beq.w	80066e8 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f013 0f02 	tst.w	r3, #2
 80060d0:	f000 80a1 	beq.w	8006216 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d4:	4a7e      	ldr	r2, [pc, #504]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80060d6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060da:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80060de:	d05a      	beq.n	8006196 <HAL_RCC_OscConfig+0x12a>
 80060e0:	2b18      	cmp	r3, #24
 80060e2:	d055      	beq.n	8006190 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060e4:	68e3      	ldr	r3, [r4, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 80de 	beq.w	80062a8 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060ec:	4978      	ldr	r1, [pc, #480]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80060ee:	680a      	ldr	r2, [r1, #0]
 80060f0:	f022 0219 	bic.w	r2, r2, #25
 80060f4:	4313      	orrs	r3, r2
 80060f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f8:	f7fd fb5c 	bl	80037b4 <HAL_GetTick>
 80060fc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060fe:	4b74      	ldr	r3, [pc, #464]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f013 0f04 	tst.w	r3, #4
 8006106:	f040 80ad 	bne.w	8006264 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800610a:	f7fd fb53 	bl	80037b4 <HAL_GetTick>
 800610e:	1b40      	subs	r0, r0, r5
 8006110:	2802      	cmp	r0, #2
 8006112:	d9f4      	bls.n	80060fe <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006114:	2003      	movs	r0, #3
 8006116:	e2ee      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006118:	4a6d      	ldr	r2, [pc, #436]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006120:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	b32b      	cbz	r3, 8006172 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8006126:	f7fd fb45 	bl	80037b4 <HAL_GetTick>
 800612a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800612c:	4b68      	ldr	r3, [pc, #416]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006134:	d1c9      	bne.n	80060ca <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006136:	f7fd fb3d 	bl	80037b4 <HAL_GetTick>
 800613a:	1b40      	subs	r0, r0, r5
 800613c:	2864      	cmp	r0, #100	; 0x64
 800613e:	d9f5      	bls.n	800612c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006140:	2003      	movs	r0, #3
 8006142:	e2d8      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006148:	d009      	beq.n	800615e <HAL_RCC_OscConfig+0xf2>
 800614a:	4b61      	ldr	r3, [pc, #388]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e7e1      	b.n	8006122 <HAL_RCC_OscConfig+0xb6>
 800615e:	4b5c      	ldr	r3, [pc, #368]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e7d7      	b.n	8006122 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006172:	f7fd fb1f 	bl	80037b4 <HAL_GetTick>
 8006176:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006178:	4b55      	ldr	r3, [pc, #340]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006180:	d0a3      	beq.n	80060ca <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006182:	f7fd fb17 	bl	80037b4 <HAL_GetTick>
 8006186:	1b40      	subs	r0, r0, r5
 8006188:	2864      	cmp	r0, #100	; 0x64
 800618a:	d9f5      	bls.n	8006178 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800618c:	2003      	movs	r0, #3
 800618e:	e2b2      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006190:	f012 0f03 	tst.w	r2, #3
 8006194:	d1a6      	bne.n	80060e4 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006196:	4b4e      	ldr	r3, [pc, #312]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f013 0f04 	tst.w	r3, #4
 800619e:	d003      	beq.n	80061a8 <HAL_RCC_OscConfig+0x13c>
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 82a2 	beq.w	80066ec <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061a8:	4a49      	ldr	r2, [pc, #292]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	f023 0319 	bic.w	r3, r3, #25
 80061b0:	68e1      	ldr	r1, [r4, #12]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80061b6:	f7fd fafd 	bl	80037b4 <HAL_GetTick>
 80061ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061bc:	4b44      	ldr	r3, [pc, #272]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f013 0f04 	tst.w	r3, #4
 80061c4:	d106      	bne.n	80061d4 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061c6:	f7fd faf5 	bl	80037b4 <HAL_GetTick>
 80061ca:	1b40      	subs	r0, r0, r5
 80061cc:	2802      	cmp	r0, #2
 80061ce:	d9f5      	bls.n	80061bc <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80061d0:	2003      	movs	r0, #3
 80061d2:	e290      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d4:	f7fd fb08 	bl	80037e8 <HAL_GetREVID>
 80061d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80061dc:	4298      	cmp	r0, r3
 80061de:	d812      	bhi.n	8006206 <HAL_RCC_OscConfig+0x19a>
 80061e0:	6922      	ldr	r2, [r4, #16]
 80061e2:	2a40      	cmp	r2, #64	; 0x40
 80061e4:	d007      	beq.n	80061f6 <HAL_RCC_OscConfig+0x18a>
 80061e6:	493a      	ldr	r1, [pc, #232]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80061e8:	684b      	ldr	r3, [r1, #4]
 80061ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80061f2:	604b      	str	r3, [r1, #4]
 80061f4:	e00f      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
 80061f6:	4a36      	ldr	r2, [pc, #216]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80061f8:	6853      	ldr	r3, [r2, #4]
 80061fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006202:	6053      	str	r3, [r2, #4]
 8006204:	e007      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
 8006206:	4a32      	ldr	r2, [pc, #200]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006208:	6853      	ldr	r3, [r2, #4]
 800620a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800620e:	6921      	ldr	r1, [r4, #16]
 8006210:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006214:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	f013 0f10 	tst.w	r3, #16
 800621c:	f000 8088 	beq.w	8006330 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006222:	6913      	ldr	r3, [r2, #16]
 8006224:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006228:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800622a:	2b08      	cmp	r3, #8
 800622c:	d056      	beq.n	80062dc <HAL_RCC_OscConfig+0x270>
 800622e:	2b18      	cmp	r3, #24
 8006230:	d050      	beq.n	80062d4 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006232:	69e3      	ldr	r3, [r4, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80b8 	beq.w	80063aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800623a:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800623c:	6813      	ldr	r3, [r2, #0]
 800623e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fd fab6 	bl	80037b4 <HAL_GetTick>
 8006248:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800624a:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006252:	f040 8088 	bne.w	8006366 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006256:	f7fd faad 	bl	80037b4 <HAL_GetTick>
 800625a:	1b40      	subs	r0, r0, r5
 800625c:	2802      	cmp	r0, #2
 800625e:	d9f4      	bls.n	800624a <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006260:	2003      	movs	r0, #3
 8006262:	e248      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006264:	f7fd fac0 	bl	80037e8 <HAL_GetREVID>
 8006268:	f241 0303 	movw	r3, #4099	; 0x1003
 800626c:	4298      	cmp	r0, r3
 800626e:	d812      	bhi.n	8006296 <HAL_RCC_OscConfig+0x22a>
 8006270:	6922      	ldr	r2, [r4, #16]
 8006272:	2a40      	cmp	r2, #64	; 0x40
 8006274:	d007      	beq.n	8006286 <HAL_RCC_OscConfig+0x21a>
 8006276:	4916      	ldr	r1, [pc, #88]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006278:	684b      	ldr	r3, [r1, #4]
 800627a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800627e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006282:	604b      	str	r3, [r1, #4]
 8006284:	e7c7      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
 8006286:	4a12      	ldr	r2, [pc, #72]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006288:	6853      	ldr	r3, [r2, #4]
 800628a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800628e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006292:	6053      	str	r3, [r2, #4]
 8006294:	e7bf      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
 8006296:	4a0e      	ldr	r2, [pc, #56]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 8006298:	6853      	ldr	r3, [r2, #4]
 800629a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800629e:	6921      	ldr	r1, [r4, #16]
 80062a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80062a4:	6053      	str	r3, [r2, #4]
 80062a6:	e7b6      	b.n	8006216 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062b2:	f7fd fa7f 	bl	80037b4 <HAL_GetTick>
 80062b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <HAL_RCC_OscConfig+0x264>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f013 0f04 	tst.w	r3, #4
 80062c0:	d0a9      	beq.n	8006216 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c2:	f7fd fa77 	bl	80037b4 <HAL_GetTick>
 80062c6:	1b40      	subs	r0, r0, r5
 80062c8:	2802      	cmp	r0, #2
 80062ca:	d9f5      	bls.n	80062b8 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 80062cc:	2003      	movs	r0, #3
 80062ce:	e212      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 80062d0:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062d4:	f002 0203 	and.w	r2, r2, #3
 80062d8:	2a01      	cmp	r2, #1
 80062da:	d1aa      	bne.n	8006232 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062dc:	4ba1      	ldr	r3, [pc, #644]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80062e4:	d003      	beq.n	80062ee <HAL_RCC_OscConfig+0x282>
 80062e6:	69e3      	ldr	r3, [r4, #28]
 80062e8:	2b80      	cmp	r3, #128	; 0x80
 80062ea:	f040 8201 	bne.w	80066f0 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ee:	f7fd fa7b 	bl	80037e8 <HAL_GetREVID>
 80062f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80062f6:	4298      	cmp	r0, r3
 80062f8:	d812      	bhi.n	8006320 <HAL_RCC_OscConfig+0x2b4>
 80062fa:	6a22      	ldr	r2, [r4, #32]
 80062fc:	2a20      	cmp	r2, #32
 80062fe:	d007      	beq.n	8006310 <HAL_RCC_OscConfig+0x2a4>
 8006300:	4998      	ldr	r1, [pc, #608]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006308:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800630c:	604b      	str	r3, [r1, #4]
 800630e:	e00f      	b.n	8006330 <HAL_RCC_OscConfig+0x2c4>
 8006310:	4a94      	ldr	r2, [pc, #592]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006312:	6853      	ldr	r3, [r2, #4]
 8006314:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631c:	6053      	str	r3, [r2, #4]
 800631e:	e007      	b.n	8006330 <HAL_RCC_OscConfig+0x2c4>
 8006320:	4a90      	ldr	r2, [pc, #576]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006322:	68d3      	ldr	r3, [r2, #12]
 8006324:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006328:	6a21      	ldr	r1, [r4, #32]
 800632a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800632e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	f013 0f08 	tst.w	r3, #8
 8006336:	d060      	beq.n	80063fa <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006338:	6963      	ldr	r3, [r4, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d049      	beq.n	80063d2 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800633e:	4a89      	ldr	r2, [pc, #548]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006340:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006348:	f7fd fa34 	bl	80037b4 <HAL_GetTick>
 800634c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800634e:	4b85      	ldr	r3, [pc, #532]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006352:	f013 0f02 	tst.w	r3, #2
 8006356:	d150      	bne.n	80063fa <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006358:	f7fd fa2c 	bl	80037b4 <HAL_GetTick>
 800635c:	1b40      	subs	r0, r0, r5
 800635e:	2802      	cmp	r0, #2
 8006360:	d9f5      	bls.n	800634e <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8006362:	2003      	movs	r0, #3
 8006364:	e1c7      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006366:	f7fd fa3f 	bl	80037e8 <HAL_GetREVID>
 800636a:	f241 0303 	movw	r3, #4099	; 0x1003
 800636e:	4298      	cmp	r0, r3
 8006370:	d812      	bhi.n	8006398 <HAL_RCC_OscConfig+0x32c>
 8006372:	6a22      	ldr	r2, [r4, #32]
 8006374:	2a20      	cmp	r2, #32
 8006376:	d007      	beq.n	8006388 <HAL_RCC_OscConfig+0x31c>
 8006378:	497a      	ldr	r1, [pc, #488]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800637a:	684b      	ldr	r3, [r1, #4]
 800637c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006380:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006384:	604b      	str	r3, [r1, #4]
 8006386:	e7d3      	b.n	8006330 <HAL_RCC_OscConfig+0x2c4>
 8006388:	4a76      	ldr	r2, [pc, #472]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800638a:	6853      	ldr	r3, [r2, #4]
 800638c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006394:	6053      	str	r3, [r2, #4]
 8006396:	e7cb      	b.n	8006330 <HAL_RCC_OscConfig+0x2c4>
 8006398:	4a72      	ldr	r2, [pc, #456]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	68d3      	ldr	r3, [r2, #12]
 800639c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80063a0:	6a21      	ldr	r1, [r4, #32]
 80063a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80063a6:	60d3      	str	r3, [r2, #12]
 80063a8:	e7c2      	b.n	8006330 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80063aa:	4a6e      	ldr	r2, [pc, #440]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80063ac:	6813      	ldr	r3, [r2, #0]
 80063ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80063b4:	f7fd f9fe 	bl	80037b4 <HAL_GetTick>
 80063b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80063ba:	4b6a      	ldr	r3, [pc, #424]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80063c2:	d0b5      	beq.n	8006330 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063c4:	f7fd f9f6 	bl	80037b4 <HAL_GetTick>
 80063c8:	1b40      	subs	r0, r0, r5
 80063ca:	2802      	cmp	r0, #2
 80063cc:	d9f5      	bls.n	80063ba <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 80063ce:	2003      	movs	r0, #3
 80063d0:	e191      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d2:	4a64      	ldr	r2, [pc, #400]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80063d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd f9ea 	bl	80037b4 <HAL_GetTick>
 80063e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063e2:	4b60      	ldr	r3, [pc, #384]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80063e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e6:	f013 0f02 	tst.w	r3, #2
 80063ea:	d006      	beq.n	80063fa <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ec:	f7fd f9e2 	bl	80037b4 <HAL_GetTick>
 80063f0:	1b40      	subs	r0, r0, r5
 80063f2:	2802      	cmp	r0, #2
 80063f4:	d9f5      	bls.n	80063e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063f6:	2003      	movs	r0, #3
 80063f8:	e17d      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	f013 0f20 	tst.w	r3, #32
 8006400:	d029      	beq.n	8006456 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006402:	69a3      	ldr	r3, [r4, #24]
 8006404:	b19b      	cbz	r3, 800642e <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006406:	4a57      	ldr	r2, [pc, #348]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800640e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006410:	f7fd f9d0 	bl	80037b4 <HAL_GetTick>
 8006414:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006416:	4b53      	ldr	r3, [pc, #332]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800641e:	d11a      	bne.n	8006456 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006420:	f7fd f9c8 	bl	80037b4 <HAL_GetTick>
 8006424:	1b40      	subs	r0, r0, r5
 8006426:	2802      	cmp	r0, #2
 8006428:	d9f5      	bls.n	8006416 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800642a:	2003      	movs	r0, #3
 800642c:	e163      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800642e:	4a4d      	ldr	r2, [pc, #308]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006436:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006438:	f7fd f9bc 	bl	80037b4 <HAL_GetTick>
 800643c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800643e:	4b49      	ldr	r3, [pc, #292]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006446:	d006      	beq.n	8006456 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006448:	f7fd f9b4 	bl	80037b4 <HAL_GetTick>
 800644c:	1b40      	subs	r0, r0, r5
 800644e:	2802      	cmp	r0, #2
 8006450:	d9f5      	bls.n	800643e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006452:	2003      	movs	r0, #3
 8006454:	e14f      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	f013 0f04 	tst.w	r3, #4
 800645c:	d121      	bne.n	80064a2 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800645e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8147 	beq.w	80066f4 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006466:	4a3f      	ldr	r2, [pc, #252]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006468:	6912      	ldr	r2, [r2, #16]
 800646a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800646e:	2a18      	cmp	r2, #24
 8006470:	f000 80ee 	beq.w	8006650 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006474:	2b02      	cmp	r3, #2
 8006476:	d079      	beq.n	800656c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006478:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006482:	f7fd f997 	bl	80037b4 <HAL_GetTick>
 8006486:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006488:	4b36      	ldr	r3, [pc, #216]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006490:	f000 80dc 	beq.w	800664c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006494:	f7fd f98e 	bl	80037b4 <HAL_GetTick>
 8006498:	1b00      	subs	r0, r0, r4
 800649a:	2802      	cmp	r0, #2
 800649c:	d9f4      	bls.n	8006488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800649e:	2003      	movs	r0, #3
 80064a0:	e129      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 80064a2:	4a31      	ldr	r2, [pc, #196]	; (8006568 <HAL_RCC_OscConfig+0x4fc>)
 80064a4:	6813      	ldr	r3, [r2, #0]
 80064a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80064ac:	f7fd f982 	bl	80037b4 <HAL_GetTick>
 80064b0:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064b2:	4b2d      	ldr	r3, [pc, #180]	; (8006568 <HAL_RCC_OscConfig+0x4fc>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80064ba:	d106      	bne.n	80064ca <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064bc:	f7fd f97a 	bl	80037b4 <HAL_GetTick>
 80064c0:	1b40      	subs	r0, r0, r5
 80064c2:	2864      	cmp	r0, #100	; 0x64
 80064c4:	d9f5      	bls.n	80064b2 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 80064c6:	2003      	movs	r0, #3
 80064c8:	e115      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ca:	68a3      	ldr	r3, [r4, #8]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d00a      	beq.n	80064e6 <HAL_RCC_OscConfig+0x47a>
 80064d0:	bb0b      	cbnz	r3, 8006516 <HAL_RCC_OscConfig+0x4aa>
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	671a      	str	r2, [r3, #112]	; 0x70
 80064dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064de:	f022 0204 	bic.w	r2, r2, #4
 80064e2:	671a      	str	r2, [r3, #112]	; 0x70
 80064e4:	e004      	b.n	80064f0 <HAL_RCC_OscConfig+0x484>
 80064e6:	4a1f      	ldr	r2, [pc, #124]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80064e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	b333      	cbz	r3, 8006542 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80064f4:	f7fd f95e 	bl	80037b4 <HAL_GetTick>
 80064f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064fa:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	f013 0f02 	tst.w	r3, #2
 8006502:	d1ac      	bne.n	800645e <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006504:	f7fd f956 	bl	80037b4 <HAL_GetTick>
 8006508:	1b40      	subs	r0, r0, r5
 800650a:	f241 3388 	movw	r3, #5000	; 0x1388
 800650e:	4298      	cmp	r0, r3
 8006510:	d9f3      	bls.n	80064fa <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8006512:	2003      	movs	r0, #3
 8006514:	e0ef      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006516:	2b05      	cmp	r3, #5
 8006518:	d009      	beq.n	800652e <HAL_RCC_OscConfig+0x4c2>
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800651c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800651e:	f022 0201 	bic.w	r2, r2, #1
 8006522:	671a      	str	r2, [r3, #112]	; 0x70
 8006524:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006526:	f022 0204 	bic.w	r2, r2, #4
 800652a:	671a      	str	r2, [r3, #112]	; 0x70
 800652c:	e7e0      	b.n	80064f0 <HAL_RCC_OscConfig+0x484>
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 8006530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006532:	f042 0204 	orr.w	r2, r2, #4
 8006536:	671a      	str	r2, [r3, #112]	; 0x70
 8006538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	671a      	str	r2, [r3, #112]	; 0x70
 8006540:	e7d6      	b.n	80064f0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8006542:	f7fd f937 	bl	80037b4 <HAL_GetTick>
 8006546:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCC_OscConfig+0x4f8>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654c:	f013 0f02 	tst.w	r3, #2
 8006550:	d085      	beq.n	800645e <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006552:	f7fd f92f 	bl	80037b4 <HAL_GetTick>
 8006556:	1b40      	subs	r0, r0, r5
 8006558:	f241 3388 	movw	r3, #5000	; 0x1388
 800655c:	4298      	cmp	r0, r3
 800655e:	d9f3      	bls.n	8006548 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8006560:	2003      	movs	r0, #3
 8006562:	e0c8      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006564:	58024400 	.word	0x58024400
 8006568:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 800656c:	4a69      	ldr	r2, [pc, #420]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006574:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006576:	f7fd f91d 	bl	80037b4 <HAL_GetTick>
 800657a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800657c:	4b65      	ldr	r3, [pc, #404]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006584:	d006      	beq.n	8006594 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006586:	f7fd f915 	bl	80037b4 <HAL_GetTick>
 800658a:	1b40      	subs	r0, r0, r5
 800658c:	2802      	cmp	r0, #2
 800658e:	d9f5      	bls.n	800657c <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8006590:	2003      	movs	r0, #3
 8006592:	e0b0      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006594:	4b5f      	ldr	r3, [pc, #380]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 8006596:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006598:	4a5f      	ldr	r2, [pc, #380]	; (8006718 <HAL_RCC_OscConfig+0x6ac>)
 800659a:	400a      	ands	r2, r1
 800659c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800659e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80065a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80065a4:	430a      	orrs	r2, r1
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
 80065a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065aa:	3a01      	subs	r2, #1
 80065ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065b2:	3901      	subs	r1, #1
 80065b4:	0249      	lsls	r1, r1, #9
 80065b6:	b289      	uxth	r1, r1
 80065b8:	430a      	orrs	r2, r1
 80065ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065bc:	3901      	subs	r1, #1
 80065be:	0409      	lsls	r1, r1, #16
 80065c0:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80065c4:	430a      	orrs	r2, r1
 80065c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065c8:	3901      	subs	r1, #1
 80065ca:	0609      	lsls	r1, r1, #24
 80065cc:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80065d0:	430a      	orrs	r2, r1
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80065de:	4a4f      	ldr	r2, [pc, #316]	; (800671c <HAL_RCC_OscConfig+0x6b0>)
 80065e0:	400a      	ands	r2, r1
 80065e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065e4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80065e8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	f022 020c 	bic.w	r2, r2, #12
 80065f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80065f2:	430a      	orrs	r2, r1
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f8:	f022 0202 	bic.w	r2, r2, #2
 80065fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80065fe:	430a      	orrs	r2, r1
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006608:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006610:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006618:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006628:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800662a:	f7fd f8c3 	bl	80037b4 <HAL_GetTick>
 800662e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006630:	4b38      	ldr	r3, [pc, #224]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006638:	d106      	bne.n	8006648 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663a:	f7fd f8bb 	bl	80037b4 <HAL_GetTick>
 800663e:	1b00      	subs	r0, r0, r4
 8006640:	2802      	cmp	r0, #2
 8006642:	d9f5      	bls.n	8006630 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8006644:	2003      	movs	r0, #3
 8006646:	e056      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2000      	movs	r0, #0
 800664a:	e054      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 800664c:	2000      	movs	r0, #0
 800664e:	e052      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006650:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 8006652:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006654:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006656:	2b01      	cmp	r3, #1
 8006658:	d04e      	beq.n	80066f8 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665a:	f001 0303 	and.w	r3, r1, #3
 800665e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006660:	4293      	cmp	r3, r2
 8006662:	d14b      	bne.n	80066fc <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006664:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8006668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666a:	4299      	cmp	r1, r3
 800666c:	d148      	bne.n	8006700 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800666e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006674:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d144      	bne.n	8006704 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800667a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800667e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006680:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006682:	429a      	cmp	r2, r3
 8006684:	d140      	bne.n	8006708 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006686:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800668a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800668c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800668e:	429a      	cmp	r2, r3
 8006690:	d13c      	bne.n	800670c <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006692:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8006696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006698:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800669a:	4298      	cmp	r0, r3
 800669c:	d138      	bne.n	8006710 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d101      	bne.n	80066b0 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 80066ac:	2000      	movs	r0, #0
 80066ae:	e022      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 80066b0:	4a18      	ldr	r2, [pc, #96]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 80066b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80066ba:	f7fd f87b 	bl	80037b4 <HAL_GetTick>
 80066be:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80066c0:	f7fd f878 	bl	80037b4 <HAL_GetTick>
 80066c4:	42a8      	cmp	r0, r5
 80066c6:	d0fb      	beq.n	80066c0 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066c8:	4a12      	ldr	r2, [pc, #72]	; (8006714 <HAL_RCC_OscConfig+0x6a8>)
 80066ca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80066cc:	4b13      	ldr	r3, [pc, #76]	; (800671c <HAL_RCC_OscConfig+0x6b0>)
 80066ce:	400b      	ands	r3, r1
 80066d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80066d6:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80066d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 80066e0:	2000      	movs	r0, #0
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 80066e4:	2001      	movs	r0, #1
}
 80066e6:	4770      	bx	lr
        return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
 80066ea:	e004      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	e002      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80066f0:	2001      	movs	r0, #1
 80066f2:	e000      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 80066f4:	2000      	movs	r0, #0
}
 80066f6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7fc      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 80066fc:	2001      	movs	r0, #1
 80066fe:	e7fa      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006700:	2001      	movs	r0, #1
 8006702:	e7f8      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006704:	2001      	movs	r0, #1
 8006706:	e7f6      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006708:	2001      	movs	r0, #1
 800670a:	e7f4      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 800670c:	2001      	movs	r0, #1
 800670e:	e7f2      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006710:	2001      	movs	r0, #1
 8006712:	e7f0      	b.n	80066f6 <HAL_RCC_OscConfig+0x68a>
 8006714:	58024400 	.word	0x58024400
 8006718:	fffffc0c 	.word	0xfffffc0c
 800671c:	ffff0007 	.word	0xffff0007

08006720 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006720:	4b74      	ldr	r3, [pc, #464]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006728:	2b10      	cmp	r3, #16
 800672a:	f000 80de 	beq.w	80068ea <HAL_RCC_GetSysClockFreq+0x1ca>
 800672e:	2b18      	cmp	r3, #24
 8006730:	d00f      	beq.n	8006752 <HAL_RCC_GetSysClockFreq+0x32>
 8006732:	b10b      	cbz	r3, 8006738 <HAL_RCC_GetSysClockFreq+0x18>
 8006734:	4870      	ldr	r0, [pc, #448]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8006736:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006738:	4b6e      	ldr	r3, [pc, #440]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f013 0f20 	tst.w	r3, #32
 8006740:	f000 80d5 	beq.w	80068ee <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006744:	4b6b      	ldr	r3, [pc, #428]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800674c:	486b      	ldr	r0, [pc, #428]	; (80068fc <HAL_RCC_GetSysClockFreq+0x1dc>)
 800674e:	40d8      	lsrs	r0, r3
 8006750:	4770      	bx	lr
{
 8006752:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006754:	4b67      	ldr	r3, [pc, #412]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006758:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800675c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800675e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006762:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006764:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 800677a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800677e:	f000 8094 	beq.w	80068aa <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 8006782:	2a01      	cmp	r2, #1
 8006784:	d066      	beq.n	8006854 <HAL_RCC_GetSysClockFreq+0x134>
 8006786:	2a02      	cmp	r2, #2
 8006788:	f000 8092 	beq.w	80068b0 <HAL_RCC_GetSysClockFreq+0x190>
 800678c:	b1e2      	cbz	r2, 80067c8 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678e:	ee07 0a10 	vmov	s14, r0
 8006792:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006796:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8006900 <HAL_RCC_GetSysClockFreq+0x1e0>
 800679a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800679e:	4b55      	ldr	r3, [pc, #340]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a6:	ee06 3a90 	vmov	s13, r3
 80067aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80067ae:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8006904 <HAL_RCC_GetSysClockFreq+0x1e4>
 80067b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80067c6:	e061      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c8:	4b4a      	ldr	r3, [pc, #296]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f013 0f20 	tst.w	r3, #32
 80067d0:	d023      	beq.n	800681a <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067d2:	4948      	ldr	r1, [pc, #288]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80067d4:	680a      	ldr	r2, [r1, #0]
 80067d6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80067da:	4b48      	ldr	r3, [pc, #288]	; (80068fc <HAL_RCC_GetSysClockFreq+0x1dc>)
 80067dc:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067de:	ee07 3a10 	vmov	s14, r3
 80067e2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80067e6:	ee07 0a10 	vmov	s14, r0
 80067ea:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80067ee:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80067f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	ee06 3a90 	vmov	s13, r3
 80067fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006800:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006904 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006804:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006808:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006818:	e038      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800681a:	ee07 0a10 	vmov	s14, r0
 800681e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006822:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8006908 <HAL_RCC_GetSysClockFreq+0x1e8>
 8006826:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800682a:	4b32      	ldr	r3, [pc, #200]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	ee06 3a90 	vmov	s13, r3
 8006836:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800683a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006904 <HAL_RCC_GetSysClockFreq+0x1e4>
 800683e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800684a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006852:	e01b      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006854:	ee07 0a10 	vmov	s14, r0
 8006858:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800685c:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8006900 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006860:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686c:	ee06 3a90 	vmov	s13, r3
 8006870:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006874:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8006904 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006878:	ee67 7a86 	vmul.f32	s15, s15, s12
 800687c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006880:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006888:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800688c:	4b19      	ldr	r3, [pc, #100]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006894:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068a2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80068a6:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80068aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ae:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b0:	ee07 0a10 	vmov	s14, r0
 80068b4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80068b8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800690c <HAL_RCC_GetSysClockFreq+0x1ec>
 80068bc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80068c0:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c8:	ee06 3a90 	vmov	s13, r3
 80068cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80068d0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8006904 <HAL_RCC_GetSysClockFreq+0x1e4>
 80068d4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80068d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e4:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80068e8:	e7d0      	b.n	800688c <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 80068ea:	4809      	ldr	r0, [pc, #36]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80068ec:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068ee:	4803      	ldr	r0, [pc, #12]	; (80068fc <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	003d0900 	.word	0x003d0900
 80068fc:	03d09000 	.word	0x03d09000
 8006900:	4a742400 	.word	0x4a742400
 8006904:	39000000 	.word	0x39000000
 8006908:	4c742400 	.word	0x4c742400
 800690c:	4bbebc20 	.word	0x4bbebc20
 8006910:	017d7840 	.word	0x017d7840

08006914 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006914:	2800      	cmp	r0, #0
 8006916:	f000 8132 	beq.w	8006b7e <HAL_RCC_ClockConfig+0x26a>
{
 800691a:	b570      	push	{r4, r5, r6, lr}
 800691c:	460d      	mov	r5, r1
 800691e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006920:	4b9b      	ldr	r3, [pc, #620]	; (8006b90 <HAL_RCC_ClockConfig+0x27c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	428b      	cmp	r3, r1
 800692a:	d20b      	bcs.n	8006944 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692c:	4a98      	ldr	r2, [pc, #608]	; (8006b90 <HAL_RCC_ClockConfig+0x27c>)
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	f023 030f 	bic.w	r3, r3, #15
 8006934:	430b      	orrs	r3, r1
 8006936:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006938:	6813      	ldr	r3, [r2, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	428b      	cmp	r3, r1
 8006940:	f040 811f 	bne.w	8006b82 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	f013 0f04 	tst.w	r3, #4
 800694a:	d00c      	beq.n	8006966 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	4b91      	ldr	r3, [pc, #580]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006956:	429a      	cmp	r2, r3
 8006958:	d905      	bls.n	8006966 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800695a:	498e      	ldr	r1, [pc, #568]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 800695c:	698b      	ldr	r3, [r1, #24]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	431a      	orrs	r2, r3
 8006964:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	f013 0f08 	tst.w	r3, #8
 800696c:	d00c      	beq.n	8006988 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800696e:	6962      	ldr	r2, [r4, #20]
 8006970:	4b88      	ldr	r3, [pc, #544]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006978:	429a      	cmp	r2, r3
 800697a:	d905      	bls.n	8006988 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800697c:	4985      	ldr	r1, [pc, #532]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 800697e:	69cb      	ldr	r3, [r1, #28]
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	431a      	orrs	r2, r3
 8006986:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	f013 0f10 	tst.w	r3, #16
 800698e:	d00c      	beq.n	80069aa <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006990:	69a2      	ldr	r2, [r4, #24]
 8006992:	4b80      	ldr	r3, [pc, #512]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800699a:	429a      	cmp	r2, r3
 800699c:	d905      	bls.n	80069aa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800699e:	497d      	ldr	r1, [pc, #500]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069a0:	69cb      	ldr	r3, [r1, #28]
 80069a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069a6:	431a      	orrs	r2, r3
 80069a8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f013 0f20 	tst.w	r3, #32
 80069b0:	d00c      	beq.n	80069cc <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80069b2:	69e2      	ldr	r2, [r4, #28]
 80069b4:	4b77      	ldr	r3, [pc, #476]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069bc:	429a      	cmp	r2, r3
 80069be:	d905      	bls.n	80069cc <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80069c0:	4974      	ldr	r1, [pc, #464]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069c2:	6a0b      	ldr	r3, [r1, #32]
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	431a      	orrs	r2, r3
 80069ca:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	f013 0f02 	tst.w	r3, #2
 80069d2:	d00c      	beq.n	80069ee <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069d4:	68e2      	ldr	r2, [r4, #12]
 80069d6:	4b6f      	ldr	r3, [pc, #444]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	429a      	cmp	r2, r3
 80069e0:	d905      	bls.n	80069ee <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e2:	496c      	ldr	r1, [pc, #432]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069e4:	698b      	ldr	r3, [r1, #24]
 80069e6:	f023 030f 	bic.w	r3, r3, #15
 80069ea:	431a      	orrs	r2, r3
 80069ec:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	f013 0f01 	tst.w	r3, #1
 80069f4:	d041      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069f6:	4a67      	ldr	r2, [pc, #412]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 80069f8:	6993      	ldr	r3, [r2, #24]
 80069fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069fe:	68a1      	ldr	r1, [r4, #8]
 8006a00:	430b      	orrs	r3, r1
 8006a02:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d00a      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d027      	beq.n	8006a5e <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d02c      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a12:	4a60      	ldr	r2, [pc, #384]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	f012 0f04 	tst.w	r2, #4
 8006a1a:	d106      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	e0ad      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a20:	6812      	ldr	r2, [r2, #0]
 8006a22:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006a26:	f000 80ae 	beq.w	8006b86 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a2a:	495a      	ldr	r1, [pc, #360]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a2c:	690a      	ldr	r2, [r1, #16]
 8006a2e:	f022 0207 	bic.w	r2, r2, #7
 8006a32:	4313      	orrs	r3, r2
 8006a34:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8006a36:	f7fc febd 	bl	80037b4 <HAL_GetTick>
 8006a3a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3c:	4b55      	ldr	r3, [pc, #340]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a44:	6862      	ldr	r2, [r4, #4]
 8006a46:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006a4a:	d016      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a4c:	f7fc feb2 	bl	80037b4 <HAL_GetTick>
 8006a50:	1b80      	subs	r0, r0, r6
 8006a52:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a56:	4298      	cmp	r0, r3
 8006a58:	d9f0      	bls.n	8006a3c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8006a5a:	2003      	movs	r0, #3
 8006a5c:	e08e      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a5e:	4a4d      	ldr	r2, [pc, #308]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006a66:	d1e0      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006a68:	2001      	movs	r0, #1
 8006a6a:	e087      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a6c:	4a49      	ldr	r2, [pc, #292]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006a74:	d1d9      	bne.n	8006a2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006a76:	2001      	movs	r0, #1
 8006a78:	e080      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f013 0f02 	tst.w	r3, #2
 8006a80:	d00c      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a82:	68e2      	ldr	r2, [r4, #12]
 8006a84:	4b43      	ldr	r3, [pc, #268]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d205      	bcs.n	8006a9c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a90:	4940      	ldr	r1, [pc, #256]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006a92:	698b      	ldr	r3, [r1, #24]
 8006a94:	f023 030f 	bic.w	r3, r3, #15
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <HAL_RCC_ClockConfig+0x27c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	d90a      	bls.n	8006abe <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa8:	4a39      	ldr	r2, [pc, #228]	; (8006b90 <HAL_RCC_ClockConfig+0x27c>)
 8006aaa:	6813      	ldr	r3, [r2, #0]
 8006aac:	f023 030f 	bic.w	r3, r3, #15
 8006ab0:	432b      	orrs	r3, r5
 8006ab2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	42ab      	cmp	r3, r5
 8006abc:	d165      	bne.n	8006b8a <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f013 0f04 	tst.w	r3, #4
 8006ac4:	d00c      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ac6:	6922      	ldr	r2, [r4, #16]
 8006ac8:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d205      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ad4:	492f      	ldr	r1, [pc, #188]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006ad6:	698b      	ldr	r3, [r1, #24]
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	431a      	orrs	r2, r3
 8006ade:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	f013 0f08 	tst.w	r3, #8
 8006ae6:	d00c      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ae8:	6962      	ldr	r2, [r4, #20]
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d205      	bcs.n	8006b02 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006af6:	4927      	ldr	r1, [pc, #156]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006af8:	69cb      	ldr	r3, [r1, #28]
 8006afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afe:	431a      	orrs	r2, r3
 8006b00:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	f013 0f10 	tst.w	r3, #16
 8006b08:	d00c      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b0a:	69a2      	ldr	r2, [r4, #24]
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006b0e:	69db      	ldr	r3, [r3, #28]
 8006b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d205      	bcs.n	8006b24 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b18:	491e      	ldr	r1, [pc, #120]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006b1a:	69cb      	ldr	r3, [r1, #28]
 8006b1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b20:	431a      	orrs	r2, r3
 8006b22:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	f013 0f20 	tst.w	r3, #32
 8006b2a:	d00c      	beq.n	8006b46 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b2c:	69e2      	ldr	r2, [r4, #28]
 8006b2e:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d205      	bcs.n	8006b46 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b3a:	4916      	ldr	r1, [pc, #88]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006b3c:	6a0b      	ldr	r3, [r1, #32]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	431a      	orrs	r2, r3
 8006b44:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b46:	f7ff fdeb 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8006b4a:	4912      	ldr	r1, [pc, #72]	; (8006b94 <HAL_RCC_ClockConfig+0x280>)
 8006b4c:	698b      	ldr	r3, [r1, #24]
 8006b4e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006b52:	4a11      	ldr	r2, [pc, #68]	; (8006b98 <HAL_RCC_ClockConfig+0x284>)
 8006b54:	5cd3      	ldrb	r3, [r2, r3]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b5c:	698b      	ldr	r3, [r1, #24]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	5cd3      	ldrb	r3, [r2, r3]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	fa20 f303 	lsr.w	r3, r0, r3
 8006b6c:	4a0b      	ldr	r2, [pc, #44]	; (8006b9c <HAL_RCC_ClockConfig+0x288>)
 8006b6e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_RCC_ClockConfig+0x28c>)
 8006b72:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8006b74:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <HAL_RCC_ClockConfig+0x290>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	f7fc fdba 	bl	80036f0 <HAL_InitTick>
}
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006b7e:	2001      	movs	r0, #1
}
 8006b80:	4770      	bx	lr
      return HAL_ERROR;
 8006b82:	2001      	movs	r0, #1
 8006b84:	e7fa      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8006b86:	2001      	movs	r0, #1
 8006b88:	e7f8      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	e7f6      	b.n	8006b7c <HAL_RCC_ClockConfig+0x268>
 8006b8e:	bf00      	nop
 8006b90:	52002000 	.word	0x52002000
 8006b94:	58024400 	.word	0x58024400
 8006b98:	08018510 	.word	0x08018510
 8006b9c:	20000758 	.word	0x20000758
 8006ba0:	20000754 	.word	0x20000754
 8006ba4:	20000764 	.word	0x20000764

08006ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba8:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006baa:	f7ff fdb9 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 8006bae:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x34>)
 8006bb0:	6993      	ldr	r3, [r2, #24]
 8006bb2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006bb6:	490a      	ldr	r1, [pc, #40]	; (8006be0 <HAL_RCC_GetHCLKFreq+0x38>)
 8006bb8:	5ccb      	ldrb	r3, [r1, r3]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bc2:	6992      	ldr	r2, [r2, #24]
 8006bc4:	f002 020f 	and.w	r2, r2, #15
 8006bc8:	5c88      	ldrb	r0, [r1, r2]
 8006bca:	f000 001f 	and.w	r0, r0, #31
 8006bce:	fa23 f000 	lsr.w	r0, r3, r0
 8006bd2:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006bd4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bd6:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <HAL_RCC_GetHCLKFreq+0x40>)
 8006bd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006bda:	bd08      	pop	{r3, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	08018510 	.word	0x08018510
 8006be4:	20000758 	.word	0x20000758
 8006be8:	20000754 	.word	0x20000754

08006bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bee:	f7ff ffdb 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	5cd3      	ldrb	r3, [r2, r3]
 8006bfe:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c02:	40d8      	lsrs	r0, r3
 8006c04:	bd08      	pop	{r3, pc}
 8006c06:	bf00      	nop
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	08018510 	.word	0x08018510

08006c10 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c10:	4b40      	ldr	r3, [pc, #256]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d079      	beq.n	8006d10 <RCCEx_PLL2_Config+0x100>
{
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	4605      	mov	r5, r0
 8006c20:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c22:	4a3c      	ldr	r2, [pc, #240]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006c24:	6813      	ldr	r3, [r2, #0]
 8006c26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2c:	f7fc fdc2 	bl	80037b4 <HAL_GetTick>
 8006c30:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c32:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006c3a:	d006      	beq.n	8006c4a <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c3c:	f7fc fdba 	bl	80037b4 <HAL_GetTick>
 8006c40:	1b03      	subs	r3, r0, r4
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d9f5      	bls.n	8006c32 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8006c46:	2003      	movs	r0, #3

  }


  return status;
}
 8006c48:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c4a:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4e:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8006c52:	6829      	ldr	r1, [r5, #0]
 8006c54:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8006c58:	629a      	str	r2, [r3, #40]	; 0x28
 8006c5a:	686a      	ldr	r2, [r5, #4]
 8006c5c:	3a01      	subs	r2, #1
 8006c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c62:	68a9      	ldr	r1, [r5, #8]
 8006c64:	3901      	subs	r1, #1
 8006c66:	0249      	lsls	r1, r1, #9
 8006c68:	b289      	uxth	r1, r1
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	68e9      	ldr	r1, [r5, #12]
 8006c6e:	3901      	subs	r1, #1
 8006c70:	0409      	lsls	r1, r1, #16
 8006c72:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006c76:	430a      	orrs	r2, r1
 8006c78:	6929      	ldr	r1, [r5, #16]
 8006c7a:	3901      	subs	r1, #1
 8006c7c:	0609      	lsls	r1, r1, #24
 8006c7e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006c82:	430a      	orrs	r2, r1
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006c8c:	6969      	ldr	r1, [r5, #20]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	f022 0220 	bic.w	r2, r2, #32
 8006c98:	69a9      	ldr	r1, [r5, #24]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	f022 0210 	bic.w	r2, r2, #16
 8006ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ca6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006ca8:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <RCCEx_PLL2_Config+0x108>)
 8006caa:	400a      	ands	r2, r1
 8006cac:	69e9      	ldr	r1, [r5, #28]
 8006cae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb6:	f042 0210 	orr.w	r2, r2, #16
 8006cba:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006cbc:	b9c6      	cbnz	r6, 8006cf0 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8006cc8:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cd0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006cd2:	f7fc fd6f 	bl	80037b4 <HAL_GetTick>
 8006cd6:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006ce0:	d114      	bne.n	8006d0c <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ce2:	f7fc fd67 	bl	80037b4 <HAL_GetTick>
 8006ce6:	1b00      	subs	r0, r0, r4
 8006ce8:	2802      	cmp	r0, #2
 8006cea:	d9f5      	bls.n	8006cd8 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8006cec:	2003      	movs	r0, #3
 8006cee:	e7ab      	b.n	8006c48 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cf0:	2e01      	cmp	r6, #1
 8006cf2:	d005      	beq.n	8006d00 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cf4:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006cf6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cfe:	e7e3      	b.n	8006cc8 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d00:	4a04      	ldr	r2, [pc, #16]	; (8006d14 <RCCEx_PLL2_Config+0x104>)
 8006d02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006d0a:	e7dd      	b.n	8006cc8 <RCCEx_PLL2_Config+0xb8>
  return status;
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e79b      	b.n	8006c48 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8006d10:	2001      	movs	r0, #1
}
 8006d12:	4770      	bx	lr
 8006d14:	58024400 	.word	0x58024400
 8006d18:	ffff0007 	.word	0xffff0007

08006d1c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d1c:	4b40      	ldr	r3, [pc, #256]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0303 	and.w	r3, r3, #3
 8006d24:	2b03      	cmp	r3, #3
 8006d26:	d079      	beq.n	8006e1c <RCCEx_PLL3_Config+0x100>
{
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d38:	f7fc fd3c 	bl	80037b4 <HAL_GetTick>
 8006d3c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d3e:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006d46:	d006      	beq.n	8006d56 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d48:	f7fc fd34 	bl	80037b4 <HAL_GetTick>
 8006d4c:	1b03      	subs	r3, r0, r4
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d9f5      	bls.n	8006d3e <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8006d52:	2003      	movs	r0, #3

  }


  return status;
}
 8006d54:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d56:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5a:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8006d5e:	6829      	ldr	r1, [r5, #0]
 8006d60:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8006d64:	629a      	str	r2, [r3, #40]	; 0x28
 8006d66:	686a      	ldr	r2, [r5, #4]
 8006d68:	3a01      	subs	r2, #1
 8006d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d6e:	68a9      	ldr	r1, [r5, #8]
 8006d70:	3901      	subs	r1, #1
 8006d72:	0249      	lsls	r1, r1, #9
 8006d74:	b289      	uxth	r1, r1
 8006d76:	430a      	orrs	r2, r1
 8006d78:	68e9      	ldr	r1, [r5, #12]
 8006d7a:	3901      	subs	r1, #1
 8006d7c:	0409      	lsls	r1, r1, #16
 8006d7e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006d82:	430a      	orrs	r2, r1
 8006d84:	6929      	ldr	r1, [r5, #16]
 8006d86:	3901      	subs	r1, #1
 8006d88:	0609      	lsls	r1, r1, #24
 8006d8a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d98:	6969      	ldr	r1, [r5, #20]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006da4:	69a9      	ldr	r1, [r5, #24]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006db2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006db4:	4a1b      	ldr	r2, [pc, #108]	; (8006e24 <RCCEx_PLL3_Config+0x108>)
 8006db6:	400a      	ands	r2, r1
 8006db8:	69e9      	ldr	r1, [r5, #28]
 8006dba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006dc8:	b9c6      	cbnz	r6, 8006dfc <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dca:	461a      	mov	r2, r3
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8006dd4:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006dde:	f7fc fce9 	bl	80037b4 <HAL_GetTick>
 8006de2:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006dec:	d114      	bne.n	8006e18 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dee:	f7fc fce1 	bl	80037b4 <HAL_GetTick>
 8006df2:	1b00      	subs	r0, r0, r4
 8006df4:	2802      	cmp	r0, #2
 8006df6:	d9f5      	bls.n	8006de4 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8006df8:	2003      	movs	r0, #3
 8006dfa:	e7ab      	b.n	8006d54 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8006dfc:	2e01      	cmp	r6, #1
 8006dfe:	d005      	beq.n	8006e0c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e00:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006e02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e0a:	e7e3      	b.n	8006dd4 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e0c:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <RCCEx_PLL3_Config+0x104>)
 8006e0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e16:	e7dd      	b.n	8006dd4 <RCCEx_PLL3_Config+0xb8>
  return status;
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e79b      	b.n	8006d54 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8006e1c:	2001      	movs	r0, #1
}
 8006e1e:	4770      	bx	lr
 8006e20:	58024400 	.word	0x58024400
 8006e24:	ffff0007 	.word	0xffff0007

08006e28 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e2c:	6803      	ldr	r3, [r0, #0]
 8006e2e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006e32:	d030      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e34:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3a:	d026      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006e3c:	d80e      	bhi.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006e3e:	b1eb      	cbz	r3, 8006e7c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e44:	d107      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e46:	2102      	movs	r1, #2
 8006e48:	3008      	adds	r0, #8
 8006e4a:	f7ff fee1 	bl	8006c10 <RCCEx_PLL2_Config>
 8006e4e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006e50:	b145      	cbz	r5, 8006e64 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006e52:	462e      	mov	r6, r5
 8006e54:	e021      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e56:	2601      	movs	r6, #1
 8006e58:	4635      	mov	r5, r6
 8006e5a:	e01e      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e60:	d109      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006e62:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006e64:	4a98      	ldr	r2, [pc, #608]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006e66:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006e68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e72:	2600      	movs	r6, #0
 8006e74:	e011      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e76:	2601      	movs	r6, #1
 8006e78:	4635      	mov	r5, r6
 8006e7a:	e00e      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4a92      	ldr	r2, [pc, #584]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006e7e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e86:	2500      	movs	r5, #0
 8006e88:	e7ec      	b.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e8a:	2102      	movs	r1, #2
 8006e8c:	3028      	adds	r0, #40	; 0x28
 8006e8e:	f7ff ff45 	bl	8006d1c <RCCEx_PLL3_Config>
 8006e92:	4605      	mov	r5, r0
        break;
 8006e94:	e7dc      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e96:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e98:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ea0:	d014      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006ea2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea4:	2b04      	cmp	r3, #4
 8006ea6:	d832      	bhi.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8006ea8:	e8df f003 	tbb	[pc, r3]
 8006eac:	082a2303 	.word	0x082a2303
 8006eb0:	08          	.byte	0x08
 8006eb1:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb2:	4a85      	ldr	r2, [pc, #532]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006eb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8006ebc:	bb55      	cbnz	r5, 8006f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ebe:	4a82      	ldr	r2, [pc, #520]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006ec0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006ec2:	f023 0307 	bic.w	r3, r3, #7
 8006ec6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006ed2:	d031      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006ed4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d04c      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006eda:	d820      	bhi.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d043      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d119      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f104 0008 	add.w	r0, r4, #8
 8006eea:	f7ff fe91 	bl	8006c10 <RCCEx_PLL2_Config>
 8006eee:	4605      	mov	r5, r0
        break;
 8006ef0:	e01a      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f104 0008 	add.w	r0, r4, #8
 8006ef8:	f7ff fe8a 	bl	8006c10 <RCCEx_PLL2_Config>
 8006efc:	4605      	mov	r5, r0
        break;
 8006efe:	e7dd      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f00:	2100      	movs	r1, #0
 8006f02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006f06:	f7ff ff09 	bl	8006d1c <RCCEx_PLL3_Config>
 8006f0a:	4605      	mov	r5, r0
        break;
 8006f0c:	e7d6      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f0e:	2601      	movs	r6, #1
 8006f10:	4635      	mov	r5, r6
 8006f12:	e7db      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006f14:	462e      	mov	r6, r5
 8006f16:	e7d9      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f18:	2601      	movs	r6, #1
 8006f1a:	4635      	mov	r5, r6
 8006f1c:	e00c      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006f1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f20:	d002      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f26:	d11c      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8006f28:	bb5d      	cbnz	r5, 8006f82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f2a:	4a67      	ldr	r2, [pc, #412]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006f2c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006f2e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8006f32:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006f3e:	d046      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f40:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f48:	d039      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006f4a:	d81f      	bhi.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x164>
 8006f4c:	b38b      	cbz	r3, 8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f52:	d118      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f54:	2100      	movs	r1, #0
 8006f56:	f104 0008 	add.w	r0, r4, #8
 8006f5a:	f7ff fe59 	bl	8006c10 <RCCEx_PLL2_Config>
 8006f5e:	4605      	mov	r5, r0
        break;
 8006f60:	e01a      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 8006f62:	2601      	movs	r6, #1
 8006f64:	4635      	mov	r5, r6
 8006f66:	e7e7      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f68:	4a57      	ldr	r2, [pc, #348]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006f6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f70:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006f72:	e7d9      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f74:	2100      	movs	r1, #0
 8006f76:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006f7a:	f7ff fecf 	bl	8006d1c <RCCEx_PLL3_Config>
 8006f7e:	4605      	mov	r5, r0
        break;
 8006f80:	e7d2      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006f82:	462e      	mov	r6, r5
 8006f84:	e7d8      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f86:	2601      	movs	r6, #1
 8006f88:	4635      	mov	r5, r6
 8006f8a:	e020      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006f8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f90:	d002      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8006f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f96:	d109      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
 8006f98:	b9c5      	cbnz	r5, 8006fcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f9a:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006f9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006f9e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8006fa2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8006faa:	e010      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8006fac:	2601      	movs	r6, #1
 8006fae:	4635      	mov	r5, r6
 8006fb0:	e00d      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb2:	4a45      	ldr	r2, [pc, #276]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8006fb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fba:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8006fbc:	e7ec      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006fc4:	f7ff feaa 	bl	8006d1c <RCCEx_PLL3_Config>
 8006fc8:	4605      	mov	r5, r0
        break;
 8006fca:	e7e5      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8006fcc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006fd4:	d024      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fd6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fde:	d042      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006fe0:	d80e      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d039      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fea:	d106      	bne.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fec:	2100      	movs	r1, #0
 8006fee:	f104 0008 	add.w	r0, r4, #8
 8006ff2:	f7ff fe0d 	bl	8006c10 <RCCEx_PLL2_Config>
 8006ff6:	4605      	mov	r5, r0
        break;
 8006ff8:	e008      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006ffa:	2601      	movs	r6, #1
 8006ffc:	4635      	mov	r5, r6
 8006ffe:	e00f      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007004:	d002      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800700a:	d123      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
 800700c:	2d00      	cmp	r5, #0
 800700e:	d131      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007010:	4a2d      	ldr	r2, [pc, #180]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007012:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007014:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007018:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800701c:	430b      	orrs	r3, r1
 800701e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007026:	d02e      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
 8007028:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800702a:	2b20      	cmp	r3, #32
 800702c:	d040      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800702e:	d826      	bhi.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007030:	b133      	cbz	r3, 8007040 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007032:	2b10      	cmp	r3, #16
 8007034:	d120      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007036:	4a24      	ldr	r2, [pc, #144]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007038:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800703a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800703e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007040:	2d00      	cmp	r5, #0
 8007042:	d13c      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007044:	4a20      	ldr	r2, [pc, #128]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007046:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007048:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800704c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800704e:	430b      	orrs	r3, r1
 8007050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007052:	e018      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007054:	2601      	movs	r6, #1
 8007056:	4635      	mov	r5, r6
 8007058:	e7e2      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705a:	4a1b      	ldr	r2, [pc, #108]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800705c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007064:	e7d2      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007066:	2100      	movs	r1, #0
 8007068:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800706c:	f7ff fe56 	bl	8006d1c <RCCEx_PLL3_Config>
 8007070:	4605      	mov	r5, r0
        break;
 8007072:	e7cb      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007074:	462e      	mov	r6, r5
 8007076:	e7d3      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
 8007078:	2601      	movs	r6, #1
 800707a:	4635      	mov	r5, r6
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800707e:	2b30      	cmp	r3, #48	; 0x30
 8007080:	d0de      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007082:	2601      	movs	r6, #1
 8007084:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800708c:	d02d      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 800708e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007094:	d04f      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007096:	d819      	bhi.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d046      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x302>
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a0:	d10f      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070a2:	2100      	movs	r1, #0
 80070a4:	f104 0008 	add.w	r0, r4, #8
 80070a8:	f7ff fdb2 	bl	8006c10 <RCCEx_PLL2_Config>
 80070ac:	4605      	mov	r5, r0
        break;
 80070ae:	e013      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070b0:	2102      	movs	r1, #2
 80070b2:	f104 0008 	add.w	r0, r4, #8
 80070b6:	f7ff fdab 	bl	8006c10 <RCCEx_PLL2_Config>
 80070ba:	4605      	mov	r5, r0
        break;
 80070bc:	e7c0      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80070be:	462e      	mov	r6, r5
 80070c0:	e7e1      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
 80070c2:	2601      	movs	r6, #1
 80070c4:	4635      	mov	r5, r6
 80070c6:	e010      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80070c8:	58024400 	.word	0x58024400
 80070cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070d0:	d002      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d6:	d125      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 80070d8:	2d00      	cmp	r5, #0
 80070da:	d133      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80070dc:	4a77      	ldr	r2, [pc, #476]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80070de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80070e6:	430b      	orrs	r3, r1
 80070e8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80070f0:	d038      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80070f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070f8:	d053      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80070fa:	d828      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x326>
 80070fc:	b143      	cbz	r3, 8007110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80070fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007102:	d121      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007104:	2101      	movs	r1, #1
 8007106:	f104 0008 	add.w	r0, r4, #8
 800710a:	f7ff fd81 	bl	8006c10 <RCCEx_PLL2_Config>
 800710e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007110:	2d00      	cmp	r5, #0
 8007112:	d14d      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007114:	4a69      	ldr	r2, [pc, #420]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007116:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007118:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800711c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800711e:	430b      	orrs	r3, r1
 8007120:	6513      	str	r3, [r2, #80]	; 0x50
 8007122:	e01f      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007124:	2601      	movs	r6, #1
 8007126:	4635      	mov	r5, r6
 8007128:	e7df      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712a:	4a64      	ldr	r2, [pc, #400]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800712c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800712e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007132:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007134:	e7d0      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007136:	2100      	movs	r1, #0
 8007138:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800713c:	f7ff fdee 	bl	8006d1c <RCCEx_PLL3_Config>
 8007140:	4605      	mov	r5, r0
        break;
 8007142:	e7c9      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007144:	462e      	mov	r6, r5
 8007146:	e7d0      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007148:	2601      	movs	r6, #1
 800714a:	4635      	mov	r5, r6
 800714c:	e00a      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800714e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007152:	d0dd      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007158:	d0da      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800715a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800715e:	d0d7      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007160:	2601      	movs	r6, #1
 8007162:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800716a:	d031      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
 800716c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007174:	d045      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8007176:	d820      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007178:	b143      	cbz	r3, 800718c <HAL_RCCEx_PeriphCLKConfig+0x364>
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717e:	d119      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007180:	2101      	movs	r1, #1
 8007182:	f104 0008 	add.w	r0, r4, #8
 8007186:	f7ff fd43 	bl	8006c10 <RCCEx_PLL2_Config>
 800718a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800718c:	2d00      	cmp	r5, #0
 800718e:	d13f      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007190:	4a4a      	ldr	r2, [pc, #296]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007192:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007194:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007198:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800719c:	430b      	orrs	r3, r1
 800719e:	6593      	str	r3, [r2, #88]	; 0x58
 80071a0:	e016      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a2:	2101      	movs	r1, #1
 80071a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80071a8:	f7ff fdb8 	bl	8006d1c <RCCEx_PLL3_Config>
 80071ac:	4605      	mov	r5, r0
        break;
 80071ae:	e7af      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80071b0:	462e      	mov	r6, r5
 80071b2:	e7d7      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80071b4:	2601      	movs	r6, #1
 80071b6:	4635      	mov	r5, r6
 80071b8:	e00a      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80071ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071be:	d0e5      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80071c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071c4:	d0e2      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80071c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80071ca:	d0df      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80071cc:	2601      	movs	r6, #1
 80071ce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80071d6:	d009      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
 80071d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80071da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071de:	d019      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80071e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e4:	d024      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80071e6:	b1d3      	cbz	r3, 800721e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80071e8:	2601      	movs	r6, #1
 80071ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80071f2:	d033      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
 80071f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d85b      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80071fa:	e8df f003 	tbb	[pc, r3]
 80071fe:	2227      	.short	0x2227
 8007200:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007202:	2101      	movs	r1, #1
 8007204:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007208:	f7ff fd88 	bl	8006d1c <RCCEx_PLL3_Config>
 800720c:	4605      	mov	r5, r0
        break;
 800720e:	e7bd      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007210:	462e      	mov	r6, r5
 8007212:	e7dd      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4a29      	ldr	r2, [pc, #164]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007216:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800721e:	b975      	cbnz	r5, 800723e <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007220:	4a26      	ldr	r2, [pc, #152]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007222:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007224:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007228:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800722a:	430b      	orrs	r3, r1
 800722c:	6513      	str	r3, [r2, #80]	; 0x50
 800722e:	e7dd      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007230:	2101      	movs	r1, #1
 8007232:	f104 0008 	add.w	r0, r4, #8
 8007236:	f7ff fceb 	bl	8006c10 <RCCEx_PLL2_Config>
 800723a:	4605      	mov	r5, r0
        break;
 800723c:	e7ef      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800723e:	462e      	mov	r6, r5
 8007240:	e7d4      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007242:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007244:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800724c:	bba5      	cbnz	r5, 80072b8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800724e:	4a1b      	ldr	r2, [pc, #108]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007250:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007258:	430b      	orrs	r3, r1
 800725a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007262:	d12d      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	f013 0f01 	tst.w	r3, #1
 800726a:	f000 80a5 	beq.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 800726e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007270:	2b28      	cmp	r3, #40	; 0x28
 8007272:	f200 809f 	bhi.w	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8007276:	e8df f003 	tbb	[pc, r3]
 800727a:	9d8d      	.short	0x9d8d
 800727c:	9d9d9d9d 	.word	0x9d9d9d9d
 8007280:	9d879d9d 	.word	0x9d879d9d
 8007284:	9d9d9d9d 	.word	0x9d9d9d9d
 8007288:	9d969d9d 	.word	0x9d969d9d
 800728c:	9d9d9d9d 	.word	0x9d9d9d9d
 8007290:	9d8d9d9d 	.word	0x9d8d9d9d
 8007294:	9d9d9d9d 	.word	0x9d9d9d9d
 8007298:	9d8d9d9d 	.word	0x9d8d9d9d
 800729c:	9d9d9d9d 	.word	0x9d9d9d9d
 80072a0:	9d9d      	.short	0x9d9d
 80072a2:	8d          	.byte	0x8d
 80072a3:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072a4:	2102      	movs	r1, #2
 80072a6:	f104 0008 	add.w	r0, r4, #8
 80072aa:	f7ff fcb1 	bl	8006c10 <RCCEx_PLL2_Config>
 80072ae:	4605      	mov	r5, r0
        break;
 80072b0:	e7cc      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
 80072b2:	2601      	movs	r6, #1
 80072b4:	4635      	mov	r5, r6
 80072b6:	e7d1      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x434>
 80072b8:	462e      	mov	r6, r5
 80072ba:	e7cf      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x434>
 80072bc:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072c0:	4a91      	ldr	r2, [pc, #580]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80072ca:	f7fc fa73 	bl	80037b4 <HAL_GetTick>
 80072ce:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072d0:	4b8d      	ldr	r3, [pc, #564]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80072d8:	d105      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072da:	f7fc fa6b 	bl	80037b4 <HAL_GetTick>
 80072de:	1bc0      	subs	r0, r0, r7
 80072e0:	2864      	cmp	r0, #100	; 0x64
 80072e2:	d9f5      	bls.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
 80072e4:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	d14a      	bne.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072ea:	4b88      	ldr	r3, [pc, #544]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80072f2:	4053      	eors	r3, r2
 80072f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80072f8:	d00c      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072fa:	4b84      	ldr	r3, [pc, #528]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80072fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007302:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007304:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007308:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800730a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800730c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007310:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007312:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007314:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731c:	d015      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
 800731e:	bb8d      	cbnz	r5, 8007384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007320:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007324:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007328:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800732c:	d01e      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800732e:	4a77      	ldr	r2, [pc, #476]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007330:	6913      	ldr	r3, [r2, #16]
 8007332:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007336:	6113      	str	r3, [r2, #16]
 8007338:	4974      	ldr	r1, [pc, #464]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800733a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800733c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007340:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007344:	4313      	orrs	r3, r2
 8007346:	670b      	str	r3, [r1, #112]	; 0x70
 8007348:	e78c      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
 800734a:	f7fc fa33 	bl	80037b4 <HAL_GetTick>
 800734e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007350:	4b6e      	ldr	r3, [pc, #440]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007354:	f013 0f02 	tst.w	r3, #2
 8007358:	d1e1      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735a:	f7fc fa2b 	bl	80037b4 <HAL_GetTick>
 800735e:	1bc0      	subs	r0, r0, r7
 8007360:	f241 3388 	movw	r3, #5000	; 0x1388
 8007364:	4298      	cmp	r0, r3
 8007366:	d9f3      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
 8007368:	2503      	movs	r5, #3
 800736a:	e7d8      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800736c:	4867      	ldr	r0, [pc, #412]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800736e:	6902      	ldr	r2, [r0, #16]
 8007370:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007374:	4966      	ldr	r1, [pc, #408]	; (8007510 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007376:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800737a:	4313      	orrs	r3, r2
 800737c:	6103      	str	r3, [r0, #16]
 800737e:	e7db      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
 8007380:	462e      	mov	r6, r5
 8007382:	e76f      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
 8007384:	462e      	mov	r6, r5
 8007386:	e76d      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007388:	2101      	movs	r1, #1
 800738a:	f104 0008 	add.w	r0, r4, #8
 800738e:	f7ff fc3f 	bl	8006c10 <RCCEx_PLL2_Config>
 8007392:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007394:	b9e5      	cbnz	r5, 80073d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007396:	4a5d      	ldr	r2, [pc, #372]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007398:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800739a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800739e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80073a0:	430b      	orrs	r3, r1
 80073a2:	6553      	str	r3, [r2, #84]	; 0x54
 80073a4:	e008      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	2101      	movs	r1, #1
 80073a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80073ac:	f7ff fcb6 	bl	8006d1c <RCCEx_PLL3_Config>
 80073b0:	4605      	mov	r5, r0
        break;
 80073b2:	e7ef      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
 80073b4:	2601      	movs	r6, #1
 80073b6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	f013 0f02 	tst.w	r3, #2
 80073be:	d017      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80073c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d828      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80073c6:	e8df f003 	tbb	[pc, r3]
 80073ca:	050b      	.short	0x050b
 80073cc:	0b0b0b20 	.word	0x0b0b0b20
 80073d0:	462e      	mov	r6, r5
 80073d2:	e7f1      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073d4:	2101      	movs	r1, #1
 80073d6:	f104 0008 	add.w	r0, r4, #8
 80073da:	f7ff fc19 	bl	8006c10 <RCCEx_PLL2_Config>
 80073de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80073e0:	b9ed      	cbnz	r5, 800741e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073e2:	4a4a      	ldr	r2, [pc, #296]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80073e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	f013 0f04 	tst.w	r3, #4
 80073f6:	d023      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80073fc:	2b05      	cmp	r3, #5
 80073fe:	d845      	bhi.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007400:	e8df f003 	tbb	[pc, r3]
 8007404:	153d0f15 	.word	0x153d0f15
 8007408:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800740a:	2101      	movs	r1, #1
 800740c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007410:	f7ff fc84 	bl	8006d1c <RCCEx_PLL3_Config>
 8007414:	4605      	mov	r5, r0
        break;
 8007416:	e7e3      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007418:	2601      	movs	r6, #1
 800741a:	4635      	mov	r5, r6
 800741c:	e7e8      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800741e:	462e      	mov	r6, r5
 8007420:	e7e6      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007422:	2101      	movs	r1, #1
 8007424:	f104 0008 	add.w	r0, r4, #8
 8007428:	f7ff fbf2 	bl	8006c10 <RCCEx_PLL2_Config>
 800742c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800742e:	bb85      	cbnz	r5, 8007492 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007430:	4a36      	ldr	r2, [pc, #216]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007432:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007434:	f023 0307 	bic.w	r3, r3, #7
 8007438:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800743c:	430b      	orrs	r3, r1
 800743e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	f013 0f20 	tst.w	r3, #32
 8007446:	d034      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007448:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d04e      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8007452:	d823      	bhi.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x674>
 8007454:	b143      	cbz	r3, 8007468 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745a:	d11c      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800745c:	2100      	movs	r1, #0
 800745e:	f104 0008 	add.w	r0, r4, #8
 8007462:	f7ff fbd5 	bl	8006c10 <RCCEx_PLL2_Config>
 8007466:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007468:	2d00      	cmp	r5, #0
 800746a:	d148      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800746c:	4a27      	ldr	r2, [pc, #156]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800746e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007470:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007474:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007478:	430b      	orrs	r3, r1
 800747a:	6553      	str	r3, [r2, #84]	; 0x54
 800747c:	e019      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800747e:	2101      	movs	r1, #1
 8007480:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007484:	f7ff fc4a 	bl	8006d1c <RCCEx_PLL3_Config>
 8007488:	4605      	mov	r5, r0
        break;
 800748a:	e7d0      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800748c:	2601      	movs	r6, #1
 800748e:	4635      	mov	r5, r6
 8007490:	e7d6      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007492:	462e      	mov	r6, r5
 8007494:	e7d4      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007496:	2601      	movs	r6, #1
 8007498:	4635      	mov	r5, r6
 800749a:	e00a      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a0:	d0e2      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80074a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a6:	d0df      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80074a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074ac:	d0dc      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80074ae:	2601      	movs	r6, #1
 80074b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074b8:	d037      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074ba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d053      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x744>
 80074c4:	d826      	bhi.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80074c6:	b143      	cbz	r3, 80074da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074cc:	d119      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ce:	2100      	movs	r1, #0
 80074d0:	f104 0008 	add.w	r0, r4, #8
 80074d4:	f7ff fb9c 	bl	8006c10 <RCCEx_PLL2_Config>
 80074d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80074da:	2d00      	cmp	r5, #0
 80074dc:	d14d      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074de:	4a0b      	ldr	r2, [pc, #44]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80074e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80074e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80074e6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80074ea:	430b      	orrs	r3, r1
 80074ec:	6593      	str	r3, [r2, #88]	; 0x58
 80074ee:	e01c      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074f0:	2102      	movs	r1, #2
 80074f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80074f6:	f7ff fc11 	bl	8006d1c <RCCEx_PLL3_Config>
 80074fa:	4605      	mov	r5, r0
        break;
 80074fc:	e7b4      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80074fe:	462e      	mov	r6, r5
 8007500:	e7d7      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007502:	2601      	movs	r6, #1
 8007504:	4635      	mov	r5, r6
 8007506:	e010      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8007508:	58024800 	.word	0x58024800
 800750c:	58024400 	.word	0x58024400
 8007510:	00ffffcf 	.word	0x00ffffcf
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d0df      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800751a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800751e:	d0dc      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007524:	d0d9      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007526:	2601      	movs	r6, #1
 8007528:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007530:	d033      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007532:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800753a:	f000 80a3 	beq.w	8007684 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800753e:	d821      	bhi.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8007540:	b143      	cbz	r3, 8007554 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007546:	d11a      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007548:	2100      	movs	r1, #0
 800754a:	f104 0008 	add.w	r0, r4, #8
 800754e:	f7ff fb5f 	bl	8006c10 <RCCEx_PLL2_Config>
 8007552:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007554:	2d00      	cmp	r5, #0
 8007556:	f040 809c 	bne.w	8007692 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800755a:	4a81      	ldr	r2, [pc, #516]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800755c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800755e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007562:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007566:	430b      	orrs	r3, r1
 8007568:	6593      	str	r3, [r2, #88]	; 0x58
 800756a:	e016      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800756c:	2102      	movs	r1, #2
 800756e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007572:	f7ff fbd3 	bl	8006d1c <RCCEx_PLL3_Config>
 8007576:	4605      	mov	r5, r0
        break;
 8007578:	e7af      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800757a:	462e      	mov	r6, r5
 800757c:	e7d5      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800757e:	2601      	movs	r6, #1
 8007580:	4635      	mov	r5, r6
 8007582:	e00a      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x772>
 8007584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007588:	d0e4      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800758a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800758e:	d0e1      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007590:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007594:	d0de      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007596:	2601      	movs	r6, #1
 8007598:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	f013 0f08 	tst.w	r3, #8
 80075a0:	d00c      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80075a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d074      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075ac:	4a6c      	ldr	r2, [pc, #432]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80075ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80075b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	f013 0f10 	tst.w	r3, #16
 80075c2:	d00c      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80075c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075cc:	d06c      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ce:	4a64      	ldr	r2, [pc, #400]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80075d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80075d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80075da:	430b      	orrs	r3, r1
 80075dc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80075e4:	d00b      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
 80075e6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d074      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80075f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f4:	d067      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05f      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x892>
 80075fa:	2601      	movs	r6, #1
 80075fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007604:	d00c      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
 8007606:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800760a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800760e:	d07c      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007610:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007614:	d06f      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800761a:	d067      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800761c:	2601      	movs	r6, #1
 800761e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007626:	d008      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007628:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800762a:	2b00      	cmp	r3, #0
 800762c:	d076      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800762e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007632:	f000 8081 	beq.w	8007738 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007636:	2601      	movs	r6, #1
 8007638:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007640:	f040 8083 	bne.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800764a:	f000 808e 	beq.w	800776a <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
 800764e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007656:	f000 80ec 	beq.w	8007832 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800765a:	f240 8083 	bls.w	8007764 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800765e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007662:	d003      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007668:	f040 80e1 	bne.w	800782e <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
 800766c:	2d00      	cmp	r5, #0
 800766e:	f040 80e6 	bne.w	800783e <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007674:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800767e:	430b      	orrs	r3, r1
 8007680:	6553      	str	r3, [r2, #84]	; 0x54
 8007682:	e072      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007684:	2102      	movs	r1, #2
 8007686:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800768a:	f7ff fb47 	bl	8006d1c <RCCEx_PLL3_Config>
 800768e:	4605      	mov	r5, r0
        break;
 8007690:	e760      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007692:	462e      	mov	r6, r5
 8007694:	e781      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007696:	2102      	movs	r1, #2
 8007698:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800769c:	f7ff fb3e 	bl	8006d1c <RCCEx_PLL3_Config>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d083      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
 80076a4:	2601      	movs	r6, #1
 80076a6:	e781      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076a8:	2102      	movs	r1, #2
 80076aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80076ae:	f7ff fb35 	bl	8006d1c <RCCEx_PLL3_Config>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d08b      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
 80076b6:	2601      	movs	r6, #1
 80076b8:	e789      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ba:	2100      	movs	r1, #0
 80076bc:	f104 0008 	add.w	r0, r4, #8
 80076c0:	f7ff faa6 	bl	8006c10 <RCCEx_PLL2_Config>
 80076c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076c6:	b97d      	cbnz	r5, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80076ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80076cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80076d0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6593      	str	r3, [r2, #88]	; 0x58
 80076d8:	e791      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076da:	2102      	movs	r1, #2
 80076dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80076e0:	f7ff fb1c 	bl	8006d1c <RCCEx_PLL3_Config>
 80076e4:	4605      	mov	r5, r0
        break;
 80076e6:	e7ee      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80076e8:	462e      	mov	r6, r5
 80076ea:	e788      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ec:	4a1c      	ldr	r2, [pc, #112]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80076ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80076f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80076f6:	b97d      	cbnz	r5, 8007718 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80076fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80076fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007700:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007704:	430b      	orrs	r3, r1
 8007706:	6553      	str	r3, [r2, #84]	; 0x54
 8007708:	e78a      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800770a:	2101      	movs	r1, #1
 800770c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007710:	f7ff fb04 	bl	8006d1c <RCCEx_PLL3_Config>
 8007714:	4605      	mov	r5, r0
        break;
 8007716:	e7ee      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007718:	462e      	mov	r6, r5
 800771a:	e781      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800771c:	4a10      	ldr	r2, [pc, #64]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800771e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007724:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007726:	b975      	cbnz	r5, 8007746 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007728:	4a0d      	ldr	r2, [pc, #52]	; (8007760 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800772a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800772c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007730:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007732:	430b      	orrs	r3, r1
 8007734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007736:	e780      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007738:	2102      	movs	r1, #2
 800773a:	f104 0008 	add.w	r0, r4, #8
 800773e:	f7ff fa67 	bl	8006c10 <RCCEx_PLL2_Config>
 8007742:	4605      	mov	r5, r0
        break;
 8007744:	e7ef      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007746:	462e      	mov	r6, r5
 8007748:	e777      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800774a:	2102      	movs	r1, #2
 800774c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007750:	f7ff fae4 	bl	8006d1c <RCCEx_PLL3_Config>
 8007754:	2800      	cmp	r0, #0
 8007756:	f43f af75 	beq.w	8007644 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
 800775a:	2601      	movs	r6, #1
 800775c:	e772      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 8007764:	2b00      	cmp	r3, #0
 8007766:	d081      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007768:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800776a:	6823      	ldr	r3, [r4, #0]
 800776c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007770:	d006      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007772:	4a4f      	ldr	r2, [pc, #316]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007774:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800777a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800777c:	430b      	orrs	r3, r1
 800777e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007786:	d007      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007788:	4a49      	ldr	r2, [pc, #292]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800778a:	6913      	ldr	r3, [r2, #16]
 800778c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007790:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8007794:	430b      	orrs	r3, r1
 8007796:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800779e:	d006      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077a0:	4a43      	ldr	r2, [pc, #268]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80077a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80077aa:	430b      	orrs	r3, r1
 80077ac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80077b4:	d009      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077b6:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077b8:	691a      	ldr	r2, [r3, #16]
 80077ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077be:	611a      	str	r2, [r3, #16]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 80077c6:	430a      	orrs	r2, r1
 80077c8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da06      	bge.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077d0:	4a37      	ldr	r2, [pc, #220]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80077d4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80077d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80077da:	430b      	orrs	r3, r1
 80077dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80077e4:	d007      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80077e6:	4a32      	ldr	r2, [pc, #200]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80077e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80077ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80077ee:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80077f2:	430b      	orrs	r3, r1
 80077f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	f013 0f01 	tst.w	r3, #1
 80077fc:	d121      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077fe:	6863      	ldr	r3, [r4, #4]
 8007800:	f013 0f02 	tst.w	r3, #2
 8007804:	d126      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007806:	6863      	ldr	r3, [r4, #4]
 8007808:	f013 0f04 	tst.w	r3, #4
 800780c:	d12b      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800780e:	6863      	ldr	r3, [r4, #4]
 8007810:	f013 0f08 	tst.w	r3, #8
 8007814:	d130      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007816:	6863      	ldr	r3, [r4, #4]
 8007818:	f013 0f10 	tst.w	r3, #16
 800781c:	d135      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800781e:	6863      	ldr	r3, [r4, #4]
 8007820:	f013 0f20 	tst.w	r3, #32
 8007824:	d13a      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
 8007826:	b106      	cbz	r6, 800782a <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
 8007828:	2601      	movs	r6, #1
}
 800782a:	4630      	mov	r0, r6
 800782c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 800782e:	2601      	movs	r6, #1
 8007830:	e79b      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007834:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800783a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800783c:	e716      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x844>
 800783e:	462e      	mov	r6, r5
 8007840:	e793      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007842:	2100      	movs	r1, #0
 8007844:	f104 0008 	add.w	r0, r4, #8
 8007848:	f7ff f9e2 	bl	8006c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800784c:	2800      	cmp	r0, #0
 800784e:	d0d6      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
 8007850:	4606      	mov	r6, r0
 8007852:	e7d4      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007854:	2101      	movs	r1, #1
 8007856:	f104 0008 	add.w	r0, r4, #8
 800785a:	f7ff f9d9 	bl	8006c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800785e:	2800      	cmp	r0, #0
 8007860:	d0d1      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
 8007862:	4606      	mov	r6, r0
 8007864:	e7cf      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007866:	2102      	movs	r1, #2
 8007868:	f104 0008 	add.w	r0, r4, #8
 800786c:	f7ff f9d0 	bl	8006c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007870:	2800      	cmp	r0, #0
 8007872:	d0cc      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
 8007874:	4606      	mov	r6, r0
 8007876:	e7ca      	b.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007878:	2100      	movs	r1, #0
 800787a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800787e:	f7ff fa4d 	bl	8006d1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007882:	2800      	cmp	r0, #0
 8007884:	d0c7      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
 8007886:	4606      	mov	r6, r0
 8007888:	e7c5      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788a:	2101      	movs	r1, #1
 800788c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007890:	f7ff fa44 	bl	8006d1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007894:	2800      	cmp	r0, #0
 8007896:	d0c2      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
 8007898:	4606      	mov	r6, r0
 800789a:	e7c0      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800789c:	2102      	movs	r1, #2
 800789e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80078a2:	f7ff fa3b 	bl	8006d1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d0bd      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
 80078aa:	4606      	mov	r6, r0
 80078ac:	e7bb      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80078ae:	bf00      	nop
 80078b0:	58024400 	.word	0x58024400

080078b4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80078b4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80078b6:	f7ff f977 	bl	8006ba8 <HAL_RCC_GetHCLKFreq>
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80078c2:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80078c4:	5cd3      	ldrb	r3, [r2, r3]
 80078c6:	f003 031f 	and.w	r3, r3, #31
}
 80078ca:	40d8      	lsrs	r0, r3
 80078cc:	bd08      	pop	{r3, pc}
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
 80078d4:	08018510 	.word	0x08018510

080078d8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80078d8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078da:	4b78      	ldr	r3, [pc, #480]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80078dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078de:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80078e0:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078e6:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ec:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 80078f0:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 80078f4:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 80078f8:	f000 80db 	beq.w	8007ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 80078fc:	f002 0203 	and.w	r2, r2, #3
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007908:	2a01      	cmp	r2, #1
 800790a:	d066      	beq.n	80079da <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 800790c:	2a02      	cmp	r2, #2
 800790e:	f000 80b3 	beq.w	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007912:	b1e2      	cbz	r2, 800794e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007914:	ee07 ca10 	vmov	s14, ip
 8007918:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800791c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8007ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8007920:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007924:	4b65      	ldr	r3, [pc, #404]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792c:	ee06 3a90 	vmov	s13, r3
 8007930:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007934:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007938:	ee67 7a86 	vmul.f32	s15, s15, s12
 800793c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007944:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007948:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 800794c:	e061      	b.n	8007a12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800794e:	4b5b      	ldr	r3, [pc, #364]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f013 0f20 	tst.w	r3, #32
 8007956:	d023      	beq.n	80079a0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007958:	4958      	ldr	r1, [pc, #352]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800795a:	680a      	ldr	r2, [r1, #0]
 800795c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007960:	4b59      	ldr	r3, [pc, #356]	; (8007ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8007962:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007964:	ee07 3a10 	vmov	s14, r3
 8007968:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800796c:	ee07 ca10 	vmov	s14, ip
 8007970:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007974:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007978:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee06 3a90 	vmov	s13, r3
 8007982:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007986:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800798a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800798e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800799e:	e038      	b.n	8007a12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079a0:	ee07 ca10 	vmov	s14, ip
 80079a4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80079a8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8007acc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80079ac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80079b0:	4b42      	ldr	r3, [pc, #264]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b8:	ee06 3a90 	vmov	s13, r3
 80079bc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80079c0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80079c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80079c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80079d8:	e01b      	b.n	8007a12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079da:	ee07 ca10 	vmov	s14, ip
 80079de:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80079e2:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8007ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80079e6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80079ea:	4b34      	ldr	r3, [pc, #208]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f2:	ee06 3a90 	vmov	s13, r3
 80079f6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80079fa:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80079fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a12:	4a2a      	ldr	r2, [pc, #168]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007a14:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007a16:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007a2e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007a32:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007a36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007a38:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a48:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007a4c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007a50:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007a54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007a56:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007a6a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007a6e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a76:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a78:	ee07 ca10 	vmov	s14, ip
 8007a7c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007a80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8007a84:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a90:	ee06 3a90 	vmov	s13, r3
 8007a94:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007a98:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007a9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aac:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007ab0:	e7af      	b.n	8007a12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ab6:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ab8:	6083      	str	r3, [r0, #8]
}
 8007aba:	e7da      	b.n	8007a72 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8007abc:	58024400 	.word	0x58024400
 8007ac0:	4a742400 	.word	0x4a742400
 8007ac4:	39000000 	.word	0x39000000
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	4c742400 	.word	0x4c742400
 8007ad0:	4bbebc20 	.word	0x4bbebc20

08007ad4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8007ad4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad6:	4b78      	ldr	r3, [pc, #480]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ada:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007adc:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ae2:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8007af0:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8007af4:	f000 80db 	beq.w	8007cae <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8007af8:	f002 0203 	and.w	r2, r2, #3
 8007afc:	ee07 3a90 	vmov	s15, r3
 8007b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007b04:	2a01      	cmp	r2, #1
 8007b06:	d066      	beq.n	8007bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8007b08:	2a02      	cmp	r2, #2
 8007b0a:	f000 80b3 	beq.w	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b0e:	b1e2      	cbz	r2, 8007b4a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b10:	ee07 ca10 	vmov	s14, ip
 8007b14:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007b18:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8007b1c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007b20:	4b65      	ldr	r3, [pc, #404]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b28:	ee06 3a90 	vmov	s13, r3
 8007b2c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007b30:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007b34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b44:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007b48:	e061      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b4a:	4b5b      	ldr	r3, [pc, #364]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f013 0f20 	tst.w	r3, #32
 8007b52:	d023      	beq.n	8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b54:	4958      	ldr	r1, [pc, #352]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007b56:	680a      	ldr	r2, [r1, #0]
 8007b58:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007b5c:	4b59      	ldr	r3, [pc, #356]	; (8007cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8007b5e:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b60:	ee07 3a10 	vmov	s14, r3
 8007b64:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007b68:	ee07 ca10 	vmov	s14, ip
 8007b6c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007b70:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007b74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee06 3a90 	vmov	s13, r3
 8007b7e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007b82:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007b86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b9a:	e038      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b9c:	ee07 ca10 	vmov	s14, ip
 8007ba0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007ba4:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8007ba8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007bac:	4b42      	ldr	r3, [pc, #264]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb4:	ee06 3a90 	vmov	s13, r3
 8007bb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007bbc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007bc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007bd4:	e01b      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bd6:	ee07 ca10 	vmov	s14, ip
 8007bda:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007bde:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8007cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8007be2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007be6:	4b34      	ldr	r3, [pc, #208]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	ee06 3a90 	vmov	s13, r3
 8007bf2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007bf6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007bfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c0e:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007c10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007c12:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c26:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007c2a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007c2e:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007c34:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c44:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007c48:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007c4c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007c52:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007c66:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c6a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c72:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c74:	ee07 ca10 	vmov	s14, ip
 8007c78:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007c7c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007ccc <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8007c80:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8c:	ee06 3a90 	vmov	s13, r3
 8007c90:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007c94:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007c98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007cac:	e7af      	b.n	8007c0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cb2:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cb4:	6083      	str	r3, [r0, #8]
}
 8007cb6:	e7da      	b.n	8007c6e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	4a742400 	.word	0x4a742400
 8007cc0:	39000000 	.word	0x39000000
 8007cc4:	03d09000 	.word	0x03d09000
 8007cc8:	4c742400 	.word	0x4c742400
 8007ccc:	4bbebc20 	.word	0x4bbebc20

08007cd0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8007cd0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd2:	4b78      	ldr	r3, [pc, #480]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007cd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007cd8:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cde:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007ce8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8007cec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8007cf0:	f000 80db 	beq.w	8007eaa <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8007cf4:	f002 0203 	and.w	r2, r2, #3
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007d00:	2a01      	cmp	r2, #1
 8007d02:	d066      	beq.n	8007dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8007d04:	2a02      	cmp	r2, #2
 8007d06:	f000 80b3 	beq.w	8007e70 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 8007d0a:	b1e2      	cbz	r2, 8007d46 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d0c:	ee07 ca10 	vmov	s14, ip
 8007d10:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007d14:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8007eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8007d18:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007d1c:	4b65      	ldr	r3, [pc, #404]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	ee06 3a90 	vmov	s13, r3
 8007d28:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007d2c:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8007d30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007d34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d40:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007d44:	e061      	b.n	8007e0a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d46:	4b5b      	ldr	r3, [pc, #364]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f013 0f20 	tst.w	r3, #32
 8007d4e:	d023      	beq.n	8007d98 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d50:	4958      	ldr	r1, [pc, #352]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007d52:	680a      	ldr	r2, [r1, #0]
 8007d54:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007d58:	4b59      	ldr	r3, [pc, #356]	; (8007ec0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 8007d5a:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d5c:	ee07 3a10 	vmov	s14, r3
 8007d60:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007d64:	ee07 ca10 	vmov	s14, ip
 8007d68:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007d6c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007d70:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	ee06 3a90 	vmov	s13, r3
 8007d7a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007d7e:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8007d82:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d96:	e038      	b.n	8007e0a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d98:	ee07 ca10 	vmov	s14, ip
 8007d9c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007da0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8007eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8007da4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007da8:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	ee06 3a90 	vmov	s13, r3
 8007db4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007db8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8007dbc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd0:	e01b      	b.n	8007e0a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd2:	ee07 ca10 	vmov	s14, ip
 8007dd6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007dda:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8007ec4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 8007dde:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007de2:	4b34      	ldr	r3, [pc, #208]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dea:	ee06 3a90 	vmov	s13, r3
 8007dee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007df2:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8007df6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e06:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007e0a:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007e0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e0e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e22:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007e26:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007e2a:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007e2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e30:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007e34:	ee07 3a90 	vmov	s15, r3
 8007e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e40:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007e44:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007e48:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007e4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007e4e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e62:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007e66:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e6e:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e70:	ee07 ca10 	vmov	s14, ip
 8007e74:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007e78:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 8007e7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007e80:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e88:	ee06 3a90 	vmov	s13, r3
 8007e8c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e90:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8007e94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007ea8:	e7af      	b.n	8007e0a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007eae:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007eb0:	6083      	str	r3, [r0, #8]
}
 8007eb2:	e7da      	b.n	8007e6a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	4c742400 	.word	0x4c742400
 8007ebc:	39000000 	.word	0x39000000
 8007ec0:	03d09000 	.word	0x03d09000
 8007ec4:	4a742400 	.word	0x4a742400
 8007ec8:	4bbebc20 	.word	0x4bbebc20

08007ecc <HAL_RCCEx_GetPeriphCLKFreq>:
{
 8007ecc:	b500      	push	{lr}
 8007ece:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ed0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	d02d      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007ed8:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8007edc:	430b      	orrs	r3, r1
 8007ede:	d07d      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ee0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	f000 80d3 	beq.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007eea:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	f000 812b 	beq.w	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007ef4:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	f000 818b 	beq.w	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007efe:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8007f02:	430b      	orrs	r3, r1
 8007f04:	f000 81e3 	beq.w	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f08:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	f000 822c 	beq.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007f12:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8007f16:	430b      	orrs	r3, r1
 8007f18:	f000 826f 	beq.w	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007f1c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8007f20:	430b      	orrs	r3, r1
 8007f22:	f000 8290 	beq.w	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007f26:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8007f2a:	4308      	orrs	r0, r1
 8007f2c:	f000 82d4 	beq.w	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 8007f30:	2000      	movs	r0, #0
 8007f32:	e302      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f34:	4b95      	ldr	r3, [pc, #596]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f38:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	f200 82f3 	bhi.w	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8007f42:	e8df f003 	tbb	[pc, r3]
 8007f46:	1005      	.short	0x1005
 8007f48:	031b      	.short	0x031b
 8007f4a:	26          	.byte	0x26
 8007f4b:	00          	.byte	0x00
 8007f4c:	4890      	ldr	r0, [pc, #576]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f4e:	e2f4      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f50:	4b8e      	ldr	r3, [pc, #568]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007f58:	f000 82ef 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f5c:	a807      	add	r0, sp, #28
 8007f5e:	f7ff feb7 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f62:	9808      	ldr	r0, [sp, #32]
 8007f64:	e2e9      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f66:	4b89      	ldr	r3, [pc, #548]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007f6e:	f000 82e4 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f72:	a804      	add	r0, sp, #16
 8007f74:	f7ff fcb0 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f78:	9804      	ldr	r0, [sp, #16]
 8007f7a:	e2de      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f7c:	4b83      	ldr	r3, [pc, #524]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007f84:	f000 82d9 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f88:	a801      	add	r0, sp, #4
 8007f8a:	f7ff fda3 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f8e:	9801      	ldr	r0, [sp, #4]
 8007f90:	e2d3      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f92:	4a7e      	ldr	r2, [pc, #504]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	f012 0f04 	tst.w	r2, #4
 8007fa0:	d007      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007fa2:	b933      	cbnz	r3, 8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fa4:	4b79      	ldr	r3, [pc, #484]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007fac:	4879      	ldr	r0, [pc, #484]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007fae:	40d8      	lsrs	r0, r3
 8007fb0:	e2c3      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fb2:	4a76      	ldr	r2, [pc, #472]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007fba:	d003      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 8007fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc0:	f000 82b4 	beq.w	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fc4:	4a71      	ldr	r2, [pc, #452]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8007fcc:	f000 82b0 	beq.w	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8007fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd4:	f000 82ae 	beq.w	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 8007fd8:	2000      	movs	r0, #0
 8007fda:	e2ae      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007fdc:	4b6b      	ldr	r3, [pc, #428]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8007fe4:	2b80      	cmp	r3, #128	; 0x80
 8007fe6:	d033      	beq.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007fe8:	d915      	bls.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007fea:	2bc0      	cmp	r3, #192	; 0xc0
 8007fec:	f000 82a4 	beq.w	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8007ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff4:	d11f      	bne.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ff6:	4a65      	ldr	r2, [pc, #404]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007ff8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ffe:	6812      	ldr	r2, [r2, #0]
 8008000:	f012 0f04 	tst.w	r2, #4
 8008004:	d02f      	beq.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008006:	bb73      	cbnz	r3, 8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008008:	4b60      	ldr	r3, [pc, #384]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008010:	4860      	ldr	r0, [pc, #384]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008012:	40d8      	lsrs	r0, r3
 8008014:	e291      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008016:	b183      	cbz	r3, 800803a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d10a      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800801c:	4b5b      	ldr	r3, [pc, #364]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800801e:	6818      	ldr	r0, [r3, #0]
 8008020:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008024:	f000 8289 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008028:	a804      	add	r0, sp, #16
 800802a:	f7ff fc55 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800802e:	9804      	ldr	r0, [sp, #16]
 8008030:	e283      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008032:	2000      	movs	r0, #0
 8008034:	e281      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008036:	2000      	movs	r0, #0
 8008038:	e27f      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800803a:	4b54      	ldr	r3, [pc, #336]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008042:	f000 827a 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008046:	a807      	add	r0, sp, #28
 8008048:	f7ff fe42 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800804c:	9808      	ldr	r0, [sp, #32]
 800804e:	e274      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008050:	4b4e      	ldr	r3, [pc, #312]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008058:	f000 826f 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	a801      	add	r0, sp, #4
 800805e:	f7ff fd39 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008062:	9801      	ldr	r0, [sp, #4]
 8008064:	e269      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008066:	4a49      	ldr	r2, [pc, #292]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800806e:	d003      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008074:	f000 8264 	beq.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008078:	4a44      	ldr	r2, [pc, #272]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008080:	f000 8260 	beq.w	8008544 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8008084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008088:	f000 825e 	beq.w	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 800808c:	2000      	movs	r0, #0
 800808e:	e254      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008090:	4b3e      	ldr	r3, [pc, #248]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008094:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800809c:	d035      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800809e:	d916      	bls.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80080a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080a4:	f000 8252 	beq.w	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80080a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080ac:	d120      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080ae:	4a37      	ldr	r2, [pc, #220]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80080b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80080b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080b6:	6812      	ldr	r2, [r2, #0]
 80080b8:	f012 0f04 	tst.w	r2, #4
 80080bc:	d030      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80080be:	bb7b      	cbnz	r3, 8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080c0:	4b32      	ldr	r3, [pc, #200]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80080c8:	4832      	ldr	r0, [pc, #200]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80080ca:	40d8      	lsrs	r0, r3
 80080cc:	e235      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80080ce:	b18b      	cbz	r3, 80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80080d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d4:	d10a      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080d6:	4b2d      	ldr	r3, [pc, #180]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80080de:	f000 822c 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e2:	a804      	add	r0, sp, #16
 80080e4:	f7ff fbf8 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080e8:	9804      	ldr	r0, [sp, #16]
 80080ea:	e226      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80080ec:	2000      	movs	r0, #0
 80080ee:	e224      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e222      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080f4:	4b25      	ldr	r3, [pc, #148]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80080f6:	6818      	ldr	r0, [r3, #0]
 80080f8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80080fc:	f000 821d 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008100:	a807      	add	r0, sp, #28
 8008102:	f7ff fde5 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008106:	9808      	ldr	r0, [sp, #32]
 8008108:	e217      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800810a:	4b20      	ldr	r3, [pc, #128]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008112:	f000 8212 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008116:	a801      	add	r0, sp, #4
 8008118:	f7ff fcdc 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800811c:	9801      	ldr	r0, [sp, #4]
 800811e:	e20c      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008120:	4a1a      	ldr	r2, [pc, #104]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008122:	6812      	ldr	r2, [r2, #0]
 8008124:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008128:	d003      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800812a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800812e:	f000 820f 	beq.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008132:	4a16      	ldr	r2, [pc, #88]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008134:	6812      	ldr	r2, [r2, #0]
 8008136:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800813a:	f000 820b 	beq.w	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800813e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008142:	f000 8209 	beq.w	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 8008146:	2000      	movs	r0, #0
 8008148:	e1f7      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800814a:	4b10      	ldr	r3, [pc, #64]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800814c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008156:	d03d      	beq.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008158:	d91e      	bls.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800815a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800815e:	f000 81fd 	beq.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8008162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008166:	d128      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008168:	4a08      	ldr	r2, [pc, #32]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800816a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800816c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008170:	6812      	ldr	r2, [r2, #0]
 8008172:	f012 0f04 	tst.w	r2, #4
 8008176:	d038      	beq.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008178:	2b00      	cmp	r3, #0
 800817a:	d136      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800817c:	4b03      	ldr	r3, [pc, #12]	; (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008184:	4803      	ldr	r0, [pc, #12]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008186:	40d8      	lsrs	r0, r3
 8008188:	e1d7      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800818a:	bf00      	nop
 800818c:	58024400 	.word	0x58024400
 8008190:	00bb8000 	.word	0x00bb8000
 8008194:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 8008198:	b18b      	cbz	r3, 80081be <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800819a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800819e:	d10a      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081a0:	4b9a      	ldr	r3, [pc, #616]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80081a8:	f000 81c7 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ac:	a804      	add	r0, sp, #16
 80081ae:	f7ff fb93 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081b2:	9804      	ldr	r0, [sp, #16]
 80081b4:	e1c1      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80081b6:	2000      	movs	r0, #0
 80081b8:	e1bf      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80081ba:	2000      	movs	r0, #0
 80081bc:	e1bd      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081be:	4b93      	ldr	r3, [pc, #588]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80081c6:	f000 81b8 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081ca:	a807      	add	r0, sp, #28
 80081cc:	f7ff fd80 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081d0:	9808      	ldr	r0, [sp, #32]
 80081d2:	e1b2      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d4:	4b8d      	ldr	r3, [pc, #564]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80081dc:	f000 81ad 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e0:	a801      	add	r0, sp, #4
 80081e2:	f7ff fc77 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80081e6:	9801      	ldr	r0, [sp, #4]
 80081e8:	e1a7      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081ea:	4a88      	ldr	r2, [pc, #544]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80081f2:	d003      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80081f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081f8:	f000 81b2 	beq.w	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081fc:	4a83      	ldr	r2, [pc, #524]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008204:	f000 81ae 	beq.w	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8008208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800820c:	f000 81ac 	beq.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 8008210:	2000      	movs	r0, #0
 8008212:	e192      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008214:	4b7d      	ldr	r3, [pc, #500]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008218:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800821c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008220:	d035      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008222:	d916      	bls.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008228:	f000 81a0 	beq.w	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800822c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008230:	d120      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008232:	4a76      	ldr	r2, [pc, #472]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008234:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800823a:	6812      	ldr	r2, [r2, #0]
 800823c:	f012 0f04 	tst.w	r2, #4
 8008240:	d030      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8008242:	bb7b      	cbnz	r3, 80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008244:	4b71      	ldr	r3, [pc, #452]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800824c:	4870      	ldr	r0, [pc, #448]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800824e:	40d8      	lsrs	r0, r3
 8008250:	e173      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008252:	b18b      	cbz	r3, 8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008258:	d10a      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800825a:	4b6c      	ldr	r3, [pc, #432]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008262:	f000 816a 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008266:	a804      	add	r0, sp, #16
 8008268:	f7ff fb36 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800826c:	9804      	ldr	r0, [sp, #16]
 800826e:	e164      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008270:	2000      	movs	r0, #0
 8008272:	e162      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008274:	2000      	movs	r0, #0
 8008276:	e160      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008278:	4b64      	ldr	r3, [pc, #400]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008280:	f000 815b 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008284:	a807      	add	r0, sp, #28
 8008286:	f7ff fd23 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800828a:	9808      	ldr	r0, [sp, #32]
 800828c:	e155      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800828e:	4b5f      	ldr	r3, [pc, #380]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008296:	f000 8150 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800829a:	a801      	add	r0, sp, #4
 800829c:	f7ff fc1a 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082a0:	9801      	ldr	r0, [sp, #4]
 80082a2:	e14a      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082a4:	4a59      	ldr	r2, [pc, #356]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082a6:	6812      	ldr	r2, [r2, #0]
 80082a8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80082ac:	d003      	beq.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80082ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b2:	f000 815d 	beq.w	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082b6:	4a55      	ldr	r2, [pc, #340]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80082be:	f000 8159 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 80082c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c6:	f000 8157 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 80082ca:	2000      	movs	r0, #0
 80082cc:	e135      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80082ce:	4b4f      	ldr	r3, [pc, #316]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80082d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082da:	d032      	beq.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80082dc:	d816      	bhi.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80082de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e2:	d023      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e8:	d10a      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082ea:	4b48      	ldr	r3, [pc, #288]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80082f2:	f000 8122 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082f6:	a801      	add	r0, sp, #4
 80082f8:	f7ff fbec 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082fc:	9802      	ldr	r0, [sp, #8]
 80082fe:	e11c      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008300:	b913      	cbnz	r3, 8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008302:	f7fe fc73 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
        break;
 8008306:	e118      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008308:	2000      	movs	r0, #0
 800830a:	e116      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800830c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008310:	d023      	beq.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008316:	d107      	bne.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008318:	4b3c      	ldr	r3, [pc, #240]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800831a:	6818      	ldr	r0, [r3, #0]
 800831c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008320:	f000 810b 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008324:	483b      	ldr	r0, [pc, #236]	; (8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8008326:	e108      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008328:	2000      	movs	r0, #0
 800832a:	e106      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800832c:	4b37      	ldr	r3, [pc, #220]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008334:	f000 8101 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008338:	a804      	add	r0, sp, #16
 800833a:	f7ff facd 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800833e:	9805      	ldr	r0, [sp, #20]
 8008340:	e0fb      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008342:	4b32      	ldr	r3, [pc, #200]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	f010 0004 	ands.w	r0, r0, #4
 800834a:	f000 80f6 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008354:	482e      	ldr	r0, [pc, #184]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008356:	40d8      	lsrs	r0, r3
 8008358:	e0ef      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800835a:	4b2c      	ldr	r3, [pc, #176]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008362:	f000 80ea 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008366:	482c      	ldr	r0, [pc, #176]	; (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008368:	e0e7      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800836a:	4b28      	ldr	r3, [pc, #160]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800836c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008376:	d010      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837c:	d018      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800837e:	b10b      	cbz	r3, 8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008380:	2000      	movs	r0, #0
 8008382:	e0da      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008384:	4b21      	ldr	r3, [pc, #132]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800838c:	f000 80d5 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008390:	a804      	add	r0, sp, #16
 8008392:	f7ff faa1 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008396:	9804      	ldr	r0, [sp, #16]
 8008398:	e0cf      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800839a:	4b1c      	ldr	r3, [pc, #112]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800839c:	6818      	ldr	r0, [r3, #0]
 800839e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80083a2:	f000 80ca 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a6:	a801      	add	r0, sp, #4
 80083a8:	f7ff fb94 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083ac:	9803      	ldr	r0, [sp, #12]
 80083ae:	e0c4      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083b0:	4a16      	ldr	r2, [pc, #88]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80083b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	f012 0f04 	tst.w	r2, #4
 80083be:	d007      	beq.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80083c0:	b933      	cbnz	r3, 80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083c2:	4b12      	ldr	r3, [pc, #72]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80083ca:	4811      	ldr	r0, [pc, #68]	; (8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80083cc:	40d8      	lsrs	r0, r3
 80083ce:	e0b4      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083d0:	4a0e      	ldr	r2, [pc, #56]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80083d8:	d003      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80083da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083de:	f000 80cd 	beq.w	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083e4:	6812      	ldr	r2, [r2, #0]
 80083e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80083ea:	f000 80c9 	beq.w	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f2:	f000 80c7 	beq.w	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 80083f6:	2000      	movs	r0, #0
 80083f8:	e09f      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80083fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 80083fe:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008402:	d00b      	beq.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 8008404:	b9ab      	cbnz	r3, 8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008406:	2000      	movs	r0, #0
 8008408:	e097      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800840a:	bf00      	nop
 800840c:	58024400 	.word	0x58024400
 8008410:	03d09000 	.word	0x03d09000
 8008414:	017d7840 	.word	0x017d7840
 8008418:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800841c:	4b5a      	ldr	r3, [pc, #360]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008424:	f000 8089 	beq.w	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008428:	a807      	add	r0, sp, #28
 800842a:	f7ff fc51 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842e:	9808      	ldr	r0, [sp, #32]
 8008430:	e083      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008432:	4b55      	ldr	r3, [pc, #340]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800843a:	d07e      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843c:	a804      	add	r0, sp, #16
 800843e:	f7ff fa4b 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008442:	9806      	ldr	r0, [sp, #24]
 8008444:	e079      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008446:	4b50      	ldr	r3, [pc, #320]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800844e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008452:	d02f      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008454:	d815      	bhi.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8008456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800845a:	d021      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800845c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008460:	d109      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008462:	4b49      	ldr	r3, [pc, #292]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800846a:	d066      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800846c:	a801      	add	r0, sp, #4
 800846e:	f7ff fb31 	bl	8007ad4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008472:	9802      	ldr	r0, [sp, #8]
 8008474:	e061      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008476:	b913      	cbnz	r3, 800847e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008478:	f7ff fa1c 	bl	80078b4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800847c:	e05d      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800847e:	2000      	movs	r0, #0
 8008480:	e05b      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008486:	d020      	beq.n	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800848c:	d106      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800848e:	4b3e      	ldr	r3, [pc, #248]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008496:	d050      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008498:	483c      	ldr	r0, [pc, #240]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800849a:	e04e      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800849c:	2000      	movs	r0, #0
 800849e:	e04c      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a0:	4b39      	ldr	r3, [pc, #228]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80084a8:	d047      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084aa:	a804      	add	r0, sp, #16
 80084ac:	f7ff fa14 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084b0:	9805      	ldr	r0, [sp, #20]
 80084b2:	e042      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b4:	4b34      	ldr	r3, [pc, #208]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	f010 0004 	ands.w	r0, r0, #4
 80084bc:	d03d      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80084c4:	4832      	ldr	r0, [pc, #200]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 80084c6:	40d8      	lsrs	r0, r3
 80084c8:	e037      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80084ca:	4b2f      	ldr	r3, [pc, #188]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80084d2:	d032      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80084d4:	482f      	ldr	r0, [pc, #188]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80084d6:	e030      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80084d8:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80084da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80084e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e4:	d00c      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80084e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ea:	d013      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80084ec:	b10b      	cbz	r3, 80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80084ee:	2000      	movs	r0, #0
  return frequency;
 80084f0:	e023      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084f2:	4b25      	ldr	r3, [pc, #148]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80084fa:	d01e      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80084fc:	4823      	ldr	r0, [pc, #140]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80084fe:	e01c      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008500:	4b21      	ldr	r3, [pc, #132]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008508:	d017      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800850a:	a807      	add	r0, sp, #28
 800850c:	f7ff fbe0 	bl	8007cd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008510:	9808      	ldr	r0, [sp, #32]
 8008512:	e012      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008514:	4b1c      	ldr	r3, [pc, #112]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008516:	6818      	ldr	r0, [r3, #0]
 8008518:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800851c:	d00d      	beq.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800851e:	a804      	add	r0, sp, #16
 8008520:	f7ff f9da 	bl	80078d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008524:	9805      	ldr	r0, [sp, #20]
 8008526:	e008      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008528:	2000      	movs	r0, #0
 800852a:	e006      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800852c:	4819      	ldr	r0, [pc, #100]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800852e:	e004      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008530:	2000      	movs	r0, #0
 8008532:	e002      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008534:	4815      	ldr	r0, [pc, #84]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008536:	e000      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008538:	4817      	ldr	r0, [pc, #92]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 800853a:	b00b      	add	sp, #44	; 0x2c
 800853c:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8008540:	4814      	ldr	r0, [pc, #80]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008542:	e7fa      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008544:	2000      	movs	r0, #0
 8008546:	e7f8      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008548:	4810      	ldr	r0, [pc, #64]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800854a:	e7f6      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800854c:	4812      	ldr	r0, [pc, #72]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800854e:	e7f4      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008550:	4810      	ldr	r0, [pc, #64]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008552:	e7f2      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008554:	2000      	movs	r0, #0
 8008556:	e7f0      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008558:	480c      	ldr	r0, [pc, #48]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800855a:	e7ee      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800855c:	480e      	ldr	r0, [pc, #56]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800855e:	e7ec      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008560:	480c      	ldr	r0, [pc, #48]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008562:	e7ea      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008564:	2000      	movs	r0, #0
 8008566:	e7e8      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800856a:	e7e6      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800856c:	480a      	ldr	r0, [pc, #40]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800856e:	e7e4      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008570:	4808      	ldr	r0, [pc, #32]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008572:	e7e2      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008574:	2000      	movs	r0, #0
 8008576:	e7e0      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008578:	4804      	ldr	r0, [pc, #16]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800857a:	e7de      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800857c:	4805      	ldr	r0, [pc, #20]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800857e:	e7dc      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008580:	2000      	movs	r0, #0
 8008582:	e7da      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008584:	4801      	ldr	r0, [pc, #4]	; (800858c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008586:	e7d8      	b.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008588:	58024400 	.word	0x58024400
 800858c:	017d7840 	.word	0x017d7840
 8008590:	03d09000 	.word	0x03d09000
 8008594:	003d0900 	.word	0x003d0900
 8008598:	00bb8000 	.word	0x00bb8000

0800859c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800859c:	2800      	cmp	r0, #0
 800859e:	d03b      	beq.n	8008618 <HAL_RNG_Init+0x7c>
{
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80085a4:	7a43      	ldrb	r3, [r0, #9]
 80085a6:	b1b3      	cbz	r3, 80085d6 <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80085a8:	2302      	movs	r3, #2
 80085aa:	7263      	strb	r3, [r4, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	6813      	ldr	r3, [r2, #0]
 80085b0:	f023 0320 	bic.w	r3, r3, #32
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	430b      	orrs	r3, r1
 80085b8:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80085ba:	6822      	ldr	r2, [r4, #0]
 80085bc:	6813      	ldr	r3, [r2, #0]
 80085be:	f043 0304 	orr.w	r3, r3, #4
 80085c2:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80085cc:	d007      	beq.n	80085de <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80085ce:	2304      	movs	r3, #4
 80085d0:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 80085d2:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80085d6:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80085d8:	f7f9 ffcc 	bl	8002574 <HAL_RNG_MspInit>
 80085dc:	e7e4      	b.n	80085a8 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 80085de:	f7fb f8e9 	bl	80037b4 <HAL_GetTick>
 80085e2:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f013 0f04 	tst.w	r3, #4
 80085ec:	d00f      	beq.n	800860e <HAL_RNG_Init+0x72>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80085ee:	f7fb f8e1 	bl	80037b4 <HAL_GetTick>
 80085f2:	1b40      	subs	r0, r0, r5
 80085f4:	2802      	cmp	r0, #2
 80085f6:	d9f5      	bls.n	80085e4 <HAL_RNG_Init+0x48>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f013 0f04 	tst.w	r3, #4
 8008600:	d0f0      	beq.n	80085e4 <HAL_RNG_Init+0x48>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008602:	2304      	movs	r3, #4
 8008604:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008606:	2302      	movs	r3, #2
 8008608:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800860a:	2001      	movs	r0, #1
 800860c:	e7e2      	b.n	80085d4 <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800860e:	2301      	movs	r3, #1
 8008610:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008612:	2000      	movs	r0, #0
 8008614:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8008616:	e7dd      	b.n	80085d4 <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8008618:	2001      	movs	r0, #1
}
 800861a:	4770      	bx	lr

0800861c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800861e:	7a03      	ldrb	r3, [r0, #8]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d030      	beq.n	8008686 <HAL_RNG_GenerateRandomNumber+0x6a>
 8008624:	4604      	mov	r4, r0
 8008626:	460e      	mov	r6, r1
 8008628:	2301      	movs	r3, #1
 800862a:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800862c:	7a45      	ldrb	r5, [r0, #9]
 800862e:	b2ed      	uxtb	r5, r5
 8008630:	429d      	cmp	r5, r3
 8008632:	d006      	beq.n	8008642 <HAL_RNG_GenerateRandomNumber+0x26>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008634:	2304      	movs	r3, #4
 8008636:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8008638:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800863a:	2300      	movs	r3, #0
 800863c:	7223      	strb	r3, [r4, #8]

  return status;
}
 800863e:	4628      	mov	r0, r5
 8008640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008642:	2302      	movs	r3, #2
 8008644:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8008646:	f7fb f8b5 	bl	80037b4 <HAL_GetTick>
 800864a:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	f012 0f01 	tst.w	r2, #1
 8008654:	d110      	bne.n	8008678 <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008656:	f7fb f8ad 	bl	80037b4 <HAL_GetTick>
 800865a:	1bc0      	subs	r0, r0, r7
 800865c:	2802      	cmp	r0, #2
 800865e:	d9f5      	bls.n	800864c <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f013 0f01 	tst.w	r3, #1
 8008668:	d1f0      	bne.n	800864c <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
 800866a:	2301      	movs	r3, #1
 800866c:	7263      	strb	r3, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800866e:	2302      	movs	r3, #2
 8008670:	60e3      	str	r3, [r4, #12]
          __HAL_UNLOCK(hrng);
 8008672:	2300      	movs	r3, #0
 8008674:	7223      	strb	r3, [r4, #8]
          return HAL_ERROR;
 8008676:	e7e2      	b.n	800863e <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800867c:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800867e:	2301      	movs	r3, #1
 8008680:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8008682:	2500      	movs	r5, #0
 8008684:	e7d9      	b.n	800863a <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8008686:	2502      	movs	r5, #2
 8008688:	e7d9      	b.n	800863e <HAL_RNG_GenerateRandomNumber+0x22>

0800868a <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800868a:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800868c:	2000      	movs	r0, #0
 800868e:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008692:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008696:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800869a:	2802      	cmp	r0, #2
 800869c:	bf18      	it	ne
 800869e:	2800      	cmpne	r0, #0
 80086a0:	d11f      	bne.n	80086e2 <SAI_InitI2S+0x58>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80086a2:	2000      	movs	r0, #0
 80086a4:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80086a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80086ac:	f8cc 005c 	str.w	r0, [ip, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80086b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80086b4:	f8cc 0074 	str.w	r0, [ip, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80086b8:	2000      	movs	r0, #0
 80086ba:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80086be:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80086c2:	f013 0f01 	tst.w	r3, #1
 80086c6:	d168      	bne.n	800879a <SAI_InitI2S+0x110>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 80086c8:	b979      	cbnz	r1, 80086ea <SAI_InitI2S+0x60>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80086ca:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80086ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80086d2:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 80086d6:	2a03      	cmp	r2, #3
 80086d8:	d83e      	bhi.n	8008758 <SAI_InitI2S+0xce>
 80086da:	e8df f002 	tbb	[pc, r2]
 80086de:	3f0e      	.short	0x3f0e
 80086e0:	2e1f      	.short	0x2e1f
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80086e2:	2001      	movs	r0, #1
 80086e4:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
 80086e8:	e7de      	b.n	80086a8 <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80086ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80086ee:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80086f2:	2000      	movs	r0, #0
 80086f4:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
 80086f8:	e7ed      	b.n	80086d6 <SAI_InitI2S+0x4c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80086fa:	2080      	movs	r0, #128	; 0x80
 80086fc:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	0158      	lsls	r0, r3, #5
 8008704:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008714:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008716:	2902      	cmp	r1, #2
 8008718:	d041      	beq.n	800879e <SAI_InitI2S+0x114>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 800871a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800871c:	20c0      	movs	r0, #192	; 0xc0
 800871e:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	0198      	lsls	r0, r3, #6
 8008726:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800872a:	015b      	lsls	r3, r3, #5
 800872c:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008730:	2380      	movs	r3, #128	; 0x80
 8008732:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008736:	2000      	movs	r0, #0
      break;
 8008738:	e7ed      	b.n	8008716 <SAI_InitI2S+0x8c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800873a:	20e0      	movs	r0, #224	; 0xe0
 800873c:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	0198      	lsls	r0, r3, #6
 8008744:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008748:	015b      	lsls	r3, r3, #5
 800874a:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800874e:	2380      	movs	r3, #128	; 0x80
 8008750:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008754:	2000      	movs	r0, #0
      break;
 8008756:	e7de      	b.n	8008716 <SAI_InitI2S+0x8c>
  switch (datasize)
 8008758:	2001      	movs	r0, #1
 800875a:	e7dc      	b.n	8008716 <SAI_InitI2S+0x8c>
{
 800875c:	b410      	push	{r4}
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800875e:	2080      	movs	r0, #128	; 0x80
 8008760:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	019c      	lsls	r4, r3, #6
 8008768:	f8cc 4054 	str.w	r4, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800876c:	015b      	lsls	r3, r3, #5
 800876e:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008772:	f8cc 006c 	str.w	r0, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008776:	2000      	movs	r0, #0
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008778:	2902      	cmp	r1, #2
 800877a:	d002      	beq.n	8008782 <SAI_InitI2S+0xf8>
}
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008780:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008782:	2a01      	cmp	r2, #1
 8008784:	d005      	beq.n	8008792 <SAI_InitI2S+0x108>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008786:	2a02      	cmp	r2, #2
 8008788:	d1f8      	bne.n	800877c <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 8;
 800878a:	2308      	movs	r3, #8
 800878c:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008790:	e7f4      	b.n	800877c <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 16;
 8008792:	2310      	movs	r3, #16
 8008794:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008798:	e7f5      	b.n	8008786 <SAI_InitI2S+0xfc>
    return HAL_ERROR;
 800879a:	2001      	movs	r0, #1
 800879c:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800879e:	2a01      	cmp	r2, #1
 80087a0:	d005      	beq.n	80087ae <SAI_InitI2S+0x124>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80087a2:	2a02      	cmp	r2, #2
 80087a4:	d1b9      	bne.n	800871a <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 8;
 80087a6:	2308      	movs	r3, #8
 80087a8:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 80087ac:	e7b5      	b.n	800871a <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 16;
 80087ae:	2310      	movs	r3, #16
 80087b0:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 80087b4:	e7f5      	b.n	80087a2 <SAI_InitI2S+0x118>

080087b6 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80087b6:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80087b8:	2400      	movs	r4, #0
 80087ba:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80087bc:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80087be:	6844      	ldr	r4, [r0, #4]
 80087c0:	2c02      	cmp	r4, #2
 80087c2:	bf18      	it	ne
 80087c4:	2c00      	cmpne	r4, #0
 80087c6:	d118      	bne.n	80087fa <SAI_InitPCM+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80087c8:	2401      	movs	r4, #1
 80087ca:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80087cc:	2400      	movs	r4, #0
 80087ce:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80087d0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 80087d4:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80087d6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80087da:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80087dc:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80087de:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80087e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80087e4:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80087e6:	2904      	cmp	r1, #4
 80087e8:	d00a      	beq.n	8008800 <SAI_InitPCM+0x4a>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80087ea:	210d      	movs	r1, #13
 80087ec:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 80087ee:	2a03      	cmp	r2, #3
 80087f0:	d829      	bhi.n	8008846 <SAI_InitPCM+0x90>
 80087f2:	e8df f002 	tbb	[pc, r2]
 80087f6:	1108      	.short	0x1108
 80087f8:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80087fa:	2400      	movs	r4, #0
 80087fc:	6504      	str	r4, [r0, #80]	; 0x50
 80087fe:	e7e5      	b.n	80087cc <SAI_InitPCM+0x16>
      hsai->FrameInit.ActiveFrameLength = 1;
 8008800:	2101      	movs	r1, #1
 8008802:	6581      	str	r1, [r0, #88]	; 0x58
 8008804:	e7f3      	b.n	80087ee <SAI_InitPCM+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008806:	2280      	movs	r2, #128	; 0x80
 8008808:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800880e:	2340      	movs	r3, #64	; 0x40
 8008810:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008812:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8008814:	bc30      	pop	{r4, r5}
 8008816:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008818:	2280      	movs	r2, #128	; 0x80
 800881a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800881c:	015b      	lsls	r3, r3, #5
 800881e:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008820:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008822:	2000      	movs	r0, #0
      break;
 8008824:	e7f6      	b.n	8008814 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008826:	22c0      	movs	r2, #192	; 0xc0
 8008828:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800882a:	015b      	lsls	r3, r3, #5
 800882c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800882e:	2380      	movs	r3, #128	; 0x80
 8008830:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008832:	2000      	movs	r0, #0
      break;
 8008834:	e7ee      	b.n	8008814 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008836:	22e0      	movs	r2, #224	; 0xe0
 8008838:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800883a:	015b      	lsls	r3, r3, #5
 800883c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008842:	2000      	movs	r0, #0
      break;
 8008844:	e7e6      	b.n	8008814 <SAI_InitPCM+0x5e>
  switch (datasize)
 8008846:	2001      	movs	r0, #1
 8008848:	e7e4      	b.n	8008814 <SAI_InitPCM+0x5e>

0800884a <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 800884a:	2901      	cmp	r1, #1
 800884c:	d00a      	beq.n	8008864 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800884e:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008850:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008852:	2a08      	cmp	r2, #8
 8008854:	d008      	beq.n	8008868 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008856:	6842      	ldr	r2, [r0, #4]
 8008858:	3a02      	subs	r2, #2
 800885a:	2a01      	cmp	r2, #1
 800885c:	d90c      	bls.n	8008878 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800885e:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8008862:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8008864:	2309      	movs	r3, #9
 8008866:	e7f3      	b.n	8008850 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008868:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800886a:	2a01      	cmp	r2, #1
 800886c:	bf18      	it	ne
 800886e:	2a03      	cmpne	r2, #3
 8008870:	d1f1      	bne.n	8008856 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8008872:	f043 0310 	orr.w	r3, r3, #16
 8008876:	e7ee      	b.n	8008856 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008878:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 800887c:	4770      	bx	lr
	...

08008880 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <SAI_Disable+0x3c>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a0e      	ldr	r2, [pc, #56]	; (80088c0 <SAI_Disable+0x40>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	0b1b      	lsrs	r3, r3, #12
 800888c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800888e:	6801      	ldr	r1, [r0, #0]
 8008890:	680a      	ldr	r2, [r1, #0]
 8008892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008896:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008898:	b13b      	cbz	r3, 80088aa <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 800889a:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800889c:	6802      	ldr	r2, [r0, #0]
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80088a4:	d1f8      	bne.n	8008898 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80088a6:	2000      	movs	r0, #0

  return status;
}
 80088a8:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80088aa:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80088ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 80088b6:	2003      	movs	r0, #3
      break;
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000754 	.word	0x20000754
 80088c0:	95cbec1b 	.word	0x95cbec1b

080088c4 <HAL_SAI_Init>:
{
 80088c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f000 81df 	beq.w	8008c8c <HAL_SAI_Init+0x3c8>
 80088ce:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80088d0:	f7fa ff8a 	bl	80037e8 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80088d4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 80088d8:	2d01      	cmp	r5, #1
 80088da:	d025      	beq.n	8008928 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	49ad      	ldr	r1, [pc, #692]	; (8008b94 <HAL_SAI_Init+0x2d0>)
 80088e0:	4aad      	ldr	r2, [pc, #692]	; (8008b98 <HAL_SAI_Init+0x2d4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	bf18      	it	ne
 80088e6:	428b      	cmpne	r3, r1
 80088e8:	d02e      	beq.n	8008948 <HAL_SAI_Init+0x84>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80088ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088f2:	4293      	cmp	r3, r2
 80088f4:	bf18      	it	ne
 80088f6:	428b      	cmpne	r3, r1
 80088f8:	d043      	beq.n	8008982 <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80088fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80088fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008902:	4293      	cmp	r3, r2
 8008904:	bf18      	it	ne
 8008906:	428b      	cmpne	r3, r1
 8008908:	d03d      	beq.n	8008986 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800890a:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 800890e:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8008912:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8008916:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 800891a:	4293      	cmp	r3, r2
 800891c:	bf18      	it	ne
 800891e:	428b      	cmpne	r3, r1
 8008920:	f040 81b6 	bne.w	8008c90 <HAL_SAI_Init+0x3cc>
    SaiBaseAddress = SAI4;
 8008924:	4e9d      	ldr	r6, [pc, #628]	; (8008b9c <HAL_SAI_Init+0x2d8>)
 8008926:	e010      	b.n	800894a <HAL_SAI_Init+0x86>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	499a      	ldr	r1, [pc, #616]	; (8008b94 <HAL_SAI_Init+0x2d0>)
 800892c:	4a9c      	ldr	r2, [pc, #624]	; (8008ba0 <HAL_SAI_Init+0x2dc>)
 800892e:	428b      	cmp	r3, r1
 8008930:	bf18      	it	ne
 8008932:	4293      	cmpne	r3, r2
 8008934:	f040 8119 	bne.w	8008b6a <HAL_SAI_Init+0x2a6>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008938:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800893a:	2b01      	cmp	r3, #1
 800893c:	f040 8115 	bne.w	8008b6a <HAL_SAI_Init+0x2a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008940:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0ca      	beq.n	80088dc <HAL_SAI_Init+0x18>
 8008946:	e110      	b.n	8008b6a <HAL_SAI_Init+0x2a6>
    SaiBaseAddress = SAI1;
 8008948:	4e96      	ldr	r6, [pc, #600]	; (8008ba4 <HAL_SAI_Init+0x2e0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800894a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800894e:	b1e3      	cbz	r3, 800898a <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff ff95 	bl	8008880 <SAI_Disable>
 8008956:	4605      	mov	r5, r0
 8008958:	2800      	cmp	r0, #0
 800895a:	f040 819b 	bne.w	8008c94 <HAL_SAI_Init+0x3d0>
  hsai->State = HAL_SAI_STATE_BUSY;
 800895e:	2302      	movs	r3, #2
 8008960:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8008964:	68e3      	ldr	r3, [r4, #12]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d015      	beq.n	8008996 <HAL_SAI_Init+0xd2>
 800896a:	2b02      	cmp	r3, #2
 800896c:	d115      	bne.n	800899a <HAL_SAI_Init+0xd6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800896e:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
 8008970:	68a3      	ldr	r3, [r4, #8]
 8008972:	3b01      	subs	r3, #1
 8008974:	2b04      	cmp	r3, #4
 8008976:	d812      	bhi.n	800899e <HAL_SAI_Init+0xda>
 8008978:	e8df f003 	tbb	[pc, r3]
 800897c:	1b161325 	.word	0x1b161325
 8008980:	20          	.byte	0x20
 8008981:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8008982:	4e89      	ldr	r6, [pc, #548]	; (8008ba8 <HAL_SAI_Init+0x2e4>)
 8008984:	e7e1      	b.n	800894a <HAL_SAI_Init+0x86>
    SaiBaseAddress = SAI3;
 8008986:	4e89      	ldr	r6, [pc, #548]	; (8008bac <HAL_SAI_Init+0x2e8>)
 8008988:	e7df      	b.n	800894a <HAL_SAI_Init+0x86>
    hsai->Lock = HAL_UNLOCKED;
 800898a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800898e:	4620      	mov	r0, r4
 8008990:	f7f9 fe56 	bl	8002640 <HAL_SAI_MspInit>
 8008994:	e7dc      	b.n	8008950 <HAL_SAI_Init+0x8c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008996:	2210      	movs	r2, #16
 8008998:	e7ea      	b.n	8008970 <HAL_SAI_Init+0xac>
  switch (hsai->Init.SynchroExt)
 800899a:	2200      	movs	r2, #0
 800899c:	e7e8      	b.n	8008970 <HAL_SAI_Init+0xac>
  switch (hsai->Init.Synchro)
 800899e:	2700      	movs	r7, #0
 80089a0:	e013      	b.n	80089ca <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089a2:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80089a6:	e010      	b.n	80089ca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80089a8:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089ac:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80089b0:	e00b      	b.n	80089ca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80089b2:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089b6:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80089ba:	e006      	b.n	80089ca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80089bc:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80089c0:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 80089c4:	e001      	b.n	80089ca <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80089c6:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 80089ca:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80089cc:	6a23      	ldr	r3, [r4, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d047      	beq.n	8008a62 <HAL_SAI_Init+0x19e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	496f      	ldr	r1, [pc, #444]	; (8008b94 <HAL_SAI_Init+0x2d0>)
 80089d6:	4a70      	ldr	r2, [pc, #448]	; (8008b98 <HAL_SAI_Init+0x2d4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	bf18      	it	ne
 80089dc:	428b      	cmpne	r3, r1
 80089de:	f000 80c7 	beq.w	8008b70 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 80089e2:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	4972      	ldr	r1, [pc, #456]	; (8008bb0 <HAL_SAI_Init+0x2ec>)
 80089e8:	4a72      	ldr	r2, [pc, #456]	; (8008bb4 <HAL_SAI_Init+0x2f0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	bf18      	it	ne
 80089ee:	428b      	cmpne	r3, r1
 80089f0:	f000 80c4 	beq.w	8008b7c <HAL_SAI_Init+0x2b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	4970      	ldr	r1, [pc, #448]	; (8008bb8 <HAL_SAI_Init+0x2f4>)
 80089f8:	4a70      	ldr	r2, [pc, #448]	; (8008bbc <HAL_SAI_Init+0x2f8>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	bf18      	it	ne
 80089fe:	428b      	cmpne	r3, r1
 8008a00:	f000 80c2 	beq.w	8008b88 <HAL_SAI_Init+0x2c4>
    if (hsai->Instance == SAI4_Block_A)
 8008a04:	6822      	ldr	r2, [r4, #0]
 8008a06:	4b66      	ldr	r3, [pc, #408]	; (8008ba0 <HAL_SAI_Init+0x2dc>)
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f000 80e3 	beq.w	8008bd4 <HAL_SAI_Init+0x310>
    if (hsai->Instance == SAI4_Block_B)
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	4b6b      	ldr	r3, [pc, #428]	; (8008bc0 <HAL_SAI_Init+0x2fc>)
 8008a12:	429a      	cmp	r2, r3
 8008a14:	f000 80e4 	beq.w	8008be0 <HAL_SAI_Init+0x31c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008a18:	69a3      	ldr	r3, [r4, #24]
 8008a1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a1e:	f000 80e5 	beq.w	8008bec <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008a22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a28:	f000 80f4 	beq.w	8008c14 <HAL_SAI_Init+0x350>
 8008a2c:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008a2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008a32:	0040      	lsls	r0, r0, #1
 8008a34:	6a23      	ldr	r3, [r4, #32]
 8008a36:	fb02 f303 	mul.w	r3, r2, r3
 8008a3a:	021b      	lsls	r3, r3, #8
 8008a3c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8008a40:	4b60      	ldr	r3, [pc, #384]	; (8008bc4 <HAL_SAI_Init+0x300>)
 8008a42:	fba3 2300 	umull	r2, r3, r3, r0
 8008a46:	08db      	lsrs	r3, r3, #3
 8008a48:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8008a4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008a4e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8008a52:	2808      	cmp	r0, #8
 8008a54:	d901      	bls.n	8008a5a <HAL_SAI_Init+0x196>
      hsai->Init.Mckdiv += 1U;
 8008a56:	3301      	adds	r3, #1
 8008a58:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	f000 80db 	beq.w	8008c18 <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	bf18      	it	ne
 8008a68:	2b00      	cmpne	r3, #0
 8008a6a:	f040 80dc 	bne.w	8008c26 <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008a6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	f000 80d5 	beq.w	8008c20 <HAL_SAI_Init+0x35c>
 8008a76:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008a7a:	f7fa feb5 	bl	80037e8 <HAL_GetREVID>
 8008a7e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008a82:	f0c0 80d9 	bcc.w	8008c38 <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008a86:	6822      	ldr	r2, [r4, #0]
 8008a88:	6811      	ldr	r1, [r2, #0]
 8008a8a:	4b4f      	ldr	r3, [pc, #316]	; (8008bc8 <HAL_SAI_Init+0x304>)
 8008a8c:	400b      	ands	r3, r1
 8008a8e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a90:	6821      	ldr	r1, [r4, #0]
 8008a92:	680a      	ldr	r2, [r1, #0]
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008a98:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a9a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a9c:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008aa0:	4303      	orrs	r3, r0
 8008aa2:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8008aa6:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aa8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008aaa:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aac:	6960      	ldr	r0, [r4, #20]
 8008aae:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008ab0:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ab2:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008ab4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ab6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008aba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008abc:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008abe:	6920      	ldr	r0, [r4, #16]
 8008ac0:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	6851      	ldr	r1, [r2, #4]
 8008aca:	4b40      	ldr	r3, [pc, #256]	; (8008bcc <HAL_SAI_Init+0x308>)
 8008acc:	400b      	ands	r3, r1
 8008ace:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008ad0:	6821      	ldr	r1, [r4, #0]
 8008ad2:	684a      	ldr	r2, [r1, #4]
 8008ad4:	69e3      	ldr	r3, [r4, #28]
 8008ad6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008ad8:	4303      	orrs	r3, r0
 8008ada:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008adc:	4303      	orrs	r3, r0
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008ae2:	6822      	ldr	r2, [r4, #0]
 8008ae4:	6891      	ldr	r1, [r2, #8]
 8008ae6:	4b3a      	ldr	r3, [pc, #232]	; (8008bd0 <HAL_SAI_Init+0x30c>)
 8008ae8:	400b      	ands	r3, r1
 8008aea:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008aec:	6820      	ldr	r0, [r4, #0]
 8008aee:	6882      	ldr	r2, [r0, #8]
 8008af0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008af2:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8008af4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008af6:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8008af8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008afa:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8008afc:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008afe:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008b00:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b02:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8008b04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	68d3      	ldr	r3, [r2, #12]
 8008b10:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8008b14:	f023 030f 	bic.w	r3, r3, #15
 8008b18:	041b      	lsls	r3, r3, #16
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	68c2      	ldr	r2, [r0, #12]
 8008b22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008b24:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008b26:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008b28:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008b2e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008b30:	3901      	subs	r1, #1
 8008b32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	4915      	ldr	r1, [pc, #84]	; (8008b94 <HAL_SAI_Init+0x2d0>)
 8008b3e:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <HAL_SAI_Init+0x2dc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	bf18      	it	ne
 8008b44:	428b      	cmpne	r3, r1
 8008b46:	d108      	bne.n	8008b5a <HAL_SAI_Init+0x296>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008b48:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008b4a:	f023 0301 	bic.w	r3, r3, #1
 8008b4e:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008b50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	f000 808e 	beq.w	8008c76 <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8008b60:	2201      	movs	r2, #1
 8008b62:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8008b66:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b74:	2100      	movs	r1, #0
 8008b76:	f7ff f9a9 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7a:	e733      	b.n	80089e4 <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b80:	2100      	movs	r1, #0
 8008b82:	f7ff f9a3 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b86:	e735      	b.n	80089f4 <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008b88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	f7ff f99d 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b92:	e737      	b.n	8008a04 <HAL_SAI_Init+0x140>
 8008b94:	40015804 	.word	0x40015804
 8008b98:	40015824 	.word	0x40015824
 8008b9c:	58005400 	.word	0x58005400
 8008ba0:	58005404 	.word	0x58005404
 8008ba4:	40015800 	.word	0x40015800
 8008ba8:	40015c00 	.word	0x40015c00
 8008bac:	40016000 	.word	0x40016000
 8008bb0:	40015c04 	.word	0x40015c04
 8008bb4:	40015c24 	.word	0x40015c24
 8008bb8:	40016004 	.word	0x40016004
 8008bbc:	40016024 	.word	0x40016024
 8008bc0:	58005424 	.word	0x58005424
 8008bc4:	cccccccd 	.word	0xcccccccd
 8008bc8:	f005c010 	.word	0xf005c010
 8008bcc:	ffff1ff0 	.word	0xffff1ff0
 8008bd0:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008bd8:	2100      	movs	r1, #0
 8008bda:	f7ff f977 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008bde:	e716      	b.n	8008a0e <HAL_SAI_Init+0x14a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008be0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008be4:	2100      	movs	r1, #0
 8008be6:	f7ff f971 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008bea:	e715      	b.n	8008a18 <HAL_SAI_Init+0x154>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008bec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d00b      	beq.n	8008c0a <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d00b      	beq.n	8008c0e <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
 8008bf6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008bfc:	0040      	lsls	r0, r0, #1
 8008bfe:	6a23      	ldr	r3, [r4, #32]
 8008c00:	fb02 f303 	mul.w	r3, r2, r3
 8008c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8008c08:	e71a      	b.n	8008a40 <HAL_SAI_Init+0x17c>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008c0a:	2240      	movs	r2, #64	; 0x40
 8008c0c:	e7f4      	b.n	8008bf8 <HAL_SAI_Init+0x334>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c12:	e7f1      	b.n	8008bf8 <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008c14:	2202      	movs	r2, #2
 8008c16:	e70a      	b.n	8008a2e <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c1e:	e720      	b.n	8008a62 <HAL_SAI_Init+0x19e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008c20:	f04f 0800 	mov.w	r8, #0
 8008c24:	e729      	b.n	8008a7a <HAL_SAI_Init+0x1b6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008c26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d002      	beq.n	8008c32 <HAL_SAI_Init+0x36e>
 8008c2c:	f04f 0800 	mov.w	r8, #0
 8008c30:	e723      	b.n	8008a7a <HAL_SAI_Init+0x1b6>
 8008c32:	f44f 7800 	mov.w	r8, #512	; 0x200
 8008c36:	e720      	b.n	8008a7a <HAL_SAI_Init+0x1b6>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	6811      	ldr	r1, [r2, #0]
 8008c3c:	4b16      	ldr	r3, [pc, #88]	; (8008c98 <HAL_SAI_Init+0x3d4>)
 8008c3e:	400b      	ands	r3, r1
 8008c40:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c42:	6821      	ldr	r1, [r4, #0]
 8008c44:	680a      	ldr	r2, [r1, #0]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008c4a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c4e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c50:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008c52:	4303      	orrs	r3, r0
 8008c54:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8008c58:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008c5c:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c5e:	6960      	ldr	r0, [r4, #20]
 8008c60:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008c62:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c64:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008c66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c68:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8008c6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008c6e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c70:	431a      	orrs	r2, r3
 8008c72:	600a      	str	r2, [r1, #0]
 8008c74:	e727      	b.n	8008ac6 <HAL_SAI_Init+0x202>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008c78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008c7a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008c7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008c80:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008c82:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6473      	str	r3, [r6, #68]	; 0x44
 8008c8a:	e766      	b.n	8008b5a <HAL_SAI_Init+0x296>
    return HAL_ERROR;
 8008c8c:	2501      	movs	r5, #1
 8008c8e:	e76c      	b.n	8008b6a <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8008c90:	2501      	movs	r5, #1
 8008c92:	e76a      	b.n	8008b6a <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8008c94:	2501      	movs	r5, #1
 8008c96:	e768      	b.n	8008b6a <HAL_SAI_Init+0x2a6>
 8008c98:	f805c010 	.word	0xf805c010

08008c9c <HAL_SAI_InitProtocol>:
{
 8008c9c:	b510      	push	{r4, lr}
 8008c9e:	4604      	mov	r4, r0
  switch (protocol)
 8008ca0:	2902      	cmp	r1, #2
 8008ca2:	d906      	bls.n	8008cb2 <HAL_SAI_InitProtocol+0x16>
 8008ca4:	1ec8      	subs	r0, r1, #3
 8008ca6:	2801      	cmp	r0, #1
 8008ca8:	d80b      	bhi.n	8008cc2 <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008caa:	4620      	mov	r0, r4
 8008cac:	f7ff fd83 	bl	80087b6 <SAI_InitPCM>
      break;
 8008cb0:	e001      	b.n	8008cb6 <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008cb2:	f7ff fcea 	bl	800868a <SAI_InitI2S>
  if (status == HAL_OK)
 8008cb6:	b100      	cbz	r0, 8008cba <HAL_SAI_InitProtocol+0x1e>
}
 8008cb8:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7ff fe02 	bl	80088c4 <HAL_SAI_Init>
 8008cc0:	e7fa      	b.n	8008cb8 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	e7f8      	b.n	8008cb8 <HAL_SAI_InitProtocol+0x1c>
	...

08008cc8 <HAL_SAI_Transmit_DMA>:
{
 8008cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ccc:	4604      	mov	r4, r0
 8008cce:	4688      	mov	r8, r1
 8008cd0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8008cd2:	f7fa fd6f 	bl	80037b4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8008cd6:	2e00      	cmp	r6, #0
 8008cd8:	bf18      	it	ne
 8008cda:	f1b8 0f00 	cmpne.w	r8, #0
 8008cde:	d066      	beq.n	8008dae <HAL_SAI_Transmit_DMA+0xe6>
 8008ce0:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8008ce2:	f894 7091 	ldrb.w	r7, [r4, #145]	; 0x91
 8008ce6:	b2ff      	uxtb	r7, r7
 8008ce8:	2f01      	cmp	r7, #1
 8008cea:	d164      	bne.n	8008db6 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 8008cec:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d062      	beq.n	8008dba <HAL_SAI_Transmit_DMA+0xf2>
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8008cfa:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8008cfe:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8008d02:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8008d0c:	2212      	movs	r2, #18
 8008d0e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008d12:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008d16:	492a      	ldr	r1, [pc, #168]	; (8008dc0 <HAL_SAI_Transmit_DMA+0xf8>)
 8008d18:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8008d1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008d1e:	4929      	ldr	r1, [pc, #164]	; (8008dc4 <HAL_SAI_Transmit_DMA+0xfc>)
 8008d20:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8008d22:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008d26:	4928      	ldr	r1, [pc, #160]	; (8008dc8 <HAL_SAI_Transmit_DMA+0x100>)
 8008d28:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8008d2a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008d2e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8008d30:	6822      	ldr	r2, [r4, #0]
 8008d32:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8008d36:	321c      	adds	r2, #28
 8008d38:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008d3a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008d3e:	f7fb f9ff 	bl	8004140 <HAL_DMA_Start_IT>
 8008d42:	4606      	mov	r6, r0
 8008d44:	bb10      	cbnz	r0, 8008d8c <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008d46:	2100      	movs	r1, #0
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f7ff fd7e 	bl	800884a <SAI_InterruptFlag>
 8008d4e:	6822      	ldr	r2, [r4, #0]
 8008d50:	6913      	ldr	r3, [r2, #16]
 8008d52:	4303      	orrs	r3, r0
 8008d54:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	6813      	ldr	r3, [r2, #0]
 8008d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d5e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8008d68:	d114      	bne.n	8008d94 <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8008d6a:	f7fa fd23 	bl	80037b4 <HAL_GetTick>
 8008d6e:	1b43      	subs	r3, r0, r5
 8008d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d74:	d9f4      	bls.n	8008d60 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008d76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d7e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8008d82:	2300      	movs	r3, #0
 8008d84:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8008d88:	2703      	movs	r7, #3
 8008d8a:	e011      	b.n	8008db0 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8008d92:	e00d      	b.n	8008db0 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008d9a:	d103      	bne.n	8008da4 <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008da2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8008da4:	2300      	movs	r3, #0
 8008da6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 8008daa:	4637      	mov	r7, r6
 8008dac:	e000      	b.n	8008db0 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 8008dae:	2701      	movs	r7, #1
}
 8008db0:	4638      	mov	r0, r7
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8008db6:	2702      	movs	r7, #2
 8008db8:	e7fa      	b.n	8008db0 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 8008dba:	2702      	movs	r7, #2
 8008dbc:	e7f8      	b.n	8008db0 <HAL_SAI_Transmit_DMA+0xe8>
 8008dbe:	bf00      	nop
 8008dc0:	08008e07 	.word	0x08008e07
 8008dc4:	08008dcd 	.word	0x08008dcd
 8008dc8:	08008e11 	.word	0x08008e11

08008dcc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008dcc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dce:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008dd0:	69c3      	ldr	r3, [r0, #28]
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d012      	beq.n	8008dfe <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 8008dd8:	2100      	movs	r1, #0
 8008dda:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	6813      	ldr	r3, [r2, #0]
 8008de2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008de6:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff fd2e 	bl	800884a <SAI_InterruptFlag>
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	6913      	ldr	r3, [r2, #16]
 8008df2:	ea23 0300 	bic.w	r3, r3, r0
 8008df6:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f00f fac6 	bl	8018390 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8008e04:	bd10      	pop	{r4, pc}

08008e06 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e06:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008e08:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008e0a:	f00f fa8d 	bl	8018328 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8008e0e:	bd08      	pop	{r3, pc}

08008e10 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e10:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e12:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e14:	f7fc f957 	bl	80050c6 <HAL_DMA_GetError>
 8008e18:	2802      	cmp	r0, #2
 8008e1a:	d100      	bne.n	8008e1e <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8008e1c:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008e1e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e26:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008e2a:	6822      	ldr	r2, [r4, #0]
 8008e2c:	6813      	ldr	r3, [r2, #0]
 8008e2e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e32:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff fd23 	bl	8008880 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8008e46:	4620      	mov	r0, r4
 8008e48:	f00f fa82 	bl	8018350 <__HAL_SAI_ErrorCallback_veneer>
}
 8008e4c:	e7e6      	b.n	8008e1c <SAI_DMAError+0xc>
	...

08008e50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8008e56:	2300      	movs	r3, #0
 8008e58:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e5a:	6800      	ldr	r0, [r0, #0]
 8008e5c:	f001 ffa8 	bl	800adb0 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e60:	4605      	mov	r5, r0
 8008e62:	b110      	cbz	r0, 8008e6a <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 8008e64:	4628      	mov	r0, r5
 8008e66:	b002      	add	sp, #8
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e6a:	6820      	ldr	r0, [r4, #0]
 8008e6c:	f002 fadc 	bl	800b428 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008e70:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008e74:	d007      	beq.n	8008e86 <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e76:	2301      	movs	r3, #1
 8008e78:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d00b      	beq.n	8008e98 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e80:	462e      	mov	r6, r5
 8008e82:	4628      	mov	r0, r5
 8008e84:	e014      	b.n	8008eb0 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e86:	2300      	movs	r3, #0
 8008e88:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e8a:	6820      	ldr	r0, [r4, #0]
 8008e8c:	f001 ff90 	bl	800adb0 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d0f2      	beq.n	8008e7a <SD_PowerON+0x2a>
      return errorstate;
 8008e94:	4605      	mov	r5, r0
 8008e96:	e7e5      	b.n	8008e64 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6820      	ldr	r0, [r4, #0]
 8008e9c:	f002 f90f 	bl	800b0be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d0ed      	beq.n	8008e80 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ea4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008ea8:	e7dc      	b.n	8008e64 <SD_PowerON+0x14>
    count++;
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	3301      	adds	r3, #1
 8008eae:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008eb0:	9a01      	ldr	r2, [sp, #4]
 8008eb2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d813      	bhi.n	8008ee2 <SD_PowerON+0x92>
 8008eba:	b996      	cbnz	r6, 8008ee2 <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6820      	ldr	r0, [r4, #0]
 8008ec0:	f002 f8fd 	bl	800b0be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ec4:	b9d0      	cbnz	r0, 8008efc <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008ec6:	4912      	ldr	r1, [pc, #72]	; (8008f10 <SD_PowerON+0xc0>)
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	f002 f9f9 	bl	800b2c0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ece:	4606      	mov	r6, r0
 8008ed0:	b9b0      	cbnz	r0, 8008f00 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	f001 ff56 	bl	800ad86 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008eda:	0fc3      	lsrs	r3, r0, #31
 8008edc:	d0e5      	beq.n	8008eaa <SD_PowerON+0x5a>
 8008ede:	461e      	mov	r6, r3
 8008ee0:	e7e3      	b.n	8008eaa <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008ee2:	9a01      	ldr	r2, [sp, #4]
 8008ee4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d80c      	bhi.n	8008f06 <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 8008eec:	2300      	movs	r3, #0
 8008eee:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ef0:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 8008ef4:	d00a      	beq.n	8008f0c <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	63a3      	str	r3, [r4, #56]	; 0x38
 8008efa:	e7b3      	b.n	8008e64 <SD_PowerON+0x14>
      return errorstate;
 8008efc:	4605      	mov	r5, r0
 8008efe:	e7b1      	b.n	8008e64 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f00:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008f04:	e7ae      	b.n	8008e64 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f06:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8008f0a:	e7ab      	b.n	8008e64 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 8008f0c:	461d      	mov	r5, r3
 8008f0e:	e7a9      	b.n	8008e64 <SD_PowerON+0x14>
 8008f10:	c1100000 	.word	0xc1100000

08008f14 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008f14:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008f16:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 8008f18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f1a:	2b1f      	cmp	r3, #31
 8008f1c:	d815      	bhi.n	8008f4a <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008f20:	6830      	ldr	r0, [r6, #0]
 8008f22:	f001 ff09 	bl	800ad38 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8008f26:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008f28:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8008f2c:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008f2e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8008f32:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008f34:	0e00      	lsrs	r0, r0, #24
 8008f36:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8008f38:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 8008f3a:	3501      	adds	r5, #1
 8008f3c:	2d07      	cmp	r5, #7
 8008f3e:	d9ef      	bls.n	8008f20 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8008f40:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008f42:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008f44:	3b20      	subs	r3, #32
 8008f46:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8008f48:	e7e9      	b.n	8008f1e <SD_Read_IT+0xa>
 8008f4a:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	e7f5      	b.n	8008f3c <SD_Read_IT+0x28>

08008f50 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008f54:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 8008f56:	6a03      	ldr	r3, [r0, #32]
 8008f58:	2b1f      	cmp	r3, #31
 8008f5a:	d81c      	bhi.n	8008f96 <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 8008f5c:	b002      	add	sp, #8
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8008f60:	7823      	ldrb	r3, [r4, #0]
 8008f62:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f64:	7862      	ldrb	r2, [r4, #1]
 8008f66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008f6a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f6c:	78a2      	ldrb	r2, [r4, #2]
 8008f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f72:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f74:	78e2      	ldrb	r2, [r4, #3]
 8008f76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008f7a:	9301      	str	r3, [sp, #4]
      tmp++;
 8008f7c:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f7e:	a901      	add	r1, sp, #4
 8008f80:	6830      	ldr	r0, [r6, #0]
 8008f82:	f001 fedc 	bl	800ad3e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8008f86:	3501      	adds	r5, #1
 8008f88:	2d07      	cmp	r5, #7
 8008f8a:	d9e9      	bls.n	8008f60 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 8008f8c:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 8008f8e:	6a33      	ldr	r3, [r6, #32]
 8008f90:	3b20      	subs	r3, #32
 8008f92:	6233      	str	r3, [r6, #32]
}
 8008f94:	e7e2      	b.n	8008f5c <SD_Write_IT+0xc>
 8008f96:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8008f98:	2500      	movs	r5, #0
 8008f9a:	e7f5      	b.n	8008f88 <SD_Write_IT+0x38>

08008f9c <SD_SendSDStatus>:
{
 8008f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 8008fa4:	f7fa fc06 	bl	80037b4 <HAL_GetTick>
 8008fa8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008faa:	2100      	movs	r1, #0
 8008fac:	6828      	ldr	r0, [r5, #0]
 8008fae:	f001 feea 	bl	800ad86 <SDMMC_GetResponse>
 8008fb2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8008fb6:	d164      	bne.n	8009082 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008fb8:	2140      	movs	r1, #64	; 0x40
 8008fba:	6828      	ldr	r0, [r5, #0]
 8008fbc:	f001 ffbc 	bl	800af38 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	b110      	cbz	r0, 8008fca <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008fc6:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8008fc8:	e05d      	b.n	8009086 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fca:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8008fcc:	0409      	lsls	r1, r1, #16
 8008fce:	6828      	ldr	r0, [r5, #0]
 8008fd0:	f002 f875 	bl	800b0be <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	b110      	cbz	r0, 8008fde <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008fda:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 8008fdc:	e053      	b.n	8009086 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe2:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008fe8:	2360      	movs	r3, #96	; 0x60
 8008fea:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008fec:	2302      	movs	r3, #2
 8008fee:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ff8:	4669      	mov	r1, sp
 8008ffa:	6828      	ldr	r0, [r5, #0]
 8008ffc:	f001 fec6 	bl	800ad8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009000:	6828      	ldr	r0, [r5, #0]
 8009002:	f002 f8c0 	bl	800b186 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009006:	4603      	mov	r3, r0
 8009008:	b180      	cbz	r0, 800902c <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800900a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800900c:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 800900e:	e03a      	b.n	8009086 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009010:	6828      	ldr	r0, [r5, #0]
 8009012:	f001 fe91 	bl	800ad38 <SDMMC_ReadFIFO>
 8009016:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800901a:	3401      	adds	r4, #1
 800901c:	2c07      	cmp	r4, #7
 800901e:	d9f7      	bls.n	8009010 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009020:	f7fa fbc8 	bl	80037b4 <HAL_GetTick>
 8009024:	1bc0      	subs	r0, r0, r7
 8009026:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800902a:	d02f      	beq.n	800908c <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009030:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 8009034:	d104      	bne.n	8009040 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800903c:	d0f0      	beq.n	8009020 <SD_SendSDStatus+0x84>
 800903e:	e7ed      	b.n	800901c <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009042:	f012 0f08 	tst.w	r2, #8
 8009046:	d124      	bne.n	8009092 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800904a:	f012 0f02 	tst.w	r2, #2
 800904e:	d122      	bne.n	8009096 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f013 0f20 	tst.w	r3, #32
 8009056:	d120      	bne.n	800909a <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009058:	6828      	ldr	r0, [r5, #0]
 800905a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800905c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009060:	d00c      	beq.n	800907c <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009062:	f001 fe69 	bl	800ad38 <SDMMC_ReadFIFO>
 8009066:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800906a:	f7fa fba3 	bl	80037b4 <HAL_GetTick>
 800906e:	1bc0      	subs	r0, r0, r7
 8009070:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009074:	d1f0      	bne.n	8009058 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 8009076:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800907a:	e004      	b.n	8009086 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800907c:	4a08      	ldr	r2, [pc, #32]	; (80090a0 <SD_SendSDStatus+0x104>)
 800907e:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8009080:	e001      	b.n	8009086 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009082:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8009086:	4618      	mov	r0, r3
 8009088:	b007      	add	sp, #28
 800908a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 800908c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009090:	e7f9      	b.n	8009086 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009092:	2308      	movs	r3, #8
 8009094:	e7f7      	b.n	8009086 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009096:	2302      	movs	r3, #2
 8009098:	e7f5      	b.n	8009086 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800909a:	2320      	movs	r3, #32
 800909c:	e7f3      	b.n	8009086 <SD_SendSDStatus+0xea>
 800909e:	bf00      	nop
 80090a0:	18000f3a 	.word	0x18000f3a

080090a4 <SD_FindSCR>:
{
 80090a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a6:	b089      	sub	sp, #36	; 0x24
 80090a8:	4604      	mov	r4, r0
 80090aa:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80090ac:	f7fa fb82 	bl	80037b4 <HAL_GetTick>
 80090b0:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80090b2:	2300      	movs	r3, #0
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090b8:	2108      	movs	r1, #8
 80090ba:	6820      	ldr	r0, [r4, #0]
 80090bc:	f001 ff3c 	bl	800af38 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090c0:	4606      	mov	r6, r0
 80090c2:	b110      	cbz	r0, 80090ca <SD_FindSCR+0x26>
}
 80090c4:	4630      	mov	r0, r6
 80090c6:	b009      	add	sp, #36	; 0x24
 80090c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80090ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80090cc:	0409      	lsls	r1, r1, #16
 80090ce:	6820      	ldr	r0, [r4, #0]
 80090d0:	f001 fff5 	bl	800b0be <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090d4:	4606      	mov	r6, r0
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1f4      	bne.n	80090c4 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090de:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80090e0:	2308      	movs	r3, #8
 80090e2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80090e4:	2330      	movs	r3, #48	; 0x30
 80090e6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090e8:	2302      	movs	r3, #2
 80090ea:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090f0:	2301      	movs	r3, #1
 80090f2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090f4:	a902      	add	r1, sp, #8
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	f001 fe48 	bl	800ad8c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090fc:	6820      	ldr	r0, [r4, #0]
 80090fe:	f002 f810 	bl	800b122 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009102:	4606      	mov	r6, r0
 8009104:	b130      	cbz	r0, 8009114 <SD_FindSCR+0x70>
 8009106:	e7dd      	b.n	80090c4 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009108:	f7fa fb54 	bl	80037b4 <HAL_GetTick>
 800910c:	1b43      	subs	r3, r0, r5
 800910e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009112:	d046      	beq.n	80091a2 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009118:	f240 532a 	movw	r3, #1322	; 0x52a
 800911c:	421a      	tst	r2, r3
 800911e:	d10e      	bne.n	800913e <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009120:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009122:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8009126:	d1ef      	bne.n	8009108 <SD_FindSCR+0x64>
 8009128:	2e00      	cmp	r6, #0
 800912a:	d1ed      	bne.n	8009108 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800912c:	f001 fe04 	bl	800ad38 <SDMMC_ReadFIFO>
 8009130:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	f001 fe00 	bl	800ad38 <SDMMC_ReadFIFO>
 8009138:	9001      	str	r0, [sp, #4]
      index++;
 800913a:	3601      	adds	r6, #1
 800913c:	e7e4      	b.n	8009108 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800913e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009140:	f013 0f08 	tst.w	r3, #8
 8009144:	d124      	bne.n	8009190 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009146:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009148:	f013 0f02 	tst.w	r3, #2
 800914c:	d123      	bne.n	8009196 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800914e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009150:	f016 0620 	ands.w	r6, r6, #32
 8009154:	d122      	bne.n	800919c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009156:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <SD_FindSCR+0x104>)
 8009158:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800915a:	9a01      	ldr	r2, [sp, #4]
 800915c:	0213      	lsls	r3, r2, #8
 800915e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009162:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009166:	0a11      	lsrs	r1, r2, #8
 8009168:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800916c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800916e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009172:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009174:	9a00      	ldr	r2, [sp, #0]
 8009176:	0213      	lsls	r3, r2, #8
 8009178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800917c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009180:	0a11      	lsrs	r1, r2, #8
 8009182:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009186:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009188:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800918c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800918e:	e799      	b.n	80090c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009190:	2608      	movs	r6, #8
 8009192:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009194:	e796      	b.n	80090c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009196:	2602      	movs	r6, #2
 8009198:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800919a:	e793      	b.n	80090c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800919c:	2620      	movs	r6, #32
 800919e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80091a0:	e790      	b.n	80090c4 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80091a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80091a6:	e78d      	b.n	80090c4 <SD_FindSCR+0x20>
 80091a8:	18000f3a 	.word	0x18000f3a

080091ac <SD_WideBus_Enable>:
{
 80091ac:	b510      	push	{r4, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80091b2:	2100      	movs	r1, #0
 80091b4:	9100      	str	r1, [sp, #0]
 80091b6:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80091b8:	6800      	ldr	r0, [r0, #0]
 80091ba:	f001 fde4 	bl	800ad86 <SDMMC_GetResponse>
 80091be:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80091c2:	d113      	bne.n	80091ec <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80091c4:	4669      	mov	r1, sp
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff ff6c 	bl	80090a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80091cc:	b980      	cbnz	r0, 80091f0 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091ce:	9b01      	ldr	r3, [sp, #4]
 80091d0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80091d4:	d00e      	beq.n	80091f4 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80091d8:	0409      	lsls	r1, r1, #16
 80091da:	6820      	ldr	r0, [r4, #0]
 80091dc:	f001 ff6f 	bl	800b0be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091e0:	b930      	cbnz	r0, 80091f0 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80091e2:	2102      	movs	r1, #2
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	f001 ff83 	bl	800b0f0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ea:	e001      	b.n	80091f0 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80091f0:	b002      	add	sp, #8
 80091f2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80091f8:	e7fa      	b.n	80091f0 <SD_WideBus_Enable+0x44>

080091fa <SD_WideBus_Disable>:
{
 80091fa:	b510      	push	{r4, lr}
 80091fc:	b082      	sub	sp, #8
 80091fe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009200:	2100      	movs	r1, #0
 8009202:	9100      	str	r1, [sp, #0]
 8009204:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009206:	6800      	ldr	r0, [r0, #0]
 8009208:	f001 fdbd 	bl	800ad86 <SDMMC_GetResponse>
 800920c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8009210:	d113      	bne.n	800923a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8009212:	4669      	mov	r1, sp
 8009214:	4620      	mov	r0, r4
 8009216:	f7ff ff45 	bl	80090a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800921a:	b980      	cbnz	r0, 800923e <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009222:	d00e      	beq.n	8009242 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009224:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009226:	0409      	lsls	r1, r1, #16
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	f001 ff48 	bl	800b0be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800922e:	b930      	cbnz	r0, 800923e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009230:	2100      	movs	r1, #0
 8009232:	6820      	ldr	r0, [r4, #0]
 8009234:	f001 ff5c 	bl	800b0f0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009238:	e001      	b.n	800923e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800923a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800923e:	b002      	add	sp, #8
 8009240:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009242:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009246:	e7fa      	b.n	800923e <SD_WideBus_Disable+0x44>

08009248 <SD_SendStatus>:
{
 8009248:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 800924a:	b181      	cbz	r1, 800926e <SD_SendStatus+0x26>
 800924c:	4604      	mov	r4, r0
 800924e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009250:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009252:	0409      	lsls	r1, r1, #16
 8009254:	6800      	ldr	r0, [r0, #0]
 8009256:	f001 ff7d 	bl	800b154 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800925a:	4605      	mov	r5, r0
 800925c:	b108      	cbz	r0, 8009262 <SD_SendStatus+0x1a>
}
 800925e:	4628      	mov	r0, r5
 8009260:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009262:	2100      	movs	r1, #0
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	f001 fd8e 	bl	800ad86 <SDMMC_GetResponse>
 800926a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800926c:	e7f7      	b.n	800925e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800926e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8009272:	e7f4      	b.n	800925e <SD_SendStatus+0x16>

08009274 <HAL_SD_ReadBlocks>:
{
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	b087      	sub	sp, #28
 800927a:	4605      	mov	r5, r0
 800927c:	460c      	mov	r4, r1
 800927e:	4616      	mov	r6, r2
 8009280:	469a      	mov	sl, r3
 8009282:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009286:	f7fa fa95 	bl	80037b4 <HAL_GetTick>
  if (NULL == pData)
 800928a:	2c00      	cmp	r4, #0
 800928c:	d03a      	beq.n	8009304 <HAL_SD_ReadBlocks+0x90>
 800928e:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009290:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009294:	b2ff      	uxtb	r7, r7
 8009296:	2f01      	cmp	r7, #1
 8009298:	f040 80e0 	bne.w	800945c <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800929c:	2300      	movs	r3, #0
 800929e:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80092a0:	eb06 030a 	add.w	r3, r6, sl
 80092a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d832      	bhi.n	8009310 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 80092aa:	2303      	movs	r3, #3
 80092ac:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80092b0:	682b      	ldr	r3, [r5, #0]
 80092b2:	2200      	movs	r2, #0
 80092b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80092b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d000      	beq.n	80092be <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80092bc:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80092c4:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80092c8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092ca:	2390      	movs	r3, #144	; 0x90
 80092cc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092ce:	2302      	movs	r3, #2
 80092d0:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80092d6:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092d8:	4669      	mov	r1, sp
 80092da:	6828      	ldr	r0, [r5, #0]
 80092dc:	f001 fd56 	bl	800ad8c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80092e0:	682a      	ldr	r2, [r5, #0]
 80092e2:	68d3      	ldr	r3, [r2, #12]
 80092e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e8:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80092ea:	f1ba 0f01 	cmp.w	sl, #1
 80092ee:	d914      	bls.n	800931a <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80092f0:	2302      	movs	r3, #2
 80092f2:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80092f4:	4631      	mov	r1, r6
 80092f6:	6828      	ldr	r0, [r5, #0]
 80092f8:	f001 fe50 	bl	800af9c <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80092fc:	b9a0      	cbnz	r0, 8009328 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 80092fe:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009302:	e038      	b.n	8009376 <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009304:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800930a:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 800930c:	2701      	movs	r7, #1
 800930e:	e0aa      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009310:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009316:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009318:	e0a5      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800931a:	2301      	movs	r3, #1
 800931c:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800931e:	4631      	mov	r1, r6
 8009320:	6828      	ldr	r0, [r5, #0]
 8009322:	f001 fe22 	bl	800af6a <SDMMC_CmdReadSingleBlock>
 8009326:	e7e9      	b.n	80092fc <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	4a51      	ldr	r2, [pc, #324]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800932e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009330:	4303      	orrs	r3, r0
 8009332:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009334:	2301      	movs	r3, #1
 8009336:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800933a:	2300      	movs	r3, #0
 800933c:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800933e:	e092      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009340:	6828      	ldr	r0, [r5, #0]
 8009342:	f001 fcf9 	bl	800ad38 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009346:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009348:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800934c:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800934e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009352:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009354:	0e00      	lsrs	r0, r0, #24
 8009356:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8009358:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 800935a:	3601      	adds	r6, #1
 800935c:	2e07      	cmp	r6, #7
 800935e:	d9ef      	bls.n	8009340 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 8009360:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009364:	f7fa fa26 	bl	80037b4 <HAL_GetTick>
 8009368:	eba0 0008 	sub.w	r0, r0, r8
 800936c:	4548      	cmp	r0, r9
 800936e:	d20f      	bcs.n	8009390 <HAL_SD_ReadBlocks+0x11c>
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	d00c      	beq.n	8009390 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800937a:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 800937e:	d115      	bne.n	80093ac <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009382:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009386:	d0ed      	beq.n	8009364 <HAL_SD_ReadBlocks+0xf0>
 8009388:	f1bb 0f1f 	cmp.w	fp, #31
 800938c:	d9ea      	bls.n	8009364 <HAL_SD_ReadBlocks+0xf0>
 800938e:	e7e5      	b.n	800935c <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	4a37      	ldr	r2, [pc, #220]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 8009394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009396:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800939c:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800939e:	2301      	movs	r3, #1
 80093a0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 80093a8:	2703      	movs	r7, #3
 80093aa:	e05c      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093b2:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80093b4:	6828      	ldr	r0, [r5, #0]
 80093b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80093b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80093bc:	d005      	beq.n	80093ca <HAL_SD_ReadBlocks+0x156>
 80093be:	f1ba 0f01 	cmp.w	sl, #1
 80093c2:	d902      	bls.n	80093ca <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80093c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d118      	bne.n	80093fc <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ce:	f012 0f08 	tst.w	r2, #8
 80093d2:	d124      	bne.n	800941e <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80093d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d6:	f012 0f02 	tst.w	r2, #2
 80093da:	d12c      	bne.n	8009436 <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80093dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093de:	f012 0f20 	tst.w	r2, #32
 80093e2:	d034      	beq.n	800944e <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093e4:	4a22      	ldr	r2, [pc, #136]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80093e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80093ea:	f043 0320 	orr.w	r3, r3, #32
 80093ee:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80093f6:	2300      	movs	r3, #0
 80093f8:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80093fa:	e034      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80093fc:	f001 fe1a 	bl	800b034 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009400:	4603      	mov	r3, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	d0e1      	beq.n	80093ca <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009406:	682a      	ldr	r2, [r5, #0]
 8009408:	4919      	ldr	r1, [pc, #100]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 800940a:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800940c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800940e:	4313      	orrs	r3, r2
 8009410:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009412:	2301      	movs	r3, #1
 8009414:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009418:	2300      	movs	r3, #0
 800941a:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 800941c:	e023      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800941e:	4a14      	ldr	r2, [pc, #80]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 8009420:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009422:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800942a:	2301      	movs	r3, #1
 800942c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009434:	e017      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009436:	4a0e      	ldr	r2, [pc, #56]	; (8009470 <HAL_SD_ReadBlocks+0x1fc>)
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800943a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800943c:	f043 0302 	orr.w	r3, r3, #2
 8009440:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009442:	2301      	movs	r3, #1
 8009444:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009448:	2300      	movs	r3, #0
 800944a:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800944c:	e00b      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800944e:	4a09      	ldr	r2, [pc, #36]	; (8009474 <HAL_SD_ReadBlocks+0x200>)
 8009450:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009452:	2301      	movs	r3, #1
 8009454:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8009458:	2700      	movs	r7, #0
 800945a:	e004      	b.n	8009466 <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800945c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800945e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009462:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009464:	2701      	movs	r7, #1
}
 8009466:	4638      	mov	r0, r7
 8009468:	b007      	add	sp, #28
 800946a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946e:	bf00      	nop
 8009470:	1fe00fff 	.word	0x1fe00fff
 8009474:	18000f3a 	.word	0x18000f3a

08009478 <HAL_SD_WriteBlocks>:
{
 8009478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	b08b      	sub	sp, #44	; 0x2c
 800947e:	4605      	mov	r5, r0
 8009480:	460c      	mov	r4, r1
 8009482:	4616      	mov	r6, r2
 8009484:	469a      	mov	sl, r3
 8009486:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 800948a:	f7fa f993 	bl	80037b4 <HAL_GetTick>
  if (NULL == pData)
 800948e:	2c00      	cmp	r4, #0
 8009490:	d03b      	beq.n	800950a <HAL_SD_WriteBlocks+0x92>
 8009492:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009494:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009498:	b2ff      	uxtb	r7, r7
 800949a:	2f01      	cmp	r7, #1
 800949c:	f040 80e9 	bne.w	8009672 <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094a0:	2300      	movs	r3, #0
 80094a2:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094a4:	eb06 030a 	add.w	r3, r6, sl
 80094a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d833      	bhi.n	8009516 <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 80094ae:	2303      	movs	r3, #3
 80094b0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d000      	beq.n	80094c2 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 80094c0:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094c6:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80094c8:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80094cc:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80094ce:	2390      	movs	r3, #144	; 0x90
 80094d0:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80094d2:	2300      	movs	r3, #0
 80094d4:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094d6:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80094d8:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094da:	a904      	add	r1, sp, #16
 80094dc:	6828      	ldr	r0, [r5, #0]
 80094de:	f001 fc55 	bl	800ad8c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80094e2:	682a      	ldr	r2, [r5, #0]
 80094e4:	68d3      	ldr	r3, [r2, #12]
 80094e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ea:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80094ec:	f1ba 0f01 	cmp.w	sl, #1
 80094f0:	d916      	bls.n	8009520 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80094f2:	2320      	movs	r3, #32
 80094f4:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80094f6:	4631      	mov	r1, r6
 80094f8:	6828      	ldr	r0, [r5, #0]
 80094fa:	f001 fd81 	bl	800b000 <SDMMC_CmdWriteMultiBlock>
 80094fe:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	b9ab      	cbnz	r3, 8009530 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8009504:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009508:	e040      	b.n	800958c <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800950a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800950c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009510:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009512:	2701      	movs	r7, #1
 8009514:	e0b2      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009516:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800951c:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 800951e:	e0ad      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009520:	2310      	movs	r3, #16
 8009522:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009524:	4631      	mov	r1, r6
 8009526:	6828      	ldr	r0, [r5, #0]
 8009528:	f001 fd51 	bl	800afce <SDMMC_CmdWriteSingleBlock>
 800952c:	9001      	str	r0, [sp, #4]
 800952e:	e7e7      	b.n	8009500 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	4a54      	ldr	r2, [pc, #336]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009536:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009538:	9a01      	ldr	r2, [sp, #4]
 800953a:	4313      	orrs	r3, r2
 800953c:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800953e:	2301      	movs	r3, #1
 8009540:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009544:	2300      	movs	r3, #0
 8009546:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009548:	e098      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
 800954a:	7823      	ldrb	r3, [r4, #0]
 800954c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 800954e:	7862      	ldrb	r2, [r4, #1]
 8009550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009554:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009556:	78a2      	ldrb	r2, [r4, #2]
 8009558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800955c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800955e:	78e2      	ldrb	r2, [r4, #3]
 8009560:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009564:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8009566:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009568:	a903      	add	r1, sp, #12
 800956a:	6828      	ldr	r0, [r5, #0]
 800956c:	f001 fbe7 	bl	800ad3e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009570:	3601      	adds	r6, #1
 8009572:	2e07      	cmp	r6, #7
 8009574:	d9e9      	bls.n	800954a <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 8009576:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800957a:	f7fa f91b 	bl	80037b4 <HAL_GetTick>
 800957e:	eba0 0008 	sub.w	r0, r0, r8
 8009582:	4548      	cmp	r0, r9
 8009584:	d20f      	bcs.n	80095a6 <HAL_SD_WriteBlocks+0x12e>
 8009586:	f1b9 0f00 	cmp.w	r9, #0
 800958a:	d00c      	beq.n	80095a6 <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009590:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8009594:	d115      	bne.n	80095c2 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009598:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800959c:	d0ed      	beq.n	800957a <HAL_SD_WriteBlocks+0x102>
 800959e:	f1bb 0f1f 	cmp.w	fp, #31
 80095a2:	d9ea      	bls.n	800957a <HAL_SD_WriteBlocks+0x102>
 80095a4:	e7e5      	b.n	8009572 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	4a36      	ldr	r2, [pc, #216]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 80095aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80095ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80095ae:	9a01      	ldr	r2, [sp, #4]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80095b4:	2301      	movs	r3, #1
 80095b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 80095be:	2703      	movs	r7, #3
 80095c0:	e05c      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80095c2:	68da      	ldr	r2, [r3, #12]
 80095c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c8:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80095ca:	6828      	ldr	r0, [r5, #0]
 80095cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80095d2:	d005      	beq.n	80095e0 <HAL_SD_WriteBlocks+0x168>
 80095d4:	f1ba 0f01 	cmp.w	sl, #1
 80095d8:	d902      	bls.n	80095e0 <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80095da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d118      	bne.n	8009612 <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095e4:	f012 0f08 	tst.w	r2, #8
 80095e8:	d124      	bne.n	8009634 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095ec:	f012 0f02 	tst.w	r2, #2
 80095f0:	d12c      	bne.n	800964c <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80095f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095f4:	f012 0f10 	tst.w	r2, #16
 80095f8:	d034      	beq.n	8009664 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095fa:	4a22      	ldr	r2, [pc, #136]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 80095fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80095fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009600:	f043 0310 	orr.w	r3, r3, #16
 8009604:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009606:	2301      	movs	r3, #1
 8009608:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800960c:	2300      	movs	r3, #0
 800960e:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009610:	e034      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009612:	f001 fd0f 	bl	800b034 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009616:	4603      	mov	r3, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	d0e1      	beq.n	80095e0 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800961c:	682a      	ldr	r2, [r5, #0]
 800961e:	4919      	ldr	r1, [pc, #100]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 8009620:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009622:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009624:	4313      	orrs	r3, r2
 8009626:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009628:	2301      	movs	r3, #1
 800962a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800962e:	2300      	movs	r3, #0
 8009630:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8009632:	e023      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009634:	4a13      	ldr	r2, [pc, #76]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009638:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800963a:	f043 0308 	orr.w	r3, r3, #8
 800963e:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009640:	2301      	movs	r3, #1
 8009642:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009646:	2300      	movs	r3, #0
 8009648:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800964a:	e017      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800964c:	4a0d      	ldr	r2, [pc, #52]	; (8009684 <HAL_SD_WriteBlocks+0x20c>)
 800964e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009650:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009652:	f043 0302 	orr.w	r3, r3, #2
 8009656:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009658:	2301      	movs	r3, #1
 800965a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800965e:	2300      	movs	r3, #0
 8009660:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009662:	e00b      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <HAL_SD_WriteBlocks+0x210>)
 8009666:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009668:	2301      	movs	r3, #1
 800966a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 800966e:	2700      	movs	r7, #0
 8009670:	e004      	b.n	800967c <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009674:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009678:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 800967a:	2701      	movs	r7, #1
}
 800967c:	4638      	mov	r0, r7
 800967e:	b00b      	add	sp, #44	; 0x2c
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	1fe00fff 	.word	0x1fe00fff
 8009688:	18000f3a 	.word	0x18000f3a

0800968c <HAL_SD_ErrorCallback>:
}
 800968c:	4770      	bx	lr
	...

08009690 <HAL_SD_GetCardCSD>:
{
 8009690:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009692:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009694:	0f92      	lsrs	r2, r2, #30
 8009696:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009698:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800969a:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800969e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80096a0:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 80096a4:	f002 0203 	and.w	r2, r2, #3
 80096a8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80096aa:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 80096ae:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80096b0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 80096b4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80096b6:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80096ba:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80096bc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096be:	0d12      	lsrs	r2, r2, #20
 80096c0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80096c2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 80096c6:	f002 020f 	and.w	r2, r2, #15
 80096ca:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80096cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096ce:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80096d2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80096d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096d6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80096da:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80096dc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096de:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80096e2:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80096e4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096e6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80096ea:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80096ec:	2200      	movs	r2, #0
 80096ee:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80096f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	f040 8086 	bne.w	8009804 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80096f8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80096fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80096fe:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8009702:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009704:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009708:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800970a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800970c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009710:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009712:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009716:	f002 0207 	and.w	r2, r2, #7
 800971a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800971c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800971e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009722:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009724:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009726:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800972a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800972c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800972e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009732:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009734:	690a      	ldr	r2, [r1, #16]
 8009736:	3201      	adds	r2, #1
 8009738:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800973a:	7e08      	ldrb	r0, [r1, #24]
 800973c:	f000 0007 	and.w	r0, r0, #7
 8009740:	3002      	adds	r0, #2
 8009742:	4082      	lsls	r2, r0
 8009744:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009746:	f891 c008 	ldrb.w	ip, [r1, #8]
 800974a:	f00c 0c0f 	and.w	ip, ip, #15
 800974e:	2001      	movs	r0, #1
 8009750:	fa00 f00c 	lsl.w	r0, r0, ip
 8009754:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009756:	0a40      	lsrs	r0, r0, #9
 8009758:	fb00 f202 	mul.w	r2, r0, r2
 800975c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800975e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009762:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009766:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800976a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800976c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800976e:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009772:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009774:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800977a:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800977c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800977e:	0fd2      	lsrs	r2, r2, #31
 8009780:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009782:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009784:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009788:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800978a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800978c:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009790:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009792:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009794:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009798:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800979a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800979c:	f3c2 5240 	ubfx	r2, r2, #21, #1
 80097a0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 80097a4:	2000      	movs	r0, #0
 80097a6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80097ae:	f002 0201 	and.w	r2, r2, #1
 80097b2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80097b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097b8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80097bc:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80097c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097c2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80097c6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80097ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097cc:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80097d0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80097d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097d6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80097da:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80097de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097e0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80097e4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80097e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80097ea:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80097ee:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80097f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80097f8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009802:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009804:	2a01      	cmp	r2, #1
 8009806:	d111      	bne.n	800982c <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009808:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800980a:	0412      	lsls	r2, r2, #16
 800980c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009810:	f8b0 0066 	ldrh.w	r0, [r0, #102]	; 0x66
 8009814:	4302      	orrs	r2, r0
 8009816:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009818:	690a      	ldr	r2, [r1, #16]
 800981a:	3201      	adds	r2, #1
 800981c:	0292      	lsls	r2, r2, #10
 800981e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009820:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009826:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009828:	655a      	str	r2, [r3, #84]	; 0x54
 800982a:	e79b      	b.n	8009764 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982c:	6802      	ldr	r2, [r0, #0]
 800982e:	4905      	ldr	r1, [pc, #20]	; (8009844 <HAL_SD_GetCardCSD+0x1b4>)
 8009830:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009832:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009838:	6342      	str	r2, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800983a:	2001      	movs	r0, #1
 800983c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	1fe00fff 	.word	0x1fe00fff

08009848 <SD_InitCard>:
{
 8009848:	b530      	push	{r4, r5, lr}
 800984a:	b08d      	sub	sp, #52	; 0x34
 800984c:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8009854:	f7f9 ffae 	bl	80037b4 <HAL_GetTick>
 8009858:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	f001 fa7a 	bl	800ad54 <SDMMC_GetPowerState>
 8009860:	2800      	cmp	r0, #0
 8009862:	d067      	beq.n	8009934 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009866:	2b03      	cmp	r3, #3
 8009868:	d117      	bne.n	800989a <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800986a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800986c:	2b03      	cmp	r3, #3
 800986e:	d02f      	beq.n	80098d0 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8009870:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009874:	bb63      	cbnz	r3, 80098d0 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009876:	f10d 0102 	add.w	r1, sp, #2
 800987a:	6820      	ldr	r0, [r4, #0]
 800987c:	f001 fd88 	bl	800b390 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009880:	4603      	mov	r3, r0
 8009882:	2800      	cmp	r0, #0
 8009884:	d158      	bne.n	8009938 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009886:	f7f9 ff95 	bl	80037b4 <HAL_GetTick>
 800988a:	1b43      	subs	r3, r0, r5
 800988c:	f241 3287 	movw	r2, #4999	; 0x1387
 8009890:	4293      	cmp	r3, r2
 8009892:	d9ed      	bls.n	8009870 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009898:	e04e      	b.n	8009938 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	f001 fcbc 	bl	800b218 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098a0:	4603      	mov	r3, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d148      	bne.n	8009938 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098a6:	2100      	movs	r1, #0
 80098a8:	6820      	ldr	r0, [r4, #0]
 80098aa:	f001 fa6c 	bl	800ad86 <SDMMC_GetResponse>
 80098ae:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098b0:	2104      	movs	r1, #4
 80098b2:	6820      	ldr	r0, [r4, #0]
 80098b4:	f001 fa67 	bl	800ad86 <SDMMC_GetResponse>
 80098b8:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098ba:	2108      	movs	r1, #8
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	f001 fa62 	bl	800ad86 <SDMMC_GetResponse>
 80098c2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098c4:	210c      	movs	r1, #12
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	f001 fa5d 	bl	800ad86 <SDMMC_GetResponse>
 80098cc:	67a0      	str	r0, [r4, #120]	; 0x78
 80098ce:	e7cc      	b.n	800986a <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80098d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d01c      	beq.n	8009910 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 80098d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80098da:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098dc:	0409      	lsls	r1, r1, #16
 80098de:	6820      	ldr	r0, [r4, #0]
 80098e0:	f001 fcb0 	bl	800b244 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098e4:	4603      	mov	r3, r0
 80098e6:	bb38      	cbnz	r0, 8009938 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098e8:	2100      	movs	r1, #0
 80098ea:	6820      	ldr	r0, [r4, #0]
 80098ec:	f001 fa4b 	bl	800ad86 <SDMMC_GetResponse>
 80098f0:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098f2:	2104      	movs	r1, #4
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	f001 fa46 	bl	800ad86 <SDMMC_GetResponse>
 80098fa:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098fc:	2108      	movs	r1, #8
 80098fe:	6820      	ldr	r0, [r4, #0]
 8009900:	f001 fa41 	bl	800ad86 <SDMMC_GetResponse>
 8009904:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009906:	210c      	movs	r1, #12
 8009908:	6820      	ldr	r0, [r4, #0]
 800990a:	f001 fa3c 	bl	800ad86 <SDMMC_GetResponse>
 800990e:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009910:	2104      	movs	r1, #4
 8009912:	6820      	ldr	r0, [r4, #0]
 8009914:	f001 fa37 	bl	800ad86 <SDMMC_GetResponse>
 8009918:	0d00      	lsrs	r0, r0, #20
 800991a:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800991c:	a901      	add	r1, sp, #4
 800991e:	4620      	mov	r0, r4
 8009920:	f7ff feb6 	bl	8009690 <HAL_SD_GetCardCSD>
 8009924:	b958      	cbnz	r0, 800993e <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009926:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009928:	0409      	lsls	r1, r1, #16
 800992a:	6820      	ldr	r0, [r4, #0]
 800992c:	f001 fbae 	bl	800b08c <SDMMC_CmdSelDesel>
 8009930:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8009932:	e001      	b.n	8009938 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009934:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8009938:	4618      	mov	r0, r3
 800993a:	b00d      	add	sp, #52	; 0x34
 800993c:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800993e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009942:	e7f9      	b.n	8009938 <SD_InitCard+0xf0>

08009944 <HAL_SD_InitCard>:
{
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800994a:	2300      	movs	r3, #0
 800994c:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800994e:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009950:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009952:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009954:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009958:	2100      	movs	r1, #0
 800995a:	f7fe fab7 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800995e:	b938      	cbnz	r0, 8009970 <HAL_SD_InitCard+0x2c>
    hsd->State = HAL_SD_STATE_READY;
 8009960:	2001      	movs	r0, #1
 8009962:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009966:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800996a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800996c:	b008      	add	sp, #32
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009972:	0a05      	lsrs	r5, r0, #8
 8009974:	4b23      	ldr	r3, [pc, #140]	; (8009a04 <HAL_SD_InitCard+0xc0>)
 8009976:	fba3 3505 	umull	r3, r5, r3, r5
 800997a:	092d      	lsrs	r5, r5, #4
 800997c:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 800997e:	ab08      	add	r3, sp, #32
 8009980:	e913 0003 	ldmdb	r3, {r0, r1}
 8009984:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009988:	ab03      	add	r3, sp, #12
 800998a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	f001 f9bb 	bl	800ad08 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009992:	6820      	ldr	r0, [r4, #0]
 8009994:	f001 f9d8 	bl	800ad48 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8009998:	b115      	cbz	r5, 80099a0 <HAL_SD_InitCard+0x5c>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800999a:	006d      	lsls	r5, r5, #1
 800999c:	fbb6 f6f5 	udiv	r6, r6, r5
  if (sdmmc_clk != 0U)
 80099a0:	b95e      	cbnz	r6, 80099ba <HAL_SD_InitCard+0x76>
  errorstate = SD_PowerON(hsd);
 80099a2:	4620      	mov	r0, r4
 80099a4:	f7ff fa54 	bl	8008e50 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 80099a8:	4602      	mov	r2, r0
 80099aa:	b168      	cbz	r0, 80099c8 <HAL_SD_InitCard+0x84>
    hsd->State = HAL_SD_STATE_READY;
 80099ac:	2001      	movs	r0, #1
 80099ae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80099b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099b4:	4313      	orrs	r3, r2
 80099b6:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80099b8:	e7d8      	b.n	800996c <HAL_SD_InitCard+0x28>
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80099ba:	4813      	ldr	r0, [pc, #76]	; (8009a08 <HAL_SD_InitCard+0xc4>)
 80099bc:	fbb0 f0f6 	udiv	r0, r0, r6
 80099c0:	3001      	adds	r0, #1
 80099c2:	f7f9 fefd 	bl	80037c0 <HAL_Delay>
 80099c6:	e7ec      	b.n	80099a2 <HAL_SD_InitCard+0x5e>
  errorstate = SD_InitCard(hsd);
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7ff ff3d 	bl	8009848 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 80099ce:	4602      	mov	r2, r0
 80099d0:	b130      	cbz	r0, 80099e0 <HAL_SD_InitCard+0x9c>
    hsd->State = HAL_SD_STATE_READY;
 80099d2:	2001      	movs	r0, #1
 80099d4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80099d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099da:	4313      	orrs	r3, r2
 80099dc:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80099de:	e7c5      	b.n	800996c <HAL_SD_InitCard+0x28>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80099e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099e4:	6820      	ldr	r0, [r4, #0]
 80099e6:	f001 faa7 	bl	800af38 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80099ea:	b908      	cbnz	r0, 80099f0 <HAL_SD_InitCard+0xac>
  return HAL_OK;
 80099ec:	2000      	movs	r0, #0
 80099ee:	e7bd      	b.n	800996c <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	4906      	ldr	r1, [pc, #24]	; (8009a0c <HAL_SD_InitCard+0xc8>)
 80099f4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80099f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f8:	4303      	orrs	r3, r0
 80099fa:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80099fc:	2001      	movs	r0, #1
 80099fe:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8009a02:	e7b3      	b.n	800996c <HAL_SD_InitCard+0x28>
 8009a04:	014f8b59 	.word	0x014f8b59
 8009a08:	00012110 	.word	0x00012110
 8009a0c:	1fe00fff 	.word	0x1fe00fff

08009a10 <HAL_SD_GetCardStatus>:
{
 8009a10:	b530      	push	{r4, r5, lr}
 8009a12:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009a14:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d059      	beq.n	8009ad2 <HAL_SD_GetCardStatus+0xc2>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009a22:	4669      	mov	r1, sp
 8009a24:	f7ff faba 	bl	8008f9c <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a28:	b1b8      	cbz	r0, 8009a5a <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	492b      	ldr	r1, [pc, #172]	; (8009adc <HAL_SD_GetCardStatus+0xcc>)
 8009a2e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a32:	4303      	orrs	r3, r0
 8009a34:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009a36:	2501      	movs	r5, #1
 8009a38:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	f001 fa79 	bl	800af38 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d044      	beq.n	8009ad4 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a4a:	6822      	ldr	r2, [r4, #0]
 8009a4c:	4923      	ldr	r1, [pc, #140]	; (8009adc <HAL_SD_GetCardStatus+0xcc>)
 8009a4e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009a50:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009a52:	2501      	movs	r5, #1
 8009a54:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8009a58:	e03c      	b.n	8009ad4 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009a5a:	9a00      	ldr	r2, [sp, #0]
 8009a5c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8009a60:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009a62:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8009a66:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009a68:	0a13      	lsrs	r3, r2, #8
 8009a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a6e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a76:	9a01      	ldr	r2, [sp, #4]
 8009a78:	0213      	lsls	r3, r2, #8
 8009a7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009a7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a82:	0a11      	lsrs	r1, r2, #8
 8009a84:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a88:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009a8a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009a8e:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009a96:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009a9a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009a9c:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009aa0:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009aa2:	0c1b      	lsrs	r3, r3, #16
 8009aa4:	9a03      	ldr	r2, [sp, #12]
 8009aa6:	b2d1      	uxtb	r1, r2
 8009aa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009aac:	430b      	orrs	r3, r1
 8009aae:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009ab0:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009ab4:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009ab6:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009aba:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009abc:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009ac0:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009ac2:	f002 020f 	and.w	r2, r2, #15
 8009ac6:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009ac8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009acc:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2500      	movs	r5, #0
 8009ad0:	e7b4      	b.n	8009a3c <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009ad2:	2501      	movs	r5, #1
}
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	b011      	add	sp, #68	; 0x44
 8009ad8:	bd30      	pop	{r4, r5, pc}
 8009ada:	bf00      	nop
 8009adc:	1fe00fff 	.word	0x1fe00fff

08009ae0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ae0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009ae2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009ae4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009ae6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009ae8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009aea:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009aec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009aee:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009af0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009af2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009af4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009af6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009af8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009afa:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009afc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009afe:	61cb      	str	r3, [r1, #28]
}
 8009b00:	2000      	movs	r0, #0
 8009b02:	4770      	bx	lr

08009b04 <HAL_SD_ConfigWideBusOperation>:
{
 8009b04:	b530      	push	{r4, r5, lr}
 8009b06:	b089      	sub	sp, #36	; 0x24
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d01c      	beq.n	8009b52 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009b18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009b1c:	d008      	beq.n	8009b30 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009b1e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009b22:	d00a      	beq.n	8009b3a <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009b24:	b179      	cbz	r1, 8009b46 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b2c:	6343      	str	r3, [r0, #52]	; 0x34
 8009b2e:	e014      	b.n	8009b5a <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b36:	6343      	str	r3, [r0, #52]	; 0x34
 8009b38:	e00f      	b.n	8009b5a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009b3a:	f7ff fb37 	bl	80091ac <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b40:	4303      	orrs	r3, r0
 8009b42:	6363      	str	r3, [r4, #52]	; 0x34
 8009b44:	e009      	b.n	8009b5a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009b46:	f7ff fb58 	bl	80091fa <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b4c:	4303      	orrs	r3, r0
 8009b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8009b50:	e003      	b.n	8009b5a <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b58:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b5c:	b1b3      	cbz	r3, 8009b8c <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	4a3a      	ldr	r2, [pc, #232]	; (8009c4c <HAL_SD_ConfigWideBusOperation+0x148>)
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009b64:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b6a:	6820      	ldr	r0, [r4, #0]
 8009b6c:	f001 f9e4 	bl	800af38 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b70:	b130      	cbz	r0, 8009b80 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b72:	6823      	ldr	r3, [r4, #0]
 8009b74:	4935      	ldr	r1, [pc, #212]	; (8009c4c <HAL_SD_ConfigWideBusOperation+0x148>)
 8009b76:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b7a:	4303      	orrs	r3, r0
 8009b7c:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8009b7e:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8009b80:	2301      	movs	r3, #1
 8009b82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009b86:	4628      	mov	r0, r5
 8009b88:	b009      	add	sp, #36	; 0x24
 8009b8a:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009b8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009b90:	2100      	movs	r1, #0
 8009b92:	f7fe f99b 	bl	8007ecc <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009b96:	4602      	mov	r2, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d050      	beq.n	8009c3e <HAL_SD_ConfigWideBusOperation+0x13a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009b9c:	6863      	ldr	r3, [r4, #4]
 8009b9e:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ba0:	68a3      	ldr	r3, [r4, #8]
 8009ba2:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009ba4:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ba6:	6923      	ldr	r3, [r4, #16]
 8009ba8:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009baa:	6961      	ldr	r1, [r4, #20]
 8009bac:	4b28      	ldr	r3, [pc, #160]	; (8009c50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009bae:	fba3 0302 	umull	r0, r3, r3, r2
 8009bb2:	0e18      	lsrs	r0, r3, #24
 8009bb4:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009bb8:	d30c      	bcc.n	8009bd4 <HAL_SD_ConfigWideBusOperation+0xd0>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009bba:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009bbc:	ab08      	add	r3, sp, #32
 8009bbe:	e913 0003 	ldmdb	r3, {r0, r1}
 8009bc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009bc6:	ab03      	add	r3, sp, #12
 8009bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bca:	6820      	ldr	r0, [r4, #0]
 8009bcc:	f001 f89c 	bl	800ad08 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8009bd0:	2500      	movs	r5, #0
 8009bd2:	e7c8      	b.n	8009b66 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bda:	d008      	beq.n	8009bee <HAL_SD_ConfigWideBusOperation+0xea>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be0:	d007      	beq.n	8009bf2 <HAL_SD_ConfigWideBusOperation+0xee>
        if (hsd->Init.ClockDiv == 0U)
 8009be2:	bb11      	cbnz	r1, 8009c2a <HAL_SD_ConfigWideBusOperation+0x126>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009be4:	4b1b      	ldr	r3, [pc, #108]	; (8009c54 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d91d      	bls.n	8009c26 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009bea:	9007      	str	r0, [sp, #28]
 8009bec:	e7e6      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009bee:	9107      	str	r1, [sp, #28]
 8009bf0:	e7e4      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
        if (hsd->Init.ClockDiv == 0U)
 8009bf2:	b951      	cbnz	r1, 8009c0a <HAL_SD_ConfigWideBusOperation+0x106>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009bf4:	4b18      	ldr	r3, [pc, #96]	; (8009c58 <HAL_SD_ConfigWideBusOperation+0x154>)
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d905      	bls.n	8009c06 <HAL_SD_ConfigWideBusOperation+0x102>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009bfa:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8009c00:	0e5b      	lsrs	r3, r3, #25
 8009c02:	9307      	str	r3, [sp, #28]
 8009c04:	e7da      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c06:	9107      	str	r1, [sp, #28]
 8009c08:	e7d8      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009c0a:	004b      	lsls	r3, r1, #1
 8009c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c10:	4811      	ldr	r0, [pc, #68]	; (8009c58 <HAL_SD_ConfigWideBusOperation+0x154>)
 8009c12:	4283      	cmp	r3, r0
 8009c14:	d905      	bls.n	8009c22 <HAL_SD_ConfigWideBusOperation+0x11e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009c16:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009c18:	fba3 2302 	umull	r2, r3, r3, r2
 8009c1c:	0e5b      	lsrs	r3, r3, #25
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	e7cc      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c22:	9107      	str	r1, [sp, #28]
 8009c24:	e7ca      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c26:	9107      	str	r1, [sp, #28]
 8009c28:	e7c8      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009c2a:	004b      	lsls	r3, r1, #1
 8009c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c30:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d901      	bls.n	8009c3a <HAL_SD_ConfigWideBusOperation+0x136>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009c36:	9007      	str	r0, [sp, #28]
 8009c38:	e7c0      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009c3a:	9107      	str	r1, [sp, #28]
 8009c3c:	e7be      	b.n	8009bbc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c44:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8009c46:	2501      	movs	r5, #1
 8009c48:	e78d      	b.n	8009b66 <HAL_SD_ConfigWideBusOperation+0x62>
 8009c4a:	bf00      	nop
 8009c4c:	1fe00fff 	.word	0x1fe00fff
 8009c50:	55e63b89 	.word	0x55e63b89
 8009c54:	017d7840 	.word	0x017d7840
 8009c58:	02faf080 	.word	0x02faf080

08009c5c <HAL_SD_GetCardState>:
{
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8009c62:	2300      	movs	r3, #0
 8009c64:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8009c66:	a901      	add	r1, sp, #4
 8009c68:	f7ff faee 	bl	8009248 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c6c:	b110      	cbz	r0, 8009c74 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8009c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c70:	4303      	orrs	r3, r0
 8009c72:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009c74:	9801      	ldr	r0, [sp, #4]
 8009c76:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8009c7a:	b002      	add	sp, #8
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <HAL_SD_Init>:
{
 8009c7e:	b570      	push	{r4, r5, r6, lr}
 8009c80:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d054      	beq.n	8009d30 <HAL_SD_Init+0xb2>
 8009c86:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8009c88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009c8c:	b153      	cbz	r3, 8009ca4 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009c8e:	2304      	movs	r3, #4
 8009c90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7ff fe55 	bl	8009944 <HAL_SD_InitCard>
 8009c9a:	b138      	cbz	r0, 8009cac <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009c9c:	2501      	movs	r5, #1
}
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	b006      	add	sp, #24
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009ca4:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009ca6:	f7f8 fd8f 	bl	80027c8 <HAL_SD_MspInit>
 8009caa:	e7f0      	b.n	8009c8e <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009cac:	a901      	add	r1, sp, #4
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff feae 	bl	8009a10 <HAL_SD_GetCardStatus>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d13d      	bne.n	8009d34 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009cb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009cbc:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009cbe:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009cc2:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009cc4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cc6:	2901      	cmp	r1, #1
 8009cc8:	d00b      	beq.n	8009ce2 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009cca:	2901      	cmp	r1, #1
 8009ccc:	d00f      	beq.n	8009cee <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009cd2:	68e1      	ldr	r1, [r4, #12]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7ff ff15 	bl	8009b04 <HAL_SD_ConfigWideBusOperation>
 8009cda:	4605      	mov	r5, r0
 8009cdc:	b158      	cbz	r0, 8009cf6 <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009cde:	2501      	movs	r5, #1
 8009ce0:	e7dd      	b.n	8009c9e <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	d0f1      	beq.n	8009cca <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cea:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cec:	e7f1      	b.n	8009cd2 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cf2:	65a3      	str	r3, [r4, #88]	; 0x58
 8009cf4:	e7ed      	b.n	8009cd2 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009cf6:	f7f9 fd5d 	bl	80037b4 <HAL_GetTick>
 8009cfa:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff ffad 	bl	8009c5c <HAL_SD_GetCardState>
 8009d02:	2804      	cmp	r0, #4
 8009d04:	d00d      	beq.n	8009d22 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d06:	f7f9 fd55 	bl	80037b4 <HAL_GetTick>
 8009d0a:	1b80      	subs	r0, r0, r6
 8009d0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009d10:	d1f4      	bne.n	8009cfc <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009d12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d16:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8009d1e:	2503      	movs	r5, #3
 8009d20:	e7bd      	b.n	8009c9e <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009d26:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 8009d2e:	e7b6      	b.n	8009c9e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009d30:	2501      	movs	r5, #1
 8009d32:	e7b4      	b.n	8009c9e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 8009d34:	2501      	movs	r5, #1
 8009d36:	e7b2      	b.n	8009c9e <HAL_SD_Init+0x20>

08009d38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009d38:	4770      	bx	lr

08009d3a <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009d3a:	4770      	bx	lr

08009d3c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009d3c:	4770      	bx	lr

08009d3e <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009d3e:	4770      	bx	lr

08009d40 <HAL_SD_IRQHandler>:
{
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 8009d44:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009d46:	6803      	ldr	r3, [r0, #0]
 8009d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d4a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8009d4e:	d002      	beq.n	8009d56 <HAL_SD_IRQHandler+0x16>
 8009d50:	f015 0f08 	tst.w	r5, #8
 8009d54:	d12a      	bne.n	8009dac <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d58:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009d5c:	d067      	beq.n	8009e2e <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d62:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009d64:	6822      	ldr	r2, [r4, #0]
 8009d66:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009d68:	4b7e      	ldr	r3, [pc, #504]	; (8009f64 <HAL_SD_IRQHandler+0x224>)
 8009d6a:	400b      	ands	r3, r1
 8009d6c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d76:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	68d3      	ldr	r3, [r2, #12]
 8009d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d80:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8009d82:	f015 0f08 	tst.w	r5, #8
 8009d86:	d025      	beq.n	8009dd4 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d88:	f015 0f22 	tst.w	r5, #34	; 0x22
 8009d8c:	d111      	bne.n	8009db2 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	4a75      	ldr	r2, [pc, #468]	; (8009f68 <HAL_SD_IRQHandler+0x228>)
 8009d92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d94:	2301      	movs	r3, #1
 8009d96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d9e:	f015 0f03 	tst.w	r5, #3
 8009da2:	d013      	beq.n	8009dcc <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 8009da4:	4620      	mov	r0, r4
 8009da6:	f001 fb9f 	bl	800b4e8 <HAL_SD_RxCpltCallback>
 8009daa:	e001      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 8009dac:	f7ff f8b2 	bl	8008f14 <SD_Read_IT>
}
 8009db0:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009db2:	6820      	ldr	r0, [r4, #0]
 8009db4:	f001 f93e 	bl	800b034 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009db8:	4603      	mov	r3, r0
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d0e7      	beq.n	8009d8e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8009dbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f7ff fc61 	bl	800968c <HAL_SD_ErrorCallback>
 8009dca:	e7e0      	b.n	8009d8e <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f001 fb86 	bl	800b4de <HAL_SD_TxCpltCallback>
 8009dd2:	e7ed      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009dd4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009dd8:	d0ea      	beq.n	8009db0 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 8009dda:	6822      	ldr	r2, [r4, #0]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009de4:	6822      	ldr	r2, [r4, #0]
 8009de6:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009de8:	f015 0f22 	tst.w	r5, #34	; 0x22
 8009dec:	d10e      	bne.n	8009e0c <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 8009dee:	2301      	movs	r3, #1
 8009df0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009df8:	f015 0f30 	tst.w	r5, #48	; 0x30
 8009dfc:	d113      	bne.n	8009e26 <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009dfe:	f015 0f03 	tst.w	r5, #3
 8009e02:	d0d5      	beq.n	8009db0 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8009e04:	4620      	mov	r0, r4
 8009e06:	f001 fb6f 	bl	800b4e8 <HAL_SD_RxCpltCallback>
 8009e0a:	e7d1      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e0c:	6820      	ldr	r0, [r4, #0]
 8009e0e:	f001 f911 	bl	800b034 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e12:	4603      	mov	r3, r0
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d0ea      	beq.n	8009dee <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 8009e18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff fc34 	bl	800968c <HAL_SD_ErrorCallback>
 8009e24:	e7e3      	b.n	8009dee <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 8009e26:	4620      	mov	r0, r4
 8009e28:	f001 fb59 	bl	800b4de <HAL_SD_TxCpltCallback>
 8009e2c:	e7e7      	b.n	8009dfe <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e30:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8009e34:	d002      	beq.n	8009e3c <HAL_SD_IRQHandler+0xfc>
 8009e36:	f015 0f08 	tst.w	r5, #8
 8009e3a:	d162      	bne.n	8009f02 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e3e:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 8009e42:	d06b      	beq.n	8009f1c <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e46:	f012 0f02 	tst.w	r2, #2
 8009e4a:	d003      	beq.n	8009e54 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e4e:	f042 0202 	orr.w	r2, r2, #2
 8009e52:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e56:	f012 0f08 	tst.w	r2, #8
 8009e5a:	d003      	beq.n	8009e64 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e5e:	f042 0208 	orr.w	r2, r2, #8
 8009e62:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e66:	f012 0f20 	tst.w	r2, #32
 8009e6a:	d003      	beq.n	8009e74 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e6e:	f042 0220 	orr.w	r2, r2, #32
 8009e72:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e76:	f012 0f10 	tst.w	r2, #16
 8009e7a:	d003      	beq.n	8009e84 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009e7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e7e:	f042 0210 	orr.w	r2, r2, #16
 8009e82:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e84:	4a38      	ldr	r2, [pc, #224]	; (8009f68 <HAL_SD_IRQHandler+0x228>)
 8009e86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009e88:	6822      	ldr	r2, [r4, #0]
 8009e8a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009e8c:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8009e90:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	68d3      	ldr	r3, [r2, #12]
 8009e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e9a:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009e9c:	6822      	ldr	r2, [r4, #0]
 8009e9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	68d3      	ldr	r3, [r2, #12]
 8009eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eae:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	f001 f8bf 	bl	800b034 <SDMMC_CmdStopTransfer>
 8009eb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009eb8:	4303      	orrs	r3, r0
 8009eba:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009ebc:	6822      	ldr	r2, [r4, #0]
 8009ebe:	68d3      	ldr	r3, [r2, #12]
 8009ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec4:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ecc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009ece:	f015 0f08 	tst.w	r5, #8
 8009ed2:	d11a      	bne.n	8009f0a <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009ed4:	f015 0f80 	tst.w	r5, #128	; 0x80
 8009ed8:	f43f af6a 	beq.w	8009db0 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009edc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f43f af66 	beq.w	8009db0 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009eec:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009efa:	4620      	mov	r0, r4
 8009efc:	f7ff fbc6 	bl	800968c <HAL_SD_ErrorCallback>
 8009f00:	e756      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 8009f02:	4620      	mov	r0, r4
 8009f04:	f7ff f824 	bl	8008f50 <SD_Write_IT>
 8009f08:	e752      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009f14:	4620      	mov	r0, r4
 8009f16:	f7ff fbb9 	bl	800968c <HAL_SD_ErrorCallback>
 8009f1a:	e749      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f1e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8009f22:	f43f af45 	beq.w	8009db0 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f30:	f013 0f04 	tst.w	r3, #4
 8009f34:	d10a      	bne.n	8009f4c <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f36:	f015 0f20 	tst.w	r5, #32
 8009f3a:	d003      	beq.n	8009f44 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f7ff fefe 	bl	8009d3e <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8009f42:	e735      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009f44:	4620      	mov	r0, r4
 8009f46:	f7ff fef8 	bl	8009d3a <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8009f4a:	e731      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009f4c:	f015 0f20 	tst.w	r5, #32
 8009f50:	d003      	beq.n	8009f5a <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7ff fef2 	bl	8009d3c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8009f58:	e72a      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff feec 	bl	8009d38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009f60:	e726      	b.n	8009db0 <HAL_SD_IRQHandler+0x70>
 8009f62:	bf00      	nop
 8009f64:	ffff3ec5 	.word	0xffff3ec5
 8009f68:	18000f3a 	.word	0x18000f3a

08009f6c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009f6c:	b308      	cbz	r0, 8009fb2 <HAL_SDRAM_Init+0x46>
{
 8009f6e:	b538      	push	{r3, r4, r5, lr}
 8009f70:	460d      	mov	r5, r1
 8009f72:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009f74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009f78:	b1b3      	cbz	r3, 8009fa8 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f80:	4621      	mov	r1, r4
 8009f82:	f851 0b04 	ldr.w	r0, [r1], #4
 8009f86:	f000 fdf1 	bl	800ab6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f8a:	6862      	ldr	r2, [r4, #4]
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	6820      	ldr	r0, [r4, #0]
 8009f90:	f000 fe26 	bl	800abe0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009f94:	4a08      	ldr	r2, [pc, #32]	; (8009fb8 <HAL_SDRAM_Init+0x4c>)
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f9c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8009fa4:	2000      	movs	r0, #0
}
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009fa8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009fac:	f7f6 ff26 	bl	8000dfc <HAL_SDRAM_MspInit>
 8009fb0:	e7e3      	b.n	8009f7a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8009fb2:	2001      	movs	r0, #1
}
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	52004000 	.word	0x52004000

08009fbc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009fc0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009fc4:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009fc6:	2802      	cmp	r0, #2
 8009fc8:	d005      	beq.n	8009fd6 <HAL_SDRAM_SendCommand+0x1a>
 8009fca:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009fcc:	2805      	cmp	r0, #5
 8009fce:	bf18      	it	ne
 8009fd0:	2801      	cmpne	r0, #1
 8009fd2:	d001      	beq.n	8009fd8 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8009fd4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	f000 fe52 	bl	800ac88 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d004      	beq.n	8009ff4 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7f0      	b.n	8009fd6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009ff4:	2305      	movs	r3, #5
 8009ff6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	e7eb      	b.n	8009fd6 <HAL_SDRAM_SendCommand+0x1a>

08009ffe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009ffe:	b510      	push	{r4, lr}
 800a000:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a002:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a006:	b2d8      	uxtb	r0, r3
 800a008:	2802      	cmp	r0, #2
 800a00a:	d005      	beq.n	800a018 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a00c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a016:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a018:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a01a:	2302      	movs	r3, #2
 800a01c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	f000 fe49 	bl	800acb8 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a026:	2301      	movs	r3, #1
 800a028:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a02c:	2000      	movs	r0, #0
 800a02e:	e7f3      	b.n	800a018 <HAL_SDRAM_ProgramRefreshRate+0x1a>

0800a030 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a030:	6802      	ldr	r2, [r0, #0]
 800a032:	6813      	ldr	r3, [r2, #0]
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	6013      	str	r3, [r2, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a03a:	6802      	ldr	r2, [r0, #0]
 800a03c:	6911      	ldr	r1, [r2, #16]
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <SPI_AbortTransfer+0x70>)
 800a040:	400b      	ands	r3, r1
 800a042:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a044:	6802      	ldr	r2, [r0, #0]
 800a046:	6993      	ldr	r3, [r2, #24]
 800a048:	f043 0308 	orr.w	r3, r3, #8
 800a04c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a04e:	6802      	ldr	r2, [r0, #0]
 800a050:	6993      	ldr	r3, [r2, #24]
 800a052:	f043 0310 	orr.w	r3, r3, #16
 800a056:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a058:	6802      	ldr	r2, [r0, #0]
 800a05a:	6893      	ldr	r3, [r2, #8]
 800a05c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a060:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a062:	6802      	ldr	r2, [r0, #0]
 800a064:	6993      	ldr	r3, [r2, #24]
 800a066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a06a:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a06c:	6802      	ldr	r2, [r0, #0]
 800a06e:	6993      	ldr	r3, [r2, #24]
 800a070:	f043 0320 	orr.w	r3, r3, #32
 800a074:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a076:	6802      	ldr	r2, [r0, #0]
 800a078:	6993      	ldr	r3, [r2, #24]
 800a07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a080:	6802      	ldr	r2, [r0, #0]
 800a082:	6993      	ldr	r3, [r2, #24]
 800a084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a088:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a08a:	6802      	ldr	r2, [r0, #0]
 800a08c:	6993      	ldr	r3, [r2, #24]
 800a08e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a092:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a094:	2300      	movs	r3, #0
 800a096:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a09a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a09e:	4770      	bx	lr
 800a0a0:	fffffc90 	.word	0xfffffc90

0800a0a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a0a4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a0a6:	6802      	ldr	r2, [r0, #0]
 800a0a8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a0aa:	6991      	ldr	r1, [r2, #24]
 800a0ac:	f041 0108 	orr.w	r1, r1, #8
 800a0b0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a0b2:	6801      	ldr	r1, [r0, #0]
 800a0b4:	698a      	ldr	r2, [r1, #24]
 800a0b6:	f042 0210 	orr.w	r2, r2, #16
 800a0ba:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a0bc:	6801      	ldr	r1, [r0, #0]
 800a0be:	680a      	ldr	r2, [r1, #0]
 800a0c0:	f022 0201 	bic.w	r2, r2, #1
 800a0c4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a0c6:	6801      	ldr	r1, [r0, #0]
 800a0c8:	690c      	ldr	r4, [r1, #16]
 800a0ca:	4a29      	ldr	r2, [pc, #164]	; (800a170 <SPI_CloseTransfer+0xcc>)
 800a0cc:	4022      	ands	r2, r4
 800a0ce:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a0d0:	6801      	ldr	r1, [r0, #0]
 800a0d2:	688a      	ldr	r2, [r1, #8]
 800a0d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a0d8:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0da:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	2a04      	cmp	r2, #4
 800a0e2:	d00d      	beq.n	800a100 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a0e4:	f013 0f20 	tst.w	r3, #32
 800a0e8:	d00a      	beq.n	800a100 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a0ea:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a0ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0f2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a0f6:	6801      	ldr	r1, [r0, #0]
 800a0f8:	698a      	ldr	r2, [r1, #24]
 800a0fa:	f042 0220 	orr.w	r2, r2, #32
 800a0fe:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a100:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a104:	b2d2      	uxtb	r2, r2
 800a106:	2a03      	cmp	r2, #3
 800a108:	d00d      	beq.n	800a126 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a10a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a10e:	d00a      	beq.n	800a126 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a110:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a114:	f042 0204 	orr.w	r2, r2, #4
 800a118:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a11c:	6801      	ldr	r1, [r0, #0]
 800a11e:	698a      	ldr	r2, [r1, #24]
 800a120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a124:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a126:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a12a:	d00a      	beq.n	800a142 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a12c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a130:	f042 0201 	orr.w	r2, r2, #1
 800a134:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a138:	6801      	ldr	r1, [r0, #0]
 800a13a:	698a      	ldr	r2, [r1, #24]
 800a13c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a140:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a142:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a146:	d00a      	beq.n	800a15e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a148:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a14c:	f043 0308 	orr.w	r3, r3, #8
 800a150:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a154:	6802      	ldr	r2, [r0, #0]
 800a156:	6993      	ldr	r3, [r2, #24]
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a15e:	2300      	movs	r3, #0
 800a160:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a164:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	fffffc90 	.word	0xfffffc90

0800a174 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a174:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a176:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a178:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a17a:	3008      	adds	r0, #8
 800a17c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800a17e:	fb03 0000 	mla	r0, r3, r0, r0
 800a182:	4770      	bx	lr

0800a184 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a184:	2800      	cmp	r0, #0
 800a186:	f000 80b7 	beq.w	800a2f8 <HAL_SPI_Init+0x174>
{
 800a18a:	b570      	push	{r4, r5, r6, lr}
 800a18c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a18e:	2300      	movs	r3, #0
 800a190:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a192:	6805      	ldr	r5, [r0, #0]
 800a194:	4b5c      	ldr	r3, [pc, #368]	; (800a308 <HAL_SPI_Init+0x184>)
 800a196:	4e5d      	ldr	r6, [pc, #372]	; (800a30c <HAL_SPI_Init+0x188>)
 800a198:	429d      	cmp	r5, r3
 800a19a:	bf18      	it	ne
 800a19c:	42b5      	cmpne	r5, r6
 800a19e:	bf14      	ite	ne
 800a1a0:	2601      	movne	r6, #1
 800a1a2:	2600      	moveq	r6, #0
 800a1a4:	d007      	beq.n	800a1b6 <HAL_SPI_Init+0x32>
 800a1a6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a1aa:	429d      	cmp	r5, r3
 800a1ac:	d003      	beq.n	800a1b6 <HAL_SPI_Init+0x32>
 800a1ae:	68c3      	ldr	r3, [r0, #12]
 800a1b0:	2b0f      	cmp	r3, #15
 800a1b2:	f200 80a3 	bhi.w	800a2fc <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7ff ffdc 	bl	800a174 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1bc:	b12e      	cbz	r6, 800a1ca <HAL_SPI_Init+0x46>
 800a1be:	4b54      	ldr	r3, [pc, #336]	; (800a310 <HAL_SPI_Init+0x18c>)
 800a1c0:	429d      	cmp	r5, r3
 800a1c2:	d002      	beq.n	800a1ca <HAL_SPI_Init+0x46>
 800a1c4:	2808      	cmp	r0, #8
 800a1c6:	f200 809b 	bhi.w	800a300 <HAL_SPI_Init+0x17c>
 800a1ca:	4a4f      	ldr	r2, [pc, #316]	; (800a308 <HAL_SPI_Init+0x184>)
 800a1cc:	4b4f      	ldr	r3, [pc, #316]	; (800a30c <HAL_SPI_Init+0x188>)
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	bf18      	it	ne
 800a1d2:	4295      	cmpne	r5, r2
 800a1d4:	d003      	beq.n	800a1de <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a1d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1da:	429d      	cmp	r5, r3
 800a1dc:	d102      	bne.n	800a1e4 <HAL_SPI_Init+0x60>
 800a1de:	2810      	cmp	r0, #16
 800a1e0:	f200 8090 	bhi.w	800a304 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1e4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a1e8:	b1f3      	cbz	r3, 800a228 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a1f0:	6822      	ldr	r2, [r4, #0]
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	f023 0301 	bic.w	r3, r3, #1
 800a1f8:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a202:	69a1      	ldr	r1, [r4, #24]
 800a204:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a208:	d014      	beq.n	800a234 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a20a:	6863      	ldr	r3, [r4, #4]
 800a20c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a210:	d023      	beq.n	800a25a <HAL_SPI_Init+0xd6>
 800a212:	68e3      	ldr	r3, [r4, #12]
 800a214:	2b06      	cmp	r3, #6
 800a216:	d920      	bls.n	800a25a <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a218:	6821      	ldr	r1, [r4, #0]
 800a21a:	680b      	ldr	r3, [r1, #0]
 800a21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a220:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a222:	4303      	orrs	r3, r0
 800a224:	600b      	str	r3, [r1, #0]
 800a226:	e01d      	b.n	800a264 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 800a228:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7f8 fb75 	bl	800291c <HAL_SPI_MspInit>
 800a232:	e7da      	b.n	800a1ea <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a234:	6861      	ldr	r1, [r4, #4]
 800a236:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a23a:	d006      	beq.n	800a24a <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a23c:	2900      	cmp	r1, #0
 800a23e:	d1e4      	bne.n	800a20a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a240:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a242:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a246:	d1e0      	bne.n	800a20a <HAL_SPI_Init+0x86>
 800a248:	e002      	b.n	800a250 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a24a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a24c:	2800      	cmp	r0, #0
 800a24e:	d1f5      	bne.n	800a23c <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a250:	6819      	ldr	r1, [r3, #0]
 800a252:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a256:	6019      	str	r1, [r3, #0]
 800a258:	e7d7      	b.n	800a20a <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a262:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a264:	69e3      	ldr	r3, [r4, #28]
 800a266:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a268:	430b      	orrs	r3, r1
 800a26a:	4313      	orrs	r3, r2
 800a26c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a26e:	4313      	orrs	r3, r2
 800a270:	68e1      	ldr	r1, [r4, #12]
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	430b      	orrs	r3, r1
 800a276:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a27a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a27c:	4313      	orrs	r3, r2
 800a27e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a280:	4313      	orrs	r3, r2
 800a282:	69a2      	ldr	r2, [r4, #24]
 800a284:	4313      	orrs	r3, r2
 800a286:	6922      	ldr	r2, [r4, #16]
 800a288:	4313      	orrs	r3, r2
 800a28a:	6962      	ldr	r2, [r4, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	6a22      	ldr	r2, [r4, #32]
 800a290:	4313      	orrs	r3, r2
 800a292:	6862      	ldr	r2, [r4, #4]
 800a294:	4313      	orrs	r3, r2
 800a296:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a298:	4313      	orrs	r3, r2
 800a29a:	68a2      	ldr	r2, [r4, #8]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a2a4:	6822      	ldr	r2, [r4, #0]
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a2aa:	6863      	ldr	r3, [r4, #4]
 800a2ac:	b96b      	cbnz	r3, 800a2ca <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	6893      	ldr	r3, [r2, #8]
 800a2b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a2b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a2ba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a2bc:	6822      	ldr	r2, [r4, #0]
 800a2be:	6893      	ldr	r3, [r2, #8]
 800a2c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a2c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2c8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a2ce:	f023 0301 	bic.w	r3, r3, #1
 800a2d2:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a2da:	d006      	beq.n	800a2ea <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a2dc:	6822      	ldr	r2, [r4, #0]
 800a2de:	68d3      	ldr	r3, [r2, #12]
 800a2e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a2f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a2f8:	2001      	movs	r0, #1
}
 800a2fa:	4770      	bx	lr
    return HAL_ERROR;
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	e7fa      	b.n	800a2f6 <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 800a300:	2001      	movs	r0, #1
 800a302:	e7f8      	b.n	800a2f6 <HAL_SPI_Init+0x172>
 800a304:	2001      	movs	r0, #1
 800a306:	e7f6      	b.n	800a2f6 <HAL_SPI_Init+0x172>
 800a308:	40013000 	.word	0x40013000
 800a30c:	40003800 	.word	0x40003800
 800a310:	40003c00 	.word	0x40003c00

0800a314 <HAL_SPI_Receive_DMA>:
{
 800a314:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 800a316:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	f000 80d4 	beq.w	800a4c8 <HAL_SPI_Receive_DMA+0x1b4>
 800a320:	4604      	mov	r4, r0
 800a322:	4616      	mov	r6, r2
 800a324:	2301      	movs	r3, #1
 800a326:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a32a:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800a32e:	b2ed      	uxtb	r5, r5
 800a330:	429d      	cmp	r5, r3
 800a332:	d17d      	bne.n	800a430 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 800a334:	2a00      	cmp	r2, #0
 800a336:	bf18      	it	ne
 800a338:	2900      	cmpne	r1, #0
 800a33a:	d07f      	beq.n	800a43c <HAL_SPI_Receive_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a33c:	2304      	movs	r3, #4
 800a33e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a342:	2300      	movs	r3, #0
 800a344:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a348:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a34a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a34e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a352:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a354:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a356:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a35a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a35e:	6883      	ldr	r3, [r0, #8]
 800a360:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a364:	d06e      	beq.n	800a444 <HAL_SPI_Receive_DMA+0x130>
    SPI_2LINES_RX(hspi);
 800a366:	6802      	ldr	r2, [r0, #0]
 800a368:	68d3      	ldr	r3, [r2, #12]
 800a36a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a36e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a372:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a374:	68e3      	ldr	r3, [r4, #12]
 800a376:	2b0f      	cmp	r3, #15
 800a378:	d904      	bls.n	800a384 <HAL_SPI_Receive_DMA+0x70>
 800a37a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a37c:	6992      	ldr	r2, [r2, #24]
 800a37e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a382:	d165      	bne.n	800a450 <HAL_SPI_Receive_DMA+0x13c>
 800a384:	2b07      	cmp	r3, #7
 800a386:	d907      	bls.n	800a398 <HAL_SPI_Receive_DMA+0x84>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a388:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a390:	bf18      	it	ne
 800a392:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 800a396:	d15b      	bne.n	800a450 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	6893      	ldr	r3, [r2, #8]
 800a39c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3a0:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	2b07      	cmp	r3, #7
 800a3a6:	d867      	bhi.n	800a478 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a3b0:	d052      	beq.n	800a458 <HAL_SPI_Receive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3b8:	d056      	beq.n	800a468 <HAL_SPI_Receive_DMA+0x154>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a3ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3bc:	4a43      	ldr	r2, [pc, #268]	; (800a4cc <HAL_SPI_Receive_DMA+0x1b8>)
 800a3be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a3c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3c2:	4a43      	ldr	r2, [pc, #268]	; (800a4d0 <HAL_SPI_Receive_DMA+0x1bc>)
 800a3c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a3c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3c8:	4a42      	ldr	r2, [pc, #264]	; (800a4d4 <HAL_SPI_Receive_DMA+0x1c0>)
 800a3ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a3cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a3d2:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800a3d4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3dc:	3130      	adds	r1, #48	; 0x30
 800a3de:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a3e0:	f7f9 feae 	bl	8004140 <HAL_DMA_Start_IT>
 800a3e4:	4601      	mov	r1, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d155      	bne.n	800a496 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a3ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f2:	d05d      	beq.n	800a4b0 <HAL_SPI_Receive_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	6842      	ldr	r2, [r0, #4]
 800a3f8:	4b37      	ldr	r3, [pc, #220]	; (800a4d8 <HAL_SPI_Receive_DMA+0x1c4>)
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	4333      	orrs	r3, r6
 800a3fe:	6043      	str	r3, [r0, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a400:	6822      	ldr	r2, [r4, #0]
 800a402:	6893      	ldr	r3, [r2, #8]
 800a404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a408:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	6913      	ldr	r3, [r2, #16]
 800a40e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800a412:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	f043 0301 	orr.w	r3, r3, #1
 800a41c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a424:	d04a      	beq.n	800a4bc <HAL_SPI_Receive_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
 800a426:	2300      	movs	r3, #0
 800a428:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800a42c:	460d      	mov	r5, r1
 800a42e:	e003      	b.n	800a438 <HAL_SPI_Receive_DMA+0x124>
    __HAL_UNLOCK(hspi);
 800a430:	2300      	movs	r3, #0
 800a432:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800a436:	2502      	movs	r5, #2
}
 800a438:	4628      	mov	r0, r5
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800a43c:	2300      	movs	r3, #0
 800a43e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800a442:	e7f9      	b.n	800a438 <HAL_SPI_Receive_DMA+0x124>
    SPI_1LINE_RX(hspi);
 800a444:	6802      	ldr	r2, [r0, #0]
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e791      	b.n	800a374 <HAL_SPI_Receive_DMA+0x60>
    __HAL_UNLOCK(hspi);
 800a450:	2300      	movs	r3, #0
 800a452:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a456:	e7ef      	b.n	800a438 <HAL_SPI_Receive_DMA+0x124>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a458:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a45c:	b292      	uxth	r2, r2
 800a45e:	3201      	adds	r2, #1
 800a460:	0852      	lsrs	r2, r2, #1
 800a462:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a466:	e7a4      	b.n	800a3b2 <HAL_SPI_Receive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a468:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	3303      	adds	r3, #3
 800a470:	089b      	lsrs	r3, r3, #2
 800a472:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a476:	e7a0      	b.n	800a3ba <HAL_SPI_Receive_DMA+0xa6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a478:	2b0f      	cmp	r3, #15
 800a47a:	d89e      	bhi.n	800a3ba <HAL_SPI_Receive_DMA+0xa6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a47c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a484:	d199      	bne.n	800a3ba <HAL_SPI_Receive_DMA+0xa6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a486:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3301      	adds	r3, #1
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a494:	e791      	b.n	800a3ba <HAL_SPI_Receive_DMA+0xa6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a496:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a49a:	f043 0310 	orr.w	r3, r3, #16
 800a49e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a4ae:	e7c3      	b.n	800a438 <HAL_SPI_Receive_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a4b0:	6822      	ldr	r2, [r4, #0]
 800a4b2:	6850      	ldr	r0, [r2, #4]
 800a4b4:	4b08      	ldr	r3, [pc, #32]	; (800a4d8 <HAL_SPI_Receive_DMA+0x1c4>)
 800a4b6:	4003      	ands	r3, r0
 800a4b8:	6053      	str	r3, [r2, #4]
 800a4ba:	e7a1      	b.n	800a400 <HAL_SPI_Receive_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	6813      	ldr	r3, [r2, #0]
 800a4c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	e7ae      	b.n	800a426 <HAL_SPI_Receive_DMA+0x112>
  __HAL_LOCK(hspi);
 800a4c8:	2502      	movs	r5, #2
 800a4ca:	e7b5      	b.n	800a438 <HAL_SPI_Receive_DMA+0x124>
 800a4cc:	0800a8cb 	.word	0x0800a8cb
 800a4d0:	0800a877 	.word	0x0800a877
 800a4d4:	0800a8e1 	.word	0x0800a8e1
 800a4d8:	ffff0000 	.word	0xffff0000

0800a4dc <HAL_SPI_TransmitReceive_DMA>:
{
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a4e0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800a4e4:	2801      	cmp	r0, #1
 800a4e6:	f000 8115 	beq.w	800a714 <HAL_SPI_TransmitReceive_DMA+0x238>
 800a4ea:	461e      	mov	r6, r3
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a4f2:	f894 5081 	ldrb.w	r5, [r4, #129]	; 0x81
 800a4f6:	b2ed      	uxtb	r5, r5
 800a4f8:	429d      	cmp	r5, r3
 800a4fa:	d16b      	bne.n	800a5d4 <HAL_SPI_TransmitReceive_DMA+0xf8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a4fc:	2a00      	cmp	r2, #0
 800a4fe:	bf18      	it	ne
 800a500:	2900      	cmpne	r1, #0
 800a502:	d06c      	beq.n	800a5de <HAL_SPI_TransmitReceive_DMA+0x102>
 800a504:	2e00      	cmp	r6, #0
 800a506:	d06a      	beq.n	800a5de <HAL_SPI_TransmitReceive_DMA+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a508:	2305      	movs	r3, #5
 800a50a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a50e:	2300      	movs	r3, #0
 800a510:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a514:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a516:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a51a:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a51e:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a520:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a524:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a528:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a52a:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
 800a52c:	6822      	ldr	r2, [r4, #0]
 800a52e:	68d3      	ldr	r3, [r2, #12]
 800a530:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a534:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a536:	6822      	ldr	r2, [r4, #0]
 800a538:	6893      	ldr	r3, [r2, #8]
 800a53a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a53e:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a540:	68e3      	ldr	r3, [r4, #12]
 800a542:	2b0f      	cmp	r3, #15
 800a544:	d904      	bls.n	800a550 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a546:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a548:	6992      	ldr	r2, [r2, #24]
 800a54a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a54e:	d14b      	bne.n	800a5e8 <HAL_SPI_TransmitReceive_DMA+0x10c>
 800a550:	2b07      	cmp	r3, #7
 800a552:	d907      	bls.n	800a564 <HAL_SPI_TransmitReceive_DMA+0x88>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a554:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a556:	6992      	ldr	r2, [r2, #24]
 800a558:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a55c:	bf18      	it	ne
 800a55e:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
 800a562:	d141      	bne.n	800a5e8 <HAL_SPI_TransmitReceive_DMA+0x10c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a564:	2b07      	cmp	r3, #7
 800a566:	d863      	bhi.n	800a630 <HAL_SPI_TransmitReceive_DMA+0x154>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a568:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a56a:	699a      	ldr	r2, [r3, #24]
 800a56c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a570:	d03e      	beq.n	800a5f0 <HAL_SPI_TransmitReceive_DMA+0x114>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a578:	d042      	beq.n	800a600 <HAL_SPI_TransmitReceive_DMA+0x124>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a57a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a57c:	699a      	ldr	r2, [r3, #24]
 800a57e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a582:	d045      	beq.n	800a610 <HAL_SPI_TransmitReceive_DMA+0x134>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a58a:	d049      	beq.n	800a620 <HAL_SPI_TransmitReceive_DMA+0x144>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a58c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a58e:	4a62      	ldr	r2, [pc, #392]	; (800a718 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 800a590:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a592:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a594:	4a61      	ldr	r2, [pc, #388]	; (800a71c <HAL_SPI_TransmitReceive_DMA+0x240>)
 800a596:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a598:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a59a:	4a61      	ldr	r2, [pc, #388]	; (800a720 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800a59c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a59e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a5a4:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800a5a6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5ae:	3130      	adds	r1, #48	; 0x30
 800a5b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a5b2:	f7f9 fdc5 	bl	8004140 <HAL_DMA_Start_IT>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	d056      	beq.n	800a668 <HAL_SPI_TransmitReceive_DMA+0x18c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a5ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a5be:	f043 0310 	orr.w	r3, r3, #16
 800a5c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a5d2:	e007      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a5da:	2502      	movs	r5, #2
 800a5dc:	e002      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a5ee:	e7f9      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a5f0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	3201      	adds	r2, #1
 800a5f8:	0852      	lsrs	r2, r2, #1
 800a5fa:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800a5fe:	e7b8      	b.n	800a572 <HAL_SPI_TransmitReceive_DMA+0x96>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a600:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a604:	b29b      	uxth	r3, r3
 800a606:	3303      	adds	r3, #3
 800a608:	089b      	lsrs	r3, r3, #2
 800a60a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a60e:	e7b4      	b.n	800a57a <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a610:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a614:	b292      	uxth	r2, r2
 800a616:	3201      	adds	r2, #1
 800a618:	0852      	lsrs	r2, r2, #1
 800a61a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a61e:	e7b1      	b.n	800a584 <HAL_SPI_TransmitReceive_DMA+0xa8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a620:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a624:	b29b      	uxth	r3, r3
 800a626:	3303      	adds	r3, #3
 800a628:	089b      	lsrs	r3, r3, #2
 800a62a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a62e:	e7ad      	b.n	800a58c <HAL_SPI_TransmitReceive_DMA+0xb0>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a630:	2b0f      	cmp	r3, #15
 800a632:	d8ab      	bhi.n	800a58c <HAL_SPI_TransmitReceive_DMA+0xb0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a634:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a63c:	d00c      	beq.n	800a658 <HAL_SPI_TransmitReceive_DMA+0x17c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a63e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a646:	d1a1      	bne.n	800a58c <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a648:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3301      	adds	r3, #1
 800a650:	085b      	lsrs	r3, r3, #1
 800a652:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a656:	e799      	b.n	800a58c <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a658:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3301      	adds	r3, #1
 800a660:	085b      	lsrs	r3, r3, #1
 800a662:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a666:	e7ea      	b.n	800a63e <HAL_SPI_TransmitReceive_DMA+0x162>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	6893      	ldr	r3, [r2, #8]
 800a66c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a670:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a672:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a674:	2300      	movs	r3, #0
 800a676:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a678:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a67a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a67c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a67e:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a680:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a682:	4a27      	ldr	r2, [pc, #156]	; (800a720 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800a684:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a686:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800a688:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3220      	adds	r2, #32
 800a690:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a692:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a694:	f7f9 fd54 	bl	8004140 <HAL_DMA_Start_IT>
 800a698:	4601      	mov	r1, r0
 800a69a:	bb10      	cbnz	r0, 800a6e2 <HAL_SPI_TransmitReceive_DMA+0x206>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a69c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a69e:	69db      	ldr	r3, [r3, #28]
 800a6a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a4:	d02a      	beq.n	800a6fc <HAL_SPI_TransmitReceive_DMA+0x220>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	6850      	ldr	r0, [r2, #4]
 800a6aa:	4b1e      	ldr	r3, [pc, #120]	; (800a724 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800a6ac:	4003      	ands	r3, r0
 800a6ae:	4333      	orrs	r3, r6
 800a6b0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	6893      	ldr	r3, [r2, #8]
 800a6b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ba:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a6bc:	6822      	ldr	r2, [r4, #0]
 800a6be:	6913      	ldr	r3, [r2, #16]
 800a6c0:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800a6c4:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a6c6:	6822      	ldr	r2, [r4, #0]
 800a6c8:	6813      	ldr	r3, [r2, #0]
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6d6:	d017      	beq.n	800a708 <HAL_SPI_TransmitReceive_DMA+0x22c>
  __HAL_UNLOCK(hspi);
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800a6de:	460d      	mov	r5, r1
 800a6e0:	e780      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a6e6:	f043 0310 	orr.w	r3, r3, #16
 800a6ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a6fa:	e773      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a6fc:	6822      	ldr	r2, [r4, #0]
 800a6fe:	6850      	ldr	r0, [r2, #4]
 800a700:	4b08      	ldr	r3, [pc, #32]	; (800a724 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800a702:	4003      	ands	r3, r0
 800a704:	6053      	str	r3, [r2, #4]
 800a706:	e7d4      	b.n	800a6b2 <HAL_SPI_TransmitReceive_DMA+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	6813      	ldr	r3, [r2, #0]
 800a70c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e7e1      	b.n	800a6d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  __HAL_LOCK(hspi);
 800a714:	2502      	movs	r5, #2
 800a716:	e765      	b.n	800a5e4 <HAL_SPI_TransmitReceive_DMA+0x108>
 800a718:	0800a8d5 	.word	0x0800a8d5
 800a71c:	0800a8a1 	.word	0x0800a8a1
 800a720:	0800a8e1 	.word	0x0800a8e1
 800a724:	ffff0000 	.word	0xffff0000

0800a728 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800a728:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	f000 809a 	beq.w	800a866 <HAL_SPI_Abort+0x13e>
{
 800a732:	b510      	push	{r4, lr}
 800a734:	b082      	sub	sp, #8
 800a736:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a738:	2301      	movs	r3, #1
 800a73a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800a73e:	2307      	movs	r3, #7
 800a740:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a744:	4b49      	ldr	r3, [pc, #292]	; (800a86c <HAL_SPI_Abort+0x144>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a49      	ldr	r2, [pc, #292]	; (800a870 <HAL_SPI_Abort+0x148>)
 800a74a:	fba2 2303 	umull	r2, r3, r2, r3
 800a74e:	0a5b      	lsrs	r3, r3, #9
 800a750:	2264      	movs	r2, #100	; 0x64
 800a752:	fb02 f303 	mul.w	r3, r2, r3
 800a756:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a758:	6803      	ldr	r3, [r0, #0]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a760:	d040      	beq.n	800a7e4 <HAL_SPI_Abort+0xbc>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a762:	691a      	ldr	r2, [r3, #16]
 800a764:	f022 0208 	bic.w	r2, r2, #8
 800a768:	611a      	str	r2, [r3, #16]
      count--;
 800a76a:	9b01      	ldr	r3, [sp, #4]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	b12b      	cbz	r3, 800a780 <HAL_SPI_Abort+0x58>
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	f013 0f08 	tst.w	r3, #8
 800a77c:	d1f5      	bne.n	800a76a <HAL_SPI_Abort+0x42>
 800a77e:	e005      	b.n	800a78c <HAL_SPI_Abort+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a780:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a788:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a78c:	6822      	ldr	r2, [r4, #0]
 800a78e:	6813      	ldr	r3, [r2, #0]
 800a790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a794:	6013      	str	r3, [r2, #0]
      count--;
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	3b01      	subs	r3, #1
 800a79a:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a79c:	9b01      	ldr	r3, [sp, #4]
 800a79e:	b12b      	cbz	r3, 800a7ac <HAL_SPI_Abort+0x84>
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a7a0:	6823      	ldr	r3, [r4, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a7a8:	d1f5      	bne.n	800a796 <HAL_SPI_Abort+0x6e>
 800a7aa:	e005      	b.n	800a7b8 <HAL_SPI_Abort+0x90>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a7b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a7b8:	6822      	ldr	r2, [r4, #0]
 800a7ba:	6993      	ldr	r3, [r2, #24]
 800a7bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a7c0:	6193      	str	r3, [r2, #24]
      count--;
 800a7c2:	9b01      	ldr	r3, [sp, #4]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	b12b      	cbz	r3, 800a7d8 <HAL_SPI_Abort+0xb0>
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a7d4:	d1f5      	bne.n	800a7c2 <HAL_SPI_Abort+0x9a>
 800a7d6:	e005      	b.n	800a7e4 <HAL_SPI_Abort+0xbc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a7ec:	d007      	beq.n	800a7fe <HAL_SPI_Abort+0xd6>
    if (hspi->hdmatx != NULL)
 800a7ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a7f0:	b12b      	cbz	r3, 800a7fe <HAL_SPI_Abort+0xd6>
      hspi->hdmatx->XferAbortCallback = NULL;
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a7f6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a7f8:	f7f9 fdee 	bl	80043d8 <HAL_DMA_Abort>
 800a7fc:	b9f8      	cbnz	r0, 800a83e <HAL_SPI_Abort+0x116>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a806:	d007      	beq.n	800a818 <HAL_SPI_Abort+0xf0>
    if (hspi->hdmarx != NULL)
 800a808:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a80a:	b12b      	cbz	r3, 800a818 <HAL_SPI_Abort+0xf0>
      hspi->hdmarx->XferAbortCallback = NULL;
 800a80c:	2200      	movs	r2, #0
 800a80e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a810:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a812:	f7f9 fde1 	bl	80043d8 <HAL_DMA_Abort>
 800a816:	b9d8      	cbnz	r0, 800a850 <HAL_SPI_Abort+0x128>
  SPI_AbortTransfer(hspi);
 800a818:	4620      	mov	r0, r4
 800a81a:	f7ff fc09 	bl	800a030 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a81e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a822:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a826:	d11c      	bne.n	800a862 <HAL_SPI_Abort+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a828:	2000      	movs	r0, #0
 800a82a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800a82e:	2300      	movs	r3, #0
 800a830:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800a834:	2301      	movs	r3, #1
 800a836:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a83a:	b002      	add	sp, #8
 800a83c:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a83e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a840:	f7fa fc41 	bl	80050c6 <HAL_DMA_GetError>
 800a844:	2820      	cmp	r0, #32
 800a846:	d1da      	bne.n	800a7fe <HAL_SPI_Abort+0xd6>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a848:	2340      	movs	r3, #64	; 0x40
 800a84a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a84e:	e7d6      	b.n	800a7fe <HAL_SPI_Abort+0xd6>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a850:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a852:	f7fa fc38 	bl	80050c6 <HAL_DMA_GetError>
 800a856:	2820      	cmp	r0, #32
 800a858:	d1de      	bne.n	800a818 <HAL_SPI_Abort+0xf0>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a860:	e7da      	b.n	800a818 <HAL_SPI_Abort+0xf0>
    errorcode = HAL_ERROR;
 800a862:	2001      	movs	r0, #1
 800a864:	e7e3      	b.n	800a82e <HAL_SPI_Abort+0x106>
  __HAL_LOCK(hspi);
 800a866:	2002      	movs	r0, #2
}
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000754 	.word	0x20000754
 800a870:	057619f1 	.word	0x057619f1

0800a874 <HAL_SPI_TxCpltCallback>:
}
 800a874:	4770      	bx	lr

0800a876 <SPI_DMAReceiveCplt>:
{
 800a876:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a878:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a87a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	2b07      	cmp	r3, #7
 800a882:	d009      	beq.n	800a898 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a884:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a88c:	d005      	beq.n	800a89a <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a88e:	6802      	ldr	r2, [r0, #0]
 800a890:	6913      	ldr	r3, [r2, #16]
 800a892:	f043 0308 	orr.w	r3, r3, #8
 800a896:	6113      	str	r3, [r2, #16]
}
 800a898:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800a89a:	f00d fd71 	bl	8018380 <__HAL_SPI_RxCpltCallback_veneer>
 800a89e:	e7fb      	b.n	800a898 <SPI_DMAReceiveCplt+0x22>

0800a8a0 <SPI_DMATransmitReceiveCplt>:
{
 800a8a0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a8a4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	d009      	beq.n	800a8c2 <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a8ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d005      	beq.n	800a8c4 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a8b8:	6802      	ldr	r2, [r0, #0]
 800a8ba:	6913      	ldr	r3, [r2, #16]
 800a8bc:	f043 0308 	orr.w	r3, r3, #8
 800a8c0:	6113      	str	r3, [r2, #16]
}
 800a8c2:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800a8c4:	f00d fd58 	bl	8018378 <__HAL_SPI_TxRxCpltCallback_veneer>
 800a8c8:	e7fb      	b.n	800a8c2 <SPI_DMATransmitReceiveCplt+0x22>

0800a8ca <SPI_DMAHalfReceiveCplt>:
{
 800a8ca:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a8cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a8ce:	f00d fd4f 	bl	8018370 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800a8d2:	bd08      	pop	{r3, pc}

0800a8d4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800a8d4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a8d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a8d8:	f00d fd2e 	bl	8018338 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800a8dc:	bd08      	pop	{r3, pc}

0800a8de <HAL_SPI_ErrorCallback>:
}
 800a8de:	4770      	bx	lr

0800a8e0 <SPI_DMAError>:
{
 800a8e0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a8e4:	f7fa fbef 	bl	80050c6 <HAL_DMA_GetError>
 800a8e8:	2802      	cmp	r0, #2
 800a8ea:	d100      	bne.n	800a8ee <SPI_DMAError+0xe>
}
 800a8ec:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7ff fbd8 	bl	800a0a4 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a8f8:	f043 0310 	orr.w	r3, r3, #16
 800a8fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a900:	2301      	movs	r3, #1
 800a902:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff ffe9 	bl	800a8de <HAL_SPI_ErrorCallback>
}
 800a90c:	e7ee      	b.n	800a8ec <SPI_DMAError+0xc>

0800a90e <SPI_DMAAbortOnError>:
{
 800a90e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a910:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800a912:	2300      	movs	r3, #0
 800a914:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a918:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800a91c:	2301      	movs	r3, #1
 800a91e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800a922:	f7ff ffdc 	bl	800a8de <HAL_SPI_ErrorCallback>
}
 800a926:	bd08      	pop	{r3, pc}

0800a928 <HAL_SPI_SuspendCallback>:
}
 800a928:	4770      	bx	lr
	...

0800a92c <HAL_SPI_IRQHandler>:
{
 800a92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a930:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800a932:	6806      	ldr	r6, [r0, #0]
 800a934:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800a936:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800a938:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a93c:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800a940:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800a944:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a946:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a94a:	d002      	beq.n	800a952 <HAL_SPI_IRQHandler+0x26>
 800a94c:	f012 0f08 	tst.w	r2, #8
 800a950:	d13f      	bne.n	800a9d2 <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a952:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800a956:	2b04      	cmp	r3, #4
 800a958:	d042      	beq.n	800a9e0 <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 800a95a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a95c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800a960:	f1b8 0f01 	cmp.w	r8, #1
 800a964:	d044      	beq.n	800a9f0 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a966:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800a96a:	2a02      	cmp	r2, #2
 800a96c:	d045      	beq.n	800a9fa <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d146      	bne.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a972:	f015 0f08 	tst.w	r5, #8
 800a976:	d079      	beq.n	800aa6c <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a978:	6822      	ldr	r2, [r4, #0]
 800a97a:	6993      	ldr	r3, [r2, #24]
 800a97c:	f043 0308 	orr.w	r3, r3, #8
 800a980:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a982:	6822      	ldr	r2, [r4, #0]
 800a984:	6993      	ldr	r3, [r2, #24]
 800a986:	f043 0310 	orr.w	r3, r3, #16
 800a98a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	6993      	ldr	r3, [r2, #24]
 800a990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a994:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a996:	6822      	ldr	r2, [r4, #0]
 800a998:	6913      	ldr	r3, [r2, #16]
 800a99a:	f023 0308 	bic.w	r3, r3, #8
 800a99e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9a0:	6823      	ldr	r3, [r4, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800a9a8:	d03b      	beq.n	800aa22 <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff fb7a 	bl	800a0a4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d14a      	bne.n	800aa54 <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a9be:	2f05      	cmp	r7, #5
 800a9c0:	d04c      	beq.n	800aa5c <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a9c2:	2f04      	cmp	r7, #4
 800a9c4:	d04e      	beq.n	800aa64 <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a9c6:	2f03      	cmp	r7, #3
 800a9c8:	d11a      	bne.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7ff ff52 	bl	800a874 <HAL_SPI_TxCpltCallback>
    return;
 800a9d0:	e016      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a9d2:	69b3      	ldr	r3, [r6, #24]
 800a9d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a9d8:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 800a9da:	f7ff ffa5 	bl	800a928 <HAL_SPI_SuspendCallback>
    return;
 800a9de:	e00f      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 800a9e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a9e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	4798      	blx	r3
    handled = 1UL;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e7b5      	b.n	800a95c <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 800a9f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4798      	blx	r3
    handled = 1UL;
 800a9f6:	4643      	mov	r3, r8
 800a9f8:	e7b5      	b.n	800a966 <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800a9fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4798      	blx	r3
}
 800aa00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa04:	2b07      	cmp	r3, #7
 800aa06:	d91c      	bls.n	800aa42 <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aa08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa0a:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800aa0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa10:	3302      	adds	r3, #2
 800aa12:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800aa14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800aa22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0be      	beq.n	800a9aa <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aa2c:	68e3      	ldr	r3, [r4, #12]
 800aa2e:	2b0f      	cmp	r3, #15
 800aa30:	d9e8      	bls.n	800aa04 <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aa38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aa3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	6663      	str	r3, [r4, #100]	; 0x64
 800aa40:	e7e8      	b.n	800aa14 <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa42:	6822      	ldr	r2, [r4, #0]
 800aa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa46:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800aa4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6663      	str	r3, [r4, #100]	; 0x64
 800aa52:	e7df      	b.n	800aa14 <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 800aa54:	4620      	mov	r0, r4
 800aa56:	f7ff ff42 	bl	800a8de <HAL_SPI_ErrorCallback>
      return;
 800aa5a:	e7d1      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f00d fc8b 	bl	8018378 <__HAL_SPI_TxRxCpltCallback_veneer>
 800aa62:	e7cd      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 800aa64:	4620      	mov	r0, r4
 800aa66:	f00d fc8b 	bl	8018380 <__HAL_SPI_RxCpltCallback_veneer>
 800aa6a:	e7c9      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800aa6c:	f415 7f58 	tst.w	r5, #864	; 0x360
 800aa70:	d0c6      	beq.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aa72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa76:	d00a      	beq.n	800aa8e <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa7c:	f043 0304 	orr.w	r3, r3, #4
 800aa80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa84:	6822      	ldr	r2, [r4, #0]
 800aa86:	6993      	ldr	r3, [r2, #24]
 800aa88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa8c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800aa8e:	f415 7f00 	tst.w	r5, #512	; 0x200
 800aa92:	d00a      	beq.n	800aaaa <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aaa0:	6822      	ldr	r2, [r4, #0]
 800aaa2:	6993      	ldr	r3, [r2, #24]
 800aaa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaa8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800aaaa:	f415 7f80 	tst.w	r5, #256	; 0x100
 800aaae:	d00a      	beq.n	800aac6 <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aab0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aab4:	f043 0308 	orr.w	r3, r3, #8
 800aab8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	6993      	ldr	r3, [r2, #24]
 800aac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aac4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800aac6:	f015 0f20 	tst.w	r5, #32
 800aaca:	d00a      	beq.n	800aae2 <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aacc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aad8:	6822      	ldr	r2, [r4, #0]
 800aada:	6993      	ldr	r3, [r2, #24]
 800aadc:	f043 0320 	orr.w	r3, r3, #32
 800aae0:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aae2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d08a      	beq.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	6813      	ldr	r3, [r2, #0]
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	6911      	ldr	r1, [r2, #16]
 800aaf8:	4b1a      	ldr	r3, [pc, #104]	; (800ab64 <HAL_SPI_IRQHandler+0x238>)
 800aafa:	400b      	ands	r3, r1
 800aafc:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aafe:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
 800ab02:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
 800ab06:	d125      	bne.n	800ab54 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab08:	6822      	ldr	r2, [r4, #0]
 800ab0a:	6893      	ldr	r3, [r2, #8]
 800ab0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ab10:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800ab12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ab14:	b15b      	cbz	r3, 800ab2e <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab16:	4a14      	ldr	r2, [pc, #80]	; (800ab68 <HAL_SPI_IRQHandler+0x23c>)
 800ab18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ab1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ab1c:	f7f9 fdfc 	bl	8004718 <HAL_DMA_Abort_IT>
 800ab20:	b128      	cbz	r0, 800ab2e <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ab26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800ab2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f43f af65 	beq.w	800aa00 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ab36:	4a0c      	ldr	r2, [pc, #48]	; (800ab68 <HAL_SPI_IRQHandler+0x23c>)
 800ab38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ab3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ab3c:	f7f9 fdec 	bl	8004718 <HAL_DMA_Abort_IT>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	f43f af5d 	beq.w	800aa00 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab46:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ab4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ab52:	e755      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff febf 	bl	800a8de <HAL_SPI_ErrorCallback>
    return;
 800ab60:	e74e      	b.n	800aa00 <HAL_SPI_IRQHandler+0xd4>
 800ab62:	bf00      	nop
 800ab64:	fffffc94 	.word	0xfffffc94
 800ab68:	0800a90f 	.word	0x0800a90f

0800ab6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ab6c:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ab6e:	680b      	ldr	r3, [r1, #0]
 800ab70:	b9cb      	cbnz	r3, 800aba6 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ab72:	6803      	ldr	r3, [r0, #0]
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <FMC_SDRAM_Init+0x70>)
 800ab76:	401a      	ands	r2, r3
 800ab78:	684b      	ldr	r3, [r1, #4]
 800ab7a:	688c      	ldr	r4, [r1, #8]
 800ab7c:	4323      	orrs	r3, r4
 800ab7e:	68cc      	ldr	r4, [r1, #12]
 800ab80:	4323      	orrs	r3, r4
 800ab82:	690c      	ldr	r4, [r1, #16]
 800ab84:	4323      	orrs	r3, r4
 800ab86:	694c      	ldr	r4, [r1, #20]
 800ab88:	4323      	orrs	r3, r4
 800ab8a:	698c      	ldr	r4, [r1, #24]
 800ab8c:	4323      	orrs	r3, r4
 800ab8e:	69cc      	ldr	r4, [r1, #28]
 800ab90:	4323      	orrs	r3, r4
 800ab92:	6a0c      	ldr	r4, [r1, #32]
 800ab94:	4323      	orrs	r3, r4
 800ab96:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ab98:	430b      	orrs	r3, r1
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ab9e:	2000      	movs	r0, #0
 800aba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba4:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aba6:	6803      	ldr	r3, [r0, #0]
 800aba8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abac:	69ca      	ldr	r2, [r1, #28]
 800abae:	6a0c      	ldr	r4, [r1, #32]
 800abb0:	4322      	orrs	r2, r4
 800abb2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800abb4:	4322      	orrs	r2, r4
 800abb6:	4313      	orrs	r3, r2
 800abb8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800abba:	6843      	ldr	r3, [r0, #4]
 800abbc:	4a07      	ldr	r2, [pc, #28]	; (800abdc <FMC_SDRAM_Init+0x70>)
 800abbe:	401a      	ands	r2, r3
 800abc0:	684b      	ldr	r3, [r1, #4]
 800abc2:	688c      	ldr	r4, [r1, #8]
 800abc4:	4323      	orrs	r3, r4
 800abc6:	68cc      	ldr	r4, [r1, #12]
 800abc8:	4323      	orrs	r3, r4
 800abca:	690c      	ldr	r4, [r1, #16]
 800abcc:	4323      	orrs	r3, r4
 800abce:	694c      	ldr	r4, [r1, #20]
 800abd0:	4323      	orrs	r3, r4
 800abd2:	6989      	ldr	r1, [r1, #24]
 800abd4:	430b      	orrs	r3, r1
 800abd6:	431a      	orrs	r2, r3
 800abd8:	6042      	str	r2, [r0, #4]
 800abda:	e7e0      	b.n	800ab9e <FMC_SDRAM_Init+0x32>
 800abdc:	ffff8000 	.word	0xffff8000

0800abe0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800abe0:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800abe2:	bb3a      	cbnz	r2, 800ac34 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800abe4:	6882      	ldr	r2, [r0, #8]
 800abe6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800abea:	680b      	ldr	r3, [r1, #0]
 800abec:	3b01      	subs	r3, #1
 800abee:	684c      	ldr	r4, [r1, #4]
 800abf0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800abf4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800abf8:	688c      	ldr	r4, [r1, #8]
 800abfa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800abfe:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ac02:	68cc      	ldr	r4, [r1, #12]
 800ac04:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac08:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800ac0c:	690c      	ldr	r4, [r1, #16]
 800ac0e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac12:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800ac16:	694c      	ldr	r4, [r1, #20]
 800ac18:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac1c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800ac20:	6989      	ldr	r1, [r1, #24]
 800ac22:	3901      	subs	r1, #1
 800ac24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac32:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ac34:	6883      	ldr	r3, [r0, #8]
 800ac36:	4a13      	ldr	r2, [pc, #76]	; (800ac84 <FMC_SDRAM_Timing_Init+0xa4>)
 800ac38:	401a      	ands	r2, r3
 800ac3a:	68cb      	ldr	r3, [r1, #12]
 800ac3c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800ac40:	694b      	ldr	r3, [r1, #20]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	051b      	lsls	r3, r3, #20
 800ac46:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800ac4a:	431a      	orrs	r2, r3
 800ac4c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ac4e:	68c2      	ldr	r2, [r0, #12]
 800ac50:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ac54:	680b      	ldr	r3, [r1, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	684c      	ldr	r4, [r1, #4]
 800ac5a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac5e:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800ac62:	688c      	ldr	r4, [r1, #8]
 800ac64:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac68:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ac6c:	690c      	ldr	r4, [r1, #16]
 800ac6e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac72:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800ac76:	6989      	ldr	r1, [r1, #24]
 800ac78:	3901      	subs	r1, #1
 800ac7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60c3      	str	r3, [r0, #12]
 800ac82:	e7d3      	b.n	800ac2c <FMC_SDRAM_Timing_Init+0x4c>
 800ac84:	ff0f0fff 	.word	0xff0f0fff

0800ac88 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ac88:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ac8a:	6903      	ldr	r3, [r0, #16]
 800ac8c:	4a09      	ldr	r2, [pc, #36]	; (800acb4 <FMC_SDRAM_SendCommand+0x2c>)
 800ac8e:	401a      	ands	r2, r3
 800ac90:	680b      	ldr	r3, [r1, #0]
 800ac92:	684c      	ldr	r4, [r1, #4]
 800ac94:	4323      	orrs	r3, r4
 800ac96:	688c      	ldr	r4, [r1, #8]
 800ac98:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ac9c:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 800aca0:	68c9      	ldr	r1, [r1, #12]
 800aca2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800aca6:	431a      	orrs	r2, r3
 800aca8:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800acaa:	2000      	movs	r0, #0
 800acac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	ffc00000 	.word	0xffc00000

0800acb8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800acb8:	6942      	ldr	r2, [r0, #20]
 800acba:	4b03      	ldr	r3, [pc, #12]	; (800acc8 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800acc2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800acc4:	2000      	movs	r0, #0
 800acc6:	4770      	bx	lr
 800acc8:	ffffc001 	.word	0xffffc001

0800accc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800accc:	4b0b      	ldr	r3, [pc, #44]	; (800acfc <SDMMC_GetCmdError+0x30>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0b      	ldr	r2, [pc, #44]	; (800ad00 <SDMMC_GetCmdError+0x34>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	0a5b      	lsrs	r3, r3, #9
 800acd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acdc:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800ace0:	461a      	mov	r2, r3
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b13a      	cbz	r2, 800acf6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ace6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ace8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800acec:	d0f8      	beq.n	800ace0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <SDMMC_GetCmdError+0x38>)
 800acf0:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800acf2:	2000      	movs	r0, #0
 800acf4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800acf6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800acfa:	4770      	bx	lr
 800acfc:	20000754 	.word	0x20000754
 800ad00:	10624dd3 	.word	0x10624dd3
 800ad04:	002000c5 	.word	0x002000c5

0800ad08 <SDMMC_Init>:
{
 800ad08:	b084      	sub	sp, #16
 800ad0a:	f10d 0c04 	add.w	ip, sp, #4
 800ad0e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800ad12:	460b      	mov	r3, r1
 800ad14:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800ad16:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800ad18:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800ad1a:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800ad1c:	4313      	orrs	r3, r2
             Init.ClockDiv
 800ad1e:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800ad20:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ad22:	6841      	ldr	r1, [r0, #4]
 800ad24:	4a03      	ldr	r2, [pc, #12]	; (800ad34 <SDMMC_Init+0x2c>)
 800ad26:	400a      	ands	r2, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	6043      	str	r3, [r0, #4]
}
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	b004      	add	sp, #16
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	ffc02c00 	.word	0xffc02c00

0800ad38 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800ad38:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ad3c:	4770      	bx	lr

0800ad3e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800ad3e:	680b      	ldr	r3, [r1, #0]
 800ad40:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800ad44:	2000      	movs	r0, #0
 800ad46:	4770      	bx	lr

0800ad48 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ad48:	6803      	ldr	r3, [r0, #0]
 800ad4a:	f043 0303 	orr.w	r3, r3, #3
 800ad4e:	6003      	str	r3, [r0, #0]
}
 800ad50:	2000      	movs	r0, #0
 800ad52:	4770      	bx	lr

0800ad54 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ad54:	6800      	ldr	r0, [r0, #0]
}
 800ad56:	f000 0003 	and.w	r0, r0, #3
 800ad5a:	4770      	bx	lr

0800ad5c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800ad5c:	680b      	ldr	r3, [r1, #0]
 800ad5e:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ad60:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800ad62:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ad64:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800ad66:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800ad68:	4313      	orrs	r3, r2
                       Command->CPSM);
 800ad6a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800ad6c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ad6e:	68c1      	ldr	r1, [r0, #12]
 800ad70:	4a02      	ldr	r2, [pc, #8]	; (800ad7c <SDMMC_SendCommand+0x20>)
 800ad72:	400a      	ands	r2, r1
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60c3      	str	r3, [r0, #12]
}
 800ad78:	2000      	movs	r0, #0
 800ad7a:	4770      	bx	lr
 800ad7c:	fffee0c0 	.word	0xfffee0c0

0800ad80 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800ad80:	6900      	ldr	r0, [r0, #16]
}
 800ad82:	b2c0      	uxtb	r0, r0
 800ad84:	4770      	bx	lr

0800ad86 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ad86:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800ad88:	5840      	ldr	r0, [r0, r1]
}
 800ad8a:	4770      	bx	lr

0800ad8c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ad8c:	680b      	ldr	r3, [r1, #0]
 800ad8e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800ad90:	684b      	ldr	r3, [r1, #4]
 800ad92:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ad94:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800ad96:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ad98:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800ad9a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800ad9c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800ad9e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800ada0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ada2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ada4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ada8:	4313      	orrs	r3, r2
 800adaa:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800adac:	2000      	movs	r0, #0
 800adae:	4770      	bx	lr

0800adb0 <SDMMC_CmdGoIdleState>:
{
 800adb0:	b510      	push	{r4, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800adba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800adbc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adbe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc6:	a901      	add	r1, sp, #4
 800adc8:	f7ff ffc8 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800adcc:	4620      	mov	r0, r4
 800adce:	f7ff ff7d 	bl	800accc <SDMMC_GetCmdError>
}
 800add2:	b006      	add	sp, #24
 800add4:	bd10      	pop	{r4, pc}
	...

0800add8 <SDMMC_GetCmdResp1>:
{
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4605      	mov	r5, r0
 800addc:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800adde:	4b51      	ldr	r3, [pc, #324]	; (800af24 <SDMMC_GetCmdResp1+0x14c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4951      	ldr	r1, [pc, #324]	; (800af28 <SDMMC_GetCmdResp1+0x150>)
 800ade4:	fba1 1303 	umull	r1, r3, r1, r3
 800ade8:	0a5b      	lsrs	r3, r3, #9
 800adea:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800adee:	4613      	mov	r3, r2
 800adf0:	3a01      	subs	r2, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d05e      	beq.n	800aeb4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800adf6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800adf8:	4b4c      	ldr	r3, [pc, #304]	; (800af2c <SDMMC_GetCmdResp1+0x154>)
 800adfa:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d0f6      	beq.n	800adee <SDMMC_GetCmdResp1+0x16>
 800ae00:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800ae04:	d1f3      	bne.n	800adee <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ae08:	f013 0f04 	tst.w	r3, #4
 800ae0c:	d106      	bne.n	800ae1c <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ae10:	f013 0f01 	tst.w	r3, #1
 800ae14:	d005      	beq.n	800ae22 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae16:	2001      	movs	r0, #1
 800ae18:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae1a:	e04d      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae1c:	2004      	movs	r0, #4
 800ae1e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae20:	e04a      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae22:	4b43      	ldr	r3, [pc, #268]	; (800af30 <SDMMC_GetCmdResp1+0x158>)
 800ae24:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ae26:	4628      	mov	r0, r5
 800ae28:	f7ff ffaa 	bl	800ad80 <SDMMC_GetCommandResponse>
 800ae2c:	42b0      	cmp	r0, r6
 800ae2e:	d001      	beq.n	800ae34 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae30:	2001      	movs	r0, #1
 800ae32:	e041      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ae34:	2100      	movs	r1, #0
 800ae36:	4628      	mov	r0, r5
 800ae38:	f7ff ffa5 	bl	800ad86 <SDMMC_GetResponse>
 800ae3c:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ae3e:	483d      	ldr	r0, [pc, #244]	; (800af34 <SDMMC_GetCmdResp1+0x15c>)
 800ae40:	4018      	ands	r0, r3
 800ae42:	b3c8      	cbz	r0, 800aeb8 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db38      	blt.n	800aeba <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae48:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ae4c:	d138      	bne.n	800aec0 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae4e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800ae52:	d137      	bne.n	800aec4 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae54:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800ae58:	d136      	bne.n	800aec8 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae5a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800ae5e:	d136      	bne.n	800aece <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ae60:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800ae64:	d136      	bne.n	800aed4 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ae66:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800ae6a:	d136      	bne.n	800aeda <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae6c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800ae70:	d136      	bne.n	800aee0 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae72:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800ae76:	d136      	bne.n	800aee6 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae78:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800ae7c:	d136      	bne.n	800aeec <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae7e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ae82:	d136      	bne.n	800aef2 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800ae88:	d136      	bne.n	800aef8 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae8a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800ae8e:	d136      	bne.n	800aefe <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae90:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ae94:	d136      	bne.n	800af04 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae96:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800ae9a:	d136      	bne.n	800af0a <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800aea0:	d136      	bne.n	800af10 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aea2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800aea6:	d136      	bne.n	800af16 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aea8:	f013 0f08 	tst.w	r3, #8
 800aeac:	d036      	beq.n	800af1c <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aeae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800aeb2:	e001      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800aeb4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aeba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800aebe:	e7fb      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aec0:	2040      	movs	r0, #64	; 0x40
 800aec2:	e7f9      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aec4:	2080      	movs	r0, #128	; 0x80
 800aec6:	e7f7      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aec8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800aecc:	e7f4      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aece:	f44f 7000 	mov.w	r0, #512	; 0x200
 800aed2:	e7f1      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aed4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800aed8:	e7ee      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aeda:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800aede:	e7eb      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aee0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800aee4:	e7e8      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aee6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800aeea:	e7e5      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aeec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800aef0:	e7e2      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800aef2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aef6:	e7df      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aef8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800aefc:	e7dc      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aefe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800af02:	e7d9      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800af04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800af08:	e7d6      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800af0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800af0e:	e7d3      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800af10:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800af14:	e7d0      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800af16:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800af1a:	e7cd      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800af20:	e7ca      	b.n	800aeb8 <SDMMC_GetCmdResp1+0xe0>
 800af22:	bf00      	nop
 800af24:	20000754 	.word	0x20000754
 800af28:	10624dd3 	.word	0x10624dd3
 800af2c:	00200045 	.word	0x00200045
 800af30:	002000c5 	.word	0x002000c5
 800af34:	fdffe008 	.word	0xfdffe008

0800af38 <SDMMC_CmdBlockLength>:
{
 800af38:	b530      	push	{r4, r5, lr}
 800af3a:	b087      	sub	sp, #28
 800af3c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af3e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af40:	2510      	movs	r5, #16
 800af42:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af4a:	2300      	movs	r3, #0
 800af4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af52:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af54:	a901      	add	r1, sp, #4
 800af56:	f7ff ff01 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800af5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af5e:	4629      	mov	r1, r5
 800af60:	4620      	mov	r0, r4
 800af62:	f7ff ff39 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800af66:	b007      	add	sp, #28
 800af68:	bd30      	pop	{r4, r5, pc}

0800af6a <SDMMC_CmdReadSingleBlock>:
{
 800af6a:	b530      	push	{r4, r5, lr}
 800af6c:	b087      	sub	sp, #28
 800af6e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800af70:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800af72:	2511      	movs	r5, #17
 800af74:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af7a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af7c:	2300      	movs	r3, #0
 800af7e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af84:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af86:	a901      	add	r1, sp, #4
 800af88:	f7ff fee8 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af90:	4629      	mov	r1, r5
 800af92:	4620      	mov	r0, r4
 800af94:	f7ff ff20 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800af98:	b007      	add	sp, #28
 800af9a:	bd30      	pop	{r4, r5, pc}

0800af9c <SDMMC_CmdReadMultiBlock>:
{
 800af9c:	b530      	push	{r4, r5, lr}
 800af9e:	b087      	sub	sp, #28
 800afa0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afa2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800afa4:	2512      	movs	r5, #18
 800afa6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afae:	2300      	movs	r3, #0
 800afb0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afb8:	a901      	add	r1, sp, #4
 800afba:	f7ff fecf 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800afbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc2:	4629      	mov	r1, r5
 800afc4:	4620      	mov	r0, r4
 800afc6:	f7ff ff07 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800afca:	b007      	add	sp, #28
 800afcc:	bd30      	pop	{r4, r5, pc}

0800afce <SDMMC_CmdWriteSingleBlock>:
{
 800afce:	b530      	push	{r4, r5, lr}
 800afd0:	b087      	sub	sp, #28
 800afd2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800afd4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800afd6:	2518      	movs	r5, #24
 800afd8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afda:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afde:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afe0:	2300      	movs	r3, #0
 800afe2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afe8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afea:	a901      	add	r1, sp, #4
 800afec:	f7ff feb6 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aff0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff4:	4629      	mov	r1, r5
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7ff feee 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800affc:	b007      	add	sp, #28
 800affe:	bd30      	pop	{r4, r5, pc}

0800b000 <SDMMC_CmdWriteMultiBlock>:
{
 800b000:	b530      	push	{r4, r5, lr}
 800b002:	b087      	sub	sp, #28
 800b004:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b006:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b008:	2519      	movs	r5, #25
 800b00a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b010:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b012:	2300      	movs	r3, #0
 800b014:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b01a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01c:	a901      	add	r1, sp, #4
 800b01e:	f7ff fe9d 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b022:	f241 3288 	movw	r2, #5000	; 0x1388
 800b026:	4629      	mov	r1, r5
 800b028:	4620      	mov	r0, r4
 800b02a:	f7ff fed5 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b02e:	b007      	add	sp, #28
 800b030:	bd30      	pop	{r4, r5, pc}
	...

0800b034 <SDMMC_CmdStopTransfer>:
{
 800b034:	b530      	push	{r4, r5, lr}
 800b036:	b087      	sub	sp, #28
 800b038:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b03e:	250c      	movs	r5, #12
 800b040:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b042:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b046:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b048:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b04e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b050:	68c3      	ldr	r3, [r0, #12]
 800b052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b056:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b058:	68c3      	ldr	r3, [r0, #12]
 800b05a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b05e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	a901      	add	r1, sp, #4
 800b062:	f7ff fe7b 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b066:	4a08      	ldr	r2, [pc, #32]	; (800b088 <SDMMC_CmdStopTransfer+0x54>)
 800b068:	4629      	mov	r1, r5
 800b06a:	4620      	mov	r0, r4
 800b06c:	f7ff feb4 	bl	800add8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b070:	68e3      	ldr	r3, [r4, #12]
 800b072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b076:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b078:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800b07c:	d001      	beq.n	800b082 <SDMMC_CmdStopTransfer+0x4e>
}
 800b07e:	b007      	add	sp, #28
 800b080:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800b082:	2000      	movs	r0, #0
  return errorstate;
 800b084:	e7fb      	b.n	800b07e <SDMMC_CmdStopTransfer+0x4a>
 800b086:	bf00      	nop
 800b088:	05f5e100 	.word	0x05f5e100

0800b08c <SDMMC_CmdSelDesel>:
{
 800b08c:	b530      	push	{r4, r5, lr}
 800b08e:	b087      	sub	sp, #28
 800b090:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b092:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b094:	2507      	movs	r5, #7
 800b096:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b09c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0a6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a8:	a901      	add	r1, sp, #4
 800b0aa:	f7ff fe57 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff fe8f 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b0ba:	b007      	add	sp, #28
 800b0bc:	bd30      	pop	{r4, r5, pc}

0800b0be <SDMMC_CmdAppCommand>:
{
 800b0be:	b530      	push	{r4, r5, lr}
 800b0c0:	b087      	sub	sp, #28
 800b0c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b0c4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b0c6:	2537      	movs	r5, #55	; 0x37
 800b0c8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0da:	a901      	add	r1, sp, #4
 800b0dc:	f7ff fe3e 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f7ff fe76 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b0ec:	b007      	add	sp, #28
 800b0ee:	bd30      	pop	{r4, r5, pc}

0800b0f0 <SDMMC_CmdBusWidth>:
{
 800b0f0:	b530      	push	{r4, r5, lr}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b0f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b0f8:	2506      	movs	r5, #6
 800b0fa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b100:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b102:	2300      	movs	r3, #0
 800b104:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b10a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10c:	a901      	add	r1, sp, #4
 800b10e:	f7ff fe25 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b112:	f241 3288 	movw	r2, #5000	; 0x1388
 800b116:	4629      	mov	r1, r5
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff fe5d 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b11e:	b007      	add	sp, #28
 800b120:	bd30      	pop	{r4, r5, pc}

0800b122 <SDMMC_CmdSendSCR>:
{
 800b122:	b530      	push	{r4, r5, lr}
 800b124:	b087      	sub	sp, #28
 800b126:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b128:	2300      	movs	r3, #0
 800b12a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b12c:	2533      	movs	r5, #51	; 0x33
 800b12e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b130:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b134:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b136:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b13c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b13e:	a901      	add	r1, sp, #4
 800b140:	f7ff fe0c 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b144:	f241 3288 	movw	r2, #5000	; 0x1388
 800b148:	4629      	mov	r1, r5
 800b14a:	4620      	mov	r0, r4
 800b14c:	f7ff fe44 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b150:	b007      	add	sp, #28
 800b152:	bd30      	pop	{r4, r5, pc}

0800b154 <SDMMC_CmdSendStatus>:
{
 800b154:	b530      	push	{r4, r5, lr}
 800b156:	b087      	sub	sp, #28
 800b158:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b15a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b15c:	250d      	movs	r5, #13
 800b15e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b160:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b164:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b166:	2300      	movs	r3, #0
 800b168:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b16a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b16e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b170:	a901      	add	r1, sp, #4
 800b172:	f7ff fdf3 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b176:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17a:	4629      	mov	r1, r5
 800b17c:	4620      	mov	r0, r4
 800b17e:	f7ff fe2b 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b182:	b007      	add	sp, #28
 800b184:	bd30      	pop	{r4, r5, pc}

0800b186 <SDMMC_CmdStatusRegister>:
{
 800b186:	b530      	push	{r4, r5, lr}
 800b188:	b087      	sub	sp, #28
 800b18a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b190:	250d      	movs	r5, #13
 800b192:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b194:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b198:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b19a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b19c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1a2:	a901      	add	r1, sp, #4
 800b1a4:	f7ff fdda 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b1a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f7ff fe12 	bl	800add8 <SDMMC_GetCmdResp1>
}
 800b1b4:	b007      	add	sp, #28
 800b1b6:	bd30      	pop	{r4, r5, pc}

0800b1b8 <SDMMC_GetCmdResp2>:
{
 800b1b8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1ba:	4b14      	ldr	r3, [pc, #80]	; (800b20c <SDMMC_GetCmdResp2+0x54>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a14      	ldr	r2, [pc, #80]	; (800b210 <SDMMC_GetCmdResp2+0x58>)
 800b1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c4:	0a5b      	lsrs	r3, r3, #9
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b1ba      	cbz	r2, 800b204 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800b1d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1d6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b1da:	d0f8      	beq.n	800b1ce <SDMMC_GetCmdResp2+0x16>
 800b1dc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b1e0:	d1f5      	bne.n	800b1ce <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b1e4:	f013 0f04 	tst.w	r3, #4
 800b1e8:	d106      	bne.n	800b1f8 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1ea:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b1ec:	f010 0001 	ands.w	r0, r0, #1
 800b1f0:	d105      	bne.n	800b1fe <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1f2:	4b08      	ldr	r3, [pc, #32]	; (800b214 <SDMMC_GetCmdResp2+0x5c>)
 800b1f4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b1f6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1f8:	2004      	movs	r0, #4
 800b1fa:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1fe:	2001      	movs	r0, #1
 800b200:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b202:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	20000754 	.word	0x20000754
 800b210:	10624dd3 	.word	0x10624dd3
 800b214:	002000c5 	.word	0x002000c5

0800b218 <SDMMC_CmdSendCID>:
{
 800b218:	b510      	push	{r4, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b21e:	2300      	movs	r3, #0
 800b220:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b222:	2202      	movs	r2, #2
 800b224:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b226:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b22a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b22c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b22e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b232:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b234:	a901      	add	r1, sp, #4
 800b236:	f7ff fd91 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff ffbc 	bl	800b1b8 <SDMMC_GetCmdResp2>
}
 800b240:	b006      	add	sp, #24
 800b242:	bd10      	pop	{r4, pc}

0800b244 <SDMMC_CmdSendCSD>:
{
 800b244:	b510      	push	{r4, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b24a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b24c:	2309      	movs	r3, #9
 800b24e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b250:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b254:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b256:	2300      	movs	r3, #0
 800b258:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b25a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b25e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b260:	a901      	add	r1, sp, #4
 800b262:	f7ff fd7b 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b266:	4620      	mov	r0, r4
 800b268:	f7ff ffa6 	bl	800b1b8 <SDMMC_GetCmdResp2>
}
 800b26c:	b006      	add	sp, #24
 800b26e:	bd10      	pop	{r4, pc}

0800b270 <SDMMC_GetCmdResp3>:
{
 800b270:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b272:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <SDMMC_GetCmdResp3+0x44>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a10      	ldr	r2, [pc, #64]	; (800b2b8 <SDMMC_GetCmdResp3+0x48>)
 800b278:	fba2 2303 	umull	r2, r3, r2, r3
 800b27c:	0a5b      	lsrs	r3, r3, #9
 800b27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b282:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b286:	461a      	mov	r2, r3
 800b288:	3b01      	subs	r3, #1
 800b28a:	b182      	cbz	r2, 800b2ae <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800b28c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b28e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b292:	d0f8      	beq.n	800b286 <SDMMC_GetCmdResp3+0x16>
 800b294:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b298:	d1f5      	bne.n	800b286 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b29a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b29c:	f010 0004 	ands.w	r0, r0, #4
 800b2a0:	d102      	bne.n	800b2a8 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a2:	4b06      	ldr	r3, [pc, #24]	; (800b2bc <SDMMC_GetCmdResp3+0x4c>)
 800b2a4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b2a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2a8:	2004      	movs	r0, #4
 800b2aa:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2ac:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b2ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b2b2:	4770      	bx	lr
 800b2b4:	20000754 	.word	0x20000754
 800b2b8:	10624dd3 	.word	0x10624dd3
 800b2bc:	002000c5 	.word	0x002000c5

0800b2c0 <SDMMC_CmdAppOperCommand>:
{
 800b2c0:	b510      	push	{r4, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b2c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2c8:	2329      	movs	r3, #41	; 0x29
 800b2ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2dc:	a901      	add	r1, sp, #4
 800b2de:	f7ff fd3d 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f7ff ffc4 	bl	800b270 <SDMMC_GetCmdResp3>
}
 800b2e8:	b006      	add	sp, #24
 800b2ea:	bd10      	pop	{r4, pc}

0800b2ec <SDMMC_GetCmdResp6>:
{
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	460e      	mov	r6, r1
 800b2f2:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2f4:	4b23      	ldr	r3, [pc, #140]	; (800b384 <SDMMC_GetCmdResp6+0x98>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a23      	ldr	r2, [pc, #140]	; (800b388 <SDMMC_GetCmdResp6+0x9c>)
 800b2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fe:	0a5b      	lsrs	r3, r3, #9
 800b300:	f241 3288 	movw	r2, #5000	; 0x1388
 800b304:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b308:	461a      	mov	r2, r3
 800b30a:	3b01      	subs	r3, #1
 800b30c:	b38a      	cbz	r2, 800b372 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800b30e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b310:	f014 0f45 	tst.w	r4, #69	; 0x45
 800b314:	d0f8      	beq.n	800b308 <SDMMC_GetCmdResp6+0x1c>
 800b316:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800b31a:	d1f5      	bne.n	800b308 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b31c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b31e:	f013 0f04 	tst.w	r3, #4
 800b322:	d106      	bne.n	800b332 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b324:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b326:	f013 0f01 	tst.w	r3, #1
 800b32a:	d005      	beq.n	800b338 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b32c:	2001      	movs	r0, #1
 800b32e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b330:	e021      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b332:	2004      	movs	r0, #4
 800b334:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b336:	e01e      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b338:	4628      	mov	r0, r5
 800b33a:	f7ff fd21 	bl	800ad80 <SDMMC_GetCommandResponse>
 800b33e:	42b0      	cmp	r0, r6
 800b340:	d001      	beq.n	800b346 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b342:	2001      	movs	r0, #1
 800b344:	e017      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b346:	4b11      	ldr	r3, [pc, #68]	; (800b38c <SDMMC_GetCmdResp6+0xa0>)
 800b348:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b34a:	2100      	movs	r1, #0
 800b34c:	4628      	mov	r0, r5
 800b34e:	f7ff fd1a 	bl	800ad86 <SDMMC_GetResponse>
 800b352:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b354:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800b358:	d008      	beq.n	800b36c <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b35a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b35e:	d10b      	bne.n	800b378 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b360:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b364:	d00b      	beq.n	800b37e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b366:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b36a:	e004      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b36c:	0c1b      	lsrs	r3, r3, #16
 800b36e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800b370:	e001      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800b372:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b378:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b37c:	e7fb      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b37e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b382:	e7f8      	b.n	800b376 <SDMMC_GetCmdResp6+0x8a>
 800b384:	20000754 	.word	0x20000754
 800b388:	10624dd3 	.word	0x10624dd3
 800b38c:	002000c5 	.word	0x002000c5

0800b390 <SDMMC_CmdSetRelAdd>:
{
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b39c:	2603      	movs	r6, #3
 800b39e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3a4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ae:	a901      	add	r1, sp, #4
 800b3b0:	f7ff fcd4 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b3b4:	462a      	mov	r2, r5
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f7ff ff97 	bl	800b2ec <SDMMC_GetCmdResp6>
}
 800b3be:	b006      	add	sp, #24
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3c4 <SDMMC_GetCmdResp7>:
{
 800b3c4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3c6:	4b16      	ldr	r3, [pc, #88]	; (800b420 <SDMMC_GetCmdResp7+0x5c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a16      	ldr	r2, [pc, #88]	; (800b424 <SDMMC_GetCmdResp7+0x60>)
 800b3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d0:	0a5b      	lsrs	r3, r3, #9
 800b3d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b3da:	461a      	mov	r2, r3
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	b1e2      	cbz	r2, 800b41a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800b3e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3e2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b3e6:	d0f8      	beq.n	800b3da <SDMMC_GetCmdResp7+0x16>
 800b3e8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b3ec:	d1f5      	bne.n	800b3da <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b3f0:	f013 0f04 	tst.w	r3, #4
 800b3f4:	d10b      	bne.n	800b40e <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b3f8:	f013 0301 	ands.w	r3, r3, #1
 800b3fc:	d10a      	bne.n	800b414 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b3fe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b400:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b404:	d00b      	beq.n	800b41e <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b406:	2240      	movs	r2, #64	; 0x40
 800b408:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b40a:	4618      	mov	r0, r3
 800b40c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b40e:	2004      	movs	r0, #4
 800b410:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b412:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b414:	2001      	movs	r0, #1
 800b416:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b418:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b41a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b41e:	4770      	bx	lr
 800b420:	20000754 	.word	0x20000754
 800b424:	10624dd3 	.word	0x10624dd3

0800b428 <SDMMC_CmdOperCond>:
{
 800b428:	b510      	push	{r4, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b42e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b432:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b434:	2308      	movs	r3, #8
 800b436:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b43c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b43e:	2300      	movs	r3, #0
 800b440:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b446:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b448:	a901      	add	r1, sp, #4
 800b44a:	f7ff fc87 	bl	800ad5c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff ffb8 	bl	800b3c4 <SDMMC_GetCmdResp7>
}
 800b454:	b006      	add	sp, #24
 800b456:	bd10      	pop	{r4, pc}

0800b458 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b458:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b45a:	4903      	ldr	r1, [pc, #12]	; (800b468 <MX_FATFS_Init+0x10>)
 800b45c:	4803      	ldr	r0, [pc, #12]	; (800b46c <MX_FATFS_Init+0x14>)
 800b45e:	f002 f8dd 	bl	800d61c <FATFS_LinkDriver>
 800b462:	4b03      	ldr	r3, [pc, #12]	; (800b470 <MX_FATFS_Init+0x18>)
 800b464:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b466:	bd08      	pop	{r3, pc}
 800b468:	2001d5ac 	.word	0x2001d5ac
 800b46c:	08018528 	.word	0x08018528
 800b470:	2001d5b0 	.word	0x2001d5b0

0800b474 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800b474:	2000      	movs	r0, #0
 800b476:	4770      	bx	lr

0800b478 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b478:	b500      	push	{lr}
 800b47a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	4613      	mov	r3, r2
 800b480:	460a      	mov	r2, r1
 800b482:	4601      	mov	r1, r0
 800b484:	4803      	ldr	r0, [pc, #12]	; (800b494 <BSP_SD_ReadBlocks+0x1c>)
 800b486:	f7fd fef5 	bl	8009274 <HAL_SD_ReadBlocks>
 800b48a:	b100      	cbz	r0, 800b48e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b48c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800b48e:	b003      	add	sp, #12
 800b490:	f85d fb04 	ldr.w	pc, [sp], #4
 800b494:	2001c284 	.word	0x2001c284

0800b498 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b498:	b500      	push	{lr}
 800b49a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	460a      	mov	r2, r1
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4803      	ldr	r0, [pc, #12]	; (800b4b4 <BSP_SD_WriteBlocks+0x1c>)
 800b4a6:	f7fd ffe7 	bl	8009478 <HAL_SD_WriteBlocks>
 800b4aa:	b100      	cbz	r0, 800b4ae <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b4ac:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800b4ae:	b003      	add	sp, #12
 800b4b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4b4:	2001c284 	.word	0x2001c284

0800b4b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b4b8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b4ba:	4803      	ldr	r0, [pc, #12]	; (800b4c8 <BSP_SD_GetCardState+0x10>)
 800b4bc:	f7fe fbce 	bl	8009c5c <HAL_SD_GetCardState>
}
 800b4c0:	3804      	subs	r0, #4
 800b4c2:	bf18      	it	ne
 800b4c4:	2001      	movne	r0, #1
 800b4c6:	bd08      	pop	{r3, pc}
 800b4c8:	2001c284 	.word	0x2001c284

0800b4cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b4cc:	b508      	push	{r3, lr}
 800b4ce:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <BSP_SD_GetCardInfo+0xc>)
 800b4d2:	f7fe fb05 	bl	8009ae0 <HAL_SD_GetCardInfo>
}
 800b4d6:	bd08      	pop	{r3, pc}
 800b4d8:	2001c284 	.word	0x2001c284

0800b4dc <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 800b4dc:	4770      	bx	lr

0800b4de <HAL_SD_TxCpltCallback>:
{
 800b4de:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800b4e0:	f7ff fffc 	bl	800b4dc <BSP_SD_WriteCpltCallback>
}
 800b4e4:	bd08      	pop	{r3, pc}

0800b4e6 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 800b4e6:	4770      	bx	lr

0800b4e8 <HAL_SD_RxCpltCallback>:
{
 800b4e8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800b4ea:	f7ff fffc 	bl	800b4e6 <BSP_SD_ReadCpltCallback>
}
 800b4ee:	bd08      	pop	{r3, pc}

0800b4f0 <BSP_SD_Init>:
{
 800b4f0:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b4f2:	f7f5 ff0f 	bl	8001314 <BSP_SD_IsDetected>
 800b4f6:	2801      	cmp	r0, #1
 800b4f8:	d002      	beq.n	800b500 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b4fa:	2502      	movs	r5, #2
}
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	bd38      	pop	{r3, r4, r5, pc}
 800b500:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 800b502:	4807      	ldr	r0, [pc, #28]	; (800b520 <BSP_SD_Init+0x30>)
 800b504:	f7fe fbbb 	bl	8009c7e <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800b508:	4605      	mov	r5, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d1f6      	bne.n	800b4fc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b50e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b512:	4803      	ldr	r0, [pc, #12]	; (800b520 <BSP_SD_Init+0x30>)
 800b514:	f7fe faf6 	bl	8009b04 <HAL_SD_ConfigWideBusOperation>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0ef      	beq.n	800b4fc <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800b51c:	4625      	mov	r5, r4
 800b51e:	e7ed      	b.n	800b4fc <BSP_SD_Init+0xc>
 800b520:	2001c284 	.word	0x2001c284

0800b524 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b524:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800b526:	4b07      	ldr	r3, [pc, #28]	; (800b544 <SD_CheckStatus+0x20>)
 800b528:	2201      	movs	r2, #1
 800b52a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b52c:	f7ff ffc4 	bl	800b4b8 <BSP_SD_GetCardState>
 800b530:	b920      	cbnz	r0, 800b53c <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800b532:	4a04      	ldr	r2, [pc, #16]	; (800b544 <SD_CheckStatus+0x20>)
 800b534:	7813      	ldrb	r3, [r2, #0]
 800b536:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b53a:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800b53c:	4b01      	ldr	r3, [pc, #4]	; (800b544 <SD_CheckStatus+0x20>)
 800b53e:	7818      	ldrb	r0, [r3, #0]
}
 800b540:	bd08      	pop	{r3, pc}
 800b542:	bf00      	nop
 800b544:	20000768 	.word	0x20000768

0800b548 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b548:	b510      	push	{r4, lr}
 800b54a:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800b54c:	4b07      	ldr	r3, [pc, #28]	; (800b56c <SD_initialize+0x24>)
 800b54e:	2201      	movs	r2, #1
 800b550:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b552:	f7ff ffcd 	bl	800b4f0 <BSP_SD_Init>
 800b556:	b110      	cbz	r0, 800b55e <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <SD_initialize+0x24>)
 800b55a:	7818      	ldrb	r0, [r3, #0]
}
 800b55c:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800b55e:	4620      	mov	r0, r4
 800b560:	f7ff ffe0 	bl	800b524 <SD_CheckStatus>
 800b564:	4b01      	ldr	r3, [pc, #4]	; (800b56c <SD_initialize+0x24>)
 800b566:	7018      	strb	r0, [r3, #0]
 800b568:	e7f6      	b.n	800b558 <SD_initialize+0x10>
 800b56a:	bf00      	nop
 800b56c:	20000768 	.word	0x20000768

0800b570 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b570:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800b572:	f7ff ffd7 	bl	800b524 <SD_CheckStatus>
}
 800b576:	bd08      	pop	{r3, pc}

0800b578 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b578:	b508      	push	{r3, lr}
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b584:	f7ff ff78 	bl	800b478 <BSP_SD_ReadBlocks>
 800b588:	b930      	cbnz	r0, 800b598 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b58a:	f7ff ff95 	bl	800b4b8 <BSP_SD_GetCardState>
 800b58e:	4603      	mov	r3, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d1fa      	bne.n	800b58a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b594:	4618      	mov	r0, r3
 800b596:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e7fb      	b.n	800b594 <SD_read+0x1c>

0800b59c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b59c:	b508      	push	{r3, lr}
 800b59e:	4608      	mov	r0, r1
 800b5a0:	4611      	mov	r1, r2
 800b5a2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5a8:	f7ff ff76 	bl	800b498 <BSP_SD_WriteBlocks>
 800b5ac:	b930      	cbnz	r0, 800b5bc <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b5ae:	f7ff ff83 	bl	800b4b8 <BSP_SD_GetCardState>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d1fa      	bne.n	800b5ae <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e7fb      	b.n	800b5b8 <SD_write+0x1c>

0800b5c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b5c0:	b530      	push	{r4, r5, lr}
 800b5c2:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b5c4:	4b13      	ldr	r3, [pc, #76]	; (800b614 <SD_ioctl+0x54>)
 800b5c6:	7818      	ldrb	r0, [r3, #0]
 800b5c8:	f010 0401 	ands.w	r4, r0, #1
 800b5cc:	d11b      	bne.n	800b606 <SD_ioctl+0x46>
 800b5ce:	4615      	mov	r5, r2

  switch (cmd)
 800b5d0:	2903      	cmp	r1, #3
 800b5d2:	d81c      	bhi.n	800b60e <SD_ioctl+0x4e>
 800b5d4:	e8df f001 	tbb	[pc, r1]
 800b5d8:	100a0402 	.word	0x100a0402
 800b5dc:	460c      	mov	r4, r1
 800b5de:	e013      	b.n	800b608 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5e0:	a801      	add	r0, sp, #4
 800b5e2:	f7ff ff73 	bl	800b4cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b5e6:	9b07      	ldr	r3, [sp, #28]
 800b5e8:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800b5ea:	e00d      	b.n	800b608 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5ec:	a801      	add	r0, sp, #4
 800b5ee:	f7ff ff6d 	bl	800b4cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b5f2:	9b08      	ldr	r3, [sp, #32]
 800b5f4:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800b5f6:	e007      	b.n	800b608 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b5f8:	a801      	add	r0, sp, #4
 800b5fa:	f7ff ff67 	bl	800b4cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	0a5b      	lsrs	r3, r3, #9
 800b602:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800b604:	e000      	b.n	800b608 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b606:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800b608:	4620      	mov	r0, r4
 800b60a:	b00b      	add	sp, #44	; 0x2c
 800b60c:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800b60e:	2404      	movs	r4, #4
 800b610:	e7fa      	b.n	800b608 <SD_ioctl+0x48>
 800b612:	bf00      	nop
 800b614:	20000768 	.word	0x20000768

0800b618 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b618:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b61a:	4b04      	ldr	r3, [pc, #16]	; (800b62c <disk_status+0x14>)
 800b61c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b620:	6852      	ldr	r2, [r2, #4]
 800b622:	6852      	ldr	r2, [r2, #4]
 800b624:	4403      	add	r3, r0
 800b626:	7a18      	ldrb	r0, [r3, #8]
 800b628:	4790      	blx	r2
  return stat;
}
 800b62a:	bd08      	pop	{r3, pc}
 800b62c:	2001d7dc 	.word	0x2001d7dc

0800b630 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b630:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800b632:	4b08      	ldr	r3, [pc, #32]	; (800b654 <disk_initialize+0x24>)
 800b634:	5c1b      	ldrb	r3, [r3, r0]
 800b636:	b953      	cbnz	r3, 800b64e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800b638:	4b06      	ldr	r3, [pc, #24]	; (800b654 <disk_initialize+0x24>)
 800b63a:	2201      	movs	r2, #1
 800b63c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b63e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b642:	6852      	ldr	r2, [r2, #4]
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	4403      	add	r3, r0
 800b648:	7a18      	ldrb	r0, [r3, #8]
 800b64a:	4790      	blx	r2
  }
  return stat;
}
 800b64c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800b64e:	2000      	movs	r0, #0
 800b650:	e7fc      	b.n	800b64c <disk_initialize+0x1c>
 800b652:	bf00      	nop
 800b654:	2001d7dc 	.word	0x2001d7dc

0800b658 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b658:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b65a:	4c04      	ldr	r4, [pc, #16]	; (800b66c <disk_read+0x14>)
 800b65c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800b660:	686d      	ldr	r5, [r5, #4]
 800b662:	68ad      	ldr	r5, [r5, #8]
 800b664:	4404      	add	r4, r0
 800b666:	7a20      	ldrb	r0, [r4, #8]
 800b668:	47a8      	blx	r5
  return res;
}
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	2001d7dc 	.word	0x2001d7dc

0800b670 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b670:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b672:	4c04      	ldr	r4, [pc, #16]	; (800b684 <disk_write+0x14>)
 800b674:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800b678:	686d      	ldr	r5, [r5, #4]
 800b67a:	68ed      	ldr	r5, [r5, #12]
 800b67c:	4404      	add	r4, r0
 800b67e:	7a20      	ldrb	r0, [r4, #8]
 800b680:	47a8      	blx	r5
  return res;
}
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	2001d7dc 	.word	0x2001d7dc

0800b688 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b688:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b68a:	4b04      	ldr	r3, [pc, #16]	; (800b69c <disk_ioctl+0x14>)
 800b68c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b690:	6864      	ldr	r4, [r4, #4]
 800b692:	6924      	ldr	r4, [r4, #16]
 800b694:	4403      	add	r3, r0
 800b696:	7a18      	ldrb	r0, [r3, #8]
 800b698:	47a0      	blx	r4
  return res;
}
 800b69a:	bd10      	pop	{r4, pc}
 800b69c:	2001d7dc 	.word	0x2001d7dc

0800b6a0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800b6a0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800b6a2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800b6a4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800b6a8:	4770      	bx	lr

0800b6aa <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800b6aa:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800b6ac:	7882      	ldrb	r2, [r0, #2]
 800b6ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800b6b2:	7843      	ldrb	r3, [r0, #1]
 800b6b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800b6b8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800b6ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b6be:	4770      	bx	lr

0800b6c0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800b6c0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800b6c2:	0a09      	lsrs	r1, r1, #8
 800b6c4:	7041      	strb	r1, [r0, #1]
}
 800b6c6:	4770      	bx	lr

0800b6c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800b6c8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6ca:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b6ce:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6d0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b6d4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800b6d6:	0e09      	lsrs	r1, r1, #24
 800b6d8:	70c1      	strb	r1, [r0, #3]
}
 800b6da:	4770      	bx	lr

0800b6dc <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800b6dc:	4694      	mov	ip, r2
 800b6de:	b132      	cbz	r2, 800b6ee <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800b6e0:	780a      	ldrb	r2, [r1, #0]
 800b6e2:	3101      	adds	r1, #1
 800b6e4:	7002      	strb	r2, [r0, #0]
 800b6e6:	3001      	adds	r0, #1
		} while (--cnt);
 800b6e8:	f1bc 0c01 	subs.w	ip, ip, #1
 800b6ec:	d1f8      	bne.n	800b6e0 <mem_cpy+0x4>
	}
}
 800b6ee:	4770      	bx	lr

0800b6f0 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800b6f0:	7001      	strb	r1, [r0, #0]
 800b6f2:	3001      	adds	r0, #1
	} while (--cnt);
 800b6f4:	3a01      	subs	r2, #1
 800b6f6:	d1fb      	bne.n	800b6f0 <mem_set>
}
 800b6f8:	4770      	bx	lr

0800b6fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6fa:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800b6fc:	f89c 0000 	ldrb.w	r0, [ip]
 800b700:	f10c 0c01 	add.w	ip, ip, #1
 800b704:	780b      	ldrb	r3, [r1, #0]
 800b706:	3101      	adds	r1, #1
 800b708:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800b70a:	3a01      	subs	r2, #1
 800b70c:	d001      	beq.n	800b712 <mem_cmp+0x18>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0f4      	beq.n	800b6fc <mem_cmp+0x2>

	return r;
}
 800b712:	4770      	bx	lr

0800b714 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b714:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800b716:	e000      	b.n	800b71a <chk_chr+0x6>
 800b718:	3301      	adds	r3, #1
 800b71a:	7818      	ldrb	r0, [r3, #0]
 800b71c:	b108      	cbz	r0, 800b722 <chk_chr+0xe>
 800b71e:	4288      	cmp	r0, r1
 800b720:	d1fa      	bne.n	800b718 <chk_chr+0x4>
	return *str;
}
 800b722:	4770      	bx	lr

0800b724 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b724:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b726:	f04f 0c00 	mov.w	ip, #0
 800b72a:	4663      	mov	r3, ip
 800b72c:	e002      	b.n	800b734 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800b72e:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b732:	3301      	adds	r3, #1
 800b734:	2b01      	cmp	r3, #1
 800b736:	d815      	bhi.n	800b764 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 800b738:	011a      	lsls	r2, r3, #4
 800b73a:	4c18      	ldr	r4, [pc, #96]	; (800b79c <chk_lock+0x78>)
 800b73c:	58a2      	ldr	r2, [r4, r2]
 800b73e:	2a00      	cmp	r2, #0
 800b740:	d0f5      	beq.n	800b72e <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b742:	6804      	ldr	r4, [r0, #0]
 800b744:	42a2      	cmp	r2, r4
 800b746:	d1f4      	bne.n	800b732 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 800b748:	4a14      	ldr	r2, [pc, #80]	; (800b79c <chk_lock+0x78>)
 800b74a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b74e:	6854      	ldr	r4, [r2, #4]
 800b750:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b752:	4294      	cmp	r4, r2
 800b754:	d1ed      	bne.n	800b732 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 800b756:	4a11      	ldr	r2, [pc, #68]	; (800b79c <chk_lock+0x78>)
 800b758:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b75c:	6894      	ldr	r4, [r2, #8]
 800b75e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800b760:	4294      	cmp	r4, r2
 800b762:	d1e6      	bne.n	800b732 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b764:	2b02      	cmp	r3, #2
 800b766:	d00b      	beq.n	800b780 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b768:	b9b1      	cbnz	r1, 800b798 <chk_lock+0x74>
 800b76a:	4a0c      	ldr	r2, [pc, #48]	; (800b79c <chk_lock+0x78>)
 800b76c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800b770:	899b      	ldrh	r3, [r3, #12]
 800b772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b776:	d00d      	beq.n	800b794 <chk_lock+0x70>
 800b778:	2000      	movs	r0, #0
}
 800b77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77e:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b780:	2902      	cmp	r1, #2
 800b782:	bf14      	ite	ne
 800b784:	4663      	movne	r3, ip
 800b786:	f04c 0301 	orreq.w	r3, ip, #1
 800b78a:	b10b      	cbz	r3, 800b790 <chk_lock+0x6c>
 800b78c:	2000      	movs	r0, #0
 800b78e:	e7f4      	b.n	800b77a <chk_lock+0x56>
 800b790:	2012      	movs	r0, #18
 800b792:	e7f2      	b.n	800b77a <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b794:	2010      	movs	r0, #16
 800b796:	e7f0      	b.n	800b77a <chk_lock+0x56>
 800b798:	2010      	movs	r0, #16
 800b79a:	e7ee      	b.n	800b77a <chk_lock+0x56>
 800b79c:	2001d5b8 	.word	0x2001d5b8

0800b7a0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e000      	b.n	800b7a6 <enq_lock+0x6>
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	2801      	cmp	r0, #1
 800b7a8:	d804      	bhi.n	800b7b4 <enq_lock+0x14>
 800b7aa:	0103      	lsls	r3, r0, #4
 800b7ac:	4a03      	ldr	r2, [pc, #12]	; (800b7bc <enq_lock+0x1c>)
 800b7ae:	58d3      	ldr	r3, [r2, r3]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1f7      	bne.n	800b7a4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800b7b4:	3802      	subs	r0, #2
 800b7b6:	bf18      	it	ne
 800b7b8:	2001      	movne	r0, #1
 800b7ba:	4770      	bx	lr
 800b7bc:	2001d5b8 	.word	0x2001d5b8

0800b7c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7c0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e000      	b.n	800b7c8 <inc_lock+0x8>
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d813      	bhi.n	800b7f4 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800b7cc:	011a      	lsls	r2, r3, #4
 800b7ce:	4c24      	ldr	r4, [pc, #144]	; (800b860 <inc_lock+0xa0>)
 800b7d0:	58a4      	ldr	r4, [r4, r2]
 800b7d2:	6802      	ldr	r2, [r0, #0]
 800b7d4:	4294      	cmp	r4, r2
 800b7d6:	d1f6      	bne.n	800b7c6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800b7d8:	4a21      	ldr	r2, [pc, #132]	; (800b860 <inc_lock+0xa0>)
 800b7da:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b7de:	6854      	ldr	r4, [r2, #4]
 800b7e0:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b7e2:	4294      	cmp	r4, r2
 800b7e4:	d1ef      	bne.n	800b7c6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800b7e6:	4a1e      	ldr	r2, [pc, #120]	; (800b860 <inc_lock+0xa0>)
 800b7e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b7ec:	6894      	ldr	r4, [r2, #8]
 800b7ee:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 800b7f0:	4294      	cmp	r4, r2
 800b7f2:	d1e8      	bne.n	800b7c6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d00d      	beq.n	800b814 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7f8:	b121      	cbz	r1, 800b804 <inc_lock+0x44>
 800b7fa:	4a19      	ldr	r2, [pc, #100]	; (800b860 <inc_lock+0xa0>)
 800b7fc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b800:	8992      	ldrh	r2, [r2, #12]
 800b802:	bb52      	cbnz	r2, 800b85a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b804:	b9f1      	cbnz	r1, 800b844 <inc_lock+0x84>
 800b806:	4a16      	ldr	r2, [pc, #88]	; (800b860 <inc_lock+0xa0>)
 800b808:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b80c:	8991      	ldrh	r1, [r2, #12]
 800b80e:	3101      	adds	r1, #1
 800b810:	b289      	uxth	r1, r1
 800b812:	e019      	b.n	800b848 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b814:	2300      	movs	r3, #0
 800b816:	2b01      	cmp	r3, #1
 800b818:	d805      	bhi.n	800b826 <inc_lock+0x66>
 800b81a:	011a      	lsls	r2, r3, #4
 800b81c:	4c10      	ldr	r4, [pc, #64]	; (800b860 <inc_lock+0xa0>)
 800b81e:	58a2      	ldr	r2, [r4, r2]
 800b820:	b10a      	cbz	r2, 800b826 <inc_lock+0x66>
 800b822:	3301      	adds	r3, #1
 800b824:	e7f7      	b.n	800b816 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b826:	2b02      	cmp	r3, #2
 800b828:	d015      	beq.n	800b856 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800b82a:	4d0d      	ldr	r5, [pc, #52]	; (800b860 <inc_lock+0xa0>)
 800b82c:	011c      	lsls	r4, r3, #4
 800b82e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800b832:	6806      	ldr	r6, [r0, #0]
 800b834:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800b836:	6884      	ldr	r4, [r0, #8]
 800b838:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800b83a:	6940      	ldr	r0, [r0, #20]
 800b83c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800b83e:	2000      	movs	r0, #0
 800b840:	8190      	strh	r0, [r2, #12]
 800b842:	e7d9      	b.n	800b7f8 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b844:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b848:	4a05      	ldr	r2, [pc, #20]	; (800b860 <inc_lock+0xa0>)
 800b84a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800b84e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 800b850:	1c58      	adds	r0, r3, #1
}
 800b852:	bc70      	pop	{r4, r5, r6}
 800b854:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b856:	2000      	movs	r0, #0
 800b858:	e7fb      	b.n	800b852 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b85a:	2000      	movs	r0, #0
 800b85c:	e7f9      	b.n	800b852 <inc_lock+0x92>
 800b85e:	bf00      	nop
 800b860:	2001d5b8 	.word	0x2001d5b8

0800b864 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b864:	3801      	subs	r0, #1
 800b866:	2801      	cmp	r0, #1
 800b868:	d815      	bhi.n	800b896 <dec_lock+0x32>
		n = Files[i].ctr;
 800b86a:	4b0d      	ldr	r3, [pc, #52]	; (800b8a0 <dec_lock+0x3c>)
 800b86c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800b870:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b876:	d003      	beq.n	800b880 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800b878:	b11b      	cbz	r3, 800b882 <dec_lock+0x1e>
 800b87a:	3b01      	subs	r3, #1
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	e000      	b.n	800b882 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b880:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800b882:	4a07      	ldr	r2, [pc, #28]	; (800b8a0 <dec_lock+0x3c>)
 800b884:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800b888:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b88a:	b933      	cbnz	r3, 800b89a <dec_lock+0x36>
 800b88c:	0103      	lsls	r3, r0, #4
 800b88e:	2000      	movs	r0, #0
 800b890:	4a03      	ldr	r2, [pc, #12]	; (800b8a0 <dec_lock+0x3c>)
 800b892:	50d0      	str	r0, [r2, r3]
 800b894:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b896:	2002      	movs	r0, #2
 800b898:	4770      	bx	lr
		res = FR_OK;
 800b89a:	2000      	movs	r0, #0
	}
	return res;
}
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	2001d5b8 	.word	0x2001d5b8

0800b8a4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	e003      	b.n	800b8b0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 800b8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ac:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d811      	bhi.n	800b8d8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8b4:	011a      	lsls	r2, r3, #4
 800b8b6:	4909      	ldr	r1, [pc, #36]	; (800b8dc <clear_lock+0x38>)
 800b8b8:	588a      	ldr	r2, [r1, r2]
 800b8ba:	4282      	cmp	r2, r0
 800b8bc:	d1f7      	bne.n	800b8ae <clear_lock+0xa>
{
 800b8be:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8c0:	011a      	lsls	r2, r3, #4
 800b8c2:	2400      	movs	r4, #0
 800b8c4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d8ed      	bhi.n	800b8a8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8cc:	011a      	lsls	r2, r3, #4
 800b8ce:	4903      	ldr	r1, [pc, #12]	; (800b8dc <clear_lock+0x38>)
 800b8d0:	588a      	ldr	r2, [r1, r2]
 800b8d2:	4282      	cmp	r2, r0
 800b8d4:	d1f7      	bne.n	800b8c6 <clear_lock+0x22>
 800b8d6:	e7f3      	b.n	800b8c0 <clear_lock+0x1c>
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	2001d5b8 	.word	0x2001d5b8

0800b8e0 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800b8e0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b8e2:	6983      	ldr	r3, [r0, #24]
 800b8e4:	3b02      	subs	r3, #2
 800b8e6:	428b      	cmp	r3, r1
 800b8e8:	d904      	bls.n	800b8f4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800b8ea:	8943      	ldrh	r3, [r0, #10]
 800b8ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b8ee:	fb01 0003 	mla	r0, r1, r3, r0
 800b8f2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b8f4:	2000      	movs	r0, #0
}
 800b8f6:	4770      	bx	lr

0800b8f8 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b8f8:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b8fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b8fc:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b8fe:	0a49      	lsrs	r1, r1, #9
 800b900:	8952      	ldrh	r2, [r2, #10]
 800b902:	fbb1 f1f2 	udiv	r1, r1, r2
 800b906:	e001      	b.n	800b90c <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800b908:	1a09      	subs	r1, r1, r0
 800b90a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b90c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b90e:	b118      	cbz	r0, 800b918 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800b910:	4281      	cmp	r1, r0
 800b912:	d2f9      	bcs.n	800b908 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 800b914:	6858      	ldr	r0, [r3, #4]
 800b916:	4408      	add	r0, r1
}
 800b918:	4770      	bx	lr

0800b91a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b91a:	b570      	push	{r4, r5, r6, lr}
 800b91c:	4606      	mov	r6, r0
 800b91e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b920:	f101 001a 	add.w	r0, r1, #26
 800b924:	f7ff febc 	bl	800b6a0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800b928:	7833      	ldrb	r3, [r6, #0]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d000      	beq.n	800b930 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
 800b930:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b932:	f105 0014 	add.w	r0, r5, #20
 800b936:	f7ff feb3 	bl	800b6a0 <ld_word>
 800b93a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800b93e:	e7f6      	b.n	800b92e <ld_clust+0x14>

0800b940 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	4606      	mov	r6, r0
 800b944:	460c      	mov	r4, r1
 800b946:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b948:	b291      	uxth	r1, r2
 800b94a:	f104 001a 	add.w	r0, r4, #26
 800b94e:	f7ff feb7 	bl	800b6c0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b952:	7833      	ldrb	r3, [r6, #0]
 800b954:	2b03      	cmp	r3, #3
 800b956:	d000      	beq.n	800b95a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800b958:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b95a:	0c29      	lsrs	r1, r5, #16
 800b95c:	f104 0014 	add.w	r0, r4, #20
 800b960:	f7ff feae 	bl	800b6c0 <st_word>
}
 800b964:	e7f8      	b.n	800b958 <st_clust+0x18>
	...

0800b968 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96c:	4680      	mov	r8, r0
 800b96e:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b970:	f101 001a 	add.w	r0, r1, #26
 800b974:	f7ff fe94 	bl	800b6a0 <ld_word>
 800b978:	bb50      	cbnz	r0, 800b9d0 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b97a:	7835      	ldrb	r5, [r6, #0]
 800b97c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800b980:	3d01      	subs	r5, #1
 800b982:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b986:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b98a:	2701      	movs	r7, #1
 800b98c:	2400      	movs	r4, #0
 800b98e:	e004      	b.n	800b99a <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b994:	4298      	cmp	r0, r3
 800b996:	d120      	bne.n	800b9da <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b998:	3401      	adds	r4, #1
 800b99a:	2c0c      	cmp	r4, #12
 800b99c:	d80d      	bhi.n	800b9ba <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b99e:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <pick_lfn+0x80>)
 800b9a0:	5d18      	ldrb	r0, [r3, r4]
 800b9a2:	4430      	add	r0, r6
 800b9a4:	f7ff fe7c 	bl	800b6a0 <ld_word>
		if (wc) {
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	d0f1      	beq.n	800b990 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b9ac:	2dfe      	cmp	r5, #254	; 0xfe
 800b9ae:	d812      	bhi.n	800b9d6 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b9b0:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	3501      	adds	r5, #1
 800b9b8:	e7ee      	b.n	800b998 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b9ba:	7833      	ldrb	r3, [r6, #0]
 800b9bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9c0:	d00d      	beq.n	800b9de <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b9c2:	2dfe      	cmp	r5, #254	; 0xfe
 800b9c4:	d80d      	bhi.n	800b9e2 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800b9cc:	2001      	movs	r0, #1
 800b9ce:	e000      	b.n	800b9d2 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b9d0:	2000      	movs	r0, #0
}
 800b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b9d6:	2000      	movs	r0, #0
 800b9d8:	e7fb      	b.n	800b9d2 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b9da:	2000      	movs	r0, #0
 800b9dc:	e7f9      	b.n	800b9d2 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7f7      	b.n	800b9d2 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e7f5      	b.n	800b9d2 <pick_lfn+0x6a>
 800b9e6:	bf00      	nop
 800b9e8:	080185d0 	.word	0x080185d0

0800b9ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	4680      	mov	r8, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b9f6:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b9f8:	230f      	movs	r3, #15
 800b9fa:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800b9fc:	2400      	movs	r4, #0
 800b9fe:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800ba00:	4621      	mov	r1, r4
 800ba02:	f107 001a 	add.w	r0, r7, #26
 800ba06:	f7ff fe5b 	bl	800b6c0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ba0a:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 800ba0e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ba12:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800ba16:	4625      	mov	r5, r4
 800ba18:	e002      	b.n	800ba20 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800ba1a:	3401      	adds	r4, #1
 800ba1c:	2c0c      	cmp	r4, #12
 800ba1e:	d811      	bhi.n	800ba44 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ba20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba24:	429d      	cmp	r5, r3
 800ba26:	d002      	beq.n	800ba2e <put_lfn+0x42>
 800ba28:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800ba2c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <put_lfn+0x74>)
 800ba30:	5d18      	ldrb	r0, [r3, r4]
 800ba32:	4629      	mov	r1, r5
 800ba34:	4438      	add	r0, r7
 800ba36:	f7ff fe43 	bl	800b6c0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ba3a:	2d00      	cmp	r5, #0
 800ba3c:	d1ed      	bne.n	800ba1a <put_lfn+0x2e>
 800ba3e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800ba42:	e7ea      	b.n	800ba1a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ba44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba48:	429d      	cmp	r5, r3
 800ba4a:	d002      	beq.n	800ba52 <put_lfn+0x66>
 800ba4c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800ba50:	b90b      	cbnz	r3, 800ba56 <put_lfn+0x6a>
 800ba52:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ba56:	f887 9000 	strb.w	r9, [r7]
}
 800ba5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5e:	bf00      	nop
 800ba60:	080185d0 	.word	0x080185d0

0800ba64 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ba64:	b570      	push	{r4, r5, r6, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	4605      	mov	r5, r0
 800ba6a:	4616      	mov	r6, r2
 800ba6c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba6e:	220b      	movs	r2, #11
 800ba70:	f7ff fe34 	bl	800b6dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba74:	2c05      	cmp	r4, #5
 800ba76:	d811      	bhi.n	800ba9c <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800ba78:	2307      	movs	r3, #7
 800ba7a:	e01f      	b.n	800babc <gen_numname+0x58>
 800ba7c:	3101      	adds	r1, #1
 800ba7e:	290f      	cmp	r1, #15
 800ba80:	d80c      	bhi.n	800ba9c <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800ba82:	f003 0c01 	and.w	ip, r3, #1
 800ba86:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800ba8a:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ba8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800ba90:	d0f4      	beq.n	800ba7c <gen_numname+0x18>
 800ba92:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800ba96:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800ba9a:	e7ef      	b.n	800ba7c <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800ba9c:	8833      	ldrh	r3, [r6, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d0ea      	beq.n	800ba78 <gen_numname+0x14>
			wc = *lfn++;
 800baa2:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 800baa4:	2100      	movs	r1, #0
 800baa6:	e7ea      	b.n	800ba7e <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800baa8:	1e5a      	subs	r2, r3, #1
 800baaa:	3308      	adds	r3, #8
 800baac:	446b      	add	r3, sp
 800baae:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800bab2:	0921      	lsrs	r1, r4, #4
	} while (seq);
 800bab4:	2c0f      	cmp	r4, #15
 800bab6:	d90a      	bls.n	800bace <gen_numname+0x6a>
		ns[i--] = c;
 800bab8:	4613      	mov	r3, r2
		seq /= 16;
 800baba:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 800babc:	f004 020f 	and.w	r2, r4, #15
 800bac0:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 800bac4:	2939      	cmp	r1, #57	; 0x39
 800bac6:	d9ef      	bls.n	800baa8 <gen_numname+0x44>
 800bac8:	f102 0137 	add.w	r1, r2, #55	; 0x37
 800bacc:	e7ec      	b.n	800baa8 <gen_numname+0x44>
	ns[i] = '~';
 800bace:	217e      	movs	r1, #126	; 0x7e
 800bad0:	f102 0308 	add.w	r3, r2, #8
 800bad4:	446b      	add	r3, sp
 800bad6:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bada:	2300      	movs	r3, #0
 800badc:	e000      	b.n	800bae0 <gen_numname+0x7c>
 800bade:	3301      	adds	r3, #1
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d209      	bcs.n	800baf8 <gen_numname+0x94>
 800bae4:	5ce9      	ldrb	r1, [r5, r3]
 800bae6:	2920      	cmp	r1, #32
 800bae8:	d1f9      	bne.n	800bade <gen_numname+0x7a>
 800baea:	e005      	b.n	800baf8 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800baec:	2020      	movs	r0, #32
 800baee:	1c59      	adds	r1, r3, #1
 800baf0:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800baf2:	2907      	cmp	r1, #7
 800baf4:	d809      	bhi.n	800bb0a <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800baf6:	460b      	mov	r3, r1
 800baf8:	2a07      	cmp	r2, #7
 800bafa:	d8f7      	bhi.n	800baec <gen_numname+0x88>
 800bafc:	f102 0108 	add.w	r1, r2, #8
 800bb00:	4469      	add	r1, sp
 800bb02:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800bb06:	3201      	adds	r2, #1
 800bb08:	e7f1      	b.n	800baee <gen_numname+0x8a>
}
 800bb0a:	b002      	add	sp, #8
 800bb0c:	bd70      	pop	{r4, r5, r6, pc}

0800bb0e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb0e:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800bb10:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800bb14:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb16:	01c3      	lsls	r3, r0, #7
 800bb18:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800bb1c:	780a      	ldrb	r2, [r1, #0]
 800bb1e:	3101      	adds	r1, #1
 800bb20:	fa52 f383 	uxtab	r3, r2, r3
 800bb24:	b2d8      	uxtb	r0, r3
	} while (--n);
 800bb26:	f1bc 0c01 	subs.w	ip, ip, #1
 800bb2a:	d1f4      	bne.n	800bb16 <sum_sfn+0x8>
	return sum;
}
 800bb2c:	4770      	bx	lr
	...

0800bb30 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800bb30:	6803      	ldr	r3, [r0, #0]
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	6002      	str	r2, [r0, #0]
 800bb36:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800bb38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	2b19      	cmp	r3, #25
 800bb40:	d801      	bhi.n	800bb46 <get_achar+0x16>
 800bb42:	3820      	subs	r0, #32
 800bb44:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800bb46:	287f      	cmp	r0, #127	; 0x7f
 800bb48:	d902      	bls.n	800bb50 <get_achar+0x20>
 800bb4a:	3880      	subs	r0, #128	; 0x80
 800bb4c:	4b01      	ldr	r3, [pc, #4]	; (800bb54 <get_achar+0x24>)
 800bb4e:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800bb50:	4770      	bx	lr
 800bb52:	bf00      	nop
 800bb54:	08018550 	.word	0x08018550

0800bb58 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800bb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	4607      	mov	r7, r0
 800bb60:	9101      	str	r1, [sp, #4]
 800bb62:	4614      	mov	r4, r2
 800bb64:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800bb66:	4626      	mov	r6, r4
 800bb68:	3c01      	subs	r4, #1
 800bb6a:	b14e      	cbz	r6, 800bb80 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800bb6c:	a801      	add	r0, sp, #4
 800bb6e:	f7ff ffdf 	bl	800bb30 <get_achar>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1f7      	bne.n	800bb66 <pattern_matching+0xe>
 800bb76:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800bb78:	4630      	mov	r0, r6
 800bb7a:	b004      	add	sp, #16
 800bb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800bb80:	783b      	ldrb	r3, [r7, #0]
 800bb82:	bb1b      	cbnz	r3, 800bbcc <pattern_matching+0x74>
 800bb84:	f1b8 0f00 	cmp.w	r8, #0
 800bb88:	d020      	beq.n	800bbcc <pattern_matching+0x74>
 800bb8a:	2601      	movs	r6, #1
 800bb8c:	e7f4      	b.n	800bb78 <pattern_matching+0x20>
				nm = nx = 0;
 800bb8e:	4633      	mov	r3, r6
 800bb90:	4632      	mov	r2, r6
					if (*pp++ == '?') nm++; else nx = 1;
 800bb92:	9903      	ldr	r1, [sp, #12]
 800bb94:	1c48      	adds	r0, r1, #1
 800bb96:	9003      	str	r0, [sp, #12]
 800bb98:	780c      	ldrb	r4, [r1, #0]
 800bb9a:	2c3f      	cmp	r4, #63	; 0x3f
 800bb9c:	d02d      	beq.n	800bbfa <pattern_matching+0xa2>
 800bb9e:	2301      	movs	r3, #1
				} while (*pp == '?' || *pp == '*');
 800bba0:	7849      	ldrb	r1, [r1, #1]
 800bba2:	293f      	cmp	r1, #63	; 0x3f
 800bba4:	d0f5      	beq.n	800bb92 <pattern_matching+0x3a>
 800bba6:	292a      	cmp	r1, #42	; 0x2a
 800bba8:	d0f3      	beq.n	800bb92 <pattern_matching+0x3a>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800bbaa:	9902      	ldr	r1, [sp, #8]
 800bbac:	f7ff ffd4 	bl	800bb58 <pattern_matching>
 800bbb0:	bb28      	cbnz	r0, 800bbfe <pattern_matching+0xa6>
				nc = *np; break;	/* Branch mismatched */
 800bbb2:	9b02      	ldr	r3, [sp, #8]
 800bbb4:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800bbb6:	a801      	add	r0, sp, #4
 800bbb8:	f7ff ffba 	bl	800bb30 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800bbbc:	f1b8 0300 	subs.w	r3, r8, #0
 800bbc0:	bf18      	it	ne
 800bbc2:	2301      	movne	r3, #1
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	d0d7      	beq.n	800bb78 <pattern_matching+0x20>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0d5      	beq.n	800bb78 <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800bbcc:	9703      	str	r7, [sp, #12]
 800bbce:	9b01      	ldr	r3, [sp, #4]
 800bbd0:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800bbd2:	9b03      	ldr	r3, [sp, #12]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd8:	bf18      	it	ne
 800bbda:	2b3f      	cmpne	r3, #63	; 0x3f
 800bbdc:	d0d7      	beq.n	800bb8e <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 800bbde:	a803      	add	r0, sp, #12
 800bbe0:	f7ff ffa6 	bl	800bb30 <get_achar>
 800bbe4:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 800bbe6:	a802      	add	r0, sp, #8
 800bbe8:	f7ff ffa2 	bl	800bb30 <get_achar>
 800bbec:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800bbee:	4284      	cmp	r4, r0
 800bbf0:	d1e1      	bne.n	800bbb6 <pattern_matching+0x5e>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800bbf2:	2c00      	cmp	r4, #0
 800bbf4:	d1ed      	bne.n	800bbd2 <pattern_matching+0x7a>
 800bbf6:	2601      	movs	r6, #1
 800bbf8:	e7be      	b.n	800bb78 <pattern_matching+0x20>
					if (*pp++ == '?') nm++; else nx = 1;
 800bbfa:	3201      	adds	r2, #1
 800bbfc:	e7d0      	b.n	800bba0 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800bbfe:	2601      	movs	r6, #1
 800bc00:	e7ba      	b.n	800bb78 <pattern_matching+0x20>

0800bc02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc02:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc04:	6800      	ldr	r0, [r0, #0]
 800bc06:	b108      	cbz	r0, 800bc0c <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc08:	4602      	mov	r2, r0
 800bc0a:	e003      	b.n	800bc14 <get_ldnumber+0x12>
	int vol = -1;
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc10:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc12:	3201      	adds	r2, #1
 800bc14:	7813      	ldrb	r3, [r2, #0]
 800bc16:	2b1f      	cmp	r3, #31
 800bc18:	d901      	bls.n	800bc1e <get_ldnumber+0x1c>
 800bc1a:	2b3a      	cmp	r3, #58	; 0x3a
 800bc1c:	d1f9      	bne.n	800bc12 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc1e:	2b3a      	cmp	r3, #58	; 0x3a
 800bc20:	d001      	beq.n	800bc26 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bc22:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800bc24:	4770      	bx	lr
			i = *tp++ - '0';
 800bc26:	4603      	mov	r3, r0
 800bc28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc2c:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc2e:	2809      	cmp	r0, #9
 800bc30:	bf98      	it	ls
 800bc32:	429a      	cmpls	r2, r3
 800bc34:	d103      	bne.n	800bc3e <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bc36:	b928      	cbnz	r0, 800bc44 <get_ldnumber+0x42>
					*path = ++tt;
 800bc38:	3201      	adds	r2, #1
 800bc3a:	600a      	str	r2, [r1, #0]
 800bc3c:	4770      	bx	lr
	int vol = -1;
 800bc3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc42:	4770      	bx	lr
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 800bc48:	4770      	bx	lr

0800bc4a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc4a:	b538      	push	{r3, r4, r5, lr}
 800bc4c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc4e:	4604      	mov	r4, r0
 800bc50:	b198      	cbz	r0, 800bc7a <validate+0x30>
 800bc52:	6803      	ldr	r3, [r0, #0]
 800bc54:	b19b      	cbz	r3, 800bc7e <validate+0x34>
 800bc56:	781a      	ldrb	r2, [r3, #0]
 800bc58:	b1a2      	cbz	r2, 800bc84 <validate+0x3a>
 800bc5a:	8881      	ldrh	r1, [r0, #4]
 800bc5c:	88da      	ldrh	r2, [r3, #6]
 800bc5e:	4291      	cmp	r1, r2
 800bc60:	d003      	beq.n	800bc6a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800bc62:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc64:	2400      	movs	r4, #0
 800bc66:	602c      	str	r4, [r5, #0]
	return res;
}
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc6a:	7858      	ldrb	r0, [r3, #1]
 800bc6c:	f7ff fcd4 	bl	800b618 <disk_status>
 800bc70:	f010 0001 	ands.w	r0, r0, #1
 800bc74:	d109      	bne.n	800bc8a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc76:	6824      	ldr	r4, [r4, #0]
 800bc78:	e7f5      	b.n	800bc66 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800bc7a:	2009      	movs	r0, #9
 800bc7c:	e7f3      	b.n	800bc66 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc7e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800bc80:	2009      	movs	r0, #9
 800bc82:	e7f0      	b.n	800bc66 <validate+0x1c>
 800bc84:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc86:	2400      	movs	r4, #0
 800bc88:	e7ed      	b.n	800bc66 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800bc8a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc8c:	2400      	movs	r4, #0
 800bc8e:	e7ea      	b.n	800bc66 <validate+0x1c>

0800bc90 <sync_window>:
{
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc94:	78c5      	ldrb	r5, [r0, #3]
 800bc96:	b915      	cbnz	r5, 800bc9e <sync_window+0xe>
}
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800bca0:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bca2:	f100 0834 	add.w	r8, r0, #52	; 0x34
 800bca6:	2301      	movs	r3, #1
 800bca8:	463a      	mov	r2, r7
 800bcaa:	4641      	mov	r1, r8
 800bcac:	7840      	ldrb	r0, [r0, #1]
 800bcae:	f7ff fcdf 	bl	800b670 <disk_write>
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	b9a0      	cbnz	r0, 800bce0 <sync_window+0x50>
			fs->wflag = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bcba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcbc:	1afb      	subs	r3, r7, r3
 800bcbe:	69e2      	ldr	r2, [r4, #28]
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d2e9      	bcs.n	800bc98 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcc4:	78a6      	ldrb	r6, [r4, #2]
 800bcc6:	e008      	b.n	800bcda <sync_window+0x4a>
					wsect += fs->fsize;
 800bcc8:	69e3      	ldr	r3, [r4, #28]
 800bcca:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800bccc:	2301      	movs	r3, #1
 800bcce:	463a      	mov	r2, r7
 800bcd0:	4641      	mov	r1, r8
 800bcd2:	7860      	ldrb	r0, [r4, #1]
 800bcd4:	f7ff fccc 	bl	800b670 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcd8:	3e01      	subs	r6, #1
 800bcda:	2e01      	cmp	r6, #1
 800bcdc:	d8f4      	bhi.n	800bcc8 <sync_window+0x38>
 800bcde:	e7db      	b.n	800bc98 <sync_window+0x8>
			res = FR_DISK_ERR;
 800bce0:	2501      	movs	r5, #1
 800bce2:	e7d9      	b.n	800bc98 <sync_window+0x8>

0800bce4 <move_window>:
{
 800bce4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bce6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bce8:	428b      	cmp	r3, r1
 800bcea:	d102      	bne.n	800bcf2 <move_window+0xe>
	FRESULT res = FR_OK;
 800bcec:	2600      	movs	r6, #0
}
 800bcee:	4630      	mov	r0, r6
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800bcf6:	f7ff ffcb 	bl	800bc90 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1f6      	bne.n	800bcee <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd00:	2301      	movs	r3, #1
 800bd02:	462a      	mov	r2, r5
 800bd04:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800bd08:	7860      	ldrb	r0, [r4, #1]
 800bd0a:	f7ff fca5 	bl	800b658 <disk_read>
 800bd0e:	b110      	cbz	r0, 800bd16 <move_window+0x32>
				res = FR_DISK_ERR;
 800bd10:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800bd16:	6325      	str	r5, [r4, #48]	; 0x30
 800bd18:	e7e9      	b.n	800bcee <move_window+0xa>
	...

0800bd1c <check_fs>:
{
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd20:	2300      	movs	r3, #0
 800bd22:	70c3      	strb	r3, [r0, #3]
 800bd24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd28:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd2a:	f7ff ffdb 	bl	800bce4 <move_window>
 800bd2e:	bb30      	cbnz	r0, 800bd7e <check_fs+0x62>
 800bd30:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd32:	f204 2032 	addw	r0, r4, #562	; 0x232
 800bd36:	f7ff fcb3 	bl	800b6a0 <ld_word>
 800bd3a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd3e:	4298      	cmp	r0, r3
 800bd40:	d11f      	bne.n	800bd82 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd42:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800bd46:	2be9      	cmp	r3, #233	; 0xe9
 800bd48:	d007      	beq.n	800bd5a <check_fs+0x3e>
 800bd4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd4c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bd50:	4a0d      	ldr	r2, [pc, #52]	; (800bd88 <check_fs+0x6c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d001      	beq.n	800bd5a <check_fs+0x3e>
	return 2;
 800bd56:	2502      	movs	r5, #2
 800bd58:	e014      	b.n	800bd84 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd5a:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800bd5e:	f7ff fca4 	bl	800b6aa <ld_dword>
 800bd62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <check_fs+0x70>)
 800bd68:	4298      	cmp	r0, r3
 800bd6a:	d00b      	beq.n	800bd84 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd6c:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800bd70:	f7ff fc9b 	bl	800b6aa <ld_dword>
 800bd74:	4b06      	ldr	r3, [pc, #24]	; (800bd90 <check_fs+0x74>)
 800bd76:	4298      	cmp	r0, r3
 800bd78:	d004      	beq.n	800bd84 <check_fs+0x68>
	return 2;
 800bd7a:	2502      	movs	r5, #2
 800bd7c:	e002      	b.n	800bd84 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd7e:	2504      	movs	r5, #4
 800bd80:	e000      	b.n	800bd84 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd82:	2503      	movs	r5, #3
}
 800bd84:	4628      	mov	r0, r5
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	009000eb 	.word	0x009000eb
 800bd8c:	00544146 	.word	0x00544146
 800bd90:	33544146 	.word	0x33544146

0800bd94 <find_volume>:
{
 800bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd98:	b085      	sub	sp, #20
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	4616      	mov	r6, r2
	*rfs = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800bda2:	f7ff ff2e 	bl	800bc02 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bda6:	1e07      	subs	r7, r0, #0
 800bda8:	f2c0 8146 	blt.w	800c038 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdac:	4bb6      	ldr	r3, [pc, #728]	; (800c088 <find_volume+0x2f4>)
 800bdae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	f000 8145 	beq.w	800c042 <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 800bdb8:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdba:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bdbe:	7823      	ldrb	r3, [r4, #0]
 800bdc0:	b173      	cbz	r3, 800bde0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800bdc2:	7860      	ldrb	r0, [r4, #1]
 800bdc4:	f7ff fc28 	bl	800b618 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bdc8:	f010 0501 	ands.w	r5, r0, #1
 800bdcc:	d108      	bne.n	800bde0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	f000 8133 	beq.w	800c03a <find_volume+0x2a6>
 800bdd4:	f010 0f04 	tst.w	r0, #4
 800bdd8:	f000 812f 	beq.w	800c03a <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
 800bddc:	250a      	movs	r5, #10
 800bdde:	e12c      	b.n	800c03a <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
 800bde0:	2300      	movs	r3, #0
 800bde2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bde4:	b2f8      	uxtb	r0, r7
 800bde6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bde8:	f7ff fc22 	bl	800b630 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bdec:	f010 0501 	ands.w	r5, r0, #1
 800bdf0:	f040 8129 	bne.w	800c046 <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bdf4:	b11e      	cbz	r6, 800bdfe <find_volume+0x6a>
 800bdf6:	f010 0f04 	tst.w	r0, #4
 800bdfa:	f040 8126 	bne.w	800c04a <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bdfe:	2100      	movs	r1, #0
 800be00:	4620      	mov	r0, r4
 800be02:	f7ff ff8b 	bl	800bd1c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800be06:	2802      	cmp	r0, #2
 800be08:	f000 80b8 	beq.w	800bf7c <find_volume+0x1e8>
	bsect = 0;
 800be0c:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800be0e:	2804      	cmp	r0, #4
 800be10:	f000 811d 	beq.w	800c04e <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800be14:	2801      	cmp	r0, #1
 800be16:	f200 811c 	bhi.w	800c052 <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800be1a:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 800be1e:	f7ff fc3f 	bl	800b6a0 <ld_word>
 800be22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800be26:	f040 8116 	bne.w	800c056 <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800be2a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800be2e:	f7ff fc37 	bl	800b6a0 <ld_word>
 800be32:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800be34:	b920      	cbnz	r0, 800be40 <find_volume+0xac>
 800be36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be3a:	f7ff fc36 	bl	800b6aa <ld_dword>
 800be3e:	4606      	mov	r6, r0
		fs->fsize = fasize;
 800be40:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800be42:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800be46:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800be48:	1e53      	subs	r3, r2, #1
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	f200 8104 	bhi.w	800c05a <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800be52:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800be56:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 800be5a:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800be5e:	f1b9 0f00 	cmp.w	r9, #0
 800be62:	f000 80fc 	beq.w	800c05e <find_volume+0x2ca>
 800be66:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800be6a:	ea19 0f03 	tst.w	r9, r3
 800be6e:	f040 80f8 	bne.w	800c062 <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800be72:	f104 0045 	add.w	r0, r4, #69	; 0x45
 800be76:	f7ff fc13 	bl	800b6a0 <ld_word>
 800be7a:	4682      	mov	sl, r0
 800be7c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800be7e:	f010 0f0f 	tst.w	r0, #15
 800be82:	f040 80f0 	bne.w	800c066 <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be86:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800be8a:	f7ff fc09 	bl	800b6a0 <ld_word>
 800be8e:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be90:	b920      	cbnz	r0, 800be9c <find_volume+0x108>
 800be92:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800be96:	f7ff fc08 	bl	800b6aa <ld_dword>
 800be9a:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be9c:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800bea0:	f7ff fbfe 	bl	800b6a0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bea4:	4602      	mov	r2, r0
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f000 80df 	beq.w	800c06a <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800beac:	eb00 0308 	add.w	r3, r0, r8
 800beb0:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800beb4:	459b      	cmp	fp, r3
 800beb6:	f0c0 80da 	bcc.w	800c06e <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800beba:	ebab 0b03 	sub.w	fp, fp, r3
 800bebe:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bec2:	45cb      	cmp	fp, r9
 800bec4:	f0c0 80d5 	bcc.w	800c072 <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bec8:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800becc:	4281      	cmp	r1, r0
 800bece:	d96d      	bls.n	800bfac <find_volume+0x218>
		fmt = FS_FAT32;
 800bed0:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bed4:	f640 70f5 	movw	r0, #4085	; 0xff5
 800bed8:	4281      	cmp	r1, r0
 800beda:	d801      	bhi.n	800bee0 <find_volume+0x14c>
 800bedc:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bee0:	f101 0902 	add.w	r9, r1, #2
 800bee4:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bee8:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800beea:	443a      	add	r2, r7
 800beec:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800beee:	443b      	add	r3, r7
 800bef0:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bef2:	f1bb 0f03 	cmp.w	fp, #3
 800bef6:	d05c      	beq.n	800bfb2 <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bef8:	f1ba 0f00 	cmp.w	sl, #0
 800befc:	f000 80bf 	beq.w	800c07e <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf00:	4442      	add	r2, r8
 800bf02:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf04:	f1bb 0f02 	cmp.w	fp, #2
 800bf08:	d064      	beq.n	800bfd4 <find_volume+0x240>
 800bf0a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800bf0e:	f009 0901 	and.w	r9, r9, #1
 800bf12:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf16:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 800bf1a:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 800bf1e:	f0c0 80b0 	bcc.w	800c082 <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf26:	6163      	str	r3, [r4, #20]
 800bf28:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800bf2a:	2380      	movs	r3, #128	; 0x80
 800bf2c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf2e:	f1bb 0f03 	cmp.w	fp, #3
 800bf32:	d052      	beq.n	800bfda <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
 800bf34:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800bf38:	4a54      	ldr	r2, [pc, #336]	; (800c08c <find_volume+0x2f8>)
 800bf3a:	8813      	ldrh	r3, [r2, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	8013      	strh	r3, [r2, #0]
 800bf42:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bf44:	4b52      	ldr	r3, [pc, #328]	; (800c090 <find_volume+0x2fc>)
 800bf46:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff fcab 	bl	800b8a4 <clear_lock>
	return FR_OK;
 800bf4e:	e074      	b.n	800c03a <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf50:	2000      	movs	r0, #0
 800bf52:	ab04      	add	r3, sp, #16
 800bf54:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bf58:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf5c:	3601      	adds	r6, #1
 800bf5e:	2e03      	cmp	r6, #3
 800bf60:	d80e      	bhi.n	800bf80 <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf62:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800bf66:	0133      	lsls	r3, r6, #4
 800bf68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bf6c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf6e:	7903      	ldrb	r3, [r0, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d0ed      	beq.n	800bf50 <find_volume+0x1bc>
 800bf74:	3008      	adds	r0, #8
 800bf76:	f7ff fb98 	bl	800b6aa <ld_dword>
 800bf7a:	e7ea      	b.n	800bf52 <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf7c:	2600      	movs	r6, #0
 800bf7e:	e7ee      	b.n	800bf5e <find_volume+0x1ca>
 800bf80:	2600      	movs	r6, #0
 800bf82:	e00a      	b.n	800bf9a <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf84:	4639      	mov	r1, r7
 800bf86:	4620      	mov	r0, r4
 800bf88:	f7ff fec8 	bl	800bd1c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf8c:	2801      	cmp	r0, #1
 800bf8e:	f67f af3e 	bls.w	800be0e <find_volume+0x7a>
 800bf92:	3601      	adds	r6, #1
 800bf94:	2e03      	cmp	r6, #3
 800bf96:	f63f af3a 	bhi.w	800be0e <find_volume+0x7a>
			bsect = br[i];
 800bf9a:	ab04      	add	r3, sp, #16
 800bf9c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bfa0:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bfa4:	2f00      	cmp	r7, #0
 800bfa6:	d1ed      	bne.n	800bf84 <find_volume+0x1f0>
 800bfa8:	2003      	movs	r0, #3
 800bfaa:	e7f2      	b.n	800bf92 <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bfac:	f04f 0b02 	mov.w	fp, #2
 800bfb0:	e790      	b.n	800bed4 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bfb2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 800bfb6:	f7ff fb73 	bl	800b6a0 <ld_word>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d15b      	bne.n	800c076 <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bfbe:	f1ba 0f00 	cmp.w	sl, #0
 800bfc2:	d15a      	bne.n	800c07a <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bfc4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800bfc8:	f7ff fb6f 	bl	800b6aa <ld_dword>
 800bfcc:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bfce:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800bfd2:	e7a0      	b.n	800bf16 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bfd4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800bfd8:	e79d      	b.n	800bf16 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bfda:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800bfde:	f7ff fb5f 	bl	800b6a0 <ld_word>
 800bfe2:	2801      	cmp	r0, #1
 800bfe4:	d1a6      	bne.n	800bf34 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfe6:	1c79      	adds	r1, r7, #1
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f7ff fe7b 	bl	800bce4 <move_window>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d1a0      	bne.n	800bf34 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bff6:	f204 2032 	addw	r0, r4, #562	; 0x232
 800bffa:	f7ff fb51 	bl	800b6a0 <ld_word>
 800bffe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c002:	4298      	cmp	r0, r3
 800c004:	d196      	bne.n	800bf34 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c006:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c00a:	f7ff fb4e 	bl	800b6aa <ld_dword>
 800c00e:	4b21      	ldr	r3, [pc, #132]	; (800c094 <find_volume+0x300>)
 800c010:	4298      	cmp	r0, r3
 800c012:	d18f      	bne.n	800bf34 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c014:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800c018:	f7ff fb47 	bl	800b6aa <ld_dword>
 800c01c:	4b1e      	ldr	r3, [pc, #120]	; (800c098 <find_volume+0x304>)
 800c01e:	4298      	cmp	r0, r3
 800c020:	d188      	bne.n	800bf34 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c022:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800c026:	f7ff fb40 	bl	800b6aa <ld_dword>
 800c02a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c02c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800c030:	f7ff fb3b 	bl	800b6aa <ld_dword>
 800c034:	6120      	str	r0, [r4, #16]
 800c036:	e77d      	b.n	800bf34 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c038:	250b      	movs	r5, #11
}
 800c03a:	4628      	mov	r0, r5
 800c03c:	b005      	add	sp, #20
 800c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c042:	250c      	movs	r5, #12
 800c044:	e7f9      	b.n	800c03a <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c046:	2503      	movs	r5, #3
 800c048:	e7f7      	b.n	800c03a <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
 800c04a:	250a      	movs	r5, #10
 800c04c:	e7f5      	b.n	800c03a <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c04e:	2501      	movs	r5, #1
 800c050:	e7f3      	b.n	800c03a <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c052:	250d      	movs	r5, #13
 800c054:	e7f1      	b.n	800c03a <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c056:	250d      	movs	r5, #13
 800c058:	e7ef      	b.n	800c03a <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c05a:	250d      	movs	r5, #13
 800c05c:	e7ed      	b.n	800c03a <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c05e:	250d      	movs	r5, #13
 800c060:	e7eb      	b.n	800c03a <find_volume+0x2a6>
 800c062:	250d      	movs	r5, #13
 800c064:	e7e9      	b.n	800c03a <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c066:	250d      	movs	r5, #13
 800c068:	e7e7      	b.n	800c03a <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c06a:	250d      	movs	r5, #13
 800c06c:	e7e5      	b.n	800c03a <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c06e:	250d      	movs	r5, #13
 800c070:	e7e3      	b.n	800c03a <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c072:	250d      	movs	r5, #13
 800c074:	e7e1      	b.n	800c03a <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c076:	250d      	movs	r5, #13
 800c078:	e7df      	b.n	800c03a <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c07a:	250d      	movs	r5, #13
 800c07c:	e7dd      	b.n	800c03a <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c07e:	250d      	movs	r5, #13
 800c080:	e7db      	b.n	800c03a <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c082:	250d      	movs	r5, #13
 800c084:	e7d9      	b.n	800c03a <find_volume+0x2a6>
 800c086:	bf00      	nop
 800c088:	2001d5b4 	.word	0x2001d5b4
 800c08c:	2001d5d8 	.word	0x2001d5d8
 800c090:	2001d5dc 	.word	0x2001d5dc
 800c094:	41615252 	.word	0x41615252
 800c098:	61417272 	.word	0x61417272

0800c09c <put_fat>:
{
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c0a0:	2901      	cmp	r1, #1
 800c0a2:	d97e      	bls.n	800c1a2 <put_fat+0x106>
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	6983      	ldr	r3, [r0, #24]
 800c0ac:	428b      	cmp	r3, r1
 800c0ae:	d97a      	bls.n	800c1a6 <put_fat+0x10a>
		switch (fs->fs_type) {
 800c0b0:	7803      	ldrb	r3, [r0, #0]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d045      	beq.n	800c142 <put_fat+0xa6>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d057      	beq.n	800c16a <put_fat+0xce>
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d003      	beq.n	800c0c6 <put_fat+0x2a>
 800c0be:	2502      	movs	r5, #2
}
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800c0c6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c0ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c0cc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800c0d0:	f7ff fe08 	bl	800bce4 <move_window>
			if (res != FR_OK) break;
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d1f2      	bne.n	800c0c0 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 800c0da:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 800c0de:	f108 0901 	add.w	r9, r8, #1
 800c0e2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c0e6:	f014 0401 	ands.w	r4, r4, #1
 800c0ea:	d01f      	beq.n	800c12c <put_fat+0x90>
 800c0ec:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800c0f0:	f003 030f 	and.w	r3, r3, #15
 800c0f4:	0132      	lsls	r2, r6, #4
 800c0f6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800c102:	2301      	movs	r3, #1
 800c104:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c108:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800c10c:	4638      	mov	r0, r7
 800c10e:	f7ff fde9 	bl	800bce4 <move_window>
			if (res != FR_OK) break;
 800c112:	4605      	mov	r5, r0
 800c114:	2800      	cmp	r0, #0
 800c116:	d1d3      	bne.n	800c0c0 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 800c118:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c11c:	b144      	cbz	r4, 800c130 <put_fat+0x94>
 800c11e:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800c122:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 800c126:	2301      	movs	r3, #1
 800c128:	70fb      	strb	r3, [r7, #3]
			break;
 800c12a:	e7c9      	b.n	800c0c0 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c12c:	b2f3      	uxtb	r3, r6
 800c12e:	e7e6      	b.n	800c0fe <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c130:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 800c134:	f023 030f 	bic.w	r3, r3, #15
 800c138:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800c13c:	4313      	orrs	r3, r2
 800c13e:	b2db      	uxtb	r3, r3
 800c140:	e7ef      	b.n	800c122 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c142:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c144:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c148:	f7ff fdcc 	bl	800bce4 <move_window>
			if (res != FR_OK) break;
 800c14c:	4605      	mov	r5, r0
 800c14e:	2800      	cmp	r0, #0
 800c150:	d1b6      	bne.n	800c0c0 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c152:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c156:	0064      	lsls	r4, r4, #1
 800c158:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c15c:	b2b1      	uxth	r1, r6
 800c15e:	4420      	add	r0, r4
 800c160:	f7ff faae 	bl	800b6c0 <st_word>
			fs->wflag = 1;
 800c164:	2301      	movs	r3, #1
 800c166:	70fb      	strb	r3, [r7, #3]
			break;
 800c168:	e7aa      	b.n	800c0c0 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c16a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c16c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c170:	f7ff fdb8 	bl	800bce4 <move_window>
			if (res != FR_OK) break;
 800c174:	4605      	mov	r5, r0
 800c176:	2800      	cmp	r0, #0
 800c178:	d1a2      	bne.n	800c0c0 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c17a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800c17e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c182:	00a4      	lsls	r4, r4, #2
 800c184:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c188:	441c      	add	r4, r3
 800c18a:	4620      	mov	r0, r4
 800c18c:	f7ff fa8d 	bl	800b6aa <ld_dword>
 800c190:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c194:	4331      	orrs	r1, r6
 800c196:	4620      	mov	r0, r4
 800c198:	f7ff fa96 	bl	800b6c8 <st_dword>
			fs->wflag = 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	70fb      	strb	r3, [r7, #3]
			break;
 800c1a0:	e78e      	b.n	800c0c0 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800c1a2:	2502      	movs	r5, #2
 800c1a4:	e78c      	b.n	800c0c0 <put_fat+0x24>
 800c1a6:	2502      	movs	r5, #2
 800c1a8:	e78a      	b.n	800c0c0 <put_fat+0x24>

0800c1aa <get_fat>:
{
 800c1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800c1ac:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1ae:	2901      	cmp	r1, #1
 800c1b0:	d956      	bls.n	800c260 <get_fat+0xb6>
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	69ab      	ldr	r3, [r5, #24]
 800c1b6:	428b      	cmp	r3, r1
 800c1b8:	d954      	bls.n	800c264 <get_fat+0xba>
		switch (fs->fs_type) {
 800c1ba:	782b      	ldrb	r3, [r5, #0]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	d02d      	beq.n	800c21c <get_fat+0x72>
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d03b      	beq.n	800c23c <get_fat+0x92>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d001      	beq.n	800c1cc <get_fat+0x22>
 800c1c8:	2001      	movs	r0, #1
 800c1ca:	e04a      	b.n	800c262 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 800c1cc:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c1d2:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	f7ff fd84 	bl	800bce4 <move_window>
 800c1dc:	b110      	cbz	r0, 800c1e4 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1e2:	e03e      	b.n	800c262 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800c1e4:	1c77      	adds	r7, r6, #1
 800c1e6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c1ea:	442e      	add	r6, r5
 800c1ec:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1f0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c1f2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	f7ff fd74 	bl	800bce4 <move_window>
 800c1fc:	bba0      	cbnz	r0, 800c268 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c1fe:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800c202:	442f      	add	r7, r5
 800c204:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c208:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c20c:	f014 0f01 	tst.w	r4, #1
 800c210:	d001      	beq.n	800c216 <get_fat+0x6c>
 800c212:	0900      	lsrs	r0, r0, #4
 800c214:	e025      	b.n	800c262 <get_fat+0xb8>
 800c216:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c21a:	e022      	b.n	800c262 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c21c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c21e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c222:	4628      	mov	r0, r5
 800c224:	f7ff fd5e 	bl	800bce4 <move_window>
 800c228:	bb08      	cbnz	r0, 800c26e <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c22a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c22e:	0064      	lsls	r4, r4, #1
 800c230:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c234:	4420      	add	r0, r4
 800c236:	f7ff fa33 	bl	800b6a0 <ld_word>
			break;
 800c23a:	e012      	b.n	800c262 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c23c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c23e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c242:	4628      	mov	r0, r5
 800c244:	f7ff fd4e 	bl	800bce4 <move_window>
 800c248:	b9a0      	cbnz	r0, 800c274 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c24a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c24e:	00a4      	lsls	r4, r4, #2
 800c250:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c254:	4420      	add	r0, r4
 800c256:	f7ff fa28 	bl	800b6aa <ld_dword>
 800c25a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800c25e:	e000      	b.n	800c262 <get_fat+0xb8>
		val = 1;	/* Internal error */
 800c260:	2001      	movs	r0, #1
}
 800c262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800c264:	2001      	movs	r0, #1
 800c266:	e7fc      	b.n	800c262 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c26c:	e7f9      	b.n	800c262 <get_fat+0xb8>
 800c26e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c272:	e7f6      	b.n	800c262 <get_fat+0xb8>
 800c274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 800c278:	e7f3      	b.n	800c262 <get_fat+0xb8>

0800c27a <dir_sdi>:
{
 800c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c27e:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c282:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c286:	d240      	bcs.n	800c30a <dir_sdi+0x90>
 800c288:	4606      	mov	r6, r0
 800c28a:	460f      	mov	r7, r1
 800c28c:	f011 0f1f 	tst.w	r1, #31
 800c290:	d13d      	bne.n	800c30e <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 800c292:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c294:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c296:	b92c      	cbnz	r4, 800c2a4 <dir_sdi+0x2a>
 800c298:	f898 3000 	ldrb.w	r3, [r8]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d901      	bls.n	800c2a4 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800c2a0:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c2a4:	b9b4      	cbnz	r4, 800c2d4 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c2a6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c2aa:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800c2ae:	d930      	bls.n	800c312 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 800c2b0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c2b4:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800c2b6:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c2b8:	69f3      	ldr	r3, [r6, #28]
 800c2ba:	b393      	cbz	r3, 800c322 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c2bc:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800c2c0:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c2c2:	f108 0334 	add.w	r3, r8, #52	; 0x34
 800c2c6:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800c2ca:	440b      	add	r3, r1
 800c2cc:	6233      	str	r3, [r6, #32]
	return FR_OK;
 800c2ce:	2000      	movs	r0, #0
}
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2d4:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800c2d8:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2da:	42af      	cmp	r7, r5
 800c2dc:	d30f      	bcc.n	800c2fe <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2de:	4621      	mov	r1, r4
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f7ff ff62 	bl	800c1aa <get_fat>
 800c2e6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c2ec:	d013      	beq.n	800c316 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2ee:	2801      	cmp	r0, #1
 800c2f0:	d913      	bls.n	800c31a <dir_sdi+0xa0>
 800c2f2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c2f6:	4283      	cmp	r3, r0
 800c2f8:	d911      	bls.n	800c31e <dir_sdi+0xa4>
			ofs -= csz;
 800c2fa:	1b7f      	subs	r7, r7, r5
 800c2fc:	e7ed      	b.n	800c2da <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 800c2fe:	4621      	mov	r1, r4
 800c300:	4640      	mov	r0, r8
 800c302:	f7ff faed 	bl	800b8e0 <clust2sect>
 800c306:	61f0      	str	r0, [r6, #28]
 800c308:	e7d5      	b.n	800c2b6 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800c30a:	2002      	movs	r0, #2
 800c30c:	e7e0      	b.n	800c2d0 <dir_sdi+0x56>
 800c30e:	2002      	movs	r0, #2
 800c310:	e7de      	b.n	800c2d0 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c312:	2002      	movs	r0, #2
 800c314:	e7dc      	b.n	800c2d0 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c316:	2001      	movs	r0, #1
 800c318:	e7da      	b.n	800c2d0 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c31a:	2002      	movs	r0, #2
 800c31c:	e7d8      	b.n	800c2d0 <dir_sdi+0x56>
 800c31e:	2002      	movs	r0, #2
 800c320:	e7d6      	b.n	800c2d0 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 800c322:	2002      	movs	r0, #2
 800c324:	e7d4      	b.n	800c2d0 <dir_sdi+0x56>

0800c326 <create_chain>:
{
 800c326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32a:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 800c32c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800c32e:	460f      	mov	r7, r1
 800c330:	b951      	cbnz	r1, 800c348 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c332:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c336:	f1b8 0f00 	cmp.w	r8, #0
 800c33a:	d012      	beq.n	800c362 <create_chain+0x3c>
 800c33c:	69b3      	ldr	r3, [r6, #24]
 800c33e:	4543      	cmp	r3, r8
 800c340:	d811      	bhi.n	800c366 <create_chain+0x40>
 800c342:	f04f 0801 	mov.w	r8, #1
 800c346:	e00e      	b.n	800c366 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c348:	f7ff ff2f 	bl	800c1aa <get_fat>
 800c34c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c34e:	2801      	cmp	r0, #1
 800c350:	d94c      	bls.n	800c3ec <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c352:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c356:	d04e      	beq.n	800c3f6 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c358:	69b2      	ldr	r2, [r6, #24]
 800c35a:	4282      	cmp	r2, r0
 800c35c:	d84b      	bhi.n	800c3f6 <create_chain+0xd0>
		scl = clst;
 800c35e:	46b8      	mov	r8, r7
 800c360:	e001      	b.n	800c366 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c362:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 800c366:	4644      	mov	r4, r8
 800c368:	e00c      	b.n	800c384 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c36a:	4621      	mov	r1, r4
 800c36c:	4628      	mov	r0, r5
 800c36e:	f7ff ff1c 	bl	800c1aa <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800c372:	4603      	mov	r3, r0
 800c374:	b178      	cbz	r0, 800c396 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c376:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c37a:	bf18      	it	ne
 800c37c:	2801      	cmpne	r0, #1
 800c37e:	d03a      	beq.n	800c3f6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800c380:	4544      	cmp	r4, r8
 800c382:	d037      	beq.n	800c3f4 <create_chain+0xce>
			ncl++;							/* Next cluster */
 800c384:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c386:	69b3      	ldr	r3, [r6, #24]
 800c388:	42a3      	cmp	r3, r4
 800c38a:	d8ee      	bhi.n	800c36a <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 800c38c:	f1b8 0f01 	cmp.w	r8, #1
 800c390:	d92e      	bls.n	800c3f0 <create_chain+0xca>
				ncl = 2;
 800c392:	2402      	movs	r4, #2
 800c394:	e7e9      	b.n	800c36a <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c39a:	4621      	mov	r1, r4
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7ff fe7d 	bl	800c09c <put_fat>
		if (res == FR_OK && clst != 0) {
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	fab0 f080 	clz	r0, r0
 800c3a8:	0940      	lsrs	r0, r0, #5
 800c3aa:	2f00      	cmp	r7, #0
 800c3ac:	bf08      	it	eq
 800c3ae:	2000      	moveq	r0, #0
 800c3b0:	b970      	cbnz	r0, 800c3d0 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c3b2:	b9a2      	cbnz	r2, 800c3de <create_chain+0xb8>
		fs->last_clst = ncl;
 800c3b4:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c3b6:	6972      	ldr	r2, [r6, #20]
 800c3b8:	69b3      	ldr	r3, [r6, #24]
 800c3ba:	3b02      	subs	r3, #2
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d801      	bhi.n	800c3c4 <create_chain+0x9e>
 800c3c0:	3a01      	subs	r2, #1
 800c3c2:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 800c3c4:	7933      	ldrb	r3, [r6, #4]
 800c3c6:	f043 0301 	orr.w	r3, r3, #1
 800c3ca:	7133      	strb	r3, [r6, #4]
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	e012      	b.n	800c3f6 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4639      	mov	r1, r7
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff fe61 	bl	800c09c <put_fat>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	e7e9      	b.n	800c3b2 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c3de:	2a01      	cmp	r2, #1
 800c3e0:	d001      	beq.n	800c3e6 <create_chain+0xc0>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e007      	b.n	800c3f6 <create_chain+0xd0>
 800c3e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3ea:	e004      	b.n	800c3f6 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e002      	b.n	800c3f6 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	e000      	b.n	800c3f6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c3fc <remove_chain>:
{
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fe:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800c400:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c402:	2901      	cmp	r1, #1
 800c404:	d92e      	bls.n	800c464 <remove_chain+0x68>
 800c406:	4606      	mov	r6, r0
 800c408:	4611      	mov	r1, r2
 800c40a:	69ab      	ldr	r3, [r5, #24]
 800c40c:	42a3      	cmp	r3, r4
 800c40e:	d92b      	bls.n	800c468 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c410:	b14a      	cbz	r2, 800c426 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c416:	4628      	mov	r0, r5
 800c418:	f7ff fe40 	bl	800c09c <put_fat>
		if (res != FR_OK) return res;
 800c41c:	4607      	mov	r7, r0
 800c41e:	b110      	cbz	r0, 800c426 <remove_chain+0x2a>
 800c420:	e023      	b.n	800c46a <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c422:	42a2      	cmp	r2, r4
 800c424:	d921      	bls.n	800c46a <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c426:	4627      	mov	r7, r4
 800c428:	4621      	mov	r1, r4
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7ff febd 	bl	800c1aa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800c430:	4604      	mov	r4, r0
 800c432:	b1e0      	cbz	r0, 800c46e <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c434:	2801      	cmp	r0, #1
 800c436:	d01c      	beq.n	800c472 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c438:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c43c:	d01b      	beq.n	800c476 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c43e:	2200      	movs	r2, #0
 800c440:	4639      	mov	r1, r7
 800c442:	4628      	mov	r0, r5
 800c444:	f7ff fe2a 	bl	800c09c <put_fat>
			if (res != FR_OK) return res;
 800c448:	4607      	mov	r7, r0
 800c44a:	b970      	cbnz	r0, 800c46a <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c44c:	696b      	ldr	r3, [r5, #20]
 800c44e:	69aa      	ldr	r2, [r5, #24]
 800c450:	1e91      	subs	r1, r2, #2
 800c452:	428b      	cmp	r3, r1
 800c454:	d2e5      	bcs.n	800c422 <remove_chain+0x26>
			fs->free_clst++;
 800c456:	3301      	adds	r3, #1
 800c458:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800c45a:	792b      	ldrb	r3, [r5, #4]
 800c45c:	f043 0301 	orr.w	r3, r3, #1
 800c460:	712b      	strb	r3, [r5, #4]
 800c462:	e7de      	b.n	800c422 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c464:	2702      	movs	r7, #2
 800c466:	e000      	b.n	800c46a <remove_chain+0x6e>
 800c468:	2702      	movs	r7, #2
}
 800c46a:	4638      	mov	r0, r7
 800c46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800c46e:	2700      	movs	r7, #0
 800c470:	e7fb      	b.n	800c46a <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c472:	2702      	movs	r7, #2
 800c474:	e7f9      	b.n	800c46a <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c476:	2701      	movs	r7, #1
 800c478:	e7f7      	b.n	800c46a <remove_chain+0x6e>

0800c47a <dir_next>:
{
 800c47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 800c47e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c480:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c482:	69c3      	ldr	r3, [r0, #28]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d06c      	beq.n	800c562 <dir_next+0xe8>
 800c488:	4604      	mov	r4, r0
 800c48a:	4688      	mov	r8, r1
 800c48c:	3520      	adds	r5, #32
 800c48e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800c492:	d268      	bcs.n	800c566 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c494:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800c498:	b93f      	cbnz	r7, 800c4aa <dir_next+0x30>
		dp->sect++;				/* Next sector */
 800c49a:	3301      	adds	r3, #1
 800c49c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800c49e:	6981      	ldr	r1, [r0, #24]
 800c4a0:	b979      	cbnz	r1, 800c4c2 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c4a2:	8933      	ldrh	r3, [r6, #8]
 800c4a4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800c4a8:	d907      	bls.n	800c4ba <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 800c4aa:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4ac:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800c4b0:	443b      	add	r3, r7
 800c4b2:	6223      	str	r3, [r4, #32]
	return FR_OK;
 800c4b4:	2000      	movs	r0, #0
}
 800c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	61c3      	str	r3, [r0, #28]
 800c4be:	2004      	movs	r0, #4
 800c4c0:	e7f9      	b.n	800c4b6 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c4c2:	8973      	ldrh	r3, [r6, #10]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800c4ca:	d1ee      	bne.n	800c4aa <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c4cc:	f7ff fe6d 	bl	800c1aa <get_fat>
 800c4d0:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c4d2:	2801      	cmp	r0, #1
 800c4d4:	d949      	bls.n	800c56a <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c4d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c4da:	d048      	beq.n	800c56e <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4dc:	69b3      	ldr	r3, [r6, #24]
 800c4de:	4283      	cmp	r3, r0
 800c4e0:	d837      	bhi.n	800c552 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800c4e2:	f1b8 0f00 	cmp.w	r8, #0
 800c4e6:	d011      	beq.n	800c50c <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4e8:	69a1      	ldr	r1, [r4, #24]
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f7ff ff1b 	bl	800c326 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d03d      	beq.n	800c572 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4f6:	2801      	cmp	r0, #1
 800c4f8:	d03d      	beq.n	800c576 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c4fe:	d03c      	beq.n	800c57a <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c500:	4630      	mov	r0, r6
 800c502:	f7ff fbc5 	bl	800bc90 <sync_window>
 800c506:	b128      	cbz	r0, 800c514 <dir_next+0x9a>
 800c508:	2001      	movs	r0, #1
 800c50a:	e7d4      	b.n	800c4b6 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	61e3      	str	r3, [r4, #28]
 800c510:	2004      	movs	r0, #4
 800c512:	e7d0      	b.n	800c4b6 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c514:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c518:	2100      	movs	r1, #0
 800c51a:	f106 0034 	add.w	r0, r6, #52	; 0x34
 800c51e:	f7ff f8e7 	bl	800b6f0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c522:	4651      	mov	r1, sl
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff f9db 	bl	800b8e0 <clust2sect>
 800c52a:	6330      	str	r0, [r6, #48]	; 0x30
 800c52c:	8973      	ldrh	r3, [r6, #10]
 800c52e:	4599      	cmp	r9, r3
 800c530:	d20b      	bcs.n	800c54a <dir_next+0xd0>
						fs->wflag = 1;
 800c532:	2301      	movs	r3, #1
 800c534:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c536:	4630      	mov	r0, r6
 800c538:	f7ff fbaa 	bl	800bc90 <sync_window>
 800c53c:	b9f8      	cbnz	r0, 800c57e <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c53e:	f109 0901 	add.w	r9, r9, #1
 800c542:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c544:	3301      	adds	r3, #1
 800c546:	6333      	str	r3, [r6, #48]	; 0x30
 800c548:	e7f0      	b.n	800c52c <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 800c54a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c54c:	eba3 0309 	sub.w	r3, r3, r9
 800c550:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800c552:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800c556:	4651      	mov	r1, sl
 800c558:	4630      	mov	r0, r6
 800c55a:	f7ff f9c1 	bl	800b8e0 <clust2sect>
 800c55e:	61e0      	str	r0, [r4, #28]
 800c560:	e7a3      	b.n	800c4aa <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c562:	2004      	movs	r0, #4
 800c564:	e7a7      	b.n	800c4b6 <dir_next+0x3c>
 800c566:	2004      	movs	r0, #4
 800c568:	e7a5      	b.n	800c4b6 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c56a:	2002      	movs	r0, #2
 800c56c:	e7a3      	b.n	800c4b6 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c56e:	2001      	movs	r0, #1
 800c570:	e7a1      	b.n	800c4b6 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c572:	2007      	movs	r0, #7
 800c574:	e79f      	b.n	800c4b6 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c576:	2002      	movs	r0, #2
 800c578:	e79d      	b.n	800c4b6 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c57a:	2001      	movs	r0, #1
 800c57c:	e79b      	b.n	800c4b6 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c57e:	2001      	movs	r0, #1
 800c580:	e799      	b.n	800c4b6 <dir_next+0x3c>

0800c582 <dir_alloc>:
{
 800c582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c584:	4604      	mov	r4, r0
 800c586:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800c588:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800c58a:	2100      	movs	r1, #0
 800c58c:	f7ff fe75 	bl	800c27a <dir_sdi>
	if (res == FR_OK) {
 800c590:	4602      	mov	r2, r0
 800c592:	b9b8      	cbnz	r0, 800c5c4 <dir_alloc+0x42>
		n = 0;
 800c594:	2500      	movs	r5, #0
 800c596:	e006      	b.n	800c5a6 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 800c598:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800c59a:	2101      	movs	r1, #1
 800c59c:	4620      	mov	r0, r4
 800c59e:	f7ff ff6c 	bl	800c47a <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	b970      	cbnz	r0, 800c5c4 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 800c5a6:	69e1      	ldr	r1, [r4, #28]
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff fb9b 	bl	800bce4 <move_window>
			if (res != FR_OK) break;
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	b940      	cbnz	r0, 800c5c4 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5b2:	6a23      	ldr	r3, [r4, #32]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	bf18      	it	ne
 800c5ba:	2be5      	cmpne	r3, #229	; 0xe5
 800c5bc:	d1ec      	bne.n	800c598 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5be:	3501      	adds	r5, #1
 800c5c0:	42b5      	cmp	r5, r6
 800c5c2:	d1ea      	bne.n	800c59a <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c5c4:	2a04      	cmp	r2, #4
 800c5c6:	d001      	beq.n	800c5cc <dir_alloc+0x4a>
}
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c5cc:	2207      	movs	r2, #7
 800c5ce:	e7fb      	b.n	800c5c8 <dir_alloc+0x46>

0800c5d0 <dir_read>:
{
 800c5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800c5d8:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800c5da:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c5de:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 800c5e0:	2504      	movs	r5, #4
	while (dp->sect) {
 800c5e2:	e02c      	b.n	800c63e <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c5e4:	2b0f      	cmp	r3, #15
 800c5e6:	d119      	bne.n	800c61c <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c5e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c5ec:	d006      	beq.n	800c5fc <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 800c5ee:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800c5f2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800c5f6:	6963      	ldr	r3, [r4, #20]
 800c5f8:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800c5fa:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c5fc:	42b2      	cmp	r2, r6
 800c5fe:	d001      	beq.n	800c604 <dir_read+0x34>
 800c600:	26ff      	movs	r6, #255	; 0xff
 800c602:	e016      	b.n	800c632 <dir_read+0x62>
 800c604:	7b4b      	ldrb	r3, [r1, #13]
 800c606:	454b      	cmp	r3, r9
 800c608:	d001      	beq.n	800c60e <dir_read+0x3e>
 800c60a:	26ff      	movs	r6, #255	; 0xff
 800c60c:	e011      	b.n	800c632 <dir_read+0x62>
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7ff f9aa 	bl	800b968 <pick_lfn>
 800c614:	b378      	cbz	r0, 800c676 <dir_read+0xa6>
 800c616:	3e01      	subs	r6, #1
 800c618:	b2f6      	uxtb	r6, r6
 800c61a:	e00a      	b.n	800c632 <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c61c:	b926      	cbnz	r6, 800c628 <dir_read+0x58>
 800c61e:	4608      	mov	r0, r1
 800c620:	f7ff fa75 	bl	800bb0e <sum_sfn>
 800c624:	4548      	cmp	r0, r9
 800c626:	d029      	beq.n	800c67c <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c62c:	6323      	str	r3, [r4, #48]	; 0x30
 800c62e:	e025      	b.n	800c67c <dir_read+0xac>
				ord = 0xFF;
 800c630:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800c632:	2100      	movs	r1, #0
 800c634:	4620      	mov	r0, r4
 800c636:	f7ff ff20 	bl	800c47a <dir_next>
		if (res != FR_OK) break;
 800c63a:	4605      	mov	r5, r0
 800c63c:	b9f0      	cbnz	r0, 800c67c <dir_read+0xac>
	while (dp->sect) {
 800c63e:	69e1      	ldr	r1, [r4, #28]
 800c640:	b1e1      	cbz	r1, 800c67c <dir_read+0xac>
		res = move_window(fs, dp->sect);
 800c642:	4638      	mov	r0, r7
 800c644:	f7ff fb4e 	bl	800bce4 <move_window>
		if (res != FR_OK) break;
 800c648:	4605      	mov	r5, r0
 800c64a:	b9b8      	cbnz	r0, 800c67c <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c64c:	6a21      	ldr	r1, [r4, #32]
 800c64e:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800c650:	b19a      	cbz	r2, 800c67a <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c652:	7acb      	ldrb	r3, [r1, #11]
 800c654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c658:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c65a:	2a2e      	cmp	r2, #46	; 0x2e
 800c65c:	bf18      	it	ne
 800c65e:	2ae5      	cmpne	r2, #229	; 0xe5
 800c660:	d0e6      	beq.n	800c630 <dir_read+0x60>
 800c662:	f023 0020 	bic.w	r0, r3, #32
 800c666:	2808      	cmp	r0, #8
 800c668:	bf14      	ite	ne
 800c66a:	2000      	movne	r0, #0
 800c66c:	2001      	moveq	r0, #1
 800c66e:	4540      	cmp	r0, r8
 800c670:	d0b8      	beq.n	800c5e4 <dir_read+0x14>
				ord = 0xFF;
 800c672:	26ff      	movs	r6, #255	; 0xff
 800c674:	e7dd      	b.n	800c632 <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c676:	26ff      	movs	r6, #255	; 0xff
 800c678:	e7db      	b.n	800c632 <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c67a:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c67c:	b10d      	cbz	r5, 800c682 <dir_read+0xb2>
 800c67e:	2300      	movs	r3, #0
 800c680:	61e3      	str	r3, [r4, #28]
}
 800c682:	4628      	mov	r0, r5
 800c684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c688 <create_name>:
{
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	b083      	sub	sp, #12
 800c68e:	4680      	mov	r8, r0
 800c690:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c692:	f8d1 9000 	ldr.w	r9, [r1]
 800c696:	6803      	ldr	r3, [r0, #0]
 800c698:	68dd      	ldr	r5, [r3, #12]
 800c69a:	2400      	movs	r4, #0
 800c69c:	4623      	mov	r3, r4
 800c69e:	e01d      	b.n	800c6dc <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c6a0:	3701      	adds	r7, #1
 800c6a2:	f819 3007 	ldrb.w	r3, [r9, r7]
 800c6a6:	2b2f      	cmp	r3, #47	; 0x2f
 800c6a8:	d0fa      	beq.n	800c6a0 <create_name+0x18>
 800c6aa:	2b5c      	cmp	r3, #92	; 0x5c
 800c6ac:	d0f8      	beq.n	800c6a0 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800c6ae:	444f      	add	r7, r9
 800c6b0:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6b4:	281f      	cmp	r0, #31
 800c6b6:	d82e      	bhi.n	800c716 <create_name+0x8e>
 800c6b8:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c6bc:	b374      	cbz	r4, 800c71c <create_name+0x94>
		w = lfn[di - 1];
 800c6be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c6c2:	4423      	add	r3, r4
 800c6c4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800c6c8:	2b20      	cmp	r3, #32
 800c6ca:	bf18      	it	ne
 800c6cc:	2b2e      	cmpne	r3, #46	; 0x2e
 800c6ce:	d125      	bne.n	800c71c <create_name+0x94>
		di--;
 800c6d0:	3c01      	subs	r4, #1
 800c6d2:	e7f3      	b.n	800c6bc <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 800c6d4:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800c6d8:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800c6da:	463b      	mov	r3, r7
 800c6dc:	1c5f      	adds	r7, r3, #1
 800c6de:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 800c6e2:	281f      	cmp	r0, #31
 800c6e4:	d9e3      	bls.n	800c6ae <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c6e6:	285c      	cmp	r0, #92	; 0x5c
 800c6e8:	bf18      	it	ne
 800c6ea:	282f      	cmpne	r0, #47	; 0x2f
 800c6ec:	d0d9      	beq.n	800c6a2 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c6ee:	2cfe      	cmp	r4, #254	; 0xfe
 800c6f0:	f200 80d7 	bhi.w	800c8a2 <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	f000 ff97 	bl	800d628 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f000 80d2 	beq.w	800c8a6 <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c702:	287f      	cmp	r0, #127	; 0x7f
 800c704:	d8e6      	bhi.n	800c6d4 <create_name+0x4c>
 800c706:	4601      	mov	r1, r0
 800c708:	4869      	ldr	r0, [pc, #420]	; (800c8b0 <create_name+0x228>)
 800c70a:	f7ff f803 	bl	800b714 <chk_chr>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d0e0      	beq.n	800c6d4 <create_name+0x4c>
 800c712:	2006      	movs	r0, #6
 800c714:	e06f      	b.n	800c7f6 <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c716:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c71a:	e7cf      	b.n	800c6bc <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 800c71c:	2300      	movs	r3, #0
 800c71e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c722:	2c00      	cmp	r4, #0
 800c724:	f000 80c1 	beq.w	800c8aa <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
 800c728:	220b      	movs	r2, #11
 800c72a:	2120      	movs	r1, #32
 800c72c:	f108 0024 	add.w	r0, r8, #36	; 0x24
 800c730:	f7fe ffde 	bl	800b6f0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c734:	2300      	movs	r3, #0
 800c736:	e000      	b.n	800c73a <create_name+0xb2>
 800c738:	3301      	adds	r3, #1
 800c73a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800c73e:	2a20      	cmp	r2, #32
 800c740:	d0fa      	beq.n	800c738 <create_name+0xb0>
 800c742:	2a2e      	cmp	r2, #46	; 0x2e
 800c744:	d0f8      	beq.n	800c738 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c746:	b11b      	cbz	r3, 800c750 <create_name+0xc8>
 800c748:	f049 0903 	orr.w	r9, r9, #3
 800c74c:	e000      	b.n	800c750 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c74e:	3c01      	subs	r4, #1
 800c750:	b16c      	cbz	r4, 800c76e <create_name+0xe6>
 800c752:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c756:	4422      	add	r2, r4
 800c758:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800c75c:	2a2e      	cmp	r2, #46	; 0x2e
 800c75e:	d1f6      	bne.n	800c74e <create_name+0xc6>
 800c760:	f04f 0b08 	mov.w	fp, #8
 800c764:	f04f 0a00 	mov.w	sl, #0
 800c768:	f8cd a004 	str.w	sl, [sp, #4]
 800c76c:	e008      	b.n	800c780 <create_name+0xf8>
 800c76e:	46a2      	mov	sl, r4
 800c770:	f04f 0b08 	mov.w	fp, #8
 800c774:	2200      	movs	r2, #0
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	e002      	b.n	800c780 <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
 800c77a:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
 800c77e:	463b      	mov	r3, r7
 800c780:	1c5f      	adds	r7, r3, #1
 800c782:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800c786:	b1be      	cbz	r6, 800c7b8 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c788:	2e20      	cmp	r6, #32
 800c78a:	d0f6      	beq.n	800c77a <create_name+0xf2>
 800c78c:	2e2e      	cmp	r6, #46	; 0x2e
 800c78e:	bf14      	ite	ne
 800c790:	2300      	movne	r3, #0
 800c792:	2301      	moveq	r3, #1
 800c794:	42bc      	cmp	r4, r7
 800c796:	bf08      	it	eq
 800c798:	2300      	moveq	r3, #0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1ed      	bne.n	800c77a <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c79e:	42bc      	cmp	r4, r7
 800c7a0:	bf18      	it	ne
 800c7a2:	45da      	cmpne	sl, fp
 800c7a4:	d337      	bcc.n	800c816 <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
 800c7a6:	f1bb 0f0b 	cmp.w	fp, #11
 800c7aa:	d027      	beq.n	800c7fc <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c7ac:	42bc      	cmp	r4, r7
 800c7ae:	d001      	beq.n	800c7b4 <create_name+0x12c>
 800c7b0:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 800c7b4:	42bc      	cmp	r4, r7
 800c7b6:	d224      	bcs.n	800c802 <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7b8:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 800c7bc:	2be5      	cmp	r3, #229	; 0xe5
 800c7be:	d061      	beq.n	800c884 <create_name+0x1fc>
	if (ni == 8) b <<= 2;
 800c7c0:	f1bb 0f08 	cmp.w	fp, #8
 800c7c4:	d062      	beq.n	800c88c <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	f003 020c 	and.w	r2, r3, #12
 800c7cc:	2a0c      	cmp	r2, #12
 800c7ce:	d003      	beq.n	800c7d8 <create_name+0x150>
 800c7d0:	f003 0303 	and.w	r3, r3, #3
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d101      	bne.n	800c7dc <create_name+0x154>
 800c7d8:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c7dc:	f019 0f02 	tst.w	r9, #2
 800c7e0:	d106      	bne.n	800c7f0 <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c7e2:	9b01      	ldr	r3, [sp, #4]
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d054      	beq.n	800c896 <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c7ec:	2a04      	cmp	r2, #4
 800c7ee:	d055      	beq.n	800c89c <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c7f0:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
 800c7f4:	2000      	movs	r0, #0
}
 800c7f6:	b003      	add	sp, #12
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800c7fc:	f049 0903 	orr.w	r9, r9, #3
 800c800:	e7da      	b.n	800c7b8 <create_name+0x130>
			b <<= 2; continue;
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	b2db      	uxtb	r3, r3
 800c808:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c80a:	4623      	mov	r3, r4
 800c80c:	f04f 0b0b 	mov.w	fp, #11
 800c810:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800c814:	e7b4      	b.n	800c780 <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
 800c816:	2e7f      	cmp	r6, #127	; 0x7f
 800c818:	d80b      	bhi.n	800c832 <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c81a:	b9be      	cbnz	r6, 800c84c <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c81c:	f049 0903 	orr.w	r9, r9, #3
 800c820:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800c822:	eb08 030a 	add.w	r3, r8, sl
 800c826:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c82a:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 800c82c:	f10a 0a01 	add.w	sl, sl, #1
 800c830:	e7a6      	b.n	800c780 <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c832:	2100      	movs	r1, #0
 800c834:	4630      	mov	r0, r6
 800c836:	f000 fef7 	bl	800d628 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c83a:	4606      	mov	r6, r0
 800c83c:	b118      	cbz	r0, 800c846 <create_name+0x1be>
 800c83e:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800c842:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <create_name+0x22c>)
 800c844:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800c846:	f049 0902 	orr.w	r9, r9, #2
 800c84a:	e7e6      	b.n	800c81a <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c84c:	4631      	mov	r1, r6
 800c84e:	481a      	ldr	r0, [pc, #104]	; (800c8b8 <create_name+0x230>)
 800c850:	f7fe ff60 	bl	800b714 <chk_chr>
 800c854:	2800      	cmp	r0, #0
 800c856:	d1e1      	bne.n	800c81c <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 800c858:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	2b19      	cmp	r3, #25
 800c860:	d804      	bhi.n	800c86c <create_name+0x1e4>
					b |= 2;
 800c862:	9b01      	ldr	r3, [sp, #4]
 800c864:	f043 0302 	orr.w	r3, r3, #2
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	e7da      	b.n	800c822 <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
 800c86c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800c870:	b29b      	uxth	r3, r3
 800c872:	2b19      	cmp	r3, #25
 800c874:	d8d5      	bhi.n	800c822 <create_name+0x19a>
						b |= 1; w -= 0x20;
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	f043 0301 	orr.w	r3, r3, #1
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	3e20      	subs	r6, #32
 800c880:	b2b6      	uxth	r6, r6
 800c882:	e7ce      	b.n	800c822 <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c884:	2305      	movs	r3, #5
 800c886:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 800c88a:	e799      	b.n	800c7c0 <create_name+0x138>
	if (ni == 8) b <<= 2;
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	b2db      	uxtb	r3, r3
 800c892:	9301      	str	r3, [sp, #4]
 800c894:	e797      	b.n	800c7c6 <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c896:	f049 0910 	orr.w	r9, r9, #16
 800c89a:	e7a7      	b.n	800c7ec <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c89c:	f049 0908 	orr.w	r9, r9, #8
 800c8a0:	e7a6      	b.n	800c7f0 <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c8a2:	2006      	movs	r0, #6
 800c8a4:	e7a7      	b.n	800c7f6 <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c8a6:	2006      	movs	r0, #6
 800c8a8:	e7a5      	b.n	800c7f6 <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c8aa:	2006      	movs	r0, #6
 800c8ac:	e7a3      	b.n	800c7f6 <create_name+0x16e>
 800c8ae:	bf00      	nop
 800c8b0:	0801853c 	.word	0x0801853c
 800c8b4:	08018550 	.word	0x08018550
 800c8b8:	08018548 	.word	0x08018548

0800c8bc <get_fileinfo>:
{
 800c8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c8c0:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c8c8:	69c3      	ldr	r3, [r0, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d06b      	beq.n	800c9a6 <get_fileinfo+0xea>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c8d2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c8d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8d8:	d016      	beq.n	800c908 <get_fileinfo+0x4c>
			i = j = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c8de:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800c8e2:	1c5f      	adds	r7, r3, #1
 800c8e4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800c8e8:	b158      	cbz	r0, 800c902 <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	f000 fe9c 	bl	800d628 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c8f0:	b130      	cbz	r0, 800c900 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c8f2:	2dfe      	cmp	r5, #254	; 0xfe
 800c8f4:	d80c      	bhi.n	800c910 <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
 800c8f6:	1962      	adds	r2, r4, r5
 800c8f8:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c8fa:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	e7ee      	b.n	800c8de <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c900:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c902:	4425      	add	r5, r4
 800c904:	2300      	movs	r3, #0
 800c906:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c908:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
 800c90a:	2200      	movs	r2, #0
 800c90c:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800c90e:	e012      	b.n	800c936 <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c910:	2500      	movs	r5, #0
 800c912:	e7f6      	b.n	800c902 <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c914:	23e5      	movs	r3, #229	; 0xe5
 800c916:	e017      	b.n	800c948 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
 800c918:	b915      	cbnz	r5, 800c920 <get_fileinfo+0x64>
 800c91a:	18a0      	adds	r0, r4, r2
 800c91c:	272e      	movs	r7, #46	; 0x2e
 800c91e:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
 800c920:	18a0      	adds	r0, r4, r2
 800c922:	272e      	movs	r7, #46	; 0x2e
 800c924:	7247      	strb	r7, [r0, #9]
 800c926:	3201      	adds	r2, #1
 800c928:	e010      	b.n	800c94c <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c92a:	2010      	movs	r0, #16
 800c92c:	e01c      	b.n	800c968 <get_fileinfo+0xac>
			fno->fname[j] = c;
 800c92e:	18a0      	adds	r0, r4, r2
 800c930:	7583      	strb	r3, [r0, #22]
		j++;
 800c932:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c934:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800c936:	2b0a      	cmp	r3, #10
 800c938:	d81b      	bhi.n	800c972 <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
 800c93a:	6a30      	ldr	r0, [r6, #32]
 800c93c:	1c59      	adds	r1, r3, #1
 800c93e:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c940:	2b20      	cmp	r3, #32
 800c942:	d0f7      	beq.n	800c934 <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c944:	2b05      	cmp	r3, #5
 800c946:	d0e5      	beq.n	800c914 <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
 800c948:	2909      	cmp	r1, #9
 800c94a:	d0e5      	beq.n	800c918 <get_fileinfo+0x5c>
		fno->altname[j] = c;
 800c94c:	18a0      	adds	r0, r4, r2
 800c94e:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 800c950:	2d00      	cmp	r5, #0
 800c952:	d1ee      	bne.n	800c932 <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c954:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800c958:	b2c0      	uxtb	r0, r0
 800c95a:	2819      	cmp	r0, #25
 800c95c:	d8e7      	bhi.n	800c92e <get_fileinfo+0x72>
 800c95e:	6a30      	ldr	r0, [r6, #32]
 800c960:	7b07      	ldrb	r7, [r0, #12]
 800c962:	2908      	cmp	r1, #8
 800c964:	d8e1      	bhi.n	800c92a <get_fileinfo+0x6e>
 800c966:	2008      	movs	r0, #8
 800c968:	4207      	tst	r7, r0
 800c96a:	d0e0      	beq.n	800c92e <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
 800c96c:	3320      	adds	r3, #32
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	e7dd      	b.n	800c92e <get_fileinfo+0x72>
	if (!lfv) {
 800c972:	b935      	cbnz	r5, 800c982 <get_fileinfo+0xc6>
		fno->fname[j] = 0;
 800c974:	18a3      	adds	r3, r4, r2
 800c976:	2100      	movs	r1, #0
 800c978:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c97a:	6a33      	ldr	r3, [r6, #32]
 800c97c:	7b1b      	ldrb	r3, [r3, #12]
 800c97e:	b903      	cbnz	r3, 800c982 <get_fileinfo+0xc6>
 800c980:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c982:	4422      	add	r2, r4
 800c984:	2300      	movs	r3, #0
 800c986:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c988:	6a33      	ldr	r3, [r6, #32]
 800c98a:	7adb      	ldrb	r3, [r3, #11]
 800c98c:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c98e:	6a30      	ldr	r0, [r6, #32]
 800c990:	301c      	adds	r0, #28
 800c992:	f7fe fe8a 	bl	800b6aa <ld_dword>
 800c996:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c998:	6a30      	ldr	r0, [r6, #32]
 800c99a:	3016      	adds	r0, #22
 800c99c:	f7fe fe85 	bl	800b6aa <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c9a0:	80e0      	strh	r0, [r4, #6]
 800c9a2:	0c00      	lsrs	r0, r0, #16
 800c9a4:	80a0      	strh	r0, [r4, #4]
}
 800c9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c9ac <cmp_lfn>:
{
 800c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	4681      	mov	r9, r0
 800c9b2:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c9b4:	f101 001a 	add.w	r0, r1, #26
 800c9b8:	f7fe fe72 	bl	800b6a0 <ld_word>
 800c9bc:	bbc8      	cbnz	r0, 800ca32 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c9be:	783e      	ldrb	r6, [r7, #0]
 800c9c0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800c9c4:	3e01      	subs	r6, #1
 800c9c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800c9ca:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9ce:	f04f 0801 	mov.w	r8, #1
 800c9d2:	2500      	movs	r5, #0
 800c9d4:	e006      	b.n	800c9e4 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	e02c      	b.n	800ca34 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c9da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	d12a      	bne.n	800ca38 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9e2:	3501      	adds	r5, #1
 800c9e4:	2d0c      	cmp	r5, #12
 800c9e6:	d818      	bhi.n	800ca1a <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c9e8:	4b17      	ldr	r3, [pc, #92]	; (800ca48 <cmp_lfn+0x9c>)
 800c9ea:	5d58      	ldrb	r0, [r3, r5]
 800c9ec:	4438      	add	r0, r7
 800c9ee:	f7fe fe57 	bl	800b6a0 <ld_word>
 800c9f2:	4604      	mov	r4, r0
		if (wc) {
 800c9f4:	f1b8 0f00 	cmp.w	r8, #0
 800c9f8:	d0ef      	beq.n	800c9da <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c9fa:	2efe      	cmp	r6, #254	; 0xfe
 800c9fc:	d8eb      	bhi.n	800c9d6 <cmp_lfn+0x2a>
 800c9fe:	f000 fe31 	bl	800d664 <ff_wtoupper>
 800ca02:	4680      	mov	r8, r0
 800ca04:	f106 0a01 	add.w	sl, r6, #1
 800ca08:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800ca0c:	f000 fe2a 	bl	800d664 <ff_wtoupper>
 800ca10:	4580      	cmp	r8, r0
 800ca12:	d1e0      	bne.n	800c9d6 <cmp_lfn+0x2a>
			wc = uc;
 800ca14:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ca16:	4656      	mov	r6, sl
 800ca18:	e7e3      	b.n	800c9e2 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ca1a:	783b      	ldrb	r3, [r7, #0]
 800ca1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ca20:	d00c      	beq.n	800ca3c <cmp_lfn+0x90>
 800ca22:	f1b8 0f00 	cmp.w	r8, #0
 800ca26:	d00b      	beq.n	800ca40 <cmp_lfn+0x94>
 800ca28:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800ca2c:	b953      	cbnz	r3, 800ca44 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800ca2e:	2001      	movs	r0, #1
 800ca30:	e000      	b.n	800ca34 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ca32:	2000      	movs	r0, #0
}
 800ca34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca38:	2000      	movs	r0, #0
 800ca3a:	e7fb      	b.n	800ca34 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800ca3c:	2001      	movs	r0, #1
 800ca3e:	e7f9      	b.n	800ca34 <cmp_lfn+0x88>
 800ca40:	2001      	movs	r0, #1
 800ca42:	e7f7      	b.n	800ca34 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ca44:	2000      	movs	r0, #0
 800ca46:	e7f5      	b.n	800ca34 <cmp_lfn+0x88>
 800ca48:	080185d0 	.word	0x080185d0

0800ca4c <dir_find>:
{
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800ca52:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca56:	2100      	movs	r1, #0
 800ca58:	f7ff fc0f 	bl	800c27a <dir_sdi>
	if (res != FR_OK) return res;
 800ca5c:	4606      	mov	r6, r0
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d164      	bne.n	800cb2c <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca66:	6323      	str	r3, [r4, #48]	; 0x30
 800ca68:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800ca6c:	464f      	mov	r7, r9
 800ca6e:	e00a      	b.n	800ca86 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca74:	6323      	str	r3, [r4, #48]	; 0x30
 800ca76:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800ca78:	2100      	movs	r1, #0
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff fcfd 	bl	800c47a <dir_next>
	} while (res == FR_OK);
 800ca80:	4606      	mov	r6, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d152      	bne.n	800cb2c <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800ca86:	69e1      	ldr	r1, [r4, #28]
 800ca88:	4640      	mov	r0, r8
 800ca8a:	f7ff f92b 	bl	800bce4 <move_window>
		if (res != FR_OK) break;
 800ca8e:	4606      	mov	r6, r0
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d14b      	bne.n	800cb2c <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 800ca94:	6a25      	ldr	r5, [r4, #32]
 800ca96:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d046      	beq.n	800cb2a <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ca9c:	7ae9      	ldrb	r1, [r5, #11]
 800ca9e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800caa2:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800caa4:	2be5      	cmp	r3, #229	; 0xe5
 800caa6:	d0e3      	beq.n	800ca70 <dir_find+0x24>
 800caa8:	f011 0f08 	tst.w	r1, #8
 800caac:	d001      	beq.n	800cab2 <dir_find+0x66>
 800caae:	2a0f      	cmp	r2, #15
 800cab0:	d1de      	bne.n	800ca70 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cab2:	2a0f      	cmp	r2, #15
 800cab4:	d016      	beq.n	800cae4 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cab6:	b927      	cbnz	r7, 800cac2 <dir_find+0x76>
 800cab8:	4628      	mov	r0, r5
 800caba:	f7ff f828 	bl	800bb0e <sum_sfn>
 800cabe:	4548      	cmp	r0, r9
 800cac0:	d034      	beq.n	800cb2c <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cac2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800cac6:	f013 0f01 	tst.w	r3, #1
 800caca:	d106      	bne.n	800cada <dir_find+0x8e>
 800cacc:	220b      	movs	r2, #11
 800cace:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800cad2:	4628      	mov	r0, r5
 800cad4:	f7fe fe11 	bl	800b6fa <mem_cmp>
 800cad8:	b340      	cbz	r0, 800cb2c <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cade:	6323      	str	r3, [r4, #48]	; 0x30
 800cae0:	27ff      	movs	r7, #255	; 0xff
 800cae2:	e7c9      	b.n	800ca78 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cae4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800cae8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800caec:	d1c4      	bne.n	800ca78 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800caee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800caf2:	d006      	beq.n	800cb02 <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 800caf4:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800caf8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cafc:	6962      	ldr	r2, [r4, #20]
 800cafe:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cb00:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cb02:	42bb      	cmp	r3, r7
 800cb04:	d001      	beq.n	800cb0a <dir_find+0xbe>
 800cb06:	27ff      	movs	r7, #255	; 0xff
 800cb08:	e7b6      	b.n	800ca78 <dir_find+0x2c>
 800cb0a:	7b6b      	ldrb	r3, [r5, #13]
 800cb0c:	454b      	cmp	r3, r9
 800cb0e:	d001      	beq.n	800cb14 <dir_find+0xc8>
 800cb10:	27ff      	movs	r7, #255	; 0xff
 800cb12:	e7b1      	b.n	800ca78 <dir_find+0x2c>
 800cb14:	4629      	mov	r1, r5
 800cb16:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800cb1a:	f7ff ff47 	bl	800c9ac <cmp_lfn>
 800cb1e:	b110      	cbz	r0, 800cb26 <dir_find+0xda>
 800cb20:	3f01      	subs	r7, #1
 800cb22:	b2ff      	uxtb	r7, r7
 800cb24:	e7a8      	b.n	800ca78 <dir_find+0x2c>
 800cb26:	27ff      	movs	r7, #255	; 0xff
 800cb28:	e7a6      	b.n	800ca78 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb2a:	2604      	movs	r6, #4
}
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cb32 <follow_path>:
{
 800cb32:	b530      	push	{r4, r5, lr}
 800cb34:	b083      	sub	sp, #12
 800cb36:	4604      	mov	r4, r0
 800cb38:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800cb3a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cb3c:	e001      	b.n	800cb42 <follow_path+0x10>
 800cb3e:	3301      	adds	r3, #1
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	781a      	ldrb	r2, [r3, #0]
 800cb46:	2a2f      	cmp	r2, #47	; 0x2f
 800cb48:	d0f9      	beq.n	800cb3e <follow_path+0xc>
 800cb4a:	2a5c      	cmp	r2, #92	; 0x5c
 800cb4c:	d0f7      	beq.n	800cb3e <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800cb4e:	2200      	movs	r2, #0
 800cb50:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b1f      	cmp	r3, #31
 800cb56:	d91e      	bls.n	800cb96 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb58:	a901      	add	r1, sp, #4
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f7ff fd94 	bl	800c688 <create_name>
			if (res != FR_OK) break;
 800cb60:	4603      	mov	r3, r0
 800cb62:	bb00      	cbnz	r0, 800cba6 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb64:	4620      	mov	r0, r4
 800cb66:	f7ff ff71 	bl	800ca4c <dir_find>
			ns = dp->fn[NSFLAG];
 800cb6a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800cb6e:	4603      	mov	r3, r0
 800cb70:	b9e0      	cbnz	r0, 800cbac <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb72:	f012 0f04 	tst.w	r2, #4
 800cb76:	d116      	bne.n	800cba6 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cb78:	79a3      	ldrb	r3, [r4, #6]
 800cb7a:	f013 0f10 	tst.w	r3, #16
 800cb7e:	d01c      	beq.n	800cbba <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cb80:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800cb84:	6963      	ldr	r3, [r4, #20]
 800cb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8a:	4419      	add	r1, r3
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f7fe fec4 	bl	800b91a <ld_clust>
 800cb92:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb94:	e7e0      	b.n	800cb58 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800cb96:	2380      	movs	r3, #128	; 0x80
 800cb98:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cb9c:	4611      	mov	r1, r2
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff fb6b 	bl	800c27a <dir_sdi>
 800cba4:	4603      	mov	r3, r0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	b003      	add	sp, #12
 800cbaa:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cbac:	2804      	cmp	r0, #4
 800cbae:	d1fa      	bne.n	800cba6 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cbb0:	f012 0f04 	tst.w	r2, #4
 800cbb4:	d1f7      	bne.n	800cba6 <follow_path+0x74>
 800cbb6:	2305      	movs	r3, #5
 800cbb8:	e7f5      	b.n	800cba6 <follow_path+0x74>
				res = FR_NO_PATH; break;
 800cbba:	2305      	movs	r3, #5
 800cbbc:	e7f3      	b.n	800cba6 <follow_path+0x74>
	...

0800cbc0 <dir_register>:
{
 800cbc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800cbc6:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbc8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800cbcc:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800cbd0:	f040 808e 	bne.w	800ccf0 <dir_register+0x130>
 800cbd4:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbd6:	2400      	movs	r4, #0
 800cbd8:	e000      	b.n	800cbdc <dir_register+0x1c>
 800cbda:	3401      	adds	r4, #1
 800cbdc:	68f3      	ldr	r3, [r6, #12]
 800cbde:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1f9      	bne.n	800cbda <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800cbe6:	f107 0824 	add.w	r8, r7, #36	; 0x24
 800cbea:	220c      	movs	r2, #12
 800cbec:	4641      	mov	r1, r8
 800cbee:	a801      	add	r0, sp, #4
 800cbf0:	f7fe fd74 	bl	800b6dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cbf4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cbf8:	f013 0f01 	tst.w	r3, #1
 800cbfc:	d01c      	beq.n	800cc38 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cbfe:	2340      	movs	r3, #64	; 0x40
 800cc00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cc04:	2501      	movs	r5, #1
 800cc06:	e000      	b.n	800cc0a <dir_register+0x4a>
 800cc08:	3501      	adds	r5, #1
 800cc0a:	2d63      	cmp	r5, #99	; 0x63
 800cc0c:	d80b      	bhi.n	800cc26 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc0e:	462b      	mov	r3, r5
 800cc10:	68f2      	ldr	r2, [r6, #12]
 800cc12:	a901      	add	r1, sp, #4
 800cc14:	4640      	mov	r0, r8
 800cc16:	f7fe ff25 	bl	800ba64 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f7ff ff16 	bl	800ca4c <dir_find>
			if (res != FR_OK) break;
 800cc20:	4681      	mov	r9, r0
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d0f0      	beq.n	800cc08 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc26:	2d64      	cmp	r5, #100	; 0x64
 800cc28:	d065      	beq.n	800ccf6 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc2a:	f1b9 0f04 	cmp.w	r9, #4
 800cc2e:	d11b      	bne.n	800cc68 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc30:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cc34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc38:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cc3c:	f013 0f02 	tst.w	r3, #2
 800cc40:	d006      	beq.n	800cc50 <dir_register+0x90>
 800cc42:	340c      	adds	r4, #12
 800cc44:	4b2d      	ldr	r3, [pc, #180]	; (800ccfc <dir_register+0x13c>)
 800cc46:	fba3 3404 	umull	r3, r4, r3, r4
 800cc4a:	08a4      	lsrs	r4, r4, #2
 800cc4c:	3401      	adds	r4, #1
 800cc4e:	e000      	b.n	800cc52 <dir_register+0x92>
 800cc50:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cc52:	4621      	mov	r1, r4
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7ff fc94 	bl	800c582 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cc5a:	4681      	mov	r9, r0
 800cc5c:	b908      	cbnz	r0, 800cc62 <dir_register+0xa2>
 800cc5e:	3c01      	subs	r4, #1
 800cc60:	d106      	bne.n	800cc70 <dir_register+0xb0>
	if (res == FR_OK) {
 800cc62:	f1b9 0f00 	cmp.w	r9, #0
 800cc66:	d029      	beq.n	800ccbc <dir_register+0xfc>
}
 800cc68:	4648      	mov	r0, r9
 800cc6a:	b005      	add	sp, #20
 800cc6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cc70:	6979      	ldr	r1, [r7, #20]
 800cc72:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800cc76:	4638      	mov	r0, r7
 800cc78:	f7ff faff 	bl	800c27a <dir_sdi>
		if (res == FR_OK) {
 800cc7c:	4681      	mov	r9, r0
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d1ef      	bne.n	800cc62 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cc82:	4640      	mov	r0, r8
 800cc84:	f7fe ff43 	bl	800bb0e <sum_sfn>
 800cc88:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 800cc8a:	69f9      	ldr	r1, [r7, #28]
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f7ff f829 	bl	800bce4 <move_window>
				if (res != FR_OK) break;
 800cc92:	4681      	mov	r9, r0
 800cc94:	2800      	cmp	r0, #0
 800cc96:	d1e4      	bne.n	800cc62 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cc98:	462b      	mov	r3, r5
 800cc9a:	b2e2      	uxtb	r2, r4
 800cc9c:	6a39      	ldr	r1, [r7, #32]
 800cc9e:	68f0      	ldr	r0, [r6, #12]
 800cca0:	f7fe fea4 	bl	800b9ec <put_lfn>
				fs->wflag = 1;
 800cca4:	2301      	movs	r3, #1
 800cca6:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cca8:	2100      	movs	r1, #0
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f7ff fbe5 	bl	800c47a <dir_next>
			} while (res == FR_OK && --nent);
 800ccb0:	4681      	mov	r9, r0
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	d1d5      	bne.n	800cc62 <dir_register+0xa2>
 800ccb6:	3c01      	subs	r4, #1
 800ccb8:	d1e7      	bne.n	800cc8a <dir_register+0xca>
 800ccba:	e7d2      	b.n	800cc62 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 800ccbc:	69f9      	ldr	r1, [r7, #28]
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7ff f810 	bl	800bce4 <move_window>
		if (res == FR_OK) {
 800ccc4:	4681      	mov	r9, r0
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d1ce      	bne.n	800cc68 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ccca:	2220      	movs	r2, #32
 800cccc:	2100      	movs	r1, #0
 800ccce:	6a38      	ldr	r0, [r7, #32]
 800ccd0:	f7fe fd0e 	bl	800b6f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ccd4:	220b      	movs	r2, #11
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	6a38      	ldr	r0, [r7, #32]
 800ccda:	f7fe fcff 	bl	800b6dc <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ccde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cce2:	6a3a      	ldr	r2, [r7, #32]
 800cce4:	f003 0318 	and.w	r3, r3, #24
 800cce8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800ccea:	2301      	movs	r3, #1
 800ccec:	70f3      	strb	r3, [r6, #3]
 800ccee:	e7bb      	b.n	800cc68 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ccf0:	f04f 0906 	mov.w	r9, #6
 800ccf4:	e7b8      	b.n	800cc68 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ccf6:	f04f 0907 	mov.w	r9, #7
 800ccfa:	e7b5      	b.n	800cc68 <dir_register+0xa8>
 800ccfc:	4ec4ec4f 	.word	0x4ec4ec4f

0800cd00 <sync_fs>:
{
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	4604      	mov	r4, r0
	res = sync_window(fs);
 800cd04:	f7fe ffc4 	bl	800bc90 <sync_window>
	if (res == FR_OK) {
 800cd08:	4605      	mov	r5, r0
 800cd0a:	b948      	cbnz	r0, 800cd20 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd0c:	7823      	ldrb	r3, [r4, #0]
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d008      	beq.n	800cd24 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cd12:	2200      	movs	r2, #0
 800cd14:	4611      	mov	r1, r2
 800cd16:	7860      	ldrb	r0, [r4, #1]
 800cd18:	f7fe fcb6 	bl	800b688 <disk_ioctl>
 800cd1c:	b100      	cbz	r0, 800cd20 <sync_fs+0x20>
 800cd1e:	2501      	movs	r5, #1
}
 800cd20:	4628      	mov	r0, r5
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cd24:	7923      	ldrb	r3, [r4, #4]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d1f3      	bne.n	800cd12 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800cd2a:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800cd2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd32:	2100      	movs	r1, #0
 800cd34:	4630      	mov	r0, r6
 800cd36:	f7fe fcdb 	bl	800b6f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd3a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cd3e:	f204 2032 	addw	r0, r4, #562	; 0x232
 800cd42:	f7fe fcbd 	bl	800b6c0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cd46:	490f      	ldr	r1, [pc, #60]	; (800cd84 <sync_fs+0x84>)
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7fe fcbd 	bl	800b6c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cd4e:	490e      	ldr	r1, [pc, #56]	; (800cd88 <sync_fs+0x88>)
 800cd50:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800cd54:	f7fe fcb8 	bl	800b6c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cd58:	6961      	ldr	r1, [r4, #20]
 800cd5a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800cd5e:	f7fe fcb3 	bl	800b6c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cd62:	6921      	ldr	r1, [r4, #16]
 800cd64:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800cd68:	f7fe fcae 	bl	800b6c8 <st_dword>
			fs->winsect = fs->volbase + 1;
 800cd6c:	6a22      	ldr	r2, [r4, #32]
 800cd6e:	3201      	adds	r2, #1
 800cd70:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cd72:	2301      	movs	r3, #1
 800cd74:	4631      	mov	r1, r6
 800cd76:	7860      	ldrb	r0, [r4, #1]
 800cd78:	f7fe fc7a 	bl	800b670 <disk_write>
			fs->fsi_flag = 0;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	7123      	strb	r3, [r4, #4]
 800cd80:	e7c7      	b.n	800cd12 <sync_fs+0x12>
 800cd82:	bf00      	nop
 800cd84:	41615252 	.word	0x41615252
 800cd88:	61417272 	.word	0x61417272

0800cd8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	9001      	str	r0, [sp, #4]
 800cd92:	9100      	str	r1, [sp, #0]
 800cd94:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd96:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd98:	a803      	add	r0, sp, #12
 800cd9a:	f7fe ff32 	bl	800bc02 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd9e:	1e04      	subs	r4, r0, #0
 800cda0:	db20      	blt.n	800cde4 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cda2:	4b11      	ldr	r3, [pc, #68]	; (800cde8 <f_mount+0x5c>)
 800cda4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800cda8:	b125      	cbz	r5, 800cdb4 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f7fe fd7a 	bl	800b8a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800cdb4:	9b01      	ldr	r3, [sp, #4]
 800cdb6:	b10b      	cbz	r3, 800cdbc <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 800cdb8:	2200      	movs	r2, #0
 800cdba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cdbc:	9b01      	ldr	r3, [sp, #4]
 800cdbe:	4a0a      	ldr	r2, [pc, #40]	; (800cde8 <f_mount+0x5c>)
 800cdc0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cdc4:	1e72      	subs	r2, r6, #1
 800cdc6:	bf18      	it	ne
 800cdc8:	2201      	movne	r2, #1
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	bf08      	it	eq
 800cdce:	f042 0201 	orreq.w	r2, r2, #1
 800cdd2:	b112      	cbz	r2, 800cdda <f_mount+0x4e>
 800cdd4:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800cdd6:	b004      	add	sp, #16
 800cdd8:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cdda:	a901      	add	r1, sp, #4
 800cddc:	4668      	mov	r0, sp
 800cdde:	f7fe ffd9 	bl	800bd94 <find_volume>
	LEAVE_FF(fs, res);
 800cde2:	e7f8      	b.n	800cdd6 <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cde4:	200b      	movs	r0, #11
 800cde6:	e7f6      	b.n	800cdd6 <f_mount+0x4a>
 800cde8:	2001d5b4 	.word	0x2001d5b4

0800cdec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cdec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdf0:	b093      	sub	sp, #76	; 0x4c
 800cdf2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f000 810d 	beq.w	800d014 <f_open+0x228>
 800cdfa:	4615      	mov	r5, r2
 800cdfc:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cdfe:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800ce02:	463a      	mov	r2, r7
 800ce04:	a903      	add	r1, sp, #12
 800ce06:	a801      	add	r0, sp, #4
 800ce08:	f7fe ffc4 	bl	800bd94 <find_volume>
	if (res == FR_OK) {
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	b130      	cbz	r0, 800ce1e <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ce10:	b10c      	cbz	r4, 800ce16 <f_open+0x2a>
 800ce12:	2300      	movs	r3, #0
 800ce14:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800ce16:	4620      	mov	r0, r4
 800ce18:	b013      	add	sp, #76	; 0x4c
 800ce1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce22:	9901      	ldr	r1, [sp, #4]
 800ce24:	a804      	add	r0, sp, #16
 800ce26:	f7ff fe84 	bl	800cb32 <follow_path>
		if (res == FR_OK) {
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	b960      	cbnz	r0, 800ce48 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce2e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	db50      	blt.n	800ced8 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce36:	f037 0301 	bics.w	r3, r7, #1
 800ce3a:	bf14      	ite	ne
 800ce3c:	2101      	movne	r1, #1
 800ce3e:	2100      	moveq	r1, #0
 800ce40:	a804      	add	r0, sp, #16
 800ce42:	f7fe fc6f 	bl	800b724 <chk_lock>
 800ce46:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce48:	f015 0f1c 	tst.w	r5, #28
 800ce4c:	d05a      	beq.n	800cf04 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800ce4e:	2c00      	cmp	r4, #0
 800ce50:	d04e      	beq.n	800cef0 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce52:	2c04      	cmp	r4, #4
 800ce54:	d042      	beq.n	800cedc <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce56:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	d161      	bne.n	800cf22 <f_open+0x136>
 800ce5e:	f017 0f08 	tst.w	r7, #8
 800ce62:	d05e      	beq.n	800cf22 <f_open+0x136>
				dw = GET_FATTIME();
 800ce64:	f7fe fb06 	bl	800b474 <get_fattime>
 800ce68:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ce6e:	300e      	adds	r0, #14
 800ce70:	f7fe fc2a 	bl	800b6c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce74:	4629      	mov	r1, r5
 800ce76:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ce78:	3016      	adds	r0, #22
 800ce7a:	f7fe fc25 	bl	800b6c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce80:	2220      	movs	r2, #32
 800ce82:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce84:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce88:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ce8c:	4649      	mov	r1, r9
 800ce8e:	4640      	mov	r0, r8
 800ce90:	f7fe fd43 	bl	800b91a <ld_clust>
 800ce94:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ce96:	2200      	movs	r2, #0
 800ce98:	4649      	mov	r1, r9
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7fe fd50 	bl	800b940 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cea0:	2100      	movs	r1, #0
 800cea2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cea4:	301c      	adds	r0, #28
 800cea6:	f7fe fc0f 	bl	800b6c8 <st_dword>
					fs->wflag = 1;
 800ceaa:	9b03      	ldr	r3, [sp, #12]
 800ceac:	2201      	movs	r2, #1
 800ceae:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800ceb0:	b3bd      	cbz	r5, 800cf22 <f_open+0x136>
						dw = fs->winsect;
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4629      	mov	r1, r5
 800cebc:	a804      	add	r0, sp, #16
 800cebe:	f7ff fa9d 	bl	800c3fc <remove_chain>
						if (res == FR_OK) {
 800cec2:	4604      	mov	r4, r0
 800cec4:	bb68      	cbnz	r0, 800cf22 <f_open+0x136>
							res = move_window(fs, dw);
 800cec6:	4641      	mov	r1, r8
 800cec8:	9803      	ldr	r0, [sp, #12]
 800ceca:	f7fe ff0b 	bl	800bce4 <move_window>
 800cece:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ced0:	3d01      	subs	r5, #1
 800ced2:	9b03      	ldr	r3, [sp, #12]
 800ced4:	611d      	str	r5, [r3, #16]
 800ced6:	e024      	b.n	800cf22 <f_open+0x136>
				res = FR_INVALID_NAME;
 800ced8:	2406      	movs	r4, #6
 800ceda:	e7b5      	b.n	800ce48 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cedc:	f7fe fc60 	bl	800b7a0 <enq_lock>
 800cee0:	b908      	cbnz	r0, 800cee6 <f_open+0xfa>
 800cee2:	2412      	movs	r4, #18
 800cee4:	e7b7      	b.n	800ce56 <f_open+0x6a>
 800cee6:	a804      	add	r0, sp, #16
 800cee8:	f7ff fe6a 	bl	800cbc0 <dir_register>
 800ceec:	4604      	mov	r4, r0
 800ceee:	e7b2      	b.n	800ce56 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cef0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cef4:	f013 0f11 	tst.w	r3, #17
 800cef8:	d112      	bne.n	800cf20 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cefa:	f015 0f04 	tst.w	r5, #4
 800cefe:	d0ac      	beq.n	800ce5a <f_open+0x6e>
 800cf00:	2408      	movs	r4, #8
 800cf02:	e00e      	b.n	800cf22 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 800cf04:	b96c      	cbnz	r4, 800cf22 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf06:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cf0a:	f013 0f10 	tst.w	r3, #16
 800cf0e:	d14c      	bne.n	800cfaa <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf10:	f015 0f02 	tst.w	r5, #2
 800cf14:	d005      	beq.n	800cf22 <f_open+0x136>
 800cf16:	f013 0f01 	tst.w	r3, #1
 800cf1a:	d002      	beq.n	800cf22 <f_open+0x136>
						res = FR_DENIED;
 800cf1c:	2407      	movs	r4, #7
 800cf1e:	e016      	b.n	800cf4e <f_open+0x162>
					res = FR_DENIED;
 800cf20:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800cf22:	b9a4      	cbnz	r4, 800cf4e <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf24:	f017 0f08 	tst.w	r7, #8
 800cf28:	d001      	beq.n	800cf2e <f_open+0x142>
				mode |= FA_MODIFIED;
 800cf2a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf32:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cf34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf36:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf38:	f037 0301 	bics.w	r3, r7, #1
 800cf3c:	bf14      	ite	ne
 800cf3e:	2101      	movne	r1, #1
 800cf40:	2100      	moveq	r1, #0
 800cf42:	a804      	add	r0, sp, #16
 800cf44:	f7fe fc3c 	bl	800b7c0 <inc_lock>
 800cf48:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d060      	beq.n	800d010 <f_open+0x224>
		if (res == FR_OK) {
 800cf4e:	2c00      	cmp	r4, #0
 800cf50:	f47f af5e 	bne.w	800ce10 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf54:	9d03      	ldr	r5, [sp, #12]
 800cf56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f7fe fcdc 	bl	800b91a <ld_clust>
 800cf62:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf64:	f108 001c 	add.w	r0, r8, #28
 800cf68:	f7fe fb9f 	bl	800b6aa <ld_dword>
 800cf6c:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf6e:	2100      	movs	r1, #0
 800cf70:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf72:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800cf74:	88eb      	ldrh	r3, [r5, #6]
 800cf76:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf78:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800cf7a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf7c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cf7e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cf80:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800cf84:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf88:	4640      	mov	r0, r8
 800cf8a:	f7fe fbb1 	bl	800b6f0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cf8e:	f017 0f20 	tst.w	r7, #32
 800cf92:	f43f af3d 	beq.w	800ce10 <f_open+0x24>
 800cf96:	68f5      	ldr	r5, [r6, #12]
 800cf98:	2d00      	cmp	r5, #0
 800cf9a:	f43f af39 	beq.w	800ce10 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cf9e:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cfa0:	9b03      	ldr	r3, [sp, #12]
 800cfa2:	895f      	ldrh	r7, [r3, #10]
 800cfa4:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cfa6:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfa8:	e005      	b.n	800cfb6 <f_open+0x1ca>
					res = FR_NO_FILE;
 800cfaa:	2404      	movs	r4, #4
 800cfac:	e7cf      	b.n	800cf4e <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cfae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800cfb2:	d00e      	beq.n	800cfd2 <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfb4:	1bed      	subs	r5, r5, r7
 800cfb6:	42bd      	cmp	r5, r7
 800cfb8:	bf94      	ite	ls
 800cfba:	2300      	movls	r3, #0
 800cfbc:	2301      	movhi	r3, #1
 800cfbe:	b954      	cbnz	r4, 800cfd6 <f_open+0x1ea>
 800cfc0:	b14b      	cbz	r3, 800cfd6 <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff f8f1 	bl	800c1aa <get_fat>
 800cfc8:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	d8ef      	bhi.n	800cfae <f_open+0x1c2>
 800cfce:	2402      	movs	r4, #2
 800cfd0:	e7ed      	b.n	800cfae <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cfd2:	2401      	movs	r4, #1
 800cfd4:	e7ee      	b.n	800cfb4 <f_open+0x1c8>
				fp->clust = clst;
 800cfd6:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cfd8:	2c00      	cmp	r4, #0
 800cfda:	f47f af19 	bne.w	800ce10 <f_open+0x24>
 800cfde:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f43f af14 	beq.w	800ce10 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cfe8:	9f03      	ldr	r7, [sp, #12]
 800cfea:	4638      	mov	r0, r7
 800cfec:	f7fe fc78 	bl	800b8e0 <clust2sect>
 800cff0:	b908      	cbnz	r0, 800cff6 <f_open+0x20a>
						res = FR_INT_ERR;
 800cff2:	2402      	movs	r4, #2
 800cff4:	e70d      	b.n	800ce12 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cff6:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800cffa:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	4641      	mov	r1, r8
 800d000:	7878      	ldrb	r0, [r7, #1]
 800d002:	f7fe fb29 	bl	800b658 <disk_read>
 800d006:	2800      	cmp	r0, #0
 800d008:	f43f af02 	beq.w	800ce10 <f_open+0x24>
 800d00c:	2401      	movs	r4, #1
 800d00e:	e700      	b.n	800ce12 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d010:	2402      	movs	r4, #2
 800d012:	e6fd      	b.n	800ce10 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800d014:	2409      	movs	r4, #9
 800d016:	e6fe      	b.n	800ce16 <f_open+0x2a>

0800d018 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	b085      	sub	sp, #20
 800d01e:	4604      	mov	r4, r0
 800d020:	460e      	mov	r6, r1
 800d022:	4617      	mov	r7, r2
 800d024:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800d026:	2300      	movs	r3, #0
 800d028:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d02c:	a903      	add	r1, sp, #12
 800d02e:	f7fe fe0c 	bl	800bc4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d032:	9001      	str	r0, [sp, #4]
 800d034:	2800      	cmp	r0, #0
 800d036:	f040 80ae 	bne.w	800d196 <f_read+0x17e>
 800d03a:	7d63      	ldrb	r3, [r4, #21]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f040 80a9 	bne.w	800d196 <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d044:	7d23      	ldrb	r3, [r4, #20]
 800d046:	f013 0f01 	tst.w	r3, #1
 800d04a:	f000 80c3 	beq.w	800d1d4 <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 800d04e:	68e5      	ldr	r5, [r4, #12]
 800d050:	69a3      	ldr	r3, [r4, #24]
 800d052:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d054:	42bd      	cmp	r5, r7
 800d056:	d362      	bcc.n	800d11e <f_read+0x106>
 800d058:	463d      	mov	r5, r7
 800d05a:	e060      	b.n	800d11e <f_read+0x106>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d05c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d05e:	b11b      	cbz	r3, 800d068 <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d060:	4620      	mov	r0, r4
 800d062:	f7fe fc49 	bl	800b8f8 <clmt_clust>
 800d066:	e06a      	b.n	800d13e <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d068:	69e1      	ldr	r1, [r4, #28]
 800d06a:	4620      	mov	r0, r4
 800d06c:	f7ff f89d 	bl	800c1aa <get_fat>
 800d070:	e065      	b.n	800d13e <f_read+0x126>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d072:	f04f 0a02 	mov.w	sl, #2
 800d076:	f884 a015 	strb.w	sl, [r4, #21]
 800d07a:	f8cd a004 	str.w	sl, [sp, #4]
 800d07e:	e08a      	b.n	800d196 <f_read+0x17e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d080:	f04f 0a01 	mov.w	sl, #1
 800d084:	f884 a015 	strb.w	sl, [r4, #21]
 800d088:	f8cd a004 	str.w	sl, [sp, #4]
 800d08c:	e083      	b.n	800d196 <f_read+0x17e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d08e:	f04f 0a02 	mov.w	sl, #2
 800d092:	f884 a015 	strb.w	sl, [r4, #21]
 800d096:	f8cd a004 	str.w	sl, [sp, #4]
 800d09a:	e07c      	b.n	800d196 <f_read+0x17e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d09c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	db02      	blt.n	800d0aa <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d0a4:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800d0a8:	e02f      	b.n	800d10a <f_read+0xf2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d0aa:	6a20      	ldr	r0, [r4, #32]
 800d0ac:	eba0 0009 	sub.w	r0, r0, r9
 800d0b0:	4550      	cmp	r0, sl
 800d0b2:	d2f7      	bcs.n	800d0a4 <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d0b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d0bc:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 800d0c0:	f7fe fb0c 	bl	800b6dc <mem_cpy>
 800d0c4:	e7ee      	b.n	800d0a4 <f_read+0x8c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d0c6:	6a22      	ldr	r2, [r4, #32]
 800d0c8:	454a      	cmp	r2, r9
 800d0ca:	d00d      	beq.n	800d0e8 <f_read+0xd0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d0cc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	db64      	blt.n	800d19e <f_read+0x186>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	464a      	mov	r2, r9
 800d0d8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d0dc:	9803      	ldr	r0, [sp, #12]
 800d0de:	7840      	ldrb	r0, [r0, #1]
 800d0e0:	f7fe faba 	bl	800b658 <disk_read>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d16e      	bne.n	800d1c6 <f_read+0x1ae>
			}
#endif
			fp->sect = sect;
 800d0e8:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d0ec:	69a3      	ldr	r3, [r4, #24]
 800d0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0f2:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d0f6:	42bd      	cmp	r5, r7
 800d0f8:	d200      	bcs.n	800d0fc <f_read+0xe4>
 800d0fa:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d0fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d100:	463a      	mov	r2, r7
 800d102:	4419      	add	r1, r3
 800d104:	4630      	mov	r0, r6
 800d106:	f7fe fae9 	bl	800b6dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d10a:	443e      	add	r6, r7
 800d10c:	69a3      	ldr	r3, [r4, #24]
 800d10e:	443b      	add	r3, r7
 800d110:	61a3      	str	r3, [r4, #24]
 800d112:	f8d8 3000 	ldr.w	r3, [r8]
 800d116:	443b      	add	r3, r7
 800d118:	f8c8 3000 	str.w	r3, [r8]
 800d11c:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 800d11e:	2d00      	cmp	r5, #0
 800d120:	d039      	beq.n	800d196 <f_read+0x17e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d122:	69a1      	ldr	r1, [r4, #24]
 800d124:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d1df      	bne.n	800d0ec <f_read+0xd4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	895f      	ldrh	r7, [r3, #10]
 800d130:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800d132:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800d136:	d108      	bne.n	800d14a <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d138:	2900      	cmp	r1, #0
 800d13a:	d18f      	bne.n	800d05c <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d13c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d13e:	2801      	cmp	r0, #1
 800d140:	d997      	bls.n	800d072 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d142:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d146:	d09b      	beq.n	800d080 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
 800d148:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d14a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d14e:	69e1      	ldr	r1, [r4, #28]
 800d150:	4658      	mov	r0, fp
 800d152:	f7fe fbc5 	bl	800b8e0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d156:	4681      	mov	r9, r0
 800d158:	2800      	cmp	r0, #0
 800d15a:	d098      	beq.n	800d08e <f_read+0x76>
			sect += csect;
 800d15c:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d15e:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d162:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d166:	d3ae      	bcc.n	800d0c6 <f_read+0xae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d168:	eb07 030a 	add.w	r3, r7, sl
 800d16c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d170:	4293      	cmp	r3, r2
 800d172:	d901      	bls.n	800d178 <f_read+0x160>
					cc = fs->csize - csect;
 800d174:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d178:	4653      	mov	r3, sl
 800d17a:	464a      	mov	r2, r9
 800d17c:	4631      	mov	r1, r6
 800d17e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d182:	f7fe fa69 	bl	800b658 <disk_read>
 800d186:	2800      	cmp	r0, #0
 800d188:	d088      	beq.n	800d09c <f_read+0x84>
 800d18a:	f04f 0a01 	mov.w	sl, #1
 800d18e:	f884 a015 	strb.w	sl, [r4, #21]
 800d192:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800d196:	9801      	ldr	r0, [sp, #4]
 800d198:	b005      	add	sp, #20
 800d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d19e:	2301      	movs	r3, #1
 800d1a0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d1a4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d1a8:	f7fe fa62 	bl	800b670 <disk_write>
 800d1ac:	b920      	cbnz	r0, 800d1b8 <f_read+0x1a0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1ae:	7d23      	ldrb	r3, [r4, #20]
 800d1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1b4:	7523      	strb	r3, [r4, #20]
 800d1b6:	e78d      	b.n	800d0d4 <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1b8:	f04f 0a01 	mov.w	sl, #1
 800d1bc:	f884 a015 	strb.w	sl, [r4, #21]
 800d1c0:	f8cd a004 	str.w	sl, [sp, #4]
 800d1c4:	e7e7      	b.n	800d196 <f_read+0x17e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d1c6:	f04f 0a01 	mov.w	sl, #1
 800d1ca:	f884 a015 	strb.w	sl, [r4, #21]
 800d1ce:	f8cd a004 	str.w	sl, [sp, #4]
 800d1d2:	e7e0      	b.n	800d196 <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d1d4:	2307      	movs	r3, #7
 800d1d6:	9301      	str	r3, [sp, #4]
 800d1d8:	e7dd      	b.n	800d196 <f_read+0x17e>

0800d1da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d1da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460e      	mov	r6, r1
 800d1e4:	4615      	mov	r5, r2
 800d1e6:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d1ee:	a903      	add	r1, sp, #12
 800d1f0:	f7fe fd2b 	bl	800bc4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d1f4:	9001      	str	r0, [sp, #4]
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d149      	bne.n	800d28e <f_write+0xb4>
 800d1fa:	7d63      	ldrb	r3, [r4, #21]
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d145      	bne.n	800d28e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d202:	7d23      	ldrb	r3, [r4, #20]
 800d204:	f013 0f02 	tst.w	r3, #2
 800d208:	f000 80e2 	beq.w	800d3d0 <f_write+0x1f6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d20c:	69a3      	ldr	r3, [r4, #24]
 800d20e:	42eb      	cmn	r3, r5
 800d210:	f0c0 80b0 	bcc.w	800d374 <f_write+0x19a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d214:	43dd      	mvns	r5, r3
 800d216:	e0ad      	b.n	800d374 <f_write+0x19a>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d218:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d03b      	beq.n	800d296 <f_write+0xbc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d21e:	4620      	mov	r0, r4
 800d220:	f7fe fb6a 	bl	800b8f8 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d224:	2800      	cmp	r0, #0
 800d226:	f000 80ce 	beq.w	800d3c6 <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d22a:	2801      	cmp	r0, #1
 800d22c:	d038      	beq.n	800d2a0 <f_write+0xc6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d22e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d232:	d03c      	beq.n	800d2ae <f_write+0xd4>
				fp->clust = clst;			/* Update current cluster */
 800d234:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d236:	68a3      	ldr	r3, [r4, #8]
 800d238:	b903      	cbnz	r3, 800d23c <f_write+0x62>
 800d23a:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d23c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d240:	2b00      	cmp	r3, #0
 800d242:	db3b      	blt.n	800d2bc <f_write+0xe2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d244:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d248:	69e1      	ldr	r1, [r4, #28]
 800d24a:	4658      	mov	r0, fp
 800d24c:	f7fe fb48 	bl	800b8e0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d250:	4681      	mov	r9, r0
 800d252:	2800      	cmp	r0, #0
 800d254:	d047      	beq.n	800d2e6 <f_write+0x10c>
			sect += csect;
 800d256:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d258:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d25c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d260:	d35d      	bcc.n	800d31e <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d262:	eb07 030a 	add.w	r3, r7, sl
 800d266:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d901      	bls.n	800d272 <f_write+0x98>
					cc = fs->csize - csect;
 800d26e:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d272:	4653      	mov	r3, sl
 800d274:	464a      	mov	r2, r9
 800d276:	4631      	mov	r1, r6
 800d278:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d27c:	f7fe f9f8 	bl	800b670 <disk_write>
 800d280:	b3c0      	cbz	r0, 800d2f4 <f_write+0x11a>
 800d282:	f04f 0a01 	mov.w	sl, #1
 800d286:	f884 a015 	strb.w	sl, [r4, #21]
 800d28a:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800d28e:	9801      	ldr	r0, [sp, #4]
 800d290:	b005      	add	sp, #20
 800d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d296:	69e1      	ldr	r1, [r4, #28]
 800d298:	4620      	mov	r0, r4
 800d29a:	f7ff f844 	bl	800c326 <create_chain>
 800d29e:	e7c1      	b.n	800d224 <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d2a0:	f04f 0a02 	mov.w	sl, #2
 800d2a4:	f884 a015 	strb.w	sl, [r4, #21]
 800d2a8:	f8cd a004 	str.w	sl, [sp, #4]
 800d2ac:	e7ef      	b.n	800d28e <f_write+0xb4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d2ae:	f04f 0a01 	mov.w	sl, #1
 800d2b2:	f884 a015 	strb.w	sl, [r4, #21]
 800d2b6:	f8cd a004 	str.w	sl, [sp, #4]
 800d2ba:	e7e8      	b.n	800d28e <f_write+0xb4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2bc:	2301      	movs	r3, #1
 800d2be:	6a22      	ldr	r2, [r4, #32]
 800d2c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d2c4:	9803      	ldr	r0, [sp, #12]
 800d2c6:	7840      	ldrb	r0, [r0, #1]
 800d2c8:	f7fe f9d2 	bl	800b670 <disk_write>
 800d2cc:	b920      	cbnz	r0, 800d2d8 <f_write+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2ce:	7d23      	ldrb	r3, [r4, #20]
 800d2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2d4:	7523      	strb	r3, [r4, #20]
 800d2d6:	e7b5      	b.n	800d244 <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2d8:	f04f 0a01 	mov.w	sl, #1
 800d2dc:	f884 a015 	strb.w	sl, [r4, #21]
 800d2e0:	f8cd a004 	str.w	sl, [sp, #4]
 800d2e4:	e7d3      	b.n	800d28e <f_write+0xb4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d2e6:	f04f 0a02 	mov.w	sl, #2
 800d2ea:	f884 a015 	strb.w	sl, [r4, #21]
 800d2ee:	f8cd a004 	str.w	sl, [sp, #4]
 800d2f2:	e7cc      	b.n	800d28e <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d2f4:	6a21      	ldr	r1, [r4, #32]
 800d2f6:	eba1 0109 	sub.w	r1, r1, r9
 800d2fa:	4551      	cmp	r1, sl
 800d2fc:	d302      	bcc.n	800d304 <f_write+0x12a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d2fe:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800d302:	e028      	b.n	800d356 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d308:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800d30c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d310:	f7fe f9e4 	bl	800b6dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d314:	7d23      	ldrb	r3, [r4, #20]
 800d316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d31a:	7523      	strb	r3, [r4, #20]
 800d31c:	e7ef      	b.n	800d2fe <f_write+0x124>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d31e:	6a23      	ldr	r3, [r4, #32]
 800d320:	454b      	cmp	r3, r9
 800d322:	d003      	beq.n	800d32c <f_write+0x152>
				fp->fptr < fp->obj.objsize &&
 800d324:	69a2      	ldr	r2, [r4, #24]
 800d326:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d328:	429a      	cmp	r2, r3
 800d32a:	d33b      	bcc.n	800d3a4 <f_write+0x1ca>
			fp->sect = sect;
 800d32c:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d330:	69a3      	ldr	r3, [r4, #24]
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d33a:	42bd      	cmp	r5, r7
 800d33c:	d200      	bcs.n	800d340 <f_write+0x166>
 800d33e:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d340:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d344:	463a      	mov	r2, r7
 800d346:	4631      	mov	r1, r6
 800d348:	4418      	add	r0, r3
 800d34a:	f7fe f9c7 	bl	800b6dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d34e:	7d23      	ldrb	r3, [r4, #20]
 800d350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d354:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d356:	443e      	add	r6, r7
 800d358:	69a3      	ldr	r3, [r4, #24]
 800d35a:	443b      	add	r3, r7
 800d35c:	61a3      	str	r3, [r4, #24]
 800d35e:	68e2      	ldr	r2, [r4, #12]
 800d360:	4293      	cmp	r3, r2
 800d362:	bf38      	it	cc
 800d364:	4613      	movcc	r3, r2
 800d366:	60e3      	str	r3, [r4, #12]
 800d368:	f8d8 3000 	ldr.w	r3, [r8]
 800d36c:	443b      	add	r3, r7
 800d36e:	f8c8 3000 	str.w	r3, [r8]
 800d372:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 800d374:	b33d      	cbz	r5, 800d3c6 <f_write+0x1ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d376:	69a1      	ldr	r1, [r4, #24]
 800d378:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1d7      	bne.n	800d330 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	895f      	ldrh	r7, [r3, #10]
 800d384:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800d386:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800d38a:	f47f af57 	bne.w	800d23c <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d38e:	2900      	cmp	r1, #0
 800d390:	f47f af42 	bne.w	800d218 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d394:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800d396:	2800      	cmp	r0, #0
 800d398:	f47f af44 	bne.w	800d224 <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7fe ffc2 	bl	800c326 <create_chain>
 800d3a2:	e73f      	b.n	800d224 <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	464a      	mov	r2, r9
 800d3a8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d3ac:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d3b0:	f7fe f952 	bl	800b658 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d0b9      	beq.n	800d32c <f_write+0x152>
					ABORT(fs, FR_DISK_ERR);
 800d3b8:	f04f 0a01 	mov.w	sl, #1
 800d3bc:	f884 a015 	strb.w	sl, [r4, #21]
 800d3c0:	f8cd a004 	str.w	sl, [sp, #4]
 800d3c4:	e763      	b.n	800d28e <f_write+0xb4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d3c6:	7d23      	ldrb	r3, [r4, #20]
 800d3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3cc:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800d3ce:	e75e      	b.n	800d28e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d3d0:	2307      	movs	r3, #7
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	e75b      	b.n	800d28e <f_write+0xb4>

0800d3d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3d6:	b570      	push	{r4, r5, r6, lr}
 800d3d8:	b082      	sub	sp, #8
 800d3da:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3dc:	a901      	add	r1, sp, #4
 800d3de:	f7fe fc34 	bl	800bc4a <validate>
	if (res == FR_OK) {
 800d3e2:	b970      	cbnz	r0, 800d402 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d3e4:	7d23      	ldrb	r3, [r4, #20]
 800d3e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d3ea:	d00a      	beq.n	800d402 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d3ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d3f0:	d109      	bne.n	800d406 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d3f2:	f7fe f83f 	bl	800b474 <get_fattime>
 800d3f6:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d3f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3fa:	9801      	ldr	r0, [sp, #4]
 800d3fc:	f7fe fc72 	bl	800bce4 <move_window>
				if (res == FR_OK) {
 800d400:	b178      	cbz	r0, 800d422 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800d402:	b002      	add	sp, #8
 800d404:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d406:	2301      	movs	r3, #1
 800d408:	6a22      	ldr	r2, [r4, #32]
 800d40a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d40e:	9801      	ldr	r0, [sp, #4]
 800d410:	7840      	ldrb	r0, [r0, #1]
 800d412:	f7fe f92d 	bl	800b670 <disk_write>
 800d416:	bb40      	cbnz	r0, 800d46a <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d418:	7d23      	ldrb	r3, [r4, #20]
 800d41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d41e:	7523      	strb	r3, [r4, #20]
 800d420:	e7e7      	b.n	800d3f2 <f_sync+0x1c>
					dir = fp->dir_ptr;
 800d422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d424:	7af3      	ldrb	r3, [r6, #11]
 800d426:	f043 0320 	orr.w	r3, r3, #32
 800d42a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d42c:	68a2      	ldr	r2, [r4, #8]
 800d42e:	4631      	mov	r1, r6
 800d430:	6820      	ldr	r0, [r4, #0]
 800d432:	f7fe fa85 	bl	800b940 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d436:	68e1      	ldr	r1, [r4, #12]
 800d438:	f106 001c 	add.w	r0, r6, #28
 800d43c:	f7fe f944 	bl	800b6c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d440:	4629      	mov	r1, r5
 800d442:	f106 0016 	add.w	r0, r6, #22
 800d446:	f7fe f93f 	bl	800b6c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d44a:	2100      	movs	r1, #0
 800d44c:	f106 0012 	add.w	r0, r6, #18
 800d450:	f7fe f936 	bl	800b6c0 <st_word>
					fs->wflag = 1;
 800d454:	9b01      	ldr	r3, [sp, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d45a:	9801      	ldr	r0, [sp, #4]
 800d45c:	f7ff fc50 	bl	800cd00 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d460:	7d23      	ldrb	r3, [r4, #20]
 800d462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d466:	7523      	strb	r3, [r4, #20]
 800d468:	e7cb      	b.n	800d402 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d46a:	2001      	movs	r0, #1
 800d46c:	e7c9      	b.n	800d402 <f_sync+0x2c>

0800d46e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d46e:	b510      	push	{r4, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d474:	f7ff ffaf 	bl	800d3d6 <f_sync>
	if (res == FR_OK)
 800d478:	b108      	cbz	r0, 800d47e <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800d47a:	b002      	add	sp, #8
 800d47c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d47e:	a901      	add	r1, sp, #4
 800d480:	4620      	mov	r0, r4
 800d482:	f7fe fbe2 	bl	800bc4a <validate>
		if (res == FR_OK) {
 800d486:	2800      	cmp	r0, #0
 800d488:	d1f7      	bne.n	800d47a <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d48a:	6920      	ldr	r0, [r4, #16]
 800d48c:	f7fe f9ea 	bl	800b864 <dec_lock>
			if (res == FR_OK)
 800d490:	2800      	cmp	r0, #0
 800d492:	d1f2      	bne.n	800d47a <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800d494:	6020      	str	r0, [r4, #0]
 800d496:	e7f0      	b.n	800d47a <f_close+0xc>

0800d498 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d498:	b530      	push	{r4, r5, lr}
 800d49a:	b085      	sub	sp, #20
 800d49c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d03d      	beq.n	800d51e <f_opendir+0x86>
 800d4a2:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	a903      	add	r1, sp, #12
 800d4a8:	a801      	add	r0, sp, #4
 800d4aa:	f7fe fc73 	bl	800bd94 <find_volume>
	if (res == FR_OK) {
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	b128      	cbz	r0, 800d4be <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d4b2:	b10c      	cbz	r4, 800d4b8 <f_opendir+0x20>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	b005      	add	sp, #20
 800d4bc:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d4c2:	9901      	ldr	r1, [sp, #4]
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	f7ff fb34 	bl	800cb32 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	bb18      	cbnz	r0, 800d516 <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d4ce:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	db08      	blt.n	800d4e8 <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d4d6:	79ab      	ldrb	r3, [r5, #6]
 800d4d8:	f013 0f10 	tst.w	r3, #16
 800d4dc:	d01a      	beq.n	800d514 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d4de:	6a29      	ldr	r1, [r5, #32]
 800d4e0:	9803      	ldr	r0, [sp, #12]
 800d4e2:	f7fe fa1a 	bl	800b91a <ld_clust>
 800d4e6:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 800d4e8:	9b03      	ldr	r3, [sp, #12]
 800d4ea:	88db      	ldrh	r3, [r3, #6]
 800d4ec:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f7fe fec2 	bl	800c27a <dir_sdi>
				if (res == FR_OK) {
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	b968      	cbnz	r0, 800d516 <f_opendir+0x7e>
					if (obj->sclust) {
 800d4fa:	68ab      	ldr	r3, [r5, #8]
 800d4fc:	b913      	cbnz	r3, 800d504 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d4fe:	2300      	movs	r3, #0
 800d500:	612b      	str	r3, [r5, #16]
 800d502:	e008      	b.n	800d516 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d504:	2100      	movs	r1, #0
 800d506:	4628      	mov	r0, r5
 800d508:	f7fe f95a 	bl	800b7c0 <inc_lock>
 800d50c:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d50e:	b910      	cbnz	r0, 800d516 <f_opendir+0x7e>
 800d510:	2412      	movs	r4, #18
 800d512:	e7ce      	b.n	800d4b2 <f_opendir+0x1a>
					res = FR_NO_PATH;
 800d514:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d516:	2c04      	cmp	r4, #4
 800d518:	d1cb      	bne.n	800d4b2 <f_opendir+0x1a>
 800d51a:	2405      	movs	r4, #5
 800d51c:	e7ca      	b.n	800d4b4 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 800d51e:	2409      	movs	r4, #9
 800d520:	e7ca      	b.n	800d4b8 <f_opendir+0x20>

0800d522 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d522:	b570      	push	{r4, r5, r6, lr}
 800d524:	b082      	sub	sp, #8
 800d526:	4604      	mov	r4, r0
 800d528:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d52a:	a901      	add	r1, sp, #4
 800d52c:	f7fe fb8d 	bl	800bc4a <validate>
	if (res == FR_OK) {
 800d530:	4606      	mov	r6, r0
 800d532:	b9c0      	cbnz	r0, 800d566 <f_readdir+0x44>
		if (!fno) {
 800d534:	b195      	cbz	r5, 800d55c <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d536:	2100      	movs	r1, #0
 800d538:	4620      	mov	r0, r4
 800d53a:	f7ff f849 	bl	800c5d0 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d53e:	2804      	cmp	r0, #4
 800d540:	d000      	beq.n	800d544 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800d542:	b998      	cbnz	r0, 800d56c <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d544:	4629      	mov	r1, r5
 800d546:	4620      	mov	r0, r4
 800d548:	f7ff f9b8 	bl	800c8bc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d54c:	2100      	movs	r1, #0
 800d54e:	4620      	mov	r0, r4
 800d550:	f7fe ff93 	bl	800c47a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d554:	2804      	cmp	r0, #4
 800d556:	d006      	beq.n	800d566 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d558:	4606      	mov	r6, r0
 800d55a:	e004      	b.n	800d566 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d55c:	2100      	movs	r1, #0
 800d55e:	4620      	mov	r0, r4
 800d560:	f7fe fe8b 	bl	800c27a <dir_sdi>
 800d564:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800d566:	4630      	mov	r0, r6
 800d568:	b002      	add	sp, #8
 800d56a:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800d56c:	4606      	mov	r6, r0
 800d56e:	e7fa      	b.n	800d566 <f_readdir+0x44>

0800d570 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	4605      	mov	r5, r0
 800d574:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d576:	4621      	mov	r1, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	f7ff ffd2 	bl	800d522 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d57e:	4606      	mov	r6, r0
 800d580:	fab4 f384 	clz	r3, r4
 800d584:	095b      	lsrs	r3, r3, #5
 800d586:	2800      	cmp	r0, #0
 800d588:	bf18      	it	ne
 800d58a:	f043 0301 	orrne.w	r3, r3, #1
 800d58e:	b953      	cbnz	r3, 800d5a6 <f_findnext+0x36>
 800d590:	7da3      	ldrb	r3, [r4, #22]
 800d592:	b143      	cbz	r3, 800d5a6 <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d594:	2300      	movs	r3, #0
 800d596:	461a      	mov	r2, r3
 800d598:	f104 0116 	add.w	r1, r4, #22
 800d59c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d59e:	f7fe fadb 	bl	800bb58 <pattern_matching>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d0e7      	beq.n	800d576 <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	bd70      	pop	{r4, r5, r6, pc}

0800d5aa <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d5aa:	b538      	push	{r3, r4, r5, lr}
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d5b0:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	f7ff ff70 	bl	800d498 <f_opendir>
	if (res == FR_OK) {
 800d5b8:	b100      	cbz	r0, 800d5bc <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800d5ba:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f7ff ffd6 	bl	800d570 <f_findnext>
 800d5c4:	e7f9      	b.n	800d5ba <f_findfirst+0x10>
	...

0800d5c8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d5c8:	4b13      	ldr	r3, [pc, #76]	; (800d618 <FATFS_LinkDriverEx+0x50>)
 800d5ca:	7a5b      	ldrb	r3, [r3, #9]
 800d5cc:	bb13      	cbnz	r3, 800d614 <FATFS_LinkDriverEx+0x4c>
{
 800d5ce:	b510      	push	{r4, lr}
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800d5d6:	4b10      	ldr	r3, [pc, #64]	; (800d618 <FATFS_LinkDriverEx+0x50>)
 800d5d8:	f893 c009 	ldrb.w	ip, [r3, #9]
 800d5dc:	fa5f fc8c 	uxtb.w	ip, ip
 800d5e0:	f04f 0e00 	mov.w	lr, #0
 800d5e4:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800d5e8:	f893 c009 	ldrb.w	ip, [r3, #9]
 800d5ec:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d5f0:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800d5f4:	7a5c      	ldrb	r4, [r3, #9]
 800d5f6:	441c      	add	r4, r3
 800d5f8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800d5fa:	7a5a      	ldrb	r2, [r3, #9]
 800d5fc:	1c54      	adds	r4, r2, #1
 800d5fe:	b2e4      	uxtb	r4, r4
 800d600:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800d602:	3230      	adds	r2, #48	; 0x30
 800d604:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800d606:	233a      	movs	r3, #58	; 0x3a
 800d608:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800d60a:	232f      	movs	r3, #47	; 0x2f
 800d60c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800d60e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800d612:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800d614:	2001      	movs	r0, #1
}
 800d616:	4770      	bx	lr
 800d618:	2001d7dc 	.word	0x2001d7dc

0800d61c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d61c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800d61e:	2200      	movs	r2, #0
 800d620:	f7ff ffd2 	bl	800d5c8 <FATFS_LinkDriverEx>
}
 800d624:	bd08      	pop	{r3, pc}
	...

0800d628 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d628:	287f      	cmp	r0, #127	; 0x7f
 800d62a:	d917      	bls.n	800d65c <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d62c:	b131      	cbz	r1, 800d63c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d62e:	28ff      	cmp	r0, #255	; 0xff
 800d630:	d813      	bhi.n	800d65a <ff_convert+0x32>
 800d632:	3880      	subs	r0, #128	; 0x80
 800d634:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <ff_convert+0x38>)
 800d636:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800d63a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d63c:	2300      	movs	r3, #0
 800d63e:	2b7f      	cmp	r3, #127	; 0x7f
 800d640:	d807      	bhi.n	800d652 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800d642:	4a07      	ldr	r2, [pc, #28]	; (800d660 <ff_convert+0x38>)
 800d644:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d648:	4282      	cmp	r2, r0
 800d64a:	d002      	beq.n	800d652 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800d64c:	3301      	adds	r3, #1
 800d64e:	b29b      	uxth	r3, r3
 800d650:	e7f5      	b.n	800d63e <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800d652:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d656:	b2c0      	uxtb	r0, r0
 800d658:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d65a:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	080185e0 	.word	0x080185e0

0800d664 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d664:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d668:	d207      	bcs.n	800d67a <ff_wtoupper+0x16>
 800d66a:	4b24      	ldr	r3, [pc, #144]	; (800d6fc <ff_wtoupper+0x98>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800d66c:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800d66e:	1e4a      	subs	r2, r1, #1
 800d670:	b292      	uxth	r2, r2
 800d672:	4290      	cmp	r0, r2
 800d674:	d940      	bls.n	800d6f8 <ff_wtoupper+0x94>
{
 800d676:	b510      	push	{r4, lr}
 800d678:	e007      	b.n	800d68a <ff_wtoupper+0x26>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800d67a:	4b21      	ldr	r3, [pc, #132]	; (800d700 <ff_wtoupper+0x9c>)
 800d67c:	e7f6      	b.n	800d66c <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d67e:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800d680:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800d682:	1e4a      	subs	r2, r1, #1
 800d684:	b292      	uxth	r2, r2
 800d686:	4290      	cmp	r0, r2
 800d688:	d919      	bls.n	800d6be <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d68a:	f103 0e04 	add.w	lr, r3, #4
 800d68e:	885b      	ldrh	r3, [r3, #2]
 800d690:	0a1a      	lsrs	r2, r3, #8
 800d692:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800d694:	eb03 0c01 	add.w	ip, r3, r1
 800d698:	4560      	cmp	r0, ip
 800d69a:	db04      	blt.n	800d6a6 <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800d69c:	2a00      	cmp	r2, #0
 800d69e:	d1ee      	bne.n	800d67e <ff_wtoupper+0x1a>
 800d6a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d6a4:	e7ec      	b.n	800d680 <ff_wtoupper+0x1c>
			switch (cmd) {
 800d6a6:	2a08      	cmp	r2, #8
 800d6a8:	d809      	bhi.n	800d6be <ff_wtoupper+0x5a>
 800d6aa:	e8df f002 	tbb	[pc, r2]
 800d6ae:	0905      	.short	0x0905
 800d6b0:	1815120f 	.word	0x1815120f
 800d6b4:	1e1b      	.short	0x1e1b
 800d6b6:	21          	.byte	0x21
 800d6b7:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d6b8:	1a44      	subs	r4, r0, r1
 800d6ba:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 800d6be:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d6c0:	1a43      	subs	r3, r0, r1
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	1ac0      	subs	r0, r0, r3
 800d6c8:	b280      	uxth	r0, r0
 800d6ca:	e7f8      	b.n	800d6be <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d6cc:	3810      	subs	r0, #16
 800d6ce:	b280      	uxth	r0, r0
 800d6d0:	e7f5      	b.n	800d6be <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d6d2:	3820      	subs	r0, #32
 800d6d4:	b280      	uxth	r0, r0
 800d6d6:	e7f2      	b.n	800d6be <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d6d8:	3830      	subs	r0, #48	; 0x30
 800d6da:	b280      	uxth	r0, r0
 800d6dc:	e7ef      	b.n	800d6be <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d6de:	381a      	subs	r0, #26
 800d6e0:	b280      	uxth	r0, r0
 800d6e2:	e7ec      	b.n	800d6be <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d6e4:	3008      	adds	r0, #8
 800d6e6:	b280      	uxth	r0, r0
 800d6e8:	e7e9      	b.n	800d6be <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d6ea:	3850      	subs	r0, #80	; 0x50
 800d6ec:	b280      	uxth	r0, r0
 800d6ee:	e7e6      	b.n	800d6be <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d6f0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800d6f4:	b280      	uxth	r0, r0
 800d6f6:	e7e2      	b.n	800d6be <ff_wtoupper+0x5a>
}
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	080186e0 	.word	0x080186e0
 800d700:	080188d4 	.word	0x080188d4

0800d704 <tEnvelopeFollower_initToPool>:
{
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
 800d704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d706:	4606      	mov	r6, r0
 800d708:	ee10 5a10 	vmov	r5, s0
 800d70c:	ee10 4a90 	vmov	r4, s1
    _tMempool* m = *mp;
 800d710:	680f      	ldr	r7, [r1, #0]
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800d712:	4639      	mov	r1, r7
 800d714:	2010      	movs	r0, #16
 800d716:	f004 fb33 	bl	8011d80 <mpool_alloc>
 800d71a:	6030      	str	r0, [r6, #0]
    e->mempool = m;
 800d71c:	6007      	str	r7, [r0, #0]
    
    e->y = 0.0f;
 800d71e:	2300      	movs	r3, #0
 800d720:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800d722:	6085      	str	r5, [r0, #8]
    e->d_coeff = decayCoeff;
 800d724:	60c4      	str	r4, [r0, #12]
}
 800d726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d728 <tEnvelopeFollower_init>:
{
 800d728:	b508      	push	{r3, lr}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
 800d72a:	3118      	adds	r1, #24
 800d72c:	f7ff ffea 	bl	800d704 <tEnvelopeFollower_initToPool>
}
 800d730:	bd08      	pop	{r3, pc}
	...

0800d734 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800d734:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800d736:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73e:	d415      	bmi.n	800d76c <tEnvelopeFollower_tick+0x38>
    
    if (isnan(x)) return 0.0f;
 800d740:	eeb4 0a40 	vcmp.f32	s0, s0
 800d744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d748:	d61c      	bvs.n	800d784 <tEnvelopeFollower_tick+0x50>
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800d74a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d74e:	eef4 7ac0 	vcmpe.f32	s15, s0
 800d752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d756:	d80c      	bhi.n	800d772 <tEnvelopeFollower_tick+0x3e>
 800d758:	ed93 7a02 	vldr	s14, [r3, #8]
 800d75c:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	d505      	bpl.n	800d772 <tEnvelopeFollower_tick+0x3e>
 800d766:	ed83 0a01 	vstr	s0, [r3, #4]
 800d76a:	e008      	b.n	800d77e <tEnvelopeFollower_tick+0x4a>
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800d76c:	eeb1 0a40 	vneg.f32	s0, s0
 800d770:	e7e6      	b.n	800d740 <tEnvelopeFollower_tick+0xc>
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800d772:	ed93 7a03 	vldr	s14, [r3, #12]
 800d776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d77a:	edc3 7a01 	vstr	s15, [r3, #4]
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
 800d77e:	ed93 0a01 	vldr	s0, [r3, #4]
 800d782:	4770      	bx	lr
    if (isnan(x)) return 0.0f;
 800d784:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d78c <tEnvelopeFollower_tick+0x58>
}
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	00000000 	.word	0x00000000

0800d790 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	ed2d 8b02 	vpush	{d8}
 800d796:	4604      	mov	r4, r0
 800d798:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800d79c:	680d      	ldr	r5, [r1, #0]
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800d79e:	4629      	mov	r1, r5
 800d7a0:	2010      	movs	r0, #16
 800d7a2:	f004 faed 	bl	8011d80 <mpool_alloc>
 800d7a6:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800d7a8:	6005      	str	r5, [r0, #0]
    
    p->curr=0.0f;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800d7ae:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800d7b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d7b6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800d7ba:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800d7be:	ecbd 8b02 	vpop	{d8}
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}

0800d7c4 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
 800d7c4:	b508      	push	{r3, lr}
    _tPowerFollower* p = *pf;
 800d7c6:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800d7c8:	6801      	ldr	r1, [r0, #0]
 800d7ca:	f004 fbc5 	bl	8011f58 <mpool_free>
}
 800d7ce:	bd08      	pop	{r3, pc}

0800d7d0 <tPowerFollower_setFactor>:

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800d7d0:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
 800d7d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7da:	d411      	bmi.n	800d800 <tPowerFollower_setFactor+0x30>
    if (factor>1.0f) factor=1.0f;
 800d7dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d7e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e8:	dd01      	ble.n	800d7ee <tPowerFollower_setFactor+0x1e>
 800d7ea:	eeb0 0a67 	vmov.f32	s0, s15
    p->factor=factor;
 800d7ee:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800d7f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d7f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d7fa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d7fe:	4770      	bx	lr
    if (factor<0.0f) factor=0.0f;
 800d800:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d808 <tPowerFollower_setFactor+0x38>
 800d804:	e7ea      	b.n	800d7dc <tPowerFollower_setFactor+0xc>
 800d806:	bf00      	nop
 800d808:	00000000 	.word	0x00000000

0800d80c <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800d80c:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800d80e:	edd3 7a01 	vldr	s15, [r3, #4]
 800d812:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d816:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d81a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d81e:	ed93 7a03 	vldr	s14, [r3, #12]
 800d822:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d826:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d82a:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800d82e:	4770      	bx	lr

0800d830 <tLinearDelay_free>:
    
    tLinearDelay_setDelay(dl, d->delay);
}

void tLinearDelay_free (tLinearDelay* const dl)
{
 800d830:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800d832:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)d->buff, d->mempool);
 800d834:	6821      	ldr	r1, [r4, #0]
 800d836:	68a0      	ldr	r0, [r4, #8]
 800d838:	f004 fb8e 	bl	8011f58 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800d83c:	6821      	ldr	r1, [r4, #0]
 800d83e:	4620      	mov	r0, r4
 800d840:	f004 fb8a 	bl	8011f58 <mpool_free>
}
 800d844:	bd10      	pop	{r4, pc}

0800d846 <tLinearDelay_clear>:

void    tLinearDelay_clear(tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800d846:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d848:	2300      	movs	r3, #0
 800d84a:	e005      	b.n	800d858 <tLinearDelay_clear+0x12>
    {
        d->buff[i] = 0;
 800d84c:	688a      	ldr	r2, [r1, #8]
 800d84e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d852:	2000      	movs	r0, #0
 800d854:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d856:	3301      	adds	r3, #1
 800d858:	69ca      	ldr	r2, [r1, #28]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d8f6      	bhi.n	800d84c <tLinearDelay_clear+0x6>
    }
}
 800d85e:	4770      	bx	lr

0800d860 <tLinearDelay_tick>:

Lfloat   tLinearDelay_tick (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800d860:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800d862:	edd3 7a01 	vldr	s15, [r3, #4]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	6959      	ldr	r1, [r3, #20]
 800d86a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d86e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d872:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d876:	695a      	ldr	r2, [r3, #20]
 800d878:	3201      	adds	r2, #1
 800d87a:	615a      	str	r2, [r3, #20]
 800d87c:	69d9      	ldr	r1, [r3, #28]
 800d87e:	428a      	cmp	r2, r1
 800d880:	d022      	beq.n	800d8c8 <tLinearDelay_tick+0x68>

    uint32_t idx = (uint32_t) d->outPoint;
 800d882:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d884:	6898      	ldr	r0, [r3, #8]
 800d886:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800d88a:	eddc 7a00 	vldr	s15, [ip]
 800d88e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800d892:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d896:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 800d89a:	3201      	adds	r2, #1
 800d89c:	4291      	cmp	r1, r2
 800d89e:	d916      	bls.n	800d8ce <tLinearDelay_tick+0x6e>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d8a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800d8a4:	ed90 7a00 	vldr	s14, [r0]
 800d8a8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d8ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d8b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8b4:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d8b8:	619a      	str	r2, [r3, #24]
 800d8ba:	4291      	cmp	r1, r2
 800d8bc:	d801      	bhi.n	800d8c2 <tLinearDelay_tick+0x62>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800d8c2:	ed93 0a03 	vldr	s0, [r3, #12]
 800d8c6:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	615a      	str	r2, [r3, #20]
 800d8cc:	e7d9      	b.n	800d882 <tLinearDelay_tick+0x22>
        d->lastOut += d->buff[0] * d->alpha;
 800d8ce:	ed90 7a00 	vldr	s14, [r0]
 800d8d2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d8d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d8da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8de:	edc3 7a03 	vstr	s15, [r3, #12]
 800d8e2:	e7e9      	b.n	800d8b8 <tLinearDelay_tick+0x58>

0800d8e4 <tLinearDelay_tickIn>:

void   tLinearDelay_tickIn (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800d8e4:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800d8e6:	edd3 7a01 	vldr	s15, [r3, #4]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	6959      	ldr	r1, [r3, #20]
 800d8ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d8f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d8f6:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d8fa:	695a      	ldr	r2, [r3, #20]
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	615a      	str	r2, [r3, #20]
 800d900:	69d9      	ldr	r1, [r3, #28]
 800d902:	428a      	cmp	r2, r1
 800d904:	d000      	beq.n	800d908 <tLinearDelay_tickIn+0x24>
}
 800d906:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d908:	2200      	movs	r2, #0
 800d90a:	615a      	str	r2, [r3, #20]
}
 800d90c:	e7fb      	b.n	800d906 <tLinearDelay_tickIn+0x22>

0800d90e <tLinearDelay_tickOut>:

Lfloat   tLinearDelay_tickOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800d90e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800d910:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d912:	6899      	ldr	r1, [r3, #8]
 800d914:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800d918:	edd0 7a00 	vldr	s15, [r0]
 800d91c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800d920:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d924:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
        
    if ((idx + 1) < d->maxDelay)
 800d928:	3201      	adds	r2, #1
 800d92a:	69d8      	ldr	r0, [r3, #28]
 800d92c:	4282      	cmp	r2, r0
 800d92e:	d213      	bcs.n	800d958 <tLinearDelay_tickOut+0x4a>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d930:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d934:	ed91 7a00 	vldr	s14, [r1]
 800d938:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d93c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d940:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d944:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d948:	619a      	str	r2, [r3, #24]
 800d94a:	4282      	cmp	r2, r0
 800d94c:	d301      	bcc.n	800d952 <tLinearDelay_tickOut+0x44>
 800d94e:	2200      	movs	r2, #0
 800d950:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800d952:	ed93 0a03 	vldr	s0, [r3, #12]
 800d956:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800d958:	ed91 7a00 	vldr	s14, [r1]
 800d95c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800d960:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d964:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d968:	edc3 7a03 	vstr	s15, [r3, #12]
 800d96c:	e7ec      	b.n	800d948 <tLinearDelay_tickOut+0x3a>

0800d96e <tLinearDelay_setDelay>:

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
 800d96e:	b510      	push	{r4, lr}
 800d970:	eef0 0a40 	vmov.f32	s1, s0
    _tLinearDelay* d = *dl;
 800d974:	6804      	ldr	r4, [r0, #0]

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800d976:	edd4 7a07 	vldr	s15, [r4, #28]
 800d97a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800d97e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800d982:	f003 fe7f 	bl	8011684 <LEAF_clip>
 800d986:	ed84 0a08 	vstr	s0, [r4, #32]

    Lfloat outPointer = d->inPoint - d->delay;
 800d98a:	edd4 7a05 	vldr	s15, [r4, #20]
 800d98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d992:	ee77 7ac0 	vsub.f32	s15, s15, s0

    while ( outPointer < 0 )
 800d996:	e005      	b.n	800d9a4 <tLinearDelay_setDelay+0x36>
        outPointer += d->maxDelay; // modulo maximum length
 800d998:	ed94 7a07 	vldr	s14, [r4, #28]
 800d99c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800d9a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ac:	d4f4      	bmi.n	800d998 <tLinearDelay_setDelay+0x2a>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800d9ae:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d9b2:	ee17 3a10 	vmov	r3, s14
 800d9b6:	ed84 7a06 	vstr	s14, [r4, #24]

    d->alpha = outPointer - d->outPoint; // fractional part
 800d9ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d9be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9c2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800d9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ce:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800d9d2:	69e2      	ldr	r2, [r4, #28]
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d000      	beq.n	800d9da <tLinearDelay_setDelay+0x6c>
}
 800d9d8:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	61a3      	str	r3, [r4, #24]
}
 800d9de:	e7fb      	b.n	800d9d8 <tLinearDelay_setDelay+0x6a>

0800d9e0 <tLinearDelay_initToPool>:
{
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	ed2d 8b02 	vpush	{d8}
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ec:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800d9ee:	6817      	ldr	r7, [r2, #0]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	202c      	movs	r0, #44	; 0x2c
 800d9f4:	f004 f9c4 	bl	8011d80 <mpool_alloc>
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	6030      	str	r0, [r6, #0]
    d->mempool = m;
 800d9fc:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 800d9fe:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800da00:	ee07 5a90 	vmov	s15, r5
 800da04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da08:	eef4 7ac8 	vcmpe.f32	s15, s16
 800da0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da10:	d517      	bpl.n	800da42 <tLinearDelay_initToPool+0x62>
 800da12:	edc0 7a08 	vstr	s15, [r0, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800da16:	4639      	mov	r1, r7
 800da18:	00a8      	lsls	r0, r5, #2
 800da1a:	f004 f9b1 	bl	8011d80 <mpool_alloc>
 800da1e:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800da20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800da24:	6063      	str	r3, [r4, #4]
    d->lastIn = 0.0f;
 800da26:	2300      	movs	r3, #0
 800da28:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800da2a:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800da30:	61a3      	str	r3, [r4, #24]
    tLinearDelay_setDelay(dl, d->delay);
 800da32:	ed94 0a08 	vldr	s0, [r4, #32]
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ff99 	bl	800d96e <tLinearDelay_setDelay>
}
 800da3c:	ecbd 8b02 	vpop	{d8}
 800da40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 800da42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4a:	d402      	bmi.n	800da52 <tLinearDelay_initToPool+0x72>
    else                    d->delay = delay;
 800da4c:	ed80 8a08 	vstr	s16, [r0, #32]
 800da50:	e7e1      	b.n	800da16 <tLinearDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800da52:	2300      	movs	r3, #0
 800da54:	6203      	str	r3, [r0, #32]
 800da56:	e7de      	b.n	800da16 <tLinearDelay_initToPool+0x36>

0800da58 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800da58:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800da5a:	6953      	ldr	r3, [r2, #20]
 800da5c:	1a59      	subs	r1, r3, r1
 800da5e:	3901      	subs	r1, #1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800da60:	e001      	b.n	800da66 <tLinearDelay_addTo+0xe>
 800da62:	69d3      	ldr	r3, [r2, #28]
 800da64:	4419      	add	r1, r3
 800da66:	2900      	cmp	r1, #0
 800da68:	dbfb      	blt.n	800da62 <tLinearDelay_addTo+0xa>
    
    return (d->buff[tap] += value);
 800da6a:	6893      	ldr	r3, [r2, #8]
 800da6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800da70:	edd3 7a00 	vldr	s15, [r3]
 800da74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da78:	ed83 0a00 	vstr	s0, [r3]
}
 800da7c:	4770      	bx	lr

0800da7e <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800da7e:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800da80:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800da82:	6821      	ldr	r1, [r4, #0]
 800da84:	6860      	ldr	r0, [r4, #4]
 800da86:	f004 fa67 	bl	8011f58 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800da8a:	6821      	ldr	r1, [r4, #0]
 800da8c:	4620      	mov	r0, r4
 800da8e:	f004 fa63 	bl	8011f58 <mpool_free>
}
 800da92:	bd10      	pop	{r4, pc}

0800da94 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800da94:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800da96:	2300      	movs	r3, #0
 800da98:	e005      	b.n	800daa6 <tLagrangeDelay_clear+0x12>
    {
        d->buff[i] = 0.0f;
 800da9a:	684a      	ldr	r2, [r1, #4]
 800da9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800daa0:	2000      	movs	r0, #0
 800daa2:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800daa4:	3301      	adds	r3, #1
 800daa6:	69ca      	ldr	r2, [r1, #28]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d8f6      	bhi.n	800da9a <tLagrangeDelay_clear+0x6>
    }
}
 800daac:	4770      	bx	lr

0800daae <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800daae:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800dab0:	685a      	ldr	r2, [r3, #4]
 800dab2:	6959      	ldr	r1, [r3, #20]
 800dab4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800dab8:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800dabc:	695a      	ldr	r2, [r3, #20]
 800dabe:	3201      	adds	r2, #1
 800dac0:	6899      	ldr	r1, [r3, #8]
 800dac2:	400a      	ands	r2, r1
 800dac4:	615a      	str	r2, [r3, #20]
}
 800dac6:	4770      	bx	lr

0800dac8 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800dac8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800daca:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800dacc:	6998      	ldr	r0, [r3, #24]

   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800dace:	69da      	ldr	r2, [r3, #28]
 800dad0:	4402      	add	r2, r0
 800dad2:	3a01      	subs	r2, #1
 800dad4:	689c      	ldr	r4, [r3, #8]
 800dad6:	4022      	ands	r2, r4

    d->lastOut =    (d->buff[previdx] * d->h0) +
 800dad8:	6859      	ldr	r1, [r3, #4]
 800dada:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dade:	ed92 0a00 	vldr	s0, [r2]
 800dae2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dae6:	ee20 0a27 	vmul.f32	s0, s0, s15
    		(d->buff[idx] * d->h1) +
 800daea:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800daee:	edd2 7a00 	vldr	s15, [r2]
 800daf2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800daf6:	ee67 7a87 	vmul.f32	s15, s15, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800dafa:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800dafe:	1c42      	adds	r2, r0, #1
 800db00:	4022      	ands	r2, r4
 800db02:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800db06:	eddc 7a00 	vldr	s15, [ip]
 800db0a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800db0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    		(d->buff[idx] * d->h1) +
 800db12:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800db16:	3002      	adds	r0, #2
 800db18:	4004      	ands	r4, r0
 800db1a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db1e:	edd1 7a00 	vldr	s15, [r1]
 800db22:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800db26:	ee67 7a87 	vmul.f32	s15, s15, s14
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800db2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800db2e:	ed83 0a03 	vstr	s0, [r3, #12]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800db32:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800db34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db38:	4770      	bx	lr
	...

0800db3c <tLagrangeDelay_setDelay>:

void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
 800db3c:	6803      	ldr	r3, [r0, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
 800db3e:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800db42:	edd3 7a05 	vldr	s15, [r3, #20]
 800db46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800db4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db52:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800db56:	e005      	b.n	800db64 <tLagrangeDelay_setDelay+0x28>
        outPointer += d->maxDelay; // modulo maximum length
 800db58:	ed93 7a07 	vldr	s14, [r3, #28]
 800db5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800db60:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800db64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db6c:	d4f4      	bmi.n	800db58 <tLagrangeDelay_setDelay+0x1c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800db6e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800db72:	ee17 2a10 	vmov	r2, s14
 800db76:	ed83 7a06 	vstr	s14, [r3, #24]

    //Lfloat alpha = 1.0f - (outPointer - d->outPoint); // fractional part
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800db7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800db7e:	ee77 7ac7 	vsub.f32	s15, s15, s14

	Lfloat dp1 = alpha+1.0f;
 800db82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db86:	ee37 6a87 	vadd.f32	s12, s15, s14
	Lfloat dm1 = alpha-1.0f;
 800db8a:	ee37 7ac7 	vsub.f32	s14, s15, s14
	Lfloat dm2 = alpha-2.0f;
 800db8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800db92:	ee77 6ae6 	vsub.f32	s13, s15, s13

	Lfloat pdp1d = dp1*alpha;
 800db96:	ee67 5a86 	vmul.f32	s11, s15, s12
	Lfloat pddm1 = alpha*dm1;
 800db9a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat pdm1dm2 = dm1*dm2;
 800db9e:	ee27 5a26 	vmul.f32	s10, s14, s13

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800dba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dba6:	eddf 4a11 	vldr	s9, [pc, #68]	; 800dbec <tLagrangeDelay_setDelay+0xb0>
 800dbaa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800dbae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800dbb2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800dbb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dbba:	ee26 6a27 	vmul.f32	s12, s12, s15
 800dbbe:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
	d->h2 = -0.5f * (pdp1d * dm2);
 800dbc2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dbc6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800dbca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dbce:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800dbd2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dbd6:	eddf 7a06 	vldr	s15, [pc, #24]	; 800dbf0 <tLagrangeDelay_setDelay+0xb4>
 800dbda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbde:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    d->outPoint &= d->bufferMask;
 800dbe2:	6899      	ldr	r1, [r3, #8]
 800dbe4:	400a      	ands	r2, r1
 800dbe6:	619a      	str	r2, [r3, #24]
}
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	be2aaaab 	.word	0xbe2aaaab
 800dbf0:	3e2aaaab 	.word	0x3e2aaaab

0800dbf4 <tLagrangeDelay_initToPool>:
{
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	ed2d 8b02 	vpush	{d8}
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	eeb0 8a40 	vmov.f32	s16, s0
 800dc00:	460f      	mov	r7, r1
    _tMempool* m = *mp;
 800dc02:	6816      	ldr	r6, [r2, #0]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800dc04:	4631      	mov	r1, r6
 800dc06:	2034      	movs	r0, #52	; 0x34
 800dc08:	f004 f8ba 	bl	8011d80 <mpool_alloc>
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800dc10:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
 800dc12:	61c7      	str	r7, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800dc14:	ee07 7a90 	vmov	s15, r7
 800dc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc1c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800dc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc24:	d507      	bpl.n	800dc36 <tLagrangeDelay_initToPool+0x42>
 800dc26:	edc0 7a08 	vstr	s15, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800dc2a:	b17f      	cbz	r7, 800dc4c <tLagrangeDelay_initToPool+0x58>
 800dc2c:	1e7b      	subs	r3, r7, #1
 800dc2e:	423b      	tst	r3, r7
 800dc30:	d10c      	bne.n	800dc4c <tLagrangeDelay_initToPool+0x58>
        d->bufferMask = maxDelay - 1;
 800dc32:	60a3      	str	r3, [r4, #8]
 800dc34:	e018      	b.n	800dc68 <tLagrangeDelay_initToPool+0x74>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800dc36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3e:	d402      	bmi.n	800dc46 <tLagrangeDelay_initToPool+0x52>
    else                    d->delay = delay;
 800dc40:	ed80 8a08 	vstr	s16, [r0, #32]
 800dc44:	e7f1      	b.n	800dc2a <tLagrangeDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800dc46:	2300      	movs	r3, #0
 800dc48:	6203      	str	r3, [r0, #32]
 800dc4a:	e7ee      	b.n	800dc2a <tLagrangeDelay_initToPool+0x36>
        maxDelay--;
 800dc4c:	1e7b      	subs	r3, r7, #1
        maxDelay |= maxDelay >> 1;
 800dc4e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800dc52:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800dc56:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800dc5a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800dc5e:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
        maxDelay++;
 800dc62:	1c5f      	adds	r7, r3, #1
        d->maxDelay = maxDelay;
 800dc64:	61e7      	str	r7, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800dc66:	60a3      	str	r3, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800dc68:	4631      	mov	r1, r6
 800dc6a:	00b8      	lsls	r0, r7, #2
 800dc6c:	f004 f888 	bl	8011d80 <mpool_alloc>
 800dc70:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 800dc72:	2300      	movs	r3, #0
 800dc74:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800dc76:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800dc7c:	61a3      	str	r3, [r4, #24]
    tLagrangeDelay_setDelay(dl, d->delay);
 800dc7e:	ed94 0a08 	vldr	s0, [r4, #32]
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7ff ff5a 	bl	800db3c <tLagrangeDelay_setDelay>
}
 800dc88:	ecbd 8b02 	vpop	{d8}
 800dc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc8e <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800dc8e:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800dc90:	6953      	ldr	r3, [r2, #20]
 800dc92:	1a5b      	subs	r3, r3, r1
 800dc94:	3b01      	subs	r3, #1
 800dc96:	6891      	ldr	r1, [r2, #8]
 800dc98:	400b      	ands	r3, r1

    return d->buff[tap];
 800dc9a:	6852      	ldr	r2, [r2, #4]
 800dc9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

}
 800dca0:	ed93 0a00 	vldr	s0, [r3]
 800dca4:	4770      	bx	lr
	...

0800dca8 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 800dca8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800dcaa:	6804      	ldr	r4, [r0, #0]

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800dcac:	6963      	ldr	r3, [r4, #20]
 800dcae:	1a59      	subs	r1, r3, r1
 800dcb0:	3902      	subs	r1, #2
 800dcb2:	68a0      	ldr	r0, [r4, #8]
 800dcb4:	4001      	ands	r1, r0

    alpha = 1.0f - alpha;
 800dcb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dcba:	ee37 0ac0 	vsub.f32	s0, s15, s0
    Lfloat dp1 = alpha+1.0f;
 800dcbe:	ee70 6a27 	vadd.f32	s13, s0, s15
    Lfloat dm1 = alpha-1.0f;
 800dcc2:	ee70 7a67 	vsub.f32	s15, s0, s15
    Lfloat dm2 = alpha-2.0f;
 800dcc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800dcca:	ee30 7a47 	vsub.f32	s14, s0, s14

    Lfloat pdp1d = dp1*alpha;
 800dcce:	ee60 5a26 	vmul.f32	s11, s0, s13
    Lfloat pddm1 = alpha*dm1;
 800dcd2:	ee20 0a27 	vmul.f32	s0, s0, s15
    Lfloat pdm1dm2 = dm1*dm2;
 800dcd6:	ee27 6a87 	vmul.f32	s12, s15, s14

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800dcda:	ee27 0a00 	vmul.f32	s0, s14, s0
 800dcde:	ed9f 5a20 	vldr	s10, [pc, #128]	; 800dd60 <tLagrangeDelay_tapOutInterpolated+0xb8>
 800dce2:	ee20 0a05 	vmul.f32	s0, s0, s10
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800dce6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dcea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dcee:	ee26 6a86 	vmul.f32	s12, s13, s12
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800dcf2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dcf6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800dcfa:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800dcfe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dd02:	eddf 6a18 	vldr	s13, [pc, #96]	; 800dd64 <tLagrangeDelay_tapOutInterpolated+0xbc>
 800dd06:	ee67 7aa6 	vmul.f32	s15, s15, s13
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800dd0a:	6862      	ldr	r2, [r4, #4]
 800dd0c:	69e3      	ldr	r3, [r4, #28]
 800dd0e:	440b      	add	r3, r1
 800dd10:	3b01      	subs	r3, #1
 800dd12:	4003      	ands	r3, r0
 800dd14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd18:	edd3 6a00 	vldr	s13, [r3]
 800dd1c:	ee26 0a80 	vmul.f32	s0, s13, s0
    		(d->buff[idx] * h1) +
 800dd20:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800dd24:	edd3 6a00 	vldr	s13, [r3]
 800dd28:	ee66 6a86 	vmul.f32	s13, s13, s12
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800dd2c:	ee30 0a26 	vadd.f32	s0, s0, s13
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800dd30:	1c4b      	adds	r3, r1, #1
 800dd32:	4003      	ands	r3, r0
 800dd34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd38:	edd3 6a00 	vldr	s13, [r3]
 800dd3c:	ee26 7a87 	vmul.f32	s14, s13, s14
    		(d->buff[idx] * h1) +
 800dd40:	ee30 7a07 	vadd.f32	s14, s0, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800dd44:	3102      	adds	r1, #2
 800dd46:	4008      	ands	r0, r1
 800dd48:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800dd4c:	ed92 0a00 	vldr	s0, [r2]
 800dd50:	ee20 0a27 	vmul.f32	s0, s0, s15

}
 800dd54:	ee37 0a00 	vadd.f32	s0, s14, s0
 800dd58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	be2aaaab 	.word	0xbe2aaaab
 800dd64:	3e2aaaab 	.word	0x3e2aaaab

0800dd68 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800dd68:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800dd6a:	6953      	ldr	r3, [r2, #20]
 800dd6c:	1a5b      	subs	r3, r3, r1
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	6891      	ldr	r1, [r2, #8]
 800dd72:	400b      	ands	r3, r1

    d->buff[tap] = value;
 800dd74:	6852      	ldr	r2, [r2, #4]
 800dd76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd7a:	ed83 0a00 	vstr	s0, [r3]
}
 800dd7e:	4770      	bx	lr

0800dd80 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800dd80:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800dd82:	6953      	ldr	r3, [r2, #20]
 800dd84:	1a5b      	subs	r3, r3, r1
 800dd86:	3b01      	subs	r3, #1
 800dd88:	6891      	ldr	r1, [r2, #8]
 800dd8a:	400b      	ands	r3, r1

    return (d->buff[tap] += value);
 800dd8c:	6852      	ldr	r2, [r2, #4]
 800dd8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dd92:	edd3 7a00 	vldr	s15, [r3]
 800dd96:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd9a:	ed83 0a00 	vstr	s0, [r3]
}
 800dd9e:	4770      	bx	lr

0800dda0 <tLagrangeDelay_getMaxDelay>:
}


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800dda0:	6803      	ldr	r3, [r0, #0]
    return d->maxDelay;
 800dda2:	ed93 0a07 	vldr	s0, [r3, #28]
}
 800dda6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800ddaa:	4770      	bx	lr

0800ddac <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800ddac:	b538      	push	{r3, r4, r5, lr}
    _tTapeDelay* d = *dl;
 800ddae:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800ddb0:	edd4 7a01 	vldr	s15, [r4, #4]
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	6962      	ldr	r2, [r4, #20]
 800ddb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ddbc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ddc0:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ddc4:	6963      	ldr	r3, [r4, #20]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	6163      	str	r3, [r4, #20]
 800ddca:	69a1      	ldr	r1, [r4, #24]
 800ddcc:	428b      	cmp	r3, r1
 800ddce:	d037      	beq.n	800de40 <tTapeDelay_tick+0x94>

    int idx =  (int) d->idx;
 800ddd0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800ddd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ddd8:	ee17 3a10 	vmov	r3, s14
    Lfloat alpha = d->idx - idx;
 800dddc:	eeb8 2ac7 	vcvt.f32.s32	s4, s14

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800dde0:	68a5      	ldr	r5, [r4, #8]
 800dde2:	18ca      	adds	r2, r1, r3
 800dde4:	3a01      	subs	r2, #1
 800dde6:	fbb2 f0f1 	udiv	r0, r2, r1
 800ddea:	fb01 2210 	mls	r2, r1, r0, r2
 800ddee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
                                              d->buff[idx],
 800ddf2:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
                                              d->buff[(idx + 1) % d->maxDelay],
 800ddf6:	1c58      	adds	r0, r3, #1
 800ddf8:	fbb0 fef1 	udiv	lr, r0, r1
 800ddfc:	fb01 001e 	mls	r0, r1, lr, r0
 800de00:	eb05 0080 	add.w	r0, r5, r0, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 800de04:	3302      	adds	r3, #2
 800de06:	fbb3 fef1 	udiv	lr, r3, r1
 800de0a:	fb01 331e 	mls	r3, r1, lr, r3
 800de0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800de12:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800de16:	edd5 1a00 	vldr	s3, [r5]
 800de1a:	ed90 1a00 	vldr	s2, [r0]
 800de1e:	eddc 0a00 	vldr	s1, [ip]
 800de22:	ed92 0a00 	vldr	s0, [r2]
 800de26:	f003 fe0d 	bl	8011a44 <LEAF_interpolate_hermite_x>
 800de2a:	ed84 0a03 	vstr	s0, [r4, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 800de2e:	edd4 7a05 	vldr	s15, [r4, #20]
 800de32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de36:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800de3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    while (diff < 0.f) diff += d->maxDelay;
 800de3e:	e008      	b.n	800de52 <tTapeDelay_tick+0xa6>
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	6163      	str	r3, [r4, #20]
 800de44:	e7c4      	b.n	800ddd0 <tTapeDelay_tick+0x24>
    while (diff < 0.f) diff += d->maxDelay;
 800de46:	ed94 7a06 	vldr	s14, [r4, #24]
 800de4a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800de4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5a:	d4f4      	bmi.n	800de46 <tTapeDelay_tick+0x9a>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800de5c:	ed94 6a07 	vldr	s12, [r4, #28]
 800de60:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800de64:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800de68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de70:	edc4 7a08 	vstr	s15, [r4, #32]

    d->idx += d->inc;
 800de74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800de78:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800de7c:	e003      	b.n	800de86 <tTapeDelay_tick+0xda>
 800de7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800de82:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800de86:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800de8a:	edd4 7a06 	vldr	s15, [r4, #24]
 800de8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9a:	daf0      	bge.n	800de7e <tTapeDelay_tick+0xd2>

    if (d->lastOut)
 800de9c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea4:	d101      	bne.n	800deaa <tTapeDelay_tick+0xfe>
        return d->lastOut;
    return 0.0f;
 800dea6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800deac <tTapeDelay_tick+0x100>
}
 800deaa:	bd38      	pop	{r3, r4, r5, pc}
 800deac:	00000000 	.word	0x00000000

0800deb0 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 800deb0:	b510      	push	{r4, lr}
 800deb2:	eef0 0a40 	vmov.f32	s1, s0
    _tTapeDelay* d = *dl;
 800deb6:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 800deb8:	edd4 7a06 	vldr	s15, [r4, #24]
 800debc:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800dec0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dec4:	f003 fbde 	bl	8011684 <LEAF_clip>
 800dec8:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800decc:	bd10      	pop	{r4, pc}

0800dece <tSampleReducer_initToPool>:
{
    tSampleReducer_initToPool(sr, &leaf->mempool);
}

void tSampleReducer_initToPool (tSampleReducer* const sr, tMempool* const mp)
{
 800dece:	b538      	push	{r3, r4, r5, lr}
 800ded0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800ded2:	680d      	ldr	r5, [r1, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800ded4:	4629      	mov	r1, r5
 800ded6:	2010      	movs	r0, #16
 800ded8:	f003 ff52 	bl	8011d80 <mpool_alloc>
 800dedc:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800dede:	6005      	str	r5, [r0, #0]
    
    s->invRatio = 1.0f;
 800dee0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dee4:	6043      	str	r3, [r0, #4]
    s->hold = 0.0f;
 800dee6:	2300      	movs	r3, #0
 800dee8:	6083      	str	r3, [r0, #8]
    s->count = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	60c3      	str	r3, [r0, #12]
}
 800deee:	bd38      	pop	{r3, r4, r5, pc}

0800def0 <tSampleReducer_tick>:
    mpool_free((char*)s, s->mempool);
}

Lfloat tSampleReducer_tick(tSampleReducer* const sr, Lfloat input)
{
    _tSampleReducer* s = *sr;
 800def0:	6803      	ldr	r3, [r0, #0]
    if (s->count > s->invRatio)
 800def2:	edd3 7a03 	vldr	s15, [r3, #12]
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	ed93 7a01 	vldr	s14, [r3, #4]
 800defe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df06:	dd03      	ble.n	800df10 <tSampleReducer_tick+0x20>
    {
        s->hold = input;
 800df08:	ed83 0a02 	vstr	s0, [r3, #8]
        s->count = 0;
 800df0c:	2200      	movs	r2, #0
 800df0e:	60da      	str	r2, [r3, #12]
    }
    
    s->count++;
 800df10:	68da      	ldr	r2, [r3, #12]
 800df12:	3201      	adds	r2, #1
 800df14:	60da      	str	r2, [r3, #12]
    return s->hold;
}
 800df16:	ed93 0a02 	vldr	s0, [r3, #8]
 800df1a:	4770      	bx	lr

0800df1c <tSampleReducer_setRatio>:


void tSampleReducer_setRatio(tSampleReducer* const sr, Lfloat ratio)
{
    _tSampleReducer* s = *sr;
 800df1c:	6803      	ldr	r3, [r0, #0]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800df1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800df26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2a:	d900      	bls.n	800df2e <tSampleReducer_setRatio+0x12>
        s->invRatio = 1.0f / ratio;
    
}
 800df2c:	4770      	bx	lr
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800df2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800df32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df36:	dbf9      	blt.n	800df2c <tSampleReducer_setRatio+0x10>
        s->invRatio = 1.0f / ratio;
 800df38:	eeb0 7a67 	vmov.f32	s14, s15
 800df3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800df40:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800df44:	e7f2      	b.n	800df2c <tSampleReducer_setRatio+0x10>
	...

0800df48 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 800df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4a:	4606      	mov	r6, r0
 800df4c:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800df4e:	680f      	ldr	r7, [r1, #0]
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800df50:	4639      	mov	r1, r7
 800df52:	2020      	movs	r0, #32
 800df54:	f003 ff14 	bl	8011d80 <mpool_alloc>
 800df58:	4604      	mov	r4, r0
 800df5a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800df5c:	6007      	str	r7, [r0, #0]
    
    c->op = 4;
 800df5e:	2304      	movs	r3, #4
 800df60:	6143      	str	r3, [r0, #20]
    c->div = 1.0f / SCALAR;
 800df62:	4b0d      	ldr	r3, [pc, #52]	; (800df98 <tCrusher_initToPool+0x50>)
 800df64:	60c3      	str	r3, [r0, #12]
    c->rnd = 0.25f;
 800df66:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800df6a:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 800df6c:	6043      	str	r3, [r0, #4]
    tSampleReducer_initToPool(&c->sReducer, mp);
 800df6e:	4629      	mov	r1, r5
 800df70:	301c      	adds	r0, #28
 800df72:	f7ff ffac 	bl	800dece <tSampleReducer_initToPool>
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800df76:	edd4 6a03 	vldr	s13, [r4, #12]
 800df7a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800df9c <tCrusher_initToPool+0x54>
 800df7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df82:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800dfa0 <tCrusher_initToPool+0x58>
 800df86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df8a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800dfa4 <tCrusher_initToPool+0x5c>
 800df8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df92:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800df96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df98:	3951b717 	.word	0x3951b717
 800df9c:	459c4000 	.word	0x459c4000
 800dfa0:	3f333333 	.word	0x3f333333
 800dfa4:	3e99999a 	.word	0x3e99999a

0800dfa8 <tCrusher_init>:
{
 800dfa8:	b508      	push	{r3, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
 800dfaa:	3118      	adds	r1, #24
 800dfac:	f7ff ffcc 	bl	800df48 <tCrusher_initToPool>
}
 800dfb0:	bd08      	pop	{r3, pc}
	...

0800dfb4 <tCrusher_tick>:
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
}

Lfloat tCrusher_tick (tCrusher* const cr, Lfloat input)
{
 800dfb4:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 800dfb6:	6804      	ldr	r4, [r0, #0]
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 800dfb8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e004 <tCrusher_tick+0x50>
 800dfbc:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    sample = (int32_t) sample;
 800dfc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dfc4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample *= c->div;
 800dfc8:	edd4 7a03 	vldr	s15, [r4, #12]
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800dfcc:	6960      	ldr	r0, [r4, #20]
 800dfce:	05c0      	lsls	r0, r0, #23
 800dfd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dfd4:	f003 fb50 	bl	8011678 <LEAF_bitwise_xor>
 800dfd8:	eef0 0a40 	vmov.f32	s1, s0
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 800dfdc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800dfe0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dfe4:	f003 fb4e 	bl	8011684 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 800dfe8:	edd4 0a04 	vldr	s1, [r4, #16]
 800dfec:	f003 fb2e 	bl	801164c <LEAF_round>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
 800dff0:	f104 001c 	add.w	r0, r4, #28
 800dff4:	f7ff ff7c 	bl	800def0 <tSampleReducer_tick>
    
    return sample * c->gain;
 800dff8:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 800dffc:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e000:	bd10      	pop	{r4, pc}
 800e002:	bf00      	nop
 800e004:	459c4000 	.word	0x459c4000

0800e008 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
 800e008:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 800e00a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e00e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e012:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e016:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800e01a:	4770      	bx	lr

0800e01c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 800e01c:	b510      	push	{r4, lr}
 800e01e:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
 800e022:	6804      	ldr	r4, [r0, #0]
    
    val = LEAF_clip(0.0f, val, 1.0f);
 800e024:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800e028:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e064 <tCrusher_setQuality+0x48>
 800e02c:	f003 fb2a 	bl	8011684 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 800e030:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e068 <tCrusher_setQuality+0x4c>
 800e034:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e038:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e06c <tCrusher_setQuality+0x50>
 800e03c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e040:	ed84 0a03 	vstr	s0, [r4, #12]
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800e044:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e070 <tCrusher_setQuality+0x54>
 800e048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e04c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e074 <tCrusher_setQuality+0x58>
 800e050:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e054:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e078 <tCrusher_setQuality+0x5c>
 800e058:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e05c:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800e060:	bd10      	pop	{r4, pc}
 800e062:	bf00      	nop
 800e064:	00000000 	.word	0x00000000
 800e068:	459c4000 	.word	0x459c4000
 800e06c:	3c23d70a 	.word	0x3c23d70a
 800e070:	3951b717 	.word	0x3951b717
 800e074:	3f333333 	.word	0x3f333333
 800e078:	3e99999a 	.word	0x3e99999a

0800e07c <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 800e07c:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 800e07e:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800e082:	4770      	bx	lr

0800e084 <tCrusher_setSamplingRatio>:

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
 800e084:	b508      	push	{r3, lr}
    _tCrusher* c = *cr;
 800e086:	6800      	ldr	r0, [r0, #0]
    c->srr = ratio;
 800e088:	ed80 0a01 	vstr	s0, [r0, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
 800e08c:	301c      	adds	r0, #28
 800e08e:	f7ff ff45 	bl	800df1c <tSampleReducer_setRatio>
}
 800e092:	bd08      	pop	{r3, pc}

0800e094 <tCompressor_initToPool>:
{
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
 800e094:	b570      	push	{r4, r5, r6, lr}
 800e096:	ed2d 8b02 	vpush	{d8}
 800e09a:	4606      	mov	r6, r0
    _tMempool* m = *mp;
 800e09c:	680d      	ldr	r5, [r1, #0]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e09e:	4629      	mov	r1, r5
 800e0a0:	206c      	movs	r0, #108	; 0x6c
 800e0a2:	f003 fe6d 	bl	8011d80 <mpool_alloc>
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800e0aa:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800e0ac:	686b      	ldr	r3, [r5, #4]
    c->sampleRate = leaf->sampleRate;
 800e0ae:	ed93 8a00 	vldr	s16, [r3]
 800e0b2:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800e0b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e11c <tCompressor_initToPool+0x88>
 800e0ba:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e0be:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800e0c2:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800e0c6:	f007 fe79 	bl	8015dbc <expf>
 800e0ca:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800e0ce:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e120 <tCompressor_initToPool+0x8c>
 800e0d2:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e0d6:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800e0da:	f007 fe6f 	bl	8015dbc <expf>
 800e0de:	ed84 0a02 	vstr	s0, [r4, #8]
    
    c->isActive = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_G[0] = 0.0f;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	6263      	str	r3, [r4, #36]	; 0x24
    c->x_G[1] = 0.0f;
 800e0ea:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 800e0ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 800e0ee:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 800e0f0:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 800e0f2:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 800e0f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 800e0f6:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 800e0f8:	60e3      	str	r3, [r4, #12]
    c->R = 0.5f; // compression Ratio
 800e0fa:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800e0fe:	6123      	str	r3, [r4, #16]
    c->invR = 2.0f; //inverse of ratio
 800e100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e104:	61e3      	str	r3, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 800e106:	4b07      	ldr	r3, [pc, #28]	; (800e124 <tCompressor_initToPool+0x90>)
 800e108:	61a3      	str	r3, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 800e10a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e10e:	6163      	str	r3, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800e110:	4b05      	ldr	r3, [pc, #20]	; (800e128 <tCompressor_initToPool+0x94>)
 800e112:	6223      	str	r3, [r4, #32]
    

}
 800e114:	ecbd 8b02 	vpop	{d8}
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	bf00      	nop
 800e11c:	3d4ccccd 	.word	0x3d4ccccd
 800e120:	3dcccccd 	.word	0x3dcccccd
 800e124:	40400000 	.word	0x40400000
 800e128:	3e2aaaab 	.word	0x3e2aaaab

0800e12c <tCompressor_init>:
{
 800e12c:	b508      	push	{r3, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
 800e12e:	3118      	adds	r1, #24
 800e130:	f7ff ffb0 	bl	800e094 <tCompressor_initToPool>
}
 800e134:	bd08      	pop	{r3, pc}
	...

0800e138 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 800e138:	b510      	push	{r4, lr}
 800e13a:	ed2d 8b02 	vpush	{d8}
 800e13e:	eeb0 8a40 	vmov.f32	s16, s0
    _tCompressor* c = *comp;
 800e142:	6804      	ldr	r4, [r0, #0]
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 800e144:	f003 fa02 	bl	801154c <fastabsf>
 800e148:	f003 fd80 	bl	8011c4c <fasteratodb>
 800e14c:	eef0 0a40 	vmov.f32	s1, s0
 800e150:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e238 <tCompressor_tick+0x100>
 800e154:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800e23c <tCompressor_tick+0x104>
 800e158:	f003 fa94 	bl	8011684 <LEAF_clip>
    Lfloat out_db = 0.0f;
    
    c->y_T[1] = c->y_T[0];
 800e15c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e160:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    
    slope = 1.0f - c->invR; // feed-forward topology;
 800e164:	edd4 6a07 	vldr	s13, [r4, #28]
 800e168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e16c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    
    overshoot = in_db - c->T;
 800e170:	edd4 6a03 	vldr	s13, [r4, #12]
 800e174:	ee70 6a66 	vsub.f32	s13, s0, s13
    

    if (overshoot <= -(c->W))
 800e178:	ed94 6a05 	vldr	s12, [r4, #20]
 800e17c:	eef1 5a46 	vneg.f32	s11, s12
 800e180:	eef4 5ae6 	vcmpe.f32	s11, s13
 800e184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e188:	db27      	blt.n	800e1da <tCompressor_tick+0xa2>
    {
        out_db = in_db;
        c->isActive = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db;
 800e18e:	eef0 7a40 	vmov.f32	s15, s0
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
 800e192:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e196:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 800e19a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a2:	d53a      	bpl.n	800e21a <tCompressor_tick+0xe2>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e1a4:	ed94 6a01 	vldr	s12, [r4, #4]
 800e1a8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e1ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e1b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e1b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1bc:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e1c0:	ed94 0a06 	vldr	s0, [r4, #24]
 800e1c4:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800e1c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1cc:	f003 fd7a 	bl	8011cc4 <fasterdbtoa>
    return attenuation * in;
}
 800e1d0:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e1d4:	ecbd 8b02 	vpop	{d8}
 800e1d8:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800e1da:	eef4 5ae6 	vcmpe.f32	s11, s13
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	d513      	bpl.n	800e20c <tCompressor_tick+0xd4>
 800e1e4:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	dd0e      	ble.n	800e20c <tCompressor_tick+0xd4>
        Lfloat squareit = (overshoot + c->W);
 800e1ee:	ee36 6a26 	vadd.f32	s12, s12, s13
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e1f2:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e1f6:	edd4 6a08 	vldr	s13, [r4, #32]
 800e1fa:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e1fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e202:	ee76 7a00 	vadd.f32	s15, s12, s0
        c->isActive = 1;
 800e206:	2301      	movs	r3, #1
 800e208:	6463      	str	r3, [r4, #68]	; 0x44
    {
 800e20a:	e7c2      	b.n	800e192 <tCompressor_tick+0x5a>
        out_db = in_db + slope * overshoot;
 800e20c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e210:	ee77 7a80 	vadd.f32	s15, s15, s0
        c->isActive = 1;
 800e214:	2301      	movs	r3, #1
 800e216:	6463      	str	r3, [r4, #68]	; 0x44
 800e218:	e7bb      	b.n	800e192 <tCompressor_tick+0x5a>
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 800e21a:	ed94 6a02 	vldr	s12, [r4, #8]
 800e21e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e226:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e22a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e22e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e232:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
 800e236:	e7c3      	b.n	800e1c0 <tCompressor_tick+0x88>
 800e238:	00000000 	.word	0x00000000
 800e23c:	c2b40000 	.word	0xc2b40000

0800e240 <tCompressor_setTables>:
    return attenuation * in;
}

void tCompressor_setTables(tCompressor* const comp, Lfloat* atodb, Lfloat* dbtoa, Lfloat atodbMinIn, Lfloat atodbMaxIn, Lfloat dbtoaMinIn, Lfloat dbtoaMaxIn, int atodbTableSize, int dbtoaTableSize)
{
    _tCompressor* c = *comp;
 800e240:	6800      	ldr	r0, [r0, #0]
	c->atodbTable = atodb;
 800e242:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTable = dbtoa;
 800e244:	6502      	str	r2, [r0, #80]	; 0x50

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 800e246:	3b01      	subs	r3, #1
 800e248:	6643      	str	r3, [r0, #100]	; 0x64
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 800e24a:	9a00      	ldr	r2, [sp, #0]
 800e24c:	3a01      	subs	r2, #1
 800e24e:	6682      	str	r2, [r0, #104]	; 0x68

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e250:	ee70 0ac0 	vsub.f32	s1, s1, s0
 800e254:	ee07 3a90 	vmov	s15, r3
 800e258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e25c:	ee87 7aa0 	vdiv.f32	s14, s15, s1
 800e260:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 800e264:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e268:	ed80 7a17 	vstr	s14, [r0, #92]	; 0x5c


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e26c:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800e270:	ee07 2a90 	vmov	s15, r2
 800e274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e278:	ee87 7aa1 	vdiv.f32	s14, s15, s3
 800e27c:	ed80 7a16 	vstr	s14, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 800e280:	ee27 7a01 	vmul.f32	s14, s14, s2
 800e284:	ed80 7a18 	vstr	s14, [r0, #96]	; 0x60

}
 800e288:	4770      	bx	lr

0800e28a <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 800e28a:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 800e28c:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 800e290:	4770      	bx	lr

0800e292 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
 800e292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e296:	ed2d 8b02 	vpush	{d8}
 800e29a:	4681      	mov	r9, r0
 800e29c:	ee10 8a10 	vmov	r8, s0
 800e2a0:	eeb0 8a60 	vmov.f32	s16, s1
 800e2a4:	ee11 6a10 	vmov	r6, s2
 800e2a8:	460f      	mov	r7, r1
 800e2aa:	4615      	mov	r5, r2
    _tMempool* m = *mp;
 800e2ac:	f8d2 a000 	ldr.w	sl, [r2]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e2b0:	4651      	mov	r1, sl
 800e2b2:	2018      	movs	r0, #24
 800e2b4:	f003 fd64 	bl	8011d80 <mpool_alloc>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	f8c9 0000 	str.w	r0, [r9]
    p->mempool = m;
 800e2be:	f8c0 a000 	str.w	sl, [r0]
    
    p->curr=0.0f;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	6103      	str	r3, [r0, #16]
    p->targetLevel=targetLevel;
 800e2c6:	f8c0 8004 	str.w	r8, [r0, #4]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e2ca:	4629      	mov	r1, r5
 800e2cc:	eeb0 0a48 	vmov.f32	s0, s16
 800e2d0:	3014      	adds	r0, #20
 800e2d2:	f7ff fa5d 	bl	800d790 <tPowerFollower_initToPool>
    p->mode=mode;
 800e2d6:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 800e2d8:	60a6      	str	r6, [r4, #8]
}
 800e2da:	ecbd 8b02 	vpop	{d8}
 800e2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e2e2 <tFeedbackLeveler_init>:
{
 800e2e2:	b508      	push	{r3, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
 800e2e4:	3218      	adds	r2, #24
 800e2e6:	f7ff ffd4 	bl	800e292 <tFeedbackLeveler_initToPool>
}
 800e2ea:	bd08      	pop	{r3, pc}

0800e2ec <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 800e2ec:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 800e2ee:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 800e2f0:	f104 0014 	add.w	r0, r4, #20
 800e2f4:	f7ff fa66 	bl	800d7c4 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 800e2f8:	6821      	ldr	r1, [r4, #0]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f003 fe2c 	bl	8011f58 <mpool_free>
}
 800e300:	bd10      	pop	{r4, pc}

0800e302 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 800e302:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 800e304:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800e308:	4770      	bx	lr

0800e30a <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
 800e30a:	b508      	push	{r3, lr}
    _tFeedbackLeveler* p = *fb;
 800e30c:	6800      	ldr	r0, [r0, #0]
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 800e30e:	3014      	adds	r0, #20
 800e310:	f7ff fa5e 	bl	800d7d0 <tPowerFollower_setFactor>
}
 800e314:	bd08      	pop	{r3, pc}

0800e316 <tFeedbackLeveler_setMode>:

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 800e316:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 800e318:	60d9      	str	r1, [r3, #12]
}
 800e31a:	4770      	bx	lr

0800e31c <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 800e31c:	b510      	push	{r4, lr}
 800e31e:	ed2d 8b02 	vpush	{d8}
 800e322:	eeb0 8a40 	vmov.f32	s16, s0
    _tFeedbackLeveler* p = *fb;
 800e326:	6804      	ldr	r4, [r0, #0]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800e328:	f104 0014 	add.w	r0, r4, #20
 800e32c:	f7ff fa6e 	bl	800d80c <tPowerFollower_tick>
 800e330:	edd4 7a01 	vldr	s15, [r4, #4]
 800e334:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e338:	68e3      	ldr	r3, [r4, #12]
 800e33a:	b923      	cbnz	r3, 800e346 <tFeedbackLeveler_tick+0x2a>
 800e33c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e344:	d40e      	bmi.n	800e364 <tFeedbackLeveler_tick+0x48>
    p->curr=input*(1.0f-p->strength*levdiff);
 800e346:	ed94 7a02 	vldr	s14, [r4, #8]
 800e34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e34e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e352:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e356:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e35a:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 800e35e:	ecbd 8b02 	vpop	{d8}
 800e362:	bd10      	pop	{r4, pc}
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e364:	eddf 7a01 	vldr	s15, [pc, #4]	; 800e36c <tFeedbackLeveler_tick+0x50>
 800e368:	e7ed      	b.n	800e346 <tFeedbackLeveler_tick+0x2a>
 800e36a:	bf00      	nop
 800e36c:	00000000 	.word	0x00000000

0800e370 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 800e370:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 800e372:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800e376:	4770      	bx	lr

0800e378 <tADSRT_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	ed2d 8b04 	vpush	{d8-d9}
 800e37e:	4607      	mov	r7, r0
 800e380:	eef0 9a40 	vmov.f32	s19, s0
 800e384:	eeb0 9a60 	vmov.f32	s18, s1
 800e388:	eeb0 8a41 	vmov.f32	s16, s2
 800e38c:	eef0 8a61 	vmov.f32	s17, s3
 800e390:	460d      	mov	r5, r1
 800e392:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 800e394:	681e      	ldr	r6, [r3, #0]
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e396:	4631      	mov	r1, r6
 800e398:	206c      	movs	r0, #108	; 0x6c
 800e39a:	f003 fcf1 	bl	8011d80 <mpool_alloc>
 800e39e:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
 800e3a0:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = adsr->mempool->leaf;
 800e3a2:	6873      	ldr	r3, [r6, #4]

    adsr->exp_buff = expBuffer;
 800e3a4:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 800e3a6:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e3a8:	1e62      	subs	r2, r4, #1
 800e3aa:	60c2      	str	r2, [r0, #12]

    adsr->sampleRate = leaf->sampleRate;
 800e3ac:	edd3 7a00 	vldr	s15, [r3]
 800e3b0:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e3b4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e46c <tADSRT_initToPool+0xf4>
 800e3b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e3bc:	ee07 4a90 	vmov	s15, r4
 800e3c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e3c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3c8:	edc0 7a05 	vstr	s15, [r0, #20]

    if (attack < 0.0f)
 800e3cc:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800e3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d4:	d43e      	bmi.n	800e454 <tADSRT_initToPool+0xdc>
        attack = 0.0f;

    if (decay < 0.0f)
 800e3d6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800e3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3de:	d43c      	bmi.n	800e45a <tADSRT_initToPool+0xe2>
        decay = 0.0f;

    if (sustain > 1.0f)
 800e3e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ec:	dd01      	ble.n	800e3f2 <tADSRT_initToPool+0x7a>
        sustain = 1.0f;
 800e3ee:	eeb0 8a47 	vmov.f32	s16, s14
    if (sustain < 0.0f)
 800e3f2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fa:	d431      	bmi.n	800e460 <tADSRT_initToPool+0xe8>
        sustain = 0.0f;

    if (release < 0.0f)
 800e3fc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	d42f      	bmi.n	800e466 <tADSRT_initToPool+0xee>
        release = 0.0f;

    adsr->next = 0.0f;
 800e406:	2200      	movs	r2, #0
 800e408:	6182      	str	r2, [r0, #24]

    adsr->whichStage = env_idle;
 800e40a:	2200      	movs	r2, #0
 800e40c:	63c2      	str	r2, [r0, #60]	; 0x3c

    adsr->sustain = sustain;
 800e40e:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40

    adsr->attack = attack;
 800e412:	edc0 9a08 	vstr	s19, [r0, #32]
    adsr->decay = decay;
 800e416:	ed80 9a09 	vstr	s18, [r0, #36]	; 0x24
    adsr->release = release;
 800e41a:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e41e:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 800e422:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e426:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800e42a:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e42e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e432:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e436:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e43a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e43e:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38

    adsr->baseLeakFactor = 1.0f;
 800e442:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e446:	6602      	str	r2, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 800e448:	6642      	str	r2, [r0, #100]	; 0x64
    adsr->invSampleRate = leaf->invSampleRate;
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	6683      	str	r3, [r0, #104]	; 0x68
}
 800e44e:	ecbd 8b04 	vpop	{d8-d9}
 800e452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attack = 0.0f;
 800e454:	eddf 9a06 	vldr	s19, [pc, #24]	; 800e470 <tADSRT_initToPool+0xf8>
 800e458:	e7bd      	b.n	800e3d6 <tADSRT_initToPool+0x5e>
        decay = 0.0f;
 800e45a:	ed9f 9a05 	vldr	s18, [pc, #20]	; 800e470 <tADSRT_initToPool+0xf8>
 800e45e:	e7bf      	b.n	800e3e0 <tADSRT_initToPool+0x68>
        sustain = 0.0f;
 800e460:	ed9f 8a03 	vldr	s16, [pc, #12]	; 800e470 <tADSRT_initToPool+0xf8>
 800e464:	e7ca      	b.n	800e3fc <tADSRT_initToPool+0x84>
        release = 0.0f;
 800e466:	eddf 8a02 	vldr	s17, [pc, #8]	; 800e470 <tADSRT_initToPool+0xf8>
 800e46a:	e7cc      	b.n	800e406 <tADSRT_initToPool+0x8e>
 800e46c:	3a83126f 	.word	0x3a83126f
 800e470:	00000000 	.word	0x00000000

0800e474 <tADSRT_init>:
{
 800e474:	b508      	push	{r3, lr}
    tADSRT_initToPool    (adsrenv, attack, decay, sustain, release, expBuffer, bufferSize, &leaf->mempool);
 800e476:	3318      	adds	r3, #24
 800e478:	f7ff ff7e 	bl	800e378 <tADSRT_initToPool>
}
 800e47c:	bd08      	pop	{r3, pc}
	...

0800e480 <tADSRT_setAttack>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#else
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e480:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
 800e482:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48a:	d408      	bmi.n	800e49e <tADSRT_setAttack+0x1e>
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
 800e48c:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e490:	ed93 7a05 	vldr	s14, [r3, #20]
 800e494:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e498:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800e49c:	4770      	bx	lr
        attack = 0.01f;
 800e49e:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e4a4 <tADSRT_setAttack+0x24>
 800e4a2:	e7f3      	b.n	800e48c <tADSRT_setAttack+0xc>
 800e4a4:	3c23d70a 	.word	0x3c23d70a

0800e4a8 <tADSRT_setDecay>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#else
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e4a8:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800e4aa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b2:	d408      	bmi.n	800e4c6 <tADSRT_setDecay+0x1e>
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
 800e4b4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e4b8:	ed93 7a05 	vldr	s14, [r3, #20]
 800e4bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e4c0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800e4c4:	4770      	bx	lr
        decay = 0.01f;
 800e4c6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e4cc <tADSRT_setDecay+0x24>
 800e4ca:	e7f3      	b.n	800e4b4 <tADSRT_setDecay+0xc>
 800e4cc:	3c23d70a 	.word	0x3c23d70a

0800e4d0 <tADSRT_setSustain>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#else
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e4d0:	6803      	ldr	r3, [r0, #0]

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e4d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4de:	dd02      	ble.n	800e4e6 <tADSRT_setSustain+0x16>
 800e4e0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800e4e4:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e4e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	d402      	bmi.n	800e4f6 <tADSRT_setSustain+0x26>
    else                     adsr->sustain = sustain;
 800e4f0:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 800e4f4:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	641a      	str	r2, [r3, #64]	; 0x40
 800e4fa:	4770      	bx	lr

0800e4fc <tADSRT_setRelease>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#else
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e4fc:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
 800e4fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	d408      	bmi.n	800e51a <tADSRT_setRelease+0x1e>
    {
        release = 0.01f;
    }
    adsr->release = release;
 800e508:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e50c:	ed93 7a05 	vldr	s14, [r3, #20]
 800e510:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e514:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800e518:	4770      	bx	lr
        release = 0.01f;
 800e51a:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e520 <tADSRT_setRelease+0x24>
 800e51e:	e7f3      	b.n	800e508 <tADSRT_setRelease+0xc>
 800e520:	3c23d70a 	.word	0x3c23d70a

0800e524 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 800e524:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e526:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
 800e528:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e52c:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 800e530:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e544 <tADSRT_setLeakFactor+0x20>
 800e534:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e538:	f007 feba 	bl	80162b0 <powf>
 800e53c:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 800e540:	bd10      	pop	{r4, pc}
 800e542:	bf00      	nop
 800e544:	472c4400 	.word	0x472c4400

0800e548 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e548:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800e54a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e54c:	b162      	cbz	r2, 800e568 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800e54e:	2200      	movs	r2, #0
 800e550:	65da      	str	r2, [r3, #92]	; 0x5c
        adsr->whichStage = env_ramp;
 800e552:	2205      	movs	r2, #5
 800e554:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->rampPeak = adsr->next;
 800e556:	699a      	ldr	r2, [r3, #24]
 800e558:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800e55a:	2200      	movs	r2, #0
 800e55c:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 800e55e:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 800e560:	659a      	str	r2, [r3, #88]	; 0x58
    adsr->gain = velocity;
 800e562:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 800e566:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800e568:	2201      	movs	r2, #1
 800e56a:	63da      	str	r2, [r3, #60]	; 0x3c
 800e56c:	e7f5      	b.n	800e55a <tADSRT_on+0x12>

0800e56e <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e56e:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800e570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e572:	b11a      	cbz	r2, 800e57c <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800e574:	2204      	movs	r2, #4
 800e576:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 800e578:	699a      	ldr	r2, [r3, #24]
 800e57a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 800e57c:	4770      	bx	lr

0800e57e <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e57e:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 800e580:	2200      	movs	r2, #0
 800e582:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 800e584:	2200      	movs	r2, #0
 800e586:	619a      	str	r2, [r3, #24]
}
 800e588:	4770      	bx	lr
	...

0800e58c <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 800e58c:	b510      	push	{r4, lr}
 800e58e:	ed2d 8b02 	vpush	{d8}
    _tADSRT* adsr = *adsrenv;
 800e592:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
 800e594:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e596:	3b01      	subs	r3, #1
 800e598:	2b04      	cmp	r3, #4
 800e59a:	d81d      	bhi.n	800e5d8 <tADSRT_tick+0x4c>
 800e59c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e5a0:	0093004c 	.word	0x0093004c
 800e5a4:	00fe00ed 	.word	0x00fe00ed
 800e5a8:	0005      	.short	0x0005
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e5aa:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800e5ae:	ed94 7a03 	vldr	s14, [r4, #12]
 800e5b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e5b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	dd10      	ble.n	800e5e2 <tADSRT_tick+0x56>
            {
                adsr->whichStage = env_attack;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	61a3      	str	r3, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800e5c8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800e5cc:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800e5d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5d4:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800e5d8:	ed94 0a06 	vldr	s0, [r4, #24]
 800e5dc:	ecbd 8b02 	vpop	{d8}
 800e5e0:	bd10      	pop	{r4, pc}
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800e5e2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 800e5e6:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e5ea:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e5ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e5f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e5f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	d418      	bmi.n	800e632 <tADSRT_tick+0xa6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e600:	6863      	ldr	r3, [r4, #4]
 800e602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e606:	ee17 2a90 	vmov	r2, s15
 800e60a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e60e:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800e612:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800e616:	6863      	ldr	r3, [r4, #4]
 800e618:	ee16 2a90 	vmov	r2, s13
 800e61c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e620:	ed93 0a00 	vldr	s0, [r3]
 800e624:	f003 fa32 	bl	8011a8c <LEAF_interpolation_linear>
 800e628:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e62c:	ed84 8a06 	vstr	s16, [r4, #24]
 800e630:	e7ca      	b.n	800e5c8 <tADSRT_tick+0x3c>
                    secondValue = 0.0f;
 800e632:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800e824 <tADSRT_tick+0x298>
 800e636:	e7ec      	b.n	800e612 <tADSRT_tick+0x86>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e638:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800e63c:	ed94 7a03 	vldr	s14, [r4, #12]
 800e640:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e644:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64c:	dd0c      	ble.n	800e668 <tADSRT_tick+0xdc>
                adsr->whichStage = env_decay;
 800e64e:	2302      	movs	r3, #2
 800e650:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 800e652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e654:	61a3      	str	r3, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800e656:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800e65a:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800e65e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e662:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
            break;
 800e666:	e7b7      	b.n	800e5d8 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800e668:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 800e66c:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e670:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e674:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e678:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e67c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e684:	d41c      	bmi.n	800e6c0 <tADSRT_tick+0x134>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800e686:	6863      	ldr	r3, [r4, #4]
 800e688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68c:	ee17 2a90 	vmov	r2, s15
 800e690:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e694:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e698:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800e69c:	6863      	ldr	r3, [r4, #4]
 800e69e:	ee16 2a90 	vmov	r2, s13
 800e6a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e6a6:	ed93 0a00 	vldr	s0, [r3]
 800e6aa:	f003 f9ef 	bl	8011a8c <LEAF_interpolation_linear>
 800e6ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e6b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e6ba:	ed84 8a06 	vstr	s16, [r4, #24]
 800e6be:	e7ca      	b.n	800e656 <tADSRT_tick+0xca>
                    secondValue = 0.0f;
 800e6c0:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e824 <tADSRT_tick+0x298>
 800e6c4:	e7e8      	b.n	800e698 <tADSRT_tick+0x10c>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800e6c6:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800e6ca:	ed94 7a03 	vldr	s14, [r4, #12]
 800e6ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e6d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6da:	dd15      	ble.n	800e708 <tADSRT_tick+0x17c>
                adsr->whichStage = env_sustain;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800e6e0:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800e6e4:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800e6e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6ec:	edc4 7a06 	vstr	s15, [r4, #24]
                adsr->sustainWithLeak = 1.0f;
 800e6f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e6f4:	61e3      	str	r3, [r4, #28]
            adsr->decayPhase += adsr->decayInc;
 800e6f6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800e6fa:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800e6fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e702:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
            break;
 800e706:	e767      	b.n	800e5d8 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800e708:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 800e70c:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e710:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e714:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e718:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e71c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e724:	d426      	bmi.n	800e774 <tADSRT_tick+0x1e8>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800e726:	6863      	ldr	r3, [r4, #4]
 800e728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e72c:	ee17 2a90 	vmov	r2, s15
 800e730:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e734:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	ee16 2a90 	vmov	r2, s13
 800e73e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e742:	ed93 0a00 	vldr	s0, [r3]
 800e746:	f003 f9a1 	bl	8011a8c <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800e74a:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800e74e:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 800e752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e756:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e75a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e75e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800e762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e766:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800e76a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e76e:	edc4 7a06 	vstr	s15, [r4, #24]
 800e772:	e7c0      	b.n	800e6f6 <tADSRT_tick+0x16a>
                    secondValue = 0.0f;
 800e774:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800e824 <tADSRT_tick+0x298>
 800e778:	e7de      	b.n	800e738 <tADSRT_tick+0x1ac>
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 800e77a:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800e77e:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 800e782:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e786:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800e78a:	edd4 6a07 	vldr	s13, [r4, #28]
 800e78e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e792:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e796:	edc4 7a06 	vstr	s15, [r4, #24]
            break;
 800e79a:	e71d      	b.n	800e5d8 <tADSRT_tick+0x4c>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800e79c:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800e7a0:	ed94 7a03 	vldr	s14, [r4, #12]
 800e7a4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e7a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b0:	dd0c      	ble.n	800e7cc <tADSRT_tick+0x240>
                adsr->whichStage = env_idle;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	61a3      	str	r3, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800e7ba:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800e7be:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800e7c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7c6:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
            break;
 800e7ca:	e705      	b.n	800e5d8 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800e7cc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 800e7d0:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e7d4:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e7d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e7dc:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e7e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e8:	d418      	bmi.n	800e81c <tADSRT_tick+0x290>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800e7ea:	6863      	ldr	r3, [r4, #4]
 800e7ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7f0:	ee17 2a90 	vmov	r2, s15
 800e7f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e7f8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800e7fc:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 800e800:	6863      	ldr	r3, [r4, #4]
 800e802:	ee16 2a90 	vmov	r2, s13
 800e806:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e80a:	ed93 0a00 	vldr	s0, [r3]
 800e80e:	f003 f93d 	bl	8011a8c <LEAF_interpolation_linear>
 800e812:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e816:	ed84 8a06 	vstr	s16, [r4, #24]
 800e81a:	e7ce      	b.n	800e7ba <tADSRT_tick+0x22e>
                    secondValue = 0.0f;
 800e81c:	eddf 0a01 	vldr	s1, [pc, #4]	; 800e824 <tADSRT_tick+0x298>
 800e820:	e7ec      	b.n	800e7fc <tADSRT_tick+0x270>
 800e822:	bf00      	nop
 800e824:	00000000 	.word	0x00000000

0800e828 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e828:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800e82a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e82c:	3a01      	subs	r2, #1
 800e82e:	2a04      	cmp	r2, #4
 800e830:	d819      	bhi.n	800e866 <tADSRT_tickNoInterp+0x3e>
 800e832:	e8df f002 	tbb	[pc, r2]
 800e836:	552b      	.short	0x552b
 800e838:	a592      	.short	0xa592
 800e83a:	03          	.byte	0x03
 800e83b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e83c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800e840:	ed93 7a03 	vldr	s14, [r3, #12]
 800e844:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e850:	dd0c      	ble.n	800e86c <tADSRT_tickNoInterp+0x44>
            {
                adsr->whichStage = env_attack;
 800e852:	2201      	movs	r2, #1
 800e854:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800e856:	2200      	movs	r2, #0
 800e858:	619a      	str	r2, [r3, #24]
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800e85a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e85e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e862:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800e866:	ed93 0a06 	vldr	s0, [r3, #24]
 800e86a:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800e86c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800e876:	ee16 1a90 	vmov	r1, s13
 800e87a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e87e:	edd2 6a00 	vldr	s13, [r2]
 800e882:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e886:	ed83 7a06 	vstr	s14, [r3, #24]
 800e88a:	e7e6      	b.n	800e85a <tADSRT_tickNoInterp+0x32>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e88c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e890:	ed93 7a03 	vldr	s14, [r3, #12]
 800e894:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a0:	dd0a      	ble.n	800e8b8 <tADSRT_tickNoInterp+0x90>
                adsr->whichStage = env_decay;
 800e8a2:	2202      	movs	r2, #2
 800e8a4:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain;
 800e8a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8a8:	619a      	str	r2, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
 800e8aa:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800e8ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800e8b6:	e7d6      	b.n	800e866 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800e8b8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e8bc:	685a      	ldr	r2, [r3, #4]
 800e8be:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800e8c2:	ee16 1a90 	vmov	r1, s13
 800e8c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e8ca:	ed92 6a00 	vldr	s12, [r2]
 800e8ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8d2:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e8d6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e8da:	ed83 7a06 	vstr	s14, [r3, #24]
 800e8de:	e7e4      	b.n	800e8aa <tADSRT_tickNoInterp+0x82>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800e8e0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e8e4:	ed93 7a03 	vldr	s14, [r3, #12]
 800e8e8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e8ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f4:	dd13      	ble.n	800e91e <tADSRT_tickNoInterp+0xf6>
                adsr->whichStage = env_sustain;
 800e8f6:	2203      	movs	r2, #3
 800e8f8:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800e8fa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e8fe:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800e902:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e906:	ed83 7a06 	vstr	s14, [r3, #24]
                adsr->sustainWithLeak = 1.0f;
 800e90a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e90e:	61da      	str	r2, [r3, #28]
            adsr->decayPhase += adsr->decayInc;
 800e910:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800e914:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e918:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 800e91c:	e7a3      	b.n	800e866 <tADSRT_tickNoInterp+0x3e>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800e91e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800e922:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800e92c:	ee16 1a10 	vmov	r1, s12
 800e930:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e934:	ed92 6a00 	vldr	s12, [r2]
 800e938:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e93c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800e940:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e944:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e948:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e94c:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e950:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e954:	ed83 7a06 	vstr	s14, [r3, #24]
 800e958:	e7da      	b.n	800e910 <tADSRT_tickNoInterp+0xe8>
            adsr->sustainWithLeak *= adsr->leakFactor;
 800e95a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e95e:	ed93 7a07 	vldr	s14, [r3, #28]
 800e962:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e966:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800e96a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800e96e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800e972:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e97a:	edc3 7a06 	vstr	s15, [r3, #24]
            break;
 800e97e:	e772      	b.n	800e866 <tADSRT_tickNoInterp+0x3e>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800e980:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800e984:	ed93 7a03 	vldr	s14, [r3, #12]
 800e988:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e98c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	dd0a      	ble.n	800e9ac <tADSRT_tickNoInterp+0x184>
                adsr->whichStage = env_idle;
 800e996:	2200      	movs	r2, #0
 800e998:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800e99a:	2200      	movs	r2, #0
 800e99c:	619a      	str	r2, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
 800e99e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800e9a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9a6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800e9aa:	e75c      	b.n	800e866 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800e9ac:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800e9b6:	ee16 1a90 	vmov	r1, s13
 800e9ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e9be:	edd2 6a00 	vldr	s13, [r2]
 800e9c2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e9c6:	ed83 7a06 	vstr	s14, [r3, #24]
 800e9ca:	e7e8      	b.n	800e99e <tADSRT_tickNoInterp+0x176>

0800e9cc <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	ed2d 8b02 	vpush	{d8}
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	ee10 4a10 	vmov	r4, s0
 800e9d8:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800e9dc:	680d      	ldr	r5, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e9de:	4629      	mov	r1, r5
 800e9e0:	201c      	movs	r0, #28
 800e9e2:	f003 f9cd 	bl	8011d80 <mpool_alloc>
 800e9e6:	6030      	str	r0, [r6, #0]
    smooth->mempool = m;
 800e9e8:	6005      	str	r5, [r0, #0]
    
    smooth->curr = val;
 800e9ea:	6104      	str	r4, [r0, #16]
    smooth->dest = val;
 800e9ec:	6144      	str	r4, [r0, #20]
    if (factor < 0.0f) factor = 0.0f;
 800e9ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f6:	d418      	bmi.n	800ea2a <tExpSmooth_initToPool+0x5e>
    if (factor > 1.0f) factor = 1.0f;
 800e9f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9fc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	dd01      	ble.n	800ea0a <tExpSmooth_initToPool+0x3e>
 800ea06:	eeb0 8a67 	vmov.f32	s16, s15
    smooth->baseFactor = factor;
 800ea0a:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->factor = factor;
 800ea0e:	ed80 8a02 	vstr	s16, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 800ea12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea16:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ea1a:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800ea1e:	686b      	ldr	r3, [r5, #4]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	6183      	str	r3, [r0, #24]
}
 800ea24:	ecbd 8b02 	vpop	{d8}
 800ea28:	bd70      	pop	{r4, r5, r6, pc}
    if (factor < 0.0f) factor = 0.0f;
 800ea2a:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800ea30 <tExpSmooth_initToPool+0x64>
 800ea2e:	e7e3      	b.n	800e9f8 <tExpSmooth_initToPool+0x2c>
 800ea30:	00000000 	.word	0x00000000

0800ea34 <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800ea34:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
 800ea36:	3118      	adds	r1, #24
 800ea38:	f7ff ffc8 	bl	800e9cc <tExpSmooth_initToPool>
}
 800ea3c:	bd08      	pop	{r3, pc}

0800ea3e <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
 800ea3e:	b508      	push	{r3, lr}
    _tExpSmooth* smooth = *expsmooth;
 800ea40:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 800ea42:	6801      	ldr	r1, [r0, #0]
 800ea44:	f003 fa88 	bl	8011f58 <mpool_free>
}
 800ea48:	bd08      	pop	{r3, pc}
	...

0800ea4c <tExpSmooth_setFactor>:

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	ed2d 8b02 	vpush	{d8}
    _tExpSmooth* smooth = *expsmooth;
 800ea52:	6804      	ldr	r4, [r0, #0]
    
    if (factor < 0.0f)
 800ea54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ea58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5c:	d40b      	bmi.n	800ea76 <tExpSmooth_setFactor+0x2a>
 800ea5e:	eeb0 8a40 	vmov.f32	s16, s0
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
 800ea62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6e:	dd04      	ble.n	800ea7a <tExpSmooth_setFactor+0x2e>
 800ea70:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ea74:	e001      	b.n	800ea7a <tExpSmooth_setFactor+0x2e>
        factor = 0.0f;
 800ea76:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800eaa8 <tExpSmooth_setFactor+0x5c>
    smooth->baseFactor = factor;
 800ea7a:	ed84 8a01 	vstr	s16, [r4, #4]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 800ea7e:	edd4 0a06 	vldr	s1, [r4, #24]
 800ea82:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800eaac <tExpSmooth_setFactor+0x60>
 800ea86:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ea8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ea8e:	f007 fc0f 	bl	80162b0 <powf>
 800ea92:	ed84 0a02 	vstr	s0, [r4, #8]
    smooth->oneminusfactor = 1.0f - factor;
 800ea96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea9a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ea9e:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800eaa2:	ecbd 8b02 	vpop	{d8}
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	00000000 	.word	0x00000000
 800eaac:	472c4400 	.word	0x472c4400

0800eab0 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800eab0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800eab2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800eab6:	4770      	bx	lr

0800eab8 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800eab8:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800eaba:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800eabe:	4770      	bx	lr

0800eac0 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800eac0:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800eac2:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
 800eac6:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800eaca:	4770      	bx	lr

0800eacc <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800eacc:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800eace:	ed93 0a02 	vldr	s0, [r3, #8]
 800ead2:	edd3 7a05 	vldr	s15, [r3, #20]
 800ead6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eada:	edd3 7a03 	vldr	s15, [r3, #12]
 800eade:	ed93 7a04 	vldr	s14, [r3, #16]
 800eae2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eae6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eaea:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 800eaee:	4770      	bx	lr

0800eaf0 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	ed2d 8b02 	vpush	{d8}
 800eaf6:	4604      	mov	r4, r0
 800eaf8:	eef0 8a40 	vmov.f32	s17, s0
 800eafc:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800eb00:	680d      	ldr	r5, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800eb02:	4629      	mov	r1, r5
 800eb04:	201c      	movs	r0, #28
 800eb06:	f003 f93b 	bl	8011d80 <mpool_alloc>
 800eb0a:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800eb0c:	6005      	str	r5, [r0, #0]
    
    s->prevIn = 0.0f;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800eb12:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800eb14:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800eb16:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 800eb18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb1c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800eb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb24:	d413      	bmi.n	800eb4e <tSlide_initToPool+0x5e>
    {
        upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 800eb26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb2a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb32:	d40f      	bmi.n	800eb54 <tSlide_initToPool+0x64>
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800eb34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb38:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800eb3c:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800eb40:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800eb44:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800eb48:	ecbd 8b02 	vpop	{d8}
 800eb4c:	bd38      	pop	{r3, r4, r5, pc}
        upSlide = 1.0f;
 800eb4e:	eef0 8a67 	vmov.f32	s17, s15
 800eb52:	e7e8      	b.n	800eb26 <tSlide_initToPool+0x36>
        downSlide = 1.0f;
 800eb54:	eeb0 8a67 	vmov.f32	s16, s15
 800eb58:	e7ec      	b.n	800eb34 <tSlide_initToPool+0x44>

0800eb5a <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
 800eb5a:	b508      	push	{r3, lr}
    _tSlide* s = *sl;
 800eb5c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 800eb5e:	6801      	ldr	r1, [r0, #0]
 800eb60:	f003 f9fa 	bl	8011f58 <mpool_free>
}
 800eb64:	bd08      	pop	{r3, pc}

0800eb66 <tSlide_tick>:
    return s->currentOut;
}

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 800eb66:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 800eb68:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb6c:	eef4 7ac0 	vcmpe.f32	s15, s0
 800eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb74:	d810      	bhi.n	800eb98 <tSlide_tick+0x32>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800eb76:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eb7a:	edd3 6a04 	vldr	s13, [r3, #16]
 800eb7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eb82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb86:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800eb8a:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
 800eb8e:	ed93 0a02 	vldr	s0, [r3, #8]
 800eb92:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800eb96:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800eb98:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eb9c:	edd3 6a05 	vldr	s13, [r3, #20]
 800eba0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eba4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eba8:	edc3 7a02 	vstr	s15, [r3, #8]
 800ebac:	e7ed      	b.n	800eb8a <tSlide_tick+0x24>

0800ebae <tAllpassSO_initToPool>:
{
    tAllpassSO_initToPool(ft, &leaf->mempool);
}

void    tAllpassSO_initToPool     (tAllpassSO* const ft, tMempool* const mp)
{
 800ebae:	b538      	push	{r3, r4, r5, lr}
 800ebb0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800ebb2:	680d      	ldr	r5, [r1, #0]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	201c      	movs	r0, #28
 800ebb8:	f003 f8e2 	bl	8011d80 <mpool_alloc>
 800ebbc:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800ebbe:	6005      	str	r5, [r0, #0]
    
    f->prevSamp = 0.0f;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	6043      	str	r3, [r0, #4]
    f->prevPrevSamp = 0.0f;
 800ebc4:	6083      	str	r3, [r0, #8]
    f->a1 = 0.0f;
 800ebc6:	6143      	str	r3, [r0, #20]
    f->a2 = 0.0f;
 800ebc8:	6183      	str	r3, [r0, #24]
}
 800ebca:	bd38      	pop	{r3, r4, r5, pc}

0800ebcc <tAllpassSO_free>:

void    tAllpassSO_free  (tAllpassSO* const ft)
{
 800ebcc:	b508      	push	{r3, lr}
    _tAllpassSO* f = *ft;
 800ebce:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800ebd0:	6801      	ldr	r1, [r0, #0]
 800ebd2:	f003 f9c1 	bl	8011f58 <mpool_free>
}
 800ebd6:	bd08      	pop	{r3, pc}

0800ebd8 <tAllpassSO_setCoeff>:

void    tAllpassSO_setCoeff(tAllpassSO* const ft, Lfloat a1, Lfloat a2)
{
    _tAllpassSO* f = *ft;
 800ebd8:	6803      	ldr	r3, [r0, #0]
    ////if (prevSum != 0.0f)
    //{
    //    ratio = fabsf(newSum / prevSum);
    //}

    f->a1 = a1;
 800ebda:	ed83 0a05 	vstr	s0, [r3, #20]
    f->a2 = a2;
 800ebde:	edc3 0a06 	vstr	s1, [r3, #24]
    //f->prevSamp *= ratio;
    //f->prevPrevSamp *= ratio;
}
 800ebe2:	4770      	bx	lr

0800ebe4 <tAllpassSO_tick>:

Lfloat   tAllpassSO_tick(tAllpassSO* const ft, Lfloat input)
{
 800ebe4:	eeb0 7a40 	vmov.f32	s14, s0
    _tAllpassSO* f = *ft;
 800ebe8:	6803      	ldr	r3, [r0, #0]
    f->prevPrevSamp = input + (vn * -f->a2);
    return vn;]

*/
    //DFI version
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 800ebea:	edd3 6a06 	vldr	s13, [r3, #24]
 800ebee:	ee26 6a80 	vmul.f32	s12, s13, s0
 800ebf2:	ed93 5a01 	vldr	s10, [r3, #4]
 800ebf6:	edd3 7a05 	vldr	s15, [r3, #20]
 800ebfa:	ee65 5a27 	vmul.f32	s11, s10, s15
 800ebfe:	edd3 4a02 	vldr	s9, [r3, #8]
 800ec02:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800ec06:	ee36 6a25 	vadd.f32	s12, s12, s11
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800ec0a:	edd3 5a03 	vldr	s11, [r3, #12]
 800ec0e:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 800ec12:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ec16:	ed93 6a04 	vldr	s12, [r3, #16]
 800ec1a:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800ec1e:	ee37 0aa6 	vadd.f32	s0, s15, s13
    f->prevPrevSamp = f->prevSamp;
 800ec22:	ed83 5a02 	vstr	s10, [r3, #8]
    f->prevSamp = input;
 800ec26:	ed83 7a01 	vstr	s14, [r3, #4]
    f->prevPrevSamp2 = f->prevSamp2;
 800ec2a:	edc3 5a04 	vstr	s11, [r3, #16]
    f->prevSamp2 = output;
 800ec2e:	ed83 0a03 	vstr	s0, [r3, #12]

    return output;


}
 800ec32:	4770      	bx	lr

0800ec34 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 800ec34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec38:	4680      	mov	r8, r0
 800ec3a:	460e      	mov	r6, r1
 800ec3c:	4617      	mov	r7, r2
    _tMempool* m = *mp;
 800ec3e:	6814      	ldr	r4, [r2, #0]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800ec40:	4621      	mov	r1, r4
 800ec42:	2058      	movs	r0, #88	; 0x58
 800ec44:	f003 f89c 	bl	8011d80 <mpool_alloc>
 800ec48:	4605      	mov	r5, r0
 800ec4a:	f8c8 0000 	str.w	r0, [r8]
    f->mempool = m;
 800ec4e:	6004      	str	r4, [r0, #0]
    f->numFilts = numFilts;
 800ec50:	6046      	str	r6, [r0, #4]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800ec52:	4621      	mov	r1, r4
 800ec54:	00b0      	lsls	r0, r6, #2
 800ec56:	f003 f90b 	bl	8011e70 <mpool_calloc>
 800ec5a:	60a8      	str	r0, [r5, #8]
    f->k1[0] = -0.00050469f;
 800ec5c:	4b12      	ldr	r3, [pc, #72]	; (800eca8 <tThiranAllpassSOCascade_initToPool+0x74>)
 800ec5e:	61eb      	str	r3, [r5, #28]
    f->k2[0] = -0.0064264f;
 800ec60:	4b12      	ldr	r3, [pc, #72]	; (800ecac <tThiranAllpassSOCascade_initToPool+0x78>)
 800ec62:	626b      	str	r3, [r5, #36]	; 0x24
    f->k3[0] = -2.8743f;
 800ec64:	4b12      	ldr	r3, [pc, #72]	; (800ecb0 <tThiranAllpassSOCascade_initToPool+0x7c>)
 800ec66:	62eb      	str	r3, [r5, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 800ec68:	4b12      	ldr	r3, [pc, #72]	; (800ecb4 <tThiranAllpassSOCascade_initToPool+0x80>)
 800ec6a:	636b      	str	r3, [r5, #52]	; 0x34
    f->C2[0] = 2.0427f;
 800ec6c:	4b12      	ldr	r3, [pc, #72]	; (800ecb8 <tThiranAllpassSOCascade_initToPool+0x84>)
 800ec6e:	63eb      	str	r3, [r5, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 800ec70:	4b12      	ldr	r3, [pc, #72]	; (800ecbc <tThiranAllpassSOCascade_initToPool+0x88>)
 800ec72:	622b      	str	r3, [r5, #32]
    f->k2[1] = -0.014811f;
 800ec74:	4b12      	ldr	r3, [pc, #72]	; (800ecc0 <tThiranAllpassSOCascade_initToPool+0x8c>)
 800ec76:	62ab      	str	r3, [r5, #40]	; 0x28
    f->k3[1] = -2.9018f;
 800ec78:	4b12      	ldr	r3, [pc, #72]	; (800ecc4 <tThiranAllpassSOCascade_initToPool+0x90>)
 800ec7a:	632b      	str	r3, [r5, #48]	; 0x30
    f->C1[1] = 0.071089f;
 800ec7c:	4b12      	ldr	r3, [pc, #72]	; (800ecc8 <tThiranAllpassSOCascade_initToPool+0x94>)
 800ec7e:	63ab      	str	r3, [r5, #56]	; 0x38
    f->C2[1] = 2.1074f;
 800ec80:	4b12      	ldr	r3, [pc, #72]	; (800eccc <tThiranAllpassSOCascade_initToPool+0x98>)
 800ec82:	642b      	str	r3, [r5, #64]	; 0x40
    f->isHigh = 0;
 800ec84:	2400      	movs	r4, #0
 800ec86:	652c      	str	r4, [r5, #80]	; 0x50
    f->numFiltsMap[0] = numFilts;
 800ec88:	64ae      	str	r6, [r5, #72]	; 0x48
    f->numFiltsMap[1] = 1;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	64eb      	str	r3, [r5, #76]	; 0x4c
    f->numActiveFilters = numFilts;
 800ec8e:	646e      	str	r6, [r5, #68]	; 0x44
    for (int i = 0; i < numFilts; i++)
 800ec90:	e006      	b.n	800eca0 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 800ec92:	68a8      	ldr	r0, [r5, #8]
 800ec94:	4639      	mov	r1, r7
 800ec96:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ec9a:	f7ff ff88 	bl	800ebae <tAllpassSO_initToPool>
    for (int i = 0; i < numFilts; i++)
 800ec9e:	3401      	adds	r4, #1
 800eca0:	42b4      	cmp	r4, r6
 800eca2:	dbf6      	blt.n	800ec92 <tThiranAllpassSOCascade_initToPool+0x5e>
    }
}
 800eca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca8:	ba044d2c 	.word	0xba044d2c
 800ecac:	bbd2948d 	.word	0xbbd2948d
 800ecb0:	c037f488 	.word	0xc037f488
 800ecb4:	3d8e93e2 	.word	0x3d8e93e2
 800ecb8:	4002bb99 	.word	0x4002bb99
 800ecbc:	bb2e31d7 	.word	0xbb2e31d7
 800ecc0:	bc72a9d6 	.word	0xbc72a9d6
 800ecc4:	c039b717 	.word	0xc039b717
 800ecc8:	3d91971c 	.word	0x3d91971c
 800eccc:	4006dfa4 	.word	0x4006dfa4

0800ecd0 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 800ecd0:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800ecd2:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800ecd4:	2400      	movs	r4, #0
 800ecd6:	e005      	b.n	800ece4 <tThiranAllpassSOCascade_free+0x14>
    {
        tAllpassSO_free(&f->filters[i]);
 800ecd8:	68a8      	ldr	r0, [r5, #8]
 800ecda:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800ecde:	f7ff ff75 	bl	800ebcc <tAllpassSO_free>
    for (int i = 0; i < f->numFilts; i++)
 800ece2:	3401      	adds	r4, #1
 800ece4:	686b      	ldr	r3, [r5, #4]
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	dcf6      	bgt.n	800ecd8 <tThiranAllpassSOCascade_free+0x8>
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 800ecea:	6829      	ldr	r1, [r5, #0]
 800ecec:	68a8      	ldr	r0, [r5, #8]
 800ecee:	f003 f933 	bl	8011f58 <mpool_free>
    mpool_free((char*)f, f->mempool);
 800ecf2:	6829      	ldr	r1, [r5, #0]
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	f003 f92f 	bl	8011f58 <mpool_free>
}
 800ecfa:	bd38      	pop	{r3, r4, r5, pc}

0800ecfc <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 800ecfc:	b538      	push	{r3, r4, r5, lr}
 800ecfe:	ed2d 8b08 	vpush	{d8-d11}
 800ed02:	eeb0 8a60 	vmov.f32	s16, s1
 800ed06:	eef0 8a41 	vmov.f32	s17, s2
    _tThiranAllpassSOCascade* f = *ft;
 800ed0a:	6804      	ldr	r4, [r0, #0]

    f->B = dispersionCoeff;
 800ed0c:	ed84 0a03 	vstr	s0, [r4, #12]
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ed10:	ed9f aa67 	vldr	s20, [pc, #412]	; 800eeb0 <tThiranAllpassSOCascade_setCoeff+0x1b4>
 800ed14:	ee20 0a8a 	vmul.f32	s0, s1, s20
 800ed18:	f007 f92a 	bl	8015f70 <log2f>
 800ed1c:	eef2 9a08 	vmov.f32	s19, #40	; 0x41400000  12.0
 800ed20:	ee20 0a29 	vmul.f32	s0, s0, s19
 800ed24:	ed9f 9a63 	vldr	s18, [pc, #396]	; 800eeb4 <tThiranAllpassSOCascade_setCoeff+0x1b8>
 800ed28:	ee30 0a09 	vadd.f32	s0, s0, s18
 800ed2c:	ed84 0a04 	vstr	s0, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800ed30:	ee28 0a28 	vmul.f32	s0, s16, s17
 800ed34:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800ed38:	f007 f91a 	bl	8015f70 <log2f>
 800ed3c:	ee20 0a29 	vmul.f32	s0, s0, s19
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    Lfloat howHigh = LEAF_map(iKey2, 16.0f, 46.0f, 0.0f, 1.0f);
 800ed40:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800eeb8 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 800ed44:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 800ed48:	eef0 1a48 	vmov.f32	s3, s16
 800ed4c:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800eebc <tThiranAllpassSOCascade_setCoeff+0x1c0>
 800ed50:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 800ed54:	ee30 0a09 	vadd.f32	s0, s0, s18
 800ed58:	f002 fbae 	bl	80114b8 <LEAF_map>
 800ed5c:	eef0 0a40 	vmov.f32	s1, s0
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 800ed60:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ed64:	eeb0 0a48 	vmov.f32	s0, s16
 800ed68:	f002 fc8c 	bl	8011684 <LEAF_clip>
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 800ed6c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800ed70:	ee7a 7ac0 	vsub.f32	s15, s21, s0

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800ed74:	ed94 8a07 	vldr	s16, [r4, #28]
 800ed78:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ed7c:	ed94 7a08 	vldr	s14, [r4, #32]
 800ed80:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ed84:	ee38 8a07 	vadd.f32	s16, s16, s14
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800ed88:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 800ed8c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ed90:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800ed94:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ed98:	ee39 9a07 	vadd.f32	s18, s18, s14
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800ed9c:	ed94 ba0b 	vldr	s22, [r4, #44]	; 0x2c
 800eda0:	ee2b ba27 	vmul.f32	s22, s22, s15
 800eda4:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800eda8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800edac:	ee3b ba07 	vadd.f32	s22, s22, s14
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800edb0:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
 800edb4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800edb8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800edbc:	ee27 7a00 	vmul.f32	s14, s14, s0
 800edc0:	ee78 8a87 	vadd.f32	s17, s17, s14
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800edc4:	ed94 aa0f 	vldr	s20, [r4, #60]	; 0x3c
 800edc8:	ee2a aa27 	vmul.f32	s20, s20, s15
 800edcc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800edd0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800edd4:	ee3a aa27 	vadd.f32	s20, s20, s15
    Lfloat logB = logf(f->B);
 800edd8:	ed94 0a03 	vldr	s0, [r4, #12]
 800eddc:	f007 f862 	bl	8015ea4 <logf>
 800ede0:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 800ede4:	ee28 8a00 	vmul.f32	s16, s16, s0
 800ede8:	ee28 8a00 	vmul.f32	s16, s16, s0
 800edec:	ee29 9a00 	vmul.f32	s18, s18, s0
 800edf0:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat kd = expf(temp);
 800edf4:	ee38 0a0b 	vadd.f32	s0, s16, s22
 800edf8:	f006 ffe0 	bl	8015dbc <expf>
 800edfc:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat Cd = expf((C1 * logB) + C2);
 800ee00:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800ee04:	ee30 0a0a 	vadd.f32	s0, s0, s20
 800ee08:	f006 ffd8 	bl	8015dbc <expf>
    Lfloat D = expf(Cd-(f->iKey*kd));
 800ee0c:	edd4 7a04 	vldr	s15, [r4, #16]
 800ee10:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ee14:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee18:	f006 ffd0 	bl	8015dbc <expf>
 800ee1c:	eeb0 8a40 	vmov.f32	s16, s0
    f->D = D;
 800ee20:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 800ee24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ee28:	ee30 5a47 	vsub.f32	s10, s0, s14
 800ee2c:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800ee30:	ee65 6a26 	vmul.f32	s13, s10, s13
	a_k /= (D - 1.0f);
 800ee34:	ee70 7a6a 	vsub.f32	s15, s0, s21
 800ee38:	ee86 6aa7 	vdiv.f32	s12, s13, s15

	a_k *= (D - 1.0f);
 800ee3c:	ee27 6a86 	vmul.f32	s12, s15, s12
	a_k /= D;
 800ee40:	eec6 6a00 	vdiv.f32	s13, s12, s0

	a_k *= D;
 800ee44:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 800ee48:	ee70 5a2a 	vadd.f32	s11, s0, s21
 800ee4c:	ee86 6aa5 	vdiv.f32	s12, s13, s11

	f->a[0] = a_k;
 800ee50:	ed84 6a05 	vstr	s12, [r4, #20]

	a_k = 1.0f;

	a_k *= (D - 2.0f);
	a_k /= D;
 800ee54:	eec5 6a00 	vdiv.f32	s13, s10, s0

	a_k *= (D - 1.0f);
 800ee58:	ee67 7aa6 	vmul.f32	s15, s15, s13
	a_k /= (D + 1.0f);
 800ee5c:	eec7 6aa5 	vdiv.f32	s13, s15, s11

	a_k *= D;
 800ee60:	ee60 7a26 	vmul.f32	s15, s0, s13
	a_k /= (D + 2.0f);
 800ee64:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ee68:	eec7 6a87 	vdiv.f32	s13, s15, s14

	f->a[1] = a_k;
 800ee6c:	edc4 6a06 	vstr	s13, [r4, #24]

	if (f->a[0] > 0.99999999f)
 800ee70:	eeb4 6aea 	vcmpe.f32	s12, s21
 800ee74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee78:	dd01      	ble.n	800ee7e <tThiranAllpassSOCascade_setCoeff+0x182>
	{
		f->a[0] = 0.99999999f;
 800ee7a:	edc4 aa05 	vstr	s21, [r4, #20]
{
 800ee7e:	2500      	movs	r5, #0
 800ee80:	e009      	b.n	800ee96 <tThiranAllpassSOCascade_setCoeff+0x19a>
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 800ee82:	68a0      	ldr	r0, [r4, #8]
 800ee84:	edd4 0a06 	vldr	s1, [r4, #24]
 800ee88:	ed94 0a05 	vldr	s0, [r4, #20]
 800ee8c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800ee90:	f7ff fea2 	bl	800ebd8 <tAllpassSO_setCoeff>
    for (int i = 0; i < f->numActiveFilters; i++)
 800ee94:	3501      	adds	r5, #1
 800ee96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee98:	42ab      	cmp	r3, r5
 800ee9a:	dcf2      	bgt.n	800ee82 <tThiranAllpassSOCascade_setCoeff+0x186>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 800ee9c:	ee07 3a90 	vmov	s15, r3
 800eea0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 800eea4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800eea8:	ecbd 8b08 	vpop	{d8-d11}
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	bf00      	nop
 800eeb0:	3b14f209 	.word	0x3b14f209
 800eeb4:	42440000 	.word	0x42440000
 800eeb8:	00000000 	.word	0x00000000
 800eebc:	42380000 	.word	0x42380000

0800eec0 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
 800eec0:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800eec2:	6805      	ldr	r5, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 800eec4:	2400      	movs	r4, #0
 800eec6:	e005      	b.n	800eed4 <tThiranAllpassSOCascade_tick+0x14>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
 800eec8:	68a8      	ldr	r0, [r5, #8]
 800eeca:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800eece:	f7ff fe89 	bl	800ebe4 <tAllpassSO_tick>
    for (int i = 0; i < f->numActiveFilters; i++)
 800eed2:	3401      	adds	r4, #1
 800eed4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800eed6:	42a3      	cmp	r3, r4
 800eed8:	dcf6      	bgt.n	800eec8 <tThiranAllpassSOCascade_tick+0x8>
    }
    return sample;
}
 800eeda:	bd38      	pop	{r3, r4, r5, pc}

0800eedc <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 800eedc:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800eede:	2300      	movs	r3, #0
 800eee0:	e009      	b.n	800eef6 <tThiranAllpassSOCascade_clear+0x1a>
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 800eee2:	6891      	ldr	r1, [r2, #8]
 800eee4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800eee8:	2100      	movs	r1, #0
 800eeea:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 800eeec:	6890      	ldr	r0, [r2, #8]
 800eeee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800eef2:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 800eef4:	3301      	adds	r3, #1
 800eef6:	6851      	ldr	r1, [r2, #4]
 800eef8:	4299      	cmp	r1, r3
 800eefa:	dcf2      	bgt.n	800eee2 <tThiranAllpassSOCascade_clear+0x6>

    }
}
 800eefc:	4770      	bx	lr

0800eefe <tOnePole_free>:
    
    tOnePole_setFreq(ft, freq);
}

void    tOnePole_free   (tOnePole* const ft)
{
 800eefe:	b508      	push	{r3, lr}
    _tOnePole* f = *ft;
 800ef00:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800ef02:	6801      	ldr	r1, [r0, #0]
 800ef04:	f003 f828 	bl	8011f58 <mpool_free>
}
 800ef08:	bd08      	pop	{r3, pc}
	...

0800ef0c <tOnePole_setFreq>:
    
    f->a1 = -thePole;
}

void        tOnePole_setFreq        (tOnePole* const ft, Lfloat freq)
{
 800ef0c:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 800ef0e:	6804      	ldr	r4, [r0, #0]
    
    f->freq = freq;
 800ef10:	ed84 0a01 	vstr	s0, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800ef14:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
 800ef18:	ee60 0a80 	vmul.f32	s1, s1, s0
 800ef1c:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ef20:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ef24:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800ef40 <tOnePole_setFreq+0x34>
 800ef28:	f002 fbac 	bl	8011684 <LEAF_clip>
 800ef2c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 800ef30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ef34:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ef38:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop
 800ef40:	00000000 	.word	0x00000000

0800ef44 <tOnePole_initToPool>:
{
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	ed2d 8b02 	vpush	{d8}
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800ef50:	680d      	ldr	r5, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800ef52:	4629      	mov	r1, r5
 800ef54:	2028      	movs	r0, #40	; 0x28
 800ef56:	f002 ff13 	bl	8011d80 <mpool_alloc>
 800ef5a:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800ef5c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800ef5e:	686a      	ldr	r2, [r5, #4]
    f->gain = 1.0f;
 800ef60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ef64:	6083      	str	r3, [r0, #8]
    f->a0 = 1.0;
 800ef66:	60c3      	str	r3, [r0, #12]
    f->lastIn = 0.0f;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61c3      	str	r3, [r0, #28]
    f->lastOut = 0.0f;
 800ef6c:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800ef6e:	68d3      	ldr	r3, [r2, #12]
 800ef70:	6243      	str	r3, [r0, #36]	; 0x24
    tOnePole_setFreq(ft, freq);
 800ef72:	eeb0 0a48 	vmov.f32	s0, s16
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7ff ffc8 	bl	800ef0c <tOnePole_setFreq>
}
 800ef7c:	ecbd 8b02 	vpop	{d8}
 800ef80:	bd38      	pop	{r3, r4, r5, pc}

0800ef82 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 800ef82:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
 800ef84:	edd3 7a02 	vldr	s15, [r3, #8]
 800ef88:	ee67 7a80 	vmul.f32	s15, s15, s0
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800ef8c:	ed93 0a05 	vldr	s0, [r3, #20]
 800ef90:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ef94:	ed93 7a04 	vldr	s14, [r3, #16]
 800ef98:	edd3 6a08 	vldr	s13, [r3, #32]
 800ef9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800efa0:	ee30 0a07 	vadd.f32	s0, s0, s14
    
    f->lastIn = in;
 800efa4:	edc3 7a07 	vstr	s15, [r3, #28]
    f->lastOut = out;
 800efa8:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 800efac:	4770      	bx	lr
	...

0800efb0 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
 800efb0:	b510      	push	{r4, lr}
 800efb2:	ed2d 8b02 	vpush	{d8}
    _tOnePole* f = *ft;
 800efb6:	6804      	ldr	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800efb8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800efbc:	eec8 0a00 	vdiv.f32	s1, s16, s0
 800efc0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eff8 <tOnePole_setSampleRate+0x48>
 800efc4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800efc8:	edc4 0a09 	vstr	s1, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800efcc:	edd4 7a01 	vldr	s15, [r4, #4]
 800efd0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800efd4:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800efd8:	eeb0 1a48 	vmov.f32	s2, s16
 800efdc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800effc <tOnePole_setSampleRate+0x4c>
 800efe0:	f002 fb50 	bl	8011684 <LEAF_clip>
 800efe4:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 800efe8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800efec:	ed84 8a04 	vstr	s16, [r4, #16]
}
 800eff0:	ecbd 8b02 	vpop	{d8}
 800eff4:	bd10      	pop	{r4, pc}
 800eff6:	bf00      	nop
 800eff8:	40c90fdb 	.word	0x40c90fdb
 800effc:	00000000 	.word	0x00000000

0800f000 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 800f000:	b538      	push	{r3, r4, r5, lr}
 800f002:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800f004:	680c      	ldr	r4, [r1, #0]
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 800f006:	4621      	mov	r1, r4
 800f008:	201c      	movs	r0, #28
 800f00a:	f002 feb9 	bl	8011d80 <mpool_alloc>
 800f00e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f010:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800f012:	6862      	ldr	r2, [r4, #4]
    
    f->poleCoeff     = 0.9f;
 800f014:	4b06      	ldr	r3, [pc, #24]	; (800f030 <tCookOnePole_initToPool+0x30>)
 800f016:	6043      	str	r3, [r0, #4]
    f->gain         = 1.0f;
 800f018:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f01c:	6083      	str	r3, [r0, #8]
    f->sgain         = 0.1f;
 800f01e:	4b05      	ldr	r3, [pc, #20]	; (800f034 <tCookOnePole_initToPool+0x34>)
 800f020:	60c3      	str	r3, [r0, #12]
    f->output         = 0.0f;
 800f022:	2300      	movs	r3, #0
 800f024:	6103      	str	r3, [r0, #16]
    f->lastOutput    = 0.f;
 800f026:	6143      	str	r3, [r0, #20]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f028:	68d3      	ldr	r3, [r2, #12]
 800f02a:	6183      	str	r3, [r0, #24]
}
 800f02c:	bd38      	pop	{r3, r4, r5, pc}
 800f02e:	bf00      	nop
 800f030:	3f666666 	.word	0x3f666666
 800f034:	3dcccccd 	.word	0x3dcccccd

0800f038 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
 800f038:	b508      	push	{r3, lr}
    _tCookOnePole* f = *ft;
 800f03a:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800f03c:	6801      	ldr	r1, [r0, #0]
 800f03e:	f002 ff8b 	bl	8011f58 <mpool_free>
}
 800f042:	bd08      	pop	{r3, pc}

0800f044 <tCookOnePole_setPole>:


void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
 800f044:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = aValue;
 800f046:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0)                   // Normalize gain to 1.0 max
 800f04a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f052:	dd10      	ble.n	800f076 <tCookOnePole_setPole+0x32>
        onepole->sgain = onepole->gain * (1.0 - onepole->poleCoeff);
 800f054:	ed93 7a02 	vldr	s14, [r3, #8]
 800f058:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800f05c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800f060:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f064:	ee36 6b40 	vsub.f64	d6, d6, d0
 800f068:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f06c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800f070:	ed83 7a03 	vstr	s14, [r3, #12]
 800f074:	4770      	bx	lr
      else
        onepole->sgain = onepole->gain * (1.0 + onepole->poleCoeff);
 800f076:	ed93 7a02 	vldr	s14, [r3, #8]
 800f07a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800f07e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800f082:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f086:	ee30 0b06 	vadd.f64	d0, d0, d6
 800f08a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800f08e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800f092:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800f096:	4770      	bx	lr

0800f098 <tCookOnePole_setGainAndPole>:
        onepole->sgain = onepole->gain * (1.0 + onepole->poleCoeff);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 800f098:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 800f09a:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 800f09e:	ed83 0a03 	vstr	s0, [r3, #12]
     
}
 800f0a2:	4770      	bx	lr

0800f0a4 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 800f0a4:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 800f0a6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f0aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f0ae:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0b2:	ed93 7a04 	vldr	s14, [r3, #16]
 800f0b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f0be:	ed83 0a04 	vstr	s0, [r3, #16]
    onepole->lastOutput = onepole->output;
 800f0c2:	ed83 0a05 	vstr	s0, [r3, #20]
    return onepole->lastOutput;
}
 800f0c6:	4770      	bx	lr

0800f0c8 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
 800f0c8:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800f0ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f0d2:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800f0e0 <tCookOnePole_setSampleRate+0x18>
 800f0d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0da:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800f0de:	4770      	bx	lr
 800f0e0:	40c90fdb 	.word	0x40c90fdb

0800f0e4 <tSVF_initToPool>:
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 800f0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e6:	ed2d 8b02 	vpush	{d8}
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	460f      	mov	r7, r1
 800f0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800f0f2:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800f0f6:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	204c      	movs	r0, #76	; 0x4c
 800f0fc:	f002 fe40 	bl	8011d80 <mpool_alloc>
 800f100:	4604      	mov	r4, r0
 800f102:	6030      	str	r0, [r6, #0]
    svf->mempool = m;
 800f104:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800f106:	686e      	ldr	r6, [r5, #4]
    
    svf->sampleRate = leaf->sampleRate;
 800f108:	6833      	ldr	r3, [r6, #0]
 800f10a:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 800f10c:	ed96 0a01 	vldr	s0, [r6, #4]
 800f110:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
    
    svf->type = type;
 800f114:	7107      	strb	r7, [r0, #4]
    
    svf->ic1eq = 0;
 800f116:	2500      	movs	r5, #0
 800f118:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 800f11a:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 800f11c:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800f120:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800f124:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f1e0 <tSVF_initToPool+0xfc>
 800f128:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f12c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f130:	f007 fb8e 	bl	8016850 <tanf>
 800f134:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->k = 1.0f/Q;
 800f138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f13c:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800f140:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f144:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f148:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f14c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f154:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g*svf->a1;
 800f158:	ee60 7a07 	vmul.f32	s15, s0, s14
 800f15c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 800f160:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f164:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    
    svf->cH = 0.0f;
 800f168:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cB = 0.0f;
 800f16a:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 800f16c:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->cL = 1.0f;
 800f16e:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    
    if (type == SVFTypeLowpass)
 800f172:	2f01      	cmp	r7, #1
 800f174:	d00b      	beq.n	800f18e <tSVF_initToPool+0xaa>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800f176:	2f04      	cmp	r7, #4
 800f178:	d809      	bhi.n	800f18e <tSVF_initToPool+0xaa>
 800f17a:	e8df f007 	tbb	[pc, r7]
 800f17e:	0816      	.short	0x0816
 800f180:	1d03      	.short	0x1d03
 800f182:	25          	.byte	0x25
 800f183:	00          	.byte	0x00
    {
        svf->cH = 0.0f;
        svf->cB = 1.0f;
 800f184:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f188:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
 800f18a:	2300      	movs	r3, #0
 800f18c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 800f18e:	ed96 7a00 	vldr	s14, [r6]
 800f192:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f1e4 <tSVF_initToPool+0x100>
 800f196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19e:	dd1c      	ble.n	800f1da <tSVF_initToPool+0xf6>
    {
    	svf->table = __filterTanhTable_96000;
 800f1a0:	4b11      	ldr	r3, [pc, #68]	; (800f1e8 <tSVF_initToPool+0x104>)
 800f1a2:	64a3      	str	r3, [r4, #72]	; 0x48
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
    }
}
 800f1a4:	ecbd 8b02 	vpop	{d8}
 800f1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 800f1aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f1ae:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f1b0:	4b0e      	ldr	r3, [pc, #56]	; (800f1ec <tSVF_initToPool+0x108>)
 800f1b2:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -1.0f;
 800f1b4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1b6:	e7ea      	b.n	800f18e <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800f1b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f1bc:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f1be:	4b0b      	ldr	r3, [pc, #44]	; (800f1ec <tSVF_initToPool+0x108>)
 800f1c0:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1c6:	e7e2      	b.n	800f18e <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800f1c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f1cc:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f1ce:	4b07      	ldr	r3, [pc, #28]	; (800f1ec <tSVF_initToPool+0x108>)
 800f1d0:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 800f1d2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800f1d6:	63a3      	str	r3, [r4, #56]	; 0x38
 800f1d8:	e7d9      	b.n	800f18e <tSVF_initToPool+0xaa>
    	svf->table = __filterTanhTable_48000;
 800f1da:	4b05      	ldr	r3, [pc, #20]	; (800f1f0 <tSVF_initToPool+0x10c>)
 800f1dc:	64a3      	str	r3, [r4, #72]	; 0x48
}
 800f1de:	e7e1      	b.n	800f1a4 <tSVF_initToPool+0xc0>
 800f1e0:	40490fdb 	.word	0x40490fdb
 800f1e4:	47afc800 	.word	0x47afc800
 800f1e8:	0801c990 	.word	0x0801c990
 800f1ec:	bf800000 	.word	0xbf800000
 800f1f0:	08018990 	.word	0x08018990

0800f1f4 <tSVF_init>:
{
 800f1f4:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800f1f6:	3218      	adds	r2, #24
 800f1f8:	f7ff ff74 	bl	800f0e4 <tSVF_initToPool>
}
 800f1fc:	bd08      	pop	{r3, pc}

0800f1fe <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
 800f1fe:	b508      	push	{r3, lr}
    _tSVF* svf = *svff;
 800f200:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 800f202:	6801      	ldr	r1, [r0, #0]
 800f204:	f002 fea8 	bl	8011f58 <mpool_free>
}
 800f208:	bd08      	pop	{r3, pc}

0800f20a <tSVF_tick>:

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800f20a:	6803      	ldr	r3, [r0, #0]
    {
        v0 = 0.0f;
    }
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 800f20c:	ed93 6a06 	vldr	s12, [r3, #24]
 800f210:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f214:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f218:	edd3 5a05 	vldr	s11, [r3, #20]
 800f21c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f220:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f224:	ee67 6a85 	vmul.f32	s13, s15, s10
 800f228:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f22c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800f230:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f234:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800f238:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f23c:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800f240:	ee77 6a07 	vadd.f32	s13, s14, s14
 800f244:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800f248:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800f24c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f250:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f254:	edc3 6a06 	vstr	s13, [r3, #24]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f258:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800f25c:	ee26 0a80 	vmul.f32	s0, s13, s0
 800f260:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800f264:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f268:	ee30 0a26 	vadd.f32	s0, s0, s13
 800f26c:	edd3 6a08 	vldr	s13, [r3, #32]
 800f270:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f274:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800f278:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f27c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f280:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 800f284:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800f288:	ee37 0a00 	vadd.f32	s0, s14, s0
 800f28c:	4770      	bx	lr
	...

0800f290 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 800f290:	b510      	push	{r4, lr}
 800f292:	eef0 0a40 	vmov.f32	s1, s0
    _tSVF* svf = *svff;
 800f296:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 800f298:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 800f29c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f2a0:	ee21 1a27 	vmul.f32	s2, s2, s15
 800f2a4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800f2f8 <tSVF_setFreq+0x68>
 800f2a8:	f002 f9ec 	bl	8011684 <LEAF_clip>
 800f2ac:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 800f2b0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f2fc <tSVF_setFreq+0x6c>
 800f2b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2b8:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800f2bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2c0:	f007 fac6 	bl	8016850 <tanf>
 800f2c4:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f2c8:	edd4 7a08 	vldr	s15, [r4, #32]
 800f2cc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f2d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f2d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2e0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f2e4:	ee60 7a07 	vmul.f32	s15, s0, s14
 800f2e8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f2ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2f0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 800f2f4:	bd10      	pop	{r4, pc}
 800f2f6:	bf00      	nop
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	40490fdb 	.word	0x40490fdb

0800f300 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
 800f300:	6802      	ldr	r2, [r0, #0]
	svf->cutoffMIDI = cutoff;
 800f302:	ed82 0a04 	vstr	s0, [r2, #16]
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 800f306:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f38c <tSVF_setFreqFast+0x8c>
 800f30a:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 800f30e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f312:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 800f316:	f640 71fe 	movw	r1, #4094	; 0xffe
 800f31a:	428b      	cmp	r3, r1
 800f31c:	dc03      	bgt.n	800f326 <tSVF_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 800f31e:	2b00      	cmp	r3, #0
 800f320:	da03      	bge.n	800f32a <tSVF_setFreqFast+0x2a>
    {
    	intVer = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	e001      	b.n	800f32a <tSVF_setFreqFast+0x2a>
    	intVer = 4094;
 800f326:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f32a:	ee07 3a90 	vmov	s15, r3
 800f32e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f332:	ee30 0a67 	vsub.f32	s0, s0, s15

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f336:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800f338:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f33c:	edd0 7a00 	vldr	s15, [r0]
 800f340:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f344:	ee36 7a40 	vsub.f32	s14, s12, s0
 800f348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f34c:	3301      	adds	r3, #1
 800f34e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f352:	ed91 7a00 	vldr	s14, [r1]
 800f356:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f35a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f35e:	edc2 7a07 	vstr	s15, [r2, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f362:	ed92 7a08 	vldr	s14, [r2, #32]
 800f366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f36a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f36e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f372:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800f376:	edc2 6a09 	vstr	s13, [r2, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f37a:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800f37e:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f382:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f386:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
}
 800f38a:	4770      	bx	lr
 800f38c:	41f4898d 	.word	0x41f4898d

0800f390 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
 800f390:	6803      	ldr	r3, [r0, #0]
    svf->Q = Q;
 800f392:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->k = 1.0f/Q;
 800f396:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f39a:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800f39e:	edc3 7a08 	vstr	s15, [r3, #32]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f3a2:	ed93 7a07 	vldr	s14, [r3, #28]
 800f3a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f3b2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800f3b6:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f3ba:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f3be:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f3c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3c6:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 800f3ca:	4770      	bx	lr

0800f3cc <tSVF_setSampleRate>:
    }
}

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
 800f3cc:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 800f3ce:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 800f3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f3d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f3da:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800f3de:	4770      	bx	lr

0800f3e0 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	ed2d 8b02 	vpush	{d8}
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800f3ec:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	2018      	movs	r0, #24
 800f3f2:	f002 fd3d 	bl	8011e70 <mpool_calloc>
 800f3f6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f3f8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800f3fa:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f3fc:	edd3 7a03 	vldr	s15, [r3, #12]
 800f400:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f404:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f410:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 800f414:	2300      	movs	r3, #0
 800f416:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800f418:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 800f41a:	ed80 8a04 	vstr	s16, [r0, #16]
}
 800f41e:	ecbd 8b02 	vpop	{d8}
 800f422:	bd38      	pop	{r3, r4, r5, pc}

0800f424 <tHighpass_init>:
{
 800f424:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 800f426:	3118      	adds	r1, #24
 800f428:	f7ff ffda 	bl	800f3e0 <tHighpass_initToPool>
}
 800f42c:	bd08      	pop	{r3, pc}

0800f42e <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
 800f42e:	b508      	push	{r3, lr}
    _tHighpass* f = *ft;
 800f430:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800f432:	6801      	ldr	r1, [r0, #0]
 800f434:	f002 fd90 	bl	8011f58 <mpool_free>
}
 800f438:	bd08      	pop	{r3, pc}

0800f43a <tHighpass_setFreq>:

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 800f43a:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
 800f43c:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f440:	ed93 7a05 	vldr	s14, [r3, #20]
 800f444:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f448:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f44c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f450:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800f454:	4770      	bx	lr

0800f456 <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
 800f456:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
 800f45a:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800f45c:	edd3 7a01 	vldr	s15, [r3, #4]
 800f460:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f464:	edd3 6a03 	vldr	s13, [r3, #12]
 800f468:	ed93 6a02 	vldr	s12, [r3, #8]
 800f46c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f470:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800f474:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
 800f478:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
 800f47c:	4770      	bx	lr
	...

0800f480 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
 800f480:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f486:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f48a:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f4a8 <tHighpass_setSampleRate+0x28>
 800f48e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f492:	edc3 7a05 	vstr	s15, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 800f496:	edd3 6a04 	vldr	s13, [r3, #16]
 800f49a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f49e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f4a2:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800f4a6:	4770      	bx	lr
 800f4a8:	40c90fdb 	.word	0x40c90fdb

0800f4ac <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 800f4ac:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800f4ae:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800f4b2:	edd3 6a02 	vldr	s13, [r3, #8]
 800f4b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f4ba:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f4be:	ed93 6a03 	vldr	s12, [r3, #12]
 800f4c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f4c6:	ed93 7a06 	vldr	s14, [r3, #24]
 800f4ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800f4ce:	ed93 7a04 	vldr	s14, [r3, #16]
 800f4d2:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 800f4d6:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 800f4da:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800f4de:	edc3 5a02 	vstr	s11, [r3, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 800f4e2:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 800f4e6:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 800f4ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f4ee:	ed83 7a03 	vstr	s14, [r3, #12]
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800f4f2:	ed93 7a07 	vldr	s14, [r3, #28]
 800f4f6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f4fa:	ed93 6a08 	vldr	s12, [r3, #32]
 800f4fe:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f502:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f506:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800f50a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800f50e:	ee37 0a00 	vadd.f32	s0, s14, s0
 800f512:	4770      	bx	lr

0800f514 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800f514:	b510      	push	{r4, lr}
 800f516:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilter* f = *vf;
 800f51a:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f51c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 800f520:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800f774 <tVZFilter_calcCoeffs+0x260>
 800f524:	ee28 0a80 	vmul.f32	s0, s17, s0
 800f528:	ed94 9a12 	vldr	s18, [r4, #72]	; 0x48
 800f52c:	ee20 0a09 	vmul.f32	s0, s0, s18
 800f530:	f007 f98e 	bl	8016850 <tanf>
 800f534:	eeb0 8a40 	vmov.f32	s16, s0
 800f538:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
 800f53c:	7923      	ldrb	r3, [r4, #4]
 800f53e:	2b0a      	cmp	r3, #10
 800f540:	d80e      	bhi.n	800f560 <tVZFilter_calcCoeffs+0x4c>
 800f542:	e8df f003 	tbb	[pc, r3]
 800f546:	262d      	.short	0x262d
 800f548:	4e473b34 	.word	0x4e473b34
 800f54c:	06c4a189 	.word	0x06c4a189
 800f550:	b9          	.byte	0xb9
 800f551:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 800f552:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f554:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800f556:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f55a:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 800f55c:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 800f55e:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
 800f560:	edd4 7a05 	vldr	s15, [r4, #20]
 800f564:	ed94 7a04 	vldr	s14, [r4, #16]
 800f568:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f56c:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f570:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f574:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f578:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f57c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f580:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f588:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800f58c:	ecbd 8b04 	vpop	{d8-d9}
 800f590:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f592:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f596:	61e3      	str	r3, [r4, #28]
 800f598:	2300      	movs	r3, #0
 800f59a:	6223      	str	r3, [r4, #32]
 800f59c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f59e:	e7df      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	61e3      	str	r3, [r4, #28]
 800f5a4:	6223      	str	r3, [r4, #32]
 800f5a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f5aa:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f5ac:	e7d8      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	61e3      	str	r3, [r4, #28]
 800f5b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f5b6:	6222      	str	r2, [r4, #32]
 800f5b8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f5ba:	e7d1      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	61e3      	str	r3, [r4, #28]
 800f5c0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f5c4:	ed94 7a05 	vldr	s14, [r4, #20]
 800f5c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5cc:	edc4 7a08 	vstr	s15, [r4, #32]
 800f5d0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f5d2:	e7c5      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f5d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f5d8:	61e3      	str	r3, [r4, #28]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	6222      	str	r2, [r4, #32]
 800f5de:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f5e0:	e7be      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f5e2:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f5e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f5ea:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800f5ee:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f5f2:	f006 fe5d 	bl	80162b0 <powf>
 800f5f6:	ee28 0a80 	vmul.f32	s0, s17, s0
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f5fa:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800f774 <tVZFilter_calcCoeffs+0x260>
 800f5fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f602:	ee29 0a00 	vmul.f32	s0, s18, s0
 800f606:	f007 f923 	bl	8016850 <tanf>
            Lfloat r  = f->g/wl;
 800f60a:	eec8 7a00 	vdiv.f32	s15, s16, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f60e:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f612:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f616:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f61a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800f61e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f622:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f626:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f62a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f62e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f632:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f636:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800f63a:	f007 f8dd 	bl	80167f8 <sqrtf>
 800f63e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f642:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f646:	edc4 8a07 	vstr	s17, [r4, #28]
 800f64a:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f64e:	ed84 8a08 	vstr	s16, [r4, #32]
 800f652:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 800f656:	e783      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 800f658:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f65c:	eeb0 0a68 	vmov.f32	s0, s17
 800f660:	f007 f8ca 	bl	80167f8 <sqrtf>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f664:	f007 f8c8 	bl	80167f8 <sqrtf>
 800f668:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800f66c:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f670:	edc4 8a07 	vstr	s17, [r4, #28]
 800f674:	edd4 7a05 	vldr	s15, [r4, #20]
 800f678:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f67c:	edc4 8a08 	vstr	s17, [r4, #32]
 800f680:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f684:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f686:	e76b      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 800f688:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f68c:	eeb0 0a68 	vmov.f32	s0, s17
 800f690:	f007 f8b2 	bl	80167f8 <sqrtf>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f694:	f007 f8b0 	bl	80167f8 <sqrtf>
 800f698:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f69c:	ed84 8a04 	vstr	s16, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f6a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f6a4:	61e3      	str	r3, [r4, #28]
 800f6a6:	edd4 7a05 	vldr	s15, [r4, #20]
 800f6aa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f6ae:	edc4 7a08 	vstr	s15, [r4, #32]
 800f6b2:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 800f6b6:	e753      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f6b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f6bc:	61e3      	str	r3, [r4, #28]
 800f6be:	edd4 7a05 	vldr	s15, [r4, #20]
 800f6c2:	eef1 7a67 	vneg.f32	s15, s15
 800f6c6:	edc4 7a08 	vstr	s15, [r4, #32]
 800f6ca:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f6cc:	e748      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f6ce:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 800f6d2:	ee38 8a08 	vadd.f32	s16, s16, s16
 800f6d6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f6da:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f6de:	ed9f 9a26 	vldr	s18, [pc, #152]	; 800f778 <tVZFilter_calcCoeffs+0x264>
 800f6e2:	eef0 0a49 	vmov.f32	s1, s18
 800f6e6:	eeb1 0a48 	vneg.f32	s0, s16
 800f6ea:	f002 fb0d 	bl	8011d08 <maximum>
 800f6ee:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f6f2:	eef0 0a49 	vmov.f32	s1, s18
 800f6f6:	eeb0 0a48 	vmov.f32	s0, s16
 800f6fa:	f002 fb11 	bl	8011d20 <minimum>
 800f6fe:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 800f702:	ee28 8a08 	vmul.f32	s16, s16, s16
 800f706:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800f70a:	edc4 7a08 	vstr	s15, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f70e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f712:	ed94 7a05 	vldr	s14, [r4, #20]
 800f716:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f71a:	edd4 6a07 	vldr	s13, [r4, #28]
 800f71e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f722:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f72a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f72e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f732:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f736:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f73a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f73e:	ee86 0a00 	vdiv.f32	s0, s12, s0
 800f742:	f001 fedf 	bl	8011504 <fastsqrtf>
 800f746:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f74a:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f74e:	edd4 7a07 	vldr	s15, [r4, #28]
 800f752:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f756:	edc4 7a07 	vstr	s15, [r4, #28]
 800f75a:	edd4 7a08 	vldr	s15, [r4, #32]
 800f75e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f762:	edc4 7a08 	vstr	s15, [r4, #32]
 800f766:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800f76a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f76e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
        break;
 800f772:	e6f5      	b.n	800f560 <tVZFilter_calcCoeffs+0x4c>
 800f774:	40490fdb 	.word	0x40490fdb
 800f778:	00000000 	.word	0x00000000

0800f77c <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, Lfloat freq)
{
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	4604      	mov	r4, r0
 800f780:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800f784:	6805      	ldr	r5, [r0, #0]
    
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800f786:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 800f78a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f78e:	ee21 1a27 	vmul.f32	s2, s2, s15
 800f792:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f7a8 <tVZFilter_setFreq+0x2c>
 800f796:	f001 ff75 	bl	8011684 <LEAF_clip>
 800f79a:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
    tVZFilter_calcCoeffs(vf);
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f7ff feb8 	bl	800f514 <tVZFilter_calcCoeffs>
}
 800f7a4:	bd38      	pop	{r3, r4, r5, pc}
 800f7a6:	bf00      	nop
 800f7a8:	00000000 	.word	0x00000000

0800f7ac <tVZFilter_setFreqFast>:

void    tVZFilter_setFreqFast     (tVZFilter* const vf, Lfloat cutoff)
{
 800f7ac:	b510      	push	{r4, lr}
 800f7ae:	ed2d 8b04 	vpush	{d8-d9}
	 _tVZFilter* f = *vf;
 800f7b2:	6804      	ldr	r4, [r0, #0]
	 f->cutoffMIDI = cutoff;
 800f7b4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
	 cutoff *= 30.567164179104478f;
 800f7b8:	eddf 7aaa 	vldr	s15, [pc, #680]	; 800fa64 <tVZFilter_setFreqFast+0x2b8>
 800f7bc:	ee20 0a27 	vmul.f32	s0, s0, s15
	    int32_t intVer = (int32_t)cutoff;
 800f7c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f7c4:	ee17 3a90 	vmov	r3, s15
	    if (intVer > 4094)
 800f7c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	dc03      	bgt.n	800f7d8 <tVZFilter_setFreqFast+0x2c>
	    {
	    	intVer = 4094;
	    }
	    if (intVer < 0)
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	da03      	bge.n	800f7dc <tVZFilter_setFreqFast+0x30>
	    {
	    	intVer = 0;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e001      	b.n	800f7dc <tVZFilter_setFreqFast+0x30>
	    	intVer = 4094;
 800f7d8:	f640 73fe 	movw	r3, #4094	; 0xffe
	    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f7dc:	ee07 3a90 	vmov	s15, r3
 800f7e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7e4:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f7e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800f7ea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800f7ee:	edd1 7a00 	vldr	s15, [r1]
 800f7f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7f6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800f7fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7fe:	3301      	adds	r3, #1
 800f800:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f804:	ed92 7a00 	vldr	s14, [r2]
 800f808:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f80c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f810:	edc4 7a04 	vstr	s15, [r4, #16]
    
    switch( f->type )
 800f814:	7923      	ldrb	r3, [r4, #4]
 800f816:	2b0a      	cmp	r3, #10
 800f818:	d80e      	bhi.n	800f838 <tVZFilter_setFreqFast+0x8c>
 800f81a:	e8df f003 	tbb	[pc, r3]
 800f81e:	262d      	.short	0x262d
 800f820:	4e473b34 	.word	0x4e473b34
 800f824:	06d0ab91 	.word	0x06d0ab91
 800f828:	c5          	.byte	0xc5
 800f829:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 800f82a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f82c:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800f82e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f832:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 800f834:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 800f836:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;

    }
    f->R2Plusg = f->R2+f->g;
 800f838:	edd4 7a05 	vldr	s15, [r4, #20]
 800f83c:	ed94 7a04 	vldr	s14, [r4, #16]
 800f840:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f844:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f84c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f850:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f854:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f85c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f860:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800f864:	ecbd 8b04 	vpop	{d8-d9}
 800f868:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f86a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f86e:	61e3      	str	r3, [r4, #28]
 800f870:	2300      	movs	r3, #0
 800f872:	6223      	str	r3, [r4, #32]
 800f874:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f876:	e7df      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f878:	2300      	movs	r3, #0
 800f87a:	61e3      	str	r3, [r4, #28]
 800f87c:	6223      	str	r3, [r4, #32]
 800f87e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f882:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f884:	e7d8      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f886:	2300      	movs	r3, #0
 800f888:	61e3      	str	r3, [r4, #28]
 800f88a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f88e:	6222      	str	r2, [r4, #32]
 800f890:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f892:	e7d1      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f894:	2300      	movs	r3, #0
 800f896:	61e3      	str	r3, [r4, #28]
 800f898:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f89c:	ed94 7a05 	vldr	s14, [r4, #20]
 800f8a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8a4:	edc4 7a08 	vstr	s15, [r4, #32]
 800f8a8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f8aa:	e7c5      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f8ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8b0:	61e3      	str	r3, [r4, #28]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	6222      	str	r2, [r4, #32]
 800f8b6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f8b8:	e7be      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f8ba:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800f8be:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f8c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f8c6:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800f8ca:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f8ce:	f001 fea5 	bl	801161c <fastPowf>
 800f8d2:	ee28 8a00 	vmul.f32	s16, s16, s0
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f8d6:	eddf 7a64 	vldr	s15, [pc, #400]	; 800fa68 <tVZFilter_setFreqFast+0x2bc>
 800f8da:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f8de:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800f8e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f8e6:	f001 fdf5 	bl	80114d4 <fastertanf>
            Lfloat r  = f->g/wl;
 800f8ea:	ed94 7a04 	vldr	s14, [r4, #16]
 800f8ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f8f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f8f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f8fa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f8fe:	ee37 7a08 	vadd.f32	s14, s14, s16
 800f902:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f906:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f90a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f90e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f912:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f91a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800f91e:	f001 fdf1 	bl	8011504 <fastsqrtf>
 800f922:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f926:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f92a:	ed84 8a07 	vstr	s16, [r4, #28]
 800f92e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f932:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f936:	ed84 0a08 	vstr	s0, [r4, #32]
 800f93a:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
 800f93e:	e77b      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            Lfloat A = fastsqrtf(f->G);
 800f940:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800f944:	f001 fdde 	bl	8011504 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f948:	f001 fddc 	bl	8011504 <fastsqrtf>
 800f94c:	ed94 7a04 	vldr	s14, [r4, #16]
 800f950:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f954:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f958:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f95c:	edc4 7a07 	vstr	s15, [r4, #28]
 800f960:	ed94 7a05 	vldr	s14, [r4, #20]
 800f964:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f968:	edc4 7a08 	vstr	s15, [r4, #32]
 800f96c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f970:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f972:	e761      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            Lfloat A = fastsqrtf(f->G);
 800f974:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800f978:	f001 fdc4 	bl	8011504 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f97c:	f001 fdc2 	bl	8011504 <fastsqrtf>
 800f980:	edd4 7a04 	vldr	s15, [r4, #16]
 800f984:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f988:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f98c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f990:	61e3      	str	r3, [r4, #28]
 800f992:	edd4 7a05 	vldr	s15, [r4, #20]
 800f996:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800f99a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f99e:	edc4 7a08 	vstr	s15, [r4, #32]
 800f9a2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
 800f9a6:	e747      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f9a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9ac:	61e3      	str	r3, [r4, #28]
 800f9ae:	edd4 7a05 	vldr	s15, [r4, #20]
 800f9b2:	eef1 7a67 	vneg.f32	s15, s15
 800f9b6:	edc4 7a08 	vstr	s15, [r4, #32]
 800f9ba:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f9bc:	e73c      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f9be:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 800f9c2:	ee38 8a08 	vadd.f32	s16, s16, s16
 800f9c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f9ca:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f9ce:	ed9f 9a27 	vldr	s18, [pc, #156]	; 800fa6c <tVZFilter_setFreqFast+0x2c0>
 800f9d2:	eef0 0a49 	vmov.f32	s1, s18
 800f9d6:	eeb1 0a48 	vneg.f32	s0, s16
 800f9da:	f002 f995 	bl	8011d08 <maximum>
 800f9de:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f9e2:	eef0 0a49 	vmov.f32	s1, s18
 800f9e6:	eeb0 0a48 	vmov.f32	s0, s16
 800f9ea:	f002 f999 	bl	8011d20 <minimum>
 800f9ee:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 800f9f2:	ee28 8a08 	vmul.f32	s16, s16, s16
 800f9f6:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800f9fa:	edc4 7a08 	vstr	s15, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f9fe:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800fa02:	ed94 7a05 	vldr	s14, [r4, #20]
 800fa06:	ee27 6a07 	vmul.f32	s12, s14, s14
 800fa0a:	edd4 6a07 	vldr	s13, [r4, #28]
 800fa0e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fa12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fa16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa1a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa22:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800fa26:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fa2a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fa2e:	ee86 0a00 	vdiv.f32	s0, s12, s0
 800fa32:	f001 fd67 	bl	8011504 <fastsqrtf>
 800fa36:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fa3a:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800fa3e:	edd4 7a07 	vldr	s15, [r4, #28]
 800fa42:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa46:	edc4 7a07 	vstr	s15, [r4, #28]
 800fa4a:	edd4 7a08 	vldr	s15, [r4, #32]
 800fa4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa52:	edc4 7a08 	vstr	s15, [r4, #32]
 800fa56:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800fa5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa5e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
        break;
 800fa62:	e6e9      	b.n	800f838 <tVZFilter_setFreqFast+0x8c>
 800fa64:	41f4898d 	.word	0x41f4898d
 800fa68:	40490fdb 	.word	0x40490fdb
 800fa6c:	00000000 	.word	0x00000000

0800fa70 <tVZFilter_setGain>:
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
    tVZFilter_calcCoeffsEfficientBP(vf);
}

void   tVZFilter_setGain                (tVZFilter* const vf, Lfloat gain)
{
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4604      	mov	r4, r0
 800fa74:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fa78:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fa7a:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800faa0 <tVZFilter_setGain+0x30>
 800fa7e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800faa4 <tVZFilter_setGain+0x34>
 800fa82:	f001 fdff 	bl	8011684 <LEAF_clip>
 800fa86:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 800fa8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa92:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
    tVZFilter_calcCoeffs(vf);
 800fa96:	4620      	mov	r0, r4
 800fa98:	f7ff fd3c 	bl	800f514 <tVZFilter_calcCoeffs>
}
 800fa9c:	bd38      	pop	{r3, r4, r5, pc}
 800fa9e:	bf00      	nop
 800faa0:	457a0000 	.word	0x457a0000
 800faa4:	358637bd 	.word	0x358637bd

0800faa8 <tVZFilter_setResonance>:


void   tVZFilter_setResonance                (tVZFilter* const vf, Lfloat res)
{
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4604      	mov	r4, r0
 800faac:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fab0:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fab2:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800fad8 <tVZFilter_setResonance+0x30>
 800fab6:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800fadc <tVZFilter_setResonance+0x34>
 800faba:	f001 fde3 	bl	8011684 <LEAF_clip>
 800fabe:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 800fac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fac6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800faca:	edc5 7a05 	vstr	s15, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 800face:	4620      	mov	r0, r4
 800fad0:	f7ff fd20 	bl	800f514 <tVZFilter_calcCoeffs>
}
 800fad4:	bd38      	pop	{r3, r4, r5, pc}
 800fad6:	bf00      	nop
 800fad8:	42c80000 	.word	0x42c80000
 800fadc:	3c23d70a 	.word	0x3c23d70a

0800fae0 <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
 800fae0:	b510      	push	{r4, lr}
 800fae2:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 800fae6:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800fae8:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800faec:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800faf0:	ee60 0a60 	vnmul.f32	s1, s0, s1
 800faf4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800faf8:	f006 fbda 	bl	80162b0 <powf>
 800fafc:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800fb00:	eddf 7a11 	vldr	s15, [pc, #68]	; 800fb48 <tVZFilter_BandwidthToR+0x68>
 800fb04:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fb08:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800fb0c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fb10:	f006 fe9e 	bl	8016850 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800fb14:	edd4 7a04 	vldr	s15, [r4, #16]
 800fb18:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fb1c:	ee67 7a07 	vmul.f32	s15, s14, s14
 800fb20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fb24:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb28:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fb2c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800fb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb38:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800fb3c:	f006 fe5c 	bl	80167f8 <sqrtf>
}
 800fb40:	ecbd 8b02 	vpop	{d8}
 800fb44:	bd10      	pop	{r4, pc}
 800fb46:	bf00      	nop
 800fb48:	40490fdb 	.word	0x40490fdb

0800fb4c <tVZFilter_setBandwidth>:
{
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4604      	mov	r4, r0
 800fb50:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fb54:	6805      	ldr	r5, [r0, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800fb56:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800fb7c <tVZFilter_setBandwidth+0x30>
 800fb5a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800fb80 <tVZFilter_setBandwidth+0x34>
 800fb5e:	f001 fd91 	bl	8011684 <LEAF_clip>
 800fb62:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800fb66:	4620      	mov	r0, r4
 800fb68:	f7ff ffba 	bl	800fae0 <tVZFilter_BandwidthToR>
 800fb6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb70:	ed85 0a05 	vstr	s0, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7ff fccd 	bl	800f514 <tVZFilter_calcCoeffs>
}
 800fb7a:	bd38      	pop	{r3, r4, r5, pc}
 800fb7c:	42c80000 	.word	0x42c80000
 800fb80:	00000000 	.word	0x00000000

0800fb84 <tVZFilter_initToPool>:
{
 800fb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb86:	ed2d 8b04 	vpush	{d8-d9}
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	460f      	mov	r7, r1
 800fb8e:	eeb0 9a40 	vmov.f32	s18, s0
 800fb92:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800fb96:	6816      	ldr	r6, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800fb98:	4631      	mov	r1, r6
 800fb9a:	2054      	movs	r0, #84	; 0x54
 800fb9c:	f002 f8f0 	bl	8011d80 <mpool_alloc>
 800fba0:	4604      	mov	r4, r0
 800fba2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800fba4:	6006      	str	r6, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800fba6:	6876      	ldr	r6, [r6, #4]
    f->sampleRate = leaf->sampleRate;
 800fba8:	ed96 1a00 	vldr	s2, [r6]
 800fbac:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 800fbb0:	6873      	ldr	r3, [r6, #4]
 800fbb2:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fbb4:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800fbb8:	eddf 8a27 	vldr	s17, [pc, #156]	; 800fc58 <tVZFilter_initToPool+0xd4>
 800fbbc:	ee21 1a29 	vmul.f32	s2, s2, s19
 800fbc0:	eef0 0a49 	vmov.f32	s1, s18
 800fbc4:	eeb0 0a68 	vmov.f32	s0, s17
 800fbc8:	f001 fd5c 	bl	8011684 <LEAF_clip>
 800fbcc:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 800fbd0:	f001 fff8 	bl	8011bc4 <ftom>
 800fbd4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->type = type;
 800fbd8:	7127      	strb	r7, [r4, #4]
    f->G    = INV_SQRT2;
 800fbda:	4b20      	ldr	r3, [pc, #128]	; (800fc5c <tVZFilter_initToPool+0xd8>)
 800fbdc:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.414213562373095f;
 800fbde:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800fc60 <tVZFilter_initToPool+0xdc>
 800fbe2:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
 800fbe6:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->m    = 0.0f;
 800fbea:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 800fbee:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 800fbf2:	edc4 8a02 	vstr	s17, [r4, #8]
    f->s2   = 0.0f;
 800fbf6:	edc4 8a03 	vstr	s17, [r4, #12]
    f->R2   = f->invG;
 800fbfa:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 800fbfe:	edd4 7a04 	vldr	s15, [r4, #16]
 800fc02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc06:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fc0a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800fc0e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800fc64 <tVZFilter_initToPool+0xe0>
 800fc12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc16:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800fc1a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc1e:	f006 fe17 	bl	8016850 <tanf>
 800fc22:	ed84 0a04 	vstr	s0, [r4, #16]
    tVZFilter_setBandwidth(vf,f->B);
 800fc26:	eeb0 0a48 	vmov.f32	s0, s16
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f7ff ff8e 	bl	800fb4c <tVZFilter_setBandwidth>
    tVZFilter_calcCoeffs(vf);
 800fc30:	4628      	mov	r0, r5
 800fc32:	f7ff fc6f 	bl	800f514 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 800fc36:	ed96 7a00 	vldr	s14, [r6]
 800fc3a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fc68 <tVZFilter_initToPool+0xe4>
 800fc3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	dd04      	ble.n	800fc52 <tVZFilter_initToPool+0xce>
    	f->table = __filterTanhTable_96000;
 800fc48:	4b08      	ldr	r3, [pc, #32]	; (800fc6c <tVZFilter_initToPool+0xe8>)
 800fc4a:	6523      	str	r3, [r4, #80]	; 0x50
}
 800fc4c:	ecbd 8b04 	vpop	{d8-d9}
 800fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	f->table = __filterTanhTable_48000;
 800fc52:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <tVZFilter_initToPool+0xec>)
 800fc54:	6523      	str	r3, [r4, #80]	; 0x50
}
 800fc56:	e7f9      	b.n	800fc4c <tVZFilter_initToPool+0xc8>
 800fc58:	00000000 	.word	0x00000000
 800fc5c:	3f3504f3 	.word	0x3f3504f3
 800fc60:	3fb504f3 	.word	0x3fb504f3
 800fc64:	40490fdb 	.word	0x40490fdb
 800fc68:	47afc800 	.word	0x47afc800
 800fc6c:	0801c990 	.word	0x0801c990
 800fc70:	08018990 	.word	0x08018990

0800fc74 <tVZFilter_init>:
{
 800fc74:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 800fc76:	3218      	adds	r2, #24
 800fc78:	f7ff ff84 	bl	800fb84 <tVZFilter_initToPool>
}
 800fc7c:	bd08      	pop	{r3, pc}
	...

0800fc80 <tVZFilter_setSampleRate>:
    return fastsqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
}

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
 800fc80:	6803      	ldr	r3, [r0, #0]
    f->sampleRate = sr;
 800fc82:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 800fc86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc8e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    if (sr > 90000)
 800fc92:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fcac <tVZFilter_setSampleRate+0x2c>
 800fc96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9e:	dd02      	ble.n	800fca6 <tVZFilter_setSampleRate+0x26>
    {
    	f->table = __filterTanhTable_96000;
 800fca0:	4a03      	ldr	r2, [pc, #12]	; (800fcb0 <tVZFilter_setSampleRate+0x30>)
 800fca2:	651a      	str	r2, [r3, #80]	; 0x50
 800fca4:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 800fca6:	4a03      	ldr	r2, [pc, #12]	; (800fcb4 <tVZFilter_setSampleRate+0x34>)
 800fca8:	651a      	str	r2, [r3, #80]	; 0x50
    }
}
 800fcaa:	4770      	bx	lr
 800fcac:	47afc800 	.word	0x47afc800
 800fcb0:	0801c990 	.word	0x0801c990
 800fcb4:	08018990 	.word	0x08018990

0800fcb8 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 800fcb8:	b570      	push	{r4, r5, r6, lr}
 800fcba:	ed2d 8b04 	vpush	{d8-d9}
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	eeb0 8a40 	vmov.f32	s16, s0
 800fcc4:	eef0 8a60 	vmov.f32	s17, s1
 800fcc8:	eeb0 9a41 	vmov.f32	s18, s2
    _tMempool* m = *mp;
 800fccc:	680d      	ldr	r5, [r1, #0]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 800fcce:	4629      	mov	r1, r5
 800fcd0:	2048      	movs	r0, #72	; 0x48
 800fcd2:	f002 f855 	bl	8011d80 <mpool_alloc>
 800fcd6:	4604      	mov	r4, r0
 800fcd8:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 800fcda:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 800fcdc:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 800fcde:	edd5 7a00 	vldr	s15, [r5]
 800fce2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 800fce6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800fdc4 <tVZFilterLS_initToPool+0x10c>
 800fcea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcee:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 800fcf2:	686b      	ldr	r3, [r5, #4]
 800fcf4:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fcf6:	eddf 9a34 	vldr	s19, [pc, #208]	; 800fdc8 <tVZFilterLS_initToPool+0x110>
 800fcfa:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800fcfe:	ee27 1a81 	vmul.f32	s2, s15, s2
 800fd02:	eef0 0a48 	vmov.f32	s1, s16
 800fd06:	eeb0 0a69 	vmov.f32	s0, s19
 800fd0a:	f001 fcbb 	bl	8011684 <LEAF_clip>
 800fd0e:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 800fd12:	f001 ff57 	bl	8011bc4 <ftom>
 800fd16:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 800fd1a:	edc4 8a08 	vstr	s17, [r4, #32]
    f->R2 =    1.0f/Q;
 800fd1e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fd22:	eec8 7a28 	vdiv.f32	s15, s16, s17
 800fd26:	edc4 7a04 	vstr	s15, [r4, #16]
    f->s1    = 0.0f;
 800fd2a:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 800fd2e:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fd32:	edd4 7a06 	vldr	s15, [r4, #24]
 800fd36:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800fdcc <tVZFilterLS_initToPool+0x114>
 800fd3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd3e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 800fd42:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fd46:	f006 fd83 	bl	8016850 <tanf>
 800fd4a:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fd4e:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800fdd0 <tVZFilterLS_initToPool+0x118>
 800fd52:	eef0 0a49 	vmov.f32	s1, s18
 800fd56:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800fdd4 <tVZFilterLS_initToPool+0x11c>
 800fd5a:	f001 fc93 	bl	8011684 <LEAF_clip>
 800fd5e:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800fd62:	f001 fbcf 	bl	8011504 <fastsqrtf>
 800fd66:	f001 fbcd 	bl	8011504 <fastsqrtf>
 800fd6a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800fd6e:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800fd72:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800fd76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fd7a:	edc4 7a03 	vstr	s15, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 800fd7e:	ed94 7a04 	vldr	s14, [r4, #16]
 800fd82:	ee77 6a87 	vadd.f32	s13, s15, s14
 800fd86:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800fd8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd8e:	ee37 7a08 	vadd.f32	s14, s14, s16
 800fd92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd96:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fd9a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800fd9e:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 800fda2:	ed95 7a00 	vldr	s14, [r5]
 800fda6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800fdd8 <tVZFilterLS_initToPool+0x120>
 800fdaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	dd04      	ble.n	800fdbe <tVZFilterLS_initToPool+0x106>
    {
    	f->table = __filterTanhTable_96000;
 800fdb4:	4b09      	ldr	r3, [pc, #36]	; (800fddc <tVZFilterLS_initToPool+0x124>)
 800fdb6:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 800fdb8:	ecbd 8b04 	vpop	{d8-d9}
 800fdbc:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 800fdbe:	4b08      	ldr	r3, [pc, #32]	; (800fde0 <tVZFilterLS_initToPool+0x128>)
 800fdc0:	6423      	str	r3, [r4, #64]	; 0x40
}
 800fdc2:	e7f9      	b.n	800fdb8 <tVZFilterLS_initToPool+0x100>
 800fdc4:	473b8000 	.word	0x473b8000
 800fdc8:	00000000 	.word	0x00000000
 800fdcc:	40490fdb 	.word	0x40490fdb
 800fdd0:	457a0000 	.word	0x457a0000
 800fdd4:	358637bd 	.word	0x358637bd
 800fdd8:	47afc800 	.word	0x47afc800
 800fddc:	0801c990 	.word	0x0801c990
 800fde0:	08018990 	.word	0x08018990

0800fde4 <tVZFilterLS_init>:
{
 800fde4:	b508      	push	{r3, lr}
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 800fde6:	3118      	adds	r1, #24
 800fde8:	f7ff ff66 	bl	800fcb8 <tVZFilterLS_initToPool>
}
 800fdec:	bd08      	pop	{r3, pc}
	...

0800fdf0 <tVZFilterLS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
 800fdf0:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 800fdf2:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 800fdf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fdfe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 800fe02:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fe28 <tVZFilterLS_setSampleRate+0x38>
 800fe06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe0a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 90000)
 800fe0e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fe2c <tVZFilterLS_setSampleRate+0x3c>
 800fe12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	dd02      	ble.n	800fe22 <tVZFilterLS_setSampleRate+0x32>
       {
       	f->table = __filterTanhTable_96000;
 800fe1c:	4a04      	ldr	r2, [pc, #16]	; (800fe30 <tVZFilterLS_setSampleRate+0x40>)
 800fe1e:	641a      	str	r2, [r3, #64]	; 0x40
 800fe20:	4770      	bx	lr
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 800fe22:	4a04      	ldr	r2, [pc, #16]	; (800fe34 <tVZFilterLS_setSampleRate+0x44>)
 800fe24:	641a      	str	r2, [r3, #64]	; 0x40
       }
}
 800fe26:	4770      	bx	lr
 800fe28:	473b8000 	.word	0x473b8000
 800fe2c:	47afc800 	.word	0x47afc800
 800fe30:	0801c990 	.word	0x0801c990
 800fe34:	08018990 	.word	0x08018990

0800fe38 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 800fe38:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800fe3a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fe3e:	edd3 6a01 	vldr	s13, [r3, #4]
 800fe42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fe46:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fe4a:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fe52:	ed93 7a05 	vldr	s14, [r3, #20]
 800fe56:	ee20 0a07 	vmul.f32	s0, s0, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800fe5a:	ed93 7a03 	vldr	s14, [r3, #12]
 800fe5e:	ee27 6a00 	vmul.f32	s12, s14, s0
    yB = v1 + f->s1;
 800fe62:	ee76 6a86 	vadd.f32	s13, s13, s12
    f->s1 = v1 + yB; // state update in 1st integrator
 800fe66:	ee36 6a26 	vadd.f32	s12, s12, s13
 800fe6a:	ed83 6a01 	vstr	s12, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 800fe6e:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 800fe72:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 800fe76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe7a:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return f->G*yL + f->R2*f->G*yB + yH;
 800fe7e:	ed93 7a07 	vldr	s14, [r3, #28]
 800fe82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe86:	ed93 6a04 	vldr	s12, [r3, #16]
 800fe8a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fe8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fe92:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800fe96:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fe9a:	4770      	bx	lr

0800fe9c <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
 800fe9c:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 800fe9e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 800fea2:	eddf 7a25 	vldr	s15, [pc, #148]	; 800ff38 <tVZFilterLS_setFreqFast+0x9c>
 800fea6:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 800feaa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800feae:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 800feb2:	f640 71fe 	movw	r1, #4094	; 0xffe
 800feb6:	428a      	cmp	r2, r1
 800feb8:	dc03      	bgt.n	800fec2 <tVZFilterLS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 800feba:	2a00      	cmp	r2, #0
 800febc:	da03      	bge.n	800fec6 <tVZFilterLS_setFreqFast+0x2a>
        {
        	intVer = 0;
 800febe:	2200      	movs	r2, #0
 800fec0:	e001      	b.n	800fec6 <tVZFilterLS_setFreqFast+0x2a>
        	intVer = 4094;
 800fec2:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800fec6:	ee07 2a90 	vmov	s15, r2
 800feca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fece:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fed2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800fed4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800fed8:	edd0 7a00 	vldr	s15, [r0]
 800fedc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fee0:	ee36 7ac0 	vsub.f32	s14, s13, s0
 800fee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fee8:	3201      	adds	r2, #1
 800feea:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800feee:	ed91 7a00 	vldr	s14, [r1]
 800fef2:	ee27 7a00 	vmul.f32	s14, s14, s0
 800fef6:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800fefa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fefe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff02:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800ff06:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ff0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff0e:	edc3 7a03 	vstr	s15, [r3, #12]
    f->R2Plusg = f->R2+f->g;
 800ff12:	ed93 7a04 	vldr	s14, [r3, #16]
 800ff16:	ee37 6a87 	vadd.f32	s12, s15, s14
 800ff1a:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff22:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ff26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff32:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800ff36:	4770      	bx	lr
 800ff38:	41f4898d 	.word	0x41f4898d

0800ff3c <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 800ff3c:	b510      	push	{r4, lr}
 800ff3e:	eef0 0a40 	vmov.f32	s1, s0
        _tVZFilterLS* f = *vf;
 800ff42:	6804      	ldr	r4, [r0, #0]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800ff44:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800ff9c <tVZFilterLS_setGain+0x60>
 800ff48:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ffa0 <tVZFilterLS_setGain+0x64>
 800ff4c:	f001 fb9a 	bl	8011684 <LEAF_clip>
 800ff50:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800ff54:	f001 fad6 	bl	8011504 <fastsqrtf>
 800ff58:	f001 fad4 	bl	8011504 <fastsqrtf>
 800ff5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800ff64:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800ff68:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800ff6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff70:	edc4 7a03 	vstr	s15, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 800ff74:	ed94 7a04 	vldr	s14, [r4, #16]
 800ff78:	ee37 6a87 	vadd.f32	s12, s15, s14
 800ff7c:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff80:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff84:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ff88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ff8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff94:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800ff98:	bd10      	pop	{r4, pc}
 800ff9a:	bf00      	nop
 800ff9c:	457a0000 	.word	0x457a0000
 800ffa0:	358637bd 	.word	0x358637bd

0800ffa4 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
 800ffa4:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 800ffa6:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 800ffaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800ffb2:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 800ffb6:	ed93 7a03 	vldr	s14, [r3, #12]
 800ffba:	ee37 6a87 	vadd.f32	s12, s15, s14
 800ffbe:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ffc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffca:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ffce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffd6:	ed83 7a05 	vstr	s14, [r3, #20]
}
 800ffda:	4770      	bx	lr

0800ffdc <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 800ffdc:	b570      	push	{r4, r5, r6, lr}
 800ffde:	ed2d 8b04 	vpush	{d8-d9}
 800ffe2:	4606      	mov	r6, r0
 800ffe4:	eef0 8a40 	vmov.f32	s17, s0
 800ffe8:	eeb0 8a60 	vmov.f32	s16, s1
 800ffec:	eeb0 9a41 	vmov.f32	s18, s2
    _tMempool* m = *mp;
 800fff0:	680d      	ldr	r5, [r1, #0]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 800fff2:	4629      	mov	r1, r5
 800fff4:	2048      	movs	r0, #72	; 0x48
 800fff6:	f001 fec3 	bl	8011d80 <mpool_alloc>
 800fffa:	4604      	mov	r4, r0
 800fffc:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 800fffe:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010000:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 8010002:	edd5 7a00 	vldr	s15, [r5]
 8010006:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 801000a:	686b      	ldr	r3, [r5, #4]
 801000c:	6303      	str	r3, [r0, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 801000e:	eddf 6a35 	vldr	s13, [pc, #212]	; 80100e4 <tVZFilterHS_initToPool+0x108>
 8010012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010016:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801001a:	eddf 9a33 	vldr	s19, [pc, #204]	; 80100e8 <tVZFilterHS_initToPool+0x10c>
 801001e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8010022:	ee27 1a81 	vmul.f32	s2, s15, s2
 8010026:	eef0 0a68 	vmov.f32	s1, s17
 801002a:	eeb0 0a69 	vmov.f32	s0, s19
 801002e:	f001 fb29 	bl	8011684 <LEAF_clip>
 8010032:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8010036:	f001 fdc5 	bl	8011bc4 <ftom>
 801003a:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 801003e:	ed84 8a08 	vstr	s16, [r4, #32]
    f->R2 =    1.0f/Q;
 8010042:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010046:	eec8 7a88 	vdiv.f32	s15, s17, s16
 801004a:	edc4 7a04 	vstr	s15, [r4, #16]
    f->s1    = 0.0f;
 801004e:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 8010052:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010056:	edd4 7a06 	vldr	s15, [r4, #24]
 801005a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80100ec <tVZFilterHS_initToPool+0x110>
 801005e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010062:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8010066:	ee27 0a80 	vmul.f32	s0, s15, s0
 801006a:	f006 fbf1 	bl	8016850 <tanf>
 801006e:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010072:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80100f0 <tVZFilterHS_initToPool+0x114>
 8010076:	eef0 0a49 	vmov.f32	s1, s18
 801007a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80100f4 <tVZFilterHS_initToPool+0x118>
 801007e:	f001 fb01 	bl	8011684 <LEAF_clip>
 8010082:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8010086:	f001 fa3d 	bl	8011504 <fastsqrtf>
 801008a:	f001 fa3b 	bl	8011504 <fastsqrtf>
 801008e:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010092:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010096:	ee20 0a27 	vmul.f32	s0, s0, s15
 801009a:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 801009e:	edd4 7a04 	vldr	s15, [r4, #16]
 80100a2:	ee30 7a27 	vadd.f32	s14, s0, s15
 80100a6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80100aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80100ae:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80100b2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80100b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80100ba:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80100be:	ed84 7a05 	vstr	s14, [r4, #20]
    if (leaf->sampleRate > 90000)
 80100c2:	ed95 7a00 	vldr	s14, [r5]
 80100c6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80100f8 <tVZFilterHS_initToPool+0x11c>
 80100ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d2:	dd04      	ble.n	80100de <tVZFilterHS_initToPool+0x102>
    {
    	f->table = __filterTanhTable_96000;
 80100d4:	4b09      	ldr	r3, [pc, #36]	; (80100fc <tVZFilterHS_initToPool+0x120>)
 80100d6:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 80100d8:	ecbd 8b04 	vpop	{d8-d9}
 80100dc:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 80100de:	4b08      	ldr	r3, [pc, #32]	; (8010100 <tVZFilterHS_initToPool+0x124>)
 80100e0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80100e2:	e7f9      	b.n	80100d8 <tVZFilterHS_initToPool+0xfc>
 80100e4:	473b8000 	.word	0x473b8000
 80100e8:	00000000 	.word	0x00000000
 80100ec:	40490fdb 	.word	0x40490fdb
 80100f0:	457a0000 	.word	0x457a0000
 80100f4:	358637bd 	.word	0x358637bd
 80100f8:	47afc800 	.word	0x47afc800
 80100fc:	0801c990 	.word	0x0801c990
 8010100:	08018990 	.word	0x08018990

08010104 <tVZFilterHS_init>:
{
 8010104:	b508      	push	{r3, lr}
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8010106:	3118      	adds	r1, #24
 8010108:	f7ff ff68 	bl	800ffdc <tVZFilterHS_initToPool>
}
 801010c:	bd08      	pop	{r3, pc}
	...

08010110 <tVZFilterHS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
 8010110:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 8010112:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 8010116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801011a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801011e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8010122:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010148 <tVZFilterHS_setSampleRate+0x38>
 8010126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801012a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 90000)
 801012e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801014c <tVZFilterHS_setSampleRate+0x3c>
 8010132:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013a:	dd02      	ble.n	8010142 <tVZFilterHS_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 801013c:	4a04      	ldr	r2, [pc, #16]	; (8010150 <tVZFilterHS_setSampleRate+0x40>)
 801013e:	641a      	str	r2, [r3, #64]	; 0x40
 8010140:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8010142:	4a04      	ldr	r2, [pc, #16]	; (8010154 <tVZFilterHS_setSampleRate+0x44>)
 8010144:	641a      	str	r2, [r3, #64]	; 0x40
          }
}
 8010146:	4770      	bx	lr
 8010148:	473b8000 	.word	0x473b8000
 801014c:	47afc800 	.word	0x47afc800
 8010150:	0801c990 	.word	0x0801c990
 8010154:	08018990 	.word	0x08018990

08010158 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 8010158:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801015a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801015e:	edd3 6a01 	vldr	s13, [r3, #4]
 8010162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010166:	ee70 7a67 	vsub.f32	s15, s0, s15
 801016a:	ed93 6a02 	vldr	s12, [r3, #8]
 801016e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010172:	ed93 7a05 	vldr	s14, [r3, #20]
 8010176:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801017a:	ed93 7a03 	vldr	s14, [r3, #12]
 801017e:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 8010182:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 8010186:	ee75 5aa6 	vadd.f32	s11, s11, s13
 801018a:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 801018e:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 8010192:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010196:	ee37 7a06 	vadd.f32	s14, s14, s12
 801019a:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + f->G*yH;
 801019e:	ed93 7a04 	vldr	s14, [r3, #16]
 80101a2:	ed93 0a07 	vldr	s0, [r3, #28]
 80101a6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80101aa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80101ae:	ee37 7a06 	vadd.f32	s14, s14, s12
 80101b2:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80101b6:	ee37 0a00 	vadd.f32	s0, s14, s0
 80101ba:	4770      	bx	lr

080101bc <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
 80101bc:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 80101be:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 80101c2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010258 <tVZFilterHS_setFreqFast+0x9c>
 80101c6:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 80101ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80101ce:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 80101d2:	f640 71fe 	movw	r1, #4094	; 0xffe
 80101d6:	428a      	cmp	r2, r1
 80101d8:	dc03      	bgt.n	80101e2 <tVZFilterHS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 80101da:	2a00      	cmp	r2, #0
 80101dc:	da03      	bge.n	80101e6 <tVZFilterHS_setFreqFast+0x2a>
        {
        	intVer = 0;
 80101de:	2200      	movs	r2, #0
 80101e0:	e001      	b.n	80101e6 <tVZFilterHS_setFreqFast+0x2a>
        	intVer = 4094;
 80101e2:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80101e6:	ee07 2a90 	vmov	s15, r2
 80101ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101ee:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80101f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80101f4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80101f8:	edd0 7a00 	vldr	s15, [r0]
 80101fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010200:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8010204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010208:	3201      	adds	r2, #1
 801020a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801020e:	ed91 7a00 	vldr	s14, [r1]
 8010212:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010216:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 801021a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801021e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010222:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010226:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 801022a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801022e:	edc3 7a03 	vstr	s15, [r3, #12]
    
    f->R2Plusg = f->R2+f->g;
 8010232:	ed93 7a04 	vldr	s14, [r3, #16]
 8010236:	ee37 6a87 	vadd.f32	s12, s15, s14
 801023a:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801023e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010242:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010246:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801024a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801024e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010252:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8010256:	4770      	bx	lr
 8010258:	41f4898d 	.word	0x41f4898d

0801025c <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 801025c:	b510      	push	{r4, lr}
 801025e:	eef0 0a40 	vmov.f32	s1, s0
        _tVZFilterHS* f = *vf;
 8010262:	6804      	ldr	r4, [r0, #0]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010264:	ed9f 1a14 	vldr	s2, [pc, #80]	; 80102b8 <tVZFilterHS_setGain+0x5c>
 8010268:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80102bc <tVZFilterHS_setGain+0x60>
 801026c:	f001 fa0a 	bl	8011684 <LEAF_clip>
 8010270:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8010274:	f001 f946 	bl	8011504 <fastsqrtf>
 8010278:	f001 f944 	bl	8011504 <fastsqrtf>
 801027c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010280:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010284:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010288:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 801028c:	edd4 7a04 	vldr	s15, [r4, #16]
 8010290:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010294:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010298:	ee60 7a27 	vmul.f32	s15, s0, s15
 801029c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80102a8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80102ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80102b0:	edc4 6a05 	vstr	s13, [r4, #20]
}
 80102b4:	bd10      	pop	{r4, pc}
 80102b6:	bf00      	nop
 80102b8:	457a0000 	.word	0x457a0000
 80102bc:	358637bd 	.word	0x358637bd

080102c0 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
 80102c0:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 80102c2:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 80102c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80102ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80102ce:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 80102d2:	ed93 7a03 	vldr	s14, [r3, #12]
 80102d6:	ee37 6a87 	vadd.f32	s12, s15, s14
 80102da:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80102de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102e6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80102ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80102f2:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80102f6:	4770      	bx	lr

080102f8 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 80102f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fa:	ed2d 8b04 	vpush	{d8-d9}
 80102fe:	4607      	mov	r7, r0
 8010300:	eeb0 8a40 	vmov.f32	s16, s0
 8010304:	ee10 6a90 	vmov	r6, s1
 8010308:	eef0 8a41 	vmov.f32	s17, s2
    _tMempool* m = *mp;
 801030c:	680d      	ldr	r5, [r1, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 801030e:	4629      	mov	r1, r5
 8010310:	2040      	movs	r0, #64	; 0x40
 8010312:	f001 fd35 	bl	8011d80 <mpool_alloc>
 8010316:	4604      	mov	r4, r0
 8010318:	6038      	str	r0, [r7, #0]
    f->mempool = m;
 801031a:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 801031c:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 801031e:	ed95 1a00 	vldr	s2, [r5]
 8010322:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 8010326:	686b      	ldr	r3, [r5, #4]
 8010328:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801032a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8010444 <tVZFilterBell_initToPool+0x14c>
 801032e:	eec7 7a01 	vdiv.f32	s15, s14, s2
 8010332:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8010336:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 801033a:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8010448 <tVZFilterBell_initToPool+0x150>
 801033e:	ee21 1a29 	vmul.f32	s2, s2, s19
 8010342:	eef0 0a48 	vmov.f32	s1, s16
 8010346:	eeb0 0a49 	vmov.f32	s0, s18
 801034a:	f001 f99b 	bl	8011684 <LEAF_clip>
 801034e:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8010352:	f001 fc37 	bl	8011bc4 <ftom>
 8010356:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->B = BW;
 801035a:	6226      	str	r6, [r4, #32]
    f->s1    = 0.0f;
 801035c:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 8010360:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010364:	ed9f 1a39 	vldr	s2, [pc, #228]	; 801044c <tVZFilterBell_initToPool+0x154>
 8010368:	eef0 0a68 	vmov.f32	s1, s17
 801036c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8010450 <tVZFilterBell_initToPool+0x158>
 8010370:	f001 f988 	bl	8011684 <LEAF_clip>
 8010374:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 8010378:	eddf 8a36 	vldr	s17, [pc, #216]	; 8010454 <tVZFilterBell_initToPool+0x15c>
 801037c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8010380:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010384:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010388:	f006 fa62 	bl	8016850 <tanf>
 801038c:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010390:	ed94 8a06 	vldr	s16, [r4, #24]
 8010394:	edd4 0a08 	vldr	s1, [r4, #32]
 8010398:	ee60 0ae9 	vnmul.f32	s1, s1, s19
 801039c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80103a0:	f001 f93c 	bl	801161c <fastPowf>
 80103a4:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80103a8:	ee28 8a28 	vmul.f32	s16, s16, s17
 80103ac:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80103b0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80103b4:	f001 f88e 	bl	80114d4 <fastertanf>
    Lfloat r  = f->g/wl;
 80103b8:	ed94 7a03 	vldr	s14, [r4, #12]
 80103bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80103c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 80103c4:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80103c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80103cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80103d0:	ee37 7a08 	vadd.f32	s14, s14, s16
 80103d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80103d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80103dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80103e0:	edd4 7a07 	vldr	s15, [r4, #28]
 80103e4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80103e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103ec:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80103f0:	f001 f888 	bl	8011504 <fastsqrtf>
 80103f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80103f8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 80103fc:	edd4 7a03 	vldr	s15, [r4, #12]
 8010400:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010404:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010408:	ee20 0a27 	vmul.f32	s0, s0, s15
 801040c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010410:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010414:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010418:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801041c:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8010420:	ed95 7a00 	vldr	s14, [r5]
 8010424:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8010458 <tVZFilterBell_initToPool+0x160>
 8010428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801042c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010430:	dd04      	ble.n	801043c <tVZFilterBell_initToPool+0x144>
    {
    	f->table = __filterTanhTable_96000;
 8010432:	4b0a      	ldr	r3, [pc, #40]	; (801045c <tVZFilterBell_initToPool+0x164>)
 8010434:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8010436:	ecbd 8b04 	vpop	{d8-d9}
 801043a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	f->table = __filterTanhTable_48000;
 801043c:	4b08      	ldr	r3, [pc, #32]	; (8010460 <tVZFilterBell_initToPool+0x168>)
 801043e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010440:	e7f9      	b.n	8010436 <tVZFilterBell_initToPool+0x13e>
 8010442:	bf00      	nop
 8010444:	473b8000 	.word	0x473b8000
 8010448:	00000000 	.word	0x00000000
 801044c:	457a0000 	.word	0x457a0000
 8010450:	358637bd 	.word	0x358637bd
 8010454:	40490fdb 	.word	0x40490fdb
 8010458:	47afc800 	.word	0x47afc800
 801045c:	0801c990 	.word	0x0801c990
 8010460:	08018990 	.word	0x08018990

08010464 <tVZFilterBell_init>:
{
 8010464:	b508      	push	{r3, lr}
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8010466:	3118      	adds	r1, #24
 8010468:	f7ff ff46 	bl	80102f8 <tVZFilterBell_initToPool>
}
 801046c:	bd08      	pop	{r3, pc}
	...

08010470 <tVZFilterBell_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
 8010470:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 8010472:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->invSampleRate = 1.0f / sampleRate;
 8010476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801047a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801047e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8010482:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80104a8 <tVZFilterBell_setSampleRate+0x38>
 8010486:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801048a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    if (sampleRate > 90000)
 801048e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80104ac <tVZFilterBell_setSampleRate+0x3c>
 8010492:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049a:	dd02      	ble.n	80104a2 <tVZFilterBell_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 801049c:	4a04      	ldr	r2, [pc, #16]	; (80104b0 <tVZFilterBell_setSampleRate+0x40>)
 801049e:	639a      	str	r2, [r3, #56]	; 0x38
 80104a0:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 80104a2:	4a04      	ldr	r2, [pc, #16]	; (80104b4 <tVZFilterBell_setSampleRate+0x44>)
 80104a4:	639a      	str	r2, [r3, #56]	; 0x38
          }
}
 80104a6:	4770      	bx	lr
 80104a8:	473b8000 	.word	0x473b8000
 80104ac:	47afc800 	.word	0x47afc800
 80104b0:	0801c990 	.word	0x0801c990
 80104b4:	08018990 	.word	0x08018990

080104b8 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 80104b8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80104ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80104be:	edd3 6a01 	vldr	s13, [r3, #4]
 80104c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80104c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80104ca:	ed93 6a02 	vldr	s12, [r3, #8]
 80104ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80104d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80104d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80104da:	ed93 7a03 	vldr	s14, [r3, #12]
 80104de:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 80104e2:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 80104e6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80104ea:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 80104ee:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 80104f2:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 80104f6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80104fa:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + yH;
 80104fe:	ed93 0a04 	vldr	s0, [r3, #16]
 8010502:	ed93 7a07 	vldr	s14, [r3, #28]
 8010506:	ee20 0a07 	vmul.f32	s0, s0, s14
 801050a:	ee20 0a26 	vmul.f32	s0, s0, s13
 801050e:	ee30 0a06 	vadd.f32	s0, s0, s12
}
 8010512:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010516:	4770      	bx	lr

08010518 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 8010518:	b510      	push	{r4, lr}
 801051a:	ed2d 8b02 	vpush	{d8}
        _tVZFilterBell* f = *vf;
 801051e:	6804      	ldr	r4, [r0, #0]
    f->B = bandWidth;
 8010520:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010524:	ed94 8a06 	vldr	s16, [r4, #24]
 8010528:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801052c:	ee60 0a60 	vnmul.f32	s1, s0, s1
 8010530:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010534:	f001 f872 	bl	801161c <fastPowf>
 8010538:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801053c:	eddf 7a17 	vldr	s15, [pc, #92]	; 801059c <tVZFilterBell_setBandwidth+0x84>
 8010540:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010544:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010548:	ee28 0a00 	vmul.f32	s0, s16, s0
 801054c:	f000 ffc2 	bl	80114d4 <fastertanf>
    Lfloat r  = f->g/wl;
 8010550:	ed94 7a03 	vldr	s14, [r4, #12]
 8010554:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8010558:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 801055c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010560:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010564:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010568:	ee37 7a26 	vadd.f32	s14, s14, s13
 801056c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010570:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010574:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010578:	edd4 7a07 	vldr	s15, [r4, #28]
 801057c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010584:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010588:	f000 ffbc 	bl	8011504 <fastsqrtf>
 801058c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010590:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8010594:	ecbd 8b02 	vpop	{d8}
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop
 801059c:	40490fdb 	.word	0x40490fdb

080105a0 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 80105a0:	b510      	push	{r4, lr}
 80105a2:	ed2d 8b02 	vpush	{d8}
 80105a6:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf;
 80105aa:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 80105ac:	ed84 0a06 	vstr	s0, [r4, #24]
    //TODO: need to make fast version that uses tables
    f->g = tanf(PI * freq * f->invSampleRate);
 80105b0:	eddf 8a2b 	vldr	s17, [pc, #172]	; 8010660 <tVZFilterBell_setFreq+0xc0>
 80105b4:	ee20 0a28 	vmul.f32	s0, s0, s17
 80105b8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80105bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105c0:	f006 f946 	bl	8016850 <tanf>
 80105c4:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80105c8:	edd4 0a08 	vldr	s1, [r4, #32]
 80105cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80105d0:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 80105d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80105d8:	f001 f820 	bl	801161c <fastPowf>
 80105dc:	ee20 0a08 	vmul.f32	s0, s0, s16
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80105e0:	ee20 0a28 	vmul.f32	s0, s0, s17
 80105e4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80105e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105ec:	f000 ff72 	bl	80114d4 <fastertanf>
    Lfloat r  = f->g/wl;
 80105f0:	ed94 7a03 	vldr	s14, [r4, #12]
 80105f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80105f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 80105fc:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010600:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010604:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010608:	ee37 7a08 	vadd.f32	s14, s14, s16
 801060c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010610:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010614:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010618:	edd4 7a07 	vldr	s15, [r4, #28]
 801061c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010620:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010624:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010628:	f000 ff6c 	bl	8011504 <fastsqrtf>
 801062c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010630:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 8010634:	edd4 7a03 	vldr	s15, [r4, #12]
 8010638:	ee30 7a27 	vadd.f32	s14, s0, s15
 801063c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010640:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010644:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010648:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801064c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010650:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010654:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010658:	ecbd 8b02 	vpop	{d8}
 801065c:	bd10      	pop	{r4, pc}
 801065e:	bf00      	nop
 8010660:	40490fdb 	.word	0x40490fdb

08010664 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
 8010664:	b510      	push	{r4, lr}
 8010666:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
 801066a:	6804      	ldr	r4, [r0, #0]
    f->cutoffMIDI = cutoff;
 801066c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    cutoff *= 30.567164179104478f;
 8010670:	eddf 7a4c 	vldr	s15, [pc, #304]	; 80107a4 <tVZFilterBell_setFreqFast+0x140>
 8010674:	ee20 0a27 	vmul.f32	s0, s0, s15
	int32_t intVer = (int32_t)cutoff;
 8010678:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801067c:	ee17 3a90 	vmov	r3, s15
	if (intVer > 4094)
 8010680:	f640 72fe 	movw	r2, #4094	; 0xffe
 8010684:	4293      	cmp	r3, r2
 8010686:	dc03      	bgt.n	8010690 <tVZFilterBell_setFreqFast+0x2c>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 8010688:	2b00      	cmp	r3, #0
 801068a:	da03      	bge.n	8010694 <tVZFilterBell_setFreqFast+0x30>
	{
		intVer = 0;
 801068c:	2300      	movs	r3, #0
 801068e:	e001      	b.n	8010694 <tVZFilterBell_setFreqFast+0x30>
		intVer = 4094;
 8010690:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010694:	ee07 3a90 	vmov	s15, r3
 8010698:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801069c:	ee70 6a66 	vsub.f32	s13, s0, s13
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80106a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80106a2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80106a6:	ed91 7a00 	vldr	s14, [r1]
 80106aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80106ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106b6:	3301      	adds	r3, #1
 80106b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80106bc:	edd3 7a00 	vldr	s15, [r3]
 80106c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106c4:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 80106c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80106cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106d0:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 80106d4:	edd4 7a08 	vldr	s15, [r4, #32]
 80106d8:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80106dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80106e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80106e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80106e8:	ee77 7a80 	vadd.f32	s15, s15, s0
	intVer = (int32_t)fl;
 80106ec:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80106f0:	ee16 3a90 	vmov	r3, s13
	if (intVer > 4094)
 80106f4:	f640 71fe 	movw	r1, #4094	; 0xffe
 80106f8:	428b      	cmp	r3, r1
 80106fa:	dc03      	bgt.n	8010704 <tVZFilterBell_setFreqFast+0xa0>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	da03      	bge.n	8010708 <tVZFilterBell_setFreqFast+0xa4>
	{
		intVer = 0;
 8010700:	2300      	movs	r3, #0
 8010702:	e001      	b.n	8010708 <tVZFilterBell_setFreqFast+0xa4>
		intVer = 4094;
 8010704:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	LfloatVer = fl - (Lfloat)intVer;
 8010708:	ee06 3a90 	vmov	s13, r3
 801070c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010710:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010714:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010718:	edd1 6a00 	vldr	s13, [r1]
 801071c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010720:	ee78 5a67 	vsub.f32	s11, s16, s15
 8010724:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010728:	3301      	adds	r3, #1
 801072a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801072e:	edd2 5a00 	vldr	s11, [r2]
 8010732:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010736:	ee26 6a27 	vmul.f32	s12, s12, s15
 801073a:	ee76 6a86 	vadd.f32	s13, s13, s12

    Lfloat r  = f->g/gLower;
 801073e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8010742:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 8010746:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801074a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801074e:	ee37 7a08 	vadd.f32	s14, s14, s16
 8010752:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010756:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801075a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801075e:	edd4 7a07 	vldr	s15, [r4, #28]
 8010762:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010766:	ee67 7a87 	vmul.f32	s15, s15, s14
 801076a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801076e:	f000 fec9 	bl	8011504 <fastsqrtf>
 8010772:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010776:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 801077a:	edd4 7a03 	vldr	s15, [r4, #12]
 801077e:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010782:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010786:	ee20 0a27 	vmul.f32	s0, s0, s15
 801078a:	ee30 0a08 	vadd.f32	s0, s0, s16
 801078e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010792:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010796:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801079a:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801079e:	ecbd 8b02 	vpop	{d8}
 80107a2:	bd10      	pop	{r4, pc}
 80107a4:	41f4898d 	.word	0x41f4898d

080107a8 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 80107a8:	b510      	push	{r4, lr}
 80107aa:	ed2d 8b02 	vpush	{d8}
 80107ae:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilterBell* f = *vf;
 80107b2:	6804      	ldr	r4, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80107b4:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8010824 <tVZFilterBell_setGain+0x7c>
 80107b8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8010828 <tVZFilterBell_setGain+0x80>
 80107bc:	f000 ff62 	bl	8011684 <LEAF_clip>
 80107c0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 80107c4:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80107c8:	ee67 6a07 	vmul.f32	s13, s14, s14
 80107cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80107d0:	ee76 6a88 	vadd.f32	s13, s13, s16
 80107d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107d8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80107dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80107e4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80107e8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80107ec:	f000 fe8a 	bl	8011504 <fastsqrtf>
 80107f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80107f4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 80107f8:	edd4 7a03 	vldr	s15, [r4, #12]
 80107fc:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010800:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010804:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010808:	ee30 0a08 	vadd.f32	s0, s0, s16
 801080c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010810:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010814:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010818:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801081c:	ecbd 8b02 	vpop	{d8}
 8010820:	bd10      	pop	{r4, pc}
 8010822:	bf00      	nop
 8010824:	457a0000 	.word	0x457a0000
 8010828:	358637bd 	.word	0x358637bd

0801082c <tDiodeFilter_initToPool>:
{
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 801082c:	b570      	push	{r4, r5, r6, lr}
 801082e:	ed2d 8b02 	vpush	{d8}
 8010832:	4606      	mov	r6, r0
 8010834:	eef0 8a40 	vmov.f32	s17, s0
 8010838:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 801083c:	680d      	ldr	r5, [r1, #0]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801083e:	4629      	mov	r1, r5
 8010840:	2048      	movs	r0, #72	; 0x48
 8010842:	f001 fa9d 	bl	8011d80 <mpool_alloc>
 8010846:	4604      	mov	r4, r0
 8010848:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801084a:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 801084c:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 801084e:	ed95 0a01 	vldr	s0, [r5, #4]
 8010852:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->cutoff = cutoff;
 8010856:	edc0 8a01 	vstr	s17, [r0, #4]
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 801085a:	eddf 7a23 	vldr	s15, [pc, #140]	; 80108e8 <tDiodeFilter_initToPool+0xbc>
 801085e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010862:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010866:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801086a:	f006 f885 	bl	8016978 <tan>
 801086e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010872:	ed84 0a02 	vstr	s0, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 8010876:	eeb0 0a68 	vmov.f32	s0, s17
 801087a:	f001 f9a3 	bl	8011bc4 <ftom>
 801087e:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->r = (7.f * resonance + 0.5f);
 8010882:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8010886:	ee28 8a27 	vmul.f32	s16, s16, s15
 801088a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801088e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010892:	ed84 8a03 	vstr	s16, [r4, #12]
    f->Vt = 0.5f;
 8010896:	edc4 7a04 	vstr	s15, [r4, #16]
    f->n = 1.836f;
 801089a:	4b14      	ldr	r3, [pc, #80]	; (80108ec <tDiodeFilter_initToPool+0xc0>)
 801089c:	6163      	str	r3, [r4, #20]
    f->zi = 0.0f; //previous input value
 801089e:	2300      	movs	r3, #0
 80108a0:	61e3      	str	r3, [r4, #28]
    f->gamma = f->Vt*f->n;
 80108a2:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <tDiodeFilter_initToPool+0xc4>)
 80108a4:	61a3      	str	r3, [r4, #24]
    f->s0 = 0.01f;
 80108a6:	4b13      	ldr	r3, [pc, #76]	; (80108f4 <tDiodeFilter_initToPool+0xc8>)
 80108a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s1 = 0.02f;
 80108aa:	4b13      	ldr	r3, [pc, #76]	; (80108f8 <tDiodeFilter_initToPool+0xcc>)
 80108ac:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 80108ae:	4b13      	ldr	r3, [pc, #76]	; (80108fc <tDiodeFilter_initToPool+0xd0>)
 80108b0:	6363      	str	r3, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 80108b2:	4b13      	ldr	r3, [pc, #76]	; (8010900 <tDiodeFilter_initToPool+0xd4>)
 80108b4:	63a3      	str	r3, [r4, #56]	; 0x38
    f->g0inv = 1.f/(2.f*f->Vt);
 80108b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80108ba:	6223      	str	r3, [r4, #32]
    f->g1inv = 1.f/(2.f*f->gamma);
 80108bc:	4b11      	ldr	r3, [pc, #68]	; (8010904 <tDiodeFilter_initToPool+0xd8>)
 80108be:	6263      	str	r3, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 80108c0:	4b11      	ldr	r3, [pc, #68]	; (8010908 <tDiodeFilter_initToPool+0xdc>)
 80108c2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (leaf->sampleRate > 90000)
 80108c4:	ed95 7a00 	vldr	s14, [r5]
 80108c8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801090c <tDiodeFilter_initToPool+0xe0>
 80108cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80108d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d4:	dd04      	ble.n	80108e0 <tDiodeFilter_initToPool+0xb4>
    {
    	f->table = __filterTanhTable_96000;
 80108d6:	4b0e      	ldr	r3, [pc, #56]	; (8010910 <tDiodeFilter_initToPool+0xe4>)
 80108d8:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 80108da:	ecbd 8b02 	vpop	{d8}
 80108de:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 80108e0:	4b0c      	ldr	r3, [pc, #48]	; (8010914 <tDiodeFilter_initToPool+0xe8>)
 80108e2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80108e4:	e7f9      	b.n	80108da <tDiodeFilter_initToPool+0xae>
 80108e6:	bf00      	nop
 80108e8:	40490fdb 	.word	0x40490fdb
 80108ec:	3feb020c 	.word	0x3feb020c
 80108f0:	3f6b020c 	.word	0x3f6b020c
 80108f4:	3c23d70a 	.word	0x3c23d70a
 80108f8:	3ca3d70a 	.word	0x3ca3d70a
 80108fc:	3cf5c28f 	.word	0x3cf5c28f
 8010900:	3d23d70a 	.word	0x3d23d70a
 8010904:	3f0b6efd 	.word	0x3f0b6efd
 8010908:	3e39e952 	.word	0x3e39e952
 801090c:	47afc800 	.word	0x47afc800
 8010910:	0801c990 	.word	0x0801c990
 8010914:	08018990 	.word	0x08018990

08010918 <tDiodeFilter_init>:
{
 8010918:	b508      	push	{r3, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 801091a:	3118      	adds	r1, #24
 801091c:	f7ff ff86 	bl	801082c <tDiodeFilter_initToPool>
}
 8010920:	bd08      	pop	{r3, pc}
	...

08010924 <tanhXdX>:
    mpool_free((char*)f, f->mempool);
}

Lfloat tanhXdX(Lfloat x)
{
    Lfloat a = x*x;
 8010924:	ee20 7a00 	vmul.f32	s14, s0, s0
    // IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)

    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010928:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 801092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010930:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801096c <tanhXdX+0x48>
 8010934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010938:	ee67 7a87 	vmul.f32	s15, s15, s14
 801093c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8010970 <tanhXdX+0x4c>
 8010940:	ee77 7aa6 	vadd.f32	s15, s15, s13

    Lfloat output = 1.0f;
    
    if (testVal!= 0.0f)
 8010944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094c:	d101      	bne.n	8010952 <tanhXdX+0x2e>
    Lfloat output = 1.0f;
 801094e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    {
        output = testVal;
        
    }
    return ((a + 105.0f)*a + 945.0f) / output;
 8010952:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010974 <tanhXdX+0x50>
 8010956:	ee37 0a00 	vadd.f32	s0, s14, s0
 801095a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801095e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010970 <tanhXdX+0x4c>
 8010962:	ee30 0a07 	vadd.f32	s0, s0, s14
}
 8010966:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801096a:	4770      	bx	lr
 801096c:	43d20000 	.word	0x43d20000
 8010970:	446c4000 	.word	0x446c4000
 8010974:	42d20000 	.word	0x42d20000

08010978 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 8010978:	b510      	push	{r4, lr}
 801097a:	ed2d 8b0c 	vpush	{d8-d13}
 801097e:	eef0 ba40 	vmov.f32	s23, s0
    _tDiodeFilter* f = *vf;
 8010982:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
 8010984:	ed94 0a07 	vldr	s0, [r4, #28]
 8010988:	ee30 0a2b 	vadd.f32	s0, s0, s23
 801098c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010990:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010994:	ed94 da02 	vldr	s26, [r4, #8]
 8010998:	ed94 ba03 	vldr	s22, [r4, #12]
 801099c:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 80109a0:	ee6b 7a09 	vmul.f32	s15, s22, s18
 80109a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109a8:	ed94 aa08 	vldr	s20, [r4, #32]
 80109ac:	ee20 0a0a 	vmul.f32	s0, s0, s20
 80109b0:	f7ff ffb8 	bl	8010924 <tanhXdX>
 80109b4:	ee2d 0a00 	vmul.f32	s0, s26, s0
 80109b8:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80109bc:	edd4 ca0c 	vldr	s25, [r4, #48]	; 0x30
 80109c0:	ed94 ca0b 	vldr	s24, [r4, #44]	; 0x2c
 80109c4:	ee3c 0acc 	vsub.f32	s0, s25, s24
 80109c8:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 80109cc:	ee20 0a28 	vmul.f32	s0, s0, s17
 80109d0:	f7ff ffa8 	bl	8010924 <tanhXdX>
 80109d4:	ee2d 8a00 	vmul.f32	s16, s26, s0
 80109d8:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80109dc:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
 80109e0:	ee3a 0aec 	vsub.f32	s0, s21, s25
 80109e4:	ee28 0a80 	vmul.f32	s0, s17, s0
 80109e8:	f7ff ff9c 	bl	8010924 <tanhXdX>
 80109ec:	ee6d 9a00 	vmul.f32	s19, s26, s0
 80109f0:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80109f4:	ee39 0a6a 	vsub.f32	s0, s18, s21
 80109f8:	ee28 0a80 	vmul.f32	s0, s17, s0
 80109fc:	f7ff ff92 	bl	8010924 <tanhXdX>
 8010a00:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8010a04:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010a08:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
 8010a0c:	ee29 0a2d 	vmul.f32	s0, s18, s27
 8010a10:	f7ff ff88 	bl	8010924 <tanhXdX>
 8010a14:	ee2d da00 	vmul.f32	s26, s26, s0
 8010a18:	ee2d 7a8d 	vmul.f32	s14, s27, s26
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a1c:	ee79 6a2a 	vadd.f32	s13, s18, s21
 8010a20:	ee7c 7aaa 	vadd.f32	s15, s25, s21
 8010a24:	ee39 6a27 	vadd.f32	s12, s18, s15
 8010a28:	ee7c 7a8c 	vadd.f32	s15, s25, s24
 8010a2c:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 8010a30:	ee79 7a27 	vadd.f32	s15, s18, s15
 8010a34:	ee6b 5a8a 	vmul.f32	s11, s23, s20
 8010a38:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010a3c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010a40:	ee76 7a27 	vadd.f32	s15, s12, s15
 8010a44:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010a48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010a4c:	ee3a 6aaa 	vadd.f32	s12, s21, s21
 8010a50:	ee79 7a09 	vadd.f32	s15, s18, s18
 8010a54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010a58:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010a5c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010a60:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8010a64:	ee79 6a26 	vadd.f32	s13, s18, s13
 8010a68:	ee27 6a88 	vmul.f32	s12, s15, s16
 8010a6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010a70:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010a74:	ee29 6a05 	vmul.f32	s12, s18, s10
 8010a78:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010a7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010a80:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010a84:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010a88:	ee77 5a07 	vadd.f32	s11, s14, s14
 8010a8c:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8010a90:	ee75 7aa4 	vadd.f32	s15, s11, s9
 8010a94:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a9c:	ee2b 6a0a 	vmul.f32	s12, s22, s20
 8010aa0:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010aa4:	ee36 6a24 	vadd.f32	s12, s12, s9
 8010aa8:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010aac:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010ab0:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010ab4:	ee26 6a29 	vmul.f32	s12, s12, s19
 8010ab8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010abc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8010ac0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010ac4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010acc:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8010ad0:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010ad4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010ad8:	ee27 6a05 	vmul.f32	s12, s14, s10
 8010adc:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010ae0:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010ae4:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010ae8:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010aec:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8010af0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010af4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010af8:	ee77 7a86 	vadd.f32	s15, s15, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8010afc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b04:	d101      	bne.n	8010b0a <tDiodeFilter_tick+0x192>
    {
        tempy3denom = 0.000001f;
 8010b06:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010c3c <tDiodeFilter_tick+0x2c4>
    }
    y3 = y3 / tempy3denom;
 8010b0a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8010b0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b16:	d101      	bne.n	8010b1c <tDiodeFilter_tick+0x1a4>
    {
        t1 = 0.000001f;
 8010b18:	ed9f 8a48 	vldr	s16, [pc, #288]	; 8010c3c <tDiodeFilter_tick+0x2c4>
    }
    if (t2 == 0.0f)
 8010b1c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b24:	d101      	bne.n	8010b2a <tDiodeFilter_tick+0x1b2>
    {
        t2 = 0.000001f;
 8010b26:	eddf 9a45 	vldr	s19, [pc, #276]	; 8010c3c <tDiodeFilter_tick+0x2c4>
    }
    if (t3 == 0.0f)
 8010b2a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b32:	d101      	bne.n	8010b38 <tDiodeFilter_tick+0x1c0>
    {
        t3 = 0.000001f;
 8010b34:	eddf 8a41 	vldr	s17, [pc, #260]	; 8010c3c <tDiodeFilter_tick+0x2c4>
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b3c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010b40:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8010b44:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010b48:	ee79 6a66 	vsub.f32	s13, s18, s13
 8010b4c:	eef1 6a66 	vneg.f32	s13, s13
 8010b50:	ee86 5aa8 	vdiv.f32	s10, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010b54:	ee78 5aa7 	vadd.f32	s11, s17, s15
 8010b58:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8010b5c:	ee65 5a85 	vmul.f32	s11, s11, s10
 8010b60:	ee7a 5ae5 	vsub.f32	s11, s21, s11
 8010b64:	ee68 6a86 	vmul.f32	s13, s17, s12
 8010b68:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8010b6c:	eef1 5a65 	vneg.f32	s11, s11
 8010b70:	eec5 6aa9 	vdiv.f32	s13, s11, s19
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010b74:	ee79 7aa7 	vadd.f32	s15, s19, s15
 8010b78:	ee77 7a88 	vadd.f32	s15, s15, s16
 8010b7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b80:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8010b84:	ee69 5a85 	vmul.f32	s11, s19, s10
 8010b88:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010b8c:	eef1 7a67 	vneg.f32	s15, s15
 8010b90:	eec7 5a88 	vdiv.f32	s11, s15, s16
    Lfloat xx = (in - f->r*y3);
 8010b94:	ee2b ba06 	vmul.f32	s22, s22, s12
 8010b98:	ee7b 7acb 	vsub.f32	s15, s23, s22
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010b9c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8010ba0:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8010ba4:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010ba8:	ee3a aa08 	vadd.f32	s20, s20, s16
 8010bac:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8010bb0:	ee3c 0a0a 	vadd.f32	s0, s24, s20
 8010bb4:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010bb8:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010bbc:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8010bc0:	ee36 8ac8 	vsub.f32	s16, s13, s16
 8010bc4:	ee38 8a08 	vadd.f32	s16, s16, s16
 8010bc8:	ee3c 8a88 	vadd.f32	s16, s25, s16
 8010bcc:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010bd0:	ee36 5a45 	vsub.f32	s10, s12, s10
 8010bd4:	ee25 5a28 	vmul.f32	s10, s10, s17
 8010bd8:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010bdc:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010be0:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8010be4:	edc4 aa0d 	vstr	s21, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010be8:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010bec:	ee37 7a45 	vsub.f32	s14, s14, s10
 8010bf0:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010bf4:	ee39 9a07 	vadd.f32	s18, s18, s14
 8010bf8:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
    
    f->s0 = tanhf(f->s0);
 8010bfc:	f005 fe54 	bl	80168a8 <tanhf>
 8010c00:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8010c04:	eeb0 0a48 	vmov.f32	s0, s16
 8010c08:	f005 fe4e 	bl	80168a8 <tanhf>
 8010c0c:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8010c10:	eeb0 0a6a 	vmov.f32	s0, s21
 8010c14:	f005 fe48 	bl	80168a8 <tanhf>
 8010c18:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8010c1c:	eeb0 0a49 	vmov.f32	s0, s18
 8010c20:	f005 fe42 	bl	80168a8 <tanhf>
 8010c24:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8010c28:	edc4 ba07 	vstr	s23, [r4, #28]
    return tanhf(y3*f->r);
 8010c2c:	eeb0 0a4b 	vmov.f32	s0, s22
 8010c30:	f005 fe3a 	bl	80168a8 <tanhf>
}
 8010c34:	ecbd 8b0c 	vpop	{d8-d13}
 8010c38:	bd10      	pop	{r4, pc}
 8010c3a:	bf00      	nop
 8010c3c:	358637bd 	.word	0x358637bd

08010c40 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8010c40:	b510      	push	{r4, lr}
 8010c42:	ed2d 8b0c 	vpush	{d8-d13}
 8010c46:	eeb0 ca40 	vmov.f32	s24, s0
    _tDiodeFilter* f = *vf;
 8010c4a:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
 8010c4c:	ed94 0a07 	vldr	s0, [r4, #28]
 8010c50:	ee30 0a0c 	vadd.f32	s0, s0, s24
 8010c54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c58:	ee20 0a27 	vmul.f32	s0, s0, s15

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c5c:	ed94 da02 	vldr	s26, [r4, #8]
 8010c60:	edd4 ba03 	vldr	s23, [r4, #12]
 8010c64:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
 8010c68:	ee6b 7aa9 	vmul.f32	s15, s23, s19
 8010c6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c70:	ed94 aa08 	vldr	s20, [r4, #32]
 8010c74:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8010c78:	f7ff fe54 	bl	8010924 <tanhXdX>
 8010c7c:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8010c80:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010c84:	ed94 ba0c 	vldr	s22, [r4, #48]	; 0x30
 8010c88:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
 8010c8c:	ee3b 0a6c 	vsub.f32	s0, s22, s25
 8010c90:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 8010c94:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010c98:	f7ff fe44 	bl	8010924 <tanhXdX>
 8010c9c:	ee2d 8a00 	vmul.f32	s16, s26, s0
 8010ca0:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010ca4:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
 8010ca8:	ee3a 0acb 	vsub.f32	s0, s21, s22
 8010cac:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010cb0:	f7ff fe38 	bl	8010924 <tanhXdX>
 8010cb4:	ee2d 9a00 	vmul.f32	s18, s26, s0
 8010cb8:	ee28 9a89 	vmul.f32	s18, s17, s18
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010cbc:	ee39 0aea 	vsub.f32	s0, s19, s21
 8010cc0:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010cc4:	f7ff fe2e 	bl	8010924 <tanhXdX>
 8010cc8:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8010ccc:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010cd0:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
 8010cd4:	ee29 0aad 	vmul.f32	s0, s19, s27
 8010cd8:	f7ff fe24 	bl	8010924 <tanhXdX>
 8010cdc:	ee2d da00 	vmul.f32	s26, s26, s0
 8010ce0:	ee2d 7a8d 	vmul.f32	s14, s27, s26

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010ce4:	ee79 6aaa 	vadd.f32	s13, s19, s21
 8010ce8:	ee7b 7a2a 	vadd.f32	s15, s22, s21
 8010cec:	ee39 6aa7 	vadd.f32	s12, s19, s15
 8010cf0:	ee7b 7a2c 	vadd.f32	s15, s22, s25
 8010cf4:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 8010cf8:	ee79 7aa7 	vadd.f32	s15, s19, s15
 8010cfc:	ee6c 5a0a 	vmul.f32	s11, s24, s20
 8010d00:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010d04:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010d08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8010d0c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8010d10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010d14:	ee3a 6aaa 	vadd.f32	s12, s21, s21
 8010d18:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8010d1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010d20:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010d24:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010d28:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8010d2c:	ee79 6aa6 	vadd.f32	s13, s19, s13
 8010d30:	ee27 6a88 	vmul.f32	s12, s15, s16
 8010d34:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010d38:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010d3c:	ee29 6a85 	vmul.f32	s12, s19, s10
 8010d40:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010d44:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010d48:	ee67 7a89 	vmul.f32	s15, s15, s18
 8010d4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010d50:	ee77 5a07 	vadd.f32	s11, s14, s14
 8010d54:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8010d58:	ee75 7aa4 	vadd.f32	s15, s11, s9
 8010d5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d64:	ee2b 6a8a 	vmul.f32	s12, s23, s20
 8010d68:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010d6c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8010d70:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010d74:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010d78:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010d7c:	ee26 6a09 	vmul.f32	s12, s12, s18
 8010d80:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010d84:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8010d88:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010d8c:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d94:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8010d98:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010d9c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010da0:	ee27 6a05 	vmul.f32	s12, s14, s10
 8010da4:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010da8:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010dac:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010db0:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010db4:	ee65 5a89 	vmul.f32	s11, s11, s18
 8010db8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010dbc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010dc0:	ee77 7a86 	vadd.f32	s15, s15, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8010dc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dcc:	d101      	bne.n	8010dd2 <tDiodeFilter_tickEfficient+0x192>
    {
        tempy3denom = 0.000001f;
 8010dce:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8010f08 <tDiodeFilter_tickEfficient+0x2c8>
    }

    y3 = y3 / tempy3denom;
 8010dd2:	ee86 daa7 	vdiv.f32	s26, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8010dd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dde:	d101      	bne.n	8010de4 <tDiodeFilter_tickEfficient+0x1a4>
    {
        t1 = 0.000001f;
 8010de0:	ed9f 8a49 	vldr	s16, [pc, #292]	; 8010f08 <tDiodeFilter_tickEfficient+0x2c8>
    }
    if (t2 == 0.0f)
 8010de4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dec:	d101      	bne.n	8010df2 <tDiodeFilter_tickEfficient+0x1b2>
    {
        t2 = 0.000001f;
 8010dee:	ed9f 9a46 	vldr	s18, [pc, #280]	; 8010f08 <tDiodeFilter_tickEfficient+0x2c8>
    }
    if (t3 == 0.0f)
 8010df2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfa:	d101      	bne.n	8010e00 <tDiodeFilter_tickEfficient+0x1c0>
    {
        t3 = 0.000001f;
 8010dfc:	eddf 8a42 	vldr	s17, [pc, #264]	; 8010f08 <tDiodeFilter_tickEfficient+0x2c8>
    }

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010e00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010e04:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010e08:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8010e0c:	ee66 6a8d 	vmul.f32	s13, s13, s26
 8010e10:	ee79 6ae6 	vsub.f32	s13, s19, s13
 8010e14:	eef1 6a66 	vneg.f32	s13, s13
 8010e18:	eec6 5aa8 	vdiv.f32	s11, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010e1c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8010e20:	ee36 6a09 	vadd.f32	s12, s12, s18
 8010e24:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010e28:	ee3a 6ac6 	vsub.f32	s12, s21, s12
 8010e2c:	ee68 6a8d 	vmul.f32	s13, s17, s26
 8010e30:	ee36 6a26 	vadd.f32	s12, s12, s13
 8010e34:	eeb1 6a46 	vneg.f32	s12, s12
 8010e38:	eec6 6a09 	vdiv.f32	s13, s12, s18
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010e3c:	ee79 7a27 	vadd.f32	s15, s18, s15
 8010e40:	ee77 7a88 	vadd.f32	s15, s15, s16
 8010e44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e48:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010e4c:	ee29 6a25 	vmul.f32	s12, s18, s11
 8010e50:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e54:	eef1 7a67 	vneg.f32	s15, s15
 8010e58:	ee87 6a88 	vdiv.f32	s12, s15, s16
    Lfloat xx = (in - f->r*y3);
 8010e5c:	ee6b ba8d 	vmul.f32	s23, s23, s26
 8010e60:	ee7c ba6b 	vsub.f32	s23, s24, s23

    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010e64:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8010e68:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8010e6c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010e70:	ee3a aa27 	vadd.f32	s20, s20, s15
 8010e74:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8010e78:	ee3c 0a8a 	vadd.f32	s0, s25, s20
 8010e7c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010e80:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010e84:	ee66 6a89 	vmul.f32	s13, s13, s18
 8010e88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010e90:	ee3b ba27 	vadd.f32	s22, s22, s15
 8010e94:	ed84 ba0c 	vstr	s22, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010e98:	ee7d 5a65 	vsub.f32	s11, s26, s11
 8010e9c:	ee65 5aa8 	vmul.f32	s11, s11, s17
 8010ea0:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010ea4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010ea8:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8010eac:	edc4 aa0d 	vstr	s21, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010eb0:	ee27 7a4d 	vnmul.f32	s14, s14, s26
 8010eb4:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010eb8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010ebc:	ee79 9a87 	vadd.f32	s19, s19, s14
 8010ec0:	edc4 9a0e 	vstr	s19, [r4, #56]	; 0x38
    f->s0 = fast_tanh4(f->s0);
 8010ec4:	f000 fc62 	bl	801178c <fast_tanh4>
 8010ec8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 8010ecc:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8010ed0:	f000 fc5c 	bl	801178c <fast_tanh4>
 8010ed4:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 8010ed8:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8010edc:	f000 fc56 	bl	801178c <fast_tanh4>
 8010ee0:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 8010ee4:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8010ee8:	f000 fc50 	bl	801178c <fast_tanh4>
 8010eec:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8010ef0:	ed84 ca07 	vstr	s24, [r4, #28]
    return fast_tanh4(y3*f->r);
 8010ef4:	ed94 0a03 	vldr	s0, [r4, #12]
 8010ef8:	ee20 0a0d 	vmul.f32	s0, s0, s26
 8010efc:	f000 fc46 	bl	801178c <fast_tanh4>
}
 8010f00:	ecbd 8b0c 	vpop	{d8-d13}
 8010f04:	bd10      	pop	{r4, pc}
 8010f06:	bf00      	nop
 8010f08:	358637bd 	.word	0x358637bd

08010f0c <tDiodeFilter_setFreqFast>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
 8010f0c:	6801      	ldr	r1, [r0, #0]
	f->cutoffMIDI = cutoff;
 8010f0e:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 8010f12:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010f70 <tDiodeFilter_setFreqFast+0x64>
 8010f16:	ee20 0a27 	vmul.f32	s0, s0, s15

    int32_t intVer = (int32_t)cutoff;
 8010f1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010f1e:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 8010f22:	f640 72fe 	movw	r2, #4094	; 0xffe
 8010f26:	4293      	cmp	r3, r2
 8010f28:	dc03      	bgt.n	8010f32 <tDiodeFilter_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	da03      	bge.n	8010f36 <tDiodeFilter_setFreqFast+0x2a>
    {
    	intVer = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e001      	b.n	8010f36 <tDiodeFilter_setFreqFast+0x2a>
    	intVer = 4094;
 8010f32:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010f36:	ee07 3a90 	vmov	s15, r3
 8010f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f3e:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8010f42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010f44:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8010f48:	edd0 7a00 	vldr	s15, [r0]
 8010f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f50:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f58:	3301      	adds	r3, #1
 8010f5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f5e:	ed92 7a00 	vldr	s14, [r2]
 8010f62:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010f66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f6a:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8010f6e:	4770      	bx	lr
 8010f70:	41f4898d 	.word	0x41f4898d

08010f74 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
 8010f74:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8010f76:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8010f78:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8010f7c:	ee60 0a27 	vmul.f32	s1, s0, s15
 8010f80:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8010f84:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8010f88:	ee70 0a80 	vadd.f32	s1, s1, s0
 8010f8c:	f000 fb7a 	bl	8011684 <LEAF_clip>
 8010f90:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8010f94:	bd10      	pop	{r4, pc}
	...

08010f98 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
 8010f98:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 8010f9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010fa2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sr > 90000)
 8010fa6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010fc0 <tDiodeFilter_setSampleRate+0x28>
 8010faa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	dd02      	ble.n	8010fba <tDiodeFilter_setSampleRate+0x22>
    {
    	f->table = __filterTanhTable_96000;
 8010fb4:	4a03      	ldr	r2, [pc, #12]	; (8010fc4 <tDiodeFilter_setSampleRate+0x2c>)
 8010fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8010fb8:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8010fba:	4a03      	ldr	r2, [pc, #12]	; (8010fc8 <tDiodeFilter_setSampleRate+0x30>)
 8010fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
}
 8010fbe:	4770      	bx	lr
 8010fc0:	47afc800 	.word	0x47afc800
 8010fc4:	0801c990 	.word	0x0801c990
 8010fc8:	08018990 	.word	0x08018990

08010fcc <tLadderFilter_initToPool>:
{
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 8010fcc:	b570      	push	{r4, r5, r6, lr}
 8010fce:	ed2d 8b02 	vpush	{d8}
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	eeb0 8a40 	vmov.f32	s16, s0
 8010fd8:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 8010fdc:	680d      	ldr	r5, [r1, #0]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8010fde:	4629      	mov	r1, r5
 8010fe0:	2040      	movs	r0, #64	; 0x40
 8010fe2:	f000 fecd 	bl	8011d80 <mpool_alloc>
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8010fea:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010fec:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 8010fee:	686b      	ldr	r3, [r5, #4]
 8010ff0:	6083      	str	r3, [r0, #8]
    f->cutoff = cutoff;
 8010ff2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->cutoffMIDI = ftom(cutoff);
 8010ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8010ffa:	f000 fde3 	bl	8011bc4 <ftom>
 8010ffe:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 8011002:	2301      	movs	r3, #1
 8011004:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8011006:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801107c <tLadderFilter_initToPool+0xb0>
 801100a:	ee28 0a27 	vmul.f32	s0, s16, s15
 801100e:	edd4 7a02 	vldr	s15, [r4, #8]
 8011012:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011016:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801101a:	f005 fcad 	bl	8016978 <tan>
 801101e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011022:	ed84 0a04 	vstr	s0, [r4, #16]
    f->c2 = 2.0f * f->c;
 8011026:	ee30 0a00 	vadd.f32	s0, s0, s0
 801102a:	ed84 0a06 	vstr	s0, [r4, #24]
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 801102e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011032:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011036:	edc4 8a05 	vstr	s17, [r4, #20]

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801103a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801103e:	61e3      	str	r3, [r4, #28]
    f->s = 0.1f;
 8011040:	4b0f      	ldr	r3, [pc, #60]	; (8011080 <tLadderFilter_initToPool+0xb4>)
 8011042:	6223      	str	r3, [r4, #32]
    f->d = 1.0f;
 8011044:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011048:	6263      	str	r3, [r4, #36]	; 0x24
    
    
    f->b[0] = 0.01f;
 801104a:	4b0e      	ldr	r3, [pc, #56]	; (8011084 <tLadderFilter_initToPool+0xb8>)
 801104c:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.02f;
 801104e:	4b0e      	ldr	r3, [pc, #56]	; (8011088 <tLadderFilter_initToPool+0xbc>)
 8011050:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.03f;
 8011052:	4b0e      	ldr	r3, [pc, #56]	; (801108c <tLadderFilter_initToPool+0xc0>)
 8011054:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.04f;
 8011056:	4b0e      	ldr	r3, [pc, #56]	; (8011090 <tLadderFilter_initToPool+0xc4>)
 8011058:	62a3      	str	r3, [r4, #40]	; 0x28
    if (leaf->sampleRate > 90000)
 801105a:	ed95 7a00 	vldr	s14, [r5]
 801105e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011094 <tLadderFilter_initToPool+0xc8>
 8011062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106a:	dd04      	ble.n	8011076 <tLadderFilter_initToPool+0xaa>
    {
    	f->table = __filterTanhTable_96000;
 801106c:	4b0a      	ldr	r3, [pc, #40]	; (8011098 <tLadderFilter_initToPool+0xcc>)
 801106e:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8011070:	ecbd 8b02 	vpop	{d8}
 8011074:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 8011076:	4b09      	ldr	r3, [pc, #36]	; (801109c <tLadderFilter_initToPool+0xd0>)
 8011078:	63a3      	str	r3, [r4, #56]	; 0x38
}
 801107a:	e7f9      	b.n	8011070 <tLadderFilter_initToPool+0xa4>
 801107c:	40490fdb 	.word	0x40490fdb
 8011080:	3dcccccd 	.word	0x3dcccccd
 8011084:	3c23d70a 	.word	0x3c23d70a
 8011088:	3ca3d70a 	.word	0x3ca3d70a
 801108c:	3cf5c28f 	.word	0x3cf5c28f
 8011090:	3d23d70a 	.word	0x3d23d70a
 8011094:	47afc800 	.word	0x47afc800
 8011098:	0801c990 	.word	0x0801c990
 801109c:	08018990 	.word	0x08018990

080110a0 <tLadderFilter_init>:
{
 80110a0:	b508      	push	{r3, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 80110a2:	3118      	adds	r1, #24
 80110a4:	f7ff ff92 	bl	8010fcc <tLadderFilter_initToPool>
}
 80110a8:	bd08      	pop	{r3, pc}

080110aa <smoothABS>:
    _tLadderFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

Lfloat smoothABS ( Lfloat x, const Lfloat y) // y controls 'smoothness' usually between 0.002 -> 0.04
{
 80110aa:	b508      	push	{r3, lr}
 80110ac:	ed2d 8b02 	vpush	{d8}
 80110b0:	eeb0 8a60 	vmov.f32	s16, s1
//		Lfloat output2;
//		arm_sqrt_f32((x * x)  + y, &output1);
//		arm_sqrt_f32(y, &output2);
//		return output1 - output2;
//	#else
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80110b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80110b8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80110bc:	f005 fb9c 	bl	80167f8 <sqrtf>
 80110c0:	eef0 8a40 	vmov.f32	s17, s0
 80110c4:	eeb0 0a48 	vmov.f32	s0, s16
 80110c8:	f005 fb96 	bl	80167f8 <sqrtf>
//	#endif
}
 80110cc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80110d0:	ecbd 8b02 	vpop	{d8}
 80110d4:	bd08      	pop	{r3, pc}
	...

080110d8 <smoothclip>:

Lfloat smoothclip (Lfloat x, const Lfloat a, const Lfloat b) // assuming symmetrical clipping
{
 80110d8:	b508      	push	{r3, lr}
 80110da:	ed2d 8b06 	vpush	{d8-d10}
 80110de:	eeb0 9a40 	vmov.f32	s18, s0
 80110e2:	eeb0 8a60 	vmov.f32	s16, s1
 80110e6:	eef0 8a41 	vmov.f32	s17, s2
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 80110ea:	ed9f aa0e 	vldr	s20, [pc, #56]	; 8011124 <smoothclip+0x4c>
 80110ee:	eef0 0a4a 	vmov.f32	s1, s20
 80110f2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80110f6:	f7ff ffd8 	bl	80110aa <smoothABS>
 80110fa:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 80110fe:	eef0 0a4a 	vmov.f32	s1, s20
 8011102:	ee39 0a68 	vsub.f32	s0, s18, s17
 8011106:	f7ff ffd0 	bl	80110aa <smoothABS>
    x = x1 + (a+b);
 801110a:	ee38 8a28 	vadd.f32	s16, s16, s17
 801110e:	ee38 8a29 	vadd.f32	s16, s16, s19
    x = x - x2;
 8011112:	ee38 8a40 	vsub.f32	s16, s16, s0
    x = x * 0.5;
    return (x);
}
 8011116:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801111a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801111e:	ecbd 8b06 	vpop	{d8-d10}
 8011122:	bd08      	pop	{r3, pc}
 8011124:	3c23d70a 	.word	0x3c23d70a

08011128 <tanhd>:

Lfloat tanhd(const Lfloat x, const Lfloat d, const Lfloat s)
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8011128:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801112c:	ee70 7a87 	vadd.f32	s15, s1, s14
 8011130:	ee67 7a81 	vmul.f32	s15, s15, s2
 8011134:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011138:	ee67 7a80 	vmul.f32	s15, s15, s0
 801113c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011140:	ee70 0a20 	vadd.f32	s1, s0, s1
 8011144:	ee87 0aa0 	vdiv.f32	s0, s15, s1
}
 8011148:	ee37 0a40 	vsub.f32	s0, s14, s0
 801114c:	4770      	bx	lr
	...

08011150 <tLadderFilter_tick>:

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	ed2d 8b0e 	vpush	{d8-d14}
    _tLadderFilter* f = *vf;
 8011156:	6804      	ldr	r4, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8011158:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8011394 <tLadderFilter_tick+0x244>
 801115c:	ee70 da27 	vadd.f32	s27, s0, s15
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8011160:	2500      	movs	r5, #0
    Lfloat y3 = 0.0f;
 8011162:	ed9f aa8d 	vldr	s20, [pc, #564]	; 8011398 <tLadderFilter_tick+0x248>
    for (int i = 0; i < f->oversampling; i++) {
 8011166:	e100      	b.n	801136a <tLadderFilter_tick+0x21a>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8011168:	ed94 ca0a 	vldr	s24, [r4, #40]	; 0x28
 801116c:	ed94 aa07 	vldr	s20, [r4, #28]
 8011170:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
 8011174:	ed94 ba08 	vldr	s22, [r4, #32]
 8011178:	eeb0 1a4b 	vmov.f32	s2, s22
 801117c:	eef0 0a6a 	vmov.f32	s1, s21
 8011180:	ee3c 0a0a 	vadd.f32	s0, s24, s20
 8011184:	f7ff ffd0 	bl	8011128 <tanhd>
 8011188:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 801118c:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
 8011190:	eeb0 1a4b 	vmov.f32	s2, s22
 8011194:	eef0 0a6a 	vmov.f32	s1, s21
 8011198:	ee3a 0a2c 	vadd.f32	s0, s20, s25
 801119c:	f7ff ffc4 	bl	8011128 <tanhd>
 80111a0:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80111a4:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 80111a8:	eeb0 1a4b 	vmov.f32	s2, s22
 80111ac:	eef0 0a6a 	vmov.f32	s1, s21
 80111b0:	ee3a 0a0e 	vadd.f32	s0, s20, s28
 80111b4:	f7ff ffb8 	bl	8011128 <tanhd>
 80111b8:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80111bc:	edd4 9a0d 	vldr	s19, [r4, #52]	; 0x34
 80111c0:	eeb0 1a4b 	vmov.f32	s2, s22
 80111c4:	eef0 0a6a 	vmov.f32	s1, s21
 80111c8:	ee3a 0a29 	vadd.f32	s0, s20, s19
 80111cc:	f7ff ffac 	bl	8011128 <tanhd>
 80111d0:	eeb0 aa40 	vmov.f32	s20, s0
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80111d4:	edd4 7a04 	vldr	s15, [r4, #16]
 80111d8:	ee27 3aa8 	vmul.f32	s6, s15, s17
 80111dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80111e0:	ee33 5a01 	vadd.f32	s10, s6, s2
 80111e4:	ee81 da05 	vdiv.f32	s26, s2, s10
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80111e8:	ee67 3a88 	vmul.f32	s7, s15, s16
 80111ec:	ee73 5a81 	vadd.f32	s11, s7, s2
 80111f0:	eec1 ba25 	vdiv.f32	s23, s2, s11
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 80111f4:	ee27 4a89 	vmul.f32	s8, s15, s18
 80111f8:	ee34 6a01 	vadd.f32	s12, s8, s2
 80111fc:	ee81 ba06 	vdiv.f32	s22, s2, s12
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8011200:	ee67 4a80 	vmul.f32	s9, s15, s0
 8011204:	ee34 7a81 	vadd.f32	s14, s9, s2
 8011208:	eec1 aa07 	vdiv.f32	s21, s2, s14
        
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 801120c:	eec3 6a05 	vdiv.f32	s13, s6, s10
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 8011210:	ee83 5aa5 	vdiv.f32	s10, s7, s11
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 8011214:	eec4 5a06 	vdiv.f32	s11, s8, s12
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 8011218:	ee84 6a87 	vdiv.f32	s12, s9, s14
        
        Lfloat f3 = f->c       * t2*g3;
 801121c:	ee24 4a2a 	vmul.f32	s8, s8, s21
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8011220:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8011224:	ee63 4a88 	vmul.f32	s9, s7, s16
 8011228:	ee64 4a8b 	vmul.f32	s9, s9, s22
 801122c:	ee64 4a89 	vmul.f32	s9, s9, s18
 8011230:	ee64 4aaa 	vmul.f32	s9, s9, s21
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8011234:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8011238:	ee23 7aa8 	vmul.f32	s14, s7, s17
 801123c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8011240:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011244:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8011248:	ee27 7a09 	vmul.f32	s14, s14, s18
 801124c:	ee27 7a2a 	vmul.f32	s14, s14, s21
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 8011250:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011254:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8011258:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801125c:	ee67 7aab 	vmul.f32	s15, s15, s23
 8011260:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011264:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011268:	ee67 7a89 	vmul.f32	s15, s15, s18
 801126c:	ee67 7aaa 	vmul.f32	s15, s15, s21
        
        Lfloat estimate =
        g3 * f->b[3] +
 8011270:	ee29 0aaa 	vmul.f32	s0, s19, s21
        f3 * g2 * f->b[2] +
 8011274:	ee2b 4a04 	vmul.f32	s8, s22, s8
 8011278:	ee2e ea04 	vmul.f32	s28, s28, s8
        g3 * f->b[3] +
 801127c:	ee30 0a0e 	vadd.f32	s0, s0, s28
        f2 * g1 * f->b[1] +
 8011280:	ee6b 4aa4 	vmul.f32	s9, s23, s9
 8011284:	ee6c caa4 	vmul.f32	s25, s25, s9
        f3 * g2 * f->b[2] +
 8011288:	ee30 0a2c 	vadd.f32	s0, s0, s25
        f1 * g0 * f->b[0] +
 801128c:	ee2d 7a07 	vmul.f32	s14, s26, s14
 8011290:	ee2c ca07 	vmul.f32	s24, s24, s14
        f2 * g1 * f->b[1] +
 8011294:	ee30 0a0c 	vadd.f32	s0, s0, s24
        f0 * in;
 8011298:	ee6d 7aa7 	vmul.f32	s15, s27, s15
        Lfloat estimate =
 801129c:	ee70 7a27 	vadd.f32	s15, s0, s15
        
        // feedback gain coefficient, absolutely critical to get this correct
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80112a0:	ed94 0a05 	vldr	s0, [r4, #20]
 80112a4:	ee20 7a26 	vmul.f32	s14, s0, s13
 80112a8:	ee27 7a05 	vmul.f32	s14, s14, s10
 80112ac:	ee27 7a25 	vmul.f32	s14, s14, s11
 80112b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80112b4:	ee37 7a01 	vadd.f32	s14, s14, s2
 80112b8:	eec1 9a07 	vdiv.f32	s19, s2, s14
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80112bc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80112c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80112c4:	f7ff ff08 	bl	80110d8 <smoothclip>
 80112c8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80112cc:	ee3d 0ac0 	vsub.f32	s0, s27, s0
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 80112d0:	ee68 8a8d 	vmul.f32	s17, s17, s26
 80112d4:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 80112d8:	edd4 7a04 	vldr	s15, [r4, #16]
 80112dc:	ee27 7a80 	vmul.f32	s14, s15, s0
 80112e0:	ee35 7a87 	vadd.f32	s14, s11, s14
 80112e4:	ee68 8a87 	vmul.f32	s17, s17, s14
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80112e8:	ee28 8a2b 	vmul.f32	s16, s16, s23
 80112ec:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80112f0:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80112f4:	ee36 7a07 	vadd.f32	s14, s12, s14
 80112f8:	ee28 8a07 	vmul.f32	s16, s16, s14
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80112fc:	ee29 9a0b 	vmul.f32	s18, s18, s22
 8011300:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011304:	ee27 7a88 	vmul.f32	s14, s15, s16
 8011308:	ee36 7a87 	vadd.f32	s14, s13, s14
 801130c:	ee29 9a07 	vmul.f32	s18, s18, s14
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8011310:	ee2a aa2a 	vmul.f32	s20, s20, s21
 8011314:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8011318:	ee67 7a89 	vmul.f32	s15, s15, s18
 801131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011320:	ee2a aa27 	vmul.f32	s20, s20, s15
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8011324:	edd4 7a06 	vldr	s15, [r4, #24]
 8011328:	ee30 0a68 	vsub.f32	s0, s0, s17
 801132c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011330:	ee75 5a80 	vadd.f32	s11, s11, s0
 8011334:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
        f->b[1] += f->c2 * (y0 - y1);
 8011338:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801133c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8011340:	ee36 6a28 	vadd.f32	s12, s12, s17
 8011344:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
        f->b[2] += f->c2 * (y1 - y2);
 8011348:	ee38 8a49 	vsub.f32	s16, s16, s18
 801134c:	ee27 8a88 	vmul.f32	s16, s15, s16
 8011350:	ee76 6a88 	vadd.f32	s13, s13, s16
 8011354:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
        f->b[3] += f->c2 * (y2 - y3);
 8011358:	ee39 9a4a 	vsub.f32	s18, s18, s20
 801135c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011364:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    for (int i = 0; i < f->oversampling; i++) {
 8011368:	3501      	adds	r5, #1
 801136a:	68e3      	ldr	r3, [r4, #12]
 801136c:	42ab      	cmp	r3, r5
 801136e:	f73f aefb 	bgt.w	8011168 <tLadderFilter_tick+0x18>
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8011372:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8011376:	eddf 0a08 	vldr	s1, [pc, #32]	; 8011398 <tLadderFilter_tick+0x248>
 801137a:	ed94 0a05 	vldr	s0, [r4, #20]
 801137e:	f7ff feab 	bl	80110d8 <smoothclip>
 8011382:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011386:	ee30 0a27 	vadd.f32	s0, s0, s15
    return y3 * compensation;
}
 801138a:	ee2a 0a00 	vmul.f32	s0, s20, s0
 801138e:	ecbd 8b0e 	vpop	{d8-d14}
 8011392:	bd38      	pop	{r3, r4, r5, pc}
 8011394:	3c75c28f 	.word	0x3c75c28f
 8011398:	00000000 	.word	0x00000000

0801139c <tLadderFilter_setFreqFast>:
    f->c2 = 2.0f * f->c;
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
 801139c:	6802      	ldr	r2, [r0, #0]
    f->cutoffMIDI = cutoff;
 801139e:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    cutoff *= 30.567164179104478f;
 80113a2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011408 <tLadderFilter_setFreqFast+0x6c>
 80113a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 80113aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80113ae:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 80113b2:	f640 71fe 	movw	r1, #4094	; 0xffe
 80113b6:	428b      	cmp	r3, r1
 80113b8:	dc03      	bgt.n	80113c2 <tLadderFilter_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	da03      	bge.n	80113c6 <tLadderFilter_setFreqFast+0x2a>
    {
    	intVer = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	e001      	b.n	80113c6 <tLadderFilter_setFreqFast+0x2a>
    	intVer = 4094;
 80113c2:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80113c6:	ee07 3a90 	vmov	s15, r3
 80113ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80113ce:	ee30 0a67 	vsub.f32	s0, s0, s15

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80113d2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80113d4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80113d8:	edd0 7a00 	vldr	s15, [r0]
 80113dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80113e0:	ee37 7a40 	vsub.f32	s14, s14, s0
 80113e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80113e8:	3301      	adds	r3, #1
 80113ea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80113ee:	ed91 7a00 	vldr	s14, [r1]
 80113f2:	ee27 7a00 	vmul.f32	s14, s14, s0
 80113f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80113fa:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 80113fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011402:	edc2 7a06 	vstr	s15, [r2, #24]
}
 8011406:	4770      	bx	lr
 8011408:	41f4898d 	.word	0x41f4898d

0801140c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 801140c:	b510      	push	{r4, lr}
 801140e:	eef0 0a40 	vmov.f32	s1, s0
    _tLadderFilter* f = *vf;
 8011412:	6804      	ldr	r4, [r0, #0]
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8011414:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8011418:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011428 <tLadderFilter_setQ+0x1c>
 801141c:	f000 f932 	bl	8011684 <LEAF_clip>
 8011420:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8011424:	bd10      	pop	{r4, pc}
 8011426:	bf00      	nop
 8011428:	3e4ccccd 	.word	0x3e4ccccd

0801142c <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
 801142c:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 801142e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011436:	edc3 7a02 	vstr	s15, [r3, #8]
    if (sr > 90000)
 801143a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011454 <tLadderFilter_setSampleRate+0x28>
 801143e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011446:	dd02      	ble.n	801144e <tLadderFilter_setSampleRate+0x22>
    {
    	f->table = __filterTanhTable_96000;
 8011448:	4a03      	ldr	r2, [pc, #12]	; (8011458 <tLadderFilter_setSampleRate+0x2c>)
 801144a:	639a      	str	r2, [r3, #56]	; 0x38
 801144c:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801144e:	4a03      	ldr	r2, [pc, #12]	; (801145c <tLadderFilter_setSampleRate+0x30>)
 8011450:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
 8011452:	4770      	bx	lr
 8011454:	47afc800 	.word	0x47afc800
 8011458:	0801c990 	.word	0x0801c990
 801145c:	08018990 	.word	0x08018990

08011460 <log2f_approx>:
#define log10f_fast(x)  (log2f_approx(x)*0.3010299956639812f)
#define twelfthRootOf2    1.0594630943592952646f 

// This is a fast approximation to log2() found on http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html credited to this post https://community.arm.com/developer/tools-software/tools/f/armds-forum/4292/cmsis-dsp-new-functionality-proposal/22621#22621
// Y = C[0]*F*F*F + C[1]*F*F + C[2]*F + C[3] + E;
Lfloat log2f_approx(Lfloat X) {
 8011460:	b500      	push	{lr}
 8011462:	b083      	sub	sp, #12
    Lfloat Y, F;
    int E;
    F = frexpf(fabsf(X), &E);
 8011464:	a801      	add	r0, sp, #4
 8011466:	eeb0 0ac0 	vabs.f32	s0, s0
 801146a:	f004 fc81 	bl	8015d70 <frexpf>
    Y = 1.23149591368684f;
    Y *= F;
 801146e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80114a8 <log2f_approx+0x48>
 8011472:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += -4.11852516267426f;
 8011476:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80114ac <log2f_approx+0x4c>
 801147a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    Y *= F;
 801147e:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += 6.02197014179219f;
 8011482:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80114b0 <log2f_approx+0x50>
 8011486:	ee77 7a87 	vadd.f32	s15, s15, s14
    Y *= F;
 801148a:	ee20 0a27 	vmul.f32	s0, s0, s15
    Y += -3.13396450166353f;
 801148e:	eddf 7a09 	vldr	s15, [pc, #36]	; 80114b4 <log2f_approx+0x54>
 8011492:	ee30 0a67 	vsub.f32	s0, s0, s15
    Y += E;
 8011496:	eddd 7a01 	vldr	s15, [sp, #4]
 801149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return(Y);
}
 801149e:	ee37 0a80 	vadd.f32	s0, s15, s0
 80114a2:	b003      	add	sp, #12
 80114a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114a8:	3f9da1a8 	.word	0x3f9da1a8
 80114ac:	4083caf5 	.word	0x4083caf5
 80114b0:	40c0b3fb 	.word	0x40c0b3fb
 80114b4:	404892e0 	.word	0x404892e0

080114b8 <LEAF_map>:
    return(fraction);
}

float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80114b8:	ee32 2a61 	vsub.f32	s4, s4, s3
 80114bc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80114c0:	ee31 1a60 	vsub.f32	s2, s2, s1
 80114c4:	eec0 7a01 	vdiv.f32	s15, s0, s2
 80114c8:	ee22 2a27 	vmul.f32	s4, s4, s15
}
 80114cc:	ee32 0a21 	vadd.f32	s0, s4, s3
 80114d0:	4770      	bx	lr
	...

080114d4 <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 80114d4:	ee60 7a00 	vmul.f32	s15, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
 80114d8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80114fc <fastertanf+0x28>
 80114dc:	ee27 7a87 	vmul.f32	s14, s15, s14
    fResult += 3.1755e-01f;
 80114e0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011500 <fastertanf+0x2c>
 80114e4:	ee37 7a26 	vadd.f32	s14, s14, s13
    fResult *= fASqr;
 80114e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    fResult += 1.0f;
 80114ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114f0:	ee77 7a87 	vadd.f32	s15, s15, s14
    fResult *= fAngle;
    return fResult;
}
 80114f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	3e502de0 	.word	0x3e502de0
 8011500:	3ea295ea 	.word	0x3ea295ea

08011504 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8011504:	4b10      	ldr	r3, [pc, #64]	; (8011548 <fastsqrtf+0x44>)
 8011506:	ee10 2a10 	vmov	r2, s0
 801150a:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 801150e:	ee07 3a10 	vmov	s14, r3
 8011512:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011516:	ee20 0a27 	vmul.f32	s0, s0, s15
 801151a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801151e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011522:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011526:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801152e:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8011532:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8011536:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 801153a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801153e:	336e      	adds	r3, #110	; 0x6e
}
 8011540:	ee00 3a10 	vmov	s0, r3
 8011544:	4770      	bx	lr
 8011546:	bf00      	nop
 8011548:	5f3759df 	.word	0x5f3759df

0801154c <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 801154c:	ee10 3a10 	vmov	r3, s0
 8011550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011554:	ee00 3a10 	vmov	s0, r3
}
 8011558:	4770      	bx	lr
	...

0801155c <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 801155c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011590 <fasterexpf+0x34>
 8011560:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011564:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011568:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 801156c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011570:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011574:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011578:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 801157c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011580:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011584:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8011588:	ee20 0a00 	vmul.f32	s0, s0, s0
 801158c:	4770      	bx	lr
 801158e:	bf00      	nop
 8011590:	3b800000 	.word	0x3b800000
 8011594:	00000000 	.word	0x00000000

08011598 <fast_sinf2>:
Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8011598:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801159c:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8011610 <fast_sinf2+0x78>
 80115a0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80115a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 80115a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80115ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b0:	d426      	bmi.n	8011600 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 80115b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 80115b6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80115ba:	ee17 3a90 	vmov	r3, s15
 80115be:	f3c3 030a 	ubfx	r3, r3, #0, #11
	int intXNext = (intX + 1) & 2047;
 80115c2:	1c59      	adds	r1, r3, #1
 80115c4:	f3c1 010a 	ubfx	r1, r1, #0, #11
	Lfloat LfloatX = x-intX;
 80115c8:	ee07 3a90 	vmov	s15, r3
 80115cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115d0:	ee30 0a67 	vsub.f32	s0, s0, s15

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 80115d4:	4a10      	ldr	r2, [pc, #64]	; (8011618 <fast_sinf2+0x80>)
 80115d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80115da:	ed93 7a00 	vldr	s14, [r3]
 80115de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80115e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80115e6:	ee27 7a27 	vmul.f32	s14, s14, s15
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 80115ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80115ee:	edd2 7a00 	vldr	s15, [r2]
 80115f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80115f6:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= invert;
	return out;
}
 80115fa:	ee26 0aa7 	vmul.f32	s0, s13, s15
 80115fe:	4770      	bx	lr
		x *= -1.0f;
 8011600:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 8011604:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8011608:	e7d5      	b.n	80115b6 <fast_sinf2+0x1e>
 801160a:	bf00      	nop
 801160c:	f3af 8000 	nop.w
 8011610:	6dc9c883 	.word	0x6dc9c883
 8011614:	40745f30 	.word	0x40745f30
 8011618:	08020a10 	.word	0x08020a10

0801161c <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 801161c:	ee10 3a10 	vmov	r3, s0
 8011620:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011624:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8011628:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 801162c:	330b      	adds	r3, #11
 801162e:	ee07 3a90 	vmov	s15, r3
 8011632:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011636:	ee20 0a20 	vmul.f32	s0, s0, s1
 801163a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8011648 <fastPowf+0x2c>
 801163e:	ee30 0a27 	vadd.f32	s0, s0, s15
    return u.d;
 8011642:	eebd 0ac0 	vcvt.s32.f32	s0, s0
}
 8011646:	4770      	bx	lr
 8011648:	4e7de250 	.word	0x4e7de250

0801164c <LEAF_round>:
}

// round input to nearest rnd
Lfloat LEAF_round (Lfloat input, Lfloat rnd)
{
    rnd = fabsf(rnd);
 801164c:	eef0 0ae0 	vabs.f32	s1, s1
    
    if (rnd <= 0.0000001f) return input;
 8011650:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011674 <LEAF_round+0x28>
 8011654:	eef4 0ae7 	vcmpe.f32	s1, s15
 8011658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165c:	d909      	bls.n	8011672 <LEAF_round+0x26>
    
    Lfloat scale = 1.f / rnd;
 801165e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011662:	eec7 7a20 	vdiv.f32	s15, s14, s1
    
    return roundf(input * scale) * rnd;
 8011666:	ee67 7a80 	vmul.f32	s15, s15, s0
 801166a:	fef8 7a67 	vrinta.f32	s15, s15
 801166e:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8011672:	4770      	bx	lr
 8011674:	33d6bf95 	.word	0x33d6bf95

08011678 <LEAF_bitwise_xor>:
{
    union unholy_t unholy;
    unholy.f = input;
    unholy.i = (unholy.i ^ op);
    
    return unholy.f;
 8011678:	ee10 3a10 	vmov	r3, s0
 801167c:	4043      	eors	r3, r0
 801167e:	ee00 3a10 	vmov	s0, r3
}
 8011682:	4770      	bx	lr

08011684 <LEAF_clip>:
#else
Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 8011684:	eef4 0ac0 	vcmpe.f32	s1, s0
 8011688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801168c:	d409      	bmi.n	80116a2 <LEAF_clip+0x1e>
    {
        return min;
    }
    else if (val > max)
 801168e:	eef4 0ac1 	vcmpe.f32	s1, s2
 8011692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011696:	dd02      	ble.n	801169e <LEAF_clip+0x1a>
    {
        return max;
 8011698:	eeb0 0a41 	vmov.f32	s0, s2
 801169c:	4770      	bx	lr
    }
    else
    {
        return val;
 801169e:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 80116a2:	4770      	bx	lr

080116a4 <LEAF_shaper>:
{
 80116a4:	b508      	push	{r3, lr}
 80116a6:	ed2d 8b02 	vpush	{d8}
 80116aa:	eef0 8a60 	vmov.f32	s17, s1
    Lfloat fx = input * 2.0f;    // prescale
 80116ae:	ee30 8a00 	vadd.f32	s16, s0, s0
    xc = LEAF_clip(-SQRT8, fx, SQRT8);
 80116b2:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8011728 <LEAF_shaper+0x84>
 80116b6:	eef0 0a48 	vmov.f32	s1, s16
 80116ba:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 801172c <LEAF_shaper+0x88>
 80116be:	f7ff ffe1 	bl	8011684 <LEAF_clip>
    xc2 = xc*xc;
 80116c2:	ee60 7a00 	vmul.f32	s15, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 80116c6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80116ca:	ee28 8a00 	vmul.f32	s16, s16, s0
 80116ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80116d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116d6:	ee28 8a07 	vmul.f32	s16, s16, s14
    xc4 = xc2 * xc2;
 80116da:	ee67 6aa7 	vmul.f32	s13, s15, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80116de:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 80116e2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80116e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116ea:	ee37 7a46 	vsub.f32	s14, s14, s12
 80116ee:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8011730 <LEAF_shaper+0x8c>
 80116f2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80116f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80116fa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011734 <LEAF_shaper+0x90>
 80116fe:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8011702:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8011738 <LEAF_shaper+0x94>
 8011706:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801170a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801170e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011712:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8011716:	ee78 8a87 	vadd.f32	s17, s17, s14
 801171a:	ee67 7aa8 	vmul.f32	s15, s15, s17
}
 801171e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011722:	ecbd 8b02 	vpop	{d8}
 8011726:	bd08      	pop	{r3, pc}
 8011728:	403504f3 	.word	0x403504f3
 801172c:	c03504f3 	.word	0xc03504f3
 8011730:	3c800000 	.word	0x3c800000
 8011734:	3fa72f05 	.word	0x3fa72f05
 8011738:	3d4ccccd 	.word	0x3d4ccccd

0801173c <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 801173c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8011740:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011748:	d419      	bmi.n	801177e <LEAF_tanh+0x42>
        return -1.0f;
    else if( x > 3.0f )
 801174a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801174e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011756:	dc15      	bgt.n	8011784 <LEAF_tanh+0x48>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8011758:	ee20 7a00 	vmul.f32	s14, s0, s0
 801175c:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8011760:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011764:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011768:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 801176c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011770:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011774:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011778:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801177c:	4770      	bx	lr
        return -1.0f;
 801177e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011782:	4770      	bx	lr
        return 1.0f;
 8011784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8011788:	4770      	bx	lr
	...

0801178c <fast_tanh4>:
    return(exp2x - 1.0f) / (exp2x + 1.0f);
}

//from antto on KVR forum
Lfloat   fast_tanh4 (Lfloat x)
{
 801178c:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat xa = fabsf(x);
 8011790:	eef0 7ac0 	vabs.f32	s15, s0
    Lfloat x2 = xa * xa;
 8011794:	ee60 5a00 	vmul.f32	s11, s0, s0
    Lfloat x3 = xa * x2;
 8011798:	ee27 6aa5 	vmul.f32	s12, s15, s11
    Lfloat x4 = x2 * x2;
 801179c:	ee65 6aa5 	vmul.f32	s13, s11, s11
    Lfloat x7 = x3 * x4;
 80117a0:	ee26 5a26 	vmul.f32	s10, s12, s13
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80117a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80117a8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80117ac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80117b0:	eddf 5a0f 	vldr	s11, [pc, #60]	; 80117f0 <fast_tanh4+0x64>
 80117b4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80117b8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80117bc:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80117f4 <fast_tanh4+0x68>
 80117c0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80117c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117c8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80117f8 <fast_tanh4+0x6c>
 80117cc:	ee65 6a26 	vmul.f32	s13, s10, s13
 80117d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117d4:	eec0 6a27 	vdiv.f32	s13, s0, s15
 80117d8:	ee30 0a66 	vsub.f32	s0, s0, s13
    Lfloat   result = (x < 0) ? -res : res;
 80117dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e4:	d400      	bmi.n	80117e8 <fast_tanh4+0x5c>

    return (result);
}
 80117e6:	4770      	bx	lr
    Lfloat   result = (x < 0) ? -res : res;
 80117e8:	eeb1 0a40 	vneg.f32	s0, s0
    return (result);
 80117ec:	e7fb      	b.n	80117e6 <fast_tanh4+0x5a>
 80117ee:	bf00      	nop
 80117f0:	3f15f4d3 	.word	0x3f15f4d3
 80117f4:	3f0dee8b 	.word	0x3f0dee8b
 80117f8:	3d6b71bb 	.word	0x3d6b71bb

080117fc <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
Lfloat fast_tanh5(Lfloat x)
{
 80117fc:	b508      	push	{r3, lr}
 80117fe:	ed2d 8b02 	vpush	{d8}
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8011802:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801184c <fast_tanh5+0x50>
 8011806:	ee20 8a08 	vmul.f32	s16, s0, s16
 801180a:	ee28 8a00 	vmul.f32	s16, s16, s0
 801180e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8011812:	ee38 8a00 	vadd.f32	s16, s16, s0
 8011816:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011850 <fast_tanh5+0x54>
 801181a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801181e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011822:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011826:	ee67 7a80 	vmul.f32	s15, s15, s0
 801182a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801182e:	ee38 8a00 	vadd.f32	s16, s16, s0
	return a / sqrtf(1.0f + a * a);
 8011832:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011836:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801183a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801183e:	f004 ffdb 	bl	80167f8 <sqrtf>
}
 8011842:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8011846:	ecbd 8b02 	vpop	{d8}
 801184a:	bd08      	pop	{r3, pc}
 801184c:	3e28d927 	.word	0x3e28d927
 8011850:	3c217586 	.word	0x3c217586

08011854 <fastSine>:

//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
 8011854:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011888 <fastSine+0x34>
 8011858:	ee20 7a07 	vmul.f32	s14, s0, s14
	Lfloat term2 = x * x * x * -0.6425216143f;
 801185c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011860:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011864:	eddf 6a09 	vldr	s13, [pc, #36]	; 801188c <fastSine+0x38>
 8011868:	ee67 6aa6 	vmul.f32	s13, s15, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 801186c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011870:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011874:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8011890 <fastSine+0x3c>
 8011878:	ee67 7a86 	vmul.f32	s15, s15, s12
	return term1+term2+term3;
 801187c:	ee37 0a26 	vadd.f32	s0, s14, s13
}
 8011880:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	3fc8f6e3 	.word	0x3fc8f6e3
 801188c:	bf247c4c 	.word	0xbf247c4c
 8011890:	3d947433 	.word	0x3d947433

08011894 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8011894:	b570      	push	{r4, r5, r6, lr}
 8011896:	ed2d 8b04 	vpush	{d8-d9}
 801189a:	4606      	mov	r6, r0
 801189c:	eeb0 9a40 	vmov.f32	s18, s0
 80118a0:	eeb0 8a60 	vmov.f32	s16, s1
 80118a4:	eef0 8a61 	vmov.f32	s17, s3
 80118a8:	460d      	mov	r5, r1
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 80118aa:	ee31 1a60 	vsub.f32	s2, s2, s1
 80118ae:	1e4b      	subs	r3, r1, #1
 80118b0:	ee07 3a90 	vmov	s15, r3
 80118b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118b8:	eec1 9a27 	vdiv.f32	s19, s2, s15
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 80118bc:	2400      	movs	r4, #0
 80118be:	e00e      	b.n	80118de <LEAF_generate_exp+0x4a>
    {
        buffer[i] = powf(base, x) + offset;
 80118c0:	eef0 0a48 	vmov.f32	s1, s16
 80118c4:	eeb0 0a49 	vmov.f32	s0, s18
 80118c8:	f004 fcf2 	bl	80162b0 <powf>
 80118cc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80118d0:	ee30 0a28 	vadd.f32	s0, s0, s17
 80118d4:	ed83 0a00 	vstr	s0, [r3]
        x += increment;
 80118d8:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 80118dc:	3401      	adds	r4, #1
 80118de:	42ac      	cmp	r4, r5
 80118e0:	dbee      	blt.n	80118c0 <LEAF_generate_exp+0x2c>
    }
}
 80118e2:	ecbd 8b04 	vpop	{d8-d9}
 80118e6:	bd70      	pop	{r4, r5, r6, pc}

080118e8 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	ed2d 8b06 	vpush	{d8-d10}
 80118ee:	4606      	mov	r6, r0
 80118f0:	eef0 8a40 	vmov.f32	s17, s0
 80118f4:	460d      	mov	r5, r1
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 80118f6:	ee31 0a40 	vsub.f32	s0, s2, s0
 80118fa:	ee30 9ae8 	vsub.f32	s18, s1, s17
 80118fe:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8011902:	f004 facf 	bl	8015ea4 <logf>
 8011906:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011958 <LEAF_generate_table_skew_non_sym+0x70>
 801190a:	ee87 aa80 	vdiv.f32	s20, s15, s0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 801190e:	1e6b      	subs	r3, r5, #1
 8011910:	ee07 3a90 	vmov	s15, r3
 8011914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801191c:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8011920:	2400      	movs	r4, #0
    Lfloat x = 0.0000000001f;
 8011922:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 801195c <LEAF_generate_table_skew_non_sym+0x74>
    for (int i = 0; i < size; i++)
 8011926:	e012      	b.n	801194e <LEAF_generate_table_skew_non_sym+0x66>
    {
        proportion = expf (logf(x) / skew);
 8011928:	eeb0 0a48 	vmov.f32	s0, s16
 801192c:	f004 faba 	bl	8015ea4 <logf>
 8011930:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 8011934:	f004 fa42 	bl	8015dbc <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8011938:	ee69 7a00 	vmul.f32	s15, s18, s0
 801193c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011940:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8011944:	edc3 7a00 	vstr	s15, [r3]
        x += increment;
 8011948:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 801194c:	3401      	adds	r4, #1
 801194e:	42ac      	cmp	r4, r5
 8011950:	dbea      	blt.n	8011928 <LEAF_generate_table_skew_non_sym+0x40>
    }
}
 8011952:	ecbd 8b06 	vpop	{d8-d10}
 8011956:	bd70      	pop	{r4, r5, r6, pc}
 8011958:	bf317218 	.word	0xbf317218
 801195c:	2edbe6ff 	.word	0x2edbe6ff

08011960 <LEAF_poly_blep>:
// assumes discontinuity at 0, so offset inputs as needed
Lfloat LEAF_poly_blep(Lfloat t, Lfloat dt)
{
    
    // 0 <= t < 1
    if (t < dt) {
 8011960:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011968:	d417      	bmi.n	801199a <LEAF_poly_blep+0x3a>
        t /= dt;
        return t+t - t*t - 1.0f;
    }
    // -1 < t < 0
    else if (t > 1.0f - dt) {
 801196a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801196e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011972:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197a:	d51b      	bpl.n	80119b4 <LEAF_poly_blep+0x54>
        t = (t - 1.0f) / dt;
 801197c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011980:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011984:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t*t + t+t + 1.0f;
 8011988:	ee27 0aa7 	vmul.f32	s0, s15, s15
 801198c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011990:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011994:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011998:	4770      	bx	lr
        t /= dt;
 801199a:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t+t - t*t - 1.0f;
 801199e:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80119a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80119a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80119ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119b2:	4770      	bx	lr
    }
    // 0 otherwise
    else return 0.0f;
 80119b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80119bc <LEAF_poly_blep+0x5c>
//            v *= v;
//            y += 4.0f * v;
//        }
//    }
//    return y * 0.083333333333333f; // divide by 12
}
 80119b8:	4770      	bx	lr
 80119ba:	bf00      	nop
 80119bc:	00000000 	.word	0x00000000

080119c0 <LEAF_poly_blamp>:
//this version is from this discussion: https://dsp.stackexchange.com/questions/54790/polyblamp-anti-aliasing-in-c
Lfloat LEAF_poly_blamp(Lfloat t, Lfloat dt)
{

    Lfloat y = 0;
    if ((0 <= t) && (t < (2.0f * dt)))
 80119c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119c8:	db2c      	blt.n	8011a24 <LEAF_poly_blamp+0x64>
 80119ca:	ee70 7aa0 	vadd.f32	s15, s1, s1
 80119ce:	eef4 7ac0 	vcmpe.f32	s15, s0
 80119d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119d6:	dd2e      	ble.n	8011a36 <LEAF_poly_blamp+0x76>
    {
        Lfloat x = (t / dt);
 80119d8:	ee80 6a20 	vdiv.f32	s12, s0, s1
        Lfloat u = 2.0f - x;
 80119dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80119e0:	ee37 7a46 	vsub.f32	s14, s14, s12
        Lfloat u2 = u * u;
 80119e4:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
 80119e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80119ec:	ee27 7a87 	vmul.f32	s14, s15, s14
        y -= u;
 80119f0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011a3c <LEAF_poly_blamp+0x7c>
 80119f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (t < dt)
 80119f8:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80119fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a00:	d512      	bpl.n	8011a28 <LEAF_poly_blamp+0x68>
        {
        	Lfloat v = 1.0f - x;
 8011a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a06:	ee76 6ac6 	vsub.f32	s13, s13, s12
        	Lfloat v2 = v * v;
 8011a0a:	ee26 7aa6 	vmul.f32	s14, s13, s13
            v *= v2 * v2;
 8011a0e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011a12:	ee27 7a26 	vmul.f32	s14, s14, s13
            y += 4.0f * v;
 8011a16:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011a1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a22:	e001      	b.n	8011a28 <LEAF_poly_blamp+0x68>
    Lfloat y = 0;
 8011a24:	eddf 7a05 	vldr	s15, [pc, #20]	; 8011a3c <LEAF_poly_blamp+0x7c>
        }
    }
    return y * dt / 0.066666666666667f; // divide by 15
 8011a28:	ee67 7aa0 	vmul.f32	s15, s15, s1

}
 8011a2c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8011a40 <LEAF_poly_blamp+0x80>
 8011a30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011a34:	4770      	bx	lr
    Lfloat y = 0;
 8011a36:	eddf 7a01 	vldr	s15, [pc, #4]	; 8011a3c <LEAF_poly_blamp+0x7c>
 8011a3a:	e7f5      	b.n	8011a28 <LEAF_poly_blamp+0x68>
 8011a3c:	00000000 	.word	0x00000000
 8011a40:	3d888889 	.word	0x3d888889

08011a44 <LEAF_interpolate_hermite_x>:
//grabbed this from Tom Erbe's Delay pd code
Lfloat LEAF_interpolate_hermite_x(Lfloat yy0, Lfloat yy1, Lfloat yy2, Lfloat yy3, Lfloat xx)
{
    // 4-point, 3rd-order Hermite (x-form)
    Lfloat c0 = yy1;
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8011a44:	ee71 6a40 	vsub.f32	s13, s2, s0
 8011a48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011a4c:	ee66 6a87 	vmul.f32	s13, s13, s14
    Lfloat y0my1 = yy0 - yy1;
 8011a50:	ee30 0a60 	vsub.f32	s0, s0, s1
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8011a54:	ee70 7ac1 	vsub.f32	s15, s1, s2
 8011a58:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8011a5c:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8011a60:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011a64:	ee77 7aa1 	vadd.f32	s15, s15, s3
    Lfloat c2 = y0my1 + c1 - c3;
 8011a68:	ee36 0a80 	vadd.f32	s0, s13, s0
 8011a6c:	ee30 7a67 	vsub.f32	s14, s0, s15
    
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8011a70:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a78:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a80:	ee27 2a82 	vmul.f32	s4, s15, s4
}
 8011a84:	ee32 0a20 	vadd.f32	s0, s4, s1
 8011a88:	4770      	bx	lr
	...

08011a8c <LEAF_interpolation_linear>:



// alpha, [0.0, 1.0]
Lfloat LEAF_interpolation_linear (Lfloat A, Lfloat B, Lfloat alpha)
{
 8011a8c:	b508      	push	{r3, lr}
 8011a8e:	ed2d 8b02 	vpush	{d8}
 8011a92:	eef0 8a40 	vmov.f32	s17, s0
 8011a96:	eeb0 8a60 	vmov.f32	s16, s1
 8011a9a:	eef0 0a41 	vmov.f32	s1, s2
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8011a9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8011aa2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8011ac4 <LEAF_interpolation_linear+0x38>
 8011aa6:	f7ff fded 	bl	8011684 <LEAF_clip>
    
    Lfloat omAlpha = 1.0f - alpha;
 8011aaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011aae:	ee77 7ac0 	vsub.f32	s15, s15, s0
    
    // First 1/2 of interpolation
    Lfloat out = A * omAlpha;
 8011ab2:	ee67 7aa8 	vmul.f32	s15, s15, s17
    
    out += B * alpha;
 8011ab6:	ee20 0a08 	vmul.f32	s0, s0, s16
    
    return out;
}
 8011aba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011abe:	ecbd 8b02 	vpop	{d8}
 8011ac2:	bd08      	pop	{r3, pc}
 8011ac4:	00000000 	.word	0x00000000

08011ac8 <mtof>:

#define LOGTEN 2.302585092994

Lfloat mtof(Lfloat f)
{
    if (f <= -1500.0f) return(0);
 8011ac8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011b0c <mtof+0x44>
 8011acc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad4:	d917      	bls.n	8011b06 <mtof+0x3e>
{
 8011ad6:	b508      	push	{r3, lr}
    else if (f > 1499.0f) return(mtof(1499.0f));
 8011ad8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011b10 <mtof+0x48>
 8011adc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae4:	dd04      	ble.n	8011af0 <mtof+0x28>
 8011ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8011aea:	f7ff ffed 	bl	8011ac8 <mtof>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
 8011aee:	bd08      	pop	{r3, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8011af0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011b14 <mtof+0x4c>
 8011af4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011af8:	f004 f960 	bl	8015dbc <expf>
 8011afc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011b18 <mtof+0x50>
 8011b00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b04:	e7f3      	b.n	8011aee <mtof+0x26>
    if (f <= -1500.0f) return(0);
 8011b06:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8011b1c <mtof+0x54>
}
 8011b0a:	4770      	bx	lr
 8011b0c:	c4bb8000 	.word	0xc4bb8000
 8011b10:	44bb6000 	.word	0x44bb6000
 8011b14:	3d6c9820 	.word	0x3d6c9820
 8011b18:	4102d013 	.word	0x4102d013
 8011b1c:	00000000 	.word	0x00000000

08011b20 <LEAF_generate_mtof>:
{
 8011b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b22:	ed2d 8b04 	vpush	{d8-d9}
 8011b26:	4607      	mov	r7, r0
 8011b28:	eef0 8a40 	vmov.f32	s17, s0
 8011b2c:	460e      	mov	r6, r1
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011b2e:	1e4b      	subs	r3, r1, #1
 8011b30:	ee07 3a90 	vmov	s15, r3
 8011b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b3c:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 8011b40:	ee30 9ac0 	vsub.f32	s18, s1, s0
    for (int i = 0; i < size; i++)
 8011b44:	2400      	movs	r4, #0
    Lfloat x = 0.0f;
 8011b46:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8011b70 <LEAF_generate_mtof+0x50>
    for (int i = 0; i < size; i++)
 8011b4a:	e00c      	b.n	8011b66 <LEAF_generate_mtof+0x46>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8011b4c:	ee28 0a09 	vmul.f32	s0, s16, s18
        buffer[i] = mtof(midiVal);
 8011b50:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8011b54:	ee30 0a28 	vadd.f32	s0, s0, s17
 8011b58:	f7ff ffb6 	bl	8011ac8 <mtof>
 8011b5c:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8011b60:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8011b64:	3401      	adds	r4, #1
 8011b66:	42b4      	cmp	r4, r6
 8011b68:	dbf0      	blt.n	8011b4c <LEAF_generate_mtof+0x2c>
}
 8011b6a:	ecbd 8b04 	vpop	{d8-d9}
 8011b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b70:	00000000 	.word	0x00000000

08011b74 <faster_mtof>:
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

Lfloat faster_mtof(Lfloat f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8011b74:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011bb8 <faster_mtof+0x44>
 8011b78:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
 8011b7c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011bbc <faster_mtof+0x48>
 8011b80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b88:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 8011b8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011b90:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011b94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011b98:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8011b9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ba0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ba4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ba8:	ee20 0a00 	vmul.f32	s0, s0, s0
}
 8011bac:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011bc0 <faster_mtof+0x4c>
 8011bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	3d6c9820 	.word	0x3d6c9820
 8011bbc:	3b800000 	.word	0x3b800000
 8011bc0:	4102d013 	.word	0x4102d013

08011bc4 <ftom>:

Lfloat ftom(Lfloat f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011bc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	dc02      	bgt.n	8011bd4 <ftom+0x10>
 8011bce:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8011bec <ftom+0x28>
}
 8011bd2:	4770      	bx	lr
{
 8011bd4:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011bd6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011bf0 <ftom+0x2c>
 8011bda:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011bde:	f004 f961 	bl	8015ea4 <logf>
 8011be2:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011bf4 <ftom+0x30>
 8011be6:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011bea:	bd08      	pop	{r3, pc}
 8011bec:	c4bb8000 	.word	0xc4bb8000
 8011bf0:	3dfa7ed2 	.word	0x3dfa7ed2
 8011bf4:	418a7fac 	.word	0x418a7fac

08011bf8 <atodb>:
    return (expf((LOGTEN * 0.05f) * (f-100.0f)));
}


Lfloat atodb(Lfloat a)
{
 8011bf8:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 8011bfa:	f004 fdcf 	bl	801679c <log10f>
}
 8011bfe:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8011c02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011c06:	bd08      	pop	{r3, pc}

08011c08 <LEAF_generate_atodb>:
{
 8011c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c0a:	ed2d 8b02 	vpush	{d8}
 8011c0e:	4607      	mov	r7, r0
 8011c10:	460e      	mov	r6, r1
 8011c12:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8011c16:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8011c1a:	1e4b      	subs	r3, r1, #1
 8011c1c:	ee07 3a90 	vmov	s15, r3
 8011c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c24:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8011c28:	2400      	movs	r4, #0
 8011c2a:	e00a      	b.n	8011c42 <LEAF_generate_atodb+0x3a>
        buffer[i] = atodb(x);
 8011c2c:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8011c30:	eeb0 0a48 	vmov.f32	s0, s16
 8011c34:	f7ff ffe0 	bl	8011bf8 <atodb>
 8011c38:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8011c3c:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8011c40:	3401      	adds	r4, #1
 8011c42:	42b4      	cmp	r4, r6
 8011c44:	dbf2      	blt.n	8011c2c <LEAF_generate_atodb+0x24>
}
 8011c46:	ecbd 8b02 	vpop	{d8}
 8011c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c4c <fasteratodb>:
Lfloat fasteratodb(Lfloat a)
{
 8011c4c:	b508      	push	{r3, lr}
	return 20.0f*log10f_fast(a);
 8011c4e:	f7ff fc07 	bl	8011460 <log2f_approx>
 8011c52:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011c64 <fasteratodb+0x18>
 8011c56:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011c5a:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8011c5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011c62:	bd08      	pop	{r3, pc}
 8011c64:	3e9a209b 	.word	0x3e9a209b

08011c68 <dbtoa>:

Lfloat dbtoa(Lfloat db)
{
 8011c68:	b508      	push	{r3, lr}
    return powf(10.0f, db * 0.05f);
 8011c6a:	eddf 0a04 	vldr	s1, [pc, #16]	; 8011c7c <dbtoa+0x14>
 8011c6e:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011c72:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011c76:	f004 fb1b 	bl	80162b0 <powf>
}
 8011c7a:	bd08      	pop	{r3, pc}
 8011c7c:	3d4ccccd 	.word	0x3d4ccccd

08011c80 <LEAF_generate_dbtoa>:
{
 8011c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c82:	ed2d 8b02 	vpush	{d8}
 8011c86:	4607      	mov	r7, r0
 8011c88:	460e      	mov	r6, r1
 8011c8a:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8011c8e:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8011c92:	1e4b      	subs	r3, r1, #1
 8011c94:	ee07 3a90 	vmov	s15, r3
 8011c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c9c:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8011ca0:	2400      	movs	r4, #0
 8011ca2:	e00a      	b.n	8011cba <LEAF_generate_dbtoa+0x3a>
        buffer[i] = dbtoa(x);
 8011ca4:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8011ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8011cac:	f7ff ffdc 	bl	8011c68 <dbtoa>
 8011cb0:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8011cb4:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8011cb8:	3401      	adds	r4, #1
 8011cba:	42b4      	cmp	r4, r6
 8011cbc:	dbf2      	blt.n	8011ca4 <LEAF_generate_dbtoa+0x24>
}
 8011cbe:	ecbd 8b02 	vpop	{d8}
 8011cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011cc4 <fasterdbtoa>:
}

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8011cc4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011d00 <fasterdbtoa+0x3c>
 8011cc8:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
 8011ccc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011d04 <fasterdbtoa+0x40>
 8011cd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011cd4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011cd8:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 8011cdc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ce0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ce4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011ce8:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8011cec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011cf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011cf4:	ee20 0a00 	vmul.f32	s0, s0, s0
}
 8011cf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	3debc8e3 	.word	0x3debc8e3
 8011d04:	3b800000 	.word	0x3b800000

08011d08 <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
 8011d08:	eef0 7a40 	vmov.f32	s15, s0
 8011d0c:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 > num2 ) ? num1 : num2;
 8011d10:	eef4 7ae0 	vcmpe.f32	s15, s1
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	dd01      	ble.n	8011d1e <maximum+0x16>
 8011d1a:	eeb0 0a67 	vmov.f32	s0, s15
}
 8011d1e:	4770      	bx	lr

08011d20 <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
 8011d20:	eef0 7a40 	vmov.f32	s15, s0
 8011d24:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 < num2 ) ? num1 : num2;
 8011d28:	eef4 7ae0 	vcmpe.f32	s15, s1
 8011d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d30:	d501      	bpl.n	8011d36 <minimum+0x16>
 8011d32:	eeb0 0a67 	vmov.f32	s0, s15
}
 8011d36:	4770      	bx	lr

08011d38 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8011d38:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8011d3a:	6853      	ldr	r3, [r2, #4]
 8011d3c:	2410      	movs	r4, #16
 8011d3e:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8011d40:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 8011d42:	2300      	movs	r3, #0
 8011d44:	60d3      	str	r3, [r2, #12]
    if (size < pool->leaf->header_size)
 8011d46:	6854      	ldr	r4, [r2, #4]
 8011d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d4a:	428b      	cmp	r3, r1
 8011d4c:	d800      	bhi.n	8011d50 <mpool_create+0x18>
 8011d4e:	460b      	mov	r3, r1
    {
        size = pool->leaf->header_size;
    }
    pool->msize  = size;
 8011d50:	6113      	str	r3, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8011d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d54:	1a5b      	subs	r3, r3, r1
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8011d56:	4401      	add	r1, r0
 8011d58:	6001      	str	r1, [r0, #0]
    node->next = next;
 8011d5a:	2100      	movs	r1, #0
 8011d5c:	6041      	str	r1, [r0, #4]
    node->prev = prev;
 8011d5e:	6081      	str	r1, [r0, #8]
    node->size = size;
 8011d60:	60c3      	str	r3, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8011d62:	6150      	str	r0, [r2, #20]
}
 8011d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <leaf_pool_init>:
{
 8011d6a:	b538      	push	{r3, r4, r5, lr}
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	4608      	mov	r0, r1
 8011d70:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 8011d72:	f104 051c 	add.w	r5, r4, #28
 8011d76:	462a      	mov	r2, r5
 8011d78:	f7ff ffde 	bl	8011d38 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 8011d7c:	61a5      	str	r5, [r4, #24]
}
 8011d7e:	bd38      	pop	{r3, r4, r5, pc}

08011d80 <mpool_alloc>:
{
 8011d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d82:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8011d84:	684a      	ldr	r2, [r1, #4]
 8011d86:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8011d88:	3301      	adds	r3, #1
 8011d8a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8011d8c:	694c      	ldr	r4, [r1, #20]
 8011d8e:	b1ac      	cbz	r4, 8011dbc <mpool_alloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8011d90:	1dc2      	adds	r2, r0, #7
 8011d92:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8011d96:	68e3      	ldr	r3, [r4, #12]
 8011d98:	4293      	cmp	r3, r2
 8011d9a:	d226      	bcs.n	8011dea <mpool_alloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8011d9c:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8011d9e:	2c00      	cmp	r4, #0
 8011da0:	d1f9      	bne.n	8011d96 <mpool_alloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8011da2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8011da6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011daa:	1a9b      	subs	r3, r3, r2
 8011dac:	4283      	cmp	r3, r0
 8011dae:	d916      	bls.n	8011dde <mpool_alloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8011db0:	2101      	movs	r1, #1
 8011db2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011db6:	f003 fae7 	bl	8015388 <LEAF_internalErrorCallback>
 8011dba:	e057      	b.n	8011e6c <mpool_alloc+0xec>
        if ((pool->msize - pool->usize) > asize)
 8011dbc:	690b      	ldr	r3, [r1, #16]
 8011dbe:	68ca      	ldr	r2, [r1, #12]
 8011dc0:	1a9b      	subs	r3, r3, r2
 8011dc2:	4283      	cmp	r3, r0
 8011dc4:	d905      	bls.n	8011dd2 <mpool_alloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8011dc6:	2101      	movs	r1, #1
 8011dc8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011dcc:	f003 fadc 	bl	8015388 <LEAF_internalErrorCallback>
 8011dd0:	e04c      	b.n	8011e6c <mpool_alloc+0xec>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011dd8:	f003 fad6 	bl	8015388 <LEAF_internalErrorCallback>
        return NULL;
 8011ddc:	e046      	b.n	8011e6c <mpool_alloc+0xec>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8011dde:	2100      	movs	r1, #0
 8011de0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011de4:	f003 fad0 	bl	8015388 <LEAF_internalErrorCallback>
            return NULL;
 8011de8:	e040      	b.n	8011e6c <mpool_alloc+0xec>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8011dea:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8011dec:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8011dee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011df2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011df4:	4281      	cmp	r1, r0
 8011df6:	d22c      	bcs.n	8011e52 <mpool_alloc+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8011df8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8011dfc:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8011dfe:	440a      	add	r2, r1
 8011e00:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 8011e02:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 8011e04:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 8011e06:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8011e08:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8011e0a:	4419      	add	r1, r3
 8011e0c:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8011e0e:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8011e10:	609e      	str	r6, [r3, #8]
    node->size = size;
 8011e12:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 8011e14:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8011e18:	42a2      	cmp	r2, r4
 8011e1a:	d01d      	beq.n	8011e58 <mpool_alloc+0xd8>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8011e1c:	6863      	ldr	r3, [r4, #4]
 8011e1e:	b10b      	cbz	r3, 8011e24 <mpool_alloc+0xa4>
    {
        // Close the link
        node->next->prev = node->prev;
 8011e20:	68a2      	ldr	r2, [r4, #8]
 8011e22:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8011e24:	68a3      	ldr	r3, [r4, #8]
 8011e26:	b10b      	cbz	r3, 8011e2c <mpool_alloc+0xac>
    {
        // Close the link
        node->prev->next = node->next;
 8011e28:	6862      	ldr	r2, [r4, #4]
 8011e2a:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8011e30:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8011e32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011e36:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011e38:	68e2      	ldr	r2, [r4, #12]
 8011e3a:	441a      	add	r2, r3
 8011e3c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8011e40:	4413      	add	r3, r2
 8011e42:	f8cc 300c 	str.w	r3, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8011e46:	694b      	ldr	r3, [r1, #20]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	dd0e      	ble.n	8011e6a <mpool_alloc+0xea>
        char* new_pool = (char*)node_to_alloc->pool;
 8011e4c:	6821      	ldr	r1, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	e008      	b.n	8011e64 <mpool_alloc+0xe4>
        node_to_alloc->size += leftover;
 8011e52:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	e7dd      	b.n	8011e14 <mpool_alloc+0x94>
        pool->head = new_node;
 8011e58:	f8cc 3014 	str.w	r3, [ip, #20]
 8011e5c:	e7de      	b.n	8011e1c <mpool_alloc+0x9c>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8011e5e:	2200      	movs	r2, #0
 8011e60:	54ca      	strb	r2, [r1, r3]
 8011e62:	3301      	adds	r3, #1
 8011e64:	68e2      	ldr	r2, [r4, #12]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d8f9      	bhi.n	8011e5e <mpool_alloc+0xde>
    return node_to_alloc->pool;
 8011e6a:	6824      	ldr	r4, [r4, #0]
}
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e70 <mpool_calloc>:
{
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e72:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8011e74:	684a      	ldr	r2, [r1, #4]
 8011e76:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8011e78:	3301      	adds	r3, #1
 8011e7a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8011e7c:	694c      	ldr	r4, [r1, #20]
 8011e7e:	b1ac      	cbz	r4, 8011eac <mpool_calloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8011e80:	1dc2      	adds	r2, r0, #7
 8011e82:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8011e86:	68e3      	ldr	r3, [r4, #12]
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d226      	bcs.n	8011eda <mpool_calloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 8011e8c:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 8011e8e:	2c00      	cmp	r4, #0
 8011e90:	d1f9      	bne.n	8011e86 <mpool_calloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 8011e92:	f8dc 3010 	ldr.w	r3, [ip, #16]
 8011e96:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011e9a:	1a9b      	subs	r3, r3, r2
 8011e9c:	4283      	cmp	r3, r0
 8011e9e:	d916      	bls.n	8011ece <mpool_calloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8011ea0:	2101      	movs	r1, #1
 8011ea2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ea6:	f003 fa6f 	bl	8015388 <LEAF_internalErrorCallback>
 8011eaa:	e053      	b.n	8011f54 <mpool_calloc+0xe4>
        if ((pool->msize - pool->usize) > asize)
 8011eac:	690b      	ldr	r3, [r1, #16]
 8011eae:	68ca      	ldr	r2, [r1, #12]
 8011eb0:	1a9b      	subs	r3, r3, r2
 8011eb2:	4283      	cmp	r3, r0
 8011eb4:	d905      	bls.n	8011ec2 <mpool_calloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ebc:	f003 fa64 	bl	8015388 <LEAF_internalErrorCallback>
 8011ec0:	e048      	b.n	8011f54 <mpool_calloc+0xe4>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ec8:	f003 fa5e 	bl	8015388 <LEAF_internalErrorCallback>
        return NULL;
 8011ecc:	e042      	b.n	8011f54 <mpool_calloc+0xe4>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8011ece:	2100      	movs	r1, #0
 8011ed0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011ed4:	f003 fa58 	bl	8015388 <LEAF_internalErrorCallback>
            return NULL;
 8011ed8:	e03c      	b.n	8011f54 <mpool_calloc+0xe4>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8011eda:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8011edc:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8011ede:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011ee2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011ee4:	4281      	cmp	r1, r0
 8011ee6:	d227      	bcs.n	8011f38 <mpool_calloc+0xc8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8011ee8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8011eec:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8011eee:	440a      	add	r2, r1
 8011ef0:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 8011ef2:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 8011ef4:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 8011ef6:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8011ef8:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8011efa:	4419      	add	r1, r3
 8011efc:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8011efe:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8011f00:	609e      	str	r6, [r3, #8]
    node->size = size;
 8011f02:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 8011f04:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8011f08:	42a2      	cmp	r2, r4
 8011f0a:	d018      	beq.n	8011f3e <mpool_calloc+0xce>
    if (node->next != NULL)
 8011f0c:	6863      	ldr	r3, [r4, #4]
 8011f0e:	b10b      	cbz	r3, 8011f14 <mpool_calloc+0xa4>
        node->next->prev = node->prev;
 8011f10:	68a2      	ldr	r2, [r4, #8]
 8011f12:	609a      	str	r2, [r3, #8]
    if (node->prev != NULL)
 8011f14:	68a3      	ldr	r3, [r4, #8]
 8011f16:	b10b      	cbz	r3, 8011f1c <mpool_calloc+0xac>
        node->prev->next = node->next;
 8011f18:	6862      	ldr	r2, [r4, #4]
 8011f1a:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8011f20:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8011f22:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011f26:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011f28:	68e2      	ldr	r2, [r4, #12]
 8011f2a:	4411      	add	r1, r2
 8011f2c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8011f30:	440a      	add	r2, r1
 8011f32:	f8cc 200c 	str.w	r2, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8011f36:	e009      	b.n	8011f4c <mpool_calloc+0xdc>
        node_to_alloc->size += leftover;
 8011f38:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8011f3a:	6863      	ldr	r3, [r4, #4]
 8011f3c:	e7e2      	b.n	8011f04 <mpool_calloc+0x94>
        pool->head = new_node;
 8011f3e:	f8cc 3014 	str.w	r3, [ip, #20]
 8011f42:	e7e3      	b.n	8011f0c <mpool_calloc+0x9c>
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8011f44:	6822      	ldr	r2, [r4, #0]
 8011f46:	2100      	movs	r1, #0
 8011f48:	54d1      	strb	r1, [r2, r3]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	68e2      	ldr	r2, [r4, #12]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d8f8      	bhi.n	8011f44 <mpool_calloc+0xd4>
    return node_to_alloc->pool;
 8011f52:	6824      	ldr	r4, [r4, #0]
}
 8011f54:	4620      	mov	r0, r4
 8011f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011f58 <mpool_free>:
{
 8011f58:	468c      	mov	ip, r1
    pool->leaf->freeCount++;
 8011f5a:	684a      	ldr	r2, [r1, #4]
 8011f5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011f5e:	3301      	adds	r3, #1
 8011f60:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 8011f62:	684b      	ldr	r3, [r1, #4]
 8011f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f66:	1ac0      	subs	r0, r0, r3
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8011f68:	68c2      	ldr	r2, [r0, #12]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	68ca      	ldr	r2, [r1, #12]
 8011f6e:	1ad2      	subs	r2, r2, r3
 8011f70:	60ca      	str	r2, [r1, #12]
    mpool_node_t* other_node = pool->head;
 8011f72:	694b      	ldr	r3, [r1, #20]
    while (other_node != NULL)
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d05c      	beq.n	8012032 <mpool_free+0xda>
{
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	e01b      	b.n	8011fb4 <mpool_free+0x5c>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 8011f7c:	2102      	movs	r1, #2
 8011f7e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011f82:	f003 fa01 	bl	8015388 <LEAF_internalErrorCallback>
}
 8011f86:	bd70      	pop	{r4, r5, r6, pc}
            freed_node->size += pool->leaf->header_size + other_node->size;
 8011f88:	68dc      	ldr	r4, [r3, #12]
 8011f8a:	4422      	add	r2, r4
 8011f8c:	4411      	add	r1, r2
 8011f8e:	60c1      	str	r1, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 8011f90:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d03b      	beq.n	8012010 <mpool_free+0xb8>
    if (node->next != NULL)
 8011f98:	685a      	ldr	r2, [r3, #4]
 8011f9a:	b10a      	cbz	r2, 8011fa0 <mpool_free+0x48>
        node->next->prev = node->prev;
 8011f9c:	6899      	ldr	r1, [r3, #8]
 8011f9e:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8011fa0:	689a      	ldr	r2, [r3, #8]
 8011fa2:	b10a      	cbz	r2, 8011fa8 <mpool_free+0x50>
        node->prev->next = node->next;
 8011fa4:	6859      	ldr	r1, [r3, #4]
 8011fa6:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8011fa8:	2200      	movs	r2, #0
 8011faa:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8011fac:	609a      	str	r2, [r3, #8]
                freed_node = other_node;
 8011fae:	462b      	mov	r3, r5
    while (other_node != NULL)
 8011fb0:	2d00      	cmp	r5, #0
 8011fb2:	d036      	beq.n	8012022 <mpool_free+0xca>
        if ((long) other_node < (long) pool->mpool ||
 8011fb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	dcdf      	bgt.n	8011f7c <mpool_free+0x24>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8011fbc:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8011fc0:	440a      	add	r2, r1
 8011fc2:	469e      	mov	lr, r3
        if ((long) other_node < (long) pool->mpool ||
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d9d9      	bls.n	8011f7c <mpool_free+0x24>
        next_node = other_node->next;
 8011fc8:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8011fca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8011fce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011fd0:	68c1      	ldr	r1, [r0, #12]
 8011fd2:	1854      	adds	r4, r2, r1
 8011fd4:	1826      	adds	r6, r4, r0
 8011fd6:	42b3      	cmp	r3, r6
 8011fd8:	d0d6      	beq.n	8011f88 <mpool_free+0x30>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 8011fda:	68d9      	ldr	r1, [r3, #12]
 8011fdc:	440a      	add	r2, r1
 8011fde:	4496      	add	lr, r2
 8011fe0:	4570      	cmp	r0, lr
 8011fe2:	d1e4      	bne.n	8011fae <mpool_free+0x56>
            other_node->size += pool->leaf->header_size + freed_node->size;
 8011fe4:	440c      	add	r4, r1
 8011fe6:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
 8011fe8:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d013      	beq.n	8012018 <mpool_free+0xc0>
    if (node->next != NULL)
 8011ff0:	685a      	ldr	r2, [r3, #4]
 8011ff2:	b10a      	cbz	r2, 8011ff8 <mpool_free+0xa0>
        node->next->prev = node->prev;
 8011ff4:	6899      	ldr	r1, [r3, #8]
 8011ff6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8011ff8:	689a      	ldr	r2, [r3, #8]
 8011ffa:	b10a      	cbz	r2, 8012000 <mpool_free+0xa8>
        node->prev->next = node->next;
 8011ffc:	6859      	ldr	r1, [r3, #4]
 8011ffe:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8012000:	2200      	movs	r2, #0
 8012002:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 8012004:	609a      	str	r2, [r3, #8]
                other_node->next = pool->head;
 8012006:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801200a:	605a      	str	r2, [r3, #4]
                freed_node = other_node;
 801200c:	4618      	mov	r0, r3
 801200e:	e7ce      	b.n	8011fae <mpool_free+0x56>
            if (other_node == pool->head) pool->head = pool->head->next;
 8012010:	6852      	ldr	r2, [r2, #4]
 8012012:	f8cc 2014 	str.w	r2, [ip, #20]
 8012016:	e7bf      	b.n	8011f98 <mpool_free+0x40>
                pool->head = pool->head->next;
 8012018:	6852      	ldr	r2, [r2, #4]
 801201a:	f8cc 2014 	str.w	r2, [ip, #20]
                freed_node = other_node;
 801201e:	4618      	mov	r0, r3
 8012020:	e7c5      	b.n	8011fae <mpool_free+0x56>
    freed_node->next = pool->head;
 8012022:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8012026:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012028:	b103      	cbz	r3, 801202c <mpool_free+0xd4>
 801202a:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 801202c:	f8cc 0014 	str.w	r0, [ip, #20]
 8012030:	e7a9      	b.n	8011f86 <mpool_free+0x2e>
    freed_node->next = pool->head;
 8012032:	694b      	ldr	r3, [r1, #20]
 8012034:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012036:	b103      	cbz	r3, 801203a <mpool_free+0xe2>
 8012038:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 801203a:	f8cc 0014 	str.w	r0, [ip, #20]
 801203e:	4770      	bx	lr

08012040 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8012040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012042:	4606      	mov	r6, r0
 8012044:	460c      	mov	r4, r1
 8012046:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
 8012048:	681f      	ldr	r7, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 801204a:	4639      	mov	r1, r7
 801204c:	2018      	movs	r0, #24
 801204e:	f7ff fe97 	bl	8011d80 <mpool_alloc>
 8012052:	4602      	mov	r2, r0
 8012054:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6043      	str	r3, [r0, #4]
    
    mpool_create (memory, size, m);
 801205a:	4629      	mov	r1, r5
 801205c:	4620      	mov	r0, r4
 801205e:	f7ff fe6b 	bl	8011d38 <mpool_create>
}
 8012062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012064 <tMempool_init>:
{
 8012064:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 8012066:	3318      	adds	r3, #24
 8012068:	f7ff ffea 	bl	8012040 <tMempool_initToPool>
}
 801206c:	bd08      	pop	{r3, pc}
	...

08012070 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012074:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012076:	4621      	mov	r1, r4
 8012078:	2018      	movs	r0, #24
 801207a:	f7ff fe81 	bl	8011d80 <mpool_alloc>
 801207e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012080:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012082:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
 8012084:	2300      	movs	r3, #0
 8012086:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012088:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801208a:	edd2 7a01 	vldr	s15, [r2, #4]
 801208e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80120a4 <tCycle_initToPool+0x34>
 8012092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012096:	edc0 7a04 	vstr	s15, [r0, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 801209a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801209e:	6143      	str	r3, [r0, #20]
}
 80120a0:	bd38      	pop	{r3, r4, r5, pc}
 80120a2:	bf00      	nop
 80120a4:	4f800000 	.word	0x4f800000

080120a8 <tCycle_init>:
{
 80120a8:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf->mempool);
 80120aa:	3118      	adds	r1, #24
 80120ac:	f7ff ffe0 	bl	8012070 <tCycle_initToPool>
}
 80120b0:	bd08      	pop	{r3, pc}

080120b2 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
 80120b2:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 80120b4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80120b6:	6801      	ldr	r1, [r0, #0]
 80120b8:	f7ff ff4e 	bl	8011f58 <mpool_free>
}
 80120bc:	bd08      	pop	{r3, pc}
	...

080120c0 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 80120c0:	6801      	ldr	r1, [r0, #0]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
 80120c2:	688b      	ldr	r3, [r1, #8]
 80120c4:	684a      	ldr	r2, [r1, #4]
 80120c6:	4413      	add	r3, r2
 80120c8:	604b      	str	r3, [r1, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
 80120ca:	0d5a      	lsrs	r2, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80120cc:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80120d0:	ee07 3a90 	vmov	s15, r3
    
    samp0 = __leaf_table_sinewave[idx];
 80120d4:	4b0c      	ldr	r3, [pc, #48]	; (8012108 <tCycle_tick+0x48>)
 80120d6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80120da:	ed90 0a00 	vldr	s0, [r0]
    idx = (idx + 1) & c->mask;
 80120de:	3201      	adds	r2, #1
 80120e0:	6949      	ldr	r1, [r1, #20]
 80120e2:	400a      	ands	r2, r1
    samp1 = __leaf_table_sinewave[idx];
 80120e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80120e8:	ed93 7a00 	vldr	s14, [r3]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80120ec:	ee37 7a40 	vsub.f32	s14, s14, s0
 80120f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120f4:	eddf 6a05 	vldr	s13, [pc, #20]	; 801210c <tCycle_tick+0x4c>
 80120f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80120fc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8012100:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop
 8012108:	08020a10 	.word	0x08020a10
 801210c:	35000004 	.word	0x35000004

08012110 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 8012110:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 8012112:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012116:	edd3 7a04 	vldr	s15, [r3, #16]
 801211a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801211e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012122:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012126:	4770      	bx	lr

08012128 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
 8012128:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 801212a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012132:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012136:	eddf 7a04 	vldr	s15, [pc, #16]	; 8012148 <tCycle_setPhase+0x20>
 801213a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801213e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012142:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012146:	4770      	bx	lr
 8012148:	4f800000 	.word	0x4f800000

0801214c <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
 801214c:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 801214e:	6803      	ldr	r3, [r0, #0]
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8012150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012154:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012158:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012170 <tCycle_setSampleRate+0x24>
 801215c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012160:	edc3 7a04 	vstr	s15, [r3, #16]
    tCycle_setFreq(cy, c->freq);
 8012164:	ed93 0a03 	vldr	s0, [r3, #12]
 8012168:	f7ff ffd2 	bl	8012110 <tCycle_setFreq>
}
 801216c:	bd08      	pop	{r3, pc}
 801216e:	bf00      	nop
 8012170:	4f800000 	.word	0x4f800000

08012174 <tPBTriangle_initToPool>:
{
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012178:	680c      	ldr	r4, [r1, #0]
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 801217a:	4621      	mov	r1, r4
 801217c:	2020      	movs	r0, #32
 801217e:	f7ff fdff 	bl	8011d80 <mpool_alloc>
 8012182:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012184:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012186:	6863      	ldr	r3, [r4, #4]

    c->invSampleRate = leaf->invSampleRate;
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	61c3      	str	r3, [r0, #28]
    c->inc      =  0.0f;
 801218c:	2300      	movs	r3, #0
 801218e:	6083      	str	r3, [r0, #8]
    c->phase    =  0.25f;
 8012190:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8012194:	6042      	str	r2, [r0, #4]
    c->skew     =  0.5f;
 8012196:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801219a:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 801219c:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 801219e:	6183      	str	r3, [r0, #24]
}
 80121a0:	bd38      	pop	{r3, r4, r5, pc}

080121a2 <tPBTriangle_init>:
{
 80121a2:	b508      	push	{r3, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
 80121a4:	3118      	adds	r1, #24
 80121a6:	f7ff ffe5 	bl	8012174 <tPBTriangle_initToPool>
}
 80121aa:	bd08      	pop	{r3, pc}

080121ac <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 80121ac:	b510      	push	{r4, lr}
 80121ae:	ed2d 8b04 	vpush	{d8-d9}
    _tPBTriangle* c = *osc;
 80121b2:	6804      	ldr	r4, [r0, #0]

    Lfloat t = c->phase;
 80121b4:	ed94 8a01 	vldr	s16, [r4, #4]
    Lfloat dt = 0.0f;
    if (c->inc >=0)
 80121b8:	ed94 9a02 	vldr	s18, [r4, #8]
 80121bc:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80121c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c4:	db01      	blt.n	80121ca <tPBTriangle_tick+0x1e>
    {
        dt = -1.0f * c->inc;
 80121c6:	eeb1 9a49 	vneg.f32	s18, s18
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 80121ca:	edd4 7a04 	vldr	s15, [r4, #16]
 80121ce:	eef4 7ac8 	vcmpe.f32	s15, s16
 80121d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d6:	dd55      	ble.n	8012284 <tPBTriangle_tick+0xd8>
    {
        v = 2.0f * t / c->skew - 1.0f;
 80121d8:	ee38 7a08 	vadd.f32	s14, s16, s16
 80121dc:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80121e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80121e4:	ee78 8ac7 	vsub.f32	s17, s17, s14
    }
    if (t >= c->skew)
 80121e8:	eef4 7ac8 	vcmpe.f32	s15, s16
 80121ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121f0:	d80d      	bhi.n	801220e <tPBTriangle_tick+0x62>
    {
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 80121f2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80121f6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80121fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121fe:	ed94 7a05 	vldr	s14, [r4, #20]
 8012202:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8012206:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801220a:	ee78 8aa7 	vadd.f32	s17, s17, s15
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
 801220e:	eef0 0a49 	vmov.f32	s1, s18
 8012212:	eeb0 0a48 	vmov.f32	s0, s16
 8012216:	f7ff fbd3 	bl	80119c0 <LEAF_poly_blamp>
 801221a:	ee78 8a80 	vadd.f32	s17, s17, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 801221e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8012222:	eef0 0a49 	vmov.f32	s1, s18
 8012226:	ee39 0ac8 	vsub.f32	s0, s19, s16
 801222a:	f7ff fbc9 	bl	80119c0 <LEAF_poly_blamp>
 801222e:	ee78 8a80 	vadd.f32	s17, s17, s0
    t += 0.5f;
 8012232:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012236:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
 801223a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801223e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012242:	ee38 8a67 	vsub.f32	s16, s16, s15
    v -= LEAF_poly_blamp(t, dt);
 8012246:	eef0 0a49 	vmov.f32	s1, s18
 801224a:	eeb0 0a48 	vmov.f32	s0, s16
 801224e:	f7ff fbb7 	bl	80119c0 <LEAF_poly_blamp>
 8012252:	ee78 8ac0 	vsub.f32	s17, s17, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8012256:	eef0 0a49 	vmov.f32	s1, s18
 801225a:	ee39 0ac8 	vsub.f32	s0, s19, s16
 801225e:	f7ff fbaf 	bl	80119c0 <LEAF_poly_blamp>
 8012262:	ee38 0ac0 	vsub.f32	s0, s17, s0

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8012266:	edd4 7a02 	vldr	s15, [r4, #8]
 801226a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801226e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012276:	ed94 7a01 	vldr	s14, [r4, #4]
 801227a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801227e:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 8012282:	e008      	b.n	8012296 <tPBTriangle_tick+0xea>
    Lfloat v = 0.0f;
 8012284:	eddf 8a12 	vldr	s17, [pc, #72]	; 80122d0 <tPBTriangle_tick+0x124>
 8012288:	e7ae      	b.n	80121e8 <tPBTriangle_tick+0x3c>
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 801228a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801228e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012292:	edc4 7a01 	vstr	s15, [r4, #4]
 8012296:	edd4 7a01 	vldr	s15, [r4, #4]
 801229a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801229e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122a6:	daf0      	bge.n	801228a <tPBTriangle_tick+0xde>
 80122a8:	e005      	b.n	80122b6 <tPBTriangle_tick+0x10a>
	while (c->phase < 0.0f) c->phase += 1.0f;
 80122aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80122b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80122b6:	edd4 7a01 	vldr	s15, [r4, #4]
 80122ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80122be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c2:	d4f2      	bmi.n	80122aa <tPBTriangle_tick+0xfe>
	return -v;
}
 80122c4:	eeb1 0a40 	vneg.f32	s0, s0
 80122c8:	ecbd 8b04 	vpop	{d8-d9}
 80122cc:	bd10      	pop	{r4, pc}
 80122ce:	bf00      	nop
 80122d0:	00000000 	.word	0x00000000

080122d4 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 80122d4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 80122d6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 80122da:	edd3 7a07 	vldr	s15, [r3, #28]
 80122de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80122e2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80122e6:	4770      	bx	lr

080122e8 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 80122e8:	b510      	push	{r4, lr}
 80122ea:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;
 80122ee:	6804      	ldr	r4, [r0, #0]

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 80122f0:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801231c <tPBTriangle_setSkew+0x34>
 80122f4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012320 <tPBTriangle_setSkew+0x38>
 80122f8:	f7ff f9c4 	bl	8011684 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 80122fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012300:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012304:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012308:	ee20 0a07 	vmul.f32	s0, s0, s14
 801230c:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8012310:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012314:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012318:	bd10      	pop	{r4, pc}
 801231a:	bf00      	nop
 801231c:	3f7d70a4 	.word	0x3f7d70a4
 8012320:	3c23d70a 	.word	0x3c23d70a

08012324 <tPBSineTriangle_initToPool>:
{
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	4607      	mov	r7, r0
 8012328:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 801232a:	680e      	ldr	r6, [r1, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 801232c:	4631      	mov	r1, r6
 801232e:	2028      	movs	r0, #40	; 0x28
 8012330:	f7ff fd26 	bl	8011d80 <mpool_alloc>
 8012334:	4604      	mov	r4, r0
 8012336:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8012338:	f840 6b1c 	str.w	r6, [r0], #28
    LEAF* leaf = c->mempool->leaf;
 801233c:	6876      	ldr	r6, [r6, #4]
    tCycle_initToPool(&c->sine, mp);
 801233e:	4629      	mov	r1, r5
 8012340:	f7ff fe96 	bl	8012070 <tCycle_initToPool>
    c->invSampleRate = leaf->invSampleRate;
 8012344:	6873      	ldr	r3, [r6, #4]
 8012346:	61a3      	str	r3, [r4, #24]
    c->inc      =  0.0f;
 8012348:	2300      	movs	r3, #0
 801234a:	60a3      	str	r3, [r4, #8]
    c->phase    =  0.25f;
 801234c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8012350:	6062      	str	r2, [r4, #4]
    c->shape     =  0.0f;
 8012352:	6123      	str	r3, [r4, #16]
    c->skew 	 = 0.5f;
 8012354:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8012358:	6262      	str	r2, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 801235a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801235e:	6222      	str	r2, [r4, #32]
    c->lastOut  =  0.0f;
 8012360:	6163      	str	r3, [r4, #20]
}
 8012362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012364 <tPBSineTriangle_init>:
{
 8012364:	b508      	push	{r3, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
 8012366:	3118      	adds	r1, #24
 8012368:	f7ff ffdc 	bl	8012324 <tPBSineTriangle_initToPool>
}
 801236c:	bd08      	pop	{r3, pc}

0801236e <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
 801236e:	b510      	push	{r4, lr}
 8012370:	ed2d 8b04 	vpush	{d8-d9}
    _tPBSineTriangle* c = *osc;
 8012374:	6804      	ldr	r4, [r0, #0]
    Lfloat out = 0.0f;
   
    Lfloat t = c->phase;
 8012376:	edd4 8a01 	vldr	s17, [r4, #4]
    Lfloat dt = 0.0f;
    if (c->inc >=0)
 801237a:	ed94 9a02 	vldr	s18, [r4, #8]
 801237e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	db01      	blt.n	801238c <tPBSineTriangle_tick+0x1e>
    {
        dt = -1.0f * c->inc;
 8012388:	eeb1 9a49 	vneg.f32	s18, s18
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 801238c:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012390:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8012394:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8012398:	eef0 7ae7 	vabs.f32	s15, s15
 801239c:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80123a0:	ee38 8a69 	vsub.f32	s16, s16, s19

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
 80123a4:	eef0 0a49 	vmov.f32	s1, s18
 80123a8:	eeb0 0a68 	vmov.f32	s0, s17
 80123ac:	f7ff fb08 	bl	80119c0 <LEAF_poly_blamp>
 80123b0:	ee38 8a00 	vadd.f32	s16, s16, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80123b4:	eef0 0a49 	vmov.f32	s1, s18
 80123b8:	ee39 0ae8 	vsub.f32	s0, s19, s17
 80123bc:	f7ff fb00 	bl	80119c0 <LEAF_poly_blamp>
 80123c0:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
 80123c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80123c8:	ee78 8aa7 	vadd.f32	s17, s17, s15
    t -= (int)(t);
 80123cc:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80123d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123d4:	ee78 8ae7 	vsub.f32	s17, s17, s15
    v -= LEAF_poly_blamp(t, dt);
 80123d8:	eef0 0a49 	vmov.f32	s1, s18
 80123dc:	eeb0 0a68 	vmov.f32	s0, s17
 80123e0:	f7ff faee 	bl	80119c0 <LEAF_poly_blamp>
 80123e4:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80123e8:	eef0 0a49 	vmov.f32	s1, s18
 80123ec:	ee39 0ae8 	vsub.f32	s0, s19, s17
 80123f0:	f7ff fae6 	bl	80119c0 <LEAF_poly_blamp>
 80123f4:	ee38 8a40 	vsub.f32	s16, s16, s0

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 80123f8:	edd4 7a02 	vldr	s15, [r4, #8]
 80123fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012400:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012404:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012408:	ed94 7a01 	vldr	s14, [r4, #4]
 801240c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012410:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8012414:	e005      	b.n	8012422 <tPBSineTriangle_tick+0xb4>
 8012416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801241a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801241e:	edc4 7a01 	vstr	s15, [r4, #4]
 8012422:	edd4 7a01 	vldr	s15, [r4, #4]
 8012426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801242a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801242e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012432:	daf0      	bge.n	8012416 <tPBSineTriangle_tick+0xa8>
 8012434:	e005      	b.n	8012442 <tPBSineTriangle_tick+0xd4>
    while (c->phase < 0.0f) c->phase += 1.0f;
 8012436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801243a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801243e:	edc4 7a01 	vstr	s15, [r4, #4]
 8012442:	edd4 7a01 	vldr	s15, [r4, #4]
 8012446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244e:	d4f2      	bmi.n	8012436 <tPBSineTriangle_tick+0xc8>
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8012450:	edd4 7a04 	vldr	s15, [r4, #16]
 8012454:	ee27 8a88 	vmul.f32	s16, s15, s16

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8012458:	f104 001c 	add.w	r0, r4, #28
 801245c:	f7ff fe30 	bl	80120c0 <tCycle_tick>
 8012460:	edd4 7a08 	vldr	s15, [r4, #32]
 8012464:	ee20 0a27 	vmul.f32	s0, s0, s15
    return out;
}
 8012468:	ee30 0a08 	vadd.f32	s0, s0, s16
 801246c:	ecbd 8b04 	vpop	{d8-d9}
 8012470:	bd10      	pop	{r4, pc}

08012472 <tPBSineTriangle_setFreq>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
 8012472:	b508      	push	{r3, lr}
    _tPBSineTriangle* c = *osc;
 8012474:	6800      	ldr	r0, [r0, #0]

    c->freq  = freq;
 8012476:	ed80 0a03 	vstr	s0, [r0, #12]
    c->inc = freq * c->invSampleRate;
 801247a:	ed90 7a06 	vldr	s14, [r0, #24]
 801247e:	ee67 7a00 	vmul.f32	s15, s14, s0
 8012482:	edc0 7a02 	vstr	s15, [r0, #8]
    tCycle_setFreq(&c->sine, freq);
 8012486:	301c      	adds	r0, #28
 8012488:	f7ff fe42 	bl	8012110 <tCycle_setFreq>
}
 801248c:	bd08      	pop	{r3, pc}

0801248e <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
 801248e:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8012490:	eef1 7a40 	vneg.f32	s15, s0
 8012494:	edc3 7a04 	vstr	s15, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 8012498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801249c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80124a0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80124a4:	4770      	bx	lr
	...

080124a8 <tPBPulse_initToPool>:
{
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 80124ac:	680c      	ldr	r4, [r1, #0]
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 80124ae:	4621      	mov	r1, r4
 80124b0:	2020      	movs	r0, #32
 80124b2:	f7ff fc65 	bl	8011d80 <mpool_alloc>
 80124b6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80124b8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80124ba:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 80124bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80124c0:	edc0 7a06 	vstr	s15, [r0, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80124c4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80124e4 <tPBPulse_initToPool+0x3c>
 80124c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124cc:	edc0 7a07 	vstr	s15, [r0, #28]
    c->inc      =  0;
 80124d0:	2300      	movs	r3, #0
 80124d2:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 80124d4:	6043      	str	r3, [r0, #4]
    c->width     =  (0.5f * TWO_TO_32);
 80124d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80124da:	6103      	str	r3, [r0, #16]
    c->oneMinusWidth =  c->width;
 80124dc:	6143      	str	r3, [r0, #20]
    c->freq = 0.0f;
 80124de:	2300      	movs	r3, #0
 80124e0:	60c3      	str	r3, [r0, #12]
}
 80124e2:	bd38      	pop	{r3, r4, r5, pc}
 80124e4:	4f800000 	.word	0x4f800000

080124e8 <tPBPulse_init>:
{
 80124e8:	b508      	push	{r3, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
 80124ea:	3118      	adds	r1, #24
 80124ec:	f7ff ffdc 	bl	80124a8 <tPBPulse_initToPool>
}
 80124f0:	bd08      	pop	{r3, pc}
	...

080124f4 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 80124f4:	b510      	push	{r4, lr}
 80124f6:	ed2d 8b04 	vpush	{d8-d9}
    _tPBPulse* c = *osc;
 80124fa:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 80124fc:	6862      	ldr	r2, [r4, #4]
 80124fe:	ee07 2a90 	vmov	s15, r2
 8012502:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012506:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012570 <tPBPulse_tick+0x7c>
 801250a:	ee20 0a27 	vmul.f32	s0, s0, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 801250e:	ed94 7a02 	vldr	s14, [r4, #8]
 8012512:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
 8012516:	ee29 9a27 	vmul.f32	s18, s18, s15
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 801251a:	6963      	ldr	r3, [r4, #20]
 801251c:	18d3      	adds	r3, r2, r3
 801251e:	ee08 3a90 	vmov	s17, r3
 8012522:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8012526:	ee68 8aa7 	vmul.f32	s17, s17, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801252a:	6923      	ldr	r3, [r4, #16]
 801252c:	429a      	cmp	r2, r3
 801252e:	d21c      	bcs.n	801256a <tPBPulse_tick+0x76>
 8012530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012534:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801253c:	ee37 8ac7 	vsub.f32	s16, s15, s14
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8012540:	eef0 0a49 	vmov.f32	s1, s18
 8012544:	f7ff fa0c 	bl	8011960 <LEAF_poly_blep>
 8012548:	ee38 8a00 	vadd.f32	s16, s16, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 801254c:	eef0 0a49 	vmov.f32	s1, s18
 8012550:	eeb0 0a68 	vmov.f32	s0, s17
 8012554:	f7ff fa04 	bl	8011960 <LEAF_poly_blep>
    c->phase += c->inc;
 8012558:	68a2      	ldr	r2, [r4, #8]
 801255a:	6863      	ldr	r3, [r4, #4]
 801255c:	4413      	add	r3, r2
 801255e:	6063      	str	r3, [r4, #4]
    return out;
}
 8012560:	ee38 0a40 	vsub.f32	s0, s16, s0
 8012564:	ecbd 8b04 	vpop	{d8-d9}
 8012568:	bd10      	pop	{r4, pc}
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801256a:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012574 <tPBPulse_tick+0x80>
 801256e:	e7e1      	b.n	8012534 <tPBPulse_tick+0x40>
 8012570:	2f80000d 	.word	0x2f80000d
 8012574:	00000000 	.word	0x00000000

08012578 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 8012578:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 801257a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801257e:	edd3 7a07 	vldr	s15, [r3, #28]
 8012582:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012586:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801258a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801258e:	4770      	bx	lr

08012590 <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
 8012590:	6803      	ldr	r3, [r0, #0]
    //clip width to avoid silence from pulse widths of 0 or 1
    if (width < 0.05f)
 8012592:	eddf 7a12 	vldr	s15, [pc, #72]	; 80125dc <tPBPulse_setWidth+0x4c>
 8012596:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801259e:	d501      	bpl.n	80125a4 <tPBPulse_setWidth+0x14>
    {
        width = 0.05f;
 80125a0:	eeb0 0a67 	vmov.f32	s0, s15
    }
    if (width > 0.95f)
 80125a4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80125e0 <tPBPulse_setWidth+0x50>
 80125a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80125ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b0:	dd01      	ble.n	80125b6 <tPBPulse_setWidth+0x26>
    {
        width = 0.95f;
 80125b2:	eeb0 0a67 	vmov.f32	s0, s15
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 80125b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80125ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80125be:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80125e4 <tPBPulse_setWidth+0x54>
 80125c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80125ca:	edc3 7a05 	vstr	s15, [r3, #20]
    c->width = width * TWO_TO_32;
 80125ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80125d2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80125d6:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80125da:	4770      	bx	lr
 80125dc:	3d4ccccd 	.word	0x3d4ccccd
 80125e0:	3f733333 	.word	0x3f733333
 80125e4:	4f800000 	.word	0x4f800000

080125e8 <tPBSaw_initToPool>:
{
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
 80125e8:	b538      	push	{r3, r4, r5, lr}
 80125ea:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 80125ec:	680c      	ldr	r4, [r1, #0]
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 80125ee:	4621      	mov	r1, r4
 80125f0:	2020      	movs	r0, #32
 80125f2:	f7ff fbc5 	bl	8011d80 <mpool_alloc>
 80125f6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80125f8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80125fa:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 80125fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8012600:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012604:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801261c <tPBSaw_initToPool+0x34>
 8012608:	ee67 7a87 	vmul.f32	s15, s15, s14
 801260c:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 8012610:	2300      	movs	r3, #0
 8012612:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012614:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 8012616:	2300      	movs	r3, #0
 8012618:	60c3      	str	r3, [r0, #12]
}
 801261a:	bd38      	pop	{r3, r4, r5, pc}
 801261c:	4f800000 	.word	0x4f800000

08012620 <tPBSaw_init>:
{
 8012620:	b508      	push	{r3, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
 8012622:	3118      	adds	r1, #24
 8012624:	f7ff ffe0 	bl	80125e8 <tPBSaw_initToPool>
}
 8012628:	bd08      	pop	{r3, pc}
	...

0801262c <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 801262c:	b510      	push	{r4, lr}
 801262e:	ed2d 8b02 	vpush	{d8}
    _tPBSaw* c = *osc;
 8012632:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8012634:	edd4 7a01 	vldr	s15, [r4, #4]
 8012638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801263c:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 801267c <tPBSaw_tick+0x50>
 8012640:	ee27 8a88 	vmul.f32	s16, s15, s16
 8012644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012648:	ee38 8a47 	vsub.f32	s16, s16, s14

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
 801264c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012680 <tPBSaw_tick+0x54>
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012650:	ed94 7a02 	vldr	s14, [r4, #8]
 8012654:	eef8 0ac7 	vcvt.f32.s32	s1, s14
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8012658:	ee60 0a80 	vmul.f32	s1, s1, s0
 801265c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012660:	f7ff f97e 	bl	8011960 <LEAF_poly_blep>
 8012664:	ee38 0a40 	vsub.f32	s0, s16, s0
    c->phase += c->inc;
 8012668:	68a2      	ldr	r2, [r4, #8]
 801266a:	6863      	ldr	r3, [r4, #4]
 801266c:	4413      	add	r3, r2
 801266e:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 8012670:	eeb1 0a40 	vneg.f32	s0, s0
 8012674:	ecbd 8b02 	vpop	{d8}
 8012678:	bd10      	pop	{r4, pc}
 801267a:	bf00      	nop
 801267c:	2ffffff6 	.word	0x2ffffff6
 8012680:	2f80000d 	.word	0x2f80000d

08012684 <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8012684:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012686:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801268a:	edd3 7a05 	vldr	s15, [r3, #20]
 801268e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012692:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012696:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801269a:	4770      	bx	lr

0801269c <tPBSawSquare_initToPool>:
{
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 80126a0:	680c      	ldr	r4, [r1, #0]
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 80126a2:	4621      	mov	r1, r4
 80126a4:	2028      	movs	r0, #40	; 0x28
 80126a6:	f7ff fb6b 	bl	8011d80 <mpool_alloc>
 80126aa:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80126ac:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80126ae:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 80126b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80126b4:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80126b8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80126d0 <tPBSawSquare_initToPool+0x34>
 80126bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126c0:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 80126c8:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 80126ca:	2300      	movs	r3, #0
 80126cc:	60c3      	str	r3, [r0, #12]

}
 80126ce:	bd38      	pop	{r3, r4, r5, pc}
 80126d0:	4f800000 	.word	0x4f800000

080126d4 <tPBSawSquare_init>:
{
 80126d4:	b508      	push	{r3, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
 80126d6:	3118      	adds	r1, #24
 80126d8:	f7ff ffe0 	bl	801269c <tPBSawSquare_initToPool>
}
 80126dc:	bd08      	pop	{r3, pc}
	...

080126e0 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 80126e0:	b510      	push	{r4, lr}
 80126e2:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSawSquare* c = *osc;
 80126e6:	6804      	ldr	r4, [r0, #0]

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 80126e8:	6863      	ldr	r3, [r4, #4]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	db44      	blt.n	8012778 <tPBSawSquare_tick+0x98>
 80126ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80126f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80126f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126fa:	ee37 8ac7 	vsub.f32	s16, s15, s14
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 80126fe:	ee07 3a90 	vmov	s15, r3
 8012702:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012706:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012780 <tPBSawSquare_tick+0xa0>
 801270a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801270e:	ee30 9a00 	vadd.f32	s18, s0, s0
 8012712:	ee39 9a47 	vsub.f32	s18, s18, s14
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012716:	ed94 7a02 	vldr	s14, [r4, #8]
 801271a:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 801271e:	ee69 9aa7 	vmul.f32	s19, s19, s15
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8012722:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012726:	ee08 3a90 	vmov	s17, r3
 801272a:	eef8 8a68 	vcvt.f32.u32	s17, s17
 801272e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8012732:	eef0 0a69 	vmov.f32	s1, s19
 8012736:	f7ff f913 	bl	8011960 <LEAF_poly_blep>
 801273a:	eeb0 aa40 	vmov.f32	s20, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 801273e:	eef0 0a69 	vmov.f32	s1, s19
 8012742:	eeb0 0a68 	vmov.f32	s0, s17
 8012746:	f7ff f90b 	bl	8011960 <LEAF_poly_blep>
    

    sawOut -= resetBlep;
 801274a:	ee39 9a4a 	vsub.f32	s18, s18, s20
    
    squareOut += resetBlep;
 801274e:	ee38 8a0a 	vadd.f32	s16, s16, s20
    squareOut -= midBlep;
 8012752:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
 8012756:	68a2      	ldr	r2, [r4, #8]
 8012758:	6863      	ldr	r3, [r4, #4]
 801275a:	4413      	add	r3, r2
 801275c:	6063      	str	r3, [r4, #4]
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801275e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8012762:	ee29 9a67 	vnmul.f32	s18, s18, s15
 8012766:	ed94 0a08 	vldr	s0, [r4, #32]
 801276a:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 801276e:	ee39 0a00 	vadd.f32	s0, s18, s0
 8012772:	ecbd 8b06 	vpop	{d8-d10}
 8012776:	bd10      	pop	{r4, pc}
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012778:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012784 <tPBSawSquare_tick+0xa4>
 801277c:	e7b9      	b.n	80126f2 <tPBSawSquare_tick+0x12>
 801277e:	bf00      	nop
 8012780:	2f80000d 	.word	0x2f80000d
 8012784:	00000000 	.word	0x00000000

08012788 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 8012788:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 801278a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 801278e:	edd3 7a05 	vldr	s15, [r3, #20]
 8012792:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012796:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801279a:	ed83 0a02 	vstr	s0, [r3, #8]

}
 801279e:	4770      	bx	lr

080127a0 <tPBSawSquare_setShape>:

void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
 80127a0:	6803      	ldr	r3, [r0, #0]
    
    c->shape  = inputShape;
 80127a2:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 80127a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80127aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80127ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80127b2:	4770      	bx	lr

080127b4 <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 80127b4:	b570      	push	{r4, r5, r6, lr}
 80127b6:	4606      	mov	r6, r0
 80127b8:	460c      	mov	r4, r1
    _tMempool* m = *mp;
 80127ba:	6815      	ldr	r5, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80127bc:	4629      	mov	r1, r5
 80127be:	2018      	movs	r0, #24
 80127c0:	f7ff fade 	bl	8011d80 <mpool_alloc>
 80127c4:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 80127c6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 80127c8:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 80127ca:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80127cc:	691b      	ldr	r3, [r3, #16]
 80127ce:	6143      	str	r3, [r0, #20]
}
 80127d0:	bd70      	pop	{r4, r5, r6, pc}

080127d2 <tNoise_init>:
{
 80127d2:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
 80127d4:	3218      	adds	r2, #24
 80127d6:	f7ff ffed 	bl	80127b4 <tNoise_initToPool>
}
 80127da:	bd08      	pop	{r3, pc}

080127dc <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
 80127dc:	b508      	push	{r3, lr}
    _tNoise* n = *ns;
 80127de:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 80127e0:	6801      	ldr	r1, [r0, #0]
 80127e2:	f7ff fbb9 	bl	8011f58 <mpool_free>
}
 80127e6:	bd08      	pop	{r3, pc}

080127e8 <tNoise_tick>:

Lfloat   tNoise_tick(tNoise* const ns)
{
 80127e8:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 80127ea:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 80127ec:	6963      	ldr	r3, [r4, #20]
 80127ee:	4798      	blx	r3
 80127f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80127f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    
    if (n->type == PinkNoise)
 80127fc:	7923      	ldrb	r3, [r4, #4]
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d000      	beq.n	8012804 <tNoise_tick+0x1c>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8012802:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012804:	ed94 7a02 	vldr	s14, [r4, #8]
 8012808:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012878 <tNoise_tick+0x90>
 801280c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012810:	eddf 7a1a 	vldr	s15, [pc, #104]	; 801287c <tNoise_tick+0x94>
 8012814:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012818:	ee37 7a27 	vadd.f32	s14, s14, s15
 801281c:	ed84 7a02 	vstr	s14, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012820:	edd4 6a03 	vldr	s13, [r4, #12]
 8012824:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012880 <tNoise_tick+0x98>
 8012828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801282c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012884 <tNoise_tick+0x9c>
 8012830:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012834:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012838:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 801283c:	edd4 7a04 	vldr	s15, [r4, #16]
 8012840:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8012888 <tNoise_tick+0xa0>
 8012844:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012848:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801288c <tNoise_tick+0xa4>
 801284c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8012850:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012854:	edc4 7a04 	vstr	s15, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012858:	ee37 7a26 	vadd.f32	s14, s14, s13
 801285c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012860:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012890 <tNoise_tick+0xa8>
 8012864:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012868:	ee77 7a80 	vadd.f32	s15, s15, s0
        return (tmp * 0.05f);
 801286c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8012894 <tNoise_tick+0xac>
 8012870:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012874:	e7c5      	b.n	8012802 <tNoise_tick+0x1a>
 8012876:	bf00      	nop
 8012878:	3f7f65fe 	.word	0x3f7f65fe
 801287c:	3dcad8a1 	.word	0x3dcad8a1
 8012880:	3f76872b 	.word	0x3f76872b
 8012884:	3e97d0ff 	.word	0x3e97d0ff
 8012888:	3f11eb85 	.word	0x3f11eb85
 801288c:	3f86be97 	.word	0x3f86be97
 8012890:	3e3d3c36 	.word	0x3e3d3c36
 8012894:	3d4ccccd 	.word	0x3d4ccccd

08012898 <tIntPhasor_initToPool>:
{
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
 8012898:	b538      	push	{r3, r4, r5, lr}
 801289a:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 801289c:	680c      	ldr	r4, [r1, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801289e:	4621      	mov	r1, r4
 80128a0:	201c      	movs	r0, #28
 80128a2:	f7ff fa6d 	bl	8011d80 <mpool_alloc>
 80128a6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80128a8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80128aa:	6862      	ldr	r2, [r4, #4]
    
    c->phase    =  0;
 80128ac:	2300      	movs	r3, #0
 80128ae:	6043      	str	r3, [r0, #4]
    c->inc  = 0;
 80128b0:	6083      	str	r3, [r0, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80128b2:	edd2 7a01 	vldr	s15, [r2, #4]
 80128b6:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80128c4 <tIntPhasor_initToPool+0x2c>
 80128ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128be:	edc0 7a06 	vstr	s15, [r0, #24]
}
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	4f800000 	.word	0x4f800000

080128c8 <tIntPhasor_init>:
{
 80128c8:	b508      	push	{r3, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
 80128ca:	3118      	adds	r1, #24
 80128cc:	f7ff ffe4 	bl	8012898 <tIntPhasor_initToPool>
}
 80128d0:	bd08      	pop	{r3, pc}
	...

080128d4 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 80128d4:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
 80128d6:	6853      	ldr	r3, [r2, #4]
 80128d8:	6891      	ldr	r1, [r2, #8]
 80128da:	440b      	add	r3, r1
 80128dc:	6053      	str	r3, [r2, #4]
    
    return c->phase * INV_TWO_TO_32; 
 80128de:	ee07 3a90 	vmov	s15, r3
 80128e2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
 80128e6:	eddf 7a02 	vldr	s15, [pc, #8]	; 80128f0 <tIntPhasor_tick+0x1c>
 80128ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80128ee:	4770      	bx	lr
 80128f0:	2f80000d 	.word	0x2f80000d

080128f4 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 80128f4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 80128f6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80128fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80128fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012902:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012906:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801290a:	4770      	bx	lr

0801290c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
 801290c:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 801290e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8012912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012916:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801291a:	eddf 7a04 	vldr	s15, [pc, #16]	; 801292c <tIntPhasor_setPhase+0x20>
 801291e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012922:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012926:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801292a:	4770      	bx	lr
 801292c:	4f800000 	.word	0x4f800000

08012930 <tSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tSquareLFO_tick(tSquareLFO* const cy)
{
 8012930:	b510      	push	{r4, lr}
 8012932:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy;
 8012936:	6804      	ldr	r4, [r0, #0]
    // Phasor increment
    Lfloat a = tIntPhasor_tick(&c->phasor);
 8012938:	f104 0008 	add.w	r0, r4, #8
 801293c:	f7ff ffca 	bl	80128d4 <tIntPhasor_tick>
 8012940:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tIntPhasor_tick(&c->invPhasor);
 8012944:	f104 000c 	add.w	r0, r4, #12
 8012948:	f7ff ffc4 	bl	80128d4 <tIntPhasor_tick>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801294c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8012950:	edd4 7a01 	vldr	s15, [r4, #4]
 8012954:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012958:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801295c:	ee30 0a67 	vsub.f32	s0, s0, s15
    return 2 * tmp;
}
 8012960:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012964:	ecbd 8b02 	vpop	{d8}
 8012968:	bd10      	pop	{r4, pc}

0801296a <tSquareLFO_setFreq>:

void     tSquareLFO_setFreq(tSquareLFO* const cy, Lfloat freq)
{
 801296a:	b510      	push	{r4, lr}
 801296c:	ed2d 8b02 	vpush	{d8}
 8012970:	eeb0 8a40 	vmov.f32	s16, s0
    _tSquareLFO* c = *cy;
 8012974:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setFreq(&c->phasor,freq);
 8012976:	f104 0008 	add.w	r0, r4, #8
 801297a:	f7ff ffbb 	bl	80128f4 <tIntPhasor_setFreq>
    tIntPhasor_setFreq(&c->invPhasor,freq);
 801297e:	eeb0 0a48 	vmov.f32	s0, s16
 8012982:	f104 000c 	add.w	r0, r4, #12
 8012986:	f7ff ffb5 	bl	80128f4 <tIntPhasor_setFreq>
}
 801298a:	ecbd 8b02 	vpop	{d8}
 801298e:	bd10      	pop	{r4, pc}

08012990 <tSquareLFO_setPulseWidth>:
    tIntPhasor_setSampleRate(&c->phasor, sr);
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
 8012990:	b508      	push	{r3, lr}
    _tSquareLFO *c = *cy;
 8012992:	6800      	ldr	r0, [r0, #0]

    c->pulsewidth = pw;
 8012994:	ed80 0a01 	vstr	s0, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012998:	6883      	ldr	r3, [r0, #8]
 801299a:	edd3 7a01 	vldr	s15, [r3, #4]
 801299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80129b8 <tSquareLFO_setPulseWidth+0x28>
 80129a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80129aa:	ee37 0a80 	vadd.f32	s0, s15, s0
 80129ae:	300c      	adds	r0, #12
 80129b0:	f7ff ffac 	bl	801290c <tIntPhasor_setPhase>
}
 80129b4:	bd08      	pop	{r3, pc}
 80129b6:	bf00      	nop
 80129b8:	2f80000d 	.word	0x2f80000d

080129bc <tSquareLFO_initToPool>:
{
 80129bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129be:	4606      	mov	r6, r0
 80129c0:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 80129c2:	680f      	ldr	r7, [r1, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80129c4:	4639      	mov	r1, r7
 80129c6:	2010      	movs	r0, #16
 80129c8:	f7ff f9da 	bl	8011d80 <mpool_alloc>
 80129cc:	4604      	mov	r4, r0
 80129ce:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80129d0:	f840 7b08 	str.w	r7, [r0], #8
    tIntPhasor_initToPool(&c->phasor,mp);
 80129d4:	4629      	mov	r1, r5
 80129d6:	f7ff ff5f 	bl	8012898 <tIntPhasor_initToPool>
    tIntPhasor_initToPool(&c->invPhasor,mp); 
 80129da:	4629      	mov	r1, r5
 80129dc:	f104 000c 	add.w	r0, r4, #12
 80129e0:	f7ff ff5a 	bl	8012898 <tIntPhasor_initToPool>
    tSquareLFO_setPulseWidth(cy, 0.5f);
 80129e4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7ff ffd1 	bl	8012990 <tSquareLFO_setPulseWidth>
}
 80129ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080129f0 <tSquareLFO_init>:
{
 80129f0:	b508      	push	{r3, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
 80129f2:	3118      	adds	r1, #24
 80129f4:	f7ff ffe2 	bl	80129bc <tSquareLFO_initToPool>
}
 80129f8:	bd08      	pop	{r3, pc}
	...

080129fc <tSquareLFO_setPhase>:

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
 80129fc:	b510      	push	{r4, lr}
    _tSquareLFO *c = *cy;
 80129fe:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
 8012a00:	f104 0008 	add.w	r0, r4, #8
 8012a04:	f7ff ff82 	bl	801290c <tIntPhasor_setPhase>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012a08:	ed94 0a01 	vldr	s0, [r4, #4]
 8012a0c:	68a3      	ldr	r3, [r4, #8]
 8012a0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a16:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012a2c <tSquareLFO_setPhase+0x30>
 8012a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012a1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a22:	f104 000c 	add.w	r0, r4, #12
 8012a26:	f7ff ff71 	bl	801290c <tIntPhasor_setPhase>
}
 8012a2a:	bd10      	pop	{r4, pc}
 8012a2c:	2f80000d 	.word	0x2f80000d

08012a30 <tSawSquareLFO_initToPool>:
    tSawSquareLFO_initToPool(cy, &leaf->mempool);

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
 8012a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a32:	4606      	mov	r6, r0
 8012a34:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8012a36:	680f      	ldr	r7, [r1, #0]
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8012a38:	4639      	mov	r1, r7
 8012a3a:	2010      	movs	r0, #16
 8012a3c:	f7ff f9a0 	bl	8011d80 <mpool_alloc>
 8012a40:	4604      	mov	r4, r0
 8012a42:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012a44:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8012a48:	4629      	mov	r1, r5
 8012a4a:	f7ff ffb7 	bl	80129bc <tSquareLFO_initToPool>
    tIntPhasor_initToPool(&c->saw,mp); 
 8012a4e:	4629      	mov	r1, r5
 8012a50:	f104 0008 	add.w	r0, r4, #8
 8012a54:	f7ff ff20 	bl	8012898 <tIntPhasor_initToPool>
}
 8012a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012a5a <tSawSquareLFO_init>:
{
 8012a5a:	b508      	push	{r3, lr}
    tSawSquareLFO_initToPool(cy, &leaf->mempool);
 8012a5c:	3118      	adds	r1, #24
 8012a5e:	f7ff ffe7 	bl	8012a30 <tSawSquareLFO_initToPool>
}
 8012a62:	bd08      	pop	{r3, pc}

08012a64 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8012a64:	b510      	push	{r4, lr}
 8012a66:	ed2d 8b02 	vpush	{d8}
    _tSawSquareLFO* c = *cy;
 8012a6a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8012a6c:	f104 0008 	add.w	r0, r4, #8
 8012a70:	f7ff ff30 	bl	80128d4 <tIntPhasor_tick>
 8012a74:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012a78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a7c:	ee30 8a00 	vadd.f32	s16, s0, s0
    Lfloat b = tSquareLFO_tick(&c->square);
 8012a80:	f104 000c 	add.w	r0, r4, #12
 8012a84:	f7ff ff54 	bl	8012930 <tSquareLFO_tick>
    return  (1 - c->shape) * a + c->shape * b; 
 8012a88:	ed94 7a01 	vldr	s14, [r4, #4]
 8012a8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a94:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012a98:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 8012a9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012aa0:	ecbd 8b02 	vpop	{d8}
 8012aa4:	bd10      	pop	{r4, pc}

08012aa6 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
 8012aa6:	b510      	push	{r4, lr}
 8012aa8:	ed2d 8b02 	vpush	{d8}
 8012aac:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8012ab0:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setFreq(&c->square, freq);
 8012ab2:	f104 000c 	add.w	r0, r4, #12
 8012ab6:	f7ff ff58 	bl	801296a <tSquareLFO_setFreq>
    tIntPhasor_setFreq(&c->saw, freq);
 8012aba:	eeb0 0a48 	vmov.f32	s0, s16
 8012abe:	f104 0008 	add.w	r0, r4, #8
 8012ac2:	f7ff ff17 	bl	80128f4 <tIntPhasor_setFreq>
}
 8012ac6:	ecbd 8b02 	vpop	{d8}
 8012aca:	bd10      	pop	{r4, pc}

08012acc <tSawSquareLFO_setPhase>:
    _tSawSquareLFO* c = *cy;
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
 8012acc:	b510      	push	{r4, lr}
 8012ace:	ed2d 8b02 	vpush	{d8}
 8012ad2:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8012ad6:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setPhase(&c->square, phase);
 8012ad8:	f104 000c 	add.w	r0, r4, #12
 8012adc:	f7ff ff8e 	bl	80129fc <tSquareLFO_setPhase>
    tIntPhasor_setPhase(&c->saw, phase);
 8012ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8012ae4:	f104 0008 	add.w	r0, r4, #8
 8012ae8:	f7ff ff10 	bl	801290c <tIntPhasor_setPhase>
}
 8012aec:	ecbd 8b02 	vpop	{d8}
 8012af0:	bd10      	pop	{r4, pc}

08012af2 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8012af2:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8012af4:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012af8:	4770      	bx	lr
	...

08012afc <tTriLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tTriLFO_tick(tTriLFO* const cy)
{
    _tTriLFO* c = *cy;
 8012afc:	6803      	ldr	r3, [r0, #0]
    c->phase += c->inc;
 8012afe:	689a      	ldr	r2, [r3, #8]
 8012b00:	6859      	ldr	r1, [r3, #4]
 8012b02:	440a      	add	r2, r1
 8012b04:	605a      	str	r2, [r3, #4]
    
    //bitmask fun
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8012b06:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    uint32_t mask = shiftedPhase >> 31; //get the sign bit
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8012b0a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8012b0e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
 8012b12:	ee00 3a10 	vmov	s0, r3
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8012b16:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012b1a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8012b30 <tTriLFO_tick+0x34>
 8012b1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b26:	ee30 0a67 	vsub.f32	s0, s0, s15
    return output;

}
 8012b2a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012b2e:	4770      	bx	lr
 8012b30:	2ffffff6 	.word	0x2ffffff6

08012b34 <tTriLFO_setFreq>:

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
 8012b34:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012b36:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012b3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8012b3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012b42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012b46:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012b4a:	4770      	bx	lr

08012b4c <tTriLFO_initToPool>:
{
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8012b50:	680d      	ldr	r5, [r1, #0]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8012b52:	4629      	mov	r1, r5
 8012b54:	2018      	movs	r0, #24
 8012b56:	f7ff f913 	bl	8011d80 <mpool_alloc>
 8012b5a:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8012b5c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012b5e:	686a      	ldr	r2, [r5, #4]
    c->inc      =  0;
 8012b60:	2300      	movs	r3, #0
 8012b62:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012b64:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8012b66:	edd2 7a01 	vldr	s15, [r2, #4]
 8012b6a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012b6e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8012b88 <tTriLFO_initToPool+0x3c>
 8012b72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b76:	edc0 7a05 	vstr	s15, [r0, #20]
    tTriLFO_setFreq(cy, 220.0f);
 8012b7a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8012b8c <tTriLFO_initToPool+0x40>
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f7ff ffd8 	bl	8012b34 <tTriLFO_setFreq>
}
 8012b84:	bd38      	pop	{r3, r4, r5, pc}
 8012b86:	bf00      	nop
 8012b88:	4f800000 	.word	0x4f800000
 8012b8c:	435c0000 	.word	0x435c0000

08012b90 <tTriLFO_init>:
{
 8012b90:	b508      	push	{r3, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
 8012b92:	3118      	adds	r1, #24
 8012b94:	f7ff ffda 	bl	8012b4c <tTriLFO_initToPool>
}
 8012b98:	bd08      	pop	{r3, pc}

08012b9a <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
 8012b9a:	6803      	ldr	r3, [r0, #0]
    int i = phase;
 8012b9c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8012ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ba4:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8012ba8:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8012bac:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012bb0:	4770      	bx	lr

08012bb2 <tSineTriLFO_initToPool>:
{
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
 8012bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb4:	4606      	mov	r6, r0
 8012bb6:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8012bb8:	680f      	ldr	r7, [r1, #0]
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8012bba:	4639      	mov	r1, r7
 8012bbc:	2010      	movs	r0, #16
 8012bbe:	f7ff f8df 	bl	8011d80 <mpool_alloc>
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012bc6:	f840 7b08 	str.w	r7, [r0], #8
    tTriLFO_initToPool(&c->tri,mp);
 8012bca:	4629      	mov	r1, r5
 8012bcc:	f7ff ffbe 	bl	8012b4c <tTriLFO_initToPool>
    tCycle_initToPool(&c->sine,mp); 
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	f104 000c 	add.w	r0, r4, #12
 8012bd6:	f7ff fa4b 	bl	8012070 <tCycle_initToPool>
   
}
 8012bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012bdc <tSineTriLFO_init>:
{
 8012bdc:	b508      	push	{r3, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
 8012bde:	3118      	adds	r1, #24
 8012be0:	f7ff ffe7 	bl	8012bb2 <tSineTriLFO_initToPool>
}
 8012be4:	bd08      	pop	{r3, pc}

08012be6 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8012be6:	b510      	push	{r4, lr}
 8012be8:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy;
 8012bec:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
 8012bee:	f104 000c 	add.w	r0, r4, #12
 8012bf2:	f7ff fa65 	bl	80120c0 <tCycle_tick>
 8012bf6:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tTriLFO_tick(&c->tri);
 8012bfa:	f104 0008 	add.w	r0, r4, #8
 8012bfe:	f7ff ff7d 	bl	8012afc <tTriLFO_tick>
    return  (1.0f - c->shape) * a + c->shape * b;
 8012c02:	ed94 7a01 	vldr	s14, [r4, #4]
 8012c06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c0e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012c12:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 8012c16:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012c1a:	ecbd 8b02 	vpop	{d8}
 8012c1e:	bd10      	pop	{r4, pc}

08012c20 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
 8012c20:	b510      	push	{r4, lr}
 8012c22:	ed2d 8b02 	vpush	{d8}
 8012c26:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8012c2a:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setFreq(&c->tri, freq);
 8012c2c:	f104 0008 	add.w	r0, r4, #8
 8012c30:	f7ff ff80 	bl	8012b34 <tTriLFO_setFreq>
    tCycle_setFreq(&c->sine, freq);
 8012c34:	eeb0 0a48 	vmov.f32	s0, s16
 8012c38:	f104 000c 	add.w	r0, r4, #12
 8012c3c:	f7ff fa68 	bl	8012110 <tCycle_setFreq>
}
 8012c40:	ecbd 8b02 	vpop	{d8}
 8012c44:	bd10      	pop	{r4, pc}

08012c46 <tSineTriLFO_setPhase>:
    _tSineTriLFO* c = *cy;
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
 8012c46:	b510      	push	{r4, lr}
 8012c48:	ed2d 8b02 	vpush	{d8}
 8012c4c:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8012c50:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setPhase(&c->tri, phase);
 8012c52:	f104 0008 	add.w	r0, r4, #8
 8012c56:	f7ff ffa0 	bl	8012b9a <tTriLFO_setPhase>
    tCycle_setPhase(&c->sine, phase);
 8012c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c5e:	f104 000c 	add.w	r0, r4, #12
 8012c62:	f7ff fa61 	bl	8012128 <tCycle_setPhase>
}
 8012c66:	ecbd 8b02 	vpop	{d8}
 8012c6a:	bd10      	pop	{r4, pc}

08012c6c <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8012c6c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8012c6e:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 8012c72:	4770      	bx	lr

08012c74 <tSimpleLivingString3_free>:


}

void    tSimpleLivingString3_free (tSimpleLivingString3* const pl)
{
 8012c74:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8012c76:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 8012c78:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8012c7c:	f7fb fb36 	bl	800e2ec <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 8012c80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012c84:	f7fc fbd3 	bl	800f42e <tHighpass_free>
    tLinearDelay_free(&p->delayLineL);
 8012c88:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012c8c:	f7fa fdd0 	bl	800d830 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 8012c90:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8012c94:	f7fa fdcc 	bl	800d830 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
 8012c98:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8012c9c:	f7fc f92f 	bl	800eefe <tOnePole_free>
    tExpSmooth_free(&p->wlSmooth);
 8012ca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012ca4:	f7fb fecb 	bl	800ea3e <tExpSmooth_free>

    
    mpool_free((char*)p, p->mempool);
 8012ca8:	6821      	ldr	r1, [r4, #0]
 8012caa:	4620      	mov	r0, r4
 8012cac:	f7ff f954 	bl	8011f58 <mpool_free>
}
 8012cb0:	bd10      	pop	{r4, pc}
 8012cb2:	0000      	movs	r0, r0
 8012cb4:	0000      	movs	r0, r0
	...

08012cb8 <tSimpleLivingString3_setFreq>:

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
 8012cb8:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8012cba:	6804      	ldr	r4, [r0, #0]
    p->freq = freq;
 8012cbc:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8012cc0:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8012cc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8012cc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8012ccc:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8012d58 <tSimpleLivingString3_setFreq+0xa0>
 8012cd0:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8012cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd8:	d40d      	bmi.n	8012cf6 <tSimpleLivingString3_setFreq+0x3e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8012cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012cdc:	005b      	lsls	r3, r3, #1
 8012cde:	ee00 3a10 	vmov	s0, r3
 8012ce2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012ce6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cee:	d404      	bmi.n	8012cfa <tSimpleLivingString3_setFreq+0x42>
    Lfloat waveLength = (p->sampleRate/freq);
 8012cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8012cf4:	e001      	b.n	8012cfa <tSimpleLivingString3_setFreq+0x42>
    if (waveLength<4.8) waveLength=4.8f;
 8012cf6:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8012d68 <tSimpleLivingString3_setFreq+0xb0>
    p->waveLengthInSamples =  waveLength * 0.5f;
 8012cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012cfe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d02:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8012d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d0a:	f7fb fed1 	bl	800eab0 <tExpSmooth_setDest>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8012d0e:	ed94 7a05 	vldr	s14, [r4, #20]
 8012d12:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012d6c <tSimpleLivingString3_setFreq+0xb4>
 8012d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d1e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012d70 <tSimpleLivingString3_setFreq+0xb8>
 8012d22:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8012d26:	ed94 6a01 	vldr	s12, [r4, #4]
 8012d2a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8012d2e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012d32:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8012d36:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8012d3a:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8012d3e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8012d60 <tSimpleLivingString3_setFreq+0xa8>
 8012d42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d46:	f003 f97b 	bl	8016040 <exp>
 8012d4a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012d4e:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 8012d52:	bd10      	pop	{r4, pc}
 8012d54:	f3af 8000 	nop.w
 8012d58:	33333333 	.word	0x33333333
 8012d5c:	40133333 	.word	0x40133333
 8012d60:	0a3d70a4 	.word	0x0a3d70a4
 8012d64:	c01ba3d7 	.word	0xc01ba3d7
 8012d68:	4099999a 	.word	0x4099999a
 8012d6c:	3c23d70a 	.word	0x3c23d70a
 8012d70:	40dd0cb3 	.word	0x40dd0cb3
 8012d74:	00000000 	.word	0x00000000

08012d78 <tSimpleLivingString3_initToPool>:
{
 8012d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	ed2d 8b08 	vpush	{d8-d11}
 8012d80:	4680      	mov	r8, r0
 8012d82:	460e      	mov	r6, r1
 8012d84:	eef0 8a40 	vmov.f32	s17, s0
 8012d88:	eeb0 8a60 	vmov.f32	s16, s1
 8012d8c:	ee11 9a10 	vmov	r9, s2
 8012d90:	eeb0 9a61 	vmov.f32	s18, s3
 8012d94:	eef0 9a42 	vmov.f32	s19, s4
 8012d98:	eeb0 aa62 	vmov.f32	s20, s5
 8012d9c:	4617      	mov	r7, r2
 8012d9e:	461d      	mov	r5, r3
    _tMempool* m = *mp;
 8012da0:	f8d3 a000 	ldr.w	sl, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8012da4:	4651      	mov	r1, sl
 8012da6:	206c      	movs	r0, #108	; 0x6c
 8012da8:	f7fe ffea 	bl	8011d80 <mpool_alloc>
 8012dac:	4604      	mov	r4, r0
 8012dae:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 8012db2:	f8c0 a000 	str.w	sl, [r0]
    LEAF* leaf = p->mempool->leaf;
 8012db6:	f8da 3004 	ldr.w	r3, [sl, #4]
    p->oversampling = oversampling;
 8012dba:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->sampleRate = leaf->sampleRate * oversampling;
 8012dbc:	ed93 7a00 	vldr	s14, [r3]
 8012dc0:	ee07 6a90 	vmov	s15, r6
 8012dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012dcc:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->curr=0.0f;
 8012dd0:	ed9f ba69 	vldr	s22, [pc, #420]	; 8012f78 <tSimpleLivingString3_initToPool+0x200>
 8012dd4:	ed80 ba09 	vstr	s22, [r0, #36]	; 0x24
    p->maxLength = 2400 * oversampling;
 8012dd8:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8012ddc:	fb03 f606 	mul.w	r6, r3, r6
 8012de0:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8012de2:	f100 0658 	add.w	r6, r0, #88	; 0x58
 8012de6:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 8012dea:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8012dee:	4629      	mov	r1, r5
 8012df0:	eddf 0a62 	vldr	s1, [pc, #392]	; 8012f7c <tSimpleLivingString3_initToPool+0x204>
 8012df4:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f7fb fde7 	bl	800e9cc <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8012dfe:	f104 0b34 	add.w	fp, r4, #52	; 0x34
 8012e02:	462a      	mov	r2, r5
 8012e04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e06:	ed94 0a02 	vldr	s0, [r4, #8]
 8012e0a:	4658      	mov	r0, fp
 8012e0c:	f7fa fde8 	bl	800d9e0 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8012e10:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8012e14:	462a      	mov	r2, r5
 8012e16:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e18:	ed94 0a02 	vldr	s0, [r4, #8]
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	f7fa fddf 	bl	800d9e0 <tLinearDelay_initToPool>
    tSimpleLivingString3_setFreq(pl, freq);
 8012e22:	eeb0 0a68 	vmov.f32	s0, s17
 8012e26:	4640      	mov	r0, r8
 8012e28:	f7ff ff46 	bl	8012cb8 <tSimpleLivingString3_setFreq>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8012e2c:	ed94 0a02 	vldr	s0, [r4, #8]
 8012e30:	4658      	mov	r0, fp
 8012e32:	f7fa fd9c 	bl	800d96e <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 8012e36:	ed94 0a02 	vldr	s0, [r4, #8]
 8012e3a:	4650      	mov	r0, sl
 8012e3c:	f7fa fd97 	bl	800d96e <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 8012e40:	4658      	mov	r0, fp
 8012e42:	f7fa fd00 	bl	800d846 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 8012e46:	4650      	mov	r0, sl
 8012e48:	f7fa fcfd 	bl	800d846 <tLinearDelay_clear>
    p->dampFreq = dampFreq;
 8012e4c:	ed84 8a03 	vstr	s16, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 8012e50:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 8012e54:	4629      	mov	r1, r5
 8012e56:	eeb0 0a48 	vmov.f32	s0, s16
 8012e5a:	4640      	mov	r0, r8
 8012e5c:	f7fc f872 	bl	800ef44 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 8012e60:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8012e64:	4640      	mov	r0, r8
 8012e66:	f7fc f8a3 	bl	800efb0 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8012e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8012e6e:	4640      	mov	r0, r8
 8012e70:	f7fc f84c 	bl	800ef0c <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 8012e74:	ed84 ba19 	vstr	s22, [r4, #100]	; 0x64
    p->rippleDelay = 0.5f;
 8012e78:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8012e7c:	f104 0850 	add.w	r8, r4, #80	; 0x50
 8012e80:	4629      	mov	r1, r5
 8012e82:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8012e86:	4640      	mov	r0, r8
 8012e88:	f7fc faaa 	bl	800f3e0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 8012e8c:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8012e90:	4640      	mov	r0, r8
 8012e92:	f7fc faf5 	bl	800f480 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 8012e96:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8012e9a:	4640      	mov	r0, r8
 8012e9c:	f7fc facd 	bl	800f43a <tHighpass_setFreq>
    p->userDecay = decay;
 8012ea0:	f8c4 9014 	str.w	r9, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8012ea4:	462a      	mov	r2, r5
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	eeb0 1a4a 	vmov.f32	s2, s20
 8012eac:	eef0 0a69 	vmov.f32	s1, s19
 8012eb0:	eeb0 0a49 	vmov.f32	s0, s18
 8012eb4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8012eb8:	f7fb f9eb 	bl	800e292 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 8012ebc:	6227      	str	r7, [r4, #32]
    p->changeGainCompensator = 1.0f;
 8012ebe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012ec2:	61e3      	str	r3, [r4, #28]
    p->freq = freq;
 8012ec4:	edc4 8a01 	vstr	s17, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8012ec8:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8012ecc:	eec7 7a28 	vdiv.f32	s15, s14, s17
    if (waveLength<4.8) waveLength=4.8f;
 8012ed0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8012ed4:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8012f68 <tSimpleLivingString3_initToPool+0x1f0>
 8012ed8:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8012edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee0:	d40d      	bmi.n	8012efe <tSimpleLivingString3_initToPool+0x186>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8012ee2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012ee4:	005b      	lsls	r3, r3, #1
 8012ee6:	ee00 3a10 	vmov	s0, r3
 8012eea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012eee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef6:	d404      	bmi.n	8012f02 <tSimpleLivingString3_initToPool+0x18a>
    Lfloat waveLength = (p->sampleRate/freq);
 8012ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8012efc:	e001      	b.n	8012f02 <tSimpleLivingString3_initToPool+0x18a>
    if (waveLength<4.8) waveLength=4.8f;
 8012efe:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8012f80 <tSimpleLivingString3_initToPool+0x208>
    p->waveLengthInSamples =  waveLength * 0.5f;
 8012f02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012f0a:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8012f0e:	4630      	mov	r0, r6
 8012f10:	f7fb fdce 	bl	800eab0 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8012f14:	ed94 7a05 	vldr	s14, [r4, #20]
 8012f18:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012f7c <tSimpleLivingString3_initToPool+0x204>
 8012f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f24:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012f84 <tSimpleLivingString3_initToPool+0x20c>
 8012f28:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8012f2c:	ed94 6a01 	vldr	s12, [r4, #4]
 8012f30:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8012f34:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012f38:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8012f3c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8012f40:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8012f44:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8012f70 <tSimpleLivingString3_initToPool+0x1f8>
 8012f48:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f4c:	f003 f878 	bl	8016040 <exp>
 8012f50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012f54:	ed84 0a04 	vstr	s0, [r4, #16]
    p->pickupPoint = 0.9f;
 8012f58:	4b0b      	ldr	r3, [pc, #44]	; (8012f88 <tSimpleLivingString3_initToPool+0x210>)
 8012f5a:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->prevDelayLength = p->waveLengthInSamples;
 8012f5c:	68a3      	ldr	r3, [r4, #8]
 8012f5e:	61a3      	str	r3, [r4, #24]
}
 8012f60:	ecbd 8b08 	vpop	{d8-d11}
 8012f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f68:	33333333 	.word	0x33333333
 8012f6c:	40133333 	.word	0x40133333
 8012f70:	0a3d70a4 	.word	0x0a3d70a4
 8012f74:	c01ba3d7 	.word	0xc01ba3d7
 8012f78:	00000000 	.word	0x00000000
 8012f7c:	3c23d70a 	.word	0x3c23d70a
 8012f80:	4099999a 	.word	0x4099999a
 8012f84:	40dd0cb3 	.word	0x40dd0cb3
 8012f88:	3f666666 	.word	0x3f666666

08012f8c <tSimpleLivingString3_setDampFreq>:
    p->waveLengthInSamples = waveLength * 0.5f;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tSimpleLivingString3_setDampFreq(tSimpleLivingString3* const pl, Lfloat dampFreq)
{
 8012f8c:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8012f8e:	6800      	ldr	r0, [r0, #0]
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8012f90:	303c      	adds	r0, #60	; 0x3c
 8012f92:	f7fb ffbb 	bl	800ef0c <tOnePole_setFreq>
}
 8012f96:	bd08      	pop	{r3, pc}

08012f98 <tSimpleLivingString3_setDecay>:

void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
 8012f98:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8012f9a:	6804      	ldr	r4, [r0, #0]
    p->userDecay = decay;
 8012f9c:	ed84 0a05 	vstr	s0, [r4, #20]

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8012fa0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012ff0 <tSimpleLivingString3_setDecay+0x58>
 8012fa4:	ee20 7a27 	vmul.f32	s14, s0, s15
 8012fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012fac:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012ff4 <tSimpleLivingString3_setDecay+0x5c>
 8012fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8012fb4:	ed94 6a01 	vldr	s12, [r4, #4]
 8012fb8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8012fbc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8012fc0:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8012fc4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8012fc8:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8012fcc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8012fe8 <tSimpleLivingString3_setDecay+0x50>
 8012fd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012fd4:	f003 f834 	bl	8016040 <exp>
 8012fd8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012fdc:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8012fe0:	bd10      	pop	{r4, pc}
 8012fe2:	bf00      	nop
 8012fe4:	f3af 8000 	nop.w
 8012fe8:	52bd3c36 	.word	0x52bd3c36
 8012fec:	c01ba196 	.word	0xc01ba196
 8012ff0:	3c23d70a 	.word	0x3c23d70a
 8012ff4:	40dd0cb3 	.word	0x40dd0cb3

08012ff8 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
 8012ff8:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8012ffa:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8012ffc:	3054      	adds	r0, #84	; 0x54
 8012ffe:	f7fb f9b7 	bl	800e370 <tFeedbackLeveler_setTargetLevel>
}
 8013002:	bd08      	pop	{r3, pc}

08013004 <tSimpleLivingString3_setLevSmoothFactor>:

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
 8013004:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8013006:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8013008:	3054      	adds	r0, #84	; 0x54
 801300a:	f7fb f97e 	bl	800e30a <tFeedbackLeveler_setFactor>
}
 801300e:	bd08      	pop	{r3, pc}

08013010 <tSimpleLivingString3_setLevStrength>:

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
 8013010:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8013012:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8013014:	3054      	adds	r0, #84	; 0x54
 8013016:	f7fb f974 	bl	800e302 <tFeedbackLeveler_setStrength>
}
 801301a:	bd08      	pop	{r3, pc}

0801301c <tSimpleLivingString3_setLevMode>:

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801301c:	b538      	push	{r3, r4, r5, lr}
 801301e:	460c      	mov	r4, r1
    _tSimpleLivingString3* p = *pl;
 8013020:	6805      	ldr	r5, [r0, #0]
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8013022:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8013026:	f7fb f976 	bl	800e316 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801302a:	622c      	str	r4, [r5, #32]
}
 801302c:	bd38      	pop	{r3, r4, r5, pc}

0801302e <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 801302e:	b4f0      	push	{r4, r5, r6, r7}
    _tSimpleLivingString3* p = *pl;
 8013030:	6804      	ldr	r4, [r0, #0]
    int length = p->waveLengthInSamples;
 8013032:	edd4 7a02 	vldr	s15, [r4, #8]
 8013036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801303a:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 801303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013042:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013046:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801304a:	ee17 5a90 	vmov	r5, s15
    if (pluckPoint < 1)
 801304e:	2d00      	cmp	r5, #0
 8013050:	dd03      	ble.n	801305a <tSimpleLivingString3_pluck+0x2c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 8013052:	42a8      	cmp	r0, r5
 8013054:	dc02      	bgt.n	801305c <tSimpleLivingString3_pluck+0x2e>
    {
    	pluckPoint = length-1;
 8013056:	1e45      	subs	r5, r0, #1
 8013058:	e000      	b.n	801305c <tSimpleLivingString3_pluck+0x2e>
    	pluckPoint = 1;
 801305a:	2501      	movs	r5, #1
    }
    int remainder = length-pluckPoint;
 801305c:	1b43      	subs	r3, r0, r5
 801305e:	ee06 3a10 	vmov	s12, r3
    for (int i = 0; i < length; i++)
 8013062:	2200      	movs	r2, #0
 8013064:	e021      	b.n	80130aa <tSimpleLivingString3_pluck+0x7c>
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8013066:	ee07 2a90 	vmov	s15, r2
 801306a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801306e:	ee07 5a10 	vmov	s14, r5
 8013072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801307a:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 801307e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013082:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801308a:	ee67 7a80 	vmul.f32	s15, s15, s0
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801308e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013090:	698b      	ldr	r3, [r1, #24]
 8013092:	4413      	add	r3, r2
 8013094:	69ce      	ldr	r6, [r1, #28]
 8013096:	fbb3 f7f6 	udiv	r7, r3, r6
 801309a:	fb06 3317 	mls	r3, r6, r7, r3
        p->delayLineU->buff[bufWritePoint] = val;
 801309e:	6889      	ldr	r1, [r1, #8]
 80130a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80130a4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < length; i++)
 80130a8:	3201      	adds	r2, #1
 80130aa:	4282      	cmp	r2, r0
 80130ac:	da0e      	bge.n	80130cc <tSimpleLivingString3_pluck+0x9e>
        if (i <= pluckPoint)
 80130ae:	4295      	cmp	r5, r2
 80130b0:	dbd9      	blt.n	8013066 <tSimpleLivingString3_pluck+0x38>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80130b2:	ee07 2a90 	vmov	s15, r2
 80130b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80130ba:	ee07 5a90 	vmov	s15, r5
 80130be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80130c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80130c6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80130ca:	e7e0      	b.n	801308e <tSimpleLivingString3_pluck+0x60>
    }
    for (int i = 0; i < length; i++)
 80130cc:	2100      	movs	r1, #0
 80130ce:	e01a      	b.n	8013106 <tSimpleLivingString3_pluck+0xd8>
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 80130d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80130d2:	69ab      	ldr	r3, [r5, #24]
 80130d4:	440b      	add	r3, r1
 80130d6:	69ea      	ldr	r2, [r5, #28]
 80130d8:	fbb3 f6f2 	udiv	r6, r3, r2
 80130dc:	fb02 3216 	mls	r2, r2, r6, r3
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 80130e0:	1e43      	subs	r3, r0, #1
 80130e2:	1a5b      	subs	r3, r3, r1
 80130e4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80130e6:	69b7      	ldr	r7, [r6, #24]
 80130e8:	443b      	add	r3, r7
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 80130ea:	69f7      	ldr	r7, [r6, #28]
 80130ec:	fbb3 fcf7 	udiv	ip, r3, r7
 80130f0:	fb07 331c 	mls	r3, r7, ip, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 80130f4:	68b6      	ldr	r6, [r6, #8]
 80130f6:	68ad      	ldr	r5, [r5, #8]
 80130f8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80130fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < length; i++)
 8013104:	3101      	adds	r1, #1
 8013106:	4281      	cmp	r1, r0
 8013108:	dbe2      	blt.n	80130d0 <tSimpleLivingString3_pluck+0xa2>
    }
}
 801310a:	bcf0      	pop	{r4, r5, r6, r7}
 801310c:	4770      	bx	lr

0801310e <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 801310e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013110:	ed2d 8b02 	vpush	{d8}
 8013114:	eef0 8a40 	vmov.f32	s17, s0
    _tSimpleLivingString3* p = *pl;
 8013118:	6804      	ldr	r4, [r0, #0]

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 801311a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801311e:	f7fb fcd5 	bl	800eacc <tExpSmooth_tick>
 8013122:	eeb0 8a40 	vmov.f32	s16, s0
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8013126:	f104 0634 	add.w	r6, r4, #52	; 0x34
 801312a:	4630      	mov	r0, r6
 801312c:	f7fa fc1f 	bl	800d96e <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8013130:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8013134:	eeb0 0a48 	vmov.f32	s0, s16
 8013138:	4638      	mov	r0, r7
 801313a:	f7fa fc18 	bl	800d96e <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 801313e:	2500      	movs	r5, #0
 8013140:	e04d      	b.n	80131de <tSimpleLivingString3_tick+0xd0>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
 8013142:	4630      	mov	r0, r6
 8013144:	f7fa fbe3 	bl	800d90e <tLinearDelay_tickOut>
 8013148:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801314c:	f7fb ff19 	bl	800ef82 <tOnePole_tick>
 8013150:	edd4 7a04 	vldr	s15, [r4, #16]
 8013154:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8013158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801315c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013160:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013164:	f7fc f977 	bl	800f456 <tHighpass_tick>
 8013168:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801316c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8013170:	f7fb f8d4 	bl	800e31c <tFeedbackLeveler_tick>
 8013174:	eef0 0a40 	vmov.f32	s1, s0
 8013178:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801317c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013180:	f7fe fa80 	bl	8011684 <LEAF_clip>
 8013184:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8013188:	4638      	mov	r0, r7
 801318a:	f7fa fbc0 	bl	800d90e <tLinearDelay_tickOut>
 801318e:	eef0 0a40 	vmov.f32	s1, s0
 8013192:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013196:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801319a:	f7fe fa73 	bl	8011684 <LEAF_clip>
 801319e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 80131a2:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80131a6:	4630      	mov	r0, r6
 80131a8:	f7fa fb9c 	bl	800d8e4 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 80131ac:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 80131b0:	eeb1 0a40 	vneg.f32	s0, s0
 80131b4:	4638      	mov	r0, r7
 80131b6:	f7fa fb95 	bl	800d8e4 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 80131ba:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80131be:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80131c2:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 80131c6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80131ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131ce:	ee17 1a90 	vmov	r1, s15
 80131d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80131d6:	4630      	mov	r0, r6
 80131d8:	f7fa fc3e 	bl	800da58 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 80131dc:	3501      	adds	r5, #1
 80131de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80131e0:	42ab      	cmp	r3, r5
 80131e2:	dcae      	bgt.n	8013142 <tSimpleLivingString3_tick+0x34>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
 80131e4:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 80131e8:	ee27 7a88 	vmul.f32	s14, s15, s16
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 80131ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80131f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80131f4:	ee67 7a88 	vmul.f32	s15, s15, s16
    int32_t whichPoint = ((int32_t)roundf(point));
 80131f8:	feb8 6a47 	vrinta.f32	s12, s14
 80131fc:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat LfloatPart = point - whichPoint;
 8013200:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 8013204:	ee37 7a65 	vsub.f32	s14, s14, s11

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8013208:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801320a:	6983      	ldr	r3, [r0, #24]
 801320c:	ee16 2a10 	vmov	r2, s12
 8013210:	4413      	add	r3, r2
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8013212:	69c1      	ldr	r1, [r0, #28]
 8013214:	fb93 f2f1 	sdiv	r2, r3, r1
 8013218:	fb01 3312 	mls	r3, r1, r2, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801321c:	1c5a      	adds	r2, r3, #1
 801321e:	fb92 f5f1 	sdiv	r5, r2, r1
 8013222:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8013226:	6882      	ldr	r2, [r0, #8]
 8013228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801322c:	ed93 0a00 	vldr	s0, [r3]
 8013230:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8013234:	ee20 0a06 	vmul.f32	s0, s0, s12
 8013238:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801323c:	ed92 6a00 	vldr	s12, [r2]
 8013240:	ee26 7a07 	vmul.f32	s14, s12, s14
 8013244:	ee30 0a07 	vadd.f32	s0, s0, s14


    whichPoint = (int32_t)roundf(reversePoint);
 8013248:	feb8 7a67 	vrinta.f32	s14, s15
 801324c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    LfloatPart = reversePoint - whichPoint;
 8013250:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8013254:	ee77 7ac6 	vsub.f32	s15, s15, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8013258:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801325a:	6983      	ldr	r3, [r0, #24]
 801325c:	ee17 2a10 	vmov	r2, s14
 8013260:	4413      	add	r3, r2
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8013262:	69c1      	ldr	r1, [r0, #28]
 8013264:	fb93 f2f1 	sdiv	r2, r3, r1
 8013268:	fb01 3312 	mls	r3, r1, r2, r3
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801326c:	1c5a      	adds	r2, r3, #1
 801326e:	fb92 f5f1 	sdiv	r5, r2, r1
 8013272:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8013276:	6882      	ldr	r2, [r0, #8]
 8013278:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801327c:	ed93 7a00 	vldr	s14, [r3]
 8013280:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8013284:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013288:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801328c:	edd2 6a00 	vldr	s13, [r2]
 8013290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013294:	ee77 7a27 	vadd.f32	s15, s14, s15

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8013298:	ee30 0a27 	vadd.f32	s0, s0, s15
 801329c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80132a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80132a4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 80132a8:	68a3      	ldr	r3, [r4, #8]
 80132aa:	61a3      	str	r3, [r4, #24]
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 80132ac:	ecbd 8b02 	vpop	{d8}
 80132b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132b2 <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 80132b2:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 80132b4:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 80132b8:	4770      	bx	lr

080132ba <tTString_free>:
    tNoise_initToPool(&x->noise, WhiteNoise, mp);
    tHighpass_initToPool(&x->dcBlock, 5.0f, mp);
    tHighpass_initToPool(&x->dcBlockP, 5.0f, mp);
}
void    tTString_free                  (tTString* const bw)
{
 80132ba:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 80132bc:	6804      	ldr	r4, [r0, #0]
    tHighpass_free(&x->dcBlockP);
 80132be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80132c2:	f7fc f8b4 	bl	800f42e <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 80132c6:	f104 0020 	add.w	r0, r4, #32
 80132ca:	f7fc f8b0 	bl	800f42e <tHighpass_free>
    tNoise_free(&x->noise);
 80132ce:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80132d2:	f7ff fa83 	bl	80127dc <tNoise_free>
    tSVF_free(&x->pickupFilter);
 80132d6:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 80132da:	f7fb ff90 	bl	800f1fe <tSVF_free>
    tCycle_free(&x->tensionModOsc);
 80132de:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80132e2:	f7fe fee6 	bl	80120b2 <tCycle_free>
    tSVF_free(&x->highpassP);
 80132e6:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80132ea:	f7fb ff88 	bl	800f1fe <tSVF_free>
    tSVF_free(&x->lowpassP),
 80132ee:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80132f2:	f7fb ff84 	bl	800f1fe <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 80132f6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80132fa:	f7fb fce9 	bl	800ecd0 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 80132fe:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013302:	f7fb fce5 	bl	800ecd0 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pitchSmoother);
 8013306:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801330a:	f7fb fb98 	bl	800ea3e <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 801330e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013312:	f7fb fb94 	bl	800ea3e <tExpSmooth_free>
    tSlide_free(&x->slide);
 8013316:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801331a:	f7fb fc1e 	bl	800eb5a <tSlide_free>
    tCookOnePole_free(&x->tensionFilt);
 801331e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8013322:	f7fb fe89 	bl	800f038 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFiltP);
 8013326:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801332a:	f7fb fe85 	bl	800f038 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 801332e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013332:	f7fb fe81 	bl	800f038 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 8013336:	f104 0014 	add.w	r0, r4, #20
 801333a:	f7fa fba0 	bl	800da7e <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 801333e:	f104 0010 	add.w	r0, r4, #16
 8013342:	f7fa fb9c 	bl	800da7e <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 8013346:	6821      	ldr	r1, [r4, #0]
 8013348:	4620      	mov	r0, r4
 801334a:	f7fe fe05 	bl	8011f58 <mpool_free>
}
 801334e:	bd10      	pop	{r4, pc}

08013350 <tTString_tick>:

Lfloat   tTString_tick                  (tTString* const bw)
{
 8013350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013352:	ed2d 8b0a 	vpush	{d8-d12}
    _tTString* x = *bw;
 8013356:	6804      	ldr	r4, [r0, #0]
    Lfloat theOutput = 0.0f;

    for (int i = 0; i < x->oversampling; i++)
 8013358:	2700      	movs	r7, #0
    Lfloat theOutput = 0.0f;
 801335a:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 801366c <tTString_tick+0x31c>
    for (int i = 0; i < x->oversampling; i++)
 801335e:	e137      	b.n	80135d0 <tTString_tick+0x280>
        Lfloat halfCurrentDelay = currentDelay * 0.5f;

        Lfloat tempSlide = fabsf(x->baseDelay - x->prevDelay);
        if ((tempSlide > 0.01f) || (tempSlide < 0.00005f))
        {
        	tempSlide = 0.0f;
 8013360:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801366c <tTString_tick+0x31c>
        }

        x->slideAmount = tSlide_tick(&x->slide, tempSlide);
 8013364:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013368:	f7fb fbfd 	bl	800eb66 <tSlide_tick>
 801336c:	ed84 0a3d 	vstr	s0, [r4, #244]	; 0xf4


        x->slideNoise = tNoise_tick(&x->noise) * x->slideAmount * x->slideGain;
 8013370:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8013374:	f7ff fa38 	bl	80127e8 <tNoise_tick>
 8013378:	edd4 7a3d 	vldr	s15, [r4, #244]	; 0xf4
 801337c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013380:	edd4 7a42 	vldr	s15, [r4, #264]	; 0x108
 8013384:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013388:	ed84 0a41 	vstr	s0, [r4, #260]	; 0x104
        x->prevDelay = x->baseDelay;
 801338c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801338e:	6563      	str	r3, [r4, #84]	; 0x54
       // 	gainCompensation = sqrtf(oneMinusChange);
       // }
        //Lfloat gainCompensation = tSlide_tick(&x->slide, currentDelay);
        //Lfloat gainCompensation = sqrtf(oneMinusChange);
        //x->prevDelay = currentDelay;
        if (currentDelay > 10.0f)
 8013390:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013394:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339c:	dc61      	bgt.n	8013462 <tTString_tick+0x112>
        {
        	tLagrangeDelay_setDelay(&x->delay, currentDelay);
        }


        Lfloat delayOut = tCookOnePole_tick(&x->reflFilt, x->output);
 801339e:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80133a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80133a6:	f7fb fe7d 	bl	800f0a4 <tCookOnePole_tick>
 80133aa:	eef0 aa40 	vmov.f32	s21, s0
        //x->tempSum -= delayOut;
        //Lfloat delayOut = x->output;
        Lfloat output = tLagrangeDelay_tickOut(&x->delay);
 80133ae:	4630      	mov	r0, r6
 80133b0:	f7fa fb8a 	bl	800dac8 <tLagrangeDelay_tickOut>
 80133b4:	eef0 8a40 	vmov.f32	s17, s0

        Lfloat rippleLength = x->rippleRate * currentDelay;
 80133b8:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 80133bc:	ee67 7a88 	vmul.f32	s15, s15, s16
        if (rippleLength > currentDelay)
 80133c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c8:	d401      	bmi.n	80133ce <tTString_tick+0x7e>
        Lfloat rippleLength = x->rippleRate * currentDelay;
 80133ca:	eeb0 8a67 	vmov.f32	s16, s15
        {
        	rippleLength = currentDelay;
        }
        if (rippleLength < 10.0f)
 80133ce:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80133d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133da:	d501      	bpl.n	80133e0 <tTString_tick+0x90>
        {
        	rippleLength = 10.0f;
 80133dc:	eeb0 8a67 	vmov.f32	s16, s15
        }
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 80133e0:	eefc 7ac8 	vcvt.u32.f32	s15, s16
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 80133e4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
        output += (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 80133e8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80133ec:	ee17 1a90 	vmov	r1, s15
 80133f0:	4630      	mov	r0, r6
 80133f2:	f7fa fc59 	bl	800dca8 <tLagrangeDelay_tapOutInterpolated>
 80133f6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80133fa:	ee20 0a27 	vmul.f32	s0, s0, s15


        output = tThiranAllpassSOCascade_tick(&x->allpass, output);
 80133fe:	ee38 0a80 	vadd.f32	s0, s17, s0
 8013402:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013406:	f7fb fd5b 	bl	800eec0 <tThiranAllpassSOCascade_tick>
        x->output = LEAF_clip(-1.0f, (output * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 801340a:	edd4 0a21 	vldr	s1, [r4, #132]	; 0x84
 801340e:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
 8013412:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013416:	ee20 0a80 	vmul.f32	s0, s1, s0
 801341a:	edd4 0a22 	vldr	s1, [r4, #136]	; 0x88
 801341e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013422:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013426:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801342a:	f7fe f92b 	bl	8011684 <LEAF_clip>
 801342e:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c

        //if past the string ends, need to read backwards and invert
        uint32_t backwards = 0;
        Lfloat invert = 1.0f;

        currentDelay = x->baseDelay;
 8013432:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
        halfCurrentDelay = currentDelay * 0.5f;
 8013436:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801343a:	ee69 8a28 	vmul.f32	s17, s18, s17
        Lfloat pickupPos = 50.0f * x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);//(x->pickupPos) * halfCurrentDelay;
 801343e:	edd4 7a2b 	vldr	s15, [r4, #172]	; 0xac
 8013442:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8013670 <tTString_tick+0x320>
 8013446:	ee27 8a87 	vmul.f32	s16, s15, s14
 801344a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801344e:	f7fe fe37 	bl	80120c0 <tCycle_tick>
 8013452:	edd4 7a36 	vldr	s15, [r4, #216]	; 0xd8
 8013456:	ee20 0a27 	vmul.f32	s0, s0, s15
 801345a:	ee78 7a00 	vadd.f32	s15, s16, s0
        uint32_t backwards = 0;
 801345e:	2500      	movs	r5, #0

        //Lfloat pickupPos = x->pickupPos * 60.0f;
        while (pickupPos > halfCurrentDelay)
 8013460:	e009      	b.n	8013476 <tTString_tick+0x126>
        	tLagrangeDelay_setDelay(&x->delay, currentDelay);
 8013462:	eeb0 0a48 	vmov.f32	s0, s16
 8013466:	4630      	mov	r0, r6
 8013468:	f7fa fb68 	bl	800db3c <tLagrangeDelay_setDelay>
 801346c:	e797      	b.n	801339e <tTString_tick+0x4e>
        {
        	pickupPos = pickupPos - halfCurrentDelay;
 801346e:	ee77 7ae8 	vsub.f32	s15, s15, s17
        	//invert = invert * -1.0f;
        	backwards = !backwards;
 8013472:	f085 0501 	eor.w	r5, r5, #1
        while (pickupPos > halfCurrentDelay)
 8013476:	eef4 7ae8 	vcmpe.f32	s15, s17
 801347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347e:	dcf6      	bgt.n	801346e <tTString_tick+0x11e>
 8013480:	e003      	b.n	801348a <tTString_tick+0x13a>
        }
        while (pickupPos < 0.0f)
        {
        	pickupPos = pickupPos + halfCurrentDelay;
 8013482:	ee77 7aa8 	vadd.f32	s15, s15, s17
        	//invert = invert * -1.0f;
        	backwards = !backwards;
 8013486:	f085 0501 	eor.w	r5, r5, #1
        while (pickupPos < 0.0f)
 801348a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013492:	d4f6      	bmi.n	8013482 <tTString_tick+0x132>
        }
        Lfloat pickupPosFinal = pickupPos;
        if (backwards)
 8013494:	2d00      	cmp	r5, #0
 8013496:	f000 80de 	beq.w	8013656 <tTString_tick+0x306>
        {
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 801349a:	ee38 bae7 	vsub.f32	s22, s17, s15
        }


        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 801349e:	eebc cacb 	vcvt.u32.f32	s24, s22
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 80134a2:	eef8 9a4c 	vcvt.f32.u32	s19, s24
 80134a6:	ee7b 9a69 	vsub.f32	s19, s22, s19
        Lfloat inversePickupPos = currentDelay - pickupPos;
 80134aa:	ee39 9a67 	vsub.f32	s18, s18, s15
        if (backwards)
 80134ae:	b10d      	cbz	r5, 80134b4 <tTString_tick+0x164>
        {
        	inversePickupPos = halfCurrentDelay + pickupPos;
 80134b0:	ee37 9aa8 	vadd.f32	s18, s15, s17
        }
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 80134b4:	eefc bac9 	vcvt.u32.f32	s23, s18
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 80134b8:	eef8 8a6b 	vcvt.f32.u32	s17, s23
 80134bc:	ee79 8a68 	vsub.f32	s17, s18, s17

        //rightgoing = tLagrangeDelay_tapOutInterpolated(&x->delay, pickupPosInt, pickupPosAlpha)  * invert;
        //leftgoing = tLagrangeDelay_tapOutInterpolated(&x->delay, inversePickupPosInt, inversePickupPosAlpha) * invert;


        rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * (1.0f - pickupPosAlpha) * invert;
 80134c0:	ee1c 1a10 	vmov	r1, s24
 80134c4:	4630      	mov	r0, r6
 80134c6:	f7fa fbe2 	bl	800dc8e <tLagrangeDelay_tapOut>
 80134ca:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 80134ce:	ee7a 7a69 	vsub.f32	s15, s20, s19
 80134d2:	ee20 8a27 	vmul.f32	s16, s0, s15
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosInt + 1) * pickupPosAlpha * invert;
 80134d6:	ee1c 1a10 	vmov	r1, s24
 80134da:	3101      	adds	r1, #1
 80134dc:	4630      	mov	r0, r6
 80134de:	f7fa fbd6 	bl	800dc8e <tLagrangeDelay_tapOut>
 80134e2:	ee20 0a29 	vmul.f32	s0, s0, s19
 80134e6:	ee38 8a00 	vadd.f32	s16, s16, s0
        leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * (1.0f - inversePickupPosAlpha) * invert;
 80134ea:	ee1b 1a90 	vmov	r1, s23
 80134ee:	4630      	mov	r0, r6
 80134f0:	f7fa fbcd 	bl	800dc8e <tLagrangeDelay_tapOut>
 80134f4:	ee3a aa68 	vsub.f32	s20, s20, s17
 80134f8:	ee20 aa0a 	vmul.f32	s20, s0, s20
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt + 1) * inversePickupPosAlpha * invert;
 80134fc:	ee1b 1a90 	vmov	r1, s23
 8013500:	3101      	adds	r1, #1
 8013502:	4630      	mov	r0, r6
 8013504:	f7fa fbc3 	bl	800dc8e <tLagrangeDelay_tapOut>
 8013508:	ee20 0a28 	vmul.f32	s0, s0, s17
 801350c:	ee3a aa00 	vadd.f32	s20, s20, s0

        x->pickupOut =  (rightgoing - leftgoing);
 8013510:	ee38 8a4a 	vsub.f32	s16, s16, s20
 8013514:	ed84 8a29 	vstr	s16, [r4, #164]	; 0xa4


        tLagrangeDelay_addTo(&x->delay, x->slideNoise, 0);
 8013518:	2100      	movs	r1, #0
 801351a:	ed94 0a41 	vldr	s0, [r4, #260]	; 0x104
 801351e:	4630      	mov	r0, r6
 8013520:	f7fa fc2e 	bl	800dd80 <tLagrangeDelay_addTo>
        //tLagrangeDelay_addTo(&x->delay, -x->slideNoise, currentDelay-1.0f);

        tLagrangeDelay_tickIn(&x->delay, tHighpass_tick(&x->dcBlock, delayOut));// + x->slideNoise);
 8013524:	eeb0 0a6a 	vmov.f32	s0, s21
 8013528:	f104 0020 	add.w	r0, r4, #32
 801352c:	f7fb ff93 	bl	800f456 <tHighpass_tick>
 8013530:	4630      	mov	r0, r6
 8013532:	f7fa fabc 	bl	800daae <tLagrangeDelay_tickIn>
        //x->output = (output * x->muteCoeff);

        x->pickupPosL = pickupPosFinal;
 8013536:	ed84 ba38 	vstr	s22, [r4, #224]	; 0xe0
        x->pickupPosR = inversePickupPos;
 801353a:	ed84 9a39 	vstr	s18, [r4, #228]	; 0xe4
        x->pickupPosLAlpha = pickupPosAlpha;
 801353e:	edc4 9a3a 	vstr	s19, [r4, #232]	; 0xe8
        x->pickupPosRAlpha = inversePickupPosAlpha;
 8013542:	edc4 8a3b 	vstr	s17, [r4, #236]	; 0xec
        x->backwards = backwards;
 8013546:	ee07 5a90 	vmov	s15, r5
 801354a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801354e:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0

        Lfloat currentDelayP = x->baseDelay - x->allpassDelayP - x->tensionAmount;
 8013552:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
 8013556:	edd4 7a1c 	vldr	s15, [r4, #112]	; 0x70
 801355a:	ee38 8a67 	vsub.f32	s16, s16, s15
 801355e:	edd4 7a2f 	vldr	s15, [r4, #188]	; 0xbc
 8013562:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (currentDelayP < 10.0f)
 8013566:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801356a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013572:	d501      	bpl.n	8013578 <tTString_tick+0x228>
        {
        	currentDelayP = 10.0f;
 8013574:	eeb0 8a67 	vmov.f32	s16, s15
        }
        Lfloat maxDelayP = tLagrangeDelay_getMaxDelay (&x->delayP);
 8013578:	f104 0514 	add.w	r5, r4, #20
 801357c:	4628      	mov	r0, r5
 801357e:	f7fa fc0f 	bl	800dda0 <tLagrangeDelay_getMaxDelay>
        if (currentDelayP > maxDelayP)
 8013582:	eeb4 8ac0 	vcmpe.f32	s16, s0
 8013586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358a:	dc01      	bgt.n	8013590 <tTString_tick+0x240>
 801358c:	eeb0 0a48 	vmov.f32	s0, s16
        	currentDelayP = maxDelayP;
        }
        //uint32_t currentDelayInt = (uint32_t) currentDelay;
        //Lfloat halfCurrentDelayP = (currentDelayP) * 0.5f;
        //x->prevDelay = currentDelay;
        if (currentDelayP > 10.0f)
 8013590:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013594:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359c:	dc5e      	bgt.n	801365c <tTString_tick+0x30c>


        tLagrangeDelay_tickIn(&x->delayP, tHighpass_tick(&x->dcBlockP, delayOutP));

*/
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP );
 801359e:	ed94 0a2a 	vldr	s0, [r4, #168]	; 0xa8
 80135a2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80135a6:	f7fb fe30 	bl	800f20a <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 80135aa:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80135ae:	f7fb fe2c 	bl	800f20a <tSVF_tick>

        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 80135b2:	edd4 7a29 	vldr	s15, [r4, #164]	; 0xa4
 80135b6:	ed94 7a33 	vldr	s14, [r4, #204]	; 0xcc
 80135ba:	ee27 7a00 	vmul.f32	s14, s14, s0
 80135be:	ee37 0a87 	vadd.f32	s0, s15, s14
        theOutput = tSVF_tick(&x->pickupFilter, prefilter);// + x->slideNoise;
 80135c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135c6:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 80135ca:	f7fb fe1e 	bl	800f20a <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 80135ce:	3701      	adds	r7, #1
 80135d0:	6863      	ldr	r3, [r4, #4]
 80135d2:	42bb      	cmp	r3, r7
 80135d4:	dd46      	ble.n	8013664 <tTString_tick+0x314>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80135d6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80135da:	f7fb fa77 	bl	800eacc <tExpSmooth_tick>
 80135de:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
        Lfloat currentDelay = x->baseDelay - x->allpassDelay - x->tensionAmount;
 80135e2:	edd4 7a1b 	vldr	s15, [r4, #108]	; 0x6c
 80135e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80135ea:	edd4 7a2f 	vldr	s15, [r4, #188]	; 0xbc
 80135ee:	ee70 8a67 	vsub.f32	s17, s0, s15
        if (currentDelay < 10.0f)
 80135f2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80135f6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80135fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fe:	d501      	bpl.n	8013604 <tTString_tick+0x2b4>
        	currentDelay = 10.0f;
 8013600:	eef0 8a67 	vmov.f32	s17, s15
        Lfloat maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8013604:	f104 0610 	add.w	r6, r4, #16
 8013608:	4630      	mov	r0, r6
 801360a:	f7fa fbc9 	bl	800dda0 <tLagrangeDelay_getMaxDelay>
 801360e:	eeb0 8a40 	vmov.f32	s16, s0
        if (currentDelay > maxDelay)
 8013612:	eef4 8ac0 	vcmpe.f32	s17, s0
 8013616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801361a:	dc01      	bgt.n	8013620 <tTString_tick+0x2d0>
 801361c:	eeb0 8a68 	vmov.f32	s16, s17
        Lfloat tempSlide = fabsf(x->baseDelay - x->prevDelay);
 8013620:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8013624:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 8013628:	ee30 0a67 	vsub.f32	s0, s0, s15
 801362c:	eeb0 0ac0 	vabs.f32	s0, s0
        if ((tempSlide > 0.01f) || (tempSlide < 0.00005f))
 8013630:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013674 <tTString_tick+0x324>
 8013634:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801363c:	f73f ae90 	bgt.w	8013360 <tTString_tick+0x10>
 8013640:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013678 <tTString_tick+0x328>
 8013644:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801364c:	f57f ae8a 	bpl.w	8013364 <tTString_tick+0x14>
        	tempSlide = 0.0f;
 8013650:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801366c <tTString_tick+0x31c>
 8013654:	e686      	b.n	8013364 <tTString_tick+0x14>
        Lfloat pickupPosFinal = pickupPos;
 8013656:	eeb0 ba67 	vmov.f32	s22, s15
 801365a:	e720      	b.n	801349e <tTString_tick+0x14e>
        	tLagrangeDelay_setDelay(&x->delayP, currentDelayP);
 801365c:	4628      	mov	r0, r5
 801365e:	f7fa fa6d 	bl	800db3c <tLagrangeDelay_setDelay>
 8013662:	e79c      	b.n	801359e <tTString_tick+0x24e>
    }
    return theOutput;

    //return x->output;
}
 8013664:	ecbd 8b0a 	vpop	{d8-d12}
 8013668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801366a:	bf00      	nop
 801366c:	00000000 	.word	0x00000000
 8013670:	42480000 	.word	0x42480000
 8013674:	3c23d70a 	.word	0x3c23d70a
 8013678:	3851b717 	.word	0x3851b717

0801367c <tTString_setFreq>:

void    tTString_setFreq               (tTString* const bw, Lfloat freq)
{
 801367c:	b510      	push	{r4, lr}
 801367e:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 8013682:	6804      	ldr	r4, [r0, #0]
    if (freq < x->actualLowestFreq)
 8013684:	ed94 8a28 	vldr	s16, [r4, #160]	; 0xa0
 8013688:	eeb4 8ac0 	vcmpe.f32	s16, s0
 801368c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013690:	dc01      	bgt.n	8013696 <tTString_setFreq+0x1a>
 8013692:	eeb0 8a40 	vmov.f32	s16, s0
        freq = x->actualLowestFreq;
    //freq = freq * x->invOversampling;
    x->freq = freq;
 8013696:	ed84 8a1d 	vstr	s16, [r4, #116]	; 0x74
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f);
 801369a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801369e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80136a2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80136a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80136ae:	f7fb f9ff 	bl	800eab0 <tExpSmooth_setDest>
    tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
 80136b2:	ed94 0a03 	vldr	s0, [r4, #12]
 80136b6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80136ba:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80136be:	f7fe fd27 	bl	8012110 <tCycle_setFreq>
}
 80136c2:	ecbd 8b02 	vpop	{d8}
 80136c6:	bd10      	pop	{r4, pc}

080136c8 <tTString_initToPool>:
{
 80136c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136ca:	ed2d 8b06 	vpush	{d8-d10}
 80136ce:	b083      	sub	sp, #12
 80136d0:	4606      	mov	r6, r0
 80136d2:	460d      	mov	r5, r1
 80136d4:	eef0 9a40 	vmov.f32	s19, s0
 80136d8:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 80136da:	6817      	ldr	r7, [r2, #0]
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80136dc:	4639      	mov	r1, r7
 80136de:	f44f 7086 	mov.w	r0, #268	; 0x10c
 80136e2:	f7fe fb4d 	bl	8011d80 <mpool_alloc>
 80136e6:	6030      	str	r0, [r6, #0]
 80136e8:	9001      	str	r0, [sp, #4]
    x->mempool = m;
 80136ea:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 80136ec:	9801      	ldr	r0, [sp, #4]
 80136ee:	6803      	ldr	r3, [r0, #0]
 80136f0:	685b      	ldr	r3, [r3, #4]
    x->oversampling = oversampling;
 80136f2:	6045      	str	r5, [r0, #4]
    x->invOversampling = 1.0f / oversampling;
 80136f4:	ee07 5a90 	vmov	s15, r5
 80136f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136fc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013700:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8013704:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8013708:	ee37 7a07 	vadd.f32	s14, s14, s14
 801370c:	ed80 7a03 	vstr	s14, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 8013710:	ed93 7a00 	vldr	s14, [r3]
 8013714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013718:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    x->invSampleRate = 1.f / x->sampleRate;
 801371c:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8013720:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    x->prevTension = 0.0f;
 8013724:	ed9f 8aad 	vldr	s16, [pc, #692]	; 80139dc <tTString_initToPool+0x314>
 8013728:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    x->tensionGain = 0.0f;
 801372c:	ed80 8a13 	vstr	s16, [r0, #76]	; 0x4c
    x->allpassDelay = 0.f;
 8013730:	ed80 8a1b 	vstr	s16, [r0, #108]	; 0x6c
    x->decayCoeff = 1.0f;
 8013734:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->muteCoeff = 1.0f;
 8013738:	edc0 8a22 	vstr	s17, [r0, #136]	; 0x88
    x->output = 0.0f;
 801373c:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8013740:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8013744:	edc0 8a24 	vstr	s17, [r0, #144]	; 0x90
    x->r = 0.0f;
 8013748:	ed80 8a23 	vstr	s16, [r0, #140]	; 0x8c
    x->invOnePlusr = 1.0f;
 801374c:	edc0 8a27 	vstr	s17, [r0, #156]	; 0x9c
    x->decayInSeconds = 10.0f;
 8013750:	4ba3      	ldr	r3, [pc, #652]	; (80139e0 <tTString_initToPool+0x318>)
 8013752:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    x->harmonic = 1.0f;
 8013756:	edc0 8a25 	vstr	s17, [r0, #148]	; 0x94
    x->prevDelay = 100.0f;
 801375a:	ed9f 9aa2 	vldr	s18, [pc, #648]	; 80139e4 <tTString_initToPool+0x31c>
 801375e:	ed80 9a15 	vstr	s18, [r0, #84]	; 0x54
    x->baseDelay = 100.0f;
 8013762:	ed80 9a0c 	vstr	s18, [r0, #48]	; 0x30
    x->ldev = 0.0f;
 8013766:	ed80 8a2d 	vstr	s16, [r0, #180]	; 0xb4
    x->tensionSum = 0.0f;
 801376a:	ed80 8a2e 	vstr	s16, [r0, #184]	; 0xb8
    x->tensionAmount = 0.0f;
 801376e:	ed80 8a2f 	vstr	s16, [r0, #188]	; 0xbc
    x->tempSum = 0.0f;
 8013772:	ed80 8a2c 	vstr	s16, [r0, #176]	; 0xb0
    x->prevSum = 0.0f;
 8013776:	ed80 8a30 	vstr	s16, [r0, #192]	; 0xc0
    x->pickupPos = 0.0f;
 801377a:	ed80 8a2b 	vstr	s16, [r0, #172]	; 0xac
    x->slideGain = 0.0f;
 801377e:	ed80 8a42 	vstr	s16, [r0, #264]	; 0x108
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8013782:	ee87 7aa9 	vdiv.f32	s14, s15, s19
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8013786:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801378a:	ee17 5a90 	vmov	r5, s15
 801378e:	4622      	mov	r2, r4
 8013790:	ee17 1a90 	vmov	r1, s15
 8013794:	eeb0 0a49 	vmov.f32	s0, s18
 8013798:	3010      	adds	r0, #16
 801379a:	f7fa fa2b 	bl	800dbf4 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 801379e:	9801      	ldr	r0, [sp, #4]
 80137a0:	edd0 9a0d 	vldr	s19, [r0, #52]	; 0x34
 80137a4:	3010      	adds	r0, #16
 80137a6:	f7fa fafb 	bl	800dda0 <tLagrangeDelay_getMaxDelay>
 80137aa:	9801      	ldr	r0, [sp, #4]
 80137ac:	eec9 7a80 	vdiv.f32	s15, s19, s0
 80137b0:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
    tLagrangeDelay_clear(&x->delay);
 80137b4:	3010      	adds	r0, #16
 80137b6:	f7fa f96d 	bl	800da94 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 80137ba:	4622      	mov	r2, r4
 80137bc:	4629      	mov	r1, r5
 80137be:	eeb0 0a49 	vmov.f32	s0, s18
 80137c2:	9801      	ldr	r0, [sp, #4]
 80137c4:	3014      	adds	r0, #20
 80137c6:	f7fa fa15 	bl	800dbf4 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 80137ca:	9801      	ldr	r0, [sp, #4]
 80137cc:	3014      	adds	r0, #20
 80137ce:	f7fa f961 	bl	800da94 <tLagrangeDelay_clear>
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80137d2:	4621      	mov	r1, r4
 80137d4:	9801      	ldr	r0, [sp, #4]
 80137d6:	3028      	adds	r0, #40	; 0x28
 80137d8:	f7fb fc12 	bl	800f000 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 80137dc:	9801      	ldr	r0, [sp, #4]
 80137de:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80137e2:	3028      	adds	r0, #40	; 0x28
 80137e4:	f7fb fc70 	bl	800f0c8 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 80137e8:	4621      	mov	r1, r4
 80137ea:	9801      	ldr	r0, [sp, #4]
 80137ec:	302c      	adds	r0, #44	; 0x2c
 80137ee:	f7fb fc07 	bl	800f000 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 80137f2:	9801      	ldr	r0, [sp, #4]
 80137f4:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 80137f8:	302c      	adds	r0, #44	; 0x2c
 80137fa:	f7fb fc65 	bl	800f0c8 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->tensionFilt, mp);
 80137fe:	4621      	mov	r1, r4
 8013800:	9801      	ldr	r0, [sp, #4]
 8013802:	3044      	adds	r0, #68	; 0x44
 8013804:	f7fb fbfc 	bl	800f000 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->tensionFilt, x->sampleRate);
 8013808:	9801      	ldr	r0, [sp, #4]
 801380a:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 801380e:	3044      	adds	r0, #68	; 0x44
 8013810:	f7fb fc5a 	bl	800f0c8 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8013814:	ed9f aa74 	vldr	s20, [pc, #464]	; 80139e8 <tTString_initToPool+0x320>
 8013818:	eddf 9a74 	vldr	s19, [pc, #464]	; 80139ec <tTString_initToPool+0x324>
 801381c:	eef0 0a4a 	vmov.f32	s1, s20
 8013820:	eeb0 0a69 	vmov.f32	s0, s19
 8013824:	9801      	ldr	r0, [sp, #4]
 8013826:	3028      	adds	r0, #40	; 0x28
 8013828:	f7fb fc36 	bl	800f098 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 801382c:	eef0 0a4a 	vmov.f32	s1, s20
 8013830:	eeb0 0a69 	vmov.f32	s0, s19
 8013834:	9801      	ldr	r0, [sp, #4]
 8013836:	302c      	adds	r0, #44	; 0x2c
 8013838:	f7fb fc2e 	bl	800f098 <tCookOnePole_setGainAndPole>
    tTString_setFreq(&x, 440.0f);
 801383c:	ed9f aa6c 	vldr	s20, [pc, #432]	; 80139f0 <tTString_initToPool+0x328>
 8013840:	eeb0 0a4a 	vmov.f32	s0, s20
 8013844:	a801      	add	r0, sp, #4
 8013846:	f7ff ff19 	bl	801367c <tTString_setFreq>
    tSlide_initToPool(&x->slide, 6000, 6000, mp);
 801384a:	eddf 9a6a 	vldr	s19, [pc, #424]	; 80139f4 <tTString_initToPool+0x32c>
 801384e:	4621      	mov	r1, r4
 8013850:	eef0 0a69 	vmov.f32	s1, s19
 8013854:	eeb0 0a69 	vmov.f32	s0, s19
 8013858:	9801      	ldr	r0, [sp, #4]
 801385a:	3050      	adds	r0, #80	; 0x50
 801385c:	f7fb f948 	bl	800eaf0 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.001f, mp);
 8013860:	4621      	mov	r1, r4
 8013862:	eddf 0a65 	vldr	s1, [pc, #404]	; 80139f8 <tTString_initToPool+0x330>
 8013866:	eeb0 0a48 	vmov.f32	s0, s16
 801386a:	9801      	ldr	r0, [sp, #4]
 801386c:	305c      	adds	r0, #92	; 0x5c
 801386e:	f7fb f8ad 	bl	800e9cc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 8013872:	eeb0 0a48 	vmov.f32	s0, s16
 8013876:	9801      	ldr	r0, [sp, #4]
 8013878:	305c      	adds	r0, #92	; 0x5c
 801387a:	f7fb f919 	bl	800eab0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.01f, mp);
 801387e:	4621      	mov	r1, r4
 8013880:	eddf 0a5e 	vldr	s1, [pc, #376]	; 80139fc <tTString_initToPool+0x334>
 8013884:	eeb0 0a49 	vmov.f32	s0, s18
 8013888:	9801      	ldr	r0, [sp, #4]
 801388a:	3060      	adds	r0, #96	; 0x60
 801388c:	f7fb f89e 	bl	800e9cc <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8013890:	eeb0 0a49 	vmov.f32	s0, s18
 8013894:	9801      	ldr	r0, [sp, #4]
 8013896:	3060      	adds	r0, #96	; 0x60
 8013898:	f7fb f90a 	bl	800eab0 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 801389c:	4622      	mov	r2, r4
 801389e:	2104      	movs	r1, #4
 80138a0:	9801      	ldr	r0, [sp, #4]
 80138a2:	3064      	adds	r0, #100	; 0x64
 80138a4:	f7fb f9c6 	bl	800ec34 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80138a8:	4622      	mov	r2, r4
 80138aa:	2104      	movs	r1, #4
 80138ac:	9801      	ldr	r0, [sp, #4]
 80138ae:	3068      	adds	r0, #104	; 0x68
 80138b0:	f7fb f9c0 	bl	800ec34 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80138b4:	9d01      	ldr	r5, [sp, #4]
 80138b6:	ed95 1a02 	vldr	s2, [r5, #8]
 80138ba:	eef0 0a49 	vmov.f32	s1, s18
 80138be:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8013a00 <tTString_initToPool+0x338>
 80138c2:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80138c6:	f7fb fa19 	bl	800ecfc <tThiranAllpassSOCascade_setCoeff>
 80138ca:	ed85 0a1b 	vstr	s0, [r5, #108]	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80138ce:	9d01      	ldr	r5, [sp, #4]
 80138d0:	ed95 1a02 	vldr	s2, [r5, #8]
 80138d4:	eef0 0a49 	vmov.f32	s1, s18
 80138d8:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8013a04 <tTString_initToPool+0x33c>
 80138dc:	f105 0068 	add.w	r0, r5, #104	; 0x68
 80138e0:	f7fb fa0c 	bl	800ecfc <tThiranAllpassSOCascade_setCoeff>
 80138e4:	ed85 0a1c 	vstr	s0, [r5, #112]	; 0x70
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 6000.0f, 0.8f, mp);
 80138e8:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8013a08 <tTString_initToPool+0x340>
 80138ec:	4622      	mov	r2, r4
 80138ee:	eef0 0a48 	vmov.f32	s1, s16
 80138f2:	eeb0 0a69 	vmov.f32	s0, s19
 80138f6:	2101      	movs	r1, #1
 80138f8:	9801      	ldr	r0, [sp, #4]
 80138fa:	3078      	adds	r0, #120	; 0x78
 80138fc:	f7fb fbf2 	bl	800f0e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8013900:	9801      	ldr	r0, [sp, #4]
 8013902:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8013906:	3078      	adds	r0, #120	; 0x78
 8013908:	f7fb fd60 	bl	800f3cc <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 801390c:	eeb0 0a69 	vmov.f32	s0, s19
 8013910:	9801      	ldr	r0, [sp, #4]
 8013912:	3078      	adds	r0, #120	; 0x78
 8013914:	f7fb fcbc 	bl	800f290 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8013918:	ed9f 9a3c 	vldr	s18, [pc, #240]	; 8013a0c <tTString_initToPool+0x344>
 801391c:	4622      	mov	r2, r4
 801391e:	eef0 0a48 	vmov.f32	s1, s16
 8013922:	eeb0 0a49 	vmov.f32	s0, s18
 8013926:	2100      	movs	r1, #0
 8013928:	9801      	ldr	r0, [sp, #4]
 801392a:	307c      	adds	r0, #124	; 0x7c
 801392c:	f7fb fbda 	bl	800f0e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8013930:	9801      	ldr	r0, [sp, #4]
 8013932:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8013936:	307c      	adds	r0, #124	; 0x7c
 8013938:	f7fb fd48 	bl	800f3cc <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 801393c:	eeb0 0a49 	vmov.f32	s0, s18
 8013940:	9801      	ldr	r0, [sp, #4]
 8013942:	307c      	adds	r0, #124	; 0x7c
 8013944:	f7fb fca4 	bl	800f290 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8013948:	9801      	ldr	r0, [sp, #4]
 801394a:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 801394e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013a10 <tTString_initToPool+0x348>
 8013952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013956:	edc0 7a20 	vstr	s15, [r0, #128]	; 0x80
    x->doTension = 0;
 801395a:	2500      	movs	r5, #0
 801395c:	f8c0 50c4 	str.w	r5, [r0, #196]	; 0xc4
    tCycle_initToPool(&x->tensionModOsc, mp);
 8013960:	4621      	mov	r1, r4
 8013962:	30c8      	adds	r0, #200	; 0xc8
 8013964:	f7fe fb84 	bl	8012070 <tCycle_initToPool>
    tCycle_initToPool(&x->pickupModOsc, mp);
 8013968:	4621      	mov	r1, r4
 801396a:	9801      	ldr	r0, [sp, #4]
 801396c:	30d0      	adds	r0, #208	; 0xd0
 801396e:	f7fe fb7f 	bl	8012070 <tCycle_initToPool>
    x->pickupModOscFreq = 440.0f;
 8013972:	9801      	ldr	r0, [sp, #4]
 8013974:	ed80 aa35 	vstr	s20, [r0, #212]	; 0xd4
    x->pickupModOscAmp = 1.0f;
 8013978:	edc0 8a36 	vstr	s17, [r0, #216]	; 0xd8
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 3500.0f, 0.8f, mp);
 801397c:	eddf 8a25 	vldr	s17, [pc, #148]	; 8013a14 <tTString_initToPool+0x34c>
 8013980:	4622      	mov	r2, r4
 8013982:	eef0 0a48 	vmov.f32	s1, s16
 8013986:	eeb0 0a68 	vmov.f32	s0, s17
 801398a:	2101      	movs	r1, #1
 801398c:	30dc      	adds	r0, #220	; 0xdc
 801398e:	f7fb fba9 	bl	800f0e4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 8013992:	9801      	ldr	r0, [sp, #4]
 8013994:	ed90 0a0d 	vldr	s0, [r0, #52]	; 0x34
 8013998:	30dc      	adds	r0, #220	; 0xdc
 801399a:	f7fb fd17 	bl	800f3cc <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3500.0f);
 801399e:	eeb0 0a68 	vmov.f32	s0, s17
 80139a2:	9801      	ldr	r0, [sp, #4]
 80139a4:	30dc      	adds	r0, #220	; 0xdc
 80139a6:	f7fb fc73 	bl	800f290 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, WhiteNoise, mp);
 80139aa:	4622      	mov	r2, r4
 80139ac:	4629      	mov	r1, r5
 80139ae:	9801      	ldr	r0, [sp, #4]
 80139b0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80139b4:	f7fe fefe 	bl	80127b4 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlock, 5.0f, mp);
 80139b8:	4621      	mov	r1, r4
 80139ba:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80139be:	9801      	ldr	r0, [sp, #4]
 80139c0:	3020      	adds	r0, #32
 80139c2:	f7fb fd0d 	bl	800f3e0 <tHighpass_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 5.0f, mp);
 80139c6:	4621      	mov	r1, r4
 80139c8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80139cc:	9801      	ldr	r0, [sp, #4]
 80139ce:	3024      	adds	r0, #36	; 0x24
 80139d0:	f7fb fd06 	bl	800f3e0 <tHighpass_initToPool>
}
 80139d4:	b003      	add	sp, #12
 80139d6:	ecbd 8b06 	vpop	{d8-d10}
 80139da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139dc:	00000000 	.word	0x00000000
 80139e0:	41200000 	.word	0x41200000
 80139e4:	42c80000 	.word	0x42c80000
 80139e8:	bab78034 	.word	0xbab78034
 80139ec:	3f7fbe77 	.word	0x3f7fbe77
 80139f0:	43dc0000 	.word	0x43dc0000
 80139f4:	45bb8000 	.word	0x45bb8000
 80139f8:	3a83126f 	.word	0x3a83126f
 80139fc:	3c23d70a 	.word	0x3c23d70a
 8013a00:	38d1b717 	.word	0x38d1b717
 8013a04:	37d1b717 	.word	0x37d1b717
 8013a08:	3f4ccccd 	.word	0x3f4ccccd
 8013a0c:	44e10000 	.word	0x44e10000
 8013a10:	40c90fdb 	.word	0x40c90fdb
 8013a14:	455ac000 	.word	0x455ac000

08013a18 <tTString_setDecay>:

void    tTString_setDecay               (tTString* const bw, Lfloat decay)
{
 8013a18:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 8013a1a:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = (decay * 20.0f);
 8013a1c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8013a20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a24:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
	 if (x->decayInSeconds > 19.0f)
 8013a28:	eef3 7a03 	vmov.f32	s15, #51	; 0x41980000  19.0
 8013a2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a34:	dd04      	ble.n	8013a40 <tTString_setDecay+0x28>
	 {
		 x->decayCoeff = 1.0f;
 8013a36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013a3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		 decay = expf(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.9f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 8013a3e:	bd10      	pop	{r4, pc}
		 decay = expf(-1.0f / (x->freq * x->decayInSeconds));
 8013a40:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 8013a44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a48:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013a4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013a50:	f002 f9b4 	bl	8015dbc <expf>
 8013a54:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.9f, decay, 1.0f);
 8013a58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013a5c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013a6c <tTString_setDecay+0x54>
 8013a60:	f7fd fe10 	bl	8011684 <LEAF_clip>
		 x->decayCoeff = decay;
 8013a64:	ed84 0a21 	vstr	s0, [r4, #132]	; 0x84
}
 8013a68:	e7e9      	b.n	8013a3e <tTString_setDecay+0x26>
 8013a6a:	bf00      	nop
 8013a6c:	3f666666 	.word	0x3f666666

08013a70 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8013a70:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 8013a72:	ed83 0a2b 	vstr	s0, [r3, #172]	; 0xac
}
 8013a76:	4770      	bx	lr

08013a78 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8013a78:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp * 2000.0f;
 8013a7a:	eddf 7a03 	vldr	s15, [pc, #12]	; 8013a88 <tTString_setPickupModAmp+0x10>
 8013a7e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a82:	ed83 0a36 	vstr	s0, [r3, #216]	; 0xd8
}
 8013a86:	4770      	bx	lr
 8013a88:	44fa0000 	.word	0x44fa0000

08013a8c <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
 8013a8c:	b508      	push	{r3, lr}
	_tTString* x = *bw;
 8013a8e:	6800      	ldr	r0, [r0, #0]
	x->pickupModOscFreq = freq;
 8013a90:	ed80 0a35 	vstr	s0, [r0, #212]	; 0xd4
	tCycle_setFreq(&x->pickupModOsc, freq);
 8013a94:	30d0      	adds	r0, #208	; 0xd0
 8013a96:	f7fe fb3b 	bl	8012110 <tCycle_setFreq>
}
 8013a9a:	bd08      	pop	{r3, pc}

08013a9c <tTString_mute>:



void    tTString_mute              (tTString* const bw)
{
	 _tTString* x = *bw;
 8013a9c:	6803      	ldr	r3, [r0, #0]
	 x->muteCoeff = 0.8f;
 8013a9e:	4a02      	ldr	r2, [pc, #8]	; (8013aa8 <tTString_mute+0xc>)
 8013aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop
 8013aa8:	3f4ccccd 	.word	0x3f4ccccd

08013aac <tTString_setFilter>:

void    tTString_setFilter              (tTString* const bw, Lfloat filter)
{
 8013aac:	b510      	push	{r4, lr}
 8013aae:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 8013ab2:	6804      	ldr	r4, [r0, #0]

	 filter = ((filter * 18000.0f) + 20.0f)* x->twoPiTimesInvSampleRate;
 8013ab4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013aec <tTString_setFilter+0x40>
 8013ab8:	ee20 8a27 	vmul.f32	s16, s0, s15
 8013abc:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8013ac0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013ac4:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8013ac8:	ee28 8a27 	vmul.f32	s16, s16, s15
	tCookOnePole_setPole(&x->reflFilt,filter);
 8013acc:	eeb0 0a48 	vmov.f32	s0, s16
 8013ad0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013ad4:	f7fb fab6 	bl	800f044 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,filter);
 8013ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8013adc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8013ae0:	f7fb fab0 	bl	800f044 <tCookOnePole_setPole>

}
 8013ae4:	ecbd 8b02 	vpop	{d8}
 8013ae8:	bd10      	pop	{r4, pc}
 8013aea:	bf00      	nop
 8013aec:	468ca000 	.word	0x468ca000

08013af0 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 8013af0:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 8013af2:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8013af6:	4770      	bx	lr

08013af8 <tTString_setPhantomHarmonicsGain>:

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8013af8:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 8013afa:	ed83 0a33 	vstr	s0, [r3, #204]	; 0xcc
}
 8013afe:	4770      	bx	lr

08013b00 <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8013b00:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 8013b02:	ed83 0a42 	vstr	s0, [r3, #264]	; 0x108
}
 8013b06:	4770      	bx	lr

08013b08 <tTString_setTensionSpeed>:

void   tTString_setTensionSpeed                  (tTString* const bw, Lfloat tensionSpeed)
{
 8013b08:	b508      	push	{r3, lr}
	_tTString* x = *bw;
 8013b0a:	6800      	ldr	r0, [r0, #0]
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00016f * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
 8013b0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b10:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013b14:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013b2c <tTString_setTensionSpeed+0x24>
 8013b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b1c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8013b30 <tTString_setTensionSpeed+0x28>
 8013b20:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013b24:	305c      	adds	r0, #92	; 0x5c
 8013b26:	f7fa ff91 	bl	800ea4c <tExpSmooth_setFactor>
}
 8013b2a:	bd08      	pop	{r3, pc}
 8013b2c:	3927c5ac 	.word	0x3927c5ac
 8013b30:	3727c5ac 	.word	0x3727c5ac

08013b34 <tTString_setRippleDepth>:


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 8013b34:	b510      	push	{r4, lr}
 8013b36:	ed2d 8b02 	vpush	{d8}
 8013b3a:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8013b3e:	6804      	ldr	r4, [r0, #0]
	x->r = expf(-1.0f / (x->freq * (x->decayInSeconds * 0.005f))) * depth;
 8013b40:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 8013b44:	ed94 7a26 	vldr	s14, [r4, #152]	; 0x98
 8013b48:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8013b80 <tTString_setRippleDepth+0x4c>
 8013b4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013b54:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013b58:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013b5c:	f002 f92e 	bl	8015dbc <expf>
 8013b60:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b64:	ed84 0a23 	vstr	s0, [r4, #140]	; 0x8c

	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8013b68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013b70:	ee87 7a80 	vdiv.f32	s14, s15, s0
 8013b74:	ed84 7a27 	vstr	s14, [r4, #156]	; 0x9c
}
 8013b78:	ecbd 8b02 	vpop	{d8}
 8013b7c:	bd10      	pop	{r4, pc}
 8013b7e:	bf00      	nop
 8013b80:	3ba3d70a 	.word	0x3ba3d70a

08013b84 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
 8013b84:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 8013b86:	ed83 0a25 	vstr	s0, [r3, #148]	; 0x94
	x->rippleRate = 1.0f / harmonic;
 8013b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013b8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013b92:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
}
 8013b96:	4770      	bx	lr

08013b98 <tTString_pluck>:


void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8013b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9a:	ed2d 8b04 	vpush	{d8-d9}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	eeb0 9a40 	vmov.f32	s18, s0
 8013ba4:	eef0 8a60 	vmov.f32	s17, s1
    _tTString* x = *bw;
 8013ba8:	6807      	ldr	r7, [r0, #0]
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8013baa:	eeb0 0a60 	vmov.f32	s0, s1
 8013bae:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8013bb2:	f7fa ff81 	bl	800eab8 <tExpSmooth_setVal>
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013bb6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8013bba:	f7fa ff87 	bl	800eacc <tExpSmooth_tick>
 8013bbe:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
    Lfloat currentDelay = x->baseDelay - x->allpassDelay;
 8013bc2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8013bc6:	ee70 7a67 	vsub.f32	s15, s0, s15
    x->muteCoeff = 1.0f;
 8013bca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013bce:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8013bd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013bde:	ee17 5a90 	vmov	r5, s15
    volatile Lfloat pluckPoint = 70.0f * position;//position * halfCurrentDelay;
 8013be2:	eddf 7a60 	vldr	s15, [pc, #384]	; 8013d64 <tTString_pluck+0x1cc>
 8013be6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013bea:	edcd 7a03 	vstr	s15, [sp, #12]
    pluckPoint = LEAF_clip(1.0f, pluckPoint, halfCurrentDelay-1.0f);
 8013bee:	eddd 0a03 	vldr	s1, [sp, #12]
 8013bf2:	ee07 5a90 	vmov	s15, r5
 8013bf6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8013bfa:	ee38 1a40 	vsub.f32	s2, s16, s0
 8013bfe:	f7fd fd41 	bl	8011684 <LEAF_clip>
 8013c02:	ed8d 0a03 	vstr	s0, [sp, #12]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8013c06:	eddd 9a03 	vldr	s19, [sp, #12]
 8013c0a:	eefc 9ae9 	vcvt.u32.f32	s19, s19
    volatile Lfloat remainder = halfCurrentDelay-pluckPoint;
 8013c0e:	eddd 7a03 	vldr	s15, [sp, #12]
 8013c12:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013c16:	ed8d 8a02 	vstr	s16, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 8013c1a:	f107 0610 	add.w	r6, r7, #16
 8013c1e:	4630      	mov	r0, r6
 8013c20:	f7f9 ff38 	bl	800da94 <tLagrangeDelay_clear>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8013c24:	2400      	movs	r4, #0
 8013c26:	e01f      	b.n	8013c68 <tTString_pluck+0xd0>
        {
            val = amplitude * ((Lfloat)i/(Lfloat)pluckPointInt);
        }
        else
        {
            val = amplitude * (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)/(Lfloat)remainder));
 8013c28:	ee07 4a90 	vmov	s15, r4
 8013c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c30:	eeb8 7a69 	vcvt.f32.u32	s14, s19
 8013c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c38:	eddd 6a02 	vldr	s13, [sp, #8]
 8013c3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013c40:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013c44:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013c48:	ee28 8a28 	vmul.f32	s16, s16, s17
        }
        
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8013c4c:	4621      	mov	r1, r4
 8013c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8013c52:	4630      	mov	r0, r6
 8013c54:	f7fa f888 	bl	800dd68 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, halfCurrentDelay*2-i);
 8013c58:	ebc4 0145 	rsb	r1, r4, r5, lsl #1
 8013c5c:	eeb1 0a48 	vneg.f32	s0, s16
 8013c60:	4630      	mov	r0, r6
 8013c62:	f7fa f881 	bl	800dd68 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8013c66:	3401      	adds	r4, #1
 8013c68:	42ac      	cmp	r4, r5
 8013c6a:	d20e      	bcs.n	8013c8a <tTString_pluck+0xf2>
        if (i <= pluckPointInt)
 8013c6c:	ee19 3a90 	vmov	r3, s19
 8013c70:	429c      	cmp	r4, r3
 8013c72:	d8d9      	bhi.n	8013c28 <tTString_pluck+0x90>
            val = amplitude * ((Lfloat)i/(Lfloat)pluckPointInt);
 8013c74:	ee07 4a90 	vmov	s15, r4
 8013c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c7c:	eeb8 7a69 	vcvt.f32.u32	s14, s19
 8013c80:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8013c84:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013c88:	e7e0      	b.n	8013c4c <tTString_pluck+0xb4>

		tLagrangeDelay_tapIn(&x->delay, val, i);
		tLagrangeDelay_tapIn(&x->delay, val, halfCurrentDelay*2-i);
		*/
    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8013c8a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8013c8e:	f7fb f925 	bl	800eedc <tThiranAllpassSOCascade_clear>



    Lfloat currentDelayP = x->baseDelay - x->allpassDelayP;
 8013c92:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8013c96:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8013c9a:	ee77 7ac7 	vsub.f32	s15, s15, s14

    uint32_t halfCurrentDelayP = currentDelayP * 0.5f;
 8013c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013caa:	ee17 5a90 	vmov	r5, s15
    volatile Lfloat pluckPointP = position * halfCurrentDelayP;
 8013cae:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8013cb2:	ee28 9a09 	vmul.f32	s18, s16, s18
 8013cb6:	ed8d 9a01 	vstr	s18, [sp, #4]
    pluckPointP = LEAF_clip(1.0f, pluckPoint, halfCurrentDelayP-1.0f);
 8013cba:	eddd 0a03 	vldr	s1, [sp, #12]
 8013cbe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013cc2:	ee38 1a40 	vsub.f32	s2, s16, s0
 8013cc6:	f7fd fcdd 	bl	8011684 <LEAF_clip>
 8013cca:	ed8d 0a01 	vstr	s0, [sp, #4]
    uint32_t pluckPointIntP = (uint32_t) pluckPointP;
 8013cce:	ed9d 9a01 	vldr	s18, [sp, #4]
 8013cd2:	eebc 9ac9 	vcvt.u32.f32	s18, s18
    volatile Lfloat remainderP = halfCurrentDelayP-pluckPointP;
 8013cd6:	eddd 7a01 	vldr	s15, [sp, #4]
 8013cda:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013cde:	ed8d 8a00 	vstr	s16, [sp]
    tLagrangeDelay_clear(&x->delayP);
 8013ce2:	f107 0614 	add.w	r6, r7, #20
 8013ce6:	4630      	mov	r0, r6
 8013ce8:	f7f9 fed4 	bl	800da94 <tLagrangeDelay_clear>
    for (uint32_t i = 0; i < halfCurrentDelayP; i++)
 8013cec:	2400      	movs	r4, #0
 8013cee:	e01f      	b.n	8013d30 <tTString_pluck+0x198>
        {
            val = amplitude * ((Lfloat)i/(Lfloat)pluckPointIntP);
        }
        else
        {
            val = amplitude * (1.0f - (((Lfloat)i-(Lfloat)pluckPointIntP)/(Lfloat)remainderP));
 8013cf0:	ee07 4a90 	vmov	s15, r4
 8013cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cf8:	eeb8 7a49 	vcvt.f32.u32	s14, s18
 8013cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d00:	eddd 6a00 	vldr	s13, [sp]
 8013d04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013d08:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013d0c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013d10:	ee28 8a28 	vmul.f32	s16, s16, s17
		}
		else
		{
			val = -amplitude * (1.0f - position);
		}*/
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8013d14:	4621      	mov	r1, r4
 8013d16:	eeb0 0a48 	vmov.f32	s0, s16
 8013d1a:	4630      	mov	r0, r6
 8013d1c:	f7fa f824 	bl	800dd68 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, halfCurrentDelayP*2-i);
 8013d20:	ebc4 0145 	rsb	r1, r4, r5, lsl #1
 8013d24:	eeb1 0a48 	vneg.f32	s0, s16
 8013d28:	4630      	mov	r0, r6
 8013d2a:	f7fa f81d 	bl	800dd68 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelayP; i++)
 8013d2e:	3401      	adds	r4, #1
 8013d30:	42ac      	cmp	r4, r5
 8013d32:	d20e      	bcs.n	8013d52 <tTString_pluck+0x1ba>
        if (i <= pluckPointIntP)
 8013d34:	ee19 3a10 	vmov	r3, s18
 8013d38:	429c      	cmp	r4, r3
 8013d3a:	d8d9      	bhi.n	8013cf0 <tTString_pluck+0x158>
            val = amplitude * ((Lfloat)i/(Lfloat)pluckPointIntP);
 8013d3c:	ee07 4a90 	vmov	s15, r4
 8013d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d44:	eeb8 7a49 	vcvt.f32.u32	s14, s18
 8013d48:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8013d4c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013d50:	e7e0      	b.n	8013d14 <tTString_pluck+0x17c>
    }
    tThiranAllpassSOCascade_clear(&x->allpassP);
 8013d52:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8013d56:	f7fb f8c1 	bl	800eedc <tThiranAllpassSOCascade_clear>
}
 8013d5a:	b005      	add	sp, #20
 8013d5c:	ecbd 8b04 	vpop	{d8-d9}
 8013d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d62:	bf00      	nop
 8013d64:	428c0000 	.word	0x428c0000

08013d68 <tTString_setHarmonicity>:

void    tTString_setWaveLength         (tTString* const, Lfloat waveLength); // in samples
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8013d68:	b510      	push	{r4, lr}
 8013d6a:	ed2d 8b02 	vpush	{d8}
 8013d6e:	eef0 8a40 	vmov.f32	s17, s0
 8013d72:	eeb0 8a60 	vmov.f32	s16, s1
    _tTString* x = *bw;
 8013d76:	6804      	ldr	r4, [r0, #0]
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8013d78:	edd4 0a02 	vldr	s1, [r4, #8]
 8013d7c:	edd4 7a01 	vldr	s15, [r4, #4]
 8013d80:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8013d84:	ee60 0a88 	vmul.f32	s1, s1, s16
 8013d88:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013d8c:	f7fa ffb6 	bl	800ecfc <tThiranAllpassSOCascade_setCoeff>
 8013d90:	ed84 0a1b 	vstr	s0, [r4, #108]	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8013d94:	edd4 0a02 	vldr	s1, [r4, #8]
 8013d98:	edd4 7a01 	vldr	s15, [r4, #4]
 8013d9c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8013da0:	ee60 0a88 	vmul.f32	s1, s1, s16
 8013da4:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8013da8:	ee28 0a80 	vmul.f32	s0, s17, s0
 8013dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013db0:	f7fa ffa4 	bl	800ecfc <tThiranAllpassSOCascade_setCoeff>
 8013db4:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
}
 8013db8:	ecbd 8b02 	vpop	{d8}
 8013dbc:	bd10      	pop	{r4, pc}
	...

08013dc0 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	ed2d 8b0a 	vpush	{d8-d12}
	_glottis* glot = *glo;
 8013dc6:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8013dc8:	edd4 7a02 	vldr	s15, [r4, #8]
 8013dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013dd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013dd4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8013dd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ddc:	edc4 7a03 	vstr	s15, [r4, #12]
    glot->waveform_length = 1.0f / glot->freq;
 8013de0:	ed94 6a01 	vldr	s12, [r4, #4]
 8013de4:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8013de8:	edc4 6a04 	vstr	s13, [r4, #16]

    Rd = glot->Rd;
    if(Rd < 0.5f) Rd = 0.5f;
 8013dec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df8:	d501      	bpl.n	8013dfe <glottis_setup_waveform+0x3e>
 8013dfa:	eef0 7a47 	vmov.f32	s15, s14
    if(Rd > 2.7f) Rd = 2.7f;
 8013dfe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8013f50 <glottis_setup_waveform+0x190>
 8013e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e0a:	dd01      	ble.n	8013e10 <glottis_setup_waveform+0x50>
 8013e0c:	eef0 7a47 	vmov.f32	s15, s14


    Ra = -0.01f + 0.048f*Rd;
 8013e10:	eddf 6a50 	vldr	s13, [pc, #320]	; 8013f54 <glottis_setup_waveform+0x194>
 8013e14:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013e18:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8013f58 <glottis_setup_waveform+0x198>
 8013e1c:	ee76 6ac7 	vsub.f32	s13, s13, s14
    Rk = 0.224f + 0.118f*Rd;
 8013e20:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8013f5c <glottis_setup_waveform+0x19c>
 8013e24:	ee27 8a88 	vmul.f32	s16, s15, s16
 8013e28:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013f60 <glottis_setup_waveform+0x1a0>
 8013e2c:	ee38 8a07 	vadd.f32	s16, s16, s14
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8013e30:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 8013e34:	ee28 6a06 	vmul.f32	s12, s16, s12
 8013e38:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013f64 <glottis_setup_waveform+0x1a4>
 8013e3c:	ee28 7a07 	vmul.f32	s14, s16, s14
 8013e40:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013e44:	ee37 7a29 	vadd.f32	s14, s14, s19
 8013e48:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013e4c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8013f68 <glottis_setup_waveform+0x1a8>
 8013e50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013e54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e5c:	ee86 7a27 	vdiv.f32	s14, s12, s15


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8013e60:	ee37 7a07 	vadd.f32	s14, s14, s14
 8013e64:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013e68:	eec9 8a07 	vdiv.f32	s17, s18, s14
    Te = Tp + Tp*Rk;
 8013e6c:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013e70:	ee38 8a28 	vadd.f32	s16, s16, s17



    epsilon = (Lfloat)1.0f / Ta;
 8013e74:	eec9 aa26 	vdiv.f32	s21, s18, s13
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8013e78:	ee79 ba48 	vsub.f32	s23, s18, s16
 8013e7c:	ee2a 0aeb 	vnmul.f32	s0, s21, s23
 8013e80:	f7fd fb6c 	bl	801155c <fasterexpf>
 8013e84:	eeb0 aa40 	vmov.f32	s20, s0
    delta = 1.0f - shift;
 8013e88:	ee39 ba40 	vsub.f32	s22, s18, s0



    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8013e8c:	eec9 7a2a 	vdiv.f32	s15, s18, s21
 8013e90:	ee30 9a49 	vsub.f32	s18, s0, s18
 8013e94:	ee67 7a89 	vmul.f32	s15, s15, s18
 8013e98:	ee6b ba80 	vmul.f32	s23, s23, s0
 8013e9c:	ee77 7aab 	vadd.f32	s15, s15, s23
    rhs_integral = rhs_integral / delta;
 8013ea0:	eec7 6a8b 	vdiv.f32	s13, s15, s22
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8013ea4:	ee38 7a68 	vsub.f32	s14, s16, s17
 8013ea8:	ee27 7a69 	vnmul.f32	s14, s14, s19
 8013eac:	ee37 7a26 	vadd.f32	s14, s14, s13
    upper_integral = -lower_integral;
 8013eb0:	eeb1 9a47 	vneg.f32	s18, s14


    omega = M_PI / Tp;
 8013eb4:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
 8013eb8:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8013f40 <glottis_setup_waveform+0x180>
 8013ebc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8013ec0:	eef7 bbc7 	vcvt.f32.f64	s23, d7
    s = fast_sinf2(omega * Te);
 8013ec4:	ee28 0a2b 	vmul.f32	s0, s16, s23
 8013ec8:	f7fd fb66 	bl	8011598 <fast_sinf2>
 8013ecc:	eeb0 ca40 	vmov.f32	s24, s0

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8013ed0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8013ed4:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8013f48 <glottis_setup_waveform+0x188>
 8013ed8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013edc:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
 8013ee0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ee4:	ee38 6aa8 	vadd.f32	s12, s17, s17
 8013ee8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8013eec:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = logf(y);
 8013ef0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013ef4:	f001 ffd6 	bl	8015ea4 <logf>
    alpha = z / (Tp/2.0f - Te);
 8013ef8:	ee68 7aa9 	vmul.f32	s15, s17, s19
 8013efc:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8013f00:	eec0 8a27 	vdiv.f32	s17, s0, s15
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
 8013f04:	ee28 0a28 	vmul.f32	s0, s16, s17
 8013f08:	f7fd fb28 	bl	801155c <fasterexpf>
 8013f0c:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013f10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f14:	eec7 7a00 	vdiv.f32	s15, s14, s0



    glot->alpha = alpha;
 8013f18:	edc4 8a06 	vstr	s17, [r4, #24]
    glot->E0 = E0;
 8013f1c:	edc4 7a07 	vstr	s15, [r4, #28]
    glot->epsilon = epsilon;
 8013f20:	edc4 aa08 	vstr	s21, [r4, #32]
    glot->shift = shift;
 8013f24:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    glot->delta = delta;
 8013f28:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    glot->Te = Te;
 8013f2c:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 8013f30:	edc4 ba0c 	vstr	s23, [r4, #48]	; 0x30
}
 8013f34:	ecbd 8b0a 	vpop	{d8-d12}
 8013f38:	bd10      	pop	{r4, pc}
 8013f3a:	bf00      	nop
 8013f3c:	f3af 8000 	nop.w
 8013f40:	54442d18 	.word	0x54442d18
 8013f44:	400921fb 	.word	0x400921fb
 8013f48:	54442d18 	.word	0x54442d18
 8013f4c:	c00921fb 	.word	0xc00921fb
 8013f50:	402ccccd 	.word	0x402ccccd
 8013f54:	3d449ba6 	.word	0x3d449ba6
 8013f58:	3c23d70a 	.word	0x3c23d70a
 8013f5c:	3df1a9fc 	.word	0x3df1a9fc
 8013f60:	3e656042 	.word	0x3e656042
 8013f64:	3f99999a 	.word	0x3f99999a
 8013f68:	3de147ae 	.word	0x3de147ae

08013f6c <glottis_initToPool>:
{
	glottis_initToPool(glo, &leaf->mempool);
}

void glottis_initToPool(glottis* const glo, tMempool* const mp)
{
 8013f6c:	b530      	push	{r4, r5, lr}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	4605      	mov	r5, r0

	_tMempool* m = *mp;
 8013f72:	680c      	ldr	r4, [r1, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8013f74:	4621      	mov	r1, r4
 8013f76:	2038      	movs	r0, #56	; 0x38
 8013f78:	f7fd ff7a 	bl	8011e70 <mpool_calloc>
 8013f7c:	6028      	str	r0, [r5, #0]
 8013f7e:	9001      	str	r0, [sp, #4]
	glot->mempool = m;
 8013f80:	6004      	str	r4, [r0, #0]
	LEAF* leaf = glot->mempool->leaf;
 8013f82:	9b01      	ldr	r3, [sp, #4]
 8013f84:	681a      	ldr	r2, [r3, #0]
 8013f86:	6852      	ldr	r2, [r2, #4]
	glot->mempool = m;
 8013f88:	601c      	str	r4, [r3, #0]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8013f8a:	9b01      	ldr	r3, [sp, #4]
 8013f8c:	4909      	ldr	r1, [pc, #36]	; (8013fb4 <glottis_initToPool+0x48>)
 8013f8e:	6059      	str	r1, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8013f90:	4909      	ldr	r1, [pc, #36]	; (8013fb8 <glottis_initToPool+0x4c>)
 8013f92:	6099      	str	r1, [r3, #8]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8013f94:	ed92 7a00 	vldr	s14, [r2]
 8013f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fa0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    glot->time_in_waveform = 0;
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	615a      	str	r2, [r3, #20]
    glottis_setup_waveform(&glot);
 8013fa8:	a801      	add	r0, sp, #4
 8013faa:	f7ff ff09 	bl	8013dc0 <glottis_setup_waveform>
}
 8013fae:	b003      	add	sp, #12
 8013fb0:	bd30      	pop	{r4, r5, pc}
 8013fb2:	bf00      	nop
 8013fb4:	430c0000 	.word	0x430c0000
 8013fb8:	3f19999a 	.word	0x3f19999a

08013fbc <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 8013fbc:	b510      	push	{r4, lr}
 8013fbe:	ed2d 8b04 	vpush	{d8-d9}
 8013fc2:	b082      	sub	sp, #8
	_glottis* glot = *glo;
 8013fc4:	6803      	ldr	r3, [r0, #0]
 8013fc6:	9301      	str	r3, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	6854      	ldr	r4, [r2, #4]
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 8013fcc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8013fd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8013fd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013fd8:	edc3 7a05 	vstr	s15, [r3, #20]

    if(glot->time_in_waveform > glot->waveform_length) {
 8013fdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8013fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe8:	dc3d      	bgt.n	8014066 <glottis_compute+0xaa>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform / glot->waveform_length);
 8013fea:	9b01      	ldr	r3, [sp, #4]
 8013fec:	ed93 7a05 	vldr	s14, [r3, #20]
 8013ff0:	edd3 7a04 	vldr	s15, [r3, #16]
 8013ff4:	ee87 8a27 	vdiv.f32	s16, s14, s15

    if(t > glot->Te) {
 8013ff8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8013ffc:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014004:	d537      	bpl.n	8014076 <glottis_compute+0xba>
        out = (-fasterexpf(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 8014006:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
 801400a:	ed93 0a08 	vldr	s0, [r3, #32]
 801400e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014012:	ee20 0a48 	vnmul.f32	s0, s0, s16
 8014016:	f7fd faa1 	bl	801155c <fasterexpf>
 801401a:	ee78 8ac0 	vsub.f32	s17, s17, s0
 801401e:	9b01      	ldr	r3, [sp, #4]
 8014020:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014024:	ee88 9aa7 	vdiv.f32	s18, s17, s15
    } else {
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8014028:	6923      	ldr	r3, [r4, #16]
 801402a:	4798      	blx	r3
 801402c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014030:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014034:	ee70 8a48 	vsub.f32	s17, s0, s16

    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8014038:	9b01      	ldr	r3, [sp, #4]
 801403a:	ed93 0a02 	vldr	s0, [r3, #8]
 801403e:	f7fd fa61 	bl	8011504 <fastsqrtf>
 8014042:	ee38 0a40 	vsub.f32	s0, s16, s0
 8014046:	eddf 7a16 	vldr	s15, [pc, #88]	; 80140a0 <glottis_compute+0xe4>
 801404a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801404e:	ee20 0a28 	vmul.f32	s0, s0, s17

    aspiration *= 0.2f;
 8014052:	eddf 7a14 	vldr	s15, [pc, #80]	; 80140a4 <glottis_compute+0xe8>
 8014056:	ee20 0a27 	vmul.f32	s0, s0, s15

    out += aspiration;

    return out;
}
 801405a:	ee39 0a00 	vadd.f32	s0, s18, s0
 801405e:	b002      	add	sp, #8
 8014060:	ecbd 8b04 	vpop	{d8-d9}
 8014064:	bd10      	pop	{r4, pc}
        glot->time_in_waveform -= glot->waveform_length;
 8014066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801406a:	edc3 7a05 	vstr	s15, [r3, #20]
        glottis_setup_waveform(&glot);
 801406e:	a801      	add	r0, sp, #4
 8014070:	f7ff fea6 	bl	8013dc0 <glottis_setup_waveform>
 8014074:	e7b9      	b.n	8013fea <glottis_compute+0x2e>
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
 8014076:	ed93 9a07 	vldr	s18, [r3, #28]
 801407a:	ed93 0a06 	vldr	s0, [r3, #24]
 801407e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014082:	f7fd fa6b 	bl	801155c <fasterexpf>
 8014086:	ee29 9a00 	vmul.f32	s18, s18, s0
 801408a:	9b01      	ldr	r3, [sp, #4]
 801408c:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8014090:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014094:	f7fd fa80 	bl	8011598 <fast_sinf2>
 8014098:	ee29 9a00 	vmul.f32	s18, s18, s0
 801409c:	e7c4      	b.n	8014028 <glottis_compute+0x6c>
 801409e:	bf00      	nop
 80140a0:	3e99999a 	.word	0x3e99999a
 80140a4:	3e4ccccd 	.word	0x3e4ccccd

080140a8 <tract_calculate_reflections>:
}


void tract_calculate_reflections(tract* const t)
{
	_tract* tr = *t;
 80140a8:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 80140aa:	2200      	movs	r2, #0
 80140ac:	e00c      	b.n	80140c8 <tract_calculate_reflections+0x20>
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
 80140ae:	68d9      	ldr	r1, [r3, #12]
 80140b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140b4:	edd1 7a00 	vldr	s15, [r1]
 80140b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80140ba:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80140be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80140c2:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80140c6:	3201      	adds	r2, #1
 80140c8:	6859      	ldr	r1, [r3, #4]
 80140ca:	4291      	cmp	r1, r2
 80140cc:	dcef      	bgt.n	80140ae <tract_calculate_reflections+0x6>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 80140ce:	2201      	movs	r2, #1
 80140d0:	e011      	b.n	80140f6 <tract_calculate_reflections+0x4e>
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
        } else {
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80140d2:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80140d6:	4410      	add	r0, r2
 80140d8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80140dc:	ed91 7a00 	vldr	s14, [r1]
 80140e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80140e4:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 80140e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80140ea:	4461      	add	r1, ip
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80140ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 80140f0:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 80140f4:	3201      	adds	r2, #1
 80140f6:	6859      	ldr	r1, [r3, #4]
 80140f8:	4291      	cmp	r1, r2
 80140fa:	dd18      	ble.n	801412e <tract_calculate_reflections+0x86>
        tr->reflection[i] = tr->new_reflection[i];
 80140fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80140fe:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8014102:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014108:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801410c:	6800      	ldr	r0, [r0, #0]
 801410e:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8014110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014112:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8014116:	edd0 7a00 	vldr	s15, [r0]
 801411a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801411e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014122:	d1d6      	bne.n	80140d2 <tract_calculate_reflections+0x2a>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8014124:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8014126:	4461      	add	r1, ip
 8014128:	481e      	ldr	r0, [pc, #120]	; (80141a4 <tract_calculate_reflections+0xfc>)
 801412a:	6008      	str	r0, [r1, #0]
 801412c:	e7e2      	b.n	80140f4 <tract_calculate_reflections+0x4c>
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 801412e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014130:	671a      	str	r2, [r3, #112]	; 0x70
    tr->reflection_right = tr->new_reflection_right;
 8014132:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8014136:	675a      	str	r2, [r3, #116]	; 0x74
    tr->reflection_nose = tr->new_reflection_nose;
 8014138:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801413c:	679a      	str	r2, [r3, #120]	; 0x78

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 801413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014140:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8014142:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8014146:	edd0 7a00 	vldr	s15, [r0]
 801414a:	3101      	adds	r1, #1
 801414c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014150:	ed92 7a00 	vldr	s14, [r2]
 8014154:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014158:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801415a:	edd1 6a00 	vldr	s13, [r1]
 801415e:	ee37 7a26 	vadd.f32	s14, s14, s13
    Lfloat invSum = 1.0f / sum;
 8014162:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014166:	eec6 6a07 	vdiv.f32	s13, s12, s14
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 801416a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801416e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014172:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014176:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 801417a:	edd2 7a00 	vldr	s15, [r2]
 801417e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801418a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 801418e:	edd1 7a00 	vldr	s15, [r1]
 8014192:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801419a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801419e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
}
 80141a2:	4770      	bx	lr
 80141a4:	3f7fbe77 	.word	0x3f7fbe77

080141a8 <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
	_tract* tr = *t;
 80141a8:	6803      	ldr	r3, [r0, #0]
	int i;
	Lfloat diameter, d;
    Lfloat n;
    if (numTractSections < tr->maxNumTractSections)
 80141aa:	689a      	ldr	r2, [r3, #8]
 80141ac:	428a      	cmp	r2, r1
 80141ae:	dd7d      	ble.n	80142ac <tract_newLength+0x104>
    {
    	n = numTractSections;
 80141b0:	ee07 1a90 	vmov	s15, r1
 80141b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    }
    else
    {
    	n = tr->maxNumTractSections;
    }
    tr->n = n; //44
 80141b8:	eefd 5ae6 	vcvt.s32.f32	s11, s13
 80141bc:	edc3 5a01 	vstr	s11, [r3, #4]
    tr->nose_length = n*0.636363636363636f; //28
 80141c0:	eddf 7a7d 	vldr	s15, [pc, #500]	; 80143b8 <tract_newLength+0x210>
 80141c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80141c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141cc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80141d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80141d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80141dc:	ee77 7a85 	vadd.f32	s15, s15, s10
 80141e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141e4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

    tr->reflection_left = 0.0f;
 80141e8:	2200      	movs	r2, #0
 80141ea:	671a      	str	r2, [r3, #112]	; 0x70
    tr->reflection_right = 0.0f;
 80141ec:	675a      	str	r2, [r3, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 80141ee:	679a      	str	r2, [r3, #120]	; 0x78
    tr->new_reflection_left = 0.0f;
 80141f0:	67da      	str	r2, [r3, #124]	; 0x7c
    tr->new_reflection_right= 0.0f;
 80141f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->new_reflection_nose = 0.0f;
 80141f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->velum_target = 0.01f;
 80141fa:	4970      	ldr	r1, [pc, #448]	; (80143bc <tract_newLength+0x214>)
 80141fc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->glottal_reflection = 0.75f;
 8014200:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8014204:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->lip_reflection = -0.85f;
 8014208:	496d      	ldr	r1, [pc, #436]	; (80143c0 <tract_newLength+0x218>)
 801420a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    tr->last_obstruction = -1;
 801420e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014212:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    tr->movement_speed = 200.0f;
 8014216:	496b      	ldr	r1, [pc, #428]	; (80143c4 <tract_newLength+0x21c>)
 8014218:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    tr->lip_output = 0.0f;
 801421c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    tr->nose_output = 0.0f;
 8014220:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    tr->tip_start = n*0.727272727272727f;
 8014224:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80143c8 <tract_newLength+0x220>
 8014228:	ee26 7a87 	vmul.f32	s14, s13, s14
 801422c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014230:	ed83 7a10 	vstr	s14, [r3, #64]	; 0x40
    tr->blade_start = n*0.227272727272727f;
 8014234:	eddf 7a65 	vldr	s15, [pc, #404]	; 80143cc <tract_newLength+0x224>
 8014238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801423c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014240:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    tr->lip_start = n*0.886363636363636f;
 8014244:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80143d0 <tract_newLength+0x228>
 8014248:	ee26 6a86 	vmul.f32	s12, s13, s12
 801424c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8014250:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8014254:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80143d4 <tract_newLength+0x22c>
 8014258:	ee26 6a86 	vmul.f32	s12, s13, s12
 801425c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014260:	ee37 7a46 	vsub.f32	s14, s14, s12
 8014264:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8014268:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80143d8 <tract_newLength+0x230>
 801426c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8014270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014278:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	tr->turbuluencePointPosition[0] = n* 0.45f;
 801427c:	eddf 7a57 	vldr	s15, [pc, #348]	; 80143dc <tract_newLength+0x234>
 8014280:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014284:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8014288:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801428c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014290:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	tr->turbuluencePointDiameter[0] = 1.5f;
 8014294:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8014298:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 801429c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    Lfloat invN = 1.0f / tr->n;
 80142a0:	eef8 7ae5 	vcvt.f32.s32	s15, s11
 80142a4:	eec5 5a27 	vdiv.f32	s11, s10, s15

    for(i = 0; i < tr->n; i++) {
 80142a8:	2200      	movs	r2, #0
 80142aa:	e016      	b.n	80142da <tract_newLength+0x132>
    	n = tr->maxNumTractSections;
 80142ac:	ee07 2a90 	vmov	s15, r2
 80142b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80142b4:	e780      	b.n	80141b8 <tract_newLength+0x10>
        diameter = 0.0f;
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
            diameter = 0.6f;
 80142b6:	494a      	ldr	r1, [pc, #296]	; (80143e0 <tract_newLength+0x238>)
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
 80142b8:	6998      	ldr	r0, [r3, #24]
 80142ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80142be:	6001      	str	r1, [r0, #0]
            tr->target_diameter[i] =
 80142c0:	6958      	ldr	r0, [r3, #20]
 80142c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80142c6:	6001      	str	r1, [r0, #0]
            tr->rest_diameter[i] =
 80142c8:	6918      	ldr	r0, [r3, #16]
 80142ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80142ce:	6001      	str	r1, [r0, #0]
        tr->diameter[i] =
 80142d0:	68d8      	ldr	r0, [r3, #12]
 80142d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80142d6:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 80142d8:	3201      	adds	r2, #1
 80142da:	6859      	ldr	r1, [r3, #4]
 80142dc:	4291      	cmp	r1, r2
 80142de:	dd28      	ble.n	8014332 <tract_newLength+0x18a>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80142e0:	eddf 7a40 	vldr	s15, [pc, #256]	; 80143e4 <tract_newLength+0x23c>
 80142e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80142e8:	ee07 1a10 	vmov	s14, r1
 80142ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142f0:	ee27 6a25 	vmul.f32	s12, s14, s11
 80142f4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80142f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80142fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014304:	ee17 1a90 	vmov	r1, s15
 8014308:	4291      	cmp	r1, r2
 801430a:	dcd4      	bgt.n	80142b6 <tract_newLength+0x10e>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 801430c:	eddf 7a36 	vldr	s15, [pc, #216]	; 80143e8 <tract_newLength+0x240>
 8014310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014318:	ee27 7a25 	vmul.f32	s14, s14, s11
 801431c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014320:	ee17 1a10 	vmov	r1, s14
 8014324:	4291      	cmp	r1, r2
 8014326:	dd01      	ble.n	801432c <tract_newLength+0x184>
            diameter = 1.1f;
 8014328:	4930      	ldr	r1, [pc, #192]	; (80143ec <tract_newLength+0x244>)
 801432a:	e7c5      	b.n	80142b8 <tract_newLength+0x110>
            diameter = 1.5f;
 801432c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8014330:	e7c2      	b.n	80142b8 <tract_newLength+0x110>

    }

    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8014332:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8014336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801433a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801433e:	eec7 6a27 	vdiv.f32	s13, s14, s15
	for(i = 0; i < tr->nose_length; i++) {
 8014342:	2200      	movs	r2, #0
 8014344:	e00e      	b.n	8014364 <tract_newLength+0x1bc>
		d = 2.0f * ((Lfloat)i * invNoseLength);
		if(d < 1.0f) {
			diameter = 0.4f + 1.6f * d;
 8014346:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80143f0 <tract_newLength+0x248>
 801434a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801434e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80143f4 <tract_newLength+0x24c>
 8014352:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014356:	e023      	b.n	80143a0 <tract_newLength+0x1f8>
		} else {
			diameter = 0.5f + 1.5f*(2.0f-d);
		}
		diameter = MIN(diameter, 1.9f);
		tr->nose_diameter[i] = diameter;
 8014358:	6e99      	ldr	r1, [r3, #104]	; 0x68
 801435a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801435e:	edc1 7a00 	vstr	s15, [r1]
	for(i = 0; i < tr->nose_length; i++) {
 8014362:	3201      	adds	r2, #1
 8014364:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014366:	4291      	cmp	r1, r2
 8014368:	dd24      	ble.n	80143b4 <tract_newLength+0x20c>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801436a:	ee07 2a90 	vmov	s15, r2
 801436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014372:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014376:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 801437a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801437e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	d4de      	bmi.n	8014346 <tract_newLength+0x19e>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8014388:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801438c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014390:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8014394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014398:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801439c:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 80143a0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80143f8 <tract_newLength+0x250>
 80143a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ac:	d4d4      	bmi.n	8014358 <tract_newLength+0x1b0>
 80143ae:	eef0 7a47 	vmov.f32	s15, s14
 80143b2:	e7d1      	b.n	8014358 <tract_newLength+0x1b0>
	}

}
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop
 80143b8:	3f22e8ba 	.word	0x3f22e8ba
 80143bc:	3c23d70a 	.word	0x3c23d70a
 80143c0:	bf59999a 	.word	0xbf59999a
 80143c4:	43480000 	.word	0x43480000
 80143c8:	3f3a2e8c 	.word	0x3f3a2e8c
 80143cc:	3e68ba2f 	.word	0x3e68ba2f
 80143d0:	3f62e8ba 	.word	0x3f62e8ba
 80143d4:	3d8ba2e9 	.word	0x3d8ba2e9
 80143d8:	3d3a2e8c 	.word	0x3d3a2e8c
 80143dc:	3ee66666 	.word	0x3ee66666
 80143e0:	3f19999a 	.word	0x3f19999a
 80143e4:	3e22e8ba 	.word	0x3e22e8ba
 80143e8:	3e8ba2e9 	.word	0x3e8ba2e9
 80143ec:	3f8ccccd 	.word	0x3f8ccccd
 80143f0:	3fcccccd 	.word	0x3fcccccd
 80143f4:	3ecccccd 	.word	0x3ecccccd
 80143f8:	3ff33333 	.word	0x3ff33333

080143fc <tract_addTurbulenceNoiseAtPosition>:
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
	}
}

void tract_addTurbulenceNoiseAtPosition(tract* const t, Lfloat turbulenceNoise, Lfloat position, Lfloat diameter)
{
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	ed2d 8b06 	vpush	{d8-d10}
 8014402:	eef0 9a40 	vmov.f32	s19, s0
 8014406:	eeb0 9a41 	vmov.f32	s18, s2
	_tract* tr = *t;
 801440a:	6805      	ldr	r5, [r0, #0]
	int i = (int)floorf(position);
 801440c:	fefb 7a60 	vrintm.f32	s15, s1
 8014410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014414:	ee17 4a90 	vmov	r4, s15
	Lfloat delta = position - i;
 8014418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801441c:	ee30 8ae7 	vsub.f32	s16, s1, s15
	//Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8014420:	eddf 7a30 	vldr	s15, [pc, #192]	; 80144e4 <tract_addTurbulenceNoiseAtPosition+0xe8>
 8014424:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8014428:	ed9f aa2f 	vldr	s20, [pc, #188]	; 80144e8 <tract_addTurbulenceNoiseAtPosition+0xec>
 801442c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014430:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8014434:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014438:	eeb0 0a4a 	vmov.f32	s0, s20
 801443c:	f7fd f922 	bl	8011684 <LEAF_clip>
 8014440:	eef0 8a40 	vmov.f32	s17, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8014444:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014448:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 801444c:	ee69 0a20 	vmul.f32	s1, s18, s1
 8014450:	eeb0 0a4a 	vmov.f32	s0, s20
 8014454:	f7fd f916 	bl	8011684 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8014458:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801445c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8014460:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8014464:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014468:	ee67 7a80 	vmul.f32	s15, s15, s0
 801446c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014470:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 8014474:	ee28 8a29 	vmul.f32	s16, s16, s19
 8014478:	ee28 8a28 	vmul.f32	s16, s16, s17
 801447c:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014480:	ee28 8a07 	vmul.f32	s16, s16, s14
	if ((i + 1) < tr->n) {
 8014484:	1c62      	adds	r2, r4, #1
 8014486:	686b      	ldr	r3, [r5, #4]
 8014488:	429a      	cmp	r2, r3
 801448a:	da11      	bge.n	80144b0 <tract_addTurbulenceNoiseAtPosition+0xb4>
		tr->R[i + 1] += noise0;
 801448c:	69eb      	ldr	r3, [r5, #28]
 801448e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014492:	ed93 7a00 	vldr	s14, [r3]
 8014496:	ee37 7a27 	vadd.f32	s14, s14, s15
 801449a:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 801449e:	6a2b      	ldr	r3, [r5, #32]
 80144a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80144a4:	ed93 7a00 	vldr	s14, [r3]
 80144a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144ac:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((i + 2) < tr->n) {
 80144b0:	1ca3      	adds	r3, r4, #2
 80144b2:	686a      	ldr	r2, [r5, #4]
 80144b4:	4293      	cmp	r3, r2
 80144b6:	da12      	bge.n	80144de <tract_addTurbulenceNoiseAtPosition+0xe2>
		tr->R[i + 2] += noise1;
 80144b8:	69eb      	ldr	r3, [r5, #28]
 80144ba:	3402      	adds	r4, #2
 80144bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80144c0:	edd3 7a00 	vldr	s15, [r3]
 80144c4:	ee77 7a88 	vadd.f32	s15, s15, s16
 80144c8:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 80144cc:	6a2b      	ldr	r3, [r5, #32]
 80144ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80144d2:	edd3 7a00 	vldr	s15, [r3]
 80144d6:	ee77 7a88 	vadd.f32	s15, s15, s16
 80144da:	edc3 7a00 	vstr	s15, [r3]
	}
 }
 80144de:	ecbd 8b06 	vpop	{d8-d10}
 80144e2:	bd38      	pop	{r3, r4, r5, pc}
 80144e4:	3db851ec 	.word	0x3db851ec
 80144e8:	00000000 	.word	0x00000000

080144ec <tract_addTurbulenceNoise>:
{
 80144ec:	b530      	push	{r4, r5, lr}
 80144ee:	b083      	sub	sp, #12
	_tract* tr = *t;
 80144f0:	6803      	ldr	r3, [r0, #0]
 80144f2:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 2; i++)
 80144f4:	2400      	movs	r4, #0
 80144f6:	e020      	b.n	801453a <tract_addTurbulenceNoise+0x4e>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80144f8:	9801      	ldr	r0, [sp, #4]
 80144fa:	f104 052a 	add.w	r5, r4, #42	; 0x2a
 80144fe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8014502:	3504      	adds	r5, #4
 8014504:	30b8      	adds	r0, #184	; 0xb8
 8014506:	f7fe f96f 	bl	80127e8 <tNoise_tick>
 801450a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014544 <tract_addTurbulenceNoise+0x58>
 801450e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014512:	4628      	mov	r0, r5
 8014514:	f7fa fe79 	bl	800f20a <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8014518:	9b01      	ldr	r3, [sp, #4]
 801451a:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801451e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8014522:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8014526:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801452a:	ed92 1a01 	vldr	s2, [r2, #4]
 801452e:	edd3 0a01 	vldr	s1, [r3, #4]
 8014532:	a801      	add	r0, sp, #4
 8014534:	f7ff ff62 	bl	80143fc <tract_addTurbulenceNoiseAtPosition>
	for (int i = 0; i < 2; i++)
 8014538:	3401      	adds	r4, #1
 801453a:	2c01      	cmp	r4, #1
 801453c:	dddc      	ble.n	80144f8 <tract_addTurbulenceNoise+0xc>
}
 801453e:	b003      	add	sp, #12
 8014540:	bd30      	pop	{r4, r5, pc}
 8014542:	bf00      	nop
 8014544:	3e8f5c29 	.word	0x3e8f5c29

08014548 <tract_compute>:


void tract_compute(tract* const t, Lfloat  in, Lfloat  lambda)
{
 8014548:	b500      	push	{lr}
 801454a:	ed2d 8b04 	vpush	{d8-d9}
 801454e:	b083      	sub	sp, #12
 8014550:	eeb0 9a40 	vmov.f32	s18, s0
 8014554:	eeb0 8a60 	vmov.f32	s16, s1
	_tract* tr = *t;
 8014558:	6803      	ldr	r3, [r0, #0]
 801455a:	9301      	str	r3, [sp, #4]
    //Lfloat  amp;
    //int current_size;
   // _transient_pool *thepool;
    //_transient *n;

    Lfloat oneMinusLambda = 1.0f - lambda;
 801455c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014560:	ee78 8ae0 	vsub.f32	s17, s17, s1
			 remove_transient(&thepool, n->id);
		}
		n = n->next;
	}
                  */
	tract_addTurbulenceNoise(&tr);
 8014564:	a801      	add	r0, sp, #4
 8014566:	f7ff ffc1 	bl	80144ec <tract_addTurbulenceNoise>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 801456a:	9b01      	ldr	r3, [sp, #4]
 801456c:	6a1a      	ldr	r2, [r3, #32]
 801456e:	edd2 7a00 	vldr	s15, [r2]
 8014572:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8014576:	ee67 7a87 	vmul.f32	s15, s15, s14
 801457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801457c:	ee77 7a89 	vadd.f32	s15, s15, s18
 8014580:	edc3 7a00 	vstr	s15, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8014584:	9b01      	ldr	r3, [sp, #4]
 8014586:	69da      	ldr	r2, [r3, #28]
 8014588:	6858      	ldr	r0, [r3, #4]
 801458a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801458e:	4401      	add	r1, r0
 8014590:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014594:	edd2 7a00 	vldr	s15, [r2]
 8014598:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 801459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80145a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145a6:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->n; i++) {
 80145aa:	2301      	movs	r3, #1
 80145ac:	e035      	b.n	801461a <tract_compute+0xd2>
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 80145ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80145b0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80145b4:	ed91 7a00 	vldr	s14, [r1]
 80145b8:	ee27 7a28 	vmul.f32	s14, s14, s17
 80145bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80145be:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80145c2:	edd1 7a00 	vldr	s15, [r1]
 80145c6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80145ca:	ee37 7a27 	vadd.f32	s14, s14, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 80145ce:	69d1      	ldr	r1, [r2, #28]
 80145d0:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80145d4:	4418      	add	r0, r3
 80145d6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80145da:	edd1 6a00 	vldr	s13, [r1]
 80145de:	6a11      	ldr	r1, [r2, #32]
 80145e0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80145e4:	edd1 7a00 	vldr	s15, [r1]
 80145e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80145ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 80145f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80145f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80145f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80145fa:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 80145fe:	9901      	ldr	r1, [sp, #4]
 8014600:	6a0a      	ldr	r2, [r1, #32]
 8014602:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014606:	ed92 7a00 	vldr	s14, [r2]
 801460a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801460c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014614:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->n; i++) {
 8014618:	3301      	adds	r3, #1
 801461a:	9a01      	ldr	r2, [sp, #4]
 801461c:	6851      	ldr	r1, [r2, #4]
 801461e:	4299      	cmp	r1, r3
 8014620:	dcc5      	bgt.n	80145ae <tract_compute+0x66>
    }


    i = tr->nose_start;
 8014622:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8014624:	edd2 7a1f 	vldr	s15, [r2, #124]	; 0x7c
 8014628:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801462c:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
 8014630:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014634:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8014638:	69d3      	ldr	r3, [r2, #28]
 801463a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801463e:	4408      	add	r0, r1
 8014640:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014644:	ed93 7a00 	vldr	s14, [r3]
 8014648:	ee27 7a27 	vmul.f32	s14, s14, s15
 801464c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014654:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8014656:	ed93 6a00 	vldr	s12, [r3]
 801465a:	6a13      	ldr	r3, [r2, #32]
 801465c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014660:	edd3 5a00 	vldr	s11, [r3]
 8014664:	ee36 6a25 	vadd.f32	s12, s12, s11
 8014668:	ee67 7a86 	vmul.f32	s15, s15, s12
 801466c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801466e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014676:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 801467a:	9b01      	ldr	r3, [sp, #4]
 801467c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8014680:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8014684:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8014688:	ee27 7a08 	vmul.f32	s14, s14, s16
 801468c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8014690:	6a1a      	ldr	r2, [r3, #32]
 8014692:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014696:	ed92 7a00 	vldr	s14, [r2]
 801469a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146a2:	69da      	ldr	r2, [r3, #28]
 80146a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80146a8:	ed92 6a00 	vldr	s12, [r2]
 80146ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146ae:	edd2 5a00 	vldr	s11, [r2]
 80146b2:	ee36 6a25 	vadd.f32	s12, s12, s11
 80146b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80146ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146bc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80146c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80146c4:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 80146c8:	9b01      	ldr	r3, [sp, #4]
 80146ca:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80146ce:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80146d2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80146d6:	ee27 7a08 	vmul.f32	s14, s14, s16
 80146da:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 80146de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80146e0:	ed92 7a00 	vldr	s14, [r2]
 80146e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80146e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146ec:	6a1a      	ldr	r2, [r3, #32]
 80146ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80146f2:	edd2 6a00 	vldr	s13, [r2]
 80146f6:	69da      	ldr	r2, [r3, #28]
 80146f8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80146fc:	ed92 6a00 	vldr	s12, [r2]
 8014700:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014704:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801470e:	edc3 7a00 	vstr	s15, [r3]


    for(i = 0; i < tr->n; i++) {
 8014712:	2300      	movs	r3, #0
 8014714:	e01c      	b.n	8014750 <tract_compute+0x208>
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8014716:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8014718:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801471c:	edd1 7a00 	vldr	s15, [r1]
 8014720:	69d2      	ldr	r2, [r2, #28]
 8014722:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014726:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014838 <tract_compute+0x2f0>
 801472a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801472e:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 8014732:	9801      	ldr	r0, [sp, #4]
 8014734:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014736:	1c59      	adds	r1, r3, #1
 8014738:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801473c:	edd2 7a00 	vldr	s15, [r2]
 8014740:	6a02      	ldr	r2, [r0, #32]
 8014742:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014746:	ee67 7a87 	vmul.f32	s15, s15, s14
 801474a:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < tr->n; i++) {
 801474e:	460b      	mov	r3, r1
 8014750:	9a01      	ldr	r2, [sp, #4]
 8014752:	6851      	ldr	r1, [r2, #4]
 8014754:	4299      	cmp	r1, r3
 8014756:	dcde      	bgt.n	8014716 <tract_compute+0x1ce>
    }
    tr->lip_output = tr->R[tr->n - 1];
 8014758:	69d0      	ldr	r0, [r2, #28]
 801475a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801475e:	4419      	add	r1, r3
 8014760:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8014764:	6801      	ldr	r1, [r0, #0]
 8014766:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0


    tr->nose_junc_outL[tr->nose_length] =
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 801476a:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801476c:	6b90      	ldr	r0, [r2, #56]	; 0x38
 801476e:	4403      	add	r3, r0
 8014770:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014774:	edd1 7a00 	vldr	s15, [r1]
 8014778:	ed92 7a24 	vldr	s14, [r2, #144]	; 0x90
    tr->nose_junc_outL[tr->nose_length] =
 801477c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801477e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8014782:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 8014786:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->nose_length; i++) {
 801478a:	2301      	movs	r3, #1
 801478c:	e02a      	b.n	80147e4 <tract_compute+0x29c>
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 801478e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8014790:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014794:	edd1 7a00 	vldr	s15, [r1]
 8014798:	6d91      	ldr	r1, [r2, #88]	; 0x58
 801479a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801479e:	4418      	add	r0, r3
 80147a0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80147a4:	ed91 7a00 	vldr	s14, [r1]
 80147a8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80147aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80147ae:	edd1 6a00 	vldr	s13, [r1]
 80147b2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80147b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80147ba:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80147bc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80147c4:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 80147c8:	9901      	ldr	r1, [sp, #4]
 80147ca:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80147cc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147d0:	ed92 7a00 	vldr	s14, [r2]
 80147d4:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80147d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147de:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 80147e2:	3301      	adds	r3, #1
 80147e4:	9a01      	ldr	r2, [sp, #4]
 80147e6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80147e8:	4299      	cmp	r1, r3
 80147ea:	dcd0      	bgt.n	801478e <tract_compute+0x246>
    }


    for(i = 0; i < tr->nose_length; i++) {
 80147ec:	2300      	movs	r3, #0
 80147ee:	e011      	b.n	8014814 <tract_compute+0x2cc>
        tr->noseR[i] = tr->nose_junc_outR[i];
 80147f0:	6e11      	ldr	r1, [r2, #96]	; 0x60
 80147f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80147f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147f8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80147fc:	6809      	ldr	r1, [r1, #0]
 80147fe:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 8014800:	9a01      	ldr	r2, [sp, #4]
 8014802:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8014804:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8014806:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801480a:	3301      	adds	r3, #1
 801480c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014810:	6809      	ldr	r1, [r1, #0]
 8014812:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8014814:	9a01      	ldr	r2, [sp, #4]
 8014816:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8014818:	4299      	cmp	r1, r3
 801481a:	dce9      	bgt.n	80147f0 <tract_compute+0x2a8>
    }
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 801481c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 801481e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8014822:	4408      	add	r0, r1
 8014824:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

}
 801482e:	b003      	add	sp, #12
 8014830:	ecbd 8b04 	vpop	{d8-d9}
 8014834:	f85d fb04 	ldr.w	pc, [sp], #4
 8014838:	3f7fbe77 	.word	0x3f7fbe77

0801483c <tract_calculate_nose_reflections>:

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 801483c:	6803      	ldr	r3, [r0, #0]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 801483e:	2200      	movs	r2, #0
 8014840:	e00c      	b.n	801485c <tract_calculate_nose_reflections+0x20>
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8014842:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8014844:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014848:	edd1 7a00 	vldr	s15, [r1]
 801484c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801484e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014852:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014856:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
 801485a:	3201      	adds	r2, #1
 801485c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801485e:	4291      	cmp	r1, r2
 8014860:	dcef      	bgt.n	8014842 <tract_calculate_nose_reflections+0x6>
    }

    for(i = 1; i < tr->nose_length; i++) {
 8014862:	2201      	movs	r2, #1
 8014864:	e017      	b.n	8014896 <tract_calculate_nose_reflections+0x5a>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8014866:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8014868:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 801486c:	4411      	add	r1, r2
 801486e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014872:	edd1 7a00 	vldr	s15, [r1]
 8014876:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801487a:	ed90 7a00 	vldr	s14, [r0]
 801487e:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 8014882:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8014886:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8014888:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801488c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014890:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8014894:	3201      	adds	r2, #1
 8014896:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014898:	4291      	cmp	r1, r2
 801489a:	dce4      	bgt.n	8014866 <tract_calculate_nose_reflections+0x2a>
    }
}
 801489c:	4770      	bx	lr
	...

080148a0 <tract_initToPool>:
{
 80148a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148a2:	ed2d 8b04 	vpush	{d8-d9}
 80148a6:	b083      	sub	sp, #12
 80148a8:	4604      	mov	r4, r0
 80148aa:	ee08 1a90 	vmov	s17, r1
 80148ae:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 80148b0:	6819      	ldr	r1, [r3, #0]
 80148b2:	9101      	str	r1, [sp, #4]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 80148b4:	20d4      	movs	r0, #212	; 0xd4
 80148b6:	f7fd fadb 	bl	8011e70 <mpool_calloc>
 80148ba:	6020      	str	r0, [r4, #0]
 80148bc:	9000      	str	r0, [sp, #0]
	tr->mempool = m;
 80148be:	9b01      	ldr	r3, [sp, #4]
 80148c0:	6003      	str	r3, [r0, #0]
	LEAF* leaf = m->leaf;
 80148c2:	9901      	ldr	r1, [sp, #4]
 80148c4:	684c      	ldr	r4, [r1, #4]
    Lfloat n = numTractSections;
 80148c6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    tr->maxNumTractSections = maxNumTractSections;
 80148ca:	9d00      	ldr	r5, [sp, #0]
 80148cc:	60af      	str	r7, [r5, #8]
    tr->n = n; //44
 80148ce:	eefd 5ae8 	vcvt.s32.f32	s11, s17
 80148d2:	edc5 5a01 	vstr	s11, [r5, #4]
    tr->nose_length = n*0.636363636363636f; //28
 80148d6:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8014b98 <tract_initToPool+0x2f8>
 80148da:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80148de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148e2:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80148e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80148ea:	ee78 7ae6 	vsub.f32	s15, s17, s13
 80148ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80148f2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80148f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148fa:	edc5 7a0f 	vstr	s15, [r5, #60]	; 0x3c
    tr->reflection_left = 0.0f;
 80148fe:	2300      	movs	r3, #0
 8014900:	672b      	str	r3, [r5, #112]	; 0x70
    tr->reflection_right = 0.0f;
 8014902:	676b      	str	r3, [r5, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 8014904:	67ab      	str	r3, [r5, #120]	; 0x78
    tr->new_reflection_left = 0.0f;
 8014906:	67eb      	str	r3, [r5, #124]	; 0x7c
    tr->new_reflection_right= 0.0f;
 8014908:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    tr->new_reflection_nose = 0.0f;
 801490c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tr->velum_target = 0.01f;
 8014910:	4aa2      	ldr	r2, [pc, #648]	; (8014b9c <tract_initToPool+0x2fc>)
 8014912:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
    tr->glottal_reflection = 0.75f;
 8014916:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 801491a:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
    tr->lip_reflection = -0.85f;
 801491e:	4aa0      	ldr	r2, [pc, #640]	; (8014ba0 <tract_initToPool+0x300>)
 8014920:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    tr->last_obstruction = -1;
 8014924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014928:	f8c5 2094 	str.w	r2, [r5, #148]	; 0x94
    tr->movement_speed = 200.0f;
 801492c:	4a9d      	ldr	r2, [pc, #628]	; (8014ba4 <tract_initToPool+0x304>)
 801492e:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
    tr->lip_output = 0.0f;
 8014932:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
    tr->nose_output = 0.0f;
 8014936:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
    tr->tip_start = n*0.727272727272727f;
 801493a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8014ba8 <tract_initToPool+0x308>
 801493e:	ee28 7a87 	vmul.f32	s14, s17, s14
 8014942:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014946:	ed85 7a10 	vstr	s14, [r5, #64]	; 0x40
    tr->blade_start = n*0.227272727272727f;
 801494a:	eddf 7a98 	vldr	s15, [pc, #608]	; 8014bac <tract_initToPool+0x30c>
 801494e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014956:	edc5 7a11 	vstr	s15, [r5, #68]	; 0x44
    tr->lip_start = n*0.886363636363636f;
 801495a:	ed9f 6a95 	vldr	s12, [pc, #596]	; 8014bb0 <tract_initToPool+0x310>
 801495e:	ee28 6a86 	vmul.f32	s12, s17, s12
 8014962:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8014966:	ed85 6a12 	vstr	s12, [r5, #72]	; 0x48
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 801496a:	ed9f 6a92 	vldr	s12, [pc, #584]	; 8014bb4 <tract_initToPool+0x314>
 801496e:	ee28 6a86 	vmul.f32	s12, s17, s12
 8014972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014976:	ee37 7a46 	vsub.f32	s14, s14, s12
 801497a:	ed85 7a13 	vstr	s14, [r5, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801497e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8014bb8 <tract_initToPool+0x318>
 8014982:	ee28 7a87 	vmul.f32	s14, s17, s14
 8014986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801498a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801498e:	edc5 7a14 	vstr	s15, [r5, #80]	; 0x50
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8014992:	eddf 7a8a 	vldr	s15, [pc, #552]	; 8014bbc <tract_initToPool+0x31c>
 8014996:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801499a:	edc5 7a2f 	vstr	s15, [r5, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 801499e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80149a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80149a6:	edc5 7a30 	vstr	s15, [r5, #192]	; 0xc0
	tr->turbuluencePointDiameter[0] = 1.5f;
 80149aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80149ae:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 80149b2:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    Lfloat invN = 1.0f / tr->n;
 80149b6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80149ba:	ee85 9a25 	vdiv.f32	s18, s10, s11
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 80149be:	ee85 8a26 	vdiv.f32	s16, s10, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149c2:	00be      	lsls	r6, r7, #2
 80149c4:	4630      	mov	r0, r6
 80149c6:	f7fd fa53 	bl	8011e70 <mpool_calloc>
 80149ca:	60e8      	str	r0, [r5, #12]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149cc:	9d00      	ldr	r5, [sp, #0]
 80149ce:	9901      	ldr	r1, [sp, #4]
 80149d0:	4630      	mov	r0, r6
 80149d2:	f7fd fa4d 	bl	8011e70 <mpool_calloc>
 80149d6:	6128      	str	r0, [r5, #16]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149d8:	9d00      	ldr	r5, [sp, #0]
 80149da:	9901      	ldr	r1, [sp, #4]
 80149dc:	4630      	mov	r0, r6
 80149de:	f7fd fa47 	bl	8011e70 <mpool_calloc>
 80149e2:	6168      	str	r0, [r5, #20]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149e4:	9d00      	ldr	r5, [sp, #0]
 80149e6:	9901      	ldr	r1, [sp, #4]
 80149e8:	4630      	mov	r0, r6
 80149ea:	f7fd fa41 	bl	8011e70 <mpool_calloc>
 80149ee:	61a8      	str	r0, [r5, #24]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149f0:	9d00      	ldr	r5, [sp, #0]
 80149f2:	9901      	ldr	r1, [sp, #4]
 80149f4:	4630      	mov	r0, r6
 80149f6:	f7fd fa3b 	bl	8011e70 <mpool_calloc>
 80149fa:	6228      	str	r0, [r5, #32]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80149fc:	9d00      	ldr	r5, [sp, #0]
 80149fe:	9901      	ldr	r1, [sp, #4]
 8014a00:	4630      	mov	r0, r6
 8014a02:	f7fd fa35 	bl	8011e70 <mpool_calloc>
 8014a06:	61e8      	str	r0, [r5, #28]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a08:	1c7d      	adds	r5, r7, #1
 8014a0a:	00ad      	lsls	r5, r5, #2
 8014a0c:	9f00      	ldr	r7, [sp, #0]
 8014a0e:	9901      	ldr	r1, [sp, #4]
 8014a10:	4628      	mov	r0, r5
 8014a12:	f7fd fa2d 	bl	8011e70 <mpool_calloc>
 8014a16:	6278      	str	r0, [r7, #36]	; 0x24
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a18:	9f00      	ldr	r7, [sp, #0]
 8014a1a:	9901      	ldr	r1, [sp, #4]
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	f7fd fa27 	bl	8011e70 <mpool_calloc>
 8014a22:	62b8      	str	r0, [r7, #40]	; 0x28
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a24:	9f00      	ldr	r7, [sp, #0]
 8014a26:	9901      	ldr	r1, [sp, #4]
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f7fd fa21 	bl	8011e70 <mpool_calloc>
 8014a2e:	62f8      	str	r0, [r7, #44]	; 0x2c
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a30:	9f00      	ldr	r7, [sp, #0]
 8014a32:	9901      	ldr	r1, [sp, #4]
 8014a34:	4628      	mov	r0, r5
 8014a36:	f7fd fa1b 	bl	8011e70 <mpool_calloc>
 8014a3a:	6338      	str	r0, [r7, #48]	; 0x30
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a3c:	9f00      	ldr	r7, [sp, #0]
 8014a3e:	9901      	ldr	r1, [sp, #4]
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7fd fa15 	bl	8011e70 <mpool_calloc>
 8014a46:	6378      	str	r0, [r7, #52]	; 0x34
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a48:	9f00      	ldr	r7, [sp, #0]
 8014a4a:	9901      	ldr	r1, [sp, #4]
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f7fd fa0f 	bl	8011e70 <mpool_calloc>
 8014a52:	6578      	str	r0, [r7, #84]	; 0x54
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a54:	9f00      	ldr	r7, [sp, #0]
 8014a56:	9901      	ldr	r1, [sp, #4]
 8014a58:	4630      	mov	r0, r6
 8014a5a:	f7fd fa09 	bl	8011e70 <mpool_calloc>
 8014a5e:	65b8      	str	r0, [r7, #88]	; 0x58
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a60:	9f00      	ldr	r7, [sp, #0]
 8014a62:	9901      	ldr	r1, [sp, #4]
 8014a64:	4628      	mov	r0, r5
 8014a66:	f7fd fa03 	bl	8011e70 <mpool_calloc>
 8014a6a:	65f8      	str	r0, [r7, #92]	; 0x5c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8014a6c:	9f00      	ldr	r7, [sp, #0]
 8014a6e:	9901      	ldr	r1, [sp, #4]
 8014a70:	4628      	mov	r0, r5
 8014a72:	f7fd f9fd 	bl	8011e70 <mpool_calloc>
 8014a76:	6638      	str	r0, [r7, #96]	; 0x60
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a78:	9d00      	ldr	r5, [sp, #0]
 8014a7a:	9901      	ldr	r1, [sp, #4]
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f7fd f9f7 	bl	8011e70 <mpool_calloc>
 8014a82:	66a8      	str	r0, [r5, #104]	; 0x68
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a84:	9d00      	ldr	r5, [sp, #0]
 8014a86:	9901      	ldr	r1, [sp, #4]
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f7fd f9f1 	bl	8011e70 <mpool_calloc>
 8014a8e:	6668      	str	r0, [r5, #100]	; 0x64
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8014a90:	9d00      	ldr	r5, [sp, #0]
 8014a92:	9901      	ldr	r1, [sp, #4]
 8014a94:	4630      	mov	r0, r6
 8014a96:	f7fd f9eb 	bl	8011e70 <mpool_calloc>
 8014a9a:	66e8      	str	r0, [r5, #108]	; 0x6c
    for(i = 0; i < tr->n; i++) {
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	e014      	b.n	8014aca <tract_initToPool+0x22a>
            diameter = 0.6f;
 8014aa0:	4a47      	ldr	r2, [pc, #284]	; (8014bc0 <tract_initToPool+0x320>)
            tr->new_diameter[i] = diameter;
 8014aa2:	6989      	ldr	r1, [r1, #24]
 8014aa4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014aa8:	600a      	str	r2, [r1, #0]
            tr->target_diameter[i] =
 8014aaa:	9900      	ldr	r1, [sp, #0]
 8014aac:	6949      	ldr	r1, [r1, #20]
 8014aae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014ab2:	600a      	str	r2, [r1, #0]
            tr->rest_diameter[i] =
 8014ab4:	9900      	ldr	r1, [sp, #0]
 8014ab6:	6909      	ldr	r1, [r1, #16]
 8014ab8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014abc:	600a      	str	r2, [r1, #0]
        tr->diameter[i] =
 8014abe:	9900      	ldr	r1, [sp, #0]
 8014ac0:	68c9      	ldr	r1, [r1, #12]
 8014ac2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8014ac6:	600a      	str	r2, [r1, #0]
    for(i = 0; i < tr->n; i++) {
 8014ac8:	3301      	adds	r3, #1
 8014aca:	9900      	ldr	r1, [sp, #0]
 8014acc:	684a      	ldr	r2, [r1, #4]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	dd28      	ble.n	8014b24 <tract_initToPool+0x284>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8014ad2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8014bc4 <tract_initToPool+0x324>
 8014ad6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014ada:	ee07 2a10 	vmov	s14, r2
 8014ade:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ae2:	ee67 6a09 	vmul.f32	s13, s14, s18
 8014ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014aea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014aee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014af6:	ee17 2a90 	vmov	r2, s15
 8014afa:	429a      	cmp	r2, r3
 8014afc:	dcd0      	bgt.n	8014aa0 <tract_initToPool+0x200>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8014afe:	eddf 7a32 	vldr	s15, [pc, #200]	; 8014bc8 <tract_initToPool+0x328>
 8014b02:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8014b06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014b0a:	ee27 7a09 	vmul.f32	s14, s14, s18
 8014b0e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014b12:	ee17 2a10 	vmov	r2, s14
 8014b16:	429a      	cmp	r2, r3
 8014b18:	dd01      	ble.n	8014b1e <tract_initToPool+0x27e>
            diameter = 1.1f;
 8014b1a:	4a2c      	ldr	r2, [pc, #176]	; (8014bcc <tract_initToPool+0x32c>)
 8014b1c:	e7c1      	b.n	8014aa2 <tract_initToPool+0x202>
            diameter = 1.5f;
 8014b1e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8014b22:	e7be      	b.n	8014aa2 <tract_initToPool+0x202>
	for(i = 0; i < tr->nose_length; i++) {
 8014b24:	2300      	movs	r3, #0
 8014b26:	e00e      	b.n	8014b46 <tract_initToPool+0x2a6>
			diameter = 0.4f + 1.6f * d;
 8014b28:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8014bd0 <tract_initToPool+0x330>
 8014b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014bd4 <tract_initToPool+0x334>
 8014b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014b38:	e024      	b.n	8014b84 <tract_initToPool+0x2e4>
		tr->nose_diameter[i] = diameter;
 8014b3a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8014b3c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b40:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8014b44:	3301      	adds	r3, #1
 8014b46:	9800      	ldr	r0, [sp, #0]
 8014b48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	dd4e      	ble.n	8014bec <tract_initToPool+0x34c>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8014b4e:	ee07 3a90 	vmov	s15, r3
 8014b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b56:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014b5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 8014b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b6a:	d4dd      	bmi.n	8014b28 <tract_initToPool+0x288>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8014b6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b74:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8014b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014b80:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 8014b84:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8014bd8 <tract_initToPool+0x338>
 8014b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b90:	d4d3      	bmi.n	8014b3a <tract_initToPool+0x29a>
 8014b92:	eef0 7a47 	vmov.f32	s15, s14
 8014b96:	e7d0      	b.n	8014b3a <tract_initToPool+0x29a>
 8014b98:	3f22e8ba 	.word	0x3f22e8ba
 8014b9c:	3c23d70a 	.word	0x3c23d70a
 8014ba0:	bf59999a 	.word	0xbf59999a
 8014ba4:	43480000 	.word	0x43480000
 8014ba8:	3f3a2e8c 	.word	0x3f3a2e8c
 8014bac:	3e68ba2f 	.word	0x3e68ba2f
 8014bb0:	3f62e8ba 	.word	0x3f62e8ba
 8014bb4:	3d8ba2e9 	.word	0x3d8ba2e9
 8014bb8:	3d3a2e8c 	.word	0x3d3a2e8c
 8014bbc:	3ee66666 	.word	0x3ee66666
 8014bc0:	3f19999a 	.word	0x3f19999a
 8014bc4:	3e22e8ba 	.word	0x3e22e8ba
 8014bc8:	3e8ba2e9 	.word	0x3e8ba2e9
 8014bcc:	3f8ccccd 	.word	0x3f8ccccd
 8014bd0:	3fcccccd 	.word	0x3fcccccd
 8014bd4:	3ecccccd 	.word	0x3ecccccd
 8014bd8:	3ff33333 	.word	0x3ff33333
 8014bdc:	447c8000 	.word	0x447c8000
 8014be0:	44778000 	.word	0x44778000
 8014be4:	43fa0000 	.word	0x43fa0000
 8014be8:	42800000 	.word	0x42800000
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.5f, &m);
 8014bec:	aa01      	add	r2, sp, #4
 8014bee:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8014bf2:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8014bdc <tract_initToPool+0x33c>
 8014bf6:	2102      	movs	r1, #2
 8014bf8:	30ac      	adds	r0, #172	; 0xac
 8014bfa:	f7fa fa73 	bl	800f0e4 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.5f, &m);
 8014bfe:	aa01      	add	r2, sp, #4
 8014c00:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8014c04:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 8014be0 <tract_initToPool+0x340>
 8014c08:	2102      	movs	r1, #2
 8014c0a:	9800      	ldr	r0, [sp, #0]
 8014c0c:	30b0      	adds	r0, #176	; 0xb0
 8014c0e:	f7fa fa69 	bl	800f0e4 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.5f, &m);
 8014c12:	aa01      	add	r2, sp, #4
 8014c14:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8014c18:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 8014be4 <tract_initToPool+0x344>
 8014c1c:	2102      	movs	r1, #2
 8014c1e:	9800      	ldr	r0, [sp, #0]
 8014c20:	30b4      	adds	r0, #180	; 0xb4
 8014c22:	f7fa fa5f 	bl	800f0e4 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8014c26:	aa01      	add	r2, sp, #4
 8014c28:	2100      	movs	r1, #0
 8014c2a:	9800      	ldr	r0, [sp, #0]
 8014c2c:	30b8      	adds	r0, #184	; 0xb8
 8014c2e:	f7fd fdc1 	bl	80127b4 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8014c32:	4668      	mov	r0, sp
 8014c34:	f7ff fa38 	bl	80140a8 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
 8014c38:	4668      	mov	r0, sp
 8014c3a:	f7ff fdff 	bl	801483c <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
 8014c3e:	9b00      	ldr	r3, [sp, #0]
 8014c40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014c46:	6013      	str	r3, [r2, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8014c48:	ed94 7a00 	vldr	s14, [r4]
 8014c4c:	9d00      	ldr	r5, [sp, #0]
 8014c4e:	ed5f 6a1a 	vldr	s13, [pc, #-104]	; 8014be8 <tract_initToPool+0x348>
 8014c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014c56:	edc5 7a2a 	vstr	s15, [r5, #168]	; 0xa8
    tr->T = 1.0f / leaf->sampleRate;
 8014c5a:	ed94 7a00 	vldr	s14, [r4]
 8014c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014c66:	edc5 7a34 	vstr	s15, [r5, #208]	; 0xd0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8014c6a:	9901      	ldr	r1, [sp, #4]
 8014c6c:	201c      	movs	r0, #28
 8014c6e:	f7fd f887 	bl	8011d80 <mpool_alloc>
 8014c72:	f8c5 00cc 	str.w	r0, [r5, #204]	; 0xcc
    tr->tpool->size = 0;
 8014c76:	9b00      	ldr	r3, [sp, #0]
 8014c78:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014c7c:	2400      	movs	r4, #0
 8014c7e:	6154      	str	r4, [r2, #20]
    tr->tpool->next_free = 0;
 8014c80:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014c84:	619c      	str	r4, [r3, #24]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8014c86:	2c03      	cmp	r4, #3
 8014c88:	dc2d      	bgt.n	8014ce6 <tract_initToPool+0x446>
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8014c8a:	9b00      	ldr	r3, [sp, #0]
 8014c8c:	f8d3 50cc 	ldr.w	r5, [r3, #204]	; 0xcc
 8014c90:	9901      	ldr	r1, [sp, #4]
 8014c92:	2020      	movs	r0, #32
 8014c94:	f7fd f874 	bl	8011d80 <mpool_alloc>
 8014c98:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8014c9c:	9b00      	ldr	r3, [sp, #0]
 8014c9e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014ca2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014ca6:	2101      	movs	r1, #1
 8014ca8:	7511      	strb	r1, [r2, #20]
        tr->tpool->pool[i]->id = i;
 8014caa:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014cae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014cb2:	6194      	str	r4, [r2, #24]
        tr->tpool->pool[i]->position = 0;
 8014cb4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014cb8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8014cc0:	9a00      	ldr	r2, [sp, #0]
 8014cc2:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
 8014cc6:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8014cca:	2300      	movs	r3, #0
 8014ccc:	604b      	str	r3, [r1, #4]
        tr->tpool->pool[i]->strength = 0;
 8014cce:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 8014cd2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8014cd6:	60cb      	str	r3, [r1, #12]
        tr->tpool->pool[i]->exponent = 0;
 8014cd8:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8014cdc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8014ce0:	6113      	str	r3, [r2, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8014ce2:	3401      	adds	r4, #1
 8014ce4:	e7cf      	b.n	8014c86 <tract_initToPool+0x3e6>
}
 8014ce6:	b003      	add	sp, #12
 8014ce8:	ecbd 8b04 	vpop	{d8-d9}
 8014cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cee:	bf00      	nop

08014cf0 <append_transient>:



int append_transient(transient_pool* const po, int position)
{
	_transient_pool* pool = *po;
 8014cf0:	6803      	ldr	r3, [r0, #0]
	_transient* t;
	int i;
    int free_id;

    free_id = pool->next_free;
 8014cf2:	6998      	ldr	r0, [r3, #24]
    if(pool->size == MAX_TRANSIENTS) return 0;
 8014cf4:	695a      	ldr	r2, [r3, #20]
 8014cf6:	2a04      	cmp	r2, #4
 8014cf8:	d02c      	beq.n	8014d54 <append_transient+0x64>
{
 8014cfa:	b410      	push	{r4}

    if(free_id == -1) {
 8014cfc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014d00:	d026      	beq.n	8014d50 <append_transient+0x60>
                break;
            }
        }
    }

    if(free_id == -1) return 0;
 8014d02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014d06:	d015      	beq.n	8014d34 <append_transient+0x44>

    t = pool->pool[free_id];
 8014d08:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    t->next = pool->root;
 8014d0c:	6918      	ldr	r0, [r3, #16]
 8014d0e:	61d0      	str	r0, [r2, #28]
    pool->root = t;
 8014d10:	611a      	str	r2, [r3, #16]
    pool->size++;
 8014d12:	6958      	ldr	r0, [r3, #20]
 8014d14:	3001      	adds	r0, #1
 8014d16:	6158      	str	r0, [r3, #20]
    t->is_free = 0;
 8014d18:	2000      	movs	r0, #0
 8014d1a:	7510      	strb	r0, [r2, #20]
    t->time_alive = 0.0f;
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	6050      	str	r0, [r2, #4]
    t->lifetime = 0.2f;
 8014d20:	480d      	ldr	r0, [pc, #52]	; (8014d58 <append_transient+0x68>)
 8014d22:	6090      	str	r0, [r2, #8]
    t->strength = 0.3f;
 8014d24:	480d      	ldr	r0, [pc, #52]	; (8014d5c <append_transient+0x6c>)
 8014d26:	60d0      	str	r0, [r2, #12]
    t->exponent = 200.0f;
 8014d28:	480d      	ldr	r0, [pc, #52]	; (8014d60 <append_transient+0x70>)
 8014d2a:	6110      	str	r0, [r2, #16]
    t->position = position;
 8014d2c:	6011      	str	r1, [r2, #0]
    pool->next_free = -1;
 8014d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d32:	619a      	str	r2, [r3, #24]
    return 0;
}
 8014d34:	2000      	movs	r0, #0
 8014d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d3a:	4770      	bx	lr
        for(i = 0; i < MAX_TRANSIENTS; i++) {
 8014d3c:	3201      	adds	r2, #1
 8014d3e:	2a03      	cmp	r2, #3
 8014d40:	dcdf      	bgt.n	8014d02 <append_transient+0x12>
            if(pool->pool[i]->is_free) {
 8014d42:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8014d46:	7d24      	ldrb	r4, [r4, #20]
 8014d48:	2c00      	cmp	r4, #0
 8014d4a:	d0f7      	beq.n	8014d3c <append_transient+0x4c>
                free_id = i;
 8014d4c:	4610      	mov	r0, r2
 8014d4e:	e7d8      	b.n	8014d02 <append_transient+0x12>
        for(i = 0; i < MAX_TRANSIENTS; i++) {
 8014d50:	2200      	movs	r2, #0
 8014d52:	e7f4      	b.n	8014d3e <append_transient+0x4e>
}
 8014d54:	2000      	movs	r0, #0
 8014d56:	4770      	bx	lr
 8014d58:	3e4ccccd 	.word	0x3e4ccccd
 8014d5c:	3e99999a 	.word	0x3e99999a
 8014d60:	43480000 	.word	0x43480000

08014d64 <move_towards>:

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 8014d64:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8014d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d6c:	d50b      	bpl.n	8014d86 <move_towards+0x22>
        tmp = current + amt_up;
 8014d6e:	ee30 0a01 	vadd.f32	s0, s0, s2
        return MIN(tmp, target);
 8014d72:	eef4 0ac0 	vcmpe.f32	s1, s0
 8014d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7a:	dd01      	ble.n	8014d80 <move_towards+0x1c>
 8014d7c:	eef0 0a40 	vmov.f32	s1, s0
 8014d80:	eeb0 0a60 	vmov.f32	s0, s1
 8014d84:	4770      	bx	lr
    } else {
        tmp = current - amt_down;
 8014d86:	ee30 0a61 	vsub.f32	s0, s0, s3
        return MAX(tmp, target);
 8014d8a:	eef4 0ac0 	vcmpe.f32	s1, s0
 8014d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d92:	d501      	bpl.n	8014d98 <move_towards+0x34>
 8014d94:	eef0 0a40 	vmov.f32	s1, s0
 8014d98:	eeb0 0a60 	vmov.f32	s0, s1
    }
    return 0.0f;
}
 8014d9c:	4770      	bx	lr
	...

08014da0 <tract_reshape>:
{
 8014da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014da2:	ed2d 8b02 	vpush	{d8}
	_tract* tr = *t;
 8014da6:	6805      	ldr	r5, [r0, #0]
    amount = tr->block_time * tr->movement_speed;
 8014da8:	ed95 8a2a 	vldr	s16, [r5, #168]	; 0xa8
 8014dac:	edd5 7a27 	vldr	s15, [r5, #156]	; 0x9c
 8014db0:	ee28 8a27 	vmul.f32	s16, s16, s15
    current_obstruction = -1;
 8014db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    for(i = 0; i < tr->n; i++) {
 8014db8:	2400      	movs	r4, #0
 8014dba:	e00a      	b.n	8014dd2 <tract_reshape+0x32>
        if(i < tr->nose_start) slow_return = 0.6f;
 8014dbc:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8014ea0 <tract_reshape+0x100>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8014dc0:	ee78 1a08 	vadd.f32	s3, s16, s16
 8014dc4:	ee21 1a08 	vmul.f32	s2, s2, s16
 8014dc8:	f7ff ffcc 	bl	8014d64 <move_towards>
 8014dcc:	ed86 0a00 	vstr	s0, [r6]
    for(i = 0; i < tr->n; i++) {
 8014dd0:	3401      	adds	r4, #1
 8014dd2:	686b      	ldr	r3, [r5, #4]
 8014dd4:	42a3      	cmp	r3, r4
 8014dd6:	dd2f      	ble.n	8014e38 <tract_reshape+0x98>
        diameter = tr->diameter[i];
 8014dd8:	68ee      	ldr	r6, [r5, #12]
 8014dda:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8014dde:	ed96 0a00 	vldr	s0, [r6]
        target_diameter = tr->target_diameter[i];
 8014de2:	696b      	ldr	r3, [r5, #20]
 8014de4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014de8:	edd3 0a00 	vldr	s1, [r3]
        if(diameter < 0.001f) current_obstruction = i;
 8014dec:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8014ea4 <tract_reshape+0x104>
 8014df0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df8:	d500      	bpl.n	8014dfc <tract_reshape+0x5c>
 8014dfa:	4627      	mov	r7, r4
        if(i < tr->nose_start) slow_return = 0.6f;
 8014dfc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014dfe:	42a3      	cmp	r3, r4
 8014e00:	dcdc      	bgt.n	8014dbc <tract_reshape+0x1c>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8014e02:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8014e04:	42a2      	cmp	r2, r4
 8014e06:	dd14      	ble.n	8014e32 <tract_reshape+0x92>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8014e08:	1ae1      	subs	r1, r4, r3
 8014e0a:	ee07 1a10 	vmov	s14, r1
 8014e0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e12:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014ea8 <tract_reshape+0x108>
 8014e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e1a:	1ad2      	subs	r2, r2, r3
 8014e1c:	ee07 2a90 	vmov	s15, r2
 8014e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014e24:	ee87 1a27 	vdiv.f32	s2, s14, s15
            slow_return =
 8014e28:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8014ea0 <tract_reshape+0x100>
 8014e2c:	ee31 1a27 	vadd.f32	s2, s2, s15
 8014e30:	e7c6      	b.n	8014dc0 <tract_reshape+0x20>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8014e32:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014e36:	e7c3      	b.n	8014dc0 <tract_reshape+0x20>
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 8014e38:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	db02      	blt.n	8014e46 <tract_reshape+0xa6>
 8014e40:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8014e44:	d01d      	beq.n	8014e82 <tract_reshape+0xe2>
    tr->last_obstruction = current_obstruction;
 8014e46:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8014e4a:	6eac      	ldr	r4, [r5, #104]	; 0x68
 8014e4c:	eddf 1a17 	vldr	s3, [pc, #92]	; 8014eac <tract_reshape+0x10c>
 8014e50:	ee68 1a21 	vmul.f32	s3, s16, s3
 8014e54:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 8014e58:	ee28 1a01 	vmul.f32	s2, s16, s2
 8014e5c:	edd5 0a22 	vldr	s1, [r5, #136]	; 0x88
 8014e60:	ed94 0a00 	vldr	s0, [r4]
 8014e64:	f7ff ff7e 	bl	8014d64 <move_towards>
 8014e68:	ed84 0a00 	vstr	s0, [r4]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 8014e6c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8014e6e:	edd3 7a00 	vldr	s15, [r3]
 8014e72:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8014e74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e78:	edc3 7a00 	vstr	s15, [r3]
}
 8014e7c:	ecbd 8b02 	vpop	{d8}
 8014e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            tr->noseA[0] < 0.05f) {
 8014e82:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8014e84:	ed93 7a00 	vldr	s14, [r3]
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 8014e88:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014eb0 <tract_reshape+0x110>
 8014e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e94:	d5d7      	bpl.n	8014e46 <tract_reshape+0xa6>
        append_transient(&tr->tpool, tr->last_obstruction);
 8014e96:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
 8014e9a:	f7ff ff29 	bl	8014cf0 <append_transient>
 8014e9e:	e7d2      	b.n	8014e46 <tract_reshape+0xa6>
 8014ea0:	3f19999a 	.word	0x3f19999a
 8014ea4:	3a83126f 	.word	0x3a83126f
 8014ea8:	3ecccccd 	.word	0x3ecccccd
 8014eac:	3dcccccd 	.word	0x3dcccccd
 8014eb0:	3d4ccccd 	.word	0x3d4ccccd

08014eb4 <tVoc_initToPool>:
{
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
 8014eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eb6:	b083      	sub	sp, #12
 8014eb8:	4607      	mov	r7, r0
 8014eba:	460d      	mov	r5, r1
 8014ebc:	4616      	mov	r6, r2
	_tMempool* m = *mp;
 8014ebe:	6819      	ldr	r1, [r3, #0]
 8014ec0:	9101      	str	r1, [sp, #4]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8014ec2:	2018      	movs	r0, #24
 8014ec4:	f7fc ff5c 	bl	8011d80 <mpool_alloc>
 8014ec8:	4604      	mov	r4, r0
 8014eca:	6038      	str	r0, [r7, #0]
	v->mempool = m;
 8014ecc:	9b01      	ldr	r3, [sp, #4]
 8014ece:	f840 3b04 	str.w	r3, [r0], #4
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
 8014ed2:	a901      	add	r1, sp, #4
 8014ed4:	f7ff f84a 	bl	8013f6c <glottis_initToPool>
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 8014ed8:	ab01      	add	r3, sp, #4
 8014eda:	4632      	mov	r2, r6
 8014edc:	4629      	mov	r1, r5
 8014ede:	f104 0008 	add.w	r0, r4, #8
 8014ee2:	f7ff fcdd 	bl	80148a0 <tract_initToPool>
	v->counter = 0;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	6123      	str	r3, [r4, #16]
}
 8014eea:	b003      	add	sp, #12
 8014eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014eee <tVoc_init>:
{
 8014eee:	b508      	push	{r3, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
 8014ef0:	3318      	adds	r3, #24
 8014ef2:	f7ff ffdf 	bl	8014eb4 <tVoc_initToPool>
}
 8014ef6:	bd08      	pop	{r3, pc}

08014ef8 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8014ef8:	b538      	push	{r3, r4, r5, lr}
 8014efa:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 8014efe:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8014f00:	6923      	ldr	r3, [r4, #16]
 8014f02:	b393      	cbz	r3, 8014f6a <tVoc_tick+0x72>
		*/
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8014f04:	edd4 7a04 	vldr	s15, [r4, #16]
 8014f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f0c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014fa8 <tVoc_tick+0xb0>
 8014f10:	ee27 8a87 	vmul.f32	s16, s15, s14
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8014f14:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014f1c:	ee67 8a87 	vmul.f32	s17, s15, s14
	glot = glottis_compute(&v->glot);
 8014f20:	1d20      	adds	r0, r4, #4
 8014f22:	f7ff f84b 	bl	8013fbc <glottis_compute>
 8014f26:	eeb0 9a40 	vmov.f32	s18, s0

	tract_compute(&v->tr, glot, lambda1);
 8014f2a:	f104 0508 	add.w	r5, r4, #8
 8014f2e:	eef0 0a48 	vmov.f32	s1, s16
 8014f32:	4628      	mov	r0, r5
 8014f34:	f7ff fb08 	bl	8014548 <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8014f38:	68a3      	ldr	r3, [r4, #8]
 8014f3a:	ed93 8a28 	vldr	s16, [r3, #160]	; 0xa0
 8014f3e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8014f42:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014f46:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014fac <tVoc_tick+0xb4>
 8014f4a:	ee38 8a27 	vadd.f32	s16, s16, s15

	if (v->doubleCompute)
 8014f4e:	68e3      	ldr	r3, [r4, #12]
 8014f50:	b9a3      	cbnz	r3, 8014f7c <tVoc_tick+0x84>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.25f;
	}
	else
	{
		vocal_output *= 0.5f;
 8014f52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014f56:	ee28 0a27 	vmul.f32	s0, s16, s15
	}
	//v->buf[i] = vocal_output * 0.125f;


	//vocal_output = glot;
	v->counter = (v->counter + 1) & 63;
 8014f5a:	6923      	ldr	r3, [r4, #16]
 8014f5c:	3301      	adds	r3, #1
 8014f5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014f62:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8014f64:	ecbd 8b04 	vpop	{d8-d9}
 8014f68:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8014f6a:	f104 0508 	add.w	r5, r4, #8
 8014f6e:	4628      	mov	r0, r5
 8014f70:	f7ff ff16 	bl	8014da0 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8014f74:	4628      	mov	r0, r5
 8014f76:	f7ff f897 	bl	80140a8 <tract_calculate_reflections>
 8014f7a:	e7c3      	b.n	8014f04 <tVoc_tick+0xc>
		tract_compute(&v->tr, glot, lambda2);
 8014f7c:	eef0 0a68 	vmov.f32	s1, s17
 8014f80:	eeb0 0a49 	vmov.f32	s0, s18
 8014f84:	4628      	mov	r0, r5
 8014f86:	f7ff fadf 	bl	8014548 <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8014f8a:	68a3      	ldr	r3, [r4, #8]
 8014f8c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8014f90:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8014f94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f98:	ee77 7a88 	vadd.f32	s15, s15, s16
		vocal_output *= 0.25f;
 8014f9c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8014fa0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014fa4:	e7d9      	b.n	8014f5a <tVoc_tick+0x62>
 8014fa6:	bf00      	nop
 8014fa8:	3c800000 	.word	0x3c800000
 8014fac:	00000000 	.word	0x00000000

08014fb0 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 511;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 8014fb0:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 8014fb2:	60d9      	str	r1, [r3, #12]
}
 8014fb4:	4770      	bx	lr

08014fb6 <tVoc_setFreq>:
}


void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
 8014fb6:	6803      	ldr	r3, [r0, #0]
	v->glot->freq = freq;
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014fbe:	4770      	bx	lr

08014fc0 <tVoc_get_tract_diameters>:
	return &v->glot->freq;
}

Lfloat* tVoc_get_tract_diameters(tVoc* const voc)
{
	_tVoc* v = *voc;
 8014fc0:	6803      	ldr	r3, [r0, #0]
	return v->tr->target_diameter;
 8014fc2:	689b      	ldr	r3, [r3, #8]
}
 8014fc4:	6958      	ldr	r0, [r3, #20]
 8014fc6:	4770      	bx	lr

08014fc8 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
	v->tr->turbuluencePointPosition[1] = touch_index;
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
 8014fc8:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 8014fca:	6800      	ldr	r0, [r0, #0]
	tract_newLength(&v->tr, newLength);
 8014fcc:	3008      	adds	r0, #8
 8014fce:	f7ff f8eb 	bl	80141a8 <tract_newLength>
}
 8014fd2:	bd08      	pop	{r3, pc}

08014fd4 <tVoc_set_tenseness>:

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
 8014fd4:	6803      	ldr	r3, [r0, #0]
	v->glot->tenseness = tenseness;
 8014fd6:	685b      	ldr	r3, [r3, #4]
 8014fd8:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014fdc:	4770      	bx	lr

08014fde <tVoc_set_velum>:
	_tVoc* v = *voc;
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
 8014fde:	6803      	ldr	r3, [r0, #0]
	v->tr->velum_target = velum;
 8014fe0:	689b      	ldr	r3, [r3, #8]
 8014fe2:	ed83 0a22 	vstr	s0, [r3, #136]	; 0x88
}
 8014fe6:	4770      	bx	lr

08014fe8 <tVoc_set_tongue_and_touch_diameters>:
	return &v->tr->velum_target;
}

//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8014fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fec:	ed2d 8b06 	vpush	{d8-d10}
 8014ff0:	eef0 8a40 	vmov.f32	s17, s0
 8014ff4:	eeb0 9a60 	vmov.f32	s18, s1
 8014ff8:	eeb0 aa41 	vmov.f32	s20, s2
 8014ffc:	eef0 aa61 	vmov.f32	s21, s3
 8015000:	460f      	mov	r7, r1
	int i;

	_tVoc* v = *voc;
 8015002:	6806      	ldr	r6, [r0, #0]

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8015004:	68b2      	ldr	r2, [r6, #8]
 8015006:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8015008:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801500a:	1a9b      	subs	r3, r3, r2
 801500c:	ee07 3a90 	vmov	s15, r3
 8015010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015018:	eec7 9a27 	vdiv.f32	s19, s14, s15

	for (i = 0; i < v->tr->n; i++)
 801501c:	2300      	movs	r3, #0
 801501e:	e007      	b.n	8015030 <tVoc_set_tongue_and_touch_diameters+0x48>
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 8015020:	6912      	ldr	r2, [r2, #16]
 8015022:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8015026:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801502a:	6812      	ldr	r2, [r2, #0]
 801502c:	600a      	str	r2, [r1, #0]
	for (i = 0; i < v->tr->n; i++)
 801502e:	3301      	adds	r3, #1
 8015030:	68b2      	ldr	r2, [r6, #8]
 8015032:	6851      	ldr	r1, [r2, #4]
 8015034:	4299      	cmp	r1, r3
 8015036:	dcf3      	bgt.n	8015020 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8015038:	6c54      	ldr	r4, [r2, #68]	; 0x44
 801503a:	e00c      	b.n	8015056 <tVoc_set_tongue_and_touch_diameters+0x6e>
		{
			curve *= 0.8f;
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
 801503c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8015238 <tVoc_set_tongue_and_touch_diameters+0x250>
 8015040:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
		theDiameters[i] = 1.5f - curve;
 8015044:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8015048:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801504c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015050:	edc3 7a00 	vstr	s15, [r3]
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8015054:	3401      	adds	r4, #1
 8015056:	f8d6 8008 	ldr.w	r8, [r6, #8]
 801505a:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
 801505e:	42a5      	cmp	r5, r4
 8015060:	dd39      	ble.n	80150d6 <tVoc_set_tongue_and_touch_diameters+0xee>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8015062:	ee07 4a90 	vmov	s15, r4
 8015066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801506a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801506e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015072:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8015228 <tVoc_set_tongue_and_touch_diameters+0x240>
 8015076:	ee27 7b06 	vmul.f64	d7, d7, d6
 801507a:	eeb7 0ae9 	vcvt.f64.f32	d0, s19
 801507e:	ee20 0b07 	vmul.f64	d0, d0, d7
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 8015082:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015086:	ee39 7a67 	vsub.f32	s14, s18, s15
 801508a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 801523c <tVoc_set_tongue_and_touch_diameters+0x254>
 801508e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015092:	ee37 7a27 	vadd.f32	s14, s14, s15
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8015096:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801509a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801509e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8015240 <tVoc_set_tongue_and_touch_diameters+0x258>
 80150a2:	ee37 8a87 	vadd.f32	s16, s15, s14
 80150a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80150aa:	f001 fa89 	bl	80165c0 <cosf>
 80150ae:	ee68 7a00 	vmul.f32	s15, s16, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 80150b2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80150b6:	1e9a      	subs	r2, r3, #2
 80150b8:	42a2      	cmp	r2, r4
 80150ba:	d002      	beq.n	80150c2 <tVoc_set_tongue_and_touch_diameters+0xda>
 80150bc:	1e6a      	subs	r2, r5, #1
 80150be:	42a2      	cmp	r2, r4
 80150c0:	d103      	bne.n	80150ca <tVoc_set_tongue_and_touch_diameters+0xe2>
			curve *= 0.8f;
 80150c2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8015244 <tVoc_set_tongue_and_touch_diameters+0x25c>
 80150c6:	ee67 7a87 	vmul.f32	s15, s15, s14
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 80150ca:	42a3      	cmp	r3, r4
 80150cc:	d0b6      	beq.n	801503c <tVoc_set_tongue_and_touch_diameters+0x54>
 80150ce:	3d02      	subs	r5, #2
 80150d0:	42a5      	cmp	r5, r4
 80150d2:	d1b7      	bne.n	8015044 <tVoc_set_tongue_and_touch_diameters+0x5c>
 80150d4:	e7b2      	b.n	801503c <tVoc_set_tongue_and_touch_diameters+0x54>
	}

	//now do additional constrictions (touch position)
	Lfloat width=2.0f;
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 80150d6:	edd8 7a01 	vldr	s15, [r8, #4]
 80150da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150de:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8015248 <tVoc_set_tongue_and_touch_diameters+0x260>
 80150e2:	ee27 8a88 	vmul.f32	s16, s15, s16
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
 80150e6:	ed9f 7a59 	vldr	s14, [pc, #356]	; 801524c <tVoc_set_tongue_and_touch_diameters+0x264>
 80150ea:	ee67 6a87 	vmul.f32	s13, s15, s14
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 80150ee:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8015250 <tVoc_set_tongue_and_touch_diameters+0x268>
 80150f2:	ee27 7a87 	vmul.f32	s14, s15, s14
	if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 80150f6:	eeb4 7aca 	vcmpe.f32	s14, s20
 80150fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150fe:	dc12      	bgt.n	8015126 <tVoc_set_tongue_and_touch_diameters+0x13e>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8015100:	ed98 6a10 	vldr	s12, [r8, #64]	; 0x40
 8015104:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015108:	eeb4 6aca 	vcmpe.f32	s12, s20
 801510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015110:	d92a      	bls.n	8015168 <tVoc_set_tongue_and_touch_diameters+0x180>
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8015112:	ee7a 5a47 	vsub.f32	s11, s20, s14
 8015116:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801511a:	ee36 6a47 	vsub.f32	s12, s12, s14
 801511e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8015122:	ee38 8a47 	vsub.f32	s16, s16, s14
	Lfloat invWidth = 1.0f / width;
 8015126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801512a:	eec7 8a08 	vdiv.f32	s17, s14, s16
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 801512e:	eef4 7aca 	vcmpe.f32	s15, s20
 8015132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015136:	dd72      	ble.n	801521e <tVoc_set_tongue_and_touch_diameters+0x236>
 8015138:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801513c:	eef4 aae7 	vcmpe.f32	s21, s15
 8015140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015144:	d56b      	bpl.n	801521e <tVoc_set_tongue_and_touch_diameters+0x236>
	{
		int intIndex = roundf(touch_index);
 8015146:	fef8 7a4a 	vrinta.f32	s15, s20
 801514a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801514e:	ee17 8a90 	vmov	r8, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8015152:	fefa 7a48 	vrintp.f32	s15, s16
 8015156:	eef1 7a67 	vneg.f32	s15, s15
 801515a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801515e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015162:	ee17 4a90 	vmov	r4, s15
 8015166:	e016      	b.n	8015196 <tVoc_set_tongue_and_touch_diameters+0x1ae>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8015168:	eeb0 8a66 	vmov.f32	s16, s13
 801516c:	e7db      	b.n	8015126 <tVoc_set_tongue_and_touch_diameters+0x13e>
		{
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
			Lfloat relpos = (intIndex+i) - touch_index;
			relpos = fabsf(relpos)-0.5f;
			Lfloat shrink;
			if (relpos <= 0.0f) shrink = 0.0f;
 801516e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8015254 <tVoc_set_tongue_and_touch_diameters+0x26c>
			else if (relpos > width) shrink = 1.0f;
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
			if (touch_diameter < theDiameters[intIndex+i])
 8015172:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015176:	edd5 7a00 	vldr	s15, [r5]
 801517a:	eef4 7aea 	vcmpe.f32	s15, s21
 801517e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015182:	dd07      	ble.n	8015194 <tVoc_set_tongue_and_touch_diameters+0x1ac>
			{
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8015184:	ee77 7aea 	vsub.f32	s15, s15, s21
 8015188:	ee67 7a87 	vmul.f32	s15, s15, s14
 801518c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8015190:	edc5 7a00 	vstr	s15, [r5]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8015194:	3401      	adds	r4, #1
 8015196:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801519a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801519e:	ee07 4a10 	vmov	s14, r4
 80151a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80151aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ae:	d536      	bpl.n	801521e <tVoc_set_tongue_and_touch_diameters+0x236>
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80151b0:	eb14 0508 	adds.w	r5, r4, r8
 80151b4:	d4ee      	bmi.n	8015194 <tVoc_set_tongue_and_touch_diameters+0x1ac>
 80151b6:	68b3      	ldr	r3, [r6, #8]
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	429d      	cmp	r5, r3
 80151bc:	daea      	bge.n	8015194 <tVoc_set_tongue_and_touch_diameters+0x1ac>
			Lfloat relpos = (intIndex+i) - touch_index;
 80151be:	ee07 5a90 	vmov	s15, r5
 80151c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80151c6:	ee37 7a4a 	vsub.f32	s14, s14, s20
			relpos = fabsf(relpos)-0.5f;
 80151ca:	eeb0 7ac7 	vabs.f32	s14, s14
 80151ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80151d2:	ee37 7a67 	vsub.f32	s14, s14, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 80151d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80151da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151de:	d9c6      	bls.n	801516e <tVoc_set_tongue_and_touch_diameters+0x186>
			else if (relpos > width) shrink = 1.0f;
 80151e0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80151e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e8:	d416      	bmi.n	8015218 <tVoc_set_tongue_and_touch_diameters+0x230>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 80151ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80151ee:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8015230 <tVoc_set_tongue_and_touch_diameters+0x248>
 80151f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151f6:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80151fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80151fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015202:	f001 f9dd 	bl	80165c0 <cosf>
 8015206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801520a:	ee37 7a40 	vsub.f32	s14, s14, s0
 801520e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015216:	e7ac      	b.n	8015172 <tVoc_set_tongue_and_touch_diameters+0x18a>
			else if (relpos > width) shrink = 1.0f;
 8015218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801521c:	e7a9      	b.n	8015172 <tVoc_set_tongue_and_touch_diameters+0x18a>
			}
		}
	}

}
 801521e:	ecbd 8b06 	vpop	{d8-d10}
 8015222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015226:	bf00      	nop
 8015228:	4d2562ef 	.word	0x4d2562ef
 801522c:	400ba561 	.word	0x400ba561
 8015230:	54442d18 	.word	0x54442d18
 8015234:	400921fb 	.word	0x400921fb
 8015238:	3f70a3d7 	.word	0x3f70a3d7
 801523c:	3f2aaaab 	.word	0x3f2aaaab
 8015240:	3fd9999a 	.word	0x3fd9999a
 8015244:	3f4ccccd 	.word	0x3f4ccccd
 8015248:	3e68ba2f 	.word	0x3e68ba2f
 801524c:	3de8ba2f 	.word	0x3de8ba2f
 8015250:	3f11745d 	.word	0x3f11745d
 8015254:	00000000 	.word	0x00000000

08015258 <tVoc_set_tongue_shape_and_touch>:
{
 8015258:	b510      	push	{r4, lr}
 801525a:	ed2d 8b06 	vpush	{d8-d10}
 801525e:	b082      	sub	sp, #8
 8015260:	eeb0 9a40 	vmov.f32	s18, s0
 8015264:	eef0 8a60 	vmov.f32	s17, s1
 8015268:	eeb0 aa41 	vmov.f32	s20, s2
 801526c:	eeb0 8a61 	vmov.f32	s16, s3
	_tVoc* v = *voc;
 8015270:	6804      	ldr	r4, [r0, #0]
 8015272:	9401      	str	r4, [sp, #4]
	diameters = tVoc_get_tract_diameters(&v);
 8015274:	a801      	add	r0, sp, #4
 8015276:	f7ff fea3 	bl	8014fc0 <tVoc_get_tract_diameters>
 801527a:	4601      	mov	r1, r0
	tongue_diameter *= 1.45f;
 801527c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8015310 <tVoc_set_tongue_shape_and_touch+0xb8>
 8015280:	ee68 8aa7 	vmul.f32	s17, s17, s15
	tongue_diameter += 2.05f;
 8015284:	eddf 7a23 	vldr	s15, [pc, #140]	; 8015314 <tVoc_set_tongue_shape_and_touch+0xbc>
 8015288:	ee78 8aa7 	vadd.f32	s17, s17, s15
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 801528c:	68a3      	ldr	r3, [r4, #8]
 801528e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8015292:	edd3 9a14 	vldr	s19, [r3, #80]	; 0x50
 8015296:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801529a:	ee27 0a89 	vmul.f32	s0, s15, s18
 801529e:	ee79 9a80 	vadd.f32	s19, s19, s0
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 80152a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80152a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152aa:	d42d      	bmi.n	8015308 <tVoc_set_tongue_shape_and_touch+0xb0>
	touch_diameter *= 1.6f;
 80152ac:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8015318 <tVoc_set_tongue_shape_and_touch+0xc0>
 80152b0:	ee28 9a27 	vmul.f32	s18, s16, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 80152b4:	ed93 8a01 	vldr	s16, [r3, #4]
 80152b8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80152bc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80152c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80152c4:	ee28 8a0a 	vmul.f32	s16, s16, s20
 80152c8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80152cc:	ee38 8a27 	vadd.f32	s16, s16, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 80152d0:	eef0 1a49 	vmov.f32	s3, s18
 80152d4:	eeb0 1a48 	vmov.f32	s2, s16
 80152d8:	eef0 0a68 	vmov.f32	s1, s17
 80152dc:	eeb0 0a69 	vmov.f32	s0, s19
 80152e0:	a801      	add	r0, sp, #4
 80152e2:	f7ff fe81 	bl	8014fe8 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 80152e6:	9b01      	ldr	r3, [sp, #4]
 80152e8:	689a      	ldr	r2, [r3, #8]
 80152ea:	edc2 9a2f 	vstr	s19, [r2, #188]	; 0xbc
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 80152ee:	689a      	ldr	r2, [r3, #8]
 80152f0:	edc2 8a31 	vstr	s17, [r2, #196]	; 0xc4
	v->tr->turbuluencePointPosition[1] = touch_index;
 80152f4:	689a      	ldr	r2, [r3, #8]
 80152f6:	ed82 8a30 	vstr	s16, [r2, #192]	; 0xc0
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 80152fa:	689b      	ldr	r3, [r3, #8]
 80152fc:	ed83 9a32 	vstr	s18, [r3, #200]	; 0xc8
}
 8015300:	b002      	add	sp, #8
 8015302:	ecbd 8b06 	vpop	{d8-d10}
 8015306:	bd10      	pop	{r4, pc}
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 8015308:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801531c <tVoc_set_tongue_shape_and_touch+0xc4>
 801530c:	e7ce      	b.n	80152ac <tVoc_set_tongue_shape_and_touch+0x54>
 801530e:	bf00      	nop
 8015310:	3fb9999a 	.word	0x3fb9999a
 8015314:	40033333 	.word	0x40033333
 8015318:	3fcccccd 	.word	0x3fcccccd
 801531c:	00000000 	.word	0x00000000

08015320 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8015320:	4770      	bx	lr
	...

08015324 <LEAF_init>:
{
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	ed2d 8b02 	vpush	{d8}
 801532a:	4604      	mov	r4, r0
 801532c:	eeb0 8a40 	vmov.f32	s16, s0
 8015330:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
 8015332:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 8015334:	f7fc fd19 	bl	8011d6a <leaf_pool_init>
    leaf->sampleRate = sr;
 8015338:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 801533c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015340:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8015344:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8015348:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8015380 <LEAF_init+0x5c>
 801534c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015350:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 8015354:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8015356:	2300      	movs	r3, #0
 8015358:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801535a:	4a0a      	ldr	r2, [pc, #40]	; (8015384 <LEAF_init+0x60>)
 801535c:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 801535e:	e006      	b.n	801536e <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
 8015360:	f103 020e 	add.w	r2, r3, #14
 8015364:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015368:	2100      	movs	r1, #0
 801536a:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 801536c:	3301      	adds	r3, #1
 801536e:	2b02      	cmp	r3, #2
 8015370:	ddf6      	ble.n	8015360 <LEAF_init+0x3c>
    leaf->allocCount = 0;
 8015372:	2300      	movs	r3, #0
 8015374:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
 8015376:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8015378:	ecbd 8b02 	vpop	{d8}
 801537c:	bd38      	pop	{r3, r4, r5, pc}
 801537e:	bf00      	nop
 8015380:	40c90fdb 	.word	0x40c90fdb
 8015384:	08015321 	.word	0x08015321

08015388 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8015388:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 801538a:	f101 030e 	add.w	r3, r1, #14
 801538e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015392:	2401      	movs	r4, #1
 8015394:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 8015396:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015398:	4798      	blx	r3
}
 801539a:	bd10      	pop	{r4, pc}

0801539c <arm_fir_interpolate_init_f32>:
 801539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539e:	fbb2 f6f1 	udiv	r6, r2, r1
 80153a2:	fb01 2416 	mls	r4, r1, r6, r2
 80153a6:	9f06      	ldr	r7, [sp, #24]
 80153a8:	b984      	cbnz	r4, 80153cc <arm_fir_interpolate_init_f32+0x30>
 80153aa:	6043      	str	r3, [r0, #4]
 80153ac:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80153b0:	9b07      	ldr	r3, [sp, #28]
 80153b2:	4605      	mov	r5, r0
 80153b4:	7001      	strb	r1, [r0, #0]
 80153b6:	4621      	mov	r1, r4
 80153b8:	441a      	add	r2, r3
 80153ba:	8046      	strh	r6, [r0, #2]
 80153bc:	4638      	mov	r0, r7
 80153be:	4432      	add	r2, r6
 80153c0:	0092      	lsls	r2, r2, #2
 80153c2:	f000 fca1 	bl	8015d08 <memset>
 80153c6:	60af      	str	r7, [r5, #8]
 80153c8:	4620      	mov	r0, r4
 80153ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153cc:	f06f 0001 	mvn.w	r0, #1
 80153d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153d2:	bf00      	nop

080153d4 <arm_fir_interpolate_f32>:
 80153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80153dc:	b08f      	sub	sp, #60	; 0x3c
 80153de:	8845      	ldrh	r5, [r0, #2]
 80153e0:	9202      	str	r2, [sp, #8]
 80153e2:	442c      	add	r4, r5
 80153e4:	6882      	ldr	r2, [r0, #8]
 80153e6:	930d      	str	r3, [sp, #52]	; 0x34
 80153e8:	089b      	lsrs	r3, r3, #2
 80153ea:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 80153ee:	9107      	str	r1, [sp, #28]
 80153f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80153f2:	4616      	mov	r6, r2
 80153f4:	9209      	str	r2, [sp, #36]	; 0x24
 80153f6:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80153fa:	970a      	str	r7, [sp, #40]	; 0x28
 80153fc:	930c      	str	r3, [sp, #48]	; 0x30
 80153fe:	f000 811b 	beq.w	8015638 <arm_fir_interpolate_f32+0x264>
 8015402:	462a      	mov	r2, r5
 8015404:	468e      	mov	lr, r1
 8015406:	4619      	mov	r1, r3
 8015408:	4635      	mov	r5, r6
 801540a:	4613      	mov	r3, r2
 801540c:	ea4f 0892 	mov.w	r8, r2, lsr #2
 8015410:	f106 0c1c 	add.w	ip, r6, #28
 8015414:	f10e 0210 	add.w	r2, lr, #16
 8015418:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801541c:	f003 0903 	and.w	r9, r3, #3
 8015420:	f107 0310 	add.w	r3, r7, #16
 8015424:	f8cd b020 	str.w	fp, [sp, #32]
 8015428:	4693      	mov	fp, r2
 801542a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 801542e:	f106 030c 	add.w	r3, r6, #12
 8015432:	4466      	add	r6, ip
 8015434:	18eb      	adds	r3, r5, r3
 8015436:	9301      	str	r3, [sp, #4]
 8015438:	f85b 3c10 	ldr.w	r3, [fp, #-16]
 801543c:	9a03      	ldr	r2, [sp, #12]
 801543e:	f842 3c10 	str.w	r3, [r2, #-16]
 8015442:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8015446:	f842 3c0c 	str.w	r3, [r2, #-12]
 801544a:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 801544e:	f842 3c08 	str.w	r3, [r2, #-8]
 8015452:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8015456:	f842 3c04 	str.w	r3, [r2, #-4]
 801545a:	f890 a000 	ldrb.w	sl, [r0]
 801545e:	4653      	mov	r3, sl
 8015460:	f1ba 0f00 	cmp.w	sl, #0
 8015464:	f000 80c5 	beq.w	80155f2 <arm_fir_interpolate_f32+0x21e>
 8015468:	f1ac 0310 	sub.w	r3, ip, #16
 801546c:	f8cd b018 	str.w	fp, [sp, #24]
 8015470:	4655      	mov	r5, sl
 8015472:	9f02      	ldr	r7, [sp, #8]
 8015474:	f04f 0e01 	mov.w	lr, #1
 8015478:	f8dd b020 	ldr.w	fp, [sp, #32]
 801547c:	9305      	str	r3, [sp, #20]
 801547e:	eba5 040e 	sub.w	r4, r5, lr
 8015482:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
 8015486:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
 801548a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
 801548e:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
 8015492:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8015774 <arm_fir_interpolate_f32+0x3a0>
 8015496:	f1b8 0f00 	cmp.w	r8, #0
 801549a:	f000 8163 	beq.w	8015764 <arm_fir_interpolate_f32+0x390>
 801549e:	eef0 5a47 	vmov.f32	s11, s14
 80154a2:	00a9      	lsls	r1, r5, #2
 80154a4:	eef0 4a47 	vmov.f32	s9, s14
 80154a8:	4662      	mov	r2, ip
 80154aa:	eef0 6a47 	vmov.f32	s13, s14
 80154ae:	4623      	mov	r3, r4
 80154b0:	ed52 1a04 	vldr	s3, [r2, #-16]
 80154b4:	3210      	adds	r2, #16
 80154b6:	edd3 7a00 	vldr	s15, [r3]
 80154ba:	440b      	add	r3, r1
 80154bc:	ee27 6a82 	vmul.f32	s12, s15, s4
 80154c0:	edd3 3a00 	vldr	s7, [r3]
 80154c4:	ee27 4a83 	vmul.f32	s8, s15, s6
 80154c8:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 80154cc:	ee27 5aa2 	vmul.f32	s10, s15, s5
 80154d0:	440b      	add	r3, r1
 80154d2:	ee61 7aa7 	vmul.f32	s15, s3, s15
 80154d6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80154da:	ed93 6a00 	vldr	s12, [r3]
 80154de:	ee63 0a83 	vmul.f32	s1, s7, s6
 80154e2:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
 80154e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80154ea:	440b      	add	r3, r1
 80154ec:	ee21 1aa3 	vmul.f32	s2, s3, s7
 80154f0:	ee74 4a24 	vadd.f32	s9, s8, s9
 80154f4:	ed93 5a00 	vldr	s10, [r3]
 80154f8:	ee23 4aa2 	vmul.f32	s8, s7, s5
 80154fc:	440b      	add	r3, r1
 80154fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015502:	ee63 3a82 	vmul.f32	s7, s7, s4
 8015506:	ee74 4a24 	vadd.f32	s9, s8, s9
 801550a:	ee70 0aa6 	vadd.f32	s1, s1, s13
 801550e:	ee21 4a86 	vmul.f32	s8, s3, s12
 8015512:	ee66 6a22 	vmul.f32	s13, s12, s5
 8015516:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
 801551a:	ee31 1a25 	vadd.f32	s2, s2, s11
 801551e:	4296      	cmp	r6, r2
 8015520:	ee73 7a87 	vadd.f32	s15, s7, s14
 8015524:	ee62 5a06 	vmul.f32	s11, s4, s12
 8015528:	ee26 7a03 	vmul.f32	s14, s12, s6
 801552c:	ee61 1a85 	vmul.f32	s3, s3, s10
 8015530:	ee34 4a24 	vadd.f32	s8, s8, s9
 8015534:	ee35 6a81 	vadd.f32	s12, s11, s2
 8015538:	ee62 4a05 	vmul.f32	s9, s4, s10
 801553c:	ee63 5a05 	vmul.f32	s11, s6, s10
 8015540:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8015544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015548:	ee25 5a22 	vmul.f32	s10, s10, s5
 801554c:	ee71 6aa6 	vadd.f32	s13, s3, s13
 8015550:	ee74 4a84 	vadd.f32	s9, s9, s8
 8015554:	ee75 5a86 	vadd.f32	s11, s11, s12
 8015558:	ee35 7a07 	vadd.f32	s14, s10, s14
 801555c:	d1a8      	bne.n	80154b0 <arm_fir_interpolate_f32+0xdc>
 801555e:	fb08 f305 	mul.w	r3, r8, r5
 8015562:	9a01      	ldr	r2, [sp, #4]
 8015564:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8015568:	f1b9 0f00 	cmp.w	r9, #0
 801556c:	d01e      	beq.n	80155ac <arm_fir_interpolate_f32+0x1d8>
 801556e:	00ad      	lsls	r5, r5, #2
 8015570:	464b      	mov	r3, r9
 8015572:	ed94 6a00 	vldr	s12, [r4]
 8015576:	3b01      	subs	r3, #1
 8015578:	ecf2 7a01 	vldmia	r2!, {s15}
 801557c:	442c      	add	r4, r5
 801557e:	ee66 3a02 	vmul.f32	s7, s12, s4
 8015582:	ee26 4a03 	vmul.f32	s8, s12, s6
 8015586:	ee26 5a22 	vmul.f32	s10, s12, s5
 801558a:	eeb0 2a43 	vmov.f32	s4, s6
 801558e:	eeb0 3a62 	vmov.f32	s6, s5
 8015592:	eef0 2a67 	vmov.f32	s5, s15
 8015596:	ee67 7a86 	vmul.f32	s15, s15, s12
 801559a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801559e:	ee74 4a84 	vadd.f32	s9, s9, s8
 80155a2:	ee75 5a85 	vadd.f32	s11, s11, s10
 80155a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80155aa:	d1e2      	bne.n	8015572 <arm_fir_interpolate_f32+0x19e>
 80155ac:	edc7 6a00 	vstr	s13, [r7]
 80155b0:	45f2      	cmp	sl, lr
 80155b2:	7803      	ldrb	r3, [r0, #0]
 80155b4:	f10e 0201 	add.w	r2, lr, #1
 80155b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80155bc:	edc3 4a00 	vstr	s9, [r3]
 80155c0:	7803      	ldrb	r3, [r0, #0]
 80155c2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80155c6:	edc3 5a00 	vstr	s11, [r3]
 80155ca:	7803      	ldrb	r3, [r0, #0]
 80155cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80155d0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80155d4:	f107 0704 	add.w	r7, r7, #4
 80155d8:	ed83 7a00 	vstr	s14, [r3]
 80155dc:	d002      	beq.n	80155e4 <arm_fir_interpolate_f32+0x210>
 80155de:	4696      	mov	lr, r2
 80155e0:	7805      	ldrb	r5, [r0, #0]
 80155e2:	e74c      	b.n	801547e <arm_fir_interpolate_f32+0xaa>
 80155e4:	9b02      	ldr	r3, [sp, #8]
 80155e6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80155ea:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80155ee:	9302      	str	r3, [sp, #8]
 80155f0:	7803      	ldrb	r3, [r0, #0]
 80155f2:	9a03      	ldr	r2, [sp, #12]
 80155f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80155f8:	f10b 0b10 	add.w	fp, fp, #16
 80155fc:	f10c 0c10 	add.w	ip, ip, #16
 8015600:	3210      	adds	r2, #16
 8015602:	3610      	adds	r6, #16
 8015604:	9203      	str	r2, [sp, #12]
 8015606:	9a01      	ldr	r2, [sp, #4]
 8015608:	3210      	adds	r2, #16
 801560a:	9201      	str	r2, [sp, #4]
 801560c:	9a02      	ldr	r2, [sp, #8]
 801560e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015612:	9302      	str	r3, [sp, #8]
 8015614:	9b04      	ldr	r3, [sp, #16]
 8015616:	3b01      	subs	r3, #1
 8015618:	9304      	str	r3, [sp, #16]
 801561a:	f47f af0d 	bne.w	8015438 <arm_fir_interpolate_f32+0x64>
 801561e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015620:	9a07      	ldr	r2, [sp, #28]
 8015622:	011b      	lsls	r3, r3, #4
 8015624:	f8dd b020 	ldr.w	fp, [sp, #32]
 8015628:	441a      	add	r2, r3
 801562a:	9207      	str	r2, [sp, #28]
 801562c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801562e:	441a      	add	r2, r3
 8015630:	920a      	str	r2, [sp, #40]	; 0x28
 8015632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015634:	441a      	add	r2, r3
 8015636:	9209      	str	r2, [sp, #36]	; 0x24
 8015638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801563a:	f013 0303 	ands.w	r3, r3, #3
 801563e:	f000 80b1 	beq.w	80157a4 <arm_fir_interpolate_f32+0x3d0>
 8015642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015644:	009d      	lsls	r5, r3, #2
 8015646:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015648:	0894      	lsrs	r4, r2, #2
 801564a:	f002 0a03 	and.w	sl, r2, #3
 801564e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015650:	0123      	lsls	r3, r4, #4
 8015652:	9106      	str	r1, [sp, #24]
 8015654:	f102 0110 	add.w	r1, r2, #16
 8015658:	46a1      	mov	r9, r4
 801565a:	f103 0e10 	add.w	lr, r3, #16
 801565e:	18d3      	adds	r3, r2, r3
 8015660:	9101      	str	r1, [sp, #4]
 8015662:	9907      	ldr	r1, [sp, #28]
 8015664:	4496      	add	lr, r2
 8015666:	950c      	str	r5, [sp, #48]	; 0x30
 8015668:	4429      	add	r1, r5
 801566a:	9303      	str	r3, [sp, #12]
 801566c:	f8cd b014 	str.w	fp, [sp, #20]
 8015670:	910a      	str	r1, [sp, #40]	; 0x28
 8015672:	9004      	str	r0, [sp, #16]
 8015674:	9a07      	ldr	r2, [sp, #28]
 8015676:	f852 3b04 	ldr.w	r3, [r2], #4
 801567a:	9207      	str	r2, [sp, #28]
 801567c:	9a01      	ldr	r2, [sp, #4]
 801567e:	3a10      	subs	r2, #16
 8015680:	9208      	str	r2, [sp, #32]
 8015682:	9a06      	ldr	r2, [sp, #24]
 8015684:	f842 3b04 	str.w	r3, [r2], #4
 8015688:	9b04      	ldr	r3, [sp, #16]
 801568a:	9206      	str	r2, [sp, #24]
 801568c:	f893 b000 	ldrb.w	fp, [r3]
 8015690:	f1bb 0f00 	cmp.w	fp, #0
 8015694:	d074      	beq.n	8015780 <arm_fir_interpolate_f32+0x3ac>
 8015696:	465f      	mov	r7, fp
 8015698:	f04f 0c01 	mov.w	ip, #1
 801569c:	9b05      	ldr	r3, [sp, #20]
 801569e:	eba7 000c 	sub.w	r0, r7, ip
 80156a2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80156a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80156aa:	f1b9 0f00 	cmp.w	r9, #0
 80156ae:	d055      	beq.n	801575c <arm_fir_interpolate_f32+0x388>
 80156b0:	b23a      	sxth	r2, r7
 80156b2:	9b01      	ldr	r3, [sp, #4]
 80156b4:	4601      	mov	r1, r0
 80156b6:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8015774 <arm_fir_interpolate_f32+0x3a0>
 80156ba:	0094      	lsls	r4, r2, #2
 80156bc:	0115      	lsls	r5, r2, #4
 80156be:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80156c2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80156c6:	190e      	adds	r6, r1, r4
 80156c8:	edd1 6a00 	vldr	s13, [r1]
 80156cc:	3310      	adds	r3, #16
 80156ce:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 80156d2:	4429      	add	r1, r5
 80156d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80156d8:	ed96 6a00 	vldr	s12, [r6]
 80156dc:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80156e0:	1916      	adds	r6, r2, r4
 80156e2:	ee26 6a25 	vmul.f32	s12, s12, s11
 80156e6:	ed92 5a00 	vldr	s10, [r2]
 80156ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156ee:	edd6 5a00 	vldr	s11, [r6]
 80156f2:	ee26 7a85 	vmul.f32	s14, s13, s10
 80156f6:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80156fa:	459e      	cmp	lr, r3
 80156fc:	442a      	add	r2, r5
 80156fe:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015702:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8015706:	ee77 7a27 	vadd.f32	s15, s14, s15
 801570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801570e:	d1d8      	bne.n	80156c2 <arm_fir_interpolate_f32+0x2ee>
 8015710:	fb09 f404 	mul.w	r4, r9, r4
 8015714:	9a03      	ldr	r2, [sp, #12]
 8015716:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801571a:	f1ba 0f00 	cmp.w	sl, #0
 801571e:	d00c      	beq.n	801573a <arm_fir_interpolate_f32+0x366>
 8015720:	00bf      	lsls	r7, r7, #2
 8015722:	4653      	mov	r3, sl
 8015724:	edd0 6a00 	vldr	s13, [r0]
 8015728:	3b01      	subs	r3, #1
 801572a:	ecb2 7a01 	vldmia	r2!, {s14}
 801572e:	4438      	add	r0, r7
 8015730:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015738:	d1f4      	bne.n	8015724 <arm_fir_interpolate_f32+0x350>
 801573a:	45e3      	cmp	fp, ip
 801573c:	ece8 7a01 	vstmia	r8!, {s15}
 8015740:	f10c 0301 	add.w	r3, ip, #1
 8015744:	d018      	beq.n	8015778 <arm_fir_interpolate_f32+0x3a4>
 8015746:	469c      	mov	ip, r3
 8015748:	9b04      	ldr	r3, [sp, #16]
 801574a:	781f      	ldrb	r7, [r3, #0]
 801574c:	9b05      	ldr	r3, [sp, #20]
 801574e:	eba7 000c 	sub.w	r0, r7, ip
 8015752:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015756:	f1b9 0f00 	cmp.w	r9, #0
 801575a:	d1a9      	bne.n	80156b0 <arm_fir_interpolate_f32+0x2dc>
 801575c:	9a08      	ldr	r2, [sp, #32]
 801575e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8015774 <arm_fir_interpolate_f32+0x3a0>
 8015762:	e7da      	b.n	801571a <arm_fir_interpolate_f32+0x346>
 8015764:	9a05      	ldr	r2, [sp, #20]
 8015766:	eef0 5a47 	vmov.f32	s11, s14
 801576a:	eef0 4a47 	vmov.f32	s9, s14
 801576e:	eef0 6a47 	vmov.f32	s13, s14
 8015772:	e6f9      	b.n	8015568 <arm_fir_interpolate_f32+0x194>
 8015774:	00000000 	.word	0x00000000
 8015778:	9b02      	ldr	r3, [sp, #8]
 801577a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801577e:	9302      	str	r3, [sp, #8]
 8015780:	9b03      	ldr	r3, [sp, #12]
 8015782:	f10e 0e04 	add.w	lr, lr, #4
 8015786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015788:	3304      	adds	r3, #4
 801578a:	9303      	str	r3, [sp, #12]
 801578c:	9b01      	ldr	r3, [sp, #4]
 801578e:	3304      	adds	r3, #4
 8015790:	9301      	str	r3, [sp, #4]
 8015792:	9b07      	ldr	r3, [sp, #28]
 8015794:	4293      	cmp	r3, r2
 8015796:	f47f af6d 	bne.w	8015674 <arm_fir_interpolate_f32+0x2a0>
 801579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801579c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801579e:	9804      	ldr	r0, [sp, #16]
 80157a0:	4413      	add	r3, r2
 80157a2:	9309      	str	r3, [sp, #36]	; 0x24
 80157a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157a6:	6885      	ldr	r5, [r0, #8]
 80157a8:	1e5c      	subs	r4, r3, #1
 80157aa:	08a6      	lsrs	r6, r4, #2
 80157ac:	d020      	beq.n	80157f0 <arm_fir_interpolate_f32+0x41c>
 80157ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b0:	4631      	mov	r1, r6
 80157b2:	f103 0210 	add.w	r2, r3, #16
 80157b6:	f105 0310 	add.w	r3, r5, #16
 80157ba:	f852 0c10 	ldr.w	r0, [r2, #-16]
 80157be:	3901      	subs	r1, #1
 80157c0:	f102 0210 	add.w	r2, r2, #16
 80157c4:	f103 0310 	add.w	r3, r3, #16
 80157c8:	f843 0c20 	str.w	r0, [r3, #-32]
 80157cc:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 80157d0:	f843 0c1c 	str.w	r0, [r3, #-28]
 80157d4:	f852 0c18 	ldr.w	r0, [r2, #-24]
 80157d8:	f843 0c18 	str.w	r0, [r3, #-24]
 80157dc:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80157e0:	f843 0c14 	str.w	r0, [r3, #-20]
 80157e4:	d1e9      	bne.n	80157ba <arm_fir_interpolate_f32+0x3e6>
 80157e6:	0133      	lsls	r3, r6, #4
 80157e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157ea:	441d      	add	r5, r3
 80157ec:	441a      	add	r2, r3
 80157ee:	9209      	str	r2, [sp, #36]	; 0x24
 80157f0:	f014 0403 	ands.w	r4, r4, #3
 80157f4:	d00a      	beq.n	801580c <arm_fir_interpolate_f32+0x438>
 80157f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157f8:	3c01      	subs	r4, #1
 80157fa:	6813      	ldr	r3, [r2, #0]
 80157fc:	602b      	str	r3, [r5, #0]
 80157fe:	d005      	beq.n	801580c <arm_fir_interpolate_f32+0x438>
 8015800:	6853      	ldr	r3, [r2, #4]
 8015802:	2c01      	cmp	r4, #1
 8015804:	606b      	str	r3, [r5, #4]
 8015806:	d001      	beq.n	801580c <arm_fir_interpolate_f32+0x438>
 8015808:	6893      	ldr	r3, [r2, #8]
 801580a:	60ab      	str	r3, [r5, #8]
 801580c:	b00f      	add	sp, #60	; 0x3c
 801580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015812:	bf00      	nop

08015814 <arm_fir_decimate_init_f32>:
 8015814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015818:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 801581c:	fbbc f4f2 	udiv	r4, ip, r2
 8015820:	fb02 c414 	mls	r4, r2, r4, ip
 8015824:	b99c      	cbnz	r4, 801584e <arm_fir_decimate_init_f32+0x3a>
 8015826:	460f      	mov	r7, r1
 8015828:	4616      	mov	r6, r2
 801582a:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 801582e:	4605      	mov	r5, r0
 8015830:	443a      	add	r2, r7
 8015832:	8069      	strh	r1, [r5, #2]
 8015834:	6043      	str	r3, [r0, #4]
 8015836:	4621      	mov	r1, r4
 8015838:	4462      	add	r2, ip
 801583a:	4640      	mov	r0, r8
 801583c:	0092      	lsls	r2, r2, #2
 801583e:	f000 fa63 	bl	8015d08 <memset>
 8015842:	4620      	mov	r0, r4
 8015844:	f8c5 8008 	str.w	r8, [r5, #8]
 8015848:	702e      	strb	r6, [r5, #0]
 801584a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801584e:	f06f 0001 	mvn.w	r0, #1
 8015852:	e7fa      	b.n	801584a <arm_fir_decimate_init_f32+0x36>

08015854 <arm_fir_decimate_f32>:
 8015854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015858:	4605      	mov	r5, r0
 801585a:	b08d      	sub	sp, #52	; 0x34
 801585c:	4694      	mov	ip, r2
 801585e:	782c      	ldrb	r4, [r5, #0]
 8015860:	886f      	ldrh	r7, [r5, #2]
 8015862:	9001      	str	r0, [sp, #4]
 8015864:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015868:	68ae      	ldr	r6, [r5, #8]
 801586a:	4438      	add	r0, r7
 801586c:	686d      	ldr	r5, [r5, #4]
 801586e:	9207      	str	r2, [sp, #28]
 8015870:	970a      	str	r7, [sp, #40]	; 0x28
 8015872:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 8015876:	9508      	str	r5, [sp, #32]
 8015878:	fbb3 f3f4 	udiv	r3, r3, r4
 801587c:	930b      	str	r3, [sp, #44]	; 0x2c
 801587e:	089b      	lsrs	r3, r3, #2
 8015880:	9309      	str	r3, [sp, #36]	; 0x24
 8015882:	f000 80ef 	beq.w	8015a64 <arm_fir_decimate_f32+0x210>
 8015886:	08ba      	lsrs	r2, r7, #2
 8015888:	462b      	mov	r3, r5
 801588a:	3510      	adds	r5, #16
 801588c:	f007 0703 	and.w	r7, r7, #3
 8015890:	9205      	str	r2, [sp, #20]
 8015892:	0112      	lsls	r2, r2, #4
 8015894:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015896:	f10c 0910 	add.w	r9, ip, #16
 801589a:	4413      	add	r3, r2
 801589c:	9100      	str	r1, [sp, #0]
 801589e:	eb05 0e02 	add.w	lr, r5, r2
 80158a2:	4611      	mov	r1, r2
 80158a4:	9503      	str	r5, [sp, #12]
 80158a6:	9704      	str	r7, [sp, #16]
 80158a8:	9002      	str	r0, [sp, #8]
 80158aa:	9306      	str	r3, [sp, #24]
 80158ac:	00a4      	lsls	r4, r4, #2
 80158ae:	4658      	mov	r0, fp
 80158b0:	9a00      	ldr	r2, [sp, #0]
 80158b2:	4623      	mov	r3, r4
 80158b4:	f852 5b04 	ldr.w	r5, [r2], #4
 80158b8:	3b01      	subs	r3, #1
 80158ba:	f840 5b04 	str.w	r5, [r0], #4
 80158be:	d1f9      	bne.n	80158b4 <arm_fir_decimate_f32+0x60>
 80158c0:	9b01      	ldr	r3, [sp, #4]
 80158c2:	00a4      	lsls	r4, r4, #2
 80158c4:	eddf 0abe 	vldr	s1, [pc, #760]	; 8015bc0 <arm_fir_decimate_f32+0x36c>
 80158c8:	f893 8000 	ldrb.w	r8, [r3]
 80158cc:	44a3      	add	fp, r4
 80158ce:	9b00      	ldr	r3, [sp, #0]
 80158d0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80158d4:	4423      	add	r3, r4
 80158d6:	eb06 0708 	add.w	r7, r6, r8
 80158da:	9300      	str	r3, [sp, #0]
 80158dc:	eb07 0c08 	add.w	ip, r7, r8
 80158e0:	9b05      	ldr	r3, [sp, #20]
 80158e2:	eb0c 0a08 	add.w	sl, ip, r8
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	f000 815c 	beq.w	8015ba4 <arm_fir_decimate_f32+0x350>
 80158ec:	eef0 4a60 	vmov.f32	s9, s1
 80158f0:	9b03      	ldr	r3, [sp, #12]
 80158f2:	eef0 7a60 	vmov.f32	s15, s1
 80158f6:	f106 0510 	add.w	r5, r6, #16
 80158fa:	eeb0 7a60 	vmov.f32	s14, s1
 80158fe:	f107 0410 	add.w	r4, r7, #16
 8015902:	f10c 0010 	add.w	r0, ip, #16
 8015906:	f10a 0210 	add.w	r2, sl, #16
 801590a:	ed53 5a04 	vldr	s11, [r3, #-16]
 801590e:	3310      	adds	r3, #16
 8015910:	ed12 5a04 	vldr	s10, [r2, #-16]
 8015914:	3510      	adds	r5, #16
 8015916:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 801591a:	3410      	adds	r4, #16
 801591c:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 8015920:	3010      	adds	r0, #16
 8015922:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8015926:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801592a:	ee25 1a81 	vmul.f32	s2, s11, s2
 801592e:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8015932:	ee65 3aa3 	vmul.f32	s7, s11, s7
 8015936:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 801593a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801593e:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 8015942:	ed12 5a03 	vldr	s10, [r2, #-12]
 8015946:	ee36 7a87 	vadd.f32	s14, s13, s14
 801594a:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 801594e:	ee73 1aa4 	vadd.f32	s3, s7, s9
 8015952:	ee26 2a02 	vmul.f32	s4, s12, s4
 8015956:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 801595a:	ee31 1a27 	vadd.f32	s2, s2, s15
 801595e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 8015962:	ee66 7a22 	vmul.f32	s15, s12, s5
 8015966:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 801596a:	ee26 3a03 	vmul.f32	s6, s12, s6
 801596e:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 8015972:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8015976:	ed52 0a02 	vldr	s1, [r2, #-8]
 801597a:	ee26 6a05 	vmul.f32	s12, s12, s10
 801597e:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 8015982:	ee72 2a07 	vadd.f32	s5, s4, s14
 8015986:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801598a:	ee77 7a81 	vadd.f32	s15, s15, s2
 801598e:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8015992:	ee33 3a21 	vadd.f32	s6, s6, s3
 8015996:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 801599a:	ee66 3aa3 	vmul.f32	s7, s13, s7
 801599e:	ed52 1a01 	vldr	s3, [r2, #-4]
 80159a2:	ee26 4a84 	vmul.f32	s8, s13, s8
 80159a6:	459e      	cmp	lr, r3
 80159a8:	ee66 4aa4 	vmul.f32	s9, s13, s9
 80159ac:	f102 0210 	add.w	r2, r2, #16
 80159b0:	ee66 6aa0 	vmul.f32	s13, s13, s1
 80159b4:	ee36 6a25 	vadd.f32	s12, s12, s11
 80159b8:	ee25 7a07 	vmul.f32	s14, s10, s14
 80159bc:	ee34 4a27 	vadd.f32	s8, s8, s15
 80159c0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80159c4:	ee65 7a01 	vmul.f32	s15, s10, s2
 80159c8:	ee25 3a02 	vmul.f32	s6, s10, s4
 80159cc:	ee73 3aa2 	vadd.f32	s7, s7, s5
 80159d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80159d4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80159d8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80159dc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80159e0:	ee73 4a24 	vadd.f32	s9, s6, s9
 80159e4:	ee75 0a26 	vadd.f32	s1, s10, s13
 80159e8:	d18f      	bne.n	801590a <arm_fir_decimate_f32+0xb6>
 80159ea:	440e      	add	r6, r1
 80159ec:	440f      	add	r7, r1
 80159ee:	448c      	add	ip, r1
 80159f0:	eb0a 0001 	add.w	r0, sl, r1
 80159f4:	9a06      	ldr	r2, [sp, #24]
 80159f6:	9b04      	ldr	r3, [sp, #16]
 80159f8:	b1db      	cbz	r3, 8015a32 <arm_fir_decimate_f32+0x1de>
 80159fa:	ecb2 5a01 	vldmia	r2!, {s10}
 80159fe:	3b01      	subs	r3, #1
 8015a00:	ecf6 2a01 	vldmia	r6!, {s5}
 8015a04:	ecf7 3a01 	vldmia	r7!, {s7}
 8015a08:	ecbc 4a01 	vldmia	ip!, {s8}
 8015a0c:	ee65 2a22 	vmul.f32	s5, s10, s5
 8015a10:	ecf0 6a01 	vldmia	r0!, {s13}
 8015a14:	ee65 3a23 	vmul.f32	s7, s10, s7
 8015a18:	ee25 4a04 	vmul.f32	s8, s10, s8
 8015a1c:	ee25 5a26 	vmul.f32	s10, s10, s13
 8015a20:	ee37 7a22 	vadd.f32	s14, s14, s5
 8015a24:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015a28:	ee74 4a84 	vadd.f32	s9, s9, s8
 8015a2c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8015a30:	d1e3      	bne.n	80159fa <arm_fir_decimate_f32+0x1a6>
 8015a32:	9b02      	ldr	r3, [sp, #8]
 8015a34:	eb0a 0608 	add.w	r6, sl, r8
 8015a38:	ed09 7a04 	vstr	s14, [r9, #-16]
 8015a3c:	f109 0910 	add.w	r9, r9, #16
 8015a40:	3b01      	subs	r3, #1
 8015a42:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 8015a46:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 8015a4a:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 8015a4e:	9302      	str	r3, [sp, #8]
 8015a50:	d002      	beq.n	8015a58 <arm_fir_decimate_f32+0x204>
 8015a52:	9b01      	ldr	r3, [sp, #4]
 8015a54:	781c      	ldrb	r4, [r3, #0]
 8015a56:	e729      	b.n	80158ac <arm_fir_decimate_f32+0x58>
 8015a58:	9b07      	ldr	r3, [sp, #28]
 8015a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a5c:	9900      	ldr	r1, [sp, #0]
 8015a5e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8015a62:	9307      	str	r3, [sp, #28]
 8015a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a66:	f013 0803 	ands.w	r8, r3, #3
 8015a6a:	d067      	beq.n	8015b3c <arm_fir_decimate_f32+0x2e8>
 8015a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a6e:	9808      	ldr	r0, [sp, #32]
 8015a70:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8015a74:	9d07      	ldr	r5, [sp, #28]
 8015a76:	4602      	mov	r2, r0
 8015a78:	f003 0703 	and.w	r7, r3, #3
 8015a7c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 8015a80:	f8cd e000 	str.w	lr, [sp]
 8015a84:	3210      	adds	r2, #16
 8015a86:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8015a8a:	eb00 090c 	add.w	r9, r0, ip
 8015a8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8015a92:	eb02 040c 	add.w	r4, r2, ip
 8015a96:	46aa      	mov	sl, r5
 8015a98:	9203      	str	r2, [sp, #12]
 8015a9a:	f89e 5000 	ldrb.w	r5, [lr]
 8015a9e:	4658      	mov	r0, fp
 8015aa0:	460a      	mov	r2, r1
 8015aa2:	462b      	mov	r3, r5
 8015aa4:	ecf2 7a01 	vldmia	r2!, {s15}
 8015aa8:	3b01      	subs	r3, #1
 8015aaa:	ece0 7a01 	vstmia	r0!, {s15}
 8015aae:	d1f9      	bne.n	8015aa4 <arm_fir_decimate_f32+0x250>
 8015ab0:	00ad      	lsls	r5, r5, #2
 8015ab2:	9b00      	ldr	r3, [sp, #0]
 8015ab4:	4429      	add	r1, r5
 8015ab6:	44ab      	add	fp, r5
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d07c      	beq.n	8015bb6 <arm_fir_decimate_f32+0x362>
 8015abc:	9b03      	ldr	r3, [sp, #12]
 8015abe:	f106 0210 	add.w	r2, r6, #16
 8015ac2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8015bc0 <arm_fir_decimate_f32+0x36c>
 8015ac6:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015aca:	3310      	adds	r3, #16
 8015acc:	ed52 6a04 	vldr	s13, [r2, #-16]
 8015ad0:	3210      	adds	r2, #16
 8015ad2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8015ad6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015ada:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 8015ade:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8015ae2:	ee26 6a25 	vmul.f32	s12, s12, s11
 8015ae6:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 8015aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aee:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 8015af2:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015af6:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 8015afa:	429c      	cmp	r4, r3
 8015afc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8015b00:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8015b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b0c:	d1db      	bne.n	8015ac6 <arm_fir_decimate_f32+0x272>
 8015b0e:	eb06 000c 	add.w	r0, r6, ip
 8015b12:	464a      	mov	r2, r9
 8015b14:	b157      	cbz	r7, 8015b2c <arm_fir_decimate_f32+0x2d8>
 8015b16:	463b      	mov	r3, r7
 8015b18:	ecb2 7a01 	vldmia	r2!, {s14}
 8015b1c:	3b01      	subs	r3, #1
 8015b1e:	ecf0 6a01 	vldmia	r0!, {s13}
 8015b22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015b2a:	d1f5      	bne.n	8015b18 <arm_fir_decimate_f32+0x2c4>
 8015b2c:	f89e 3000 	ldrb.w	r3, [lr]
 8015b30:	ecea 7a01 	vstmia	sl!, {s15}
 8015b34:	45c2      	cmp	sl, r8
 8015b36:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8015b3a:	d1ae      	bne.n	8015a9a <arm_fir_decimate_f32+0x246>
 8015b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b3e:	1e5c      	subs	r4, r3, #1
 8015b40:	9b01      	ldr	r3, [sp, #4]
 8015b42:	08a5      	lsrs	r5, r4, #2
 8015b44:	689f      	ldr	r7, [r3, #8]
 8015b46:	d01d      	beq.n	8015b84 <arm_fir_decimate_f32+0x330>
 8015b48:	f106 0210 	add.w	r2, r6, #16
 8015b4c:	f107 0310 	add.w	r3, r7, #16
 8015b50:	4629      	mov	r1, r5
 8015b52:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8015b56:	3901      	subs	r1, #1
 8015b58:	f102 0210 	add.w	r2, r2, #16
 8015b5c:	f103 0310 	add.w	r3, r3, #16
 8015b60:	f843 0c20 	str.w	r0, [r3, #-32]
 8015b64:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 8015b68:	f843 0c1c 	str.w	r0, [r3, #-28]
 8015b6c:	f852 0c18 	ldr.w	r0, [r2, #-24]
 8015b70:	f843 0c18 	str.w	r0, [r3, #-24]
 8015b74:	f852 0c14 	ldr.w	r0, [r2, #-20]
 8015b78:	f843 0c14 	str.w	r0, [r3, #-20]
 8015b7c:	d1e9      	bne.n	8015b52 <arm_fir_decimate_f32+0x2fe>
 8015b7e:	012d      	lsls	r5, r5, #4
 8015b80:	442e      	add	r6, r5
 8015b82:	442f      	add	r7, r5
 8015b84:	f014 0403 	ands.w	r4, r4, #3
 8015b88:	d009      	beq.n	8015b9e <arm_fir_decimate_f32+0x34a>
 8015b8a:	6833      	ldr	r3, [r6, #0]
 8015b8c:	3c01      	subs	r4, #1
 8015b8e:	603b      	str	r3, [r7, #0]
 8015b90:	d005      	beq.n	8015b9e <arm_fir_decimate_f32+0x34a>
 8015b92:	6873      	ldr	r3, [r6, #4]
 8015b94:	2c01      	cmp	r4, #1
 8015b96:	607b      	str	r3, [r7, #4]
 8015b98:	d001      	beq.n	8015b9e <arm_fir_decimate_f32+0x34a>
 8015b9a:	68b3      	ldr	r3, [r6, #8]
 8015b9c:	60bb      	str	r3, [r7, #8]
 8015b9e:	b00d      	add	sp, #52	; 0x34
 8015ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba4:	4650      	mov	r0, sl
 8015ba6:	9a08      	ldr	r2, [sp, #32]
 8015ba8:	eef0 4a60 	vmov.f32	s9, s1
 8015bac:	eef0 7a60 	vmov.f32	s15, s1
 8015bb0:	eeb0 7a60 	vmov.f32	s14, s1
 8015bb4:	e71f      	b.n	80159f6 <arm_fir_decimate_f32+0x1a2>
 8015bb6:	9a08      	ldr	r2, [sp, #32]
 8015bb8:	4630      	mov	r0, r6
 8015bba:	eddf 7a01 	vldr	s15, [pc, #4]	; 8015bc0 <arm_fir_decimate_f32+0x36c>
 8015bbe:	e7a9      	b.n	8015b14 <arm_fir_decimate_f32+0x2c0>
 8015bc0:	00000000 	.word	0x00000000

08015bc4 <arm_sin_f32>:
 8015bc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015c44 <arm_sin_f32+0x80>
 8015bc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015bd0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd8:	d504      	bpl.n	8015be4 <arm_sin_f32+0x20>
 8015bda:	ee17 3a90 	vmov	r3, s15
 8015bde:	3b01      	subs	r3, #1
 8015be0:	ee07 3a90 	vmov	s15, r3
 8015be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015be8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8015c48 <arm_sin_f32+0x84>
 8015bec:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015bf0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015bf4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8015bf8:	ee17 3a10 	vmov	r3, s14
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015c02:	d21a      	bcs.n	8015c3a <arm_sin_f32+0x76>
 8015c04:	ee07 3a10 	vmov	s14, r3
 8015c08:	1c59      	adds	r1, r3, #1
 8015c0a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8015c0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c12:	4a0e      	ldr	r2, [pc, #56]	; (8015c4c <arm_sin_f32+0x88>)
 8015c14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015c18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015c20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015c24:	edd3 6a00 	vldr	s13, [r3]
 8015c28:	ed92 7a00 	vldr	s14, [r2]
 8015c2c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015c38:	4770      	bx	lr
 8015c3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015c3e:	2101      	movs	r1, #1
 8015c40:	2300      	movs	r3, #0
 8015c42:	e7e6      	b.n	8015c12 <arm_sin_f32+0x4e>
 8015c44:	3e22f983 	.word	0x3e22f983
 8015c48:	44000000 	.word	0x44000000
 8015c4c:	08022a10 	.word	0x08022a10

08015c50 <__itoa>:
 8015c50:	1e93      	subs	r3, r2, #2
 8015c52:	2b22      	cmp	r3, #34	; 0x22
 8015c54:	b510      	push	{r4, lr}
 8015c56:	460c      	mov	r4, r1
 8015c58:	d904      	bls.n	8015c64 <__itoa+0x14>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	700b      	strb	r3, [r1, #0]
 8015c5e:	461c      	mov	r4, r3
 8015c60:	4620      	mov	r0, r4
 8015c62:	bd10      	pop	{r4, pc}
 8015c64:	2a0a      	cmp	r2, #10
 8015c66:	d109      	bne.n	8015c7c <__itoa+0x2c>
 8015c68:	2800      	cmp	r0, #0
 8015c6a:	da07      	bge.n	8015c7c <__itoa+0x2c>
 8015c6c:	232d      	movs	r3, #45	; 0x2d
 8015c6e:	700b      	strb	r3, [r1, #0]
 8015c70:	4240      	negs	r0, r0
 8015c72:	2101      	movs	r1, #1
 8015c74:	4421      	add	r1, r4
 8015c76:	f000 f805 	bl	8015c84 <__utoa>
 8015c7a:	e7f1      	b.n	8015c60 <__itoa+0x10>
 8015c7c:	2100      	movs	r1, #0
 8015c7e:	e7f9      	b.n	8015c74 <__itoa+0x24>

08015c80 <itoa>:
 8015c80:	f7ff bfe6 	b.w	8015c50 <__itoa>

08015c84 <__utoa>:
 8015c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c86:	4c1f      	ldr	r4, [pc, #124]	; (8015d04 <__utoa+0x80>)
 8015c88:	b08b      	sub	sp, #44	; 0x2c
 8015c8a:	4605      	mov	r5, r0
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	466e      	mov	r6, sp
 8015c90:	f104 0c20 	add.w	ip, r4, #32
 8015c94:	6820      	ldr	r0, [r4, #0]
 8015c96:	6861      	ldr	r1, [r4, #4]
 8015c98:	4637      	mov	r7, r6
 8015c9a:	c703      	stmia	r7!, {r0, r1}
 8015c9c:	3408      	adds	r4, #8
 8015c9e:	4564      	cmp	r4, ip
 8015ca0:	463e      	mov	r6, r7
 8015ca2:	d1f7      	bne.n	8015c94 <__utoa+0x10>
 8015ca4:	7921      	ldrb	r1, [r4, #4]
 8015ca6:	7139      	strb	r1, [r7, #4]
 8015ca8:	1e91      	subs	r1, r2, #2
 8015caa:	6820      	ldr	r0, [r4, #0]
 8015cac:	6038      	str	r0, [r7, #0]
 8015cae:	2922      	cmp	r1, #34	; 0x22
 8015cb0:	f04f 0100 	mov.w	r1, #0
 8015cb4:	d904      	bls.n	8015cc0 <__utoa+0x3c>
 8015cb6:	7019      	strb	r1, [r3, #0]
 8015cb8:	460b      	mov	r3, r1
 8015cba:	4618      	mov	r0, r3
 8015cbc:	b00b      	add	sp, #44	; 0x2c
 8015cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc0:	1e58      	subs	r0, r3, #1
 8015cc2:	4684      	mov	ip, r0
 8015cc4:	fbb5 f7f2 	udiv	r7, r5, r2
 8015cc8:	fb02 5617 	mls	r6, r2, r7, r5
 8015ccc:	3628      	adds	r6, #40	; 0x28
 8015cce:	446e      	add	r6, sp
 8015cd0:	460c      	mov	r4, r1
 8015cd2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8015cd6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8015cda:	462e      	mov	r6, r5
 8015cdc:	42b2      	cmp	r2, r6
 8015cde:	f101 0101 	add.w	r1, r1, #1
 8015ce2:	463d      	mov	r5, r7
 8015ce4:	d9ee      	bls.n	8015cc4 <__utoa+0x40>
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	545a      	strb	r2, [r3, r1]
 8015cea:	1919      	adds	r1, r3, r4
 8015cec:	1aa5      	subs	r5, r4, r2
 8015cee:	42aa      	cmp	r2, r5
 8015cf0:	dae3      	bge.n	8015cba <__utoa+0x36>
 8015cf2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8015cf6:	780e      	ldrb	r6, [r1, #0]
 8015cf8:	7006      	strb	r6, [r0, #0]
 8015cfa:	3201      	adds	r2, #1
 8015cfc:	f801 5901 	strb.w	r5, [r1], #-1
 8015d00:	e7f4      	b.n	8015cec <__utoa+0x68>
 8015d02:	bf00      	nop
 8015d04:	08023214 	.word	0x08023214

08015d08 <memset>:
 8015d08:	4402      	add	r2, r0
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d100      	bne.n	8015d12 <memset+0xa>
 8015d10:	4770      	bx	lr
 8015d12:	f803 1b01 	strb.w	r1, [r3], #1
 8015d16:	e7f9      	b.n	8015d0c <memset+0x4>

08015d18 <__libc_init_array>:
 8015d18:	b570      	push	{r4, r5, r6, lr}
 8015d1a:	4d0d      	ldr	r5, [pc, #52]	; (8015d50 <__libc_init_array+0x38>)
 8015d1c:	4c0d      	ldr	r4, [pc, #52]	; (8015d54 <__libc_init_array+0x3c>)
 8015d1e:	1b64      	subs	r4, r4, r5
 8015d20:	10a4      	asrs	r4, r4, #2
 8015d22:	2600      	movs	r6, #0
 8015d24:	42a6      	cmp	r6, r4
 8015d26:	d109      	bne.n	8015d3c <__libc_init_array+0x24>
 8015d28:	4d0b      	ldr	r5, [pc, #44]	; (8015d58 <__libc_init_array+0x40>)
 8015d2a:	4c0c      	ldr	r4, [pc, #48]	; (8015d5c <__libc_init_array+0x44>)
 8015d2c:	f002 faf0 	bl	8018310 <_init>
 8015d30:	1b64      	subs	r4, r4, r5
 8015d32:	10a4      	asrs	r4, r4, #2
 8015d34:	2600      	movs	r6, #0
 8015d36:	42a6      	cmp	r6, r4
 8015d38:	d105      	bne.n	8015d46 <__libc_init_array+0x2e>
 8015d3a:	bd70      	pop	{r4, r5, r6, pc}
 8015d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d40:	4798      	blx	r3
 8015d42:	3601      	adds	r6, #1
 8015d44:	e7ee      	b.n	8015d24 <__libc_init_array+0xc>
 8015d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d4a:	4798      	blx	r3
 8015d4c:	3601      	adds	r6, #1
 8015d4e:	e7f2      	b.n	8015d36 <__libc_init_array+0x1e>
 8015d50:	08024648 	.word	0x08024648
 8015d54:	08024648 	.word	0x08024648
 8015d58:	08024648 	.word	0x08024648
 8015d5c:	0802464c 	.word	0x0802464c

08015d60 <strcpy>:
 8015d60:	4603      	mov	r3, r0
 8015d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d66:	f803 2b01 	strb.w	r2, [r3], #1
 8015d6a:	2a00      	cmp	r2, #0
 8015d6c:	d1f9      	bne.n	8015d62 <strcpy+0x2>
 8015d6e:	4770      	bx	lr

08015d70 <frexpf>:
 8015d70:	ee10 3a10 	vmov	r3, s0
 8015d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015d78:	2100      	movs	r1, #0
 8015d7a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015d7e:	6001      	str	r1, [r0, #0]
 8015d80:	da19      	bge.n	8015db6 <frexpf+0x46>
 8015d82:	b1c2      	cbz	r2, 8015db6 <frexpf+0x46>
 8015d84:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015d88:	d10a      	bne.n	8015da0 <frexpf+0x30>
 8015d8a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015db8 <frexpf+0x48>
 8015d8e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015d92:	f06f 0118 	mvn.w	r1, #24
 8015d96:	ee17 3a90 	vmov	r3, s15
 8015d9a:	6001      	str	r1, [r0, #0]
 8015d9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015da0:	6801      	ldr	r1, [r0, #0]
 8015da2:	15d2      	asrs	r2, r2, #23
 8015da4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015da8:	3a7e      	subs	r2, #126	; 0x7e
 8015daa:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8015dae:	4411      	add	r1, r2
 8015db0:	ee00 3a10 	vmov	s0, r3
 8015db4:	6001      	str	r1, [r0, #0]
 8015db6:	4770      	bx	lr
 8015db8:	4c000000 	.word	0x4c000000

08015dbc <expf>:
 8015dbc:	ee10 2a10 	vmov	r2, s0
 8015dc0:	f240 412a 	movw	r1, #1066	; 0x42a
 8015dc4:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8015dc8:	428b      	cmp	r3, r1
 8015dca:	b430      	push	{r4, r5}
 8015dcc:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8015dd0:	d92a      	bls.n	8015e28 <expf+0x6c>
 8015dd2:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8015dd6:	d058      	beq.n	8015e8a <expf+0xce>
 8015dd8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8015ddc:	d303      	bcc.n	8015de6 <expf+0x2a>
 8015dde:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015de2:	bc30      	pop	{r4, r5}
 8015de4:	4770      	bx	lr
 8015de6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8015e90 <expf+0xd4>
 8015dea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015df2:	dd03      	ble.n	8015dfc <expf+0x40>
 8015df4:	bc30      	pop	{r4, r5}
 8015df6:	2000      	movs	r0, #0
 8015df8:	f000 bca8 	b.w	801674c <__math_oflowf>
 8015dfc:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015e94 <expf+0xd8>
 8015e00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e08:	d503      	bpl.n	8015e12 <expf+0x56>
 8015e0a:	bc30      	pop	{r4, r5}
 8015e0c:	2000      	movs	r0, #0
 8015e0e:	f000 bc91 	b.w	8016734 <__math_uflowf>
 8015e12:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015e98 <expf+0xdc>
 8015e16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e1e:	d503      	bpl.n	8015e28 <expf+0x6c>
 8015e20:	bc30      	pop	{r4, r5}
 8015e22:	2000      	movs	r0, #0
 8015e24:	f000 bc8c 	b.w	8016740 <__math_may_uflowf>
 8015e28:	4b1c      	ldr	r3, [pc, #112]	; (8015e9c <expf+0xe0>)
 8015e2a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015e2e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8015e32:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8015e36:	eeb0 7b44 	vmov.f64	d7, d4
 8015e3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015e3e:	ee17 0a10 	vmov	r0, s14
 8015e42:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015e46:	f000 021f 	and.w	r2, r0, #31
 8015e4a:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015e4e:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8015e52:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015e56:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8015e5a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8015e5e:	eea5 6b07 	vfma.f64	d6, d5, d7
 8015e62:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8015e66:	684d      	ldr	r5, [r1, #4]
 8015e68:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	190a      	adds	r2, r1, r4
 8015e70:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015e74:	eea5 0b07 	vfma.f64	d0, d5, d7
 8015e78:	ec43 2b17 	vmov	d7, r2, r3
 8015e7c:	eea6 0b04 	vfma.f64	d0, d6, d4
 8015e80:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015e84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015e88:	e7ab      	b.n	8015de2 <expf+0x26>
 8015e8a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8015ea0 <expf+0xe4>
 8015e8e:	e7a8      	b.n	8015de2 <expf+0x26>
 8015e90:	42b17217 	.word	0x42b17217
 8015e94:	c2cff1b4 	.word	0xc2cff1b4
 8015e98:	c2ce8ecf 	.word	0xc2ce8ecf
 8015e9c:	08023240 	.word	0x08023240
 8015ea0:	00000000 	.word	0x00000000

08015ea4 <logf>:
 8015ea4:	ee10 3a10 	vmov	r3, s0
 8015ea8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015eac:	b410      	push	{r4}
 8015eae:	d055      	beq.n	8015f5c <logf+0xb8>
 8015eb0:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8015eb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8015eb8:	d31a      	bcc.n	8015ef0 <logf+0x4c>
 8015eba:	005a      	lsls	r2, r3, #1
 8015ebc:	d104      	bne.n	8015ec8 <logf+0x24>
 8015ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ec2:	2001      	movs	r0, #1
 8015ec4:	f000 bc48 	b.w	8016758 <__math_divzerof>
 8015ec8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ecc:	d043      	beq.n	8015f56 <logf+0xb2>
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	db02      	blt.n	8015ed8 <logf+0x34>
 8015ed2:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015ed6:	d303      	bcc.n	8015ee0 <logf+0x3c>
 8015ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015edc:	f000 bc4e 	b.w	801677c <__math_invalidf>
 8015ee0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8015f64 <logf+0xc0>
 8015ee4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015ee8:	ee10 3a10 	vmov	r3, s0
 8015eec:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8015ef0:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8015ef4:	491c      	ldr	r1, [pc, #112]	; (8015f68 <logf+0xc4>)
 8015ef6:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8015efa:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8015efe:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8015f02:	0dd4      	lsrs	r4, r2, #23
 8015f04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8015f08:	05e4      	lsls	r4, r4, #23
 8015f0a:	ed90 6b00 	vldr	d6, [r0]
 8015f0e:	1b1b      	subs	r3, r3, r4
 8015f10:	ee07 3a90 	vmov	s15, r3
 8015f14:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8015f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015f1c:	15d2      	asrs	r2, r2, #23
 8015f1e:	eea6 0b07 	vfma.f64	d0, d6, d7
 8015f22:	ed90 6b02 	vldr	d6, [r0, #8]
 8015f26:	ee20 4b00 	vmul.f64	d4, d0, d0
 8015f2a:	ee07 2a90 	vmov	s15, r2
 8015f2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015f32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015f36:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8015f3a:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8015f3e:	eea5 7b00 	vfma.f64	d7, d5, d0
 8015f42:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8015f46:	ee30 0b06 	vadd.f64	d0, d0, d6
 8015f4a:	eea5 7b04 	vfma.f64	d7, d5, d4
 8015f4e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015f52:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f5a:	4770      	bx	lr
 8015f5c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015f6c <logf+0xc8>
 8015f60:	e7f9      	b.n	8015f56 <logf+0xb2>
 8015f62:	bf00      	nop
 8015f64:	4b000000 	.word	0x4b000000
 8015f68:	08023388 	.word	0x08023388
 8015f6c:	00000000 	.word	0x00000000

08015f70 <log2f>:
 8015f70:	ee10 2a10 	vmov	r2, s0
 8015f74:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015f78:	b410      	push	{r4}
 8015f7a:	d055      	beq.n	8016028 <log2f+0xb8>
 8015f7c:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8015f80:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015f84:	d31a      	bcc.n	8015fbc <log2f+0x4c>
 8015f86:	0053      	lsls	r3, r2, #1
 8015f88:	d104      	bne.n	8015f94 <log2f+0x24>
 8015f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f8e:	2001      	movs	r0, #1
 8015f90:	f000 bbe2 	b.w	8016758 <__math_divzerof>
 8015f94:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015f98:	d043      	beq.n	8016022 <log2f+0xb2>
 8015f9a:	2a00      	cmp	r2, #0
 8015f9c:	db02      	blt.n	8015fa4 <log2f+0x34>
 8015f9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8015fa2:	d303      	bcc.n	8015fac <log2f+0x3c>
 8015fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fa8:	f000 bbe8 	b.w	801677c <__math_invalidf>
 8015fac:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016030 <log2f+0xc0>
 8015fb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015fb4:	ee10 3a10 	vmov	r3, s0
 8015fb8:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8015fbc:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8015fc0:	491c      	ldr	r1, [pc, #112]	; (8016034 <log2f+0xc4>)
 8015fc2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8015fc6:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8015fca:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8015fce:	0ddc      	lsrs	r4, r3, #23
 8015fd0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8015fd4:	05e4      	lsls	r4, r4, #23
 8015fd6:	ed90 5b00 	vldr	d5, [r0]
 8015fda:	1b12      	subs	r2, r2, r4
 8015fdc:	ee07 2a90 	vmov	s15, r2
 8015fe0:	15db      	asrs	r3, r3, #23
 8015fe2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015fe6:	eea5 6b07 	vfma.f64	d6, d5, d7
 8015fea:	ed90 7b02 	vldr	d7, [r0, #8]
 8015fee:	ee26 4b06 	vmul.f64	d4, d6, d6
 8015ff2:	ee00 3a10 	vmov	s0, r3
 8015ff6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8015ffa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8015ffe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016002:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8016006:	eea5 7b06 	vfma.f64	d7, d5, d6
 801600a:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801600e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016012:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8016016:	eea5 0b06 	vfma.f64	d0, d5, d6
 801601a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801601e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016038 <log2f+0xc8>
 801602c:	e7f9      	b.n	8016022 <log2f+0xb2>
 801602e:	bf00      	nop
 8016030:	4b000000 	.word	0x4b000000
 8016034:	08023d18 	.word	0x08023d18
	...

08016040 <exp>:
 8016040:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8016042:	ee10 3a90 	vmov	r3, s1
 8016046:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801604a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801604e:	18a2      	adds	r2, r4, r2
 8016050:	2a3e      	cmp	r2, #62	; 0x3e
 8016052:	ee10 1a10 	vmov	r1, s0
 8016056:	d922      	bls.n	801609e <exp+0x5e>
 8016058:	2a00      	cmp	r2, #0
 801605a:	da06      	bge.n	801606a <exp+0x2a>
 801605c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016060:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016064:	b004      	add	sp, #16
 8016066:	bcf0      	pop	{r4, r5, r6, r7}
 8016068:	4770      	bx	lr
 801606a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801606e:	f04f 0000 	mov.w	r0, #0
 8016072:	d913      	bls.n	801609c <exp+0x5c>
 8016074:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8016078:	bf08      	it	eq
 801607a:	4281      	cmpeq	r1, r0
 801607c:	f000 80a0 	beq.w	80161c0 <exp+0x180>
 8016080:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016084:	4294      	cmp	r4, r2
 8016086:	d0e9      	beq.n	801605c <exp+0x1c>
 8016088:	4283      	cmp	r3, r0
 801608a:	da03      	bge.n	8016094 <exp+0x54>
 801608c:	b004      	add	sp, #16
 801608e:	bcf0      	pop	{r4, r5, r6, r7}
 8016090:	f000 b8c6 	b.w	8016220 <__math_uflow>
 8016094:	b004      	add	sp, #16
 8016096:	bcf0      	pop	{r4, r5, r6, r7}
 8016098:	f000 b8ca 	b.w	8016230 <__math_oflow>
 801609c:	4604      	mov	r4, r0
 801609e:	4950      	ldr	r1, [pc, #320]	; (80161e0 <exp+0x1a0>)
 80160a0:	ed91 6b02 	vldr	d6, [r1, #8]
 80160a4:	ed91 5b00 	vldr	d5, [r1]
 80160a8:	eeb0 7b46 	vmov.f64	d7, d6
 80160ac:	eea5 7b00 	vfma.f64	d7, d5, d0
 80160b0:	ee17 5a10 	vmov	r5, s14
 80160b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80160b8:	ed91 6b04 	vldr	d6, [r1, #16]
 80160bc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80160c0:	eea6 0b07 	vfma.f64	d0, d6, d7
 80160c4:	ed91 6b06 	vldr	d6, [r1, #24]
 80160c8:	18d8      	adds	r0, r3, r3
 80160ca:	f100 030f 	add.w	r3, r0, #15
 80160ce:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80160d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80160d6:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 80160da:	ee20 7b00 	vmul.f64	d7, d0, d0
 80160de:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 80160e2:	ed91 4b08 	vldr	d4, [r1, #32]
 80160e6:	ee30 6b06 	vadd.f64	d6, d0, d6
 80160ea:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80160ee:	eea3 4b00 	vfma.f64	d4, d3, d0
 80160f2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 80160f6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80160fa:	ee27 7b07 	vmul.f64	d7, d7, d7
 80160fe:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8016102:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8016106:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801610a:	eea3 4b00 	vfma.f64	d4, d3, d0
 801610e:	2600      	movs	r6, #0
 8016110:	19f2      	adds	r2, r6, r7
 8016112:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8016116:	eea7 6b04 	vfma.f64	d6, d7, d4
 801611a:	2c00      	cmp	r4, #0
 801611c:	d14b      	bne.n	80161b6 <exp+0x176>
 801611e:	42b5      	cmp	r5, r6
 8016120:	db10      	blt.n	8016144 <exp+0x104>
 8016122:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8016126:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80161c8 <exp+0x188>
 801612a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801612e:	4610      	mov	r0, r2
 8016130:	ec41 0b10 	vmov	d0, r0, r1
 8016134:	eea6 0b00 	vfma.f64	d0, d6, d0
 8016138:	ee20 0b07 	vmul.f64	d0, d0, d7
 801613c:	b004      	add	sp, #16
 801613e:	bcf0      	pop	{r4, r5, r6, r7}
 8016140:	f000 b88a 	b.w	8016258 <__math_check_oflow>
 8016144:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016148:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801614c:	4610      	mov	r0, r2
 801614e:	ec41 0b17 	vmov	d7, r0, r1
 8016152:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8016156:	ee26 6b07 	vmul.f64	d6, d6, d7
 801615a:	ee37 5b06 	vadd.f64	d5, d7, d6
 801615e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8016162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016166:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80161d0 <exp+0x190>
 801616a:	d51e      	bpl.n	80161aa <exp+0x16a>
 801616c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8016170:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016174:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016178:	ee34 6b43 	vsub.f64	d6, d4, d3
 801617c:	ee36 6b05 	vadd.f64	d6, d6, d5
 8016180:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016184:	ee36 6b03 	vadd.f64	d6, d6, d3
 8016188:	ee36 5b44 	vsub.f64	d5, d6, d4
 801618c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8016190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016194:	d101      	bne.n	801619a <exp+0x15a>
 8016196:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80161d8 <exp+0x198>
 801619a:	ed8d 0b00 	vstr	d0, [sp]
 801619e:	ed9d 7b00 	vldr	d7, [sp]
 80161a2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80161a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80161aa:	ee25 0b00 	vmul.f64	d0, d5, d0
 80161ae:	b004      	add	sp, #16
 80161b0:	bcf0      	pop	{r4, r5, r6, r7}
 80161b2:	f000 b845 	b.w	8016240 <__math_check_uflow>
 80161b6:	ec43 2b10 	vmov	d0, r2, r3
 80161ba:	eea6 0b00 	vfma.f64	d0, d6, d0
 80161be:	e751      	b.n	8016064 <exp+0x24>
 80161c0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80161d8 <exp+0x198>
 80161c4:	e74e      	b.n	8016064 <exp+0x24>
 80161c6:	bf00      	nop
 80161c8:	00000000 	.word	0x00000000
 80161cc:	7f000000 	.word	0x7f000000
 80161d0:	00000000 	.word	0x00000000
 80161d4:	00100000 	.word	0x00100000
	...
 80161e0:	080234a8 	.word	0x080234a8

080161e4 <with_errno>:
 80161e4:	b513      	push	{r0, r1, r4, lr}
 80161e6:	4604      	mov	r4, r0
 80161e8:	ed8d 0b00 	vstr	d0, [sp]
 80161ec:	f002 f88a 	bl	8018304 <__errno>
 80161f0:	ed9d 0b00 	vldr	d0, [sp]
 80161f4:	6004      	str	r4, [r0, #0]
 80161f6:	b002      	add	sp, #8
 80161f8:	bd10      	pop	{r4, pc}

080161fa <xflow>:
 80161fa:	b082      	sub	sp, #8
 80161fc:	b158      	cbz	r0, 8016216 <xflow+0x1c>
 80161fe:	eeb1 7b40 	vneg.f64	d7, d0
 8016202:	ed8d 7b00 	vstr	d7, [sp]
 8016206:	ed9d 7b00 	vldr	d7, [sp]
 801620a:	2022      	movs	r0, #34	; 0x22
 801620c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016210:	b002      	add	sp, #8
 8016212:	f7ff bfe7 	b.w	80161e4 <with_errno>
 8016216:	eeb0 7b40 	vmov.f64	d7, d0
 801621a:	e7f2      	b.n	8016202 <xflow+0x8>
 801621c:	0000      	movs	r0, r0
	...

08016220 <__math_uflow>:
 8016220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016228 <__math_uflow+0x8>
 8016224:	f7ff bfe9 	b.w	80161fa <xflow>
 8016228:	00000000 	.word	0x00000000
 801622c:	10000000 	.word	0x10000000

08016230 <__math_oflow>:
 8016230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016238 <__math_oflow+0x8>
 8016234:	f7ff bfe1 	b.w	80161fa <xflow>
 8016238:	00000000 	.word	0x00000000
 801623c:	70000000 	.word	0x70000000

08016240 <__math_check_uflow>:
 8016240:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016248:	d102      	bne.n	8016250 <__math_check_uflow+0x10>
 801624a:	2022      	movs	r0, #34	; 0x22
 801624c:	f7ff bfca 	b.w	80161e4 <with_errno>
 8016250:	4770      	bx	lr
 8016252:	0000      	movs	r0, r0
 8016254:	0000      	movs	r0, r0
	...

08016258 <__math_check_oflow>:
 8016258:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8016278 <__math_check_oflow+0x20>
 801625c:	eeb0 7bc0 	vabs.f64	d7, d0
 8016260:	eeb4 7b46 	vcmp.f64	d7, d6
 8016264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016268:	dd02      	ble.n	8016270 <__math_check_oflow+0x18>
 801626a:	2022      	movs	r0, #34	; 0x22
 801626c:	f7ff bfba 	b.w	80161e4 <with_errno>
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	f3af 8000 	nop.w
 8016278:	ffffffff 	.word	0xffffffff
 801627c:	7fefffff 	.word	0x7fefffff

08016280 <checkint>:
 8016280:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016284:	2b7e      	cmp	r3, #126	; 0x7e
 8016286:	dd10      	ble.n	80162aa <checkint+0x2a>
 8016288:	2b96      	cmp	r3, #150	; 0x96
 801628a:	dc0c      	bgt.n	80162a6 <checkint+0x26>
 801628c:	2201      	movs	r2, #1
 801628e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016292:	fa02 f303 	lsl.w	r3, r2, r3
 8016296:	1e5a      	subs	r2, r3, #1
 8016298:	4202      	tst	r2, r0
 801629a:	d106      	bne.n	80162aa <checkint+0x2a>
 801629c:	4203      	tst	r3, r0
 801629e:	bf0c      	ite	eq
 80162a0:	2002      	moveq	r0, #2
 80162a2:	2001      	movne	r0, #1
 80162a4:	4770      	bx	lr
 80162a6:	2002      	movs	r0, #2
 80162a8:	4770      	bx	lr
 80162aa:	2000      	movs	r0, #0
 80162ac:	4770      	bx	lr
	...

080162b0 <powf>:
 80162b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80162b2:	ee10 1a10 	vmov	r1, s0
 80162b6:	ee10 4a90 	vmov	r4, s1
 80162ba:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80162be:	0062      	lsls	r2, r4, #1
 80162c0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80162c4:	eef0 7a40 	vmov.f32	s15, s0
 80162c8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80162cc:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80162d0:	d252      	bcs.n	8016378 <powf+0xc8>
 80162d2:	4298      	cmp	r0, r3
 80162d4:	d252      	bcs.n	801637c <powf+0xcc>
 80162d6:	2000      	movs	r0, #0
 80162d8:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 80162dc:	4a9e      	ldr	r2, [pc, #632]	; (8016558 <powf+0x2a8>)
 80162de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80162e2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80162e6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80162ea:	0ddb      	lsrs	r3, r3, #23
 80162ec:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80162f0:	05db      	lsls	r3, r3, #23
 80162f2:	ed94 5b00 	vldr	d5, [r4]
 80162f6:	1ac9      	subs	r1, r1, r3
 80162f8:	ee07 1a90 	vmov	s15, r1
 80162fc:	15db      	asrs	r3, r3, #23
 80162fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016302:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016306:	ed94 5b02 	vldr	d5, [r4, #8]
 801630a:	ee26 2b06 	vmul.f64	d2, d6, d6
 801630e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8016312:	ee07 3a90 	vmov	s15, r3
 8016316:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 801631a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801631e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016322:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8016326:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 801632a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801632e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8016332:	eea6 5b04 	vfma.f64	d5, d6, d4
 8016336:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 801633a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801633e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8016342:	eea2 7b05 	vfma.f64	d7, d2, d5
 8016346:	eea3 7b01 	vfma.f64	d7, d3, d1
 801634a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801634e:	ee16 3a90 	vmov	r3, s13
 8016352:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8016356:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801635a:	429a      	cmp	r2, r3
 801635c:	f0c0 80b0 	bcc.w	80164c0 <powf+0x210>
 8016360:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016538 <powf+0x288>
 8016364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636c:	dd78      	ble.n	8016460 <powf+0x1b0>
 801636e:	b003      	add	sp, #12
 8016370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016374:	f000 b9ea 	b.w	801674c <__math_oflowf>
 8016378:	4298      	cmp	r0, r3
 801637a:	d32d      	bcc.n	80163d8 <powf+0x128>
 801637c:	b952      	cbnz	r2, 8016394 <powf+0xe4>
 801637e:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 8016382:	0049      	lsls	r1, r1, #1
 8016384:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8016388:	f240 80c8 	bls.w	801651c <powf+0x26c>
 801638c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8016390:	b003      	add	sp, #12
 8016392:	bd30      	pop	{r4, r5, pc}
 8016394:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8016398:	d105      	bne.n	80163a6 <powf+0xf6>
 801639a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801639e:	0064      	lsls	r4, r4, #1
 80163a0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80163a4:	e7f0      	b.n	8016388 <powf+0xd8>
 80163a6:	0049      	lsls	r1, r1, #1
 80163a8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 80163ac:	d8ee      	bhi.n	801638c <powf+0xdc>
 80163ae:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80163b2:	d1eb      	bne.n	801638c <powf+0xdc>
 80163b4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80163b8:	f000 80b0 	beq.w	801651c <powf+0x26c>
 80163bc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80163c0:	ea6f 0404 	mvn.w	r4, r4
 80163c4:	bf34      	ite	cc
 80163c6:	2100      	movcc	r1, #0
 80163c8:	2101      	movcs	r1, #1
 80163ca:	0fe4      	lsrs	r4, r4, #31
 80163cc:	42a1      	cmp	r1, r4
 80163ce:	f040 80a8 	bne.w	8016522 <powf+0x272>
 80163d2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80163d6:	e7db      	b.n	8016390 <powf+0xe0>
 80163d8:	004d      	lsls	r5, r1, #1
 80163da:	1e6a      	subs	r2, r5, #1
 80163dc:	429a      	cmp	r2, r3
 80163de:	d31c      	bcc.n	801641a <powf+0x16a>
 80163e0:	2900      	cmp	r1, #0
 80163e2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80163e6:	da0f      	bge.n	8016408 <powf+0x158>
 80163e8:	ee10 0a90 	vmov	r0, s1
 80163ec:	f7ff ff48 	bl	8016280 <checkint>
 80163f0:	2801      	cmp	r0, #1
 80163f2:	d109      	bne.n	8016408 <powf+0x158>
 80163f4:	eeb1 0a40 	vneg.f32	s0, s0
 80163f8:	b945      	cbnz	r5, 801640c <powf+0x15c>
 80163fa:	2c00      	cmp	r4, #0
 80163fc:	dac8      	bge.n	8016390 <powf+0xe0>
 80163fe:	b003      	add	sp, #12
 8016400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016404:	f000 b9a8 	b.w	8016758 <__math_divzerof>
 8016408:	2000      	movs	r0, #0
 801640a:	e7f5      	b.n	80163f8 <powf+0x148>
 801640c:	2c00      	cmp	r4, #0
 801640e:	dabf      	bge.n	8016390 <powf+0xe0>
 8016410:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016414:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016418:	e7ba      	b.n	8016390 <powf+0xe0>
 801641a:	2900      	cmp	r1, #0
 801641c:	da1e      	bge.n	801645c <powf+0x1ac>
 801641e:	ee10 0a90 	vmov	r0, s1
 8016422:	f7ff ff2d 	bl	8016280 <checkint>
 8016426:	b920      	cbnz	r0, 8016432 <powf+0x182>
 8016428:	b003      	add	sp, #12
 801642a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801642e:	f000 b9a5 	b.w	801677c <__math_invalidf>
 8016432:	1e43      	subs	r3, r0, #1
 8016434:	4258      	negs	r0, r3
 8016436:	4158      	adcs	r0, r3
 8016438:	0400      	lsls	r0, r0, #16
 801643a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801643e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8016442:	f4bf af49 	bcs.w	80162d8 <powf+0x28>
 8016446:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801655c <powf+0x2ac>
 801644a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801644e:	ee10 3a10 	vmov	r3, s0
 8016452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016456:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801645a:	e73d      	b.n	80162d8 <powf+0x28>
 801645c:	2000      	movs	r0, #0
 801645e:	e7ee      	b.n	801643e <powf+0x18e>
 8016460:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8016540 <powf+0x290>
 8016464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801646c:	dd10      	ble.n	8016490 <powf+0x1e0>
 801646e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8016472:	2800      	cmp	r0, #0
 8016474:	d158      	bne.n	8016528 <powf+0x278>
 8016476:	9300      	str	r3, [sp, #0]
 8016478:	eddd 7a00 	vldr	s15, [sp]
 801647c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016484:	eef4 7a47 	vcmp.f32	s15, s14
 8016488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801648c:	f47f af6f 	bne.w	801636e <powf+0xbe>
 8016490:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016548 <powf+0x298>
 8016494:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649c:	d804      	bhi.n	80164a8 <powf+0x1f8>
 801649e:	b003      	add	sp, #12
 80164a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164a4:	f000 b946 	b.w	8016734 <__math_uflowf>
 80164a8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8016550 <powf+0x2a0>
 80164ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80164b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b4:	d504      	bpl.n	80164c0 <powf+0x210>
 80164b6:	b003      	add	sp, #12
 80164b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164bc:	f000 b940 	b.w	8016740 <__math_may_uflowf>
 80164c0:	4b27      	ldr	r3, [pc, #156]	; (8016560 <powf+0x2b0>)
 80164c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80164c6:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 80164ca:	ee36 7b05 	vadd.f64	d7, d6, d5
 80164ce:	ee17 2a10 	vmov	r2, s14
 80164d2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80164d6:	f002 011f 	and.w	r1, r2, #31
 80164da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80164de:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80164e2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80164e6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80164ea:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80164ee:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80164f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80164f6:	686d      	ldr	r5, [r5, #4]
 80164f8:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80164fc:	1882      	adds	r2, r0, r2
 80164fe:	2300      	movs	r3, #0
 8016500:	1918      	adds	r0, r3, r4
 8016502:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8016506:	eea7 0b05 	vfma.f64	d0, d7, d5
 801650a:	ec41 0b17 	vmov	d7, r0, r1
 801650e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016512:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016516:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801651a:	e739      	b.n	8016390 <powf+0xe0>
 801651c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016520:	e736      	b.n	8016390 <powf+0xe0>
 8016522:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016564 <powf+0x2b4>
 8016526:	e733      	b.n	8016390 <powf+0xe0>
 8016528:	9301      	str	r3, [sp, #4]
 801652a:	eddd 7a01 	vldr	s15, [sp, #4]
 801652e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016536:	e7a5      	b.n	8016484 <powf+0x1d4>
 8016538:	ffd1d571 	.word	0xffd1d571
 801653c:	405fffff 	.word	0x405fffff
 8016540:	ffa3aae2 	.word	0xffa3aae2
 8016544:	405fffff 	.word	0x405fffff
 8016548:	00000000 	.word	0x00000000
 801654c:	c062c000 	.word	0xc062c000
 8016550:	00000000 	.word	0x00000000
 8016554:	c062a000 	.word	0xc062a000
 8016558:	08024498 	.word	0x08024498
 801655c:	4b000000 	.word	0x4b000000
 8016560:	08023240 	.word	0x08023240
 8016564:	00000000 	.word	0x00000000

08016568 <sinf_poly>:
 8016568:	07cb      	lsls	r3, r1, #31
 801656a:	d412      	bmi.n	8016592 <sinf_poly+0x2a>
 801656c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016570:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8016574:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8016578:	eea6 7b01 	vfma.f64	d7, d6, d1
 801657c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8016580:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016584:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016588:	eea7 0b01 	vfma.f64	d0, d7, d1
 801658c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016590:	4770      	bx	lr
 8016592:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8016596:	ee21 5b01 	vmul.f64	d5, d1, d1
 801659a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801659e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 80165a2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80165a6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 80165aa:	eea1 0b06 	vfma.f64	d0, d1, d6
 80165ae:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 80165b2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80165b6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80165ba:	e7e5      	b.n	8016588 <sinf_poly+0x20>
 80165bc:	0000      	movs	r0, r0
	...

080165c0 <cosf>:
 80165c0:	b538      	push	{r3, r4, r5, lr}
 80165c2:	ee10 4a10 	vmov	r4, s0
 80165c6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80165ca:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80165ce:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80165d2:	d21f      	bcs.n	8016614 <cosf+0x54>
 80165d4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80165d8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80165dc:	f0c0 8086 	bcc.w	80166ec <cosf+0x12c>
 80165e0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80165e4:	4b46      	ldr	r3, [pc, #280]	; (8016700 <cosf+0x140>)
 80165e6:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 80165ea:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80165ee:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 80165f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80165f6:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80165fa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80165fe:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8016602:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016606:	eea4 0b05 	vfma.f64	d0, d4, d5
 801660a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801660e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016612:	bd38      	pop	{r3, r4, r5, pc}
 8016614:	f240 422e 	movw	r2, #1070	; 0x42e
 8016618:	4293      	cmp	r3, r2
 801661a:	d829      	bhi.n	8016670 <cosf+0xb0>
 801661c:	4b38      	ldr	r3, [pc, #224]	; (8016700 <cosf+0x140>)
 801661e:	ed93 6b08 	vldr	d6, [r3, #32]
 8016622:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016626:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801662a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801662e:	ee16 1a90 	vmov	r1, s13
 8016632:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8016636:	1609      	asrs	r1, r1, #24
 8016638:	ee06 1a90 	vmov	s13, r1
 801663c:	f001 0203 	and.w	r2, r1, #3
 8016640:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016644:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8016648:	ed92 0b00 	vldr	d0, [r2]
 801664c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8016650:	f011 0f02 	tst.w	r1, #2
 8016654:	bf08      	it	eq
 8016656:	4618      	moveq	r0, r3
 8016658:	f081 0101 	eor.w	r1, r1, #1
 801665c:	eea5 7b46 	vfms.f64	d7, d5, d6
 8016660:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016668:	ee27 0b00 	vmul.f64	d0, d7, d0
 801666c:	f7ff bf7c 	b.w	8016568 <sinf_poly>
 8016670:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8016674:	d236      	bcs.n	80166e4 <cosf+0x124>
 8016676:	4a23      	ldr	r2, [pc, #140]	; (8016704 <cosf+0x144>)
 8016678:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801667c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8016680:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016684:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8016688:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801668c:	6a2a      	ldr	r2, [r5, #32]
 801668e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016692:	4083      	lsls	r3, r0
 8016694:	fba3 2002 	umull	r2, r0, r3, r2
 8016698:	692a      	ldr	r2, [r5, #16]
 801669a:	4359      	muls	r1, r3
 801669c:	fbe3 0102 	umlal	r0, r1, r3, r2
 80166a0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 80166a4:	0f9d      	lsrs	r5, r3, #30
 80166a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80166aa:	1ac9      	subs	r1, r1, r3
 80166ac:	f7e9 ffaa 	bl	8000604 <__aeabi_l2d>
 80166b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80166b4:	4b12      	ldr	r3, [pc, #72]	; (8016700 <cosf+0x140>)
 80166b6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80166f8 <cosf+0x138>
 80166ba:	ec41 0b17 	vmov	d7, r0, r1
 80166be:	f004 0203 	and.w	r2, r4, #3
 80166c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80166c6:	f014 0f02 	tst.w	r4, #2
 80166ca:	ee27 0b00 	vmul.f64	d0, d7, d0
 80166ce:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80166d2:	ed92 7b00 	vldr	d7, [r2]
 80166d6:	ee20 1b00 	vmul.f64	d1, d0, d0
 80166da:	f085 0101 	eor.w	r1, r5, #1
 80166de:	bf08      	it	eq
 80166e0:	4618      	moveq	r0, r3
 80166e2:	e7bf      	b.n	8016664 <cosf+0xa4>
 80166e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166e8:	f000 b848 	b.w	801677c <__math_invalidf>
 80166ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80166f0:	e78f      	b.n	8016612 <cosf+0x52>
 80166f2:	bf00      	nop
 80166f4:	f3af 8000 	nop.w
 80166f8:	54442d18 	.word	0x54442d18
 80166fc:	3c1921fb 	.word	0x3c1921fb
 8016700:	08023e98 	.word	0x08023e98
 8016704:	08023e38 	.word	0x08023e38

08016708 <with_errnof>:
 8016708:	b513      	push	{r0, r1, r4, lr}
 801670a:	4604      	mov	r4, r0
 801670c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016710:	f001 fdf8 	bl	8018304 <__errno>
 8016714:	ed9d 0a01 	vldr	s0, [sp, #4]
 8016718:	6004      	str	r4, [r0, #0]
 801671a:	b002      	add	sp, #8
 801671c:	bd10      	pop	{r4, pc}

0801671e <xflowf>:
 801671e:	b130      	cbz	r0, 801672e <xflowf+0x10>
 8016720:	eef1 7a40 	vneg.f32	s15, s0
 8016724:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016728:	2022      	movs	r0, #34	; 0x22
 801672a:	f7ff bfed 	b.w	8016708 <with_errnof>
 801672e:	eef0 7a40 	vmov.f32	s15, s0
 8016732:	e7f7      	b.n	8016724 <xflowf+0x6>

08016734 <__math_uflowf>:
 8016734:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801673c <__math_uflowf+0x8>
 8016738:	f7ff bff1 	b.w	801671e <xflowf>
 801673c:	10000000 	.word	0x10000000

08016740 <__math_may_uflowf>:
 8016740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016748 <__math_may_uflowf+0x8>
 8016744:	f7ff bfeb 	b.w	801671e <xflowf>
 8016748:	1a200000 	.word	0x1a200000

0801674c <__math_oflowf>:
 801674c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016754 <__math_oflowf+0x8>
 8016750:	f7ff bfe5 	b.w	801671e <xflowf>
 8016754:	70000000 	.word	0x70000000

08016758 <__math_divzerof>:
 8016758:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8016778 <__math_divzerof+0x20>
 801675c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016764:	2800      	cmp	r0, #0
 8016766:	f04f 0022 	mov.w	r0, #34	; 0x22
 801676a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801676e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016772:	f7ff bfc9 	b.w	8016708 <with_errnof>
 8016776:	bf00      	nop
 8016778:	00000000 	.word	0x00000000

0801677c <__math_invalidf>:
 801677c:	eef0 7a40 	vmov.f32	s15, s0
 8016780:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016784:	eef4 7a67 	vcmp.f32	s15, s15
 8016788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801678c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016790:	d602      	bvs.n	8016798 <__math_invalidf+0x1c>
 8016792:	2021      	movs	r0, #33	; 0x21
 8016794:	f7ff bfb8 	b.w	8016708 <with_errnof>
 8016798:	4770      	bx	lr
	...

0801679c <log10f>:
 801679c:	b508      	push	{r3, lr}
 801679e:	ed2d 8b02 	vpush	{d8}
 80167a2:	eeb0 8a40 	vmov.f32	s16, s0
 80167a6:	f000 f9ff 	bl	8016ba8 <__ieee754_log10f>
 80167aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80167ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b2:	d60f      	bvs.n	80167d4 <log10f+0x38>
 80167b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80167b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167bc:	d80a      	bhi.n	80167d4 <log10f+0x38>
 80167be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80167c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c6:	d108      	bne.n	80167da <log10f+0x3e>
 80167c8:	f001 fd9c 	bl	8018304 <__errno>
 80167cc:	2322      	movs	r3, #34	; 0x22
 80167ce:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80167f0 <log10f+0x54>
 80167d2:	6003      	str	r3, [r0, #0]
 80167d4:	ecbd 8b02 	vpop	{d8}
 80167d8:	bd08      	pop	{r3, pc}
 80167da:	f001 fd93 	bl	8018304 <__errno>
 80167de:	ecbd 8b02 	vpop	{d8}
 80167e2:	2321      	movs	r3, #33	; 0x21
 80167e4:	6003      	str	r3, [r0, #0]
 80167e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80167ea:	4802      	ldr	r0, [pc, #8]	; (80167f4 <log10f+0x58>)
 80167ec:	f000 b82a 	b.w	8016844 <nanf>
 80167f0:	ff800000 	.word	0xff800000
 80167f4:	08023238 	.word	0x08023238

080167f8 <sqrtf>:
 80167f8:	b508      	push	{r3, lr}
 80167fa:	ed2d 8b02 	vpush	{d8}
 80167fe:	eeb0 8a40 	vmov.f32	s16, s0
 8016802:	f000 f9cd 	bl	8016ba0 <__ieee754_sqrtf>
 8016806:	eeb4 8a48 	vcmp.f32	s16, s16
 801680a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680e:	d60c      	bvs.n	801682a <sqrtf+0x32>
 8016810:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016830 <sqrtf+0x38>
 8016814:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681c:	d505      	bpl.n	801682a <sqrtf+0x32>
 801681e:	f001 fd71 	bl	8018304 <__errno>
 8016822:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8016826:	2321      	movs	r3, #33	; 0x21
 8016828:	6003      	str	r3, [r0, #0]
 801682a:	ecbd 8b02 	vpop	{d8}
 801682e:	bd08      	pop	{r3, pc}
 8016830:	00000000 	.word	0x00000000

08016834 <fabsf>:
 8016834:	ee10 3a10 	vmov	r3, s0
 8016838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801683c:	ee00 3a10 	vmov	s0, r3
 8016840:	4770      	bx	lr
	...

08016844 <nanf>:
 8016844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801684c <nanf+0x8>
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	7fc00000 	.word	0x7fc00000

08016850 <tanf>:
 8016850:	ee10 3a10 	vmov	r3, s0
 8016854:	b507      	push	{r0, r1, r2, lr}
 8016856:	4a12      	ldr	r2, [pc, #72]	; (80168a0 <tanf+0x50>)
 8016858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801685c:	4293      	cmp	r3, r2
 801685e:	dc07      	bgt.n	8016870 <tanf+0x20>
 8016860:	eddf 0a10 	vldr	s1, [pc, #64]	; 80168a4 <tanf+0x54>
 8016864:	2001      	movs	r0, #1
 8016866:	b003      	add	sp, #12
 8016868:	f85d eb04 	ldr.w	lr, [sp], #4
 801686c:	f000 b8b8 	b.w	80169e0 <__kernel_tanf>
 8016870:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016874:	db04      	blt.n	8016880 <tanf+0x30>
 8016876:	ee30 0a40 	vsub.f32	s0, s0, s0
 801687a:	b003      	add	sp, #12
 801687c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016880:	4668      	mov	r0, sp
 8016882:	f000 f9e9 	bl	8016c58 <__ieee754_rem_pio2f>
 8016886:	0040      	lsls	r0, r0, #1
 8016888:	f000 0002 	and.w	r0, r0, #2
 801688c:	eddd 0a01 	vldr	s1, [sp, #4]
 8016890:	ed9d 0a00 	vldr	s0, [sp]
 8016894:	f1c0 0001 	rsb	r0, r0, #1
 8016898:	f000 f8a2 	bl	80169e0 <__kernel_tanf>
 801689c:	e7ed      	b.n	801687a <tanf+0x2a>
 801689e:	bf00      	nop
 80168a0:	3f490fda 	.word	0x3f490fda
 80168a4:	00000000 	.word	0x00000000

080168a8 <tanhf>:
 80168a8:	b538      	push	{r3, r4, r5, lr}
 80168aa:	ee10 5a10 	vmov	r5, s0
 80168ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80168b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80168b6:	ed2d 8b02 	vpush	{d8}
 80168ba:	db0f      	blt.n	80168dc <tanhf+0x34>
 80168bc:	4b2a      	ldr	r3, [pc, #168]	; (8016968 <tanhf+0xc0>)
 80168be:	ed93 6a00 	vldr	s12, [r3]
 80168c2:	edd3 6a00 	vldr	s13, [r3]
 80168c6:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80168ca:	2d00      	cmp	r5, #0
 80168cc:	bfac      	ite	ge
 80168ce:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 80168d2:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 80168d6:	ecbd 8b02 	vpop	{d8}
 80168da:	bd38      	pop	{r3, r4, r5, pc}
 80168dc:	4a23      	ldr	r2, [pc, #140]	; (801696c <tanhf+0xc4>)
 80168de:	4293      	cmp	r3, r2
 80168e0:	dc39      	bgt.n	8016956 <tanhf+0xae>
 80168e2:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80168e6:	da07      	bge.n	80168f8 <tanhf+0x50>
 80168e8:	4b1f      	ldr	r3, [pc, #124]	; (8016968 <tanhf+0xc0>)
 80168ea:	edd3 7a00 	vldr	s15, [r3]
 80168ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80168f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80168f6:	e7ee      	b.n	80168d6 <tanhf+0x2e>
 80168f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80168fc:	4c1c      	ldr	r4, [pc, #112]	; (8016970 <tanhf+0xc8>)
 80168fe:	db19      	blt.n	8016934 <tanhf+0x8c>
 8016900:	f7ff ff98 	bl	8016834 <fabsf>
 8016904:	edd4 7a00 	vldr	s15, [r4]
 8016908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801690c:	f000 ffc4 	bl	8017898 <expm1f>
 8016910:	4b15      	ldr	r3, [pc, #84]	; (8016968 <tanhf+0xc0>)
 8016912:	edd3 7a00 	vldr	s15, [r3]
 8016916:	edd4 6a00 	vldr	s13, [r4]
 801691a:	ed94 7a00 	vldr	s14, [r4]
 801691e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8016922:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8016926:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801692a:	2d00      	cmp	r5, #0
 801692c:	bfb8      	it	lt
 801692e:	eeb1 0a40 	vneglt.f32	s0, s0
 8016932:	e7d0      	b.n	80168d6 <tanhf+0x2e>
 8016934:	ed94 8a00 	vldr	s16, [r4]
 8016938:	f7ff ff7c 	bl	8016834 <fabsf>
 801693c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8016940:	f000 ffaa 	bl	8017898 <expm1f>
 8016944:	edd4 7a00 	vldr	s15, [r4]
 8016948:	ee77 7a80 	vadd.f32	s15, s15, s0
 801694c:	eeb1 7a40 	vneg.f32	s14, s0
 8016950:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016954:	e7e9      	b.n	801692a <tanhf+0x82>
 8016956:	4b04      	ldr	r3, [pc, #16]	; (8016968 <tanhf+0xc0>)
 8016958:	ed93 0a00 	vldr	s0, [r3]
 801695c:	4b05      	ldr	r3, [pc, #20]	; (8016974 <tanhf+0xcc>)
 801695e:	edd3 7a00 	vldr	s15, [r3]
 8016962:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016966:	e7e0      	b.n	801692a <tanhf+0x82>
 8016968:	200007bc 	.word	0x200007bc
 801696c:	41afffff 	.word	0x41afffff
 8016970:	200007c4 	.word	0x200007c4
 8016974:	200007c0 	.word	0x200007c0

08016978 <tan>:
 8016978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801697a:	eeb0 7b40 	vmov.f64	d7, d0
 801697e:	ee17 3a90 	vmov	r3, s15
 8016982:	4a15      	ldr	r2, [pc, #84]	; (80169d8 <tan+0x60>)
 8016984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016988:	4293      	cmp	r3, r2
 801698a:	dc07      	bgt.n	801699c <tan+0x24>
 801698c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80169d0 <tan+0x58>
 8016990:	2001      	movs	r0, #1
 8016992:	b005      	add	sp, #20
 8016994:	f85d eb04 	ldr.w	lr, [sp], #4
 8016998:	f000 be62 	b.w	8017660 <__kernel_tan>
 801699c:	4a0f      	ldr	r2, [pc, #60]	; (80169dc <tan+0x64>)
 801699e:	4293      	cmp	r3, r2
 80169a0:	dd04      	ble.n	80169ac <tan+0x34>
 80169a2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80169a6:	b005      	add	sp, #20
 80169a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80169ac:	4668      	mov	r0, sp
 80169ae:	f000 fa7f 	bl	8016eb0 <__ieee754_rem_pio2>
 80169b2:	0040      	lsls	r0, r0, #1
 80169b4:	f000 0002 	and.w	r0, r0, #2
 80169b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80169bc:	ed9d 0b00 	vldr	d0, [sp]
 80169c0:	f1c0 0001 	rsb	r0, r0, #1
 80169c4:	f000 fe4c 	bl	8017660 <__kernel_tan>
 80169c8:	e7ed      	b.n	80169a6 <tan+0x2e>
 80169ca:	bf00      	nop
 80169cc:	f3af 8000 	nop.w
	...
 80169d8:	3fe921fb 	.word	0x3fe921fb
 80169dc:	7fefffff 	.word	0x7fefffff

080169e0 <__kernel_tanf>:
 80169e0:	b508      	push	{r3, lr}
 80169e2:	ee10 3a10 	vmov	r3, s0
 80169e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80169ea:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80169ee:	eef0 7a40 	vmov.f32	s15, s0
 80169f2:	da17      	bge.n	8016a24 <__kernel_tanf+0x44>
 80169f4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80169f8:	ee17 1a10 	vmov	r1, s14
 80169fc:	bb41      	cbnz	r1, 8016a50 <__kernel_tanf+0x70>
 80169fe:	1c43      	adds	r3, r0, #1
 8016a00:	4313      	orrs	r3, r2
 8016a02:	d108      	bne.n	8016a16 <__kernel_tanf+0x36>
 8016a04:	f7ff ff16 	bl	8016834 <fabsf>
 8016a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016a0c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a10:	eeb0 0a67 	vmov.f32	s0, s15
 8016a14:	bd08      	pop	{r3, pc}
 8016a16:	2801      	cmp	r0, #1
 8016a18:	d0fa      	beq.n	8016a10 <__kernel_tanf+0x30>
 8016a1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016a1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a22:	e7f5      	b.n	8016a10 <__kernel_tanf+0x30>
 8016a24:	494c      	ldr	r1, [pc, #304]	; (8016b58 <__kernel_tanf+0x178>)
 8016a26:	428a      	cmp	r2, r1
 8016a28:	db12      	blt.n	8016a50 <__kernel_tanf+0x70>
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016b5c <__kernel_tanf+0x17c>
 8016a30:	bfb8      	it	lt
 8016a32:	eef1 7a40 	vneglt.f32	s15, s0
 8016a36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016a3a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016b60 <__kernel_tanf+0x180>
 8016a3e:	bfb8      	it	lt
 8016a40:	eef1 0a60 	vneglt.f32	s1, s1
 8016a44:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016a48:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016b64 <__kernel_tanf+0x184>
 8016a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a50:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016a54:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016b68 <__kernel_tanf+0x188>
 8016a58:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8016b6c <__kernel_tanf+0x18c>
 8016a5c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8016b70 <__kernel_tanf+0x190>
 8016a60:	493d      	ldr	r1, [pc, #244]	; (8016b58 <__kernel_tanf+0x178>)
 8016a62:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016a66:	428a      	cmp	r2, r1
 8016a68:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016a6c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016b74 <__kernel_tanf+0x194>
 8016a70:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016a74:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016b78 <__kernel_tanf+0x198>
 8016a78:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016a7c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016b7c <__kernel_tanf+0x19c>
 8016a80:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016a84:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016b80 <__kernel_tanf+0x1a0>
 8016a88:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016a8c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8016b84 <__kernel_tanf+0x1a4>
 8016a90:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016a94:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016b88 <__kernel_tanf+0x1a8>
 8016a98:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016a9c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8016b8c <__kernel_tanf+0x1ac>
 8016aa0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016aa4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016b90 <__kernel_tanf+0x1b0>
 8016aa8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016aac:	eddf 5a39 	vldr	s11, [pc, #228]	; 8016b94 <__kernel_tanf+0x1b4>
 8016ab0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016ab4:	eeb0 7a46 	vmov.f32	s14, s12
 8016ab8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016abc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016ac0:	eeb0 6a60 	vmov.f32	s12, s1
 8016ac4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016ac8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016b98 <__kernel_tanf+0x1b8>
 8016acc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016ad0:	eee5 0a07 	vfma.f32	s1, s10, s14
 8016ad4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8016ad8:	db1d      	blt.n	8016b16 <__kernel_tanf+0x136>
 8016ada:	ee07 0a10 	vmov	s14, r0
 8016ade:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016ae2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8016ae6:	ee76 6a87 	vadd.f32	s13, s13, s14
 8016aea:	179b      	asrs	r3, r3, #30
 8016aec:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8016af0:	f003 0302 	and.w	r3, r3, #2
 8016af4:	f1c3 0301 	rsb	r3, r3, #1
 8016af8:	ee76 6a60 	vsub.f32	s13, s12, s1
 8016afc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016b00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016b04:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016b08:	ee07 3a90 	vmov	s15, r3
 8016b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016b14:	e77c      	b.n	8016a10 <__kernel_tanf+0x30>
 8016b16:	2801      	cmp	r0, #1
 8016b18:	d01b      	beq.n	8016b52 <__kernel_tanf+0x172>
 8016b1a:	4b20      	ldr	r3, [pc, #128]	; (8016b9c <__kernel_tanf+0x1bc>)
 8016b1c:	ee16 2a90 	vmov	r2, s13
 8016b20:	401a      	ands	r2, r3
 8016b22:	ee05 2a90 	vmov	s11, r2
 8016b26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016b2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b2e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016b32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016b36:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8016b3a:	ee16 2a10 	vmov	r2, s12
 8016b3e:	4013      	ands	r3, r2
 8016b40:	ee07 3a90 	vmov	s15, r3
 8016b44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016b48:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016b4c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8016b50:	e75e      	b.n	8016a10 <__kernel_tanf+0x30>
 8016b52:	eef0 7a66 	vmov.f32	s15, s13
 8016b56:	e75b      	b.n	8016a10 <__kernel_tanf+0x30>
 8016b58:	3f2ca140 	.word	0x3f2ca140
 8016b5c:	3f490fda 	.word	0x3f490fda
 8016b60:	33222168 	.word	0x33222168
 8016b64:	00000000 	.word	0x00000000
 8016b68:	b79bae5f 	.word	0xb79bae5f
 8016b6c:	38a3f445 	.word	0x38a3f445
 8016b70:	37d95384 	.word	0x37d95384
 8016b74:	3a1a26c8 	.word	0x3a1a26c8
 8016b78:	3b6b6916 	.word	0x3b6b6916
 8016b7c:	3cb327a4 	.word	0x3cb327a4
 8016b80:	3e088889 	.word	0x3e088889
 8016b84:	3895c07a 	.word	0x3895c07a
 8016b88:	398137b9 	.word	0x398137b9
 8016b8c:	3abede48 	.word	0x3abede48
 8016b90:	3c11371f 	.word	0x3c11371f
 8016b94:	3d5d0dd1 	.word	0x3d5d0dd1
 8016b98:	3eaaaaab 	.word	0x3eaaaaab
 8016b9c:	fffff000 	.word	0xfffff000

08016ba0 <__ieee754_sqrtf>:
 8016ba0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016ba4:	4770      	bx	lr
	...

08016ba8 <__ieee754_log10f>:
 8016ba8:	b508      	push	{r3, lr}
 8016baa:	ee10 2a10 	vmov	r2, s0
 8016bae:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016bb2:	ed2d 8b02 	vpush	{d8}
 8016bb6:	d108      	bne.n	8016bca <__ieee754_log10f+0x22>
 8016bb8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8016c40 <__ieee754_log10f+0x98>
 8016bbc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016c44 <__ieee754_log10f+0x9c>
 8016bc0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016bc4:	ecbd 8b02 	vpop	{d8}
 8016bc8:	bd08      	pop	{r3, pc}
 8016bca:	2a00      	cmp	r2, #0
 8016bcc:	da02      	bge.n	8016bd4 <__ieee754_log10f+0x2c>
 8016bce:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016bd2:	e7f3      	b.n	8016bbc <__ieee754_log10f+0x14>
 8016bd4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016bd8:	db02      	blt.n	8016be0 <__ieee754_log10f+0x38>
 8016bda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016bde:	e7f1      	b.n	8016bc4 <__ieee754_log10f+0x1c>
 8016be0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8016be4:	bfbf      	itttt	lt
 8016be6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8016c48 <__ieee754_log10f+0xa0>
 8016bea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8016bee:	f06f 0118 	mvnlt.w	r1, #24
 8016bf2:	ee17 2a90 	vmovlt	r2, s15
 8016bf6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8016bfa:	bfa8      	it	ge
 8016bfc:	2100      	movge	r1, #0
 8016bfe:	3b7f      	subs	r3, #127	; 0x7f
 8016c00:	440b      	add	r3, r1
 8016c02:	0fd9      	lsrs	r1, r3, #31
 8016c04:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016c08:	ee07 3a90 	vmov	s15, r3
 8016c0c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016c10:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8016c14:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016c18:	ee00 3a10 	vmov	s0, r3
 8016c1c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8016c20:	f7ff f940 	bl	8015ea4 <logf>
 8016c24:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016c4c <__ieee754_log10f+0xa4>
 8016c28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016c2c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016c50 <__ieee754_log10f+0xa8>
 8016c30:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016c34:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016c54 <__ieee754_log10f+0xac>
 8016c38:	eea8 0a27 	vfma.f32	s0, s16, s15
 8016c3c:	e7c2      	b.n	8016bc4 <__ieee754_log10f+0x1c>
 8016c3e:	bf00      	nop
 8016c40:	cc000000 	.word	0xcc000000
 8016c44:	00000000 	.word	0x00000000
 8016c48:	4c000000 	.word	0x4c000000
 8016c4c:	3ede5bd9 	.word	0x3ede5bd9
 8016c50:	355427db 	.word	0x355427db
 8016c54:	3e9a2080 	.word	0x3e9a2080

08016c58 <__ieee754_rem_pio2f>:
 8016c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c5a:	ee10 6a10 	vmov	r6, s0
 8016c5e:	4b86      	ldr	r3, [pc, #536]	; (8016e78 <__ieee754_rem_pio2f+0x220>)
 8016c60:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016c64:	429d      	cmp	r5, r3
 8016c66:	b087      	sub	sp, #28
 8016c68:	4604      	mov	r4, r0
 8016c6a:	dc05      	bgt.n	8016c78 <__ieee754_rem_pio2f+0x20>
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	ed80 0a00 	vstr	s0, [r0]
 8016c72:	6043      	str	r3, [r0, #4]
 8016c74:	2000      	movs	r0, #0
 8016c76:	e020      	b.n	8016cba <__ieee754_rem_pio2f+0x62>
 8016c78:	4b80      	ldr	r3, [pc, #512]	; (8016e7c <__ieee754_rem_pio2f+0x224>)
 8016c7a:	429d      	cmp	r5, r3
 8016c7c:	dc38      	bgt.n	8016cf0 <__ieee754_rem_pio2f+0x98>
 8016c7e:	2e00      	cmp	r6, #0
 8016c80:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8016e80 <__ieee754_rem_pio2f+0x228>
 8016c84:	4b7f      	ldr	r3, [pc, #508]	; (8016e84 <__ieee754_rem_pio2f+0x22c>)
 8016c86:	f025 050f 	bic.w	r5, r5, #15
 8016c8a:	dd18      	ble.n	8016cbe <__ieee754_rem_pio2f+0x66>
 8016c8c:	429d      	cmp	r5, r3
 8016c8e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8016c92:	bf09      	itett	eq
 8016c94:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8016e88 <__ieee754_rem_pio2f+0x230>
 8016c98:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8016e8c <__ieee754_rem_pio2f+0x234>
 8016c9c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8016ca0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8016e90 <__ieee754_rem_pio2f+0x238>
 8016ca4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016cac:	edc0 6a00 	vstr	s13, [r0]
 8016cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cb4:	edc0 7a01 	vstr	s15, [r0, #4]
 8016cb8:	2001      	movs	r0, #1
 8016cba:	b007      	add	sp, #28
 8016cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cbe:	429d      	cmp	r5, r3
 8016cc0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016cc4:	bf09      	itett	eq
 8016cc6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8016e88 <__ieee754_rem_pio2f+0x230>
 8016cca:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8016e8c <__ieee754_rem_pio2f+0x234>
 8016cce:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8016cd2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8016e90 <__ieee754_rem_pio2f+0x238>
 8016cd6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016cda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016cde:	edc0 6a00 	vstr	s13, [r0]
 8016ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ce6:	edc0 7a01 	vstr	s15, [r0, #4]
 8016cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cee:	e7e4      	b.n	8016cba <__ieee754_rem_pio2f+0x62>
 8016cf0:	4b68      	ldr	r3, [pc, #416]	; (8016e94 <__ieee754_rem_pio2f+0x23c>)
 8016cf2:	429d      	cmp	r5, r3
 8016cf4:	dc71      	bgt.n	8016dda <__ieee754_rem_pio2f+0x182>
 8016cf6:	f7ff fd9d 	bl	8016834 <fabsf>
 8016cfa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016e98 <__ieee754_rem_pio2f+0x240>
 8016cfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d02:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016d0e:	ee17 0a90 	vmov	r0, s15
 8016d12:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016e80 <__ieee754_rem_pio2f+0x228>
 8016d16:	eea7 0a67 	vfms.f32	s0, s14, s15
 8016d1a:	281f      	cmp	r0, #31
 8016d1c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016e8c <__ieee754_rem_pio2f+0x234>
 8016d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016d24:	eeb1 6a47 	vneg.f32	s12, s14
 8016d28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016d2c:	ee16 2a90 	vmov	r2, s13
 8016d30:	dc1c      	bgt.n	8016d6c <__ieee754_rem_pio2f+0x114>
 8016d32:	495a      	ldr	r1, [pc, #360]	; (8016e9c <__ieee754_rem_pio2f+0x244>)
 8016d34:	1e47      	subs	r7, r0, #1
 8016d36:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8016d3a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016d3e:	428b      	cmp	r3, r1
 8016d40:	d014      	beq.n	8016d6c <__ieee754_rem_pio2f+0x114>
 8016d42:	6022      	str	r2, [r4, #0]
 8016d44:	ed94 7a00 	vldr	s14, [r4]
 8016d48:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016d4c:	2e00      	cmp	r6, #0
 8016d4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016d52:	ed84 0a01 	vstr	s0, [r4, #4]
 8016d56:	dab0      	bge.n	8016cba <__ieee754_rem_pio2f+0x62>
 8016d58:	eeb1 7a47 	vneg.f32	s14, s14
 8016d5c:	eeb1 0a40 	vneg.f32	s0, s0
 8016d60:	ed84 7a00 	vstr	s14, [r4]
 8016d64:	ed84 0a01 	vstr	s0, [r4, #4]
 8016d68:	4240      	negs	r0, r0
 8016d6a:	e7a6      	b.n	8016cba <__ieee754_rem_pio2f+0x62>
 8016d6c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016d70:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8016d74:	2908      	cmp	r1, #8
 8016d76:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8016d7a:	dde2      	ble.n	8016d42 <__ieee754_rem_pio2f+0xea>
 8016d7c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016e88 <__ieee754_rem_pio2f+0x230>
 8016d80:	eef0 6a40 	vmov.f32	s13, s0
 8016d84:	eee6 6a25 	vfma.f32	s13, s12, s11
 8016d88:	ee70 7a66 	vsub.f32	s15, s0, s13
 8016d8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016d90:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016e90 <__ieee754_rem_pio2f+0x238>
 8016d94:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8016d98:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8016d9c:	ee15 2a90 	vmov	r2, s11
 8016da0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016da4:	1a5b      	subs	r3, r3, r1
 8016da6:	2b19      	cmp	r3, #25
 8016da8:	dc04      	bgt.n	8016db4 <__ieee754_rem_pio2f+0x15c>
 8016daa:	edc4 5a00 	vstr	s11, [r4]
 8016dae:	eeb0 0a66 	vmov.f32	s0, s13
 8016db2:	e7c7      	b.n	8016d44 <__ieee754_rem_pio2f+0xec>
 8016db4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016ea0 <__ieee754_rem_pio2f+0x248>
 8016db8:	eeb0 0a66 	vmov.f32	s0, s13
 8016dbc:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016dc0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016dc4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016ea4 <__ieee754_rem_pio2f+0x24c>
 8016dc8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016dcc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016dd0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016dd4:	ed84 7a00 	vstr	s14, [r4]
 8016dd8:	e7b4      	b.n	8016d44 <__ieee754_rem_pio2f+0xec>
 8016dda:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016dde:	db06      	blt.n	8016dee <__ieee754_rem_pio2f+0x196>
 8016de0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016de4:	edc0 7a01 	vstr	s15, [r0, #4]
 8016de8:	edc0 7a00 	vstr	s15, [r0]
 8016dec:	e742      	b.n	8016c74 <__ieee754_rem_pio2f+0x1c>
 8016dee:	15ea      	asrs	r2, r5, #23
 8016df0:	3a86      	subs	r2, #134	; 0x86
 8016df2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8016df6:	ee07 3a90 	vmov	s15, r3
 8016dfa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016dfe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8016ea8 <__ieee754_rem_pio2f+0x250>
 8016e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e0a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e1e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016e22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016e26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e2e:	edcd 7a05 	vstr	s15, [sp, #20]
 8016e32:	d11e      	bne.n	8016e72 <__ieee754_rem_pio2f+0x21a>
 8016e34:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e3c:	bf14      	ite	ne
 8016e3e:	2302      	movne	r3, #2
 8016e40:	2301      	moveq	r3, #1
 8016e42:	491a      	ldr	r1, [pc, #104]	; (8016eac <__ieee754_rem_pio2f+0x254>)
 8016e44:	9101      	str	r1, [sp, #4]
 8016e46:	2102      	movs	r1, #2
 8016e48:	9100      	str	r1, [sp, #0]
 8016e4a:	a803      	add	r0, sp, #12
 8016e4c:	4621      	mov	r1, r4
 8016e4e:	f000 fec9 	bl	8017be4 <__kernel_rem_pio2f>
 8016e52:	2e00      	cmp	r6, #0
 8016e54:	f6bf af31 	bge.w	8016cba <__ieee754_rem_pio2f+0x62>
 8016e58:	edd4 7a00 	vldr	s15, [r4]
 8016e5c:	eef1 7a67 	vneg.f32	s15, s15
 8016e60:	edc4 7a00 	vstr	s15, [r4]
 8016e64:	edd4 7a01 	vldr	s15, [r4, #4]
 8016e68:	eef1 7a67 	vneg.f32	s15, s15
 8016e6c:	edc4 7a01 	vstr	s15, [r4, #4]
 8016e70:	e77a      	b.n	8016d68 <__ieee754_rem_pio2f+0x110>
 8016e72:	2303      	movs	r3, #3
 8016e74:	e7e5      	b.n	8016e42 <__ieee754_rem_pio2f+0x1ea>
 8016e76:	bf00      	nop
 8016e78:	3f490fd8 	.word	0x3f490fd8
 8016e7c:	4016cbe3 	.word	0x4016cbe3
 8016e80:	3fc90f80 	.word	0x3fc90f80
 8016e84:	3fc90fd0 	.word	0x3fc90fd0
 8016e88:	37354400 	.word	0x37354400
 8016e8c:	37354443 	.word	0x37354443
 8016e90:	2e85a308 	.word	0x2e85a308
 8016e94:	43490f80 	.word	0x43490f80
 8016e98:	3f22f984 	.word	0x3f22f984
 8016e9c:	08023f78 	.word	0x08023f78
 8016ea0:	2e85a300 	.word	0x2e85a300
 8016ea4:	248d3132 	.word	0x248d3132
 8016ea8:	43800000 	.word	0x43800000
 8016eac:	08023ff8 	.word	0x08023ff8

08016eb0 <__ieee754_rem_pio2>:
 8016eb0:	b570      	push	{r4, r5, r6, lr}
 8016eb2:	eeb0 7b40 	vmov.f64	d7, d0
 8016eb6:	ee17 5a90 	vmov	r5, s15
 8016eba:	4b99      	ldr	r3, [pc, #612]	; (8017120 <__ieee754_rem_pio2+0x270>)
 8016ebc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016ec0:	429e      	cmp	r6, r3
 8016ec2:	b088      	sub	sp, #32
 8016ec4:	4604      	mov	r4, r0
 8016ec6:	dc07      	bgt.n	8016ed8 <__ieee754_rem_pio2+0x28>
 8016ec8:	2200      	movs	r2, #0
 8016eca:	2300      	movs	r3, #0
 8016ecc:	ed84 0b00 	vstr	d0, [r4]
 8016ed0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8016ed4:	2000      	movs	r0, #0
 8016ed6:	e01b      	b.n	8016f10 <__ieee754_rem_pio2+0x60>
 8016ed8:	4b92      	ldr	r3, [pc, #584]	; (8017124 <__ieee754_rem_pio2+0x274>)
 8016eda:	429e      	cmp	r6, r3
 8016edc:	dc3b      	bgt.n	8016f56 <__ieee754_rem_pio2+0xa6>
 8016ede:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8016ee2:	2d00      	cmp	r5, #0
 8016ee4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80170e0 <__ieee754_rem_pio2+0x230>
 8016ee8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8016eec:	dd19      	ble.n	8016f22 <__ieee754_rem_pio2+0x72>
 8016eee:	ee30 7b46 	vsub.f64	d7, d0, d6
 8016ef2:	429e      	cmp	r6, r3
 8016ef4:	d00e      	beq.n	8016f14 <__ieee754_rem_pio2+0x64>
 8016ef6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80170e8 <__ieee754_rem_pio2+0x238>
 8016efa:	ee37 5b46 	vsub.f64	d5, d7, d6
 8016efe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016f02:	ed84 5b00 	vstr	d5, [r4]
 8016f06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016f0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8016f0e:	2001      	movs	r0, #1
 8016f10:	b008      	add	sp, #32
 8016f12:	bd70      	pop	{r4, r5, r6, pc}
 8016f14:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80170f0 <__ieee754_rem_pio2+0x240>
 8016f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016f1c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80170f8 <__ieee754_rem_pio2+0x248>
 8016f20:	e7eb      	b.n	8016efa <__ieee754_rem_pio2+0x4a>
 8016f22:	429e      	cmp	r6, r3
 8016f24:	ee30 7b06 	vadd.f64	d7, d0, d6
 8016f28:	d00e      	beq.n	8016f48 <__ieee754_rem_pio2+0x98>
 8016f2a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80170e8 <__ieee754_rem_pio2+0x238>
 8016f2e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8016f32:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016f36:	ed84 5b00 	vstr	d5, [r4]
 8016f3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f42:	ed84 7b02 	vstr	d7, [r4, #8]
 8016f46:	e7e3      	b.n	8016f10 <__ieee754_rem_pio2+0x60>
 8016f48:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80170f0 <__ieee754_rem_pio2+0x240>
 8016f4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016f50:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80170f8 <__ieee754_rem_pio2+0x248>
 8016f54:	e7eb      	b.n	8016f2e <__ieee754_rem_pio2+0x7e>
 8016f56:	4b74      	ldr	r3, [pc, #464]	; (8017128 <__ieee754_rem_pio2+0x278>)
 8016f58:	429e      	cmp	r6, r3
 8016f5a:	dc70      	bgt.n	801703e <__ieee754_rem_pio2+0x18e>
 8016f5c:	f000 fdb8 	bl	8017ad0 <fabs>
 8016f60:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8016f64:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017100 <__ieee754_rem_pio2+0x250>
 8016f68:	eea0 7b06 	vfma.f64	d7, d0, d6
 8016f6c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016f70:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8016f74:	ee17 0a90 	vmov	r0, s15
 8016f78:	eeb1 4b45 	vneg.f64	d4, d5
 8016f7c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80170e0 <__ieee754_rem_pio2+0x230>
 8016f80:	eea5 0b47 	vfms.f64	d0, d5, d7
 8016f84:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80170e8 <__ieee754_rem_pio2+0x238>
 8016f88:	281f      	cmp	r0, #31
 8016f8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8016f8e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8016f92:	dc08      	bgt.n	8016fa6 <__ieee754_rem_pio2+0xf6>
 8016f94:	4b65      	ldr	r3, [pc, #404]	; (801712c <__ieee754_rem_pio2+0x27c>)
 8016f96:	1e42      	subs	r2, r0, #1
 8016f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f9c:	42b3      	cmp	r3, r6
 8016f9e:	d002      	beq.n	8016fa6 <__ieee754_rem_pio2+0xf6>
 8016fa0:	ed84 6b00 	vstr	d6, [r4]
 8016fa4:	e024      	b.n	8016ff0 <__ieee754_rem_pio2+0x140>
 8016fa6:	ee16 3a90 	vmov	r3, s13
 8016faa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8016fae:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8016fb2:	2b10      	cmp	r3, #16
 8016fb4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8016fb8:	ddf2      	ble.n	8016fa0 <__ieee754_rem_pio2+0xf0>
 8016fba:	eeb0 6b40 	vmov.f64	d6, d0
 8016fbe:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 80170f0 <__ieee754_rem_pio2+0x240>
 8016fc2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8016fc6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8016fca:	eea4 7b03 	vfma.f64	d7, d4, d3
 8016fce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80170f8 <__ieee754_rem_pio2+0x248>
 8016fd2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8016fd6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8016fda:	ee13 3a90 	vmov	r3, s7
 8016fde:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8016fe2:	1ad3      	subs	r3, r2, r3
 8016fe4:	2b31      	cmp	r3, #49	; 0x31
 8016fe6:	dc17      	bgt.n	8017018 <__ieee754_rem_pio2+0x168>
 8016fe8:	eeb0 0b46 	vmov.f64	d0, d6
 8016fec:	ed84 3b00 	vstr	d3, [r4]
 8016ff0:	ed94 6b00 	vldr	d6, [r4]
 8016ff4:	2d00      	cmp	r5, #0
 8016ff6:	ee30 0b46 	vsub.f64	d0, d0, d6
 8016ffa:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016ffe:	ed84 0b02 	vstr	d0, [r4, #8]
 8017002:	da85      	bge.n	8016f10 <__ieee754_rem_pio2+0x60>
 8017004:	eeb1 6b46 	vneg.f64	d6, d6
 8017008:	eeb1 0b40 	vneg.f64	d0, d0
 801700c:	ed84 6b00 	vstr	d6, [r4]
 8017010:	ed84 0b02 	vstr	d0, [r4, #8]
 8017014:	4240      	negs	r0, r0
 8017016:	e77b      	b.n	8016f10 <__ieee754_rem_pio2+0x60>
 8017018:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8017108 <__ieee754_rem_pio2+0x258>
 801701c:	eeb0 0b46 	vmov.f64	d0, d6
 8017020:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017024:	ee36 6b40 	vsub.f64	d6, d6, d0
 8017028:	eea4 6b07 	vfma.f64	d6, d4, d7
 801702c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8017110 <__ieee754_rem_pio2+0x260>
 8017030:	eeb0 7b46 	vmov.f64	d7, d6
 8017034:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8017038:	ee30 6b47 	vsub.f64	d6, d0, d7
 801703c:	e7b0      	b.n	8016fa0 <__ieee754_rem_pio2+0xf0>
 801703e:	4b3c      	ldr	r3, [pc, #240]	; (8017130 <__ieee754_rem_pio2+0x280>)
 8017040:	429e      	cmp	r6, r3
 8017042:	dd06      	ble.n	8017052 <__ieee754_rem_pio2+0x1a2>
 8017044:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017048:	ed80 7b02 	vstr	d7, [r0, #8]
 801704c:	ed80 7b00 	vstr	d7, [r0]
 8017050:	e740      	b.n	8016ed4 <__ieee754_rem_pio2+0x24>
 8017052:	1532      	asrs	r2, r6, #20
 8017054:	ee10 0a10 	vmov	r0, s0
 8017058:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801705c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017060:	ec41 0b17 	vmov	d7, r0, r1
 8017064:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017068:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017118 <__ieee754_rem_pio2+0x268>
 801706c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017070:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017074:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017078:	ee27 7b05 	vmul.f64	d7, d7, d5
 801707c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017080:	a808      	add	r0, sp, #32
 8017082:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017086:	ee37 7b46 	vsub.f64	d7, d7, d6
 801708a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801708e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017092:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017096:	2103      	movs	r1, #3
 8017098:	ed30 7b02 	vldmdb	r0!, {d7}
 801709c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80170a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170a4:	460b      	mov	r3, r1
 80170a6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 80170aa:	d0f5      	beq.n	8017098 <__ieee754_rem_pio2+0x1e8>
 80170ac:	4921      	ldr	r1, [pc, #132]	; (8017134 <__ieee754_rem_pio2+0x284>)
 80170ae:	9101      	str	r1, [sp, #4]
 80170b0:	2102      	movs	r1, #2
 80170b2:	9100      	str	r1, [sp, #0]
 80170b4:	a802      	add	r0, sp, #8
 80170b6:	4621      	mov	r1, r4
 80170b8:	f000 f83e 	bl	8017138 <__kernel_rem_pio2>
 80170bc:	2d00      	cmp	r5, #0
 80170be:	f6bf af27 	bge.w	8016f10 <__ieee754_rem_pio2+0x60>
 80170c2:	ed94 7b00 	vldr	d7, [r4]
 80170c6:	eeb1 7b47 	vneg.f64	d7, d7
 80170ca:	ed84 7b00 	vstr	d7, [r4]
 80170ce:	ed94 7b02 	vldr	d7, [r4, #8]
 80170d2:	eeb1 7b47 	vneg.f64	d7, d7
 80170d6:	ed84 7b02 	vstr	d7, [r4, #8]
 80170da:	e79b      	b.n	8017014 <__ieee754_rem_pio2+0x164>
 80170dc:	f3af 8000 	nop.w
 80170e0:	54400000 	.word	0x54400000
 80170e4:	3ff921fb 	.word	0x3ff921fb
 80170e8:	1a626331 	.word	0x1a626331
 80170ec:	3dd0b461 	.word	0x3dd0b461
 80170f0:	1a600000 	.word	0x1a600000
 80170f4:	3dd0b461 	.word	0x3dd0b461
 80170f8:	2e037073 	.word	0x2e037073
 80170fc:	3ba3198a 	.word	0x3ba3198a
 8017100:	6dc9c883 	.word	0x6dc9c883
 8017104:	3fe45f30 	.word	0x3fe45f30
 8017108:	2e000000 	.word	0x2e000000
 801710c:	3ba3198a 	.word	0x3ba3198a
 8017110:	252049c1 	.word	0x252049c1
 8017114:	397b839a 	.word	0x397b839a
 8017118:	00000000 	.word	0x00000000
 801711c:	41700000 	.word	0x41700000
 8017120:	3fe921fb 	.word	0x3fe921fb
 8017124:	4002d97b 	.word	0x4002d97b
 8017128:	413921fb 	.word	0x413921fb
 801712c:	08024310 	.word	0x08024310
 8017130:	7fefffff 	.word	0x7fefffff
 8017134:	08024390 	.word	0x08024390

08017138 <__kernel_rem_pio2>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	ed2d 8b06 	vpush	{d8-d10}
 8017140:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8017144:	460f      	mov	r7, r1
 8017146:	9002      	str	r0, [sp, #8]
 8017148:	49c3      	ldr	r1, [pc, #780]	; (8017458 <__kernel_rem_pio2+0x320>)
 801714a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801714c:	9301      	str	r3, [sp, #4]
 801714e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8017152:	9901      	ldr	r1, [sp, #4]
 8017154:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017156:	f112 0f14 	cmn.w	r2, #20
 801715a:	bfa8      	it	ge
 801715c:	1ed0      	subge	r0, r2, #3
 801715e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8017162:	bfaa      	itet	ge
 8017164:	2418      	movge	r4, #24
 8017166:	2000      	movlt	r0, #0
 8017168:	fb90 f0f4 	sdivge	r0, r0, r4
 801716c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8017440 <__kernel_rem_pio2+0x308>
 8017170:	f06f 0417 	mvn.w	r4, #23
 8017174:	fb00 4404 	mla	r4, r0, r4, r4
 8017178:	eba0 060a 	sub.w	r6, r0, sl
 801717c:	4414      	add	r4, r2
 801717e:	eb09 0c0a 	add.w	ip, r9, sl
 8017182:	ad1a      	add	r5, sp, #104	; 0x68
 8017184:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8017188:	2200      	movs	r2, #0
 801718a:	4562      	cmp	r2, ip
 801718c:	dd10      	ble.n	80171b0 <__kernel_rem_pio2+0x78>
 801718e:	9a01      	ldr	r2, [sp, #4]
 8017190:	a91a      	add	r1, sp, #104	; 0x68
 8017192:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017196:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801719a:	f04f 0c00 	mov.w	ip, #0
 801719e:	45cc      	cmp	ip, r9
 80171a0:	dc26      	bgt.n	80171f0 <__kernel_rem_pio2+0xb8>
 80171a2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8017440 <__kernel_rem_pio2+0x308>
 80171a6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80171aa:	4616      	mov	r6, r2
 80171ac:	2500      	movs	r5, #0
 80171ae:	e015      	b.n	80171dc <__kernel_rem_pio2+0xa4>
 80171b0:	42d6      	cmn	r6, r2
 80171b2:	d409      	bmi.n	80171c8 <__kernel_rem_pio2+0x90>
 80171b4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 80171b8:	ee07 1a90 	vmov	s15, r1
 80171bc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80171c0:	eca5 7b02 	vstmia	r5!, {d7}
 80171c4:	3201      	adds	r2, #1
 80171c6:	e7e0      	b.n	801718a <__kernel_rem_pio2+0x52>
 80171c8:	eeb0 7b46 	vmov.f64	d7, d6
 80171cc:	e7f8      	b.n	80171c0 <__kernel_rem_pio2+0x88>
 80171ce:	ecbe 5b02 	vldmia	lr!, {d5}
 80171d2:	ed96 6b00 	vldr	d6, [r6]
 80171d6:	3501      	adds	r5, #1
 80171d8:	eea5 7b06 	vfma.f64	d7, d5, d6
 80171dc:	4555      	cmp	r5, sl
 80171de:	f1a6 0608 	sub.w	r6, r6, #8
 80171e2:	ddf4      	ble.n	80171ce <__kernel_rem_pio2+0x96>
 80171e4:	eca8 7b02 	vstmia	r8!, {d7}
 80171e8:	f10c 0c01 	add.w	ip, ip, #1
 80171ec:	3208      	adds	r2, #8
 80171ee:	e7d6      	b.n	801719e <__kernel_rem_pio2+0x66>
 80171f0:	aa06      	add	r2, sp, #24
 80171f2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8017448 <__kernel_rem_pio2+0x310>
 80171f6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017450 <__kernel_rem_pio2+0x318>
 80171fa:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80171fe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017202:	9204      	str	r2, [sp, #16]
 8017204:	9303      	str	r3, [sp, #12]
 8017206:	464d      	mov	r5, r9
 8017208:	00eb      	lsls	r3, r5, #3
 801720a:	9305      	str	r3, [sp, #20]
 801720c:	ab92      	add	r3, sp, #584	; 0x248
 801720e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017212:	f10d 0b18 	add.w	fp, sp, #24
 8017216:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017218:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801721c:	465e      	mov	r6, fp
 801721e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017222:	4628      	mov	r0, r5
 8017224:	2800      	cmp	r0, #0
 8017226:	f1a2 0208 	sub.w	r2, r2, #8
 801722a:	dc48      	bgt.n	80172be <__kernel_rem_pio2+0x186>
 801722c:	4620      	mov	r0, r4
 801722e:	f000 fc5b 	bl	8017ae8 <scalbn>
 8017232:	eeb0 8b40 	vmov.f64	d8, d0
 8017236:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801723a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801723e:	f000 ff43 	bl	80180c8 <floor>
 8017242:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017246:	eea0 8b47 	vfms.f64	d8, d0, d7
 801724a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801724e:	2c00      	cmp	r4, #0
 8017250:	ee17 8a90 	vmov	r8, s15
 8017254:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017258:	ee38 8b47 	vsub.f64	d8, d8, d7
 801725c:	dd41      	ble.n	80172e2 <__kernel_rem_pio2+0x1aa>
 801725e:	1e68      	subs	r0, r5, #1
 8017260:	ab06      	add	r3, sp, #24
 8017262:	f1c4 0c18 	rsb	ip, r4, #24
 8017266:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801726a:	fa46 f20c 	asr.w	r2, r6, ip
 801726e:	4490      	add	r8, r2
 8017270:	fa02 f20c 	lsl.w	r2, r2, ip
 8017274:	1ab6      	subs	r6, r6, r2
 8017276:	f1c4 0217 	rsb	r2, r4, #23
 801727a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801727e:	4116      	asrs	r6, r2
 8017280:	2e00      	cmp	r6, #0
 8017282:	dd3d      	ble.n	8017300 <__kernel_rem_pio2+0x1c8>
 8017284:	f04f 0c00 	mov.w	ip, #0
 8017288:	f108 0801 	add.w	r8, r8, #1
 801728c:	4660      	mov	r0, ip
 801728e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017292:	4565      	cmp	r5, ip
 8017294:	dc6a      	bgt.n	801736c <__kernel_rem_pio2+0x234>
 8017296:	2c00      	cmp	r4, #0
 8017298:	dd04      	ble.n	80172a4 <__kernel_rem_pio2+0x16c>
 801729a:	2c01      	cmp	r4, #1
 801729c:	d07b      	beq.n	8017396 <__kernel_rem_pio2+0x25e>
 801729e:	2c02      	cmp	r4, #2
 80172a0:	f000 8083 	beq.w	80173aa <__kernel_rem_pio2+0x272>
 80172a4:	2e02      	cmp	r6, #2
 80172a6:	d12b      	bne.n	8017300 <__kernel_rem_pio2+0x1c8>
 80172a8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80172ac:	ee30 8b48 	vsub.f64	d8, d0, d8
 80172b0:	b330      	cbz	r0, 8017300 <__kernel_rem_pio2+0x1c8>
 80172b2:	4620      	mov	r0, r4
 80172b4:	f000 fc18 	bl	8017ae8 <scalbn>
 80172b8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80172bc:	e020      	b.n	8017300 <__kernel_rem_pio2+0x1c8>
 80172be:	ee20 7b09 	vmul.f64	d7, d0, d9
 80172c2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80172c6:	3801      	subs	r0, #1
 80172c8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80172cc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80172d0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80172d4:	eca6 0a01 	vstmia	r6!, {s0}
 80172d8:	ed92 0b00 	vldr	d0, [r2]
 80172dc:	ee37 0b00 	vadd.f64	d0, d7, d0
 80172e0:	e7a0      	b.n	8017224 <__kernel_rem_pio2+0xec>
 80172e2:	d105      	bne.n	80172f0 <__kernel_rem_pio2+0x1b8>
 80172e4:	1e6a      	subs	r2, r5, #1
 80172e6:	ab06      	add	r3, sp, #24
 80172e8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80172ec:	15f6      	asrs	r6, r6, #23
 80172ee:	e7c7      	b.n	8017280 <__kernel_rem_pio2+0x148>
 80172f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80172f4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80172f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fc:	da34      	bge.n	8017368 <__kernel_rem_pio2+0x230>
 80172fe:	2600      	movs	r6, #0
 8017300:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017308:	f040 80aa 	bne.w	8017460 <__kernel_rem_pio2+0x328>
 801730c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8017310:	4658      	mov	r0, fp
 8017312:	2200      	movs	r2, #0
 8017314:	4548      	cmp	r0, r9
 8017316:	da50      	bge.n	80173ba <__kernel_rem_pio2+0x282>
 8017318:	2a00      	cmp	r2, #0
 801731a:	d06b      	beq.n	80173f4 <__kernel_rem_pio2+0x2bc>
 801731c:	ab06      	add	r3, sp, #24
 801731e:	3c18      	subs	r4, #24
 8017320:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017324:	2b00      	cmp	r3, #0
 8017326:	f000 8087 	beq.w	8017438 <__kernel_rem_pio2+0x300>
 801732a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801732e:	4620      	mov	r0, r4
 8017330:	f000 fbda 	bl	8017ae8 <scalbn>
 8017334:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8017448 <__kernel_rem_pio2+0x310>
 8017338:	f10b 0201 	add.w	r2, fp, #1
 801733c:	a96a      	add	r1, sp, #424	; 0x1a8
 801733e:	00d3      	lsls	r3, r2, #3
 8017340:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017344:	465a      	mov	r2, fp
 8017346:	2a00      	cmp	r2, #0
 8017348:	f280 80b8 	bge.w	80174bc <__kernel_rem_pio2+0x384>
 801734c:	465a      	mov	r2, fp
 801734e:	2a00      	cmp	r2, #0
 8017350:	f2c0 80d6 	blt.w	8017500 <__kernel_rem_pio2+0x3c8>
 8017354:	a96a      	add	r1, sp, #424	; 0x1a8
 8017356:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801735a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8017440 <__kernel_rem_pio2+0x308>
 801735e:	4d3f      	ldr	r5, [pc, #252]	; (801745c <__kernel_rem_pio2+0x324>)
 8017360:	2000      	movs	r0, #0
 8017362:	ebab 0102 	sub.w	r1, fp, r2
 8017366:	e0c0      	b.n	80174ea <__kernel_rem_pio2+0x3b2>
 8017368:	2602      	movs	r6, #2
 801736a:	e78b      	b.n	8017284 <__kernel_rem_pio2+0x14c>
 801736c:	f8db 2000 	ldr.w	r2, [fp]
 8017370:	b958      	cbnz	r0, 801738a <__kernel_rem_pio2+0x252>
 8017372:	b122      	cbz	r2, 801737e <__kernel_rem_pio2+0x246>
 8017374:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017378:	f8cb 2000 	str.w	r2, [fp]
 801737c:	2201      	movs	r2, #1
 801737e:	f10c 0c01 	add.w	ip, ip, #1
 8017382:	f10b 0b04 	add.w	fp, fp, #4
 8017386:	4610      	mov	r0, r2
 8017388:	e783      	b.n	8017292 <__kernel_rem_pio2+0x15a>
 801738a:	ebae 0202 	sub.w	r2, lr, r2
 801738e:	f8cb 2000 	str.w	r2, [fp]
 8017392:	4602      	mov	r2, r0
 8017394:	e7f3      	b.n	801737e <__kernel_rem_pio2+0x246>
 8017396:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801739a:	ab06      	add	r3, sp, #24
 801739c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80173a0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80173a4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80173a8:	e77c      	b.n	80172a4 <__kernel_rem_pio2+0x16c>
 80173aa:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80173ae:	ab06      	add	r3, sp, #24
 80173b0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80173b4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80173b8:	e7f4      	b.n	80173a4 <__kernel_rem_pio2+0x26c>
 80173ba:	ab06      	add	r3, sp, #24
 80173bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80173c0:	3801      	subs	r0, #1
 80173c2:	431a      	orrs	r2, r3
 80173c4:	e7a6      	b.n	8017314 <__kernel_rem_pio2+0x1dc>
 80173c6:	3201      	adds	r2, #1
 80173c8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80173cc:	2e00      	cmp	r6, #0
 80173ce:	d0fa      	beq.n	80173c6 <__kernel_rem_pio2+0x28e>
 80173d0:	9b05      	ldr	r3, [sp, #20]
 80173d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80173d6:	eb0d 0003 	add.w	r0, sp, r3
 80173da:	9b01      	ldr	r3, [sp, #4]
 80173dc:	18ee      	adds	r6, r5, r3
 80173de:	ab1a      	add	r3, sp, #104	; 0x68
 80173e0:	f105 0c01 	add.w	ip, r5, #1
 80173e4:	3898      	subs	r0, #152	; 0x98
 80173e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80173ea:	442a      	add	r2, r5
 80173ec:	4562      	cmp	r2, ip
 80173ee:	da04      	bge.n	80173fa <__kernel_rem_pio2+0x2c2>
 80173f0:	4615      	mov	r5, r2
 80173f2:	e709      	b.n	8017208 <__kernel_rem_pio2+0xd0>
 80173f4:	9804      	ldr	r0, [sp, #16]
 80173f6:	2201      	movs	r2, #1
 80173f8:	e7e6      	b.n	80173c8 <__kernel_rem_pio2+0x290>
 80173fa:	9b03      	ldr	r3, [sp, #12]
 80173fc:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017400:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017404:	9305      	str	r3, [sp, #20]
 8017406:	ee07 3a90 	vmov	s15, r3
 801740a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801740e:	2500      	movs	r5, #0
 8017410:	eca6 7b02 	vstmia	r6!, {d7}
 8017414:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8017440 <__kernel_rem_pio2+0x308>
 8017418:	46b0      	mov	r8, r6
 801741a:	4555      	cmp	r5, sl
 801741c:	dd04      	ble.n	8017428 <__kernel_rem_pio2+0x2f0>
 801741e:	eca0 7b02 	vstmia	r0!, {d7}
 8017422:	f10c 0c01 	add.w	ip, ip, #1
 8017426:	e7e1      	b.n	80173ec <__kernel_rem_pio2+0x2b4>
 8017428:	ecbe 5b02 	vldmia	lr!, {d5}
 801742c:	ed38 6b02 	vldmdb	r8!, {d6}
 8017430:	3501      	adds	r5, #1
 8017432:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017436:	e7f0      	b.n	801741a <__kernel_rem_pio2+0x2e2>
 8017438:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801743c:	e76e      	b.n	801731c <__kernel_rem_pio2+0x1e4>
 801743e:	bf00      	nop
	...
 801744c:	3e700000 	.word	0x3e700000
 8017450:	00000000 	.word	0x00000000
 8017454:	41700000 	.word	0x41700000
 8017458:	08024600 	.word	0x08024600
 801745c:	080245c0 	.word	0x080245c0
 8017460:	4260      	negs	r0, r4
 8017462:	eeb0 0b48 	vmov.f64	d0, d8
 8017466:	f000 fb3f 	bl	8017ae8 <scalbn>
 801746a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8017648 <__kernel_rem_pio2+0x510>
 801746e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017476:	db18      	blt.n	80174aa <__kernel_rem_pio2+0x372>
 8017478:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8017650 <__kernel_rem_pio2+0x518>
 801747c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017480:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017484:	aa06      	add	r2, sp, #24
 8017486:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801748a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801748e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017492:	f105 0b01 	add.w	fp, r5, #1
 8017496:	ee10 3a10 	vmov	r3, s0
 801749a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801749e:	ee17 3a10 	vmov	r3, s14
 80174a2:	3418      	adds	r4, #24
 80174a4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80174a8:	e73f      	b.n	801732a <__kernel_rem_pio2+0x1f2>
 80174aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80174ae:	aa06      	add	r2, sp, #24
 80174b0:	ee10 3a10 	vmov	r3, s0
 80174b4:	46ab      	mov	fp, r5
 80174b6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80174ba:	e736      	b.n	801732a <__kernel_rem_pio2+0x1f2>
 80174bc:	a806      	add	r0, sp, #24
 80174be:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80174c2:	9001      	str	r0, [sp, #4]
 80174c4:	ee07 0a90 	vmov	s15, r0
 80174c8:	3a01      	subs	r2, #1
 80174ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80174ce:	ee27 7b00 	vmul.f64	d7, d7, d0
 80174d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80174d6:	ed21 7b02 	vstmdb	r1!, {d7}
 80174da:	e734      	b.n	8017346 <__kernel_rem_pio2+0x20e>
 80174dc:	ecb5 5b02 	vldmia	r5!, {d5}
 80174e0:	ecb4 6b02 	vldmia	r4!, {d6}
 80174e4:	3001      	adds	r0, #1
 80174e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80174ea:	4548      	cmp	r0, r9
 80174ec:	dc01      	bgt.n	80174f2 <__kernel_rem_pio2+0x3ba>
 80174ee:	4288      	cmp	r0, r1
 80174f0:	ddf4      	ble.n	80174dc <__kernel_rem_pio2+0x3a4>
 80174f2:	a842      	add	r0, sp, #264	; 0x108
 80174f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80174f8:	ed81 7b00 	vstr	d7, [r1]
 80174fc:	3a01      	subs	r2, #1
 80174fe:	e726      	b.n	801734e <__kernel_rem_pio2+0x216>
 8017500:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017502:	2a02      	cmp	r2, #2
 8017504:	dc0a      	bgt.n	801751c <__kernel_rem_pio2+0x3e4>
 8017506:	2a00      	cmp	r2, #0
 8017508:	dc2e      	bgt.n	8017568 <__kernel_rem_pio2+0x430>
 801750a:	d047      	beq.n	801759c <__kernel_rem_pio2+0x464>
 801750c:	f008 0007 	and.w	r0, r8, #7
 8017510:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8017514:	ecbd 8b06 	vpop	{d8-d10}
 8017518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801751c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801751e:	2a03      	cmp	r2, #3
 8017520:	d1f4      	bne.n	801750c <__kernel_rem_pio2+0x3d4>
 8017522:	a942      	add	r1, sp, #264	; 0x108
 8017524:	f1a3 0208 	sub.w	r2, r3, #8
 8017528:	440a      	add	r2, r1
 801752a:	4611      	mov	r1, r2
 801752c:	4658      	mov	r0, fp
 801752e:	2800      	cmp	r0, #0
 8017530:	f1a1 0108 	sub.w	r1, r1, #8
 8017534:	dc55      	bgt.n	80175e2 <__kernel_rem_pio2+0x4aa>
 8017536:	4659      	mov	r1, fp
 8017538:	2901      	cmp	r1, #1
 801753a:	f1a2 0208 	sub.w	r2, r2, #8
 801753e:	dc60      	bgt.n	8017602 <__kernel_rem_pio2+0x4ca>
 8017540:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8017658 <__kernel_rem_pio2+0x520>
 8017544:	aa42      	add	r2, sp, #264	; 0x108
 8017546:	4413      	add	r3, r2
 8017548:	f1bb 0f01 	cmp.w	fp, #1
 801754c:	dc69      	bgt.n	8017622 <__kernel_rem_pio2+0x4ea>
 801754e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8017552:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8017556:	2e00      	cmp	r6, #0
 8017558:	d16a      	bne.n	8017630 <__kernel_rem_pio2+0x4f8>
 801755a:	ed87 5b00 	vstr	d5, [r7]
 801755e:	ed87 6b02 	vstr	d6, [r7, #8]
 8017562:	ed87 7b04 	vstr	d7, [r7, #16]
 8017566:	e7d1      	b.n	801750c <__kernel_rem_pio2+0x3d4>
 8017568:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8017658 <__kernel_rem_pio2+0x520>
 801756c:	aa42      	add	r2, sp, #264	; 0x108
 801756e:	4413      	add	r3, r2
 8017570:	465a      	mov	r2, fp
 8017572:	2a00      	cmp	r2, #0
 8017574:	da26      	bge.n	80175c4 <__kernel_rem_pio2+0x48c>
 8017576:	b35e      	cbz	r6, 80175d0 <__kernel_rem_pio2+0x498>
 8017578:	eeb1 7b46 	vneg.f64	d7, d6
 801757c:	ed87 7b00 	vstr	d7, [r7]
 8017580:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8017584:	aa44      	add	r2, sp, #272	; 0x110
 8017586:	2301      	movs	r3, #1
 8017588:	ee37 7b46 	vsub.f64	d7, d7, d6
 801758c:	459b      	cmp	fp, r3
 801758e:	da22      	bge.n	80175d6 <__kernel_rem_pio2+0x49e>
 8017590:	b10e      	cbz	r6, 8017596 <__kernel_rem_pio2+0x45e>
 8017592:	eeb1 7b47 	vneg.f64	d7, d7
 8017596:	ed87 7b02 	vstr	d7, [r7, #8]
 801759a:	e7b7      	b.n	801750c <__kernel_rem_pio2+0x3d4>
 801759c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017658 <__kernel_rem_pio2+0x520>
 80175a0:	aa42      	add	r2, sp, #264	; 0x108
 80175a2:	4413      	add	r3, r2
 80175a4:	f1bb 0f00 	cmp.w	fp, #0
 80175a8:	da05      	bge.n	80175b6 <__kernel_rem_pio2+0x47e>
 80175aa:	b10e      	cbz	r6, 80175b0 <__kernel_rem_pio2+0x478>
 80175ac:	eeb1 7b47 	vneg.f64	d7, d7
 80175b0:	ed87 7b00 	vstr	d7, [r7]
 80175b4:	e7aa      	b.n	801750c <__kernel_rem_pio2+0x3d4>
 80175b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80175ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80175be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80175c2:	e7ef      	b.n	80175a4 <__kernel_rem_pio2+0x46c>
 80175c4:	ed33 7b02 	vldmdb	r3!, {d7}
 80175c8:	3a01      	subs	r2, #1
 80175ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80175ce:	e7d0      	b.n	8017572 <__kernel_rem_pio2+0x43a>
 80175d0:	eeb0 7b46 	vmov.f64	d7, d6
 80175d4:	e7d2      	b.n	801757c <__kernel_rem_pio2+0x444>
 80175d6:	ecb2 6b02 	vldmia	r2!, {d6}
 80175da:	3301      	adds	r3, #1
 80175dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80175e0:	e7d4      	b.n	801758c <__kernel_rem_pio2+0x454>
 80175e2:	ed91 7b00 	vldr	d7, [r1]
 80175e6:	ed91 5b02 	vldr	d5, [r1, #8]
 80175ea:	3801      	subs	r0, #1
 80175ec:	ee37 6b05 	vadd.f64	d6, d7, d5
 80175f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80175f4:	ed81 6b00 	vstr	d6, [r1]
 80175f8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80175fc:	ed81 7b02 	vstr	d7, [r1, #8]
 8017600:	e795      	b.n	801752e <__kernel_rem_pio2+0x3f6>
 8017602:	ed92 7b00 	vldr	d7, [r2]
 8017606:	ed92 5b02 	vldr	d5, [r2, #8]
 801760a:	3901      	subs	r1, #1
 801760c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017610:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017614:	ed82 6b00 	vstr	d6, [r2]
 8017618:	ee37 7b05 	vadd.f64	d7, d7, d5
 801761c:	ed82 7b02 	vstr	d7, [r2, #8]
 8017620:	e78a      	b.n	8017538 <__kernel_rem_pio2+0x400>
 8017622:	ed33 6b02 	vldmdb	r3!, {d6}
 8017626:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801762a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801762e:	e78b      	b.n	8017548 <__kernel_rem_pio2+0x410>
 8017630:	eeb1 5b45 	vneg.f64	d5, d5
 8017634:	eeb1 6b46 	vneg.f64	d6, d6
 8017638:	ed87 5b00 	vstr	d5, [r7]
 801763c:	eeb1 7b47 	vneg.f64	d7, d7
 8017640:	ed87 6b02 	vstr	d6, [r7, #8]
 8017644:	e78d      	b.n	8017562 <__kernel_rem_pio2+0x42a>
 8017646:	bf00      	nop
 8017648:	00000000 	.word	0x00000000
 801764c:	41700000 	.word	0x41700000
 8017650:	00000000 	.word	0x00000000
 8017654:	3e700000 	.word	0x3e700000
	...

08017660 <__kernel_tan>:
 8017660:	eeb0 7b40 	vmov.f64	d7, d0
 8017664:	ee17 3a90 	vmov	r3, s15
 8017668:	4989      	ldr	r1, [pc, #548]	; (8017890 <__kernel_tan+0x230>)
 801766a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801766e:	428a      	cmp	r2, r1
 8017670:	b510      	push	{r4, lr}
 8017672:	dc33      	bgt.n	80176dc <__kernel_tan+0x7c>
 8017674:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8017678:	ee16 1a90 	vmov	r1, s13
 801767c:	2900      	cmp	r1, #0
 801767e:	d143      	bne.n	8017708 <__kernel_tan+0xa8>
 8017680:	ee10 4a10 	vmov	r4, s0
 8017684:	1c43      	adds	r3, r0, #1
 8017686:	4323      	orrs	r3, r4
 8017688:	4313      	orrs	r3, r2
 801768a:	d108      	bne.n	801769e <__kernel_tan+0x3e>
 801768c:	f000 fa20 	bl	8017ad0 <fabs>
 8017690:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017694:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017698:	eeb0 0b47 	vmov.f64	d0, d7
 801769c:	bd10      	pop	{r4, pc}
 801769e:	2801      	cmp	r0, #1
 80176a0:	d0fa      	beq.n	8017698 <__kernel_tan+0x38>
 80176a2:	ee30 6b01 	vadd.f64	d6, d0, d1
 80176a6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80176aa:	ec53 2b16 	vmov	r2, r3, d6
 80176ae:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80176b2:	460a      	mov	r2, r1
 80176b4:	ec43 2b15 	vmov	d5, r2, r3
 80176b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80176bc:	ec53 2b13 	vmov	r2, r3, d3
 80176c0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80176c4:	460a      	mov	r2, r1
 80176c6:	ec43 2b17 	vmov	d7, r2, r3
 80176ca:	ee31 4b44 	vsub.f64	d4, d1, d4
 80176ce:	eea5 6b07 	vfma.f64	d6, d5, d7
 80176d2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80176d6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80176da:	e7dd      	b.n	8017698 <__kernel_tan+0x38>
 80176dc:	496d      	ldr	r1, [pc, #436]	; (8017894 <__kernel_tan+0x234>)
 80176de:	428a      	cmp	r2, r1
 80176e0:	dd12      	ble.n	8017708 <__kernel_tan+0xa8>
 80176e2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8017810 <__kernel_tan+0x1b0>
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	bfb8      	it	lt
 80176ea:	eeb1 7b40 	vneglt.f64	d7, d0
 80176ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80176f2:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8017818 <__kernel_tan+0x1b8>
 80176f6:	bfb8      	it	lt
 80176f8:	eeb1 1b41 	vneglt.f64	d1, d1
 80176fc:	ee37 7b41 	vsub.f64	d7, d7, d1
 8017700:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8017820 <__kernel_tan+0x1c0>
 8017704:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017708:	ee27 5b07 	vmul.f64	d5, d7, d7
 801770c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8017828 <__kernel_tan+0x1c8>
 8017710:	ee25 6b05 	vmul.f64	d6, d5, d5
 8017714:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8017830 <__kernel_tan+0x1d0>
 8017718:	eea6 4b03 	vfma.f64	d4, d6, d3
 801771c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8017838 <__kernel_tan+0x1d8>
 8017720:	eea4 3b06 	vfma.f64	d3, d4, d6
 8017724:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8017840 <__kernel_tan+0x1e0>
 8017728:	eea3 4b06 	vfma.f64	d4, d3, d6
 801772c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8017848 <__kernel_tan+0x1e8>
 8017730:	eea4 3b06 	vfma.f64	d3, d4, d6
 8017734:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8017850 <__kernel_tan+0x1f0>
 8017738:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8017858 <__kernel_tan+0x1f8>
 801773c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8017740:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8017860 <__kernel_tan+0x200>
 8017744:	eea6 3b02 	vfma.f64	d3, d6, d2
 8017748:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8017868 <__kernel_tan+0x208>
 801774c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8017750:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8017870 <__kernel_tan+0x210>
 8017754:	eea2 3b06 	vfma.f64	d3, d2, d6
 8017758:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8017878 <__kernel_tan+0x218>
 801775c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8017760:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8017880 <__kernel_tan+0x220>
 8017764:	494b      	ldr	r1, [pc, #300]	; (8017894 <__kernel_tan+0x234>)
 8017766:	eea2 3b06 	vfma.f64	d3, d2, d6
 801776a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801776e:	eeb0 6b44 	vmov.f64	d6, d4
 8017772:	eeb0 4b41 	vmov.f64	d4, d1
 8017776:	eea3 6b05 	vfma.f64	d6, d3, d5
 801777a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801777e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8017888 <__kernel_tan+0x228>
 8017782:	eea4 1b05 	vfma.f64	d1, d4, d5
 8017786:	428a      	cmp	r2, r1
 8017788:	eea2 1b06 	vfma.f64	d1, d2, d6
 801778c:	ee37 5b01 	vadd.f64	d5, d7, d1
 8017790:	dd1d      	ble.n	80177ce <__kernel_tan+0x16e>
 8017792:	ee25 3b05 	vmul.f64	d3, d5, d5
 8017796:	179b      	asrs	r3, r3, #30
 8017798:	ee06 0a90 	vmov	s13, r0
 801779c:	f003 0302 	and.w	r3, r3, #2
 80177a0:	f1c3 0301 	rsb	r3, r3, #1
 80177a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80177a8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80177ac:	ee83 4b05 	vdiv.f64	d4, d3, d5
 80177b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80177b4:	ee34 4b41 	vsub.f64	d4, d4, d1
 80177b8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80177bc:	eea7 6b45 	vfms.f64	d6, d7, d5
 80177c0:	ee07 3a90 	vmov	s15, r3
 80177c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80177c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80177cc:	e764      	b.n	8017698 <__kernel_tan+0x38>
 80177ce:	2801      	cmp	r0, #1
 80177d0:	d01a      	beq.n	8017808 <__kernel_tan+0x1a8>
 80177d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80177d6:	ec51 0b15 	vmov	r0, r1, d5
 80177da:	2000      	movs	r0, #0
 80177dc:	ec41 0b13 	vmov	d3, r0, r1
 80177e0:	ee33 7b47 	vsub.f64	d7, d3, d7
 80177e4:	ee31 1b47 	vsub.f64	d1, d1, d7
 80177e8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80177ec:	ee87 4b05 	vdiv.f64	d4, d7, d5
 80177f0:	ec53 2b14 	vmov	r2, r3, d4
 80177f4:	4602      	mov	r2, r0
 80177f6:	ec43 2b17 	vmov	d7, r2, r3
 80177fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80177fe:	eea1 6b07 	vfma.f64	d6, d1, d7
 8017802:	eea6 7b04 	vfma.f64	d7, d6, d4
 8017806:	e747      	b.n	8017698 <__kernel_tan+0x38>
 8017808:	eeb0 7b45 	vmov.f64	d7, d5
 801780c:	e744      	b.n	8017698 <__kernel_tan+0x38>
 801780e:	bf00      	nop
 8017810:	54442d18 	.word	0x54442d18
 8017814:	3fe921fb 	.word	0x3fe921fb
 8017818:	33145c07 	.word	0x33145c07
 801781c:	3c81a626 	.word	0x3c81a626
	...
 8017828:	db605373 	.word	0xdb605373
 801782c:	bef375cb 	.word	0xbef375cb
 8017830:	a03792a6 	.word	0xa03792a6
 8017834:	3f147e88 	.word	0x3f147e88
 8017838:	f2f26501 	.word	0xf2f26501
 801783c:	3f4344d8 	.word	0x3f4344d8
 8017840:	c9560328 	.word	0xc9560328
 8017844:	3f6d6d22 	.word	0x3f6d6d22
 8017848:	8406d637 	.word	0x8406d637
 801784c:	3f9664f4 	.word	0x3f9664f4
 8017850:	1110fe7a 	.word	0x1110fe7a
 8017854:	3fc11111 	.word	0x3fc11111
 8017858:	74bf7ad4 	.word	0x74bf7ad4
 801785c:	3efb2a70 	.word	0x3efb2a70
 8017860:	32f0a7e9 	.word	0x32f0a7e9
 8017864:	3f12b80f 	.word	0x3f12b80f
 8017868:	1a8d1068 	.word	0x1a8d1068
 801786c:	3f3026f7 	.word	0x3f3026f7
 8017870:	fee08315 	.word	0xfee08315
 8017874:	3f57dbc8 	.word	0x3f57dbc8
 8017878:	e96e8493 	.word	0xe96e8493
 801787c:	3f8226e3 	.word	0x3f8226e3
 8017880:	1bb341fe 	.word	0x1bb341fe
 8017884:	3faba1ba 	.word	0x3faba1ba
 8017888:	55555563 	.word	0x55555563
 801788c:	3fd55555 	.word	0x3fd55555
 8017890:	3e2fffff 	.word	0x3e2fffff
 8017894:	3fe59427 	.word	0x3fe59427

08017898 <expm1f>:
 8017898:	ee10 2a10 	vmov	r2, s0
 801789c:	497d      	ldr	r1, [pc, #500]	; (8017a94 <expm1f+0x1fc>)
 801789e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80178a2:	428b      	cmp	r3, r1
 80178a4:	d920      	bls.n	80178e8 <expm1f+0x50>
 80178a6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80178aa:	d902      	bls.n	80178b2 <expm1f+0x1a>
 80178ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 80178b0:	4770      	bx	lr
 80178b2:	d105      	bne.n	80178c0 <expm1f+0x28>
 80178b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	fe20 0a27 	vselge.f32	s0, s0, s15
 80178be:	4770      	bx	lr
 80178c0:	2a00      	cmp	r2, #0
 80178c2:	db05      	blt.n	80178d0 <expm1f+0x38>
 80178c4:	4974      	ldr	r1, [pc, #464]	; (8017a98 <expm1f+0x200>)
 80178c6:	428b      	cmp	r3, r1
 80178c8:	d95c      	bls.n	8017984 <expm1f+0xec>
 80178ca:	2000      	movs	r0, #0
 80178cc:	f7fe bf3e 	b.w	801674c <__math_oflowf>
 80178d0:	eddf 7a72 	vldr	s15, [pc, #456]	; 8017a9c <expm1f+0x204>
 80178d4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80178d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80178dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e0:	d550      	bpl.n	8017984 <expm1f+0xec>
 80178e2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80178e6:	4770      	bx	lr
 80178e8:	496d      	ldr	r1, [pc, #436]	; (8017aa0 <expm1f+0x208>)
 80178ea:	428b      	cmp	r3, r1
 80178ec:	d966      	bls.n	80179bc <expm1f+0x124>
 80178ee:	496d      	ldr	r1, [pc, #436]	; (8017aa4 <expm1f+0x20c>)
 80178f0:	428b      	cmp	r3, r1
 80178f2:	d847      	bhi.n	8017984 <expm1f+0xec>
 80178f4:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8017aa8 <expm1f+0x210>
 80178f8:	2a00      	cmp	r2, #0
 80178fa:	bfa7      	ittee	ge
 80178fc:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8017900:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 8017aac <expm1f+0x214>
 8017904:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 8017ab0 <expm1f+0x218>
 8017908:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801790c:	bfac      	ite	ge
 801790e:	2301      	movge	r3, #1
 8017910:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017914:	ee37 0a66 	vsub.f32	s0, s14, s13
 8017918:	ee77 7a40 	vsub.f32	s15, s14, s0
 801791c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017920:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8017924:	ee20 4a25 	vmul.f32	s8, s0, s11
 8017928:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8017ab4 <expm1f+0x21c>
 801792c:	eddf 6a62 	vldr	s13, [pc, #392]	; 8017ab8 <expm1f+0x220>
 8017930:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8017abc <expm1f+0x224>
 8017934:	ee20 7a04 	vmul.f32	s14, s0, s8
 8017938:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801793c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8017940:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8017ac0 <expm1f+0x228>
 8017944:	eea6 6a87 	vfma.f32	s12, s13, s14
 8017948:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8017ac4 <expm1f+0x22c>
 801794c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017950:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017954:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017958:	eef0 6a46 	vmov.f32	s13, s12
 801795c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8017960:	eee4 4a66 	vfms.f32	s9, s8, s13
 8017964:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8017968:	eea0 4a64 	vfms.f32	s8, s0, s9
 801796c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8017970:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8017974:	ee66 6a87 	vmul.f32	s13, s13, s14
 8017978:	bb73      	cbnz	r3, 80179d8 <expm1f+0x140>
 801797a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801797e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017982:	4770      	bx	lr
 8017984:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8017988:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801798c:	2a00      	cmp	r2, #0
 801798e:	fe67 7a87 	vselge.f32	s15, s15, s14
 8017992:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8017ac8 <expm1f+0x230>
 8017996:	ee40 7a07 	vmla.f32	s15, s0, s14
 801799a:	eeb0 7a40 	vmov.f32	s14, s0
 801799e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80179a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80179a6:	ee17 3a90 	vmov	r3, s15
 80179aa:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8017aa8 <expm1f+0x210>
 80179ae:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80179b2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8017aac <expm1f+0x214>
 80179b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80179ba:	e7ab      	b.n	8017914 <expm1f+0x7c>
 80179bc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80179c0:	d208      	bcs.n	80179d4 <expm1f+0x13c>
 80179c2:	eddf 7a42 	vldr	s15, [pc, #264]	; 8017acc <expm1f+0x234>
 80179c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80179ca:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80179ce:	ee30 0a67 	vsub.f32	s0, s0, s15
 80179d2:	4770      	bx	lr
 80179d4:	2300      	movs	r3, #0
 80179d6:	e7a3      	b.n	8017920 <expm1f+0x88>
 80179d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80179dc:	1c5a      	adds	r2, r3, #1
 80179de:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80179e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179e6:	d106      	bne.n	80179f6 <expm1f+0x15e>
 80179e8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80179ec:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80179f0:	eea7 0aa5 	vfma.f32	s0, s15, s11
 80179f4:	4770      	bx	lr
 80179f6:	2b01      	cmp	r3, #1
 80179f8:	d118      	bne.n	8017a2c <expm1f+0x194>
 80179fa:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 80179fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a06:	bf5b      	ittet	pl
 8017a08:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8017a0c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8017a10:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8017a14:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8017a18:	bf43      	ittte	mi
 8017a1a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8017a1e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8017a22:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8017a26:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017a2a:	4770      	bx	lr
 8017a2c:	1c5a      	adds	r2, r3, #1
 8017a2e:	2a39      	cmp	r2, #57	; 0x39
 8017a30:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8017a34:	d90b      	bls.n	8017a4e <expm1f+0x1b6>
 8017a36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017a3e:	ee17 3a90 	vmov	r3, s15
 8017a42:	4419      	add	r1, r3
 8017a44:	ee07 1a90 	vmov	s15, r1
 8017a48:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8017a4c:	4770      	bx	lr
 8017a4e:	2b16      	cmp	r3, #22
 8017a50:	dc11      	bgt.n	8017a76 <expm1f+0x1de>
 8017a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017a56:	fa42 f303 	asr.w	r3, r2, r3
 8017a5a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8017a5e:	ee07 3a10 	vmov	s14, r3
 8017a62:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017a6a:	ee17 3a90 	vmov	r3, s15
 8017a6e:	440b      	add	r3, r1
 8017a70:	ee00 3a10 	vmov	s0, r3
 8017a74:	4770      	bx	lr
 8017a76:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017a7a:	05db      	lsls	r3, r3, #23
 8017a7c:	ee07 3a10 	vmov	s14, r3
 8017a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017a84:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017a88:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017a8c:	ee17 3a90 	vmov	r3, s15
 8017a90:	e7ed      	b.n	8017a6e <expm1f+0x1d6>
 8017a92:	bf00      	nop
 8017a94:	4195b843 	.word	0x4195b843
 8017a98:	42b17217 	.word	0x42b17217
 8017a9c:	0da24260 	.word	0x0da24260
 8017aa0:	3eb17218 	.word	0x3eb17218
 8017aa4:	3f851591 	.word	0x3f851591
 8017aa8:	3f317180 	.word	0x3f317180
 8017aac:	3717f7d1 	.word	0x3717f7d1
 8017ab0:	b717f7d1 	.word	0xb717f7d1
 8017ab4:	b457edbb 	.word	0xb457edbb
 8017ab8:	36867e54 	.word	0x36867e54
 8017abc:	bd088889 	.word	0xbd088889
 8017ac0:	b8a670cd 	.word	0xb8a670cd
 8017ac4:	3ad00d01 	.word	0x3ad00d01
 8017ac8:	3fb8aa3b 	.word	0x3fb8aa3b
 8017acc:	7149f2ca 	.word	0x7149f2ca

08017ad0 <fabs>:
 8017ad0:	ec51 0b10 	vmov	r0, r1, d0
 8017ad4:	ee10 2a10 	vmov	r2, s0
 8017ad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017adc:	ec43 2b10 	vmov	d0, r2, r3
 8017ae0:	4770      	bx	lr
 8017ae2:	0000      	movs	r0, r0
 8017ae4:	0000      	movs	r0, r0
	...

08017ae8 <scalbn>:
 8017ae8:	ee10 1a90 	vmov	r1, s1
 8017aec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017af0:	b98b      	cbnz	r3, 8017b16 <scalbn+0x2e>
 8017af2:	ee10 3a10 	vmov	r3, s0
 8017af6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017afa:	4319      	orrs	r1, r3
 8017afc:	d00a      	beq.n	8017b14 <scalbn+0x2c>
 8017afe:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8017bb0 <scalbn+0xc8>
 8017b02:	4b37      	ldr	r3, [pc, #220]	; (8017be0 <scalbn+0xf8>)
 8017b04:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b08:	4298      	cmp	r0, r3
 8017b0a:	da0b      	bge.n	8017b24 <scalbn+0x3c>
 8017b0c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8017bb8 <scalbn+0xd0>
 8017b10:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017b14:	4770      	bx	lr
 8017b16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017b1a:	4293      	cmp	r3, r2
 8017b1c:	d107      	bne.n	8017b2e <scalbn+0x46>
 8017b1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8017b22:	4770      	bx	lr
 8017b24:	ee10 1a90 	vmov	r1, s1
 8017b28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017b2c:	3b36      	subs	r3, #54	; 0x36
 8017b2e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017b32:	4290      	cmp	r0, r2
 8017b34:	dd0d      	ble.n	8017b52 <scalbn+0x6a>
 8017b36:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8017bc0 <scalbn+0xd8>
 8017b3a:	ee10 3a90 	vmov	r3, s1
 8017b3e:	eeb0 6b47 	vmov.f64	d6, d7
 8017b42:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8017bc8 <scalbn+0xe0>
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	fe27 7b05 	vselge.f64	d7, d7, d5
 8017b4c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8017b50:	4770      	bx	lr
 8017b52:	4418      	add	r0, r3
 8017b54:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8017b58:	4298      	cmp	r0, r3
 8017b5a:	dcec      	bgt.n	8017b36 <scalbn+0x4e>
 8017b5c:	2800      	cmp	r0, #0
 8017b5e:	dd0a      	ble.n	8017b76 <scalbn+0x8e>
 8017b60:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8017b64:	ec53 2b10 	vmov	r2, r3, d0
 8017b68:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8017b6c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8017b70:	ec43 2b10 	vmov	d0, r2, r3
 8017b74:	4770      	bx	lr
 8017b76:	f110 0f35 	cmn.w	r0, #53	; 0x35
 8017b7a:	da09      	bge.n	8017b90 <scalbn+0xa8>
 8017b7c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8017bb8 <scalbn+0xd0>
 8017b80:	ee10 3a90 	vmov	r3, s1
 8017b84:	eeb0 6b47 	vmov.f64	d6, d7
 8017b88:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8017bd0 <scalbn+0xe8>
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	e7db      	b.n	8017b48 <scalbn+0x60>
 8017b90:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8017b94:	ec53 2b10 	vmov	r2, r3, d0
 8017b98:	3036      	adds	r0, #54	; 0x36
 8017b9a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8017b9e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8017ba2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017bd8 <scalbn+0xf0>
 8017ba6:	ec43 2b10 	vmov	d0, r2, r3
 8017baa:	e7b1      	b.n	8017b10 <scalbn+0x28>
 8017bac:	f3af 8000 	nop.w
 8017bb0:	00000000 	.word	0x00000000
 8017bb4:	43500000 	.word	0x43500000
 8017bb8:	c2f8f359 	.word	0xc2f8f359
 8017bbc:	01a56e1f 	.word	0x01a56e1f
 8017bc0:	8800759c 	.word	0x8800759c
 8017bc4:	7e37e43c 	.word	0x7e37e43c
 8017bc8:	8800759c 	.word	0x8800759c
 8017bcc:	fe37e43c 	.word	0xfe37e43c
 8017bd0:	c2f8f359 	.word	0xc2f8f359
 8017bd4:	81a56e1f 	.word	0x81a56e1f
 8017bd8:	00000000 	.word	0x00000000
 8017bdc:	3c900000 	.word	0x3c900000
 8017be0:	ffff3cb0 	.word	0xffff3cb0

08017be4 <__kernel_rem_pio2f>:
 8017be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017be8:	ed2d 8b04 	vpush	{d8-d9}
 8017bec:	b0d9      	sub	sp, #356	; 0x164
 8017bee:	4688      	mov	r8, r1
 8017bf0:	9002      	str	r0, [sp, #8]
 8017bf2:	49b8      	ldr	r1, [pc, #736]	; (8017ed4 <__kernel_rem_pio2f+0x2f0>)
 8017bf4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8017bf6:	9301      	str	r3, [sp, #4]
 8017bf8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8017bfc:	9901      	ldr	r1, [sp, #4]
 8017bfe:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8017c00:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8017c04:	1d11      	adds	r1, r2, #4
 8017c06:	db25      	blt.n	8017c54 <__kernel_rem_pio2f+0x70>
 8017c08:	1ed0      	subs	r0, r2, #3
 8017c0a:	bf48      	it	mi
 8017c0c:	1d10      	addmi	r0, r2, #4
 8017c0e:	10c0      	asrs	r0, r0, #3
 8017c10:	1c45      	adds	r5, r0, #1
 8017c12:	00e9      	lsls	r1, r5, #3
 8017c14:	eba0 070b 	sub.w	r7, r0, fp
 8017c18:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017c1c:	9103      	str	r1, [sp, #12]
 8017c1e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8017c22:	eb0a 0c0b 	add.w	ip, sl, fp
 8017c26:	ae1c      	add	r6, sp, #112	; 0x70
 8017c28:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8017c2c:	2400      	movs	r4, #0
 8017c2e:	4564      	cmp	r4, ip
 8017c30:	dd12      	ble.n	8017c58 <__kernel_rem_pio2f+0x74>
 8017c32:	9901      	ldr	r1, [sp, #4]
 8017c34:	ac1c      	add	r4, sp, #112	; 0x70
 8017c36:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017c3a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8017c3e:	f04f 0c00 	mov.w	ip, #0
 8017c42:	45d4      	cmp	ip, sl
 8017c44:	dc27      	bgt.n	8017c96 <__kernel_rem_pio2f+0xb2>
 8017c46:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017c4a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017c4e:	4627      	mov	r7, r4
 8017c50:	2600      	movs	r6, #0
 8017c52:	e016      	b.n	8017c82 <__kernel_rem_pio2f+0x9e>
 8017c54:	2000      	movs	r0, #0
 8017c56:	e7db      	b.n	8017c10 <__kernel_rem_pio2f+0x2c>
 8017c58:	42e7      	cmn	r7, r4
 8017c5a:	bf5d      	ittte	pl
 8017c5c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8017c60:	ee07 1a90 	vmovpl	s15, r1
 8017c64:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017c68:	eef0 7a47 	vmovmi.f32	s15, s14
 8017c6c:	ece6 7a01 	vstmia	r6!, {s15}
 8017c70:	3401      	adds	r4, #1
 8017c72:	e7dc      	b.n	8017c2e <__kernel_rem_pio2f+0x4a>
 8017c74:	ecfe 6a01 	vldmia	lr!, {s13}
 8017c78:	ed97 7a00 	vldr	s14, [r7]
 8017c7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017c80:	3601      	adds	r6, #1
 8017c82:	455e      	cmp	r6, fp
 8017c84:	f1a7 0704 	sub.w	r7, r7, #4
 8017c88:	ddf4      	ble.n	8017c74 <__kernel_rem_pio2f+0x90>
 8017c8a:	ece9 7a01 	vstmia	r9!, {s15}
 8017c8e:	f10c 0c01 	add.w	ip, ip, #1
 8017c92:	3404      	adds	r4, #4
 8017c94:	e7d5      	b.n	8017c42 <__kernel_rem_pio2f+0x5e>
 8017c96:	a908      	add	r1, sp, #32
 8017c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c9c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017ca0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8017ee0 <__kernel_rem_pio2f+0x2fc>
 8017ca4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8017edc <__kernel_rem_pio2f+0x2f8>
 8017ca8:	9105      	str	r1, [sp, #20]
 8017caa:	9304      	str	r3, [sp, #16]
 8017cac:	4656      	mov	r6, sl
 8017cae:	00b3      	lsls	r3, r6, #2
 8017cb0:	9306      	str	r3, [sp, #24]
 8017cb2:	ab58      	add	r3, sp, #352	; 0x160
 8017cb4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017cb8:	ac08      	add	r4, sp, #32
 8017cba:	ab44      	add	r3, sp, #272	; 0x110
 8017cbc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8017cc0:	46a4      	mov	ip, r4
 8017cc2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8017cc6:	4637      	mov	r7, r6
 8017cc8:	2f00      	cmp	r7, #0
 8017cca:	f1a0 0004 	sub.w	r0, r0, #4
 8017cce:	dc4a      	bgt.n	8017d66 <__kernel_rem_pio2f+0x182>
 8017cd0:	4628      	mov	r0, r5
 8017cd2:	9207      	str	r2, [sp, #28]
 8017cd4:	f000 fab2 	bl	801823c <scalbnf>
 8017cd8:	eeb0 8a40 	vmov.f32	s16, s0
 8017cdc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8017ce0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017ce4:	f000 fa68 	bl	80181b8 <floorf>
 8017ce8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8017cec:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017cf0:	2d00      	cmp	r5, #0
 8017cf2:	9a07      	ldr	r2, [sp, #28]
 8017cf4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017cf8:	ee17 9a90 	vmov	r9, s15
 8017cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d00:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017d04:	dd41      	ble.n	8017d8a <__kernel_rem_pio2f+0x1a6>
 8017d06:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8017d0a:	ab08      	add	r3, sp, #32
 8017d0c:	f1c5 0e08 	rsb	lr, r5, #8
 8017d10:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8017d14:	fa47 f00e 	asr.w	r0, r7, lr
 8017d18:	4481      	add	r9, r0
 8017d1a:	fa00 f00e 	lsl.w	r0, r0, lr
 8017d1e:	1a3f      	subs	r7, r7, r0
 8017d20:	f1c5 0007 	rsb	r0, r5, #7
 8017d24:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8017d28:	4107      	asrs	r7, r0
 8017d2a:	2f00      	cmp	r7, #0
 8017d2c:	dd3c      	ble.n	8017da8 <__kernel_rem_pio2f+0x1c4>
 8017d2e:	f04f 0e00 	mov.w	lr, #0
 8017d32:	f109 0901 	add.w	r9, r9, #1
 8017d36:	4671      	mov	r1, lr
 8017d38:	4576      	cmp	r6, lr
 8017d3a:	dc67      	bgt.n	8017e0c <__kernel_rem_pio2f+0x228>
 8017d3c:	2d00      	cmp	r5, #0
 8017d3e:	dd03      	ble.n	8017d48 <__kernel_rem_pio2f+0x164>
 8017d40:	2d01      	cmp	r5, #1
 8017d42:	d074      	beq.n	8017e2e <__kernel_rem_pio2f+0x24a>
 8017d44:	2d02      	cmp	r5, #2
 8017d46:	d07b      	beq.n	8017e40 <__kernel_rem_pio2f+0x25c>
 8017d48:	2f02      	cmp	r7, #2
 8017d4a:	d12d      	bne.n	8017da8 <__kernel_rem_pio2f+0x1c4>
 8017d4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017d50:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017d54:	b341      	cbz	r1, 8017da8 <__kernel_rem_pio2f+0x1c4>
 8017d56:	4628      	mov	r0, r5
 8017d58:	9207      	str	r2, [sp, #28]
 8017d5a:	f000 fa6f 	bl	801823c <scalbnf>
 8017d5e:	9a07      	ldr	r2, [sp, #28]
 8017d60:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017d64:	e020      	b.n	8017da8 <__kernel_rem_pio2f+0x1c4>
 8017d66:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017d6a:	3f01      	subs	r7, #1
 8017d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d74:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017d78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017d7c:	ecac 0a01 	vstmia	ip!, {s0}
 8017d80:	ed90 0a00 	vldr	s0, [r0]
 8017d84:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017d88:	e79e      	b.n	8017cc8 <__kernel_rem_pio2f+0xe4>
 8017d8a:	d105      	bne.n	8017d98 <__kernel_rem_pio2f+0x1b4>
 8017d8c:	1e70      	subs	r0, r6, #1
 8017d8e:	ab08      	add	r3, sp, #32
 8017d90:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8017d94:	11ff      	asrs	r7, r7, #7
 8017d96:	e7c8      	b.n	8017d2a <__kernel_rem_pio2f+0x146>
 8017d98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017d9c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017da4:	da30      	bge.n	8017e08 <__kernel_rem_pio2f+0x224>
 8017da6:	2700      	movs	r7, #0
 8017da8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017db0:	f040 809a 	bne.w	8017ee8 <__kernel_rem_pio2f+0x304>
 8017db4:	1e74      	subs	r4, r6, #1
 8017db6:	46a4      	mov	ip, r4
 8017db8:	2100      	movs	r1, #0
 8017dba:	45d4      	cmp	ip, sl
 8017dbc:	da47      	bge.n	8017e4e <__kernel_rem_pio2f+0x26a>
 8017dbe:	2900      	cmp	r1, #0
 8017dc0:	d063      	beq.n	8017e8a <__kernel_rem_pio2f+0x2a6>
 8017dc2:	ab08      	add	r3, sp, #32
 8017dc4:	3d08      	subs	r5, #8
 8017dc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d07f      	beq.n	8017ece <__kernel_rem_pio2f+0x2ea>
 8017dce:	4628      	mov	r0, r5
 8017dd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017dd4:	f000 fa32 	bl	801823c <scalbnf>
 8017dd8:	1c63      	adds	r3, r4, #1
 8017dda:	aa44      	add	r2, sp, #272	; 0x110
 8017ddc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8017ee0 <__kernel_rem_pio2f+0x2fc>
 8017de0:	0099      	lsls	r1, r3, #2
 8017de2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017de6:	4623      	mov	r3, r4
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	f280 80ad 	bge.w	8017f48 <__kernel_rem_pio2f+0x364>
 8017dee:	4623      	mov	r3, r4
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	f2c0 80cb 	blt.w	8017f8c <__kernel_rem_pio2f+0x3a8>
 8017df6:	aa44      	add	r2, sp, #272	; 0x110
 8017df8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8017dfc:	4e36      	ldr	r6, [pc, #216]	; (8017ed8 <__kernel_rem_pio2f+0x2f4>)
 8017dfe:	eddf 7a39 	vldr	s15, [pc, #228]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017e02:	2000      	movs	r0, #0
 8017e04:	1ae2      	subs	r2, r4, r3
 8017e06:	e0b6      	b.n	8017f76 <__kernel_rem_pio2f+0x392>
 8017e08:	2702      	movs	r7, #2
 8017e0a:	e790      	b.n	8017d2e <__kernel_rem_pio2f+0x14a>
 8017e0c:	6820      	ldr	r0, [r4, #0]
 8017e0e:	b949      	cbnz	r1, 8017e24 <__kernel_rem_pio2f+0x240>
 8017e10:	b118      	cbz	r0, 8017e1a <__kernel_rem_pio2f+0x236>
 8017e12:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8017e16:	6020      	str	r0, [r4, #0]
 8017e18:	2001      	movs	r0, #1
 8017e1a:	f10e 0e01 	add.w	lr, lr, #1
 8017e1e:	3404      	adds	r4, #4
 8017e20:	4601      	mov	r1, r0
 8017e22:	e789      	b.n	8017d38 <__kernel_rem_pio2f+0x154>
 8017e24:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017e28:	6020      	str	r0, [r4, #0]
 8017e2a:	4608      	mov	r0, r1
 8017e2c:	e7f5      	b.n	8017e1a <__kernel_rem_pio2f+0x236>
 8017e2e:	1e74      	subs	r4, r6, #1
 8017e30:	ab08      	add	r3, sp, #32
 8017e32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017e36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8017e3a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8017e3e:	e783      	b.n	8017d48 <__kernel_rem_pio2f+0x164>
 8017e40:	1e74      	subs	r4, r6, #1
 8017e42:	ab08      	add	r3, sp, #32
 8017e44:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017e48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8017e4c:	e7f5      	b.n	8017e3a <__kernel_rem_pio2f+0x256>
 8017e4e:	ab08      	add	r3, sp, #32
 8017e50:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8017e54:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8017e58:	4301      	orrs	r1, r0
 8017e5a:	e7ae      	b.n	8017dba <__kernel_rem_pio2f+0x1d6>
 8017e5c:	3001      	adds	r0, #1
 8017e5e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8017e62:	2f00      	cmp	r7, #0
 8017e64:	d0fa      	beq.n	8017e5c <__kernel_rem_pio2f+0x278>
 8017e66:	9b06      	ldr	r3, [sp, #24]
 8017e68:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8017e6c:	eb0d 0403 	add.w	r4, sp, r3
 8017e70:	9b01      	ldr	r3, [sp, #4]
 8017e72:	18f7      	adds	r7, r6, r3
 8017e74:	ab1c      	add	r3, sp, #112	; 0x70
 8017e76:	f106 0c01 	add.w	ip, r6, #1
 8017e7a:	3c4c      	subs	r4, #76	; 0x4c
 8017e7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017e80:	4430      	add	r0, r6
 8017e82:	4560      	cmp	r0, ip
 8017e84:	da04      	bge.n	8017e90 <__kernel_rem_pio2f+0x2ac>
 8017e86:	4606      	mov	r6, r0
 8017e88:	e711      	b.n	8017cae <__kernel_rem_pio2f+0xca>
 8017e8a:	9c05      	ldr	r4, [sp, #20]
 8017e8c:	2001      	movs	r0, #1
 8017e8e:	e7e6      	b.n	8017e5e <__kernel_rem_pio2f+0x27a>
 8017e90:	9b04      	ldr	r3, [sp, #16]
 8017e92:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017e96:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017e9a:	9306      	str	r3, [sp, #24]
 8017e9c:	ee07 3a90 	vmov	s15, r3
 8017ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017ea4:	2600      	movs	r6, #0
 8017ea6:	ece7 7a01 	vstmia	r7!, {s15}
 8017eaa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017eae:	46b9      	mov	r9, r7
 8017eb0:	455e      	cmp	r6, fp
 8017eb2:	dd04      	ble.n	8017ebe <__kernel_rem_pio2f+0x2da>
 8017eb4:	ece4 7a01 	vstmia	r4!, {s15}
 8017eb8:	f10c 0c01 	add.w	ip, ip, #1
 8017ebc:	e7e1      	b.n	8017e82 <__kernel_rem_pio2f+0x29e>
 8017ebe:	ecfe 6a01 	vldmia	lr!, {s13}
 8017ec2:	ed39 7a01 	vldmdb	r9!, {s14}
 8017ec6:	3601      	adds	r6, #1
 8017ec8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017ecc:	e7f0      	b.n	8017eb0 <__kernel_rem_pio2f+0x2cc>
 8017ece:	3c01      	subs	r4, #1
 8017ed0:	e777      	b.n	8017dc2 <__kernel_rem_pio2f+0x1de>
 8017ed2:	bf00      	nop
 8017ed4:	0802463c 	.word	0x0802463c
 8017ed8:	08024610 	.word	0x08024610
 8017edc:	43800000 	.word	0x43800000
 8017ee0:	3b800000 	.word	0x3b800000
 8017ee4:	00000000 	.word	0x00000000
 8017ee8:	9b03      	ldr	r3, [sp, #12]
 8017eea:	eeb0 0a48 	vmov.f32	s0, s16
 8017eee:	1a98      	subs	r0, r3, r2
 8017ef0:	f000 f9a4 	bl	801823c <scalbnf>
 8017ef4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8017edc <__kernel_rem_pio2f+0x2f8>
 8017ef8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8017efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f00:	db19      	blt.n	8017f36 <__kernel_rem_pio2f+0x352>
 8017f02:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8017ee0 <__kernel_rem_pio2f+0x2fc>
 8017f06:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017f0a:	aa08      	add	r2, sp, #32
 8017f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f10:	1c74      	adds	r4, r6, #1
 8017f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f16:	3508      	adds	r5, #8
 8017f18:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f24:	ee10 3a10 	vmov	r3, s0
 8017f28:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017f2c:	ee17 3a90 	vmov	r3, s15
 8017f30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8017f34:	e74b      	b.n	8017dce <__kernel_rem_pio2f+0x1ea>
 8017f36:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f3a:	aa08      	add	r2, sp, #32
 8017f3c:	ee10 3a10 	vmov	r3, s0
 8017f40:	4634      	mov	r4, r6
 8017f42:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017f46:	e742      	b.n	8017dce <__kernel_rem_pio2f+0x1ea>
 8017f48:	a808      	add	r0, sp, #32
 8017f4a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8017f4e:	9001      	str	r0, [sp, #4]
 8017f50:	ee07 0a90 	vmov	s15, r0
 8017f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f58:	3b01      	subs	r3, #1
 8017f5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017f5e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017f62:	ed62 7a01 	vstmdb	r2!, {s15}
 8017f66:	e73f      	b.n	8017de8 <__kernel_rem_pio2f+0x204>
 8017f68:	ecf6 6a01 	vldmia	r6!, {s13}
 8017f6c:	ecb5 7a01 	vldmia	r5!, {s14}
 8017f70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017f74:	3001      	adds	r0, #1
 8017f76:	4550      	cmp	r0, sl
 8017f78:	dc01      	bgt.n	8017f7e <__kernel_rem_pio2f+0x39a>
 8017f7a:	4290      	cmp	r0, r2
 8017f7c:	ddf4      	ble.n	8017f68 <__kernel_rem_pio2f+0x384>
 8017f7e:	a858      	add	r0, sp, #352	; 0x160
 8017f80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8017f84:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8017f88:	3b01      	subs	r3, #1
 8017f8a:	e731      	b.n	8017df0 <__kernel_rem_pio2f+0x20c>
 8017f8c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8017f8e:	2b02      	cmp	r3, #2
 8017f90:	dc09      	bgt.n	8017fa6 <__kernel_rem_pio2f+0x3c2>
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	dc2b      	bgt.n	8017fee <__kernel_rem_pio2f+0x40a>
 8017f96:	d044      	beq.n	8018022 <__kernel_rem_pio2f+0x43e>
 8017f98:	f009 0007 	and.w	r0, r9, #7
 8017f9c:	b059      	add	sp, #356	; 0x164
 8017f9e:	ecbd 8b04 	vpop	{d8-d9}
 8017fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8017fa8:	2b03      	cmp	r3, #3
 8017faa:	d1f5      	bne.n	8017f98 <__kernel_rem_pio2f+0x3b4>
 8017fac:	aa30      	add	r2, sp, #192	; 0xc0
 8017fae:	1f0b      	subs	r3, r1, #4
 8017fb0:	4413      	add	r3, r2
 8017fb2:	461a      	mov	r2, r3
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	f1a2 0204 	sub.w	r2, r2, #4
 8017fbc:	dc52      	bgt.n	8018064 <__kernel_rem_pio2f+0x480>
 8017fbe:	4622      	mov	r2, r4
 8017fc0:	2a01      	cmp	r2, #1
 8017fc2:	f1a3 0304 	sub.w	r3, r3, #4
 8017fc6:	dc5d      	bgt.n	8018084 <__kernel_rem_pio2f+0x4a0>
 8017fc8:	ab30      	add	r3, sp, #192	; 0xc0
 8017fca:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017fce:	440b      	add	r3, r1
 8017fd0:	2c01      	cmp	r4, #1
 8017fd2:	dc67      	bgt.n	80180a4 <__kernel_rem_pio2f+0x4c0>
 8017fd4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017fd8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8017fdc:	2f00      	cmp	r7, #0
 8017fde:	d167      	bne.n	80180b0 <__kernel_rem_pio2f+0x4cc>
 8017fe0:	edc8 6a00 	vstr	s13, [r8]
 8017fe4:	ed88 7a01 	vstr	s14, [r8, #4]
 8017fe8:	edc8 7a02 	vstr	s15, [r8, #8]
 8017fec:	e7d4      	b.n	8017f98 <__kernel_rem_pio2f+0x3b4>
 8017fee:	ab30      	add	r3, sp, #192	; 0xc0
 8017ff0:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8017ff4:	440b      	add	r3, r1
 8017ff6:	4622      	mov	r2, r4
 8017ff8:	2a00      	cmp	r2, #0
 8017ffa:	da24      	bge.n	8018046 <__kernel_rem_pio2f+0x462>
 8017ffc:	b34f      	cbz	r7, 8018052 <__kernel_rem_pio2f+0x46e>
 8017ffe:	eef1 7a47 	vneg.f32	s15, s14
 8018002:	edc8 7a00 	vstr	s15, [r8]
 8018006:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801800a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801800e:	aa31      	add	r2, sp, #196	; 0xc4
 8018010:	2301      	movs	r3, #1
 8018012:	429c      	cmp	r4, r3
 8018014:	da20      	bge.n	8018058 <__kernel_rem_pio2f+0x474>
 8018016:	b10f      	cbz	r7, 801801c <__kernel_rem_pio2f+0x438>
 8018018:	eef1 7a67 	vneg.f32	s15, s15
 801801c:	edc8 7a01 	vstr	s15, [r8, #4]
 8018020:	e7ba      	b.n	8017f98 <__kernel_rem_pio2f+0x3b4>
 8018022:	ab30      	add	r3, sp, #192	; 0xc0
 8018024:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8017ee4 <__kernel_rem_pio2f+0x300>
 8018028:	440b      	add	r3, r1
 801802a:	2c00      	cmp	r4, #0
 801802c:	da05      	bge.n	801803a <__kernel_rem_pio2f+0x456>
 801802e:	b10f      	cbz	r7, 8018034 <__kernel_rem_pio2f+0x450>
 8018030:	eef1 7a67 	vneg.f32	s15, s15
 8018034:	edc8 7a00 	vstr	s15, [r8]
 8018038:	e7ae      	b.n	8017f98 <__kernel_rem_pio2f+0x3b4>
 801803a:	ed33 7a01 	vldmdb	r3!, {s14}
 801803e:	3c01      	subs	r4, #1
 8018040:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018044:	e7f1      	b.n	801802a <__kernel_rem_pio2f+0x446>
 8018046:	ed73 7a01 	vldmdb	r3!, {s15}
 801804a:	3a01      	subs	r2, #1
 801804c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018050:	e7d2      	b.n	8017ff8 <__kernel_rem_pio2f+0x414>
 8018052:	eef0 7a47 	vmov.f32	s15, s14
 8018056:	e7d4      	b.n	8018002 <__kernel_rem_pio2f+0x41e>
 8018058:	ecb2 7a01 	vldmia	r2!, {s14}
 801805c:	3301      	adds	r3, #1
 801805e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018062:	e7d6      	b.n	8018012 <__kernel_rem_pio2f+0x42e>
 8018064:	edd2 7a00 	vldr	s15, [r2]
 8018068:	edd2 6a01 	vldr	s13, [r2, #4]
 801806c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018070:	3801      	subs	r0, #1
 8018072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018076:	ed82 7a00 	vstr	s14, [r2]
 801807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801807e:	edc2 7a01 	vstr	s15, [r2, #4]
 8018082:	e798      	b.n	8017fb6 <__kernel_rem_pio2f+0x3d2>
 8018084:	edd3 7a00 	vldr	s15, [r3]
 8018088:	edd3 6a01 	vldr	s13, [r3, #4]
 801808c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018090:	3a01      	subs	r2, #1
 8018092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018096:	ed83 7a00 	vstr	s14, [r3]
 801809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801809e:	edc3 7a01 	vstr	s15, [r3, #4]
 80180a2:	e78d      	b.n	8017fc0 <__kernel_rem_pio2f+0x3dc>
 80180a4:	ed33 7a01 	vldmdb	r3!, {s14}
 80180a8:	3c01      	subs	r4, #1
 80180aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80180ae:	e78f      	b.n	8017fd0 <__kernel_rem_pio2f+0x3ec>
 80180b0:	eef1 6a66 	vneg.f32	s13, s13
 80180b4:	eeb1 7a47 	vneg.f32	s14, s14
 80180b8:	edc8 6a00 	vstr	s13, [r8]
 80180bc:	ed88 7a01 	vstr	s14, [r8, #4]
 80180c0:	eef1 7a67 	vneg.f32	s15, s15
 80180c4:	e790      	b.n	8017fe8 <__kernel_rem_pio2f+0x404>
 80180c6:	bf00      	nop

080180c8 <floor>:
 80180c8:	ee10 1a90 	vmov	r1, s1
 80180cc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80180d0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80180d4:	2b13      	cmp	r3, #19
 80180d6:	b530      	push	{r4, r5, lr}
 80180d8:	ee10 0a10 	vmov	r0, s0
 80180dc:	ee10 5a10 	vmov	r5, s0
 80180e0:	dc31      	bgt.n	8018146 <floor+0x7e>
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	da15      	bge.n	8018112 <floor+0x4a>
 80180e6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80181a8 <floor+0xe0>
 80180ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80180ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80180f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f6:	dd07      	ble.n	8018108 <floor+0x40>
 80180f8:	2900      	cmp	r1, #0
 80180fa:	da4e      	bge.n	801819a <floor+0xd2>
 80180fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018100:	4308      	orrs	r0, r1
 8018102:	d04d      	beq.n	80181a0 <floor+0xd8>
 8018104:	492a      	ldr	r1, [pc, #168]	; (80181b0 <floor+0xe8>)
 8018106:	2000      	movs	r0, #0
 8018108:	460b      	mov	r3, r1
 801810a:	4602      	mov	r2, r0
 801810c:	ec43 2b10 	vmov	d0, r2, r3
 8018110:	e020      	b.n	8018154 <floor+0x8c>
 8018112:	4a28      	ldr	r2, [pc, #160]	; (80181b4 <floor+0xec>)
 8018114:	411a      	asrs	r2, r3
 8018116:	ea01 0402 	and.w	r4, r1, r2
 801811a:	4304      	orrs	r4, r0
 801811c:	d01a      	beq.n	8018154 <floor+0x8c>
 801811e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80181a8 <floor+0xe0>
 8018122:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018126:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801812a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801812e:	ddeb      	ble.n	8018108 <floor+0x40>
 8018130:	2900      	cmp	r1, #0
 8018132:	bfbe      	ittt	lt
 8018134:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018138:	fa40 f303 	asrlt.w	r3, r0, r3
 801813c:	18c9      	addlt	r1, r1, r3
 801813e:	ea21 0102 	bic.w	r1, r1, r2
 8018142:	2000      	movs	r0, #0
 8018144:	e7e0      	b.n	8018108 <floor+0x40>
 8018146:	2b33      	cmp	r3, #51	; 0x33
 8018148:	dd05      	ble.n	8018156 <floor+0x8e>
 801814a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801814e:	d101      	bne.n	8018154 <floor+0x8c>
 8018150:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018154:	bd30      	pop	{r4, r5, pc}
 8018156:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801815a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801815e:	40e2      	lsrs	r2, r4
 8018160:	4210      	tst	r0, r2
 8018162:	d0f7      	beq.n	8018154 <floor+0x8c>
 8018164:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80181a8 <floor+0xe0>
 8018168:	ee30 0b07 	vadd.f64	d0, d0, d7
 801816c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018174:	ddc8      	ble.n	8018108 <floor+0x40>
 8018176:	2900      	cmp	r1, #0
 8018178:	da02      	bge.n	8018180 <floor+0xb8>
 801817a:	2b14      	cmp	r3, #20
 801817c:	d103      	bne.n	8018186 <floor+0xbe>
 801817e:	3101      	adds	r1, #1
 8018180:	ea20 0002 	bic.w	r0, r0, r2
 8018184:	e7c0      	b.n	8018108 <floor+0x40>
 8018186:	2401      	movs	r4, #1
 8018188:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801818c:	fa04 f303 	lsl.w	r3, r4, r3
 8018190:	4418      	add	r0, r3
 8018192:	4285      	cmp	r5, r0
 8018194:	bf88      	it	hi
 8018196:	1909      	addhi	r1, r1, r4
 8018198:	e7f2      	b.n	8018180 <floor+0xb8>
 801819a:	2000      	movs	r0, #0
 801819c:	4601      	mov	r1, r0
 801819e:	e7b3      	b.n	8018108 <floor+0x40>
 80181a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80181a4:	e7b0      	b.n	8018108 <floor+0x40>
 80181a6:	bf00      	nop
 80181a8:	8800759c 	.word	0x8800759c
 80181ac:	7e37e43c 	.word	0x7e37e43c
 80181b0:	bff00000 	.word	0xbff00000
 80181b4:	000fffff 	.word	0x000fffff

080181b8 <floorf>:
 80181b8:	ee10 3a10 	vmov	r3, s0
 80181bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80181c0:	3a7f      	subs	r2, #127	; 0x7f
 80181c2:	2a16      	cmp	r2, #22
 80181c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80181c8:	dc2a      	bgt.n	8018220 <floorf+0x68>
 80181ca:	2a00      	cmp	r2, #0
 80181cc:	da11      	bge.n	80181f2 <floorf+0x3a>
 80181ce:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018230 <floorf+0x78>
 80181d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80181d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80181da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181de:	dd05      	ble.n	80181ec <floorf+0x34>
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	da23      	bge.n	801822c <floorf+0x74>
 80181e4:	4a13      	ldr	r2, [pc, #76]	; (8018234 <floorf+0x7c>)
 80181e6:	2900      	cmp	r1, #0
 80181e8:	bf18      	it	ne
 80181ea:	4613      	movne	r3, r2
 80181ec:	ee00 3a10 	vmov	s0, r3
 80181f0:	4770      	bx	lr
 80181f2:	4911      	ldr	r1, [pc, #68]	; (8018238 <floorf+0x80>)
 80181f4:	4111      	asrs	r1, r2
 80181f6:	420b      	tst	r3, r1
 80181f8:	d0fa      	beq.n	80181f0 <floorf+0x38>
 80181fa:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018230 <floorf+0x78>
 80181fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018202:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801820a:	ddef      	ble.n	80181ec <floorf+0x34>
 801820c:	2b00      	cmp	r3, #0
 801820e:	bfbe      	ittt	lt
 8018210:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018214:	fa40 f202 	asrlt.w	r2, r0, r2
 8018218:	189b      	addlt	r3, r3, r2
 801821a:	ea23 0301 	bic.w	r3, r3, r1
 801821e:	e7e5      	b.n	80181ec <floorf+0x34>
 8018220:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018224:	d3e4      	bcc.n	80181f0 <floorf+0x38>
 8018226:	ee30 0a00 	vadd.f32	s0, s0, s0
 801822a:	4770      	bx	lr
 801822c:	2300      	movs	r3, #0
 801822e:	e7dd      	b.n	80181ec <floorf+0x34>
 8018230:	7149f2ca 	.word	0x7149f2ca
 8018234:	bf800000 	.word	0xbf800000
 8018238:	007fffff 	.word	0x007fffff

0801823c <scalbnf>:
 801823c:	ee10 3a10 	vmov	r3, s0
 8018240:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018244:	d02a      	beq.n	801829c <scalbnf+0x60>
 8018246:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801824a:	d302      	bcc.n	8018252 <scalbnf+0x16>
 801824c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018250:	4770      	bx	lr
 8018252:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018256:	d122      	bne.n	801829e <scalbnf+0x62>
 8018258:	4b23      	ldr	r3, [pc, #140]	; (80182e8 <scalbnf+0xac>)
 801825a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80182ec <scalbnf+0xb0>
 801825e:	4298      	cmp	r0, r3
 8018260:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018264:	db16      	blt.n	8018294 <scalbnf+0x58>
 8018266:	ee10 3a10 	vmov	r3, s0
 801826a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801826e:	3a19      	subs	r2, #25
 8018270:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018274:	4288      	cmp	r0, r1
 8018276:	dd14      	ble.n	80182a2 <scalbnf+0x66>
 8018278:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80182f0 <scalbnf+0xb4>
 801827c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80182f4 <scalbnf+0xb8>
 8018280:	ee10 3a10 	vmov	r3, s0
 8018284:	eeb0 7a67 	vmov.f32	s14, s15
 8018288:	2b00      	cmp	r3, #0
 801828a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801828e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018292:	4770      	bx	lr
 8018294:	eddf 7a18 	vldr	s15, [pc, #96]	; 80182f8 <scalbnf+0xbc>
 8018298:	ee27 0a80 	vmul.f32	s0, s15, s0
 801829c:	4770      	bx	lr
 801829e:	0dd2      	lsrs	r2, r2, #23
 80182a0:	e7e6      	b.n	8018270 <scalbnf+0x34>
 80182a2:	4410      	add	r0, r2
 80182a4:	28fe      	cmp	r0, #254	; 0xfe
 80182a6:	dce7      	bgt.n	8018278 <scalbnf+0x3c>
 80182a8:	2800      	cmp	r0, #0
 80182aa:	dd06      	ble.n	80182ba <scalbnf+0x7e>
 80182ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80182b0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80182b4:	ee00 3a10 	vmov	s0, r3
 80182b8:	4770      	bx	lr
 80182ba:	f110 0f16 	cmn.w	r0, #22
 80182be:	da09      	bge.n	80182d4 <scalbnf+0x98>
 80182c0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80182f8 <scalbnf+0xbc>
 80182c4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80182fc <scalbnf+0xc0>
 80182c8:	ee10 3a10 	vmov	r3, s0
 80182cc:	eeb0 7a67 	vmov.f32	s14, s15
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	e7da      	b.n	801828a <scalbnf+0x4e>
 80182d4:	3019      	adds	r0, #25
 80182d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80182da:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80182de:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018300 <scalbnf+0xc4>
 80182e2:	ee07 3a90 	vmov	s15, r3
 80182e6:	e7d7      	b.n	8018298 <scalbnf+0x5c>
 80182e8:	ffff3cb0 	.word	0xffff3cb0
 80182ec:	4c000000 	.word	0x4c000000
 80182f0:	7149f2ca 	.word	0x7149f2ca
 80182f4:	f149f2ca 	.word	0xf149f2ca
 80182f8:	0da24260 	.word	0x0da24260
 80182fc:	8da24260 	.word	0x8da24260
 8018300:	33000000 	.word	0x33000000

08018304 <__errno>:
 8018304:	4b01      	ldr	r3, [pc, #4]	; (801830c <__errno+0x8>)
 8018306:	6818      	ldr	r0, [r3, #0]
 8018308:	4770      	bx	lr
 801830a:	bf00      	nop
 801830c:	200007b8 	.word	0x200007b8

08018310 <_init>:
 8018310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018312:	bf00      	nop
 8018314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018316:	bc08      	pop	{r3}
 8018318:	469e      	mov	lr, r3
 801831a:	4770      	bx	lr

0801831c <_fini>:
 801831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801831e:	bf00      	nop
 8018320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018322:	bc08      	pop	{r3}
 8018324:	469e      	mov	lr, r3
 8018326:	4770      	bx	lr

08018328 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 8018328:	f85f f000 	ldr.w	pc, [pc]	; 801832c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801832c:	00001401 	.word	0x00001401

08018330 <__parsePreset_veneer>:
 8018330:	f85f f000 	ldr.w	pc, [pc]	; 8018334 <__parsePreset_veneer+0x4>
 8018334:	000018a1 	.word	0x000018a1

08018338 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 8018338:	f85f f000 	ldr.w	pc, [pc]	; 801833c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801833c:	00003821 	.word	0x00003821

08018340 <__HAL_I2C_ErrorCallback_veneer>:
 8018340:	f85f f000 	ldr.w	pc, [pc]	; 8018344 <__HAL_I2C_ErrorCallback_veneer+0x4>
 8018344:	00003621 	.word	0x00003621

08018348 <__audioInitString1_veneer>:
 8018348:	f85f f000 	ldr.w	pc, [pc]	; 801834c <__audioInitString1_veneer+0x4>
 801834c:	00003c21 	.word	0x00003c21

08018350 <__HAL_SAI_ErrorCallback_veneer>:
 8018350:	f85f f000 	ldr.w	pc, [pc]	; 8018354 <__HAL_SAI_ErrorCallback_veneer+0x4>
 8018354:	00001541 	.word	0x00001541

08018358 <__audioInitVocal_veneer>:
 8018358:	f85f f000 	ldr.w	pc, [pc]	; 801835c <__audioInitVocal_veneer+0x4>
 801835c:	000078c1 	.word	0x000078c1

08018360 <__randomNumber_veneer>:
 8018360:	f85f f000 	ldr.w	pc, [pc]	; 8018364 <__randomNumber_veneer+0x4>
 8018364:	00001841 	.word	0x00001841

08018368 <__audioInitAdditive_veneer>:
 8018368:	f85f f000 	ldr.w	pc, [pc]	; 801836c <__audioInitAdditive_veneer+0x4>
 801836c:	00000401 	.word	0x00000401

08018370 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 8018370:	f85f f000 	ldr.w	pc, [pc]	; 8018374 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 8018374:	00003b01 	.word	0x00003b01

08018378 <__HAL_SPI_TxRxCpltCallback_veneer>:
 8018378:	f85f f000 	ldr.w	pc, [pc]	; 801837c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801837c:	00003661 	.word	0x00003661

08018380 <__HAL_SPI_RxCpltCallback_veneer>:
 8018380:	f85f f000 	ldr.w	pc, [pc]	; 8018384 <__HAL_SPI_RxCpltCallback_veneer+0x4>
 8018384:	000039e1 	.word	0x000039e1

08018388 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 8018388:	f85f f000 	ldr.w	pc, [pc]	; 801838c <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801838c:	000035e1 	.word	0x000035e1

08018390 <__HAL_SAI_TxCpltCallback_veneer>:
 8018390:	f85f f000 	ldr.w	pc, [pc]	; 8018394 <__HAL_SAI_TxCpltCallback_veneer+0x4>
 8018394:	000012c1 	.word	0x000012c1

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     402:	4bb4      	ldr	r3, [pc, #720]	; (6d4 <audioInitAdditive+0x2d4>)
     404:	4ab4      	ldr	r2, [pc, #720]	; (6d8 <audioInitAdditive+0x2d8>)
     406:	601a      	str	r2, [r3, #0]
     408:	f04f 0c00 	mov.w	ip, #0
     40c:	e022      	b.n	454 <audioInitAdditive+0x54>
     40e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
     412:	0083      	lsls	r3, r0, #2
     414:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
     418:	00a0      	lsls	r0, r4, #2
        p->curr = fromBridge;
     41a:	4403      	add	r3, r0
     41c:	4463      	add	r3, ip
     41e:	48af      	ldr	r0, [pc, #700]	; (6dc <audioInitAdditive+0x2dc>)
     420:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     424:	ed93 7a00 	vldr	s14, [r3]
     428:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     42c:	4410      	add	r0, r2
  return status;
     42e:	4bac      	ldr	r3, [pc, #688]	; (6e0 <audioInitAdditive+0x2e0>)
     430:	eb03 0380 	add.w	r3, r3, r0, lsl #2
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     434:	edd3 7a00 	vldr	s15, [r3]
     438:	ee77 7a87 	vadd.f32	s15, s15, s14
     43c:	edc3 7a00 	vstr	s15, [r3]
  return status;
     440:	3201      	adds	r2, #1
     442:	2a02      	cmp	r2, #2
    return HAL_ERROR;
     444:	dde3      	ble.n	40e <audioInitAdditive+0xe>
     446:	3101      	adds	r1, #1
     448:	2902      	cmp	r1, #2
     44a:	dc01      	bgt.n	450 <audioInitAdditive+0x50>
     44c:	2200      	movs	r2, #0
     44e:	e7f8      	b.n	442 <audioInitAdditive+0x42>
    collector->_first_period = 0.01f;
}

static inline Lfloat sub_collector_period_of(_sub_collector* collector, _auto_correlation_info info)
{
    tZeroCrossingInfo first = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i1);
     450:	f10c 0c01 	add.w	ip, ip, #1
     454:	f1bc 0f0b 	cmp.w	ip, #11
    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i2);
     458:	dc18      	bgt.n	48c <audioInitAdditive+0x8c>
     45a:	4ba2      	ldr	r3, [pc, #648]	; (6e4 <audioInitAdditive+0x2e4>)
     45c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
     460:	ed93 7a00 	vldr	s14, [r3]
    return tZeroCrossingInfo_fractionalPeriod(&first, &next);
     464:	4ba0      	ldr	r3, [pc, #640]	; (6e8 <audioInitAdditive+0x2e8>)
     466:	edd3 7a00 	vldr	s15, [r3]

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     46a:	ee77 7a87 	vadd.f32	s15, s15, s14
     46e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i != n - 1; ++i)
     472:	4a9e      	ldr	r2, [pc, #632]	; (6ec <audioInitAdditive+0x2ec>)
     474:	eb02 028c 	add.w	r2, r2, ip, lsl #2
     478:	ed92 7a00 	vldr	s14, [r2]
     47c:	edd3 7a01 	vldr	s15, [r3, #4]
     480:	ee77 7a87 	vadd.f32	s15, s15, s14
            tZeroCrossingInfo curr = tZeroCrossingCollector_getCrossing(&p->_zc, i);
     484:	edc3 7a01 	vstr	s15, [r3, #4]
     488:	2100      	movs	r1, #0
     48a:	e7dd      	b.n	448 <audioInitAdditive+0x48>
            if (curr->_peak >= threshold)
     48c:	2000      	movs	r0, #0
     48e:	e014      	b.n	4ba <audioInitAdditive+0xba>
     490:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     494:	4413      	add	r3, r2
     496:	4992      	ldr	r1, [pc, #584]	; (6e0 <audioInitAdditive+0x2e0>)
     498:	eb01 0183 	add.w	r1, r1, r3, lsl #2
                for (int j = i + 1; j != n; ++j)
     49c:	ed91 7a00 	vldr	s14, [r1]
        result->period = sub_collector_period_of(collector, info) / info._harmonic;
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
     4a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        result->period = 0.0f;
     4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
     4a8:	4991      	ldr	r1, [pc, #580]	; (6f0 <audioInitAdditive+0x2f0>)
     4aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     4ae:	edc3 7a00 	vstr	s15, [r3]
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
     4b2:	3201      	adds	r2, #1
     4b4:	2a02      	cmp	r2, #2
     4b6:	ddeb      	ble.n	490 <audioInitAdditive+0x90>
     4b8:	3001      	adds	r0, #1
     4ba:	2802      	cmp	r0, #2
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
     4bc:	dc01      	bgt.n	4c2 <audioInitAdditive+0xc2>
     4be:	2200      	movs	r2, #0
     4c0:	e7f8      	b.n	4b4 <audioInitAdditive+0xb4>
     4c2:	4a89      	ldr	r2, [pc, #548]	; (6e8 <audioInitAdditive+0x2e8>)
     4c4:	ed92 7a00 	vldr	s14, [r2]
			st_word(buf + BS_55AA, 0xAA55);
     4c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     4cc:	ee87 6a87 	vdiv.f32	s12, s15, s14
     4d0:	4b88      	ldr	r3, [pc, #544]	; (6f4 <audioInitAdditive+0x2f4>)
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     4d2:	ed83 6a00 	vstr	s12, [r3]
     4d6:	ed92 7a01 	vldr	s14, [r2, #4]
     4da:	eec7 6a87 	vdiv.f32	s13, s15, s14
     4de:	edc3 6a01 	vstr	s13, [r3, #4]
     4e2:	f04f 0c00 	mov.w	ip, #0
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     4e6:	e022      	b.n	52e <audioInitAdditive+0x12e>
     4e8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
     4ec:	4410      	add	r0, r2
     4ee:	4b80      	ldr	r3, [pc, #512]	; (6f0 <audioInitAdditive+0x2f0>)
     4f0:	eb03 0380 	add.w	r3, r3, r0, lsl #2

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
     4f4:	ed93 7a00 	vldr	s14, [r3]
     4f8:	eb02 0042 	add.w	r0, r2, r2, lsl #1
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     4fc:	0083      	lsls	r3, r0, #2
     4fe:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
     502:	00a0      	lsls	r0, r4, #2
     504:	4403      	add	r3, r0
     506:	4463      	add	r3, ip
     508:	4874      	ldr	r0, [pc, #464]	; (6dc <audioInitAdditive+0x2dc>)
     50a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
     50e:	edd3 7a00 	vldr	s15, [r3]
     512:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     516:	edc3 7a00 	vstr	s15, [r3]
     51a:	3201      	adds	r2, #1
     51c:	2a02      	cmp	r2, #2
     51e:	dde3      	ble.n	4e8 <audioInitAdditive+0xe8>
     520:	3101      	adds	r1, #1
     522:	2902      	cmp	r1, #2
     524:	dc01      	bgt.n	52a <audioInitAdditive+0x12a>
				mem_set(buf, 0, ss);
     526:	2200      	movs	r2, #0
     528:	e7f8      	b.n	51c <audioInitAdditive+0x11c>
     52a:	f10c 0c01 	add.w	ip, ip, #1
     52e:	f1bc 0f0b 	cmp.w	ip, #11
				sect += n; nsect -= n;
     532:	dc13      	bgt.n	55c <audioInitAdditive+0x15c>
			} while (nsect);
     534:	4b6b      	ldr	r3, [pc, #428]	; (6e4 <audioInitAdditive+0x2e4>)
     536:	eb03 038c 	add.w	r3, r3, ip, lsl #2
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
     53a:	edd3 7a00 	vldr	s15, [r3]
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
     53e:	ee66 7a27 	vmul.f32	s15, s12, s15
     542:	edc3 7a00 	vstr	s15, [r3]
     546:	4b69      	ldr	r3, [pc, #420]	; (6ec <audioInitAdditive+0x2ec>)
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
     548:	eb03 038c 	add.w	r3, r3, ip, lsl #2
     54c:	edd3 7a00 	vldr	s15, [r3]
     550:	ee66 7aa7 	vmul.f32	s15, s13, s15
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
     554:	edc3 7a00 	vstr	s15, [r3]
     558:	2100      	movs	r1, #0
     55a:	e7e2      	b.n	522 <audioInitAdditive+0x122>
     55c:	2000      	movs	r0, #0
     55e:	e05b      	b.n	618 <audioInitAdditive+0x218>
     560:	f103 0c01 	add.w	ip, r3, #1
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     564:	4a64      	ldr	r2, [pc, #400]	; (6f8 <audioInitAdditive+0x2f8>)
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
     566:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
     56a:	eb0e 040c 	add.w	r4, lr, ip
     56e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
     572:	edd4 6a00 	vldr	s13, [r4]
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     576:	eb0e 0403 	add.w	r4, lr, r3
     57a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     57e:	edd2 7a00 	vldr	s15, [r2]
     582:	ee76 6ae7 	vsub.f32	s13, s13, s15
     586:	4c5d      	ldr	r4, [pc, #372]	; (6fc <audioInitAdditive+0x2fc>)
     588:	eb0c 054c 	add.w	r5, ip, ip, lsl #1
     58c:	00aa      	lsls	r2, r5, #2
     58e:	eb01 06c1 	add.w	r6, r1, r1, lsl #3
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     592:	00b5      	lsls	r5, r6, #2
     594:	442a      	add	r2, r5
			mem_set(buf, 0, ss);
     596:	4402      	add	r2, r0
     598:	eb04 0282 	add.w	r2, r4, r2, lsl #2
     59c:	ed92 7a00 	vldr	s14, [r2]
     5a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
     5a4:	ee85 6a87 	vdiv.f32	s12, s11, s14
     5a8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
     5ac:	00aa      	lsls	r2, r5, #2
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
     5ae:	00b5      	lsls	r5, r6, #2
     5b0:	442a      	add	r2, r5
     5b2:	4402      	add	r2, r0
     5b4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
			pte[PTE_StHead] = 1;				/* Start head */
     5b8:	ed94 5a00 	vldr	s10, [r4]
			pte[PTE_StSec] = 1;					/* Start sector */
     5bc:	ee85 7a85 	vdiv.f32	s14, s11, s10
			pte[PTE_StCyl] = 0;					/* Start cylinder */
     5c0:	ee36 6a47 	vsub.f32	s12, s12, s14
			pte[PTE_System] = sys;				/* System type */
     5c4:	eec6 5a26 	vdiv.f32	s11, s12, s13
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     5c8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
     5cc:	00a2      	lsls	r2, r4, #2
     5ce:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
     5d2:	4402      	add	r2, r0
			pte[PTE_EdHead] = 254;				/* End head */
     5d4:	4c4a      	ldr	r4, [pc, #296]	; (700 <audioInitAdditive+0x300>)
     5d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     5da:	edc4 5a00 	vstr	s11, [r4]
     5de:	ee67 7aa5 	vmul.f32	s15, s15, s11
     5e2:	4c48      	ldr	r4, [pc, #288]	; (704 <audioInitAdditive+0x304>)
     5e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     5e8:	edc2 7a00 	vstr	s15, [r2]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
     5ec:	ee37 7a67 	vsub.f32	s14, s14, s15
     5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
     5f4:	009a      	lsls	r2, r3, #2
     5f6:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
     5fa:	4402      	add	r2, r0
     5fc:	4b42      	ldr	r3, [pc, #264]	; (708 <audioInitAdditive+0x308>)
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     5fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     602:	ed83 7a00 	vstr	s14, [r3]
     606:	4663      	mov	r3, ip
     608:	2b01      	cmp	r3, #1
     60a:	dda9      	ble.n	560 <audioInitAdditive+0x160>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     60c:	3101      	adds	r1, #1
     60e:	2902      	cmp	r1, #2
     610:	dc01      	bgt.n	616 <audioInitAdditive+0x216>
     612:	2300      	movs	r3, #0
     614:	e7f8      	b.n	608 <audioInitAdditive+0x208>
     616:	3001      	adds	r0, #1
     618:	280b      	cmp	r0, #11
     61a:	dc2c      	bgt.n	676 <audioInitAdditive+0x276>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     61c:	4b3b      	ldr	r3, [pc, #236]	; (70c <audioInitAdditive+0x30c>)
     61e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	if (vol < 0) return FR_INVALID_DRIVE;
     622:	ed93 7a00 	vldr	s14, [r3]
	if (stat & STA_NOINIT) return FR_NOT_READY;
     626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0

	return FR_OK;
}
     62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
     62e:	4b38      	ldr	r3, [pc, #224]	; (710 <audioInitAdditive+0x310>)
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
     630:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     634:	ed93 6a00 	vldr	s12, [r3]
     638:	ee86 7a86 	vdiv.f32	s14, s13, s12
	if (!szb_buf) return FR_MKFS_ABORTED;
     63c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
     640:	eddf 6a34 	vldr	s13, [pc, #208]	; 714 <audioInitAdditive+0x314>
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
     644:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
     648:	4b33      	ldr	r3, [pc, #204]	; (718 <audioInitAdditive+0x318>)
     64a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
     64e:	edc3 7a00 	vstr	s15, [r3]
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
     652:	eddf 6a32 	vldr	s13, [pc, #200]	; 71c <audioInitAdditive+0x31c>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
     656:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
     65a:	4b31      	ldr	r3, [pc, #196]	; (720 <audioInitAdditive+0x320>)
					return FR_MKFS_ABORTED;
     65c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
					return FR_MKFS_ABORTED;
     660:	edc3 7a00 	vstr	s15, [r3]
					return FR_MKFS_ABORTED;
     664:	ee37 7a67 	vsub.f32	s14, s14, s15
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
     668:	4b2e      	ldr	r3, [pc, #184]	; (724 <audioInitAdditive+0x324>)
     66a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     66e:	ed83 7a00 	vstr	s14, [r3]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     672:	2100      	movs	r1, #0
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     674:	e7cb      	b.n	60e <audioInitAdditive+0x20e>
     676:	2600      	movs	r6, #0
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     678:	e026      	b.n	6c8 <audioInitAdditive+0x2c8>
     67a:	4d2b      	ldr	r5, [pc, #172]	; (728 <audioInitAdditive+0x328>)
                p += 1.0f;
     67c:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
                x = 0.5f - (p - b) * invB1;
     680:	0053      	lsls	r3, r2, #1
     682:	4423      	add	r3, r4
     684:	009f      	lsls	r7, r3, #2
     686:	4629      	mov	r1, r5
     688:	4828      	ldr	r0, [pc, #160]	; (72c <audioInitAdditive+0x32c>)
     68a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     68e:	f007 fb3f 	bl	7d10 <__tCycle_init_veneer>
     692:	4b1f      	ldr	r3, [pc, #124]	; (710 <audioInitAdditive+0x310>)
     694:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     698:	edd3 0a00 	vldr	s1, [r3]
     69c:	462b      	mov	r3, r5
     69e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     6a2:	4923      	ldr	r1, [pc, #140]	; (730 <audioInitAdditive+0x330>)
     6a4:	eddf 1a23 	vldr	s3, [pc, #140]	; 734 <audioInitAdditive+0x334>
                k = 1;
     6a8:	ed9f 1a23 	vldr	s2, [pc, #140]	; 738 <audioInitAdditive+0x338>
                x = -0.5f + p * invB;
     6ac:	eddf 7a23 	vldr	s15, [pc, #140]	; 73c <audioInitAdditive+0x33c>
     6b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
     6b4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     6b8:	4821      	ldr	r0, [pc, #132]	; (740 <audioInitAdditive+0x340>)
     6ba:	4438      	add	r0, r7
     6bc:	f007 fc98 	bl	7ff0 <__tADSRT_init_veneer>
     6c0:	3401      	adds	r4, #1
     6c2:	2c0b      	cmp	r4, #11
     6c4:	ddd9      	ble.n	67a <audioInitAdditive+0x27a>
     6c6:	3601      	adds	r6, #1
     6c8:	2e01      	cmp	r6, #1
     6ca:	dc01      	bgt.n	6d0 <audioInitAdditive+0x2d0>
     6cc:	2400      	movs	r4, #0
     6ce:	e7f8      	b.n	6c2 <audioInitAdditive+0x2c2>
     6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     6d2:	bf00      	nop
     6d4:	20000d68 	.word	0x20000d68
                k = 0;
     6d8:	3daaaaab 	.word	0x3daaaaab
     6dc:	200002f4 	.word	0x200002f4
    	sinPhase -= 1.0f;
     6e0:	20000d74 	.word	0x20000d74
     6e4:	20000090 	.word	0x20000090
    while (sinPhase >= 1.0f)
     6e8:	20000d6c 	.word	0x20000d6c
     6ec:	200000d8 	.word	0x200000d8
     6f0:	20000d44 	.word	0x20000d44
     6f4:	20000d3c 	.word	0x20000d3c
    	sinPhase += 1.0f;
     6f8:	200002d0 	.word	0x200002d0
     6fc:	20000120 	.word	0x20000120
    while (sinPhase < 0.0f)
     700:	20000a24 	.word	0x20000a24
     704:	20000904 	.word	0x20000904
    Lfloat tempPhase = (sinPhase * 2048.0f);
     708:	20000b44 	.word	0x20000b44
     70c:	20000048 	.word	0x20000048
    idx = (uint32_t)tempPhase; //11 bit table
     710:	20000000 	.word	0x20000000
     714:	3b84a9fa 	.word	0x3b84a9fa
    tempFrac = tempPhase - idx;
     718:	20000cac 	.word	0x20000cac
     71c:	42f60000 	.word	0x42f60000
    samp0 = __leaf_table_sinewave[idx];
     720:	20000c64 	.word	0x20000c64
     724:	20000cf4 	.word	0x20000cf4
     728:	20004e5c 	.word	0x20004e5c
    idx = (idx + 1) & c->sineMask;
     72c:	200007e4 	.word	0x200007e4
     730:	20000dc8 	.word	0x20000dc8
    samp1 = __leaf_table_sinewave[idx];
     734:	43160000 	.word	0x43160000
     738:	00000000 	.word	0x00000000
    Lfloat sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
     73c:	447a0000 	.word	0x447a0000
     740:	20000874 	.word	0x20000874
     744:	f3af 8000 	nop.w
     748:	f3af 8000 	nop.w
     74c:	f3af 8000 	nop.w
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
     750:	f3af 8000 	nop.w
     754:	f3af 8000 	nop.w
     758:	f3af 8000 	nop.w
     75c:	f3af 8000 	nop.w

00000760 <audioFreeAdditive>:
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	f3af 8000 	nop.w
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
     768:	f3af 8000 	nop.w
     76c:	f3af 8000 	nop.w
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     770:	f3af 8000 	nop.w
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
     774:	f3af 8000 	nop.w
     778:	f3af 8000 	nop.w
     77c:	f3af 8000 	nop.w

00000780 <audioTickAdditive>:
     780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     782:	ed2d 8b06 	vpush	{d8-d10}
     786:	2400      	movs	r4, #0
     788:	e00a      	b.n	7a0 <audioTickAdditive+0x20>
     78a:	00a5      	lsls	r5, r4, #2
     78c:	4864      	ldr	r0, [pc, #400]	; (920 <audioTickAdditive+0x1a0>)
     78e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     792:	f007 fb49 	bl	7e28 <__tExpSmooth_tick_veneer>
     796:	4b63      	ldr	r3, [pc, #396]	; (924 <audioTickAdditive+0x1a4>)
     798:	442b      	add	r3, r5
     79a:	ed83 0a00 	vstr	s0, [r3]
     79e:	3401      	adds	r4, #1
     7a0:	2c0b      	cmp	r4, #11
     7a2:	ddf2      	ble.n	78a <audioTickAdditive+0xa>
     7a4:	4c60      	ldr	r4, [pc, #384]	; (928 <audioTickAdditive+0x1a8>)
     7a6:	4620      	mov	r0, r4
     7a8:	f007 fa9a 	bl	7ce0 <__tNoise_tick_veneer>
     7ac:	485f      	ldr	r0, [pc, #380]	; (92c <audioTickAdditive+0x1ac>)
     7ae:	f007 fcb3 	bl	8118 <__tVZFilter_tickEfficient_veneer>
     7b2:	eef0 9a40 	vmov.f32	s19, s0
     7b6:	4620      	mov	r0, r4
     7b8:	f007 fa92 	bl	7ce0 <__tNoise_tick_veneer>
     7bc:	485c      	ldr	r0, [pc, #368]	; (930 <audioTickAdditive+0x1b0>)
     7be:	f007 fcab 	bl	8118 <__tVZFilter_tickEfficient_veneer>
     7c2:	ee79 9a80 	vadd.f32	s19, s19, s0
     7c6:	485b      	ldr	r0, [pc, #364]	; (934 <audioTickAdditive+0x1b4>)
     7c8:	f007 fb2e 	bl	7e28 <__tExpSmooth_tick_veneer>
     7cc:	eeb0 aa40 	vmov.f32	s20, s0
     7d0:	2500      	movs	r5, #0
     7d2:	ed9f 9a59 	vldr	s18, [pc, #356]	; 938 <audioTickAdditive+0x1b8>
     7d6:	e04a      	b.n	86e <audioTickAdditive+0xee>
     7d8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
     7dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     7e0:	009f      	lsls	r7, r3, #2
     7e2:	4856      	ldr	r0, [pc, #344]	; (93c <audioTickAdditive+0x1bc>)
     7e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     7e8:	f007 fb4e 	bl	7e88 <__tADSRT_tick_veneer>
     7ec:	eef0 8a40 	vmov.f32	s17, s0
     7f0:	4b53      	ldr	r3, [pc, #332]	; (940 <audioTickAdditive+0x1c0>)
     7f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     7f6:	edd3 7a00 	vldr	s15, [r3]
     7fa:	1c66      	adds	r6, r4, #1
     7fc:	ee07 6a10 	vmov	s14, r6
     800:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
     804:	ee28 8a27 	vmul.f32	s16, s16, s15
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     808:	4b46      	ldr	r3, [pc, #280]	; (924 <audioTickAdditive+0x1a4>)
     80a:	ed93 7a04 	vldr	s14, [r3, #16]
     80e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 944 <audioTickAdditive+0x1c4>
     812:	ee27 7a27 	vmul.f32	s14, s14, s15
     816:	ee07 4a90 	vmov	s15, r4
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
     81a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     81e:	ee67 7a87 	vmul.f32	s15, s15, s14
     822:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     826:	ee77 7a81 	vadd.f32	s15, s15, s2
     82a:	ee28 8a27 	vmul.f32	s16, s16, s15
    			c->numBLEPs--;
     82e:	eddf 7a46 	vldr	s15, [pc, #280]	; 948 <audioTickAdditive+0x1c8>
     832:	ee78 7a67 	vsub.f32	s15, s16, s15
     836:	ed9f 7a45 	vldr	s14, [pc, #276]	; 94c <audioTickAdditive+0x1cc>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     83a:	ee67 7a87 	vmul.f32	s15, s15, s14
     83e:	ee71 0a67 	vsub.f32	s1, s2, s15
     842:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 938 <audioTickAdditive+0x1b8>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
     846:	f007 fb43 	bl	7ed0 <__LEAF_clip_veneer>
     84a:	4c41      	ldr	r4, [pc, #260]	; (950 <audioTickAdditive+0x1d0>)
     84c:	443c      	add	r4, r7
     84e:	eeb0 0a48 	vmov.f32	s0, s16
    	whichBLEP &= 63;
     852:	4620      	mov	r0, r4
     854:	f007 fad4 	bl	7e00 <__tCycle_setFreq_veneer>
     858:	4620      	mov	r0, r4
     85a:	f007 fac1 	bl	7de0 <__tCycle_tick_veneer>
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
     85e:	ee20 0a28 	vmul.f32	s0, s0, s17
     862:	ee39 9a00 	vadd.f32	s18, s18, s0
     866:	4634      	mov	r4, r6
     868:	2c0b      	cmp	r4, #11
     86a:	ddb5      	ble.n	7d8 <audioTickAdditive+0x58>
     86c:	3501      	adds	r5, #1
     86e:	4b39      	ldr	r3, [pc, #228]	; (954 <audioTickAdditive+0x1d4>)
     870:	781b      	ldrb	r3, [r3, #0]
     872:	42ab      	cmp	r3, r5
     874:	dd20      	ble.n	8b8 <audioTickAdditive+0x138>
     876:	00ac      	lsls	r4, r5, #2
     878:	4837      	ldr	r0, [pc, #220]	; (958 <audioTickAdditive+0x1d8>)
     87a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
     87e:	f007 fb03 	bl	7e88 <__tADSRT_tick_veneer>
     882:	ee29 0a80 	vmul.f32	s0, s19, s0
     886:	4b27      	ldr	r3, [pc, #156]	; (924 <audioTickAdditive+0x1a4>)
     888:	edd3 7a07 	vldr	s15, [r3, #28]
     88c:	ee20 0a27 	vmul.f32	s0, s0, s15
     890:	ee39 9a00 	vadd.f32	s18, s18, s0
     894:	4b31      	ldr	r3, [pc, #196]	; (95c <audioTickAdditive+0x1dc>)
     896:	4423      	add	r3, r4
     898:	ed93 0a00 	vldr	s0, [r3]
     89c:	4b30      	ldr	r3, [pc, #192]	; (960 <audioTickAdditive+0x1e0>)
     89e:	4423      	add	r3, r4
     8a0:	edd3 7a00 	vldr	s15, [r3]
     8a4:	ee30 0a27 	vadd.f32	s0, s0, s15
     8a8:	f007 fa86 	bl	7db8 <__mtof_veneer>
     8ac:	4b24      	ldr	r3, [pc, #144]	; (940 <audioTickAdditive+0x1c0>)
     8ae:	4423      	add	r3, r4
     8b0:	ed83 0a00 	vstr	s0, [r3]
     8b4:	2400      	movs	r4, #0
     8b6:	e7d7      	b.n	868 <audioTickAdditive+0xe8>
     8b8:	eddf 7a2a 	vldr	s15, [pc, #168]	; 964 <audioTickAdditive+0x1e4>
     8bc:	ee6a 0a27 	vmul.f32	s1, s20, s15
     8c0:	ed9f 0a29 	vldr	s0, [pc, #164]	; 968 <audioTickAdditive+0x1e8>
     8c4:	ed9f 1a29 	vldr	s2, [pc, #164]	; 96c <audioTickAdditive+0x1ec>
     8c8:	ee70 0a80 	vadd.f32	s1, s1, s0
     8cc:	f007 fb00 	bl	7ed0 <__LEAF_clip_veneer>
     8d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
     8d4:	ee17 3a90 	vmov	r3, s15
     8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     8dc:	ee70 7a67 	vsub.f32	s15, s0, s15
     8e0:	1c59      	adds	r1, r3, #1
     8e2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
     8e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     8ea:	ee37 7a67 	vsub.f32	s14, s14, s15
     8ee:	4a20      	ldr	r2, [pc, #128]	; (970 <audioTickAdditive+0x1f0>)
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     8f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     8f4:	edd3 6a00 	vldr	s13, [r3]
     8f8:	ee66 6a87 	vmul.f32	s13, s13, s14
     8fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     900:	ed92 7a00 	vldr	s14, [r2]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
     904:	ee67 7a27 	vmul.f32	s15, s14, s15
     908:	ee77 7aa6 	vadd.f32	s15, s15, s13
     90c:	ee29 9a27 	vmul.f32	s18, s18, s15
     910:	4b18      	ldr	r3, [pc, #96]	; (974 <audioTickAdditive+0x1f4>)
     912:	ed93 0a00 	vldr	s0, [r3]
     916:	ee29 0a00 	vmul.f32	s0, s18, s0
    			c->numBLEPs--;
     91a:	ecbd 8b06 	vpop	{d8-d10}
     91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     920:	20004e28 	.word	0x20004e28
    z += 0.5f * (c->_f[j] - z);
     924:	20004df8 	.word	0x20004df8
     928:	20004eb4 	.word	0x20004eb4
     92c:	20004ebc 	.word	0x20004ebc
     930:	20004ec0 	.word	0x20004ec0
     934:	20013e24 	.word	0x20013e24
     938:	00000000 	.word	0x00000000
     93c:	20000874 	.word	0x20000874
    j = (j+1) & 7;
     940:	20013da4 	.word	0x20013da4
     944:	3b449ba6 	.word	0x3b449ba6
    c->out = z;
     948:	466a6000 	.word	0x466a6000
    c->_p = p;
     94c:	3983126f 	.word	0x3983126f
    c->_w = w;
     950:	200007e4 	.word	0x200007e4
    c->_b = b;
     954:	200004b1 	.word	0x200004b1
    c->_z = z;
     958:	20004dd4 	.word	0x20004dd4
    c->_k = k;
     95c:	20013dec 	.word	0x20013dec
    c->_sinPhase = sinPhase;
     960:	20013df4 	.word	0x20013df4
}
     964:	42a00000 	.word	0x42a00000
     968:	423c0000 	.word	0x423c0000
     96c:	42fe0000 	.word	0x42fe0000
     970:	2000051c 	.word	0x2000051c
     974:	200004a8 	.word	0x200004a8
     978:	f3af 8000 	nop.w
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
	return tempSamp;
}
     97c:	f3af 8000 	nop.w

00000980 <audioFrameAdditive>:
{
     980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     984:	ed2d 8b0c 	vpush	{d8-d13}
     988:	b083      	sub	sp, #12
     98a:	4604      	mov	r4, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
     98c:	4b79      	ldr	r3, [pc, #484]	; (b74 <audioFrameAdditive+0x1f4>)
     98e:	685b      	ldr	r3, [r3, #4]
     990:	9300      	str	r3, [sp, #0]
	if (newPluck)
     992:	4b79      	ldr	r3, [pc, #484]	; (b78 <audioFrameAdditive+0x1f8>)
     994:	681b      	ldr	r3, [r3, #0]
     996:	2b00      	cmp	r3, #0
     998:	f040 830f 	bne.w	fba <audioFrameAdditive+0x63a>
		for (int i = 0; i < numStringsThisBoard; i++)
     99c:	2500      	movs	r5, #0
     99e:	e324      	b.n	fea <audioFrameAdditive+0x66a>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     9a0:	4b76      	ldr	r3, [pc, #472]	; (b7c <audioFrameAdditive+0x1fc>)
     9a2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     9a6:	b29b      	uxth	r3, r3
     9a8:	ee0b 3a90 	vmov	s23, r3
     9ac:	eef8 baeb 	vcvt.f32.s32	s23, s23
     9b0:	eddf 7a73 	vldr	s15, [pc, #460]	; b80 <audioFrameAdditive+0x200>
     9b4:	ee6b baa7 	vmul.f32	s23, s23, s15
				stringOctave[i] = octave;
     9b8:	00af      	lsls	r7, r5, #2
     9ba:	4e72      	ldr	r6, [pc, #456]	; (b84 <audioFrameAdditive+0x204>)
     9bc:	eb06 0685 	add.w	r6, r6, r5, lsl #2
     9c0:	4b71      	ldr	r3, [pc, #452]	; (b88 <audioFrameAdditive+0x208>)
     9c2:	681b      	ldr	r3, [r3, #0]
     9c4:	6033      	str	r3, [r6, #0]
				tADSRT_on(&fenvelopes[i], amplitz);
     9c6:	eeb0 0a6b 	vmov.f32	s0, s23
     9ca:	4870      	ldr	r0, [pc, #448]	; (b8c <audioFrameAdditive+0x20c>)
     9cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     9d0:	f007 fb1a 	bl	8008 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     9d4:	4b6e      	ldr	r3, [pc, #440]	; (b90 <audioFrameAdditive+0x210>)
     9d6:	443b      	add	r3, r7
     9d8:	ed93 0a00 	vldr	s0, [r3]
     9dc:	edd6 7a00 	vldr	s15, [r6]
     9e0:	ee30 0a27 	vadd.f32	s0, s0, s15
     9e4:	f007 f9e8 	bl	7db8 <__mtof_veneer>
     9e8:	4b6a      	ldr	r3, [pc, #424]	; (b94 <audioFrameAdditive+0x214>)
     9ea:	443b      	add	r3, r7
     9ec:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     9f0:	4b69      	ldr	r3, [pc, #420]	; (b98 <audioFrameAdditive+0x218>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	195a      	adds	r2, r3, r5
     9f6:	9201      	str	r2, [sp, #4]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     9f8:	4b68      	ldr	r3, [pc, #416]	; (b9c <audioFrameAdditive+0x21c>)
     9fa:	edd3 7a02 	vldr	s15, [r3, #8]
     9fe:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
     a02:	ee67 7a87 	vmul.f32	s15, s15, s14
     a06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
     a0e:	ee20 9a27 	vmul.f32	s18, s0, s15
				if (thisString < 6)
     a12:	2a05      	cmp	r2, #5
     a14:	dc52      	bgt.n	abc <audioFrameAdditive+0x13c>
					stringFade = (float)thisString * 0.2f;
     a16:	ee07 2a90 	vmov	s15, r2
     a1a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
     a1e:	eddf 7a60 	vldr	s15, [pc, #384]	; ba0 <audioFrameAdditive+0x220>
     a22:	ee68 8aa7 	vmul.f32	s17, s17, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
     a26:	ed9f 8a5f 	vldr	s16, [pc, #380]	; ba4 <audioFrameAdditive+0x224>
     a2a:	4e5f      	ldr	r6, [pc, #380]	; (ba8 <audioFrameAdditive+0x228>)
     a2c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     a30:	eef0 1a48 	vmov.f32	s3, s16
     a34:	ed96 1a08 	vldr	s2, [r6, #32]
     a38:	edd6 0a06 	vldr	s1, [r6, #24]
     a3c:	eeb0 0a49 	vmov.f32	s0, s18
     a40:	f007 fa66 	bl	7f10 <__LEAF_map_veneer>
     a44:	eef0 0a40 	vmov.f32	s1, s0
     a48:	eddf 9a58 	vldr	s19, [pc, #352]	; bac <audioFrameAdditive+0x22c>
     a4c:	eeb0 1a69 	vmov.f32	s2, s19
     a50:	eeb0 0a48 	vmov.f32	s0, s16
     a54:	f007 fa3c 	bl	7ed0 <__LEAF_clip_veneer>
     a58:	eef0 aa40 	vmov.f32	s21, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     a5c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     a60:	eef0 1a48 	vmov.f32	s3, s16
     a64:	ed96 1a05 	vldr	s2, [r6, #20]
     a68:	edd6 0a03 	vldr	s1, [r6, #12]
     a6c:	eeb0 0a49 	vmov.f32	s0, s18
     a70:	f007 fa4e 	bl	7f10 <__LEAF_map_veneer>
     a74:	eef0 0a40 	vmov.f32	s1, s0
     a78:	eeb0 1a69 	vmov.f32	s2, s19
     a7c:	eeb0 0a48 	vmov.f32	s0, s16
     a80:	f007 fa26 	bl	7ed0 <__LEAF_clip_veneer>
     a84:	eeb0 ba40 	vmov.f32	s22, s0
				int height1Int = floor(height1);
     a88:	eeb7 7acb 	vcvt.f64.f32	d7, s22
     a8c:	febb 7b47 	vrintm.f64	d7, d7
     a90:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     a94:	ee17 ba90 	vmov	fp, s15
				float height1Float = height1 - height1Int;
     a98:	eeb8 aae7 	vcvt.f32.s32	s20, s15
     a9c:	ee3b aa4a 	vsub.f32	s20, s22, s20
				int height2Int = floor(height2);
     aa0:	eeb7 7aea 	vcvt.f64.f32	d7, s21
     aa4:	febb 7b47 	vrintm.f64	d7, d7
     aa8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     aac:	ee17 aa90 	vmov	sl, s15
				float height2Float = height2 - height2Int;
     ab0:	eef8 9ae7 	vcvt.f32.s32	s19, s15
     ab4:	ee7a 9ae9 	vsub.f32	s19, s21, s19
				for (int j = 0; j < NUM_OVERTONES; j++)
     ab8:	2600      	movs	r6, #0
     aba:	e0df      	b.n	c7c <audioFrameAdditive+0x2fc>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     abc:	eddd 7a01 	vldr	s15, [sp, #4]
     ac0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
     ac4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
     ac8:	ee78 8ae7 	vsub.f32	s17, s17, s15
     acc:	eddf 7a34 	vldr	s15, [pc, #208]	; ba0 <audioFrameAdditive+0x220>
     ad0:	ee68 8aa7 	vmul.f32	s17, s17, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ad4:	ed9f 8a33 	vldr	s16, [pc, #204]	; ba4 <audioFrameAdditive+0x224>
     ad8:	4e33      	ldr	r6, [pc, #204]	; (ba8 <audioFrameAdditive+0x228>)
     ada:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     ade:	eef0 1a48 	vmov.f32	s3, s16
     ae2:	ed96 1a05 	vldr	s2, [r6, #20]
     ae6:	edd6 0a03 	vldr	s1, [r6, #12]
     aea:	eeb0 0a49 	vmov.f32	s0, s18
     aee:	f007 fa0f 	bl	7f10 <__LEAF_map_veneer>
     af2:	eef0 0a40 	vmov.f32	s1, s0
     af6:	eddf 9a2d 	vldr	s19, [pc, #180]	; bac <audioFrameAdditive+0x22c>
     afa:	eeb0 1a69 	vmov.f32	s2, s19
     afe:	eeb0 0a48 	vmov.f32	s0, s16
     b02:	f007 f9e5 	bl	7ed0 <__LEAF_clip_veneer>
     b06:	eef0 aa40 	vmov.f32	s21, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
     b0a:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     b0e:	eef0 1a48 	vmov.f32	s3, s16
     b12:	ed96 1a02 	vldr	s2, [r6, #8]
     b16:	edd6 0a00 	vldr	s1, [r6]
     b1a:	eeb0 0a49 	vmov.f32	s0, s18
     b1e:	f007 f9f7 	bl	7f10 <__LEAF_map_veneer>
     b22:	eef0 0a40 	vmov.f32	s1, s0
     b26:	eeb0 1a69 	vmov.f32	s2, s19
     b2a:	eeb0 0a48 	vmov.f32	s0, s16
     b2e:	f007 f9cf 	bl	7ed0 <__LEAF_clip_veneer>
     b32:	eeb0 ba40 	vmov.f32	s22, s0
     b36:	e7a7      	b.n	a88 <audioFrameAdditive+0x108>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
     b38:	f106 0230 	add.w	r2, r6, #48	; 0x30
     b3c:	0097      	lsls	r7, r2, #2
     b3e:	4b1c      	ldr	r3, [pc, #112]	; (bb0 <audioFrameAdditive+0x230>)
     b40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     b44:	edd3 ca00 	vldr	s25, [r3]
     b48:	4b17      	ldr	r3, [pc, #92]	; (ba8 <audioFrameAdditive+0x228>)
     b4a:	ed93 1a07 	vldr	s2, [r3, #28]
     b4e:	eef0 0a49 	vmov.f32	s1, s18
     b52:	ed93 0a06 	vldr	s0, [r3, #24]
     b56:	f007 f9bb 	bl	7ed0 <__LEAF_clip_veneer>
     b5a:	ee6c 7a80 	vmul.f32	s15, s25, s0
     b5e:	4b15      	ldr	r3, [pc, #84]	; (bb4 <audioFrameAdditive+0x234>)
     b60:	443b      	add	r3, r7
     b62:	ed93 7a00 	vldr	s14, [r3]
     b66:	ee77 7a87 	vadd.f32	s15, s15, s14
     b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     b6e:	ee87 da27 	vdiv.f32	s26, s14, s15
     b72:	e0f0      	b.n	d56 <audioFrameAdditive+0x3d6>
     b74:	e0001000 	.word	0xe0001000
     b78:	20004eb8 	.word	0x20004eb8
     b7c:	20013dd4 	.word	0x20013dd4
     b80:	37800080 	.word	0x37800080
     b84:	20013df4 	.word	0x20013df4
     b88:	20004ec4 	.word	0x20004ec4
     b8c:	20004dd4 	.word	0x20004dd4
     b90:	20013dec 	.word	0x20013dec
     b94:	20013da4 	.word	0x20013da4
     b98:	20004ddc 	.word	0x20004ddc
     b9c:	20004df8 	.word	0x20004df8
     ba0:	3e4ccccd 	.word	0x3e4ccccd
     ba4:	00000000 	.word	0x00000000
     ba8:	200002d0 	.word	0x200002d0
     bac:	3ffeb852 	.word	0x3ffeb852
     bb0:	20000a24 	.word	0x20000a24
     bb4:	20000b44 	.word	0x20000b44
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
     bb8:	f106 0218 	add.w	r2, r6, #24
     bbc:	0097      	lsls	r7, r2, #2
     bbe:	4bd9      	ldr	r3, [pc, #868]	; (f24 <audioFrameAdditive+0x5a4>)
     bc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     bc4:	edd3 ca00 	vldr	s25, [r3]
     bc8:	4bd7      	ldr	r3, [pc, #860]	; (f28 <audioFrameAdditive+0x5a8>)
     bca:	ed93 1a04 	vldr	s2, [r3, #16]
     bce:	eef0 0a49 	vmov.f32	s1, s18
     bd2:	ed93 0a03 	vldr	s0, [r3, #12]
     bd6:	f007 f97b 	bl	7ed0 <__LEAF_clip_veneer>
     bda:	ee6c 7a80 	vmul.f32	s15, s25, s0
     bde:	4bd3      	ldr	r3, [pc, #844]	; (f2c <audioFrameAdditive+0x5ac>)
     be0:	443b      	add	r3, r7
     be2:	ed93 7a00 	vldr	s14, [r3]
     be6:	ee77 7a87 	vadd.f32	s15, s15, s14
     bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
     bf2:	ee27 7a28 	vmul.f32	s14, s14, s17
     bf6:	ee2c ca0d 	vmul.f32	s24, s24, s26
     bfa:	ee37 7a0c 	vadd.f32	s14, s14, s24
					thisDecay *= 2000.0f * knobScaled[3];
     bfe:	f8df 9348 	ldr.w	r9, [pc, #840]	; f48 <audioFrameAdditive+0x5c8>
     c02:	edd9 7a03 	vldr	s15, [r9, #12]
     c06:	eddf 6aca 	vldr	s13, [pc, #808]	; f30 <audioFrameAdditive+0x5b0>
     c0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
     c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
     c12:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
     c16:	eb06 0343 	add.w	r3, r6, r3, lsl #1
     c1a:	4ac6      	ldr	r2, [pc, #792]	; (f34 <audioFrameAdditive+0x5b4>)
     c1c:	eb02 0883 	add.w	r8, r2, r3, lsl #2
     c20:	4fc5      	ldr	r7, [pc, #788]	; (f38 <audioFrameAdditive+0x5b8>)
     c22:	783b      	ldrb	r3, [r7, #0]
     c24:	4ac5      	ldr	r2, [pc, #788]	; (f3c <audioFrameAdditive+0x5bc>)
     c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c2a:	ed93 0a00 	vldr	s0, [r3]
     c2e:	ed99 7a05 	vldr	s14, [r9, #20]
     c32:	ee20 0a07 	vmul.f32	s0, s0, s14
     c36:	ed9f cac2 	vldr	s24, [pc, #776]	; f40 <audioFrameAdditive+0x5c0>
     c3a:	ee20 0a0c 	vmul.f32	s0, s0, s24
     c3e:	ee30 0a27 	vadd.f32	s0, s0, s15
     c42:	4640      	mov	r0, r8
     c44:	f007 f8b4 	bl	7db0 <__tADSRT_setDecay_veneer>
					currentRandom++;
     c48:	783b      	ldrb	r3, [r7, #0]
     c4a:	3301      	adds	r3, #1
     c4c:	b2db      	uxtb	r3, r3
     c4e:	703b      	strb	r3, [r7, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
     c50:	4aba      	ldr	r2, [pc, #744]	; (f3c <audioFrameAdditive+0x5bc>)
     c52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c56:	ed93 0a00 	vldr	s0, [r3]
     c5a:	edd9 7a06 	vldr	s15, [r9, #24]
     c5e:	ee20 0a27 	vmul.f32	s0, s0, s15
     c62:	ee20 0a0c 	vmul.f32	s0, s0, s24
     c66:	ee30 0a08 	vadd.f32	s0, s0, s16
     c6a:	ee20 0a2b 	vmul.f32	s0, s0, s23
     c6e:	4640      	mov	r0, r8
     c70:	f007 f9ca 	bl	8008 <__tADSRT_on_veneer>
					currentRandom++;
     c74:	783b      	ldrb	r3, [r7, #0]
     c76:	3301      	adds	r3, #1
     c78:	703b      	strb	r3, [r7, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
     c7a:	3601      	adds	r6, #1
     c7c:	2e0b      	cmp	r6, #11
     c7e:	f300 8176 	bgt.w	f6e <audioFrameAdditive+0x5ee>
					if (thisString < 6)
     c82:	9b01      	ldr	r3, [sp, #4]
     c84:	2b05      	cmp	r3, #5
     c86:	f300 808c 	bgt.w	da2 <audioFrameAdditive+0x422>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     c8a:	4aae      	ldr	r2, [pc, #696]	; (f44 <audioFrameAdditive+0x5c4>)
     c8c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
     c90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     c94:	3324      	adds	r3, #36	; 0x24
     c96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c9a:	ed93 8a00 	vldr	s16, [r3]
     c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     ca2:	ee77 7a4a 	vsub.f32	s15, s14, s20
     ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
     caa:	f10b 0301 	add.w	r3, fp, #1
     cae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     cb2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     cb6:	3324      	adds	r3, #36	; 0x24
     cb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     cbc:	edd3 7a00 	vldr	s15, [r3]
     cc0:	ee67 7a8a 	vmul.f32	s15, s15, s20
     cc4:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     cc8:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     ccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     cd0:	3348      	adds	r3, #72	; 0x48
     cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     cd6:	edd3 7a00 	vldr	s15, [r3]
     cda:	ee77 6a69 	vsub.f32	s13, s14, s19
     cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
     ce2:	f10a 0301 	add.w	r3, sl, #1
     ce6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     cea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     cee:	3348      	adds	r3, #72	; 0x48
     cf0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     cf4:	edd2 6a00 	vldr	s13, [r2]
     cf8:	ee66 6aa9 	vmul.f32	s13, s13, s19
     cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
     d00:	ee28 8a88 	vmul.f32	s16, s17, s16
     d04:	ee37 ca68 	vsub.f32	s24, s14, s17
     d08:	ee6c 7a27 	vmul.f32	s15, s24, s15
     d0c:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
     d10:	eef4 aac7 	vcmpe.f32	s21, s14
     d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d18:	f53f af0e 	bmi.w	b38 <audioFrameAdditive+0x1b8>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
     d1c:	f106 023c 	add.w	r2, r6, #60	; 0x3c
     d20:	0097      	lsls	r7, r2, #2
     d22:	4b80      	ldr	r3, [pc, #512]	; (f24 <audioFrameAdditive+0x5a4>)
     d24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d28:	edd3 ca00 	vldr	s25, [r3]
     d2c:	4b7e      	ldr	r3, [pc, #504]	; (f28 <audioFrameAdditive+0x5a8>)
     d2e:	ed93 1a08 	vldr	s2, [r3, #32]
     d32:	eef0 0a49 	vmov.f32	s1, s18
     d36:	ed93 0a07 	vldr	s0, [r3, #28]
     d3a:	f007 f8c9 	bl	7ed0 <__LEAF_clip_veneer>
     d3e:	ee6c 7a80 	vmul.f32	s15, s25, s0
     d42:	4b7a      	ldr	r3, [pc, #488]	; (f2c <audioFrameAdditive+0x5ac>)
     d44:	443b      	add	r3, r7
     d46:	ed93 7a00 	vldr	s14, [r3]
     d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
     d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     d52:	ee87 da27 	vdiv.f32	s26, s14, s15
						if (height1 < 1.0f)
     d56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     d5a:	eeb4 bae7 	vcmpe.f32	s22, s15
     d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d62:	f53f af29 	bmi.w	bb8 <audioFrameAdditive+0x238>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
     d66:	f106 0224 	add.w	r2, r6, #36	; 0x24
     d6a:	0097      	lsls	r7, r2, #2
     d6c:	4b6d      	ldr	r3, [pc, #436]	; (f24 <audioFrameAdditive+0x5a4>)
     d6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d72:	edd3 ca00 	vldr	s25, [r3]
     d76:	4b6c      	ldr	r3, [pc, #432]	; (f28 <audioFrameAdditive+0x5a8>)
     d78:	ed93 1a05 	vldr	s2, [r3, #20]
     d7c:	eef0 0a49 	vmov.f32	s1, s18
     d80:	ed93 0a04 	vldr	s0, [r3, #16]
     d84:	f007 f8a4 	bl	7ed0 <__LEAF_clip_veneer>
     d88:	ee6c 7a80 	vmul.f32	s15, s25, s0
     d8c:	4b67      	ldr	r3, [pc, #412]	; (f2c <audioFrameAdditive+0x5ac>)
     d8e:	443b      	add	r3, r7
     d90:	ed93 7a00 	vldr	s14, [r3]
     d94:	ee77 7a87 	vadd.f32	s15, s15, s14
     d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
     da0:	e727      	b.n	bf2 <audioFrameAdditive+0x272>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     da2:	4a68      	ldr	r2, [pc, #416]	; (f44 <audioFrameAdditive+0x5c4>)
     da4:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
     da8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     dac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     db0:	ed93 8a00 	vldr	s16, [r3]
     db4:	f10b 0301 	add.w	r3, fp, #1
     db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     dbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     dc0:	3324      	adds	r3, #36	; 0x24
     dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     dc6:	edd3 7a00 	vldr	s15, [r3]
     dca:	ee67 7a8a 	vmul.f32	s15, s15, s20
     dce:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     dd2:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
     dd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     dda:	3324      	adds	r3, #36	; 0x24
     ddc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     de0:	edd3 7a00 	vldr	s15, [r3]
     de4:	f10a 0301 	add.w	r3, sl, #1
     de8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     dec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     df0:	3348      	adds	r3, #72	; 0x48
     df2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     df6:	ed92 7a00 	vldr	s14, [r2]
     dfa:	ee27 7a29 	vmul.f32	s14, s14, s19
     dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
     e02:	ee28 8a88 	vmul.f32	s16, s17, s16
     e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e0a:	ee37 ca68 	vsub.f32	s24, s14, s17
     e0e:	ee6c 7a27 	vmul.f32	s15, s24, s15
     e12:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
     e16:	eef4 aac7 	vcmpe.f32	s21, s14
     e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e1e:	d447      	bmi.n	eb0 <audioFrameAdditive+0x530>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
     e20:	f106 0224 	add.w	r2, r6, #36	; 0x24
     e24:	0097      	lsls	r7, r2, #2
     e26:	4b3f      	ldr	r3, [pc, #252]	; (f24 <audioFrameAdditive+0x5a4>)
     e28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e2c:	edd3 ca00 	vldr	s25, [r3]
     e30:	4b3d      	ldr	r3, [pc, #244]	; (f28 <audioFrameAdditive+0x5a8>)
     e32:	ed93 1a05 	vldr	s2, [r3, #20]
     e36:	eef0 0a49 	vmov.f32	s1, s18
     e3a:	ed93 0a04 	vldr	s0, [r3, #16]
     e3e:	f007 f847 	bl	7ed0 <__LEAF_clip_veneer>
     e42:	ee6c 7a80 	vmul.f32	s15, s25, s0
     e46:	4b39      	ldr	r3, [pc, #228]	; (f2c <audioFrameAdditive+0x5ac>)
     e48:	443b      	add	r3, r7
     e4a:	ed93 7a00 	vldr	s14, [r3]
     e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
     e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e56:	ee87 da27 	vdiv.f32	s26, s14, s15
						if (height1 < 1.0f)
     e5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     e5e:	eeb4 bae7 	vcmpe.f32	s22, s15
     e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     e66:	d441      	bmi.n	eec <audioFrameAdditive+0x56c>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
     e68:	f106 020c 	add.w	r2, r6, #12
     e6c:	0097      	lsls	r7, r2, #2
     e6e:	4b2d      	ldr	r3, [pc, #180]	; (f24 <audioFrameAdditive+0x5a4>)
     e70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e74:	edd3 ca00 	vldr	s25, [r3]
     e78:	4b2b      	ldr	r3, [pc, #172]	; (f28 <audioFrameAdditive+0x5a8>)
     e7a:	ed93 1a02 	vldr	s2, [r3, #8]
     e7e:	eef0 0a49 	vmov.f32	s1, s18
     e82:	ed93 0a01 	vldr	s0, [r3, #4]
     e86:	f007 f823 	bl	7ed0 <__LEAF_clip_veneer>
     e8a:	ee6c 7a80 	vmul.f32	s15, s25, s0
     e8e:	4b27      	ldr	r3, [pc, #156]	; (f2c <audioFrameAdditive+0x5ac>)
     e90:	443b      	add	r3, r7
     e92:	ed93 7a00 	vldr	s14, [r3]
     e96:	ee77 7a87 	vadd.f32	s15, s15, s14
     e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
     ea2:	ee27 7a28 	vmul.f32	s14, s14, s17
     ea6:	ee2c ca0d 	vmul.f32	s24, s24, s26
     eaa:	ee37 7a0c 	vadd.f32	s14, s14, s24
     eae:	e6a6      	b.n	bfe <audioFrameAdditive+0x27e>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
     eb0:	f106 0218 	add.w	r2, r6, #24
     eb4:	0097      	lsls	r7, r2, #2
     eb6:	4b1b      	ldr	r3, [pc, #108]	; (f24 <audioFrameAdditive+0x5a4>)
     eb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     ebc:	edd3 ca00 	vldr	s25, [r3]
     ec0:	4b19      	ldr	r3, [pc, #100]	; (f28 <audioFrameAdditive+0x5a8>)
     ec2:	ed93 1a04 	vldr	s2, [r3, #16]
     ec6:	eef0 0a49 	vmov.f32	s1, s18
     eca:	ed93 0a03 	vldr	s0, [r3, #12]
     ece:	f006 ffff 	bl	7ed0 <__LEAF_clip_veneer>
     ed2:	ee6c 7a80 	vmul.f32	s15, s25, s0
     ed6:	4b15      	ldr	r3, [pc, #84]	; (f2c <audioFrameAdditive+0x5ac>)
     ed8:	443b      	add	r3, r7
     eda:	ed93 7a00 	vldr	s14, [r3]
     ede:	ee77 7a87 	vadd.f32	s15, s15, s14
     ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     ee6:	ee87 da27 	vdiv.f32	s26, s14, s15
     eea:	e7b6      	b.n	e5a <audioFrameAdditive+0x4da>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
     eec:	00b7      	lsls	r7, r6, #2
     eee:	4b0d      	ldr	r3, [pc, #52]	; (f24 <audioFrameAdditive+0x5a4>)
     ef0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     ef4:	edd3 ca00 	vldr	s25, [r3]
     ef8:	4b0b      	ldr	r3, [pc, #44]	; (f28 <audioFrameAdditive+0x5a8>)
     efa:	ed93 1a01 	vldr	s2, [r3, #4]
     efe:	eef0 0a49 	vmov.f32	s1, s18
     f02:	ed93 0a00 	vldr	s0, [r3]
     f06:	f006 ffe3 	bl	7ed0 <__LEAF_clip_veneer>
     f0a:	ee6c 7a80 	vmul.f32	s15, s25, s0
     f0e:	4b07      	ldr	r3, [pc, #28]	; (f2c <audioFrameAdditive+0x5ac>)
     f10:	443b      	add	r3, r7
     f12:	ed93 7a00 	vldr	s14, [r3]
     f16:	ee77 7a87 	vadd.f32	s15, s15, s14
     f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
     f22:	e7be      	b.n	ea2 <audioFrameAdditive+0x522>
     f24:	20000a24 	.word	0x20000a24
     f28:	200002d0 	.word	0x200002d0
     f2c:	20000b44 	.word	0x20000b44
     f30:	44fa0000 	.word	0x44fa0000
     f34:	20000874 	.word	0x20000874
     f38:	20013ed6 	.word	0x20013ed6
     f3c:	20004f40 	.word	0x20004f40
     f40:	3dcccccd 	.word	0x3dcccccd
     f44:	200002f4 	.word	0x200002f4
     f48:	20004df8 	.word	0x20004df8
					tADSRT_off(&additiveEnv[i][j]);
     f4c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
     f50:	eb06 0343 	add.w	r3, r6, r3, lsl #1
     f54:	4837      	ldr	r0, [pc, #220]	; (1034 <audioFrameAdditive+0x6b4>)
     f56:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     f5a:	f006 fec5 	bl	7ce8 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     f5e:	3601      	adds	r6, #1
     f60:	2e0b      	cmp	r6, #11
     f62:	ddf3      	ble.n	f4c <audioFrameAdditive+0x5cc>
				tADSRT_off(&fenvelopes[i]);
     f64:	4834      	ldr	r0, [pc, #208]	; (1038 <audioFrameAdditive+0x6b8>)
     f66:	eb00 0085 	add.w	r0, r0, r5, lsl #2
     f6a:	f006 febd 	bl	7ce8 <__tADSRT_off_veneer>
			previousStringInputs[i] = stringInputs[i];
     f6e:	4b33      	ldr	r3, [pc, #204]	; (103c <audioFrameAdditive+0x6bc>)
     f70:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     f74:	b29b      	uxth	r3, r3
     f76:	4a32      	ldr	r2, [pc, #200]	; (1040 <audioFrameAdditive+0x6c0>)
     f78:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     f7c:	3501      	adds	r5, #1
     f7e:	4b31      	ldr	r3, [pc, #196]	; (1044 <audioFrameAdditive+0x6c4>)
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	42ab      	cmp	r3, r5
     f84:	dd1b      	ble.n	fbe <audioFrameAdditive+0x63e>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     f86:	4b2e      	ldr	r3, [pc, #184]	; (1040 <audioFrameAdditive+0x6c0>)
     f88:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     f8c:	b29b      	uxth	r3, r3
     f8e:	b933      	cbnz	r3, f9e <audioFrameAdditive+0x61e>
     f90:	4b2a      	ldr	r3, [pc, #168]	; (103c <audioFrameAdditive+0x6bc>)
     f92:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     f96:	b29b      	uxth	r3, r3
     f98:	2b00      	cmp	r3, #0
     f9a:	f47f ad01 	bne.w	9a0 <audioFrameAdditive+0x20>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     f9e:	4b28      	ldr	r3, [pc, #160]	; (1040 <audioFrameAdditive+0x6c0>)
     fa0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     fa4:	b29b      	uxth	r3, r3
     fa6:	2b00      	cmp	r3, #0
     fa8:	d0e1      	beq.n	f6e <audioFrameAdditive+0x5ee>
     faa:	4b24      	ldr	r3, [pc, #144]	; (103c <audioFrameAdditive+0x6bc>)
     fac:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
     fb0:	b29b      	uxth	r3, r3
     fb2:	2b00      	cmp	r3, #0
     fb4:	d1db      	bne.n	f6e <audioFrameAdditive+0x5ee>
				for (int j = 0; j < NUM_OVERTONES; j++)
     fb6:	2600      	movs	r6, #0
     fb8:	e7d2      	b.n	f60 <audioFrameAdditive+0x5e0>
		for (int i = 0; i < numStringsThisBoard; i++)
     fba:	2500      	movs	r5, #0
     fbc:	e7df      	b.n	f7e <audioFrameAdditive+0x5fe>
		newPluck = 0;
     fbe:	4b22      	ldr	r3, [pc, #136]	; (1048 <audioFrameAdditive+0x6c8>)
     fc0:	2200      	movs	r2, #0
     fc2:	601a      	str	r2, [r3, #0]
     fc4:	e4ea      	b.n	99c <audioFrameAdditive+0x1c>
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     fc6:	f7ff fbdb 	bl	780 <audioTickAdditive>
     fca:	eddf 7a20 	vldr	s15, [pc, #128]	; 104c <audioFrameAdditive+0x6cc>
     fce:	ee20 0a27 	vmul.f32	s0, s0, s15
     fd2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
     fd6:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
     fda:	1962      	adds	r2, r4, r5
     fdc:	491c      	ldr	r1, [pc, #112]	; (1050 <audioFrameAdditive+0x6d0>)
     fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     fe2:	3201      	adds	r2, #1
     fe4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     fe8:	3502      	adds	r5, #2
     fea:	2d7f      	cmp	r5, #127	; 0x7f
     fec:	ddeb      	ble.n	fc6 <audioFrameAdditive+0x646>
	if (switchStrings)
     fee:	4b19      	ldr	r3, [pc, #100]	; (1054 <audioFrameAdditive+0x6d4>)
     ff0:	681b      	ldr	r3, [r3, #0]
     ff2:	b9cb      	cbnz	r3, 1028 <audioFrameAdditive+0x6a8>
	switchStrings = 0;
     ff4:	4b17      	ldr	r3, [pc, #92]	; (1054 <audioFrameAdditive+0x6d4>)
     ff6:	2200      	movs	r2, #0
     ff8:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     ffa:	4b17      	ldr	r3, [pc, #92]	; (1058 <audioFrameAdditive+0x6d8>)
     ffc:	685b      	ldr	r3, [r3, #4]
     ffe:	9a00      	ldr	r2, [sp, #0]
    1000:	1a9b      	subs	r3, r3, r2
    1002:	4a16      	ldr	r2, [pc, #88]	; (105c <audioFrameAdditive+0x6dc>)
    1004:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1006:	ee07 3a90 	vmov	s15, r3
    100a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    100e:	4b14      	ldr	r3, [pc, #80]	; (1060 <audioFrameAdditive+0x6e0>)
    1010:	ed93 7a00 	vldr	s14, [r3]
    1014:	ee67 7a87 	vmul.f32	s15, s15, s14
    1018:	4b12      	ldr	r3, [pc, #72]	; (1064 <audioFrameAdditive+0x6e4>)
    101a:	edc3 7a00 	vstr	s15, [r3]
}
    101e:	b003      	add	sp, #12
    1020:	ecbd 8b0c 	vpop	{d8-d13}
    1024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
    1028:	4b0a      	ldr	r3, [pc, #40]	; (1054 <audioFrameAdditive+0x6d4>)
    102a:	6818      	ldr	r0, [r3, #0]
    102c:	f000 f8d8 	bl	11e0 <switchStringModel>
    1030:	e7e0      	b.n	ff4 <audioFrameAdditive+0x674>
    1032:	bf00      	nop
    1034:	20000874 	.word	0x20000874
    1038:	20004dd4 	.word	0x20004dd4
    103c:	20013dd4 	.word	0x20013dd4
    1040:	20004f28 	.word	0x20004f28
    1044:	200004b1 	.word	0x200004b1
    1048:	20004eb8 	.word	0x20004eb8
    104c:	4b000000 	.word	0x4b000000
    1050:	30000000 	.word	0x30000000
    1054:	20013e0c 	.word	0x20013e0c
    1058:	e0001000 	.word	0xe0001000
    105c:	20013e10 	.word	0x20013e10
    1060:	200004a4 	.word	0x200004a4
    1064:	20004de4 	.word	0x20004de4
	...

00001080 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
    1080:	b538      	push	{r3, r4, r5, lr}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1082:	f100 0318 	add.w	r3, r0, #24
    1086:	4942      	ldr	r1, [pc, #264]	; (1190 <updateStateFromSPIMessage+0x110>)
    1088:	5ccb      	ldrb	r3, [r1, r3]

	octaveAction = (modeBit >> 6) & 1;
    108a:	f3c3 1480 	ubfx	r4, r3, #6, #1
    108e:	4a41      	ldr	r2, [pc, #260]	; (1194 <updateStateFromSPIMessage+0x114>)
    1090:	7014      	strb	r4, [r2, #0]
	dualSlider = (modeBit >> 5) & 1;
    1092:	f3c3 1540 	ubfx	r5, r3, #5, #1
    1096:	4c40      	ldr	r4, [pc, #256]	; (1198 <updateStateFromSPIMessage+0x118>)
    1098:	6025      	str	r5, [r4, #0]

	edit = (modeBit >> 4) & 1;
    109a:	f3c3 1500 	ubfx	r5, r3, #4, #1
    109e:	4c3f      	ldr	r4, [pc, #252]	; (119c <updateStateFromSPIMessage+0x11c>)
    10a0:	6025      	str	r5, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    10a2:	f100 0419 	add.w	r4, r0, #25
    10a6:	5d0c      	ldrb	r4, [r1, r4]
    10a8:	493d      	ldr	r1, [pc, #244]	; (11a0 <updateStateFromSPIMessage+0x120>)
    10aa:	600c      	str	r4, [r1, #0]



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    10ac:	f003 030f 	and.w	r3, r3, #15
    10b0:	3b05      	subs	r3, #5
    10b2:	ee07 3a90 	vmov	s15, r3
    10b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    10ba:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    10be:	ee67 7a87 	vmul.f32	s15, s15, s14
    10c2:	4b38      	ldr	r3, [pc, #224]	; (11a4 <updateStateFromSPIMessage+0x124>)
    10c4:	edc3 7a00 	vstr	s15, [r3]
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    10c8:	7813      	ldrb	r3, [r2, #0]
    10ca:	2b00      	cmp	r3, #0
    10cc:	d15e      	bne.n	118c <updateStateFromSPIMessage+0x10c>
		{
			stringOctave[i] = octave;
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    10ce:	f100 031a 	add.w	r3, r0, #26
    10d2:	4a2f      	ldr	r2, [pc, #188]	; (1190 <updateStateFromSPIMessage+0x110>)
    10d4:	5cd1      	ldrb	r1, [r2, r3]
    10d6:	f100 031b 	add.w	r3, r0, #27
    10da:	5cd3      	ldrb	r3, [r2, r3]
    10dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    10e0:	b29b      	uxth	r3, r3
    10e2:	4931      	ldr	r1, [pc, #196]	; (11a8 <updateStateFromSPIMessage+0x128>)
    10e4:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    10e6:	880b      	ldrh	r3, [r1, #0]
    10e8:	b29b      	uxth	r3, r3
    10ea:	ee00 3a10 	vmov	s0, r3
    10ee:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    10f2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 11ac <updateStateFromSPIMessage+0x12c>
    10f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    10fa:	4b2d      	ldr	r3, [pc, #180]	; (11b0 <updateStateFromSPIMessage+0x130>)
    10fc:	ed83 0a00 	vstr	s0, [r3]

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1100:	f100 031c 	add.w	r3, r0, #28
    1104:	f812 c003 	ldrb.w	ip, [r2, r3]
    1108:	301d      	adds	r0, #29
    110a:	5c11      	ldrb	r1, [r2, r0]
    110c:	4b29      	ldr	r3, [pc, #164]	; (11b4 <updateStateFromSPIMessage+0x134>)
    110e:	781a      	ldrb	r2, [r3, #0]
    1110:	b2d2      	uxtb	r2, r2
    1112:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    1116:	4828      	ldr	r0, [pc, #160]	; (11b8 <updateStateFromSPIMessage+0x138>)
    1118:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    111c:	781a      	ldrb	r2, [r3, #0]
    111e:	b2d2      	uxtb	r2, r2
    1120:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    1124:	781b      	ldrb	r3, [r3, #0]
    1126:	b2db      	uxtb	r3, r3
    1128:	4924      	ldr	r1, [pc, #144]	; (11bc <updateStateFromSPIMessage+0x13c>)
    112a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    112e:	429a      	cmp	r2, r3
    1130:	d01d      	beq.n	116e <updateStateFromSPIMessage+0xee>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1132:	4b20      	ldr	r3, [pc, #128]	; (11b4 <updateStateFromSPIMessage+0x134>)
    1134:	7819      	ldrb	r1, [r3, #0]
    1136:	b2c9      	uxtb	r1, r1
    1138:	781a      	ldrb	r2, [r3, #0]
    113a:	b2d2      	uxtb	r2, r2
    113c:	4603      	mov	r3, r0
    113e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    1142:	491e      	ldr	r1, [pc, #120]	; (11bc <updateStateFromSPIMessage+0x13c>)
    1144:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1148:	edd3 7a00 	vldr	s15, [r3]
    114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1150:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 11c0 <updateStateFromSPIMessage+0x140>
    1154:	ee67 7a87 	vmul.f32	s15, s15, s14
    1158:	4a1a      	ldr	r2, [pc, #104]	; (11c4 <updateStateFromSPIMessage+0x144>)
    115a:	edc2 7a00 	vstr	s15, [r2]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    115e:	edd3 7a01 	vldr	s15, [r3, #4]
    1162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1166:	ee67 7a87 	vmul.f32	s15, s15, s14
    116a:	edc2 7a01 	vstr	s15, [r2, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    116e:	4816      	ldr	r0, [pc, #88]	; (11c8 <updateStateFromSPIMessage+0x148>)
    1170:	f006 ffba 	bl	80e8 <__tExpSmooth_setDest_veneer>
}
    1174:	bd38      	pop	{r3, r4, r5, pc}
			stringOctave[i] = octave;
    1176:	4a15      	ldr	r2, [pc, #84]	; (11cc <updateStateFromSPIMessage+0x14c>)
    1178:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    117c:	edc2 7a00 	vstr	s15, [r2]
		for (int i = 0; i < numStringsThisBoard; i++)
    1180:	3301      	adds	r3, #1
    1182:	4a13      	ldr	r2, [pc, #76]	; (11d0 <updateStateFromSPIMessage+0x150>)
    1184:	7812      	ldrb	r2, [r2, #0]
    1186:	429a      	cmp	r2, r3
    1188:	dcf5      	bgt.n	1176 <updateStateFromSPIMessage+0xf6>
    118a:	e7a0      	b.n	10ce <updateStateFromSPIMessage+0x4e>
    118c:	2300      	movs	r3, #0
    118e:	e7f8      	b.n	1182 <updateStateFromSPIMessage+0x102>
    1190:	30000840 	.word	0x30000840
    1194:	20004ec8 	.word	0x20004ec8
    1198:	20004dcc 	.word	0x20004dcc
    119c:	20004dd0 	.word	0x20004dd0
    11a0:	20013e18 	.word	0x20013e18
    11a4:	20004ec4 	.word	0x20004ec4
    11a8:	20013e20 	.word	0x20013e20
    11ac:	39800801 	.word	0x39800801
    11b0:	20013e1c 	.word	0x20013e1c
    11b4:	20013e28 	.word	0x20013e28
    11b8:	20013dfc 	.word	0x20013dfc
    11bc:	20013e04 	.word	0x20013e04
    11c0:	3b000000 	.word	0x3b000000
    11c4:	20000da4 	.word	0x20000da4
    11c8:	20013e24 	.word	0x20013e24
    11cc:	20013df4 	.word	0x20013df4
    11d0:	200004b1 	.word	0x200004b1
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <switchStringModel>:




void __ATTR_ITCMRAM switchStringModel(int which)
{
    11e0:	b510      	push	{r4, lr}
	if (which == 1)
    11e2:	2801      	cmp	r0, #1
    11e4:	d00d      	beq.n	1202 <switchStringModel+0x22>
			audioFrameFunction = audioFrameString1;
		}
	}


	else if (which == 2)
    11e6:	2802      	cmp	r0, #2
    11e8:	d02e      	beq.n	1248 <switchStringModel+0x68>
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
			knobFrozen[i] = 1;
		}
		audioFrameFunction = audioFrameString2;
	}
	presetReady = 1;
    11ea:	4b27      	ldr	r3, [pc, #156]	; (1288 <switchStringModel+0xa8>)
    11ec:	2201      	movs	r2, #1
    11ee:	601a      	str	r2, [r3, #0]
	diskBusy = 0;
    11f0:	4b26      	ldr	r3, [pc, #152]	; (128c <switchStringModel+0xac>)
    11f2:	2200      	movs	r2, #0
    11f4:	701a      	strb	r2, [r3, #0]
	currentActivePreset = voice;
    11f6:	4b26      	ldr	r3, [pc, #152]	; (1290 <switchStringModel+0xb0>)
    11f8:	681b      	ldr	r3, [r3, #0]
    11fa:	b2db      	uxtb	r3, r3
    11fc:	4a25      	ldr	r2, [pc, #148]	; (1294 <switchStringModel+0xb4>)
    11fe:	7013      	strb	r3, [r2, #0]

}
    1200:	bd10      	pop	{r4, pc}
		if (whichStringModelLoaded != String1Loaded)
    1202:	4b25      	ldr	r3, [pc, #148]	; (1298 <switchStringModel+0xb8>)
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	2b00      	cmp	r3, #0
    1208:	d0ef      	beq.n	11ea <switchStringModel+0xa>
			audioFreeString2();
    120a:	f003 f849 	bl	42a0 <audioFreeString2>
			audioInitString1();
    120e:	f002 fd07 	bl	3c20 <audioInitString1>
			for (int i = 0; i < 12; i++)
    1212:	2400      	movs	r4, #0
    1214:	2c0b      	cmp	r4, #11
    1216:	dc0e      	bgt.n	1236 <switchStringModel+0x56>
				tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    1218:	4b20      	ldr	r3, [pc, #128]	; (129c <switchStringModel+0xbc>)
    121a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    121e:	ed93 0a00 	vldr	s0, [r3]
    1222:	481f      	ldr	r0, [pc, #124]	; (12a0 <switchStringModel+0xc0>)
    1224:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1228:	f006 feba 	bl	7fa0 <__tExpSmooth_setValAndDest_veneer>
				knobFrozen[i] = 1;
    122c:	4b1d      	ldr	r3, [pc, #116]	; (12a4 <switchStringModel+0xc4>)
    122e:	2201      	movs	r2, #1
    1230:	551a      	strb	r2, [r3, r4]
			for (int i = 0; i < 12; i++)
    1232:	4414      	add	r4, r2
    1234:	e7ee      	b.n	1214 <switchStringModel+0x34>
			tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    1236:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 12a8 <switchStringModel+0xc8>
    123a:	481c      	ldr	r0, [pc, #112]	; (12ac <switchStringModel+0xcc>)
    123c:	f006 feb8 	bl	7fb0 <__tVZFilter_setFreq_veneer>
			audioFrameFunction = audioFrameString1;
    1240:	4b1b      	ldr	r3, [pc, #108]	; (12b0 <switchStringModel+0xd0>)
    1242:	4a1c      	ldr	r2, [pc, #112]	; (12b4 <switchStringModel+0xd4>)
    1244:	601a      	str	r2, [r3, #0]
    1246:	e7d0      	b.n	11ea <switchStringModel+0xa>
		if (whichStringModelLoaded != String2Loaded)
    1248:	4b13      	ldr	r3, [pc, #76]	; (1298 <switchStringModel+0xb8>)
    124a:	781b      	ldrb	r3, [r3, #0]
    124c:	2b01      	cmp	r3, #1
    124e:	d101      	bne.n	1254 <switchStringModel+0x74>
			for (int i = 0; i < 12; i++)
    1250:	2400      	movs	r4, #0
    1252:	e012      	b.n	127a <switchStringModel+0x9a>
			audioFreeString1();
    1254:	f002 fd34 	bl	3cc0 <audioFreeString1>
			audioInitString2();
    1258:	f002 ffe2 	bl	4220 <audioInitString2>
    125c:	e7f8      	b.n	1250 <switchStringModel+0x70>
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    125e:	4b16      	ldr	r3, [pc, #88]	; (12b8 <switchStringModel+0xd8>)
    1260:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1264:	ed93 0a00 	vldr	s0, [r3]
    1268:	480d      	ldr	r0, [pc, #52]	; (12a0 <switchStringModel+0xc0>)
    126a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    126e:	f006 fe97 	bl	7fa0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    1272:	4b0c      	ldr	r3, [pc, #48]	; (12a4 <switchStringModel+0xc4>)
    1274:	2201      	movs	r2, #1
    1276:	551a      	strb	r2, [r3, r4]
		for (int i = 0; i < 12; i++)
    1278:	4414      	add	r4, r2
    127a:	2c0b      	cmp	r4, #11
    127c:	ddef      	ble.n	125e <switchStringModel+0x7e>
		audioFrameFunction = audioFrameString2;
    127e:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <switchStringModel+0xd0>)
    1280:	4a0e      	ldr	r2, [pc, #56]	; (12bc <switchStringModel+0xdc>)
    1282:	601a      	str	r2, [r3, #0]
    1284:	e7b1      	b.n	11ea <switchStringModel+0xa>
    1286:	bf00      	nop
    1288:	20004f1c 	.word	0x20004f1c
    128c:	20013f10 	.word	0x20013f10
    1290:	20013e18 	.word	0x20013e18
    1294:	20000728 	.word	0x20000728
    1298:	20013e29 	.word	0x20013e29
    129c:	200004bc 	.word	0x200004bc
    12a0:	20004e28 	.word	0x20004e28
    12a4:	20004dec 	.word	0x20004dec
    12a8:	45504000 	.word	0x45504000
    12ac:	20004ec0 	.word	0x20004ec0
    12b0:	20000da0 	.word	0x20000da0
    12b4:	00004041 	.word	0x00004041
    12b8:	200004ec 	.word	0x200004ec
    12bc:	00004781 	.word	0x00004781

000012c0 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    12c0:	b508      	push	{r3, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(HALF_BUFFER_SIZE);
    12c2:	4b3f      	ldr	r3, [pc, #252]	; (13c0 <HAL_SAI_TxCpltCallback+0x100>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	2080      	movs	r0, #128	; 0x80
    12c8:	4798      	blx	r3
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    12ca:	4b3e      	ldr	r3, [pc, #248]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    12cc:	681a      	ldr	r2, [r3, #0]
    12ce:	4b3e      	ldr	r3, [pc, #248]	; (13c8 <HAL_SAI_TxCpltCallback+0x108>)
    12d0:	681b      	ldr	r3, [r3, #0]
    12d2:	429a      	cmp	r2, r3
    12d4:	d030      	beq.n	1338 <HAL_SAI_TxCpltCallback+0x78>
	{
		if (voice == 63)
    12d6:	4b3b      	ldr	r3, [pc, #236]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    12d8:	681b      	ldr	r3, [r3, #0]
    12da:	2b3f      	cmp	r3, #63	; 0x3f
    12dc:	d024      	beq.n	1328 <HAL_SAI_TxCpltCallback+0x68>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    12de:	4b39      	ldr	r3, [pc, #228]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    12e0:	681b      	ldr	r3, [r3, #0]
    12e2:	2b3e      	cmp	r3, #62	; 0x3e
    12e4:	d03f      	beq.n	1366 <HAL_SAI_TxCpltCallback+0xa6>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    12e6:	4b37      	ldr	r3, [pc, #220]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    12e8:	681b      	ldr	r3, [r3, #0]
    12ea:	2b3d      	cmp	r3, #61	; 0x3d
    12ec:	d045      	beq.n	137a <HAL_SAI_TxCpltCallback+0xba>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    12ee:	4b35      	ldr	r3, [pc, #212]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	2b3c      	cmp	r3, #60	; 0x3c
    12f4:	d052      	beq.n	139c <HAL_SAI_TxCpltCallback+0xdc>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    12f6:	4b32      	ldr	r3, [pc, #200]	; (13c0 <HAL_SAI_TxCpltCallback+0x100>)
    12f8:	4a34      	ldr	r2, [pc, #208]	; (13cc <HAL_SAI_TxCpltCallback+0x10c>)
    12fa:	601a      	str	r2, [r3, #0]
			presetWaitingToLoad = 1;
    12fc:	4b34      	ldr	r3, [pc, #208]	; (13d0 <HAL_SAI_TxCpltCallback+0x110>)
    12fe:	2201      	movs	r2, #1
    1300:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1302:	4b30      	ldr	r3, [pc, #192]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    1304:	681b      	ldr	r3, [r3, #0]
    1306:	b2db      	uxtb	r3, r3
    1308:	4a32      	ldr	r2, [pc, #200]	; (13d4 <HAL_SAI_TxCpltCallback+0x114>)
    130a:	7013      	strb	r3, [r2, #0]
			presetReady = 0;
    130c:	4b32      	ldr	r3, [pc, #200]	; (13d8 <HAL_SAI_TxCpltCallback+0x118>)
    130e:	2200      	movs	r2, #0
    1310:	601a      	str	r2, [r3, #0]
			if (prevVoice > 60)
    1312:	4b2d      	ldr	r3, [pc, #180]	; (13c8 <HAL_SAI_TxCpltCallback+0x108>)
    1314:	681b      	ldr	r3, [r3, #0]
    1316:	2b3c      	cmp	r3, #60	; 0x3c
    1318:	dd02      	ble.n	1320 <HAL_SAI_TxCpltCallback+0x60>
			{
				resetStringInputs = 1;
    131a:	4b30      	ldr	r3, [pc, #192]	; (13dc <HAL_SAI_TxCpltCallback+0x11c>)
    131c:	2201      	movs	r2, #1
    131e:	701a      	strb	r2, [r3, #0]
			}
			frameLoadOverCount = 0;
    1320:	4b2f      	ldr	r3, [pc, #188]	; (13e0 <HAL_SAI_TxCpltCallback+0x120>)
    1322:	2200      	movs	r2, #0
    1324:	601a      	str	r2, [r3, #0]
    1326:	e007      	b.n	1338 <HAL_SAI_TxCpltCallback+0x78>
			switchStrings = 1;
    1328:	2301      	movs	r3, #1
    132a:	4a2e      	ldr	r2, [pc, #184]	; (13e4 <HAL_SAI_TxCpltCallback+0x124>)
    132c:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    132e:	4a2e      	ldr	r2, [pc, #184]	; (13e8 <HAL_SAI_TxCpltCallback+0x128>)
    1330:	2100      	movs	r1, #0
    1332:	7011      	strb	r1, [r2, #0]
			resetStringInputs = 1;
    1334:	4a29      	ldr	r2, [pc, #164]	; (13dc <HAL_SAI_TxCpltCallback+0x11c>)
    1336:	7013      	strb	r3, [r2, #0]
		}
	}
	prevVoice = voice;
    1338:	4b22      	ldr	r3, [pc, #136]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    133a:	681a      	ldr	r2, [r3, #0]
    133c:	4b22      	ldr	r3, [pc, #136]	; (13c8 <HAL_SAI_TxCpltCallback+0x108>)
    133e:	601a      	str	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    1340:	4b2a      	ldr	r3, [pc, #168]	; (13ec <HAL_SAI_TxCpltCallback+0x12c>)
    1342:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    1346:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    134a:	f44f 7290 	mov.w	r2, #288	; 0x120
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    134e:	4928      	ldr	r1, [pc, #160]	; (13f0 <HAL_SAI_TxCpltCallback+0x130>)
    1350:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1354:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    1356:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    1358:	2a00      	cmp	r2, #0
    135a:	dcf8      	bgt.n	134e <HAL_SAI_TxCpltCallback+0x8e>
    135c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1360:	f3bf 8f6f 	isb	sy
}
    1364:	bd08      	pop	{r3, pc}
			switchStrings = 2;
    1366:	4b1f      	ldr	r3, [pc, #124]	; (13e4 <HAL_SAI_TxCpltCallback+0x124>)
    1368:	2202      	movs	r2, #2
    136a:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    136c:	4b1e      	ldr	r3, [pc, #120]	; (13e8 <HAL_SAI_TxCpltCallback+0x128>)
    136e:	2200      	movs	r2, #0
    1370:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    1372:	4b1a      	ldr	r3, [pc, #104]	; (13dc <HAL_SAI_TxCpltCallback+0x11c>)
    1374:	2201      	movs	r2, #1
    1376:	701a      	strb	r2, [r3, #0]
    1378:	e7de      	b.n	1338 <HAL_SAI_TxCpltCallback+0x78>
			audioFrameFunction = audioFrameAdditive;
    137a:	4b11      	ldr	r3, [pc, #68]	; (13c0 <HAL_SAI_TxCpltCallback+0x100>)
    137c:	4a1d      	ldr	r2, [pc, #116]	; (13f4 <HAL_SAI_TxCpltCallback+0x134>)
    137e:	601a      	str	r2, [r3, #0]
			currentActivePreset = voice;
    1380:	4b10      	ldr	r3, [pc, #64]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	b2db      	uxtb	r3, r3
    1386:	4a1c      	ldr	r2, [pc, #112]	; (13f8 <HAL_SAI_TxCpltCallback+0x138>)
    1388:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    138a:	4b17      	ldr	r3, [pc, #92]	; (13e8 <HAL_SAI_TxCpltCallback+0x128>)
    138c:	2200      	movs	r2, #0
    138e:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1390:	2301      	movs	r3, #1
    1392:	4a11      	ldr	r2, [pc, #68]	; (13d8 <HAL_SAI_TxCpltCallback+0x118>)
    1394:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    1396:	4a11      	ldr	r2, [pc, #68]	; (13dc <HAL_SAI_TxCpltCallback+0x11c>)
    1398:	7013      	strb	r3, [r2, #0]
    139a:	e7cd      	b.n	1338 <HAL_SAI_TxCpltCallback+0x78>
			audioFrameFunction = audioFrameVocal;
    139c:	4b08      	ldr	r3, [pc, #32]	; (13c0 <HAL_SAI_TxCpltCallback+0x100>)
    139e:	4a17      	ldr	r2, [pc, #92]	; (13fc <HAL_SAI_TxCpltCallback+0x13c>)
    13a0:	601a      	str	r2, [r3, #0]
			currentActivePreset = voice;
    13a2:	4b08      	ldr	r3, [pc, #32]	; (13c4 <HAL_SAI_TxCpltCallback+0x104>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	b2db      	uxtb	r3, r3
    13a8:	4a13      	ldr	r2, [pc, #76]	; (13f8 <HAL_SAI_TxCpltCallback+0x138>)
    13aa:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <HAL_SAI_TxCpltCallback+0x128>)
    13ae:	2200      	movs	r2, #0
    13b0:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    13b2:	2301      	movs	r3, #1
    13b4:	4a08      	ldr	r2, [pc, #32]	; (13d8 <HAL_SAI_TxCpltCallback+0x118>)
    13b6:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    13b8:	4a08      	ldr	r2, [pc, #32]	; (13dc <HAL_SAI_TxCpltCallback+0x11c>)
    13ba:	7013      	strb	r3, [r2, #0]
    13bc:	e7bc      	b.n	1338 <HAL_SAI_TxCpltCallback+0x78>
    13be:	bf00      	nop
    13c0:	20000da0 	.word	0x20000da0
    13c4:	20013e18 	.word	0x20013e18
    13c8:	200004b8 	.word	0x200004b8
    13cc:	000075e1 	.word	0x000075e1
    13d0:	20019b90 	.word	0x20019b90
    13d4:	20019b8e 	.word	0x20019b8e
    13d8:	20004f1c 	.word	0x20004f1c
    13dc:	20005340 	.word	0x20005340
    13e0:	20004de0 	.word	0x20004de0
    13e4:	20013e0c 	.word	0x20013e0c
    13e8:	20013f10 	.word	0x20013f10
    13ec:	30000000 	.word	0x30000000
    13f0:	e000ed00 	.word	0xe000ed00
    13f4:	00000981 	.word	0x00000981
    13f8:	20000728 	.word	0x20000728
    13fc:	00007ac1 	.word	0x00007ac1

00001400 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    1400:	b508      	push	{r3, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(0);
    1402:	4b3f      	ldr	r3, [pc, #252]	; (1500 <HAL_SAI_TxHalfCpltCallback+0x100>)
    1404:	681b      	ldr	r3, [r3, #0]
    1406:	2000      	movs	r0, #0
    1408:	4798      	blx	r3
		{
			audioOutBuffer[i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    140a:	4b3e      	ldr	r3, [pc, #248]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    140c:	681a      	ldr	r2, [r3, #0]
    140e:	4b3e      	ldr	r3, [pc, #248]	; (1508 <HAL_SAI_TxHalfCpltCallback+0x108>)
    1410:	681b      	ldr	r3, [r3, #0]
    1412:	429a      	cmp	r2, r3
    1414:	d030      	beq.n	1478 <HAL_SAI_TxHalfCpltCallback+0x78>
	{
		if (voice == 63)
    1416:	4b3b      	ldr	r3, [pc, #236]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    1418:	681b      	ldr	r3, [r3, #0]
    141a:	2b3f      	cmp	r3, #63	; 0x3f
    141c:	d024      	beq.n	1468 <HAL_SAI_TxHalfCpltCallback+0x68>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    141e:	4b39      	ldr	r3, [pc, #228]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	2b3e      	cmp	r3, #62	; 0x3e
    1424:	d03f      	beq.n	14a6 <HAL_SAI_TxHalfCpltCallback+0xa6>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    1426:	4b37      	ldr	r3, [pc, #220]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    1428:	681b      	ldr	r3, [r3, #0]
    142a:	2b3d      	cmp	r3, #61	; 0x3d
    142c:	d045      	beq.n	14ba <HAL_SAI_TxHalfCpltCallback+0xba>
			currentActivePreset = voice;
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    142e:	4b35      	ldr	r3, [pc, #212]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    1430:	681b      	ldr	r3, [r3, #0]
    1432:	2b3c      	cmp	r3, #60	; 0x3c
    1434:	d052      	beq.n	14dc <HAL_SAI_TxHalfCpltCallback+0xdc>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    1436:	4b32      	ldr	r3, [pc, #200]	; (1500 <HAL_SAI_TxHalfCpltCallback+0x100>)
    1438:	4a34      	ldr	r2, [pc, #208]	; (150c <HAL_SAI_TxHalfCpltCallback+0x10c>)
    143a:	601a      	str	r2, [r3, #0]
			presetWaitingToLoad = 1;
    143c:	4b34      	ldr	r3, [pc, #208]	; (1510 <HAL_SAI_TxHalfCpltCallback+0x110>)
    143e:	2201      	movs	r2, #1
    1440:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1442:	4b30      	ldr	r3, [pc, #192]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	b2db      	uxtb	r3, r3
    1448:	4a32      	ldr	r2, [pc, #200]	; (1514 <HAL_SAI_TxHalfCpltCallback+0x114>)
    144a:	7013      	strb	r3, [r2, #0]
			presetReady = 0;
    144c:	4b32      	ldr	r3, [pc, #200]	; (1518 <HAL_SAI_TxHalfCpltCallback+0x118>)
    144e:	2200      	movs	r2, #0
    1450:	601a      	str	r2, [r3, #0]
			if (prevVoice > 60)
    1452:	4b2d      	ldr	r3, [pc, #180]	; (1508 <HAL_SAI_TxHalfCpltCallback+0x108>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	2b3c      	cmp	r3, #60	; 0x3c
    1458:	dd02      	ble.n	1460 <HAL_SAI_TxHalfCpltCallback+0x60>
			{
				resetStringInputs = 1;
    145a:	4b30      	ldr	r3, [pc, #192]	; (151c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    145c:	2201      	movs	r2, #1
    145e:	701a      	strb	r2, [r3, #0]
			}
			frameLoadOverCount = 0;
    1460:	4b2f      	ldr	r3, [pc, #188]	; (1520 <HAL_SAI_TxHalfCpltCallback+0x120>)
    1462:	2200      	movs	r2, #0
    1464:	601a      	str	r2, [r3, #0]
    1466:	e007      	b.n	1478 <HAL_SAI_TxHalfCpltCallback+0x78>
			switchStrings = 1;
    1468:	2301      	movs	r3, #1
    146a:	4a2e      	ldr	r2, [pc, #184]	; (1524 <HAL_SAI_TxHalfCpltCallback+0x124>)
    146c:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    146e:	4a2e      	ldr	r2, [pc, #184]	; (1528 <HAL_SAI_TxHalfCpltCallback+0x128>)
    1470:	2100      	movs	r1, #0
    1472:	7011      	strb	r1, [r2, #0]
			resetStringInputs = 1;
    1474:	4a29      	ldr	r2, [pc, #164]	; (151c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    1476:	7013      	strb	r3, [r2, #0]
		}
	}
	prevVoice = voice;
    1478:	4b22      	ldr	r3, [pc, #136]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    147a:	681a      	ldr	r2, [r3, #0]
    147c:	4b22      	ldr	r3, [pc, #136]	; (1508 <HAL_SAI_TxHalfCpltCallback+0x108>)
    147e:	601a      	str	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    1480:	4b2a      	ldr	r3, [pc, #168]	; (152c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    1482:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    1486:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    148a:	f44f 7290 	mov.w	r2, #288	; 0x120
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    148e:	4928      	ldr	r1, [pc, #160]	; (1530 <HAL_SAI_TxHalfCpltCallback+0x130>)
    1490:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1494:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    1496:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    1498:	2a00      	cmp	r2, #0
    149a:	dcf8      	bgt.n	148e <HAL_SAI_TxHalfCpltCallback+0x8e>
    149c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14a0:	f3bf 8f6f 	isb	sy
}
    14a4:	bd08      	pop	{r3, pc}
			switchStrings = 2;
    14a6:	4b1f      	ldr	r3, [pc, #124]	; (1524 <HAL_SAI_TxHalfCpltCallback+0x124>)
    14a8:	2202      	movs	r2, #2
    14aa:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    14ac:	4b1e      	ldr	r3, [pc, #120]	; (1528 <HAL_SAI_TxHalfCpltCallback+0x128>)
    14ae:	2200      	movs	r2, #0
    14b0:	701a      	strb	r2, [r3, #0]
			resetStringInputs = 1;
    14b2:	4b1a      	ldr	r3, [pc, #104]	; (151c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    14b4:	2201      	movs	r2, #1
    14b6:	701a      	strb	r2, [r3, #0]
    14b8:	e7de      	b.n	1478 <HAL_SAI_TxHalfCpltCallback+0x78>
			audioFrameFunction = audioFrameAdditive;
    14ba:	4b11      	ldr	r3, [pc, #68]	; (1500 <HAL_SAI_TxHalfCpltCallback+0x100>)
    14bc:	4a1d      	ldr	r2, [pc, #116]	; (1534 <HAL_SAI_TxHalfCpltCallback+0x134>)
    14be:	601a      	str	r2, [r3, #0]
			currentActivePreset = voice;
    14c0:	4b10      	ldr	r3, [pc, #64]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    14c2:	681b      	ldr	r3, [r3, #0]
    14c4:	b2db      	uxtb	r3, r3
    14c6:	4a1c      	ldr	r2, [pc, #112]	; (1538 <HAL_SAI_TxHalfCpltCallback+0x138>)
    14c8:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    14ca:	4b17      	ldr	r3, [pc, #92]	; (1528 <HAL_SAI_TxHalfCpltCallback+0x128>)
    14cc:	2200      	movs	r2, #0
    14ce:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    14d0:	2301      	movs	r3, #1
    14d2:	4a11      	ldr	r2, [pc, #68]	; (1518 <HAL_SAI_TxHalfCpltCallback+0x118>)
    14d4:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    14d6:	4a11      	ldr	r2, [pc, #68]	; (151c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    14d8:	7013      	strb	r3, [r2, #0]
    14da:	e7cd      	b.n	1478 <HAL_SAI_TxHalfCpltCallback+0x78>
			audioFrameFunction = audioFrameVocal;
    14dc:	4b08      	ldr	r3, [pc, #32]	; (1500 <HAL_SAI_TxHalfCpltCallback+0x100>)
    14de:	4a17      	ldr	r2, [pc, #92]	; (153c <HAL_SAI_TxHalfCpltCallback+0x13c>)
    14e0:	601a      	str	r2, [r3, #0]
			currentActivePreset = voice;
    14e2:	4b08      	ldr	r3, [pc, #32]	; (1504 <HAL_SAI_TxHalfCpltCallback+0x104>)
    14e4:	681b      	ldr	r3, [r3, #0]
    14e6:	b2db      	uxtb	r3, r3
    14e8:	4a13      	ldr	r2, [pc, #76]	; (1538 <HAL_SAI_TxHalfCpltCallback+0x138>)
    14ea:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    14ec:	4b0e      	ldr	r3, [pc, #56]	; (1528 <HAL_SAI_TxHalfCpltCallback+0x128>)
    14ee:	2200      	movs	r2, #0
    14f0:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    14f2:	2301      	movs	r3, #1
    14f4:	4a08      	ldr	r2, [pc, #32]	; (1518 <HAL_SAI_TxHalfCpltCallback+0x118>)
    14f6:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    14f8:	4a08      	ldr	r2, [pc, #32]	; (151c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    14fa:	7013      	strb	r3, [r2, #0]
    14fc:	e7bc      	b.n	1478 <HAL_SAI_TxHalfCpltCallback+0x78>
    14fe:	bf00      	nop
    1500:	20000da0 	.word	0x20000da0
    1504:	20013e18 	.word	0x20013e18
    1508:	200004b8 	.word	0x200004b8
    150c:	000075e1 	.word	0x000075e1
    1510:	20019b90 	.word	0x20019b90
    1514:	20019b8e 	.word	0x20019b8e
    1518:	20004f1c 	.word	0x20004f1c
    151c:	20005340 	.word	0x20005340
    1520:	20004de0 	.word	0x20004de0
    1524:	20013e0c 	.word	0x20013e0c
    1528:	20013f10 	.word	0x20013f10
    152c:	30000000 	.word	0x30000000
    1530:	e000ed00 	.word	0xe000ed00
    1534:	00000981 	.word	0x00000981
    1538:	20000728 	.word	0x20000728
    153c:	00007ac1 	.word	0x00007ac1

00001540 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    1540:	4770      	bx	lr
    1542:	bf00      	nop
	...

00001560 <scaleDefault>:
}
    1560:	4770      	bx	lr
    1562:	bf00      	nop
    1564:	f3af 8000 	nop.w
    1568:	f3af 8000 	nop.w
    156c:	f3af 8000 	nop.w
    1570:	f3af 8000 	nop.w
    1574:	f3af 8000 	nop.w
    1578:	f3af 8000 	nop.w
    157c:	f3af 8000 	nop.w

00001580 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1580:	ee30 0a00 	vadd.f32	s0, s0, s0
}
    1584:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1588:	ee30 0a67 	vsub.f32	s0, s0, s15
    158c:	4770      	bx	lr
    158e:	bf00      	nop
    1590:	f3af 8000 	nop.w
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    15a0:	eddf 7a04 	vldr	s15, [pc, #16]	; 15b4 <scaleOscFine+0x14>
    15a4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    15a8:	eddf 7a03 	vldr	s15, [pc, #12]	; 15b8 <scaleOscFine+0x18>
    15ac:	ee30 0a67 	vsub.f32	s0, s0, s15
    15b0:	4770      	bx	lr
    15b2:	bf00      	nop
    15b4:	43480000 	.word	0x43480000
    15b8:	42c80000 	.word	0x42c80000
    15bc:	f3af 8000 	nop.w

000015c0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    15c0:	eddf 7a04 	vldr	s15, [pc, #16]	; 15d4 <scaleOscFreq+0x14>
    15c4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    15c8:	eddf 7a03 	vldr	s15, [pc, #12]	; 15d8 <scaleOscFreq+0x18>
    15cc:	ee30 0a67 	vsub.f32	s0, s0, s15
    15d0:	4770      	bx	lr
    15d2:	bf00      	nop
    15d4:	457a0000 	.word	0x457a0000
    15d8:	44fa0000 	.word	0x44fa0000
    15dc:	f3af 8000 	nop.w

000015e0 <scaleFilterCutoff>:
}
    15e0:	eddf 7a02 	vldr	s15, [pc, #8]	; 15ec <scaleFilterCutoff+0xc>
    15e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    15e8:	4770      	bx	lr
    15ea:	bf00      	nop
    15ec:	42fe0000 	.word	0x42fe0000
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    1600:	eddf 7a04 	vldr	s15, [pc, #16]	; 1614 <scaleFinalLowpass+0x14>
    1604:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1608:	eddf 7a03 	vldr	s15, [pc, #12]	; 1618 <scaleFinalLowpass+0x18>
    160c:	ee30 0a27 	vadd.f32	s0, s0, s15
    1610:	4770      	bx	lr
    1612:	bf00      	nop
    1614:	428c0000 	.word	0x428c0000
    1618:	42680000 	.word	0x42680000
    161c:	f3af 8000 	nop.w

00001620 <blankFunction>:
}
    1620:	4770      	bx	lr
    1622:	bf00      	nop
    1624:	f3af 8000 	nop.w
    1628:	f3af 8000 	nop.w
    162c:	f3af 8000 	nop.w
    1630:	f3af 8000 	nop.w
    1634:	f3af 8000 	nop.w
    1638:	f3af 8000 	nop.w
    163c:	f3af 8000 	nop.w

00001640 <scaleTranspose>:
{
    1640:	b508      	push	{r3, lr}
    1642:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1646:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    164a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1664 <scaleTranspose+0x24>
    164e:	f006 fc3f 	bl	7ed0 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1652:	eddf 7a05 	vldr	s15, [pc, #20]	; 1668 <scaleTranspose+0x28>
    1656:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    165a:	eddf 7a04 	vldr	s15, [pc, #16]	; 166c <scaleTranspose+0x2c>
    165e:	ee30 0a67 	vsub.f32	s0, s0, s15
    1662:	bd08      	pop	{r3, pc}
    1664:	00000000 	.word	0x00000000
    1668:	42c00000 	.word	0x42c00000
    166c:	42400000 	.word	0x42400000
    1670:	f3af 8000 	nop.w
    1674:	f3af 8000 	nop.w
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <scalePitchBend>:
{
    1680:	b508      	push	{r3, lr}
    1682:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1686:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    168a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 169c <scalePitchBend+0x1c>
    168e:	f006 fc1f 	bl	7ed0 <__LEAF_clip_veneer>
}
    1692:	eddf 7a03 	vldr	s15, [pc, #12]	; 16a0 <scalePitchBend+0x20>
    1696:	ee20 0a27 	vmul.f32	s0, s0, s15
    169a:	bd08      	pop	{r3, pc}
    169c:	00000000 	.word	0x00000000
    16a0:	42400000 	.word	0x42400000
    16a4:	f3af 8000 	nop.w
    16a8:	f3af 8000 	nop.w
    16ac:	f3af 8000 	nop.w
    16b0:	f3af 8000 	nop.w
    16b4:	f3af 8000 	nop.w
    16b8:	f3af 8000 	nop.w
    16bc:	f3af 8000 	nop.w

000016c0 <scaleFilterResonance>:
{
    16c0:	b510      	push	{r4, lr}
    16c2:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    16c6:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 1730 <scaleFilterResonance+0x70>
    16ca:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    16ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    16d2:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    16d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    16da:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    16de:	1c63      	adds	r3, r4, #1
    16e0:	ee00 3a90 	vmov	s1, r3
    16e4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    16e8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 1734 <scaleFilterResonance+0x74>
    16ec:	f006 fbf0 	bl	7ed0 <__LEAF_clip_veneer>
    16f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    16f4:	4b10      	ldr	r3, [pc, #64]	; (1738 <scaleFilterResonance+0x78>)
    16f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    16fa:	edd4 0a00 	vldr	s1, [r4]
    16fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1702:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1706:	ee60 0aa7 	vmul.f32	s1, s1, s15
    170a:	ee10 2a10 	vmov	r2, s0
    170e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1712:	edd3 7a00 	vldr	s15, [r3]
    1716:	ee67 7a88 	vmul.f32	s15, s15, s16
    171a:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    171e:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1722:	ed9f 0a06 	vldr	s0, [pc, #24]	; 173c <scaleFilterResonance+0x7c>
    1726:	f006 fbd3 	bl	7ed0 <__LEAF_clip_veneer>
}
    172a:	ecbd 8b02 	vpop	{d8}
    172e:	bd10      	pop	{r4, pc}
    1730:	44ffe000 	.word	0x44ffe000
    1734:	00000000 	.word	0x00000000
    1738:	20019fac 	.word	0x20019fac
    173c:	3dcccccd 	.word	0x3dcccccd

00001740 <scaleEnvTimes>:
{
    1740:	b510      	push	{r4, lr}
    1742:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    1746:	ed9f 1a17 	vldr	s2, [pc, #92]	; 17a4 <scaleEnvTimes+0x64>
    174a:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    174e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1752:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1756:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    175a:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    175e:	1c63      	adds	r3, r4, #1
    1760:	ee00 3a90 	vmov	s1, r3
    1764:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1768:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 17a8 <scaleEnvTimes+0x68>
    176c:	f006 fbb0 	bl	7ed0 <__LEAF_clip_veneer>
    1770:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1774:	4b0d      	ldr	r3, [pc, #52]	; (17ac <scaleEnvTimes+0x6c>)
    1776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    177a:	ed94 7a00 	vldr	s14, [r4]
    177e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1782:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1786:	ee27 7a27 	vmul.f32	s14, s14, s15
    178a:	ee10 2a10 	vmov	r2, s0
    178e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1792:	edd3 7a00 	vldr	s15, [r3]
    1796:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    179a:	ee37 0a27 	vadd.f32	s0, s14, s15
    179e:	ecbd 8b02 	vpop	{d8}
    17a2:	bd10      	pop	{r4, pc}
    17a4:	44ffe000 	.word	0x44ffe000
    17a8:	00000000 	.word	0x00000000
    17ac:	20013f68 	.word	0x20013f68
    17b0:	f3af 8000 	nop.w
    17b4:	f3af 8000 	nop.w
    17b8:	f3af 8000 	nop.w
    17bc:	f3af 8000 	nop.w

000017c0 <scaleLFORates>:
{
    17c0:	b510      	push	{r4, lr}
    17c2:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    17c6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1824 <scaleLFORates+0x64>
    17ca:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    17ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    17d2:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    17d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    17da:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    17de:	1c63      	adds	r3, r4, #1
    17e0:	ee00 3a90 	vmov	s1, r3
    17e4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    17e8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 1828 <scaleLFORates+0x68>
    17ec:	f006 fb70 	bl	7ed0 <__LEAF_clip_veneer>
    17f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    17f4:	4b0d      	ldr	r3, [pc, #52]	; (182c <scaleLFORates+0x6c>)
    17f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    17fa:	ed94 7a00 	vldr	s14, [r4]
    17fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1802:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1806:	ee27 7a27 	vmul.f32	s14, s14, s15
    180a:	ee10 2a10 	vmov	r2, s0
    180e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1812:	edd3 7a00 	vldr	s15, [r3]
    1816:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    181a:	ee37 0a27 	vadd.f32	s0, s14, s15
    181e:	ecbd 8b02 	vpop	{d8}
    1822:	bd10      	pop	{r4, pc}
    1824:	44ffe000 	.word	0x44ffe000
    1828:	00000000 	.word	0x00000000
    182c:	20016094 	.word	0x20016094
    1830:	f3af 8000 	nop.w
    1834:	f3af 8000 	nop.w
    1838:	f3af 8000 	nop.w
    183c:	f3af 8000 	nop.w

00001840 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    1840:	b500      	push	{lr}
    1842:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    1844:	a901      	add	r1, sp, #4
    1846:	4807      	ldr	r0, [pc, #28]	; (1864 <randomNumber+0x24>)
    1848:	f006 fa32 	bl	7cb0 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    184c:	eddd 7a01 	vldr	s15, [sp, #4]
    1850:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    1854:	ed9f 0a04 	vldr	s0, [pc, #16]	; 1868 <randomNumber+0x28>
    1858:	ee27 0a80 	vmul.f32	s0, s15, s0
    185c:	b003      	add	sp, #12
    185e:	f85d fb04 	ldr.w	pc, [sp], #4
    1862:	bf00      	nop
    1864:	2001c04c 	.word	0x2001c04c
    1868:	2f80000d 	.word	0x2f80000d
    186c:	f3af 8000 	nop.w
    1870:	f3af 8000 	nop.w
    1874:	f3af 8000 	nop.w
    1878:	f3af 8000 	nop.w
    187c:	f3af 8000 	nop.w

00001880 <scaleTwo>:
}
    1880:	ee30 0a00 	vadd.f32	s0, s0, s0
    1884:	4770      	bx	lr
    1886:	bf00      	nop
    1888:	f3af 8000 	nop.w
    188c:	f3af 8000 	nop.w
    1890:	f3af 8000 	nop.w
    1894:	f3af 8000 	nop.w
    1898:	f3af 8000 	nop.w
    189c:	f3af 8000 	nop.w

000018a0 <parsePreset>:
{
    18a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18a4:	b087      	sub	sp, #28
    18a6:	460c      	mov	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
    18a8:	b672      	cpsid	i
	 presetReady = 0;
    18aa:	2300      	movs	r3, #0
    18ac:	4a8c      	ldr	r2, [pc, #560]	; (1ae0 <parsePreset+0x240>)
    18ae:	6013      	str	r3, [r2, #0]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    18b0:	e004      	b.n	18bc <parsePreset+0x1c>
		 audioOutBuffer[i] = 0;
    18b2:	4a8c      	ldr	r2, [pc, #560]	; (1ae4 <parsePreset+0x244>)
    18b4:	2100      	movs	r1, #0
    18b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    18ba:	3301      	adds	r3, #1
    18bc:	2bff      	cmp	r3, #255	; 0xff
    18be:	ddf8      	ble.n	18b2 <parsePreset+0x12>
	audioMasterLevel = 0.0f;
    18c0:	4b89      	ldr	r3, [pc, #548]	; (1ae8 <parsePreset+0x248>)
    18c2:	2200      	movs	r2, #0
    18c4:	601a      	str	r2, [r3, #0]
	if (buffer[bufferIndex] == 17)
    18c6:	4b89      	ldr	r3, [pc, #548]	; (1aec <parsePreset+0x24c>)
    18c8:	781b      	ldrb	r3, [r3, #0]
    18ca:	2b11      	cmp	r3, #17
    18cc:	d003      	beq.n	18d6 <parsePreset+0x36>
	uint16_t bufferIndex = 0;
    18ce:	2300      	movs	r3, #0
	uint16_t presetVersionNumber = 0;
    18d0:	469b      	mov	fp, r3
	for (int i = 0; i < 14; i++)
    18d2:	2200      	movs	r2, #0
    18d4:	e01d      	b.n	1912 <parsePreset+0x72>
		if (buffer[bufferIndex + 1] == 18)
    18d6:	4b85      	ldr	r3, [pc, #532]	; (1aec <parsePreset+0x24c>)
    18d8:	785b      	ldrb	r3, [r3, #1]
    18da:	2b12      	cmp	r3, #18
    18dc:	d003      	beq.n	18e6 <parsePreset+0x46>
		bufferIndex = 4;
    18de:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    18e0:	f04f 0b00 	mov.w	fp, #0
    18e4:	e7f5      	b.n	18d2 <parsePreset+0x32>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    18e6:	4b81      	ldr	r3, [pc, #516]	; (1aec <parsePreset+0x24c>)
    18e8:	789a      	ldrb	r2, [r3, #2]
    18ea:	78db      	ldrb	r3, [r3, #3]
    18ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    18f0:	fa1f fb83 	uxth.w	fp, r3
		bufferIndex = 4;
    18f4:	2304      	movs	r3, #4
    18f6:	e7ec      	b.n	18d2 <parsePreset+0x32>
		presetName[i] = buffer[bufferIndex];
    18f8:	497c      	ldr	r1, [pc, #496]	; (1aec <parsePreset+0x24c>)
    18fa:	5cce      	ldrb	r6, [r1, r3]
    18fc:	497c      	ldr	r1, [pc, #496]	; (1af0 <parsePreset+0x250>)
    18fe:	548e      	strb	r6, [r1, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1900:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    1904:	497b      	ldr	r1, [pc, #492]	; (1af4 <parsePreset+0x254>)
    1906:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    190a:	548e      	strb	r6, [r1, r2]
		bufferIndex++;
    190c:	3301      	adds	r3, #1
    190e:	b29b      	uxth	r3, r3
	for (int i = 0; i < 14; i++)
    1910:	3201      	adds	r2, #1
    1912:	2a0d      	cmp	r2, #13
    1914:	ddf0      	ble.n	18f8 <parsePreset+0x58>
	for (int j = 0; j < 8; j++)
    1916:	2600      	movs	r6, #0
    1918:	e000      	b.n	191c <parsePreset+0x7c>
    191a:	3601      	adds	r6, #1
    191c:	2e07      	cmp	r6, #7
    191e:	dc12      	bgt.n	1946 <parsePreset+0xa6>
		for (int k = 0; k < 9; k++)
    1920:	2500      	movs	r5, #0
    1922:	2d08      	cmp	r5, #8
    1924:	dcf9      	bgt.n	191a <parsePreset+0x7a>
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1926:	4a71      	ldr	r2, [pc, #452]	; (1aec <parsePreset+0x24c>)
    1928:	5cd7      	ldrb	r7, [r2, r3]
    192a:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    192e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
    1932:	00d2      	lsls	r2, r2, #3
    1934:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1938:	496f      	ldr	r1, [pc, #444]	; (1af8 <parsePreset+0x258>)
    193a:	440a      	add	r2, r1
    193c:	5557      	strb	r7, [r2, r5]
			bufferIndex++;
    193e:	3301      	adds	r3, #1
    1940:	b29b      	uxth	r3, r3
		for (int k = 0; k < 9; k++)
    1942:	3501      	adds	r5, #1
    1944:	e7ed      	b.n	1922 <parsePreset+0x82>
	for (int j = 0; j < 4; j++)
    1946:	2700      	movs	r7, #0
    1948:	e013      	b.n	1972 <parsePreset+0xd2>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    194a:	f107 0208 	add.w	r2, r7, #8
    194e:	4967      	ldr	r1, [pc, #412]	; (1aec <parsePreset+0x24c>)
    1950:	5cce      	ldrb	r6, [r1, r3]
    1952:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1956:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
    195a:	00c9      	lsls	r1, r1, #3
    195c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1960:	4965      	ldr	r1, [pc, #404]	; (1af8 <parsePreset+0x258>)
    1962:	440a      	add	r2, r1
    1964:	5556      	strb	r6, [r2, r5]
			bufferIndex++;
    1966:	3301      	adds	r3, #1
    1968:	b29b      	uxth	r3, r3
		for (int k = 0; k < 10; k++)
    196a:	3501      	adds	r5, #1
    196c:	2d09      	cmp	r5, #9
    196e:	ddec      	ble.n	194a <parsePreset+0xaa>
	for (int j = 0; j < 4; j++)
    1970:	3701      	adds	r7, #1
    1972:	2f03      	cmp	r7, #3
    1974:	dc01      	bgt.n	197a <parsePreset+0xda>
		for (int k = 0; k < 10; k++)
    1976:	2500      	movs	r5, #0
    1978:	e7f8      	b.n	196c <parsePreset+0xcc>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    197a:	4a5c      	ldr	r2, [pc, #368]	; (1aec <parsePreset+0x24c>)
    197c:	5cd5      	ldrb	r5, [r2, r3]
    197e:	1c59      	adds	r1, r3, #1
    1980:	5c51      	ldrb	r1, [r2, r1]
    1982:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1986:	b289      	uxth	r1, r1
	if (paramCount > size)
    1988:	460a      	mov	r2, r1
    198a:	4281      	cmp	r1, r0
    198c:	dc18      	bgt.n	19c0 <parsePreset+0x120>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    198e:	eb03 0641 	add.w	r6, r3, r1, lsl #1
    1992:	1cb7      	adds	r7, r6, #2
    1994:	4d55      	ldr	r5, [pc, #340]	; (1aec <parsePreset+0x24c>)
    1996:	5def      	ldrb	r7, [r5, r7]
    1998:	f106 0c03 	add.w	ip, r6, #3
    199c:	f815 500c 	ldrb.w	r5, [r5, ip]
    19a0:	eb05 2507 	add.w	r5, r5, r7, lsl #8
    19a4:	b2ad      	uxth	r5, r5
	if (paramEndCheck != 0xefef)
    19a6:	f64e 77ef 	movw	r7, #61423	; 0xefef
    19aa:	42bd      	cmp	r5, r7
    19ac:	d013      	beq.n	19d6 <parsePreset+0x136>
		audioMasterLevel = 1.0f;
    19ae:	4b4e      	ldr	r3, [pc, #312]	; (1ae8 <parsePreset+0x248>)
    19b0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    19b4:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    19b6:	4b51      	ldr	r3, [pc, #324]	; (1afc <parsePreset+0x25c>)
    19b8:	2200      	movs	r2, #0
    19ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    19bc:	b662      	cpsie	i
		return;
    19be:	e007      	b.n	19d0 <parsePreset+0x130>
		audioMasterLevel = 1.0f;
    19c0:	4b49      	ldr	r3, [pc, #292]	; (1ae8 <parsePreset+0x248>)
    19c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    19c6:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    19c8:	4b4c      	ldr	r3, [pc, #304]	; (1afc <parsePreset+0x25c>)
    19ca:	2200      	movs	r2, #0
    19cc:	601a      	str	r2, [r3, #0]
    19ce:	b662      	cpsie	i
}
    19d0:	b007      	add	sp, #28
    19d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    19d6:	1d37      	adds	r7, r6, #4
    19d8:	4d44      	ldr	r5, [pc, #272]	; (1aec <parsePreset+0x24c>)
    19da:	5def      	ldrb	r7, [r5, r7]
    19dc:	3605      	adds	r6, #5
    19de:	5dad      	ldrb	r5, [r5, r6]
    19e0:	eb05 2507 	add.w	r5, r5, r7, lsl #8
    19e4:	b2ad      	uxth	r5, r5
    19e6:	9504      	str	r5, [sp, #16]
	if (presetVersionNumber == 0)
    19e8:	f1bb 0f00 	cmp.w	fp, #0
    19ec:	d11e      	bne.n	1a2c <parsePreset+0x18c>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    19ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    19f2:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    19f6:	fa13 f181 	uxtah	r1, r3, r1
    19fa:	b289      	uxth	r1, r1
    19fc:	3106      	adds	r1, #6
    19fe:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    1a00:	4281      	cmp	r1, r0
    1a02:	dc1d      	bgt.n	1a40 <parsePreset+0x1a0>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    1a04:	4839      	ldr	r0, [pc, #228]	; (1aec <parsePreset+0x24c>)
    1a06:	5c45      	ldrb	r5, [r0, r1]
    1a08:	3101      	adds	r1, #1
    1a0a:	5c41      	ldrb	r1, [r0, r1]
    1a0c:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1a10:	b289      	uxth	r1, r1
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    1a12:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    1a16:	4281      	cmp	r1, r0
    1a18:	d01b      	beq.n	1a52 <parsePreset+0x1b2>
		audioMasterLevel = 1.0f;
    1a1a:	4b33      	ldr	r3, [pc, #204]	; (1ae8 <parsePreset+0x248>)
    1a1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1a20:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1a22:	4b36      	ldr	r3, [pc, #216]	; (1afc <parsePreset+0x25c>)
    1a24:	2200      	movs	r2, #0
    1a26:	601a      	str	r2, [r3, #0]
    1a28:	b662      	cpsie	i
		return;
    1a2a:	e7d1      	b.n	19d0 <parsePreset+0x130>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    1a2c:	9d04      	ldr	r5, [sp, #16]
    1a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a32:	4429      	add	r1, r5
    1a34:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    1a38:	b289      	uxth	r1, r1
    1a3a:	3106      	adds	r1, #6
    1a3c:	b289      	uxth	r1, r1
    1a3e:	e7df      	b.n	1a00 <parsePreset+0x160>
		audioMasterLevel = 1.0f;
    1a40:	4b29      	ldr	r3, [pc, #164]	; (1ae8 <parsePreset+0x248>)
    1a42:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1a46:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1a48:	4b2c      	ldr	r3, [pc, #176]	; (1afc <parsePreset+0x25c>)
    1a4a:	2200      	movs	r2, #0
    1a4c:	601a      	str	r2, [r3, #0]
    1a4e:	b662      	cpsie	i
		return;
    1a50:	e7be      	b.n	19d0 <parsePreset+0x130>
	bufferIndex = bufferIndex + 2;
    1a52:	3302      	adds	r3, #2
    1a54:	b29d      	uxth	r5, r3
	for (int i = 0; i < paramCount; i++)
    1a56:	2600      	movs	r6, #0
    1a58:	e024      	b.n	1aa4 <parsePreset+0x204>
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1a5a:	4924      	ldr	r1, [pc, #144]	; (1aec <parsePreset+0x24c>)
    1a5c:	5d48      	ldrb	r0, [r1, r5]
    1a5e:	1c6f      	adds	r7, r5, #1
    1a60:	5dc9      	ldrb	r1, [r1, r7]
    1a62:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    1a66:	ee07 1a90 	vmov	s15, r1
    1a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1a6e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 1b00 <parsePreset+0x260>
    1a72:	ee67 7a87 	vmul.f32	s15, s15, s14
    1a76:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    1a7a:	4418      	add	r0, r3
    1a7c:	4921      	ldr	r1, [pc, #132]	; (1b04 <parsePreset+0x264>)
    1a7e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1a82:	edc1 7a00 	vstr	s15, [r1]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1a86:	3301      	adds	r3, #1
    1a88:	2b01      	cmp	r3, #1
    1a8a:	dde6      	ble.n	1a5a <parsePreset+0x1ba>
		params[i].scaleFunc = &scaleDefault;
    1a8c:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
    1a90:	4b1c      	ldr	r3, [pc, #112]	; (1b04 <parsePreset+0x264>)
    1a92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1a96:	491c      	ldr	r1, [pc, #112]	; (1b08 <parsePreset+0x268>)
    1a98:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    1a9a:	491c      	ldr	r1, [pc, #112]	; (1b0c <parsePreset+0x26c>)
    1a9c:	6159      	str	r1, [r3, #20]
		bufferIndex += 2;
    1a9e:	3502      	adds	r5, #2
    1aa0:	b2ad      	uxth	r5, r5
	for (int i = 0; i < paramCount; i++)
    1aa2:	3601      	adds	r6, #1
    1aa4:	42b2      	cmp	r2, r6
    1aa6:	dd16      	ble.n	1ad6 <parsePreset+0x236>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1aa8:	2300      	movs	r3, #0
    1aaa:	e7ed      	b.n	1a88 <parsePreset+0x1e8>
			params[i].zeroToOneVal[v] = 0.0f;
    1aac:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
    1ab0:	4418      	add	r0, r3
    1ab2:	4914      	ldr	r1, [pc, #80]	; (1b04 <parsePreset+0x264>)
    1ab4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    1ab8:	2000      	movs	r0, #0
    1aba:	6008      	str	r0, [r1, #0]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1abc:	3301      	adds	r3, #1
    1abe:	2b01      	cmp	r3, #1
    1ac0:	ddf4      	ble.n	1aac <parsePreset+0x20c>
		params[i].scaleFunc = &scaleDefault;
    1ac2:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
    1ac6:	4b0f      	ldr	r3, [pc, #60]	; (1b04 <parsePreset+0x264>)
    1ac8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1acc:	490e      	ldr	r1, [pc, #56]	; (1b08 <parsePreset+0x268>)
    1ace:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    1ad0:	490e      	ldr	r1, [pc, #56]	; (1b0c <parsePreset+0x26c>)
    1ad2:	6159      	str	r1, [r3, #20]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    1ad4:	3201      	adds	r2, #1
    1ad6:	2a9b      	cmp	r2, #155	; 0x9b
    1ad8:	dc1a      	bgt.n	1b10 <parsePreset+0x270>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1ada:	2300      	movs	r3, #0
    1adc:	e7ef      	b.n	1abe <parsePreset+0x21e>
    1ade:	bf00      	nop
    1ae0:	20004f1c 	.word	0x20004f1c
    1ae4:	30000000 	.word	0x30000000
    1ae8:	20000724 	.word	0x20000724
    1aec:	30042380 	.word	0x30042380
    1af0:	20019b80 	.word	0x20019b80
    1af4:	30042000 	.word	0x30042000
    1af8:	30043380 	.word	0x30043380
    1afc:	20019b94 	.word	0x20019b94
    1b00:	377ffff6 	.word	0x377ffff6
    1b04:	20018a64 	.word	0x20018a64
    1b08:	00001561 	.word	0x00001561
    1b0c:	00001621 	.word	0x00001621
	params[Transpose].scaleFunc = &scaleTranspose;
    1b10:	4b8b      	ldr	r3, [pc, #556]	; (1d40 <parsePreset+0x4a0>)
    1b12:	4a8c      	ldr	r2, [pc, #560]	; (1d44 <parsePreset+0x4a4>)
    1b14:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    1b18:	4a8b      	ldr	r2, [pc, #556]	; (1d48 <parsePreset+0x4a8>)
    1b1a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    1b1e:	4a8b      	ldr	r2, [pc, #556]	; (1d4c <parsePreset+0x4ac>)
    1b20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    1b24:	488a      	ldr	r0, [pc, #552]	; (1d50 <parsePreset+0x4b0>)
    1b26:	f8c3 02e8 	str.w	r0, [r3, #744]	; 0x2e8
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    1b2a:	498a      	ldr	r1, [pc, #552]	; (1d54 <parsePreset+0x4b4>)
    1b2c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    1b30:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    1b34:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    1b38:	f8c3 0454 	str.w	r0, [r3, #1108]	; 0x454
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    1b3c:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    1b40:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    1b44:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    1b48:	f8c3 05c0 	str.w	r0, [r3, #1472]	; 0x5c0
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    1b4c:	f8c3 15dc 	str.w	r1, [r3, #1500]	; 0x5dc
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    1b50:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    1b54:	4980      	ldr	r1, [pc, #512]	; (1d58 <parsePreset+0x4b8>)
    1b56:	f8c3 1aac 	str.w	r1, [r3, #2732]	; 0xaac
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    1b5a:	4a80      	ldr	r2, [pc, #512]	; (1d5c <parsePreset+0x4bc>)
    1b5c:	f8c3 2ae4 	str.w	r2, [r3, #2788]	; 0xae4
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    1b60:	f8c3 1b54 	str.w	r1, [r3, #2900]	; 0xb54
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    1b64:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    1b68:	4a7d      	ldr	r2, [pc, #500]	; (1d60 <parsePreset+0x4c0>)
    1b6a:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    1b6e:	f8c3 2bfc 	str.w	r2, [r3, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    1b72:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    1b76:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    1b7a:	f8c3 2ca4 	str.w	r2, [r3, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    1b7e:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    1b82:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    1b86:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    1b8a:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    1b8e:	f8c3 2dd8 	str.w	r2, [r3, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    1b92:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    1b96:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    1b9a:	4a72      	ldr	r2, [pc, #456]	; (1d64 <parsePreset+0x4c4>)
    1b9c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    1ba0:	f8c3 2f0c 	str.w	r2, [r3, #3852]	; 0xf0c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    1ba4:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    1ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1bac:	625a      	str	r2, [r3, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    1bae:	4a6e      	ldr	r2, [pc, #440]	; (1d68 <parsePreset+0x4c8>)
    1bb0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	for (int i = 0; i < NUM_EFFECT; i++)
    1bb4:	2700      	movs	r7, #0
    1bb6:	e028      	b.n	1c0a <parsePreset+0x36a>
			setEffectsFunctions(effectType, i);
    1bb8:	4639      	mov	r1, r7
    1bba:	f006 fa45 	bl	8048 <__setEffectsFunctions_veneer>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1bbe:	3601      	adds	r6, #1
    1bc0:	2e01      	cmp	r6, #1
    1bc2:	dc21      	bgt.n	1c08 <parsePreset+0x368>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1bc4:	00fb      	lsls	r3, r7, #3
    1bc6:	333f      	adds	r3, #63	; 0x3f
    1bc8:	4a5d      	ldr	r2, [pc, #372]	; (1d40 <parsePreset+0x4a0>)
    1bca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1bce:	4433      	add	r3, r6
    1bd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1bd4:	edd3 7a00 	vldr	s15, [r3]
    1bd8:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    1bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
    1be0:	fef8 7a67 	vrinta.f32	s15, s15
    1be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1be8:	edcd 7a01 	vstr	s15, [sp, #4]
    1bec:	f89d 0004 	ldrb.w	r0, [sp, #4]
			param *FXAlias = &params[Effect1Param1 + (EffectParamsNum*i)];
    1bf0:	f107 0108 	add.w	r1, r7, #8
    1bf4:	018b      	lsls	r3, r1, #6
    1bf6:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
    1bfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			if (effectType > FXLowpass) // this assumes filters are the last effects
    1bfe:	280d      	cmp	r0, #13
    1c00:	d9da      	bls.n	1bb8 <parsePreset+0x318>
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    1c02:	4b56      	ldr	r3, [pc, #344]	; (1d5c <parsePreset+0x4bc>)
    1c04:	6493      	str	r3, [r2, #72]	; 0x48
    1c06:	e7d7      	b.n	1bb8 <parsePreset+0x318>
	for (int i = 0; i < NUM_EFFECT; i++)
    1c08:	3701      	adds	r7, #1
    1c0a:	2f03      	cmp	r7, #3
    1c0c:	dc01      	bgt.n	1c12 <parsePreset+0x372>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1c0e:	2600      	movs	r6, #0
    1c10:	e7d6      	b.n	1bc0 <parsePreset+0x320>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1c12:	f04f 0900 	mov.w	r9, #0
    1c16:	46a0      	mov	r8, r4
    1c18:	e017      	b.n	1c4a <parsePreset+0x3aa>
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1c1a:	4c49      	ldr	r4, [pc, #292]	; (1d40 <parsePreset+0x4a0>)
    1c1c:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    1c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1c24:	691b      	ldr	r3, [r3, #16]
    1c26:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
    1c2a:	444f      	add	r7, r9
    1c2c:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    1c30:	ed92 0a00 	vldr	s0, [r2]
    1c34:	4798      	blx	r3
    1c36:	3702      	adds	r7, #2
    1c38:	eb04 0387 	add.w	r3, r4, r7, lsl #2
    1c3c:	ed83 0a00 	vstr	s0, [r3]
		for (int i = 0; i < NUM_PARAMS; i++)
    1c40:	3601      	adds	r6, #1
    1c42:	2e9b      	cmp	r6, #155	; 0x9b
    1c44:	dde9      	ble.n	1c1a <parsePreset+0x37a>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1c46:	f109 0901 	add.w	r9, r9, #1
    1c4a:	f1b9 0f01 	cmp.w	r9, #1
    1c4e:	dc01      	bgt.n	1c54 <parsePreset+0x3b4>
		for (int i = 0; i < NUM_PARAMS; i++)
    1c50:	2600      	movs	r6, #0
    1c52:	e7f6      	b.n	1c42 <parsePreset+0x3a2>
	for (int i = 0; i < NUM_OSC; i++)
    1c54:	2700      	movs	r7, #0
	uint8_t enabledCount = 0;
    1c56:	46b9      	mov	r9, r7
    1c58:	e006      	b.n	1c68 <parsePreset+0x3c8>
			oscsEnabled[i] = 0;
    1c5a:	2300      	movs	r3, #0
    1c5c:	4a43      	ldr	r2, [pc, #268]	; (1d6c <parsePreset+0x4cc>)
    1c5e:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
			oscOn[i] = 0;
    1c62:	4a43      	ldr	r2, [pc, #268]	; (1d70 <parsePreset+0x4d0>)
    1c64:	55d3      	strb	r3, [r2, r7]
	for (int i = 0; i < NUM_OSC; i++)
    1c66:	3701      	adds	r7, #1
    1c68:	2f02      	cmp	r7, #2
    1c6a:	dc32      	bgt.n	1cd2 <parsePreset+0x432>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    1c6c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    1c70:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    1c74:	f106 0323 	add.w	r3, r6, #35	; 0x23
    1c78:	4c31      	ldr	r4, [pc, #196]	; (1d40 <parsePreset+0x4a0>)
    1c7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1c7e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1c82:	edd3 7a02 	vldr	s15, [r3, #8]
    1c86:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    1c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
    1c8e:	fef8 7a67 	vrinta.f32	s15, s15
		setOscilllatorShapes(oscshape, i);
    1c92:	4639      	mov	r1, r7
    1c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1c98:	ee17 0a90 	vmov	r0, s15
    1c9c:	f006 f8a8 	bl	7df0 <__setOscilllatorShapes_veneer>
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    1ca0:	3618      	adds	r6, #24
    1ca2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    1ca6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    1caa:	ed94 7a02 	vldr	s14, [r4, #8]
    1cae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1cba:	ddce      	ble.n	1c5a <parsePreset+0x3ba>
			enabledCount++;
    1cbc:	f109 0901 	add.w	r9, r9, #1
    1cc0:	fa5f f989 	uxtb.w	r9, r9
			oscsEnabled[i] = 1;
    1cc4:	2301      	movs	r3, #1
    1cc6:	4a29      	ldr	r2, [pc, #164]	; (1d6c <parsePreset+0x4cc>)
    1cc8:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
			oscOn[i] = 1;
    1ccc:	4a28      	ldr	r2, [pc, #160]	; (1d70 <parsePreset+0x4d0>)
    1cce:	55d3      	strb	r3, [r2, r7]
    1cd0:	e7c9      	b.n	1c66 <parsePreset+0x3c6>
	oscAmpMult = oscAmpMultArray[enabledCount];
    1cd2:	4644      	mov	r4, r8
    1cd4:	4b27      	ldr	r3, [pc, #156]	; (1d74 <parsePreset+0x4d4>)
    1cd6:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    1cda:	681a      	ldr	r2, [r3, #0]
    1cdc:	4b26      	ldr	r3, [pc, #152]	; (1d78 <parsePreset+0x4d8>)
    1cde:	601a      	str	r2, [r3, #0]
	if (params[Noise].realVal[0]  > 0.5f)
    1ce0:	4b17      	ldr	r3, [pc, #92]	; (1d40 <parsePreset+0x4a0>)
    1ce2:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
    1ce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1cea:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1cf2:	dd04      	ble.n	1cfe <parsePreset+0x45e>
		noiseOn = 1;
    1cf4:	4b21      	ldr	r3, [pc, #132]	; (1d7c <parsePreset+0x4dc>)
    1cf6:	2201      	movs	r2, #1
    1cf8:	701a      	strb	r2, [r3, #0]
	uint8_t enabledCount = 0;
    1cfa:	2600      	movs	r6, #0
    1cfc:	e01c      	b.n	1d38 <parsePreset+0x498>
		noiseOn = 0;
    1cfe:	4b1f      	ldr	r3, [pc, #124]	; (1d7c <parsePreset+0x4dc>)
    1d00:	2200      	movs	r2, #0
    1d02:	701a      	strb	r2, [r3, #0]
    1d04:	e7f9      	b.n	1cfa <parsePreset+0x45a>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1d06:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    1d0a:	005b      	lsls	r3, r3, #1
    1d0c:	3360      	adds	r3, #96	; 0x60
    1d0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1d12:	4a0b      	ldr	r2, [pc, #44]	; (1d40 <parsePreset+0x4a0>)
    1d14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d18:	edd3 7a02 	vldr	s15, [r3, #8]
    1d1c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    1d20:	ee67 7a87 	vmul.f32	s15, s15, s14
    1d24:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    1d28:	4631      	mov	r1, r6
    1d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1d2e:	ee17 0a90 	vmov	r0, s15
    1d32:	f006 f905 	bl	7f40 <__setFilterTypes_veneer>
	for (int i = 0; i < NUM_FILT; i++)
    1d36:	3601      	adds	r6, #1
    1d38:	2e01      	cmp	r6, #1
    1d3a:	dde4      	ble.n	1d06 <parsePreset+0x466>
	for (int i = 0; i < NUM_LFOS; i++)
    1d3c:	2600      	movs	r6, #0
    1d3e:	e037      	b.n	1db0 <parsePreset+0x510>
    1d40:	20018a64 	.word	0x20018a64
    1d44:	00001641 	.word	0x00001641
    1d48:	00001681 	.word	0x00001681
    1d4c:	00001581 	.word	0x00001581
    1d50:	000015a1 	.word	0x000015a1
    1d54:	000015c1 	.word	0x000015c1
    1d58:	000015e1 	.word	0x000015e1
    1d5c:	000016c1 	.word	0x000016c1
    1d60:	00001741 	.word	0x00001741
    1d64:	000017c1 	.word	0x000017c1
    1d68:	00001601 	.word	0x00001601
    1d6c:	20018a58 	.word	0x20018a58
    1d70:	2001cd60 	.word	0x2001cd60
    1d74:	2000073c 	.word	0x2000073c
    1d78:	20000738 	.word	0x20000738
    1d7c:	2001cd0c 	.word	0x2001cd0c
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    1d80:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    1d84:	3387      	adds	r3, #135	; 0x87
    1d86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1d8a:	4aa6      	ldr	r2, [pc, #664]	; (2024 <parsePreset+0x784>)
    1d8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d90:	edd3 7a02 	vldr	s15, [r3, #8]
    1d94:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    1d98:	ee67 7a87 	vmul.f32	s15, s15, s14
    1d9c:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    1da0:	4631      	mov	r1, r6
    1da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1da6:	ee17 0a90 	vmov	r0, s15
    1daa:	f006 f869 	bl	7e80 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    1dae:	3601      	adds	r6, #1
    1db0:	2e03      	cmp	r6, #3
    1db2:	dde5      	ble.n	1d80 <parsePreset+0x4e0>
	params[NoiseTilt].setParam = &noiseSetTilt;
    1db4:	4b9b      	ldr	r3, [pc, #620]	; (2024 <parsePreset+0x784>)
    1db6:	4a9c      	ldr	r2, [pc, #624]	; (2028 <parsePreset+0x788>)
    1db8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    1dbc:	4a9b      	ldr	r2, [pc, #620]	; (202c <parsePreset+0x78c>)
    1dbe:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    1dc2:	4a9b      	ldr	r2, [pc, #620]	; (2030 <parsePreset+0x790>)
    1dc4:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	params[Master].setParam = &setMaster;
    1dc8:	4a9a      	ldr	r2, [pc, #616]	; (2034 <parsePreset+0x794>)
    1dca:	64da      	str	r2, [r3, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    1dcc:	4a9a      	ldr	r2, [pc, #616]	; (2038 <parsePreset+0x798>)
    1dce:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    1dd2:	4a9a      	ldr	r2, [pc, #616]	; (203c <parsePreset+0x79c>)
    1dd4:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    1dd8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
    1ddc:	4a98      	ldr	r2, [pc, #608]	; (2040 <parsePreset+0x7a0>)
    1dde:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    1de2:	4a98      	ldr	r2, [pc, #608]	; (2044 <parsePreset+0x7a4>)
    1de4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    1de8:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    1dec:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    1df0:	4a95      	ldr	r2, [pc, #596]	; (2048 <parsePreset+0x7a8>)
    1df2:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    1df6:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    1dfa:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    1dfe:	4a93      	ldr	r2, [pc, #588]	; (204c <parsePreset+0x7ac>)
    1e00:	6810      	ldr	r0, [r2, #0]
    1e02:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    1e06:	6850      	ldr	r0, [r2, #4]
    1e08:	f8c3 0730 	str.w	r0, [r3, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    1e0c:	6890      	ldr	r0, [r2, #8]
    1e0e:	f8c3 074c 	str.w	r0, [r3, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    1e12:	68d0      	ldr	r0, [r2, #12]
    1e14:	f8c3 0768 	str.w	r0, [r3, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    1e18:	6910      	ldr	r0, [r2, #16]
    1e1a:	f8c3 0784 	str.w	r0, [r3, #1924]	; 0x784
	params[Effect1Mix].setParam = &fxMixSet;
    1e1e:	4f8c      	ldr	r7, [pc, #560]	; (2050 <parsePreset+0x7b0>)
    1e20:	f8c3 77a0 	str.w	r7, [r3, #1952]	; 0x7a0
	params[Effect1PostGain].setParam = &fxPostGainSet;
    1e24:	4e8b      	ldr	r6, [pc, #556]	; (2054 <parsePreset+0x7b4>)
    1e26:	f8c3 67bc 	str.w	r6, [r3, #1980]	; 0x7bc
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    1e2a:	6950      	ldr	r0, [r2, #20]
    1e2c:	f8c3 07f4 	str.w	r0, [r3, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    1e30:	6990      	ldr	r0, [r2, #24]
    1e32:	f8c3 0810 	str.w	r0, [r3, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    1e36:	69d0      	ldr	r0, [r2, #28]
    1e38:	f8c3 082c 	str.w	r0, [r3, #2092]	; 0x82c
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    1e3c:	6a10      	ldr	r0, [r2, #32]
    1e3e:	f8c3 0848 	str.w	r0, [r3, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    1e42:	6a50      	ldr	r0, [r2, #36]	; 0x24
    1e44:	f8c3 0864 	str.w	r0, [r3, #2148]	; 0x864
	params[Effect2Mix].setParam = &fxMixSet;
    1e48:	f8c3 7880 	str.w	r7, [r3, #2176]	; 0x880
	params[Effect2PostGain].setParam = &fxPostGainSet;
    1e4c:	f8c3 689c 	str.w	r6, [r3, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    1e50:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1e52:	f8c3 08d4 	str.w	r0, [r3, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    1e56:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    1e58:	f8c3 08f0 	str.w	r0, [r3, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    1e5c:	6b10      	ldr	r0, [r2, #48]	; 0x30
    1e5e:	f8c3 090c 	str.w	r0, [r3, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    1e62:	6b50      	ldr	r0, [r2, #52]	; 0x34
    1e64:	f8c3 0928 	str.w	r0, [r3, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    1e68:	6b90      	ldr	r0, [r2, #56]	; 0x38
    1e6a:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
	params[Effect3Mix].setParam = &fxMixSet;
    1e6e:	f8c3 7960 	str.w	r7, [r3, #2400]	; 0x960
	params[Effect3PostGain].setParam = &fxPostGainSet;
    1e72:	f8c3 697c 	str.w	r6, [r3, #2428]	; 0x97c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    1e76:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    1e78:	f8c3 09b4 	str.w	r0, [r3, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    1e7c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    1e7e:	f8c3 09d0 	str.w	r0, [r3, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    1e82:	6c50      	ldr	r0, [r2, #68]	; 0x44
    1e84:	f8c3 09ec 	str.w	r0, [r3, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    1e88:	6c90      	ldr	r0, [r2, #72]	; 0x48
    1e8a:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    1e8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    1e90:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	params[Effect4Mix].setParam = &fxMixSet;
    1e94:	f8c3 7a40 	str.w	r7, [r3, #2624]	; 0xa40
	params[Effect4PostGain].setParam = &fxPostGainSet;
    1e98:	f8c3 6a5c 	str.w	r6, [r3, #2652]	; 0xa5c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    1e9c:	4a6e      	ldr	r2, [pc, #440]	; (2058 <parsePreset+0x7b8>)
    1e9e:	6810      	ldr	r0, [r2, #0]
    1ea0:	f8c3 0ae8 	str.w	r0, [r3, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    1ea4:	6850      	ldr	r0, [r2, #4]
    1ea6:	f8c3 0acc 	str.w	r0, [r3, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    1eaa:	6890      	ldr	r0, [r2, #8]
    1eac:	f8c3 0b90 	str.w	r0, [r3, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    1eb0:	68d2      	ldr	r2, [r2, #12]
    1eb2:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    1eb6:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 2074 <parsePreset+0x7d4>
    1eba:	f8c3 cbe4 	str.w	ip, [r3, #3044]	; 0xbe4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    1ebe:	4f67      	ldr	r7, [pc, #412]	; (205c <parsePreset+0x7bc>)
    1ec0:	f8c3 7c00 	str.w	r7, [r3, #3072]	; 0xc00
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    1ec4:	4e66      	ldr	r6, [pc, #408]	; (2060 <parsePreset+0x7c0>)
    1ec6:	f8c3 6c1c 	str.w	r6, [r3, #3100]	; 0xc1c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    1eca:	4866      	ldr	r0, [pc, #408]	; (2064 <parsePreset+0x7c4>)
    1ecc:	f8c3 0c38 	str.w	r0, [r3, #3128]	; 0xc38
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    1ed0:	4a65      	ldr	r2, [pc, #404]	; (2068 <parsePreset+0x7c8>)
    1ed2:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    1ed6:	f8c3 cc8c 	str.w	ip, [r3, #3212]	; 0xc8c
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    1eda:	f8c3 7ca8 	str.w	r7, [r3, #3240]	; 0xca8
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    1ede:	f8c3 6cc4 	str.w	r6, [r3, #3268]	; 0xcc4
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    1ee2:	f8c3 0ce0 	str.w	r0, [r3, #3296]	; 0xce0
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    1ee6:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    1eea:	f8c3 cd34 	str.w	ip, [r3, #3380]	; 0xd34
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    1eee:	f8c3 7d50 	str.w	r7, [r3, #3408]	; 0xd50
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    1ef2:	f8c3 6d6c 	str.w	r6, [r3, #3436]	; 0xd6c
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    1ef6:	f8c3 0d88 	str.w	r0, [r3, #3464]	; 0xd88
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    1efa:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    1efe:	f8c3 cddc 	str.w	ip, [r3, #3548]	; 0xddc
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    1f02:	f8c3 7df8 	str.w	r7, [r3, #3576]	; 0xdf8
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    1f06:	f8c3 6e14 	str.w	r6, [r3, #3604]	; 0xe14
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    1f0a:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    1f0e:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    1f12:	4a56      	ldr	r2, [pc, #344]	; (206c <parsePreset+0x7cc>)
    1f14:	6810      	ldr	r0, [r2, #0]
    1f16:	f8c3 0e84 	str.w	r0, [r3, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    1f1a:	68d0      	ldr	r0, [r2, #12]
    1f1c:	f8c3 0f10 	str.w	r0, [r3, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    1f20:	6990      	ldr	r0, [r2, #24]
    1f22:	f8c3 0f9c 	str.w	r0, [r3, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    1f26:	6a50      	ldr	r0, [r2, #36]	; 0x24
    1f28:	6288      	str	r0, [r1, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    1f2a:	6850      	ldr	r0, [r2, #4]
    1f2c:	f8c3 0ea0 	str.w	r0, [r3, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    1f30:	6910      	ldr	r0, [r2, #16]
    1f32:	f8c3 0f2c 	str.w	r0, [r3, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    1f36:	69d0      	ldr	r0, [r2, #28]
    1f38:	f8c3 0fb8 	str.w	r0, [r3, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    1f3c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    1f3e:	6448      	str	r0, [r1, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    1f40:	6890      	ldr	r0, [r2, #8]
    1f42:	f8c3 0ebc 	str.w	r0, [r3, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    1f46:	6950      	ldr	r0, [r2, #20]
    1f48:	f8c3 0f48 	str.w	r0, [r3, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    1f4c:	6a10      	ldr	r0, [r2, #32]
    1f4e:	f8c3 0fd4 	str.w	r0, [r3, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    1f52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1f54:	660b      	str	r3, [r1, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    1f56:	4b46      	ldr	r3, [pc, #280]	; (2070 <parsePreset+0x7d0>)
    1f58:	f8c1 30b4 	str.w	r3, [r1, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    1f5c:	2600      	movs	r6, #0
    1f5e:	46a0      	mov	r8, r4
    1f60:	e09f      	b.n	20a2 <parsePreset+0x802>
			params[i].objectNumber = 1;
    1f62:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1f66:	4b2f      	ldr	r3, [pc, #188]	; (2024 <parsePreset+0x784>)
    1f68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f6c:	2201      	movs	r2, #1
    1f6e:	761a      	strb	r2, [r3, #24]
	for (int i = 0; i < NUM_LFOS; i++)
    1f70:	2700      	movs	r7, #0
    1f72:	e093      	b.n	209c <parsePreset+0x7fc>
			params[i].objectNumber = 2;
    1f74:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1f78:	4b2a      	ldr	r3, [pc, #168]	; (2024 <parsePreset+0x784>)
    1f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f7e:	2202      	movs	r2, #2
    1f80:	761a      	strb	r2, [r3, #24]
    1f82:	e7f5      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 1;
    1f84:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1f88:	4b26      	ldr	r3, [pc, #152]	; (2024 <parsePreset+0x784>)
    1f8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f8e:	2201      	movs	r2, #1
    1f90:	761a      	strb	r2, [r3, #24]
    1f92:	e7ed      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 1;
    1f94:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1f98:	4b22      	ldr	r3, [pc, #136]	; (2024 <parsePreset+0x784>)
    1f9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f9e:	2201      	movs	r2, #1
    1fa0:	761a      	strb	r2, [r3, #24]
    1fa2:	e7e5      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 2;
    1fa4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1fa8:	4b1e      	ldr	r3, [pc, #120]	; (2024 <parsePreset+0x784>)
    1faa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1fae:	2202      	movs	r2, #2
    1fb0:	761a      	strb	r2, [r3, #24]
    1fb2:	e7dd      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 3;
    1fb4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1fb8:	4b1a      	ldr	r3, [pc, #104]	; (2024 <parsePreset+0x784>)
    1fba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1fbe:	2203      	movs	r2, #3
    1fc0:	761a      	strb	r2, [r3, #24]
    1fc2:	e7d5      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 1;
    1fc4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1fc8:	4b16      	ldr	r3, [pc, #88]	; (2024 <parsePreset+0x784>)
    1fca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1fce:	2201      	movs	r2, #1
    1fd0:	761a      	strb	r2, [r3, #24]
    1fd2:	e7cd      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 2;
    1fd4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1fd8:	4b12      	ldr	r3, [pc, #72]	; (2024 <parsePreset+0x784>)
    1fda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1fde:	2202      	movs	r2, #2
    1fe0:	761a      	strb	r2, [r3, #24]
    1fe2:	e7c5      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 3;
    1fe4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1fe8:	4b0e      	ldr	r3, [pc, #56]	; (2024 <parsePreset+0x784>)
    1fea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1fee:	2203      	movs	r2, #3
    1ff0:	761a      	strb	r2, [r3, #24]
    1ff2:	e7bd      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 1;
    1ff4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    1ff8:	4b0a      	ldr	r3, [pc, #40]	; (2024 <parsePreset+0x784>)
    1ffa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1ffe:	2201      	movs	r2, #1
    2000:	761a      	strb	r2, [r3, #24]
    2002:	e7b5      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 2;
    2004:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2008:	4b06      	ldr	r3, [pc, #24]	; (2024 <parsePreset+0x784>)
    200a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    200e:	2202      	movs	r2, #2
    2010:	761a      	strb	r2, [r3, #24]
    2012:	e7ad      	b.n	1f70 <parsePreset+0x6d0>
			params[i].objectNumber = 3;
    2014:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2018:	4b02      	ldr	r3, [pc, #8]	; (2024 <parsePreset+0x784>)
    201a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    201e:	2203      	movs	r2, #3
    2020:	761a      	strb	r2, [r3, #24]
    2022:	e7a5      	b.n	1f70 <parsePreset+0x6d0>
    2024:	20018a64 	.word	0x20018a64
    2028:	00006e41 	.word	0x00006e41
    202c:	00006ee1 	.word	0x00006ee1
    2030:	00006ea1 	.word	0x00006ea1
    2034:	000055a1 	.word	0x000055a1
    2038:	000055c1 	.word	0x000055c1
    203c:	000055e1 	.word	0x000055e1
    2040:	00005621 	.word	0x00005621
    2044:	00004f61 	.word	0x00004f61
    2048:	00004fc1 	.word	0x00004fc1
    204c:	20013f14 	.word	0x20013f14
    2050:	00006021 	.word	0x00006021
    2054:	00006041 	.word	0x00006041
    2058:	20015f68 	.word	0x20015f68
    205c:	000054a1 	.word	0x000054a1
    2060:	000054e1 	.word	0x000054e1
    2064:	00005501 	.word	0x00005501
    2068:	00005541 	.word	0x00005541
    206c:	20018094 	.word	0x20018094
    2070:	00005581 	.word	0x00005581
    2074:	00005461 	.word	0x00005461
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2078:	4acc      	ldr	r2, [pc, #816]	; (23ac <parsePreset+0xb0c>)
    207a:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    207e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2082:	6944      	ldr	r4, [r0, #20]
    2084:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    2088:	443b      	add	r3, r7
    208a:	3302      	adds	r3, #2
    208c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2090:	4639      	mov	r1, r7
    2092:	7e00      	ldrb	r0, [r0, #24]
    2094:	ed92 0a00 	vldr	s0, [r2]
    2098:	47a0      	blx	r4
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    209a:	3701      	adds	r7, #1
    209c:	2f01      	cmp	r7, #1
    209e:	ddeb      	ble.n	2078 <parsePreset+0x7d8>
	for (int i = 0; i < NUM_PARAMS; i++)
    20a0:	3601      	adds	r6, #1
    20a2:	2e9b      	cmp	r6, #155	; 0x9b
    20a4:	f300 80fa 	bgt.w	229c <parsePreset+0x9fc>
		params[i].objectNumber = 0;
    20a8:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    20ac:	4bbf      	ldr	r3, [pc, #764]	; (23ac <parsePreset+0xb0c>)
    20ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    20b2:	2200      	movs	r2, #0
    20b4:	761a      	strb	r2, [r3, #24]
		if ((i >= Osc1) && (i < Osc2))
    20b6:	f1a6 0318 	sub.w	r3, r6, #24
    20ba:	2b0c      	cmp	r3, #12
    20bc:	f67f af58 	bls.w	1f70 <parsePreset+0x6d0>
		else if ((i >= Osc2) && (i < Osc3))
    20c0:	f1a6 0325 	sub.w	r3, r6, #37	; 0x25
    20c4:	2b72      	cmp	r3, #114	; 0x72
    20c6:	f63f af53 	bhi.w	1f70 <parsePreset+0x6d0>
    20ca:	a201      	add	r2, pc, #4	; (adr r2, 20d0 <parsePreset+0x830>)
    20cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    20d0:	00001f63 	.word	0x00001f63
    20d4:	00001f63 	.word	0x00001f63
    20d8:	00001f63 	.word	0x00001f63
    20dc:	00001f63 	.word	0x00001f63
    20e0:	00001f63 	.word	0x00001f63
    20e4:	00001f63 	.word	0x00001f63
    20e8:	00001f63 	.word	0x00001f63
    20ec:	00001f63 	.word	0x00001f63
    20f0:	00001f63 	.word	0x00001f63
    20f4:	00001f63 	.word	0x00001f63
    20f8:	00001f63 	.word	0x00001f63
    20fc:	00001f63 	.word	0x00001f63
    2100:	00001f63 	.word	0x00001f63
    2104:	00001f75 	.word	0x00001f75
    2108:	00001f75 	.word	0x00001f75
    210c:	00001f75 	.word	0x00001f75
    2110:	00001f75 	.word	0x00001f75
    2114:	00001f75 	.word	0x00001f75
    2118:	00001f75 	.word	0x00001f75
    211c:	00001f75 	.word	0x00001f75
    2120:	00001f75 	.word	0x00001f75
    2124:	00001f75 	.word	0x00001f75
    2128:	00001f75 	.word	0x00001f75
    212c:	00001f75 	.word	0x00001f75
    2130:	00001f75 	.word	0x00001f75
    2134:	00001f75 	.word	0x00001f75
    2138:	00001f71 	.word	0x00001f71
    213c:	00001f71 	.word	0x00001f71
    2140:	00001f71 	.word	0x00001f71
    2144:	00001f71 	.word	0x00001f71
    2148:	00001f71 	.word	0x00001f71
    214c:	00001f71 	.word	0x00001f71
    2150:	00001f71 	.word	0x00001f71
    2154:	00001f71 	.word	0x00001f71
    2158:	00001ff5 	.word	0x00001ff5
    215c:	00001ff5 	.word	0x00001ff5
    2160:	00001ff5 	.word	0x00001ff5
    2164:	00001ff5 	.word	0x00001ff5
    2168:	00001ff5 	.word	0x00001ff5
    216c:	00001ff5 	.word	0x00001ff5
    2170:	00001ff5 	.word	0x00001ff5
    2174:	00001ff5 	.word	0x00001ff5
    2178:	00002005 	.word	0x00002005
    217c:	00002005 	.word	0x00002005
    2180:	00002005 	.word	0x00002005
    2184:	00002005 	.word	0x00002005
    2188:	00002005 	.word	0x00002005
    218c:	00002005 	.word	0x00002005
    2190:	00002005 	.word	0x00002005
    2194:	00002005 	.word	0x00002005
    2198:	00002015 	.word	0x00002015
    219c:	00002015 	.word	0x00002015
    21a0:	00002015 	.word	0x00002015
    21a4:	00002015 	.word	0x00002015
    21a8:	00002015 	.word	0x00002015
    21ac:	00002015 	.word	0x00002015
    21b0:	00002015 	.word	0x00002015
    21b4:	00002015 	.word	0x00002015
    21b8:	00001f71 	.word	0x00001f71
    21bc:	00001f71 	.word	0x00001f71
    21c0:	00001f71 	.word	0x00001f71
    21c4:	00001f71 	.word	0x00001f71
    21c8:	00001f71 	.word	0x00001f71
    21cc:	00001f71 	.word	0x00001f71
    21d0:	00001f85 	.word	0x00001f85
    21d4:	00001f85 	.word	0x00001f85
    21d8:	00001f85 	.word	0x00001f85
    21dc:	00001f85 	.word	0x00001f85
    21e0:	00001f85 	.word	0x00001f85
    21e4:	00001f85 	.word	0x00001f85
    21e8:	00001f85 	.word	0x00001f85
    21ec:	00001f71 	.word	0x00001f71
    21f0:	00001f71 	.word	0x00001f71
    21f4:	00001f71 	.word	0x00001f71
    21f8:	00001f71 	.word	0x00001f71
    21fc:	00001f71 	.word	0x00001f71
    2200:	00001f71 	.word	0x00001f71
    2204:	00001f95 	.word	0x00001f95
    2208:	00001f95 	.word	0x00001f95
    220c:	00001f95 	.word	0x00001f95
    2210:	00001f95 	.word	0x00001f95
    2214:	00001f95 	.word	0x00001f95
    2218:	00001f95 	.word	0x00001f95
    221c:	00001fa5 	.word	0x00001fa5
    2220:	00001fa5 	.word	0x00001fa5
    2224:	00001fa5 	.word	0x00001fa5
    2228:	00001fa5 	.word	0x00001fa5
    222c:	00001fa5 	.word	0x00001fa5
    2230:	00001fa5 	.word	0x00001fa5
    2234:	00001fb5 	.word	0x00001fb5
    2238:	00001fb5 	.word	0x00001fb5
    223c:	00001fb5 	.word	0x00001fb5
    2240:	00001fb5 	.word	0x00001fb5
    2244:	00001fb5 	.word	0x00001fb5
    2248:	00001fb5 	.word	0x00001fb5
    224c:	00001f71 	.word	0x00001f71
    2250:	00001f71 	.word	0x00001f71
    2254:	00001f71 	.word	0x00001f71
    2258:	00001f71 	.word	0x00001f71
    225c:	00001f71 	.word	0x00001f71
    2260:	00001fc5 	.word	0x00001fc5
    2264:	00001fc5 	.word	0x00001fc5
    2268:	00001fc5 	.word	0x00001fc5
    226c:	00001fc5 	.word	0x00001fc5
    2270:	00001fc5 	.word	0x00001fc5
    2274:	00001fd5 	.word	0x00001fd5
    2278:	00001fd5 	.word	0x00001fd5
    227c:	00001fd5 	.word	0x00001fd5
    2280:	00001fd5 	.word	0x00001fd5
    2284:	00001fd5 	.word	0x00001fd5
    2288:	00001fe5 	.word	0x00001fe5
    228c:	00001fe5 	.word	0x00001fe5
    2290:	00001fe5 	.word	0x00001fe5
    2294:	00001fe5 	.word	0x00001fe5
    2298:	00001fe5 	.word	0x00001fe5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    229c:	4644      	mov	r4, r8
    229e:	4b43      	ldr	r3, [pc, #268]	; (23ac <parsePreset+0xb0c>)
    22a0:	edd3 7a02 	vldr	s15, [r3, #8]
    22a4:	eddf 6a42 	vldr	s13, [pc, #264]	; 23b0 <parsePreset+0xb10>
    22a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    22ac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    22b0:	ee27 7a26 	vmul.f32	s14, s14, s13
    22b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    22b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    22bc:	eec6 6a27 	vdiv.f32	s13, s12, s15
    22c0:	4a3c      	ldr	r2, [pc, #240]	; (23b4 <parsePreset+0xb14>)
    22c2:	edc2 6a00 	vstr	s13, [r2]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    22c6:	4a3c      	ldr	r2, [pc, #240]	; (23b8 <parsePreset+0xb18>)
    22c8:	ed82 7a00 	vstr	s14, [r2]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    22cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    22d0:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    22d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    22d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    22dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22e0:	bfcc      	ite	gt
    22e2:	2201      	movgt	r2, #1
    22e4:	2200      	movle	r2, #0
    22e6:	4b35      	ldr	r3, [pc, #212]	; (23bc <parsePreset+0xb1c>)
    22e8:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    22ea:	f1bb 0f00 	cmp.w	fp, #0
    22ee:	d012      	beq.n	2316 <parsePreset+0xa76>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    22f0:	4b33      	ldr	r3, [pc, #204]	; (23c0 <parsePreset+0xb20>)
    22f2:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    22f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    22fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22fe:	bfcc      	ite	gt
    2300:	2201      	movgt	r2, #1
    2302:	2200      	movle	r2, #0
    2304:	4b2f      	ldr	r3, [pc, #188]	; (23c4 <parsePreset+0xb24>)
    2306:	701a      	strb	r2, [r3, #0]
	bufferIndex += 2;
    2308:	3504      	adds	r5, #4
    230a:	b2ab      	uxth	r3, r5
    230c:	9302      	str	r3, [sp, #8]
	numMappings = 0;
    230e:	2300      	movs	r3, #0
    2310:	4a2d      	ldr	r2, [pc, #180]	; (23c8 <parsePreset+0xb28>)
    2312:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    2314:	e007      	b.n	2326 <parsePreset+0xa86>
		pedalControlsMaster = 1;
    2316:	4b2b      	ldr	r3, [pc, #172]	; (23c4 <parsePreset+0xb24>)
    2318:	2201      	movs	r2, #1
    231a:	701a      	strb	r2, [r3, #0]
    231c:	e7f4      	b.n	2308 <parsePreset+0xa68>
		lfoOn[i] = 0;
    231e:	4a2b      	ldr	r2, [pc, #172]	; (23cc <parsePreset+0xb2c>)
    2320:	2100      	movs	r1, #0
    2322:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_LFOS; i++)
    2324:	3301      	adds	r3, #1
    2326:	2b03      	cmp	r3, #3
    2328:	ddf9      	ble.n	231e <parsePreset+0xa7e>
	for (int i = 0; i < NUM_ENV; i++)
    232a:	2300      	movs	r3, #0
    232c:	e003      	b.n	2336 <parsePreset+0xa96>
		envOn[i] = 0;
    232e:	4a28      	ldr	r2, [pc, #160]	; (23d0 <parsePreset+0xb30>)
    2330:	2100      	movs	r1, #0
    2332:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_ENV; i++)
    2334:	3301      	adds	r3, #1
    2336:	2b03      	cmp	r3, #3
    2338:	ddf9      	ble.n	232e <parsePreset+0xa8e>
	for (int i = 0; i < 12; i++)
    233a:	2300      	movs	r3, #0
    233c:	e003      	b.n	2346 <parsePreset+0xaa6>
		knobFrozen[i] = 0;
    233e:	4a25      	ldr	r2, [pc, #148]	; (23d4 <parsePreset+0xb34>)
    2340:	2100      	movs	r1, #0
    2342:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 12; i++)
    2344:	3301      	adds	r3, #1
    2346:	2b0b      	cmp	r3, #11
    2348:	ddf9      	ble.n	233e <parsePreset+0xa9e>
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    234a:	2100      	movs	r1, #0
    234c:	e010      	b.n	2370 <parsePreset+0xad0>
		mappings[i].destNumber = 255;
    234e:	4822      	ldr	r0, [pc, #136]	; (23d8 <parsePreset+0xb38>)
    2350:	224c      	movs	r2, #76	; 0x4c
    2352:	fb01 f202 	mul.w	r2, r1, r2
    2356:	1883      	adds	r3, r0, r2
    2358:	25ff      	movs	r5, #255	; 0xff
    235a:	5485      	strb	r5, [r0, r2]
		mappings[i].hookActive[0] = 0;
    235c:	2200      	movs	r2, #0
    235e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		mappings[i].hookActive[1] = 0;
    2362:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		mappings[i].hookActive[2] = 0;
    2366:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		mappings[i].numHooks = 0;
    236a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    236e:	3101      	adds	r1, #1
    2370:	291f      	cmp	r1, #31
    2372:	ddec      	ble.n	234e <parsePreset+0xaae>
	for (int i = 0; i < mappingCount; i++)
    2374:	2300      	movs	r3, #0
    2376:	9301      	str	r3, [sp, #4]
    2378:	465d      	mov	r5, fp
    237a:	9405      	str	r4, [sp, #20]
    237c:	e15e      	b.n	263c <parsePreset+0xd9c>
				foundOne = 1;
    237e:	2601      	movs	r6, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2380:	3301      	adds	r3, #1
    2382:	2b1f      	cmp	r3, #31
    2384:	dc2a      	bgt.n	23dc <parsePreset+0xb3c>
			if (mappings[j].destNumber == destNumber)
    2386:	224c      	movs	r2, #76	; 0x4c
    2388:	fb03 f202 	mul.w	r2, r3, r2
    238c:	4f12      	ldr	r7, [pc, #72]	; (23d8 <parsePreset+0xb38>)
    238e:	5cba      	ldrb	r2, [r7, r2]
    2390:	42a2      	cmp	r2, r4
    2392:	d1f5      	bne.n	2380 <parsePreset+0xae0>
				whichMapping = j;
    2394:	b2d9      	uxtb	r1, r3
				if (presetVersionNumber == 0)
    2396:	2d00      	cmp	r5, #0
    2398:	d1f1      	bne.n	237e <parsePreset+0xade>
					whichHook = mappings[j].numHooks;
    239a:	204c      	movs	r0, #76	; 0x4c
    239c:	fb00 7203 	mla	r2, r0, r3, r7
    23a0:	f892 004b 	ldrb.w	r0, [r2, #75]	; 0x4b
				foundOne = 1;
    23a4:	2601      	movs	r6, #1
    23a6:	e7eb      	b.n	2380 <parsePreset+0xae0>
		uint8_t whichHook = 0;
    23a8:	2000      	movs	r0, #0
    23aa:	e155      	b.n	2658 <parsePreset+0xdb8>
    23ac:	20018a64 	.word	0x20018a64
    23b0:	42fe0000 	.word	0x42fe0000
    23b4:	20018a48 	.word	0x20018a48
    23b8:	20018a4c 	.word	0x20018a4c
    23bc:	20016091 	.word	0x20016091
    23c0:	20019a64 	.word	0x20019a64
    23c4:	20019b74 	.word	0x20019b74
    23c8:	20018a54 	.word	0x20018a54
    23cc:	2001cac8 	.word	0x2001cac8
    23d0:	2001c944 	.word	0x2001c944
    23d4:	20004dec 	.word	0x20004dec
    23d8:	200180c8 	.word	0x200180c8
		if (foundOne == 0)
    23dc:	b996      	cbnz	r6, 2404 <parsePreset+0xb64>
			whichMapping = numMappings;
    23de:	4bba      	ldr	r3, [pc, #744]	; (26c8 <parsePreset+0xe28>)
    23e0:	7819      	ldrb	r1, [r3, #0]
			numMappings++;
    23e2:	1c4a      	adds	r2, r1, #1
    23e4:	701a      	strb	r2, [r3, #0]
			if (presetVersionNumber == 0)
    23e6:	b105      	cbz	r5, 23ea <parsePreset+0xb4a>
    23e8:	4606      	mov	r6, r0
			mappings[whichMapping].destNumber = destNumber;
    23ea:	48b8      	ldr	r0, [pc, #736]	; (26cc <parsePreset+0xe2c>)
    23ec:	234c      	movs	r3, #76	; 0x4c
    23ee:	fb01 f303 	mul.w	r3, r1, r3
    23f2:	18c2      	adds	r2, r0, r3
    23f4:	54c4      	strb	r4, [r0, r3]
			mappings[whichMapping].dest = &params[destNumber];
    23f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    23fa:	4bb5      	ldr	r3, [pc, #724]	; (26d0 <parsePreset+0xe30>)
    23fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2400:	6053      	str	r3, [r2, #4]
    2402:	4630      	mov	r0, r6
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    2404:	460c      	mov	r4, r1
    2406:	4681      	mov	r9, r0
    2408:	4bb0      	ldr	r3, [pc, #704]	; (26cc <parsePreset+0xe2c>)
    240a:	224c      	movs	r2, #76	; 0x4c
    240c:	fb02 3301 	mla	r3, r2, r1, r3
    2410:	4403      	add	r3, r0
    2412:	2201      	movs	r2, #1
    2414:	f883 2020 	strb.w	r2, [r3, #32]
		int source = buffer[bufferIndex];
    2418:	4bae      	ldr	r3, [pc, #696]	; (26d4 <parsePreset+0xe34>)
    241a:	f813 600a 	ldrb.w	r6, [r3, sl]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    241e:	2200      	movs	r2, #0
    2420:	e010      	b.n	2444 <parsePreset+0xba4>
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2422:	eb02 0346 	add.w	r3, r2, r6, lsl #1
    2426:	49ac      	ldr	r1, [pc, #688]	; (26d8 <parsePreset+0xe38>)
    2428:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    242c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2430:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2434:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2438:	4413      	add	r3, r2
    243a:	3302      	adds	r3, #2
    243c:	48a3      	ldr	r0, [pc, #652]	; (26cc <parsePreset+0xe2c>)
    243e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2442:	3201      	adds	r2, #1
    2444:	2a01      	cmp	r2, #1
    2446:	ddec      	ble.n	2422 <parsePreset+0xb82>
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2448:	2e03      	cmp	r6, #3
    244a:	dc07      	bgt.n	245c <parsePreset+0xbbc>
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    244c:	4b9f      	ldr	r3, [pc, #636]	; (26cc <parsePreset+0xe2c>)
    244e:	224c      	movs	r2, #76	; 0x4c
    2450:	fb02 3304 	mla	r3, r2, r4, r3
    2454:	444b      	add	r3, r9
    2456:	2200      	movs	r2, #0
    2458:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    245c:	f1a6 0318 	sub.w	r3, r6, #24
    2460:	2b03      	cmp	r3, #3
    2462:	d802      	bhi.n	246a <parsePreset+0xbca>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2464:	4a9d      	ldr	r2, [pc, #628]	; (26dc <parsePreset+0xe3c>)
    2466:	2101      	movs	r1, #1
    2468:	54d1      	strb	r1, [r2, r3]
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    246a:	f1a6 0314 	sub.w	r3, r6, #20
    246e:	2b03      	cmp	r3, #3
    2470:	d802      	bhi.n	2478 <parsePreset+0xbd8>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    2472:	4a9b      	ldr	r2, [pc, #620]	; (26e0 <parsePreset+0xe40>)
    2474:	2101      	movs	r1, #1
    2476:	54d1      	strb	r1, [r2, r3]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2478:	2e02      	cmp	r6, #2
    247a:	d802      	bhi.n	2482 <parsePreset+0xbe2>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    247c:	4b99      	ldr	r3, [pc, #612]	; (26e4 <parsePreset+0xe44>)
    247e:	2201      	movs	r2, #1
    2480:	559a      	strb	r2, [r3, r6]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2482:	2e03      	cmp	r6, #3
    2484:	d00c      	beq.n	24a0 <parsePreset+0xc00>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2486:	f1a6 0b04 	sub.w	fp, r6, #4
    248a:	f1bb 0f0b 	cmp.w	fp, #11
    248e:	d90b      	bls.n	24a8 <parsePreset+0xc08>
		int scalar = buffer[bufferIndex+2];
    2490:	f10a 0302 	add.w	r3, sl, #2
    2494:	4a8f      	ldr	r2, [pc, #572]	; (26d4 <parsePreset+0xe34>)
    2496:	f812 8003 	ldrb.w	r8, [r2, r3]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    249a:	2700      	movs	r7, #0
    249c:	9503      	str	r5, [sp, #12]
    249e:	e041      	b.n	2524 <parsePreset+0xc84>
			noiseOn = 1;
    24a0:	4b91      	ldr	r3, [pc, #580]	; (26e8 <parsePreset+0xe48>)
    24a2:	2201      	movs	r2, #1
    24a4:	701a      	strb	r2, [r3, #0]
    24a6:	e7ee      	b.n	2486 <parsePreset+0xbe6>
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    24a8:	fa5f f78b 	uxtb.w	r7, fp
			for (int v = 0; v < numStringsThisBoard; v++)
    24ac:	2200      	movs	r2, #0
    24ae:	e00f      	b.n	24d0 <parsePreset+0xc30>
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    24b0:	1cfb      	adds	r3, r7, #3
    24b2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    24b6:	4413      	add	r3, r2
    24b8:	3302      	adds	r3, #2
    24ba:	4985      	ldr	r1, [pc, #532]	; (26d0 <parsePreset+0xe30>)
    24bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    24c0:	6819      	ldr	r1, [r3, #0]
    24c2:	eb02 0046 	add.w	r0, r2, r6, lsl #1
    24c6:	4b84      	ldr	r3, [pc, #528]	; (26d8 <parsePreset+0xe38>)
    24c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    24cc:	6019      	str	r1, [r3, #0]
			for (int v = 0; v < numStringsThisBoard; v++)
    24ce:	3201      	adds	r2, #1
    24d0:	4b86      	ldr	r3, [pc, #536]	; (26ec <parsePreset+0xe4c>)
    24d2:	781b      	ldrb	r3, [r3, #0]
    24d4:	4293      	cmp	r3, r2
    24d6:	dceb      	bgt.n	24b0 <parsePreset+0xc10>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    24d8:	1cfb      	adds	r3, r7, #3
    24da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    24de:	4a7c      	ldr	r2, [pc, #496]	; (26d0 <parsePreset+0xe30>)
    24e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24e4:	ed93 0a02 	vldr	s0, [r3, #8]
    24e8:	4881      	ldr	r0, [pc, #516]	; (26f0 <parsePreset+0xe50>)
    24ea:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    24ee:	f005 fd57 	bl	7fa0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    24f2:	4b80      	ldr	r3, [pc, #512]	; (26f4 <parsePreset+0xe54>)
    24f4:	2201      	movs	r2, #1
    24f6:	55da      	strb	r2, [r3, r7]
    24f8:	e7ca      	b.n	2490 <parsePreset+0xbf0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    24fa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    24fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2502:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2506:	443b      	add	r3, r7
    2508:	3308      	adds	r3, #8
    250a:	4a70      	ldr	r2, [pc, #448]	; (26cc <parsePreset+0xe2c>)
    250c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2510:	4a79      	ldr	r2, [pc, #484]	; (26f8 <parsePreset+0xe58>)
    2512:	605a      	str	r2, [r3, #4]
    2514:	e005      	b.n	2522 <parsePreset+0xc82>
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2516:	f1b8 0f03 	cmp.w	r8, #3
    251a:	d02f      	beq.n	257c <parsePreset+0xcdc>
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    251c:	f1bb 0f0b 	cmp.w	fp, #11
    2520:	d930      	bls.n	2584 <parsePreset+0xce4>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2522:	3701      	adds	r7, #1
    2524:	2f01      	cmp	r7, #1
    2526:	dc56      	bgt.n	25d6 <parsePreset+0xd36>
			if (scalar == 0xff)
    2528:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    252c:	d0e5      	beq.n	24fa <parsePreset+0xc5a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    252e:	eb07 0348 	add.w	r3, r7, r8, lsl #1
    2532:	4a69      	ldr	r2, [pc, #420]	; (26d8 <parsePreset+0xe38>)
    2534:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2538:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    253c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2540:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2544:	443b      	add	r3, r7
    2546:	3308      	adds	r3, #8
    2548:	4960      	ldr	r1, [pc, #384]	; (26cc <parsePreset+0xe2c>)
    254a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    254e:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2550:	f1a8 0318 	sub.w	r3, r8, #24
    2554:	2b03      	cmp	r3, #3
    2556:	d802      	bhi.n	255e <parsePreset+0xcbe>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2558:	4a60      	ldr	r2, [pc, #384]	; (26dc <parsePreset+0xe3c>)
    255a:	2101      	movs	r1, #1
    255c:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    255e:	f1a8 0314 	sub.w	r3, r8, #20
    2562:	2b03      	cmp	r3, #3
    2564:	d802      	bhi.n	256c <parsePreset+0xccc>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2566:	4a5e      	ldr	r2, [pc, #376]	; (26e0 <parsePreset+0xe40>)
    2568:	2101      	movs	r1, #1
    256a:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    256c:	f1b8 0f02 	cmp.w	r8, #2
    2570:	d8d1      	bhi.n	2516 <parsePreset+0xc76>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2572:	4b5c      	ldr	r3, [pc, #368]	; (26e4 <parsePreset+0xe44>)
    2574:	2201      	movs	r2, #1
    2576:	f803 2008 	strb.w	r2, [r3, r8]
    257a:	e7cc      	b.n	2516 <parsePreset+0xc76>
					noiseOn = 1;
    257c:	4b5a      	ldr	r3, [pc, #360]	; (26e8 <parsePreset+0xe48>)
    257e:	2201      	movs	r2, #1
    2580:	701a      	strb	r2, [r3, #0]
    2582:	e7cb      	b.n	251c <parsePreset+0xc7c>
					uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2584:	1f33      	subs	r3, r6, #4
    2586:	b2dd      	uxtb	r5, r3
					for (int v = 0; v < numStringsThisBoard; v++)
    2588:	2200      	movs	r2, #0
    258a:	e00f      	b.n	25ac <parsePreset+0xd0c>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    258c:	1ceb      	adds	r3, r5, #3
    258e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2592:	4413      	add	r3, r2
    2594:	3302      	adds	r3, #2
    2596:	494e      	ldr	r1, [pc, #312]	; (26d0 <parsePreset+0xe30>)
    2598:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    259c:	6819      	ldr	r1, [r3, #0]
    259e:	eb02 0046 	add.w	r0, r2, r6, lsl #1
    25a2:	4b4d      	ldr	r3, [pc, #308]	; (26d8 <parsePreset+0xe38>)
    25a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    25a8:	6019      	str	r1, [r3, #0]
					for (int v = 0; v < numStringsThisBoard; v++)
    25aa:	3201      	adds	r2, #1
    25ac:	4b4f      	ldr	r3, [pc, #316]	; (26ec <parsePreset+0xe4c>)
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	4293      	cmp	r3, r2
    25b2:	dceb      	bgt.n	258c <parsePreset+0xcec>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    25b4:	1ceb      	adds	r3, r5, #3
    25b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    25ba:	4a45      	ldr	r2, [pc, #276]	; (26d0 <parsePreset+0xe30>)
    25bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25c0:	ed93 0a02 	vldr	s0, [r3, #8]
    25c4:	484a      	ldr	r0, [pc, #296]	; (26f0 <parsePreset+0xe50>)
    25c6:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    25ca:	f005 fce9 	bl	7fa0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    25ce:	4b49      	ldr	r3, [pc, #292]	; (26f4 <parsePreset+0xe54>)
    25d0:	2201      	movs	r2, #1
    25d2:	555a      	strb	r2, [r3, r5]
    25d4:	e7a5      	b.n	2522 <parsePreset+0xc82>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    25d6:	9d03      	ldr	r5, [sp, #12]
    25d8:	f10a 0203 	add.w	r2, sl, #3
    25dc:	4b3d      	ldr	r3, [pc, #244]	; (26d4 <parsePreset+0xe34>)
    25de:	5c9a      	ldrb	r2, [r3, r2]
    25e0:	f10a 0a04 	add.w	sl, sl, #4
    25e4:	f813 300a 	ldrb.w	r3, [r3, sl]
    25e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    25ec:	b21b      	sxth	r3, r3
    25ee:	ee07 3a90 	vmov	s15, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    25f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    25f6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 26fc <parsePreset+0xe5c>
    25fa:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    25fe:	4a33      	ldr	r2, [pc, #204]	; (26cc <parsePreset+0xe2c>)
    2600:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2604:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2608:	444b      	add	r3, r9
    260a:	330e      	adds	r3, #14
    260c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2610:	edc3 7a01 	vstr	s15, [r3, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2614:	234c      	movs	r3, #76	; 0x4c
    2616:	fb03 2304 	mla	r3, r3, r4, r2
    261a:	4499      	add	r9, r3
    261c:	2201      	movs	r2, #1
    261e:	f889 2048 	strb.w	r2, [r9, #72]	; 0x48
		mappings[whichMapping].numHooks++;
    2622:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    2626:	3201      	adds	r2, #1
    2628:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		if (presetVersionNumber > 0)
    262c:	b1c5      	cbz	r5, 2660 <parsePreset+0xdc0>
			bufferIndex += 6;
    262e:	9b02      	ldr	r3, [sp, #8]
    2630:	3306      	adds	r3, #6
    2632:	b29b      	uxth	r3, r3
    2634:	9302      	str	r3, [sp, #8]
	for (int i = 0; i < mappingCount; i++)
    2636:	9b01      	ldr	r3, [sp, #4]
    2638:	3301      	adds	r3, #1
    263a:	9301      	str	r3, [sp, #4]
    263c:	9b04      	ldr	r3, [sp, #16]
    263e:	9a01      	ldr	r2, [sp, #4]
    2640:	4293      	cmp	r3, r2
    2642:	dd12      	ble.n	266a <parsePreset+0xdca>
		uint8_t destNumber = buffer[bufferIndex+1];
    2644:	9902      	ldr	r1, [sp, #8]
    2646:	468a      	mov	sl, r1
    2648:	1c4b      	adds	r3, r1, #1
    264a:	4a22      	ldr	r2, [pc, #136]	; (26d4 <parsePreset+0xe34>)
    264c:	5cd4      	ldrb	r4, [r2, r3]
		if (presetVersionNumber > 0)
    264e:	2d00      	cmp	r5, #0
    2650:	f43f aeaa 	beq.w	23a8 <parsePreset+0xb08>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2654:	1d4b      	adds	r3, r1, #5
    2656:	5cd0      	ldrb	r0, [r2, r3]
		uint8_t whichHook = 0;
    2658:	2300      	movs	r3, #0
    265a:	461e      	mov	r6, r3
    265c:	4619      	mov	r1, r3
    265e:	e690      	b.n	2382 <parsePreset+0xae2>
			bufferIndex += 5;
    2660:	9b02      	ldr	r3, [sp, #8]
    2662:	3305      	adds	r3, #5
    2664:	b29b      	uxth	r3, r3
    2666:	9302      	str	r3, [sp, #8]
    2668:	e7e5      	b.n	2636 <parsePreset+0xd96>
    266a:	9c05      	ldr	r4, [sp, #20]
    266c:	2500      	movs	r5, #0
    266e:	e06e      	b.n	274e <parsePreset+0xeae>
				for (int j = 0; j < 3; j++)
    2670:	3201      	adds	r2, #1
    2672:	2a02      	cmp	r2, #2
    2674:	dc44      	bgt.n	2700 <parsePreset+0xe60>
					if (mappings[i].hookActive[j])
    2676:	4b15      	ldr	r3, [pc, #84]	; (26cc <parsePreset+0xe2c>)
    2678:	214c      	movs	r1, #76	; 0x4c
    267a:	fb01 3305 	mla	r3, r1, r5, r3
    267e:	4413      	add	r3, r2
    2680:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    2684:	2b00      	cmp	r3, #0
    2686:	d0f3      	beq.n	2670 <parsePreset+0xdd0>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2688:	4810      	ldr	r0, [pc, #64]	; (26cc <parsePreset+0xe2c>)
    268a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    268e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    2692:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2696:	4431      	add	r1, r6
    2698:	1c8f      	adds	r7, r1, #2
    269a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    269e:	edd7 7a00 	vldr	s15, [r7]
    26a2:	4413      	add	r3, r2
    26a4:	330e      	adds	r3, #14
    26a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    26aa:	edd3 6a01 	vldr	s13, [r3, #4]
    26ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
    26b2:	3108      	adds	r1, #8
    26b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    26b8:	6843      	ldr	r3, [r0, #4]
    26ba:	edd3 6a00 	vldr	s13, [r3]
    26be:	ee67 7aa6 	vmul.f32	s15, s15, s13
						unsmoothedValue += sum;
    26c2:	ee37 7a27 	vadd.f32	s14, s14, s15
    26c6:	e7d3      	b.n	2670 <parsePreset+0xdd0>
    26c8:	20018a54 	.word	0x20018a54
    26cc:	200180c8 	.word	0x200180c8
    26d0:	20018a64 	.word	0x20018a64
    26d4:	30042380 	.word	0x30042380
    26d8:	2001cf80 	.word	0x2001cf80
    26dc:	2001cac8 	.word	0x2001cac8
    26e0:	2001c944 	.word	0x2001c944
    26e4:	2001cd60 	.word	0x2001cd60
    26e8:	2001cd0c 	.word	0x2001cd0c
    26ec:	200004b1 	.word	0x200004b1
    26f0:	20004e28 	.word	0x20004e28
    26f4:	20004dec 	.word	0x20004dec
    26f8:	2000072c 	.word	0x2000072c
    26fc:	37fffffc 	.word	0x37fffffc
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2700:	4b27      	ldr	r3, [pc, #156]	; (27a0 <parsePreset+0xf00>)
    2702:	224c      	movs	r2, #76	; 0x4c
    2704:	fb02 3805 	mla	r8, r2, r5, r3
    2708:	f8d8 7004 	ldr.w	r7, [r8, #4]
    270c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    2710:	ed93 0a00 	vldr	s0, [r3]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2714:	693b      	ldr	r3, [r7, #16]
    2716:	ee30 0a07 	vadd.f32	s0, s0, s14
    271a:	4798      	blx	r3
    271c:	1cb3      	adds	r3, r6, #2
    271e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    2722:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2726:	f8d8 2004 	ldr.w	r2, [r8, #4]
    272a:	6957      	ldr	r7, [r2, #20]
    272c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2730:	4631      	mov	r1, r6
    2732:	7e10      	ldrb	r0, [r2, #24]
    2734:	ed93 0a00 	vldr	s0, [r3]
    2738:	47b8      	blx	r7
			for (int v = 0; v < numStringsThisBoard; v++)
    273a:	3601      	adds	r6, #1
    273c:	4b19      	ldr	r3, [pc, #100]	; (27a4 <parsePreset+0xf04>)
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	42b3      	cmp	r3, r6
    2742:	dd03      	ble.n	274c <parsePreset+0xeac>
				for (int j = 0; j < 3; j++)
    2744:	2200      	movs	r2, #0
				float unsmoothedValue = 0.0f;
    2746:	ed9f 7a18 	vldr	s14, [pc, #96]	; 27a8 <parsePreset+0xf08>
    274a:	e792      	b.n	2672 <parsePreset+0xdd2>
	for (int i = 0; i < numMappings; i++)
    274c:	3501      	adds	r5, #1
    274e:	4b17      	ldr	r3, [pc, #92]	; (27ac <parsePreset+0xf0c>)
    2750:	781b      	ldrb	r3, [r3, #0]
    2752:	42ab      	cmp	r3, r5
    2754:	dd08      	ble.n	2768 <parsePreset+0xec8>
		if (mappings[i].destNumber != 255)
    2756:	234c      	movs	r3, #76	; 0x4c
    2758:	fb05 f303 	mul.w	r3, r5, r3
    275c:	4a10      	ldr	r2, [pc, #64]	; (27a0 <parsePreset+0xf00>)
    275e:	5cd3      	ldrb	r3, [r2, r3]
    2760:	2bff      	cmp	r3, #255	; 0xff
    2762:	d0f3      	beq.n	274c <parsePreset+0xeac>
			for (int v = 0; v < numStringsThisBoard; v++)
    2764:	2600      	movs	r6, #0
    2766:	e7e9      	b.n	273c <parsePreset+0xe9c>
	presetWaitingToParse = 0;
    2768:	2500      	movs	r5, #0
    276a:	4b11      	ldr	r3, [pc, #68]	; (27b0 <parsePreset+0xf10>)
    276c:	601d      	str	r5, [r3, #0]
	currentActivePreset = presetNumber;
    276e:	b2e4      	uxtb	r4, r4
    2770:	4b10      	ldr	r3, [pc, #64]	; (27b4 <parsePreset+0xf14>)
    2772:	701c      	strb	r4, [r3, #0]
	audioMasterLevel = 1.0f;
    2774:	4b10      	ldr	r3, [pc, #64]	; (27b8 <parsePreset+0xf18>)
    2776:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    277a:	601a      	str	r2, [r3, #0]
	oscToTick = NUM_OSC;
    277c:	4b0f      	ldr	r3, [pc, #60]	; (27bc <parsePreset+0xf1c>)
    277e:	2203      	movs	r2, #3
    2780:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    2782:	2401      	movs	r4, #1
    2784:	4b0e      	ldr	r3, [pc, #56]	; (27c0 <parsePreset+0xf20>)
    2786:	601c      	str	r4, [r3, #0]
	changeOversampling(overSampled);
    2788:	4620      	mov	r0, r4
    278a:	f005 fc99 	bl	80c0 <__changeOversampling_veneer>
    278e:	b662      	cpsie	i
	presetReady = 1;
    2790:	4b0c      	ldr	r3, [pc, #48]	; (27c4 <parsePreset+0xf24>)
    2792:	601c      	str	r4, [r3, #0]
	diskBusy = 0;
    2794:	4b0c      	ldr	r3, [pc, #48]	; (27c8 <parsePreset+0xf28>)
    2796:	701d      	strb	r5, [r3, #0]
	receivingI2C = 0;
    2798:	4b0c      	ldr	r3, [pc, #48]	; (27cc <parsePreset+0xf2c>)
    279a:	701d      	strb	r5, [r3, #0]
    279c:	f7ff b918 	b.w	19d0 <parsePreset+0x130>
    27a0:	200180c8 	.word	0x200180c8
    27a4:	200004b1 	.word	0x200004b1
    27a8:	00000000 	.word	0x00000000
    27ac:	20018a54 	.word	0x20018a54
    27b0:	20019b94 	.word	0x20019b94
    27b4:	20000728 	.word	0x20000728
    27b8:	20000724 	.word	0x20000724
    27bc:	2000074c 	.word	0x2000074c
    27c0:	20000750 	.word	0x20000750
    27c4:	20004f1c 	.word	0x20004f1c
    27c8:	20013f10 	.word	0x20013f10
    27cc:	20019fa8 	.word	0x20019fa8
    27d0:	f3af 8000 	nop.w
    27d4:	f3af 8000 	nop.w
    27d8:	f3af 8000 	nop.w
    27dc:	f3af 8000 	nop.w

000027e0 <handleSPI>:
{
    27e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27e4:	b082      	sub	sp, #8
    27e6:	4604      	mov	r4, r0
	interruptChecker = 1;
    27e8:	4b71      	ldr	r3, [pc, #452]	; (29b0 <handleSPI+0x1d0>)
    27ea:	2201      	movs	r2, #1
    27ec:	701a      	strb	r2, [r3, #0]
	if (foundBrainFirmware)
    27ee:	4b71      	ldr	r3, [pc, #452]	; (29b4 <handleSPI+0x1d4>)
    27f0:	781a      	ldrb	r2, [r3, #0]
    27f2:	2a00      	cmp	r2, #0
    27f4:	f000 8086 	beq.w	2904 <handleSPI+0x124>
		if (brainFirmwareEndSignal)
    27f8:	4b6f      	ldr	r3, [pc, #444]	; (29b8 <handleSPI+0x1d8>)
    27fa:	681b      	ldr	r3, [r3, #0]
    27fc:	b1fb      	cbz	r3, 283e <handleSPI+0x5e>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    27fe:	4b6f      	ldr	r3, [pc, #444]	; (29bc <handleSPI+0x1dc>)
    2800:	22f9      	movs	r2, #249	; 0xf9
    2802:	541a      	strb	r2, [r3, r0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2804:	4a6e      	ldr	r2, [pc, #440]	; (29c0 <handleSPI+0x1e0>)
    2806:	6812      	ldr	r2, [r2, #0]
    2808:	0e10      	lsrs	r0, r2, #24
    280a:	1c61      	adds	r1, r4, #1
    280c:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    280e:	0c10      	lsrs	r0, r2, #16
    2810:	1ca1      	adds	r1, r4, #2
    2812:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    2814:	0a10      	lsrs	r0, r2, #8
    2816:	1ce1      	adds	r1, r4, #3
    2818:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    281a:	1d21      	adds	r1, r4, #4
    281c:	3a00      	subs	r2, #0
    281e:	bf18      	it	ne
    2820:	2201      	movne	r2, #1
    2822:	545a      	strb	r2, [r3, r1]
			SPI_LEVERS_TX[offset+31] = 254;
    2824:	341f      	adds	r4, #31
    2826:	22fe      	movs	r2, #254	; 0xfe
    2828:	551a      	strb	r2, [r3, r4]
			brainFirmwareEndSignal = 0;
    282a:	2300      	movs	r3, #0
    282c:	4a62      	ldr	r2, [pc, #392]	; (29b8 <handleSPI+0x1d8>)
    282e:	6013      	str	r3, [r2, #0]
			brainFirmwareSendInProgress = 0;
    2830:	4a64      	ldr	r2, [pc, #400]	; (29c4 <handleSPI+0x1e4>)
    2832:	6013      	str	r3, [r2, #0]
			foundBrainFirmware = 0;
    2834:	4a5f      	ldr	r2, [pc, #380]	; (29b4 <handleSPI+0x1d4>)
    2836:	7013      	strb	r3, [r2, #0]
}
    2838:	b002      	add	sp, #8
    283a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if (brainFirmwareSendInProgress)
    283e:	4b61      	ldr	r3, [pc, #388]	; (29c4 <handleSPI+0x1e4>)
    2840:	681b      	ldr	r3, [r3, #0]
    2842:	2b00      	cmp	r3, #0
    2844:	d046      	beq.n	28d4 <handleSPI+0xf4>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    2846:	4b5d      	ldr	r3, [pc, #372]	; (29bc <handleSPI+0x1dc>)
    2848:	22fb      	movs	r2, #251	; 0xfb
    284a:	541a      	strb	r2, [r3, r0]
			for (int i = 0; i < 30; i++)
    284c:	2500      	movs	r5, #0
			uint8_t rowEnded = 0;
    284e:	462f      	mov	r7, r5
			for (int i = 0; i < 30; i++)
    2850:	e008      	b.n	2864 <handleSPI+0x84>
					rowEnded = 1;
    2852:	2701      	movs	r7, #1
				positionInRowLine++;
    2854:	3301      	adds	r3, #1
    2856:	4a5c      	ldr	r2, [pc, #368]	; (29c8 <handleSPI+0x1e8>)
    2858:	8013      	strh	r3, [r2, #0]
				if (rowEnded == 0)
    285a:	b9bf      	cbnz	r7, 288c <handleSPI+0xac>
					brainFirmwareBufferIndex += 2;
    285c:	3602      	adds	r6, #2
    285e:	4b5b      	ldr	r3, [pc, #364]	; (29cc <handleSPI+0x1ec>)
    2860:	601e      	str	r6, [r3, #0]
			for (int i = 0; i < 30; i++)
    2862:	3501      	adds	r5, #1
    2864:	2d1d      	cmp	r5, #29
    2866:	dc27      	bgt.n	28b8 <handleSPI+0xd8>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    2868:	4b58      	ldr	r3, [pc, #352]	; (29cc <handleSPI+0x1ec>)
    286a:	681e      	ldr	r6, [r3, #0]
    286c:	4b58      	ldr	r3, [pc, #352]	; (29d0 <handleSPI+0x1f0>)
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    286e:	1c72      	adds	r2, r6, #1
				uint8_t valToSend = fromAscii(val1, val2);
    2870:	5c99      	ldrb	r1, [r3, r2]
    2872:	5d98      	ldrb	r0, [r3, r6]
    2874:	f005 fc34 	bl	80e0 <__fromAscii_veneer>
				if (positionInRowLine < 294)
    2878:	4b53      	ldr	r3, [pc, #332]	; (29c8 <handleSPI+0x1e8>)
    287a:	881b      	ldrh	r3, [r3, #0]
    287c:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
    2880:	d2e7      	bcs.n	2852 <handleSPI+0x72>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2882:	1962      	adds	r2, r4, r5
    2884:	3201      	adds	r2, #1
    2886:	494d      	ldr	r1, [pc, #308]	; (29bc <handleSPI+0x1dc>)
    2888:	5488      	strb	r0, [r1, r2]
    288a:	e7e3      	b.n	2854 <handleSPI+0x74>
					positionInRowLine = 0;
    288c:	2300      	movs	r3, #0
    288e:	4a4e      	ldr	r2, [pc, #312]	; (29c8 <handleSPI+0x1e8>)
    2890:	8013      	strh	r3, [r2, #0]
					for (uint8_t j = 0; j<10; j++)
    2892:	e001      	b.n	2898 <handleSPI+0xb8>
    2894:	3301      	adds	r3, #1
    2896:	b2db      	uxtb	r3, r3
    2898:	2b09      	cmp	r3, #9
    289a:	d80a      	bhi.n	28b2 <handleSPI+0xd2>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    289c:	4a4b      	ldr	r2, [pc, #300]	; (29cc <handleSPI+0x1ec>)
    289e:	6812      	ldr	r2, [r2, #0]
    28a0:	441a      	add	r2, r3
    28a2:	494b      	ldr	r1, [pc, #300]	; (29d0 <handleSPI+0x1f0>)
    28a4:	5c89      	ldrb	r1, [r1, r2]
    28a6:	293a      	cmp	r1, #58	; 0x3a
    28a8:	d1f4      	bne.n	2894 <handleSPI+0xb4>
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    28aa:	3201      	adds	r2, #1
    28ac:	4947      	ldr	r1, [pc, #284]	; (29cc <handleSPI+0x1ec>)
    28ae:	600a      	str	r2, [r1, #0]
    28b0:	e7f0      	b.n	2894 <handleSPI+0xb4>
					i-=1;//push i back one because otherwise it increments even though we didn't send, just prepped for next send
    28b2:	3d01      	subs	r5, #1
					rowEnded = 0;
    28b4:	2700      	movs	r7, #0
    28b6:	e7d4      	b.n	2862 <handleSPI+0x82>
			SPI_LEVERS_TX[offset+31] = 254;
    28b8:	341f      	adds	r4, #31
    28ba:	4b40      	ldr	r3, [pc, #256]	; (29bc <handleSPI+0x1dc>)
    28bc:	22fe      	movs	r2, #254	; 0xfe
    28be:	551a      	strb	r2, [r3, r4]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    28c0:	4b42      	ldr	r3, [pc, #264]	; (29cc <handleSPI+0x1ec>)
    28c2:	681a      	ldr	r2, [r3, #0]
    28c4:	4b3e      	ldr	r3, [pc, #248]	; (29c0 <handleSPI+0x1e0>)
    28c6:	681b      	ldr	r3, [r3, #0]
    28c8:	429a      	cmp	r2, r3
    28ca:	d3b5      	bcc.n	2838 <handleSPI+0x58>
				brainFirmwareEndSignal = 1;
    28cc:	4b3a      	ldr	r3, [pc, #232]	; (29b8 <handleSPI+0x1d8>)
    28ce:	2201      	movs	r2, #1
    28d0:	601a      	str	r2, [r3, #0]
    28d2:	e7b1      	b.n	2838 <handleSPI+0x58>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    28d4:	4b39      	ldr	r3, [pc, #228]	; (29bc <handleSPI+0x1dc>)
    28d6:	22fc      	movs	r2, #252	; 0xfc
    28d8:	541a      	strb	r2, [r3, r0]
			brainFirmwareSendInProgress = 1;
    28da:	4b3a      	ldr	r3, [pc, #232]	; (29c4 <handleSPI+0x1e4>)
    28dc:	2201      	movs	r2, #1
    28de:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i<100; i++)
    28e0:	2300      	movs	r3, #0
    28e2:	e001      	b.n	28e8 <handleSPI+0x108>
    28e4:	3301      	adds	r3, #1
    28e6:	b2db      	uxtb	r3, r3
    28e8:	2b63      	cmp	r3, #99	; 0x63
    28ea:	d807      	bhi.n	28fc <handleSPI+0x11c>
				if (brainFirmwareBuffer[i] ==  0x3a)
    28ec:	4a38      	ldr	r2, [pc, #224]	; (29d0 <handleSPI+0x1f0>)
    28ee:	5cd2      	ldrb	r2, [r2, r3]
    28f0:	2a3a      	cmp	r2, #58	; 0x3a
    28f2:	d1f7      	bne.n	28e4 <handleSPI+0x104>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    28f4:	1c5a      	adds	r2, r3, #1
    28f6:	4935      	ldr	r1, [pc, #212]	; (29cc <handleSPI+0x1ec>)
    28f8:	600a      	str	r2, [r1, #0]
    28fa:	e7f3      	b.n	28e4 <handleSPI+0x104>
			positionInRowLine = 0;
    28fc:	4b32      	ldr	r3, [pc, #200]	; (29c8 <handleSPI+0x1e8>)
    28fe:	2200      	movs	r2, #0
    2900:	801a      	strh	r2, [r3, #0]
    2902:	e799      	b.n	2838 <handleSPI+0x58>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    2904:	4b2d      	ldr	r3, [pc, #180]	; (29bc <handleSPI+0x1dc>)
    2906:	4403      	add	r3, r0
    2908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    290c:	2b01      	cmp	r3, #1
    290e:	d014      	beq.n	293a <handleSPI+0x15a>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    2910:	2b0c      	cmp	r3, #12
    2912:	f200 8193 	bhi.w	2c3c <handleSPI+0x45c>
    2916:	2b02      	cmp	r3, #2
    2918:	d36c      	bcc.n	29f4 <handleSPI+0x214>
    291a:	3b02      	subs	r3, #2
    291c:	2b0a      	cmp	r3, #10
    291e:	d869      	bhi.n	29f4 <handleSPI+0x214>
    2920:	e8df f013 	tbh	[pc, r3, lsl #1]
    2924:	01e001a7 	.word	0x01e001a7
    2928:	00680068 	.word	0x00680068
    292c:	04a20252 	.word	0x04a20252
    2930:	00680068 	.word	0x00680068
    2934:	0623060a 	.word	0x0623060a
    2938:	062d      	.short	0x062d
			 uint8_t currentByte = offset+1;
    293a:	1c41      	adds	r1, r0, #1
    293c:	b2c9      	uxtb	r1, r1
			 for (int i = 0; i < numStringsThisBoard; i++)
    293e:	2200      	movs	r2, #0
    2940:	e000      	b.n	2944 <handleSPI+0x164>
    2942:	3201      	adds	r2, #1
    2944:	4b23      	ldr	r3, [pc, #140]	; (29d4 <handleSPI+0x1f4>)
    2946:	781b      	ldrb	r3, [r3, #0]
    2948:	4293      	cmp	r3, r2
    294a:	dd4d      	ble.n	29e8 <handleSPI+0x208>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    294c:	4d22      	ldr	r5, [pc, #136]	; (29d8 <handleSPI+0x1f8>)
    294e:	682b      	ldr	r3, [r5, #0]
    2950:	4413      	add	r3, r2
    2952:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2956:	4819      	ldr	r0, [pc, #100]	; (29bc <handleSPI+0x1dc>)
    2958:	4403      	add	r3, r0
    295a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    295e:	021b      	lsls	r3, r3, #8
    2960:	ee07 3a90 	vmov	s15, r3
    2964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2968:	682b      	ldr	r3, [r5, #0]
    296a:	4413      	add	r3, r2
    296c:	005b      	lsls	r3, r3, #1
    296e:	3301      	adds	r3, #1
    2970:	440b      	add	r3, r1
    2972:	4418      	add	r0, r3
    2974:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    2978:	ee07 3a10 	vmov	s14, r3
    297c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2980:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2984:	ed9f 7a15 	vldr	s14, [pc, #84]	; 29dc <handleSPI+0x1fc>
    2988:	ee67 7a87 	vmul.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    298c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2994:	ddd5      	ble.n	2942 <handleSPI+0x162>
    2996:	ed9f 7a12 	vldr	s14, [pc, #72]	; 29e0 <handleSPI+0x200>
    299a:	eef4 7ac7 	vcmpe.f32	s15, s14
    299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    29a2:	d5ce      	bpl.n	2942 <handleSPI+0x162>
					stringMIDIPitches[i] = myPitch;
    29a4:	4b0f      	ldr	r3, [pc, #60]	; (29e4 <handleSPI+0x204>)
    29a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29aa:	edc3 7a00 	vstr	s15, [r3]
    29ae:	e7c8      	b.n	2942 <handleSPI+0x162>
    29b0:	20016093 	.word	0x20016093
    29b4:	20016090 	.word	0x20016090
    29b8:	20013ec4 	.word	0x20013ec4
    29bc:	30000800 	.word	0x30000800
    29c0:	20013ecc 	.word	0x20013ecc
    29c4:	20013ec8 	.word	0x20013ec8
    29c8:	20019b7c 	.word	0x20019b7c
    29cc:	20013ec0 	.word	0x20013ec0
    29d0:	61e00000 	.word	0x61e00000
    29d4:	200004b1 	.word	0x200004b1
    29d8:	20004ddc 	.word	0x20004ddc
    29dc:	3b000080 	.word	0x3b000080
    29e0:	430c0000 	.word	0x430c0000
    29e4:	20013dec 	.word	0x20013dec
			 whichBar = 0;
    29e8:	4bc0      	ldr	r3, [pc, #768]	; (2cec <handleSPI+0x50c>)
    29ea:	2200      	movs	r2, #0
    29ec:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    29ee:	4620      	mov	r0, r4
    29f0:	f7fe fb46 	bl	1080 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    29f4:	4bbe      	ldr	r3, [pc, #760]	; (2cf0 <handleSPI+0x510>)
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	2b00      	cmp	r3, #0
    29fa:	f47f af1d 	bne.w	2838 <handleSPI+0x58>
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    29fe:	4bbd      	ldr	r3, [pc, #756]	; (2cf4 <handleSPI+0x514>)
    2a00:	22fd      	movs	r2, #253	; 0xfd
    2a02:	551a      	strb	r2, [r3, r4]
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    2a04:	1c62      	adds	r2, r4, #1
    2a06:	49bc      	ldr	r1, [pc, #752]	; (2cf8 <handleSPI+0x518>)
    2a08:	7808      	ldrb	r0, [r1, #0]
    2a0a:	5498      	strb	r0, [r3, r2]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2a0c:	7808      	ldrb	r0, [r1, #0]
    2a0e:	1ca5      	adds	r5, r4, #2
    2a10:	4aba      	ldr	r2, [pc, #744]	; (2cfc <handleSPI+0x51c>)
    2a12:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a16:	0040      	lsls	r0, r0, #1
    2a18:	5c10      	ldrb	r0, [r2, r0]
    2a1a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    2a1c:	7808      	ldrb	r0, [r1, #0]
    2a1e:	1ce5      	adds	r5, r4, #3
    2a20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a24:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a28:	7840      	ldrb	r0, [r0, #1]
    2a2a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    2a2c:	7808      	ldrb	r0, [r1, #0]
    2a2e:	1d25      	adds	r5, r4, #4
    2a30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a34:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a38:	7880      	ldrb	r0, [r0, #2]
    2a3a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2a3c:	7808      	ldrb	r0, [r1, #0]
    2a3e:	1d65      	adds	r5, r4, #5
    2a40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a44:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a48:	78c0      	ldrb	r0, [r0, #3]
    2a4a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2a4c:	7808      	ldrb	r0, [r1, #0]
    2a4e:	1da5      	adds	r5, r4, #6
    2a50:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a54:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a58:	7900      	ldrb	r0, [r0, #4]
    2a5a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2a5c:	7808      	ldrb	r0, [r1, #0]
    2a5e:	1de5      	adds	r5, r4, #7
    2a60:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a64:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a68:	7940      	ldrb	r0, [r0, #5]
    2a6a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2a6c:	7808      	ldrb	r0, [r1, #0]
    2a6e:	f104 0508 	add.w	r5, r4, #8
    2a72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a76:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a7a:	7980      	ldrb	r0, [r0, #6]
    2a7c:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    2a7e:	7808      	ldrb	r0, [r1, #0]
    2a80:	f104 0509 	add.w	r5, r4, #9
    2a84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a88:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a8c:	79c0      	ldrb	r0, [r0, #7]
    2a8e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    2a90:	7808      	ldrb	r0, [r1, #0]
    2a92:	f104 050a 	add.w	r5, r4, #10
    2a96:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2a9a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2a9e:	7a00      	ldrb	r0, [r0, #8]
    2aa0:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    2aa2:	7808      	ldrb	r0, [r1, #0]
    2aa4:	f104 050b 	add.w	r5, r4, #11
    2aa8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2aac:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ab0:	7a40      	ldrb	r0, [r0, #9]
    2ab2:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2ab4:	7808      	ldrb	r0, [r1, #0]
    2ab6:	f104 050c 	add.w	r5, r4, #12
    2aba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2abe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ac2:	7a80      	ldrb	r0, [r0, #10]
    2ac4:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    2ac6:	7808      	ldrb	r0, [r1, #0]
    2ac8:	f104 050d 	add.w	r5, r4, #13
    2acc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ad0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ad4:	7ac0      	ldrb	r0, [r0, #11]
    2ad6:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    2ad8:	7808      	ldrb	r0, [r1, #0]
    2ada:	f104 050e 	add.w	r5, r4, #14
    2ade:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ae2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ae6:	7b00      	ldrb	r0, [r0, #12]
    2ae8:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    2aea:	7808      	ldrb	r0, [r1, #0]
    2aec:	f104 050f 	add.w	r5, r4, #15
    2af0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2af4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    2af8:	7b52      	ldrb	r2, [r2, #13]
    2afa:	555a      	strb	r2, [r3, r5]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2afc:	f104 0010 	add.w	r0, r4, #16
    2b00:	4e7f      	ldr	r6, [pc, #508]	; (2d00 <handleSPI+0x520>)
    2b02:	7832      	ldrb	r2, [r6, #0]
    2b04:	541a      	strb	r2, [r3, r0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2b06:	780d      	ldrb	r5, [r1, #0]
    2b08:	f104 0711 	add.w	r7, r4, #17
    2b0c:	487d      	ldr	r0, [pc, #500]	; (2d04 <handleSPI+0x524>)
    2b0e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    2b12:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b16:	00ed      	lsls	r5, r5, #3
    2b18:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b1c:	5d45      	ldrb	r5, [r0, r5]
    2b1e:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    2b20:	780d      	ldrb	r5, [r1, #0]
    2b22:	f104 0712 	add.w	r7, r4, #18
    2b26:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b2a:	00ed      	lsls	r5, r5, #3
    2b2c:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b30:	4405      	add	r5, r0
    2b32:	786d      	ldrb	r5, [r5, #1]
    2b34:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    2b36:	780d      	ldrb	r5, [r1, #0]
    2b38:	f104 0713 	add.w	r7, r4, #19
    2b3c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b40:	00ed      	lsls	r5, r5, #3
    2b42:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b46:	4405      	add	r5, r0
    2b48:	78ad      	ldrb	r5, [r5, #2]
    2b4a:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    2b4c:	780d      	ldrb	r5, [r1, #0]
    2b4e:	f104 0714 	add.w	r7, r4, #20
    2b52:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b56:	00ed      	lsls	r5, r5, #3
    2b58:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b5c:	4405      	add	r5, r0
    2b5e:	78ed      	ldrb	r5, [r5, #3]
    2b60:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    2b62:	780d      	ldrb	r5, [r1, #0]
    2b64:	f104 0715 	add.w	r7, r4, #21
    2b68:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b6c:	00ed      	lsls	r5, r5, #3
    2b6e:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b72:	4405      	add	r5, r0
    2b74:	792d      	ldrb	r5, [r5, #4]
    2b76:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    2b78:	780d      	ldrb	r5, [r1, #0]
    2b7a:	f104 0716 	add.w	r7, r4, #22
    2b7e:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b82:	00ed      	lsls	r5, r5, #3
    2b84:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b88:	4405      	add	r5, r0
    2b8a:	796d      	ldrb	r5, [r5, #5]
    2b8c:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    2b8e:	780d      	ldrb	r5, [r1, #0]
    2b90:	f104 0717 	add.w	r7, r4, #23
    2b94:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2b98:	00ed      	lsls	r5, r5, #3
    2b9a:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2b9e:	4405      	add	r5, r0
    2ba0:	79ad      	ldrb	r5, [r5, #6]
    2ba2:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    2ba4:	780d      	ldrb	r5, [r1, #0]
    2ba6:	f104 0718 	add.w	r7, r4, #24
    2baa:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2bae:	00ed      	lsls	r5, r5, #3
    2bb0:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2bb4:	4405      	add	r5, r0
    2bb6:	79ed      	ldrb	r5, [r5, #7]
    2bb8:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    2bba:	780d      	ldrb	r5, [r1, #0]
    2bbc:	f104 0719 	add.w	r7, r4, #25
    2bc0:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    2bc4:	00ed      	lsls	r5, r5, #3
    2bc6:	eb05 054c 	add.w	r5, r5, ip, lsl #1
    2bca:	4405      	add	r5, r0
    2bcc:	7a2d      	ldrb	r5, [r5, #8]
    2bce:	55dd      	strb	r5, [r3, r7]
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    2bd0:	7809      	ldrb	r1, [r1, #0]
    2bd2:	f104 051a 	add.w	r5, r4, #26
    2bd6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    2bda:	00c9      	lsls	r1, r1, #3
    2bdc:	eb01 014c 	add.w	r1, r1, ip, lsl #1
    2be0:	4408      	add	r0, r1
    2be2:	7a41      	ldrb	r1, [r0, #9]
    2be4:	5559      	strb	r1, [r3, r5]
				SPI_LEVERS_TX[offset+27] = 13;
    2be6:	f104 001b 	add.w	r0, r4, #27
    2bea:	210d      	movs	r1, #13
    2bec:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+28] = 13;
    2bee:	f104 001c 	add.w	r0, r4, #28
    2bf2:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+29] = 13;
    2bf4:	f104 001d 	add.w	r0, r4, #29
    2bf8:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    2bfa:	4943      	ldr	r1, [pc, #268]	; (2d08 <handleSPI+0x528>)
    2bfc:	8809      	ldrh	r1, [r1, #0]
    2bfe:	b289      	uxth	r1, r1
    2c00:	f104 001e 	add.w	r0, r4, #30
    2c04:	3900      	subs	r1, #0
    2c06:	bf18      	it	ne
    2c08:	2101      	movne	r1, #1
    2c0a:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+31] = 254;
    2c0c:	341f      	adds	r4, #31
    2c0e:	21fe      	movs	r1, #254	; 0xfe
    2c10:	5519      	strb	r1, [r3, r4]
				whichMacroToSendName = (whichMacroToSendName + 1);
    2c12:	3201      	adds	r2, #1
    2c14:	b2d2      	uxtb	r2, r2
    2c16:	7032      	strb	r2, [r6, #0]
				if (whichMacroToSendName >= 12)
    2c18:	2a0b      	cmp	r2, #11
    2c1a:	f67f ae0d 	bls.w	2838 <handleSPI+0x58>
					whichMacroToSendName = 0;
    2c1e:	2200      	movs	r2, #0
    2c20:	7032      	strb	r2, [r6, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2c22:	4935      	ldr	r1, [pc, #212]	; (2cf8 <handleSPI+0x518>)
    2c24:	780b      	ldrb	r3, [r1, #0]
    2c26:	3301      	adds	r3, #1
    2c28:	1ad2      	subs	r2, r2, r3
    2c2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2c2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    2c32:	bf58      	it	pl
    2c34:	4253      	negpl	r3, r2
    2c36:	b2db      	uxtb	r3, r3
    2c38:	700b      	strb	r3, [r1, #0]
}
    2c3a:	e5fd      	b.n	2838 <handleSPI+0x58>
    2c3c:	2bfd      	cmp	r3, #253	; 0xfd
    2c3e:	f47f aed9 	bne.w	29f4 <handleSPI+0x214>
			if(writingState == ReceivingPreset)
    2c42:	4b32      	ldr	r3, [pc, #200]	; (2d0c <handleSPI+0x52c>)
    2c44:	781b      	ldrb	r3, [r3, #0]
    2c46:	b2db      	uxtb	r3, r3
    2c48:	2b02      	cmp	r3, #2
    2c4a:	f47f aed3 	bne.w	29f4 <handleSPI+0x214>
				 writingState = 0;
    2c4e:	4b2f      	ldr	r3, [pc, #188]	; (2d0c <handleSPI+0x52c>)
    2c50:	2200      	movs	r2, #0
    2c52:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    2c54:	4b2e      	ldr	r3, [pc, #184]	; (2d10 <handleSPI+0x530>)
    2c56:	781b      	ldrb	r3, [r3, #0]
    2c58:	b2db      	uxtb	r3, r3
    2c5a:	4a2e      	ldr	r2, [pc, #184]	; (2d14 <handleSPI+0x534>)
    2c5c:	7013      	strb	r3, [r2, #0]
				 presetWaitingToParse = bufferPos;
    2c5e:	4a2e      	ldr	r2, [pc, #184]	; (2d18 <handleSPI+0x538>)
    2c60:	8813      	ldrh	r3, [r2, #0]
    2c62:	b29b      	uxth	r3, r3
    2c64:	492d      	ldr	r1, [pc, #180]	; (2d1c <handleSPI+0x53c>)
    2c66:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    2c68:	8813      	ldrh	r3, [r2, #0]
    2c6a:	b29b      	uxth	r3, r3
    2c6c:	4a2c      	ldr	r2, [pc, #176]	; (2d20 <handleSPI+0x540>)
    2c6e:	6013      	str	r3, [r2, #0]
    2c70:	e6c0      	b.n	29f4 <handleSPI+0x214>
			 if (writingState != ReceivingPreset)
    2c72:	4b26      	ldr	r3, [pc, #152]	; (2d0c <handleSPI+0x52c>)
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	b2db      	uxtb	r3, r3
    2c78:	2b02      	cmp	r3, #2
    2c7a:	d017      	beq.n	2cac <handleSPI+0x4cc>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    2c7c:	4b23      	ldr	r3, [pc, #140]	; (2d0c <handleSPI+0x52c>)
    2c7e:	2202      	movs	r2, #2
    2c80:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    2c82:	2300      	movs	r3, #0
    2c84:	e007      	b.n	2c96 <handleSPI+0x4b6>
						audioOutBuffer[i] = 0;
    2c86:	4a27      	ldr	r2, [pc, #156]	; (2d24 <handleSPI+0x544>)
    2c88:	2100      	movs	r1, #0
    2c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						audioOutBuffer[i + 1] = 0;
    2c8e:	1c58      	adds	r0, r3, #1
    2c90:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    2c94:	3302      	adds	r3, #2
    2c96:	2bff      	cmp	r3, #255	; 0xff
    2c98:	ddf5      	ble.n	2c86 <handleSPI+0x4a6>
				 diskBusy = 1;
    2c9a:	4b23      	ldr	r3, [pc, #140]	; (2d28 <handleSPI+0x548>)
    2c9c:	2201      	movs	r2, #1
    2c9e:	701a      	strb	r2, [r3, #0]
				 audioMasterLevel = 0.0f;
    2ca0:	4b22      	ldr	r3, [pc, #136]	; (2d2c <handleSPI+0x54c>)
    2ca2:	2200      	movs	r2, #0
    2ca4:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    2ca6:	4b1c      	ldr	r3, [pc, #112]	; (2d18 <handleSPI+0x538>)
    2ca8:	2200      	movs	r2, #0
    2caa:	801a      	strh	r2, [r3, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    2cac:	1c62      	adds	r2, r4, #1
    2cae:	4b11      	ldr	r3, [pc, #68]	; (2cf4 <handleSPI+0x514>)
    2cb0:	4413      	add	r3, r2
    2cb2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    2cb6:	4b16      	ldr	r3, [pc, #88]	; (2d10 <handleSPI+0x530>)
    2cb8:	701a      	strb	r2, [r3, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    2cba:	1ca6      	adds	r6, r4, #2
    2cbc:	b2f6      	uxtb	r6, r6
			 for (int i = 0; i < 28; i++)
    2cbe:	2200      	movs	r2, #0
    2cc0:	2a1b      	cmp	r2, #27
    2cc2:	f73f ae97 	bgt.w	29f4 <handleSPI+0x214>
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    2cc6:	18b5      	adds	r5, r6, r2
    2cc8:	4813      	ldr	r0, [pc, #76]	; (2d18 <handleSPI+0x538>)
    2cca:	8803      	ldrh	r3, [r0, #0]
    2ccc:	b29b      	uxth	r3, r3
    2cce:	1c59      	adds	r1, r3, #1
    2cd0:	b289      	uxth	r1, r1
    2cd2:	8001      	strh	r1, [r0, #0]
    2cd4:	4907      	ldr	r1, [pc, #28]	; (2cf4 <handleSPI+0x514>)
    2cd6:	4429      	add	r1, r5
    2cd8:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    2cdc:	4914      	ldr	r1, [pc, #80]	; (2d30 <handleSPI+0x550>)
    2cde:	54c8      	strb	r0, [r1, r3]
			 for (int i = 0; i < 28; i++)
    2ce0:	3201      	adds	r2, #1
    2ce2:	e7ed      	b.n	2cc0 <handleSPI+0x4e0>
			 uint8_t currentByte = offset+1;
    2ce4:	1c47      	adds	r7, r0, #1
    2ce6:	b2ff      	uxtb	r7, r7
			for (int i = 0; i < 12; i++)
    2ce8:	2500      	movs	r5, #0
    2cea:	e029      	b.n	2d40 <handleSPI+0x560>
    2cec:	20013e28 	.word	0x20013e28
    2cf0:	20013ebd 	.word	0x20013ebd
    2cf4:	30000800 	.word	0x30000800
    2cf8:	2001c049 	.word	0x2001c049
    2cfc:	30042000 	.word	0x30042000
    2d00:	2001c048 	.word	0x2001c048
    2d04:	30043380 	.word	0x30043380
    2d08:	20005342 	.word	0x20005342
    2d0c:	2001c04a 	.word	0x2001c04a
    2d10:	20019b8f 	.word	0x20019b8f
    2d14:	20019b8e 	.word	0x20019b8e
    2d18:	20013ed4 	.word	0x20013ed4
    2d1c:	20019b94 	.word	0x20019b94
    2d20:	20019b98 	.word	0x20019b98
    2d24:	30000000 	.word	0x30000000
    2d28:	20013f10 	.word	0x20013f10
    2d2c:	20000724 	.word	0x20000724
    2d30:	30042380 	.word	0x30042380
						knobFrozen[i] = 0;
    2d34:	4b9c      	ldr	r3, [pc, #624]	; (2fa8 <handleSPI+0x7c8>)
    2d36:	2200      	movs	r2, #0
    2d38:	555a      	strb	r2, [r3, r5]
						prevKnobByte[i] = newByte;
    2d3a:	4b9c      	ldr	r3, [pc, #624]	; (2fac <handleSPI+0x7cc>)
    2d3c:	555e      	strb	r6, [r3, r5]
			for (int i = 0; i < 12; i++)
    2d3e:	3501      	adds	r5, #1
    2d40:	2d0b      	cmp	r5, #11
    2d42:	dc20      	bgt.n	2d86 <handleSPI+0x5a6>
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    2d44:	197a      	adds	r2, r7, r5
    2d46:	4b9a      	ldr	r3, [pc, #616]	; (2fb0 <handleSPI+0x7d0>)
    2d48:	4413      	add	r3, r2
    2d4a:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				if (knobFrozen[i])
    2d4e:	4b96      	ldr	r3, [pc, #600]	; (2fa8 <handleSPI+0x7c8>)
    2d50:	5d5b      	ldrb	r3, [r3, r5]
    2d52:	b143      	cbz	r3, 2d66 <handleSPI+0x586>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    2d54:	4b95      	ldr	r3, [pc, #596]	; (2fac <handleSPI+0x7cc>)
    2d56:	5d5b      	ldrb	r3, [r3, r5]
    2d58:	1c9a      	adds	r2, r3, #2
    2d5a:	4296      	cmp	r6, r2
    2d5c:	dcea      	bgt.n	2d34 <handleSPI+0x554>
    2d5e:	3b02      	subs	r3, #2
    2d60:	429e      	cmp	r6, r3
    2d62:	daec      	bge.n	2d3e <handleSPI+0x55e>
    2d64:	e7e6      	b.n	2d34 <handleSPI+0x554>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2d66:	ee07 6a90 	vmov	s15, r6
    2d6a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    2d6e:	eddf 7a91 	vldr	s15, [pc, #580]	; 2fb4 <handleSPI+0x7d4>
    2d72:	ee20 0a27 	vmul.f32	s0, s0, s15
    2d76:	4890      	ldr	r0, [pc, #576]	; (2fb8 <handleSPI+0x7d8>)
    2d78:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    2d7c:	f005 f9b4 	bl	80e8 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    2d80:	4b8a      	ldr	r3, [pc, #552]	; (2fac <handleSPI+0x7cc>)
    2d82:	555e      	strb	r6, [r3, r5]
    2d84:	e7db      	b.n	2d3e <handleSPI+0x55e>
			currentByte += 12;
    2d86:	f104 060d 	add.w	r6, r4, #13
    2d8a:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    2d8c:	2500      	movs	r5, #0
    2d8e:	e012      	b.n	2db6 <handleSPI+0x5d6>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2d90:	1972      	adds	r2, r6, r5
    2d92:	4b87      	ldr	r3, [pc, #540]	; (2fb0 <handleSPI+0x7d0>)
    2d94:	4413      	add	r3, r2
    2d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2d9a:	ee07 3a90 	vmov	s15, r3
    2d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2da2:	ed9f 0a84 	vldr	s0, [pc, #528]	; 2fb4 <handleSPI+0x7d4>
    2da6:	ee27 0a80 	vmul.f32	s0, s15, s0
    2daa:	4884      	ldr	r0, [pc, #528]	; (2fbc <handleSPI+0x7dc>)
    2dac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    2db0:	f005 f99a 	bl	80e8 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    2db4:	3501      	adds	r5, #1
    2db6:	2d09      	cmp	r5, #9
    2db8:	ddea      	ble.n	2d90 <handleSPI+0x5b0>
			whichBar = 1;
    2dba:	4b81      	ldr	r3, [pc, #516]	; (2fc0 <handleSPI+0x7e0>)
    2dbc:	2201      	movs	r2, #1
    2dbe:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    2dc0:	4620      	mov	r0, r4
    2dc2:	f7fe f95d 	bl	1080 <updateStateFromSPIMessage>
    2dc6:	e615      	b.n	29f4 <handleSPI+0x214>
			if (presetReady)
    2dc8:	4b7e      	ldr	r3, [pc, #504]	; (2fc4 <handleSPI+0x7e4>)
    2dca:	681b      	ldr	r3, [r3, #0]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	f43f ae11 	beq.w	29f4 <handleSPI+0x214>
				uint8_t currentByte = offset+1;
    2dd2:	1c43      	adds	r3, r0, #1
    2dd4:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    2dd6:	4a76      	ldr	r2, [pc, #472]	; (2fb0 <handleSPI+0x7d0>)
    2dd8:	18d1      	adds	r1, r2, r3
    2dda:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    2dde:	3301      	adds	r3, #1
    2de0:	441a      	add	r2, r3
    2de2:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
    2de6:	eb05 2501 	add.w	r5, r5, r1, lsl #8
    2dea:	b2ad      	uxth	r5, r5
				currentByte = currentByte + 2;
    2dec:	3003      	adds	r0, #3
    2dee:	b2c0      	uxtb	r0, r0
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2df0:	2200      	movs	r2, #0
    2df2:	2a01      	cmp	r2, #1
    2df4:	dc1b      	bgt.n	2e2e <handleSPI+0x64e>
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    2df6:	4b6e      	ldr	r3, [pc, #440]	; (2fb0 <handleSPI+0x7d0>)
    2df8:	1819      	adds	r1, r3, r0
    2dfa:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    2dfe:	1c46      	adds	r6, r0, #1
    2e00:	4433      	add	r3, r6
    2e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2e06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    2e0a:	ee07 3a90 	vmov	s15, r3
    2e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2e12:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 2fc8 <handleSPI+0x7e8>
    2e16:	ee67 7a87 	vmul.f32	s15, s15, s14
    2e1a:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2e1e:	4411      	add	r1, r2
    2e20:	4b6a      	ldr	r3, [pc, #424]	; (2fcc <handleSPI+0x7ec>)
    2e22:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2e26:	edc3 7a00 	vstr	s15, [r3]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2e2a:	3201      	adds	r2, #1
    2e2c:	e7e1      	b.n	2df2 <handleSPI+0x612>
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    2e2e:	f1a5 033f 	sub.w	r3, r5, #63	; 0x3f
    2e32:	b29b      	uxth	r3, r3
    2e34:	2b18      	cmp	r3, #24
    2e36:	d806      	bhi.n	2e46 <handleSPI+0x666>
    2e38:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
    2e3c:	fa22 f303 	lsr.w	r3, r2, r3
    2e40:	f013 0f01 	tst.w	r3, #1
    2e44:	d11f      	bne.n	2e86 <handleSPI+0x6a6>
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2e46:	2700      	movs	r7, #0
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2e48:	2f01      	cmp	r7, #1
    2e4a:	dc5c      	bgt.n	2f06 <handleSPI+0x726>
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    2e4c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2fcc <handleSPI+0x7ec>
    2e50:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
    2e54:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    2e58:	f8d8 3010 	ldr.w	r3, [r8, #16]
    2e5c:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
    2e60:	443e      	add	r6, r7
    2e62:	eb09 0286 	add.w	r2, r9, r6, lsl #2
    2e66:	ed92 0a00 	vldr	s0, [r2]
    2e6a:	4798      	blx	r3
    2e6c:	3602      	adds	r6, #2
    2e6e:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    2e72:	ed89 0a00 	vstr	s0, [r9]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    2e76:	f8d8 3014 	ldr.w	r3, [r8, #20]
    2e7a:	4639      	mov	r1, r7
    2e7c:	f898 0018 	ldrb.w	r0, [r8, #24]
    2e80:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2e82:	3701      	adds	r7, #1
    2e84:	e7e0      	b.n	2e48 <handleSPI+0x668>
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    2e86:	f1b5 033f 	subs.w	r3, r5, #63	; 0x3f
    2e8a:	d43a      	bmi.n	2f02 <handleSPI+0x722>
    2e8c:	10db      	asrs	r3, r3, #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    2e8e:	4f4f      	ldr	r7, [pc, #316]	; (2fcc <handleSPI+0x7ec>)
    2e90:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    2e94:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    2e98:	edd2 7a00 	vldr	s15, [r2]
    2e9c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    2ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
    2ea4:	fef8 7a67 	vrinta.f32	s15, s15
    2ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2eac:	edcd 7a01 	vstr	s15, [sp, #4]
    2eb0:	f89d 0004 	ldrb.w	r0, [sp, #4]
					param *FXAlias = &params[whichParam + 1];
    2eb4:	f105 0801 	add.w	r8, r5, #1
    2eb8:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    2ebc:	eb07 0782 	add.w	r7, r7, r2, lsl #2
					if (effectType > FXLowpass)
    2ec0:	280d      	cmp	r0, #13
    2ec2:	d901      	bls.n	2ec8 <handleSPI+0x6e8>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    2ec4:	4a42      	ldr	r2, [pc, #264]	; (2fd0 <handleSPI+0x7f0>)
    2ec6:	64ba      	str	r2, [r7, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    2ec8:	b2de      	uxtb	r6, r3
    2eca:	4631      	mov	r1, r6
    2ecc:	f005 f8bc 	bl	8048 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    2ed0:	4a40      	ldr	r2, [pc, #256]	; (2fd4 <handleSPI+0x7f4>)
    2ed2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    2ed6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    2eda:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
    2ede:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    2ee2:	483a      	ldr	r0, [pc, #232]	; (2fcc <handleSPI+0x7ec>)
    2ee4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2ee8:	f8c3 c014 	str.w	ip, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    2eec:	684b      	ldr	r3, [r1, #4]
    2eee:	633b      	str	r3, [r7, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    2ef0:	688b      	ldr	r3, [r1, #8]
    2ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    2ef4:	68cb      	ldr	r3, [r1, #12]
    2ef6:	66bb      	str	r3, [r7, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    2ef8:	460a      	mov	r2, r1
    2efa:	690b      	ldr	r3, [r1, #16]
    2efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    2f00:	e7a1      	b.n	2e46 <handleSPI+0x666>
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    2f02:	3307      	adds	r3, #7
    2f04:	e7c2      	b.n	2e8c <handleSPI+0x6ac>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    2f06:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    2f0a:	b29b      	uxth	r3, r3
    2f0c:	2b1a      	cmp	r3, #26
    2f0e:	d805      	bhi.n	2f1c <handleSPI+0x73c>
    2f10:	4a31      	ldr	r2, [pc, #196]	; (2fd8 <handleSPI+0x7f8>)
    2f12:	fa22 f303 	lsr.w	r3, r2, r3
    2f16:	f013 0f01 	tst.w	r3, #1
    2f1a:	d124      	bne.n	2f66 <handleSPI+0x786>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    2f1c:	2d25      	cmp	r5, #37	; 0x25
    2f1e:	bf18      	it	ne
    2f20:	2d18      	cmpne	r5, #24
    2f22:	d001      	beq.n	2f28 <handleSPI+0x748>
    2f24:	2d32      	cmp	r5, #50	; 0x32
    2f26:	d16c      	bne.n	3002 <_Min_Heap_Size+0x2>
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    2f28:	f1a5 0318 	sub.w	r3, r5, #24
    2f2c:	4a2b      	ldr	r2, [pc, #172]	; (2fdc <handleSPI+0x7fc>)
    2f2e:	fb82 1203 	smull	r1, r2, r2, r3
    2f32:	17db      	asrs	r3, r3, #31
    2f34:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    2f38:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2f3c:	4a23      	ldr	r2, [pc, #140]	; (2fcc <handleSPI+0x7ec>)
    2f3e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f42:	ed92 7a02 	vldr	s14, [r2, #8]
    2f46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2f52:	dd24      	ble.n	2f9e <handleSPI+0x7be>
						oscsEnabled[whichOsc] = 1;
    2f54:	2201      	movs	r2, #1
    2f56:	4922      	ldr	r1, [pc, #136]	; (2fe0 <handleSPI+0x800>)
    2f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						oscOn[whichOsc] = 1;
    2f5c:	4921      	ldr	r1, [pc, #132]	; (2fe4 <handleSPI+0x804>)
    2f5e:	54ca      	strb	r2, [r1, r3]
					for (int j = 0; j < 3; j++)
    2f60:	2300      	movs	r3, #0
					int enabledCount = 0;
    2f62:	461a      	mov	r2, r3
					for (int j = 0; j < 3; j++)
    2f64:	e045      	b.n	2ff2 <handleSPI+0x812>
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    2f66:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    2f6a:	491c      	ldr	r1, [pc, #112]	; (2fdc <handleSPI+0x7fc>)
    2f6c:	fb81 2103 	smull	r2, r1, r1, r3
    2f70:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    2f72:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    2f76:	4a15      	ldr	r2, [pc, #84]	; (2fcc <handleSPI+0x7ec>)
    2f78:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2f7c:	edd2 7a02 	vldr	s15, [r2, #8]
    2f80:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2f84:	ee67 7a87 	vmul.f32	s15, s15, s14
    2f88:	fef8 7a67 	vrinta.f32	s15, s15
					setOscilllatorShapes(oscshape, whichOsc);
    2f8c:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
    2f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2f94:	ee17 0a90 	vmov	r0, s15
    2f98:	f004 ff2a 	bl	7df0 <__setOscilllatorShapes_veneer>
    2f9c:	e7be      	b.n	2f1c <handleSPI+0x73c>
						oscsEnabled[whichOsc] = 0;
    2f9e:	4a10      	ldr	r2, [pc, #64]	; (2fe0 <handleSPI+0x800>)
    2fa0:	2100      	movs	r1, #0
    2fa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    2fa6:	e7db      	b.n	2f60 <handleSPI+0x780>
    2fa8:	20004dec 	.word	0x20004dec
    2fac:	20019b9c 	.word	0x20019b9c
    2fb0:	30000800 	.word	0x30000800
    2fb4:	3b808081 	.word	0x3b808081
    2fb8:	20004e28 	.word	0x20004e28
    2fbc:	20004ef4 	.word	0x20004ef4
    2fc0:	20013e28 	.word	0x20013e28
    2fc4:	20004f1c 	.word	0x20004f1c
    2fc8:	377ffff6 	.word	0x377ffff6
    2fcc:	20018a64 	.word	0x20018a64
    2fd0:	000016c1 	.word	0x000016c1
    2fd4:	20013f14 	.word	0x20013f14
    2fd8:	04002001 	.word	0x04002001
    2fdc:	4ec4ec4f 	.word	0x4ec4ec4f
    2fe0:	20018a58 	.word	0x20018a58
    2fe4:	2001cd60 	.word	0x2001cd60
						enabledCount += oscsEnabled[j];
    2fe8:	49be      	ldr	r1, [pc, #760]	; (32e4 <_Min_Heap_Size+0x2e4>)
    2fea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    2fee:	440a      	add	r2, r1
					for (int j = 0; j < 3; j++)
    2ff0:	3301      	adds	r3, #1
    2ff2:	2b02      	cmp	r3, #2
    2ff4:	ddf8      	ble.n	2fe8 <handleSPI+0x808>
					oscAmpMult = oscAmpMultArray[enabledCount];
    2ff6:	4bbc      	ldr	r3, [pc, #752]	; (32e8 <_Min_Heap_Size+0x2e8>)
    2ff8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2ffc:	681a      	ldr	r2, [r3, #0]
    2ffe:	4bbb      	ldr	r3, [pc, #748]	; (32ec <_Min_Heap_Size+0x2ec>)
    3000:	601a      	str	r2, [r3, #0]
				if ((whichParam == Noise))
    3002:	2d12      	cmp	r5, #18
    3004:	d052      	beq.n	30ac <_Min_Heap_Size+0xac>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    3006:	2d66      	cmp	r5, #102	; 0x66
    3008:	bf18      	it	ne
    300a:	2d60      	cmpne	r5, #96	; 0x60
    300c:	d060      	beq.n	30d0 <_Min_Heap_Size+0xd0>
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    300e:	2d8c      	cmp	r5, #140	; 0x8c
    3010:	bf18      	it	ne
    3012:	2d87      	cmpne	r5, #135	; 0x87
    3014:	d008      	beq.n	3028 <_Min_Heap_Size+0x28>
    3016:	2d96      	cmp	r5, #150	; 0x96
    3018:	bf14      	ite	ne
    301a:	2300      	movne	r3, #0
    301c:	2301      	moveq	r3, #1
    301e:	2d91      	cmp	r5, #145	; 0x91
    3020:	d002      	beq.n	3028 <_Min_Heap_Size+0x28>
    3022:	2b00      	cmp	r3, #0
    3024:	f000 80e2 	beq.w	31ec <_Min_Heap_Size+0x1ec>
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    3028:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
    302c:	4ab0      	ldr	r2, [pc, #704]	; (32f0 <_Min_Heap_Size+0x2f0>)
    302e:	fb82 1203 	smull	r1, r2, r2, r3
    3032:	17db      	asrs	r3, r3, #31
    3034:	ebc3 0662 	rsb	r6, r3, r2, asr #1
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    3038:	4fae      	ldr	r7, [pc, #696]	; (32f4 <_Min_Heap_Size+0x2f4>)
    303a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    303e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3042:	edd3 7a02 	vldr	s15, [r3, #8]
    3046:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    304a:	ee67 7a87 	vmul.f32	s15, s15, s14
    304e:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    3052:	4631      	mov	r1, r6
    3054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3058:	ee17 0a90 	vmov	r0, s15
    305c:	f004 ff10 	bl	7e80 <__setLFOShapes_veneer>
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    3060:	eb06 0886 	add.w	r8, r6, r6, lsl #2
    3064:	f108 0a84 	add.w	sl, r8, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    3068:	f108 0985 	add.w	r9, r8, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    306c:	f108 0886 	add.w	r8, r8, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3070:	4ba1      	ldr	r3, [pc, #644]	; (32f8 <_Min_Heap_Size+0x2f8>)
    3072:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    3076:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    307a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    307e:	ebca 02ca 	rsb	r2, sl, sl, lsl #3
    3082:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3086:	6150      	str	r0, [r2, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    3088:	6849      	ldr	r1, [r1, #4]
    308a:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    308e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3092:	6151      	str	r1, [r2, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    3094:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    3098:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    309c:	689b      	ldr	r3, [r3, #8]
    309e:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    30a2:	eb07 0782 	add.w	r7, r7, r2, lsl #2
    30a6:	617b      	str	r3, [r7, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    30a8:	2600      	movs	r6, #0
    30aa:	e09d      	b.n	31e8 <_Min_Heap_Size+0x1e8>
					if (params[whichParam].realVal[0]  > 0.5f)
    30ac:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    30b0:	4b90      	ldr	r3, [pc, #576]	; (32f4 <_Min_Heap_Size+0x2f4>)
    30b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    30b6:	ed93 7a02 	vldr	s14, [r3, #8]
    30ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    30be:	eeb4 7ae7 	vcmpe.f32	s14, s15
    30c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    30c6:	dd9e      	ble.n	3006 <_Min_Heap_Size+0x6>
						noiseOn = 1;
    30c8:	4b8c      	ldr	r3, [pc, #560]	; (32fc <_Min_Heap_Size+0x2fc>)
    30ca:	2201      	movs	r2, #1
    30cc:	701a      	strb	r2, [r3, #0]
    30ce:	e79a      	b.n	3006 <_Min_Heap_Size+0x6>
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    30d0:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    30d4:	4f8a      	ldr	r7, [pc, #552]	; (3300 <_Min_Heap_Size+0x300>)
    30d6:	fb87 2703 	smull	r2, r7, r7, r3
    30da:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    30de:	f8df 9214 	ldr.w	r9, [pc, #532]	; 32f4 <_Min_Heap_Size+0x2f4>
    30e2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    30e6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    30ea:	edd3 7a02 	vldr	s15, [r3, #8]
    30ee:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    30f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    30f6:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    30fa:	4639      	mov	r1, r7
    30fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3100:	ee17 0a90 	vmov	r0, s15
    3104:	f004 ff1c 	bl	7f40 <__setFilterTypes_veneer>
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    3108:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    310c:	0076      	lsls	r6, r6, #1
    310e:	f106 0863 	add.w	r8, r6, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    3112:	3662      	adds	r6, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    3114:	4b7b      	ldr	r3, [pc, #492]	; (3304 <_Min_Heap_Size+0x304>)
    3116:	f853 1037 	ldr.w	r1, [r3, r7, lsl #3]
    311a:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    311e:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    3122:	6151      	str	r1, [r2, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    3124:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    3128:	685a      	ldr	r2, [r3, #4]
    312a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    312e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3132:	615a      	str	r2, [r3, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3134:	2700      	movs	r7, #0
    3136:	e022      	b.n	317e <_Min_Heap_Size+0x17e>
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    3138:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 32f4 <_Min_Heap_Size+0x2f4>
    313c:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    3140:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    3144:	6942      	ldr	r2, [r0, #20]
    3146:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    314a:	443b      	add	r3, r7
    314c:	3302      	adds	r3, #2
    314e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3152:	4639      	mov	r1, r7
    3154:	7e00      	ldrb	r0, [r0, #24]
    3156:	ed93 0a00 	vldr	s0, [r3]
    315a:	4790      	blx	r2
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    315c:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    3160:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    3164:	6942      	ldr	r2, [r0, #20]
    3166:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    316a:	443b      	add	r3, r7
    316c:	3302      	adds	r3, #2
    316e:	eb09 0983 	add.w	r9, r9, r3, lsl #2
    3172:	4639      	mov	r1, r7
    3174:	7e00      	ldrb	r0, [r0, #24]
    3176:	ed99 0a00 	vldr	s0, [r9]
    317a:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    317c:	3701      	adds	r7, #1
    317e:	2f01      	cmp	r7, #1
    3180:	ddda      	ble.n	3138 <_Min_Heap_Size+0x138>
    3182:	e744      	b.n	300e <_Min_Heap_Size+0xe>
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    3184:	4f5b      	ldr	r7, [pc, #364]	; (32f4 <_Min_Heap_Size+0x2f4>)
    3186:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    318a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    318e:	6942      	ldr	r2, [r0, #20]
    3190:	ebca 03ca 	rsb	r3, sl, sl, lsl #3
    3194:	4433      	add	r3, r6
    3196:	3302      	adds	r3, #2
    3198:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    319c:	4631      	mov	r1, r6
    319e:	7e00      	ldrb	r0, [r0, #24]
    31a0:	ed93 0a00 	vldr	s0, [r3]
    31a4:	4790      	blx	r2
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    31a6:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
    31aa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    31ae:	6942      	ldr	r2, [r0, #20]
    31b0:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
    31b4:	4433      	add	r3, r6
    31b6:	3302      	adds	r3, #2
    31b8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    31bc:	4631      	mov	r1, r6
    31be:	7e00      	ldrb	r0, [r0, #24]
    31c0:	ed93 0a00 	vldr	s0, [r3]
    31c4:	4790      	blx	r2
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    31c6:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    31ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    31ce:	6942      	ldr	r2, [r0, #20]
    31d0:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    31d4:	4433      	add	r3, r6
    31d6:	3302      	adds	r3, #2
    31d8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    31dc:	4631      	mov	r1, r6
    31de:	7e00      	ldrb	r0, [r0, #24]
    31e0:	ed97 0a00 	vldr	s0, [r7]
    31e4:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    31e6:	3601      	adds	r6, #1
    31e8:	2e01      	cmp	r6, #1
    31ea:	ddcb      	ble.n	3184 <_Min_Heap_Size+0x184>
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    31ec:	2d01      	cmp	r5, #1
    31ee:	d914      	bls.n	321a <_Min_Heap_Size+0x21a>
				if (whichParam == FXOrder)
    31f0:	2d9a      	cmp	r5, #154	; 0x9a
    31f2:	d02a      	beq.n	324a <_Min_Heap_Size+0x24a>
				if (whichParam == PedalControlsMaster)
    31f4:	2d9b      	cmp	r5, #155	; 0x9b
    31f6:	f47f abfd 	bne.w	29f4 <handleSPI+0x214>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    31fa:	4b43      	ldr	r3, [pc, #268]	; (3308 <_Min_Heap_Size+0x308>)
    31fc:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    3200:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3204:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    320c:	bfcc      	ite	gt
    320e:	2201      	movgt	r2, #1
    3210:	2200      	movle	r2, #0
    3212:	4b3e      	ldr	r3, [pc, #248]	; (330c <_Min_Heap_Size+0x30c>)
    3214:	701a      	strb	r2, [r3, #0]
    3216:	f7ff bbed 	b.w	29f4 <handleSPI+0x214>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    321a:	4b36      	ldr	r3, [pc, #216]	; (32f4 <_Min_Heap_Size+0x2f4>)
    321c:	edd3 7a02 	vldr	s15, [r3, #8]
    3220:	eddf 6a3b 	vldr	s13, [pc, #236]	; 3310 <_Min_Heap_Size+0x310>
    3224:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3228:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    322c:	ee27 7a26 	vmul.f32	s14, s14, s13
    3230:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3234:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3238:	eec6 6a27 	vdiv.f32	s13, s12, s15
    323c:	4b35      	ldr	r3, [pc, #212]	; (3314 <_Min_Heap_Size+0x314>)
    323e:	edc3 6a00 	vstr	s13, [r3]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3242:	4b35      	ldr	r3, [pc, #212]	; (3318 <_Min_Heap_Size+0x318>)
    3244:	ed83 7a00 	vstr	s14, [r3]
    3248:	e7d2      	b.n	31f0 <_Min_Heap_Size+0x1f0>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    324a:	4b2f      	ldr	r3, [pc, #188]	; (3308 <_Min_Heap_Size+0x308>)
    324c:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    3250:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3254:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    325c:	bfcc      	ite	gt
    325e:	2201      	movgt	r2, #1
    3260:	2200      	movle	r2, #0
    3262:	4b2e      	ldr	r3, [pc, #184]	; (331c <_Min_Heap_Size+0x31c>)
    3264:	701a      	strb	r2, [r3, #0]
    3266:	e7c5      	b.n	31f4 <_Min_Heap_Size+0x1f4>
			if (presetReady)
    3268:	4b2d      	ldr	r3, [pc, #180]	; (3320 <_Min_Heap_Size+0x320>)
    326a:	681b      	ldr	r3, [r3, #0]
    326c:	2b00      	cmp	r3, #0
    326e:	f43f abc1 	beq.w	29f4 <handleSPI+0x214>
				uint8_t currentByte = offset+1;
    3272:	1c41      	adds	r1, r0, #1
    3274:	b2c9      	uxtb	r1, r1
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3276:	4b2b      	ldr	r3, [pc, #172]	; (3324 <_Min_Heap_Size+0x324>)
    3278:	1858      	adds	r0, r3, r1
    327a:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
    327e:	1c48      	adds	r0, r1, #1
    3280:	4418      	add	r0, r3
    3282:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
    3286:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    328a:	b2ad      	uxth	r5, r5
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    328c:	1c88      	adds	r0, r1, #2
    328e:	4418      	add	r0, r3
    3290:	f890 c040 	ldrb.w	ip, [r0, #64]	; 0x40
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3294:	1cc8      	adds	r0, r1, #3
    3296:	4418      	add	r0, r3
    3298:	f890 e040 	ldrb.w	lr, [r0, #64]	; 0x40
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    329c:	1d08      	adds	r0, r1, #4
    329e:	4418      	add	r0, r3
    32a0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    32a4:	3105      	adds	r1, #5
    32a6:	440b      	add	r3, r1
    32a8:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
    32ac:	eb06 2600 	add.w	r6, r6, r0, lsl #8
    32b0:	b236      	sxth	r6, r6
				uint8_t foundOne = 0;
    32b2:	4690      	mov	r8, r2
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    32b4:	2300      	movs	r3, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    32b6:	2720      	movs	r7, #32
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    32b8:	e004      	b.n	32c4 <_Min_Heap_Size+0x2c4>
						whichMapping = j;
    32ba:	b2da      	uxtb	r2, r3
						foundOne = 1;
    32bc:	f04f 0801 	mov.w	r8, #1
    32c0:	e00a      	b.n	32d8 <_Min_Heap_Size+0x2d8>
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    32c2:	3301      	adds	r3, #1
    32c4:	2b1f      	cmp	r3, #31
    32c6:	dc31      	bgt.n	332c <_Min_Heap_Size+0x32c>
					if (mappings[j].destNumber == destNumber)
    32c8:	214c      	movs	r1, #76	; 0x4c
    32ca:	fb03 f101 	mul.w	r1, r3, r1
    32ce:	4816      	ldr	r0, [pc, #88]	; (3328 <_Min_Heap_Size+0x328>)
    32d0:	5c41      	ldrb	r1, [r0, r1]
    32d2:	b288      	uxth	r0, r1
    32d4:	42a8      	cmp	r0, r5
    32d6:	d0f0      	beq.n	32ba <_Min_Heap_Size+0x2ba>
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    32d8:	29ff      	cmp	r1, #255	; 0xff
    32da:	d1f2      	bne.n	32c2 <_Min_Heap_Size+0x2c2>
    32dc:	429f      	cmp	r7, r3
    32de:	ddf0      	ble.n	32c2 <_Min_Heap_Size+0x2c2>
						lowestEmptyMapping = j;
    32e0:	b2df      	uxtb	r7, r3
    32e2:	e7ee      	b.n	32c2 <_Min_Heap_Size+0x2c2>
    32e4:	20018a58 	.word	0x20018a58
    32e8:	2000073c 	.word	0x2000073c
    32ec:	20000738 	.word	0x20000738
    32f0:	66666667 	.word	0x66666667
    32f4:	20018a64 	.word	0x20018a64
    32f8:	20018094 	.word	0x20018094
    32fc:	2001cd0c 	.word	0x2001cd0c
    3300:	2aaaaaab 	.word	0x2aaaaaab
    3304:	20015f68 	.word	0x20015f68
    3308:	20019a64 	.word	0x20019a64
    330c:	20019b74 	.word	0x20019b74
    3310:	42fe0000 	.word	0x42fe0000
    3314:	20018a48 	.word	0x20018a48
    3318:	20018a4c 	.word	0x20018a4c
    331c:	20016091 	.word	0x20016091
    3320:	20004f1c 	.word	0x20004f1c
    3324:	30000800 	.word	0x30000800
    3328:	200180c8 	.word	0x200180c8
				if (foundOne == 0)
    332c:	f1b8 0f00 	cmp.w	r8, #0
    3330:	d110      	bne.n	3354 <_Min_Heap_Size+0x354>
					numMappings++;
    3332:	4a98      	ldr	r2, [pc, #608]	; (3594 <_Min_Heap_Size+0x594>)
    3334:	7813      	ldrb	r3, [r2, #0]
    3336:	3301      	adds	r3, #1
    3338:	7013      	strb	r3, [r2, #0]
					mappings[whichMapping].destNumber = destNumber;
    333a:	4a97      	ldr	r2, [pc, #604]	; (3598 <_Min_Heap_Size+0x598>)
    333c:	234c      	movs	r3, #76	; 0x4c
    333e:	fb07 f303 	mul.w	r3, r7, r3
    3342:	18d1      	adds	r1, r2, r3
    3344:	54d5      	strb	r5, [r2, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3346:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    334a:	4b94      	ldr	r3, [pc, #592]	; (359c <_Min_Heap_Size+0x59c>)
    334c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3350:	604b      	str	r3, [r1, #4]
					whichMapping = lowestEmptyMapping;
    3352:	463a      	mov	r2, r7
				if (mappingChangeType == SourceID)
    3354:	f1be 0f00 	cmp.w	lr, #0
    3358:	f040 8091 	bne.w	347e <_Min_Heap_Size+0x47e>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    335c:	4615      	mov	r5, r2
    335e:	4b8e      	ldr	r3, [pc, #568]	; (3598 <_Min_Heap_Size+0x598>)
    3360:	214c      	movs	r1, #76	; 0x4c
    3362:	fb01 3302 	mla	r3, r1, r2, r3
    3366:	4463      	add	r3, ip
    3368:	2101      	movs	r1, #1
    336a:	f883 1020 	strb.w	r1, [r3, #32]
					if (source == 255)
    336e:	2eff      	cmp	r6, #255	; 0xff
    3370:	d009      	beq.n	3386 <_Min_Heap_Size+0x386>
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3372:	4b89      	ldr	r3, [pc, #548]	; (3598 <_Min_Heap_Size+0x598>)
    3374:	214c      	movs	r1, #76	; 0x4c
    3376:	fb01 3302 	mla	r3, r1, r2, r3
    337a:	4463      	add	r3, ip
    337c:	2201      	movs	r2, #1
    337e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3382:	2200      	movs	r2, #0
    3384:	e049      	b.n	341a <_Min_Heap_Size+0x41a>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    3386:	4b84      	ldr	r3, [pc, #528]	; (3598 <_Min_Heap_Size+0x598>)
    3388:	214c      	movs	r1, #76	; 0x4c
    338a:	fb01 3202 	mla	r2, r1, r2, r3
    338e:	4462      	add	r2, ip
    3390:	2300      	movs	r3, #0
    3392:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
						for (int i = 0; i < 3; i++)
    3396:	e000      	b.n	339a <_Min_Heap_Size+0x39a>
    3398:	3301      	adds	r3, #1
    339a:	2b02      	cmp	r3, #2
    339c:	ddfc      	ble.n	3398 <_Min_Heap_Size+0x398>
							mappings[whichMapping].destNumber = 255;
    339e:	234c      	movs	r3, #76	; 0x4c
    33a0:	fb05 f303 	mul.w	r3, r5, r3
    33a4:	4a7c      	ldr	r2, [pc, #496]	; (3598 <_Min_Heap_Size+0x598>)
    33a6:	21ff      	movs	r1, #255	; 0xff
    33a8:	54d1      	strb	r1, [r2, r3]
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    33aa:	2600      	movs	r6, #0
    33ac:	e01b      	b.n	33e6 <_Min_Heap_Size+0x3e6>
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    33ae:	4b7a      	ldr	r3, [pc, #488]	; (3598 <_Min_Heap_Size+0x598>)
    33b0:	224c      	movs	r2, #76	; 0x4c
    33b2:	fb02 3805 	mla	r8, r2, r5, r3
    33b6:	f8d8 7004 	ldr.w	r7, [r8, #4]
    33ba:	eb07 0286 	add.w	r2, r7, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    33be:	693b      	ldr	r3, [r7, #16]
    33c0:	ed92 0a00 	vldr	s0, [r2]
    33c4:	4798      	blx	r3
    33c6:	1cb3      	adds	r3, r6, #2
    33c8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    33cc:	ed87 0a00 	vstr	s0, [r7]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    33d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    33d4:	6957      	ldr	r7, [r2, #20]
    33d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    33da:	4631      	mov	r1, r6
    33dc:	7e10      	ldrb	r0, [r2, #24]
    33de:	ed93 0a00 	vldr	s0, [r3]
    33e2:	47b8      	blx	r7
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    33e4:	3601      	adds	r6, #1
    33e6:	2e01      	cmp	r6, #1
    33e8:	dde1      	ble.n	33ae <_Min_Heap_Size+0x3ae>
    33ea:	f7ff bb03 	b.w	29f4 <handleSPI+0x214>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    33ee:	eb02 0346 	add.w	r3, r2, r6, lsl #1
    33f2:	486b      	ldr	r0, [pc, #428]	; (35a0 <_Min_Heap_Size+0x5a0>)
    33f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    33f8:	4967      	ldr	r1, [pc, #412]	; (3598 <_Min_Heap_Size+0x598>)
    33fa:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    33fe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3402:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3406:	4413      	add	r3, r2
    3408:	1c9f      	adds	r7, r3, #2
    340a:	f841 0027 	str.w	r0, [r1, r7, lsl #2]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    340e:	3308      	adds	r3, #8
    3410:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    3414:	4b63      	ldr	r3, [pc, #396]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3416:	604b      	str	r3, [r1, #4]
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3418:	3201      	adds	r2, #1
    341a:	2a01      	cmp	r2, #1
    341c:	dde7      	ble.n	33ee <_Min_Heap_Size+0x3ee>
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    341e:	2e03      	cmp	r6, #3
    3420:	dc07      	bgt.n	3432 <_Min_Heap_Size+0x432>
							mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    3422:	4b5d      	ldr	r3, [pc, #372]	; (3598 <_Min_Heap_Size+0x598>)
    3424:	224c      	movs	r2, #76	; 0x4c
    3426:	fb02 3305 	mla	r3, r2, r5, r3
    342a:	4463      	add	r3, ip
    342c:	2200      	movs	r2, #0
    342e:	f883 2020 	strb.w	r2, [r3, #32]
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3432:	f1a6 0318 	sub.w	r3, r6, #24
    3436:	2b03      	cmp	r3, #3
    3438:	d802      	bhi.n	3440 <_Min_Heap_Size+0x440>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    343a:	4a5b      	ldr	r2, [pc, #364]	; (35a8 <_Min_Heap_Size+0x5a8>)
    343c:	2101      	movs	r1, #1
    343e:	54d1      	strb	r1, [r2, r3]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3440:	f1a6 0314 	sub.w	r3, r6, #20
    3444:	2b03      	cmp	r3, #3
    3446:	d802      	bhi.n	344e <_Min_Heap_Size+0x44e>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    3448:	4a58      	ldr	r2, [pc, #352]	; (35ac <_Min_Heap_Size+0x5ac>)
    344a:	2101      	movs	r1, #1
    344c:	54d1      	strb	r1, [r2, r3]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    344e:	2e02      	cmp	r6, #2
    3450:	d802      	bhi.n	3458 <_Min_Heap_Size+0x458>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    3452:	4b57      	ldr	r3, [pc, #348]	; (35b0 <_Min_Heap_Size+0x5b0>)
    3454:	2201      	movs	r2, #1
    3456:	559a      	strb	r2, [r3, r6]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3458:	2e03      	cmp	r6, #3
    345a:	d00c      	beq.n	3476 <_Min_Heap_Size+0x476>
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    345c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3460:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3464:	4463      	add	r3, ip
    3466:	330e      	adds	r3, #14
    3468:	4a4b      	ldr	r2, [pc, #300]	; (3598 <_Min_Heap_Size+0x598>)
    346a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    346e:	2200      	movs	r2, #0
    3470:	605a      	str	r2, [r3, #4]
    3472:	f7ff babf 	b.w	29f4 <handleSPI+0x214>
							noiseOn = 1;
    3476:	4b4f      	ldr	r3, [pc, #316]	; (35b4 <_Min_Heap_Size+0x5b4>)
    3478:	2201      	movs	r2, #1
    347a:	701a      	strb	r2, [r3, #0]
    347c:	e7ee      	b.n	345c <_Min_Heap_Size+0x45c>
				else if (mappingChangeType == Amount)
    347e:	f1be 0f01 	cmp.w	lr, #1
    3482:	d005      	beq.n	3490 <_Min_Heap_Size+0x490>
				else if (mappingChangeType == ScalarID)
    3484:	f1be 0f02 	cmp.w	lr, #2
    3488:	f47f aab4 	bne.w	29f4 <handleSPI+0x214>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    348c:	2100      	movs	r1, #0
    348e:	e025      	b.n	34dc <_Min_Heap_Size+0x4dc>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    3490:	ee07 6a90 	vmov	s15, r6
    3494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3498:	ed9f 7a47 	vldr	s14, [pc, #284]	; 35b8 <_Min_Heap_Size+0x5b8>
    349c:	ee67 7a87 	vmul.f32	s15, s15, s14
    34a0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    34a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    34a8:	4463      	add	r3, ip
    34aa:	330e      	adds	r3, #14
    34ac:	4a3a      	ldr	r2, [pc, #232]	; (3598 <_Min_Heap_Size+0x598>)
    34ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    34b2:	edc3 7a01 	vstr	s15, [r3, #4]
    34b6:	f7ff ba9d 	b.w	29f4 <handleSPI+0x214>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    34ba:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    34be:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    34c2:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    34c6:	440b      	add	r3, r1
    34c8:	3308      	adds	r3, #8
    34ca:	4833      	ldr	r0, [pc, #204]	; (3598 <_Min_Heap_Size+0x598>)
    34cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    34d0:	4834      	ldr	r0, [pc, #208]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34d2:	6058      	str	r0, [r3, #4]
    34d4:	e001      	b.n	34da <_Min_Heap_Size+0x4da>
							if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    34d6:	2e03      	cmp	r6, #3
    34d8:	d02a      	beq.n	3530 <_Min_Heap_Size+0x530>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    34da:	3101      	adds	r1, #1
    34dc:	2901      	cmp	r1, #1
    34de:	f73f aa89 	bgt.w	29f4 <handleSPI+0x214>
						if (scalar == 0xff)
    34e2:	2eff      	cmp	r6, #255	; 0xff
    34e4:	d0e9      	beq.n	34ba <_Min_Heap_Size+0x4ba>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    34e6:	eb01 0346 	add.w	r3, r1, r6, lsl #1
    34ea:	4d2d      	ldr	r5, [pc, #180]	; (35a0 <_Min_Heap_Size+0x5a0>)
    34ec:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    34f0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    34f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    34f8:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    34fc:	440b      	add	r3, r1
    34fe:	3308      	adds	r3, #8
    3500:	4825      	ldr	r0, [pc, #148]	; (3598 <_Min_Heap_Size+0x598>)
    3502:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3506:	605d      	str	r5, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3508:	f1a6 0318 	sub.w	r3, r6, #24
    350c:	2b03      	cmp	r3, #3
    350e:	d802      	bhi.n	3516 <_Min_Heap_Size+0x516>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3510:	4825      	ldr	r0, [pc, #148]	; (35a8 <_Min_Heap_Size+0x5a8>)
    3512:	2501      	movs	r5, #1
    3514:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3516:	f1a6 0314 	sub.w	r3, r6, #20
    351a:	2b03      	cmp	r3, #3
    351c:	d802      	bhi.n	3524 <_Min_Heap_Size+0x524>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    351e:	4823      	ldr	r0, [pc, #140]	; (35ac <_Min_Heap_Size+0x5ac>)
    3520:	2501      	movs	r5, #1
    3522:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3524:	2e02      	cmp	r6, #2
    3526:	d8d6      	bhi.n	34d6 <_Min_Heap_Size+0x4d6>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    3528:	4b21      	ldr	r3, [pc, #132]	; (35b0 <_Min_Heap_Size+0x5b0>)
    352a:	2001      	movs	r0, #1
    352c:	5598      	strb	r0, [r3, r6]
    352e:	e7d2      	b.n	34d6 <_Min_Heap_Size+0x4d6>
								noiseOn = 1;
    3530:	4b20      	ldr	r3, [pc, #128]	; (35b4 <_Min_Heap_Size+0x5b4>)
    3532:	2001      	movs	r0, #1
    3534:	7018      	strb	r0, [r3, #0]
    3536:	e7d0      	b.n	34da <_Min_Heap_Size+0x4da>
			uint_fast8_t  currentByte = offset+1;
    3538:	1c42      	adds	r2, r0, #1
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    353a:	4b20      	ldr	r3, [pc, #128]	; (35bc <_Min_Heap_Size+0x5bc>)
    353c:	4413      	add	r3, r2
    353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3542:	ee07 3a90 	vmov	s15, r3
    3546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    354a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 35c0 <_Min_Heap_Size+0x5c0>
    354e:	ee67 7a87 	vmul.f32	s15, s15, s14
    3552:	4b1c      	ldr	r3, [pc, #112]	; (35c4 <_Min_Heap_Size+0x5c4>)
    3554:	edc3 7a00 	vstr	s15, [r3]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    355c:	ee67 7a87 	vmul.f32	s15, s15, s14
    3560:	4b19      	ldr	r3, [pc, #100]	; (35c8 <_Min_Heap_Size+0x5c8>)
    3562:	edc3 7a00 	vstr	s15, [r3]
    3566:	f7ff ba45 	b.w	29f4 <handleSPI+0x214>
			if (boardNumber == 0)
    356a:	4b18      	ldr	r3, [pc, #96]	; (35cc <_Min_Heap_Size+0x5cc>)
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	2b00      	cmp	r3, #0
    3570:	f47f aa40 	bne.w	29f4 <handleSPI+0x214>
				brainFirmwareUpdateRequested = 1;
    3574:	4b16      	ldr	r3, [pc, #88]	; (35d0 <_Min_Heap_Size+0x5d0>)
    3576:	2201      	movs	r2, #1
    3578:	601a      	str	r2, [r3, #0]
    357a:	f7ff ba3b 	b.w	29f4 <handleSPI+0x214>
			if (boardNumber == 0)
    357e:	4b13      	ldr	r3, [pc, #76]	; (35cc <_Min_Heap_Size+0x5cc>)
    3580:	781b      	ldrb	r3, [r3, #0]
    3582:	2b00      	cmp	r3, #0
    3584:	f47f aa36 	bne.w	29f4 <handleSPI+0x214>
				pluckFirmwareUpdateRequested = 1;
    3588:	4b12      	ldr	r3, [pc, #72]	; (35d4 <_Min_Heap_Size+0x5d4>)
    358a:	2201      	movs	r2, #1
    358c:	601a      	str	r2, [r3, #0]
    358e:	f7ff ba31 	b.w	29f4 <handleSPI+0x214>
    3592:	bf00      	nop
    3594:	20018a54 	.word	0x20018a54
    3598:	200180c8 	.word	0x200180c8
    359c:	20018a64 	.word	0x20018a64
    35a0:	2001cf80 	.word	0x2001cf80
    35a4:	2000072c 	.word	0x2000072c
    35a8:	2001cac8 	.word	0x2001cac8
    35ac:	2001c944 	.word	0x2001c944
    35b0:	2001cd60 	.word	0x2001cd60
    35b4:	2001cd0c 	.word	0x2001cd0c
    35b8:	37fffffc 	.word	0x37fffffc
    35bc:	30000800 	.word	0x30000800
    35c0:	3c23d70a 	.word	0x3c23d70a
    35c4:	200004a8 	.word	0x200004a8
    35c8:	200004ac 	.word	0x200004ac
    35cc:	20013ebd 	.word	0x20013ebd
    35d0:	20013ed0 	.word	0x20013ed0
    35d4:	20019b78 	.word	0x20019b78
    35d8:	f3af 8000 	nop.w
    35dc:	f3af 8000 	nop.w

000035e0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    35e0:	4b02      	ldr	r3, [pc, #8]	; (35ec <HAL_I2C_SlaveRxCpltCallback+0xc>)
    35e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    35e6:	601a      	str	r2, [r3, #0]
}
    35e8:	4770      	bx	lr
    35ea:	bf00      	nop
    35ec:	20019b94 	.word	0x20019b94
    35f0:	f3af 8000 	nop.w
    35f4:	f3af 8000 	nop.w
    35f8:	f3af 8000 	nop.w
    35fc:	f3af 8000 	nop.w

00003600 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    3600:	4b01      	ldr	r3, [pc, #4]	; (3608 <HAL_I2C_MasterTxCpltCallback+0x8>)
    3602:	2200      	movs	r2, #0
    3604:	701a      	strb	r2, [r3, #0]
}
    3606:	4770      	bx	lr
    3608:	20016092 	.word	0x20016092
    360c:	f3af 8000 	nop.w
    3610:	f3af 8000 	nop.w
    3614:	f3af 8000 	nop.w
    3618:	f3af 8000 	nop.w
    361c:	f3af 8000 	nop.w

00003620 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    3620:	2300      	movs	r3, #0
    3622:	4a05      	ldr	r2, [pc, #20]	; (3638 <HAL_I2C_ErrorCallback+0x18>)
    3624:	7013      	strb	r3, [r2, #0]
	receivingI2C = 0;
    3626:	4a05      	ldr	r2, [pc, #20]	; (363c <HAL_I2C_ErrorCallback+0x1c>)
    3628:	7013      	strb	r3, [r2, #0]
	I2CErrors++;
    362a:	4a05      	ldr	r2, [pc, #20]	; (3640 <HAL_I2C_ErrorCallback+0x20>)
    362c:	7813      	ldrb	r3, [r2, #0]
    362e:	3301      	adds	r3, #1
    3630:	b2db      	uxtb	r3, r3
    3632:	7013      	strb	r3, [r2, #0]
}
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	20016092 	.word	0x20016092
    363c:	20019fa8 	.word	0x20019fa8
    3640:	20013ebc 	.word	0x20013ebc
    3644:	f3af 8000 	nop.w
    3648:	f3af 8000 	nop.w
    364c:	f3af 8000 	nop.w
    3650:	f3af 8000 	nop.w
    3654:	f3af 8000 	nop.w
    3658:	f3af 8000 	nop.w
    365c:	f3af 8000 	nop.w

00003660 <HAL_SPI_TxRxCpltCallback>:
{
    3660:	b510      	push	{r4, lr}
	interrupted = 1;
    3662:	4b5d      	ldr	r3, [pc, #372]	; (37d8 <HAL_SPI_TxRxCpltCallback+0x178>)
    3664:	2201      	movs	r2, #1
    3666:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    3668:	4b5c      	ldr	r3, [pc, #368]	; (37dc <HAL_SPI_TxRxCpltCallback+0x17c>)
    366a:	4283      	cmp	r3, r0
    366c:	d050      	beq.n	3710 <HAL_SPI_TxRxCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    366e:	4b5c      	ldr	r3, [pc, #368]	; (37e0 <HAL_SPI_TxRxCpltCallback+0x180>)
    3670:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3674:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3678:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    367a:	495a      	ldr	r1, [pc, #360]	; (37e4 <HAL_SPI_TxRxCpltCallback+0x184>)
    367c:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    3680:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3682:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3684:	2a00      	cmp	r2, #0
    3686:	dcf8      	bgt.n	367a <HAL_SPI_TxRxCpltCallback+0x1a>
    3688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    368c:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    3690:	4b55      	ldr	r3, [pc, #340]	; (37e8 <HAL_SPI_TxRxCpltCallback+0x188>)
    3692:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    3696:	2bfe      	cmp	r3, #254	; 0xfe
    3698:	d105      	bne.n	36a6 <HAL_SPI_TxRxCpltCallback+0x46>
    369a:	4b53      	ldr	r3, [pc, #332]	; (37e8 <HAL_SPI_TxRxCpltCallback+0x188>)
    369c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    36a0:	2bfd      	cmp	r3, #253	; 0xfd
    36a2:	f000 8095 	beq.w	37d0 <HAL_SPI_TxRxCpltCallback+0x170>
			HAL_SPI_Abort(&hspi1);
    36a6:	4c51      	ldr	r4, [pc, #324]	; (37ec <HAL_SPI_TxRxCpltCallback+0x18c>)
    36a8:	4620      	mov	r0, r4
    36aa:	f004 fcb5 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    36ae:	4b50      	ldr	r3, [pc, #320]	; (37f0 <HAL_SPI_TxRxCpltCallback+0x190>)
    36b0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    36b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    36b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    36bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    36c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    36c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    36c8:	f004 fb3a 	bl	7d40 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    36cc:	6822      	ldr	r2, [r4, #0]
    36ce:	6813      	ldr	r3, [r2, #0]
    36d0:	f043 0301 	orr.w	r3, r3, #1
    36d4:	6013      	str	r3, [r2, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    36d6:	4944      	ldr	r1, [pc, #272]	; (37e8 <HAL_SPI_TxRxCpltCallback+0x188>)
    36d8:	2340      	movs	r3, #64	; 0x40
    36da:	18ca      	adds	r2, r1, r3
    36dc:	4620      	mov	r0, r4
    36de:	f004 fd2b 	bl	8138 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    36e2:	4a44      	ldr	r2, [pc, #272]	; (37f4 <HAL_SPI_TxRxCpltCallback+0x194>)
    36e4:	7813      	ldrb	r3, [r2, #0]
    36e6:	3301      	adds	r3, #1
    36e8:	b2db      	uxtb	r3, r3
    36ea:	7013      	strb	r3, [r2, #0]
		SCB_CleanDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    36ec:	4b3e      	ldr	r3, [pc, #248]	; (37e8 <HAL_SPI_TxRxCpltCallback+0x188>)
    36ee:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    36f2:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    36f6:	2260      	movs	r2, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    36f8:	493a      	ldr	r1, [pc, #232]	; (37e4 <HAL_SPI_TxRxCpltCallback+0x184>)
    36fa:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    36fe:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3700:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3702:	2a00      	cmp	r2, #0
    3704:	dcf8      	bgt.n	36f8 <HAL_SPI_TxRxCpltCallback+0x98>
    3706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    370a:	f3bf 8f6f 	isb	sy
}
    370e:	bd10      	pop	{r4, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    3710:	4b39      	ldr	r3, [pc, #228]	; (37f8 <HAL_SPI_TxRxCpltCallback+0x198>)
    3712:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3716:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    371a:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    371c:	4931      	ldr	r1, [pc, #196]	; (37e4 <HAL_SPI_TxRxCpltCallback+0x184>)
    371e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    3722:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3724:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3726:	2a00      	cmp	r2, #0
    3728:	dcf8      	bgt.n	371c <HAL_SPI_TxRxCpltCallback+0xbc>
    372a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    372e:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    3732:	4b32      	ldr	r3, [pc, #200]	; (37fc <HAL_SPI_TxRxCpltCallback+0x19c>)
    3734:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    3738:	2bfe      	cmp	r3, #254	; 0xfe
    373a:	d104      	bne.n	3746 <HAL_SPI_TxRxCpltCallback+0xe6>
    373c:	4b2f      	ldr	r3, [pc, #188]	; (37fc <HAL_SPI_TxRxCpltCallback+0x19c>)
    373e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    3742:	2bfd      	cmp	r3, #253	; 0xfd
    3744:	d042      	beq.n	37cc <HAL_SPI_TxRxCpltCallback+0x16c>
			HAL_SPI_Abort(&hspi5);
    3746:	4c25      	ldr	r4, [pc, #148]	; (37dc <HAL_SPI_TxRxCpltCallback+0x17c>)
    3748:	4620      	mov	r0, r4
    374a:	f004 fc65 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    374e:	4b28      	ldr	r3, [pc, #160]	; (37f0 <HAL_SPI_TxRxCpltCallback+0x190>)
    3750:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3754:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3758:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    375c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3760:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3764:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3768:	f004 fc52 	bl	8010 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    376c:	6822      	ldr	r2, [r4, #0]
    376e:	6813      	ldr	r3, [r2, #0]
    3770:	f043 0301 	orr.w	r3, r3, #1
    3774:	6013      	str	r3, [r2, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3776:	4921      	ldr	r1, [pc, #132]	; (37fc <HAL_SPI_TxRxCpltCallback+0x19c>)
    3778:	2340      	movs	r3, #64	; 0x40
    377a:	18ca      	adds	r2, r1, r3
    377c:	4620      	mov	r0, r4
    377e:	f004 fcdb 	bl	8138 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    3782:	4a1c      	ldr	r2, [pc, #112]	; (37f4 <HAL_SPI_TxRxCpltCallback+0x194>)
    3784:	7813      	ldrb	r3, [r2, #0]
    3786:	3301      	adds	r3, #1
    3788:	b2db      	uxtb	r3, r3
    378a:	7013      	strb	r3, [r2, #0]
    378c:	e7bf      	b.n	370e <HAL_SPI_TxRxCpltCallback+0xae>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    378e:	481c      	ldr	r0, [pc, #112]	; (3800 <HAL_SPI_TxRxCpltCallback+0x1a0>)
    3790:	6803      	ldr	r3, [r0, #0]
    3792:	4413      	add	r3, r2
    3794:	005b      	lsls	r3, r3, #1
    3796:	3321      	adds	r3, #33	; 0x21
    3798:	4918      	ldr	r1, [pc, #96]	; (37fc <HAL_SPI_TxRxCpltCallback+0x19c>)
    379a:	440b      	add	r3, r1
    379c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    37a0:	6803      	ldr	r3, [r0, #0]
    37a2:	4413      	add	r3, r2
    37a4:	3311      	adds	r3, #17
    37a6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    37aa:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    37ae:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    37b2:	b29b      	uxth	r3, r3
    37b4:	4913      	ldr	r1, [pc, #76]	; (3804 <HAL_SPI_TxRxCpltCallback+0x1a4>)
    37b6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    37ba:	3201      	adds	r2, #1
    37bc:	4b12      	ldr	r3, [pc, #72]	; (3808 <HAL_SPI_TxRxCpltCallback+0x1a8>)
    37be:	781b      	ldrb	r3, [r3, #0]
    37c0:	4293      	cmp	r3, r2
    37c2:	d8e4      	bhi.n	378e <HAL_SPI_TxRxCpltCallback+0x12e>
			newPluck = 1;
    37c4:	4b11      	ldr	r3, [pc, #68]	; (380c <HAL_SPI_TxRxCpltCallback+0x1ac>)
    37c6:	2201      	movs	r2, #1
    37c8:	601a      	str	r2, [r3, #0]
    37ca:	e7a0      	b.n	370e <HAL_SPI_TxRxCpltCallback+0xae>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    37cc:	2200      	movs	r2, #0
    37ce:	e7f5      	b.n	37bc <HAL_SPI_TxRxCpltCallback+0x15c>
			handleSPI(LEVER_BUFFER_SIZE);
    37d0:	2020      	movs	r0, #32
    37d2:	f7ff f805 	bl	27e0 <handleSPI>
    37d6:	e789      	b.n	36ec <HAL_SPI_TxRxCpltCallback+0x8c>
    37d8:	20004de8 	.word	0x20004de8
    37dc:	2001c4f0 	.word	0x2001c4f0
    37e0:	30000840 	.word	0x30000840
    37e4:	e000ed00 	.word	0xe000ed00
    37e8:	30000800 	.word	0x30000800
    37ec:	2001c468 	.word	0x2001c468
    37f0:	58024400 	.word	0x58024400
    37f4:	20018a55 	.word	0x20018a55
    37f8:	38000040 	.word	0x38000040
    37fc:	38000000 	.word	0x38000000
    3800:	20004ddc 	.word	0x20004ddc
    3804:	20013dd4 	.word	0x20013dd4
    3808:	200004b1 	.word	0x200004b1
    380c:	20004eb8 	.word	0x20004eb8
    3810:	f3af 8000 	nop.w
    3814:	f3af 8000 	nop.w
    3818:	f3af 8000 	nop.w
    381c:	f3af 8000 	nop.w

00003820 <HAL_SPI_TxRxHalfCpltCallback>:
{
    3820:	b510      	push	{r4, lr}
	interrupted = 1;
    3822:	4b5d      	ldr	r3, [pc, #372]	; (3998 <HAL_SPI_TxRxHalfCpltCallback+0x178>)
    3824:	2201      	movs	r2, #1
    3826:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    3828:	4b5c      	ldr	r3, [pc, #368]	; (399c <HAL_SPI_TxRxHalfCpltCallback+0x17c>)
    382a:	4283      	cmp	r3, r0
    382c:	d050      	beq.n	38d0 <HAL_SPI_TxRxHalfCpltCallback+0xb0>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    382e:	4b5c      	ldr	r3, [pc, #368]	; (39a0 <HAL_SPI_TxRxHalfCpltCallback+0x180>)
    3830:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3834:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3838:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    383a:	495a      	ldr	r1, [pc, #360]	; (39a4 <HAL_SPI_TxRxHalfCpltCallback+0x184>)
    383c:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    3840:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3842:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3844:	2a00      	cmp	r2, #0
    3846:	dcf8      	bgt.n	383a <HAL_SPI_TxRxHalfCpltCallback+0x1a>
    3848:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    384c:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    3850:	4b55      	ldr	r3, [pc, #340]	; (39a8 <HAL_SPI_TxRxHalfCpltCallback+0x188>)
    3852:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    3856:	2bfe      	cmp	r3, #254	; 0xfe
    3858:	d105      	bne.n	3866 <HAL_SPI_TxRxHalfCpltCallback+0x46>
    385a:	4b53      	ldr	r3, [pc, #332]	; (39a8 <HAL_SPI_TxRxHalfCpltCallback+0x188>)
    385c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    3860:	2bfd      	cmp	r3, #253	; 0xfd
    3862:	f000 8095 	beq.w	3990 <HAL_SPI_TxRxHalfCpltCallback+0x170>
			HAL_SPI_Abort(&hspi1);
    3866:	4c51      	ldr	r4, [pc, #324]	; (39ac <HAL_SPI_TxRxHalfCpltCallback+0x18c>)
    3868:	4620      	mov	r0, r4
    386a:	f004 fbd5 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    386e:	4b50      	ldr	r3, [pc, #320]	; (39b0 <HAL_SPI_TxRxHalfCpltCallback+0x190>)
    3870:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3878:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    387c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3880:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    3888:	f004 fa5a 	bl	7d40 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    388c:	6822      	ldr	r2, [r4, #0]
    388e:	6813      	ldr	r3, [r2, #0]
    3890:	f043 0301 	orr.w	r3, r3, #1
    3894:	6013      	str	r3, [r2, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3896:	4944      	ldr	r1, [pc, #272]	; (39a8 <HAL_SPI_TxRxHalfCpltCallback+0x188>)
    3898:	2340      	movs	r3, #64	; 0x40
    389a:	18ca      	adds	r2, r1, r3
    389c:	4620      	mov	r0, r4
    389e:	f004 fc4b 	bl	8138 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    38a2:	4a44      	ldr	r2, [pc, #272]	; (39b4 <HAL_SPI_TxRxHalfCpltCallback+0x194>)
    38a4:	7813      	ldrb	r3, [r2, #0]
    38a6:	3301      	adds	r3, #1
    38a8:	b2db      	uxtb	r3, r3
    38aa:	7013      	strb	r3, [r2, #0]
		SCB_CleanDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    38ac:	4b3e      	ldr	r3, [pc, #248]	; (39a8 <HAL_SPI_TxRxHalfCpltCallback+0x188>)
    38ae:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    38b2:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    38b6:	2260      	movs	r2, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    38b8:	493a      	ldr	r1, [pc, #232]	; (39a4 <HAL_SPI_TxRxHalfCpltCallback+0x184>)
    38ba:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    38be:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    38c0:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    38c2:	2a00      	cmp	r2, #0
    38c4:	dcf8      	bgt.n	38b8 <HAL_SPI_TxRxHalfCpltCallback+0x98>
    38c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38ca:	f3bf 8f6f 	isb	sy
}
    38ce:	bd10      	pop	{r4, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    38d0:	4b39      	ldr	r3, [pc, #228]	; (39b8 <HAL_SPI_TxRxHalfCpltCallback+0x198>)
    38d2:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    38d6:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    38da:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    38dc:	4931      	ldr	r1, [pc, #196]	; (39a4 <HAL_SPI_TxRxHalfCpltCallback+0x184>)
    38de:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    38e2:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    38e4:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    38e6:	2a00      	cmp	r2, #0
    38e8:	dcf8      	bgt.n	38dc <HAL_SPI_TxRxHalfCpltCallback+0xbc>
    38ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38ee:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    38f2:	4b32      	ldr	r3, [pc, #200]	; (39bc <HAL_SPI_TxRxHalfCpltCallback+0x19c>)
    38f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    38f8:	2bfe      	cmp	r3, #254	; 0xfe
    38fa:	d104      	bne.n	3906 <HAL_SPI_TxRxHalfCpltCallback+0xe6>
    38fc:	4b2f      	ldr	r3, [pc, #188]	; (39bc <HAL_SPI_TxRxHalfCpltCallback+0x19c>)
    38fe:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    3902:	2bfd      	cmp	r3, #253	; 0xfd
    3904:	d042      	beq.n	398c <HAL_SPI_TxRxHalfCpltCallback+0x16c>
			HAL_SPI_Abort(&hspi5);
    3906:	4c25      	ldr	r4, [pc, #148]	; (399c <HAL_SPI_TxRxHalfCpltCallback+0x17c>)
    3908:	4620      	mov	r0, r4
    390a:	f004 fb85 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    390e:	4b28      	ldr	r3, [pc, #160]	; (39b0 <HAL_SPI_TxRxHalfCpltCallback+0x190>)
    3910:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3914:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3918:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    391c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3920:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3924:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3928:	f004 fb72 	bl	8010 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    392c:	6822      	ldr	r2, [r4, #0]
    392e:	6813      	ldr	r3, [r2, #0]
    3930:	f043 0301 	orr.w	r3, r3, #1
    3934:	6013      	str	r3, [r2, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3936:	4921      	ldr	r1, [pc, #132]	; (39bc <HAL_SPI_TxRxHalfCpltCallback+0x19c>)
    3938:	2340      	movs	r3, #64	; 0x40
    393a:	18ca      	adds	r2, r1, r3
    393c:	4620      	mov	r0, r4
    393e:	f004 fbfb 	bl	8138 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    3942:	4a1c      	ldr	r2, [pc, #112]	; (39b4 <HAL_SPI_TxRxHalfCpltCallback+0x194>)
    3944:	7813      	ldrb	r3, [r2, #0]
    3946:	3301      	adds	r3, #1
    3948:	b2db      	uxtb	r3, r3
    394a:	7013      	strb	r3, [r2, #0]
    394c:	e7bf      	b.n	38ce <HAL_SPI_TxRxHalfCpltCallback+0xae>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    394e:	481c      	ldr	r0, [pc, #112]	; (39c0 <HAL_SPI_TxRxHalfCpltCallback+0x1a0>)
    3950:	6803      	ldr	r3, [r0, #0]
    3952:	4413      	add	r3, r2
    3954:	005b      	lsls	r3, r3, #1
    3956:	3301      	adds	r3, #1
    3958:	4918      	ldr	r1, [pc, #96]	; (39bc <HAL_SPI_TxRxHalfCpltCallback+0x19c>)
    395a:	440b      	add	r3, r1
    395c:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    3960:	6803      	ldr	r3, [r0, #0]
    3962:	4413      	add	r3, r2
    3964:	3301      	adds	r3, #1
    3966:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    396a:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    396e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    3972:	b29b      	uxth	r3, r3
    3974:	4913      	ldr	r1, [pc, #76]	; (39c4 <HAL_SPI_TxRxHalfCpltCallback+0x1a4>)
    3976:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    397a:	3201      	adds	r2, #1
    397c:	4b12      	ldr	r3, [pc, #72]	; (39c8 <HAL_SPI_TxRxHalfCpltCallback+0x1a8>)
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	4293      	cmp	r3, r2
    3982:	d8e4      	bhi.n	394e <HAL_SPI_TxRxHalfCpltCallback+0x12e>
			newPluck = 1;
    3984:	4b11      	ldr	r3, [pc, #68]	; (39cc <HAL_SPI_TxRxHalfCpltCallback+0x1ac>)
    3986:	2201      	movs	r2, #1
    3988:	601a      	str	r2, [r3, #0]
    398a:	e7a0      	b.n	38ce <HAL_SPI_TxRxHalfCpltCallback+0xae>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    398c:	2200      	movs	r2, #0
    398e:	e7f5      	b.n	397c <HAL_SPI_TxRxHalfCpltCallback+0x15c>
			handleSPI(0);
    3990:	2000      	movs	r0, #0
    3992:	f7fe ff25 	bl	27e0 <handleSPI>
    3996:	e789      	b.n	38ac <HAL_SPI_TxRxHalfCpltCallback+0x8c>
    3998:	20004de8 	.word	0x20004de8
    399c:	2001c4f0 	.word	0x2001c4f0
    39a0:	30000840 	.word	0x30000840
    39a4:	e000ed00 	.word	0xe000ed00
    39a8:	30000800 	.word	0x30000800
    39ac:	2001c468 	.word	0x2001c468
    39b0:	58024400 	.word	0x58024400
    39b4:	20018a55 	.word	0x20018a55
    39b8:	38000040 	.word	0x38000040
    39bc:	38000000 	.word	0x38000000
    39c0:	20004ddc 	.word	0x20004ddc
    39c4:	20013dd4 	.word	0x20013dd4
    39c8:	200004b1 	.word	0x200004b1
    39cc:	20004eb8 	.word	0x20004eb8
    39d0:	f3af 8000 	nop.w
    39d4:	f3af 8000 	nop.w
    39d8:	f3af 8000 	nop.w
    39dc:	f3af 8000 	nop.w

000039e0 <HAL_SPI_RxCpltCallback>:
	interrupted = 1;
    39e0:	4b35      	ldr	r3, [pc, #212]	; (3ab8 <HAL_SPI_RxCpltCallback+0xd8>)
    39e2:	2201      	movs	r2, #1
    39e4:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    39e6:	4b35      	ldr	r3, [pc, #212]	; (3abc <HAL_SPI_RxCpltCallback+0xdc>)
    39e8:	4283      	cmp	r3, r0
    39ea:	d000      	beq.n	39ee <HAL_SPI_RxCpltCallback+0xe>
    39ec:	4770      	bx	lr
{
    39ee:	b510      	push	{r4, lr}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    39f0:	4b33      	ldr	r3, [pc, #204]	; (3ac0 <HAL_SPI_RxCpltCallback+0xe0>)
    39f2:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    39f6:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    39fa:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    39fc:	4931      	ldr	r1, [pc, #196]	; (3ac4 <HAL_SPI_RxCpltCallback+0xe4>)
    39fe:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    3a02:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3a04:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3a06:	2a00      	cmp	r2, #0
    3a08:	dcf8      	bgt.n	39fc <HAL_SPI_RxCpltCallback+0x1c>
    3a0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a0e:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    3a12:	4b2d      	ldr	r3, [pc, #180]	; (3ac8 <HAL_SPI_RxCpltCallback+0xe8>)
    3a14:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    3a18:	2bfe      	cmp	r3, #254	; 0xfe
    3a1a:	d104      	bne.n	3a26 <HAL_SPI_RxCpltCallback+0x46>
    3a1c:	4b2a      	ldr	r3, [pc, #168]	; (3ac8 <HAL_SPI_RxCpltCallback+0xe8>)
    3a1e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    3a22:	2bfd      	cmp	r3, #253	; 0xfd
    3a24:	d046      	beq.n	3ab4 <HAL_SPI_RxCpltCallback+0xd4>
			HAL_SPI_Abort(&hspi5);
    3a26:	4c25      	ldr	r4, [pc, #148]	; (3abc <HAL_SPI_RxCpltCallback+0xdc>)
    3a28:	4620      	mov	r0, r4
    3a2a:	f004 faf5 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    3a2e:	4b27      	ldr	r3, [pc, #156]	; (3acc <HAL_SPI_RxCpltCallback+0xec>)
    3a30:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3a34:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3a38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    3a3c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3a40:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3a44:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3a48:	f004 fae2 	bl	8010 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    3a4c:	6822      	ldr	r2, [r4, #0]
    3a4e:	6813      	ldr	r3, [r2, #0]
    3a50:	f043 0301 	orr.w	r3, r3, #1
    3a54:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3a56:	2240      	movs	r2, #64	; 0x40
    3a58:	4919      	ldr	r1, [pc, #100]	; (3ac0 <HAL_SPI_RxCpltCallback+0xe0>)
    3a5a:	4620      	mov	r0, r4
    3a5c:	f004 fb1c 	bl	8098 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    3a60:	4a1b      	ldr	r2, [pc, #108]	; (3ad0 <HAL_SPI_RxCpltCallback+0xf0>)
    3a62:	7813      	ldrb	r3, [r2, #0]
    3a64:	3301      	adds	r3, #1
    3a66:	b2db      	uxtb	r3, r3
    3a68:	7013      	strb	r3, [r2, #0]
}
    3a6a:	bd10      	pop	{r4, pc}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    3a6c:	4819      	ldr	r0, [pc, #100]	; (3ad4 <HAL_SPI_RxCpltCallback+0xf4>)
    3a6e:	6803      	ldr	r3, [r0, #0]
    3a70:	4413      	add	r3, r2
    3a72:	005b      	lsls	r3, r3, #1
    3a74:	3321      	adds	r3, #33	; 0x21
    3a76:	4914      	ldr	r1, [pc, #80]	; (3ac8 <HAL_SPI_RxCpltCallback+0xe8>)
    3a78:	440b      	add	r3, r1
    3a7a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    3a7e:	6803      	ldr	r3, [r0, #0]
    3a80:	4413      	add	r3, r2
    3a82:	3311      	adds	r3, #17
    3a84:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    3a88:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    3a8c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    3a90:	b29b      	uxth	r3, r3
    3a92:	4911      	ldr	r1, [pc, #68]	; (3ad8 <HAL_SPI_RxCpltCallback+0xf8>)
    3a94:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3a98:	3201      	adds	r2, #1
    3a9a:	4b10      	ldr	r3, [pc, #64]	; (3adc <HAL_SPI_RxCpltCallback+0xfc>)
    3a9c:	781b      	ldrb	r3, [r3, #0]
    3a9e:	4293      	cmp	r3, r2
    3aa0:	d8e4      	bhi.n	3a6c <HAL_SPI_RxCpltCallback+0x8c>
			newPluck = 1;
    3aa2:	4b0f      	ldr	r3, [pc, #60]	; (3ae0 <HAL_SPI_RxCpltCallback+0x100>)
    3aa4:	2201      	movs	r2, #1
    3aa6:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3aa8:	2240      	movs	r2, #64	; 0x40
    3aaa:	4905      	ldr	r1, [pc, #20]	; (3ac0 <HAL_SPI_RxCpltCallback+0xe0>)
    3aac:	4803      	ldr	r0, [pc, #12]	; (3abc <HAL_SPI_RxCpltCallback+0xdc>)
    3aae:	f004 faf3 	bl	8098 <__HAL_SPI_Receive_DMA_veneer>
    3ab2:	e7da      	b.n	3a6a <HAL_SPI_RxCpltCallback+0x8a>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3ab4:	2200      	movs	r2, #0
    3ab6:	e7f0      	b.n	3a9a <HAL_SPI_RxCpltCallback+0xba>
    3ab8:	20004de8 	.word	0x20004de8
    3abc:	2001c4f0 	.word	0x2001c4f0
    3ac0:	38000040 	.word	0x38000040
    3ac4:	e000ed00 	.word	0xe000ed00
    3ac8:	38000000 	.word	0x38000000
    3acc:	58024400 	.word	0x58024400
    3ad0:	20018a55 	.word	0x20018a55
    3ad4:	20004ddc 	.word	0x20004ddc
    3ad8:	20013dd4 	.word	0x20013dd4
    3adc:	200004b1 	.word	0x200004b1
    3ae0:	20004eb8 	.word	0x20004eb8
    3ae4:	f3af 8000 	nop.w
    3ae8:	f3af 8000 	nop.w
    3aec:	f3af 8000 	nop.w
    3af0:	f3af 8000 	nop.w
    3af4:	f3af 8000 	nop.w
    3af8:	f3af 8000 	nop.w
    3afc:	f3af 8000 	nop.w

00003b00 <HAL_SPI_RxHalfCpltCallback>:
	interrupted = 1;
    3b00:	4b35      	ldr	r3, [pc, #212]	; (3bd8 <HAL_SPI_RxHalfCpltCallback+0xd8>)
    3b02:	2201      	movs	r2, #1
    3b04:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    3b06:	4b35      	ldr	r3, [pc, #212]	; (3bdc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    3b08:	4283      	cmp	r3, r0
    3b0a:	d000      	beq.n	3b0e <HAL_SPI_RxHalfCpltCallback+0xe>
    3b0c:	4770      	bx	lr
{
    3b0e:	b510      	push	{r4, lr}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    3b10:	4b33      	ldr	r3, [pc, #204]	; (3be0 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    3b12:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3b16:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3b1a:	2260      	movs	r2, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3b1c:	4931      	ldr	r1, [pc, #196]	; (3be4 <HAL_SPI_RxHalfCpltCallback+0xe4>)
    3b1e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    3b22:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    3b24:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3b26:	2a00      	cmp	r2, #0
    3b28:	dcf8      	bgt.n	3b1c <HAL_SPI_RxHalfCpltCallback+0x1c>
    3b2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b2e:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    3b32:	4b2d      	ldr	r3, [pc, #180]	; (3be8 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    3b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3b38:	2bfe      	cmp	r3, #254	; 0xfe
    3b3a:	d104      	bne.n	3b46 <HAL_SPI_RxHalfCpltCallback+0x46>
    3b3c:	4b2a      	ldr	r3, [pc, #168]	; (3be8 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    3b3e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    3b42:	2bfd      	cmp	r3, #253	; 0xfd
    3b44:	d046      	beq.n	3bd4 <HAL_SPI_RxHalfCpltCallback+0xd4>
			HAL_SPI_Abort(&hspi5);
    3b46:	4c25      	ldr	r4, [pc, #148]	; (3bdc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    3b48:	4620      	mov	r0, r4
    3b4a:	f004 fa65 	bl	8018 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    3b4e:	4b27      	ldr	r3, [pc, #156]	; (3bec <HAL_SPI_RxHalfCpltCallback+0xec>)
    3b50:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3b54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3b58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    3b5c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3b60:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3b68:	f004 fa52 	bl	8010 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    3b6c:	6822      	ldr	r2, [r4, #0]
    3b6e:	6813      	ldr	r3, [r2, #0]
    3b70:	f043 0301 	orr.w	r3, r3, #1
    3b74:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3b76:	2240      	movs	r2, #64	; 0x40
    3b78:	4919      	ldr	r1, [pc, #100]	; (3be0 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    3b7a:	4620      	mov	r0, r4
    3b7c:	f004 fa8c 	bl	8098 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    3b80:	4a1b      	ldr	r2, [pc, #108]	; (3bf0 <HAL_SPI_RxHalfCpltCallback+0xf0>)
    3b82:	7813      	ldrb	r3, [r2, #0]
    3b84:	3301      	adds	r3, #1
    3b86:	b2db      	uxtb	r3, r3
    3b88:	7013      	strb	r3, [r2, #0]
}
    3b8a:	bd10      	pop	{r4, pc}
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3b8c:	4819      	ldr	r0, [pc, #100]	; (3bf4 <HAL_SPI_RxHalfCpltCallback+0xf4>)
    3b8e:	6803      	ldr	r3, [r0, #0]
    3b90:	4413      	add	r3, r2
    3b92:	005b      	lsls	r3, r3, #1
    3b94:	3301      	adds	r3, #1
    3b96:	4914      	ldr	r1, [pc, #80]	; (3be8 <HAL_SPI_RxHalfCpltCallback+0xe8>)
    3b98:	440b      	add	r3, r1
    3b9a:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    3b9e:	6803      	ldr	r3, [r0, #0]
    3ba0:	4413      	add	r3, r2
    3ba2:	3301      	adds	r3, #1
    3ba4:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    3ba8:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    3bac:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    3bb0:	b29b      	uxth	r3, r3
    3bb2:	4911      	ldr	r1, [pc, #68]	; (3bf8 <HAL_SPI_RxHalfCpltCallback+0xf8>)
    3bb4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3bb8:	3201      	adds	r2, #1
    3bba:	4b10      	ldr	r3, [pc, #64]	; (3bfc <HAL_SPI_RxHalfCpltCallback+0xfc>)
    3bbc:	781b      	ldrb	r3, [r3, #0]
    3bbe:	4293      	cmp	r3, r2
    3bc0:	d8e4      	bhi.n	3b8c <HAL_SPI_RxHalfCpltCallback+0x8c>
			newPluck = 1;
    3bc2:	4b0f      	ldr	r3, [pc, #60]	; (3c00 <HAL_SPI_RxHalfCpltCallback+0x100>)
    3bc4:	2201      	movs	r2, #1
    3bc6:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3bc8:	2240      	movs	r2, #64	; 0x40
    3bca:	4905      	ldr	r1, [pc, #20]	; (3be0 <HAL_SPI_RxHalfCpltCallback+0xe0>)
    3bcc:	4803      	ldr	r0, [pc, #12]	; (3bdc <HAL_SPI_RxHalfCpltCallback+0xdc>)
    3bce:	f004 fa63 	bl	8098 <__HAL_SPI_Receive_DMA_veneer>
    3bd2:	e7da      	b.n	3b8a <HAL_SPI_RxHalfCpltCallback+0x8a>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3bd4:	2200      	movs	r2, #0
    3bd6:	e7f0      	b.n	3bba <HAL_SPI_RxHalfCpltCallback+0xba>
    3bd8:	20004de8 	.word	0x20004de8
    3bdc:	2001c4f0 	.word	0x2001c4f0
    3be0:	38000040 	.word	0x38000040
    3be4:	e000ed00 	.word	0xe000ed00
    3be8:	38000000 	.word	0x38000000
    3bec:	58024400 	.word	0x58024400
    3bf0:	20018a55 	.word	0x20018a55
    3bf4:	20004ddc 	.word	0x20004ddc
    3bf8:	20013dd4 	.word	0x20013dd4
    3bfc:	200004b1 	.word	0x200004b1
    3c00:	20004eb8 	.word	0x20004eb8
	...

00003c20 <audioInitString1>:
	return out * 4.366812227074236f; //output scaling to bring +/-0.229 to +/-1.0
}


void __ATTR_ITCMRAM audioInitString1()
{
    3c20:	b538      	push	{r3, r4, r5, lr}
    3c22:	ed2d 8b02 	vpush	{d8}
	for (int v = 0; v < numStringsThisBoard; v++)
    3c26:	2500      	movs	r5, #0
    3c28:	e02a      	b.n	3c80 <audioInitString1+0x60>
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    3c2a:	4c1a      	ldr	r4, [pc, #104]	; (3c94 <audioInitString1+0x74>)
    3c2c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    3c30:	ed9f 2a19 	vldr	s4, [pc, #100]	; 3c98 <audioInitString1+0x78>
    3c34:	ed9f 8a19 	vldr	s16, [pc, #100]	; 3c9c <audioInitString1+0x7c>
    3c38:	4b19      	ldr	r3, [pc, #100]	; (3ca0 <audioInitString1+0x80>)
    3c3a:	2200      	movs	r2, #0
    3c3c:	eef0 2a42 	vmov.f32	s5, s4
    3c40:	eef0 1a48 	vmov.f32	s3, s16
    3c44:	ed9f 1a17 	vldr	s2, [pc, #92]	; 3ca4 <audioInitString1+0x84>
    3c48:	eddf 0a17 	vldr	s1, [pc, #92]	; 3ca8 <audioInitString1+0x88>
    3c4c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 3cac <audioInitString1+0x8c>
    3c50:	2104      	movs	r1, #4
    3c52:	4620      	mov	r0, r4
    3c54:	f004 fa08 	bl	8068 <__tSimpleLivingString3_initToPool_veneer>
													 0.99999f, 0.0f, 0.01f,
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    3c58:	ed9f 0a15 	vldr	s0, [pc, #84]	; 3cb0 <audioInitString1+0x90>
    3c5c:	4620      	mov	r0, r4
    3c5e:	f004 f9b3 	bl	7fc8 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    3c62:	ed9f 0a14 	vldr	s0, [pc, #80]	; 3cb4 <audioInitString1+0x94>
    3c66:	4620      	mov	r0, r4
    3c68:	f004 f9da 	bl	8020 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    3c6c:	eeb0 0a48 	vmov.f32	s0, s16
    3c70:	4620      	mov	r0, r4
    3c72:	f004 fa59 	bl	8128 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    3c76:	2101      	movs	r1, #1
    3c78:	4620      	mov	r0, r4
    3c7a:	f004 f8e9 	bl	7e50 <__tSimpleLivingString3_setLevMode_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    3c7e:	3501      	adds	r5, #1
    3c80:	4b0d      	ldr	r3, [pc, #52]	; (3cb8 <audioInitString1+0x98>)
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	42ab      	cmp	r3, r5
    3c86:	dcd0      	bgt.n	3c2a <audioInitString1+0xa>

	}

	whichStringModelLoaded = String1Loaded;
    3c88:	4b0c      	ldr	r3, [pc, #48]	; (3cbc <audioInitString1+0x9c>)
    3c8a:	2200      	movs	r2, #0
    3c8c:	701a      	strb	r2, [r3, #0]
}
    3c8e:	ecbd 8b02 	vpop	{d8}
    3c92:	bd38      	pop	{r3, r4, r5, pc}
    3c94:	2001c578 	.word	0x2001c578
    3c98:	3c23d70a 	.word	0x3c23d70a
    3c9c:	00000000 	.word	0x00000000
    3ca0:	20004eb0 	.word	0x20004eb0
    3ca4:	3f7fff58 	.word	0x3f7fff58
    3ca8:	4684d000 	.word	0x4684d000
    3cac:	435c0000 	.word	0x435c0000
    3cb0:	3d40c0f0 	.word	0x3d40c0f0
    3cb4:	3cf753bf 	.word	0x3cf753bf
    3cb8:	200004b1 	.word	0x200004b1
    3cbc:	20013e29 	.word	0x20013e29

00003cc0 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    3cc0:	b510      	push	{r4, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    3cc2:	2400      	movs	r4, #0
    3cc4:	e005      	b.n	3cd2 <audioFreeString1+0x12>
	{
		tSimpleLivingString3_free(&livStr[v]);
    3cc6:	4805      	ldr	r0, [pc, #20]	; (3cdc <audioFreeString1+0x1c>)
    3cc8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3ccc:	f004 f82c 	bl	7d28 <__tSimpleLivingString3_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    3cd0:	3401      	adds	r4, #1
    3cd2:	4b03      	ldr	r3, [pc, #12]	; (3ce0 <audioFreeString1+0x20>)
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	42a3      	cmp	r3, r4
    3cd8:	dcf5      	bgt.n	3cc6 <audioFreeString1+0x6>
	}
}
    3cda:	bd10      	pop	{r4, pc}
    3cdc:	2001c578 	.word	0x2001c578
    3ce0:	200004b1 	.word	0x200004b1
    3ce4:	f3af 8000 	nop.w
    3ce8:	f3af 8000 	nop.w
    3cec:	f3af 8000 	nop.w
    3cf0:	f3af 8000 	nop.w
    3cf4:	f3af 8000 	nop.w
    3cf8:	f3af 8000 	nop.w
    3cfc:	f3af 8000 	nop.w

00003d00 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    3d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d04:	ed2d 8b04 	vpush	{d8-d9}
    3d08:	b083      	sub	sp, #12
    3d0a:	af00      	add	r7, sp, #0
	float temp = 0.0f;
	float note[numStringsThisBoard];
    3d0c:	4ba7      	ldr	r3, [pc, #668]	; (3fac <audioTickString1+0x2ac>)
    3d0e:	781b      	ldrb	r3, [r3, #0]
    3d10:	009b      	lsls	r3, r3, #2
    3d12:	3307      	adds	r3, #7
    3d14:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    3d18:	ebad 0d03 	sub.w	sp, sp, r3
    3d1c:	46e8      	mov	r8, sp

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    3d1e:	48a4      	ldr	r0, [pc, #656]	; (3fb0 <audioTickString1+0x2b0>)
    3d20:	f004 f882 	bl	7e28 <__tExpSmooth_tick_veneer>
    3d24:	eeb0 8a40 	vmov.f32	s16, s0

	for (int i = 0; i < 12; i++)
    3d28:	2400      	movs	r4, #0
    3d2a:	e00a      	b.n	3d42 <audioTickString1+0x42>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    3d2c:	00a5      	lsls	r5, r4, #2
    3d2e:	48a1      	ldr	r0, [pc, #644]	; (3fb4 <audioTickString1+0x2b4>)
    3d30:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    3d34:	f004 f878 	bl	7e28 <__tExpSmooth_tick_veneer>
    3d38:	4b9f      	ldr	r3, [pc, #636]	; (3fb8 <audioTickString1+0x2b8>)
    3d3a:	442b      	add	r3, r5
    3d3c:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    3d40:	3401      	adds	r4, #1
    3d42:	2c0b      	cmp	r4, #11
    3d44:	ddf2      	ble.n	3d2c <audioTickString1+0x2c>
	}
	pluckPos = knobScaled[9];
    3d46:	4b9c      	ldr	r3, [pc, #624]	; (3fb8 <audioTickString1+0x2b8>)
    3d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3d4a:	4b9c      	ldr	r3, [pc, #624]	; (3fbc <audioTickString1+0x2bc>)
    3d4c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < numStringsThisBoard; i++)
    3d4e:	2400      	movs	r4, #0
	float temp = 0.0f;
    3d50:	eddf 8a9b 	vldr	s17, [pc, #620]	; 3fc0 <audioTickString1+0x2c0>
	for (int i = 0; i < numStringsThisBoard; i++)
    3d54:	e0b0      	b.n	3eb8 <audioTickString1+0x1b8>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
    3d56:	2200      	movs	r2, #0
    3d58:	601a      	str	r2, [r3, #0]
    3d5a:	e0c7      	b.n	3eec <audioTickString1+0x1ec>
		{
			note[i] = 127.0f;
		}
		if (isnan(note[i]))
		{
			note[i] = 64.0f;
    3d5c:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    3d60:	601a      	str	r2, [r3, #0]
    3d62:	e0da      	b.n	3f1a <audioTickString1+0x21a>
		}

		//float finalFreq = mtof(note[i]);
		float dampFreq = 15778.3f;
		float decay = 0.1f;
    3d64:	ed9f 9a97 	vldr	s18, [pc, #604]	; 3fc4 <audioTickString1+0x2c4>
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    3d68:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 4024 <audioTickString1+0x324>
    3d6c:	ea4f 0984 	mov.w	r9, r4, lsl #2
    3d70:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
    3d74:	4e90      	ldr	r6, [pc, #576]	; (3fb8 <audioTickString1+0x2b8>)
    3d76:	ed96 0a08 	vldr	s0, [r6, #32]
    3d7a:	4628      	mov	r0, r5
    3d7c:	f003 ffac 	bl	7cd8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    3d80:	eeb0 0a49 	vmov.f32	s0, s18
    3d84:	4628      	mov	r0, r5
    3d86:	f004 f86f 	bl	7e68 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    3d8a:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 3fc8 <audioTickString1+0x2c8>
    3d8e:	4628      	mov	r0, r5
    3d90:	f004 f9e6 	bl	8160 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    3d94:	ed96 0a00 	vldr	s0, [r6]
    3d98:	eddf 7a8c 	vldr	s15, [pc, #560]	; 3fcc <audioTickString1+0x2cc>
    3d9c:	ee20 0a27 	vmul.f32	s0, s0, s15
    3da0:	4628      	mov	r0, r5
    3da2:	f004 f9c1 	bl	8128 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    3da6:	edd6 7a05 	vldr	s15, [r6, #20]
    3daa:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    3dae:	ed9f 7a88 	vldr	s14, [pc, #544]	; 3fd0 <audioTickString1+0x2d0>
    3db2:	ee67 7a87 	vmul.f32	s15, s15, s14
    3db6:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		livStr[i]->rippleDelay = knobScaled[11];
    3dba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    3dbc:	669a      	str	r2, [r3, #104]	; 0x68
		tExpSmooth_setDest(&pitchSmoother[0][i], mtof(note[i]));
    3dbe:	4b85      	ldr	r3, [pc, #532]	; (3fd4 <audioTickString1+0x2d4>)
    3dc0:	eb09 0a03 	add.w	sl, r9, r3
    3dc4:	eb08 0309 	add.w	r3, r8, r9
    3dc8:	ed93 0a00 	vldr	s0, [r3]
    3dcc:	f003 fff4 	bl	7db8 <__mtof_veneer>
    3dd0:	4650      	mov	r0, sl
    3dd2:	f004 f989 	bl	80e8 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmoother[0][i]);
    3dd6:	4650      	mov	r0, sl
    3dd8:	f004 f826 	bl	7e28 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    3ddc:	4628      	mov	r0, r5
    3dde:	f003 ff5f 	bl	7ca0 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    3de2:	f8df b244 	ldr.w	fp, [pc, #580]	; 4028 <audioTickString1+0x328>
    3de6:	ed9b 0a00 	vldr	s0, [fp]
    3dea:	f8df a240 	ldr.w	sl, [pc, #576]	; 402c <audioTickString1+0x32c>
    3dee:	edda 7a00 	vldr	s15, [sl]
    3df2:	ee30 0a67 	vsub.f32	s0, s0, s15
		//if (barDelta > 0.2f)
		{
			//barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    3df6:	4b78      	ldr	r3, [pc, #480]	; (3fd8 <audioTickString1+0x2d8>)
    3df8:	444b      	add	r3, r9
    3dfa:	eeb0 0ac0 	vabs.f32	s0, s0
    3dfe:	607b      	str	r3, [r7, #4]
    3e00:	4618      	mov	r0, r3
    3e02:	f004 f971 	bl	80e8 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    3e06:	6878      	ldr	r0, [r7, #4]
    3e08:	f004 f80e 	bl	7e28 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    3e0c:	4873      	ldr	r0, [pc, #460]	; (3fdc <audioTickString1+0x2dc>)
    3e0e:	4448      	add	r0, r9
    3e10:	f003 ffb2 	bl	7d78 <__tEnvelopeFollower_tick_veneer>
    3e14:	eeb0 9a40 	vmov.f32	s18, s0
		prevBarInMIDI[0] = barInMIDI[0];
    3e18:	f8db 3000 	ldr.w	r3, [fp]
    3e1c:	f8ca 3000 	str.w	r3, [sl]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    3e20:	486f      	ldr	r0, [pc, #444]	; (3fe0 <audioTickString1+0x2e0>)
    3e22:	f003 ff5d 	bl	7ce0 <__tNoise_tick_veneer>
    3e26:	486f      	ldr	r0, [pc, #444]	; (3fe4 <audioTickString1+0x2e4>)
    3e28:	f004 f976 	bl	8118 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    3e2c:	ee29 9a00 	vmul.f32	s18, s18, s0
    3e30:	edd6 7a01 	vldr	s15, [r6, #4]
    3e34:	ee29 9a27 	vmul.f32	s18, s18, s15

		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    3e38:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    3e3c:	ee29 0a00 	vmul.f32	s0, s18, s0
    3e40:	4628      	mov	r0, r5
    3e42:	f003 ff6d 	bl	7d20 <__tSimpleLivingString3_tick_veneer>
	x = x * 2.0f; //initial scaling to match mm of displacement
    3e46:	ee70 7a00 	vadd.f32	s15, s0, s0
	float out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
    3e4a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 3fe8 <audioTickString1+0x2e8>
    3e4e:	ee27 7a87 	vmul.f32	s14, s15, s14
    3e52:	eddf 6a66 	vldr	s13, [pc, #408]	; 3fec <audioTickString1+0x2ec>
    3e56:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e5a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e5e:	ee37 7a26 	vadd.f32	s14, s14, s13
    3e62:	eddf 6a63 	vldr	s13, [pc, #396]	; 3ff0 <audioTickString1+0x2f0>
    3e66:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e6e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e72:	ee37 7a26 	vadd.f32	s14, s14, s13
    3e76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 3ff4 <audioTickString1+0x2f4>
    3e7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e82:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e86:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e8a:	ee37 7a26 	vadd.f32	s14, s14, s13
    3e8e:	eddf 6a5a 	vldr	s13, [pc, #360]	; 3ff8 <audioTickString1+0x2f8>
    3e92:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e96:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3e9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
    3ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
    3ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
	return out * 4.366812227074236f; //output scaling to bring +/-0.229 to +/-1.0
    3eaa:	ed9f 7a54 	vldr	s14, [pc, #336]	; 3ffc <audioTickString1+0x2fc>
    3eae:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    3eb2:	ee78 8aa7 	vadd.f32	s17, s17, s15
	for (int i = 0; i < numStringsThisBoard; i++)
    3eb6:	3401      	adds	r4, #1
    3eb8:	4b3c      	ldr	r3, [pc, #240]	; (3fac <audioTickString1+0x2ac>)
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	42a3      	cmp	r3, r4
    3ebe:	dd3d      	ble.n	3f3c <audioTickString1+0x23c>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    3ec0:	4b4f      	ldr	r3, [pc, #316]	; (4000 <audioTickString1+0x300>)
    3ec2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3ec6:	edd3 7a00 	vldr	s15, [r3]
    3eca:	4b4e      	ldr	r3, [pc, #312]	; (4004 <audioTickString1+0x304>)
    3ecc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3ed0:	ed93 7a00 	vldr	s14, [r3]
    3ed4:	ee77 7a87 	vadd.f32	s15, s15, s14
    3ed8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    3edc:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
    3ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    3ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ee8:	f53f af35 	bmi.w	3d56 <audioTickString1+0x56>
		if (note[i] > 127.0f)
    3eec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    3ef0:	ed93 7a00 	vldr	s14, [r3]
    3ef4:	eddf 7a44 	vldr	s15, [pc, #272]	; 4008 <audioTickString1+0x308>
    3ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f00:	dd01      	ble.n	3f06 <audioTickString1+0x206>
			note[i] = 127.0f;
    3f02:	edc3 7a00 	vstr	s15, [r3]
		if (isnan(note[i]))
    3f06:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    3f0a:	edd3 7a00 	vldr	s15, [r3]
    3f0e:	eef4 7a67 	vcmp.f32	s15, s15
    3f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f16:	f5bf af21 	bvs.w	3d5c <audioTickString1+0x5c>
		if (lsDecay[i])
    3f1a:	4b3c      	ldr	r3, [pc, #240]	; (400c <audioTickString1+0x30c>)
    3f1c:	5d1b      	ldrb	r3, [r3, r4]
    3f1e:	2b00      	cmp	r3, #0
    3f20:	f43f af20 	beq.w	3d64 <audioTickString1+0x64>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    3f24:	4b24      	ldr	r3, [pc, #144]	; (3fb8 <audioTickString1+0x2b8>)
    3f26:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
    3f2a:	eddf 7a39 	vldr	s15, [pc, #228]	; 4010 <audioTickString1+0x310>
    3f2e:	ee29 9a27 	vmul.f32	s18, s18, s15
    3f32:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    3f36:	ee39 9a27 	vadd.f32	s18, s18, s15
    3f3a:	e715      	b.n	3d68 <audioTickString1+0x68>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    3f3c:	eddf 7a35 	vldr	s15, [pc, #212]	; 4014 <audioTickString1+0x314>
    3f40:	ee68 0a27 	vmul.f32	s1, s16, s15
    3f44:	ed9f 0a34 	vldr	s0, [pc, #208]	; 4018 <audioTickString1+0x318>
    3f48:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 4008 <audioTickString1+0x308>
    3f4c:	ee70 0a80 	vadd.f32	s1, s1, s0
    3f50:	f003 ffbe 	bl	7ed0 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    3f54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    3f58:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    3f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f60:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    3f64:	1c59      	adds	r1, r3, #1
    3f66:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    3f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3f6e:	ee76 6ae7 	vsub.f32	s13, s13, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    3f72:	4a2a      	ldr	r2, [pc, #168]	; (401c <audioTickString1+0x31c>)
    3f74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f78:	ed93 7a00 	vldr	s14, [r3]
    3f7c:	ee27 7a26 	vmul.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    3f80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3f84:	ed92 0a00 	vldr	s0, [r2]
    3f88:	ee20 0a27 	vmul.f32	s0, s0, s15
    3f8c:	ee30 0a07 	vadd.f32	s0, s0, s14

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    3f90:	4b23      	ldr	r3, [pc, #140]	; (4020 <audioTickString1+0x320>)
    3f92:	edd3 7a00 	vldr	s15, [r3]
    3f96:	ee20 0a27 	vmul.f32	s0, s0, s15

	return temp;
}
    3f9a:	ee20 0a28 	vmul.f32	s0, s0, s17
    3f9e:	370c      	adds	r7, #12
    3fa0:	46bd      	mov	sp, r7
    3fa2:	ecbd 8b04 	vpop	{d8-d9}
    3fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3faa:	bf00      	nop
    3fac:	200004b1 	.word	0x200004b1
    3fb0:	20013e24 	.word	0x20013e24
    3fb4:	20004e28 	.word	0x20004e28
    3fb8:	20004df8 	.word	0x20004df8
    3fbc:	200004b4 	.word	0x200004b4
    3fc0:	00000000 	.word	0x00000000
    3fc4:	3dcccccd 	.word	0x3dcccccd
    3fc8:	46768933 	.word	0x46768933
    3fcc:	3d108950 	.word	0x3d108950
    3fd0:	bcf5c28f 	.word	0xbcf5c28f
    3fd4:	2001ce3c 	.word	0x2001ce3c
    3fd8:	20000db4 	.word	0x20000db4
    3fdc:	20000dac 	.word	0x20000dac
    3fe0:	20004eb4 	.word	0x20004eb4
    3fe4:	20004ec0 	.word	0x20004ec0
    3fe8:	3d99999a 	.word	0x3d99999a
    3fec:	3bdd2f1b 	.word	0x3bdd2f1b
    3ff0:	3b0a47ed 	.word	0x3b0a47ed
    3ff4:	39f9096c 	.word	0x39f9096c
    3ff8:	3a59d777 	.word	0x3a59d777
    3ffc:	408bbced 	.word	0x408bbced
    4000:	20013dec 	.word	0x20013dec
    4004:	20013df4 	.word	0x20013df4
    4008:	42fe0000 	.word	0x42fe0000
    400c:	20004eac 	.word	0x20004eac
    4010:	44480000 	.word	0x44480000
    4014:	42a00000 	.word	0x42a00000
    4018:	423c0000 	.word	0x423c0000
    401c:	2000051c 	.word	0x2000051c
    4020:	200004a8 	.word	0x200004a8
    4024:	2001c578 	.word	0x2001c578
    4028:	20000da4 	.word	0x20000da4
    402c:	20004f20 	.word	0x20004f20
    4030:	f3af 8000 	nop.w
    4034:	f3af 8000 	nop.w
    4038:	f3af 8000 	nop.w
    403c:	f3af 8000 	nop.w

00004040 <audioFrameString1>:
{
    4040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4044:	ed2d 8b02 	vpush	{d8}
    4048:	4606      	mov	r6, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    404a:	4b5e      	ldr	r3, [pc, #376]	; (41c4 <audioFrameString1+0x184>)
    404c:	685f      	ldr	r7, [r3, #4]
	if (resetStringInputs)
    404e:	4b5e      	ldr	r3, [pc, #376]	; (41c8 <audioFrameString1+0x188>)
    4050:	781b      	ldrb	r3, [r3, #0]
    4052:	b9a3      	cbnz	r3, 407e <audioFrameString1+0x3e>
	if (newPluck)
    4054:	4b5d      	ldr	r3, [pc, #372]	; (41cc <audioFrameString1+0x18c>)
    4056:	681b      	ldr	r3, [r3, #0]
    4058:	2b00      	cmp	r3, #0
    405a:	d178      	bne.n	414e <audioFrameString1+0x10e>
		for (int i = 0; i < numStringsThisBoard; i++)
    405c:	2500      	movs	r5, #0
    405e:	e08e      	b.n	417e <audioFrameString1+0x13e>
			lsDecay[i] = 0;
    4060:	2200      	movs	r2, #0
    4062:	495b      	ldr	r1, [pc, #364]	; (41d0 <audioFrameString1+0x190>)
    4064:	54ca      	strb	r2, [r1, r3]
			previousStringInputs[i] = 0;
    4066:	495b      	ldr	r1, [pc, #364]	; (41d4 <audioFrameString1+0x194>)
    4068:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    406c:	3301      	adds	r3, #1
    406e:	4a5a      	ldr	r2, [pc, #360]	; (41d8 <audioFrameString1+0x198>)
    4070:	7812      	ldrb	r2, [r2, #0]
    4072:	429a      	cmp	r2, r3
    4074:	dcf4      	bgt.n	4060 <audioFrameString1+0x20>
		resetStringInputs = 0;
    4076:	4b54      	ldr	r3, [pc, #336]	; (41c8 <audioFrameString1+0x188>)
    4078:	2200      	movs	r2, #0
    407a:	701a      	strb	r2, [r3, #0]
    407c:	e7ea      	b.n	4054 <audioFrameString1+0x14>
		for (int i = 0; i < numStringsThisBoard; i++)
    407e:	2300      	movs	r3, #0
    4080:	e7f5      	b.n	406e <audioFrameString1+0x2e>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4082:	4b56      	ldr	r3, [pc, #344]	; (41dc <audioFrameString1+0x19c>)
    4084:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4088:	b29b      	uxth	r3, r3
    408a:	ee08 3a10 	vmov	s16, r3
    408e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4092:	eddf 7a53 	vldr	s15, [pc, #332]	; 41e0 <audioFrameString1+0x1a0>
    4096:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    409a:	ea4f 0884 	mov.w	r8, r4, lsl #2
    409e:	4b51      	ldr	r3, [pc, #324]	; (41e4 <audioFrameString1+0x1a4>)
    40a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    40a4:	4a50      	ldr	r2, [pc, #320]	; (41e8 <audioFrameString1+0x1a8>)
    40a6:	6812      	ldr	r2, [r2, #0]
    40a8:	601a      	str	r2, [r3, #0]
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    40aa:	4d50      	ldr	r5, [pc, #320]	; (41ec <audioFrameString1+0x1ac>)
    40ac:	782a      	ldrb	r2, [r5, #0]
    40ae:	4b50      	ldr	r3, [pc, #320]	; (41f0 <audioFrameString1+0x1b0>)
    40b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    40b4:	edd3 7a00 	vldr	s15, [r3]
    40b8:	4b4e      	ldr	r3, [pc, #312]	; (41f4 <audioFrameString1+0x1b4>)
    40ba:	ed93 7a00 	vldr	s14, [r3]
    40be:	ee67 7a87 	vmul.f32	s15, s15, s14
    40c2:	4b4d      	ldr	r3, [pc, #308]	; (41f8 <audioFrameString1+0x1b8>)
    40c4:	edd3 6a02 	vldr	s13, [r3, #8]
    40c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    40cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    40d0:	ee71 6a66 	vsub.f32	s13, s2, s13
    40d4:	ee27 7a26 	vmul.f32	s14, s14, s13
    40d8:	ee77 0a87 	vadd.f32	s1, s15, s14
    40dc:	ed9f 0a47 	vldr	s0, [pc, #284]	; 41fc <audioFrameString1+0x1bc>
    40e0:	f003 fef6 	bl	7ed0 <__LEAF_clip_veneer>
    40e4:	eef0 0a40 	vmov.f32	s1, s0
    40e8:	eeb0 0a48 	vmov.f32	s0, s16
    40ec:	4844      	ldr	r0, [pc, #272]	; (4200 <audioFrameString1+0x1c0>)
    40ee:	4440      	add	r0, r8
    40f0:	f003 ff0a 	bl	7f08 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    40f4:	782b      	ldrb	r3, [r5, #0]
    40f6:	3301      	adds	r3, #1
    40f8:	702b      	strb	r3, [r5, #0]
				lsDecay[i] = 1;
    40fa:	4b35      	ldr	r3, [pc, #212]	; (41d0 <audioFrameString1+0x190>)
    40fc:	2201      	movs	r2, #1
    40fe:	551a      	strb	r2, [r3, r4]
			previousStringInputs[i] = stringInputs[i];
    4100:	4b36      	ldr	r3, [pc, #216]	; (41dc <audioFrameString1+0x19c>)
    4102:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4106:	b29b      	uxth	r3, r3
    4108:	4a32      	ldr	r2, [pc, #200]	; (41d4 <audioFrameString1+0x194>)
    410a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    410e:	3401      	adds	r4, #1
    4110:	4b31      	ldr	r3, [pc, #196]	; (41d8 <audioFrameString1+0x198>)
    4112:	781b      	ldrb	r3, [r3, #0]
    4114:	42a3      	cmp	r3, r4
    4116:	dd1c      	ble.n	4152 <audioFrameString1+0x112>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    4118:	4b2e      	ldr	r3, [pc, #184]	; (41d4 <audioFrameString1+0x194>)
    411a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    411e:	b29b      	uxth	r3, r3
    4120:	b92b      	cbnz	r3, 412e <audioFrameString1+0xee>
    4122:	4b2e      	ldr	r3, [pc, #184]	; (41dc <audioFrameString1+0x19c>)
    4124:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4128:	b29b      	uxth	r3, r3
    412a:	2b00      	cmp	r3, #0
    412c:	d1a9      	bne.n	4082 <audioFrameString1+0x42>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    412e:	4b29      	ldr	r3, [pc, #164]	; (41d4 <audioFrameString1+0x194>)
    4130:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4134:	b29b      	uxth	r3, r3
    4136:	2b00      	cmp	r3, #0
    4138:	d0e2      	beq.n	4100 <audioFrameString1+0xc0>
    413a:	4b28      	ldr	r3, [pc, #160]	; (41dc <audioFrameString1+0x19c>)
    413c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4140:	b29b      	uxth	r3, r3
    4142:	2b00      	cmp	r3, #0
    4144:	d1dc      	bne.n	4100 <audioFrameString1+0xc0>
				lsDecay[i] = 0;
    4146:	4b22      	ldr	r3, [pc, #136]	; (41d0 <audioFrameString1+0x190>)
    4148:	2200      	movs	r2, #0
    414a:	551a      	strb	r2, [r3, r4]
    414c:	e7d8      	b.n	4100 <audioFrameString1+0xc0>
		for (int i = 0; i < numStringsThisBoard; i++)
    414e:	2400      	movs	r4, #0
    4150:	e7de      	b.n	4110 <audioFrameString1+0xd0>
		newPluck = 0;
    4152:	4b1e      	ldr	r3, [pc, #120]	; (41cc <audioFrameString1+0x18c>)
    4154:	2200      	movs	r2, #0
    4156:	601a      	str	r2, [r3, #0]
    4158:	e780      	b.n	405c <audioFrameString1+0x1c>
		int iplusbuffer = buffer_offset + i;
    415a:	1974      	adds	r4, r6, r5
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    415c:	f7ff fdd0 	bl	3d00 <audioTickString1>
    4160:	eddf 7a28 	vldr	s15, [pc, #160]	; 4204 <audioFrameString1+0x1c4>
    4164:	ee20 0a27 	vmul.f32	s0, s0, s15
    4168:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    416c:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer] = current_sample;
    4170:	4a25      	ldr	r2, [pc, #148]	; (4208 <audioFrameString1+0x1c8>)
    4172:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    4176:	3401      	adds	r4, #1
    4178:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    417c:	3502      	adds	r5, #2
    417e:	2d7f      	cmp	r5, #127	; 0x7f
    4180:	ddeb      	ble.n	415a <audioFrameString1+0x11a>
	if (switchStrings)
    4182:	4b22      	ldr	r3, [pc, #136]	; (420c <audioFrameString1+0x1cc>)
    4184:	681b      	ldr	r3, [r3, #0]
    4186:	b9bb      	cbnz	r3, 41b8 <audioFrameString1+0x178>
	switchStrings = 0;
    4188:	4b20      	ldr	r3, [pc, #128]	; (420c <audioFrameString1+0x1cc>)
    418a:	2200      	movs	r2, #0
    418c:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    418e:	4b0d      	ldr	r3, [pc, #52]	; (41c4 <audioFrameString1+0x184>)
    4190:	685b      	ldr	r3, [r3, #4]
    4192:	1bdb      	subs	r3, r3, r7
    4194:	4a1e      	ldr	r2, [pc, #120]	; (4210 <audioFrameString1+0x1d0>)
    4196:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4198:	ee07 3a90 	vmov	s15, r3
    419c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    41a0:	4b1c      	ldr	r3, [pc, #112]	; (4214 <audioFrameString1+0x1d4>)
    41a2:	ed93 7a00 	vldr	s14, [r3]
    41a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    41aa:	4b1b      	ldr	r3, [pc, #108]	; (4218 <audioFrameString1+0x1d8>)
    41ac:	edc3 7a00 	vstr	s15, [r3]
}
    41b0:	ecbd 8b02 	vpop	{d8}
    41b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switchStringModel(switchStrings);
    41b8:	4b14      	ldr	r3, [pc, #80]	; (420c <audioFrameString1+0x1cc>)
    41ba:	6818      	ldr	r0, [r3, #0]
    41bc:	f7fd f810 	bl	11e0 <switchStringModel>
    41c0:	e7e2      	b.n	4188 <audioFrameString1+0x148>
    41c2:	bf00      	nop
    41c4:	e0001000 	.word	0xe0001000
    41c8:	20005340 	.word	0x20005340
    41cc:	20004eb8 	.word	0x20004eb8
    41d0:	20004eac 	.word	0x20004eac
    41d4:	20004f28 	.word	0x20004f28
    41d8:	200004b1 	.word	0x200004b1
    41dc:	20013dd4 	.word	0x20013dd4
    41e0:	37800080 	.word	0x37800080
    41e4:	20013df4 	.word	0x20013df4
    41e8:	20004ec4 	.word	0x20004ec4
    41ec:	20013ed6 	.word	0x20013ed6
    41f0:	20004f40 	.word	0x20004f40
    41f4:	200004b4 	.word	0x200004b4
    41f8:	20004df8 	.word	0x20004df8
    41fc:	00000000 	.word	0x00000000
    4200:	2001c578 	.word	0x2001c578
    4204:	4b000000 	.word	0x4b000000
    4208:	30000000 	.word	0x30000000
    420c:	20013e0c 	.word	0x20013e0c
    4210:	20013e10 	.word	0x20013e10
    4214:	200004a4 	.word	0x200004a4
    4218:	20004de4 	.word	0x20004de4
    421c:	00000000 	.word	0x00000000

00004220 <audioInitString2>:

tTString strings[NUM_STRINGS_PER_BOARD];
tExpSmooth string2PitchSmoother[NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM audioInitString2()
{
    4220:	b570      	push	{r4, r5, r6, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    4222:	2400      	movs	r4, #0
    4224:	e01b      	b.n	425e <audioInitString2+0x3e>
	{
		 tTString_initToPool(&strings[v], 4, 25.0f, &mediumPool);
    4226:	00a6      	lsls	r6, r4, #2
    4228:	4d11      	ldr	r5, [pc, #68]	; (4270 <audioInitString2+0x50>)
    422a:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    422e:	4a11      	ldr	r2, [pc, #68]	; (4274 <audioInitString2+0x54>)
    4230:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
    4234:	2104      	movs	r1, #4
    4236:	4628      	mov	r0, r5
    4238:	f003 ff22 	bl	8080 <__tTString_initToPool_veneer>
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    423c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 4278 <audioInitString2+0x58>
    4240:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 427c <audioInitString2+0x5c>
    4244:	4628      	mov	r0, r5
    4246:	f003 fde7 	bl	7e18 <__tTString_setHarmonicity_veneer>
		//tSimpleLivingString5_setBrightness(&strings[v], .99f);
		//tSimpleLivingString5_setPluckPosition(&strings[v], .5f);
		//tSimpleLivingString5_setPrepPosition(&strings[v], .4f);
		//tSimpleLivingString5_setPrepIndex(&strings[v], 0.0f);
		//tSimpleLivingString5_setPickupPoint(&strings[v], 1.0f);
		 tExpSmooth_init(&string2PitchSmoother[v], 220.0f, 0.0001f, &leaf);
    424a:	490d      	ldr	r1, [pc, #52]	; (4280 <audioInitString2+0x60>)
    424c:	eddf 0a0d 	vldr	s1, [pc, #52]	; 4284 <audioInitString2+0x64>
    4250:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 4288 <audioInitString2+0x68>
    4254:	480d      	ldr	r0, [pc, #52]	; (428c <audioInitString2+0x6c>)
    4256:	4430      	add	r0, r6
    4258:	f003 fd4a 	bl	7cf0 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    425c:	3401      	adds	r4, #1
    425e:	4b0c      	ldr	r3, [pc, #48]	; (4290 <audioInitString2+0x70>)
    4260:	781b      	ldrb	r3, [r3, #0]
    4262:	42a3      	cmp	r3, r4
    4264:	dcdf      	bgt.n	4226 <audioInitString2+0x6>
	}
	whichStringModelLoaded = String2Loaded;
    4266:	4b0b      	ldr	r3, [pc, #44]	; (4294 <audioInitString2+0x74>)
    4268:	2201      	movs	r2, #1
    426a:	701a      	strb	r2, [r3, #0]
}
    426c:	bd70      	pop	{r4, r5, r6, pc}
    426e:	bf00      	nop
    4270:	2001c588 	.word	0x2001c588
    4274:	20004eb0 	.word	0x20004eb0
    4278:	42c80000 	.word	0x42c80000
    427c:	3727c5ac 	.word	0x3727c5ac
    4280:	20004e5c 	.word	0x20004e5c
    4284:	38d1b717 	.word	0x38d1b717
    4288:	435c0000 	.word	0x435c0000
    428c:	2001c580 	.word	0x2001c580
    4290:	200004b1 	.word	0x200004b1
    4294:	20013e29 	.word	0x20013e29
    4298:	f3af 8000 	nop.w
    429c:	f3af 8000 	nop.w

000042a0 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    42a0:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    42a2:	2400      	movs	r4, #0
    42a4:	e00a      	b.n	42bc <audioFreeString2+0x1c>
	{
		tExpSmooth_free(&string2PitchSmoother[v]);
    42a6:	00a5      	lsls	r5, r4, #2
    42a8:	4807      	ldr	r0, [pc, #28]	; (42c8 <audioFreeString2+0x28>)
    42aa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42ae:	f003 fd53 	bl	7d58 <__tExpSmooth_free_veneer>
		tTString_free(&strings[v]);
    42b2:	4806      	ldr	r0, [pc, #24]	; (42cc <audioFreeString2+0x2c>)
    42b4:	4428      	add	r0, r5
    42b6:	f003 fd27 	bl	7d08 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    42ba:	3401      	adds	r4, #1
    42bc:	4b04      	ldr	r3, [pc, #16]	; (42d0 <audioFreeString2+0x30>)
    42be:	781b      	ldrb	r3, [r3, #0]
    42c0:	42a3      	cmp	r3, r4
    42c2:	dcf0      	bgt.n	42a6 <audioFreeString2+0x6>
	}
}
    42c4:	bd38      	pop	{r3, r4, r5, pc}
    42c6:	bf00      	nop
    42c8:	2001c580 	.word	0x2001c580
    42cc:	2001c588 	.word	0x2001c588
    42d0:	200004b1 	.word	0x200004b1
    42d4:	f3af 8000 	nop.w
    42d8:	f3af 8000 	nop.w
    42dc:	f3af 8000 	nop.w

000042e0 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    42e0:	b570      	push	{r4, r5, r6, lr}
    42e2:	ed2d 8b04 	vpush	{d8-d9}
    42e6:	b082      	sub	sp, #8
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    42e8:	48c9      	ldr	r0, [pc, #804]	; (4610 <audioTickString2+0x330>)
    42ea:	f003 fd9d 	bl	7e28 <__tExpSmooth_tick_veneer>
    42ee:	eef0 9a40 	vmov.f32	s19, s0

	for (int i = 0; i < 12; i++)
    42f2:	2400      	movs	r4, #0
    42f4:	e00a      	b.n	430c <audioTickString2+0x2c>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    42f6:	00a5      	lsls	r5, r4, #2
    42f8:	48c6      	ldr	r0, [pc, #792]	; (4614 <audioTickString2+0x334>)
    42fa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    42fe:	f003 fd93 	bl	7e28 <__tExpSmooth_tick_veneer>
    4302:	4bc5      	ldr	r3, [pc, #788]	; (4618 <audioTickString2+0x338>)
    4304:	442b      	add	r3, r5
    4306:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    430a:	3401      	adds	r4, #1
    430c:	2c0b      	cmp	r4, #11
    430e:	ddf2      	ble.n	42f6 <audioTickString2+0x16>
	}
	if (newPluck)
    4310:	4bc2      	ldr	r3, [pc, #776]	; (461c <audioTickString2+0x33c>)
    4312:	681b      	ldr	r3, [r3, #0]
    4314:	2b00      	cmp	r3, #0
    4316:	f040 809e 	bne.w	4456 <audioTickString2+0x176>
		//tSimpleLivingString5_setPrepPosition(&strings[i], pos1 * alpha + pos2 * (1.0f-alpha));

		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
		if (barDelta > 0.5f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
    431a:	2500      	movs	r5, #0
    431c:	eddf 8ac0 	vldr	s17, [pc, #768]	; 4620 <audioTickString2+0x340>
    4320:	e13f      	b.n	45a2 <audioTickString2+0x2c2>
						float amplitz = stringInputs[i] * 0.000015259021897f;
    4322:	4bc0      	ldr	r3, [pc, #768]	; (4624 <audioTickString2+0x344>)
    4324:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4328:	b29b      	uxth	r3, r3
    432a:	ee08 3a10 	vmov	s16, r3
    432e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4332:	eddf 7abd 	vldr	s15, [pc, #756]	; 4628 <audioTickString2+0x348>
    4336:	ee28 8a27 	vmul.f32	s16, s16, s15
						stringOctave[i] = octave;
    433a:	00a5      	lsls	r5, r4, #2
    433c:	4ebb      	ldr	r6, [pc, #748]	; (462c <audioTickString2+0x34c>)
    433e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    4342:	4bbb      	ldr	r3, [pc, #748]	; (4630 <audioTickString2+0x350>)
    4344:	681b      	ldr	r3, [r3, #0]
    4346:	6033      	str	r3, [r6, #0]
						tADSRT_on(&fenvelopes[i], amplitz);
    4348:	eeb0 0a48 	vmov.f32	s0, s16
    434c:	48b9      	ldr	r0, [pc, #740]	; (4634 <audioTickString2+0x354>)
    434e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4352:	f003 fe59 	bl	8008 <__tADSRT_on_veneer>
						theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4356:	4bb8      	ldr	r3, [pc, #736]	; (4638 <audioTickString2+0x358>)
    4358:	442b      	add	r3, r5
    435a:	edd3 7a00 	vldr	s15, [r3]
    435e:	ed96 7a00 	vldr	s14, [r6]
    4362:	ee77 7a87 	vadd.f32	s15, s15, s14
    4366:	f105 0308 	add.w	r3, r5, #8
    436a:	eb0d 0503 	add.w	r5, sp, r3
    436e:	ed45 7a02 	vstr	s15, [r5, #-8]
						if (theNote[i] < 0.0f)
    4372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    437a:	d45d      	bmi.n	4438 <audioTickString2+0x158>
						if (theNote[i] > 127.0f)
    437c:	ab02      	add	r3, sp, #8
    437e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4382:	ed13 7a02 	vldr	s14, [r3, #-8]
    4386:	eddf 7aad 	vldr	s15, [pc, #692]	; 463c <audioTickString2+0x35c>
    438a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4392:	dd04      	ble.n	439e <audioTickString2+0xbe>
							theNote[i] = 127.0f;
    4394:	ab02      	add	r3, sp, #8
    4396:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    439a:	ed43 7a02 	vstr	s15, [r3, #-8]
						if (isnan(theNote[i]))
    439e:	ab02      	add	r3, sp, #8
    43a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    43a4:	ed53 7a02 	vldr	s15, [r3, #-8]
    43a8:	eef4 7a67 	vcmp.f32	s15, s15
    43ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43b0:	d649      	bvs.n	4446 <audioTickString2+0x166>
						float finalFreq = mtofTableLookup(theNote[i]);
    43b2:	00a6      	lsls	r6, r4, #2
    43b4:	ab02      	add	r3, sp, #8
    43b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    43ba:	ed13 0a02 	vldr	s0, [r3, #-8]
    43be:	f003 fc73 	bl	7ca8 <__mtofTableLookup_veneer>
						tTString_setFreq(&strings[i], finalFreq);
    43c2:	4d9f      	ldr	r5, [pc, #636]	; (4640 <audioTickString2+0x360>)
    43c4:	4435      	add	r5, r6
    43c6:	4628      	mov	r0, r5
    43c8:	f003 fdf6 	bl	7fb8 <__tTString_setFreq_veneer>
						tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    43cc:	eef0 0a48 	vmov.f32	s1, s16
    43d0:	4b91      	ldr	r3, [pc, #580]	; (4618 <audioTickString2+0x338>)
    43d2:	ed93 0a02 	vldr	s0, [r3, #8]
    43d6:	4628      	mov	r0, r5
    43d8:	f003 fdca 	bl	7f70 <__tTString_pluck_veneer>
					previousStringInputs[i] = stringInputs[i];
    43dc:	4b91      	ldr	r3, [pc, #580]	; (4624 <audioTickString2+0x344>)
    43de:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    43e2:	b29b      	uxth	r3, r3
    43e4:	4a97      	ldr	r2, [pc, #604]	; (4644 <audioTickString2+0x364>)
    43e6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
				for (int i = 0; i < numStringsThisBoard; i++)
    43ea:	3401      	adds	r4, #1
    43ec:	4b96      	ldr	r3, [pc, #600]	; (4648 <audioTickString2+0x368>)
    43ee:	781b      	ldrb	r3, [r3, #0]
    43f0:	42a3      	cmp	r3, r4
    43f2:	dd32      	ble.n	445a <audioTickString2+0x17a>
					if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    43f4:	4b93      	ldr	r3, [pc, #588]	; (4644 <audioTickString2+0x364>)
    43f6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    43fa:	b29b      	uxth	r3, r3
    43fc:	b92b      	cbnz	r3, 440a <audioTickString2+0x12a>
    43fe:	4b89      	ldr	r3, [pc, #548]	; (4624 <audioTickString2+0x344>)
    4400:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4404:	b29b      	uxth	r3, r3
    4406:	2b00      	cmp	r3, #0
    4408:	d18b      	bne.n	4322 <audioTickString2+0x42>
					else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    440a:	4b8e      	ldr	r3, [pc, #568]	; (4644 <audioTickString2+0x364>)
    440c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4410:	b29b      	uxth	r3, r3
    4412:	2b00      	cmp	r3, #0
    4414:	d0e2      	beq.n	43dc <audioTickString2+0xfc>
    4416:	4b83      	ldr	r3, [pc, #524]	; (4624 <audioTickString2+0x344>)
    4418:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    441c:	b29b      	uxth	r3, r3
    441e:	2b00      	cmp	r3, #0
    4420:	d1dc      	bne.n	43dc <audioTickString2+0xfc>
						tTString_mute(&strings[i]);
    4422:	00a5      	lsls	r5, r4, #2
    4424:	4886      	ldr	r0, [pc, #536]	; (4640 <audioTickString2+0x360>)
    4426:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    442a:	f003 fd39 	bl	7ea0 <__tTString_mute_veneer>
						tADSRT_off(&fenvelopes[i]);
    442e:	4881      	ldr	r0, [pc, #516]	; (4634 <audioTickString2+0x354>)
    4430:	4428      	add	r0, r5
    4432:	f003 fc59 	bl	7ce8 <__tADSRT_off_veneer>
    4436:	e7d1      	b.n	43dc <audioTickString2+0xfc>
							theNote[i] = 0.0f;
    4438:	2200      	movs	r2, #0
    443a:	ab02      	add	r3, sp, #8
    443c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4440:	f843 2c08 	str.w	r2, [r3, #-8]
    4444:	e79a      	b.n	437c <audioTickString2+0x9c>
							theNote[i] = 64.0f;
    4446:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    444a:	ab02      	add	r3, sp, #8
    444c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4450:	f843 2c08 	str.w	r2, [r3, #-8]
    4454:	e7ad      	b.n	43b2 <audioTickString2+0xd2>
				for (int i = 0; i < numStringsThisBoard; i++)
    4456:	2400      	movs	r4, #0
    4458:	e7c8      	b.n	43ec <audioTickString2+0x10c>
				newPluck = 0;
    445a:	4b70      	ldr	r3, [pc, #448]	; (461c <audioTickString2+0x33c>)
    445c:	2200      	movs	r2, #0
    445e:	601a      	str	r2, [r3, #0]
    4460:	e75b      	b.n	431a <audioTickString2+0x3a>
			theNote[i] = 0.0f;
    4462:	2200      	movs	r2, #0
    4464:	ab02      	add	r3, sp, #8
    4466:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    446a:	f843 2c08 	str.w	r2, [r3, #-8]
    446e:	e0b4      	b.n	45da <audioTickString2+0x2fa>
		if (isnan(theNote[i]))
    4470:	ab02      	add	r3, sp, #8
    4472:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4476:	ed53 7a02 	vldr	s15, [r3, #-8]
    447a:	eef4 7a67 	vcmp.f32	s15, s15
    447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4482:	f180 80bd 	bvs.w	4600 <audioTickString2+0x320>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    4486:	4b71      	ldr	r3, [pc, #452]	; (464c <audioTickString2+0x36c>)
    4488:	ed93 0a00 	vldr	s0, [r3]
    448c:	4b70      	ldr	r3, [pc, #448]	; (4650 <audioTickString2+0x370>)
    448e:	edd3 7a00 	vldr	s15, [r3]
    4492:	ee30 0a67 	vsub.f32	s0, s0, s15
    4496:	eeb0 0ac0 	vabs.f32	s0, s0
		if (barDelta > 0.5f)
    449a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    449e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    44a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44a6:	dd01      	ble.n	44ac <audioTickString2+0x1cc>
			barDelta = 0.0f; //to avoid noise on open string glitches
    44a8:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 4620 <audioTickString2+0x340>
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    44ac:	00ac      	lsls	r4, r5, #2
    44ae:	4e69      	ldr	r6, [pc, #420]	; (4654 <audioTickString2+0x374>)
    44b0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
    44b4:	4630      	mov	r0, r6
    44b6:	f003 fe17 	bl	80e8 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    44ba:	4630      	mov	r0, r6
    44bc:	f003 fcb4 	bl	7e28 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    44c0:	4865      	ldr	r0, [pc, #404]	; (4658 <audioTickString2+0x378>)
    44c2:	4420      	add	r0, r4
    44c4:	f003 fc58 	bl	7d78 <__tEnvelopeFollower_tick_veneer>

		//barDelta = tExpSmooth_tick(&barNoiseSmoother);
		prevBarInMIDI[0] = barInMIDI[0];
    44c8:	4b60      	ldr	r3, [pc, #384]	; (464c <audioTickString2+0x36c>)
    44ca:	681a      	ldr	r2, [r3, #0]
    44cc:	4b60      	ldr	r3, [pc, #384]	; (4650 <audioTickString2+0x370>)
    44ce:	601a      	str	r2, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    44d0:	4862      	ldr	r0, [pc, #392]	; (465c <audioTickString2+0x37c>)
    44d2:	f003 fc05 	bl	7ce0 <__tNoise_tick_veneer>
    44d6:	4862      	ldr	r0, [pc, #392]	; (4660 <audioTickString2+0x380>)
    44d8:	f003 fe1e 	bl	8118 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 20.0f;

		float finalFreq = mtofTableLookup(theNote[i]);
    44dc:	f104 0308 	add.w	r3, r4, #8
    44e0:	eb0d 0403 	add.w	r4, sp, r3
    44e4:	ed14 9a02 	vldr	s18, [r4, #-8]
    44e8:	eeb0 0a49 	vmov.f32	s0, s18
    44ec:	f003 fbdc 	bl	7ca8 <__mtofTableLookup_veneer>
    44f0:	eeb0 8a40 	vmov.f32	s16, s0


		if (thisFrameCount == 0)
    44f4:	4b5b      	ldr	r3, [pc, #364]	; (4664 <audioTickString2+0x384>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	2b00      	cmp	r3, #0
    44fa:	f000 80bd 	beq.w	4678 <audioTickString2+0x398>
		{
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.002f, 0.0001f);
			inHarm = LEAF_clip(0.000001f, inHarm * knobScaled[1], 0.01f);
			tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
		}
		tTString_setTensionGain(&strings[i],knobScaled[4]);
    44fe:	4c50      	ldr	r4, [pc, #320]	; (4640 <audioTickString2+0x360>)
    4500:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    4504:	4e44      	ldr	r6, [pc, #272]	; (4618 <audioTickString2+0x338>)
    4506:	ed96 0a04 	vldr	s0, [r6, #16]
    450a:	4620      	mov	r0, r4
    450c:	f003 fd74 	bl	7ff8 <__tTString_setTensionGain_veneer>
		tTString_setTensionSpeed(&strings[i],knobScaled[5]);
    4510:	ed96 0a05 	vldr	s0, [r6, #20]
    4514:	4620      	mov	r0, r4
    4516:	f003 fcdf 	bl	7ed8 <__tTString_setTensionSpeed_veneer>
		tTString_setDecay(&strings[i],knobScaled[0]);
    451a:	ed96 0a00 	vldr	s0, [r6]
    451e:	4620      	mov	r0, r4
    4520:	f003 fd8a 	bl	8038 <__tTString_setDecay_veneer>
		//tSimpleLivingString5_setFreq(&strings[i], finalFreq);
		tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[8]);
    4524:	ed96 0a08 	vldr	s0, [r6, #32]
    4528:	4620      	mov	r0, r4
    452a:	f003 fd59 	bl	7fe0 <__tTString_setPhantomHarmonicsGain_veneer>
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    452e:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    4532:	4620      	mov	r0, r4
    4534:	f003 fd7c 	bl	8030 <__tTString_setPickupPos_veneer>

		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    4538:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
    453c:	4620      	mov	r0, r4
    453e:	f003 fdb7 	bl	80b0 <__tTString_setPickupModFreq_veneer>

		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
    4542:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
    4546:	4620      	mov	r0, r4
    4548:	f003 fc86 	bl	7e58 <__tTString_setPickupModAmp_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    454c:	eeb0 0a48 	vmov.f32	s0, s16
    4550:	4620      	mov	r0, r4
    4552:	f003 fd31 	bl	7fb8 <__tTString_setFreq_veneer>

		tTString_setFilter(&strings[i], knobScaled[3]);
    4556:	ed96 0a03 	vldr	s0, [r6, #12]
    455a:	4620      	mov	r0, r4
    455c:	f003 fc8c 	bl	7e78 <__tTString_setFilter_veneer>

		tTString_setHarmonic(&strings[i],(knobScaled[6] * 15.0f) + 2.0f);
    4560:	edd6 7a06 	vldr	s15, [r6, #24]
    4564:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    4568:	ee67 7a87 	vmul.f32	s15, s15, s14
    456c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    4570:	ee37 0a80 	vadd.f32	s0, s15, s0
    4574:	4620      	mov	r0, r4
    4576:	f003 fbf3 	bl	7d60 <__tTString_setHarmonic_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[7]);
    457a:	ed96 0a07 	vldr	s0, [r6, #28]
    457e:	4620      	mov	r0, r4
    4580:	f003 fcca 	bl	7f18 <__tTString_setRippleDepth_veneer>
		tTString_setSlideGain(&strings[i],knobScaled[5] * 100.0f);
    4584:	ed96 0a05 	vldr	s0, [r6, #20]
    4588:	eddf 7a37 	vldr	s15, [pc, #220]	; 4668 <audioTickString2+0x388>
    458c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4590:	4620      	mov	r0, r4
    4592:	f003 fdcd 	bl	8130 <__tTString_setSlideGain_veneer>
		//temp += (tSimpleLivingString5_tick(&strings[i], slideNoise));//(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
		temp += tTString_tick(&strings[i]);
    4596:	4620      	mov	r0, r4
    4598:	f003 fd52 	bl	8040 <__tTString_tick_veneer>
    459c:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    45a0:	3501      	adds	r5, #1
    45a2:	4b29      	ldr	r3, [pc, #164]	; (4648 <audioTickString2+0x368>)
    45a4:	781b      	ldrb	r3, [r3, #0]
    45a6:	42ab      	cmp	r3, r5
    45a8:	f340 8085 	ble.w	46b6 <audioTickString2+0x3d6>
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    45ac:	4b22      	ldr	r3, [pc, #136]	; (4638 <audioTickString2+0x358>)
    45ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45b2:	edd3 7a00 	vldr	s15, [r3]
    45b6:	4b1d      	ldr	r3, [pc, #116]	; (462c <audioTickString2+0x34c>)
    45b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45bc:	ed93 7a00 	vldr	s14, [r3]
    45c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    45c4:	ab02      	add	r3, sp, #8
    45c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45ca:	ed43 7a02 	vstr	s15, [r3, #-8]
		if (theNote[i] < 0.0f)
    45ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    45d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45d6:	f53f af44 	bmi.w	4462 <audioTickString2+0x182>
		if (theNote[i] > 127.0f)
    45da:	ab02      	add	r3, sp, #8
    45dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45e0:	ed13 7a02 	vldr	s14, [r3, #-8]
    45e4:	eddf 7a15 	vldr	s15, [pc, #84]	; 463c <audioTickString2+0x35c>
    45e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    45ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45f0:	f77f af3e 	ble.w	4470 <audioTickString2+0x190>
			theNote[i] = 127.0f;
    45f4:	ab02      	add	r3, sp, #8
    45f6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    45fa:	ed43 7a02 	vstr	s15, [r3, #-8]
    45fe:	e737      	b.n	4470 <audioTickString2+0x190>
			theNote[i] = 64.0f;
    4600:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    4604:	ab02      	add	r3, sp, #8
    4606:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    460a:	f843 2c08 	str.w	r2, [r3, #-8]
    460e:	e73a      	b.n	4486 <audioTickString2+0x1a6>
    4610:	20013e24 	.word	0x20013e24
    4614:	20004e28 	.word	0x20004e28
    4618:	20004df8 	.word	0x20004df8
    461c:	20004eb8 	.word	0x20004eb8
    4620:	00000000 	.word	0x00000000
    4624:	20013dd4 	.word	0x20013dd4
    4628:	37800080 	.word	0x37800080
    462c:	20013df4 	.word	0x20013df4
    4630:	20004ec4 	.word	0x20004ec4
    4634:	20004dd4 	.word	0x20004dd4
    4638:	20013dec 	.word	0x20013dec
    463c:	42fe0000 	.word	0x42fe0000
    4640:	2001c588 	.word	0x2001c588
    4644:	20004f28 	.word	0x20004f28
    4648:	200004b1 	.word	0x200004b1
    464c:	20000da4 	.word	0x20000da4
    4650:	20004f20 	.word	0x20004f20
    4654:	20000db4 	.word	0x20000db4
    4658:	20000dac 	.word	0x20000dac
    465c:	20004eb4 	.word	0x20004eb4
    4660:	20004ec0 	.word	0x20004ec0
    4664:	2001c590 	.word	0x2001c590
    4668:	42c80000 	.word	0x42c80000
    466c:	38d1b717 	.word	0x38d1b717
    4670:	3b03126f 	.word	0x3b03126f
    4674:	42980000 	.word	0x42980000
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.002f, 0.0001f);
    4678:	ed1f 2a04 	vldr	s4, [pc, #-16]	; 466c <audioTickString2+0x38c>
    467c:	ed5f 1a04 	vldr	s3, [pc, #-16]	; 4670 <audioTickString2+0x390>
    4680:	ed1f 1a04 	vldr	s2, [pc, #-16]	; 4674 <audioTickString2+0x394>
    4684:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    4688:	eeb0 0a49 	vmov.f32	s0, s18
    468c:	f003 fc40 	bl	7f10 <__LEAF_map_veneer>
			inHarm = LEAF_clip(0.000001f, inHarm * knobScaled[1], 0.01f);
    4690:	4b29      	ldr	r3, [pc, #164]	; (4738 <audioTickString2+0x458>)
    4692:	edd3 0a01 	vldr	s1, [r3, #4]
    4696:	ed9f 1a29 	vldr	s2, [pc, #164]	; 473c <audioTickString2+0x45c>
    469a:	ee60 0a80 	vmul.f32	s1, s1, s0
    469e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 4740 <audioTickString2+0x460>
    46a2:	f003 fc15 	bl	7ed0 <__LEAF_clip_veneer>
			tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    46a6:	eef0 0a48 	vmov.f32	s1, s16
    46aa:	4826      	ldr	r0, [pc, #152]	; (4744 <audioTickString2+0x464>)
    46ac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    46b0:	f003 fbb2 	bl	7e18 <__tTString_setHarmonicity_veneer>
    46b4:	e723      	b.n	44fe <audioTickString2+0x21e>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    46b6:	4a24      	ldr	r2, [pc, #144]	; (4748 <audioTickString2+0x468>)
    46b8:	6813      	ldr	r3, [r2, #0]
    46ba:	3301      	adds	r3, #1
    46bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    46c0:	6013      	str	r3, [r2, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    46c2:	ed9f 1a22 	vldr	s2, [pc, #136]	; 474c <audioTickString2+0x46c>
    46c6:	eddf 0a22 	vldr	s1, [pc, #136]	; 4750 <audioTickString2+0x470>
    46ca:	ee69 0aa0 	vmul.f32	s1, s19, s1
    46ce:	ed9f 0a21 	vldr	s0, [pc, #132]	; 4754 <audioTickString2+0x474>
    46d2:	f003 fbfd 	bl	7ed0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    46d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    46da:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    46de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    46e2:	ee30 0a67 	vsub.f32	s0, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    46e6:	1c59      	adds	r1, r3, #1
    46e8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    46ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    46f0:	ee71 7a40 	vsub.f32	s15, s2, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    46f4:	4a18      	ldr	r2, [pc, #96]	; (4758 <audioTickString2+0x478>)
    46f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    46fa:	ed93 7a00 	vldr	s14, [r3]
    46fe:	ee27 7a27 	vmul.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4702:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4706:	edd2 7a00 	vldr	s15, [r2]
    470a:	ee67 7a80 	vmul.f32	s15, s15, s0
    470e:	ee77 7a87 	vadd.f32	s15, s15, s14

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    4712:	4b12      	ldr	r3, [pc, #72]	; (475c <audioTickString2+0x47c>)
    4714:	ed93 7a00 	vldr	s14, [r3]
    4718:	ee67 7a87 	vmul.f32	s15, s15, s14
    471c:	ee67 7aa8 	vmul.f32	s15, s15, s17

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    4720:	eddf 0a0f 	vldr	s1, [pc, #60]	; 4760 <audioTickString2+0x480>
    4724:	ee67 0aa0 	vmul.f32	s1, s15, s1
    4728:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    472c:	f003 fbd0 	bl	7ed0 <__LEAF_clip_veneer>
}
    4730:	b002      	add	sp, #8
    4732:	ecbd 8b04 	vpop	{d8-d9}
    4736:	bd70      	pop	{r4, r5, r6, pc}
    4738:	20004df8 	.word	0x20004df8
    473c:	3c23d70a 	.word	0x3c23d70a
    4740:	358637bd 	.word	0x358637bd
    4744:	2001c588 	.word	0x2001c588
    4748:	2001c590 	.word	0x2001c590
    474c:	42fe0000 	.word	0x42fe0000
    4750:	42a00000 	.word	0x42a00000
    4754:	00000000 	.word	0x00000000
    4758:	2000051c 	.word	0x2000051c
    475c:	200004a8 	.word	0x200004a8
    4760:	3f7ae148 	.word	0x3f7ae148
    4764:	f3af 8000 	nop.w
    4768:	f3af 8000 	nop.w
    476c:	f3af 8000 	nop.w
    4770:	f3af 8000 	nop.w
    4774:	f3af 8000 	nop.w
    4778:	f3af 8000 	nop.w
    477c:	f3af 8000 	nop.w

00004780 <audioFrameString2>:
{
    4780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4782:	4606      	mov	r6, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    4784:	4b25      	ldr	r3, [pc, #148]	; (481c <audioFrameString2+0x9c>)
    4786:	685f      	ldr	r7, [r3, #4]
		if (resetStringInputs)
    4788:	4b25      	ldr	r3, [pc, #148]	; (4820 <audioFrameString2+0xa0>)
    478a:	781b      	ldrb	r3, [r3, #0]
    478c:	b99b      	cbnz	r3, 47b6 <audioFrameString2+0x36>
			for (int i = 0; i < numStringsThisBoard; i++)
    478e:	2500      	movs	r5, #0
    4790:	e025      	b.n	47de <audioFrameString2+0x5e>
				tADSRT_off(&fenvelopes[i]);
    4792:	4824      	ldr	r0, [pc, #144]	; (4824 <audioFrameString2+0xa4>)
    4794:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4798:	f003 faa6 	bl	7ce8 <__tADSRT_off_veneer>
				previousStringInputs[i] = 0;
    479c:	4b22      	ldr	r3, [pc, #136]	; (4828 <audioFrameString2+0xa8>)
    479e:	2200      	movs	r2, #0
    47a0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    47a4:	3401      	adds	r4, #1
    47a6:	4b21      	ldr	r3, [pc, #132]	; (482c <audioFrameString2+0xac>)
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	42a3      	cmp	r3, r4
    47ac:	dcf1      	bgt.n	4792 <audioFrameString2+0x12>
			resetStringInputs = 0;
    47ae:	4b1c      	ldr	r3, [pc, #112]	; (4820 <audioFrameString2+0xa0>)
    47b0:	2200      	movs	r2, #0
    47b2:	701a      	strb	r2, [r3, #0]
    47b4:	e7eb      	b.n	478e <audioFrameString2+0xe>
			for (int i = 0; i < numStringsThisBoard; i++)
    47b6:	2400      	movs	r4, #0
    47b8:	e7f5      	b.n	47a6 <audioFrameString2+0x26>
			int iplusbuffer = buffer_offset + i;
    47ba:	1974      	adds	r4, r6, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    47bc:	f7ff fd90 	bl	42e0 <audioTickString2>
    47c0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 4830 <audioFrameString2+0xb0>
    47c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    47c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    47cc:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer] = current_sample;
    47d0:	4a18      	ldr	r2, [pc, #96]	; (4834 <audioFrameString2+0xb4>)
    47d2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    47d6:	3401      	adds	r4, #1
    47d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    47dc:	3502      	adds	r5, #2
    47de:	2d7f      	cmp	r5, #127	; 0x7f
    47e0:	ddeb      	ble.n	47ba <audioFrameString2+0x3a>
		if (switchStrings)
    47e2:	4b15      	ldr	r3, [pc, #84]	; (4838 <audioFrameString2+0xb8>)
    47e4:	681b      	ldr	r3, [r3, #0]
    47e6:	b9a3      	cbnz	r3, 4812 <audioFrameString2+0x92>
		switchStrings = 0;
    47e8:	4b13      	ldr	r3, [pc, #76]	; (4838 <audioFrameString2+0xb8>)
    47ea:	2200      	movs	r2, #0
    47ec:	601a      	str	r2, [r3, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    47ee:	4b0b      	ldr	r3, [pc, #44]	; (481c <audioFrameString2+0x9c>)
    47f0:	685b      	ldr	r3, [r3, #4]
    47f2:	1bdb      	subs	r3, r3, r7
    47f4:	4a11      	ldr	r2, [pc, #68]	; (483c <audioFrameString2+0xbc>)
    47f6:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    47f8:	ee07 3a90 	vmov	s15, r3
    47fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4800:	4b0f      	ldr	r3, [pc, #60]	; (4840 <audioFrameString2+0xc0>)
    4802:	ed93 7a00 	vldr	s14, [r3]
    4806:	ee67 7a87 	vmul.f32	s15, s15, s14
    480a:	4b0e      	ldr	r3, [pc, #56]	; (4844 <audioFrameString2+0xc4>)
    480c:	edc3 7a00 	vstr	s15, [r3]
}
    4810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switchStringModel(switchStrings);
    4812:	4b09      	ldr	r3, [pc, #36]	; (4838 <audioFrameString2+0xb8>)
    4814:	6818      	ldr	r0, [r3, #0]
    4816:	f7fc fce3 	bl	11e0 <switchStringModel>
    481a:	e7e5      	b.n	47e8 <audioFrameString2+0x68>
    481c:	e0001000 	.word	0xe0001000
    4820:	20005340 	.word	0x20005340
    4824:	20004dd4 	.word	0x20004dd4
    4828:	20004f28 	.word	0x20004f28
    482c:	200004b1 	.word	0x200004b1
    4830:	4b000000 	.word	0x4b000000
    4834:	30000000 	.word	0x30000000
    4838:	20013e0c 	.word	0x20013e0c
    483c:	20013e10 	.word	0x20013e10
    4840:	200004a4 	.word	0x200004a4
    4844:	20004de4 	.word	0x20004de4
	...

00004860 <oscillator_tick>:
{
    4860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4864:	ed2d 8b06 	vpush	{d8-d10}
    4868:	b083      	sub	sp, #12
    486a:	eef0 8a40 	vmov.f32	s17, s0
    486e:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_OSC; i++)
    4870:	2400      	movs	r4, #0
    4872:	e00b      	b.n	488c <oscillator_tick+0x2c>
		oscOuts[0][i][string] = 0.0f;
    4874:	4a4a      	ldr	r2, [pc, #296]	; (49a0 <oscillator_tick+0x140>)
    4876:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    487a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    487e:	2300      	movs	r3, #0
    4880:	6003      	str	r3, [r0, #0]
		oscOuts[1][i][string] = 0.0f;
    4882:	3106      	adds	r1, #6
    4884:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4888:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OSC; i++)
    488a:	3401      	adds	r4, #1
    488c:	2c02      	cmp	r4, #2
    488e:	ddf1      	ble.n	4874 <oscillator_tick+0x14>
	for (int osc = 0; osc < oscToTick; osc++)
    4890:	2400      	movs	r4, #0
    4892:	e000      	b.n	4896 <oscillator_tick+0x36>
    4894:	3401      	adds	r4, #1
    4896:	4b43      	ldr	r3, [pc, #268]	; (49a4 <oscillator_tick+0x144>)
    4898:	781b      	ldrb	r3, [r3, #0]
    489a:	42a3      	cmp	r3, r4
    489c:	dd7a      	ble.n	4994 <oscillator_tick+0x134>
		if (oscOn[osc])
    489e:	4b42      	ldr	r3, [pc, #264]	; (49a8 <oscillator_tick+0x148>)
    48a0:	5d1b      	ldrb	r3, [r3, r4]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d0f6      	beq.n	4894 <oscillator_tick+0x34>
			param* oscParams = &params[OSC_PARAMS_OFFSET + osc * OscParamsNum];
    48a6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    48aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    48ae:	3618      	adds	r6, #24
    48b0:	00f7      	lsls	r7, r6, #3
    48b2:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    48b6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 49c8 <oscillator_tick+0x168>
    48ba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    48be:	1caa      	adds	r2, r5, #2
    48c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    48c4:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
			float freqOffset= oscParams[OscFreq].realVal[string];
    48c8:	edd3 9a15 	vldr	s19, [r3, #84]	; 0x54
			float shape = oscParams[OscShape].realVal[string];
    48cc:	ed93 aa1c 	vldr	s20, [r3, #112]	; 0x70
			float amp = oscParams[OscAmp].realVal[string];
    48d0:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
			float filterSend = oscParams[OscFilterSend].realVal[string];
    48d4:	ed93 9a54 	vldr	s18, [r3, #336]	; 0x150
			float freqToSmooth = (note + (fine*0.01f));
    48d8:	eddf 7a34 	vldr	s15, [pc, #208]	; 49ac <oscillator_tick+0x14c>
    48dc:	ee20 0a27 	vmul.f32	s0, s0, s15
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    48e0:	eb05 0a44 	add.w	sl, r5, r4, lsl #1
    48e4:	ea4f 098a 	mov.w	r9, sl, lsl #2
    48e8:	4b31      	ldr	r3, [pc, #196]	; (49b0 <oscillator_tick+0x150>)
    48ea:	eb03 0b8a 	add.w	fp, r3, sl, lsl #2
    48ee:	ee30 0a28 	vadd.f32	s0, s0, s17
    48f2:	4658      	mov	r0, fp
    48f4:	f003 fbf8 	bl	80e8 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    48f8:	4658      	mov	r0, fp
    48fa:	f003 fa95 	bl	7e28 <__tExpSmooth_tick_veneer>
    48fe:	4b2d      	ldr	r3, [pc, #180]	; (49b4 <oscillator_tick+0x154>)
    4900:	444b      	add	r3, r9
    4902:	edd3 7a00 	vldr	s15, [r3]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    4906:	ee30 0a27 	vadd.f32	s0, s0, s15
    490a:	f003 f9cd 	bl	7ca8 <__mtofTableLookup_veneer>
    490e:	4b2a      	ldr	r3, [pc, #168]	; (49b8 <oscillator_tick+0x158>)
    4910:	444b      	add	r3, r9
    4912:	edd3 7a00 	vldr	s15, [r3]
    4916:	ee20 0a27 	vmul.f32	s0, s0, s15
			float sample = 0.0f;
    491a:	2300      	movs	r3, #0
    491c:	9301      	str	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    491e:	4b27      	ldr	r3, [pc, #156]	; (49bc <oscillator_tick+0x15c>)
    4920:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
    4924:	462b      	mov	r3, r5
    4926:	2200      	movs	r2, #0
    4928:	eef0 0a4a 	vmov.f32	s1, s20
    492c:	ee30 0a29 	vadd.f32	s0, s0, s19
    4930:	4621      	mov	r1, r4
    4932:	a801      	add	r0, sp, #4
    4934:	47d8      	blx	fp
			sample *= amp;
    4936:	eddd 7a01 	vldr	s15, [sp, #4]
    493a:	ee68 7a27 	vmul.f32	s15, s16, s15
    493e:	edcd 7a01 	vstr	s15, [sp, #4]
			sourceValues[osc][string] = sample;
    4942:	4b1f      	ldr	r3, [pc, #124]	; (49c0 <oscillator_tick+0x160>)
    4944:	444b      	add	r3, r9
    4946:	edc3 7a00 	vstr	s15, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    494a:	4b1e      	ldr	r3, [pc, #120]	; (49c4 <oscillator_tick+0x164>)
    494c:	ed93 7a00 	vldr	s14, [r3]
    4950:	ee67 7a87 	vmul.f32	s15, s15, s14
    4954:	edcd 7a01 	vstr	s15, [sp, #4]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    4958:	ee67 6a89 	vmul.f32	s13, s15, s18
    495c:	1bbf      	subs	r7, r7, r6
    495e:	442f      	add	r7, r5
    4960:	3702      	adds	r7, #2
    4962:	eb08 0887 	add.w	r8, r8, r7, lsl #2
    4966:	ed98 7a00 	vldr	s14, [r8]
    496a:	ee66 6a87 	vmul.f32	s13, s13, s14
    496e:	4b0c      	ldr	r3, [pc, #48]	; (49a0 <oscillator_tick+0x140>)
    4970:	4499      	add	r9, r3
    4972:	edc9 6a00 	vstr	s13, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    4976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    497a:	ee76 6ac9 	vsub.f32	s13, s13, s18
    497e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    4982:	ee27 7a27 	vmul.f32	s14, s14, s15
    4986:	f10a 0a06 	add.w	sl, sl, #6
    498a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    498e:	ed83 7a00 	vstr	s14, [r3]
    4992:	e77f      	b.n	4894 <oscillator_tick+0x34>
}
    4994:	b003      	add	sp, #12
    4996:	ecbd 8b06 	vpop	{d8-d10}
    499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    499e:	bf00      	nop
    49a0:	2001cd64 	.word	0x2001cd64
    49a4:	2000074c 	.word	0x2000074c
    49a8:	2001cd60 	.word	0x2001cd60
    49ac:	3c23d70a 	.word	0x3c23d70a
    49b0:	2001ce3c 	.word	0x2001ce3c
    49b4:	2001ccac 	.word	0x2001ccac
    49b8:	2001c9c0 	.word	0x2001c9c0
    49bc:	2001cf04 	.word	0x2001cf04
    49c0:	2001cf80 	.word	0x2001cf80
    49c4:	20000738 	.word	0x20000738
    49c8:	20018a64 	.word	0x20018a64
    49cc:	f3af 8000 	nop.w
    49d0:	f3af 8000 	nop.w
    49d4:	f3af 8000 	nop.w
    49d8:	f3af 8000 	nop.w
    49dc:	f3af 8000 	nop.w

000049e0 <sawSquareTick>:
{
    49e0:	b538      	push	{r3, r4, r5, lr}
    49e2:	ed2d 8b02 	vpush	{d8}
    49e6:	4605      	mov	r5, r0
    49e8:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    49ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    49f0:	4c0b      	ldr	r4, [pc, #44]	; (4a20 <sawSquareTick+0x40>)
    49f2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    49f6:	4620      	mov	r0, r4
    49f8:	f003 fa92 	bl	7f20 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    49fc:	eeb0 0a48 	vmov.f32	s0, s16
    4a00:	4620      	mov	r0, r4
    4a02:	f003 fb79 	bl	80f8 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    4a06:	4620      	mov	r0, r4
    4a08:	f003 fa1e 	bl	7e48 <__tPBSawSquare_tick_veneer>
    4a0c:	edd5 7a00 	vldr	s15, [r5]
    4a10:	ee77 7a80 	vadd.f32	s15, s15, s0
    4a14:	edc5 7a00 	vstr	s15, [r5]
}
    4a18:	ecbd 8b02 	vpop	{d8}
    4a1c:	bd38      	pop	{r3, r4, r5, pc}
    4a1e:	bf00      	nop
    4a20:	2001ceac 	.word	0x2001ceac
    4a24:	f3af 8000 	nop.w
    4a28:	f3af 8000 	nop.w
    4a2c:	f3af 8000 	nop.w
    4a30:	f3af 8000 	nop.w
    4a34:	f3af 8000 	nop.w
    4a38:	f3af 8000 	nop.w
    4a3c:	f3af 8000 	nop.w

00004a40 <sineTriTick>:
{
    4a40:	b538      	push	{r3, r4, r5, lr}
    4a42:	ed2d 8b02 	vpush	{d8}
    4a46:	4605      	mov	r5, r0
    4a48:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    4a4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    4a50:	4c0b      	ldr	r4, [pc, #44]	; (4a80 <sineTriTick+0x40>)
    4a52:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4a56:	4620      	mov	r0, r4
    4a58:	f003 fa36 	bl	7ec8 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    4a5c:	eeb0 0a48 	vmov.f32	s0, s16
    4a60:	4620      	mov	r0, r4
    4a62:	f003 f949 	bl	7cf8 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    4a66:	4620      	mov	r0, r4
    4a68:	f003 faf6 	bl	8058 <__tPBSineTriangle_tick_veneer>
    4a6c:	edd5 7a00 	vldr	s15, [r5]
    4a70:	ee77 7a80 	vadd.f32	s15, s15, s0
    4a74:	edc5 7a00 	vstr	s15, [r5]
}
    4a78:	ecbd 8b02 	vpop	{d8}
    4a7c:	bd38      	pop	{r3, r4, r5, pc}
    4a7e:	bf00      	nop
    4a80:	2001cf68 	.word	0x2001cf68
    4a84:	f3af 8000 	nop.w
    4a88:	f3af 8000 	nop.w
    4a8c:	f3af 8000 	nop.w
    4a90:	f3af 8000 	nop.w
    4a94:	f3af 8000 	nop.w
    4a98:	f3af 8000 	nop.w
    4a9c:	f3af 8000 	nop.w

00004aa0 <sawTick>:
{
    4aa0:	b538      	push	{r3, r4, r5, lr}
    4aa2:	4604      	mov	r4, r0
	tPBSaw_setFreq(&saw[v][string], freq);
    4aa4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    4aa8:	4d07      	ldr	r5, [pc, #28]	; (4ac8 <sawTick+0x28>)
    4aaa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4aae:	4628      	mov	r0, r5
    4ab0:	f003 faea 	bl	8088 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    4ab4:	4628      	mov	r0, r5
    4ab6:	f003 fa63 	bl	7f80 <__tPBSaw_tick_veneer>
    4aba:	edd4 7a00 	vldr	s15, [r4]
    4abe:	ee77 7a80 	vadd.f32	s15, s15, s0
    4ac2:	edc4 7a00 	vstr	s15, [r4]
}
    4ac6:	bd38      	pop	{r3, r4, r5, pc}
    4ac8:	2001ce94 	.word	0x2001ce94
    4acc:	f3af 8000 	nop.w
    4ad0:	f3af 8000 	nop.w
    4ad4:	f3af 8000 	nop.w
    4ad8:	f3af 8000 	nop.w
    4adc:	f3af 8000 	nop.w

00004ae0 <pulseTick>:
{
    4ae0:	b538      	push	{r3, r4, r5, lr}
    4ae2:	ed2d 8b02 	vpush	{d8}
    4ae6:	4605      	mov	r5, r0
    4ae8:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    4aec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    4af0:	4c0b      	ldr	r4, [pc, #44]	; (4b20 <pulseTick+0x40>)
    4af2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4af6:	4620      	mov	r0, r4
    4af8:	f003 f94e 	bl	7d98 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    4afc:	eeb0 0a48 	vmov.f32	s0, s16
    4b00:	4620      	mov	r0, r4
    4b02:	f003 faa5 	bl	8050 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    4b06:	4620      	mov	r0, r4
    4b08:	f003 f916 	bl	7d38 <__tPBPulse_tick_veneer>
    4b0c:	edd5 7a00 	vldr	s15, [r5]
    4b10:	ee77 7a80 	vadd.f32	s15, s15, s0
    4b14:	edc5 7a00 	vstr	s15, [r5]
}
    4b18:	ecbd 8b02 	vpop	{d8}
    4b1c:	bd38      	pop	{r3, r4, r5, pc}
    4b1e:	bf00      	nop
    4b20:	2001ce78 	.word	0x2001ce78
    4b24:	f3af 8000 	nop.w
    4b28:	f3af 8000 	nop.w
    4b2c:	f3af 8000 	nop.w
    4b30:	f3af 8000 	nop.w
    4b34:	f3af 8000 	nop.w
    4b38:	f3af 8000 	nop.w
    4b3c:	f3af 8000 	nop.w

00004b40 <sineTick>:
{
    4b40:	b538      	push	{r3, r4, r5, lr}
    4b42:	4604      	mov	r4, r0
    tCycle_setFreq(&sine[v][string], freq);
    4b44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    4b48:	4d07      	ldr	r5, [pc, #28]	; (4b68 <sineTick+0x28>)
    4b4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4b4e:	4628      	mov	r0, r5
    4b50:	f003 f956 	bl	7e00 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    4b54:	4628      	mov	r0, r5
    4b56:	f003 f943 	bl	7de0 <__tCycle_tick_veneer>
    4b5a:	edd4 7a00 	vldr	s15, [r4]
    4b5e:	ee77 7a80 	vadd.f32	s15, s15, s0
    4b62:	edc4 7a00 	vstr	s15, [r4]
}
    4b66:	bd38      	pop	{r3, r4, r5, pc}
    4b68:	2001cf50 	.word	0x2001cf50
    4b6c:	f3af 8000 	nop.w
    4b70:	f3af 8000 	nop.w
    4b74:	f3af 8000 	nop.w
    4b78:	f3af 8000 	nop.w
    4b7c:	f3af 8000 	nop.w

00004b80 <triTick>:
{
    4b80:	b538      	push	{r3, r4, r5, lr}
    4b82:	ed2d 8b02 	vpush	{d8}
    4b86:	4605      	mov	r5, r0
    4b88:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    4b8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    4b90:	4c0b      	ldr	r4, [pc, #44]	; (4bc0 <triTick+0x40>)
    4b92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4b96:	4620      	mov	r0, r4
    4b98:	f003 f9a2 	bl	7ee0 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    4b9c:	eeb0 0a48 	vmov.f32	s0, s16
    4ba0:	4620      	mov	r0, r4
    4ba2:	f003 f9f5 	bl	7f90 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    4ba6:	4620      	mov	r0, r4
    4ba8:	f003 fa2a 	bl	8000 <__tPBTriangle_tick_veneer>
    4bac:	edd5 7a00 	vldr	s15, [r5]
    4bb0:	ee77 7a80 	vadd.f32	s15, s15, s0
    4bb4:	edc5 7a00 	vstr	s15, [r5]
}
    4bb8:	ecbd 8b02 	vpop	{d8}
    4bbc:	bd38      	pop	{r3, r4, r5, pc}
    4bbe:	bf00      	nop
    4bc0:	2001d100 	.word	0x2001d100
    4bc4:	f3af 8000 	nop.w
    4bc8:	f3af 8000 	nop.w
    4bcc:	f3af 8000 	nop.w
    4bd0:	f3af 8000 	nop.w
    4bd4:	f3af 8000 	nop.w
    4bd8:	f3af 8000 	nop.w
    4bdc:	f3af 8000 	nop.w

00004be0 <userTick>:
}
    4be0:	4770      	bx	lr
    4be2:	bf00      	nop
    4be4:	f3af 8000 	nop.w
    4be8:	f3af 8000 	nop.w
    4bec:	f3af 8000 	nop.w
    4bf0:	f3af 8000 	nop.w
    4bf4:	f3af 8000 	nop.w
    4bf8:	f3af 8000 	nop.w
    4bfc:	f3af 8000 	nop.w

00004c00 <filter_tick>:
{
    4c00:	b530      	push	{r4, r5, lr}
    4c02:	ed2d 8b02 	vpush	{d8}
    4c06:	b085      	sub	sp, #20
    4c08:	4604      	mov	r4, r0
    4c0a:	460d      	mov	r5, r1
	uint8_t enabledFilt[2] = {0,0};
    4c0c:	2200      	movs	r2, #0
    4c0e:	f8ad 2004 	strh.w	r2, [sp, #4]
	for (int f = 0; f < NUM_FILT; f++)
    4c12:	e009      	b.n	4c28 <filter_tick+0x28>
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    4c14:	ee60 7a27 	vmul.f32	s15, s0, s15
    4c18:	ee77 7a87 	vadd.f32	s15, s15, s14
    4c1c:	ab04      	add	r3, sp, #16
    4c1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c22:	ed43 7a02 	vstr	s15, [r3, #-8]
	for (int f = 0; f < NUM_FILT; f++)
    4c26:	3201      	adds	r2, #1
    4c28:	2a01      	cmp	r2, #1
    4c2a:	dc2f      	bgt.n	4c8c <filter_tick+0x8c>
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
    4c2c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4c30:	005b      	lsls	r3, r3, #1
    4c32:	335f      	adds	r3, #95	; 0x5f
    4c34:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
    4c38:	4830      	ldr	r0, [pc, #192]	; (4cfc <filter_tick+0xfc>)
    4c3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		float enabled = filtParams[FilterEnabled].realVal[string];
    4c3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4c42:	442b      	add	r3, r5
    4c44:	3302      	adds	r3, #2
    4c46:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4c4a:	ed90 7a00 	vldr	s14, [r0]
		enabledFilt[f] = (enabled > 0.5f);
    4c4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c5a:	bfcc      	ite	gt
    4c5c:	2301      	movgt	r3, #1
    4c5e:	2300      	movle	r3, #0
    4c60:	f102 0010 	add.w	r0, r2, #16
    4c64:	4468      	add	r0, sp
    4c66:	f800 3c0c 	strb.w	r3, [r0, #-12]
		if (!enabledFilt[f]) continue;
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d0db      	beq.n	4c26 <filter_tick+0x26>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    4c6e:	1cab      	adds	r3, r5, #2
    4c70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    4c74:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    4c78:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
		if (isnan(note))
    4c7c:	eeb4 0a40 	vcmp.f32	s0, s0
    4c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c84:	d7c6      	bvc.n	4c14 <filter_tick+0x14>
			note = 0.0f; //is this necessary?
    4c86:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 4d00 <filter_tick+0x100>
    4c8a:	e7c3      	b.n	4c14 <filter_tick+0x14>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    4c8c:	f205 22ef 	addw	r2, r5, #751	; 0x2ef
    4c90:	4b1a      	ldr	r3, [pc, #104]	; (4cfc <filter_tick+0xfc>)
    4c92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c96:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    4c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4c9e:	b13b      	cbz	r3, 4cb0 <filter_tick+0xb0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    4ca0:	4b18      	ldr	r3, [pc, #96]	; (4d04 <filter_tick+0x104>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	462a      	mov	r2, r5
    4ca6:	ed9d 0a02 	vldr	s0, [sp, #8]
    4caa:	2100      	movs	r1, #0
    4cac:	4620      	mov	r0, r4
    4cae:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    4cb0:	ed94 7a00 	vldr	s14, [r4]
    4cb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4cb8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    4cbc:	ee27 7a27 	vmul.f32	s14, s14, s15
	samples[1] += sendToFilter2;
    4cc0:	edd4 7a01 	vldr	s15, [r4, #4]
    4cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
    4cc8:	edc4 7a01 	vstr	s15, [r4, #4]
	if (enabledFilt[1])
    4ccc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4cd0:	b13b      	cbz	r3, 4ce2 <filter_tick+0xe2>
		filterTick[1](&samples[1], 1, cutoff[1], string);
    4cd2:	4b0c      	ldr	r3, [pc, #48]	; (4d04 <filter_tick+0x104>)
    4cd4:	685b      	ldr	r3, [r3, #4]
    4cd6:	462a      	mov	r2, r5
    4cd8:	ed9d 0a03 	vldr	s0, [sp, #12]
    4cdc:	2101      	movs	r1, #1
    4cde:	1d20      	adds	r0, r4, #4
    4ce0:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    4ce2:	ed94 0a01 	vldr	s0, [r4, #4]
    4ce6:	edd4 7a00 	vldr	s15, [r4]
    4cea:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    4cee:	ee30 0a27 	vadd.f32	s0, s0, s15
    4cf2:	b005      	add	sp, #20
    4cf4:	ecbd 8b02 	vpop	{d8}
    4cf8:	bd30      	pop	{r4, r5, pc}
    4cfa:	bf00      	nop
    4cfc:	20018a64 	.word	0x20018a64
    4d00:	00000000 	.word	0x00000000
    4d04:	2001c9a8 	.word	0x2001c9a8
    4d08:	f3af 8000 	nop.w
    4d0c:	f3af 8000 	nop.w
    4d10:	f3af 8000 	nop.w
    4d14:	f3af 8000 	nop.w
    4d18:	f3af 8000 	nop.w
    4d1c:	f3af 8000 	nop.w

00004d20 <lowpassTick>:
{
    4d20:	b570      	push	{r4, r5, r6, lr}
    4d22:	4604      	mov	r4, r0
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    4d24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4d28:	0096      	lsls	r6, r2, #2
    4d2a:	4d0b      	ldr	r5, [pc, #44]	; (4d58 <lowpassTick+0x38>)
    4d2c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4d30:	4628      	mov	r0, r5
    4d32:	f003 f9e5 	bl	8100 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    4d36:	ed94 0a00 	vldr	s0, [r4]
    4d3a:	4628      	mov	r0, r5
    4d3c:	f003 f890 	bl	7e60 <__tSVF_tick_veneer>
    4d40:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4d44:	4b05      	ldr	r3, [pc, #20]	; (4d5c <lowpassTick+0x3c>)
    4d46:	4433      	add	r3, r6
    4d48:	edd3 7a00 	vldr	s15, [r3]
    4d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4d50:	ed84 0a00 	vstr	s0, [r4]
}
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	bf00      	nop
    4d58:	2001cb9c 	.word	0x2001cb9c
    4d5c:	2001c998 	.word	0x2001c998

00004d60 <highpassTick>:
{
    4d60:	b570      	push	{r4, r5, r6, lr}
    4d62:	4604      	mov	r4, r0
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    4d64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4d68:	0096      	lsls	r6, r2, #2
    4d6a:	4d0b      	ldr	r5, [pc, #44]	; (4d98 <highpassTick+0x38>)
    4d6c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4d70:	4628      	mov	r0, r5
    4d72:	f003 f9c5 	bl	8100 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    4d76:	ed94 0a00 	vldr	s0, [r4]
    4d7a:	4628      	mov	r0, r5
    4d7c:	f003 f870 	bl	7e60 <__tSVF_tick_veneer>
    4d80:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4d84:	4b05      	ldr	r3, [pc, #20]	; (4d9c <highpassTick+0x3c>)
    4d86:	4433      	add	r3, r6
    4d88:	edd3 7a00 	vldr	s15, [r3]
    4d8c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4d90:	ed84 0a00 	vstr	s0, [r4]
}
    4d94:	bd70      	pop	{r4, r5, r6, pc}
    4d96:	bf00      	nop
    4d98:	2001ca18 	.word	0x2001ca18
    4d9c:	2001c998 	.word	0x2001c998

00004da0 <bandpassTick>:
{
    4da0:	b570      	push	{r4, r5, r6, lr}
    4da2:	4604      	mov	r4, r0
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    4da4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4da8:	0096      	lsls	r6, r2, #2
    4daa:	4d0b      	ldr	r5, [pc, #44]	; (4dd8 <bandpassTick+0x38>)
    4dac:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4db0:	4628      	mov	r0, r5
    4db2:	f003 f9a5 	bl	8100 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    4db6:	ed94 0a00 	vldr	s0, [r4]
    4dba:	4628      	mov	r0, r5
    4dbc:	f003 f850 	bl	7e60 <__tSVF_tick_veneer>
    4dc0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4dc4:	4b05      	ldr	r3, [pc, #20]	; (4ddc <bandpassTick+0x3c>)
    4dc6:	4433      	add	r3, r6
    4dc8:	edd3 7a00 	vldr	s15, [r3]
    4dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
    4dd0:	ed84 0a00 	vstr	s0, [r4]
}
    4dd4:	bd70      	pop	{r4, r5, r6, pc}
    4dd6:	bf00      	nop
    4dd8:	2001c70c 	.word	0x2001c70c
    4ddc:	2001c998 	.word	0x2001c998

00004de0 <diodeLowpassTick>:
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	4604      	mov	r4, r0
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    4de4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4de8:	0096      	lsls	r6, r2, #2
    4dea:	4d0b      	ldr	r5, [pc, #44]	; (4e18 <diodeLowpassTick+0x38>)
    4dec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4df0:	4628      	mov	r0, r5
    4df2:	f003 f935 	bl	8060 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    4df6:	ed94 0a00 	vldr	s0, [r4]
    4dfa:	4628      	mov	r0, r5
    4dfc:	f002 ff8c 	bl	7d18 <__tDiodeFilter_tickEfficient_veneer>
    4e00:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4e04:	4b05      	ldr	r3, [pc, #20]	; (4e1c <diodeLowpassTick+0x3c>)
    4e06:	4433      	add	r3, r6
    4e08:	edd3 7a00 	vldr	s15, [r3]
    4e0c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4e10:	ed84 0a00 	vstr	s0, [r4]
}
    4e14:	bd70      	pop	{r4, r5, r6, pc}
    4e16:	bf00      	nop
    4e18:	2001c924 	.word	0x2001c924
    4e1c:	2001c998 	.word	0x2001c998

00004e20 <VZpeakTick>:
{
    4e20:	b538      	push	{r3, r4, r5, lr}
    4e22:	4604      	mov	r4, r0
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    4e24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4e28:	4d06      	ldr	r5, [pc, #24]	; (4e44 <VZpeakTick+0x24>)
    4e2a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4e2e:	4628      	mov	r0, r5
    4e30:	f003 f992 	bl	8158 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    4e34:	ed94 0a00 	vldr	s0, [r4]
    4e38:	4628      	mov	r0, r5
    4e3a:	f002 ff99 	bl	7d70 <__tVZFilterBell_tick_veneer>
    4e3e:	ed84 0a00 	vstr	s0, [r4]
}
    4e42:	bd38      	pop	{r3, r4, r5, pc}
    4e44:	2001c6f4 	.word	0x2001c6f4
    4e48:	f3af 8000 	nop.w
    4e4c:	f3af 8000 	nop.w
    4e50:	f3af 8000 	nop.w
    4e54:	f3af 8000 	nop.w
    4e58:	f3af 8000 	nop.w
    4e5c:	f3af 8000 	nop.w

00004e60 <VZlowshelfTick>:
{
    4e60:	b538      	push	{r3, r4, r5, lr}
    4e62:	4604      	mov	r4, r0
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    4e64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4e68:	4d06      	ldr	r5, [pc, #24]	; (4e84 <VZlowshelfTick+0x24>)
    4e6a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4e6e:	4628      	mov	r0, r5
    4e70:	f003 f902 	bl	8078 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    4e74:	ed94 0a00 	vldr	s0, [r4]
    4e78:	4628      	mov	r0, r5
    4e7a:	f003 f815 	bl	7ea8 <__tVZFilterLS_tick_veneer>
    4e7e:	ed84 0a00 	vstr	s0, [r4]
}
    4e82:	bd38      	pop	{r3, r4, r5, pc}
    4e84:	2001c6e4 	.word	0x2001c6e4
    4e88:	f3af 8000 	nop.w
    4e8c:	f3af 8000 	nop.w
    4e90:	f3af 8000 	nop.w
    4e94:	f3af 8000 	nop.w
    4e98:	f3af 8000 	nop.w
    4e9c:	f3af 8000 	nop.w

00004ea0 <VZhighshelfTick>:
{
    4ea0:	b538      	push	{r3, r4, r5, lr}
    4ea2:	4604      	mov	r4, r0
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    4ea4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4ea8:	4d06      	ldr	r5, [pc, #24]	; (4ec4 <VZhighshelfTick+0x24>)
    4eaa:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4eae:	4628      	mov	r0, r5
    4eb0:	f002 ff26 	bl	7d00 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    4eb4:	ed94 0a00 	vldr	s0, [r4]
    4eb8:	4628      	mov	r0, r5
    4eba:	f002 ff01 	bl	7cc0 <__tVZFilterHS_tick_veneer>
    4ebe:	ed84 0a00 	vstr	s0, [r4]
}
    4ec2:	bd38      	pop	{r3, r4, r5, pc}
    4ec4:	2001c6d4 	.word	0x2001c6d4
    4ec8:	f3af 8000 	nop.w
    4ecc:	f3af 8000 	nop.w
    4ed0:	f3af 8000 	nop.w
    4ed4:	f3af 8000 	nop.w
    4ed8:	f3af 8000 	nop.w
    4edc:	f3af 8000 	nop.w

00004ee0 <VZbandrejectTick>:
{
    4ee0:	b570      	push	{r4, r5, r6, lr}
    4ee2:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    4ee4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4ee8:	0096      	lsls	r6, r2, #2
    4eea:	4d0b      	ldr	r5, [pc, #44]	; (4f18 <VZbandrejectTick+0x38>)
    4eec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4ef0:	4628      	mov	r0, r5
    4ef2:	f002 ff95 	bl	7e20 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    4ef6:	ed94 0a00 	vldr	s0, [r4]
    4efa:	4628      	mov	r0, r5
    4efc:	f003 f90c 	bl	8118 <__tVZFilter_tickEfficient_veneer>
    4f00:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4f04:	4b05      	ldr	r3, [pc, #20]	; (4f1c <VZbandrejectTick+0x3c>)
    4f06:	4433      	add	r3, r6
    4f08:	edd3 7a00 	vldr	s15, [r3]
    4f0c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4f10:	ed84 0a00 	vstr	s0, [r4]
}
    4f14:	bd70      	pop	{r4, r5, r6, pc}
    4f16:	bf00      	nop
    4f18:	2001c6c4 	.word	0x2001c6c4
    4f1c:	2001c998 	.word	0x2001c998

00004f20 <LadderLowpassTick>:
{
    4f20:	b570      	push	{r4, r5, r6, lr}
    4f22:	4604      	mov	r4, r0
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    4f24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    4f28:	0096      	lsls	r6, r2, #2
    4f2a:	4d0b      	ldr	r5, [pc, #44]	; (4f58 <LadderLowpassTick+0x38>)
    4f2c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    4f30:	4628      	mov	r0, r5
    4f32:	f003 f859 	bl	7fe8 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    4f36:	ed94 0a00 	vldr	s0, [r4]
    4f3a:	4628      	mov	r0, r5
    4f3c:	f003 f814 	bl	7f68 <__tLadderFilter_tick_veneer>
    4f40:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    4f44:	4b05      	ldr	r3, [pc, #20]	; (4f5c <LadderLowpassTick+0x3c>)
    4f46:	4433      	add	r3, r6
    4f48:	edd3 7a00 	vldr	s15, [r3]
    4f4c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4f50:	ed84 0a00 	vstr	s0, [r4]
}
    4f54:	bd70      	pop	{r4, r5, r6, pc}
    4f56:	bf00      	nop
    4f58:	2001c6b4 	.word	0x2001c6b4
    4f5c:	2001c998 	.word	0x2001c998

00004f60 <setFreqMultPitch>:
	pitch *= 24.0f;
    4f60:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    4f64:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    4f68:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    4f6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    4f70:	3320      	adds	r3, #32
    4f72:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4f76:	440b      	add	r3, r1
    4f78:	3302      	adds	r3, #2
    4f7a:	4a0b      	ldr	r2, [pc, #44]	; (4fa8 <setFreqMultPitch+0x48>)
    4f7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4f80:	ed93 7a00 	vldr	s14, [r3]
    4f84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4f90:	dd01      	ble.n	4f96 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    4f92:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    4f96:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4f9a:	4b04      	ldr	r3, [pc, #16]	; (4fac <setFreqMultPitch+0x4c>)
    4f9c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4fa0:	ed83 0a00 	vstr	s0, [r3]
}
    4fa4:	4770      	bx	lr
    4fa6:	bf00      	nop
    4fa8:	20018a64 	.word	0x20018a64
    4fac:	2001ccac 	.word	0x2001ccac
    4fb0:	f3af 8000 	nop.w
    4fb4:	f3af 8000 	nop.w
    4fb8:	f3af 8000 	nop.w
    4fbc:	f3af 8000 	nop.w

00004fc0 <setFreqMultHarm>:
	harm *= 15.0f;
    4fc0:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    4fc4:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    4fc8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    4fcc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    4fd0:	3320      	adds	r3, #32
    4fd2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4fd6:	440b      	add	r3, r1
    4fd8:	3302      	adds	r3, #2
    4fda:	4a17      	ldr	r2, [pc, #92]	; (5038 <setFreqMultHarm+0x78>)
    4fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4fe0:	ed93 7a00 	vldr	s14, [r3]
    4fe4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ff0:	dd01      	ble.n	4ff6 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    4ff2:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    4ff6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ffe:	db0b      	blt.n	5018 <setFreqMultHarm+0x58>
		freqMult[osc][string] = (harm + 1);
    5000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5004:	ee30 0a27 	vadd.f32	s0, s0, s15
    5008:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    500c:	4b0b      	ldr	r3, [pc, #44]	; (503c <setFreqMultHarm+0x7c>)
    500e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5012:	ed83 0a00 	vstr	s0, [r3]
    5016:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    5018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    501c:	ee30 0a67 	vsub.f32	s0, s0, s15
    5020:	eeb0 0ac0 	vabs.f32	s0, s0
    5024:	ee87 7a80 	vdiv.f32	s14, s15, s0
    5028:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    502c:	4b03      	ldr	r3, [pc, #12]	; (503c <setFreqMultHarm+0x7c>)
    502e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5032:	ed83 7a00 	vstr	s14, [r3]
}
    5036:	4770      	bx	lr
    5038:	20018a64 	.word	0x20018a64
    503c:	2001c9c0 	.word	0x2001c9c0

00005040 <lowpassSetQ>:
{
    5040:	b508      	push	{r3, lr}
    tSVF_setQ(&lowpass[v][string], q);
    5042:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5046:	4803      	ldr	r0, [pc, #12]	; (5054 <lowpassSetQ+0x14>)
    5048:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    504c:	f002 fef8 	bl	7e40 <__tSVF_setQ_veneer>
}
    5050:	bd08      	pop	{r3, pc}
    5052:	bf00      	nop
    5054:	2001cb9c 	.word	0x2001cb9c
    5058:	f3af 8000 	nop.w
    505c:	f3af 8000 	nop.w

00005060 <highpassSetQ>:
{
    5060:	b508      	push	{r3, lr}
    tSVF_setQ(&highpass[v][string], q);
    5062:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5066:	4803      	ldr	r0, [pc, #12]	; (5074 <highpassSetQ+0x14>)
    5068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    506c:	f002 fee8 	bl	7e40 <__tSVF_setQ_veneer>
}
    5070:	bd08      	pop	{r3, pc}
    5072:	bf00      	nop
    5074:	2001ca18 	.word	0x2001ca18
    5078:	f3af 8000 	nop.w
    507c:	f3af 8000 	nop.w

00005080 <bandpassSetQ>:
{
    5080:	b508      	push	{r3, lr}
    tSVF_setQ(&bandpass[v][string], q);
    5082:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5086:	4803      	ldr	r0, [pc, #12]	; (5094 <bandpassSetQ+0x14>)
    5088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    508c:	f002 fed8 	bl	7e40 <__tSVF_setQ_veneer>
}
    5090:	bd08      	pop	{r3, pc}
    5092:	bf00      	nop
    5094:	2001c70c 	.word	0x2001c70c
    5098:	f3af 8000 	nop.w
    509c:	f3af 8000 	nop.w

000050a0 <diodeLowpassSetQ>:
{
    50a0:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    50a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    50a6:	4803      	ldr	r0, [pc, #12]	; (50b4 <diodeLowpassSetQ+0x14>)
    50a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    50ac:	f002 ff20 	bl	7ef0 <__tDiodeFilter_setQ_veneer>
}
    50b0:	bd08      	pop	{r3, pc}
    50b2:	bf00      	nop
    50b4:	2001c924 	.word	0x2001c924
    50b8:	f3af 8000 	nop.w
    50bc:	f3af 8000 	nop.w

000050c0 <VZpeakSetQ>:
{
    50c0:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    50c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    50c6:	4803      	ldr	r0, [pc, #12]	; (50d4 <VZpeakSetQ+0x14>)
    50c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    50cc:	f002 ff84 	bl	7fd8 <__tVZFilterBell_setBandwidth_veneer>
}
    50d0:	bd08      	pop	{r3, pc}
    50d2:	bf00      	nop
    50d4:	2001c6f4 	.word	0x2001c6f4
    50d8:	f3af 8000 	nop.w
    50dc:	f3af 8000 	nop.w

000050e0 <VZlowshelfSetQ>:
{
    50e0:	b508      	push	{r3, lr}
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    50e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    50e6:	4803      	ldr	r0, [pc, #12]	; (50f4 <VZlowshelfSetQ+0x14>)
    50e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    50ec:	f003 f83c 	bl	8168 <__tVZFilterLS_setResonance_veneer>
}
    50f0:	bd08      	pop	{r3, pc}
    50f2:	bf00      	nop
    50f4:	2001c6e4 	.word	0x2001c6e4
    50f8:	f3af 8000 	nop.w
    50fc:	f3af 8000 	nop.w

00005100 <VZhighshelfSetQ>:
{
    5100:	b508      	push	{r3, lr}
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    5102:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5106:	4803      	ldr	r0, [pc, #12]	; (5114 <VZhighshelfSetQ+0x14>)
    5108:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    510c:	f002 ff1c 	bl	7f48 <__tVZFilterHS_setResonance_veneer>
}
    5110:	bd08      	pop	{r3, pc}
    5112:	bf00      	nop
    5114:	2001c6d4 	.word	0x2001c6d4
    5118:	f3af 8000 	nop.w
    511c:	f3af 8000 	nop.w

00005120 <VZbandrejectSetQ>:
{
    5120:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    5122:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5126:	4803      	ldr	r0, [pc, #12]	; (5134 <VZbandrejectSetQ+0x14>)
    5128:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    512c:	f002 fe48 	bl	7dc0 <__tVZFilter_setResonance_veneer>
}
    5130:	bd08      	pop	{r3, pc}
    5132:	bf00      	nop
    5134:	2001c6c4 	.word	0x2001c6c4
    5138:	f3af 8000 	nop.w
    513c:	f3af 8000 	nop.w

00005140 <LadderLowpassSetQ>:
{
    5140:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    5142:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5146:	4803      	ldr	r0, [pc, #12]	; (5154 <LadderLowpassSetQ+0x14>)
    5148:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    514c:	f002 fe00 	bl	7d50 <__tLadderFilter_setQ_veneer>
}
    5150:	bd08      	pop	{r3, pc}
    5152:	bf00      	nop
    5154:	2001c6b4 	.word	0x2001c6b4
    5158:	f3af 8000 	nop.w
    515c:	f3af 8000 	nop.w

00005160 <lowpassSetGain>:
{
    5160:	b538      	push	{r3, r4, r5, lr}
    5162:	4605      	mov	r5, r0
    5164:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    5166:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    516a:	ee20 0a27 	vmul.f32	s0, s0, s15
    516e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    5172:	ee30 0a67 	vsub.f32	s0, s0, s15
    5176:	f002 fddb 	bl	7d30 <__dbToATableLookup_veneer>
    517a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    517e:	4b03      	ldr	r3, [pc, #12]	; (518c <lowpassSetGain+0x2c>)
    5180:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5184:	ed83 0a00 	vstr	s0, [r3]
}
    5188:	bd38      	pop	{r3, r4, r5, pc}
    518a:	bf00      	nop
    518c:	2001c998 	.word	0x2001c998
    5190:	f3af 8000 	nop.w
    5194:	f3af 8000 	nop.w
    5198:	f3af 8000 	nop.w
    519c:	f3af 8000 	nop.w

000051a0 <highpassSetGain>:
{
    51a0:	b538      	push	{r3, r4, r5, lr}
    51a2:	4605      	mov	r5, r0
    51a4:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    51a6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    51aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    51ae:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    51b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    51b6:	f002 fdbb 	bl	7d30 <__dbToATableLookup_veneer>
    51ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    51be:	4b03      	ldr	r3, [pc, #12]	; (51cc <highpassSetGain+0x2c>)
    51c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    51c4:	ed83 0a00 	vstr	s0, [r3]
}
    51c8:	bd38      	pop	{r3, r4, r5, pc}
    51ca:	bf00      	nop
    51cc:	2001c998 	.word	0x2001c998
    51d0:	f3af 8000 	nop.w
    51d4:	f3af 8000 	nop.w
    51d8:	f3af 8000 	nop.w
    51dc:	f3af 8000 	nop.w

000051e0 <bandpassSetGain>:
{
    51e0:	b538      	push	{r3, r4, r5, lr}
    51e2:	4605      	mov	r5, r0
    51e4:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    51e6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    51ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    51ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    51f2:	ee30 0a67 	vsub.f32	s0, s0, s15
    51f6:	f002 fd9b 	bl	7d30 <__dbToATableLookup_veneer>
    51fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    51fe:	4b03      	ldr	r3, [pc, #12]	; (520c <bandpassSetGain+0x2c>)
    5200:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5204:	ed83 0a00 	vstr	s0, [r3]
}
    5208:	bd38      	pop	{r3, r4, r5, pc}
    520a:	bf00      	nop
    520c:	2001c998 	.word	0x2001c998
    5210:	f3af 8000 	nop.w
    5214:	f3af 8000 	nop.w
    5218:	f3af 8000 	nop.w
    521c:	f3af 8000 	nop.w

00005220 <diodeLowpassSetGain>:
{
    5220:	b538      	push	{r3, r4, r5, lr}
    5222:	4605      	mov	r5, r0
    5224:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    5226:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    522a:	ee20 0a27 	vmul.f32	s0, s0, s15
    522e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    5232:	ee30 0a67 	vsub.f32	s0, s0, s15
    5236:	f002 fd7b 	bl	7d30 <__dbToATableLookup_veneer>
    523a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    523e:	4b03      	ldr	r3, [pc, #12]	; (524c <diodeLowpassSetGain+0x2c>)
    5240:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5244:	ed83 0a00 	vstr	s0, [r3]
}
    5248:	bd38      	pop	{r3, r4, r5, pc}
    524a:	bf00      	nop
    524c:	2001c998 	.word	0x2001c998
    5250:	f3af 8000 	nop.w
    5254:	f3af 8000 	nop.w
    5258:	f3af 8000 	nop.w
    525c:	f3af 8000 	nop.w

00005260 <VZpeakSetGain>:
{
    5260:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    5262:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5266:	4c08      	ldr	r4, [pc, #32]	; (5288 <VZpeakSetGain+0x28>)
    5268:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    526c:	eddf 7a07 	vldr	s15, [pc, #28]	; 528c <VZpeakSetGain+0x2c>
    5270:	ee20 0a27 	vmul.f32	s0, s0, s15
    5274:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    5278:	ee30 0a67 	vsub.f32	s0, s0, s15
    527c:	f002 fd58 	bl	7d30 <__dbToATableLookup_veneer>
    5280:	4620      	mov	r0, r4
    5282:	f002 fdb1 	bl	7de8 <__tVZFilterBell_setGain_veneer>
}
    5286:	bd10      	pop	{r4, pc}
    5288:	2001c6f4 	.word	0x2001c6f4
    528c:	42480000 	.word	0x42480000
    5290:	f3af 8000 	nop.w
    5294:	f3af 8000 	nop.w
    5298:	f3af 8000 	nop.w
    529c:	f3af 8000 	nop.w

000052a0 <VZlowshelfSetGain>:
{
    52a0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    52a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    52a6:	4c08      	ldr	r4, [pc, #32]	; (52c8 <VZlowshelfSetGain+0x28>)
    52a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    52ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 52cc <VZlowshelfSetGain+0x2c>
    52b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    52b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    52b8:	ee30 0a67 	vsub.f32	s0, s0, s15
    52bc:	f002 fd38 	bl	7d30 <__dbToATableLookup_veneer>
    52c0:	4620      	mov	r0, r4
    52c2:	f002 feed 	bl	80a0 <__tVZFilterLS_setGain_veneer>
}
    52c6:	bd10      	pop	{r4, pc}
    52c8:	2001c6e4 	.word	0x2001c6e4
    52cc:	42480000 	.word	0x42480000
    52d0:	f3af 8000 	nop.w
    52d4:	f3af 8000 	nop.w
    52d8:	f3af 8000 	nop.w
    52dc:	f3af 8000 	nop.w

000052e0 <VZhighshelfSetGain>:
{
    52e0:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    52e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    52e6:	4c08      	ldr	r4, [pc, #32]	; (5308 <VZhighshelfSetGain+0x28>)
    52e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    52ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 530c <VZhighshelfSetGain+0x2c>
    52f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    52f4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    52f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    52fc:	f002 fd18 	bl	7d30 <__dbToATableLookup_veneer>
    5300:	4620      	mov	r0, r4
    5302:	f002 fd99 	bl	7e38 <__tVZFilterHS_setGain_veneer>
}
    5306:	bd10      	pop	{r4, pc}
    5308:	2001c6d4 	.word	0x2001c6d4
    530c:	42480000 	.word	0x42480000
    5310:	f3af 8000 	nop.w
    5314:	f3af 8000 	nop.w
    5318:	f3af 8000 	nop.w
    531c:	f3af 8000 	nop.w

00005320 <VZbandrejectSetGain>:
{
    5320:	b538      	push	{r3, r4, r5, lr}
    5322:	4605      	mov	r5, r0
    5324:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    5326:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    532a:	ee20 0a27 	vmul.f32	s0, s0, s15
    532e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    5332:	ee30 0a67 	vsub.f32	s0, s0, s15
    5336:	f002 fcfb 	bl	7d30 <__dbToATableLookup_veneer>
    533a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    533e:	4b03      	ldr	r3, [pc, #12]	; (534c <VZbandrejectSetGain+0x2c>)
    5340:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5344:	ed83 0a00 	vstr	s0, [r3]
}
    5348:	bd38      	pop	{r3, r4, r5, pc}
    534a:	bf00      	nop
    534c:	2001c998 	.word	0x2001c998
    5350:	f3af 8000 	nop.w
    5354:	f3af 8000 	nop.w
    5358:	f3af 8000 	nop.w
    535c:	f3af 8000 	nop.w

00005360 <LadderLowpassSetGain>:
{
    5360:	b538      	push	{r3, r4, r5, lr}
    5362:	4605      	mov	r5, r0
    5364:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    5366:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    536a:	ee20 0a27 	vmul.f32	s0, s0, s15
    536e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    5372:	ee30 0a67 	vsub.f32	s0, s0, s15
    5376:	f002 fcdb 	bl	7d30 <__dbToATableLookup_veneer>
    537a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    537e:	4b03      	ldr	r3, [pc, #12]	; (538c <LadderLowpassSetGain+0x2c>)
    5380:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5384:	ed83 0a00 	vstr	s0, [r3]
}
    5388:	bd38      	pop	{r3, r4, r5, pc}
    538a:	bf00      	nop
    538c:	2001c998 	.word	0x2001c998
    5390:	f3af 8000 	nop.w
    5394:	f3af 8000 	nop.w
    5398:	f3af 8000 	nop.w
    539c:	f3af 8000 	nop.w

000053a0 <envelope_tick>:
{
    53a0:	b570      	push	{r4, r5, r6, lr}
    53a2:	4606      	mov	r6, r0
	for (int v = 0; v < NUM_ENV; v++)
    53a4:	2400      	movs	r4, #0
    53a6:	e000      	b.n	53aa <envelope_tick+0xa>
    53a8:	3401      	adds	r4, #1
    53aa:	2c03      	cmp	r4, #3
    53ac:	dc14      	bgt.n	53d8 <envelope_tick+0x38>
		if (envOn[v])
    53ae:	4b0b      	ldr	r3, [pc, #44]	; (53dc <envelope_tick+0x3c>)
    53b0:	5d1b      	ldrb	r3, [r3, r4]
    53b2:	2b00      	cmp	r3, #0
    53b4:	d0f8      	beq.n	53a8 <envelope_tick+0x8>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    53b6:	f104 0514 	add.w	r5, r4, #20
    53ba:	eb06 0044 	add.w	r0, r6, r4, lsl #1
    53be:	4b08      	ldr	r3, [pc, #32]	; (53e0 <envelope_tick+0x40>)
    53c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    53c4:	f002 fcf0 	bl	7da8 <__tADSRT_tickNoInterp_veneer>
    53c8:	eb06 0545 	add.w	r5, r6, r5, lsl #1
    53cc:	4b05      	ldr	r3, [pc, #20]	; (53e4 <envelope_tick+0x44>)
    53ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    53d2:	ed83 0a00 	vstr	s0, [r3]
    53d6:	e7e7      	b.n	53a8 <envelope_tick+0x8>
}
    53d8:	bd70      	pop	{r4, r5, r6, pc}
    53da:	bf00      	nop
    53dc:	2001c944 	.word	0x2001c944
    53e0:	2001c948 	.word	0x2001c948
    53e4:	2001cf80 	.word	0x2001cf80
    53e8:	f3af 8000 	nop.w
    53ec:	f3af 8000 	nop.w
    53f0:	f3af 8000 	nop.w
    53f4:	f3af 8000 	nop.w
    53f8:	f3af 8000 	nop.w
    53fc:	f3af 8000 	nop.w

00005400 <lfo_tick>:
{
    5400:	b530      	push	{r4, r5, lr}
    5402:	b083      	sub	sp, #12
    5404:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_LFOS; i++)
    5406:	2400      	movs	r4, #0
    5408:	e000      	b.n	540c <lfo_tick+0xc>
    540a:	3401      	adds	r4, #1
    540c:	2c03      	cmp	r4, #3
    540e:	dc16      	bgt.n	543e <lfo_tick+0x3e>
		if (lfoOn[i])
    5410:	4b0c      	ldr	r3, [pc, #48]	; (5444 <lfo_tick+0x44>)
    5412:	5d1b      	ldrb	r3, [r3, r4]
    5414:	2b00      	cmp	r3, #0
    5416:	d0f8      	beq.n	540a <lfo_tick+0xa>
			float sample = 0.0f;
    5418:	2300      	movs	r3, #0
    541a:	9301      	str	r3, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    541c:	4b0a      	ldr	r3, [pc, #40]	; (5448 <lfo_tick+0x48>)
    541e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    5422:	462a      	mov	r2, r5
    5424:	4621      	mov	r1, r4
    5426:	a801      	add	r0, sp, #4
    5428:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    542a:	f104 0118 	add.w	r1, r4, #24
    542e:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    5432:	4b06      	ldr	r3, [pc, #24]	; (544c <lfo_tick+0x4c>)
    5434:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5438:	9a01      	ldr	r2, [sp, #4]
    543a:	601a      	str	r2, [r3, #0]
    543c:	e7e5      	b.n	540a <lfo_tick+0xa>
}
    543e:	b003      	add	sp, #12
    5440:	bd30      	pop	{r4, r5, pc}
    5442:	bf00      	nop
    5444:	2001cac8 	.word	0x2001cac8
    5448:	2001cb2c 	.word	0x2001cb2c
    544c:	2001cf80 	.word	0x2001cf80
    5450:	f3af 8000 	nop.w
    5454:	f3af 8000 	nop.w
    5458:	f3af 8000 	nop.w
    545c:	f3af 8000 	nop.w

00005460 <setEnvelopeAttack>:
{
    5460:	b508      	push	{r3, lr}
	tADSRT_setAttack(&envs[v][string], a);
    5462:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5466:	eddf 7a05 	vldr	s15, [pc, #20]	; 547c <setEnvelopeAttack+0x1c>
    546a:	ee30 0a27 	vadd.f32	s0, s0, s15
    546e:	4804      	ldr	r0, [pc, #16]	; (5480 <setEnvelopeAttack+0x20>)
    5470:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5474:	f002 fd20 	bl	7eb8 <__tADSRT_setAttack_veneer>
}
    5478:	bd08      	pop	{r3, pc}
    547a:	bf00      	nop
    547c:	3a83126f 	.word	0x3a83126f
    5480:	2001c948 	.word	0x2001c948
    5484:	f3af 8000 	nop.w
    5488:	f3af 8000 	nop.w
    548c:	f3af 8000 	nop.w
    5490:	f3af 8000 	nop.w
    5494:	f3af 8000 	nop.w
    5498:	f3af 8000 	nop.w
    549c:	f3af 8000 	nop.w

000054a0 <setEnvelopeDecay>:
{
    54a0:	b508      	push	{r3, lr}
	tADSRT_setDecay(&envs[v][string], d);
    54a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    54a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 54bc <setEnvelopeDecay+0x1c>
    54aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    54ae:	4804      	ldr	r0, [pc, #16]	; (54c0 <setEnvelopeDecay+0x20>)
    54b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    54b4:	f002 fc7c 	bl	7db0 <__tADSRT_setDecay_veneer>
}
    54b8:	bd08      	pop	{r3, pc}
    54ba:	bf00      	nop
    54bc:	3a83126f 	.word	0x3a83126f
    54c0:	2001c948 	.word	0x2001c948
    54c4:	f3af 8000 	nop.w
    54c8:	f3af 8000 	nop.w
    54cc:	f3af 8000 	nop.w
    54d0:	f3af 8000 	nop.w
    54d4:	f3af 8000 	nop.w
    54d8:	f3af 8000 	nop.w
    54dc:	f3af 8000 	nop.w

000054e0 <setEnvelopeSustain>:
{
    54e0:	b508      	push	{r3, lr}
	tADSRT_setSustain(&envs[v][string], s);
    54e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    54e6:	4803      	ldr	r0, [pc, #12]	; (54f4 <setEnvelopeSustain+0x14>)
    54e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    54ec:	f002 fc74 	bl	7dd8 <__tADSRT_setSustain_veneer>
}
    54f0:	bd08      	pop	{r3, pc}
    54f2:	bf00      	nop
    54f4:	2001c948 	.word	0x2001c948
    54f8:	f3af 8000 	nop.w
    54fc:	f3af 8000 	nop.w

00005500 <setEnvelopeRelease>:
{
    5500:	b508      	push	{r3, lr}
	tADSRT_setRelease(&envs[v][string], r);
    5502:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5506:	eddf 7a05 	vldr	s15, [pc, #20]	; 551c <setEnvelopeRelease+0x1c>
    550a:	ee30 0a27 	vadd.f32	s0, s0, s15
    550e:	4804      	ldr	r0, [pc, #16]	; (5520 <setEnvelopeRelease+0x20>)
    5510:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5514:	f002 fe2c 	bl	8170 <__tADSRT_setRelease_veneer>
}
    5518:	bd08      	pop	{r3, pc}
    551a:	bf00      	nop
    551c:	3a83126f 	.word	0x3a83126f
    5520:	2001c948 	.word	0x2001c948
    5524:	f3af 8000 	nop.w
    5528:	f3af 8000 	nop.w
    552c:	f3af 8000 	nop.w
    5530:	f3af 8000 	nop.w
    5534:	f3af 8000 	nop.w
    5538:	f3af 8000 	nop.w
    553c:	f3af 8000 	nop.w

00005540 <setEnvelopeLeak>:
{
    5540:	b508      	push	{r3, lr}
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    5542:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5546:	ee77 7ac0 	vsub.f32	s15, s15, s0
    554a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 556c <setEnvelopeLeak+0x2c>
    554e:	ee67 7a87 	vmul.f32	s15, s15, s14
    5552:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5556:	ed9f 0a06 	vldr	s0, [pc, #24]	; 5570 <setEnvelopeLeak+0x30>
    555a:	ee37 0a80 	vadd.f32	s0, s15, s0
    555e:	4805      	ldr	r0, [pc, #20]	; (5574 <setEnvelopeLeak+0x34>)
    5560:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5564:	f002 fd34 	bl	7fd0 <__tADSRT_setLeakFactor_veneer>
}
    5568:	bd08      	pop	{r3, pc}
    556a:	bf00      	nop
    556c:	3851b717 	.word	0x3851b717
    5570:	3f7ffcb9 	.word	0x3f7ffcb9
    5574:	2001c948 	.word	0x2001c948
    5578:	f3af 8000 	nop.w
    557c:	f3af 8000 	nop.w

00005580 <setAmp>:
	amplitude[string] = amp;
    5580:	4b02      	ldr	r3, [pc, #8]	; (558c <setAmp+0xc>)
    5582:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5586:	ed83 0a00 	vstr	s0, [r3]
}
    558a:	4770      	bx	lr
    558c:	2001c704 	.word	0x2001c704
    5590:	f3af 8000 	nop.w
    5594:	f3af 8000 	nop.w
    5598:	f3af 8000 	nop.w
    559c:	f3af 8000 	nop.w

000055a0 <setMaster>:
	finalMaster[string] = amp;
    55a0:	4b02      	ldr	r3, [pc, #8]	; (55ac <setMaster+0xc>)
    55a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    55a6:	ed83 0a00 	vstr	s0, [r3]
}
    55aa:	4770      	bx	lr
    55ac:	2001c9b8 	.word	0x2001c9b8
    55b0:	f3af 8000 	nop.w
    55b4:	f3af 8000 	nop.w
    55b8:	f3af 8000 	nop.w
    55bc:	f3af 8000 	nop.w

000055c0 <setTranspose>:
	transpose = in;
    55c0:	4b01      	ldr	r3, [pc, #4]	; (55c8 <setTranspose+0x8>)
    55c2:	ed83 0a00 	vstr	s0, [r3]
}
    55c6:	4770      	bx	lr
    55c8:	2001d0fc 	.word	0x2001d0fc
    55cc:	f3af 8000 	nop.w
    55d0:	f3af 8000 	nop.w
    55d4:	f3af 8000 	nop.w
    55d8:	f3af 8000 	nop.w
    55dc:	f3af 8000 	nop.w

000055e0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    55e0:	ee30 0a00 	vadd.f32	s0, s0, s0
    55e4:	eddf 7a05 	vldr	s15, [pc, #20]	; 55fc <setPitchBendRange+0x1c>
    55e8:	ee87 7a80 	vdiv.f32	s14, s15, s0
    55ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    55f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    55f4:	4b02      	ldr	r3, [pc, #8]	; (5600 <setPitchBendRange+0x20>)
    55f6:	edc3 7a00 	vstr	s15, [r3]
}
    55fa:	4770      	bx	lr
    55fc:	467ffc00 	.word	0x467ffc00
    5600:	20000730 	.word	0x20000730
    5604:	f3af 8000 	nop.w
    5608:	f3af 8000 	nop.w
    560c:	f3af 8000 	nop.w
    5610:	f3af 8000 	nop.w
    5614:	f3af 8000 	nop.w
    5618:	f3af 8000 	nop.w
    561c:	f3af 8000 	nop.w

00005620 <setFinalLowpass>:
{
    5620:	b508      	push	{r3, lr}
	tSVF_setFreqFast(&finalLowpass[string], in);
    5622:	4803      	ldr	r0, [pc, #12]	; (5630 <setFinalLowpass+0x10>)
    5624:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5628:	f002 fd6a 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    562c:	bd08      	pop	{r3, pc}
    562e:	bf00      	nop
    5630:	2001c9b0 	.word	0x2001c9b0
    5634:	f3af 8000 	nop.w
    5638:	f3af 8000 	nop.w
    563c:	f3af 8000 	nop.w

00005640 <tickMappings>:
{
    5640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5642:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    5646:	2400      	movs	r4, #0
    5648:	4b3e      	ldr	r3, [pc, #248]	; (5744 <tickMappings+0x104>)
    564a:	701c      	strb	r4, [r3, #0]
	for (int i = 0; i < numMappings; i++)
    564c:	e06a      	b.n	5724 <tickMappings+0xe4>
							unsmoothedValue += sum;
    564e:	ee38 8a27 	vadd.f32	s16, s16, s15
				for (int j = 0; j < 3; j++)
    5652:	3301      	adds	r3, #1
    5654:	2b02      	cmp	r3, #2
    5656:	dc30      	bgt.n	56ba <tickMappings+0x7a>
					if (mappings[i].hookActive[j])
    5658:	4a3b      	ldr	r2, [pc, #236]	; (5748 <tickMappings+0x108>)
    565a:	214c      	movs	r1, #76	; 0x4c
    565c:	fb01 2204 	mla	r2, r1, r4, r2
    5660:	441a      	add	r2, r3
    5662:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    5666:	2a00      	cmp	r2, #0
    5668:	d0f3      	beq.n	5652 <tickMappings+0x12>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    566a:	4937      	ldr	r1, [pc, #220]	; (5748 <tickMappings+0x108>)
    566c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    5670:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5674:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    5678:	4428      	add	r0, r5
    567a:	1c86      	adds	r6, r0, #2
    567c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    5680:	edd6 7a00 	vldr	s15, [r6]
    5684:	441a      	add	r2, r3
    5686:	320e      	adds	r2, #14
    5688:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    568c:	edd2 6a01 	vldr	s13, [r2, #4]
    5690:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5694:	3008      	adds	r0, #8
    5696:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    569a:	6842      	ldr	r2, [r0, #4]
    569c:	edd2 6a00 	vldr	s13, [r2]
    56a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
						if (mappings[i].sourceSmoothed[j])
    56a4:	224c      	movs	r2, #76	; 0x4c
    56a6:	fb02 1104 	mla	r1, r2, r4, r1
    56aa:	4419      	add	r1, r3
    56ac:	f891 2020 	ldrb.w	r2, [r1, #32]
    56b0:	2a00      	cmp	r2, #0
    56b2:	d0cc      	beq.n	564e <tickMappings+0xe>
							smoothedValue += sum;
    56b4:	ee37 7a27 	vadd.f32	s14, s14, s15
    56b8:	e7cb      	b.n	5652 <tickMappings+0x12>
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    56ba:	4e23      	ldr	r6, [pc, #140]	; (5748 <tickMappings+0x108>)
    56bc:	234c      	movs	r3, #76	; 0x4c
    56be:	fb03 6604 	mla	r6, r3, r4, r6
    56c2:	6873      	ldr	r3, [r6, #4]
    56c4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    56c8:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    56cc:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    56d0:	4f1e      	ldr	r7, [pc, #120]	; (574c <tickMappings+0x10c>)
    56d2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    56d6:	ee30 0a07 	vadd.f32	s0, s0, s14
    56da:	4638      	mov	r0, r7
    56dc:	f002 fd04 	bl	80e8 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    56e0:	4638      	mov	r0, r7
    56e2:	f002 fba1 	bl	7e28 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    56e6:	6877      	ldr	r7, [r6, #4]
    56e8:	693b      	ldr	r3, [r7, #16]
    56ea:	ee38 0a00 	vadd.f32	s0, s16, s0
    56ee:	4798      	blx	r3
    56f0:	1cab      	adds	r3, r5, #2
    56f2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    56f6:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    56fa:	6872      	ldr	r2, [r6, #4]
    56fc:	6956      	ldr	r6, [r2, #20]
    56fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5702:	4629      	mov	r1, r5
    5704:	7e10      	ldrb	r0, [r2, #24]
    5706:	ed93 0a00 	vldr	s0, [r3]
    570a:	47b0      	blx	r6
			for (int v = 0; v < numStringsThisBoard; v++)
    570c:	3501      	adds	r5, #1
    570e:	4b10      	ldr	r3, [pc, #64]	; (5750 <tickMappings+0x110>)
    5710:	781b      	ldrb	r3, [r3, #0]
    5712:	42ab      	cmp	r3, r5
    5714:	dd05      	ble.n	5722 <tickMappings+0xe2>
				for (int j = 0; j < 3; j++)
    5716:	2300      	movs	r3, #0
				float smoothedValue = 0.0f;
    5718:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 5754 <tickMappings+0x114>
				float unsmoothedValue = 0.0f;
    571c:	eeb0 8a47 	vmov.f32	s16, s14
    5720:	e798      	b.n	5654 <tickMappings+0x14>
	for (int i = 0; i < numMappings; i++)
    5722:	3401      	adds	r4, #1
    5724:	4b0c      	ldr	r3, [pc, #48]	; (5758 <tickMappings+0x118>)
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	42a3      	cmp	r3, r4
    572a:	dd08      	ble.n	573e <tickMappings+0xfe>
		if (mappings[i].destNumber != 255)
    572c:	234c      	movs	r3, #76	; 0x4c
    572e:	fb04 f303 	mul.w	r3, r4, r3
    5732:	4a05      	ldr	r2, [pc, #20]	; (5748 <tickMappings+0x108>)
    5734:	5cd3      	ldrb	r3, [r2, r3]
    5736:	2bff      	cmp	r3, #255	; 0xff
    5738:	d0f3      	beq.n	5722 <tickMappings+0xe2>
			for (int v = 0; v < numStringsThisBoard; v++)
    573a:	2500      	movs	r5, #0
    573c:	e7e7      	b.n	570e <tickMappings+0xce>
}
    573e:	ecbd 8b02 	vpop	{d8}
    5742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5744:	20016093 	.word	0x20016093
    5748:	200180c8 	.word	0x200180c8
    574c:	2001cbac 	.word	0x2001cbac
    5750:	200004b1 	.word	0x200004b1
    5754:	00000000 	.word	0x00000000
    5758:	20018a54 	.word	0x20018a54
    575c:	f3af 8000 	nop.w

00005760 <lfoSawSquareTick>:
{
    5760:	b510      	push	{r4, lr}
    5762:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    5764:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5768:	4803      	ldr	r0, [pc, #12]	; (5778 <lfoSawSquareTick+0x18>)
    576a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    576e:	f002 fc5b 	bl	8028 <__tSawSquareLFO_tick_veneer>
    5772:	ed84 0a00 	vstr	s0, [r4]
}
    5776:	bd10      	pop	{r4, pc}
    5778:	2001cb0c 	.word	0x2001cb0c
    577c:	f3af 8000 	nop.w

00005780 <lfoSineTriTick>:
{
    5780:	b510      	push	{r4, lr}
    5782:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    5784:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5788:	4803      	ldr	r0, [pc, #12]	; (5798 <lfoSineTriTick+0x18>)
    578a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    578e:	f002 faeb 	bl	7d68 <__tSineTriLFO_tick_veneer>
    5792:	ed84 0a00 	vstr	s0, [r4]
}
    5796:	bd10      	pop	{r4, pc}
    5798:	2001cb5c 	.word	0x2001cb5c
    579c:	f3af 8000 	nop.w

000057a0 <lfoSineTick>:
{
    57a0:	b510      	push	{r4, lr}
    57a2:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    57a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    57a8:	4803      	ldr	r0, [pc, #12]	; (57b8 <lfoSineTick+0x18>)
    57aa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    57ae:	f002 fb17 	bl	7de0 <__tCycle_tick_veneer>
    57b2:	ed84 0a00 	vstr	s0, [r4]
}
    57b6:	bd10      	pop	{r4, pc}
    57b8:	2001cb3c 	.word	0x2001cb3c
    57bc:	f3af 8000 	nop.w

000057c0 <lfoTriTick>:
{
    57c0:	b510      	push	{r4, lr}
    57c2:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    57c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    57c8:	4803      	ldr	r0, [pc, #12]	; (57d8 <lfoTriTick+0x18>)
    57ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    57ce:	f002 fbbf 	bl	7f50 <__tTriLFO_tick_veneer>
    57d2:	ed84 0a00 	vstr	s0, [r4]
}
    57d6:	bd10      	pop	{r4, pc}
    57d8:	2001cb7c 	.word	0x2001cb7c
    57dc:	f3af 8000 	nop.w

000057e0 <lfoSawTick>:
{
    57e0:	b510      	push	{r4, lr}
    57e2:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    57e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    57e8:	4806      	ldr	r0, [pc, #24]	; (5804 <lfoSawTick+0x24>)
    57ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    57ee:	f002 fb0b 	bl	7e08 <__tIntPhasor_tick_veneer>
    57f2:	ee30 0a00 	vadd.f32	s0, s0, s0
    57f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    57fa:	ee30 0a67 	vsub.f32	s0, s0, s15
    57fe:	ed84 0a00 	vstr	s0, [r4]
}
    5802:	bd10      	pop	{r4, pc}
    5804:	2001caec 	.word	0x2001caec
    5808:	f3af 8000 	nop.w
    580c:	f3af 8000 	nop.w
    5810:	f3af 8000 	nop.w
    5814:	f3af 8000 	nop.w
    5818:	f3af 8000 	nop.w
    581c:	f3af 8000 	nop.w

00005820 <lfoPulseTick>:
{
    5820:	b510      	push	{r4, lr}
    5822:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    5824:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5828:	4803      	ldr	r0, [pc, #12]	; (5838 <lfoPulseTick+0x18>)
    582a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    582e:	f002 fc8b 	bl	8148 <__tSquareLFO_tick_veneer>
    5832:	ed84 0a00 	vstr	s0, [r4]
}
    5836:	bd10      	pop	{r4, pc}
    5838:	2001cacc 	.word	0x2001cacc
    583c:	f3af 8000 	nop.w

00005840 <lfoSawSquareSetRate>:
{
    5840:	b508      	push	{r3, lr}
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    5842:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5846:	4803      	ldr	r0, [pc, #12]	; (5854 <lfoSawSquareSetRate+0x14>)
    5848:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    584c:	f002 fa9c 	bl	7d88 <__tSawSquareLFO_setFreq_veneer>
}
    5850:	bd08      	pop	{r3, pc}
    5852:	bf00      	nop
    5854:	2001cb0c 	.word	0x2001cb0c
    5858:	f3af 8000 	nop.w
    585c:	f3af 8000 	nop.w

00005860 <lfoSineTriSetRate>:
{
    5860:	b508      	push	{r3, lr}
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    5862:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5866:	4803      	ldr	r0, [pc, #12]	; (5874 <lfoSineTriSetRate+0x14>)
    5868:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    586c:	f002 fb8c 	bl	7f88 <__tSineTriLFO_setFreq_veneer>
}
    5870:	bd08      	pop	{r3, pc}
    5872:	bf00      	nop
    5874:	2001cb5c 	.word	0x2001cb5c
    5878:	f3af 8000 	nop.w
    587c:	f3af 8000 	nop.w

00005880 <lfoSineSetRate>:
{
    5880:	b508      	push	{r3, lr}
	tCycle_setFreq(&lfoSine[v][string], r);
    5882:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5886:	4803      	ldr	r0, [pc, #12]	; (5894 <lfoSineSetRate+0x14>)
    5888:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    588c:	f002 fab8 	bl	7e00 <__tCycle_setFreq_veneer>
}
    5890:	bd08      	pop	{r3, pc}
    5892:	bf00      	nop
    5894:	2001cb3c 	.word	0x2001cb3c
    5898:	f3af 8000 	nop.w
    589c:	f3af 8000 	nop.w

000058a0 <lfoTriSetRate>:
{
    58a0:	b508      	push	{r3, lr}
	tTriLFO_setFreq(&lfoTri[v][string], r);
    58a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    58a6:	4803      	ldr	r0, [pc, #12]	; (58b4 <lfoTriSetRate+0x14>)
    58a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    58ac:	f002 faf4 	bl	7e98 <__tTriLFO_setFreq_veneer>
}
    58b0:	bd08      	pop	{r3, pc}
    58b2:	bf00      	nop
    58b4:	2001cb7c 	.word	0x2001cb7c
    58b8:	f3af 8000 	nop.w
    58bc:	f3af 8000 	nop.w

000058c0 <lfoSawSetRate>:
{
    58c0:	b508      	push	{r3, lr}
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    58c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    58c6:	4803      	ldr	r0, [pc, #12]	; (58d4 <lfoSawSetRate+0x14>)
    58c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    58cc:	f002 faf8 	bl	7ec0 <__tIntPhasor_setFreq_veneer>
}
    58d0:	bd08      	pop	{r3, pc}
    58d2:	bf00      	nop
    58d4:	2001caec 	.word	0x2001caec
    58d8:	f3af 8000 	nop.w
    58dc:	f3af 8000 	nop.w

000058e0 <lfoPulseSetRate>:
{
    58e0:	b508      	push	{r3, lr}
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    58e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    58e6:	4803      	ldr	r0, [pc, #12]	; (58f4 <lfoPulseSetRate+0x14>)
    58e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    58ec:	f002 fafc 	bl	7ee8 <__tSquareLFO_setFreq_veneer>
}
    58f0:	bd08      	pop	{r3, pc}
    58f2:	bf00      	nop
    58f4:	2001cacc 	.word	0x2001cacc
    58f8:	f3af 8000 	nop.w
    58fc:	f3af 8000 	nop.w

00005900 <lfoSawSquareSetPhase>:
{
    5900:	b508      	push	{r3, lr}
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    5902:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5906:	4803      	ldr	r0, [pc, #12]	; (5914 <lfoSawSquareSetPhase+0x14>)
    5908:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    590c:	f002 fb28 	bl	7f60 <__tSawSquareLFO_setPhase_veneer>
}
    5910:	bd08      	pop	{r3, pc}
    5912:	bf00      	nop
    5914:	2001cb0c 	.word	0x2001cb0c
    5918:	f3af 8000 	nop.w
    591c:	f3af 8000 	nop.w

00005920 <lfoSineTriSetPhase>:
{
    5920:	b508      	push	{r3, lr}
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    5922:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5926:	4803      	ldr	r0, [pc, #12]	; (5934 <lfoSineTriSetPhase+0x14>)
    5928:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    592c:	f002 fb48 	bl	7fc0 <__tSineTriLFO_setPhase_veneer>
}
    5930:	bd08      	pop	{r3, pc}
    5932:	bf00      	nop
    5934:	2001cb5c 	.word	0x2001cb5c
    5938:	f3af 8000 	nop.w
    593c:	f3af 8000 	nop.w

00005940 <lfoSineSetPhase>:
{
    5940:	b508      	push	{r3, lr}
	tCycle_setPhase(&lfoSine[v][string],p);
    5942:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5946:	4803      	ldr	r0, [pc, #12]	; (5954 <lfoSineSetPhase+0x14>)
    5948:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    594c:	f002 fa90 	bl	7e70 <__tCycle_setPhase_veneer>
}
    5950:	bd08      	pop	{r3, pc}
    5952:	bf00      	nop
    5954:	2001cb3c 	.word	0x2001cb3c
    5958:	f3af 8000 	nop.w
    595c:	f3af 8000 	nop.w

00005960 <lfoTriSetPhase>:
{
    5960:	b508      	push	{r3, lr}
	tTriLFO_setPhase(&lfoTri[v][string],p);
    5962:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5966:	4803      	ldr	r0, [pc, #12]	; (5974 <lfoTriSetPhase+0x14>)
    5968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    596c:	f002 fa18 	bl	7da0 <__tTriLFO_setPhase_veneer>
}
    5970:	bd08      	pop	{r3, pc}
    5972:	bf00      	nop
    5974:	2001cb7c 	.word	0x2001cb7c
    5978:	f3af 8000 	nop.w
    597c:	f3af 8000 	nop.w

00005980 <lfoSawSetPhase>:
{
    5980:	b508      	push	{r3, lr}
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    5982:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5986:	4803      	ldr	r0, [pc, #12]	; (5994 <lfoSawSetPhase+0x14>)
    5988:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    598c:	f002 fba0 	bl	80d0 <__tIntPhasor_setPhase_veneer>
}
    5990:	bd08      	pop	{r3, pc}
    5992:	bf00      	nop
    5994:	2001caec 	.word	0x2001caec
    5998:	f3af 8000 	nop.w
    599c:	f3af 8000 	nop.w

000059a0 <lfoPulseSetPhase>:
{
    59a0:	b508      	push	{r3, lr}
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    59a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    59a6:	4803      	ldr	r0, [pc, #12]	; (59b4 <lfoPulseSetPhase+0x14>)
    59a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    59ac:	f002 fa30 	bl	7e10 <__tSquareLFO_setPhase_veneer>
}
    59b0:	bd08      	pop	{r3, pc}
    59b2:	bf00      	nop
    59b4:	2001cacc 	.word	0x2001cacc
    59b8:	f3af 8000 	nop.w
    59bc:	f3af 8000 	nop.w

000059c0 <lfoSawSquareSetShape>:
{
    59c0:	b508      	push	{r3, lr}
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    59c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    59c6:	4803      	ldr	r0, [pc, #12]	; (59d4 <lfoSawSquareSetShape+0x14>)
    59c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    59cc:	f002 fb74 	bl	80b8 <__tSawSquareLFO_setShape_veneer>
}
    59d0:	bd08      	pop	{r3, pc}
    59d2:	bf00      	nop
    59d4:	2001cb0c 	.word	0x2001cb0c
    59d8:	f3af 8000 	nop.w
    59dc:	f3af 8000 	nop.w

000059e0 <lfoSineTriSetShape>:
{
    59e0:	b508      	push	{r3, lr}
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    59e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    59e6:	4803      	ldr	r0, [pc, #12]	; (59f4 <lfoSineTriSetShape+0x14>)
    59e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    59ec:	f002 fa88 	bl	7f00 <__tSineTriLFO_setShape_veneer>
}
    59f0:	bd08      	pop	{r3, pc}
    59f2:	bf00      	nop
    59f4:	2001cb5c 	.word	0x2001cb5c
    59f8:	f3af 8000 	nop.w
    59fc:	f3af 8000 	nop.w

00005a00 <lfoSineSetShape>:
}
    5a00:	4770      	bx	lr
    5a02:	bf00      	nop
    5a04:	f3af 8000 	nop.w
    5a08:	f3af 8000 	nop.w
    5a0c:	f3af 8000 	nop.w
    5a10:	f3af 8000 	nop.w
    5a14:	f3af 8000 	nop.w
    5a18:	f3af 8000 	nop.w
    5a1c:	f3af 8000 	nop.w

00005a20 <lfoTriSetShape>:
}
    5a20:	4770      	bx	lr
    5a22:	bf00      	nop
    5a24:	f3af 8000 	nop.w
    5a28:	f3af 8000 	nop.w
    5a2c:	f3af 8000 	nop.w
    5a30:	f3af 8000 	nop.w
    5a34:	f3af 8000 	nop.w
    5a38:	f3af 8000 	nop.w
    5a3c:	f3af 8000 	nop.w

00005a40 <lfoSawSetShape>:
}
    5a40:	4770      	bx	lr
    5a42:	bf00      	nop
    5a44:	f3af 8000 	nop.w
    5a48:	f3af 8000 	nop.w
    5a4c:	f3af 8000 	nop.w
    5a50:	f3af 8000 	nop.w
    5a54:	f3af 8000 	nop.w
    5a58:	f3af 8000 	nop.w
    5a5c:	f3af 8000 	nop.w

00005a60 <lfoPulseSetShape>:
{
    5a60:	b508      	push	{r3, lr}
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    5a62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5a66:	4803      	ldr	r0, [pc, #12]	; (5a74 <lfoPulseSetShape+0x14>)
    5a68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5a6c:	f002 f9ac 	bl	7dc8 <__tSquareLFO_setPulseWidth_veneer>
}
    5a70:	bd08      	pop	{r3, pc}
    5a72:	bf00      	nop
    5a74:	2001cacc 	.word	0x2001cacc
    5a78:	f3af 8000 	nop.w
    5a7c:	f3af 8000 	nop.w

00005a80 <clipperGainSet>:
{
    5a80:	b538      	push	{r3, r4, r5, lr}
    5a82:	4605      	mov	r5, r0
    5a84:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    5a86:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    5a8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    5a8e:	f002 f94f 	bl	7d30 <__dbToATableLookup_veneer>
    5a92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5a96:	4b03      	ldr	r3, [pc, #12]	; (5aa4 <clipperGainSet+0x24>)
    5a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5a9c:	ed83 0a00 	vstr	s0, [r3]
}
    5aa0:	bd38      	pop	{r3, r4, r5, pc}
    5aa2:	bf00      	nop
    5aa4:	2001cd9c 	.word	0x2001cd9c
    5aa8:	f3af 8000 	nop.w
    5aac:	f3af 8000 	nop.w
    5ab0:	f3af 8000 	nop.w
    5ab4:	f3af 8000 	nop.w
    5ab8:	f3af 8000 	nop.w
    5abc:	f3af 8000 	nop.w

00005ac0 <wavefolderParam1>:
{
    5ac0:	b538      	push	{r3, r4, r5, lr}
    5ac2:	4605      	mov	r5, r0
    5ac4:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    5ac6:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    5aca:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ace:	f002 f92f 	bl	7d30 <__dbToATableLookup_veneer>
    5ad2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5ad6:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <wavefolderParam1+0x24>)
    5ad8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5adc:	ed83 0a00 	vstr	s0, [r3]
}
    5ae0:	bd38      	pop	{r3, r4, r5, pc}
    5ae2:	bf00      	nop
    5ae4:	2001cd9c 	.word	0x2001cd9c
    5ae8:	f3af 8000 	nop.w
    5aec:	f3af 8000 	nop.w
    5af0:	f3af 8000 	nop.w
    5af4:	f3af 8000 	nop.w
    5af8:	f3af 8000 	nop.w
    5afc:	f3af 8000 	nop.w

00005b00 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    5b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5b04:	ee70 6a27 	vadd.f32	s13, s0, s15
    5b08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    5b0c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5b10:	4b05      	ldr	r3, [pc, #20]	; (5b28 <wavefolderParam3+0x28>)
    5b12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5b16:	ed83 7a00 	vstr	s14, [r3]
	param3[v][string] = value;
    5b1a:	4b04      	ldr	r3, [pc, #16]	; (5b2c <wavefolderParam3+0x2c>)
    5b1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5b20:	ed83 0a00 	vstr	s0, [r3]
}
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop
    5b28:	2001caa8 	.word	0x2001caa8
    5b2c:	2001cddc 	.word	0x2001cddc
    5b30:	f3af 8000 	nop.w
    5b34:	f3af 8000 	nop.w
    5b38:	f3af 8000 	nop.w
    5b3c:	f3af 8000 	nop.w

00005b40 <tiltParam1>:
{
    5b40:	b538      	push	{r3, r4, r5, lr}
    5b42:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    5b46:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5b4a:	008d      	lsls	r5, r1, #2
    5b4c:	4c0e      	ldr	r4, [pc, #56]	; (5b88 <tiltParam1+0x48>)
    5b4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    5b52:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    5b56:	ee20 8a27 	vmul.f32	s16, s0, s15
    5b5a:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    5b5e:	ee38 8a67 	vsub.f32	s16, s16, s15
    5b62:	eeb1 0a48 	vneg.f32	s0, s16
    5b66:	f002 f8e3 	bl	7d30 <__dbToATableLookup_veneer>
    5b6a:	4620      	mov	r0, r4
    5b6c:	f002 fa98 	bl	80a0 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    5b70:	4c06      	ldr	r4, [pc, #24]	; (5b8c <tiltParam1+0x4c>)
    5b72:	442c      	add	r4, r5
    5b74:	eeb0 0a48 	vmov.f32	s0, s16
    5b78:	f002 f8da 	bl	7d30 <__dbToATableLookup_veneer>
    5b7c:	4620      	mov	r0, r4
    5b7e:	f002 f95b 	bl	7e38 <__tVZFilterHS_setGain_veneer>
}
    5b82:	ecbd 8b02 	vpop	{d8}
    5b86:	bd38      	pop	{r3, r4, r5, pc}
    5b88:	2001cf10 	.word	0x2001cf10
    5b8c:	2001cf30 	.word	0x2001cf30
    5b90:	f3af 8000 	nop.w
    5b94:	f3af 8000 	nop.w
    5b98:	f3af 8000 	nop.w
    5b9c:	f3af 8000 	nop.w

00005ba0 <tiltParam2>:
{
    5ba0:	b538      	push	{r3, r4, r5, lr}
    5ba2:	4605      	mov	r5, r0
    5ba4:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    5ba6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 5be4 <tiltParam2+0x44>
    5baa:	ee20 0a27 	vmul.f32	s0, s0, s15
    5bae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 5be8 <tiltParam2+0x48>
    5bb2:	ee30 0a27 	vadd.f32	s0, s0, s15
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    5bb6:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    5bba:	ee30 0a67 	vsub.f32	s0, s0, s15
    5bbe:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 5bec <tiltParam2+0x4c>
    5bc2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 5bf0 <tiltParam2+0x50>
    5bc6:	ee60 0a20 	vmul.f32	s1, s0, s1
    5bca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 5bf4 <tiltParam2+0x54>
    5bce:	f002 f97f 	bl	7ed0 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    5bd2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5bd6:	4808      	ldr	r0, [pc, #32]	; (5bf8 <tiltParam2+0x58>)
    5bd8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5bdc:	f002 fabc 	bl	8158 <__tVZFilterBell_setFreq_veneer>
}
    5be0:	bd38      	pop	{r3, r4, r5, pc}
    5be2:	bf00      	nop
    5be4:	429a0000 	.word	0x429a0000
    5be8:	42280000 	.word	0x42280000
    5bec:	457ff000 	.word	0x457ff000
    5bf0:	420fb824 	.word	0x420fb824
    5bf4:	00000000 	.word	0x00000000
    5bf8:	2001c73c 	.word	0x2001c73c
    5bfc:	f3af 8000 	nop.w

00005c00 <tiltParam3>:
{
    5c00:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    5c02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5c06:	ee30 0a27 	vadd.f32	s0, s0, s15
    5c0a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5c0e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    5c12:	ee20 0a27 	vmul.f32	s0, s0, s15
    5c16:	4803      	ldr	r0, [pc, #12]	; (5c24 <tiltParam3+0x24>)
    5c18:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5c1c:	f002 f9dc 	bl	7fd8 <__tVZFilterBell_setBandwidth_veneer>
}
    5c20:	bd08      	pop	{r3, pc}
    5c22:	bf00      	nop
    5c24:	2001c73c 	.word	0x2001c73c
    5c28:	f3af 8000 	nop.w
    5c2c:	f3af 8000 	nop.w
    5c30:	f3af 8000 	nop.w
    5c34:	f3af 8000 	nop.w
    5c38:	f3af 8000 	nop.w
    5c3c:	f3af 8000 	nop.w

00005c40 <tiltParam4>:
{
    5c40:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    5c42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5c46:	4c08      	ldr	r4, [pc, #32]	; (5c68 <tiltParam4+0x28>)
    5c48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    5c4c:	eddf 7a07 	vldr	s15, [pc, #28]	; 5c6c <tiltParam4+0x2c>
    5c50:	ee20 0a27 	vmul.f32	s0, s0, s15
    5c54:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    5c58:	ee30 0a67 	vsub.f32	s0, s0, s15
    5c5c:	f002 f868 	bl	7d30 <__dbToATableLookup_veneer>
    5c60:	4620      	mov	r0, r4
    5c62:	f002 f8c1 	bl	7de8 <__tVZFilterBell_setGain_veneer>
}
    5c66:	bd10      	pop	{r4, pc}
    5c68:	2001c73c 	.word	0x2001c73c
    5c6c:	42080000 	.word	0x42080000
    5c70:	f3af 8000 	nop.w
    5c74:	f3af 8000 	nop.w
    5c78:	f3af 8000 	nop.w
    5c7c:	f3af 8000 	nop.w

00005c80 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    5c80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5c84:	4b04      	ldr	r3, [pc, #16]	; (5c98 <compressorParam1+0x18>)
    5c86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5c8a:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    5c8e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5c92:	ed83 0a03 	vstr	s0, [r3, #12]
}
    5c96:	4770      	bx	lr
    5c98:	2001c75c 	.word	0x2001c75c
    5c9c:	f3af 8000 	nop.w

00005ca0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    5ca0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    5ca4:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ca8:	4b09      	ldr	r3, [pc, #36]	; (5cd0 <compressorParam2+0x30>)
    5caa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5cae:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    5cb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5cb6:	ee30 0a27 	vadd.f32	s0, s0, s15
    5cba:	ed82 0a04 	vstr	s0, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    5cbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5cc2:	edd3 6a04 	vldr	s13, [r3, #16]
    5cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    5cca:	ed83 7a07 	vstr	s14, [r3, #28]
}
    5cce:	4770      	bx	lr
    5cd0:	2001c75c 	.word	0x2001c75c
    5cd4:	f3af 8000 	nop.w
    5cd8:	f3af 8000 	nop.w
    5cdc:	f3af 8000 	nop.w

00005ce0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    5ce0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5ce4:	4b04      	ldr	r3, [pc, #16]	; (5cf8 <compressorParam3+0x18>)
    5ce6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5cea:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    5cee:	ee20 0a27 	vmul.f32	s0, s0, s15
    5cf2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    5cf6:	4770      	bx	lr
    5cf8:	2001c75c 	.word	0x2001c75c
    5cfc:	f3af 8000 	nop.w

00005d00 <compressorParam4>:
{
    5d00:	b510      	push	{r4, lr}
	value = (value +  0.001f);
    5d02:	eddf 7a0b 	vldr	s15, [pc, #44]	; 5d30 <compressorParam4+0x30>
    5d06:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    5d0a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5d0e:	4b09      	ldr	r3, [pc, #36]	; (5d34 <compressorParam4+0x34>)
    5d10:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    5d14:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    5d18:	ee67 7a80 	vmul.f32	s15, s15, s0
    5d1c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    5d20:	ee80 0a27 	vdiv.f32	s0, s0, s15
    5d24:	f002 f928 	bl	7f78 <__fasterexpf_veneer>
    5d28:	ed84 0a01 	vstr	s0, [r4, #4]
}
    5d2c:	bd10      	pop	{r4, pc}
    5d2e:	bf00      	nop
    5d30:	3a83126f 	.word	0x3a83126f
    5d34:	2001c75c 	.word	0x2001c75c
    5d38:	f3af 8000 	nop.w
    5d3c:	f3af 8000 	nop.w

00005d40 <compressorParam5>:
{
    5d40:	b510      	push	{r4, lr}
	value = (value + 0.001f);
    5d42:	eddf 7a0b 	vldr	s15, [pc, #44]	; 5d70 <compressorParam5+0x30>
    5d46:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    5d4a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5d4e:	4b09      	ldr	r3, [pc, #36]	; (5d74 <compressorParam5+0x34>)
    5d50:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    5d54:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    5d58:	ee67 7a80 	vmul.f32	s15, s15, s0
    5d5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    5d60:	ee80 0a27 	vdiv.f32	s0, s0, s15
    5d64:	f002 f908 	bl	7f78 <__fasterexpf_veneer>
    5d68:	ed84 0a02 	vstr	s0, [r4, #8]
}
    5d6c:	bd10      	pop	{r4, pc}
    5d6e:	bf00      	nop
    5d70:	3a83126f 	.word	0x3a83126f
    5d74:	2001c75c 	.word	0x2001c75c
    5d78:	f3af 8000 	nop.w
    5d7c:	f3af 8000 	nop.w

00005d80 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    5d80:	ee30 0a00 	vadd.f32	s0, s0, s0
    5d84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5d88:	ee30 0a67 	vsub.f32	s0, s0, s15
    5d8c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5d90:	4b02      	ldr	r3, [pc, #8]	; (5d9c <offsetParam2+0x1c>)
    5d92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5d96:	ed83 0a00 	vstr	s0, [r3]
}
    5d9a:	4770      	bx	lr
    5d9c:	2001cdbc 	.word	0x2001cdbc

00005da0 <param2Linear>:
	param2[v][string] = value;
    5da0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5da4:	4b02      	ldr	r3, [pc, #8]	; (5db0 <param2Linear+0x10>)
    5da6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5daa:	ed83 0a00 	vstr	s0, [r3]
}
    5dae:	4770      	bx	lr
    5db0:	2001cdbc 	.word	0x2001cdbc
    5db4:	f3af 8000 	nop.w
    5db8:	f3af 8000 	nop.w
    5dbc:	f3af 8000 	nop.w

00005dc0 <param3Linear>:
	param3[v][string] = value;
    5dc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5dc4:	4b02      	ldr	r3, [pc, #8]	; (5dd0 <param3Linear+0x10>)
    5dc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5dca:	ed83 0a00 	vstr	s0, [r3]
}
    5dce:	4770      	bx	lr
    5dd0:	2001cddc 	.word	0x2001cddc
    5dd4:	f3af 8000 	nop.w
    5dd8:	f3af 8000 	nop.w
    5ddc:	f3af 8000 	nop.w

00005de0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    5de0:	eddf 7a11 	vldr	s15, [pc, #68]	; 5e28 <param3Soft+0x48>
    5de4:	ee20 0a27 	vmul.f32	s0, s0, s15
    5de8:	eddf 7a10 	vldr	s15, [pc, #64]	; 5e2c <param3Soft+0x4c>
    5dec:	ee30 0a27 	vadd.f32	s0, s0, s15
    5df0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5df4:	4b0e      	ldr	r3, [pc, #56]	; (5e30 <param3Soft+0x50>)
    5df6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5dfa:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    5dfe:	ee60 7a00 	vmul.f32	s15, s0, s0
    5e02:	ee60 7a27 	vmul.f32	s15, s0, s15
    5e06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 5e34 <param3Soft+0x54>
    5e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
    5e0e:	ee30 0a67 	vsub.f32	s0, s0, s15
    5e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5e16:	eec7 7a00 	vdiv.f32	s15, s14, s0
    5e1a:	4b07      	ldr	r3, [pc, #28]	; (5e38 <param3Soft+0x58>)
    5e1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5e20:	edc3 7a00 	vstr	s15, [r3]
}
    5e24:	4770      	bx	lr
    5e26:	bf00      	nop
    5e28:	3f7d70a4 	.word	0x3f7d70a4
    5e2c:	3c23d70a 	.word	0x3c23d70a
    5e30:	2001cddc 	.word	0x2001cddc
    5e34:	3eaaaaaa 	.word	0x3eaaaaaa
    5e38:	2001cee4 	.word	0x2001cee4
    5e3c:	f3af 8000 	nop.w

00005e40 <param3Hard>:
{
    5e40:	b538      	push	{r3, r4, r5, lr}
    5e42:	4605      	mov	r5, r0
    5e44:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    5e46:	eddf 7a14 	vldr	s15, [pc, #80]	; 5e98 <param3Hard+0x58>
    5e4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e4e:	eddf 7a13 	vldr	s15, [pc, #76]	; 5e9c <param3Hard+0x5c>
    5e52:	ee30 0a27 	vadd.f32	s0, s0, s15
    5e56:	eddf 7a12 	vldr	s15, [pc, #72]	; 5ea0 <param3Hard+0x60>
    5e5a:	ee20 0a27 	vmul.f32	s0, s0, s15
    5e5e:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    5e62:	4b10      	ldr	r3, [pc, #64]	; (5ea4 <param3Hard+0x64>)
    5e64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5e68:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    5e6c:	f001 ff24 	bl	7cb8 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    5e70:	eeb5 0a40 	vcmp.f32	s0, #0.0
    5e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5e78:	d101      	bne.n	5e7e <param3Hard+0x3e>
		tempDiv = 0.001f;
    5e7a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 5ea8 <param3Hard+0x68>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    5e7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5e82:	eec7 7a00 	vdiv.f32	s15, s14, s0
    5e86:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5e8a:	4b08      	ldr	r3, [pc, #32]	; (5eac <param3Hard+0x6c>)
    5e8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5e90:	edc3 7a00 	vstr	s15, [r3]
}
    5e94:	bd38      	pop	{r3, r4, r5, pc}
    5e96:	bf00      	nop
    5e98:	3f7d70a4 	.word	0x3f7d70a4
    5e9c:	3c23d70a 	.word	0x3c23d70a
    5ea0:	3fc90fdb 	.word	0x3fc90fdb
    5ea4:	2001cddc 	.word	0x2001cddc
    5ea8:	3a83126f 	.word	0x3a83126f
    5eac:	2001cec4 	.word	0x2001cec4
    5eb0:	f3af 8000 	nop.w
    5eb4:	f3af 8000 	nop.w
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <param3Poly>:
{
    5ec0:	b538      	push	{r3, r4, r5, lr}
    5ec2:	4605      	mov	r5, r0
    5ec4:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    5ec6:	eddf 7a14 	vldr	s15, [pc, #80]	; 5f18 <param3Poly+0x58>
    5eca:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ece:	eddf 7a13 	vldr	s15, [pc, #76]	; 5f1c <param3Poly+0x5c>
    5ed2:	ee30 0a27 	vadd.f32	s0, s0, s15
    5ed6:	eddf 7a12 	vldr	s15, [pc, #72]	; 5f20 <param3Poly+0x60>
    5eda:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ede:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    5ee2:	4b10      	ldr	r3, [pc, #64]	; (5f24 <param3Poly+0x64>)
    5ee4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5ee8:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    5eec:	f002 f8d0 	bl	8090 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    5ef0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    5ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5ef8:	d101      	bne.n	5efe <param3Poly+0x3e>
        tempDiv = 0.001f;
    5efa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 5f28 <param3Poly+0x68>
    polyDivider[v][string] = 1.0f/tempDiv;
    5efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5f02:	eec7 7a00 	vdiv.f32	s15, s14, s0
    5f06:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5f0a:	4b08      	ldr	r3, [pc, #32]	; (5f2c <param3Poly+0x6c>)
    5f0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5f10:	edc3 7a00 	vstr	s15, [r3]
}
    5f14:	bd38      	pop	{r3, r4, r5, pc}
    5f16:	bf00      	nop
    5f18:	3f7d70a4 	.word	0x3f7d70a4
    5f1c:	3c23d70a 	.word	0x3c23d70a
    5f20:	3fc90fdb 	.word	0x3fc90fdb
    5f24:	2001cddc 	.word	0x2001cddc
    5f28:	3a83126f 	.word	0x3a83126f
    5f2c:	2001ce54 	.word	0x2001ce54
    5f30:	f3af 8000 	nop.w
    5f34:	f3af 8000 	nop.w
    5f38:	f3af 8000 	nop.w
    5f3c:	f3af 8000 	nop.w

00005f40 <param4Linear>:
	param4[v][string] = value;
    5f40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5f44:	4b02      	ldr	r3, [pc, #8]	; (5f50 <param4Linear+0x10>)
    5f46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5f4a:	ed83 0a00 	vstr	s0, [r3]
}
    5f4e:	4770      	bx	lr
    5f50:	2001cdfc 	.word	0x2001cdfc
    5f54:	f3af 8000 	nop.w
    5f58:	f3af 8000 	nop.w
    5f5c:	f3af 8000 	nop.w

00005f60 <param5Linear>:
	param5[v][string] = value;
    5f60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5f64:	4b02      	ldr	r3, [pc, #8]	; (5f70 <param5Linear+0x10>)
    5f66:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    5f6a:	ed83 0a00 	vstr	s0, [r3]
}
    5f6e:	4770      	bx	lr
    5f70:	2001ce1c 	.word	0x2001ce1c
    5f74:	f3af 8000 	nop.w
    5f78:	f3af 8000 	nop.w
    5f7c:	f3af 8000 	nop.w

00005f80 <param2BC>:
{
    5f80:	b508      	push	{r3, lr}
	tCrusher_setQuality (&bc[v][string],value);
    5f82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5f86:	4803      	ldr	r0, [pc, #12]	; (5f94 <param2BC+0x14>)
    5f88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5f8c:	f001 ffd4 	bl	7f38 <__tCrusher_setQuality_veneer>
}
    5f90:	bd08      	pop	{r3, pc}
    5f92:	bf00      	nop
    5f94:	2001c71c 	.word	0x2001c71c
    5f98:	f3af 8000 	nop.w
    5f9c:	f3af 8000 	nop.w

00005fa0 <param3BC>:
{
    5fa0:	b508      	push	{r3, lr}
	value = (value * inv_oversample) + 0.01f;
    5fa2:	4b08      	ldr	r3, [pc, #32]	; (5fc4 <param3BC+0x24>)
    5fa4:	edd3 7a00 	vldr	s15, [r3]
    5fa8:	ee20 0a27 	vmul.f32	s0, s0, s15
	tCrusher_setSamplingRatio (&bc[v][string], value);
    5fac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5fb0:	eddf 7a05 	vldr	s15, [pc, #20]	; 5fc8 <param3BC+0x28>
    5fb4:	ee30 0a27 	vadd.f32	s0, s0, s15
    5fb8:	4804      	ldr	r0, [pc, #16]	; (5fcc <param3BC+0x2c>)
    5fba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5fbe:	f002 f897 	bl	80f0 <__tCrusher_setSamplingRatio_veneer>
}
    5fc2:	bd08      	pop	{r3, pc}
    5fc4:	20000734 	.word	0x20000734
    5fc8:	3c23d70a 	.word	0x3c23d70a
    5fcc:	2001c71c 	.word	0x2001c71c
    5fd0:	f3af 8000 	nop.w
    5fd4:	f3af 8000 	nop.w
    5fd8:	f3af 8000 	nop.w
    5fdc:	f3af 8000 	nop.w

00005fe0 <param4BC>:
{
    5fe0:	b508      	push	{r3, lr}
	tCrusher_setRound(&bc[v][string], value);
    5fe2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    5fe6:	4803      	ldr	r0, [pc, #12]	; (5ff4 <param4BC+0x14>)
    5fe8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5fec:	f002 f890 	bl	8110 <__tCrusher_setRound_veneer>
}
    5ff0:	bd08      	pop	{r3, pc}
    5ff2:	bf00      	nop
    5ff4:	2001c71c 	.word	0x2001c71c
    5ff8:	f3af 8000 	nop.w
    5ffc:	f3af 8000 	nop.w

00006000 <param5BC>:
{
    6000:	b508      	push	{r3, lr}
	tCrusher_setOperation(&bc[v][string], value);
    6002:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6006:	4803      	ldr	r0, [pc, #12]	; (6014 <param5BC+0x14>)
    6008:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    600c:	f002 f8a0 	bl	8150 <__tCrusher_setOperation_veneer>
}
    6010:	bd08      	pop	{r3, pc}
    6012:	bf00      	nop
    6014:	2001c71c 	.word	0x2001c71c
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <fxMixSet>:
	fxMix[v][string] = value;
    6020:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6024:	4b02      	ldr	r3, [pc, #8]	; (6030 <fxMixSet+0x10>)
    6026:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    602a:	ed83 0a00 	vstr	s0, [r3]
}
    602e:	4770      	bx	lr
    6030:	2001c9d8 	.word	0x2001c9d8
    6034:	f3af 8000 	nop.w
    6038:	f3af 8000 	nop.w
    603c:	f3af 8000 	nop.w

00006040 <fxPostGainSet>:
{
    6040:	b538      	push	{r3, r4, r5, lr}
    6042:	4605      	mov	r5, r0
    6044:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    6046:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    604a:	ee20 0a27 	vmul.f32	s0, s0, s15
    604e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6052:	ee30 0a67 	vsub.f32	s0, s0, s15
    6056:	f001 fe6b 	bl	7d30 <__dbToATableLookup_veneer>
    605a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    605e:	4b03      	ldr	r3, [pc, #12]	; (606c <fxPostGainSet+0x2c>)
    6060:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6064:	ed83 0a00 	vstr	s0, [r3]
}
    6068:	bd38      	pop	{r3, r4, r5, pc}
    606a:	bf00      	nop
    606c:	2001c9f8 	.word	0x2001c9f8
    6070:	f3af 8000 	nop.w
    6074:	f3af 8000 	nop.w
    6078:	f3af 8000 	nop.w
    607c:	f3af 8000 	nop.w

00006080 <wavefolderTick>:
{
    6080:	b510      	push	{r4, lr}
    6082:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    6086:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    608a:	4a4b      	ldr	r2, [pc, #300]	; (61b8 <wavefolderTick+0x138>)
    608c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6090:	edd2 7a00 	vldr	s15, [r2]
    6094:	ee27 0a80 	vmul.f32	s0, s15, s0
    6098:	4a48      	ldr	r2, [pc, #288]	; (61bc <wavefolderTick+0x13c>)
    609a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    609e:	ed92 7a00 	vldr	s14, [r2]
    60a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    60a6:	ee30 0a27 	vadd.f32	s0, s0, s15
    float curFB = param3[v][string];
    60aa:	4a45      	ldr	r2, [pc, #276]	; (61c0 <wavefolderTick+0x140>)
    60ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    60b0:	edd2 6a00 	vldr	s13, [r2]
    float curFF = param4[v][string];
    60b4:	4a43      	ldr	r2, [pc, #268]	; (61c4 <wavefolderTick+0x144>)
    60b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    60ba:	ed93 6a00 	vldr	s12, [r3]
    if (ffSample <= -1.0f)
    60be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    60c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
    60c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60ca:	d90c      	bls.n	60e6 <wavefolderTick+0x66>
    } else if (ffSample >= 1.0f)
    60cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    60d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
    60d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60d8:	db02      	blt.n	60e0 <wavefolderTick+0x60>
    	ffSample = 1.0f;
    60da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    60de:	e004      	b.n	60ea <wavefolderTick+0x6a>
    float ffSample = sample;
    60e0:	eef0 7a40 	vmov.f32	s15, s0
    60e4:	e001      	b.n	60ea <wavefolderTick+0x6a>
    	ffSample = -1.0f;
    60e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    60ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
    60ee:	ee27 7a27 	vmul.f32	s14, s14, s15
    60f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 61c8 <wavefolderTick+0x148>
    60f6:	ee27 7a25 	vmul.f32	s14, s14, s11
    60fa:	ee37 8ac7 	vsub.f32	s16, s15, s14
    ffSample *= 1.499999f;
    60fe:	eddf 7a33 	vldr	s15, [pc, #204]	; 61cc <wavefolderTick+0x14c>
    6102:	ee28 8a27 	vmul.f32	s16, s16, s15
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    6106:	ee26 8a08 	vmul.f32	s16, s12, s16
    610a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    610e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    6112:	ee67 7a80 	vmul.f32	s15, s15, s0
    6116:	ee38 8a27 	vadd.f32	s16, s16, s15
    float fbSample = wfState[v][string];
    611a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    611e:	4b2c      	ldr	r3, [pc, #176]	; (61d0 <wavefolderTick+0x150>)
    6120:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6124:	edd3 7a00 	vldr	s15, [r3]
    if (fbSample <= -1.0f)
    6128:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    612c:	eef4 7ac7 	vcmpe.f32	s15, s14
    6130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6134:	d909      	bls.n	614a <wavefolderTick+0xca>
    } else if (fbSample >= 1.0f)
    6136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    613a:	eef4 7ac7 	vcmpe.f32	s15, s14
    613e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6142:	db04      	blt.n	614e <wavefolderTick+0xce>
    	fbSample = 1.0f;
    6144:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6148:	e001      	b.n	614e <wavefolderTick+0xce>
    	fbSample = -1.0f;
    614a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    614e:	ee27 7aa7 	vmul.f32	s14, s15, s15
    6152:	ee27 7a27 	vmul.f32	s14, s14, s15
    6156:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 61c8 <wavefolderTick+0x148>
    615a:	ee27 7a06 	vmul.f32	s14, s14, s12
    615e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    fbSample *= 1.499999f;
    6162:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 61cc <wavefolderTick+0x14c>
    6166:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fb = curFB * fbSample;
    616a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    616e:	ee38 8a27 	vadd.f32	s16, s16, s15
    6172:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6176:	008c      	lsls	r4, r1, #2
    6178:	4b16      	ldr	r3, [pc, #88]	; (61d4 <wavefolderTick+0x154>)
    617a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    617e:	edd3 8a00 	vldr	s17, [r3]
    6182:	eddf 7a15 	vldr	s15, [pc, #84]	; 61d8 <wavefolderTick+0x158>
    6186:	ee20 0a27 	vmul.f32	s0, s0, s15
    618a:	f001 fd95 	bl	7cb8 <__arm_sin_f32_veneer>
    618e:	ee68 8a80 	vmul.f32	s17, s17, s0
    6192:	ee38 0a68 	vsub.f32	s0, s16, s17
    6196:	4b0e      	ldr	r3, [pc, #56]	; (61d0 <wavefolderTick+0x150>)
    6198:	4423      	add	r3, r4
    619a:	ed83 0a00 	vstr	s0, [r3]
    sample = wfState[v][string] * invCurFB[v][string];
    619e:	4b0f      	ldr	r3, [pc, #60]	; (61dc <wavefolderTick+0x15c>)
    61a0:	4423      	add	r3, r4
    61a2:	edd3 7a00 	vldr	s15, [r3]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    61a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    61aa:	480d      	ldr	r0, [pc, #52]	; (61e0 <wavefolderTick+0x160>)
    61ac:	4420      	add	r0, r4
    61ae:	f001 ff93 	bl	80d8 <__tHighpass_tick_veneer>
}
    61b2:	ecbd 8b02 	vpop	{d8}
    61b6:	bd10      	pop	{r4, pc}
    61b8:	2001cd9c 	.word	0x2001cd9c
    61bc:	2001cdbc 	.word	0x2001cdbc
    61c0:	2001cddc 	.word	0x2001cddc
    61c4:	2001cdfc 	.word	0x2001cdfc
    61c8:	3eaaaaaa 	.word	0x3eaaaaaa
    61cc:	3fbffff8 	.word	0x3fbffff8
    61d0:	2001d11c 	.word	0x2001d11c
    61d4:	2001ce1c 	.word	0x2001ce1c
    61d8:	40c90fdb 	.word	0x40c90fdb
    61dc:	2001caa8 	.word	0x2001caa8
    61e0:	2001c77c 	.word	0x2001c77c
    61e4:	f3af 8000 	nop.w
    61e8:	f3af 8000 	nop.w
    61ec:	f3af 8000 	nop.w
    61f0:	f3af 8000 	nop.w
    61f4:	f3af 8000 	nop.w
    61f8:	f3af 8000 	nop.w
    61fc:	f3af 8000 	nop.w

00006200 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    6200:	eddf 7a07 	vldr	s15, [pc, #28]	; 6220 <chorusParam1+0x20>
    6204:	ee20 0a27 	vmul.f32	s0, s0, s15
    6208:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    620c:	ee30 0a27 	vadd.f32	s0, s0, s15
    6210:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6214:	4b03      	ldr	r3, [pc, #12]	; (6224 <chorusParam1+0x24>)
    6216:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    621a:	ed83 0a00 	vstr	s0, [r3]
}
    621e:	4770      	bx	lr
    6220:	45b4a000 	.word	0x45b4a000
    6224:	2001cd9c 	.word	0x2001cd9c
    6228:	f3af 8000 	nop.w
    622c:	f3af 8000 	nop.w
    6230:	f3af 8000 	nop.w
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    6240:	eddf 7a05 	vldr	s15, [pc, #20]	; 6258 <chorusParam2+0x18>
    6244:	ee20 0a27 	vmul.f32	s0, s0, s15
    6248:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    624c:	4b03      	ldr	r3, [pc, #12]	; (625c <chorusParam2+0x1c>)
    624e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6252:	ed83 0a00 	vstr	s0, [r3]
}
    6256:	4770      	bx	lr
    6258:	3dcccccd 	.word	0x3dcccccd
    625c:	2001cdbc 	.word	0x2001cdbc

00006260 <chorusParam3>:
{
    6260:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    6262:	eddf 7a08 	vldr	s15, [pc, #32]	; 6284 <chorusParam3+0x24>
    6266:	ee20 0a27 	vmul.f32	s0, s0, s15
    626a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    626e:	eddf 7a06 	vldr	s15, [pc, #24]	; 6288 <chorusParam3+0x28>
    6272:	ee30 0a27 	vadd.f32	s0, s0, s15
    6276:	4805      	ldr	r0, [pc, #20]	; (628c <chorusParam3+0x2c>)
    6278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    627c:	f001 fdc0 	bl	7e00 <__tCycle_setFreq_veneer>
}
    6280:	bd08      	pop	{r3, pc}
    6282:	bf00      	nop
    6284:	3ecccccd 	.word	0x3ecccccd
    6288:	3c23d70a 	.word	0x3c23d70a
    628c:	2001ccc4 	.word	0x2001ccc4
    6290:	f3af 8000 	nop.w
    6294:	f3af 8000 	nop.w
    6298:	f3af 8000 	nop.w
    629c:	f3af 8000 	nop.w

000062a0 <chorusParam4>:
{
    62a0:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    62a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 62c4 <chorusParam4+0x24>
    62a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    62aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    62ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 62c8 <chorusParam4+0x28>
    62b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    62b6:	4805      	ldr	r0, [pc, #20]	; (62cc <chorusParam4+0x2c>)
    62b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    62bc:	f001 fda0 	bl	7e00 <__tCycle_setFreq_veneer>
}
    62c0:	bd08      	pop	{r3, pc}
    62c2:	bf00      	nop
    62c4:	3ee38e37 	.word	0x3ee38e37
    62c8:	3c343958 	.word	0x3c343958
    62cc:	2001cce4 	.word	0x2001cce4
    62d0:	f3af 8000 	nop.w
    62d4:	f3af 8000 	nop.w
    62d8:	f3af 8000 	nop.w
    62dc:	f3af 8000 	nop.w

000062e0 <delayParam1>:
{
    62e0:	b508      	push	{r3, lr}
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    62e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6304 <delayParam1+0x24>
    62e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    62ea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    62ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    62f2:	ee30 0a27 	vadd.f32	s0, s0, s15
    62f6:	4804      	ldr	r0, [pc, #16]	; (6308 <delayParam1+0x28>)
    62f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    62fc:	f001 fdd8 	bl	7eb0 <__tTapeDelay_setDelay_veneer>
}
    6300:	bd08      	pop	{r3, pc}
    6302:	bf00      	nop
    6304:	46ea6000 	.word	0x46ea6000
    6308:	2001d0b0 	.word	0x2001d0b0
    630c:	f3af 8000 	nop.w
    6310:	f3af 8000 	nop.w
    6314:	f3af 8000 	nop.w
    6318:	f3af 8000 	nop.w
    631c:	f3af 8000 	nop.w

00006320 <delayParam2>:
{
    6320:	b538      	push	{r3, r4, r5, lr}
    6322:	4605      	mov	r5, r0
    6324:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    6326:	ed9f 1a08 	vldr	s2, [pc, #32]	; 6348 <delayParam2+0x28>
    632a:	ee60 0a01 	vmul.f32	s1, s0, s2
    632e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 634c <delayParam2+0x2c>
    6332:	f001 fdcd 	bl	7ed0 <__LEAF_clip_veneer>
    6336:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    633a:	4b05      	ldr	r3, [pc, #20]	; (6350 <delayParam2+0x30>)
    633c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6340:	ed83 0a00 	vstr	s0, [r3]
}
    6344:	bd38      	pop	{r3, r4, r5, pc}
    6346:	bf00      	nop
    6348:	3f8ccccd 	.word	0x3f8ccccd
    634c:	00000000 	.word	0x00000000
    6350:	2001cdbc 	.word	0x2001cdbc
    6354:	f3af 8000 	nop.w
    6358:	f3af 8000 	nop.w
    635c:	f3af 8000 	nop.w

00006360 <delayParam3>:
{
    6360:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    6362:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6366:	eddf 7a05 	vldr	s15, [pc, #20]	; 637c <delayParam3+0x1c>
    636a:	ee20 0a27 	vmul.f32	s0, s0, s15
    636e:	4804      	ldr	r0, [pc, #16]	; (6380 <delayParam3+0x20>)
    6370:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6374:	f001 fec4 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    6378:	bd08      	pop	{r3, pc}
    637a:	bf00      	nop
    637c:	42fe0000 	.word	0x42fe0000
    6380:	2001c694 	.word	0x2001c694
    6384:	f3af 8000 	nop.w
    6388:	f3af 8000 	nop.w
    638c:	f3af 8000 	nop.w
    6390:	f3af 8000 	nop.w
    6394:	f3af 8000 	nop.w
    6398:	f3af 8000 	nop.w
    639c:	f3af 8000 	nop.w

000063a0 <delayParam4>:
{
    63a0:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    63a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 63bc <delayParam4+0x1c>
    63aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    63ae:	4804      	ldr	r0, [pc, #16]	; (63c0 <delayParam4+0x20>)
    63b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63b4:	f001 fea4 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    63b8:	bd08      	pop	{r3, pc}
    63ba:	bf00      	nop
    63bc:	42fe0000 	.word	0x42fe0000
    63c0:	2001c674 	.word	0x2001c674
    63c4:	f3af 8000 	nop.w
    63c8:	f3af 8000 	nop.w
    63cc:	f3af 8000 	nop.w
    63d0:	f3af 8000 	nop.w
    63d4:	f3af 8000 	nop.w
    63d8:	f3af 8000 	nop.w
    63dc:	f3af 8000 	nop.w

000063e0 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    63e0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    63e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    63e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    63ec:	ee30 0a27 	vadd.f32	s0, s0, s15
    63f0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63f4:	4b02      	ldr	r3, [pc, #8]	; (6400 <delayParam5+0x20>)
    63f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    63fa:	ed83 0a00 	vstr	s0, [r3]
}
    63fe:	4770      	bx	lr
    6400:	2001ce1c 	.word	0x2001ce1c
    6404:	f3af 8000 	nop.w
    6408:	f3af 8000 	nop.w
    640c:	f3af 8000 	nop.w
    6410:	f3af 8000 	nop.w
    6414:	f3af 8000 	nop.w
    6418:	f3af 8000 	nop.w
    641c:	f3af 8000 	nop.w

00006420 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    6420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6424:	ed2d 8b04 	vpush	{d8-d9}
    6428:	eeb0 8a40 	vmov.f32	s16, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    642c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6430:	ea4f 0881 	mov.w	r8, r1, lsl #2
    6434:	4d28      	ldr	r5, [pc, #160]	; (64d8 <chorusTick+0xb8>)
    6436:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    643a:	4f28      	ldr	r7, [pc, #160]	; (64dc <chorusTick+0xbc>)
    643c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    6440:	ed97 9a00 	vldr	s18, [r7]
    6444:	eddf 7a26 	vldr	s15, [pc, #152]	; 64e0 <chorusTick+0xc0>
    6448:	ee29 9a27 	vmul.f32	s18, s18, s15
    644c:	4e25      	ldr	r6, [pc, #148]	; (64e4 <chorusTick+0xc4>)
    644e:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    6452:	edd6 8a00 	vldr	s17, [r6]
    6456:	4824      	ldr	r0, [pc, #144]	; (64e8 <chorusTick+0xc8>)
    6458:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    645c:	f001 fcc0 	bl	7de0 <__tCycle_tick_veneer>
    6460:	ee28 0a80 	vmul.f32	s0, s17, s0
    6464:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    6468:	ee30 0a28 	vadd.f32	s0, s0, s17
    646c:	ee29 0a00 	vmul.f32	s0, s18, s0
    6470:	4628      	mov	r0, r5
    6472:	f001 fc8d 	bl	7d90 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    6476:	4c1d      	ldr	r4, [pc, #116]	; (64ec <chorusTick+0xcc>)
    6478:	4444      	add	r4, r8
    647a:	ed97 9a00 	vldr	s18, [r7]
    647e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6482:	ee29 9a27 	vmul.f32	s18, s18, s15
    6486:	edd6 9a00 	vldr	s19, [r6]
    648a:	4819      	ldr	r0, [pc, #100]	; (64f0 <chorusTick+0xd0>)
    648c:	4440      	add	r0, r8
    648e:	f001 fca7 	bl	7de0 <__tCycle_tick_veneer>
    6492:	ee69 9a80 	vmul.f32	s19, s19, s0
    6496:	ee38 0ae9 	vsub.f32	s0, s17, s19
    649a:	ee29 0a00 	vmul.f32	s0, s18, s0
    649e:	4620      	mov	r0, r4
    64a0:	f001 fc76 	bl	7d90 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    64a4:	eeb0 0a48 	vmov.f32	s0, s16
    64a8:	4628      	mov	r0, r5
    64aa:	f001 fc11 	bl	7cd0 <__tLinearDelay_tick_veneer>
    64ae:	ee70 8a48 	vsub.f32	s17, s0, s16
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    64b2:	eeb0 0a48 	vmov.f32	s0, s16
    64b6:	4620      	mov	r0, r4
    64b8:	f001 fc0a 	bl	7cd0 <__tLinearDelay_tick_veneer>
    64bc:	ee30 0a48 	vsub.f32	s0, s0, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    64c0:	ee38 0a80 	vadd.f32	s0, s17, s0
    64c4:	480b      	ldr	r0, [pc, #44]	; (64f4 <chorusTick+0xd4>)
    64c6:	4440      	add	r0, r8
    64c8:	f001 fe06 	bl	80d8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    64cc:	eeb1 0a40 	vneg.f32	s0, s0
    64d0:	ecbd 8b04 	vpop	{d8-d9}
    64d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64d8:	2001c8c4 	.word	0x2001c8c4
    64dc:	2001cd9c 	.word	0x2001cd9c
    64e0:	3f34fdf4 	.word	0x3f34fdf4
    64e4:	2001cdbc 	.word	0x2001cdbc
    64e8:	2001ccc4 	.word	0x2001ccc4
    64ec:	2001c8e4 	.word	0x2001c8e4
    64f0:	2001cce4 	.word	0x2001cce4
    64f4:	2001c77c 	.word	0x2001c77c
    64f8:	f3af 8000 	nop.w
    64fc:	f3af 8000 	nop.w

00006500 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    6500:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    6502:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6506:	008c      	lsls	r4, r1, #2
    6508:	4b0d      	ldr	r3, [pc, #52]	; (6540 <shaperTick+0x40>)
    650a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    650e:	edd3 7a00 	vldr	s15, [r3]
    6512:	ee27 0a80 	vmul.f32	s0, s15, s0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    6516:	4b0b      	ldr	r3, [pc, #44]	; (6544 <shaperTick+0x44>)
    6518:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    651c:	ed93 7a00 	vldr	s14, [r3]
    6520:	ee67 7a87 	vmul.f32	s15, s15, s14
    6524:	4b08      	ldr	r3, [pc, #32]	; (6548 <shaperTick+0x48>)
    6526:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    652a:	edd3 0a00 	vldr	s1, [r3]
    652e:	ee37 0a80 	vadd.f32	s0, s15, s0
    6532:	f001 fce1 	bl	7ef8 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    6536:	4805      	ldr	r0, [pc, #20]	; (654c <shaperTick+0x4c>)
    6538:	4420      	add	r0, r4
    653a:	f001 fdcd 	bl	80d8 <__tHighpass_tick_veneer>
    return temp;
}
    653e:	bd10      	pop	{r4, pc}
    6540:	2001cd9c 	.word	0x2001cd9c
    6544:	2001cdbc 	.word	0x2001cdbc
    6548:	2001cddc 	.word	0x2001cddc
    654c:	2001c77c 	.word	0x2001c77c
    6550:	f3af 8000 	nop.w
    6554:	f3af 8000 	nop.w
    6558:	f3af 8000 	nop.w
    655c:	f3af 8000 	nop.w

00006560 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    6560:	4770      	bx	lr
    6562:	bf00      	nop
    6564:	f3af 8000 	nop.w
    6568:	f3af 8000 	nop.w
    656c:	f3af 8000 	nop.w
    6570:	f3af 8000 	nop.w
    6574:	f3af 8000 	nop.w
    6578:	f3af 8000 	nop.w
    657c:	f3af 8000 	nop.w

00006580 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    6580:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    6582:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6586:	008c      	lsls	r4, r1, #2
    6588:	4806      	ldr	r0, [pc, #24]	; (65a4 <tiltFilterTick+0x24>)
    658a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    658e:	f001 fc8b 	bl	7ea8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    6592:	4805      	ldr	r0, [pc, #20]	; (65a8 <tiltFilterTick+0x28>)
    6594:	4420      	add	r0, r4
    6596:	f001 fb93 	bl	7cc0 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    659a:	4804      	ldr	r0, [pc, #16]	; (65ac <tiltFilterTick+0x2c>)
    659c:	4420      	add	r0, r4
    659e:	f001 fbe7 	bl	7d70 <__tVZFilterBell_tick_veneer>
    return sample;
}
    65a2:	bd10      	pop	{r4, pc}
    65a4:	2001cf10 	.word	0x2001cf10
    65a8:	2001cf30 	.word	0x2001cf30
    65ac:	2001c73c 	.word	0x2001c73c
    65b0:	f3af 8000 	nop.w
    65b4:	f3af 8000 	nop.w
    65b8:	f3af 8000 	nop.w
    65bc:	f3af 8000 	nop.w

000065c0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    65c0:	b510      	push	{r4, lr}
    float gain = param1[v][string];
    65c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    65c6:	008c      	lsls	r4, r1, #2
    65c8:	4b0e      	ldr	r3, [pc, #56]	; (6604 <tanhTick+0x44>)
    65ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    65ce:	edd3 7a00 	vldr	s15, [r3]
	sample = sample * gain;
    65d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    gain = gain * 0.5f;
    65d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    65da:	ee67 7a87 	vmul.f32	s15, s15, s14
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    65de:	4b0a      	ldr	r3, [pc, #40]	; (6608 <tanhTick+0x48>)
    65e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    65e4:	ed93 7a00 	vldr	s14, [r3]
    65e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    65ec:	ee37 0a80 	vadd.f32	s0, s15, s0
    65f0:	f001 fcda 	bl	7fa8 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    65f4:	4805      	ldr	r0, [pc, #20]	; (660c <tanhTick+0x4c>)
    65f6:	4420      	add	r0, r4
    65f8:	f001 fd6e 	bl	80d8 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    65fc:	f001 fcd4 	bl	7fa8 <__tanhf_veneer>
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    6600:	bd10      	pop	{r4, pc}
    6602:	bf00      	nop
    6604:	2001cd9c 	.word	0x2001cd9c
    6608:	2001cdbc 	.word	0x2001cdbc
    660c:	2001c77c 	.word	0x2001c77c
    6610:	f3af 8000 	nop.w
    6614:	f3af 8000 	nop.w
    6618:	f3af 8000 	nop.w
    661c:	f3af 8000 	nop.w

00006620 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    6620:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    6622:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    6626:	4b19      	ldr	r3, [pc, #100]	; (668c <softClipTick+0x6c>)
    6628:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    662c:	edd3 7a00 	vldr	s15, [r3]
    6630:	ee27 0a80 	vmul.f32	s0, s15, s0
    sample = sample + param2[v][string];
    6634:	4b16      	ldr	r3, [pc, #88]	; (6690 <softClipTick+0x70>)
    6636:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    663a:	edd3 7a00 	vldr	s15, [r3]
    663e:	ee77 7a80 	vadd.f32	s15, s15, s0
    //float shape = param3[v][string];
    if (sample <= -1.0f)
    6642:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    6646:	eef4 7ac7 	vcmpe.f32	s15, s14
    664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    664e:	d909      	bls.n	6664 <softClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    6650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    6654:	eef4 7ac7 	vcmpe.f32	s15, s14
    6658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    665c:	db04      	blt.n	6668 <softClipTick+0x48>
    {
        sample = 1.0f;
    665e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6662:	e001      	b.n	6668 <softClipTick+0x48>
        sample = -1.0f;
    6664:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    6668:	ee27 0aa7 	vmul.f32	s0, s15, s15
    666c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6670:	ed9f 7a08 	vldr	s14, [pc, #32]	; 6694 <softClipTick+0x74>
    6674:	ee20 0a07 	vmul.f32	s0, s0, s14
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    6678:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    667c:	ee37 0ac0 	vsub.f32	s0, s15, s0
    6680:	4805      	ldr	r0, [pc, #20]	; (6698 <softClipTick+0x78>)
    6682:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6686:	f001 fd27 	bl	80d8 <__tHighpass_tick_veneer>
    return sample;
}
    668a:	bd08      	pop	{r3, pc}
    668c:	2001cd9c 	.word	0x2001cd9c
    6690:	2001cdbc 	.word	0x2001cdbc
    6694:	3eaaaaaa 	.word	0x3eaaaaaa
    6698:	2001c77c 	.word	0x2001c77c
    669c:	f3af 8000 	nop.w

000066a0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    66a0:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    66a2:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    66a6:	4b21      	ldr	r3, [pc, #132]	; (672c <hardClipTick+0x8c>)
    66a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    66ac:	edd3 7a00 	vldr	s15, [r3]
    66b0:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    66b4:	4b1e      	ldr	r3, [pc, #120]	; (6730 <hardClipTick+0x90>)
    66b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    66ba:	ed93 0a00 	vldr	s0, [r3]
    66be:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (sample <= -1.0f)
    66c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    66c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    66ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66ce:	d909      	bls.n	66e4 <hardClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    66d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    66d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    66d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66dc:	db04      	blt.n	66e8 <hardClipTick+0x48>
    {
        sample = 1.0f;
    66de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    66e2:	e001      	b.n	66e8 <hardClipTick+0x48>
        sample = -1.0f;
    66e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    66e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    66ec:	008e      	lsls	r6, r1, #2
    66ee:	4d11      	ldr	r5, [pc, #68]	; (6734 <hardClipTick+0x94>)
    66f0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    66f4:	edd5 7a00 	vldr	s15, [r5]
    66f8:	ee27 0a80 	vmul.f32	s0, s15, s0
    66fc:	f001 fadc 	bl	7cb8 <__arm_sin_f32_veneer>
    6700:	4c0d      	ldr	r4, [pc, #52]	; (6738 <hardClipTick+0x98>)
    6702:	4434      	add	r4, r6
    6704:	edd4 7a00 	vldr	s15, [r4]
    6708:	ee20 0a27 	vmul.f32	s0, s0, s15
    670c:	edd5 7a00 	vldr	s15, [r5]
    6710:	ee20 0a27 	vmul.f32	s0, s0, s15
    6714:	f001 fad0 	bl	7cb8 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    6718:	edd4 7a00 	vldr	s15, [r4]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    671c:	ee27 0a80 	vmul.f32	s0, s15, s0
    6720:	4806      	ldr	r0, [pc, #24]	; (673c <hardClipTick+0x9c>)
    6722:	4430      	add	r0, r6
    6724:	f001 fcd8 	bl	80d8 <__tHighpass_tick_veneer>
    return sample;
}
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	bf00      	nop
    672c:	2001cd9c 	.word	0x2001cd9c
    6730:	2001cdbc 	.word	0x2001cdbc
    6734:	2001cddc 	.word	0x2001cddc
    6738:	2001cec4 	.word	0x2001cec4
    673c:	2001c77c 	.word	0x2001c77c

00006740 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{
    6740:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    6742:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    6746:	4b21      	ldr	r3, [pc, #132]	; (67cc <polynomialShaperTick+0x8c>)
    6748:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    674c:	edd3 7a00 	vldr	s15, [r3]
    6750:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    6754:	4b1e      	ldr	r3, [pc, #120]	; (67d0 <polynomialShaperTick+0x90>)
    6756:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    675a:	ed93 0a00 	vldr	s0, [r3]
    675e:	ee30 0a27 	vadd.f32	s0, s0, s15

    if (sample <= -1.0f)
    6762:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    6766:	eeb4 0ae7 	vcmpe.f32	s0, s15
    676a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    676e:	d909      	bls.n	6784 <polynomialShaperTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    6770:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6774:	eeb4 0ae7 	vcmpe.f32	s0, s15
    6778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    677c:	db04      	blt.n	6788 <polynomialShaperTick+0x48>
    {
        sample = 1.0f;
    677e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    6782:	e001      	b.n	6788 <polynomialShaperTick+0x48>
        sample = -1.0f;
    6784:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    6788:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    678c:	008e      	lsls	r6, r1, #2
    678e:	4d11      	ldr	r5, [pc, #68]	; (67d4 <polynomialShaperTick+0x94>)
    6790:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    6794:	edd5 7a00 	vldr	s15, [r5]
    6798:	ee27 0a80 	vmul.f32	s0, s15, s0
    679c:	f001 fc78 	bl	8090 <__fastSine_veneer>
    67a0:	4c0d      	ldr	r4, [pc, #52]	; (67d8 <polynomialShaperTick+0x98>)
    67a2:	4434      	add	r4, r6
    67a4:	edd4 7a00 	vldr	s15, [r4]
    67a8:	ee20 0a27 	vmul.f32	s0, s0, s15
    67ac:	edd5 7a00 	vldr	s15, [r5]
    67b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    67b4:	f001 fc6c 	bl	8090 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    67b8:	edd4 7a00 	vldr	s15, [r4]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    67bc:	ee27 0a80 	vmul.f32	s0, s15, s0
    67c0:	4806      	ldr	r0, [pc, #24]	; (67dc <polynomialShaperTick+0x9c>)
    67c2:	4430      	add	r0, r6
    67c4:	f001 fc88 	bl	80d8 <__tHighpass_tick_veneer>
    return sample;
}
    67c8:	bd70      	pop	{r4, r5, r6, pc}
    67ca:	bf00      	nop
    67cc:	2001cd9c 	.word	0x2001cd9c
    67d0:	2001cdbc 	.word	0x2001cdbc
    67d4:	2001cddc 	.word	0x2001cddc
    67d8:	2001ce54 	.word	0x2001ce54
    67dc:	2001c77c 	.word	0x2001c77c

000067e0 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    67e0:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    67e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    67e6:	008c      	lsls	r4, r1, #2
    67e8:	4b15      	ldr	r3, [pc, #84]	; (6840 <satTick+0x60>)
    67ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    67ee:	ed93 6a00 	vldr	s12, [r3]
    67f2:	ee26 0a00 	vmul.f32	s0, s12, s0
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    67f6:	4b13      	ldr	r3, [pc, #76]	; (6844 <satTick+0x64>)
    67f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    67fc:	ed93 7a00 	vldr	s14, [r3]
    6800:	ee26 6a07 	vmul.f32	s12, s12, s14
    6804:	ee36 6a00 	vadd.f32	s12, s12, s0
    6808:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    680c:	ee37 7a00 	vadd.f32	s14, s14, s0
    6810:	eeb0 7ac7 	vabs.f32	s14, s14
    6814:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    6818:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    681c:	ee37 7b05 	vadd.f64	d7, d7, d5
    6820:	ee86 0b07 	vdiv.f64	d0, d6, d7
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    6824:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    6828:	4807      	ldr	r0, [pc, #28]	; (6848 <satTick+0x68>)
    682a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    682e:	f001 fc53 	bl	80d8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    6832:	4806      	ldr	r0, [pc, #24]	; (684c <satTick+0x6c>)
    6834:	4420      	add	r0, r4
    6836:	f001 fc4f 	bl	80d8 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    683a:	f001 fb79 	bl	7f30 <__LEAF_tanh_veneer>
    return temp;
}
    683e:	bd10      	pop	{r4, pc}
    6840:	2001cd9c 	.word	0x2001cd9c
    6844:	2001cdbc 	.word	0x2001cdbc
    6848:	2001c77c 	.word	0x2001c77c
    684c:	2001c79c 	.word	0x2001c79c
    6850:	f3af 8000 	nop.w
    6854:	f3af 8000 	nop.w
    6858:	f3af 8000 	nop.w
    685c:	f3af 8000 	nop.w

00006860 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    6860:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    6862:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6866:	4b06      	ldr	r3, [pc, #24]	; (6880 <bcTick+0x20>)
    6868:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    686c:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    6870:	ee27 0a80 	vmul.f32	s0, s15, s0
    6874:	4803      	ldr	r0, [pc, #12]	; (6884 <bcTick+0x24>)
    6876:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    687a:	f001 fc15 	bl	80a8 <__tCrusher_tick_veneer>
}
    687e:	bd08      	pop	{r3, pc}
    6880:	2001cd9c 	.word	0x2001cd9c
    6884:	2001c71c 	.word	0x2001c71c
    6888:	f3af 8000 	nop.w
    688c:	f3af 8000 	nop.w
    6890:	f3af 8000 	nop.w
    6894:	f3af 8000 	nop.w
    6898:	f3af 8000 	nop.w
    689c:	f3af 8000 	nop.w

000068a0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    68a0:	b508      	push	{r3, lr}
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    68a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    68a6:	4803      	ldr	r0, [pc, #12]	; (68b4 <compressorTick+0x14>)
    68a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    68ac:	f001 fbe0 	bl	8070 <__tCompressor_tick_veneer>
}
    68b0:	bd08      	pop	{r3, pc}
    68b2:	bf00      	nop
    68b4:	2001c75c 	.word	0x2001c75c
    68b8:	f3af 8000 	nop.w
    68bc:	f3af 8000 	nop.w

000068c0 <FXlowpassTick>:

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
    68c0:	b508      	push	{r3, lr}
	return tSVF_tick(&FXlowpass[v][string], sample);
    68c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    68c6:	4803      	ldr	r0, [pc, #12]	; (68d4 <FXlowpassTick+0x14>)
    68c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    68cc:	f001 fac8 	bl	7e60 <__tSVF_tick_veneer>
}
    68d0:	bd08      	pop	{r3, pc}
    68d2:	bf00      	nop
    68d4:	2001c694 	.word	0x2001c694
    68d8:	f3af 8000 	nop.w
    68dc:	f3af 8000 	nop.w

000068e0 <FXhighpassTick>:

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
    68e0:	b508      	push	{r3, lr}
	return tSVF_tick(&FXhighpass[v][string], sample);
    68e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    68e6:	4803      	ldr	r0, [pc, #12]	; (68f4 <FXhighpassTick+0x14>)
    68e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    68ec:	f001 fab8 	bl	7e60 <__tSVF_tick_veneer>
}
    68f0:	bd08      	pop	{r3, pc}
    68f2:	bf00      	nop
    68f4:	2001c674 	.word	0x2001c674
    68f8:	f3af 8000 	nop.w
    68fc:	f3af 8000 	nop.w

00006900 <FXbandpassTick>:

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
    6900:	b508      	push	{r3, lr}
	return tSVF_tick(&FXbandpass[v][string], sample);
    6902:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6906:	4803      	ldr	r0, [pc, #12]	; (6914 <FXbandpassTick+0x14>)
    6908:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    690c:	f001 faa8 	bl	7e60 <__tSVF_tick_veneer>
}
    6910:	bd08      	pop	{r3, pc}
    6912:	bf00      	nop
    6914:	2001c634 	.word	0x2001c634
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <FXdiodeLowpassTick>:

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
    6920:	b508      	push	{r3, lr}
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    6922:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6926:	4803      	ldr	r0, [pc, #12]	; (6934 <FXdiodeLowpassTick+0x14>)
    6928:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    692c:	f001 fa28 	bl	7d80 <__tDiodeFilter_tick_veneer>
}
    6930:	bd08      	pop	{r3, pc}
    6932:	bf00      	nop
    6934:	2001c654 	.word	0x2001c654
    6938:	f3af 8000 	nop.w
    693c:	f3af 8000 	nop.w

00006940 <FXVZpeakTick>:

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
    6940:	b508      	push	{r3, lr}
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    6942:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6946:	4803      	ldr	r0, [pc, #12]	; (6954 <FXVZpeakTick+0x14>)
    6948:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    694c:	f001 fa10 	bl	7d70 <__tVZFilterBell_tick_veneer>
}
    6950:	bd08      	pop	{r3, pc}
    6952:	bf00      	nop
    6954:	2001c614 	.word	0x2001c614
    6958:	f3af 8000 	nop.w
    695c:	f3af 8000 	nop.w

00006960 <FXVZlowshelfTick>:

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
    6960:	b508      	push	{r3, lr}
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    6962:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6966:	4803      	ldr	r0, [pc, #12]	; (6974 <FXVZlowshelfTick+0x14>)
    6968:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    696c:	f001 fa9c 	bl	7ea8 <__tVZFilterLS_tick_veneer>
}
    6970:	bd08      	pop	{r3, pc}
    6972:	bf00      	nop
    6974:	2001c5f4 	.word	0x2001c5f4
    6978:	f3af 8000 	nop.w
    697c:	f3af 8000 	nop.w

00006980 <FXVZhighshelfTick>:
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
    6980:	b508      	push	{r3, lr}
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    6982:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6986:	4803      	ldr	r0, [pc, #12]	; (6994 <FXVZhighshelfTick+0x14>)
    6988:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    698c:	f001 f998 	bl	7cc0 <__tVZFilterHS_tick_veneer>
}
    6990:	bd08      	pop	{r3, pc}
    6992:	bf00      	nop
    6994:	2001c5d4 	.word	0x2001c5d4
    6998:	f3af 8000 	nop.w
    699c:	f3af 8000 	nop.w

000069a0 <FXVZbandrejectTick>:
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
    69a0:	b508      	push	{r3, lr}
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    69a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    69a6:	4803      	ldr	r0, [pc, #12]	; (69b4 <FXVZbandrejectTick+0x14>)
    69a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    69ac:	f001 fbb4 	bl	8118 <__tVZFilter_tickEfficient_veneer>
}
    69b0:	bd08      	pop	{r3, pc}
    69b2:	bf00      	nop
    69b4:	2001c5b4 	.word	0x2001c5b4
    69b8:	f3af 8000 	nop.w
    69bc:	f3af 8000 	nop.w

000069c0 <FXLadderLowpassTick>:

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
    69c0:	b508      	push	{r3, lr}
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    69c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    69c6:	4803      	ldr	r0, [pc, #12]	; (69d4 <FXLadderLowpassTick+0x14>)
    69c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    69cc:	f001 facc 	bl	7f68 <__tLadderFilter_tick_veneer>
}
    69d0:	bd08      	pop	{r3, pc}
    69d2:	bf00      	nop
    69d4:	2001c594 	.word	0x2001c594
    69d8:	f3af 8000 	nop.w
    69dc:	f3af 8000 	nop.w

000069e0 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
    69e0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    69e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6a04 <FXLowpassParam1+0x24>
    69e6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    69ea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    69ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 6a08 <FXLowpassParam1+0x28>
    69f2:	ee30 0a27 	vadd.f32	s0, s0, s15
    69f6:	4805      	ldr	r0, [pc, #20]	; (6a0c <FXLowpassParam1+0x2c>)
    69f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    69fc:	f001 fb80 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    6a00:	bd08      	pop	{r3, pc}
    6a02:	bf00      	nop
    6a04:	429a0000 	.word	0x429a0000
    6a08:	42280000 	.word	0x42280000
    6a0c:	2001c694 	.word	0x2001c694
    6a10:	f3af 8000 	nop.w
    6a14:	f3af 8000 	nop.w
    6a18:	f3af 8000 	nop.w
    6a1c:	f3af 8000 	nop.w

00006a20 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
    6a20:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6a22:	eddf 7a08 	vldr	s15, [pc, #32]	; 6a44 <FXHighpassParam1+0x24>
    6a26:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    6a2a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6a2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 6a48 <FXHighpassParam1+0x28>
    6a32:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a36:	4805      	ldr	r0, [pc, #20]	; (6a4c <FXHighpassParam1+0x2c>)
    6a38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6a3c:	f001 fb60 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    6a40:	bd08      	pop	{r3, pc}
    6a42:	bf00      	nop
    6a44:	429a0000 	.word	0x429a0000
    6a48:	42280000 	.word	0x42280000
    6a4c:	2001c674 	.word	0x2001c674
    6a50:	f3af 8000 	nop.w
    6a54:	f3af 8000 	nop.w
    6a58:	f3af 8000 	nop.w
    6a5c:	f3af 8000 	nop.w

00006a60 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
    6a60:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6a62:	eddf 7a08 	vldr	s15, [pc, #32]	; 6a84 <FXBandpassParam1+0x24>
    6a66:	ee20 0a27 	vmul.f32	s0, s0, s15
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    6a6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6a6e:	eddf 7a06 	vldr	s15, [pc, #24]	; 6a88 <FXBandpassParam1+0x28>
    6a72:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a76:	4805      	ldr	r0, [pc, #20]	; (6a8c <FXBandpassParam1+0x2c>)
    6a78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6a7c:	f001 fb40 	bl	8100 <__tSVF_setFreqFast_veneer>
}
    6a80:	bd08      	pop	{r3, pc}
    6a82:	bf00      	nop
    6a84:	429a0000 	.word	0x429a0000
    6a88:	42280000 	.word	0x42280000
    6a8c:	2001c634 	.word	0x2001c634
    6a90:	f3af 8000 	nop.w
    6a94:	f3af 8000 	nop.w
    6a98:	f3af 8000 	nop.w
    6a9c:	f3af 8000 	nop.w

00006aa0 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
    6aa0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6aa2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6ac4 <FXDiodeParam1+0x24>
    6aa6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    6aaa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6aae:	eddf 7a06 	vldr	s15, [pc, #24]	; 6ac8 <FXDiodeParam1+0x28>
    6ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
    6ab6:	4805      	ldr	r0, [pc, #20]	; (6acc <FXDiodeParam1+0x2c>)
    6ab8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6abc:	f001 fad0 	bl	8060 <__tDiodeFilter_setFreqFast_veneer>
}
    6ac0:	bd08      	pop	{r3, pc}
    6ac2:	bf00      	nop
    6ac4:	429a0000 	.word	0x429a0000
    6ac8:	42280000 	.word	0x42280000
    6acc:	2001c654 	.word	0x2001c654
    6ad0:	f3af 8000 	nop.w
    6ad4:	f3af 8000 	nop.w
    6ad8:	f3af 8000 	nop.w
    6adc:	f3af 8000 	nop.w

00006ae0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
    6ae0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6ae2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6b04 <FXPeakParam1+0x24>
    6ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    6aea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6aee:	eddf 7a06 	vldr	s15, [pc, #24]	; 6b08 <FXPeakParam1+0x28>
    6af2:	ee30 0a27 	vadd.f32	s0, s0, s15
    6af6:	4805      	ldr	r0, [pc, #20]	; (6b0c <FXPeakParam1+0x2c>)
    6af8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6afc:	f001 fb2c 	bl	8158 <__tVZFilterBell_setFreq_veneer>
}
    6b00:	bd08      	pop	{r3, pc}
    6b02:	bf00      	nop
    6b04:	429a0000 	.word	0x429a0000
    6b08:	42280000 	.word	0x42280000
    6b0c:	2001c614 	.word	0x2001c614
    6b10:	f3af 8000 	nop.w
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
    6b20:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6b22:	eddf 7a08 	vldr	s15, [pc, #32]	; 6b44 <FXLowShelfParam1+0x24>
    6b26:	ee20 0a27 	vmul.f32	s0, s0, s15
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    6b2a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6b2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 6b48 <FXLowShelfParam1+0x28>
    6b32:	ee30 0a27 	vadd.f32	s0, s0, s15
    6b36:	4805      	ldr	r0, [pc, #20]	; (6b4c <FXLowShelfParam1+0x2c>)
    6b38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b3c:	f001 fa9c 	bl	8078 <__tVZFilterLS_setFreqFast_veneer>
}
    6b40:	bd08      	pop	{r3, pc}
    6b42:	bf00      	nop
    6b44:	429a0000 	.word	0x429a0000
    6b48:	42280000 	.word	0x42280000
    6b4c:	2001c5f4 	.word	0x2001c5f4
    6b50:	f3af 8000 	nop.w
    6b54:	f3af 8000 	nop.w
    6b58:	f3af 8000 	nop.w
    6b5c:	f3af 8000 	nop.w

00006b60 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
    6b60:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6b62:	eddf 7a08 	vldr	s15, [pc, #32]	; 6b84 <FXHighShelfParam1+0x24>
    6b66:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    6b6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6b6e:	eddf 7a06 	vldr	s15, [pc, #24]	; 6b88 <FXHighShelfParam1+0x28>
    6b72:	ee30 0a27 	vadd.f32	s0, s0, s15
    6b76:	4805      	ldr	r0, [pc, #20]	; (6b8c <FXHighShelfParam1+0x2c>)
    6b78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b7c:	f001 f8c0 	bl	7d00 <__tVZFilterHS_setFreqFast_veneer>
}
    6b80:	bd08      	pop	{r3, pc}
    6b82:	bf00      	nop
    6b84:	429a0000 	.word	0x429a0000
    6b88:	42280000 	.word	0x42280000
    6b8c:	2001c5d4 	.word	0x2001c5d4
    6b90:	f3af 8000 	nop.w
    6b94:	f3af 8000 	nop.w
    6b98:	f3af 8000 	nop.w
    6b9c:	f3af 8000 	nop.w

00006ba0 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
    6ba0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6ba2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6bc4 <FXNotchParam1+0x24>
    6ba6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    6baa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6bae:	eddf 7a06 	vldr	s15, [pc, #24]	; 6bc8 <FXNotchParam1+0x28>
    6bb2:	ee30 0a27 	vadd.f32	s0, s0, s15
    6bb6:	4805      	ldr	r0, [pc, #20]	; (6bcc <FXNotchParam1+0x2c>)
    6bb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bbc:	f001 f930 	bl	7e20 <__tVZFilter_setFreqFast_veneer>
}
    6bc0:	bd08      	pop	{r3, pc}
    6bc2:	bf00      	nop
    6bc4:	429a0000 	.word	0x429a0000
    6bc8:	42280000 	.word	0x42280000
    6bcc:	2001c5b4 	.word	0x2001c5b4
    6bd0:	f3af 8000 	nop.w
    6bd4:	f3af 8000 	nop.w
    6bd8:	f3af 8000 	nop.w
    6bdc:	f3af 8000 	nop.w

00006be0 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
    6be0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    6be2:	eddf 7a08 	vldr	s15, [pc, #32]	; 6c04 <FXLadderParam1+0x24>
    6be6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    6bea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6bee:	eddf 7a06 	vldr	s15, [pc, #24]	; 6c08 <FXLadderParam1+0x28>
    6bf2:	ee30 0a27 	vadd.f32	s0, s0, s15
    6bf6:	4805      	ldr	r0, [pc, #20]	; (6c0c <FXLadderParam1+0x2c>)
    6bf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bfc:	f001 f9f4 	bl	7fe8 <__tLadderFilter_setFreqFast_veneer>
}
    6c00:	bd08      	pop	{r3, pc}
    6c02:	bf00      	nop
    6c04:	429a0000 	.word	0x429a0000
    6c08:	42280000 	.word	0x42280000
    6c0c:	2001c594 	.word	0x2001c594
    6c10:	f3af 8000 	nop.w
    6c14:	f3af 8000 	nop.w
    6c18:	f3af 8000 	nop.w
    6c1c:	f3af 8000 	nop.w

00006c20 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
    6c20:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    6c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c26:	4c08      	ldr	r4, [pc, #32]	; (6c48 <FXPeakParam2+0x28>)
    6c28:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6c2c:	eddf 7a07 	vldr	s15, [pc, #28]	; 6c4c <FXPeakParam2+0x2c>
    6c30:	ee20 0a27 	vmul.f32	s0, s0, s15
    6c34:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6c38:	ee30 0a67 	vsub.f32	s0, s0, s15
    6c3c:	f001 f878 	bl	7d30 <__dbToATableLookup_veneer>
    6c40:	4620      	mov	r0, r4
    6c42:	f001 f8d1 	bl	7de8 <__tVZFilterBell_setGain_veneer>
}
    6c46:	bd10      	pop	{r4, pc}
    6c48:	2001c614 	.word	0x2001c614
    6c4c:	42480000 	.word	0x42480000
    6c50:	f3af 8000 	nop.w
    6c54:	f3af 8000 	nop.w
    6c58:	f3af 8000 	nop.w
    6c5c:	f3af 8000 	nop.w

00006c60 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
    6c60:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    6c62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c66:	4c08      	ldr	r4, [pc, #32]	; (6c88 <FXLowShelfParam2+0x28>)
    6c68:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6c6c:	eddf 7a07 	vldr	s15, [pc, #28]	; 6c8c <FXLowShelfParam2+0x2c>
    6c70:	ee20 0a27 	vmul.f32	s0, s0, s15
    6c74:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6c78:	ee30 0a67 	vsub.f32	s0, s0, s15
    6c7c:	f001 f858 	bl	7d30 <__dbToATableLookup_veneer>
    6c80:	4620      	mov	r0, r4
    6c82:	f001 fa0d 	bl	80a0 <__tVZFilterLS_setGain_veneer>
}
    6c86:	bd10      	pop	{r4, pc}
    6c88:	2001c5f4 	.word	0x2001c5f4
    6c8c:	42480000 	.word	0x42480000
    6c90:	f3af 8000 	nop.w
    6c94:	f3af 8000 	nop.w
    6c98:	f3af 8000 	nop.w
    6c9c:	f3af 8000 	nop.w

00006ca0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
    6ca0:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    6ca2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ca6:	4c08      	ldr	r4, [pc, #32]	; (6cc8 <FXHighShelfParam2+0x28>)
    6ca8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6cac:	eddf 7a07 	vldr	s15, [pc, #28]	; 6ccc <FXHighShelfParam2+0x2c>
    6cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
    6cb4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6cb8:	ee30 0a67 	vsub.f32	s0, s0, s15
    6cbc:	f001 f838 	bl	7d30 <__dbToATableLookup_veneer>
    6cc0:	4620      	mov	r0, r4
    6cc2:	f001 f8b9 	bl	7e38 <__tVZFilterHS_setGain_veneer>
}
    6cc6:	bd10      	pop	{r4, pc}
    6cc8:	2001c5d4 	.word	0x2001c5d4
    6ccc:	42480000 	.word	0x42480000
    6cd0:	f3af 8000 	nop.w
    6cd4:	f3af 8000 	nop.w
    6cd8:	f3af 8000 	nop.w
    6cdc:	f3af 8000 	nop.w

00006ce0 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
    6ce0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    6ce2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ce6:	4c08      	ldr	r4, [pc, #32]	; (6d08 <FXNotchParam2+0x28>)
    6ce8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6cec:	eddf 7a07 	vldr	s15, [pc, #28]	; 6d0c <FXNotchParam2+0x2c>
    6cf0:	ee20 0a27 	vmul.f32	s0, s0, s15
    6cf4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6cf8:	ee30 0a67 	vsub.f32	s0, s0, s15
    6cfc:	f001 f818 	bl	7d30 <__dbToATableLookup_veneer>
    6d00:	4620      	mov	r0, r4
    6d02:	f001 fa0d 	bl	8120 <__tVZFilter_setGain_veneer>

}
    6d06:	bd10      	pop	{r4, pc}
    6d08:	2001c5b4 	.word	0x2001c5b4
    6d0c:	42480000 	.word	0x42480000
    6d10:	f3af 8000 	nop.w
    6d14:	f3af 8000 	nop.w
    6d18:	f3af 8000 	nop.w
    6d1c:	f3af 8000 	nop.w

00006d20 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
    6d20:	b508      	push	{r3, lr}
	tSVF_setQ(&FXlowpass[v][string], value);
    6d22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d26:	4803      	ldr	r0, [pc, #12]	; (6d34 <FXLowpassParam3+0x14>)
    6d28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d2c:	f001 f888 	bl	7e40 <__tSVF_setQ_veneer>
}
    6d30:	bd08      	pop	{r3, pc}
    6d32:	bf00      	nop
    6d34:	2001c694 	.word	0x2001c694
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <FXHighpassParam3>:

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    6d40:	b508      	push	{r3, lr}
    tSVF_setQ(&FXhighpass[v][string], value);
    6d42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d46:	4803      	ldr	r0, [pc, #12]	; (6d54 <FXHighpassParam3+0x14>)
    6d48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d4c:	f001 f878 	bl	7e40 <__tSVF_setQ_veneer>
}
    6d50:	bd08      	pop	{r3, pc}
    6d52:	bf00      	nop
    6d54:	2001c674 	.word	0x2001c674
    6d58:	f3af 8000 	nop.w
    6d5c:	f3af 8000 	nop.w

00006d60 <FXBandpassParam3>:

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    6d60:	b508      	push	{r3, lr}
    tSVF_setQ(&FXbandpass[v][string], value);
    6d62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d66:	4803      	ldr	r0, [pc, #12]	; (6d74 <FXBandpassParam3+0x14>)
    6d68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d6c:	f001 f868 	bl	7e40 <__tSVF_setQ_veneer>
}
    6d70:	bd08      	pop	{r3, pc}
    6d72:	bf00      	nop
    6d74:	2001c634 	.word	0x2001c634
    6d78:	f3af 8000 	nop.w
    6d7c:	f3af 8000 	nop.w

00006d80 <FXDiodeParam3>:

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
    6d80:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    6d82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d86:	4803      	ldr	r0, [pc, #12]	; (6d94 <FXDiodeParam3+0x14>)
    6d88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d8c:	f001 f8b0 	bl	7ef0 <__tDiodeFilter_setQ_veneer>
}
    6d90:	bd08      	pop	{r3, pc}
    6d92:	bf00      	nop
    6d94:	2001c654 	.word	0x2001c654
    6d98:	f3af 8000 	nop.w
    6d9c:	f3af 8000 	nop.w

00006da0 <FXPeakParam3>:


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
    6da0:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    6da2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6da6:	4803      	ldr	r0, [pc, #12]	; (6db4 <FXPeakParam3+0x14>)
    6da8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6dac:	f001 f914 	bl	7fd8 <__tVZFilterBell_setBandwidth_veneer>
}
    6db0:	bd08      	pop	{r3, pc}
    6db2:	bf00      	nop
    6db4:	2001c614 	.word	0x2001c614
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <FXLowShelfParam3>:


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
    6dc0:	b508      	push	{r3, lr}
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    6dc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6dc6:	4803      	ldr	r0, [pc, #12]	; (6dd4 <FXLowShelfParam3+0x14>)
    6dc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6dcc:	f001 f9cc 	bl	8168 <__tVZFilterLS_setResonance_veneer>
}
    6dd0:	bd08      	pop	{r3, pc}
    6dd2:	bf00      	nop
    6dd4:	2001c5f4 	.word	0x2001c5f4
    6dd8:	f3af 8000 	nop.w
    6ddc:	f3af 8000 	nop.w

00006de0 <FXHighShelfParam3>:


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
    6de0:	b508      	push	{r3, lr}
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    6de2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6de6:	4803      	ldr	r0, [pc, #12]	; (6df4 <FXHighShelfParam3+0x14>)
    6de8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6dec:	f001 f8ac 	bl	7f48 <__tVZFilterHS_setResonance_veneer>
}
    6df0:	bd08      	pop	{r3, pc}
    6df2:	bf00      	nop
    6df4:	2001c5d4 	.word	0x2001c5d4
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <FXNotchParam3>:


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
    6e00:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    6e02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6e06:	4803      	ldr	r0, [pc, #12]	; (6e14 <FXNotchParam3+0x14>)
    6e08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6e0c:	f000 ffd8 	bl	7dc0 <__tVZFilter_setResonance_veneer>
}
    6e10:	bd08      	pop	{r3, pc}
    6e12:	bf00      	nop
    6e14:	2001c5b4 	.word	0x2001c5b4
    6e18:	f3af 8000 	nop.w
    6e1c:	f3af 8000 	nop.w

00006e20 <FXLadderParam3>:


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
    6e20:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    6e22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6e26:	4803      	ldr	r0, [pc, #12]	; (6e34 <FXLadderParam3+0x14>)
    6e28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6e2c:	f000 ff90 	bl	7d50 <__tLadderFilter_setQ_veneer>
}
    6e30:	bd08      	pop	{r3, pc}
    6e32:	bf00      	nop
    6e34:	2001c594 	.word	0x2001c594
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    6e40:	b538      	push	{r3, r4, r5, lr}
    6e42:	ed2d 8b02 	vpush	{d8}
    6e46:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    6e48:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    6e4c:	ee20 8a27 	vmul.f32	s16, s0, s15
    6e50:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    6e54:	ee38 8a67 	vsub.f32	s16, s16, s15
    6e58:	eeb1 0a48 	vneg.f32	s0, s16
    6e5c:	f000 ff68 	bl	7d30 <__dbToATableLookup_veneer>
    6e60:	00a5      	lsls	r5, r4, #2
    6e62:	4808      	ldr	r0, [pc, #32]	; (6e84 <noiseSetTilt+0x44>)
    6e64:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6e68:	f001 f91a 	bl	80a0 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    6e6c:	eeb0 0a48 	vmov.f32	s0, s16
    6e70:	f000 ff5e 	bl	7d30 <__dbToATableLookup_veneer>
    6e74:	4804      	ldr	r0, [pc, #16]	; (6e88 <noiseSetTilt+0x48>)
    6e76:	4428      	add	r0, r5
    6e78:	f000 ffde 	bl	7e38 <__tVZFilterHS_setGain_veneer>
}
    6e7c:	ecbd 8b02 	vpop	{d8}
    6e80:	bd38      	pop	{r3, r4, r5, pc}
    6e82:	bf00      	nop
    6e84:	2001cd20 	.word	0x2001cd20
    6e88:	2001cd28 	.word	0x2001cd28
    6e8c:	f3af 8000 	nop.w
    6e90:	f3af 8000 	nop.w
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
    6ea0:	b510      	push	{r4, lr}
    6ea2:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    6ea4:	eddf 7a07 	vldr	s15, [pc, #28]	; 6ec4 <noiseSetGain+0x24>
    6ea8:	ee20 0a27 	vmul.f32	s0, s0, s15
    6eac:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    6eb0:	ee30 0a67 	vsub.f32	s0, s0, s15
    6eb4:	f000 ff3c 	bl	7d30 <__dbToATableLookup_veneer>
    6eb8:	4803      	ldr	r0, [pc, #12]	; (6ec8 <noiseSetGain+0x28>)
    6eba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6ebe:	f000 ff93 	bl	7de8 <__tVZFilterBell_setGain_veneer>
}
    6ec2:	bd10      	pop	{r4, pc}
    6ec4:	42080000 	.word	0x42080000
    6ec8:	2001cd04 	.word	0x2001cd04
    6ecc:	f3af 8000 	nop.w
    6ed0:	f3af 8000 	nop.w
    6ed4:	f3af 8000 	nop.w
    6ed8:	f3af 8000 	nop.w
    6edc:	f3af 8000 	nop.w

00006ee0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
    6ee0:	b510      	push	{r4, lr}
    6ee2:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    6ee4:	eddf 7a07 	vldr	s15, [pc, #28]	; 6f04 <noiseSetFreq+0x24>
    6ee8:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    6eec:	eddf 7a06 	vldr	s15, [pc, #24]	; 6f08 <noiseSetFreq+0x28>
    6ef0:	ee30 0a27 	vadd.f32	s0, s0, s15
    6ef4:	f000 ff28 	bl	7d48 <__faster_mtof_veneer>
    6ef8:	4804      	ldr	r0, [pc, #16]	; (6f0c <noiseSetFreq+0x2c>)
    6efa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6efe:	f001 f92b 	bl	8158 <__tVZFilterBell_setFreq_veneer>
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    6f02:	bd10      	pop	{r4, pc}
    6f04:	429a0000 	.word	0x429a0000
    6f08:	42280000 	.word	0x42280000
    6f0c:	2001cd04 	.word	0x2001cd04
    6f10:	f3af 8000 	nop.w
    6f14:	f3af 8000 	nop.w
    6f18:	f3af 8000 	nop.w
    6f1c:	f3af 8000 	nop.w

00006f20 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    6f20:	b538      	push	{r3, r4, r5, lr}
    6f22:	ed2d 8b04 	vpush	{d8-d9}
    6f26:	4604      	mov	r4, r0
	float enabled = params[Noise].realVal[string];
    6f28:	4b2b      	ldr	r3, [pc, #172]	; (6fd8 <noise_tick+0xb8>)
    6f2a:	f100 0280 	add.w	r2, r0, #128	; 0x80
    6f2e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6f32:	edd2 8a00 	vldr	s17, [r2]
	float amp = params[NoiseAmp].realVal[string];
    6f36:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    6f3a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6f3e:	ed92 8a00 	vldr	s16, [r2]
	float filterSend = params[NoiseFilterSend].realVal[string];
    6f42:	f100 02a3 	add.w	r2, r0, #163	; 0xa3
    6f46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6f4a:	ed93 9a00 	vldr	s18, [r3]
	amp = amp < 0.f ? 0.f : amp;
    6f4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    6f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f56:	d43c      	bmi.n	6fd2 <noise_tick+0xb2>
	float sample = random_values[randomValPointer++];
    6f58:	4b20      	ldr	r3, [pc, #128]	; (6fdc <noise_tick+0xbc>)
    6f5a:	781a      	ldrb	r2, [r3, #0]
    6f5c:	1c51      	adds	r1, r2, #1
    6f5e:	7019      	strb	r1, [r3, #0]
    6f60:	4b1f      	ldr	r3, [pc, #124]	; (6fe0 <noise_tick+0xc0>)
    6f62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    6f66:	00a5      	lsls	r5, r4, #2
    6f68:	ed93 0a00 	vldr	s0, [r3]
    6f6c:	481d      	ldr	r0, [pc, #116]	; (6fe4 <noise_tick+0xc4>)
    6f6e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6f72:	f000 ff99 	bl	7ea8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    6f76:	481c      	ldr	r0, [pc, #112]	; (6fe8 <noise_tick+0xc8>)
    6f78:	4428      	add	r0, r5
    6f7a:	f000 fea1 	bl	7cc0 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    6f7e:	481b      	ldr	r0, [pc, #108]	; (6fec <noise_tick+0xcc>)
    6f80:	4428      	add	r0, r5
    6f82:	f000 fef5 	bl	7d70 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
    6f86:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    6f8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6f8e:	ee30 7a27 	vadd.f32	s14, s0, s15
    6f92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    6f96:	ee27 7a26 	vmul.f32	s14, s14, s13
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    6f9a:	1da2      	adds	r2, r4, #6
    6f9c:	4b14      	ldr	r3, [pc, #80]	; (6ff0 <noise_tick+0xd0>)
    6f9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6fa2:	ed83 7a00 	vstr	s14, [r3]
	noiseOuts[0][string] = sample * filterSend *  enabled;
    6fa6:	ee29 7a00 	vmul.f32	s14, s18, s0
    6faa:	ee27 7a28 	vmul.f32	s14, s14, s17
    6fae:	4b11      	ldr	r3, [pc, #68]	; (6ff4 <noise_tick+0xd4>)
    6fb0:	441d      	add	r5, r3
    6fb2:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    6fb6:	ee77 7ac9 	vsub.f32	s15, s15, s18
    6fba:	ee67 7a80 	vmul.f32	s15, s15, s0
    6fbe:	ee67 7aa8 	vmul.f32	s15, s15, s17
    6fc2:	3402      	adds	r4, #2
    6fc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6fc8:	edc3 7a00 	vstr	s15, [r3]
}
    6fcc:	ecbd 8b04 	vpop	{d8-d9}
    6fd0:	bd38      	pop	{r3, r4, r5, pc}
	amp = amp < 0.f ? 0.f : amp;
    6fd2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 6ff8 <noise_tick+0xd8>
    6fd6:	e7bf      	b.n	6f58 <noise_tick+0x38>
    6fd8:	20018a64 	.word	0x20018a64
    6fdc:	2001ce90 	.word	0x2001ce90
    6fe0:	20019ba8 	.word	0x20019ba8
    6fe4:	2001cd20 	.word	0x2001cd20
    6fe8:	2001cd28 	.word	0x2001cd28
    6fec:	2001cd04 	.word	0x2001cd04
    6ff0:	2001cf80 	.word	0x2001cf80
    6ff4:	2001cd10 	.word	0x2001cd10
    6ff8:	00000000 	.word	0x00000000
    6ffc:	f3af 8000 	nop.w

00007000 <audioTickSynth>:
{
    7000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7004:	ed2d 8b04 	vpush	{d8-d9}
    7008:	b087      	sub	sp, #28
    700a:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    700c:	4c8d      	ldr	r4, [pc, #564]	; (7244 <audioTickSynth+0x244>)
    700e:	6863      	ldr	r3, [r4, #4]
    7010:	607b      	str	r3, [r7, #4]
	uint32_t tempCountMap = DWT->CYCCNT;
    7012:	6865      	ldr	r5, [r4, #4]
	tickMappings();
    7014:	f7fe fb14 	bl	5640 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    7018:	6863      	ldr	r3, [r4, #4]
    701a:	1b5b      	subs	r3, r3, r5
    701c:	4a8a      	ldr	r2, [pc, #552]	; (7248 <audioTickSynth+0x248>)
    701e:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    7020:	6864      	ldr	r4, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7022:	488a      	ldr	r0, [pc, #552]	; (724c <audioTickSynth+0x24c>)
    7024:	f000 ff00 	bl	7e28 <__tExpSmooth_tick_veneer>
    7028:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < 12; i++)
    702c:	2500      	movs	r5, #0
    702e:	e00d      	b.n	704c <audioTickSynth+0x4c>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    7030:	1d29      	adds	r1, r5, #4
    7032:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    7036:	4a86      	ldr	r2, [pc, #536]	; (7250 <audioTickSynth+0x250>)
    7038:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    703c:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    7040:	3301      	adds	r3, #1
    7042:	4a84      	ldr	r2, [pc, #528]	; (7254 <audioTickSynth+0x254>)
    7044:	7812      	ldrb	r2, [r2, #0]
    7046:	429a      	cmp	r2, r3
    7048:	dcf2      	bgt.n	7030 <audioTickSynth+0x30>
	for (int i = 0; i < 12; i++)
    704a:	3501      	adds	r5, #1
    704c:	2d0b      	cmp	r5, #11
    704e:	dc0b      	bgt.n	7068 <audioTickSynth+0x68>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    7050:	00ae      	lsls	r6, r5, #2
    7052:	4881      	ldr	r0, [pc, #516]	; (7258 <audioTickSynth+0x258>)
    7054:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    7058:	f000 fee6 	bl	7e28 <__tExpSmooth_tick_veneer>
    705c:	4b7f      	ldr	r3, [pc, #508]	; (725c <audioTickSynth+0x25c>)
    705e:	4433      	add	r3, r6
    7060:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    7064:	2300      	movs	r3, #0
    7066:	e7ec      	b.n	7042 <audioTickSynth+0x42>
	for (int i = 0; i < 10; i++)
    7068:	2500      	movs	r5, #0
    706a:	e00e      	b.n	708a <audioTickSynth+0x8a>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    706c:	f105 011c 	add.w	r1, r5, #28
    7070:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    7074:	4a76      	ldr	r2, [pc, #472]	; (7250 <audioTickSynth+0x250>)
    7076:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    707a:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    707e:	3301      	adds	r3, #1
    7080:	4a74      	ldr	r2, [pc, #464]	; (7254 <audioTickSynth+0x254>)
    7082:	7812      	ldrb	r2, [r2, #0]
    7084:	429a      	cmp	r2, r3
    7086:	dcf1      	bgt.n	706c <audioTickSynth+0x6c>
	for (int i = 0; i < 10; i++)
    7088:	3501      	adds	r5, #1
    708a:	2d09      	cmp	r5, #9
    708c:	dc0b      	bgt.n	70a6 <audioTickSynth+0xa6>
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    708e:	00ae      	lsls	r6, r5, #2
    7090:	4873      	ldr	r0, [pc, #460]	; (7260 <audioTickSynth+0x260>)
    7092:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    7096:	f000 fec7 	bl	7e28 <__tExpSmooth_tick_veneer>
    709a:	4b72      	ldr	r3, [pc, #456]	; (7264 <audioTickSynth+0x264>)
    709c:	4433      	add	r3, r6
    709e:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    70a2:	2300      	movs	r3, #0
    70a4:	e7ec      	b.n	7080 <audioTickSynth+0x80>
	for (int v = 0; v < numStringsThisBoard; v++)
    70a6:	2200      	movs	r2, #0
    70a8:	e008      	b.n	70bc <audioTickSynth+0xbc>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    70aa:	f102 0120 	add.w	r1, r2, #32
    70ae:	4b68      	ldr	r3, [pc, #416]	; (7250 <audioTickSynth+0x250>)
    70b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    70b4:	496c      	ldr	r1, [pc, #432]	; (7268 <audioTickSynth+0x268>)
    70b6:	6809      	ldr	r1, [r1, #0]
    70b8:	6019      	str	r1, [r3, #0]
	for (int v = 0; v < numStringsThisBoard; v++)
    70ba:	3201      	adds	r2, #1
    70bc:	4b65      	ldr	r3, [pc, #404]	; (7254 <audioTickSynth+0x254>)
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	4293      	cmp	r3, r2
    70c2:	dcf2      	bgt.n	70aa <audioTickSynth+0xaa>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    70c4:	495f      	ldr	r1, [pc, #380]	; (7244 <audioTickSynth+0x244>)
    70c6:	684a      	ldr	r2, [r1, #4]
    70c8:	1b12      	subs	r2, r2, r4
    70ca:	4868      	ldr	r0, [pc, #416]	; (726c <audioTickSynth+0x26c>)
    70cc:	6002      	str	r2, [r0, #0]
	float note[numStringsThisBoard];
    70ce:	009b      	lsls	r3, r3, #2
    70d0:	3307      	adds	r3, #7
    70d2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    70d6:	ebad 0d03 	sub.w	sp, sp, r3
    70da:	466e      	mov	r6, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    70dc:	f8d1 b004 	ldr.w	fp, [r1, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    70e0:	2400      	movs	r4, #0
	float masterSample = 0.0f;
    70e2:	eddf 8a63 	vldr	s17, [pc, #396]	; 7270 <audioTickSynth+0x270>
	for (int v = 0; v < numStringsThisBoard; v++)
    70e6:	e10f      	b.n	7308 <audioTickSynth+0x308>
			note[v] = 0.0f;
    70e8:	2200      	movs	r2, #0
    70ea:	6002      	str	r2, [r0, #0]
    70ec:	e13e      	b.n	736c <audioTickSynth+0x36c>
			note[v] = 64.0f;
    70ee:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    70f2:	601a      	str	r2, [r3, #0]
    70f4:	e151      	b.n	739a <audioTickSynth+0x39a>
			noise_tick(v);
    70f6:	4620      	mov	r0, r4
    70f8:	f7ff ff12 	bl	6f20 <noise_tick>
    70fc:	e17a      	b.n	73f4 <audioTickSynth+0x3f4>
			filterSamps[0] += oscOuts[0][i][v];
    70fe:	4b5d      	ldr	r3, [pc, #372]	; (7274 <audioTickSynth+0x274>)
    7100:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    7104:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    7108:	ed90 7a00 	vldr	s14, [r0]
    710c:	edd7 7a04 	vldr	s15, [r7, #16]
    7110:	ee77 7a87 	vadd.f32	s15, s15, s14
    7114:	edc7 7a04 	vstr	s15, [r7, #16]
			filterSamps[1] += oscOuts[1][i][v];
    7118:	3206      	adds	r2, #6
    711a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    711e:	ed93 7a00 	vldr	s14, [r3]
    7122:	edd7 7a05 	vldr	s15, [r7, #20]
    7126:	ee77 7a87 	vadd.f32	s15, s15, s14
    712a:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 0; i < oscToTick; i++)
    712e:	3101      	adds	r1, #1
    7130:	4b51      	ldr	r3, [pc, #324]	; (7278 <audioTickSynth+0x278>)
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	428b      	cmp	r3, r1
    7136:	dce2      	bgt.n	70fe <audioTickSynth+0xfe>
		filterSamps[0] += noiseOuts[0][v];
    7138:	4b50      	ldr	r3, [pc, #320]	; (727c <audioTickSynth+0x27c>)
    713a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    713e:	ed92 7a00 	vldr	s14, [r2]
    7142:	edd7 7a04 	vldr	s15, [r7, #16]
    7146:	ee77 7a87 	vadd.f32	s15, s15, s14
    714a:	edc7 7a04 	vstr	s15, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
    714e:	1ca2      	adds	r2, r4, #2
    7150:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7154:	ed93 7a00 	vldr	s14, [r3]
    7158:	edd7 7a05 	vldr	s15, [r7, #20]
    715c:	ee77 7a87 	vadd.f32	s15, s15, s14
    7160:	edc7 7a05 	vstr	s15, [r7, #20]
		uint32_t tempCountFilt = DWT->CYCCNT;
    7164:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 7244 <audioTickSynth+0x244>
    7168:	f8d8 5004 	ldr.w	r5, [r8, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    716c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    7170:	4621      	mov	r1, r4
    7172:	ed93 0a00 	vldr	s0, [r3]
    7176:	f107 0010 	add.w	r0, r7, #16
    717a:	f7fd fd41 	bl	4c00 <filter_tick>
    717e:	ed87 0a03 	vstr	s0, [r7, #12]
		timeFilt = DWT->CYCCNT - tempCountFilt;
    7182:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7186:	1b5b      	subs	r3, r3, r5
    7188:	4a3d      	ldr	r2, [pc, #244]	; (7280 <audioTickSynth+0x280>)
    718a:	6013      	str	r3, [r2, #0]
		if (fxPre)
    718c:	4b3d      	ldr	r3, [pc, #244]	; (7284 <audioTickSynth+0x284>)
    718e:	781b      	ldrb	r3, [r3, #0]
    7190:	b143      	cbz	r3, 71a4 <audioTickSynth+0x1a4>
			sample *= amplitude[v];
    7192:	4b3d      	ldr	r3, [pc, #244]	; (7288 <audioTickSynth+0x288>)
    7194:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7198:	edd3 7a00 	vldr	s15, [r3]
    719c:	ee20 0a27 	vmul.f32	s0, s0, s15
    71a0:	ed87 0a03 	vstr	s0, [r7, #12]
		uint32_t tempCountOS = DWT->CYCCNT;
    71a4:	4b27      	ldr	r3, [pc, #156]	; (7244 <audioTickSynth+0x244>)
    71a6:	f8d3 a004 	ldr.w	sl, [r3, #4]
		if (overSampled)
    71aa:	4b38      	ldr	r3, [pc, #224]	; (728c <audioTickSynth+0x28c>)
    71ac:	681b      	ldr	r3, [r3, #0]
    71ae:	b90b      	cbnz	r3, 71b4 <audioTickSynth+0x1b4>
			for (int i = 0; i < NUM_EFFECT; i++)
    71b0:	2500      	movs	r5, #0
    71b2:	e12a      	b.n	740a <audioTickSynth+0x40a>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    71b4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    71b8:	2301      	movs	r3, #1
    71ba:	4a35      	ldr	r2, [pc, #212]	; (7290 <audioTickSynth+0x290>)
    71bc:	f107 010c 	add.w	r1, r7, #12
    71c0:	4d34      	ldr	r5, [pc, #208]	; (7294 <audioTickSynth+0x294>)
    71c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    71c6:	f000 fee7 	bl	7f98 <__arm_fir_interpolate_f32_veneer>
			for (int i = 0; i < 4; i++)
    71ca:	2500      	movs	r5, #0
    71cc:	e030      	b.n	7230 <audioTickSynth+0x230>
						float dry = oversamplerArray[j]; //store the dry value to mix later
    71ce:	4b30      	ldr	r3, [pc, #192]	; (7290 <audioTickSynth+0x290>)
    71d0:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    71d4:	ed98 9a00 	vldr	s18, [r8]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    71d8:	4b2f      	ldr	r3, [pc, #188]	; (7298 <audioTickSynth+0x298>)
    71da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    71de:	4621      	mov	r1, r4
    71e0:	4628      	mov	r0, r5
    71e2:	eeb0 0a49 	vmov.f32	s0, s18
    71e6:	4798      	blx	r3
    71e8:	ed88 0a00 	vstr	s0, [r8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    71ec:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    71f0:	4a2a      	ldr	r2, [pc, #168]	; (729c <audioTickSynth+0x29c>)
    71f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    71f6:	ed92 7a00 	vldr	s14, [r2]
    71fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    71fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7202:	ee67 7a89 	vmul.f32	s15, s15, s18
    7206:	ee20 0a07 	vmul.f32	s0, s0, s14
    720a:	ee77 7a80 	vadd.f32	s15, s15, s0
    720e:	edc8 7a00 	vstr	s15, [r8]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    7212:	4a23      	ldr	r2, [pc, #140]	; (72a0 <audioTickSynth+0x2a0>)
    7214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7218:	ed93 7a00 	vldr	s14, [r3]
    721c:	ee67 7a87 	vmul.f32	s15, s15, s14
    7220:	edc8 7a00 	vstr	s15, [r8]
					for (int j = 0; j < OVERSAMPLE; j++)
    7224:	f109 0901 	add.w	r9, r9, #1
    7228:	f1b9 0f01 	cmp.w	r9, #1
    722c:	ddcf      	ble.n	71ce <audioTickSynth+0x1ce>
			for (int i = 0; i < 4; i++)
    722e:	3501      	adds	r5, #1
    7230:	2d03      	cmp	r5, #3
    7232:	dc39      	bgt.n	72a8 <audioTickSynth+0x2a8>
				if (effectsActive[i])
    7234:	4b1b      	ldr	r3, [pc, #108]	; (72a4 <audioTickSynth+0x2a4>)
    7236:	5d5b      	ldrb	r3, [r3, r5]
    7238:	2b00      	cmp	r3, #0
    723a:	d0f8      	beq.n	722e <audioTickSynth+0x22e>
					for (int j = 0; j < OVERSAMPLE; j++)
    723c:	f04f 0900 	mov.w	r9, #0
    7240:	e7f2      	b.n	7228 <audioTickSynth+0x228>
    7242:	bf00      	nop
    7244:	e0001000 	.word	0xe0001000
    7248:	2001d0e0 	.word	0x2001d0e0
    724c:	20013e24 	.word	0x20013e24
    7250:	2001cf80 	.word	0x2001cf80
    7254:	200004b1 	.word	0x200004b1
    7258:	20004e28 	.word	0x20004e28
    725c:	20004df8 	.word	0x20004df8
    7260:	20004ef4 	.word	0x20004ef4
    7264:	20004ecc 	.word	0x20004ecc
    7268:	20013e1c 	.word	0x20013e1c
    726c:	2001d0f4 	.word	0x2001d0f4
    7270:	00000000 	.word	0x00000000
    7274:	2001cd64 	.word	0x2001cd64
    7278:	2000074c 	.word	0x2000074c
    727c:	2001cd10 	.word	0x2001cd10
    7280:	2001d0d4 	.word	0x2001d0d4
    7284:	20016091 	.word	0x20016091
    7288:	2001c704 	.word	0x2001c704
    728c:	20000750 	.word	0x20000750
    7290:	2001cd94 	.word	0x2001cd94
    7294:	2001cd48 	.word	0x2001cd48
    7298:	2001c934 	.word	0x2001c934
    729c:	2001c9d8 	.word	0x2001c9d8
    72a0:	2001c9f8 	.word	0x2001c9f8
    72a4:	20013f64 	.word	0x20013f64
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    72a8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    72ac:	2302      	movs	r3, #2
    72ae:	f107 020c 	add.w	r2, r7, #12
    72b2:	49a6      	ldr	r1, [pc, #664]	; (754c <audioTickSynth+0x54c>)
    72b4:	4da6      	ldr	r5, [pc, #664]	; (7550 <audioTickSynth+0x550>)
    72b6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    72ba:	f000 fe35 	bl	7f28 <__arm_fir_decimate_f32_veneer>
		timeOS = DWT->CYCCNT - tempCountOS;
    72be:	4ba5      	ldr	r3, [pc, #660]	; (7554 <audioTickSynth+0x554>)
    72c0:	685b      	ldr	r3, [r3, #4]
    72c2:	eba3 030a 	sub.w	r3, r3, sl
    72c6:	4aa4      	ldr	r2, [pc, #656]	; (7558 <audioTickSynth+0x558>)
    72c8:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    72ca:	4ba4      	ldr	r3, [pc, #656]	; (755c <audioTickSynth+0x55c>)
    72cc:	781b      	ldrb	r3, [r3, #0]
    72ce:	b953      	cbnz	r3, 72e6 <audioTickSynth+0x2e6>
			sample *= amplitude[v];
    72d0:	4ba3      	ldr	r3, [pc, #652]	; (7560 <audioTickSynth+0x560>)
    72d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    72d6:	ed93 7a00 	vldr	s14, [r3]
    72da:	edd7 7a03 	vldr	s15, [r7, #12]
    72de:	ee67 7a87 	vmul.f32	s15, s15, s14
    72e2:	edc7 7a03 	vstr	s15, [r7, #12]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    72e6:	ed97 0a03 	vldr	s0, [r7, #12]
    72ea:	489e      	ldr	r0, [pc, #632]	; (7564 <audioTickSynth+0x564>)
    72ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    72f0:	f000 fdb6 	bl	7e60 <__tSVF_tick_veneer>
    72f4:	4b9c      	ldr	r3, [pc, #624]	; (7568 <audioTickSynth+0x568>)
    72f6:	edd3 7a00 	vldr	s15, [r3]
    72fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    72fe:	ed87 0a03 	vstr	s0, [r7, #12]
		masterSample += sample;// * finalMaster[v];
    7302:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
    7306:	3401      	adds	r4, #1
    7308:	4b98      	ldr	r3, [pc, #608]	; (756c <audioTickSynth+0x56c>)
    730a:	781b      	ldrb	r3, [r3, #0]
    730c:	42a3      	cmp	r3, r4
    730e:	f340 80ac 	ble.w	746a <audioTickSynth+0x46a>
		float sample = 0.0f;
    7312:	2300      	movs	r3, #0
    7314:	60fb      	str	r3, [r7, #12]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    7316:	4b8f      	ldr	r3, [pc, #572]	; (7554 <audioTickSynth+0x554>)
    7318:	6859      	ldr	r1, [r3, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    731a:	4b95      	ldr	r3, [pc, #596]	; (7570 <audioTickSynth+0x570>)
    731c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7320:	edd3 7a00 	vldr	s15, [r3]
    7324:	4b93      	ldr	r3, [pc, #588]	; (7574 <audioTickSynth+0x574>)
    7326:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    732a:	ed93 7a00 	vldr	s14, [r3]
    732e:	ee77 7a87 	vadd.f32	s15, s15, s14
    7332:	eb06 0084 	add.w	r0, r6, r4, lsl #2
    7336:	edc0 7a00 	vstr	s15, [r0]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    733a:	4b8f      	ldr	r3, [pc, #572]	; (7578 <audioTickSynth+0x578>)
    733c:	ed93 7a00 	vldr	s14, [r3]
    7340:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7344:	4b8d      	ldr	r3, [pc, #564]	; (757c <audioTickSynth+0x57c>)
    7346:	ed93 7a00 	vldr	s14, [r3]
    734a:	ee67 7a87 	vmul.f32	s15, s15, s14
    734e:	f104 0222 	add.w	r2, r4, #34	; 0x22
    7352:	4b8b      	ldr	r3, [pc, #556]	; (7580 <audioTickSynth+0x580>)
    7354:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7358:	edc3 7a00 	vstr	s15, [r3]
		if (note[v] < 0.0f)
    735c:	edd0 7a00 	vldr	s15, [r0]
    7360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7368:	f53f aebe 	bmi.w	70e8 <audioTickSynth+0xe8>
		if (note[v] > 127.0f)
    736c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    7370:	ed93 7a00 	vldr	s14, [r3]
    7374:	eddf 7a83 	vldr	s15, [pc, #524]	; 7584 <audioTickSynth+0x584>
    7378:	eeb4 7ae7 	vcmpe.f32	s14, s15
    737c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7380:	dd01      	ble.n	7386 <audioTickSynth+0x386>
			note[v] = 127.0f;
    7382:	edc3 7a00 	vstr	s15, [r3]
		if (isnan(note[v]))
    7386:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    738a:	edd3 7a00 	vldr	s15, [r3]
    738e:	eef4 7a67 	vcmp.f32	s15, s15
    7392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7396:	f5bf aeaa 	bvs.w	70ee <audioTickSynth+0xee>
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    739a:	4d6e      	ldr	r5, [pc, #440]	; (7554 <audioTickSynth+0x554>)
    739c:	686b      	ldr	r3, [r5, #4]
    739e:	1a5b      	subs	r3, r3, r1
    73a0:	4a79      	ldr	r2, [pc, #484]	; (7588 <audioTickSynth+0x588>)
    73a2:	6013      	str	r3, [r2, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    73a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
		envelope_tick(v);
    73a8:	4620      	mov	r0, r4
    73aa:	f7fd fff9 	bl	53a0 <envelope_tick>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    73ae:	686b      	ldr	r3, [r5, #4]
    73b0:	eba3 0308 	sub.w	r3, r3, r8
    73b4:	4a75      	ldr	r2, [pc, #468]	; (758c <audioTickSynth+0x58c>)
    73b6:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    73b8:	f8d5 8004 	ldr.w	r8, [r5, #4]
		lfo_tick(v);
    73bc:	4620      	mov	r0, r4
    73be:	f7fe f81f 	bl	5400 <lfo_tick>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    73c2:	686b      	ldr	r3, [r5, #4]
    73c4:	eba3 0308 	sub.w	r3, r3, r8
    73c8:	4a71      	ldr	r2, [pc, #452]	; (7590 <audioTickSynth+0x590>)
    73ca:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    73cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
		oscillator_tick(note[v], v);
    73d0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    73d4:	4620      	mov	r0, r4
    73d6:	ed93 0a00 	vldr	s0, [r3]
    73da:	f7fd fa41 	bl	4860 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    73de:	686b      	ldr	r3, [r5, #4]
    73e0:	eba3 0308 	sub.w	r3, r3, r8
    73e4:	4a6b      	ldr	r2, [pc, #428]	; (7594 <audioTickSynth+0x594>)
    73e6:	6013      	str	r3, [r2, #0]
		uint32_t tempCountNoise = DWT->CYCCNT;
    73e8:	686d      	ldr	r5, [r5, #4]
		if (noiseOn)
    73ea:	4b6b      	ldr	r3, [pc, #428]	; (7598 <audioTickSynth+0x598>)
    73ec:	781b      	ldrb	r3, [r3, #0]
    73ee:	2b00      	cmp	r3, #0
    73f0:	f47f ae81 	bne.w	70f6 <audioTickSynth+0xf6>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    73f4:	4b57      	ldr	r3, [pc, #348]	; (7554 <audioTickSynth+0x554>)
    73f6:	685b      	ldr	r3, [r3, #4]
    73f8:	1b5b      	subs	r3, r3, r5
    73fa:	4a68      	ldr	r2, [pc, #416]	; (759c <audioTickSynth+0x59c>)
    73fc:	6013      	str	r3, [r2, #0]
		float filterSamps[2] = {0.0f, 0.0f};
    73fe:	2300      	movs	r3, #0
    7400:	613b      	str	r3, [r7, #16]
    7402:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < oscToTick; i++)
    7404:	2100      	movs	r1, #0
    7406:	e693      	b.n	7130 <audioTickSynth+0x130>
			for (int i = 0; i < NUM_EFFECT; i++)
    7408:	3501      	adds	r5, #1
    740a:	2d03      	cmp	r5, #3
    740c:	f73f af57 	bgt.w	72be <audioTickSynth+0x2be>
				if (effectsActive[i])
    7410:	4b63      	ldr	r3, [pc, #396]	; (75a0 <audioTickSynth+0x5a0>)
    7412:	5d5b      	ldrb	r3, [r3, r5]
    7414:	2b00      	cmp	r3, #0
    7416:	d0f7      	beq.n	7408 <audioTickSynth+0x408>
					float dry = sample;
    7418:	ed97 9a03 	vldr	s18, [r7, #12]
					sample = effectTick[i](sample, i, v); //run the effect
    741c:	4b61      	ldr	r3, [pc, #388]	; (75a4 <audioTickSynth+0x5a4>)
    741e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    7422:	4621      	mov	r1, r4
    7424:	4628      	mov	r0, r5
    7426:	eeb0 0a49 	vmov.f32	s0, s18
    742a:	4798      	blx	r3
    742c:	ed87 0a03 	vstr	s0, [r7, #12]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    7430:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    7434:	4a5c      	ldr	r2, [pc, #368]	; (75a8 <audioTickSynth+0x5a8>)
    7436:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    743a:	ed92 7a00 	vldr	s14, [r2]
    743e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7442:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7446:	ee67 7a89 	vmul.f32	s15, s15, s18
    744a:	ee20 0a07 	vmul.f32	s0, s0, s14
    744e:	ee77 7a80 	vadd.f32	s15, s15, s0
    7452:	edc7 7a03 	vstr	s15, [r7, #12]
					sample *= fxPostGain[i][v];
    7456:	4a55      	ldr	r2, [pc, #340]	; (75ac <audioTickSynth+0x5ac>)
    7458:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    745c:	ed93 7a00 	vldr	s14, [r3]
    7460:	ee67 7a87 	vmul.f32	s15, s15, s14
    7464:	edc7 7a03 	vstr	s15, [r7, #12]
    7468:	e7ce      	b.n	7408 <audioTickSynth+0x408>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    746a:	4b3a      	ldr	r3, [pc, #232]	; (7554 <audioTickSynth+0x554>)
    746c:	685b      	ldr	r3, [r3, #4]
    746e:	eba3 030b 	sub.w	r3, r3, fp
    7472:	4a4f      	ldr	r2, [pc, #316]	; (75b0 <audioTickSynth+0x5b0>)
    7474:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    7476:	eddf 7a4f 	vldr	s15, [pc, #316]	; 75b4 <audioTickSynth+0x5b4>
    747a:	ee68 0a27 	vmul.f32	s1, s16, s15
    747e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 75b8 <audioTickSynth+0x5b8>
    7482:	ed9f 1a40 	vldr	s2, [pc, #256]	; 7584 <audioTickSynth+0x584>
    7486:	ee70 0a80 	vadd.f32	s1, s1, s0
    748a:	f000 fd21 	bl	7ed0 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    748e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    7492:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    7496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    749a:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    749e:	1c59      	adds	r1, r3, #1
    74a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    74a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    74a8:	ee37 7a67 	vsub.f32	s14, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    74ac:	4a43      	ldr	r2, [pc, #268]	; (75bc <audioTickSynth+0x5bc>)
    74ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    74b2:	edd3 6a00 	vldr	s13, [r3]
    74b6:	ee66 6a87 	vmul.f32	s13, s13, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    74ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    74be:	ed92 7a00 	vldr	s14, [r2]
    74c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    74c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (pedalControlsMaster)
    74ca:	4b3d      	ldr	r3, [pc, #244]	; (75c0 <audioTickSynth+0x5c0>)
    74cc:	781b      	ldrb	r3, [r3, #0]
    74ce:	b10b      	cbz	r3, 74d4 <audioTickSynth+0x4d4>
		masterSample *= outVol;
    74d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	if (masterSample  > .999999f)
    74d4:	eddf 7a3b 	vldr	s15, [pc, #236]	; 75c4 <audioTickSynth+0x5c4>
    74d8:	eef4 8ae7 	vcmpe.f32	s17, s15
    74dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74e0:	dd1a      	ble.n	7518 <audioTickSynth+0x518>
		sampleClippedCountdown = 65535;
    74e2:	4b39      	ldr	r3, [pc, #228]	; (75c8 <audioTickSynth+0x5c8>)
    74e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    74e8:	801a      	strh	r2, [r3, #0]
		masterSample  = .999999f;
    74ea:	eef0 8a67 	vmov.f32	s17, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    74ee:	4b19      	ldr	r3, [pc, #100]	; (7554 <audioTickSynth+0x554>)
    74f0:	685b      	ldr	r3, [r3, #4]
    74f2:	687a      	ldr	r2, [r7, #4]
    74f4:	1a9b      	subs	r3, r3, r2
    74f6:	4a35      	ldr	r2, [pc, #212]	; (75cc <audioTickSynth+0x5cc>)
    74f8:	6013      	str	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
    74fa:	4b35      	ldr	r3, [pc, #212]	; (75d0 <audioTickSynth+0x5d0>)
    74fc:	edd3 7a00 	vldr	s15, [r3]
    7500:	ee67 7aa8 	vmul.f32	s15, s15, s17
}
    7504:	ed9f 0a33 	vldr	s0, [pc, #204]	; 75d4 <audioTickSynth+0x5d4>
    7508:	ee27 0a80 	vmul.f32	s0, s15, s0
    750c:	371c      	adds	r7, #28
    750e:	46bd      	mov	sp, r7
    7510:	ecbd 8b04 	vpop	{d8-d9}
    7514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (masterSample < -.999999f)
    7518:	eddf 7a2f 	vldr	s15, [pc, #188]	; 75d8 <audioTickSynth+0x5d8>
    751c:	eef4 8ae7 	vcmpe.f32	s17, s15
    7520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7524:	d506      	bpl.n	7534 <audioTickSynth+0x534>
		sampleClippedCountdown = 65535;
    7526:	4b28      	ldr	r3, [pc, #160]	; (75c8 <audioTickSynth+0x5c8>)
    7528:	f64f 72ff 	movw	r2, #65535	; 0xffff
    752c:	801a      	strh	r2, [r3, #0]
		masterSample = -.9999999f;
    752e:	eddf 8a2b 	vldr	s17, [pc, #172]	; 75dc <audioTickSynth+0x5dc>
    7532:	e7dc      	b.n	74ee <audioTickSynth+0x4ee>
		if (sampleClippedCountdown > 0)
    7534:	4b24      	ldr	r3, [pc, #144]	; (75c8 <audioTickSynth+0x5c8>)
    7536:	881b      	ldrh	r3, [r3, #0]
    7538:	b29b      	uxth	r3, r3
    753a:	2b00      	cmp	r3, #0
    753c:	d0d7      	beq.n	74ee <audioTickSynth+0x4ee>
			sampleClippedCountdown--;
    753e:	4a22      	ldr	r2, [pc, #136]	; (75c8 <audioTickSynth+0x5c8>)
    7540:	8813      	ldrh	r3, [r2, #0]
    7542:	b29b      	uxth	r3, r3
    7544:	3b01      	subs	r3, #1
    7546:	b29b      	uxth	r3, r3
    7548:	8013      	strh	r3, [r2, #0]
    754a:	e7d0      	b.n	74ee <audioTickSynth+0x4ee>
    754c:	2001cd94 	.word	0x2001cd94
    7550:	2001cd30 	.word	0x2001cd30
    7554:	e0001000 	.word	0xe0001000
    7558:	2001d0e8 	.word	0x2001d0e8
    755c:	20016091 	.word	0x20016091
    7560:	2001c704 	.word	0x2001c704
    7564:	2001c9b0 	.word	0x2001c9b0
    7568:	200004ac 	.word	0x200004ac
    756c:	200004b1 	.word	0x200004b1
    7570:	20013dec 	.word	0x20013dec
    7574:	20013df4 	.word	0x20013df4
    7578:	20018a4c 	.word	0x20018a4c
    757c:	20018a48 	.word	0x20018a48
    7580:	2001cf80 	.word	0x2001cf80
    7584:	42fe0000 	.word	0x42fe0000
    7588:	2001d0d8 	.word	0x2001d0d8
    758c:	2001d0d0 	.word	0x2001d0d0
    7590:	2001d0dc 	.word	0x2001d0dc
    7594:	2001d0ec 	.word	0x2001d0ec
    7598:	2001cd0c 	.word	0x2001cd0c
    759c:	2001d0e4 	.word	0x2001d0e4
    75a0:	20013f64 	.word	0x20013f64
    75a4:	2001c934 	.word	0x2001c934
    75a8:	2001c9d8 	.word	0x2001c9d8
    75ac:	2001c9f8 	.word	0x2001c9f8
    75b0:	2001d0f0 	.word	0x2001d0f0
    75b4:	42a00000 	.word	0x42a00000
    75b8:	423c0000 	.word	0x423c0000
    75bc:	2000051c 	.word	0x2000051c
    75c0:	20019b74 	.word	0x20019b74
    75c4:	3f7fffef 	.word	0x3f7fffef
    75c8:	20005342 	.word	0x20005342
    75cc:	2001d0f8 	.word	0x2001d0f8
    75d0:	20000724 	.word	0x20000724
    75d4:	3f7ae148 	.word	0x3f7ae148
    75d8:	bf7fffef 	.word	0xbf7fffef
    75dc:	bf7ffffe 	.word	0xbf7ffffe

000075e0 <audioFrameSynth>:
{
    75e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75e2:	ed2d 8b02 	vpush	{d8}
    75e6:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    75e8:	4b98      	ldr	r3, [pc, #608]	; (784c <audioFrameSynth+0x26c>)
    75ea:	685e      	ldr	r6, [r3, #4]
	if (resetStringInputs)
    75ec:	4b98      	ldr	r3, [pc, #608]	; (7850 <audioFrameSynth+0x270>)
    75ee:	781b      	ldrb	r3, [r3, #0]
    75f0:	b9db      	cbnz	r3, 762a <audioFrameSynth+0x4a>
	if (newPluck)
    75f2:	4b98      	ldr	r3, [pc, #608]	; (7854 <audioFrameSynth+0x274>)
    75f4:	681b      	ldr	r3, [r3, #0]
    75f6:	2b00      	cmp	r3, #0
    75f8:	f040 80d2 	bne.w	77a0 <audioFrameSynth+0x1c0>
		for (int i = 0; i < numStringsThisBoard; i++)
    75fc:	2400      	movs	r4, #0
    75fe:	e0e7      	b.n	77d0 <audioFrameSynth+0x1f0>
				tADSRT_clear(&envs[v][i]);
    7600:	eb07 0044 	add.w	r0, r7, r4, lsl #1
    7604:	4b94      	ldr	r3, [pc, #592]	; (7858 <audioFrameSynth+0x278>)
    7606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    760a:	f000 fc41 	bl	7e90 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    760e:	4b93      	ldr	r3, [pc, #588]	; (785c <audioFrameSynth+0x27c>)
    7610:	2200      	movs	r2, #0
    7612:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    7616:	3401      	adds	r4, #1
    7618:	2c03      	cmp	r4, #3
    761a:	ddf1      	ble.n	7600 <audioFrameSynth+0x20>
		for (int i = 0; i < numStringsThisBoard; i++)
    761c:	3701      	adds	r7, #1
    761e:	4b90      	ldr	r3, [pc, #576]	; (7860 <audioFrameSynth+0x280>)
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	42bb      	cmp	r3, r7
    7624:	dd03      	ble.n	762e <audioFrameSynth+0x4e>
			for (int v = 0; v < NUM_ENV; v++)
    7626:	2400      	movs	r4, #0
    7628:	e7f6      	b.n	7618 <audioFrameSynth+0x38>
		for (int i = 0; i < numStringsThisBoard; i++)
    762a:	2700      	movs	r7, #0
    762c:	e7f7      	b.n	761e <audioFrameSynth+0x3e>
		resetStringInputs = 0;
    762e:	4b88      	ldr	r3, [pc, #544]	; (7850 <audioFrameSynth+0x270>)
    7630:	2200      	movs	r2, #0
    7632:	701a      	strb	r2, [r3, #0]
    7634:	e7dd      	b.n	75f2 <audioFrameSynth+0x12>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7636:	4b8b      	ldr	r3, [pc, #556]	; (7864 <audioFrameSynth+0x284>)
    7638:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    763c:	b29b      	uxth	r3, r3
    763e:	ee08 3a10 	vmov	s16, r3
    7642:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7646:	eddf 7a88 	vldr	s15, [pc, #544]	; 7868 <audioFrameSynth+0x288>
    764a:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    764e:	4b87      	ldr	r3, [pc, #540]	; (786c <audioFrameSynth+0x28c>)
    7650:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7654:	4a86      	ldr	r2, [pc, #536]	; (7870 <audioFrameSynth+0x290>)
    7656:	6812      	ldr	r2, [r2, #0]
    7658:	601a      	str	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    765a:	2700      	movs	r7, #0
    765c:	e00c      	b.n	7678 <audioFrameSynth+0x98>
						if (useVelocity == 0) envVel = 1.f;
    765e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
						tADSRT_on(&envs[v][i], envVel);
    7662:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    7666:	487c      	ldr	r0, [pc, #496]	; (7858 <audioFrameSynth+0x278>)
    7668:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    766c:	f000 fccc 	bl	8008 <__tADSRT_on_veneer>
						voiceSounding = 1;
    7670:	4b80      	ldr	r3, [pc, #512]	; (7874 <audioFrameSynth+0x294>)
    7672:	2201      	movs	r2, #1
    7674:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    7676:	3701      	adds	r7, #1
    7678:	2f03      	cmp	r7, #3
    767a:	dc19      	bgt.n	76b0 <audioFrameSynth+0xd0>
					if (envOn[v])
    767c:	4b7e      	ldr	r3, [pc, #504]	; (7878 <audioFrameSynth+0x298>)
    767e:	5ddb      	ldrb	r3, [r3, r7]
    7680:	2b00      	cmp	r3, #0
    7682:	d0f8      	beq.n	7676 <audioFrameSynth+0x96>
						param* envParams = &params[ENVELOPE_PARAMS_OFFSET + v * EnvelopeParamsNum];
    7684:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    7688:	005b      	lsls	r3, r3, #1
    768a:	336c      	adds	r3, #108	; 0x6c
    768c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    7690:	4a7a      	ldr	r2, [pc, #488]	; (787c <audioFrameSynth+0x29c>)
    7692:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float useVelocity = envParams[EnvelopeVelocity].realVal[i];
    7696:	1ca2      	adds	r2, r4, #2
    7698:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    769c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
						if (useVelocity == 0) envVel = 1.f;
    76a0:	eef5 7a40 	vcmp.f32	s15, #0.0
    76a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76a8:	d0d9      	beq.n	765e <audioFrameSynth+0x7e>
						float envVel = amplitz;
    76aa:	eeb0 0a48 	vmov.f32	s0, s16
    76ae:	e7d8      	b.n	7662 <audioFrameSynth+0x82>
				for (int v = 0; v < NUM_LFOS; v++)
    76b0:	2700      	movs	r7, #0
    76b2:	e000      	b.n	76b6 <audioFrameSynth+0xd6>
    76b4:	3701      	adds	r7, #1
    76b6:	2f03      	cmp	r7, #3
    76b8:	dc21      	bgt.n	76fe <audioFrameSynth+0x11e>
					if (lfoOn[v])
    76ba:	4b71      	ldr	r3, [pc, #452]	; (7880 <audioFrameSynth+0x2a0>)
    76bc:	5ddb      	ldrb	r3, [r3, r7]
    76be:	2b00      	cmp	r3, #0
    76c0:	d0f8      	beq.n	76b4 <audioFrameSynth+0xd4>
						param* lfoParams = &params[LFO_PARAMS_OFFSET + v * LFOParamsNum];
    76c2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    76c6:	3384      	adds	r3, #132	; 0x84
    76c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    76cc:	4a6b      	ldr	r2, [pc, #428]	; (787c <audioFrameSynth+0x29c>)
    76ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float noteOnSync = lfoParams[LFOSync].realVal[i];
    76d2:	1ca2      	adds	r2, r4, #2
    76d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    76d8:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
						if (noteOnSync > 0.5f)
    76dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    76e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    76e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76e8:	dde4      	ble.n	76b4 <audioFrameSynth+0xd4>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    76ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    76ec:	1ca1      	adds	r1, r4, #2
    76ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    76f2:	4621      	mov	r1, r4
    76f4:	4638      	mov	r0, r7
    76f6:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    76fa:	4790      	blx	r2
    76fc:	e7da      	b.n	76b4 <audioFrameSynth+0xd4>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    76fe:	4b61      	ldr	r3, [pc, #388]	; (7884 <audioFrameSynth+0x2a4>)
    7700:	781a      	ldrb	r2, [r3, #0]
    7702:	1c51      	adds	r1, r2, #1
    7704:	7019      	strb	r1, [r3, #0]
    7706:	4b60      	ldr	r3, [pc, #384]	; (7888 <audioFrameSynth+0x2a8>)
    7708:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    770c:	edd3 7a00 	vldr	s15, [r3]
    7710:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    7714:	ee67 7a87 	vmul.f32	s15, s15, s14
    7718:	ee77 7a87 	vadd.f32	s15, s15, s14
    771c:	4b5b      	ldr	r3, [pc, #364]	; (788c <audioFrameSynth+0x2ac>)
    771e:	f104 0226 	add.w	r2, r4, #38	; 0x26
    7722:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7726:	edc2 7a00 	vstr	s15, [r2]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    772a:	f104 0224 	add.w	r2, r4, #36	; 0x24
    772e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7732:	ed83 8a00 	vstr	s16, [r3]
			previousStringInputs[i] = stringInputs[i];
    7736:	4b4b      	ldr	r3, [pc, #300]	; (7864 <audioFrameSynth+0x284>)
    7738:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    773c:	b29b      	uxth	r3, r3
    773e:	4a47      	ldr	r2, [pc, #284]	; (785c <audioFrameSynth+0x27c>)
    7740:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7744:	3401      	adds	r4, #1
    7746:	4b46      	ldr	r3, [pc, #280]	; (7860 <audioFrameSynth+0x280>)
    7748:	781b      	ldrb	r3, [r3, #0]
    774a:	42a3      	cmp	r3, r4
    774c:	dd2a      	ble.n	77a4 <audioFrameSynth+0x1c4>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    774e:	4b43      	ldr	r3, [pc, #268]	; (785c <audioFrameSynth+0x27c>)
    7750:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7754:	b29b      	uxth	r3, r3
    7756:	b933      	cbnz	r3, 7766 <audioFrameSynth+0x186>
    7758:	4b42      	ldr	r3, [pc, #264]	; (7864 <audioFrameSynth+0x284>)
    775a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    775e:	b29b      	uxth	r3, r3
    7760:	2b00      	cmp	r3, #0
    7762:	f47f af68 	bne.w	7636 <audioFrameSynth+0x56>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    7766:	4b3d      	ldr	r3, [pc, #244]	; (785c <audioFrameSynth+0x27c>)
    7768:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    776c:	b29b      	uxth	r3, r3
    776e:	2b00      	cmp	r3, #0
    7770:	d0e1      	beq.n	7736 <audioFrameSynth+0x156>
    7772:	4b3c      	ldr	r3, [pc, #240]	; (7864 <audioFrameSynth+0x284>)
    7774:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7778:	b29b      	uxth	r3, r3
    777a:	2b00      	cmp	r3, #0
    777c:	d1db      	bne.n	7736 <audioFrameSynth+0x156>
				for (int v = 0; v < NUM_ENV; v++)
    777e:	2700      	movs	r7, #0
    7780:	e000      	b.n	7784 <audioFrameSynth+0x1a4>
    7782:	3701      	adds	r7, #1
    7784:	2f03      	cmp	r7, #3
    7786:	dcd6      	bgt.n	7736 <audioFrameSynth+0x156>
					if (envOn[v])
    7788:	4b3b      	ldr	r3, [pc, #236]	; (7878 <audioFrameSynth+0x298>)
    778a:	5ddb      	ldrb	r3, [r3, r7]
    778c:	2b00      	cmp	r3, #0
    778e:	d0f8      	beq.n	7782 <audioFrameSynth+0x1a2>
						tADSRT_off(&envs[v][i]);
    7790:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    7794:	4830      	ldr	r0, [pc, #192]	; (7858 <audioFrameSynth+0x278>)
    7796:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    779a:	f000 faa5 	bl	7ce8 <__tADSRT_off_veneer>
    779e:	e7f0      	b.n	7782 <audioFrameSynth+0x1a2>
		for (int i = 0; i < numStringsThisBoard; i++)
    77a0:	2400      	movs	r4, #0
    77a2:	e7d0      	b.n	7746 <audioFrameSynth+0x166>
		newPluck = 0;
    77a4:	4b2b      	ldr	r3, [pc, #172]	; (7854 <audioFrameSynth+0x274>)
    77a6:	2200      	movs	r2, #0
    77a8:	601a      	str	r2, [r3, #0]
    77aa:	e727      	b.n	75fc <audioFrameSynth+0x1c>
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    77ac:	f7ff fc28 	bl	7000 <audioTickSynth>
    77b0:	eddf 7a37 	vldr	s15, [pc, #220]	; 7890 <audioFrameSynth+0x2b0>
    77b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    77b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    77bc:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    77c0:	192a      	adds	r2, r5, r4
    77c2:	4934      	ldr	r1, [pc, #208]	; (7894 <audioFrameSynth+0x2b4>)
    77c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    77c8:	3201      	adds	r2, #1
    77ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    77ce:	3402      	adds	r4, #2
    77d0:	2c7f      	cmp	r4, #127	; 0x7f
    77d2:	ddeb      	ble.n	77ac <audioFrameSynth+0x1cc>
	if (switchStrings)
    77d4:	4b30      	ldr	r3, [pc, #192]	; (7898 <audioFrameSynth+0x2b8>)
    77d6:	681b      	ldr	r3, [r3, #0]
    77d8:	bb6b      	cbnz	r3, 7836 <audioFrameSynth+0x256>
	switchStrings = 0;
    77da:	4b2f      	ldr	r3, [pc, #188]	; (7898 <audioFrameSynth+0x2b8>)
    77dc:	2200      	movs	r2, #0
    77de:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    77e0:	4b1a      	ldr	r3, [pc, #104]	; (784c <audioFrameSynth+0x26c>)
    77e2:	685b      	ldr	r3, [r3, #4]
    77e4:	1b9b      	subs	r3, r3, r6
    77e6:	4a2d      	ldr	r2, [pc, #180]	; (789c <audioFrameSynth+0x2bc>)
    77e8:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    77ea:	ee07 3a90 	vmov	s15, r3
    77ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    77f2:	4b2b      	ldr	r3, [pc, #172]	; (78a0 <audioFrameSynth+0x2c0>)
    77f4:	ed93 7a00 	vldr	s14, [r3]
    77f8:	ee67 7a87 	vmul.f32	s15, s15, s14
    77fc:	4b29      	ldr	r3, [pc, #164]	; (78a4 <audioFrameSynth+0x2c4>)
    77fe:	edc3 7a00 	vstr	s15, [r3]
	if (frameLoadPercentage > .99f)
    7802:	ed9f 7a29 	vldr	s14, [pc, #164]	; 78a8 <audioFrameSynth+0x2c8>
    7806:	eef4 7ac7 	vcmpe.f32	s15, s14
    780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    780e:	dd0f      	ble.n	7830 <audioFrameSynth+0x250>
		frameLoadOverCount++;
    7810:	4a26      	ldr	r2, [pc, #152]	; (78ac <audioFrameSynth+0x2cc>)
    7812:	6813      	ldr	r3, [r2, #0]
    7814:	3301      	adds	r3, #1
    7816:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    7818:	2b03      	cmp	r3, #3
    781a:	d909      	bls.n	7830 <audioFrameSynth+0x250>
			if (overSampled == 1)
    781c:	4b24      	ldr	r3, [pc, #144]	; (78b0 <audioFrameSynth+0x2d0>)
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	2b01      	cmp	r3, #1
    7822:	d00d      	beq.n	7840 <audioFrameSynth+0x260>
			else if (oscToTick > 0)
    7824:	4b23      	ldr	r3, [pc, #140]	; (78b4 <audioFrameSynth+0x2d4>)
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	b113      	cbz	r3, 7830 <audioFrameSynth+0x250>
				oscToTick--;
    782a:	3b01      	subs	r3, #1
    782c:	4a21      	ldr	r2, [pc, #132]	; (78b4 <audioFrameSynth+0x2d4>)
    782e:	7013      	strb	r3, [r2, #0]
}
    7830:	ecbd 8b02 	vpop	{d8}
    7834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switchStringModel(switchStrings);
    7836:	4b18      	ldr	r3, [pc, #96]	; (7898 <audioFrameSynth+0x2b8>)
    7838:	6818      	ldr	r0, [r3, #0]
    783a:	f7f9 fcd1 	bl	11e0 <switchStringModel>
    783e:	e7cc      	b.n	77da <audioFrameSynth+0x1fa>
				overSampled = 0;
    7840:	2000      	movs	r0, #0
    7842:	4b1b      	ldr	r3, [pc, #108]	; (78b0 <audioFrameSynth+0x2d0>)
    7844:	6018      	str	r0, [r3, #0]
				changeOversampling(overSampled);
    7846:	f000 fc3b 	bl	80c0 <__changeOversampling_veneer>
    784a:	e7f1      	b.n	7830 <audioFrameSynth+0x250>
    784c:	e0001000 	.word	0xe0001000
    7850:	20005340 	.word	0x20005340
    7854:	20004eb8 	.word	0x20004eb8
    7858:	2001c948 	.word	0x2001c948
    785c:	20004f28 	.word	0x20004f28
    7860:	200004b1 	.word	0x200004b1
    7864:	20013dd4 	.word	0x20013dd4
    7868:	37800080 	.word	0x37800080
    786c:	20013df4 	.word	0x20013df4
    7870:	20004ec4 	.word	0x20004ec4
    7874:	2001d118 	.word	0x2001d118
    7878:	2001c944 	.word	0x2001c944
    787c:	20018a64 	.word	0x20018a64
    7880:	2001cac8 	.word	0x2001cac8
    7884:	2001ce90 	.word	0x2001ce90
    7888:	20019ba8 	.word	0x20019ba8
    788c:	2001cf80 	.word	0x2001cf80
    7890:	4b000000 	.word	0x4b000000
    7894:	30000000 	.word	0x30000000
    7898:	20013e0c 	.word	0x20013e0c
    789c:	20013e10 	.word	0x20013e10
    78a0:	200004a4 	.word	0x200004a4
    78a4:	20004de4 	.word	0x20004de4
    78a8:	3f7d70a4 	.word	0x3f7d70a4
    78ac:	20004de0 	.word	0x20004de0
    78b0:	20000750 	.word	0x20000750
    78b4:	2000074c 	.word	0x2000074c
	...

000078c0 <audioInitVocal>:

tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength = 22;

void __ATTR_ITCMRAM audioInitVocal()
{
    78c0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    78c2:	2400      	movs	r4, #0
    78c4:	e008      	b.n	78d8 <audioInitVocal+0x18>
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    78c6:	4b06      	ldr	r3, [pc, #24]	; (78e0 <audioInitVocal+0x20>)
    78c8:	2241      	movs	r2, #65	; 0x41
    78ca:	2116      	movs	r1, #22
    78cc:	4805      	ldr	r0, [pc, #20]	; (78e4 <audioInitVocal+0x24>)
    78ce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    78d2:	f000 fc35 	bl	8140 <__tVoc_init_veneer>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    78d6:	3401      	adds	r4, #1
    78d8:	2c01      	cmp	r4, #1
    78da:	ddf4      	ble.n	78c6 <audioInitVocal+0x6>
	}
}
    78dc:	bd10      	pop	{r4, pc}
    78de:	bf00      	nop
    78e0:	20004e5c 	.word	0x20004e5c
    78e4:	2001d13c 	.word	0x2001d13c
    78e8:	f3af 8000 	nop.w
    78ec:	f3af 8000 	nop.w
    78f0:	f3af 8000 	nop.w
    78f4:	f3af 8000 	nop.w
    78f8:	f3af 8000 	nop.w
    78fc:	f3af 8000 	nop.w

00007900 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    7900:	4770      	bx	lr
    7902:	bf00      	nop
    7904:	f3af 8000 	nop.w
    7908:	f3af 8000 	nop.w
    790c:	f3af 8000 	nop.w
    7910:	f3af 8000 	nop.w
    7914:	f3af 8000 	nop.w
    7918:	f3af 8000 	nop.w
    791c:	f3af 8000 	nop.w

00007920 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    7920:	b570      	push	{r4, r5, r6, lr}
    7922:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
    7926:	2400      	movs	r4, #0
    7928:	e00a      	b.n	7940 <audioTickVocal+0x20>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    792a:	00a5      	lsls	r5, r4, #2
    792c:	4850      	ldr	r0, [pc, #320]	; (7a70 <audioTickVocal+0x150>)
    792e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7932:	f000 fa79 	bl	7e28 <__tExpSmooth_tick_veneer>
    7936:	4b4f      	ldr	r3, [pc, #316]	; (7a74 <audioTickVocal+0x154>)
    7938:	442b      	add	r3, r5
    793a:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    793e:	3401      	adds	r4, #1
    7940:	2c0b      	cmp	r4, #11
    7942:	ddf2      	ble.n	792a <audioTickVocal+0xa>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7944:	484c      	ldr	r0, [pc, #304]	; (7a78 <audioTickVocal+0x158>)
    7946:	f000 fa6f 	bl	7e28 <__tExpSmooth_tick_veneer>
    794a:	eeb0 9a40 	vmov.f32	s18, s0

	int newTractLength = knobScaled[0] * 64 + 1;
    794e:	4b49      	ldr	r3, [pc, #292]	; (7a74 <audioTickVocal+0x154>)
    7950:	edd3 7a00 	vldr	s15, [r3]
    7954:	ed9f 7a49 	vldr	s14, [pc, #292]	; 7a7c <audioTickVocal+0x15c>
    7958:	ee67 7a87 	vmul.f32	s15, s15, s14
    795c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7960:	ee77 7a87 	vadd.f32	s15, s15, s14
    7964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7968:	ee17 4a90 	vmov	r4, s15
	if (newTractLength != prevTractLength)
    796c:	4b44      	ldr	r3, [pc, #272]	; (7a80 <audioTickVocal+0x160>)
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	42a3      	cmp	r3, r4
    7972:	d114      	bne.n	799e <audioTickVocal+0x7e>
	{
		tVoc_set_tractLength(&vocal[0], newTractLength);
	}

	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    7974:	4b3f      	ldr	r3, [pc, #252]	; (7a74 <audioTickVocal+0x154>)
    7976:	ed93 7a01 	vldr	s14, [r3, #4]
    797a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    797e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7986:	bfcc      	ite	gt
    7988:	2101      	movgt	r1, #1
    798a:	2100      	movle	r1, #0
    798c:	483d      	ldr	r0, [pc, #244]	; (7a84 <audioTickVocal+0x164>)
    798e:	f000 fae3 	bl	7f58 <__tVoc_setDoubleComputeFlag_veneer>

	prevTractLength = newTractLength;
    7992:	4b3b      	ldr	r3, [pc, #236]	; (7a80 <audioTickVocal+0x160>)
    7994:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    7996:	2400      	movs	r4, #0
	float tempSamp = 0.0f;
    7998:	eddf 8a3b 	vldr	s17, [pc, #236]	; 7a88 <audioTickVocal+0x168>
	for (int i = 0; i < numStringsThisBoard; i++)
    799c:	e02f      	b.n	79fe <audioTickVocal+0xde>
		tVoc_set_tractLength(&vocal[0], newTractLength);
    799e:	ee17 1a90 	vmov	r1, s15
    79a2:	4838      	ldr	r0, [pc, #224]	; (7a84 <audioTickVocal+0x164>)
    79a4:	f000 fa44 	bl	7e30 <__tVoc_set_tractLength_veneer>
    79a8:	e7e4      	b.n	7974 <audioTickVocal+0x54>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    79aa:	00a6      	lsls	r6, r4, #2
    79ac:	4d35      	ldr	r5, [pc, #212]	; (7a84 <audioTickVocal+0x164>)
    79ae:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    79b2:	4628      	mov	r0, r5
    79b4:	f000 f988 	bl	7cc8 <__tVoc_tick_veneer>
    79b8:	eeb0 8a40 	vmov.f32	s16, s0
    79bc:	4833      	ldr	r0, [pc, #204]	; (7a8c <audioTickVocal+0x16c>)
    79be:	4430      	add	r0, r6
    79c0:	f000 f9f2 	bl	7da8 <__tADSRT_tickNoInterp_veneer>
    79c4:	ee28 8a00 	vmul.f32	s16, s16, s0
    79c8:	ee78 8a88 	vadd.f32	s17, s17, s16
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    79cc:	4b30      	ldr	r3, [pc, #192]	; (7a90 <audioTickVocal+0x170>)
    79ce:	4433      	add	r3, r6
    79d0:	ed93 0a00 	vldr	s0, [r3]
    79d4:	4b2f      	ldr	r3, [pc, #188]	; (7a94 <audioTickVocal+0x174>)
    79d6:	4433      	add	r3, r6
    79d8:	edd3 7a00 	vldr	s15, [r3]
    79dc:	ee30 0a27 	vadd.f32	s0, s0, s15
    79e0:	f000 f9ea 	bl	7db8 <__mtof_veneer>
    79e4:	4b2c      	ldr	r3, [pc, #176]	; (7a98 <audioTickVocal+0x178>)
    79e6:	4433      	add	r3, r6
    79e8:	ed83 0a00 	vstr	s0, [r3]
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    79ec:	4628      	mov	r0, r5
    79ee:	f000 fa03 	bl	7df8 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    79f2:	eeb0 0a49 	vmov.f32	s0, s18
    79f6:	4628      	mov	r0, r5
    79f8:	f000 f9ea 	bl	7dd0 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    79fc:	3401      	adds	r4, #1
    79fe:	4b27      	ldr	r3, [pc, #156]	; (7a9c <audioTickVocal+0x17c>)
    7a00:	781b      	ldrb	r3, [r3, #0]
    7a02:	42a3      	cmp	r3, r4
    7a04:	dcd1      	bgt.n	79aa <audioTickVocal+0x8a>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    7a06:	eddf 7a26 	vldr	s15, [pc, #152]	; 7aa0 <audioTickVocal+0x180>
    7a0a:	ee69 0a27 	vmul.f32	s1, s18, s15
    7a0e:	ed9f 0a25 	vldr	s0, [pc, #148]	; 7aa4 <audioTickVocal+0x184>
    7a12:	ed9f 1a25 	vldr	s2, [pc, #148]	; 7aa8 <audioTickVocal+0x188>
    7a16:	ee70 0a80 	vadd.f32	s1, s1, s0
    7a1a:	f000 fa59 	bl	7ed0 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    7a1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    7a22:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    7a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7a2a:	ee30 0a67 	vsub.f32	s0, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    7a2e:	1c59      	adds	r1, r3, #1
    7a30:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    7a34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7a38:	ee77 7ac0 	vsub.f32	s15, s15, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    7a3c:	4a1b      	ldr	r2, [pc, #108]	; (7aac <audioTickVocal+0x18c>)
    7a3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7a42:	ed93 7a00 	vldr	s14, [r3]
    7a46:	ee27 7a27 	vmul.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    7a4a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7a4e:	edd2 7a00 	vldr	s15, [r2]
    7a52:	ee67 7a80 	vmul.f32	s15, s15, s0
    7a56:	ee77 7a87 	vadd.f32	s15, s15, s14
	tempSamp *= outVol;
    7a5a:	ee68 8aa7 	vmul.f32	s17, s17, s15
	tempSamp *= masterVolFromBrain;
    7a5e:	4b14      	ldr	r3, [pc, #80]	; (7ab0 <audioTickVocal+0x190>)
    7a60:	ed93 0a00 	vldr	s0, [r3]
	return tempSamp;
}
    7a64:	ee28 0a80 	vmul.f32	s0, s17, s0
    7a68:	ecbd 8b04 	vpop	{d8-d9}
    7a6c:	bd70      	pop	{r4, r5, r6, pc}
    7a6e:	bf00      	nop
    7a70:	20004e28 	.word	0x20004e28
    7a74:	20004df8 	.word	0x20004df8
    7a78:	20013e24 	.word	0x20013e24
    7a7c:	42800000 	.word	0x42800000
    7a80:	2000075c 	.word	0x2000075c
    7a84:	2001d13c 	.word	0x2001d13c
    7a88:	00000000 	.word	0x00000000
    7a8c:	20004dd4 	.word	0x20004dd4
    7a90:	20013dec 	.word	0x20013dec
    7a94:	20013df4 	.word	0x20013df4
    7a98:	20013da4 	.word	0x20013da4
    7a9c:	200004b1 	.word	0x200004b1
    7aa0:	42a00000 	.word	0x42a00000
    7aa4:	423c0000 	.word	0x423c0000
    7aa8:	42fe0000 	.word	0x42fe0000
    7aac:	2000051c 	.word	0x2000051c
    7ab0:	200004a8 	.word	0x200004a8
    7ab4:	f3af 8000 	nop.w
    7ab8:	f3af 8000 	nop.w
    7abc:	f3af 8000 	nop.w

00007ac0 <audioFrameVocal>:
{
    7ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ac4:	ed2d 8b02 	vpush	{d8}
    7ac8:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    7aca:	4b5f      	ldr	r3, [pc, #380]	; (7c48 <audioFrameVocal+0x188>)
    7acc:	685e      	ldr	r6, [r3, #4]
	if (newPluck)
    7ace:	4b5f      	ldr	r3, [pc, #380]	; (7c4c <audioFrameVocal+0x18c>)
    7ad0:	681b      	ldr	r3, [r3, #0]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d159      	bne.n	7b8a <audioFrameVocal+0xca>
		for (int i = 0; i < numStringsThisBoard; i++)
    7ad6:	f04f 0800 	mov.w	r8, #0
    7ada:	e07a      	b.n	7bd2 <audioFrameVocal+0x112>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7adc:	4b5c      	ldr	r3, [pc, #368]	; (7c50 <audioFrameVocal+0x190>)
    7ade:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7ae2:	b29b      	uxth	r3, r3
    7ae4:	ee08 3a10 	vmov	s16, r3
    7ae8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    7aec:	eddf 7a59 	vldr	s15, [pc, #356]	; 7c54 <audioFrameVocal+0x194>
    7af0:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    7af4:	4b58      	ldr	r3, [pc, #352]	; (7c58 <audioFrameVocal+0x198>)
    7af6:	edd3 7a00 	vldr	s15, [r3]
    7afa:	00a7      	lsls	r7, r4, #2
    7afc:	4b57      	ldr	r3, [pc, #348]	; (7c5c <audioFrameVocal+0x19c>)
    7afe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7b02:	edc3 7a00 	vstr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    7b06:	4b56      	ldr	r3, [pc, #344]	; (7c60 <audioFrameVocal+0x1a0>)
    7b08:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7b0c:	ed93 0a00 	vldr	s0, [r3]
    7b10:	ee37 0a80 	vadd.f32	s0, s15, s0
    7b14:	f000 f950 	bl	7db8 <__mtof_veneer>
    7b18:	4b52      	ldr	r3, [pc, #328]	; (7c64 <audioFrameVocal+0x1a4>)
    7b1a:	443b      	add	r3, r7
    7b1c:	ed83 0a00 	vstr	s0, [r3]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    7b20:	4b51      	ldr	r3, [pc, #324]	; (7c68 <audioFrameVocal+0x1a8>)
    7b22:	441f      	add	r7, r3
    7b24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7b28:	4638      	mov	r0, r7
    7b2a:	f000 f955 	bl	7dd8 <__tADSRT_setSustain_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
    7b2e:	eeb0 0a48 	vmov.f32	s0, s16
    7b32:	4638      	mov	r0, r7
    7b34:	f000 fa68 	bl	8008 <__tADSRT_on_veneer>
			previousStringInputs[i] = stringInputs[i];
    7b38:	4b45      	ldr	r3, [pc, #276]	; (7c50 <audioFrameVocal+0x190>)
    7b3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7b3e:	b29b      	uxth	r3, r3
    7b40:	4a4a      	ldr	r2, [pc, #296]	; (7c6c <audioFrameVocal+0x1ac>)
    7b42:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7b46:	3401      	adds	r4, #1
    7b48:	4b49      	ldr	r3, [pc, #292]	; (7c70 <audioFrameVocal+0x1b0>)
    7b4a:	781b      	ldrb	r3, [r3, #0]
    7b4c:	42a3      	cmp	r3, r4
    7b4e:	dd1e      	ble.n	7b8e <audioFrameVocal+0xce>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    7b50:	4b46      	ldr	r3, [pc, #280]	; (7c6c <audioFrameVocal+0x1ac>)
    7b52:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7b56:	b29b      	uxth	r3, r3
    7b58:	b92b      	cbnz	r3, 7b66 <audioFrameVocal+0xa6>
    7b5a:	4b3d      	ldr	r3, [pc, #244]	; (7c50 <audioFrameVocal+0x190>)
    7b5c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7b60:	b29b      	uxth	r3, r3
    7b62:	2b00      	cmp	r3, #0
    7b64:	d1ba      	bne.n	7adc <audioFrameVocal+0x1c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    7b66:	4b41      	ldr	r3, [pc, #260]	; (7c6c <audioFrameVocal+0x1ac>)
    7b68:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7b6c:	b29b      	uxth	r3, r3
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d0e2      	beq.n	7b38 <audioFrameVocal+0x78>
    7b72:	4b37      	ldr	r3, [pc, #220]	; (7c50 <audioFrameVocal+0x190>)
    7b74:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    7b78:	b29b      	uxth	r3, r3
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d1dc      	bne.n	7b38 <audioFrameVocal+0x78>
				tADSRT_off(&fenvelopes[i]);
    7b7e:	483a      	ldr	r0, [pc, #232]	; (7c68 <audioFrameVocal+0x1a8>)
    7b80:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    7b84:	f000 f8b0 	bl	7ce8 <__tADSRT_off_veneer>
    7b88:	e7d6      	b.n	7b38 <audioFrameVocal+0x78>
		for (int i = 0; i < numStringsThisBoard; i++)
    7b8a:	2400      	movs	r4, #0
    7b8c:	e7dc      	b.n	7b48 <audioFrameVocal+0x88>
		newPluck = 0;
    7b8e:	4b2f      	ldr	r3, [pc, #188]	; (7c4c <audioFrameVocal+0x18c>)
    7b90:	2200      	movs	r2, #0
    7b92:	601a      	str	r2, [r3, #0]
    7b94:	e79f      	b.n	7ad6 <audioFrameVocal+0x16>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    7b96:	4f37      	ldr	r7, [pc, #220]	; (7c74 <audioFrameVocal+0x1b4>)
    7b98:	eb07 0788 	add.w	r7, r7, r8, lsl #2
    7b9c:	4c36      	ldr	r4, [pc, #216]	; (7c78 <audioFrameVocal+0x1b8>)
    7b9e:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    7ba2:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    7ba6:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    7baa:	ed94 0a08 	vldr	s0, [r4, #32]
    7bae:	4638      	mov	r0, r7
    7bb0:	f000 fa8a 	bl	80c8 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    7bb4:	edd4 7a07 	vldr	s15, [r4, #28]
    7bb8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 7c7c <audioFrameVocal+0x1bc>
    7bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
    7bc0:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 7c80 <audioFrameVocal+0x1c0>
    7bc4:	ee37 0a80 	vadd.f32	s0, s15, s0
    7bc8:	4638      	mov	r0, r7
    7bca:	f000 fa9d 	bl	8108 <__tVoc_set_velum_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    7bce:	f108 0801 	add.w	r8, r8, #1
    7bd2:	4b27      	ldr	r3, [pc, #156]	; (7c70 <audioFrameVocal+0x1b0>)
    7bd4:	781b      	ldrb	r3, [r3, #0]
    7bd6:	4543      	cmp	r3, r8
    7bd8:	dcdd      	bgt.n	7b96 <audioFrameVocal+0xd6>
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7bda:	2400      	movs	r4, #0
    7bdc:	e011      	b.n	7c02 <audioFrameVocal+0x142>
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    7bde:	f7ff fe9f 	bl	7920 <audioTickVocal>
    7be2:	eddf 7a28 	vldr	s15, [pc, #160]	; 7c84 <audioFrameVocal+0x1c4>
    7be6:	ee20 0a27 	vmul.f32	s0, s0, s15
    7bea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    7bee:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    7bf2:	192a      	adds	r2, r5, r4
    7bf4:	4924      	ldr	r1, [pc, #144]	; (7c88 <audioFrameVocal+0x1c8>)
    7bf6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    7bfa:	3201      	adds	r2, #1
    7bfc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7c00:	3402      	adds	r4, #2
    7c02:	2c7f      	cmp	r4, #127	; 0x7f
    7c04:	ddeb      	ble.n	7bde <audioFrameVocal+0x11e>
	if (switchStrings)
    7c06:	4b21      	ldr	r3, [pc, #132]	; (7c8c <audioFrameVocal+0x1cc>)
    7c08:	681b      	ldr	r3, [r3, #0]
    7c0a:	b9bb      	cbnz	r3, 7c3c <audioFrameVocal+0x17c>
	switchStrings = 0;
    7c0c:	4b1f      	ldr	r3, [pc, #124]	; (7c8c <audioFrameVocal+0x1cc>)
    7c0e:	2200      	movs	r2, #0
    7c10:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    7c12:	4b0d      	ldr	r3, [pc, #52]	; (7c48 <audioFrameVocal+0x188>)
    7c14:	685b      	ldr	r3, [r3, #4]
    7c16:	1b9b      	subs	r3, r3, r6
    7c18:	4a1d      	ldr	r2, [pc, #116]	; (7c90 <audioFrameVocal+0x1d0>)
    7c1a:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7c1c:	ee07 3a90 	vmov	s15, r3
    7c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7c24:	4b1b      	ldr	r3, [pc, #108]	; (7c94 <audioFrameVocal+0x1d4>)
    7c26:	ed93 7a00 	vldr	s14, [r3]
    7c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
    7c2e:	4b1a      	ldr	r3, [pc, #104]	; (7c98 <audioFrameVocal+0x1d8>)
    7c30:	edc3 7a00 	vstr	s15, [r3]
}
    7c34:	ecbd 8b02 	vpop	{d8}
    7c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switchStringModel(switchStrings);
    7c3c:	4b13      	ldr	r3, [pc, #76]	; (7c8c <audioFrameVocal+0x1cc>)
    7c3e:	6818      	ldr	r0, [r3, #0]
    7c40:	f7f9 face 	bl	11e0 <switchStringModel>
    7c44:	e7e2      	b.n	7c0c <audioFrameVocal+0x14c>
    7c46:	bf00      	nop
    7c48:	e0001000 	.word	0xe0001000
    7c4c:	20004eb8 	.word	0x20004eb8
    7c50:	20013dd4 	.word	0x20013dd4
    7c54:	37800080 	.word	0x37800080
    7c58:	20004ec4 	.word	0x20004ec4
    7c5c:	20013df4 	.word	0x20013df4
    7c60:	20013dec 	.word	0x20013dec
    7c64:	20013da4 	.word	0x20013da4
    7c68:	20004dd4 	.word	0x20004dd4
    7c6c:	20004f28 	.word	0x20004f28
    7c70:	200004b1 	.word	0x200004b1
    7c74:	2001d13c 	.word	0x2001d13c
    7c78:	20004df8 	.word	0x20004df8
    7c7c:	3ecccccd 	.word	0x3ecccccd
    7c80:	3c23d70a 	.word	0x3c23d70a
    7c84:	4b000000 	.word	0x4b000000
    7c88:	30000000 	.word	0x30000000
    7c8c:	20013e0c 	.word	0x20013e0c
    7c90:	20013e10 	.word	0x20013e10
    7c94:	200004a4 	.word	0x200004a4
    7c98:	20004de4 	.word	0x20004de4
    7c9c:	00000000 	.word	0x00000000

00007ca0 <__tSimpleLivingString3_setFreq_veneer>:
    7ca0:	f85f f000 	ldr.w	pc, [pc]	; 7ca4 <__tSimpleLivingString3_setFreq_veneer+0x4>
    7ca4:	08012cb9 	.word	0x08012cb9

00007ca8 <__mtofTableLookup_veneer>:
    7ca8:	f85f f000 	ldr.w	pc, [pc]	; 7cac <__mtofTableLookup_veneer+0x4>
    7cac:	080006e1 	.word	0x080006e1

00007cb0 <__HAL_RNG_GenerateRandomNumber_veneer>:
    7cb0:	f85f f000 	ldr.w	pc, [pc]	; 7cb4 <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    7cb4:	0800861d 	.word	0x0800861d

00007cb8 <__arm_sin_f32_veneer>:
    7cb8:	f85f f000 	ldr.w	pc, [pc]	; 7cbc <__arm_sin_f32_veneer+0x4>
    7cbc:	08015bc5 	.word	0x08015bc5

00007cc0 <__tVZFilterHS_tick_veneer>:
    7cc0:	f85f f000 	ldr.w	pc, [pc]	; 7cc4 <__tVZFilterHS_tick_veneer+0x4>
    7cc4:	08010159 	.word	0x08010159

00007cc8 <__tVoc_tick_veneer>:
    7cc8:	f85f f000 	ldr.w	pc, [pc]	; 7ccc <__tVoc_tick_veneer+0x4>
    7ccc:	08014ef9 	.word	0x08014ef9

00007cd0 <__tLinearDelay_tick_veneer>:
    7cd0:	f85f f000 	ldr.w	pc, [pc]	; 7cd4 <__tLinearDelay_tick_veneer+0x4>
    7cd4:	0800d861 	.word	0x0800d861

00007cd8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    7cd8:	f85f f000 	ldr.w	pc, [pc]	; 7cdc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    7cdc:	080132b3 	.word	0x080132b3

00007ce0 <__tNoise_tick_veneer>:
    7ce0:	f85f f000 	ldr.w	pc, [pc]	; 7ce4 <__tNoise_tick_veneer+0x4>
    7ce4:	080127e9 	.word	0x080127e9

00007ce8 <__tADSRT_off_veneer>:
    7ce8:	f85f f000 	ldr.w	pc, [pc]	; 7cec <__tADSRT_off_veneer+0x4>
    7cec:	0800e56f 	.word	0x0800e56f

00007cf0 <__tExpSmooth_init_veneer>:
    7cf0:	f85f f000 	ldr.w	pc, [pc]	; 7cf4 <__tExpSmooth_init_veneer+0x4>
    7cf4:	0800ea35 	.word	0x0800ea35

00007cf8 <__tPBSineTriangle_setShape_veneer>:
    7cf8:	f85f f000 	ldr.w	pc, [pc]	; 7cfc <__tPBSineTriangle_setShape_veneer+0x4>
    7cfc:	0801248f 	.word	0x0801248f

00007d00 <__tVZFilterHS_setFreqFast_veneer>:
    7d00:	f85f f000 	ldr.w	pc, [pc]	; 7d04 <__tVZFilterHS_setFreqFast_veneer+0x4>
    7d04:	080101bd 	.word	0x080101bd

00007d08 <__tTString_free_veneer>:
    7d08:	f85f f000 	ldr.w	pc, [pc]	; 7d0c <__tTString_free_veneer+0x4>
    7d0c:	080132bb 	.word	0x080132bb

00007d10 <__tCycle_init_veneer>:
    7d10:	f85f f000 	ldr.w	pc, [pc]	; 7d14 <__tCycle_init_veneer+0x4>
    7d14:	080120a9 	.word	0x080120a9

00007d18 <__tDiodeFilter_tickEfficient_veneer>:
    7d18:	f85f f000 	ldr.w	pc, [pc]	; 7d1c <__tDiodeFilter_tickEfficient_veneer+0x4>
    7d1c:	08010c41 	.word	0x08010c41

00007d20 <__tSimpleLivingString3_tick_veneer>:
    7d20:	f85f f000 	ldr.w	pc, [pc]	; 7d24 <__tSimpleLivingString3_tick_veneer+0x4>
    7d24:	0801310f 	.word	0x0801310f

00007d28 <__tSimpleLivingString3_free_veneer>:
    7d28:	f85f f000 	ldr.w	pc, [pc]	; 7d2c <__tSimpleLivingString3_free_veneer+0x4>
    7d2c:	08012c75 	.word	0x08012c75

00007d30 <__dbToATableLookup_veneer>:
    7d30:	f85f f000 	ldr.w	pc, [pc]	; 7d34 <__dbToATableLookup_veneer+0x4>
    7d34:	08000661 	.word	0x08000661

00007d38 <__tPBPulse_tick_veneer>:
    7d38:	f85f f000 	ldr.w	pc, [pc]	; 7d3c <__tPBPulse_tick_veneer+0x4>
    7d3c:	080124f5 	.word	0x080124f5

00007d40 <__MX_SPI1_Init_veneer>:
    7d40:	f85f f000 	ldr.w	pc, [pc]	; 7d44 <__MX_SPI1_Init_veneer+0x4>
    7d44:	08002885 	.word	0x08002885

00007d48 <__faster_mtof_veneer>:
    7d48:	f85f f000 	ldr.w	pc, [pc]	; 7d4c <__faster_mtof_veneer+0x4>
    7d4c:	08011b75 	.word	0x08011b75

00007d50 <__tLadderFilter_setQ_veneer>:
    7d50:	f85f f000 	ldr.w	pc, [pc]	; 7d54 <__tLadderFilter_setQ_veneer+0x4>
    7d54:	0801140d 	.word	0x0801140d

00007d58 <__tExpSmooth_free_veneer>:
    7d58:	f85f f000 	ldr.w	pc, [pc]	; 7d5c <__tExpSmooth_free_veneer+0x4>
    7d5c:	0800ea3f 	.word	0x0800ea3f

00007d60 <__tTString_setHarmonic_veneer>:
    7d60:	f85f f000 	ldr.w	pc, [pc]	; 7d64 <__tTString_setHarmonic_veneer+0x4>
    7d64:	08013b85 	.word	0x08013b85

00007d68 <__tSineTriLFO_tick_veneer>:
    7d68:	f85f f000 	ldr.w	pc, [pc]	; 7d6c <__tSineTriLFO_tick_veneer+0x4>
    7d6c:	08012be7 	.word	0x08012be7

00007d70 <__tVZFilterBell_tick_veneer>:
    7d70:	f85f f000 	ldr.w	pc, [pc]	; 7d74 <__tVZFilterBell_tick_veneer+0x4>
    7d74:	080104b9 	.word	0x080104b9

00007d78 <__tEnvelopeFollower_tick_veneer>:
    7d78:	f85f f000 	ldr.w	pc, [pc]	; 7d7c <__tEnvelopeFollower_tick_veneer+0x4>
    7d7c:	0800d735 	.word	0x0800d735

00007d80 <__tDiodeFilter_tick_veneer>:
    7d80:	f85f f000 	ldr.w	pc, [pc]	; 7d84 <__tDiodeFilter_tick_veneer+0x4>
    7d84:	08010979 	.word	0x08010979

00007d88 <__tSawSquareLFO_setFreq_veneer>:
    7d88:	f85f f000 	ldr.w	pc, [pc]	; 7d8c <__tSawSquareLFO_setFreq_veneer+0x4>
    7d8c:	08012aa7 	.word	0x08012aa7

00007d90 <__tLinearDelay_setDelay_veneer>:
    7d90:	f85f f000 	ldr.w	pc, [pc]	; 7d94 <__tLinearDelay_setDelay_veneer+0x4>
    7d94:	0800d96f 	.word	0x0800d96f

00007d98 <__tPBPulse_setFreq_veneer>:
    7d98:	f85f f000 	ldr.w	pc, [pc]	; 7d9c <__tPBPulse_setFreq_veneer+0x4>
    7d9c:	08012579 	.word	0x08012579

00007da0 <__tTriLFO_setPhase_veneer>:
    7da0:	f85f f000 	ldr.w	pc, [pc]	; 7da4 <__tTriLFO_setPhase_veneer+0x4>
    7da4:	08012b9b 	.word	0x08012b9b

00007da8 <__tADSRT_tickNoInterp_veneer>:
    7da8:	f85f f000 	ldr.w	pc, [pc]	; 7dac <__tADSRT_tickNoInterp_veneer+0x4>
    7dac:	0800e829 	.word	0x0800e829

00007db0 <__tADSRT_setDecay_veneer>:
    7db0:	f85f f000 	ldr.w	pc, [pc]	; 7db4 <__tADSRT_setDecay_veneer+0x4>
    7db4:	0800e4a9 	.word	0x0800e4a9

00007db8 <__mtof_veneer>:
    7db8:	f85f f000 	ldr.w	pc, [pc]	; 7dbc <__mtof_veneer+0x4>
    7dbc:	08011ac9 	.word	0x08011ac9

00007dc0 <__tVZFilter_setResonance_veneer>:
    7dc0:	f85f f000 	ldr.w	pc, [pc]	; 7dc4 <__tVZFilter_setResonance_veneer+0x4>
    7dc4:	0800faa9 	.word	0x0800faa9

00007dc8 <__tSquareLFO_setPulseWidth_veneer>:
    7dc8:	f85f f000 	ldr.w	pc, [pc]	; 7dcc <__tSquareLFO_setPulseWidth_veneer+0x4>
    7dcc:	08012991 	.word	0x08012991

00007dd0 <__tVoc_set_tenseness_veneer>:
    7dd0:	f85f f000 	ldr.w	pc, [pc]	; 7dd4 <__tVoc_set_tenseness_veneer+0x4>
    7dd4:	08014fd5 	.word	0x08014fd5

00007dd8 <__tADSRT_setSustain_veneer>:
    7dd8:	f85f f000 	ldr.w	pc, [pc]	; 7ddc <__tADSRT_setSustain_veneer+0x4>
    7ddc:	0800e4d1 	.word	0x0800e4d1

00007de0 <__tCycle_tick_veneer>:
    7de0:	f85f f000 	ldr.w	pc, [pc]	; 7de4 <__tCycle_tick_veneer+0x4>
    7de4:	080120c1 	.word	0x080120c1

00007de8 <__tVZFilterBell_setGain_veneer>:
    7de8:	f85f f000 	ldr.w	pc, [pc]	; 7dec <__tVZFilterBell_setGain_veneer+0x4>
    7dec:	080107a9 	.word	0x080107a9

00007df0 <__setOscilllatorShapes_veneer>:
    7df0:	f85f f000 	ldr.w	pc, [pc]	; 7df4 <__setOscilllatorShapes_veneer+0x4>
    7df4:	08001cc1 	.word	0x08001cc1

00007df8 <__tVoc_setFreq_veneer>:
    7df8:	f85f f000 	ldr.w	pc, [pc]	; 7dfc <__tVoc_setFreq_veneer+0x4>
    7dfc:	08014fb7 	.word	0x08014fb7

00007e00 <__tCycle_setFreq_veneer>:
    7e00:	f85f f000 	ldr.w	pc, [pc]	; 7e04 <__tCycle_setFreq_veneer+0x4>
    7e04:	08012111 	.word	0x08012111

00007e08 <__tIntPhasor_tick_veneer>:
    7e08:	f85f f000 	ldr.w	pc, [pc]	; 7e0c <__tIntPhasor_tick_veneer+0x4>
    7e0c:	080128d5 	.word	0x080128d5

00007e10 <__tSquareLFO_setPhase_veneer>:
    7e10:	f85f f000 	ldr.w	pc, [pc]	; 7e14 <__tSquareLFO_setPhase_veneer+0x4>
    7e14:	080129fd 	.word	0x080129fd

00007e18 <__tTString_setHarmonicity_veneer>:
    7e18:	f85f f000 	ldr.w	pc, [pc]	; 7e1c <__tTString_setHarmonicity_veneer+0x4>
    7e1c:	08013d69 	.word	0x08013d69

00007e20 <__tVZFilter_setFreqFast_veneer>:
    7e20:	f85f f000 	ldr.w	pc, [pc]	; 7e24 <__tVZFilter_setFreqFast_veneer+0x4>
    7e24:	0800f7ad 	.word	0x0800f7ad

00007e28 <__tExpSmooth_tick_veneer>:
    7e28:	f85f f000 	ldr.w	pc, [pc]	; 7e2c <__tExpSmooth_tick_veneer+0x4>
    7e2c:	0800eacd 	.word	0x0800eacd

00007e30 <__tVoc_set_tractLength_veneer>:
    7e30:	f85f f000 	ldr.w	pc, [pc]	; 7e34 <__tVoc_set_tractLength_veneer+0x4>
    7e34:	08014fc9 	.word	0x08014fc9

00007e38 <__tVZFilterHS_setGain_veneer>:
    7e38:	f85f f000 	ldr.w	pc, [pc]	; 7e3c <__tVZFilterHS_setGain_veneer+0x4>
    7e3c:	0801025d 	.word	0x0801025d

00007e40 <__tSVF_setQ_veneer>:
    7e40:	f85f f000 	ldr.w	pc, [pc]	; 7e44 <__tSVF_setQ_veneer+0x4>
    7e44:	0800f391 	.word	0x0800f391

00007e48 <__tPBSawSquare_tick_veneer>:
    7e48:	f85f f000 	ldr.w	pc, [pc]	; 7e4c <__tPBSawSquare_tick_veneer+0x4>
    7e4c:	080126e1 	.word	0x080126e1

00007e50 <__tSimpleLivingString3_setLevMode_veneer>:
    7e50:	f85f f000 	ldr.w	pc, [pc]	; 7e54 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    7e54:	0801301d 	.word	0x0801301d

00007e58 <__tTString_setPickupModAmp_veneer>:
    7e58:	f85f f000 	ldr.w	pc, [pc]	; 7e5c <__tTString_setPickupModAmp_veneer+0x4>
    7e5c:	08013a79 	.word	0x08013a79

00007e60 <__tSVF_tick_veneer>:
    7e60:	f85f f000 	ldr.w	pc, [pc]	; 7e64 <__tSVF_tick_veneer+0x4>
    7e64:	0800f20b 	.word	0x0800f20b

00007e68 <__tSimpleLivingString3_setDecay_veneer>:
    7e68:	f85f f000 	ldr.w	pc, [pc]	; 7e6c <__tSimpleLivingString3_setDecay_veneer+0x4>
    7e6c:	08012f99 	.word	0x08012f99

00007e70 <__tCycle_setPhase_veneer>:
    7e70:	f85f f000 	ldr.w	pc, [pc]	; 7e74 <__tCycle_setPhase_veneer+0x4>
    7e74:	08012129 	.word	0x08012129

00007e78 <__tTString_setFilter_veneer>:
    7e78:	f85f f000 	ldr.w	pc, [pc]	; 7e7c <__tTString_setFilter_veneer+0x4>
    7e7c:	08013aad 	.word	0x08013aad

00007e80 <__setLFOShapes_veneer>:
    7e80:	f85f f000 	ldr.w	pc, [pc]	; 7e84 <__setLFOShapes_veneer+0x4>
    7e84:	08001e99 	.word	0x08001e99

00007e88 <__tADSRT_tick_veneer>:
    7e88:	f85f f000 	ldr.w	pc, [pc]	; 7e8c <__tADSRT_tick_veneer+0x4>
    7e8c:	0800e58d 	.word	0x0800e58d

00007e90 <__tADSRT_clear_veneer>:
    7e90:	f85f f000 	ldr.w	pc, [pc]	; 7e94 <__tADSRT_clear_veneer+0x4>
    7e94:	0800e57f 	.word	0x0800e57f

00007e98 <__tTriLFO_setFreq_veneer>:
    7e98:	f85f f000 	ldr.w	pc, [pc]	; 7e9c <__tTriLFO_setFreq_veneer+0x4>
    7e9c:	08012b35 	.word	0x08012b35

00007ea0 <__tTString_mute_veneer>:
    7ea0:	f85f f000 	ldr.w	pc, [pc]	; 7ea4 <__tTString_mute_veneer+0x4>
    7ea4:	08013a9d 	.word	0x08013a9d

00007ea8 <__tVZFilterLS_tick_veneer>:
    7ea8:	f85f f000 	ldr.w	pc, [pc]	; 7eac <__tVZFilterLS_tick_veneer+0x4>
    7eac:	0800fe39 	.word	0x0800fe39

00007eb0 <__tTapeDelay_setDelay_veneer>:
    7eb0:	f85f f000 	ldr.w	pc, [pc]	; 7eb4 <__tTapeDelay_setDelay_veneer+0x4>
    7eb4:	0800deb1 	.word	0x0800deb1

00007eb8 <__tADSRT_setAttack_veneer>:
    7eb8:	f85f f000 	ldr.w	pc, [pc]	; 7ebc <__tADSRT_setAttack_veneer+0x4>
    7ebc:	0800e481 	.word	0x0800e481

00007ec0 <__tIntPhasor_setFreq_veneer>:
    7ec0:	f85f f000 	ldr.w	pc, [pc]	; 7ec4 <__tIntPhasor_setFreq_veneer+0x4>
    7ec4:	080128f5 	.word	0x080128f5

00007ec8 <__tPBSineTriangle_setFreq_veneer>:
    7ec8:	f85f f000 	ldr.w	pc, [pc]	; 7ecc <__tPBSineTriangle_setFreq_veneer+0x4>
    7ecc:	08012473 	.word	0x08012473

00007ed0 <__LEAF_clip_veneer>:
    7ed0:	f85f f000 	ldr.w	pc, [pc]	; 7ed4 <__LEAF_clip_veneer+0x4>
    7ed4:	08011685 	.word	0x08011685

00007ed8 <__tTString_setTensionSpeed_veneer>:
    7ed8:	f85f f000 	ldr.w	pc, [pc]	; 7edc <__tTString_setTensionSpeed_veneer+0x4>
    7edc:	08013b09 	.word	0x08013b09

00007ee0 <__tPBTriangle_setFreq_veneer>:
    7ee0:	f85f f000 	ldr.w	pc, [pc]	; 7ee4 <__tPBTriangle_setFreq_veneer+0x4>
    7ee4:	080122d5 	.word	0x080122d5

00007ee8 <__tSquareLFO_setFreq_veneer>:
    7ee8:	f85f f000 	ldr.w	pc, [pc]	; 7eec <__tSquareLFO_setFreq_veneer+0x4>
    7eec:	0801296b 	.word	0x0801296b

00007ef0 <__tDiodeFilter_setQ_veneer>:
    7ef0:	f85f f000 	ldr.w	pc, [pc]	; 7ef4 <__tDiodeFilter_setQ_veneer+0x4>
    7ef4:	08010f75 	.word	0x08010f75

00007ef8 <__LEAF_shaper_veneer>:
    7ef8:	f85f f000 	ldr.w	pc, [pc]	; 7efc <__LEAF_shaper_veneer+0x4>
    7efc:	080116a5 	.word	0x080116a5

00007f00 <__tSineTriLFO_setShape_veneer>:
    7f00:	f85f f000 	ldr.w	pc, [pc]	; 7f04 <__tSineTriLFO_setShape_veneer+0x4>
    7f04:	08012c6d 	.word	0x08012c6d

00007f08 <__tSimpleLivingString3_pluck_veneer>:
    7f08:	f85f f000 	ldr.w	pc, [pc]	; 7f0c <__tSimpleLivingString3_pluck_veneer+0x4>
    7f0c:	0801302f 	.word	0x0801302f

00007f10 <__LEAF_map_veneer>:
    7f10:	f85f f000 	ldr.w	pc, [pc]	; 7f14 <__LEAF_map_veneer+0x4>
    7f14:	080114b9 	.word	0x080114b9

00007f18 <__tTString_setRippleDepth_veneer>:
    7f18:	f85f f000 	ldr.w	pc, [pc]	; 7f1c <__tTString_setRippleDepth_veneer+0x4>
    7f1c:	08013b35 	.word	0x08013b35

00007f20 <__tPBSawSquare_setFreq_veneer>:
    7f20:	f85f f000 	ldr.w	pc, [pc]	; 7f24 <__tPBSawSquare_setFreq_veneer+0x4>
    7f24:	08012789 	.word	0x08012789

00007f28 <__arm_fir_decimate_f32_veneer>:
    7f28:	f85f f000 	ldr.w	pc, [pc]	; 7f2c <__arm_fir_decimate_f32_veneer+0x4>
    7f2c:	08015855 	.word	0x08015855

00007f30 <__LEAF_tanh_veneer>:
    7f30:	f85f f000 	ldr.w	pc, [pc]	; 7f34 <__LEAF_tanh_veneer+0x4>
    7f34:	0801173d 	.word	0x0801173d

00007f38 <__tCrusher_setQuality_veneer>:
    7f38:	f85f f000 	ldr.w	pc, [pc]	; 7f3c <__tCrusher_setQuality_veneer+0x4>
    7f3c:	0800e01d 	.word	0x0800e01d

00007f40 <__setFilterTypes_veneer>:
    7f40:	f85f f000 	ldr.w	pc, [pc]	; 7f44 <__setFilterTypes_veneer+0x4>
    7f44:	08001d29 	.word	0x08001d29

00007f48 <__tVZFilterHS_setResonance_veneer>:
    7f48:	f85f f000 	ldr.w	pc, [pc]	; 7f4c <__tVZFilterHS_setResonance_veneer+0x4>
    7f4c:	080102c1 	.word	0x080102c1

00007f50 <__tTriLFO_tick_veneer>:
    7f50:	f85f f000 	ldr.w	pc, [pc]	; 7f54 <__tTriLFO_tick_veneer+0x4>
    7f54:	08012afd 	.word	0x08012afd

00007f58 <__tVoc_setDoubleComputeFlag_veneer>:
    7f58:	f85f f000 	ldr.w	pc, [pc]	; 7f5c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    7f5c:	08014fb1 	.word	0x08014fb1

00007f60 <__tSawSquareLFO_setPhase_veneer>:
    7f60:	f85f f000 	ldr.w	pc, [pc]	; 7f64 <__tSawSquareLFO_setPhase_veneer+0x4>
    7f64:	08012acd 	.word	0x08012acd

00007f68 <__tLadderFilter_tick_veneer>:
    7f68:	f85f f000 	ldr.w	pc, [pc]	; 7f6c <__tLadderFilter_tick_veneer+0x4>
    7f6c:	08011151 	.word	0x08011151

00007f70 <__tTString_pluck_veneer>:
    7f70:	f85f f000 	ldr.w	pc, [pc]	; 7f74 <__tTString_pluck_veneer+0x4>
    7f74:	08013b99 	.word	0x08013b99

00007f78 <__fasterexpf_veneer>:
    7f78:	f85f f000 	ldr.w	pc, [pc]	; 7f7c <__fasterexpf_veneer+0x4>
    7f7c:	0801155d 	.word	0x0801155d

00007f80 <__tPBSaw_tick_veneer>:
    7f80:	f85f f000 	ldr.w	pc, [pc]	; 7f84 <__tPBSaw_tick_veneer+0x4>
    7f84:	0801262d 	.word	0x0801262d

00007f88 <__tSineTriLFO_setFreq_veneer>:
    7f88:	f85f f000 	ldr.w	pc, [pc]	; 7f8c <__tSineTriLFO_setFreq_veneer+0x4>
    7f8c:	08012c21 	.word	0x08012c21

00007f90 <__tPBTriangle_setSkew_veneer>:
    7f90:	f85f f000 	ldr.w	pc, [pc]	; 7f94 <__tPBTriangle_setSkew_veneer+0x4>
    7f94:	080122e9 	.word	0x080122e9

00007f98 <__arm_fir_interpolate_f32_veneer>:
    7f98:	f85f f000 	ldr.w	pc, [pc]	; 7f9c <__arm_fir_interpolate_f32_veneer+0x4>
    7f9c:	080153d5 	.word	0x080153d5

00007fa0 <__tExpSmooth_setValAndDest_veneer>:
    7fa0:	f85f f000 	ldr.w	pc, [pc]	; 7fa4 <__tExpSmooth_setValAndDest_veneer+0x4>
    7fa4:	0800eac1 	.word	0x0800eac1

00007fa8 <__tanhf_veneer>:
    7fa8:	f85f f000 	ldr.w	pc, [pc]	; 7fac <__tanhf_veneer+0x4>
    7fac:	080168a9 	.word	0x080168a9

00007fb0 <__tVZFilter_setFreq_veneer>:
    7fb0:	f85f f000 	ldr.w	pc, [pc]	; 7fb4 <__tVZFilter_setFreq_veneer+0x4>
    7fb4:	0800f77d 	.word	0x0800f77d

00007fb8 <__tTString_setFreq_veneer>:
    7fb8:	f85f f000 	ldr.w	pc, [pc]	; 7fbc <__tTString_setFreq_veneer+0x4>
    7fbc:	0801367d 	.word	0x0801367d

00007fc0 <__tSineTriLFO_setPhase_veneer>:
    7fc0:	f85f f000 	ldr.w	pc, [pc]	; 7fc4 <__tSineTriLFO_setPhase_veneer+0x4>
    7fc4:	08012c47 	.word	0x08012c47

00007fc8 <__tSimpleLivingString3_setTargetLev_veneer>:
    7fc8:	f85f f000 	ldr.w	pc, [pc]	; 7fcc <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    7fcc:	08012ff9 	.word	0x08012ff9

00007fd0 <__tADSRT_setLeakFactor_veneer>:
    7fd0:	f85f f000 	ldr.w	pc, [pc]	; 7fd4 <__tADSRT_setLeakFactor_veneer+0x4>
    7fd4:	0800e525 	.word	0x0800e525

00007fd8 <__tVZFilterBell_setBandwidth_veneer>:
    7fd8:	f85f f000 	ldr.w	pc, [pc]	; 7fdc <__tVZFilterBell_setBandwidth_veneer+0x4>
    7fdc:	08010519 	.word	0x08010519

00007fe0 <__tTString_setPhantomHarmonicsGain_veneer>:
    7fe0:	f85f f000 	ldr.w	pc, [pc]	; 7fe4 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    7fe4:	08013af9 	.word	0x08013af9

00007fe8 <__tLadderFilter_setFreqFast_veneer>:
    7fe8:	f85f f000 	ldr.w	pc, [pc]	; 7fec <__tLadderFilter_setFreqFast_veneer+0x4>
    7fec:	0801139d 	.word	0x0801139d

00007ff0 <__tADSRT_init_veneer>:
    7ff0:	f85f f000 	ldr.w	pc, [pc]	; 7ff4 <__tADSRT_init_veneer+0x4>
    7ff4:	0800e475 	.word	0x0800e475

00007ff8 <__tTString_setTensionGain_veneer>:
    7ff8:	f85f f000 	ldr.w	pc, [pc]	; 7ffc <__tTString_setTensionGain_veneer+0x4>
    7ffc:	08013af1 	.word	0x08013af1

00008000 <__tPBTriangle_tick_veneer>:
    8000:	f85f f000 	ldr.w	pc, [pc]	; 8004 <__tPBTriangle_tick_veneer+0x4>
    8004:	080121ad 	.word	0x080121ad

00008008 <__tADSRT_on_veneer>:
    8008:	f85f f000 	ldr.w	pc, [pc]	; 800c <__tADSRT_on_veneer+0x4>
    800c:	0800e549 	.word	0x0800e549

00008010 <__MX_SPI5_Init_veneer>:
    8010:	f85f f000 	ldr.w	pc, [pc]	; 8014 <__MX_SPI5_Init_veneer+0x4>
    8014:	080028d1 	.word	0x080028d1

00008018 <__HAL_SPI_Abort_veneer>:
    8018:	f85f f000 	ldr.w	pc, [pc]	; 801c <__HAL_SPI_Abort_veneer+0x4>
    801c:	0800a729 	.word	0x0800a729

00008020 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    8020:	f85f f000 	ldr.w	pc, [pc]	; 8024 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    8024:	08013005 	.word	0x08013005

00008028 <__tSawSquareLFO_tick_veneer>:
    8028:	f85f f000 	ldr.w	pc, [pc]	; 802c <__tSawSquareLFO_tick_veneer+0x4>
    802c:	08012a65 	.word	0x08012a65

00008030 <__tTString_setPickupPos_veneer>:
    8030:	f85f f000 	ldr.w	pc, [pc]	; 8034 <__tTString_setPickupPos_veneer+0x4>
    8034:	08013a71 	.word	0x08013a71

00008038 <__tTString_setDecay_veneer>:
    8038:	f85f f000 	ldr.w	pc, [pc]	; 803c <__tTString_setDecay_veneer+0x4>
    803c:	08013a19 	.word	0x08013a19

00008040 <__tTString_tick_veneer>:
    8040:	f85f f000 	ldr.w	pc, [pc]	; 8044 <__tTString_tick_veneer+0x4>
    8044:	08013351 	.word	0x08013351

00008048 <__setEffectsFunctions_veneer>:
    8048:	f85f f000 	ldr.w	pc, [pc]	; 804c <__setEffectsFunctions_veneer+0x4>
    804c:	080017c1 	.word	0x080017c1

00008050 <__tPBPulse_setWidth_veneer>:
    8050:	f85f f000 	ldr.w	pc, [pc]	; 8054 <__tPBPulse_setWidth_veneer+0x4>
    8054:	08012591 	.word	0x08012591

00008058 <__tPBSineTriangle_tick_veneer>:
    8058:	f85f f000 	ldr.w	pc, [pc]	; 805c <__tPBSineTriangle_tick_veneer+0x4>
    805c:	0801236f 	.word	0x0801236f

00008060 <__tDiodeFilter_setFreqFast_veneer>:
    8060:	f85f f000 	ldr.w	pc, [pc]	; 8064 <__tDiodeFilter_setFreqFast_veneer+0x4>
    8064:	08010f0d 	.word	0x08010f0d

00008068 <__tSimpleLivingString3_initToPool_veneer>:
    8068:	f85f f000 	ldr.w	pc, [pc]	; 806c <__tSimpleLivingString3_initToPool_veneer+0x4>
    806c:	08012d79 	.word	0x08012d79

00008070 <__tCompressor_tick_veneer>:
    8070:	f85f f000 	ldr.w	pc, [pc]	; 8074 <__tCompressor_tick_veneer+0x4>
    8074:	0800e139 	.word	0x0800e139

00008078 <__tVZFilterLS_setFreqFast_veneer>:
    8078:	f85f f000 	ldr.w	pc, [pc]	; 807c <__tVZFilterLS_setFreqFast_veneer+0x4>
    807c:	0800fe9d 	.word	0x0800fe9d

00008080 <__tTString_initToPool_veneer>:
    8080:	f85f f000 	ldr.w	pc, [pc]	; 8084 <__tTString_initToPool_veneer+0x4>
    8084:	080136c9 	.word	0x080136c9

00008088 <__tPBSaw_setFreq_veneer>:
    8088:	f85f f000 	ldr.w	pc, [pc]	; 808c <__tPBSaw_setFreq_veneer+0x4>
    808c:	08012685 	.word	0x08012685

00008090 <__fastSine_veneer>:
    8090:	f85f f000 	ldr.w	pc, [pc]	; 8094 <__fastSine_veneer+0x4>
    8094:	08011855 	.word	0x08011855

00008098 <__HAL_SPI_Receive_DMA_veneer>:
    8098:	f85f f000 	ldr.w	pc, [pc]	; 809c <__HAL_SPI_Receive_DMA_veneer+0x4>
    809c:	0800a315 	.word	0x0800a315

000080a0 <__tVZFilterLS_setGain_veneer>:
    80a0:	f85f f000 	ldr.w	pc, [pc]	; 80a4 <__tVZFilterLS_setGain_veneer+0x4>
    80a4:	0800ff3d 	.word	0x0800ff3d

000080a8 <__tCrusher_tick_veneer>:
    80a8:	f85f f000 	ldr.w	pc, [pc]	; 80ac <__tCrusher_tick_veneer+0x4>
    80ac:	0800dfb5 	.word	0x0800dfb5

000080b0 <__tTString_setPickupModFreq_veneer>:
    80b0:	f85f f000 	ldr.w	pc, [pc]	; 80b4 <__tTString_setPickupModFreq_veneer+0x4>
    80b4:	08013a8d 	.word	0x08013a8d

000080b8 <__tSawSquareLFO_setShape_veneer>:
    80b8:	f85f f000 	ldr.w	pc, [pc]	; 80bc <__tSawSquareLFO_setShape_veneer+0x4>
    80bc:	08012af3 	.word	0x08012af3

000080c0 <__changeOversampling_veneer>:
    80c0:	f85f f000 	ldr.w	pc, [pc]	; 80c4 <__changeOversampling_veneer+0x4>
    80c4:	08003335 	.word	0x08003335

000080c8 <__tVoc_set_tongue_shape_and_touch_veneer>:
    80c8:	f85f f000 	ldr.w	pc, [pc]	; 80cc <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    80cc:	08015259 	.word	0x08015259

000080d0 <__tIntPhasor_setPhase_veneer>:
    80d0:	f85f f000 	ldr.w	pc, [pc]	; 80d4 <__tIntPhasor_setPhase_veneer+0x4>
    80d4:	0801290d 	.word	0x0801290d

000080d8 <__tHighpass_tick_veneer>:
    80d8:	f85f f000 	ldr.w	pc, [pc]	; 80dc <__tHighpass_tick_veneer+0x4>
    80dc:	0800f457 	.word	0x0800f457

000080e0 <__fromAscii_veneer>:
    80e0:	f85f f000 	ldr.w	pc, [pc]	; 80e4 <__fromAscii_veneer+0x4>
    80e4:	0800200f 	.word	0x0800200f

000080e8 <__tExpSmooth_setDest_veneer>:
    80e8:	f85f f000 	ldr.w	pc, [pc]	; 80ec <__tExpSmooth_setDest_veneer+0x4>
    80ec:	0800eab1 	.word	0x0800eab1

000080f0 <__tCrusher_setSamplingRatio_veneer>:
    80f0:	f85f f000 	ldr.w	pc, [pc]	; 80f4 <__tCrusher_setSamplingRatio_veneer+0x4>
    80f4:	0800e085 	.word	0x0800e085

000080f8 <__tPBSawSquare_setShape_veneer>:
    80f8:	f85f f000 	ldr.w	pc, [pc]	; 80fc <__tPBSawSquare_setShape_veneer+0x4>
    80fc:	080127a1 	.word	0x080127a1

00008100 <__tSVF_setFreqFast_veneer>:
    8100:	f85f f000 	ldr.w	pc, [pc]	; 8104 <__tSVF_setFreqFast_veneer+0x4>
    8104:	0800f301 	.word	0x0800f301

00008108 <__tVoc_set_velum_veneer>:
    8108:	f85f f000 	ldr.w	pc, [pc]	; 810c <__tVoc_set_velum_veneer+0x4>
    810c:	08014fdf 	.word	0x08014fdf

00008110 <__tCrusher_setRound_veneer>:
    8110:	f85f f000 	ldr.w	pc, [pc]	; 8114 <__tCrusher_setRound_veneer+0x4>
    8114:	0800e07d 	.word	0x0800e07d

00008118 <__tVZFilter_tickEfficient_veneer>:
    8118:	f85f f000 	ldr.w	pc, [pc]	; 811c <__tVZFilter_tickEfficient_veneer+0x4>
    811c:	0800f4ad 	.word	0x0800f4ad

00008120 <__tVZFilter_setGain_veneer>:
    8120:	f85f f000 	ldr.w	pc, [pc]	; 8124 <__tVZFilter_setGain_veneer+0x4>
    8124:	0800fa71 	.word	0x0800fa71

00008128 <__tSimpleLivingString3_setLevStrength_veneer>:
    8128:	f85f f000 	ldr.w	pc, [pc]	; 812c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    812c:	08013011 	.word	0x08013011

00008130 <__tTString_setSlideGain_veneer>:
    8130:	f85f f000 	ldr.w	pc, [pc]	; 8134 <__tTString_setSlideGain_veneer+0x4>
    8134:	08013b01 	.word	0x08013b01

00008138 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    8138:	f85f f000 	ldr.w	pc, [pc]	; 813c <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    813c:	0800a4dd 	.word	0x0800a4dd

00008140 <__tVoc_init_veneer>:
    8140:	f85f f000 	ldr.w	pc, [pc]	; 8144 <__tVoc_init_veneer+0x4>
    8144:	08014eef 	.word	0x08014eef

00008148 <__tSquareLFO_tick_veneer>:
    8148:	f85f f000 	ldr.w	pc, [pc]	; 814c <__tSquareLFO_tick_veneer+0x4>
    814c:	08012931 	.word	0x08012931

00008150 <__tCrusher_setOperation_veneer>:
    8150:	f85f f000 	ldr.w	pc, [pc]	; 8154 <__tCrusher_setOperation_veneer+0x4>
    8154:	0800e009 	.word	0x0800e009

00008158 <__tVZFilterBell_setFreq_veneer>:
    8158:	f85f f000 	ldr.w	pc, [pc]	; 815c <__tVZFilterBell_setFreq_veneer+0x4>
    815c:	080105a1 	.word	0x080105a1

00008160 <__tSimpleLivingString3_setDampFreq_veneer>:
    8160:	f85f f000 	ldr.w	pc, [pc]	; 8164 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    8164:	08012f8d 	.word	0x08012f8d

00008168 <__tVZFilterLS_setResonance_veneer>:
    8168:	f85f f000 	ldr.w	pc, [pc]	; 816c <__tVZFilterLS_setResonance_veneer+0x4>
    816c:	0800ffa5 	.word	0x0800ffa5

00008170 <__tADSRT_setRelease_veneer>:
    8170:	f85f f000 	ldr.w	pc, [pc]	; 8174 <__tADSRT_setRelease_veneer+0x4>
    8174:	0800e4fd 	.word	0x0800e4fd
